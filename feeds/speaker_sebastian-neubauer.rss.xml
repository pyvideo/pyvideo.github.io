<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>6 Years of Docker: The Good, the Bad and Python Packaging</title><link>https://pyvideo.org/pycon-de-2019/6-years-of-docker-the-good-the-bad-and-python-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Sebastian Neubauer&lt;/p&gt;
&lt;p&gt;Track:PyConDE
Local development of python code inside a docker container is surprisingly broken. In this talk I will walk you through the proper setup of a local python development environment using docker.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/A7FWAW"&gt;https://de.pycon.org/program/A7FWAW&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Neubauer</dc:creator><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-10:pycon-de-2019/6-years-of-docker-the-good-the-bad-and-python-packaging.html</guid></item><item><title>There should be one obvious way to bring python into production</title><link>https://pyvideo.org/europython-2017/there-should-be-one-obvious-way-to-bring-python-into-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The DevOps methodology is reality. That said, many developers have to
deal with the process of bringing python applications into
production.
One aphorism of the Zen of Python states: &amp;quot;There should be one-- and
preferably only one --obvious way to do it.&amp;quot;&lt;/p&gt;
&lt;p&gt;While for the language itself and code being written with it, this
advice is often strictly followed for good reasons. For the process
of bringing python into production it is not.&lt;/p&gt;
&lt;p&gt;In the first part of this talk I will give an overview of the
different steps in the delivery pipeline, from packaging to
deployment and the various possible implementations for each of those
steps that emerged over the last years. We will discuss docker, pex,
wheels, debs, and tars. We will learn why fixed environments are
crucial and why pip is not yet what it should be. We learn about the
different runtime environments, from bare metal servers over
ephemeral container clusters to “serverless” and what they impose on
the deployment process and scratch on the surface of configuration
management using tools like Ansible and orchestration frameworks like
Kubernetes. We will also explore the world beyond python by looking
into other languages ecosystems and learn how they addressed and
solved this issue.&lt;/p&gt;
&lt;p&gt;After we understood the requirements and realized that there is not
&amp;quot;one obvious way to do it&amp;quot;, this talk is a call to action: Let us
define and build the “one obvious way” of how we want to bring python
into production!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Neubauer</dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-11:europython-2017/there-should-be-one-obvious-way-to-bring-python-into-production.html</guid></item><item><title>A Pythonic Approach to Continuous Delivery</title><link>https://pyvideo.org/europython-2015/a-pythonic-approach-to-continuous-delivery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Neubauer - A Pythonic Approach to Continuous Delivery
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Software development is all about writing code that delivers
additional value to a customer. Following the agile and lean approach
this value created by code changes should be continuously delivered as
fast, as early and as often as possible without any compromise on the
quality.&lt;/p&gt;
&lt;p&gt;Remarkably, there is a huge gap between the development of the
application code and the reliable and scalable operation of the
application. As an example, most of the tutorials about web
development with Flask or Django end by starting a local “dummy”
server, missing out all the steps needed for production ready
operation of the web service. Furthermore, as there is no “rocket
science” in-between, many proposals to bridge that gap from both
sides, operations and developers start with sentences like: “you just
have to...”, a clear indication that it will cause problems later on
and also a symptom of a cultural gap between developers and operations
staff.&lt;/p&gt;
&lt;p&gt;In this talk I will go through the complete delivery pipeline from
application development to the industrial grade operation, clearly
biased towards the “DevOps” mindset. Instead of presenting a
sophisticated enterprise solution, I will outline the necessary
building blocks for continuous delivery and fill them up with simple
but working poor man's solutions, so that it is equally useful for
professional and non-professional developers and operations engineers.
After the talk you will know how to build such a continuous delivery
pipeline with open-source tools like “Ansible”, “Devpi” and “Jenkins”
and I will share some of my day-to-day experiences with automation in
general. Although many of the concepts are language agnostic I will
focus on the ins and outs in a python universe and outline the
pythonic way of “get this thing running”.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Neubauer</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:europython-2015/a-pythonic-approach-to-continuous-delivery.html</guid></item><item><title>Infrastructure as Code: "pip install" your environment</title><link>https://pyvideo.org/europython-2016/infrastructure-as-code-pip-install-your-environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Neubauer - Infrastructure as Code: &amp;quot;pip install&amp;quot; your environment
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/infrastructure-as-code-pip-install-your-environment"&gt;https://ep2016.europython.eu//conference/talks/infrastructure-as-code-pip-install-your-environment&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this talk I will show how to build your own infrastructure-
as-a-service on the example of &amp;quot;Postgraas&amp;quot;, an open source postgres-
as-a-service I wrote in python just for fun. With a simple curl
request you can get your very own database, just like RDS on AWS. You
will learn how easy it is to create such a remarkably useful service
with hardly three hundred lines of flask, docker and some glue-code, a
project for a rainy Sunday.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Continuous Delivery, DevOps, Lean - all those movements have one thing
in common: extending the process of software development along the
whole value stream, ultimately to the customer. This simple
requirement causes surprising serious difficulties on traditional
operations workflows. All of a sudden, a single manual ticket to the
operations team is a critical blocker in the delivery process.
Therefore all parts of the infrastructure, storage, databases,
identities, compute resources must be provided as a self service for
the developers in order to be able to achieve this goal. What one may
call &amp;quot;the cloud&amp;quot; (including self hosted ones like open stack) is such
a successful model not least because they offer exactly this &amp;quot;ticket-
less&amp;quot; self-service. But why should we wait for &amp;quot;the cloud&amp;quot; to offer
what we really need? We are python developers, we are hackers!&lt;/p&gt;
&lt;p&gt;In this talk I will show how to build your own infrastructure-
as-a-service on the example of &amp;quot;Postgraas&amp;quot;, an open source postgres-
as-a-service I wrote in python just for fun. With a simple curl
request you can get your very own database, just like RDS on AWS. You
will learn how easy it is to create such a remarkably useful service
with hardly three hundred lines of flask, docker and some glue-code, a
project for a rainy Sunday. After the talk you will know how to amaze
your colleagues by eliminating an annoying ticket or manual workflow
with a simple flask app and some creativity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Neubauer</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-01:europython-2016/infrastructure-as-code-pip-install-your-environment.html</guid></item></channel></rss>