<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Sebastiaan Zeeff</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastiaan-zeeff.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-09-24T00:00:00+00:00</updated><subtitle></subtitle><entry><title>The Magic of Self: How Python inserts self into methods</title><link href="https://pyvideo.org/pycon-uk-2023/the-magic-of-self-how-python-inserts-self-into-methods.html" rel="alternate"></link><published>2023-09-24T00:00:00+00:00</published><updated>2023-09-24T00:00:00+00:00</updated><author><name>Sebastiaan Zeeff</name></author><id>tag:pyvideo.org,2023-09-24:/pycon-uk-2023/the-magic-of-self-how-python-inserts-self-into-methods.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how &lt;cite&gt;self&lt;/cite&gt; works? Whenever you call a method, &lt;cite&gt;self&lt;/cite&gt; seems to magically appear as an argument. But behind this dark magic lies a well-defined protocol, the descriptor protocol, that you can implement yourself. Join me and learn how Python inserts &lt;cite&gt;self&lt;/cite&gt; into methods!&lt;/p&gt;
&lt;p&gt;A phrase …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how &lt;cite&gt;self&lt;/cite&gt; works? Whenever you call a method, &lt;cite&gt;self&lt;/cite&gt; seems to magically appear as an argument. But behind this dark magic lies a well-defined protocol, the descriptor protocol, that you can implement yourself. Join me and learn how Python inserts &lt;cite&gt;self&lt;/cite&gt; into methods!&lt;/p&gt;
&lt;p&gt;A phrase that I hear a lot is that “Python is easy to learn but hard to master”. In a way that’s true: Python’s many abstractions allow you to focus on the business logic of your code instead of the lower-level implementation details.&lt;/p&gt;
&lt;p&gt;At the same time, most of Python’s abstractions aren’t &lt;em&gt;magical&lt;/em&gt;: Its versatile data model allows you to hook into almost every aspect of the language to implement objects that behave just as Python’s built-in objects do. This enables you to create new types of objects that have high-level interfaces of their own.&lt;/p&gt;
&lt;p&gt;In this talk, I want to entice you to explore the wonderful landscape of Python’s data model by diving into an especially magical feature: The automatic insertion of &lt;cite&gt;self&lt;/cite&gt; into methods.&lt;/p&gt;
&lt;p&gt;When you first came across &lt;cite&gt;self&lt;/cite&gt; in a method signature, chances are that you learned that inserting the instance into methods is just something Python does for you; that you shouldn’t worry too much about it. I will go one step further and show you that there’s a well-defined protocol behind this magic, the descriptor protocol.&lt;/p&gt;
&lt;p&gt;By the end, not only should you be able to implement descriptors of your own, but you should also be able to recognize that some well-known features of Python, such as properties and classmethods, are implemented using the same descriptor protocol.&lt;/p&gt;
</content><category term="PyCon UK 2023"></category></entry><entry><title>The magic of "self": How Python inserts "self" into methods.</title><link href="https://pyvideo.org/pycon-us-2021/the-magic-of-self-how-python-inserts-self-into-methods.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Sebastiaan Zeeff</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/the-magic-of-self-how-python-inserts-self-into-methods.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A phrase that I hear a lot is &amp;quot;Python is easy to learn, but hard to master&amp;quot;. In a way that's true: Python is easy to learn because its high level of abstraction allows you to focus on the business logic of what you're trying to do instead of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A phrase that I hear a lot is &amp;quot;Python is easy to learn, but hard to master&amp;quot;. In a way that's true: Python is easy to learn because its high level of abstraction allows you to focus on the business logic of what you're trying to do instead of the lower-level implementation details.&lt;/p&gt;
&lt;p&gt;At the same time, Python's abstraction isn't magical: Its versatile data model allows you to hook into almost every part of the language to implement objects that behave just as Python's built-in objects do, enabling you to create similarly high-leveled interfaces for your own objects. That's where &amp;quot;hard to master&amp;quot; comes in: There is so much to learn that you're never done learning.&lt;/p&gt;
&lt;p&gt;In this talk, I want to entice you to look beyond Python's high-level interface into the wonderful landscape of its data model. I'll do that by explaining one of Python's most &amp;quot;magical&amp;quot; features: The automatic insertion of self into methods. Often, to beginners, the insertion of the instance as the first argument to methods is explained as something that Python just does for you: &amp;quot;Don't worry about it, it just happens!&amp;quot;. More intermediate Python programmers typically get so used to self that they hardly notice it anymore in their function signatures, let alone wonder about what's powering it.&lt;/p&gt;
&lt;p&gt;To explain this bit of Python magic, I’ll give you an informal introduction to something called descriptors. To be sure, this talk isn’t going to be an in-depth discussion of the finer details of the descriptor protocol. Rather, it’s aimed at advanced beginners and intermediate Python developers who are eager to get an idea of what lies beneath the surface of Python. With this talk, I hope to pique your curiosity about the more advanced features of the Python programming language and hopefully give you a glimpse of all the things that are possible.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://sebastiaanzeeff.nl/pycon"&gt;https://sebastiaanzeeff.nl/pycon&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Demystifying Python’s Internals: Diving into CPython by implementing a pipe operator</title><link href="https://pyvideo.org/pycon-us-2022/demystifying-pythons-internals-diving-into-cpython-by-implementing-a-pipe-operator.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Sebastiaan Zeeff</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/demystifying-pythons-internals-diving-into-cpython-by-implementing-a-pipe-operator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diving into the CPython source code can feel daunting. Whether you want to start contributing or just want to get a better understanding of Python by exploring its source code, it’s often difficult to know where to start or what you’re missing.&lt;/p&gt;
&lt;p&gt;In my talk, I will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diving into the CPython source code can feel daunting. Whether you want to start contributing or just want to get a better understanding of Python by exploring its source code, it’s often difficult to know where to start or what you’re missing.&lt;/p&gt;
&lt;p&gt;In my talk, I will show you around the CPython source code by implementing a new operator, a pipe operator. While doing so, I will discuss core parts of the internals, such as Python’s grammar, its syntax trees, and the underlying logic that will perform the operation. By the end, you will have a good idea of the moving parts involved in core language features.&lt;/p&gt;
&lt;p&gt;I will also take you through the steps necessary to make it all work. I’ll show you how I obtained a copy of the source code, regenerated the parser and token files, and how I compiled my modified version of CPython. I will also write and run tests to help me implement my changes. This should give you a mental framework that helps you while diving into more comprehensive resources, like the excellent Python Developer’s Guide.&lt;/p&gt;
&lt;p&gt;My talk is aimed at everyone who wants to explore CPython’s internals. You don’t have to be an expert in Python, although some affinity with Python helps with understanding the internals. I will also use C to implement some of the operator logic, but knowledge of C is by no means required. In short, if you’re interested in diving into the CPython source code, this talk is for you.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry></feed>