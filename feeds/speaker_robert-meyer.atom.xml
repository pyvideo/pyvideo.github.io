<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_robert-meyer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-07T00:00:00+00:00</updated><entry><title>Python Unittesting for Ethereum Smart Contracts or how not to create your own Cryptocurrency</title><link href="https://pyvideo.org/pydata-berlin-2018/python-unittesting-for-ethereum-smart-contracts-or-how-not-to-create-your-own-cryptocurrency.html" rel="alternate"></link><published>2018-07-07T00:00:00+00:00</published><updated>2018-07-07T00:00:00+00:00</updated><author><name>Robert Meyer</name></author><id>tag:pyvideo.org,2018-07-07:pydata-berlin-2018/python-unittesting-for-ethereum-smart-contracts-or-how-not-to-create-your-own-cryptocurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ethereum is a Turing complete Blockchain. Instead of just processing
transactions like Bitcoin, the Ethereum Virtual Machine can run
programs. There is one catch regarding any code that is deployed: Fixing
errors is almost impossible. Hence, testing becomes incredibly
important. The beauty of Unittesting in Ethereum? You can do it in
&lt;em&gt;Python&lt;/em&gt; and I will show you how.&lt;/p&gt;
</summary></entry><entry><title>Analysing user comments with Doc2Vec and Machine Learning classification</title><link href="https://pyvideo.org/pydata-berlin-2017/analysing-user-comments-with-doc2vec-and-machine-learning-classification.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>Robert Meyer</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/analysing-user-comments-with-doc2vec-and-machine-learning-classification.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I used the Doc2Vec framework to analyze user comments on German online news articles and uncovered some interesting relations among the data. Furthermore, I fed the resulting Doc2Vec document embeddings as inputs to a supervised machine learning classifier. Can we determine for a particular user comment from which news site it originated?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Doc2Vec is a nice neural network framework for text analysis. The machine learning technique computes so called document and word embeddings, i.e. vector representations of documents and words. These representations can be used to uncover semantic relations. For instance, Doc2Vec may learn that the word &amp;quot;King&amp;quot; is similar to &amp;quot;Queen&amp;quot; but less so to &amp;quot;Database&amp;quot;.&lt;/p&gt;
&lt;p&gt;I used the Doc2Vec framework to analyze user comments on German online news articles and uncovered some interesting relations among the data. Furthermore, I fed the resulting Doc2Vec document embeddings as inputs to a supervised machine learning classifier. Accordingly, given a particular comment, can we determine from which news site it originated? Are there patterns among user comments? Can we identify stereotypical comments for different news sites? Besides presenting the results of my experiments, I will give a short introduction to Doc2Vec.&lt;/p&gt;
</summary></entry><entry><title>pypet: A Python Toolkit for Simulations and Numerical Experiments</title><link href="https://pyvideo.org/pydata-berlin-2016/pypet-a-python-toolkit-for-simulations-and-numerical-experiments.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Robert Meyer</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/pypet-a-python-toolkit-for-simulations-and-numerical-experiments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;pypet manages exploration of the parameter space of any numerical simulation in Python, thereby storing your data into HDF5 files for you. The toolkit offers a new data container which lets you access all your parameters and results from a single source. Data I/O of your simulations and analyses become a piece of cake!&lt;/p&gt;
&lt;p&gt;pypet &lt;a class="reference external" href="http://pypet.readthedocs.org/"&gt;python parameter exploration toolkit&lt;/a&gt; is a new multi-platform Python toolkit for management of simulations and storage of numerical data. Exploring or sampling the space of model parameters is one key aspect of simulations and numerical experiments. pypet was especially designed to allow easy and arbitrary sampling of trajectories through a parameter space beyond simple grid searches.&lt;/p&gt;
&lt;p&gt;Simulation parameters as well as the obtained results are collected by pypet and stored in the widely used &lt;a class="reference external" href="http://www.hdfgroup.org/HDF5/"&gt;HDF5 file format&lt;/a&gt;. This allows fast and convenient loading of data for further analyses. Furthermore, pypet provides an environment with various features. For example, among these are multiprocessing for fast parallel simulations, dynamic loading of data, integration of Git version control, and supervision of experiments via the electronic lab notebook &lt;a class="reference external" href="https://pythonhosted.org/Sumatra/"&gt;Sumatra&lt;/a&gt;. A rich set of data formats is supported encompassing native Python types, Numpy and Scipy data, and &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;pandas DataFrames&lt;/a&gt;. Moreover, the toolkit is easily extendable to allow the user to add customized data formats. pypet is a very flexible tool and suited for short Python scripts as well as large scale projects that involve simulations and numerical experiments.&lt;/p&gt;
</summary><category term="pypet"></category><category term="HDF5"></category></entry></feed>