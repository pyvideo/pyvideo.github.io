<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_luca-bezerra.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>Pull Requests: Merging good practices into your project</title><link href="https://pyvideo.org/djangocon-us-2019/pull-requests-merging-good-practices-into-your-project.html" rel="alternate"></link><published>2019-09-24T00:00:00+00:00</published><updated>2019-09-24T00:00:00+00:00</updated><author><name>Luca Bezerra</name></author><id>tag:pyvideo.org,2019-09-24:djangocon-us-2019/pull-requests-merging-good-practices-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Pull Requests: Merging good practices into your project by Luca Bezerra&lt;/p&gt;
&lt;p&gt;On average, developers spend 45% of their time fixing bugs and technical debt, instead of developing new features, had those bugs been caught during code review. The attendees will learn tips, tools, processes and recommended practices from my experience and from big players (Django, Facebook, etc).&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/pull-requests-merging-good-practices/"&gt;https://2019.djangocon.us/talks/pull-requests-merging-good-practices/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Luca Bezerra ðŸ‘‡
On Twitter: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://twitter.com/lucabezerra_&lt;/span&gt;&lt;/tt&gt;
Official homepage: &lt;a class="reference external" href="https://github.com/lucabezerra/"&gt;https://github.com/lucabezerra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</summary></entry><entry><title>Pull Requests: Merging good practices into your project</title><link href="https://pyvideo.org/pygotham-2019/pull-requests-merging-good-practices-into-your-project.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Luca Bezerra</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/pull-requests-merging-good-practices-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Although known by most, Pull Requests are often not dealt with in the most
effective way. Believe it or not, there are teams that donâ€™t review code at
all! People may assume that a senior developer is experienced enough to not
make any mistakes, or that merely changing those 3 lines of code couldnâ€™t
possibly do any harm to the system. In these cases, itâ€™s not uncommon to
skip the code review in order to cut some time. Unreviewed (or badly
reviewed) code can be extremely dangerous, resulting in huge risks and
unpredictable behavior.&lt;/p&gt;
&lt;p&gt;A survey says that, on average, developers spend 45% of their time fixing
bugs and technical debt, when they could be developing new features instead.
Defining simple guideline files, adopting certain behaviors and setting up
repository configurations are steps that can increase manyfold the code
review performance (in both time and quality). Using review tools both on
server (e.g. Heroku Review Apps) and locally (e.g. linters) can also greatly
increase the processâ€™ speed. Creating templates and checklists ensures no
step is overlooked or forgotten. The list goes on, but enough spoilers for
now. The attendees will learn specific tips, tools, processes and
recommended practices that were compiled from research and real-life use
cases (both from my experience and from big players like Django, Facebook,
Mozilla, etc), along with some survey data that demonstrates why reviewing
code is important.&lt;/p&gt;
</summary></entry><entry><title>Pull Requests - Merging good practices into your project</title><link href="https://pyvideo.org/pybay-2018/pull-requests-merging-good-practices-into-your-project.html" rel="alternate"></link><published>2018-08-18T00:00:00+00:00</published><updated>2018-08-18T00:00:00+00:00</updated><author><name>Luca Bezerra</name></author><id>tag:pyvideo.org,2018-08-18:pybay-2018/pull-requests-merging-good-practices-into-your-project.html</id><summary type="html"></summary></entry></feed>