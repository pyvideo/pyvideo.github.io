<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-higgins.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-07T00:00:00+00:00</updated><entry><title>AI in Healthcare</title><link href="https://pyvideo.org/pydata-berlin-2018/ai-in-healthcare.html" rel="alternate"></link><published>2018-07-07T00:00:00+00:00</published><updated>2018-07-07T00:00:00+00:00</updated><author><name>David Higgins</name></author><id>tag:pyvideo.org,2018-07-07:pydata-berlin-2018/ai-in-healthcare.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will discuss machine learning as it is applied to healthcare. The
particular focus of my talk is on the limitations of pure machine
learning approaches when it comes to biological systems. I will compare
this with pure mathematical model-based approaches, which on the one
hand appear more suitable but ultimately have their own attendant set of
problems. I will finish up with hybrid approaches.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Julia for Scientific Computing and Data Science</title><link href="https://pyvideo.org/pydata-berlin-2017/introduction-to-julia-for-scientific-computing-and-data-science.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>David Higgins</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/introduction-to-julia-for-scientific-computing-and-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developed at MIT, with a focus on fast numerical computing, Julia has a syntactical complexity similar to that of Python or Matlab but a performance orders of magnitude faster. We will present an introduction to the language, followed by a sampling of some of our favourite packages. The focus is on which aspects of Julia are currently ready for use by numerical computing and data scientists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Julia is a new and exciting language, sponsored in part by NumFocus, and developed at MIT. With a focus on fast numerical computing, it has a syntactical complexity similar to that of Python or Matlab but a performance orders of magnitude faster. This means you can quickly code up your ideas in a scripting language, but you don't need to switch langauges when you later need to squeeze out every last ounce of performance on production data.&lt;/p&gt;
&lt;p&gt;Should you stick with Python, or is it time to move to Julia?&lt;/p&gt;
&lt;p&gt;We will try to answer this question by presenting an introduction to the language, followed by a sampling of packages from the most important projects relevant to data and numerical science. Python has become a powerhouse in these fields largely due to its available libraries. Julia is fast making up this ground, with an integrated package manager and the ability to call Python libraries, we will show where the gap has already been bridged and where there is still reason to hold back. We will demonstrate that the language syntax is already as easy as the simplest specialist alternatives (eg. Matlab/Mathematica/S-Plus), but this is a fully fledged programming language, and the libraries are no longer necessarily a reason to hold back.&lt;/p&gt;
&lt;p&gt;The Tutorial format&lt;/p&gt;
&lt;p&gt;We will begin by introducing the basic syntax, showing the paths of least resistance for users moving from Python, Matlab and other major languages. We will quickly move-on to explain the details of how Julia is different from other scripted programming languages. Typically, these differences, such as the system of multiple dispatch, have been specifically chosen as they allow for faster runtimes from scripted code without impacting on read/writeability. Finally, we will work through some specific examples of Visualisation (Plots.jl), Data Wrangling (ie DataFrame-type options), Numerical Optimisation (JuliaOpt/JuMP.jl) and High-Performance Computing (JuliaGPU/OpenCL.jl, also profiling, benchmarking and debugging if time allows) as an introduction to some of the packages currently available in the Julia package ecosystem.&lt;/p&gt;
&lt;p&gt;Note: this is an interactive tutorial please follow the Installation Instructions, which will be posted at &lt;a class="reference external" href="https://github.com/daveh19/pydataberlin2017"&gt;https://github.com/daveh19/pydataberlin2017&lt;/a&gt; shortly before the meeting, if you wish to participate!&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Introduction to Julia for Python Developers</title><link href="https://pyvideo.org/pydata-berlin-2016/introduction-to-julia-for-python-developers.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>David Higgins</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/introduction-to-julia-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;Julia is a performance oriented language written from the ground-up to support numerical processing and parallelisation. The basic syntax of Julia resembles a cross between Matlab and Python, but offers performance which is comparable to compiled C-code. I will present an overview of the language with particular emphasis on where Python users may benefit in using it in their daily work.&lt;/p&gt;
&lt;p&gt;Python users have long benefitted from the less verbose nature of Python, when compared with C and Fortran. However, Python was originally designed for scripting tasks, using dynamic types and widescale object orientation, neither of which features are necessarily beneficial when it comes to numerical computing. Thus, we have seen the widespread use of Python libraries for numerical computation (scipy, numpy, etc.).&lt;/p&gt;
&lt;p&gt;Julia is a new language, developed at MIT, which attempts to learn from the experience of development of Python and similar languages. The main goals are to provide a non-verbose, performance oriented language written from the ground-up to support numerical processing and parallelisation. In its most basic syntax Julia resembles a cross between Matlab and Python, but via compilation through an intermediate level representation (llvm) it offers performance which is comparable to compiled C-code.&lt;/p&gt;
&lt;p&gt;I am not going to argue that Julia is ready for primetime yet. However, it is definitely worth consideration by anyone currently resorting to cython or needing distributed access to large datasets.&lt;/p&gt;
&lt;p&gt;I will present an outline/introduction to the language, including the main benefits and current weaknesses. Of particular interest to the audience may be the fact that Python libraries are importable and callable from within Julia, allowing a continuity of existing workflow but from a Julia-based host environment. My main focus will be for a numerically literate audience who are already contending with the technical limitations of Python and are curious about the new language in town.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/daveh19/pydataberlin2016"&gt;https://github.com/daveh19/pydataberlin2016&lt;/a&gt;&lt;/p&gt;
</summary><category term="julia"></category></entry></feed>