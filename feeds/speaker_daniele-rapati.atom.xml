<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_daniele-rapati.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>Engage the Hyper-Python</title><link href="https://pyvideo.org/pydata-berlin-2017/engage-the-hyper-python.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>Daniele Rapati</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/engage-the-hyper-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A fast paced high-level overview of speed optimisation in Python. What makes a program &amp;quot;slow&amp;quot;? How to tell what is making your program slow. Common speed-up paradigms: parallelization, alternatives to the regular Python interpreter and asynchronous processing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A fast paced high-level overview of speed optimisation in Python. We will start by looking systematically at the most common causes of poor speed, highlighting which resources are being the bottleneck in each case and giving practical advice on how to find out. We will then discuss parallelism with threads and processes, both in the standard library and using celery. We will discuss Pypy and Cython as alternatives to regular Python for CPU intensive tasks. We finish our tour with asynchronous processing in Python 3 using async.io.&lt;/p&gt;
</summary></entry><entry><title>I don't like Mondays-what I learned about data engineering after 2 years on call</title><link href="https://pyvideo.org/europython-2017/i-dont-like-mondays-what-i-learned-about-data-engineering-after-2-years-on-call.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Daniele Rapati</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/i-dont-like-mondays-what-i-learned-about-data-engineering-after-2-years-on-call.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The first weekend of October 2015 my company bought an advert during
the first episode of &amp;quot;Downton Abbey&amp;quot; on Sunday evening. It was so
successful that the website went down for half an hour. We wanted to
look at the analytics and the data to estimate the impact. But they
were having a very hard weekend too: the replica of the production
database we used was unreachable and the only person who knew how to
fix it was on a plane. Monday really was a memorable day.&lt;/p&gt;
&lt;p&gt;This session is about sharing some life experience and best practices
around Data Engineering. Attendants should have some previous
understanding of data and tech in business. Attendants should leave
with an understanding of on-call practices and with some quick win
actions to take.&lt;/p&gt;
&lt;p&gt;What does it mean to be on call?&lt;/p&gt;
&lt;p&gt;How do you make sure that the phone rings as little as possible?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixing versus Root Cause Analysis.&lt;/li&gt;
&lt;li&gt;Systems break at junctures.&lt;/li&gt;
&lt;li&gt;Especially if the juncture is with a third party.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why and when is it worth reacting to errors as soon as they happen?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;External Services.&lt;/li&gt;
&lt;li&gt;Increasing Business Trust.&lt;/li&gt;
&lt;li&gt;Allowing others to build on solid ground.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do you make sure the phone rings when it should?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alerting tools: emails, chat, specialised applications like PagerDuty, OpsGenie and Twilio&lt;/li&gt;
&lt;li&gt;Monitoring systems&lt;/li&gt;
&lt;li&gt;Monitoring data (Data Quality) as a continuous early warning system.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>