<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate><item><title>Communicating Between Microservices</title><link>https://pyvideo.org/pycon-italia-2019/communicating-between-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are not just a bunch of little apps, it’s a connected
ecosystem.&lt;/p&gt;
&lt;p&gt;Within a monolith, code modules invoke each other simply by using
language- level function calls, but in a microservice architecture,
communication between components does not come for free anymore.
Choosing not just a protocol, but a paradigm for communication between
endpoints is considered the most tricky issue of microservice approach.&lt;/p&gt;
&lt;p&gt;Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1638"&gt;https://python.it/feedback-1638&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/communicating-between-microservices.html</guid><category>MessageQueues</category><category>microservices</category><category>HTTP</category><category>communication</category><category>architecture</category><category>websockets</category></item><item><title>Server side story</title><link>https://pyvideo.org/europython-2013/server-side-story.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Deponti</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/server-side-story.html</guid><category>HTTP</category><category>networking</category><category>deploy</category><category>mobile</category><category>javascript</category><category>desktop</category><category>sysadmin</category><category>json</category><category>gevent</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>application-design</category><category>websockets</category><category>architecture</category></item><item><title>Writing websockets applications with uWSGI and Gevent</title><link>https://pyvideo.org/europython-2013/writing-websockets-applications-with-uwsgi-and-gevent.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During the 1.9 development cycle, uWSGI got high-performance websockets
support. Even if lot of pure-python technologies exist for that purpose,
none of them has/had the required performance to fit my company
development target: browser games. Thanks to the high concurrency given
by Gevent, and a couple more of uWSGI-specific features we accomplished
our task. This talk will show you how to use both uWSGI and Gevent to
write real time web apps (and games ;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/writing-websockets-applications-with-uwsgi-and-gevent.html</guid><category>websockets</category></item><item><title>Async Python and Web Sockets</title><link>https://pyvideo.org/odessapy-2018/async-python-and-web-sockets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern webapps react not just to user actions, but also to server events. Such bi-directional communication can be easily achieved using Web Sockets, a protocol standardized by W3C to be a default tool for full-duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Sockets out of the box, Python has multiple options available making it a piece of cake. In combination with native async tools introduced since Python 3.4, the code can be very easy and elegant, leaving no excuses for long polling and other hacks. This talk showcases integrating Web Sockets in Python web-apps, focusing on situations that can make good use of it and presenting implementations with most popular frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-30:odessapy-2018/async-python-and-web-sockets.html</guid><category>websockets</category></item><item><title>How to use Web-Sockets in Python</title><link>https://pyvideo.org/pycon-italia-2018/how-to-use-web-sockets-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Socket integration
out of the box, Python has multiple options available making it a piece
of cake. This talk showcases running Web Sockets with Python web-apps,
starting from situations that can make a good use of it, and followed by
an implementation with most practical frameworks: Tornado and Django
Channels. We will explore a similar style but different underlying
technologies of both, and finish with a live demo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/how-to-use-web-sockets-in-python.html</guid><category>tornado</category><category>javascript</category><category>websockets</category><category>web-applications</category><category>web development</category><category>asyncio</category></item><item><title>Building real time applications with Django</title><link>https://pyvideo.org/pycon-italia-2018/building-real-time-applications-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the introduction of Channels, real time web has become much easier
to work with in Django. It’s now possible to build real time
applications with much less effort in managing the idiosyncrasies of the
async programming and a lot of batteries are included. Starting with a
brief introduction to Channels, we will see how to build a real time
application, both on the Django and the frontend side and how easy it’s
to start experimenting with it. The talk has a very hands-on approach,
to allow the attendees to experiment with the proposed solution and
approach and starting immediately building their own real time
applications with Django.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iacopo Spalletti</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/building-real-time-applications-with-django.html</guid><category>web</category><category>javascript</category><category>websockets</category><category>django</category></item><item><title>La GUI di Genropy</title><link>https://pyvideo.org/pycon-italia-2017/la-gui-di-genropy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lo scopo di quersto talk è di offrire una panoramica della GUI di
Genropy e del suo meccanismo di funzionamento. In particolare verra
mostrato come sia possibile, scrivendo solo codice python, usare genropy
come interfaccia grafica al di fuori del classico uso del gestionale&lt;/p&gt;
&lt;p&gt;Proveremo a vedere come dare un’ interfaccia grafica ad alcuni comandi
di shell e a mostrare come tramite i widget di genropy sia possibile
gestire con poche righe di codice python widget complessi come griglie,
griglie editabili e alberi.&lt;/p&gt;
&lt;p&gt;Vi mostreremo l’utilizzo sia in versione classica nel browser, che con
electron.&lt;/p&gt;
&lt;p&gt;Mostreremo anche l’uso di RPC classiche e di websocket.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Porcari</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/la-gui-di-genropy.html</guid><category>genropy</category><category>gui</category><category>websockets</category></item><item><title>Asynchrone Programmierung mit Tornado</title><link>https://pyvideo.org/pycon-de-2013/asynchrone-programmierung-mit-tornado.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Tornado ist eine asynchrone Netzwerkbibliothek mit der Fähigkeit
zehntausende Verbindungen zu verwalten. Dieser Vortrag legt dar, wie
dies erreicht wird und für welche Probleme Tornado die Lösung ist - und
für welche nicht. Mit Praxisbeispielen wird vorgestellt, wie TCP-Server
und Webanwendungen realisiert werden können und wie man asynchron auch
ohne Callback-Jungle programmieren kann.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Ludwig</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/asynchrone-programmierung-mit-tornado.html</guid><category>asynchron</category><category>non-blocking</category><category>tornado</category><category>websockets</category></item></channel></rss>