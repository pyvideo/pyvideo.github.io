<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_jupyter-lab.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-07T00:00:00+00:00</updated><entry><title>Customizing JupyterLab using extensions</title><link href="https://pyvideo.org/pydata-austin-2019/customizing-jupyterlab-using-extensions.html" rel="alternate"></link><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><author><name>Alex Bozarth</name></author><id>tag:pyvideo.org,2019-12-07:pydata-austin-2019/customizing-jupyterlab-using-extensions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;JupyterLab provides data scientists a singular work environment for notebooks, file editing, and more. Designed to be extendable, JupyterLab allows developers to create new features and improve upon built-in functionality. In this session we will go over JupyterLab extensions and how they can be used to customize JupyterLab for your use case.&lt;/p&gt;
</summary><category term="jupyter lab"></category></entry><entry><title>Working interactively with large and remote datasets in JupyterLab</title><link href="https://pyvideo.org/pydata-austin-2019/working-interactively-with-large-and-remote-datasets-in-jupyterlab.html" rel="alternate"></link><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><author><name>Max Klein</name></author><id>tag:pyvideo.org,2019-12-07:pydata-austin-2019/working-interactively-with-large-and-remote-datasets-in-jupyterlab.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Though Jupyter notebooks are a useful tool for working with datasets of all shapes and sizes, until now a user has had to write their own custom code within the notebook in order to marshal and load large or remote datasets. Recently, significant progress has been made towards adding tools to the JupyterLab UI that will enable working interactively with such datasets.&lt;/p&gt;
</summary><category term="jupyter lab"></category></entry><entry><title>Best tools for Jupyter notebooks</title><link href="https://pyvideo.org/pycon-philippines-2019/best-tools-for-jupyter-notebooks.html" rel="alternate"></link><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><author><name>Dmitry Trofimov</name></author><id>tag:pyvideo.org,2019-02-23:pycon-philippines-2019/best-tools-for-jupyter-notebooks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The jupyter notebook is now a default format for scripting in many areas of computer engineering and education like data science, machine learning, and artificial intelligence. But what are the most efficient practices to work with Jupyter notebooks to get the most out of this technology? In this talk Dmitry Trofimov, team lead of PyCharm IDE, will show how different tools help you solve your daily tasks using Jupyter notebooks: JupyterLab, Hydrogen plugin for Atom, VS Code, and PyCharm (all tools are open-sourced). We will discuss their pros and cons and look at them in action.&lt;/p&gt;
</summary><category term="Jupyter"></category><category term="jupyter lab"></category><category term="jupyterlab"></category></entry><entry><title>Interactive Data Visualization in Jupyter Notebook Using bqplot</title><link href="https://pyvideo.org/pydata-meetups/interactive-data-visualization-in-jupyter-notebook-using-bqplot.html" rel="alternate"></link><published>2017-04-13T00:00:00+00:00</published><updated>2017-04-13T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-04-13:pydata-meetups/interactive-data-visualization-in-jupyter-notebook-using-bqplot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bqplot is a Python plotting library based on d3.js that offers its functionality directly in the Jupyter Notebook, including selections, interactions, and arbitrary css customization. In bqplot, every element of a chart is an interactive widget that can be bound to a python function, which serves as the callback when an interaction takes place. This allows the user to generate full fledged interactive applications directly in the Notebook with just a few lines of Python code. In the second part of the talk, drawing examples from fields like Data Science and Finance, we show examples of building interactive charts and dashboards using bqplot and the ipywidgets framework.&lt;/p&gt;
&lt;p&gt;The talk will also cover bqplot's interaction with the new JupyterLab IDE and what we plan for the future.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Dhruv Madeka is a Quantitative Researcher at Bloomberg LP. His current research interests focus on Machine Learning, Quantitative Finance, Data Visualization and Applied Mathematics. Having graduated from the University of Michigan with a BS in Operations Research and from Boston University with an MS in Mathematical Finance, Dhruv is part of one of the leading research teams in Finance, developing models, software and tools for users to make their data analysis experience richer.&lt;/p&gt;
</summary><category term="bqplot"></category><category term="jupyter lab"></category></entry></feed>