<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Alan Una Larisa</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alan-una-larisa.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Writing tests for a Django application doesn't have to suck: the simplest way to write short, fast and maintainable tests</title><link href="https://pyvideo.org/djangocon-us-2021/writing-tests-for-a-django-application-doesnt-have-to-suck-the-simplest-way-to-write-short-fast-and-maintainable-tests.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Alan Una Larisa</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/writing-tests-for-a-django-application-doesnt-have-to-suck-the-simplest-way-to-write-short-fast-and-maintainable-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Let's face it, writing tests sucks&lt;/p&gt;
&lt;p&gt;There is a widspread belief that software engineers hate writing tests, even if they sometimes don’t like to admit it. This might just be especially true for Django as comprehensively testing Django applications is not exactly straightforward. For a complete coverage we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Let's face it, writing tests sucks&lt;/p&gt;
&lt;p&gt;There is a widspread belief that software engineers hate writing tests, even if they sometimes don’t like to admit it. This might just be especially true for Django as comprehensively testing Django applications is not exactly straightforward. For a complete coverage we need to have unit tests as well as integration tests and oftentimes at least some of those are more difficult to write than the code itself.&lt;/p&gt;
&lt;p&gt;But what should we do about it? Should we do it while hating it (bad), not do it (worse) or, as engineers, try to come up with tools that automate the boring tasks, make our job easier and less error-prone? It seems there is still room for improvement on this front, especially in the Django context.&lt;/p&gt;
&lt;p&gt;### Writing a comprehensive Django test suite sucks even more&lt;/p&gt;
&lt;p&gt;Most software engineers believe unit tests should be independent of the database. If you have ever written unit tests for Django you know that doing so can be very complicated. It requires mocking all of the database queries, usually with the help of Unittest’s [mock](&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;https://docs.python.org/3/library/unittest.mock.html&lt;/a&gt;). While the latter can be an excellent tool for many use cases, it was not made with Django in mind. Consequently mocking queries can be counterintuitive and convoluted, often requiring extra mental gymnastics just to make a simple test pass.&lt;/p&gt;
&lt;p&gt;### Let’s do something about it!&lt;/p&gt;
&lt;p&gt;Writing tests is necessary for larger production codebases, but is good practice for any application. It makes sense that the simpler writing tests is, the more people will do it, and the overall quality of software will improve, so we should strive towards that.&lt;/p&gt;
&lt;p&gt;I attempt to do my part in solving this problem by writing a [library](&lt;a class="reference external" href="https://github.com/larsvonschaff/Django-mockingbird"&gt;https://github.com/larsvonschaff/Django-mockingbird&lt;/a&gt;) (please note the account name is a pseudonym) that helps mock Django models for testing. It automatically constructs an object which mimics your model’s exact behaviour in only one line of code. This makes your tests short, simple, fast and easy to maintain.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry></feed>