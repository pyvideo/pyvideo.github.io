<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 04 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Understanding Concurrency in Python!</title><link>https://pyvideo.org/pybay-2019/understanding-concurrency-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Asyncio is the latest and greatest way to write concurrent code, but are the principles behind it really novel? At its core, asyncio just an implementation of single-threaded, cooperative concurrency. Thats a lot of buzzwords! Let's zoom in on single-threaded, cooperative concurrency more broadly, explore what that means, how it works, and why it's valuable.&lt;/p&gt;
&lt;p&gt;Abstract
There are a few ways to do things at the same time (or almost at the same time) in Python: using multiple threads, multiple processes, and now with asyncio. But there are really only a few ways to do so where the multitasking is cooperative (I'm looking at you asyncio). We will zoom into this third option, which can more broadly be described as single-threaded, cooperative concurrency.&lt;/p&gt;
&lt;p&gt;This talk will explore what each of these terms mean, and why this approach is becoming increasingly popular. Along the way, we will pay homage to some of the precursors of asyncio to understand and appreciate whats going on under the hood. Get ready to roll your sleeves up, dive into the code for simple concurrent programs, and walk away with a better understand of what single-threaded, cooperative concurrency means.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/j9gd3"&gt;https://t.ly/j9gd3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Annie is a Senior Software Engineer at Nylas, where she works almost exclusively in Python. Outside of work, Annie volunteers with Code Nation and teaches computer science at an all-girls high school. She is passionate about making complicated topics accessible and helping others grow as engineers. Annie loves to hike, knit and bake bread.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Annie Cook</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/understanding-concurrency-in-python.html</guid></item><item><title>Convincing an entire engineering org to use (and like) mypy</title><link>https://pyvideo.org/pygotham-2019/convincing-an-entire-engineering-org-to-use-and-like-mypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many engineers’ first encounter with a static type-checker is being told off
by it: you roll your eyes and mypy shouts ERROR. Really, why invest your
precious time in mypy at all? This is my conversion story, from disgruntled
engineer to mypy believer. I’ll share with you the good gospel of its
benefits, strategies to increase buy-in from your team and tips for how to
add mypy into your workflow.&lt;/p&gt;
&lt;p&gt;In a dynamically typed language like Python, it is worth asking, “Why use
mypy and invest precious engineering time to add and check types?” My time
as an engineer at Nylas has seen an engineering org-wide conversion to mypy,
for good reason. I'll share how we were able to gradually increase type
coverage in our entire codebase from 0% to 80%.&lt;/p&gt;
&lt;p&gt;Warming to the change took effort, but the substantial benefits to the
quality and sustainability of our codebase have made me into a mypy
believer. Even so, becoming a believer is only the first step. Next, you
have to inspire your fellow engineers to join your mypy quest. How can you
convince your team to want to put in this extra work? I'll present
strategies for expanding buy-in from your fellow engineers and processes to
ensure that your type coverage does not regress. My story may just make
believers out of you and your team.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Annie Cook</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/convincing-an-entire-engineering-org-to-use-and-like-mypy.html</guid></item></channel></rss>