<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-howes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-16T00:00:00+00:00</updated><entry><title>PyData in Production: Lesson Learned from Various PyData Deployment Strategies</title><link href="https://pyvideo.org/pydata-carolinas-2016/pydata-in-production-lesson-learned-from-various-pydata-deployment-strategies.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Josh Howes</name></author><id>tag:pyvideo.org,2016-09-16:pydata-carolinas-2016/pydata-in-production-lesson-learned-from-various-pydata-deployment-strategies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all love Pandas, Sklearn and the rest of the PyData stack. They
allow us to conduct complex analysis and implement cutting-edge
machine learning models simply and easily. However after the initial
model fitting a common challenge often arises - how do we put these
models in production ensuring that it fits into a larger
organizational architecture? In this talk we outline the various
strateg&lt;/p&gt;
&lt;p&gt;The PyData stack offers a remarkably powerful toolkit for building
complex machine learning and analytical components quickly. However,
machine learning doesn't happen in a vacuum. It is part a large system
of enterprise software responsible for data processing and must play-
well with other tools in the ecosystem. In order to get the benefits
of rapid development while not sacrificing the non-functional
requirements, MaxPoint as implemented and tested multiple deployment
models for software relying on the PyData stack. This talk we walk
through these various deployment models and discuss the trade-offs of
the approach.&lt;/p&gt;
</summary></entry></feed>