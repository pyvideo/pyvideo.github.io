<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Building for 100x scale</title><link>https://pyvideo.org/pycon-za-2016/building-for-100x-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CommCare is an open source platform built in python (Django) designed
for mobile data collection, longitudinal client tracking, decision
support, and behavior change communication. CommCare provides an online
application-building platform through which users build mobile
applications for use by frontline workers.&lt;/p&gt;
&lt;p&gt;The mobile application is used by client-facing frontline work workers
as a client management, data collection and educational tool. Data
entered in the mobile application is submitted to the CommCare servers.&lt;/p&gt;
&lt;p&gt;Currently CommCare supports 14K active mobile users submitting over 1
million forms a month. With new national projects launching soon, it
will need to be able to support 100K users and up to 10 million monthly
forms by the end of 2016 and 1.4M users within the next few years. The
current architecture would not scale to that level due to limitations of
the database and increasing cost of ownership so we have embarked on an
internal project to re-design critical pieces of the platform in order
to support this scale up.&lt;/p&gt;
&lt;p&gt;This talk will describe the old and new architecture and delve into some
of the details of the new architecture and decisions weâ€™ve made along
the way such as changing our primary database, database sharding and
stream processing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Kelly</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/building-for-100x-scale.html</guid></item><item><title>Closing</title><link>https://pyvideo.org/pycon-za-2016/closing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The closing ceremony. A general wrap of the conference. There will also
be announcements about sprints on Saturday and Sunday.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Sharpe</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/closing.html</guid></item><item><title>Computer Vision: Creating a complex color polling project using Python, OpenCV and Raspberry Pi</title><link>https://pyvideo.org/pycon-za-2016/computer-vision-creating-a-complex-color-polling-project-using-python-opencv-and-raspberry-pi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will be talking about creating a computer vision classroom color poll
sheet recognition project using Python, OpenCV and raspberry Pi.
Specifically, looking at detecting color poll-sheets in a classroom of
about 50 - 150 students. Much like how one can poll an audience of
people using a clicker technology and show the results of the audience
with regards to a question asked.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Audience is anyone interested in computer vision, what computer
vision can do and achieve, as well as the hard work required to make
it all happen.&lt;/li&gt;
&lt;li&gt;After the talk the audience can have a glimpse into what it takes to
create a computer vision project, as well as the typical process and
algorithm one would follow in a simple task of creating a computer
vision project using python, opencv and raspberry pi.&lt;/li&gt;
&lt;li&gt;A few aspects I will cover include:&lt;ul&gt;
&lt;li&gt;Computer vision goals&lt;/li&gt;
&lt;li&gt;Simplified overview of the algorithm used&lt;/li&gt;
&lt;li&gt;Going into a bit of detail where the challenges arise&lt;/li&gt;
&lt;li&gt;Example of the the project i worked on&lt;/li&gt;
&lt;li&gt;Results achieved&lt;/li&gt;
&lt;li&gt;A few global interesting projects around computer vision&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will end with a look into the python code involved and talk through
the results of the polling program, as well as any hard to detect areas
and how the system detects these. :)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Irikidzai Muchaneta</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/computer-vision-creating-a-complex-color-polling-project-using-python-opencv-and-raspberry-pi.html</guid></item><item><title>Data Mining and Processing for fun and profit</title><link>https://pyvideo.org/pycon-za-2016/data-mining-and-processing-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="audience"&gt;
&lt;h4&gt;AUDIENCE&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;data scientists (current and aspiring)&lt;/li&gt;
&lt;li&gt;those who want to know more about data mining, analysis, and
processing&lt;/li&gt;
&lt;li&gt;those interested in functional programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;DESCRIPTION&lt;/h4&gt;
&lt;p&gt;Data mining is a key skill that involves transforming data found online
and elsewhere from a hodgepodge of numbers into actionable information.
Using examples ranging from RSS feeds, open data portals, and web
scraping, this tutorial will show you how to efficiently obtain and
transform data from disparate sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;ABSTRACT&lt;/h4&gt;
&lt;p&gt;Data mining is a key skill that any self proclaimed data scientist
should possess. It involves transforming data from disparate sources and
a hodgepodge of numbers into actionable information. Tabular data, e.g.,
csv/excel files, is very common in data mining and greatly benefits from
python's functional programming idioms. For better or for worse, the
leading python data libraries, Numpy and Pandas, eschew the functional
programming style for object-oriented programming.&lt;/p&gt;
&lt;p&gt;Using examples ranging from RSS feeds, the South Africa Data Portal API,
raw excel files, and basic web scraping, this tutorial will show how to
efficiently locate, obtain, transform, and remix data from the web.
These examples will prove that you can do a lot with functional
programming and without the need for Numpy or Pandas.&lt;/p&gt;
&lt;p&gt;Finally, it will introduce meza: a pure python, functional, data
analysis library and alternative to Pandas.&lt;/p&gt;
&lt;p&gt;IPython notebooks and sample data files will be distributed beforehand
on Github to facilitate code distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;OBJECTIVES&lt;/h4&gt;
&lt;p&gt;Attendees will learn what data and data mining are, why they are
important. They will learn some basic functional programming idioms and
see how it is ideally suited to data mining. They will also see in what
areas the 20lb gorilla (Pandas) shines and when a lightweight
alternative (meza) is more practical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-info"&gt;
&lt;h4&gt;ADDITIONAL INFO&lt;/h4&gt;
&lt;div class="section" id="level"&gt;
&lt;h5&gt;Level&lt;/h5&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h5&gt;Prerequisites&lt;/h5&gt;
&lt;p&gt;Students should have at least basic knowledge of python itertools and
functional programming paradigms, e.g., map, filter, reduce, and list
comprehensions.&lt;/p&gt;
&lt;p&gt;Laptops should have python3 and the following pypi libs installed: bs4,
requests, and meza.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="format"&gt;
&lt;h5&gt;Format&lt;/h5&gt;
&lt;p&gt;Students will be instructed in the completion of a series of exercises
that will explore using python for data mining. It will involve lessons
to introduce concepts; demos which implement the concepts using meza,
beautiful soup, and requests; and exercises for students to apply the
concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;OUTLINE&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[10 min] Part I&lt;ul&gt;
&lt;li&gt;[2 min] Intro (lecture)&lt;ul&gt;
&lt;li&gt;Who am I?&lt;/li&gt;
&lt;li&gt;Topics to cover&lt;/li&gt;
&lt;li&gt;format&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[8 min] Definitions (lecture)&lt;ul&gt;
&lt;li&gt;What is data?&lt;/li&gt;
&lt;li&gt;What is data mining?&lt;/li&gt;
&lt;li&gt;Why is it data mining important?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[35 min] Part II&lt;ul&gt;
&lt;li&gt;[15 min] You might not need pandas (demo)&lt;ul&gt;
&lt;li&gt;Obtaining data&lt;/li&gt;
&lt;li&gt;Analyzing and Transforming data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[20 min] interactive data gathering (exercise)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;[45 min] Part III&lt;ul&gt;
&lt;li&gt;[10 min] Introducing meza (demo)&lt;/li&gt;
&lt;li&gt;[20 min] interactive data processing (exercise)&lt;/li&gt;
&lt;li&gt;[15 min] Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuben Cummings</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/data-mining-and-processing-for-fun-and-profit.html</guid></item><item><title>Deep Learning in Python</title><link>https://pyvideo.org/pycon-za-2016/deep-learning-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give an introduction to Neural Networks and Deep Learning
in Python. We will cover some of the history of Neural Networks and
obstacles that were encountered in the 1990s. This will then lead onto
the developments in 2006 and 2012 that lead to the resurgence of
interest in Neural Networks and the rebranding of the field as Deep
Learning. These developments will be illustrated by means of an extended
example of building a classifier of hand written digits on the MNIST
dataset. We will start with a simple Multi-Layer Perceptron and then
build this up into a Stacked Denoising Autoencoder. All code will be
developed using the Keras framework and TensorFlow and can be run on a
simple laptop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tobias Brandt</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/deep-learning-in-python.html</guid><category>deep learning</category><category>keras</category><category>tensorflow</category></item><item><title>Distributed Applications in Python: Celery vs Crossbar</title><link>https://pyvideo.org/pycon-za-2016/distributed-applications-in-python-celery-vs-crossbar.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will discuss two specific methods of implementing
distributed applications in Python. Distributed applications allow one
to improve resiliency and performance, although this can come at the
cost of increased complexity. The trick is to apply a distributed
application framework in situations where that complexity is less
significant than the benefits it provides.&lt;/p&gt;
&lt;p&gt;Of the two systems I will be covering, Celery is by far the better known
and more mature, with version 0.1.0 having been released in 2009. Celery
is currently at version 3.1.23 and has come a long way in that time.
Today it provides a stable and mature distributed task queue with a
focus on real-time execution although it is also capable of cron-like
scheduled operations. Celery is extremely flexible and configurable,
although this comes at the cost of some complexity. Thankfully the
documentation is rock solid and the community large.&lt;/p&gt;
&lt;p&gt;Crossbar is a newer project that was first released in 2013. Compared to
Celery it's less well known, has a smaller community and the
documentation is definitely lacking in terms of quality and robustness.
Despite these flaws Crossbar is a very exciting project that is very
pleasant to work with once you've gotten past the initial learning
curve. While Celery provides a distributed task queue, Crossbar
functions as a WAMP router. WAMP is a routed messaging protocol built on
WebSockets that provides RPC and PubSub. As such it targets a slightly
different space from Celery. That said, there is enough overlap for
discussion.&lt;/p&gt;
&lt;p&gt;Picking a distributed application framework can be tricky as there are a
variety of options available. My aim with this talk is to compare and
contrast two specific frameworks that I have some experience with,
illustrating their similarities, differences, strengths and weaknesses.
I will cover some basic examples for each framework and hopefully
provide the audience with a better idea of why they might choose to use
one or the other (or even both!).&lt;/p&gt;
&lt;p&gt;There is no specific audience focus for this talk as I imagine
distributed applications can be of benefit to many different use-cases.
With that said, my background is in web development and hence my
discussion of the two frameworks in question will probably draw on that
experience. Regardless, I think that anyone with an interest in
distributed applications could benefit from this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Jorgensen</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/distributed-applications-in-python-celery-vs-crossbar.html</guid></item><item><title>Experiences debugging memory bloat and high CPU consumption in python</title><link>https://pyvideo.org/pycon-za-2016/experiences-debugging-memory-bloat-and-high-cpu-consumption-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;This talk is targeted at python developers who develop long running
services, which are susceptible to memory issues or unacceptable CPU
usage (as determined by the developer or operations teams). We focus on
debugging techniques that we have used in constrained environments
(production like environments) where installation of additional software
packages is not permitted, and techniques which we were able to use to
debug a python process without restarting it (to avoid state loss).&lt;/p&gt;
&lt;p&gt;Topics covered in the talk:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;An example debugging session in which memory bloat is diagnosed.&lt;/li&gt;
&lt;li&gt;An example debugging session in which high CPU usage is diagnosed.&lt;/li&gt;
&lt;li&gt;Tools which can be used in debugging these issues, and their limitations.&lt;/li&gt;
&lt;li&gt;Some thoughts about improving how we think about python, and assumptions made by python developers.&lt;/li&gt;
&lt;li&gt;Projects we are (slowly) working on to help us debug python processes in production, or production like environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The audience should learn about some useful standard python libraries
which can be used to debug memory and CPU usage related issues, and how
they were effectively used to solve problems in an enterprise product.
The audience will also be encouraged to think differently about python
programming, and encouraged to think about what it means to select
python (or any other programming language) for a given task.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexandre Hardy</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/experiences-debugging-memory-bloat-and-high-cpu-consumption-in-python.html</guid></item><item><title>Friday Lightning Talks</title><link>https://pyvideo.org/pycon-za-2016/friday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Radio Astronomy and MeerKAT In 5 minutes: A Radio Telescope Run&lt;/strong&gt;
by Neilen Marais&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyCon Zimbabwe&lt;/strong&gt; by Anna Makarudze&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Jinja2 Cli&lt;/strong&gt; by William Stewart&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyCon Namibia&lt;/strong&gt; by Jessica Upani&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django Girls&lt;/strong&gt; by Lisa Adams &amp;amp; Codie Roelf&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pinning Proper Package Versions across Platforms, Languages and
Branches.&lt;/strong&gt; by David Fraser&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Cross</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/friday-lightning-talks.html</guid><category>lightning talks</category></item><item><title>Get Instrumented: How Prometheus Can Unify Your Metrics</title><link>https://pyvideo.org/pycon-za-2016/get-instrumented-how-prometheus-can-unify-your-metrics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Metrics are highly superior to logging in regards of understanding the
past, presence, and future of your applications and systems. They are
cheap to gather (just increment a number!) but setting up a metrics
system to collect and store them is a major task.&lt;/p&gt;
&lt;p&gt;You may have heard of statsd, Riemann, Graphite, InfluxDB, or OpenTSB.
They all look promising but on a closer look itâ€™s apparent that some of
those solutions are straight-out flawed and others are hard to integrate
with each other or even to get up and running.&lt;/p&gt;
&lt;p&gt;Then came Prometheus and gave us independence of UDP, no complex math in
your application, multi-dimensional data by adding labels to values (no
more server names in your metric names!), baked in monitoring
capabilities, integration with many common systems, and official clients
for all major programming languages. In short: a unified way to gather,
process, and present metrics.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;explain why you want to collect metrics,&lt;/li&gt;
&lt;li&gt;give an overview of the problems with existing solutions,&lt;/li&gt;
&lt;li&gt;try to convince you that Prometheus may be what youâ€™ve been waiting
for,&lt;/li&gt;
&lt;li&gt;teach how to impress your co-workers with beautiful graphs and
intelligent monitoring by putting a fully instrumented Python
application into production,&lt;/li&gt;
&lt;li&gt;and finally give you pointers on how to migrate an existing metrics
infrastructure to Prometheus or how to integrate Prometheus therein.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hynek Schlawack</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/get-instrumented-how-prometheus-can-unify-your-metrics.html</guid></item><item><title>How development models affect the team</title><link>https://pyvideo.org/pycon-za-2016/how-development-models-affect-the-team.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There has been a lot said about how to ensure correct quality control
using tests, continuous integration, peer review etc. In this talk I
would like to focus exclusively on my experience as an open source
contributor with various projects. I've contributed extensively to
projects I don't manage (like twisted, mercurial, cpython) and I've
overseen contributions by others to projects like vmprof or PyPy. I
would like to share my experience on how various methods (tests, reviews
etc.) make me feel as a contributor and how easy it is to integrate
changes based on that. I think the human factor of contributions is
often too omitted from the process.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej FijaÅ‚kowski</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/how-development-models-affect-the-team.html</guid></item><item><title>How to use python and flask to capture downtime losses on a production line</title><link>https://pyvideo.org/pycon-za-2016/how-to-use-python-and-flask-to-capture-downtime-losses-on-a-production-line.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is base on how to use python and flask to replace paper
capturing type of the &lt;strong&gt;downtimes&lt;/strong&gt; on a production line.Downtime refers
to the time where the machine is stopped for a particular period/time
while it is suppose to run eg breakdown.This project used python, flask
and a mysql database and it was a web application.It was done as a case
study for Unilever Zimbabwe (pvt) ltd.The project was done on two
washing powder production lines. It was all about capturing and storing
time losses and the specific type of the time loss in real time. I did
this as my first python project so it it presents how you can come up
with an idea from a different field and solve it using python.&lt;/p&gt;
&lt;p&gt;Target audience will be mainly industrial engineers and beginners.It
also showcase the use of software in production factories.This can also
help students and learners on how creative they can become while doing a
project either as an individual task or as an educational
requirement.This talk will showcase how you can implement python in an
enviroment where it is not known or used.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ronald Tendai Maravanyika</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/how-to-use-python-and-flask-to-capture-downtime-losses-on-a-production-line.html</guid></item><item><title>Juggling GPU tasks with asyncio</title><link>https://pyvideo.org/pycon-za-2016/juggling-gpu-tasks-with-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting peak performance with a GPU requires juggling concurrent tasks:
copying data to the GPU, processing data, and copying results back off
can all happen in parallel. In a distributed system, data arrives from
the network and results are sent back over the network. Python's asyncio
module is a great way to manage all these concurrent tasks while
avoiding many of the hazards of multiple threads.&lt;/p&gt;
&lt;p&gt;This talk will describe how I've used asyncio (actually trollius, the
Python 2 backport) to make this all work for GPU-accelerated real-time
processing in the MeerKAT radio telescope. I'll cover some helper
classes I've written for ensuring that operations happen in the right
order, and talk about how changing from a threaded model to trollius has
simplified the code.&lt;/p&gt;
&lt;p&gt;No experience with GPU programming or asyncio/trollius is required or
expected. Some prior exposure to event-driven programming or coroutines
in Python would be useful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Merry</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/juggling-gpu-tasks-with-asyncio.html</guid></item><item><title>Machine Learning in Python - Gaussian Processes</title><link>https://pyvideo.org/pycon-za-2016/machine-learning-in-python-gaussian-processes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any time you have noisy data where you would like to see the underlying
trend then you should think about using Gaussian processes. They will
smooth out any noise and give you a great visualisation of the error
bars as well. Rather than fitting a specific model to the data, Gaussian
processes can model &lt;em&gt;any&lt;/em&gt; smooth function.&lt;/p&gt;
&lt;p&gt;I will show you how to use Python to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fit Gaussian Processes to data&lt;/li&gt;
&lt;li&gt;display the results intuitively&lt;/li&gt;
&lt;li&gt;handle large datasets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will gloss over mathematical detail and instead focus on the
options available to the python programmer. There will be code posted to
github beforehand so you can follow along in the talk, or just scoop up
the useful bits afterwards.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Sterne</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/machine-learning-in-python-gaussian-processes.html</guid></item><item><title>MicroPython: Python for microcontrollers and constrained environments</title><link>https://pyvideo.org/pycon-za-2016/micropython-python-for-microcontrollers-and-constrained-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython has risen from a kickstarter campaign to a feature rich
implementation of Python 3 on microcontrollers. The project is
summarized in the following statement: &amp;quot;MicroPython is a lean and
efficient implementation of the Python 3 programming language that
includes a small subset of the Python standard library and is optimised
to run on microcontrollers and in constrained environments&amp;quot;
(&lt;a class="reference external" href="http://micropython.org/"&gt;http://micropython.org/&lt;/a&gt;). With IOT gaining more momentum daily and
devices such as the ESP8266 (&lt;a class="reference external" href="https://www.sparkfun.com/products/13678"&gt;https://www.sparkfun.com/products/13678&lt;/a&gt;)
now able to serve web pages, MicroPython is a viable candidate for fast
prototyping and simple embedded devices.&lt;/p&gt;
&lt;p&gt;This talk will focus mainly on the ESP8266 &amp;amp; Unix implementation of
MicroPython. The ESP8266 is an amazing device, considering it is the
size of a R5 coin and can run an implementation of Python. The talk will
cover features, limitations and some simple ideas to get going. A demo
of a simple Home Automation/IOT application with MicroPython &amp;amp; the
ESP8266 will also be included.&lt;/p&gt;
&lt;p&gt;This talk aims to bring the familiarity of Python 3 to developers, with
the hope of encouraging hack-a-day type projects without extensive
embedded device knowledge.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christo Goosen</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/micropython-python-for-microcontrollers-and-constrained-environments.html</guid><category>MicroPython</category></item><item><title>Open Source Software Initiatives in Zimbabwe</title><link>https://pyvideo.org/pycon-za-2016/open-source-software-initiatives-in-zimbabwe.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zimbabwean companies and individuals have been consumers of open source
software for over a decade now. Nevertheless, developers in Zimbabwe
have done little in terms of developing an active and vibrant open
source community until 2015 which saw the establishment of PyZim. This
is because affiliation to professional bodies is not heavily emphasized
in most industries, especially the ICT industry. The economic challenges
facing the country for the past two decades have also made affiliation
to such organisations a luxury as the country has over 90% unemployment
rate.&lt;/p&gt;
&lt;p&gt;Given this background, it is no surprise that setting up a vibrant
Python user group has been fraught with many challenges. In my talk, I
intent to share the journey we have traveled in setting up PyZim. I will
also share our experiences organising Django Girls workshops and PyCon
Zimbabwe 2016. I will also share with the audience the challenges faced,
opportunities arising, benefits accrued and important lessons learnt
through the experiences.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Makarudze</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/open-source-software-initiatives-in-zimbabwe.html</guid></item><item><title>Panel Discussion: Teaching Python</title><link>https://pyvideo.org/pycon-za-2016/panel-discussion-teaching-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On Friday morning, there will be a panel discussion on teaching Python.
The panel will follow a simple discussion format with panelists
responding to questions from the audience.&lt;/p&gt;
&lt;div class="section" id="panelists"&gt;
&lt;h4&gt;Panelists&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Andy Rabagliati&lt;/em&gt; (Centre for High Performance Computing)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Anna Makarudze&lt;/em&gt; (Django Girls Harare, PyConZW organizer)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Jessica Upani&lt;/em&gt; (University of Namibia, PyConNA organizer)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Michelle Kuttel&lt;/em&gt; (University of Cape Town)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Simon Cross will be chairing the panel.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Cross</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/panel-discussion-teaching-python.html</guid></item><item><title>Python-assisted creative writing: managing dynamic gender in RPG scenarios</title><link>https://pyvideo.org/pycon-za-2016/python-assisted-creative-writing-managing-dynamic-gender-in-rpg-scenarios.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ability to modify text programmatically through simple scripting can
empower writers to make creative choices which would otherwise be
impossible.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss why it is useful for the gender of
characters in a live action roleplaying game scenario to be an easily
changeable property, and introduce
&lt;a class="reference external" href="https://bitbucket.org/confluence/genderiser"&gt;Genderiser&lt;/a&gt;, a Python
script which is intended to assist non-technical writers in utilising
this technique in their own work.&lt;/p&gt;
&lt;p&gt;The talk is aimed at anyone who is interested in applying their
programming skills to creative writing. I hope to encourage beginners to
use Genderiser and adapt it to their own needsâ€”whether they are creating
a similar type of interactive fiction, or more traditional works such as
novels or short stories.&lt;/p&gt;
&lt;p&gt;There will also be a more technical overview of how the script works,
and how I have attempted to distribute it in a form which is useful to
non-technical users. I will also discuss future directions for the code,
such as the addition of a graphical interface and use of better
packaging and installation tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrianna PiÅ„ska</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/python-assisted-creative-writing-managing-dynamic-gender-in-rpg-scenarios.html</guid></item><item><title>Reliably Distributing Binary Modules</title><link>https://pyvideo.org/pycon-za-2016/reliably-distributing-binary-modules.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping Python libraries is easy! ...until you want to use a C library.
How do you easily and reliably deliver software to users when they may
not have the libraries you depend on, or even a compiler? How do you
handle the significant differences between linux, OS X, Windows,
FreeBSD, and other platforms Python runs on?&lt;/p&gt;
&lt;p&gt;We'll walk through:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The requirements for building C modules in Python.&lt;/li&gt;
&lt;li&gt;Why those requirements contribute to bad UX and create barriers to
adoption.&lt;/li&gt;
&lt;li&gt;How wheels can be used to surmount many of these challenges.&lt;/li&gt;
&lt;li&gt;What kind of infrastructure is required to build these wheels.&lt;/li&gt;
&lt;li&gt;The advantages and potential disadvantages of binary distribution.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Kehrer</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/reliably-distributing-binary-modules.html</guid></item><item><title>Selling groceries online using Postgres, Flask, Docker &amp; Android</title><link>https://pyvideo.org/pycon-za-2016/selling-groceries-online-using-postgres-flask-docker-android.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Startups are exciting. But choosing the right tech-stack can be a
daunting task: You want to be able to move quickly right from the start,
but also remain flexible as the technical requirements inevitably
change.&lt;/p&gt;
&lt;p&gt;In this talk I will describe my own experience of building out the tech
stack for a mobile e-commerce startup. It will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an overview of the main design challenges&lt;/li&gt;
&lt;li&gt;the chosen architecture (database, server-side application layer, API and mobile client)&lt;/li&gt;
&lt;li&gt;how I used Flask to build the API&lt;/li&gt;
&lt;li&gt;how I used Flask-Admin to build a management console&lt;/li&gt;
&lt;li&gt;deploying the backend application using docker-compose.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Petrus Janse van Rensburg</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/selling-groceries-online-using-postgres-flask-docker-android.html</guid></item><item><title>Traversing the last mile to the financially underserved with Python</title><link>https://pyvideo.org/pycon-za-2016/traversing-the-last-mile-to-the-financially-underserved-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the typical mobile data environment for smart phones there are many
tools and frameworks available. However, Jumo's customer base typically
doesn't have access to data or sophisticated smart phones. Instead, the
customer journey is implemented using USSD with out-of-band
communications by SMS. Building a USSD framework to run as part of our
application rather than having to add the operational complexity of
another service was an obvious solution. Python was a great fit for this
work.&lt;/p&gt;
&lt;p&gt;This talk will be a developerâ€™s look at how Jumo implemented a highly
flexible USSD/SMS system with Python, built tools within our system to
manage the complexity of multiple products in multiple markets and
scaled up the system to many tens of thousands of transactions per day.
We will focus on how Pythonâ€™s strengths fit well with the needs of
text-based mobile messaging, what techniques are used to build it for
scale, and how tooling was constructed to deal with the complexity of
multiple user journeys.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ted Pietrzak</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/traversing-the-last-mile-to-the-financially-underserved-with-python.html</guid></item><item><title>An introduction to interfacing with C using CFFI</title><link>https://pyvideo.org/pycon-za-2016/an-introduction-to-interfacing-with-c-using-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python &lt;a class="reference external" href="https://cffi.readthedocs.io/en/latest/"&gt;CFFI (C Foreign Function
Interface)&lt;/a&gt; provides a
powerful set of tools for interacting with C from Python.&lt;/p&gt;
&lt;p&gt;In this tutorial, I will cover the basics of using CFFI, including the
various modes it can be used in. I will also cover several of the more
advanced aspects, such as callbacks, and describe the mechanisms for
distributing modules that use Python CFFI.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neil Muller</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/an-introduction-to-interfacing-with-c-using-cffi.html</guid></item><item><title>Beating the bugs: Simulating drug resistance in viral and bacterial DNA using Python and AWS</title><link>https://pyvideo.org/pycon-za-2016/beating-the-bugs-simulating-drug-resistance-in-viral-and-bacterial-dna-using-python-and-aws.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a species, we're engaged in a crucial evolutionary struggle, and
we're losing: pathogens are evolving resistance to drugs faster than we
can make new ones. To slow down the clock and beat the bugs, we need to
make sure that resistant pathogens don't get a chance to replicate
unchecked in their human hosts. This means doing drug resistance tests
to ensure that we only give patients drugs that their infections will
respond to.&lt;/p&gt;
&lt;p&gt;At Hyrax Biosciences, our software developers build web services that
use machine learning to analyse DNA for drug resistance. While building
Exatype, our drug resistance testing platform, we ran into a classic
problem: how do we build a validation test with a verified result, when
we're already the most sensitive tool on the market? To solve this
problem, we turned to simulation. This talk is about a multithreaded
python tool (Biopython, multiprocessing, numpy, pysam) that simulates
every stage of the evolution of HIV drug resistance and the DNA
sequencing process. Each run returns 300 unique, procedurally-generated
HIV samples from &amp;quot;patients&amp;quot; with different histories and drug resistance
profiles. We host the tool on AWS and integrate with Slack to run
validations and report results.&lt;/p&gt;
&lt;p&gt;The code to simulate your own HIV dataset is available publicly at
&lt;a class="reference external" href="https://github.com/hyraxbio/simulated-data"&gt;https://github.com/hyraxbio/simulated-data&lt;/a&gt;. Other pathogens coming soon.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Imogen Wright</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/beating-the-bugs-simulating-drug-resistance-in-viral-and-bacterial-dna-using-python-and-aws.html</guid></item><item><title>Contributing to python open source Infrastructure and projects</title><link>https://pyvideo.org/pycon-za-2016/contributing-to-python-open-source-infrastructure-and-projects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The python community has gained and seen improvement in tools because of
the various contributions to its open source infrastructure and
projects. Research shows most python open source infrastructure and
projects are survived by an average of two contributors and yet
companies are building palaces using this python open source
infrastructure and projects since it's usually very easy to find the
upstream source for them.&lt;/p&gt;
&lt;p&gt;This talk shall focus on why python developers need to contribute to the
python open source infrastructure and projects now more than before, how
one can contribute to python open source Infrastructure and projects and
what prominent python open source Infrastructure and projects are
available to contribute to.&lt;/p&gt;
&lt;p&gt;During this talk, we will discuss what open source really is, the
difference between open source software and free software, licenses
involved in open source software, why python project owners need to make
their software open source, why python developers and students need to
contribute to python open source Infrastructure and projects now more
than ever , what python open source infrastructure Infrastructure and
projects contribution opportunities students have during summer. We will
also have a walk-through of submitting a pull request to a python open
source project using qutebrowser for an example for attendees who have
never contributed to open source before.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joannah Nanjekye</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/contributing-to-python-open-source-infrastructure-and-projects.html</guid></item><item><title>Ensure Python Development: Practical strides that we can take to ensure Python skills development</title><link>https://pyvideo.org/pycon-za-2016/ensure-python-development-practical-strides-that-we-can-take-to-ensure-python-skills-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are several countries such as Zimbabwe, Nigeria to name a few that
have just started having python events in their countries and I would
like to share what steps we are taking to ensure that we are not just
organizing these events but we are also taking necessary steps to ensure
that in the future we are actually really developing the skills of the
new developers in our nations.&lt;/p&gt;
&lt;p&gt;This will serve as motivation and it will give a sense of direction for
these developing countries. In the end we are hoping to motivate more
countries to follow our steps. We need to show each other support and
share our actions, this will serve that purpose.&lt;/p&gt;
&lt;p&gt;This talk does not need any expertise. It will benefit both new
organizers as well as experienced organizers who have not taken some of
these steps already.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica Upani</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/ensure-python-development-practical-strides-that-we-can-take-to-ensure-python-skills-development.html</guid></item><item><title>Experiments with test setup</title><link>https://pyvideo.org/pycon-za-2016/experiments-with-test-setup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever since test driven development took hold, people have been
experimenting with different ways to deal with setting up and tearing
down test objects and data (amongst other things).&lt;/p&gt;
&lt;p&gt;Focussing on this particular concern (set up and tear down of test
objects), this talk provides an overview of how the mainstream python
tools have developed over time in this regard: unittest, nose and
py.test. A bit of a wider context is also given in terms of two ideas
pioneered by tools in other languages: the annotations of TestNG and
resources of Smalltalk's SUnit. Two ideas that address problems beyond
the reach of the tools themselves are also introduced, namely the
&amp;quot;object mother&amp;quot; and &amp;quot;builder pattern&amp;quot;.&lt;/p&gt;
&lt;p&gt;Against the backdrop of this overview, I also show some of our own
experiments (as part of &lt;a class="reference external" href="http://www.reahl.org"&gt;the Reahl project&lt;/a&gt;) to
translate a combination of the object mother and the builder pattern
into Python -- with surprising results.&lt;/p&gt;
&lt;p&gt;The talk is aimed at people interested in improving the ways we can do
set up for tests and people who are generally interested in how tests
can be made easier to write and more useful. I hope to stimulate more
thoughts around the topic against the backdrop of a slight overview. The
talk is accessible to newcomers to this topic as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iwan Vosloo</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/experiments-with-test-setup.html</guid></item><item><title>Introduction to Test Driven Development with Python</title><link>https://pyvideo.org/pycon-za-2016/introduction-to-test-driven-development-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test driven development is a method of programming that has been talked
about considerably over the past few years. It is a way of programming
that aims to achieve good quality code, by specifying your problems
through writing tests first.&lt;/p&gt;
&lt;p&gt;In my tutorial i will introduce the core concepts of TDD through
creating a simple web application using Python &amp;amp; Django. I will explain
in detail the TDD workflow. Attendees to this tutorial will be
introduced to functional testing with Selenium and to unit testing with
the Python Standard Library`s unittest Module.&lt;/p&gt;
&lt;p&gt;My tutorial is aimed at beginners to Test Driven Development. I expect
attendees to have some familiarity with python and Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Humphrey Butau</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/introduction-to-test-driven-development-with-python.html</guid></item><item><title>Keeping up with the pace of a fast growing community without dying</title><link>https://pyvideo.org/pycon-za-2016/keeping-up-with-the-pace-of-a-fast-growing-community-without-dying.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;New open source communities are born everyday. Some of them are meant to
last long and some others aren't. There's a moment in every community
where it needs to outgrow itself, expand its limits and aim way higher
than ever. This is no necesarily related to its goals but the ecosystem
it needs to stay alive.&lt;/p&gt;
&lt;p&gt;Once a community has gone beyond its limits, the community members,
consumers and leaders will have to keep up with its pace. How do we help
it to remain sane? How do we keep our goals on track while allowing for
further growth? How do we allow it to keep expanding without further
damaging the community?&lt;/p&gt;
&lt;p&gt;These are all questions we ask ourselves everyday in the OpenStack
community and that we've managed to work on without killing ourselves on
the way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Flavio Percoco</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/keeping-up-with-the-pace-of-a-fast-growing-community-without-dying.html</guid></item><item><title>Listen to the Snake</title><link>https://pyvideo.org/pycon-za-2016/listen-to-the-snake.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a great tool that's used in the music industry, anything from
low level protocol support and device integration to streaming and
application automation. My talk will focus on:&lt;/p&gt;
&lt;div class="section" id="midi"&gt;
&lt;h4&gt;MIDI&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is it? How does it work?&lt;/li&gt;
&lt;li&gt;CC - Control Change messages and how they are used in modern
controllers / devices&lt;/li&gt;
&lt;li&gt;Mido - MIDI Objects for Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="osc"&gt;
&lt;h4&gt;OSC&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Open Sound Control?&lt;/li&gt;
&lt;li&gt;Live OSC and controlling Live from a mobile device&lt;/li&gt;
&lt;li&gt;PyOSC&lt;/li&gt;
&lt;li&gt;Ableton Live and Controllerism&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction-to-ableton"&gt;
&lt;h4&gt;Introduction to Ableton&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ableton's Live Object Model&lt;/li&gt;
&lt;li&gt;Python remote scripts and Ableton's API&lt;/li&gt;
&lt;li&gt;Demo: -- Creating a new python remote script for a controller --
Changing the state of the controller -- Kicking off an action from
the controller to Ableton using the LOM&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="internet-radio"&gt;
&lt;h4&gt;Internet Radio&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Darkice&lt;/li&gt;
&lt;li&gt;What is Icecast&lt;/li&gt;
&lt;li&gt;Audio signal programming with Liquidsoap&lt;/li&gt;
&lt;li&gt;Tying it all together with Airtime and Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Pawley</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/listen-to-the-snake.html</guid></item><item><title>Opening</title><link>https://pyvideo.org/pycon-za-2016/opening.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A general welcome and an introduction to all the exciting things that
will be happening at PyConZA 2016!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Sharpe</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/opening.html</guid></item><item><title>Optimizing Python programs, PyPy to the rescue</title><link>https://pyvideo.org/pycon-za-2016/optimizing-python-programs-pypy-to-the-rescue.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I want to show how you can use PyPy for your benefit. It
will kick off with a short introduction covering PyPy and its just in
time compiler. PyPy is the most advanced Python interpreter around and
while it should generally just speed up your programs there is a wide
range of performance that you can get out of PyPy.&lt;/p&gt;
&lt;p&gt;Throughout the talk some developer statements and big applications will
motivate why PyPy is a viable option to optimize your Python programs.
In addition I will present the companies value after switching to PyPy.&lt;/p&gt;
&lt;p&gt;The first part, will cover considerations why one should write Python
programs, and only spend fractions of the development time to optimize
your program. The second part of this session will be about this small
part of time: in cases where you need it, I'll show tools that help you
inspect and change your program to improve it. We will also dive into
one tool more elaborately. VMProf, a platform to inspect your program
while it is running, imposing very little overhead.&lt;/p&gt;
&lt;p&gt;As a result of this talk, an audience member should be equipped with
tools that helps him to understand performance issues and optimize
programs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Plangger</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/optimizing-python-programs-pypy-to-the-rescue.html</guid></item><item><title>Public Python for the greater good</title><link>https://pyvideo.org/pycon-za-2016/public-python-for-the-greater-good.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We at &lt;a class="reference external" href="http://code4sa.org/"&gt;Code For South Africa&lt;/a&gt; use technology to
facilitate promoting informed decision making for positive social
change. This can mean generally being aware of what's going on, as well
as deep critical research and analysis. We run the civic tech movement
&lt;a class="reference external" href="https://codebridge.org.za"&gt;{code}bridge&lt;/a&gt; where people come and hack
together or on their lonesome on civic tech projects. A quick summary
will be given of some outputs of this community in Cape Town and
Ethekwini.&lt;/p&gt;
&lt;p&gt;We'll summarise some work we've done using mostly common python tools
for the good of South African society. In particular I'll show how I've
scraped and mirrored a government website on a tight budget at
{code}bridge for better access to public information and seen usage pick
up right after the local elections. We'll also show how a little bit of
tech can empower citizens to hold government to account, and participate
in the governing and development of our infrastructure. How presumably
boring government notices really come to life when made accessible and
personal.&lt;/p&gt;
&lt;p&gt;This talk is aimed at anyone keen on making a big impact with a little
bit of tech, and interested in improving lives. There are many low
hanging fruit out there where lives can be improved with technology
facilitating the necessary groundwork. I'd like to show you how easy it
is to make an impact.&lt;/p&gt;
&lt;p&gt;This is a heavily revised version of a talk given at DebConf 2016 with
several new projects matured or launched since.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">JD Bothma</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/public-python-for-the-greater-good.html</guid></item><item><title>Python in Viral Bioinformatics Research</title><link>https://pyvideo.org/pycon-za-2016/python-in-viral-bioinformatics-research.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The field of bioinformatics -- using computer technology to store,
process and analyze biological data -- is relatively new, but is
expanding rapidly. Many free and commercial tools, both online and
stand-alone, are available. This presentation will describe the approach
and tools developed in our research group at the University of the
Witwatersrand. Although we research hepatitis B virus, many of the tools
can be used with any biological sequence data (DNA, RNA or amino acids).&lt;/p&gt;
&lt;p&gt;The tools cover several aspects of typical laboratory research,
including tools to process sequence data, automate analyses and report
variations in sequences. The tools were developed to be quick,
lightweight solutions, which could easily be used routinely by
researchers without extensive computer skills. Many of the tools have
been developed in direct response to a specific need.&lt;/p&gt;
&lt;p&gt;Topics covered will include the design approach (online, CGI-scripts, no
frameworks) and the reasons for this approach, as well as the experience
of working as the only bioinformaticist in a wet laboratory. Mention
will also be made of other resources, such as R and SQL, in addition to
Python.&lt;/p&gt;
&lt;p&gt;Several of the tools have been described in published papers. The tools
are all freely available online
(&lt;a class="reference external" href="http://hvdr.bioinf.wits.ac.za/tools"&gt;http://hvdr.bioinf.wits.ac.za/tools&lt;/a&gt;)
and source code for most of the tools is available via GitHub at the
following address:
&lt;a class="reference external" href="https://github.com/DrTrevorBell"&gt;https://github.com/DrTrevorBell&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Bell</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/python-in-viral-bioinformatics-research.html</guid></item><item><title>Python, Pet of Architects</title><link>https://pyvideo.org/pycon-za-2016/python-pet-of-architects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brand-new challenges have arisen in the field of three-dimensional space
and form, such as; architecture, geometry, material, and even energy,
which requires in thorough investigation and understanding of the
outcomes to discover optimum design solutions. However, without this
understanding, analysis and the overlay of interactive data seems
impossible and fanciful. Although it was not possible to analyse and use
data in traditional architecture, today it is getting real to do with
the large volumes of information such as, annual climatic data, sun
positions, environmental data, energy data etc.&lt;/p&gt;
&lt;p&gt;Python is the most adaptable and robust program which we use to analyse,
overlay and optimise data in the field of architecture. We want to
understand how it works in a three-dimensional program such as Rhino and
how it can help us to develop our ideas and utilise the recent
architectural design methodology, which is known as parametric
architecture, or algorithmic architecture.&lt;/p&gt;
&lt;p&gt;We will demonstrate 3 different experiences in the fields of; geometry,
energy, and optimization, and what the approach of each is. Python aids
the design of architectural elements through the relation of form to and
data simulations. This would be of interest to those who want to see the
future of algorithmic design for; architects, designers, and
programmers. There is no experience needed, we just want to express the
enjoyment these tools can add to three-dimensional design.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Navid Hatefnia</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/python-pet-of-architects.html</guid></item><item><title>RevDB, a reverse debugger</title><link>https://pyvideo.org/pycon-za-2016/revdb-a-reverse-debugger.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;RevDB is an experimental &amp;quot;reverse debugger&amp;quot; for Python, similar to
UndoDB-GDB or LL for C. You run your program once, in &amp;quot;record&amp;quot; mode,
producing a log file; once you get buggy behavior, you start the
reverse-debugger on the log file. It gives an (improved) pdb-like
experience, but it is replaying your program exactly as it ran---all
input/outputs are replayed from the log file instead of being redone.&lt;/p&gt;
&lt;p&gt;The main point is that you can then go &lt;em&gt;backward&lt;/em&gt; as well as forward in
time: from a situation that looks really buggy you can go back and
discover how it came to be. You also get &amp;quot;watchpoints&amp;quot;, which are very
useful to find when things change. Watchpoints work both forward and
backward.&lt;/p&gt;
&lt;p&gt;I will show on small examples how you can use it, and also give an idea
about how it works. It is based on PyPy, not CPython, so you need to
ensure your program works on PyPy in the first place (but chances are
that it does).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Rigo</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/revdb-a-reverse-debugger.html</guid></item><item><title>Running Django Applications on GAE - Flexible Environment (Previously Managed VMs)</title><link>https://pyvideo.org/pycon-za-2016/running-django-applications-on-gae-flexible-environment-previously-managed-vms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google App Engine was made Generally Available in 2011 and supported
Python, Go and Java runtimes. From that time , we have seen many popular
Python web applications deployed on Google App Engineâ€™s Standard
Environment. Even with the awesomeness of App Engine, Pythonistas felt
limited by what the standard environment offered.&lt;/p&gt;
&lt;p&gt;App Engine Flexible Environment (Previously called Managed VMâ€™s) solved
the pain points that developers encountered: It allows developers to
customize their Python runtime and even the underlying operating system
using Dockerfiles. App Engine automatically scales your web app and
offers automatic load balancing.&lt;/p&gt;
&lt;p&gt;This talk will explore how to implement microservices, authorization,
SQL and noSQL databases, traffic splitting, logging, full text search,
versioning, security scanning, memcache, and content delivery networks
using App Engine Flexible Environment. This will be shown in practice
through the deployment of a Python/Django Application on the App Engine
Flexible Environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Kinyanjui</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/running-django-applications-on-gae-flexible-environment-previously-managed-vms.html</guid></item><item><title>Scaling Django from server to browser through an efficient caching strategy</title><link>https://pyvideo.org/pycon-za-2016/scaling-django-from-server-to-browser-through-an-efficient-caching-strategy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Praekelt we're responsible for high traffic sites built in Django. An
efficient caching strategy is required to minimize server load and in
this talk we illustrate the techniques we use to serve Telkom's web
site.&lt;/p&gt;
&lt;p&gt;The talk assumes basic Django knowledge.&lt;/p&gt;
&lt;p&gt;We will touch on:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Volatile caching with memcached as backend.&lt;/li&gt;
&lt;li&gt;Template fragment caching.&lt;/li&gt;
&lt;li&gt;View caching.&lt;/li&gt;
&lt;li&gt;HTTP caching headers and how they affect Nginx and browsers.&lt;/li&gt;
&lt;li&gt;Automated cache invalidation.&lt;/li&gt;
&lt;li&gt;Automated Nginx reverse cache purging.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hedley Roos</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/scaling-django-from-server-to-browser-through-an-efficient-caching-strategy.html</guid></item><item><title>Some less obvious uses of SQLite</title><link>https://pyvideo.org/pycon-za-2016/some-less-obvious-uses-of-sqlite.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQLite is arguably the most widely used database system if it's website
is to be believed. From applications in aviation to the cellphone
industry.&lt;/p&gt;
&lt;p&gt;Yet another practical application that has been suggested by it's
creator is that of an application file format. To quote the website:
&amp;quot;SQLite does not compete with client/server databases. SQLite competes
with fopen().&amp;quot;&lt;/p&gt;
&lt;p&gt;In other words, instead of rolling out your own file format, why not use
a file format that is accessible via a commonly known language (SQL)?&lt;/p&gt;
&lt;p&gt;SQLite is included by default in a number of operating systems such as
Blackberry 10 OS, Google Android, Net/Open/FreeBSD, Oracle Solaris 10,
Apple OSX 10.4+ and Windows 10 amongst others. Programming languages
with bindings for SQLite are C, C#, C++, Go, Java, Javascript, PHP,
Python, Lisp and others. This means that SQLite can be used across a
very wide range of the most popular devices and environments. Major
operating systems support Sqlite out of the box, making it easy to port
as well without needing to worry about cross-platform compatibility.&lt;/p&gt;
&lt;p&gt;One example of how SQLite and Python could be of use is in incoming
product information processing. We have various CSV or XML product feeds
that provides locations to product images via a cabal of bash scripts.
The idea would be to convert the information into a common format, ie
SQLite rows and tables and allow jobs to process these rows, instead of
creating bespoke scripts to act directly on the feed files themselves.&lt;/p&gt;
&lt;p&gt;The obvious advantage of using SQLite and Python for this task is that
it keeps overhead down and has the advantage of better structure,
exception handling, portability and extensibility&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Van Ellewee</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/some-less-obvious-uses-of-sqlite.html</guid></item><item><title>Stream processing made easy with riko</title><link>https://pyvideo.org/pycon-za-2016/stream-processing-made-easy-with-riko.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="audience"&gt;
&lt;h4&gt;AUDIENCE&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;data scientists (current and aspiring)&lt;/li&gt;
&lt;li&gt;those who want to know more about data processing&lt;/li&gt;
&lt;li&gt;those who are intimidate by &amp;quot;big data&amp;quot; (java) frameworks and are
interested in a simpler, pure python alternative&lt;/li&gt;
&lt;li&gt;those interested in async and/or parallel programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;DESCRIPTION&lt;/h4&gt;
&lt;p&gt;Big data processing is all the rage these days. Heavyweight frameworks
such as Spark, Storm, Kafka, Samza, and Flink have taken the spotlight
despite their complex setup, java dependency, and intense computer
resource usage.&lt;/p&gt;
&lt;p&gt;Those interested in simple, pure python solutions have limited options.
Most alternative software is synchronous, doesn't perform well on large
data sets, or is poorly documented.&lt;/p&gt;
&lt;p&gt;This talk aims to explain stream processing and its uses, and introduce
riko: a pure python stream processing library built with simplicity in
mind. Complete with various examples, youâ€™ll get to see how riko lazily
processes streams via its synchronous, asynchronous, and parallel
processing APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;OBJECTIVES&lt;/h4&gt;
&lt;p&gt;Attendees will learn what streams are, how to process them, and the
benefits of stream processing. They will also see that most data isn't
&amp;quot;big data&amp;quot; and therefore doesn't require complex (java) systems
(**cough** spark and storm *&lt;em&gt;cough*&lt;/em&gt;) to process it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-abstract"&gt;
&lt;h4&gt;DETAILED ABSTRACT&lt;/h4&gt;
&lt;div class="section" id="stream-processing"&gt;
&lt;h5&gt;Stream processing?&lt;/h5&gt;
&lt;div class="section" id="what-are-streams"&gt;
&lt;h6&gt;What are streams?&lt;/h6&gt;
&lt;p&gt;A stream is a sequence of data. The sequence can be as simple as a list
of integers or as complex as a generator of dictionaries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-you-process-streams"&gt;
&lt;h6&gt;How do you process streams?&lt;/h6&gt;
&lt;p&gt;Stream processing is the act of taking a data stream through a series of
operations that apply a (usually pure) function to each element in the
stream. These operations are pipelined so that the output of one
function is the input of the next one. By using pure functions, the
processing becomes embarrassingly parallel: you can split the items of
the stream into separate processes (or threads) which then perform the
operations simultaneously (without the need for communicating between
processes/threads). [1-4]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-stream-processing-do"&gt;
&lt;h6&gt;What can stream processing do?&lt;/h6&gt;
&lt;p&gt;Stream processing allows you to efficiently manipulate large data sets.
Through the use of lazy evaluation, you can process data stream too
large to fit into memory all at once.&lt;/p&gt;
&lt;p&gt;Additionally, stream processing has several real world applications
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;parsing rss feeds (rss readers, think
&lt;a class="reference external" href="http://feedly.com/"&gt;feedly&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;combining different types data from multiple sources in innovative
ways (mashups, think &lt;a class="reference external" href="http://trendsmap.com/"&gt;trendsmap&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;taking data from multiple sources, manipulating the data into a
homogeneous structure, and storing the result in a database
(extracting, transforming, and loading data; aka ETL, data
wrangling...)&lt;/li&gt;
&lt;li&gt;aggregating similarly structured data from siloed sources and
presenting it via a unified interface (aggregators, think
&lt;a class="reference external" href="kayak.com"&gt;kayak&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[5, 6]&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stream-processing-frameworks"&gt;
&lt;h5&gt;Stream processing frameworks&lt;/h5&gt;
&lt;p&gt;If you've heard anything about stream processing, chances are you've
also heard about frameworks such as Spark, Storm, Kafka, Samza, and
Flink. While popular, these frameworks have a complex setup and
installation process, and are usually overkill for the amount of data
typical python users deal with. Using a few examples, I will show basic
Storm usage and how it stacks up against BASH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-riko"&gt;
&lt;h5&gt;Introducing riko&lt;/h5&gt;
&lt;p&gt;Supporting both Python 2 and 3, riko is the first pure python stream
processing library to support synchronous, asynchronous, and parallel
processing. It's built using functional programming methodology and lazy
evaluation by default.&lt;/p&gt;
&lt;div class="section" id="basic-riko-usage"&gt;
&lt;h6&gt;Basic riko usage&lt;/h6&gt;
&lt;p&gt;Using a series of examples, I will show basic riko usage. Examples will
include counting words, fetching streams, and rss feed manipulation. I
will highlight the key features which make riko a better stream
processing alternative to Storm and the like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="riko-s-many-paradigms"&gt;
&lt;h6&gt;riko's many paradigms&lt;/h6&gt;
&lt;p&gt;Depending on the type of data being processed; a synchronous,
asynchronous, or parallel processing method may be ideal. Fetching data
from multiple sources is suited for asynchronous or thread based
parallel processing. Computational intensive tasks are suited for
processor based parallel processing. And asynchronous processing is best
suited for debugging or low latency environments.&lt;/p&gt;
&lt;p&gt;riko is designed to support all of these paradigms using the same api.
This means switching between paradigms requires trivial code changes
such as adding a yield statement or changing a keyword argument.&lt;/p&gt;
&lt;p&gt;Using a series of examples, I will show each of these paradigms in
action.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuben Cummings</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/stream-processing-made-easy-with-riko.html</guid></item><item><title>Thursday Lightning Talks</title><link>https://pyvideo.org/pycon-za-2016/thursday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;A Taste of Haskell for Pythoneers&lt;/strong&gt; by Pi Delport&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Postgresql Foreign Data Wrapper development with Python&lt;/strong&gt; by
Toufeeq Ockards&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use virtualenv&lt;/strong&gt; by Bruce Merry&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Astrophysics at the Centre for High Performance Computing: Python
everywhere&lt;/strong&gt; by Catherine Cress&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Things the video team are doing, while youâ€™re doing your talk&lt;/strong&gt; by
JP&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neil Muller</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/thursday-lightning-talks.html</guid><category>lightning talks</category></item></channel></rss>