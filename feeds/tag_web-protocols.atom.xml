<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_web-protocols.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Better WebSockets - Server-Sent Events, a carefree alternative</title><link href="https://pyvideo.org/europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Andrei Neagu</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever found yourself in a situation where you:&lt;/div&gt;
&lt;div class="line"&gt;- had to use WbSockets?&lt;/div&gt;
&lt;div class="line"&gt;- had to to create a separate project and had the issue of interfacing
both?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle disconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle reconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle all the above and scale WebSockets?&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If your experience was horrible (like mine was), we shall take a look at
Server-Sent Events, an alternative to WebSockets.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The following arguments will be discussed:&lt;/div&gt;
&lt;div class="line"&gt;- intro to the subject&lt;/div&gt;
&lt;div class="line"&gt;- inner workings&lt;/div&gt;
&lt;div class="line"&gt;- differences from WebSockets&lt;/div&gt;
&lt;div class="line"&gt;- implementation explanation for a generic HTTP server in Python&lt;/div&gt;
&lt;div class="line"&gt;- use cases&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Mobile"></category><category term="System Architecture"></category><category term="Web"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs"></category></entry><entry><title>Look Ma, No HTTP!</title><link href="https://pyvideo.org/europython-2019/look-ma-no-http.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/look-ma-no-http.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'm going to live code a web application that is built
exclusively on top of WebSocket, without using HTTP at all!&lt;/p&gt;
&lt;p&gt;What's the benefit of using WebSocket over HTTP, you may ask? With
WebSocket each client establishes a permanent connection to the server,
so there is no request/response cycle and no need for the client to poll
the server for data. Each side can freely send data to the other side at
any time, so this is an ideal stack for building highly dynamic,
event-driven applications.&lt;/p&gt;
&lt;p&gt;For this live coding exercise I'm going to use the Socket.IO server for
Python, and the Socket.IO client for JavaScript. No Flask, no Django, no
HTTP!&lt;/p&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs"></category></entry></feed>