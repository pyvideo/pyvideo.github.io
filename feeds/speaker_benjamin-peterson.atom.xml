<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_benjamin-peterson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-17T00:00:00+00:00</updated><entry><title>Python Steering Council Panel</title><link href="https://pyvideo.org/pybay-2019/python-steering-council-panel.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-08-17:pybay-2019/python-steering-council-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</summary></entry><entry><title>Python Packaging Progress</title><link href="https://pyvideo.org/pycon-russia-2015/python-packaging-progress.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2015-09-18:pycon-russia-2015/python-packaging-progress.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python packaging is infamous for being brittle and hard to use. Thankfully, a lot of progress has been made in recent years. This talk will explain some of the components and tools in modern Python packaging including pip, PyPI, virtualenv, and wheels.
I'd say the talk is for an intermediate to advanced audience. Ideally, attendees will leave with a clearer idea of how Python packaging works as well as an sense of optimism. :)&lt;/p&gt;
</summary></entry><entry><title>Building Python with Bazel</title><link href="https://pyvideo.org/pycon-israel-2016/building-python-with-bazel.html" rel="alternate"></link><published>2016-10-10T00:00:00+00:00</published><updated>2016-10-10T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2016-10-10:pycon-israel-2016/building-python-with-bazel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bazel is a build system recently open sourced by Google. Even though Python doesn't require 'building' in the traditional way like C++, large code bases can benefit from Bazel's features. Bazel provides powerful tools for expressing and querying dependencies—even between systems in different languages.&lt;/p&gt;
&lt;p&gt;It also makes it possible to bundle applications with all of their dependencies into a hermetic package for distribution. This talk will cover:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;an introduction to Bazel and how it differs from other build systems,&lt;/li&gt;
&lt;li&gt;how Bazel can be used with Python, and&lt;/li&gt;
&lt;li&gt;the limitations of Bazel.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/benjamin-peterson.pdf"&gt;http://il.pycon.org/2016/static/sessions/benjamin-peterson.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PyCon 2009: Plenary: Afternoon Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Steven Bethard</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:05) Easy command line parsing with argparse - Steven Bethard&lt;/p&gt;
&lt;p&gt;(04:14) Moments - Charles Brandt&lt;/p&gt;
&lt;p&gt;(11:45) Crowdsourcing lightning -&lt;/p&gt;
&lt;p&gt;(13:40) Python 3.1 changes - Benjamin Peterson&lt;/p&gt;
&lt;p&gt;(19:35) The Poor Man's Continuous Integration - Zain Memon&lt;/p&gt;
&lt;p&gt;(25:55) cluemapper - Nate Aune&lt;/p&gt;
&lt;p&gt;(29:55) ReleaseBot - Brian Warner&lt;/p&gt;
&lt;p&gt;(34:50) worldPloneday - Jordan Baker and Roberto&lt;/p&gt;
&lt;p&gt;(40:15) blist - Daniel Stutzbach&lt;/p&gt;
&lt;p&gt;(45:10) Python Open Source Overview on Launchpad - Gary Poster&lt;/p&gt;
&lt;p&gt;(49:50) Pyjamas - Bernd Dorn&lt;/p&gt;
&lt;p&gt;(53:50) &amp;nbsp;is Evil and IP Addresses in Python - Gregory Smith&lt;/p&gt;
&lt;p&gt;(56:00) ctypes - Jason Coombs&lt;/p&gt;
&lt;p&gt;(61:10) Come to EuroPython - Jonathan Hartley&lt;/p&gt;
&lt;p&gt;(65:45) Zope - Lennart Regebro&lt;/p&gt;
&lt;p&gt;(71:05) Site Checker - Eric Holscher&lt;/p&gt;
&lt;p&gt;(76:20) PSF Community Awards&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="argparse"></category><category term="blist"></category><category term="cluemapper"></category><category term="ctypes"></category><category term="launchpad"></category><category term="moments"></category><category term="plone"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pyjamas"></category><category term="python31"></category><category term="sitechecker"></category><category term="testing"></category><category term="twill"></category><category term="zope"></category></entry><entry><title>How the PyPy JIT works</title><link href="https://pyvideo.org/pycon-us-2012/how-the-pypy-jit-works.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/how-the-pypy-jit-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Python community is abuzz about the major speed gains PyPy can offer
pure Python code. But how does PyPy JIT actually work? This talk will
discuss how the PyPy JIT is implemented. It will include descriptions of
the tracing, optimization, and assembly generation phases. I will
demonstrate each step with a example loop.&lt;/p&gt;
</summary></entry><entry><title>The Guts of Unicode in Python</title><link href="https://pyvideo.org/pycon-us-2013/the-guts-of-unicode-in-python.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/the-guts-of-unicode-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will examine how Python's internal Unicode representation has
changed from its introduction through the latest major changes in Python
3.3. I'll present properties of the current Unicode implementation like
algorithmic complexity and standard compliance. The talk will also
compare Unicode in Python with some other languages. Finally, I'll look
into the future of Python's Unicode.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Garbage Collection in Python</title><link href="https://pyvideo.org/pycon-us-2014/garbage-collection-in-python.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/garbage-collection-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explore how garbage collection is implemented in CPython
and PyPy. See how CPython deals reference counting's shortcomings with a
special GC for cycle collection. Then dive into PyPy's sophisticated and
high-performing GC implementations. The particularly thorny issue of
finalizers in reference cycles will also be addressed.&lt;/p&gt;
</summary></entry><entry><title>The (Slightly) Less Sorry State of SSL</title><link href="https://pyvideo.org/pycon-us-2015/the-slightly-less-sorry-state-of-ssl.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/the-slightly-less-sorry-state-of-ssl.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We show off the security improvements made to the standard library TLS
and networking modules over the last year.&lt;/p&gt;
</summary></entry></feed>