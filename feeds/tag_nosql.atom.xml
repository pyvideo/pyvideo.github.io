<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_nosql.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T00:00:00+00:00</updated><entry><title>Traversing the land of graph computing and databases</title><link href="https://pyvideo.org/pycon-italia-2019/traversing-the-land-of-graph-computing-and-databases.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Akash Tandon</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/traversing-the-land-of-graph-computing-and-databases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphs have long held a special place in the computer science’s history
(and codebases). With the advent of a new wave of the information age
characterized by a greater emphasis on linked data, graph computing and
databases have risen to prominence. Be it enterprise knowledge graphs or
graph-based analytics, there are a great number of potential
applications.&lt;/p&gt;
&lt;p&gt;To reap the benefits of graph databases and computing, one needs to
understand the basics as well as current technical landscape and
offerings. Also, it’s important to understand if a graph-based approach
suits your problem. This talk will touch upon these points. Be prepared
to learn some graph fundamentals and witness a live demo using Neo4j, a
popular graph database.&lt;/p&gt;
&lt;p&gt;Soft pre-requisites include familiarity with Python and experience
working with a SQL or NoSQL database. There are no hard pre-requisites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1682"&gt;https://python.it/feedback-1682&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="nosql"></category><category term="graph"></category><category term="analytics"></category><category term="databases"></category><category term="neo4j"></category><category term="datascience"></category><category term="graphdatabase"></category></entry><entry><title>Never get in a battle of bits without ammunition.</title><link href="https://pyvideo.org/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Enrico Franchi</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</id><summary type="html"></summary><category term="cython"></category><category term="C/C++"></category><category term="nosql"></category><category term="mongodb"></category><category term="numeric"></category><category term="iPython"></category><category term="optimization"></category><category term="Algorithms"></category><category term="data-analysis"></category><category term="hpc"></category><category term="performance"></category><category term="scientific-computing"></category><category term="numpy"></category></entry><entry><title>Python and PostgreSQL for Huge Data Warehouses</title><link href="https://pyvideo.org/europython-2013/python-and-postgresql-for-huge-data-warehouses.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Hannu Krosing</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/python-and-postgresql-for-huge-data-warehouses.html</id><summary type="html"></summary><category term="postgresql"></category><category term="nosql"></category><category term="parallelization"></category><category term="bigdata"></category><category term="scalability"></category><category term="pl/python"></category><category term="olap"></category><category term="optimization"></category><category term="architecture"></category><category term="sql"></category><category term="performance"></category></entry><entry><title>pl/python now as powerful as C</title><link href="https://pyvideo.org/europython-2013/plpython-now-as-powerful-as-c.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Hannu Krosing</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/plpython-now-as-powerful-as-c.html</id><summary type="html"></summary><category term="postgresql"></category><category term="nosql"></category><category term="database"></category><category term="mongodb"></category><category term="bigdata"></category><category term="pl/python"></category><category term="optimization"></category><category term="sql"></category><category term="Full Text Search"></category></entry><entry><title>PostgreSQL is Web-Scale (Really :) )</title><link href="https://pyvideo.org/europython-2013/postgresql-is-web-scale-really.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Hannu Krosing</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/postgresql-is-web-scale-really.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show you how to set up a python and PostgreSQL based
system which is easy to set up and easy to scale, provides ACID
guarantees where they are needed and delays time-consistency between
unrelated objects for scalability and availability where the latter are
deemed more important.&lt;/p&gt;
&lt;p&gt;The best thing is that this kind of scalability work for both OLTP and
OLAP workloads, so with some planning you can have just a single large
“database” which can take almost any type of load.&lt;/p&gt;
&lt;p&gt;Also, if you hate SQL, you can do all the OLTP stuff in a pythonic way
using an automagically generated ORM layer inside the database, near the
data. If you are really masochistic, you can use the same ORM also for
map-reduce type distributed data processing, though on this side the
small effort of learning SQL usually pays off when queries get more
complex. But as I said, everything runs inside the databse, near the
data and thus even the ORM &amp;amp; map-reduce analytics works fast.&lt;/p&gt;
</summary><category term="postgresql"></category><category term="nosql"></category><category term="datamining"></category><category term="parallelization"></category><category term="distributed"></category><category term="bigdata"></category><category term="scalability"></category><category term="pl/python"></category><category term="olap"></category><category term="optimization"></category><category term="orm"></category><category term="sql"></category><category term="performance"></category></entry><entry><title>Python e Elasticsearch: dal Text Search a NLP e oltre</title><link href="https://pyvideo.org/pycon-italia-2018/python-e-elasticsearch-dal-text-search-a-nlp-e-oltre.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Dario Balinzo</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/python-e-elasticsearch-dal-text-search-a-nlp-e-oltre.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il Talk è rivolto a sviluppatori Python intermedi. Non è richiesta
nessuna conoscenza su Elasticsearch.&lt;/p&gt;
&lt;p&gt;Nell’introduzione presenteremo le librerie elasticsearch-py e
elasticsearch- dsl introducendo i concetti base di ElasticSearch.
Saranno prima presentate le metodologie di indicizzazione per
ottimizzare la ricerca su grandi quantità di dati, mostrando come
inserire i propri dati nel motore di ricerca.&lt;/p&gt;
&lt;p&gt;Dopo passeremo alle query (dal text search alle geo queries ) e relative
aggregazioni, facendo vedere come estrarre informazioni dai dati in
maniera veloce e migliorare così la user experience.&lt;/p&gt;
&lt;p&gt;In seguito saranno presentate funzionalità di ricerca avanzate,
spiegando come arricchire le proprie webapp con le funzionalità
dinamiche di “search as you type”, autocompletamento e suggerimento.&lt;/p&gt;
&lt;p&gt;Infine mostreremo come utilizzare tecniche di Data Analytics avanzate
come il NLP: analizzando i testi sarà possibile fare “language
detection”, “text classification” e “keyword extraction”. In tal modo
non solo si può trovare velocemente cosa si sta cercando, ma analizzare
commenti e recensioni per capire se i clienti sono soddisfatti.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="nlp"></category><category term="nosql"></category><category term="Python"></category><category term="bigdata"></category><category term="elasticsearch"></category><category term="Full Text Search"></category></entry><entry><title>MongoDB with Python</title><link href="https://pyvideo.org/pycon-japan-2012/mongodb-with-python.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Mathias Stearn</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/mongodb-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about working with leading NoSQL database MongoDB. This talk will cover the basics of pymongo, the MongoDB Python driver and using specialized MongoDB features like aggregation and geospatial indexing.&lt;/p&gt;
</summary><category term="nosql"></category><category term="mongodb"></category></entry><entry><title>NoSQL doesn't mean No Schema</title><link href="https://pyvideo.org/pydata-dc-2016/nosql-doesnt-mean-no-schema.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2016-10-08:pydata-dc-2016/nosql-doesnt-mean-no-schema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;While databases like MongoDB don't require a formal schema, there's still a schema somewhere. It might be merely implied by validation rules in the code. Or, there might be a more formal representation. In some cases, the lack of strict schema creates a dynamic flexibility that creates value rapidly. Other times, the lack of formal structures leads to chaos. How can we find a balance?&lt;/p&gt;
</summary><category term="nosql"></category></entry><entry><title>NoSQL Python: making data frames work for you in a non-rectangular world</title><link href="https://pyvideo.org/pydata-amsterdam-2016/nosql-python-making-data-frames-work-for-you-in-a-non-rectangular-world.html" rel="alternate"></link><published>2016-03-26T00:00:00+00:00</published><updated>2016-03-26T00:00:00+00:00</updated><author><name>Aileen Nielsen</name></author><id>tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/nosql-python-making-data-frames-work-for-you-in-a-non-rectangular-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Anyone who's dealt with a CSV file that contains arrays or a JSON with nested fields knows the pain of shoehorning non-rectangular data into standard Python data tools, such as data frame. This presentation will show you Python best practices for managing such non-rectangular data and highlight new opportunities for using &amp;quot;NoSQL&amp;quot; Python for interesting and painless analyses of real world data.&lt;/p&gt;
&lt;p&gt;NoSQL Python sounds suspiciously trendy. Is this a real thing?&lt;/p&gt;
&lt;p&gt;Most commonly used data frameworks in Python rely on SQL-like thinking. They work great, but unfortunately they don't always match real world data. A server fails intermittently, and you find you're missing measurements in an unpredictable way. A patient drops in and out of a study . You ask survey respondents what their favorite color is but they give you five colors. Suddenly you don't know quite how many columns you need or what data types those columns should have.&lt;/p&gt;
&lt;p&gt;These are just a few examples of real-world, non-rectangular data. Most of this real-world data makes its way into nested JSON, irregularly formatted JSON, unreliable API results, and slightly quirky CSV files.&lt;/p&gt;
&lt;p&gt;The nitty-gritty: how do you 'do' NoSQL Python?&lt;/p&gt;
&lt;p&gt;We'll cover best-practices for dealing with a variety of situations, starting with plain-vanilla JSON and branching off to defensive practices for dealing with highly-nested JSON, unreliably formatted API results (JSON or otherwise), and CSVs with array and other kinds of problematic fields.&lt;/p&gt;
&lt;p&gt;We'll also talk about best practices for processing these in terms of speeding up analysis and storing data in an easy-to-access and easy-to-understand format. In this portion of the talk, we'll still focus on keeping to data frames, making the rectangular format work for our non-rectangular data.&lt;/p&gt;
&lt;p&gt;Finally we'll take a look at roll-your-own NoSQL Python, unabashedly NoSQL frameworks, and what you should look for as you architect your own data decisions. We'll conclude with general rules of thumb for knowing the best way to proceed before you go too far down the wrong road.&lt;/p&gt;
&lt;p&gt;Now you've got it, what to do with it?&lt;/p&gt;
&lt;p&gt;The most interesting data and data-driven decision-making is coming out of non-rectangular data sources. What people do, how and when they do it, and what our computers do in response all comes down to non-rectangular, NoSQL data and NoSQL data-driven decision making. I'll highlight some well-known and lesser-known examples of NoSQL data results and the growing need for more work of this kind.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://www.slideshare.net/PyData/aileen-nielsen-nosql-python-making-data-frames-work-for-you-in-a-nonrectangular-world"&gt;http://www.slideshare.net/PyData/aileen-nielsen-nosql-python-making-data-frames-work-for-you-in-a-nonrectangular-world&lt;/a&gt;&lt;/p&gt;
</summary><category term="nosql"></category></entry><entry><title>PyGotham 2011: Rapid and Scalable Development with MongoDB, PyMongo, and Ming</title><link href="https://pyvideo.org/pygotham-2011/pygotham-2011-rapid-and-scalable-development-wit.html" rel="alternate"></link><published>2011-09-16T00:00:00+00:00</published><updated>2011-09-16T00:00:00+00:00</updated><author><name>Richard D. Copeland, Jr.</name></author><id>tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011-rapid-and-scalable-development-wit.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This intermediate-level talk will teach you techniques using the popular
NoSQL database MongoDB and the Python library Ming to write
maintainable, high- performance, and scalable applications. We will
cover everything you need to become an effective Ming/MongoDB developer
from basic PyMongo queries to high- level object-document mapping setups
in Ming.&lt;/p&gt;
</summary><category term="ming"></category><category term="mongodb"></category><category term="nosql"></category><category term="pygotham"></category><category term="pygotham2011"></category></entry><entry><title>PyOhio 2010: Getting to know MongoDB using Python and IronPython</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sam Corder</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting to know MongoDB using Python and IronPython&lt;/p&gt;
&lt;p&gt;Presented by Sam Corder&lt;/p&gt;
&lt;p&gt;Is your RDBMS not coping with the load anymore and can't be scaled out
any further? Are you designing the next big thing and know your RDBMS
won't be able to handle it? Are you tired of shoe-horning a data model
into where it doesn't belong? Are you just curious what this thing
called MongoDB is? In this session you will explore a popular
alternative to the RDBMS called Mongo from one who has battled with BSON
to write the original .Net driver. You'll learn basics of schema design,
document manipulation, several ways to get at your data, something odd
called map/reduce and all from the comfort of Python and the slightly
uncomfortable IronPython.&lt;/p&gt;
</summary><category term="ironpython"></category><category term="mongodb"></category><category term="nosql"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>NoSQL and Django Panel</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A panel to discuss the future of no-sql/non-related databases in Django.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The proliferation of non-SQL speaking datastores has caused a lot of
discourse and debate over their potential role in Django's decidedly
SQL-speaking ORM. The goal of this panel is to consolidate and discuss
the root questions of this debate.&lt;/p&gt;
&lt;p&gt;The panel will consist of Django orm contributors and heavy end-users of
both Django and a variety of NoSQL database solutions. Questions to the
panel will briefly cover the NoSQL movement in general and it's staying
power. After that introduction to the debates at hand outside of Django,
questions will shift to focus closely on the issues into integrating
NoSQL and Django--both on current best practices and future plans for
integrating it into the core.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="nosql"></category><category term="orm"></category></entry><entry><title>Relate or !Relate</title><link href="https://pyvideo.org/europython-2011/relate-or-relate.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Mark Ramm-Christensen</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/relate-or-relate.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 21 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To Relate or Not to Relate, that is the question raised by the NoSQL
movement. There is a lot of buzz about Couch, Casandra, MongoDB, and
other non relational databases, and at the same time there are decades
of hard work that's gone into optimizing databases built around the
relational model.&lt;/p&gt;
&lt;p&gt;I would actually argue that there is no such thing as a NoSQL database -
there are a variety of compelling options to relational database - each
of which have different features and different performance
characteristics. So no one- sized fits all comparison will do. So, I'll
try to outline a general taxonomy for persistence mechanisms, and then
proceed to comparing relational DB's to their new friends in practice.&lt;/p&gt;
&lt;p&gt;The talk will contain quite a few stories from the trenches with
CouchDB, MongoDB, MySQL, Postgres, Tokyo Cabinet, ZODB, and other
databases, and will help you think about the data storage needs of your
applications in new ways.&lt;/p&gt;
</summary><category term="database"></category><category term="nosql"></category><category term="optimizing"></category><category term="performance"></category></entry><entry><title>A Python on the Couch</title><link href="https://pyvideo.org/pycon-au-2011/a-python-on-the-couch.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Mark J Rees</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/a-python-on-the-couch.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;CouchDB &amp;amp;nbsp_place_holder;(&lt;a class="reference external" href="http://couchdb.apache.org/"&gt;http://couchdb.apache.org/&lt;/a&gt;) is an open
source, document-oriented NoSQL Database Management Server.It supports
queries via views using MapReduce, and replication. The talk will give
an overview of CouchDB followed by how to access and manipulate using
Python. There are a number of python libraries for accessing couchdb and
these will be quickly discussed followed by &amp;amp;nbsp_place_holder;how to
use one of these libs with a Python web framework.&lt;/p&gt;
</summary><category term="couchdb"></category><category term="database"></category><category term="nosql"></category><category term="web"></category></entry><entry><title>Beziehungen? Nein danke! - Agile Datenbankentwicklung mit schemafreien Datenbanken und Python</title><link href="https://pyvideo.org/pycon-de-2012/beziehungen-nein-danke-agiledatenbankentwickl.html" rel="alternate"></link><published>2012-11-01T00:00:00+00:00</published><updated>2012-11-01T00:00:00+00:00</updated><author><name>Martin Schönert</name></author><id>tag:pyvideo.org,2012-11-01:pycon-de-2012/beziehungen-nein-danke-agiledatenbankentwickl.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python-Projekte haben immer häufiger alternative Datenbanken aus der
nosql /newsql-Familie in ihrem Stack, seien es Graphendatenbanken wie
Neo4j, Key- Value-Stores wie Redis oder dokumentenorientierte
Datenbanken wie MongoDB.&lt;/p&gt;
&lt;p&gt;So verschiedenartig diese Datenbanken auch sind, gemeinsam ist ihnen,
dass sie nicht das relationale Datenmodell implementieren, Daten nicht
in miteinander in Beziehung stehenden Entitäten ablegen. Während
Nicht-Normalisirung bei relationalen Datenbanken meist als Anti-Pattern
angesehen wird, ist es bei schemafreien Datenbanken Prinzip, das
schnelles und agiles Entwickeln und Deployen fördert.&lt;/p&gt;
&lt;p&gt;Dieser Talk zeigt an Hand eines konkreten Use-Cases, welche Auswirkungen
die Verwendung einer nicht-relationalen Datenbank auf den
Entwicklungsprozess hat, zeigt wie Daten modelliert werden können und
auch, wie Veränderungen am Datenbankmodell implementiert werden können,
wenn es kein &amp;quot;Alter table&amp;quot; mehr gibt.&lt;/p&gt;
&lt;p&gt;Diskutiert werden sollen dabei auch die Pros und Kontras der
verschiedenen Datenmodelle hinsichtlich ihrer Query-Möglichkeiten, der
Query-Performance, Anforderungen an Plattenplatz und Auswirkungen auf
die Client/Anwendungsseite.&lt;/p&gt;
</summary><category term="agile softwareentwicklung"></category><category term="datenbank"></category><category term="datenmodellierung"></category><category term="nosql"></category><category term="orm"></category><category term="python"></category></entry><entry><title>Content Management mit Web APIs</title><link href="https://pyvideo.org/pycon-de-2013/content-management-mit-web-apis.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Arndt Droullier</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/content-management-mit-web-apis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;NoSql ein Schritt weiter: CMS-Systeme mit Web API lassen sich wie NoSql
Datenbanken erweitert um Daten-Validierung, Workflow und Template
Renderer verwenden. Ergebnis sind neue Anwendungsfälle wie Backends für
Javascript Anwendungen oder Structured Data Services. Gezeigt am
Beispiel &lt;a class="reference external" href="http://cms.nive.co/"&gt;Nive cms&lt;/a&gt;.&lt;/p&gt;
</summary><category term="cms"></category><category term="nosql"></category><category term="web api"></category></entry><entry><title>To relate or not to relate, that is the question (#99)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To relate or not to relate, that is the question&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;There is a lot of buzz about Couch, Casandra, MongoDB, and other non
relational databases, and at the same time there are decades of hard
work that's gone into optimizing databases built around the relational
model. This talk will focus on comparing relational DB's to their new
friends in practice, and on providing practical tools for deciding
what's right for your project.&lt;/p&gt;
</summary><category term="database"></category><category term="nosql"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Niall O'Higgins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL&lt;/p&gt;
&lt;p&gt;Presented by Niall O'Higgins&lt;/p&gt;
&lt;p&gt;The Catch.com backend provides an API for publishing and querying your
personal data - used by many hugely popular Android, iOS and Web
clients. We ported this system to Python and MongoDB, using the Pylons
Web framework. This talk details our reasoning for choosing - and
experiences with - these cutting-edge Web and NoSQL database
technologies in a high-traffic, real-world production system.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Faced with the limits of our initial Catch.com Java/BDB backend
implemention, we evaluated various alternative technologies including
Amazon SimpleDB, MySQL, Cassandra and MongoDB. Eventually we settled on
Python, Pylons and MongoDB.&lt;/p&gt;
&lt;p&gt;We found Python and MongoDB gave us unique flexibility with our data
model, allowed us to scale for increased reliability and performance and
decreased feature development time - and in this talk we'll describe
exactly how.&lt;/p&gt;
&lt;p&gt;While there are many advantages, Python/Pylons and MongoDB (as a
relative newcomer on the database scene) certainly have issues and
limitations which must be taken into careful consideration for any
real-world production deployment.&lt;/p&gt;
&lt;p&gt;We compare MongoDB with other database technologies such as more
traditional RDBMS like MySQL and competing NoSQL options such as
Cassandra, CouchDB and BDB.&lt;/p&gt;
&lt;p&gt;We give a detailed introducton to data modeling in MongoDB - with
special attention paid to how this differs from a traditional relational
system - the operators provided by its rich query language and utilizing
advanced features such as GeoSpatial indexing, Replica Sets, Sharding -
and how to deal with some of the more publicized limitations of the
system (such as single-server durability).&lt;/p&gt;
&lt;p&gt;While much of this talk will be about using MongoDB with Python, we will
also touch on issues surrounding production deployment of the Pylons Web
framework, including how we work around the GIL to take advantage of
multi-core machines.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="mongodb"></category><category term="nosql"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pylons"></category><category term="scalable"></category></entry></feed>