<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 Jul 2019 10:30:00 +0000</lastBuildDate><item><title>Becoming a Better Curator of Your Code</title><link>https://pyvideo.org/pyohio-2019/becoming-a-better-curator-of-your-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing code that functions correctly is only part of the development
process. The majority of our time is spent reading, maintaining and
refactoring our code.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss how when we see our work as code curation
we actually enable our job to be much easier and productive.&lt;/p&gt;
&lt;p&gt;We will start the talk with an introduction to the role of a curator and
how it applies to software engineers.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss some principals and techniques that enable
us to produce better code but applying them with the curation mindset of
maintaining code quality beyond producing the next bug free feature.&lt;/p&gt;
&lt;p&gt;Some of the topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Promote the use of conventions and style guides for your team&lt;/li&gt;
&lt;li&gt;Code readability matters&lt;/li&gt;
&lt;li&gt;The first goal of writing tests should be to document the code
functionality&lt;/li&gt;
&lt;li&gt;Encourage discussion on feature implementation&lt;/li&gt;
&lt;li&gt;Encourage discussion during code reviews&lt;/li&gt;
&lt;li&gt;Boy Scout rule - leave the code in a better shape than which you
found it&lt;/li&gt;
&lt;li&gt;Embrace new and mature technologies, and try to incorporate them into
your code when applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the talk we will review the software curation mindset and
how you can bring it to your organization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Sat, 27 Jul 2019 10:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-27:pyohio-2019/becoming-a-better-curator-of-your-code.html</guid></item><item><title>The stories of the most infamous bugs</title><link>https://pyvideo.org/pygotham-2018/the-stories-of-the-most-infamous-bugs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever we write code we eventually make mistakes and have “bugs”. We employ many techniques including testing and reviews to avoid them but some mistakes still make it into production.&lt;/p&gt;
&lt;p&gt;The topic of famous bugs in history has intrigued me for a very long time and it is a subject I enjoy researching.
In this talk we will explore 5 of the most famous bugs, their consequences and what we can learn from them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why the Mars climate orbiter did not orbit&lt;/li&gt;
&lt;li&gt;How the Ariane-5 rocket was lost&lt;/li&gt;
&lt;li&gt;Waiting for the long distance AT&amp;amp;T call&lt;/li&gt;
&lt;li&gt;How the world didn’t end in September 1983&lt;/li&gt;
&lt;li&gt;The fatal Patriot missile miscalculation&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/the-stories-of-the-most-infamous-bugs.html</guid></item><item><title>Workflow Engines Up and Running</title><link>https://pyvideo.org/pycon-us-2018/workflow-engines-up-and-running.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join us for an introduction hands on tutorial of Python based workflow engines.&lt;/p&gt;
&lt;p&gt;You will get to create, run and monitor a real time workflow job with two Python based popular workflow engines: Airflow and Luigi.
Developers may have some long running batch jobs and may be using one of the tools we will cover or might be using a different engine, and would like a more in depth hands-on experience learning these tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-09:pycon-us-2018/workflow-engines-up-and-running.html</guid><category>airflow</category><category>luigi</category></item><item><title>Sipping Web Development from a Flask</title><link>https://pyvideo.org/pyohio-2017/sipping-web-development-from-a-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to give introduction to web development using Flask.&lt;/p&gt;
&lt;p&gt;After an introduction to Python web development ecosystem, we will focus on developing a production ready application using Flask, a suggested structure for your application, and how to tackle some unique challenges we encountered.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-30:pyohio-2017/sipping-web-development-from-a-flask.html</guid></item><item><title>Contract-First API Development Using The OpenAPI Specification (Swagger)</title><link>https://pyvideo.org/pycon-us-2017/contract-first-api-development-using-the-openapi-specification-swagger.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Often developers will implement APIs and then only after they’re
released think about things like specifications and documentation.
Instead we can make the design of the API contract an explicit part of
our development process using The OpenAPI Specification (Swagger) and
open source tools.&lt;/p&gt;
&lt;p&gt;In this workshop we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Discuss the contract-first approach&lt;/li&gt;
&lt;li&gt;Build and validate a simple OpenAPI Specification&lt;/li&gt;
&lt;li&gt;Generate reference documentation and show how you can incorporate it
with other docs&lt;/li&gt;
&lt;li&gt;Run a mock server so clients can test using the API&lt;/li&gt;
&lt;li&gt;Generate stub code based on the specification&lt;/li&gt;
&lt;li&gt;Implement a basic working API using Flask&lt;/li&gt;
&lt;li&gt;Show how you can iteratively add features and make changes&lt;/li&gt;
&lt;li&gt;Discuss generating specifications for existing APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participants will leave with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An understanding of how to incorporate a contract-first process into
their API development workflow&lt;/li&gt;
&lt;li&gt;An example specification that can be used as reference for their own
API design&lt;/li&gt;
&lt;li&gt;Working code for a basic API that can be used as a basis for their
own development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participants are expected to have a basic familiarity with HTTP /
RESTful APIs, understanding of simple git operations, and some
development experience.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Forgac</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/contract-first-api-development-using-the-openapi-specification-swagger.html</guid></item><item><title>Fake It Before You Make It: Mocking Your Way to Better HTTP APIs</title><link>https://pyvideo.org/pyohio-2016/fake-it-before-you-make-it-mocking-your-way-to-better-http-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTTP/RESTful APIs are often designed and implemented before a client gets to see how they work. Then once an API is made public it can be hard to change. Let's discuss how we can improve this process by explicitly designing the API contract and getting client feedback before implementation. We will examine the process which promotes building HTTP APIs with a design first approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-31:pyohio-2016/fake-it-before-you-make-it-mocking-your-way-to-better-http-apis.html</guid></item></channel></rss>