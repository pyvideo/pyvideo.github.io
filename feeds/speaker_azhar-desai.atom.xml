<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_azhar-desai.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-01T00:00:00+00:00</updated><entry><title>OpenCanary: a new Python-based honeypot</title><link href="https://pyvideo.org/pycon-za-2015/opencanary-a-new-python-based-honeypot.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Azhar Desai</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/opencanary-a-new-python-based-honeypot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Honeypots: a great idea tempered by over a decade of glorious
misapplication resulting in a slow relegation to the realm of academia
and slightly dubious research. But it doesn’t have to be that way. In
August 2015 we released OpenCanary, the Open Source version of our
commercial Python-based honeypot.&lt;/p&gt;
&lt;p&gt;Traditional honeypots aim to reveal attacker tools, techniques and
procedures, by entrapping attackers through emulation (or
instrumentation) of common protocols and services. They are typically
installed standalone, and seldom updated. We argue that this honeypot
approach is outdated; current organisations struggle far more with
identifying breaches than identifying the version of some generic
rootkit installed post-breach.&lt;/p&gt;
&lt;p&gt;OpenCanary changes that, treating the honeypot as an internal
distributed sensor rather than a standalone alert generator. Each event
reported is a high-quality indicator of investigation-worthy activity,
and each OpenCanary instance feeds event data to a correlator which
produces single alerts even in the face of network-wide scans. With such
a high signal-to-noise ratio, every alert requires investigation. This
is in contrast to the stream of alerts produced by tools such as
anti-virus, network IDS or traditional honeypots.&lt;/p&gt;
&lt;p&gt;OpenCanary wound up relying on Python for the majority of the code. The
Python eco-system provided support that sped up development and, more
importantly, deployment. However it didn’t take us the full distance.&lt;/p&gt;
&lt;p&gt;In this talk, we provide a brief background on honeypots, discuss the
design of OpenCanary, delve into the challenges experienced and our
plans for the project. Along the way, we’ll demo the trivially
installable OpenCanary, configure a few fake services and provide an
outsider’s view of developing in Python.&lt;/p&gt;
</summary><category term="Room 215"></category></entry></feed>