<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyCon US 2022</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-us-2022.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>A Perfect Match: The history, design, implementation, and future of Python's structural pattern matching</title><link href="https://pyvideo.org/pycon-us-2022/a-perfect-match-the-history-design-implementation-and-future-of-pythons-structural-pattern-matching.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Brandt Bucher</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/a-perfect-match-the-history-design-implementation-and-future-of-pythons-structural-pattern-matching.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10 was released on October 4th, bringing with it a major new feature: &amp;quot;structural pattern matching&amp;quot;. As one of the designers of the feature and its principal implementer, my goal is to introduce you to Python's powerful, dynamic, object-oriented approach to this long-established functional programming construct, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10 was released on October 4th, bringing with it a major new feature: &amp;quot;structural pattern matching&amp;quot;. As one of the designers of the feature and its principal implementer, my goal is to introduce you to Python's powerful, dynamic, object-oriented approach to this long-established functional programming construct, and to explore ways that you might use structural pattern matching in your own code. Along the way, we’ll also dive into the history of the match statement, the design process behind it, how it actually works, and what we're already doing to improve it in Python 3.11 and beyond.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>A Pythonista's Introductory Guide to Web Assembly</title><link href="https://pyvideo.org/pycon-us-2022/a-pythonistas-introductory-guide-to-web-assembly.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ariel Ortiz</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/a-pythonistas-introductory-guide-to-web-assembly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wasm is a binary code format specification first released in 2017. This technology can be implemented in web browsers or standalone applications in a secure, open, portable, and efficient fashion. More precisely, Wasm is an intermediate language for a stack-based virtual machine that uses a just-in-time (JIT) compiler to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wasm is a binary code format specification first released in 2017. This technology can be implemented in web browsers or standalone applications in a secure, open, portable, and efficient fashion. More precisely, Wasm is an intermediate language for a stack-based virtual machine that uses a just-in-time (JIT) compiler to produce native machine code. Although Wasm was primarily designed as a compilation target for languages such as C/C++ or Rust, it can be integrated with Python in interesting ways. And that’s what we’ll be focusing on during this tutorial. Some experience with JavaScript and web development might come in handy but is not strictly required. At the end, we’ll show how to develop a tiny compiler that has Wasm as it’s compilation target.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Actionable insights vs ranking: How to use and how NOT to use code quality metrics?</title><link href="https://pyvideo.org/pycon-us-2022/actionable-insights-vs-ranking-how-to-use-and-how-not-to-use-code-quality-metrics.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Reka</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/actionable-insights-vs-ranking-how-to-use-and-how-not-to-use-code-quality-metrics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we want to make two major points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Metrics can facilitate better conversation about code quality. They help you focus more on technical problems and improvements instead of personal preferences and organizational issues.&lt;/li&gt;
&lt;li&gt;Metrics can be misused very easily. Knowing their limitations is crucial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;METRICS&lt;/p&gt;
&lt;p&gt;For each …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we want to make two major points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Metrics can facilitate better conversation about code quality. They help you focus more on technical problems and improvements instead of personal preferences and organizational issues.&lt;/li&gt;
&lt;li&gt;Metrics can be misused very easily. Knowing their limitations is crucial.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;METRICS&lt;/p&gt;
&lt;p&gt;For each metric, we'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;code examples in Python&lt;/li&gt;
&lt;li&gt;how to calculate&lt;/li&gt;
&lt;li&gt;interpretation (incl. some comparison across open source Python projects)&lt;/li&gt;
&lt;li&gt;actions&lt;/li&gt;
&lt;li&gt;limitations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;METHOD LENGTH&lt;/p&gt;
&lt;p&gt;The simple.&lt;/p&gt;
&lt;p&gt;You can calculate it without specific tools.
First step: Extract functions.
It shows well some general limitations of code quality metrics.&lt;/p&gt;
&lt;p&gt;CYCLOMATIC COMPLEXITY&lt;/p&gt;
&lt;p&gt;The old.&lt;/p&gt;
&lt;p&gt;Show the formula, but don't explain it in detail. :-)
Extract functions. Remove redundant if conditions.
It doesn't account for nested coding constructs. It ignores some modern language patterns.&lt;/p&gt;
&lt;p&gt;COGNITIVE COMPLEXITY&lt;/p&gt;
&lt;p&gt;The human.&lt;/p&gt;
&lt;p&gt;Calculation and interpretation: see &lt;a class="reference external" href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf"&gt;https://www.sonarsource.com/docs/CognitiveComplexity.pdf&lt;/a&gt;
Actions: Extract functions. Use shorthand structures. More Pythonic code is also more readable.
Limitations: It ignores both the length of a linear block and the complexity of the expressions used in it.&lt;/p&gt;
&lt;p&gt;WORKING MEMORY&lt;/p&gt;
&lt;p&gt;Another aspect of human understanding.&lt;/p&gt;
&lt;p&gt;Calculation: see &lt;a class="reference external" href="https://sourcery.ai/blog/working-memory/"&gt;https://sourcery.ai/blog/working-memory/&lt;/a&gt;
Interpretation: The 7 +/- 2 rule of the human working memory.
Actions: Extract functions, some more specific refactorings this metric rewards.
Limitations: It ignores the structure.&lt;/p&gt;
&lt;p&gt;LIMITATIONS AND PITFALLS&lt;/p&gt;
&lt;p&gt;GENERAL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They can be gamed.&lt;/li&gt;
&lt;li&gt;They easily encourage one-sided thinking and behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SPECIFIC FOR CODE QUALITY METRICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Great as warning signs, not good as &amp;quot;proof of excellence&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;COMPOUND METRICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Giving a more versatile picture than a single metric.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WHAT METRICS DON'T CAPTURE&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;naming, consistent terminology, ubiquitous language (DDD)&lt;/li&gt;
&lt;li&gt;project structure&lt;/li&gt;
&lt;li&gt;correctness&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Álgebra de Mapas en Python</title><link href="https://pyvideo.org/pycon-us-2022/algebra-de-mapas-en-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Nicole Franco Leon</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/algebra-de-mapas-en-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Álgebra de mapas es un lenguaje de expresiones aritméticas que utilizan relaciones (operadores y
funciones) y variables que representan datos y valores espaciales para realizar análisis geográficos mediante el modulo ArcPy. El álgebra de mapas básicamente implica hacer matemáticas con mapas.&lt;/p&gt;
&lt;p&gt;La idea de utilizar datos geográficos existentes para …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Álgebra de mapas es un lenguaje de expresiones aritméticas que utilizan relaciones (operadores y
funciones) y variables que representan datos y valores espaciales para realizar análisis geográficos mediante el modulo ArcPy. El álgebra de mapas básicamente implica hacer matemáticas con mapas.&lt;/p&gt;
&lt;p&gt;La idea de utilizar datos geográficos existentes para generar nuevos o simplemente extraer de ellos resultados cuantitativos, es una práctica común desde el mismo momento en que aparece la cartografía moderna.&lt;/p&gt;
&lt;p&gt;En esta charla tendremos una introducción al modulo de ArcPy, su configuración en ArcGis, pasando luego por una mirada holística de todo el modulo desde sus operadores, operaciones, y funciones algebraicas, la creación de expresiones complejas para el procesamiento de datos geoespaciales en determinada temporalidad, la preparación de las capas y concluiremos con la generación de mapas usando Python.&lt;/p&gt;
&lt;p&gt;Si te gustan la geografía, la matemática y Python, esta charla es para ti.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Análisis exploratorio de datos abiertos para el fortalecimiento de democracias</title><link href="https://pyvideo.org/pycon-us-2022/analisis-exploratorio-de-datos-abiertos-para-el-fortalecimiento-de-democracias.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ana Cecília Vieira</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/analisis-exploratorio-de-datos-abiertos-para-el-fortalecimiento-de-democracias.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ven a aprender acerca del análisis exploratorio de datos abiertos con las librerías más populares de Python para la ciencia de datos. Además, conocer el nivel de transparencia de datos en América Latina.
La charla va dirigida a las personas que tienen interés en el tema “ciencia de datos …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ven a aprender acerca del análisis exploratorio de datos abiertos con las librerías más populares de Python para la ciencia de datos. Además, conocer el nivel de transparencia de datos en América Latina.
La charla va dirigida a las personas que tienen interés en el tema “ciencia de datos” e iniciaron sus estudios, sin embargo aún no comprenden cómo usarlos. Serán usadas las librerías Pandas y Matplotlib en el análisis, que será hecho en el Google Collab.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Animating NFL play by play data using matplotlib's FuncAnimation()</title><link href="https://pyvideo.org/pycon-us-2022/animating-nfl-play-by-play-data-using-matplotlibs-funcanimation.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Miranda Auhl</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/animating-nfl-play-by-play-data-using-matplotlibs-funcanimation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us have heard the saying, &amp;quot;A picture is worth a thousand words,&amp;quot; but a movie builds context and a story, especially when conveying data! Data animations allow us to share more information and are far more engaging than static plots.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us have heard the saying, &amp;quot;A picture is worth a thousand words,&amp;quot; but a movie builds context and a story, especially when conveying data! Data animations allow us to share more information and are far more engaging than static plots.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss the importance of animation in analysis and show how to create data animations using play-by-play RFID data from the 2018 NFL season.&lt;/p&gt;
&lt;p&gt;Within data science, we often use graphical representations of data to convey our analysis engagingly and succinctly. However, a static image does not always do justice to our findings and sometimes can miss important concepts entirely. When we introduce animation, we can show how location, statistics, etc., can change over time. Using this NFL play-by-play data, I will show how to take a static data plot and transform it into an animation using the matplotlib module.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you will know what data animation is, how it works for matplotlib using FuncAnimation(), how to animate plots successfully using defined functions in conjunction with your iterative function, and how animation can improve your analysis.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Awesome Modern Web Testing with Playwright</title><link href="https://pyvideo.org/pycon-us-2022/awesome-modern-web-testing-with-playwright.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pandy Knight</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/awesome-modern-web-testing-with-playwright.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody gets frustrated when web apps are broken, but testing them thoroughly doesn't need to be a chore. Playwright, a new open-source browser automation tool from Microsoft, makes testing web apps fun! Playwright outperforms other tools like Selenium WebDriver with a slew of nifty features like automatic waiting, mobile …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody gets frustrated when web apps are broken, but testing them thoroughly doesn't need to be a chore. Playwright, a new open-source browser automation tool from Microsoft, makes testing web apps fun! Playwright outperforms other tools like Selenium WebDriver with a slew of nifty features like automatic waiting, mobile emulation, and network interception. Plus, with isolated browser contexts, Playwright tests can set up much faster than traditional Web UI tests.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will build a Python test automation project from the ground up. We will automate web search engine tests together step-by-step using Playwright for interactions and pytest for execution.&lt;/p&gt;
&lt;p&gt;Specifically, we will cover:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;How to install and configure Playwright&lt;/li&gt;
&lt;li&gt;How to integrate Playwright with pytest, Python’s leading test framework&lt;/li&gt;
&lt;li&gt;How to perform interactions through page objects&lt;/li&gt;
&lt;li&gt;How to conveniently run different browsers, capture videos, and run tests in parallel&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By the end of this tutorial, you'll be empowered to test modern web apps with modern web test tools. You'll also have an example project to be the foundation for your future tests. You can use Playwright to test Django apps, Flask apps, or any other kinds of apps!&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>AyudaPy.org: De proyecto de fin de semana a movimiento ciudadano clave durante la pandemia</title><link href="https://pyvideo.org/pycon-us-2022/ayudapyorg-de-proyecto-de-fin-de-semana-a-movimiento-ciudadano-clave-durante-la-pandemia.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Marcelo Elizeche Landó</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/ayudapyorg-de-proyecto-de-fin-de-semana-a-movimiento-ciudadano-clave-durante-la-pandemia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La charla trata sobre el proyecto AyudaPy.org que empezó como un experimento/proyecto de fin de semana y se transformó en una fuerza social en Paraguay que en muchos casos suplió la respuesta del estado, de sus orígenes, futuro y sobre los desafíos de convertirse de la noche …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La charla trata sobre el proyecto AyudaPy.org que empezó como un experimento/proyecto de fin de semana y se transformó en una fuerza social en Paraguay que en muchos casos suplió la respuesta del estado, de sus orígenes, futuro y sobre los desafíos de convertirse de la noche a la mañana en project manager, mantainer y vocero de un proyecto Open Source replicado en varios países y sobre todo de sobrevivir al burnout de esta situación.&lt;/p&gt;
&lt;p&gt;Las tecnologías usadas en este proyecto: Python, Django, PostGIS, OpenStreet Maps&lt;/p&gt;
&lt;p&gt;Lista de temas a tratar - Como nace y el ambiente de crisis social en el cual se gesto el proyecto - Proyecto de fin de semana, idea simple ejecutada en el tiempo correcto - Aceptación del publico - De 1 developer a ~30 en tiempo record - Crecimiento exponencial y open source - La comunidad de voluntarios - Apoyo de la Cruz Roja - Carga emocional de un proyecto social y el burnout - Impacto del proyecto y forks en otros países - ~6k familias ayudadas - Lecciones aprendidas&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Bad actors vs our community: detecting software supply chain attacks on Python ecosystem</title><link href="https://pyvideo.org/pycon-us-2022/bad-actors-vs-our-community-detecting-software-supply-chain-attacks-on-python-ecosystem.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ajinkya Rajput</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/bad-actors-vs-our-community-detecting-software-supply-chain-attacks-on-python-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid prototyping or development is one of the most favourite features of the Python software ecosystem. This is possible due to efficient reuse of software libraries enabled by package managers such as PyPi. While PyPI maintainers have streamlined the process of publishing and distributing a package for developers, bad …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid prototyping or development is one of the most favourite features of the Python software ecosystem. This is possible due to efficient reuse of software libraries enabled by package managers such as PyPi. While PyPI maintainers have streamlined the process of publishing and distributing a package for developers, bad actors evidently exploit this infrastructure to propagate malware. For example, simply by publishing a malicious package with a name similar to a popular package, bad actors can exploit carelessness or inexperience of developers and elevate a simple installation typo to a remote code execution attack.&lt;/p&gt;
&lt;p&gt;In this talk, we will present technical details of our large-scale vetting system that analyzes millions of published software package versions for malware and other “risky” attributes, such as sudo access, source inconsistencies, abandonware, and unsafe installation hooks. We will share our experience while building this system, and present examples of new malware we have detected as case studies. Finally, we will introduce our free tool OSSIE, a Python PyPi package, for developers to audit project dependencies and notify them when dependencies turn malicious. The presented tool is extremely user friendly and is an attempt towards furthering usable security.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Bailo con tu sombra: Patch, stub, mock</title><link href="https://pyvideo.org/pycon-us-2022/bailo-con-tu-sombra-patch-stub-mock.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>María Andrea Vignau</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/bailo-con-tu-sombra-patch-stub-mock.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pretendo incentivar la creación de tests,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Su importancia, ayudando a identificar las razones por las que usar objetos simulados.&lt;/li&gt;
&lt;li&gt;como inyectar estos en el código, usando patch y dependencia inversa.&lt;/li&gt;
&lt;li&gt;las ventajas y potencia de la librería mock, magicmock ayudar a identificar los casos de uso de patch, como …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pretendo incentivar la creación de tests,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Su importancia, ayudando a identificar las razones por las que usar objetos simulados.&lt;/li&gt;
&lt;li&gt;como inyectar estos en el código, usando patch y dependencia inversa.&lt;/li&gt;
&lt;li&gt;las ventajas y potencia de la librería mock, magicmock ayudar a identificar los casos de uso de patch, como emplear asserts respecto de las llamadas al mock y la posibilidad de usarlo como wrapper.&lt;/li&gt;
&lt;li&gt;Cierro contando dos casos de bibliotecas muy populares para tesetar páginas web: vcr-pytest y moto. el uso de mocks y de stubs.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Best Practices for Continuous Integration in Python V02</title><link href="https://pyvideo.org/pycon-us-2022/best-practices-for-continuous-integration-in-python-v02.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/best-practices-for-continuous-integration-in-python-v02.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is now accepted that having continuous integration is a best practice for almost all non-trivial projects. But configuring CI for Python correctly is still hard. The solution space is big, many common configurations work around the bugs and limitations that existed in past CI systems, and there are …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is now accepted that having continuous integration is a best practice for almost all non-trivial projects. But configuring CI for Python correctly is still hard. The solution space is big, many common configurations work around the bugs and limitations that existed in past CI systems, and there are few explanations about how to do it well.&lt;/p&gt;
&lt;p&gt;A good CI configuration concentrates on giving timely and accurate feedback to the developer. Whether it is using GitHub Actions, GitLab CI/CD, Jenkins, or something else, there are ways to configure the system to be more accurate and faster.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Better Air, Better Health: Creating an indoor air quality monitoring and predictive system.</title><link href="https://pyvideo.org/pycon-us-2022/better-air-better-health-creating-an-indoor-air-quality-monitoring-and-predictive-system.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Maria Jose Molina Contreras</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/better-air-better-health-creating-an-indoor-air-quality-monitoring-and-predictive-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last couple of years, most people have been moved to a full working from home work-style, which made us realize benefits we were not aware of, but sadly some little inconveniences as well, like health related issues.&lt;/p&gt;
&lt;p&gt;In this talk, we will explore how to build a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last couple of years, most people have been moved to a full working from home work-style, which made us realize benefits we were not aware of, but sadly some little inconveniences as well, like health related issues.&lt;/p&gt;
&lt;p&gt;In this talk, we will explore how to build a functional system to track the air quality, collect our own data using different sensors and implement a predictive approach to avoid future health problems. We are going to dive into the different setups to interact with air quality sensors using Python on microcontrollers and embedded systems, collecting your own data to evaluate different factors like humidity, temperature, CO2, particles, but that’s not all, also we will go into the implementation of a predictive machine learning (ML) model to predict Indoor CO2 levels and alerting us based on predictions before critical levels.&lt;/p&gt;
&lt;p&gt;The main idea of this talk is to show with a practical example how Python is a great option to build an indoor air quality monitoring complemented with a predictive ML model for Indoor CO2, while having fun building and monitoring their home.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Bootstrapping Your Local Python Environment</title><link href="https://pyvideo.org/pycon-us-2022/bootstrapping-your-local-python-environment.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/bootstrapping-your-local-python-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are simple, yet crucial, reminders that can differentiate an expert developer from a hobbyist. In this talk and live demo, developers will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the importance of abiding by the Zen of Python;&lt;/li&gt;
&lt;li&gt;where (and how) to install Python on your machine;&lt;/li&gt;
&lt;li&gt;three rules to follow when installing Python …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are simple, yet crucial, reminders that can differentiate an expert developer from a hobbyist. In this talk and live demo, developers will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the importance of abiding by the Zen of Python;&lt;/li&gt;
&lt;li&gt;where (and how) to install Python on your machine;&lt;/li&gt;
&lt;li&gt;three rules to follow when installing Python;&lt;/li&gt;
&lt;li&gt;proper version management with pyenv;&lt;/li&gt;
&lt;li&gt;which Python add-ons (e.g.: virtualenv, pipx, piptools, Docker) can be used to make environments both repeatable and simple.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resources and Links&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ActiveState: &lt;a class="reference external" href="https://www.activestate.com/products/python/"&gt;https://www.activestate.com/products/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;asdf: &lt;a class="reference external" href="https://github.com/danhper/asdf-python"&gt;https://github.com/danhper/asdf-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anaconda: &lt;a class="reference external" href="https://www.anaconda.com/products/individual"&gt;https://www.anaconda.com/products/individual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brew: &lt;a class="reference external" href="https://brew.sh/"&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chocolatey: &lt;a class="reference external" href="https://chocolatey.org/"&gt;https://chocolatey.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker’s Python integration: &lt;a class="reference external" href="https://hub.docker.com/_/python/"&gt;https://hub.docker.com/_/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDM: &lt;a class="reference external" href="https://pypi.org/project/pdm/"&gt;https://pypi.org/project/pdm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyenv setup: &lt;a class="reference external" href="https://github.com/pyenv/pyenv#installation"&gt;https://github.com/pyenv/pyenv#installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyenv setup for Windows: &lt;a class="reference external" href="https://pyenv-win.github.io/pyenv-win/"&gt;https://pyenv-win.github.io/pyenv-win/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipenv versions: &lt;a class="reference external" href="https://pipenv.pypa.io/en/latest/"&gt;https://pipenv.pypa.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;piptools: &lt;a class="reference external" href="https://github.com/jazzband/pip-tools/#readme"&gt;https://github.com/jazzband/pip-tools/#readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipx setup: &lt;a class="reference external" href="https://pypi.org/project/pipx/"&gt;https://pypi.org/project/pipx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipx: &lt;a class="reference external" href="https://pypa.github.io/pipx/"&gt;https://pypa.github.io/pipx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;poetry: &lt;a class="reference external" href="https://python-poetry.org/"&gt;https://python-poetry.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyproject.toml: &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0621/"&gt;https://www.python.org/dev/peps/pep-0621/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python.org: &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenv: &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/"&gt;https://virtualenv.pypa.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenvwrapper: &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;https://virtualenvwrapper.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zen of Python: &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;https://www.python.org/dev/peps/pep-0020/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Build-a-Database with Python</title><link href="https://pyvideo.org/pycon-us-2022/build-a-database-with-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Sangarshanan</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/build-a-database-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will help unlock the internal workings of a Database by breaking down the abstractions that make it. We will use Python as our weapon of choice to slowly discuss how you would go about building the different components of a database.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Talking to your Database: We start …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will help unlock the internal workings of a Database by breaking down the abstractions that make it. We will use Python as our weapon of choice to slowly discuss how you would go about building the different components of a database.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Talking to your Database: We start by building out an interface and a language that helps us communicate with our database. We will use Prompt toolkit to build a REPL &amp;amp; use a simple SQL-based language with basic regular expressions that can parse it to instruction to execute.&lt;/li&gt;
&lt;li&gt;Working with Data: Now that we can communicate with our database using instructions. we start the actual work in building out the Datastore, We initially store all the data in a simple in-memory dictionary and then move to persist this data to disk. We now read the data from the disk to memory every time we query the data and write back the data to the disk but this makes things very slow :( This problem is our entry into the beautiful world of Indexes so by building a very basic Btree index to store references in memory to quickly access only what we require from the data on disk we can actually speed up our access times for basic row access queries from O(N) to O(1) where N is the number of rows in a table&lt;/li&gt;
&lt;li&gt;Future: We can now proudly demo our new and polished database that can store data, persist it, and can run queries that are quite fast thanks to our Btree Indexes. We also discuss how this Database can be improved in the future by supporting full ACID Transactions, allowing concurrency, and handling locks&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way to understand something is to build it yourself :)&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Building a binary extension</title><link href="https://pyvideo.org/pycon-us-2022/building-a-binary-extension.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Henry Fredrick Schreiner III</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/building-a-binary-extension.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for binary extensions is an exceptional advantage of Python that is too often avoided for smaller packages with low developer resources. Binary extensions are used to achieve high performance for libraries like PyTorch, MyPy, and many thousands more. Binary extensions also allow access to a wealth of existing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for binary extensions is an exceptional advantage of Python that is too often avoided for smaller packages with low developer resources. Binary extensions are used to achieve high performance for libraries like PyTorch, MyPy, and many thousands more. Binary extensions also allow access to a wealth of existing compiled libraries. Building your own binary extension is plagued by historically poor documentation, bad common practices, and many misconceptions. But it is actually easy to write extensions today that work seamlessly on all common developer platforms using modern libraries and continuous integration.&lt;/p&gt;
&lt;p&gt;We will take a look at packaging a binary extension from start to finish. This starts with pybind11 for C++ bindings, providing simple, header only builds and avoiding the need for a new language or pre-processor step. We will look at scikit-build for building, providing powerful CMake based builds with library search, multithreaded builds, and more. We will use PyPA's build to produce SDists. And we will use PyPA's cibuildwheel to produce binaries for all common platforms with minimal setup and simple CI code in GitHub Actions (but trivially movable to any other CI system). We will talk about how to automate common tasks, like using GitHub's Dependabot to keep cibuildwheel up-to-date while also ensuring reproducible builds.&lt;/p&gt;
&lt;p&gt;After this talk, it is our hope that you will no longer shy away from using compiled code in libraries, but will feel comfortable writing extensions to accelerate or advance your libraries functionality.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Building a Python Code Completer</title><link href="https://pyvideo.org/pycon-us-2022/building-a-python-code-completer.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/building-a-python-code-completer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code completion is almost magic, and it makes writing code feel so good. But how does it actually work? I built a code completion engine from scratch - and in this talk, I'll tell you its secrets.&lt;/p&gt;
&lt;p&gt;We'll learn how Python parses and compiles code, what an AST is, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code completion is almost magic, and it makes writing code feel so good. But how does it actually work? I built a code completion engine from scratch - and in this talk, I'll tell you its secrets.&lt;/p&gt;
&lt;p&gt;We'll learn how Python parses and compiles code, what an AST is, and how we can use this knowledge to work out what a programmer might type next. And to prove it's not that complicated, I'll build a little code completer, live on stage, in about five minutes.&lt;/p&gt;
&lt;p&gt;I'll also talk about how code completion is like games programming, how we should broaden our thinking about &amp;quot;types&amp;quot; in Python, and how we can use information that isn't in your code to make coding even more satisfying.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Comparing the Different Ways to Scale Python and Pandas Code</title><link href="https://pyvideo.org/pycon-us-2022/comparing-the-different-ways-to-scale-python-and-pandas-code.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Kevin Kho</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/comparing-the-different-ways-to-scale-python-and-pandas-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fugue is an open-source unified interface for Pandas, Spark, and Dask that aims to let data practitioners define their compute workflows in a scale-agnostic manner. By decoupling logic and execution, users can code in a language that they are familiar with (Python, Pandas or SQL), and then choose an …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fugue is an open-source unified interface for Pandas, Spark, and Dask that aims to let data practitioners define their compute workflows in a scale-agnostic manner. By decoupling logic and execution, users can code in a language that they are familiar with (Python, Pandas or SQL), and then choose an execution engine to run it on (Pandas, Spark or Dask). In this talk, we cover the transform() function, which lets a user execute a single function in a distributed setting. This simple interface can be incrementally adopted and allows data practitioners to be productive with distributed computing very quickly.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Conference Closing</title><link href="https://pyvideo.org/pycon-us-2022/conference-closing.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Mariatta Wijaya</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/conference-closing.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon US 2022 comes to a close!&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>D&amp;D and G - a daring tale of Dungeons and Dragons and also Graph</title><link href="https://pyvideo.org/pycon-us-2022/dd-and-g-a-daring-tale-of-dungeons-and-dragons-and-also-graph.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Mohammad Athar</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/dd-and-g-a-daring-tale-of-dungeons-and-dragons-and-also-graph.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will take the form of a story of adventurers who meet in tavern, and use graph algorithms to chase down a McGuffin. The goal is to develop an intuition-first understanding of common graph algorithms.
Target audience is primarily programmers who want to review, or better understand graph …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will take the form of a story of adventurers who meet in tavern, and use graph algorithms to chase down a McGuffin. The goal is to develop an intuition-first understanding of common graph algorithms.
Target audience is primarily programmers who want to review, or better understand graph algorithms.
I will show how to convert mazes, social networks, and maps in to graphs. I will also cover eight algorithms- BFS, DFS, Dijkstra's, Hierholzer's, articulation points, centrality, Kruskal's algorithm, and the Louvain method. I will also provide practical (as practical as D&amp;amp;D can get) applications for these algorithms.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>De cero a 200 OK en 30 minutos: Desarrollo Web con Django, Heroku, TravisCI y GitHub</title><link href="https://pyvideo.org/pycon-us-2022/de-cero-a-200-ok-en-30-minutos-desarrollo-web-con-django-heroku-travisci-y-github.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Luis Conejo</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/de-cero-a-200-ok-en-30-minutos-desarrollo-web-con-django-heroku-travisci-y-github.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En época reciente, tuve la oportunidad de desarrollar un proyecto de freelance con una empresa editorial cuyo objetivo es migrar su herramienta de generación de libros de ser un script de Python, lanzado desde un terminal, a convertirse en una herramienta gráfica basada en la web.&lt;/p&gt;
&lt;p&gt;En el proceso …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En época reciente, tuve la oportunidad de desarrollar un proyecto de freelance con una empresa editorial cuyo objetivo es migrar su herramienta de generación de libros de ser un script de Python, lanzado desde un terminal, a convertirse en una herramienta gráfica basada en la web.&lt;/p&gt;
&lt;p&gt;En el proceso, tuve la oportunidad de aplicar las herramientas para la creación de una página web completa que normalmente utilizo en mi trabajo como instructor de Python en una universidad.&lt;/p&gt;
&lt;p&gt;OBJETIVO
En esta charla, quiero compartir una versión simplificada de dicha experiencia, mostrando la creación de un proyecto nuevo en Django, la implementación de acceso controlado y de un modelo de base de datos en SQL, para finalmente desplegar nuestro proyecto en Heroku y habilitar Integración Continua utilizando GitHub y TravisCI.&lt;/p&gt;
&lt;p&gt;El proceso se desarrolla en su totalidad en el nivel de coste cero de cada servicio, mostrando que es posible crear un prototipo completo de esta manera.&lt;/p&gt;
&lt;p&gt;AUDIENCIA META&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Desarrolladores interesados en hacer freelance en Python sin incurrir en altos costos para la creación de un prototipo inicial para clientes potenciales.&lt;/li&gt;
&lt;li&gt;Instructores interesados en enseñar desarrollo web 100% en Python.&lt;/li&gt;
&lt;li&gt;Desarrolladores que quieren aprender desarrollo web en Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ESTRUCTURA DE LA CHARLA&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cómo terminé de desarrollador freelance? (3 minutos).&lt;/li&gt;
&lt;li&gt;Las herramientas que utilizaremos (3 minutos).&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Creando nuestro proyecto en Django (22 minutos).&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Configuración inicial.&lt;/li&gt;
&lt;li&gt;Modelo de base de datos.&lt;/li&gt;
&lt;li&gt;La interfaz de administrador en Django.&lt;/li&gt;
&lt;li&gt;Plantillas HTML.&lt;/li&gt;
&lt;li&gt;Publicación de nuestra página en Heroku.&lt;/li&gt;
&lt;li&gt;Integración Continua con GitHub y TravisCI.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Qué más podemos hacer? (2 minutos)&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Demystifying Python’s Internals: Diving into CPython by implementing a pipe operator</title><link href="https://pyvideo.org/pycon-us-2022/demystifying-pythons-internals-diving-into-cpython-by-implementing-a-pipe-operator.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Sebastiaan Zeeff</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/demystifying-pythons-internals-diving-into-cpython-by-implementing-a-pipe-operator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diving into the CPython source code can feel daunting. Whether you want to start contributing or just want to get a better understanding of Python by exploring its source code, it’s often difficult to know where to start or what you’re missing.&lt;/p&gt;
&lt;p&gt;In my talk, I will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diving into the CPython source code can feel daunting. Whether you want to start contributing or just want to get a better understanding of Python by exploring its source code, it’s often difficult to know where to start or what you’re missing.&lt;/p&gt;
&lt;p&gt;In my talk, I will show you around the CPython source code by implementing a new operator, a pipe operator. While doing so, I will discuss core parts of the internals, such as Python’s grammar, its syntax trees, and the underlying logic that will perform the operation. By the end, you will have a good idea of the moving parts involved in core language features.&lt;/p&gt;
&lt;p&gt;I will also take you through the steps necessary to make it all work. I’ll show you how I obtained a copy of the source code, regenerated the parser and token files, and how I compiled my modified version of CPython. I will also write and run tests to help me implement my changes. This should give you a mental framework that helps you while diving into more comprehensive resources, like the excellent Python Developer’s Guide.&lt;/p&gt;
&lt;p&gt;My talk is aimed at everyone who wants to explore CPython’s internals. You don’t have to be an expert in Python, although some affinity with Python helps with understanding the internals. I will also use C to implement some of the operator logic, but knowledge of C is by no means required. In short, if you’re interested in diving into the CPython source code, this talk is for you.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Distributed Python with Ray: Hands-on with the Ray Core APIs</title><link href="https://pyvideo.org/pycon-us-2022/distributed-python-with-ray-hands-on-with-the-ray-core-apis.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jules S. Damji</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/distributed-python-with-ray-hands-on-with-the-ray-core-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Audio and speaker video do not start until 01:28:26. Our apologies for this.&lt;/p&gt;
&lt;p&gt;This is an introductory and hands-on guided tutorial of Ray Core. Ray provides powerful yet easy-to-use design patterns for implementing distributed systems in Python. This tutorial includes a brief talk to provide …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Audio and speaker video do not start until 01:28:26. Our apologies for this.&lt;/p&gt;
&lt;p&gt;This is an introductory and hands-on guided tutorial of Ray Core. Ray provides powerful yet easy-to-use design patterns for implementing distributed systems in Python. This tutorial includes a brief talk to provide an overview of concepts, why one might use Ray for distributing Python and Machine Learning workloads, and a brief discussion on Ray’s Ecosystem.&lt;/p&gt;
&lt;p&gt;Primarily, the tutorial will focus on Ray Core APIs to write remote functions, actors, and understand Ray’s basic design patterns for writing distributed Python applications.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Distributed Web Scraping in Python</title><link href="https://pyvideo.org/pycon-us-2022/distributed-web-scraping-in-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Josh Weissbock</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/distributed-web-scraping-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web scraping is easy to do in Python, but it quickly becomes tedious when routinely running large batch scraping jobs. This talk looks at how to build a distributed web scraper to reduce batch scraping job times and improve durability of your code as well as lessons learned &amp;amp; stories …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web scraping is easy to do in Python, but it quickly becomes tedious when routinely running large batch scraping jobs. This talk looks at how to build a distributed web scraper to reduce batch scraping job times and improve durability of your code as well as lessons learned &amp;amp; stories along the way.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Diversity &amp; Inclusion Workgroup</title><link href="https://pyvideo.org/pycon-us-2022/diversity-inclusion-workgroup.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Georgi Ker</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/diversity-inclusion-workgroup.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity &amp;amp; Inclusion Workgroup Panel
Georgi Ker, Lorena Mesa, Anthony Shaw, Reuven Lerner&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Dock Your Jupyter Notebook</title><link href="https://pyvideo.org/pycon-us-2022/dock-your-jupyter-notebook.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Nir Barazida</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/dock-your-jupyter-notebook.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To perfect your Jupyter Notebook craft, you'd want to make your work reproducible and shareable outside your local machine. In this talk, we will learn how to use Docker to build an isolated and pre-defined environment suited for ML project that runs smoothly on a remote machine.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Documenting your code from docstrings to automated builds</title><link href="https://pyvideo.org/pycon-us-2022/documenting-your-code-from-docstrings-to-automated-builds.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jacob Deppen</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/documenting-your-code-from-docstrings-to-automated-builds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IF IT ISN'T DOCUMENTED, IT DOESN'T EXIST.&lt;/p&gt;
&lt;p&gt;Documentation can make or break a project. Getting it right takes effort, but that effort doesn't have to be painful. In this tutorial, we will take a multi-stage approach to documentation, starting with the fundamentals, adding complexity and style, then finishing with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IF IT ISN'T DOCUMENTED, IT DOESN'T EXIST.&lt;/p&gt;
&lt;p&gt;Documentation can make or break a project. Getting it right takes effort, but that effort doesn't have to be painful. In this tutorial, we will take a multi-stage approach to documentation, starting with the fundamentals, adding complexity and style, then finishing with automated publishing to the web. We will practice a maintainer-friendly workflow that smooths out some of the rough edges of creating documentation.&lt;/p&gt;
&lt;p&gt;It is never too early or too late to pick up good documentation techniques and tools. As such, this tutorial will have elements that are relevant to brand new Pythonistas (What does a good docstring look like? What is a type hint?) as well as long-time practitioners (How can I make my docs easier to maintain? Where can I host docs? How can I test examples in my docstrings?).&lt;/p&gt;
&lt;p&gt;We will cover code comments, docstrings, and type annotations as ways to add documentation within your code. Next, we will add a user interface and documentation prose layer with JupyterBook, Jupyter Notebooks, and Markdown. After that, we will use Sphinx to build API documentation. Finally, we will automate the build and publish steps with GitHub Actions and GitHub Pages.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Effective Protobuf: Everything You Wanted To Know, But Never Dared To Ask</title><link href="https://pyvideo.org/pycon-us-2022/effective-protobuf-everything-you-wanted-to-know-but-never-dared-to-ask.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Liran Haimovitch</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/effective-protobuf-everything-you-wanted-to-know-but-never-dared-to-ask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk of 40 minutes covering the following topics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to serialization and its place in software engineering&lt;/li&gt;
&lt;li&gt;Static typed vs dynamic typed serialization&lt;/li&gt;
&lt;li&gt;Textual vs binary serialization: pros and cons&lt;/li&gt;
&lt;li&gt;Popular serialization frameworks&lt;/li&gt;
&lt;li&gt;Why Protobuf&lt;/li&gt;
&lt;li&gt;Quick intro to Protobuf (just enough to get by)&lt;/li&gt;
&lt;li&gt;Protobuf performance challenges and …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk of 40 minutes covering the following topics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to serialization and its place in software engineering&lt;/li&gt;
&lt;li&gt;Static typed vs dynamic typed serialization&lt;/li&gt;
&lt;li&gt;Textual vs binary serialization: pros and cons&lt;/li&gt;
&lt;li&gt;Popular serialization frameworks&lt;/li&gt;
&lt;li&gt;Why Protobuf&lt;/li&gt;
&lt;li&gt;Quick intro to Protobuf (just enough to get by)&lt;/li&gt;
&lt;li&gt;Protobuf performance challenges and tradeoffs&lt;/li&gt;
&lt;li&gt;Async synchronization: pros and cons&lt;/li&gt;
&lt;li&gt;Field encoding: under the hood and what we learn&lt;/li&gt;
&lt;li&gt;Managing the cost of abstractions&lt;/li&gt;
&lt;li&gt;Data deduplication and compression&lt;/li&gt;
&lt;li&gt;Field reuse: the whys and hows&lt;/li&gt;
&lt;li&gt;gRPC: pros and cons&lt;/li&gt;
&lt;li&gt;Protobuf over websocket or HTTP&lt;/li&gt;
&lt;li&gt;Thank you&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Employing NumPy's NPY Format for Faster-Than-Parquet DataFrame Serialization</title><link href="https://pyvideo.org/pycon-us-2022/employing-numpys-npy-format-for-faster-than-parquet-dataframe-serialization.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Christopher Ariza</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/employing-numpys-npy-format-for-faster-than-parquet-dataframe-serialization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over 14 years ago the first NumPy Enhancement Proposal (NEP) defined the NPY format (a binary encoding of array data and metadata) and the NPZ format (zipped bundles of NPY files). Those same formats, extended in a custom NPZ packaged with JSON metadata, can be used in Python to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over 14 years ago the first NumPy Enhancement Proposal (NEP) defined the NPY format (a binary encoding of array data and metadata) and the NPZ format (zipped bundles of NPY files). Those same formats, extended in a custom NPZ packaged with JSON metadata, can be used in Python to create a stable DataFrame storage format that can materially out-perform Parquet read / write times in a wide range of contexts. Unlike Parquet, all characteristics of a DataFrame can be encoded and all NumPy dtypes are supported. Implemented in StaticFrame, this format can take advantage of an immutable data model to memory-map full DataFrames from un-zipped directories of NPY. Given wide-spread use of Parquet files in data science workflows, a faster-than-Parquet file format can significantly reduce compute costs.&lt;/p&gt;
&lt;p&gt;I will begin this talk by introducing the challenge of serializing DataFrames, illustrating how nearly all stable encoding formats lack full support for all DataFrame characteristics. While the broadly-used Parquet format has been called a &amp;quot;gold standard&amp;quot; binary file format, its columnar representation will be shown to have limitations when used for encoding DataFrames.&lt;/p&gt;
&lt;p&gt;I will show how the NPY format, combined with JSON metadata, can be used to create a custom NPZ file with significant performance and compatibility advantages compared to Parquet. The details of this encoding scheme will be explained.&lt;/p&gt;
&lt;p&gt;I will close the talk by evaluating numerous read / write performance comparisons between Parquet (via Pandas) and NPZ (via StaticFrame), measured with a wide variety of DataFrame shapes and dtype compositions. I will share techniques used in implementing optimized Python routines for reading and writing NPY files, and demonstrate applications for memory-mapping complete DataFrames via the same NPY representation.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Estrategias para trabajar con datos a medida que estos crecen</title><link href="https://pyvideo.org/pycon-us-2022/estrategias-para-trabajar-con-datos-a-medida-que-estos-crecen.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Marco Carranza</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/estrategias-para-trabajar-con-datos-a-medida-que-estos-crecen.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Note: Captions start at minute 1:55
Hoy en día, los datos son cada vez más grandes, por lo que es casi imposible procesarlos en máquinas de escritorio. Para resolver este problema, han surgido muchas tecnologías para procesar todos datos utilizando múltiples clústeres de computadoras. El desafío es construir …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Note: Captions start at minute 1:55
Hoy en día, los datos son cada vez más grandes, por lo que es casi imposible procesarlos en máquinas de escritorio. Para resolver este problema, han surgido muchas tecnologías para procesar todos datos utilizando múltiples clústeres de computadoras. El desafío es construir soluciones sobre estas tecnologías, requiriendo diseñar complejos pipelines de datos combinando múltiples tecnologías.&lt;/p&gt;
&lt;p&gt;Sin embargo, en algunos casos, no disponemos suficiente tiempo o recursos para aprender a usar y configurar una infraestructura completa para ejecutar un par de experimentos. Quizás seas un investigador con recursos muy limitados o una startup con un calendario apretado para lanzar un producto al mercado.&lt;/p&gt;
&lt;p&gt;El objetivo de esta charla es presentar diversas estrategias para procesar la data a medida que esta crece y puede ser procesada con los recursos limitados de una sola máquina o con el uso de clusters, utilizando tecnologías como Pandas, Pyspark, Vaex y Modin.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Fast and reproducible tests, packaging, and deploys with Pantsbuild’s hermetic environments</title><link href="https://pyvideo.org/pycon-us-2022/fast-and-reproducible-tests-packaging-and-deploys-with-pantsbuilds-hermetic-environments.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/fast-and-reproducible-tests-packaging-and-deploys-with-pantsbuilds-hermetic-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Works on my machine”: The cry of developers who can’t reproduce a bug because their development environment is incompatible with their deployment environment. It’s common because setting up clean environments is slow, tedious, and error-prone.&lt;/p&gt;
&lt;p&gt;Meanwhile, debugging errors introduced by incorrect environments is slow, tedious, and error-prone …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Works on my machine”: The cry of developers who can’t reproduce a bug because their development environment is incompatible with their deployment environment. It’s common because setting up clean environments is slow, tedious, and error-prone.&lt;/p&gt;
&lt;p&gt;Meanwhile, debugging errors introduced by incorrect environments is slow, tedious, and error-prone.&lt;/p&gt;
&lt;p&gt;Each step in your CI workflow theoretically only has inputs or outputs, but in reality, files can be left along the way by running tests or compiling extensions. These are side-effects, not inputs for subsequent steps in your workflow, let alone deployment, but if included they can affect correctness.&lt;/p&gt;
&lt;p&gt;You can solve this using “hermetic environments”: running every step of your workflow inside a fresh environment, so steps run truly independently of one another. You can do this manually with Docker, but it’s difficult: you have to understand which inputs are necessary for a step, which newly generated files are meaningful outputs, and what should be discarded.&lt;/p&gt;
&lt;p&gt;Pantsbuild uses hermetic builds automatically: it understands the inputs each step needs, what outputs it produces, and stores inputs and outputs inside a content-addressable database so it can rapidly build sandboxed environments for subsequent steps of your workflow.&lt;/p&gt;
&lt;p&gt;The result is a build process where every step is run in isolation, with only the inputs each process truly needs, and only true outputs made available to each subsequent step. Pants’ workflows are fast but verifiably correct — running against incorrect inputs is not a possible failure case.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll explore how Pantsbuild enables truly hermetic builds. We’ll look at other approaches to sandboxing and how they compare to Pants’ approach, and how you can benefit from adding hermetic builds to your project.&lt;/p&gt;
&lt;p&gt;You’ll walk away being confident that “works on my machine” means “works everywhere”.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Finding penguins with a snake: Linux features for a Python user</title><link href="https://pyvideo.org/pycon-us-2022/finding-penguins-with-a-snake-linux-features-for-a-python-user.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/finding-penguins-with-a-snake-linux-features-for-a-python-user.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has APIs that allow developers to use Linux features that many are often unaware of. If you are a modest Linux/Unix user and want to learn some features of the OS through the APIs that Python offers, this is the perfect talk with you. We will speak …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has APIs that allow developers to use Linux features that many are often unaware of. If you are a modest Linux/Unix user and want to learn some features of the OS through the APIs that Python offers, this is the perfect talk with you. We will speak about processes, named pipes, fork and exec, inodes, and signals, among others, all whilst seeing how to play with these through the APIs that the Python standard library offers us.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Flexible ML Experiment Tracking System for Python Coders with DVC and Streamlit</title><link href="https://pyvideo.org/pycon-us-2022/flexible-ml-experiment-tracking-system-for-python-coders-with-dvc-and-streamlit.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Antoine Toubhans</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/flexible-ml-experiment-tracking-system-for-python-coders-with-dvc-and-streamlit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are so many tools to do data science today that it can be difficult to navigate. Many of them are AI platforms that “do everything by clicking on a UI” and do not leverage pre-existing tools e.g., GIT for versioning, or good old python IDE instead of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are so many tools to do data science today that it can be difficult to navigate. Many of them are AI platforms that “do everything by clicking on a UI” and do not leverage pre-existing tools e.g., GIT for versioning, or good old python IDE instead of Jupyter Notebooks. On the other hand, ML engineering is not classical software engineering:&lt;/p&gt;
&lt;p&gt;in addition to the code, the data should also be versioned;
in its essence, ML engineering is an exploratory work: one can not know if the model is going to work before testing it;
there is no clear way to guarantee the quality of the trained model: the data-scientist has to play with it to make it “talk”.
In this talk, we will build a fully customizable and complete system in python to track Machine Learning experiments. For the purpose of this talk, we will train a neural network (Tensorflow) to classify images between cat and dog, though, the main focus is on the tooling and not the ML algorithm. We will use:&lt;/p&gt;
&lt;p&gt;DVC (Data Version Control) to 1) version the data alongside the code with GIT 2) build training pipelines to orchestrate the python scripts 3) version experiments.
Streamlit to build data exploration apps to play with the trained models.
Both DVC and Streamlit are open-source libraries with python APIs.
In the second part of the talk, we will focus on various ways of combining DVC and Streamlit. For instance, we will see how to build a Streamlit app that allows selecting any trained model tracked with DVC (provided its GIT commit), loading it, and testing it on given input images.&lt;/p&gt;
&lt;p&gt;I will provide code samples and live demos throughout the talk.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Getting started with Object-Oriented Programming through Signal Processing</title><link href="https://pyvideo.org/pycon-us-2022/getting-started-with-object-oriented-programming-through-signal-processing.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Francesco Bruni</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/getting-started-with-object-oriented-programming-through-signal-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial OOP foundations will be explored fitting signals and waves into objects.&lt;/p&gt;
&lt;p&gt;We will follow a top-down methodology, by modelling signals from scratch, creating fatty objects, and then tweaking their representation introducing inheritance and delegation. We will talk about Python magic methods to implement processing operations. We …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial OOP foundations will be explored fitting signals and waves into objects.&lt;/p&gt;
&lt;p&gt;We will follow a top-down methodology, by modelling signals from scratch, creating fatty objects, and then tweaking their representation introducing inheritance and delegation. We will talk about Python magic methods to implement processing operations. We will eventually see how to implement the Iterator Design Pattern.&lt;/p&gt;
&lt;p&gt;Trough the session, we will keep a special eye on code explicitness and simplicity, highlighting pros and cons of every implementation.&lt;/p&gt;
&lt;p&gt;A laptop with Python installed is the sole requirement.
Neverthless, it could be handful having a Jupyter notebook instance running to visualize and listen to signals easily. In this case only numpy and matplotlib should be already installed.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Getting Started with Statically Typed Programming in Python 3.10</title><link href="https://pyvideo.org/pycon-us-2022/getting-started-with-statically-typed-programming-in-python-310.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Peacock</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/getting-started-with-statically-typed-programming-in-python-310.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since 2015, it has been possible to write Python like a statically typed language with typing modules and other features introduced in Python 3.5.&lt;/p&gt;
&lt;p&gt;This can significantly improve the development experience and review process.&lt;/p&gt;
&lt;p&gt;I have been using type hints in my work for several years and have …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since 2015, it has been possible to write Python like a statically typed language with typing modules and other features introduced in Python 3.5.&lt;/p&gt;
&lt;p&gt;This can significantly improve the development experience and review process.&lt;/p&gt;
&lt;p&gt;I have been using type hints in my work for several years and have been studying Haskell and TypeScirpt. I believe this session will be a stepping stone for &amp;quot;type hints newbies.&amp;quot;&lt;/p&gt;
&lt;p&gt;What I will talk about in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Advantages of using Typing&lt;/li&gt;
&lt;li&gt;Getting help from editors&lt;/li&gt;
&lt;li&gt;Facilitating code reviews&lt;/li&gt;
&lt;li&gt;How to get started with Typing&lt;/li&gt;
&lt;li&gt;Argument and return types for functions&lt;/li&gt;
&lt;li&gt;Using the standard Collections types&lt;/li&gt;
&lt;li&gt;The difference between tuple and other types&lt;/li&gt;
&lt;li&gt;Abstract and concrete types&lt;/li&gt;
&lt;li&gt;Generics, user-defined types&lt;/li&gt;
&lt;li&gt;Type Hinting Updates in Python 3.9 and 3.10&lt;/li&gt;
&lt;li&gt;(3.9) Type Hinting Generics In Standard Collections&lt;/li&gt;
&lt;li&gt;(3.10) Allow writing union types as X | Y&lt;/li&gt;
&lt;li&gt;(3.10) Parameter Specification Variables&lt;/li&gt;
&lt;li&gt;(3.10) Explicit Type Aliases&lt;/li&gt;
&lt;li&gt;(3.10) User-Defined Type Guards&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is not covered in this talk&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic Python 3 syntax&lt;/li&gt;
&lt;li&gt;(Not required): Experience developing in statically typed languages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Related contents:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A talk at PyCon JP 2020 (JA): &lt;a class="reference external" href="https://pycon.jp/2020/en/timetable/?id=203955"&gt;https://pycon.jp/2020/en/timetable/?id=203955&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/typing.html"&gt;https://docs.python.org/3/library/typing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Goodbye, "Hello, World." Hello, Functional FastAPI Web App!</title><link href="https://pyvideo.org/pycon-us-2022/goodbye-hello-world-hello-functional-fastapi-web-app.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Mario Munoz</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/goodbye-hello-world-hello-functional-fastapi-web-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a web application with Python is super easy. With just a few lines of code, you can get a simple, working app running directly on your computer's browser.&lt;/p&gt;
&lt;p&gt;Awesome! But then what?&lt;/p&gt;
&lt;p&gt;This tutorial focuses on that awkward transition from beginner to intermediate—when you want a project …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a web application with Python is super easy. With just a few lines of code, you can get a simple, working app running directly on your computer's browser.&lt;/p&gt;
&lt;p&gt;Awesome! But then what?&lt;/p&gt;
&lt;p&gt;This tutorial focuses on that awkward transition from beginner to intermediate—when you want a project to be less of a sketchpad and more of an actual, useful tool.&lt;/p&gt;
&lt;p&gt;We will learn tactics on how to find and use resources when devising a plan for your web application, as well as hands-on learning for tackling common (and necessary) aspects of building your app, such as configuration, app structure, and database modeling.&lt;/p&gt;
&lt;p&gt;For the training, you will be following along as we build the foundation of a fully-functional web application, and will leave with the ability to further refine it for real-world scenarios.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>GraphQL: The Devil’s API</title><link href="https://pyvideo.org/pycon-us-2022/graphql-the-devils-api.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ryan Kuhl</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/graphql-the-devils-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While there are advantages to using GraphQL vs. traditional REST APIs such as descriptive queries, there are also a plethora of potential pitfalls, such as the n+1 query problem and idiosyncratic fickleness. We leverage data-loaders, async/await, dynamic query generation, and other performance optimizations in GraphQL to create …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While there are advantages to using GraphQL vs. traditional REST APIs such as descriptive queries, there are also a plethora of potential pitfalls, such as the n+1 query problem and idiosyncratic fickleness. We leverage data-loaders, async/await, dynamic query generation, and other performance optimizations in GraphQL to create a flexible, performant interface for our front-end services. Let’s do GraphQL the right way!&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Handling Timezones in Python</title><link href="https://pyvideo.org/pycon-us-2022/handling-timezones-in-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/handling-timezones-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does your code use datetimes? There's a chance it has bugs that show up every night after 7pm!&lt;/p&gt;
&lt;p&gt;Timezones and daylight savings time are problems that plague most systems. Even if your system is designed for use in a singe timezone, you still need to be aware of timezones …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does your code use datetimes? There's a chance it has bugs that show up every night after 7pm!&lt;/p&gt;
&lt;p&gt;Timezones and daylight savings time are problems that plague most systems. Even if your system is designed for use in a singe timezone, you still need to be aware of timezones, both figuratively and literally to avoid bugs (Python datetimes that are correctly instantiated are referred to as &amp;quot;timezone aware&amp;quot;).&lt;/p&gt;
&lt;p&gt;This talk will cover: * Common mistakes with dates and datetimes in Python * How to use timezone aware datetimes in Python * Recipes for common datetime use cases * Recipes for Django&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Harvest the power of the GPU for awesome special effects</title><link href="https://pyvideo.org/pycon-us-2022/harvest-the-power-of-the-gpu-for-awesome-special-effects.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Paul Vincent Craven</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/harvest-the-power-of-the-gpu-for-awesome-special-effects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show the impressive graphics you can create with OpenGL shaders. The Arcade library makes it easy to take many of the examples shown on the popular www.shadertoy.com website and run them under Python. We'll explain how shaders work, why they are so fast, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show the impressive graphics you can create with OpenGL shaders. The Arcade library makes it easy to take many of the examples shown on the popular www.shadertoy.com website and run them under Python. We'll explain how shaders work, why they are so fast, and how to get started integrating shaders into your own Python programs.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Hooking into the import system</title><link href="https://pyvideo.org/pycon-us-2022/hooking-into-the-import-system.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Fred Phillips</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/hooking-into-the-import-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Import hooks and the import system in general is an under-used and under-documented resource within Python. This talk will introduce the audience to the import system, how it works, and how it can be adapted for their needs. We will build a simple import hook that can inspect what …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Import hooks and the import system in general is an under-used and under-documented resource within Python. This talk will introduce the audience to the import system, how it works, and how it can be adapted for their needs. We will build a simple import hook that can inspect what is being imported, and go on to demonstrate how we can use the import system to load Python modules from a database and how to reload files on disk immediately as they are changed.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>How to change Python (while it's running)</title><link href="https://pyvideo.org/pycon-us-2022/how-to-change-python-while-its-running.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Olivier Breuleux</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-to-change-python-while-its-running.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wouldn't it be nice to be able to do live development in a running Python instance, using your favorite editor and structuring your code however you would like, seeing your changes immediately reflected in the middle of the program's execution? Thanks to Python's incredible runtime flexibility, this can be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wouldn't it be nice to be able to do live development in a running Python instance, using your favorite editor and structuring your code however you would like, seeing your changes immediately reflected in the middle of the program's execution? Thanks to Python's incredible runtime flexibility, this can be done. In this talk, we will explore how changes to source code files can be integrated into running programs, covering as many edge cases as possible and explaining the intrinsic limitations of the approach. We will also demonstrate Jurigged, a flexible and extensible working implementation of this system.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>How to Make Your Python Jupyter Notebook Standalone and Reproducible to allow others to replicate your experiments</title><link href="https://pyvideo.org/pycon-us-2022/how-to-make-your-python-jupyter-notebook-standalone-and-reproducible-to-allow-others-to-replicate-your-experiments.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Francesco Murdaca</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-to-make-your-python-jupyter-notebook-standalone-and-reproducible-to-allow-others-to-replicate-your-experiments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even though many developers (including data scientists) focus on their core problems when working on their experiments, one basic aspect can make these projects not reusable. We are not considering anything machine learning-related yet.&lt;/p&gt;
&lt;p&gt;One of the first steps during the development of a project is the selection of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even though many developers (including data scientists) focus on their core problems when working on their experiments, one basic aspect can make these projects not reusable. We are not considering anything machine learning-related yet.&lt;/p&gt;
&lt;p&gt;One of the first steps during the development of a project is the selection of libraries or dependencies. When someone runs pip install package-name, they might not be aware that along with the library that is going to be installed, so-called direct dependency, many other dependencies will be installed on your machine, so-called transitive dependencies. Any change in one of those dependencies can break your experiment. It’s fundamental to have a way to state all the dependencies used, including the operating system, python interpreter, and hardware used to run a certain experiment.&lt;/p&gt;
&lt;p&gt;In this session, the speakers will present an open source JupyterLab extension for Python dependency management developed by the Thoth team. They will learn what resolution engine can be used (e.g. Pipenv, Thoth), the difference between these resolution engines. Moreover they will learn what to do in different scenarios emulating typical Jupyter notebook experiences to learn how to use the new extension.&lt;/p&gt;
&lt;p&gt;By the end of this session, attendees will learn the importance of reproducibility, how to use the Thoth Jupyterlab extension for Python projects and the benefits of a cloud resolution engine with respect to other existing ones. They will be able to run a tutorial using only a GitHub account and a browser as it will be run in a completely open cloud environment.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>How to Succeed with Python Across the Enterprise</title><link href="https://pyvideo.org/pycon-us-2022/how-to-succeed-with-python-across-the-enterprise.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Greg Compestine</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-to-succeed-with-python-across-the-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a large, well-established company, Bloomberg focused on C++ as its primary language several decades ago. Python began as a scripting language for writing small utilities. An intern project several years ago showed that it was possible to integrate some C++ libraries with Python, making it possible to build …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a large, well-established company, Bloomberg focused on C++ as its primary language several decades ago. Python began as a scripting language for writing small utilities. An intern project several years ago showed that it was possible to integrate some C++ libraries with Python, making it possible to build domain-specific applications. An engineer with an affinity for Python got approval to form a small team to provide better support for the language. Engineers also formed small committees (or Guilds) to help promote Python across the organization by advocating for users, organizing meetups, actively monitoring messaging channels to help those with questions and problems, and writing lots and lots of documentation.&lt;/p&gt;
&lt;p&gt;Today, Python is used by more than 3,000 of the company's engineers. We actively support the Python Software Foundation and open source Python projects. Python is used to train new hires on the architectural paradigms used within the company. In less than a decade, we’ve gone from taking our first steps with the language to being one of the leading contributors to its evolution.&lt;/p&gt;
&lt;p&gt;Sometimes success can &amp;quot;just happen.&amp;quot; However, most often changing a cultural dynamic takes a lot of hard work. And it is work that can be very rewarding.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>How We Migrated 3.8 Million Lines of Python 2 Without Interrupting Development</title><link href="https://pyvideo.org/pycon-us-2022/how-we-migrated-38-million-lines-of-python-2-without-interrupting-development.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Benjamin Bariteau</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-we-migrated-38-million-lines-of-python-2-without-interrupting-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Migrating from python 2 to python 3 is not very easy, but it can be exacerbated by needing to port a large codebase modified frequently by many different developers. Our codebase was nearly 4 million lines of code modified dozens of times a day by hundreds of total developers …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Migrating from python 2 to python 3 is not very easy, but it can be exacerbated by needing to port a large codebase modified frequently by many different developers. Our codebase was nearly 4 million lines of code modified dozens of times a day by hundreds of total developers. It is also business critical, containing a large portion of our most important code and data. We used several tools, techniques, and patterns to achieve the migration without disrupting day-to-day development and keeping regressions a minimum. In this talk, we’ll detail our migration steps, our usage of pre-commit hooks to reduce regressions to fixes, our usage of a reverse proxy to allow granular, low risk rollout for a webapp, and our migration of pickle to rollforward safe json for caching.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>How we standardized editable installs - PEP-660 vs. PEP-662</title><link href="https://pyvideo.org/pycon-us-2022/how-we-standardized-editable-installs-pep-660-vs-pep-662.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Bernát Gábor</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-we-standardized-editable-installs-pep-660-vs-pep-662.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by core developers, packaging PEPs are written by members of the Python Packaging Authority (PyPA). How we build Python packages was standardized in 2016 through PEP-517 and PEP-518. Editable installs, while widely used and well known through the -e flag in pip, proved to be controversial, so it got left out of those proposals. It has taken another five years to reach a consensus, and I'm happy to say that -- through PEP-660 -- we now have a way for all build back-ends to support editable installs. Join me in this talk, where I'll tell a tale explaining how having competing PEPs and exhausting discussions -- while tiresome -- led to a better solution. Plus, you'll also understand the different options we considered and the solution we developed in the end.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>If an asyncio.Task fails in the woods and nobody is around to see it, does it still page you at 3am</title><link href="https://pyvideo.org/pycon-us-2022/if-an-asynciotask-fails-in-the-woods-and-nobody-is-around-to-see-it-does-it-still-page-you-at-3am.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jason Fried</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/if-an-asynciotask-fails-in-the-woods-and-nobody-is-around-to-see-it-does-it-still-page-you-at-3am.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Its 3am you just got called about some asyncio production code that is failing either cryptically or silently. You discover that its using some terrible pattern and say to yourself &amp;quot;how did this ever work?&amp;quot;. Come find out about some bad asyncio usage patterns and how to combat them …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Its 3am you just got called about some asyncio production code that is failing either cryptically or silently. You discover that its using some terrible pattern and say to yourself &amp;quot;how did this ever work?&amp;quot;. Come find out about some bad asyncio usage patterns and how to combat them in your projects. We will talk about useful patterns for bootstrapping and tear down, and give you the tools you need to improve the code you maintain.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Implementing shared functionality using Middleware</title><link href="https://pyvideo.org/pycon-us-2022/implementing-shared-functionality-using-middleware.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Amit Saha</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/implementing-shared-functionality-using-middleware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will provide an introduction to the topic of writing middleware for your web applications. Middleware is often simply brought in to an application's code base, without perhaps a thorough understanding of how they work. This talk will shed light on how middleware components work in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will provide an introduction to the topic of writing middleware for your web applications. Middleware is often simply brought in to an application's code base, without perhaps a thorough understanding of how they work. This talk will shed light on how middleware components work in popular Python web frameworks - Flask, Django and FastAPI.&lt;/p&gt;
&lt;p&gt;Armed with that understanding, you will learn how to write your own middleware as well as use standard community contributed middleware to implement vital functionality in your applications.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Improving App Performance with Snapshots</title><link href="https://pyvideo.org/pycon-us-2022/improving-app-performance-with-snapshots.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Juan Gonzalez</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/improving-app-performance-with-snapshots.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Improving your app's performance is a complicated but essential task to handle growth.&lt;/p&gt;
&lt;p&gt;Often, the bottleneck for your system is your database.&lt;/p&gt;
&lt;p&gt;While there are many strategies on scaling your database infrastructure, there isn't a clear strategy for solving your performance issues by improving your Python code.&lt;/p&gt;
&lt;p&gt;Come to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Improving your app's performance is a complicated but essential task to handle growth.&lt;/p&gt;
&lt;p&gt;Often, the bottleneck for your system is your database.&lt;/p&gt;
&lt;p&gt;While there are many strategies on scaling your database infrastructure, there isn't a clear strategy for solving your performance issues by improving your Python code.&lt;/p&gt;
&lt;p&gt;Come to this talk to learn how a recently open-sourced library named &amp;quot;snapshot-queries&amp;quot; can help you write Python code that helps you scale without spending more!&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>In-house to open source: Stitching the past to the future with Python</title><link href="https://pyvideo.org/pycon-us-2022/in-house-to-open-source-stitching-the-past-to-the-future-with-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Nandita Viswanath</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/in-house-to-open-source-stitching-the-past-to-the-future-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever had to deal with old code that is filled with thousands of repetitive code blocks and too many if statements? It gets harder when the original authors aren't around to explain what they were thinking. These pain points related to legacy software are often the motivation for many …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever had to deal with old code that is filled with thousands of repetitive code blocks and too many if statements? It gets harder when the original authors aren't around to explain what they were thinking. These pain points related to legacy software are often the motivation for many organizations to adopt robust open source solutions. Open source software is becoming more and more the standard in any tech stack. Knowing how to navigate the world of open source software and how to best implement it is a skill that is becoming ever more important for any software engineer. Python is one of the most popular languages when it comes to open source. In this talk, we hope to outline why this is and how you can take advantage of it in your software migrations.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Intro to Introspection</title><link href="https://pyvideo.org/pycon-us-2022/intro-to-introspection.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jeremiah Paige</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/intro-to-introspection.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has immensely powerful capabilities to find information about objects and running code; even code you did not directly create. Through examples I will show you where that information is kept, how to retrieve it, and how to make sense of it.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Introduction to Property Based Testing</title><link href="https://pyvideo.org/pycon-us-2022/introduction-to-property-based-testing.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass?&lt;/p&gt;
&lt;p&gt;Property-based testing might be just what you need!&lt;/p&gt;
&lt;p&gt;After this introduction to property-based testing, you’ll be comfortable with Hypothesis, a friendly but powerful property-based testing library. You’ll also known how to check and enforce robust properties in your code, and will have hands-on experience finding real bugs.&lt;/p&gt;
&lt;p&gt;Where traditional example-based tests require you to write out each exact scenario to check - for example, assert divide(3, 4) == 0.75 - property-based tests are generalised and assisted. You describe what kinds of inputs are allowed, write a test that should pass for any of them, and Hypothesis does the rest!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;from hypothesis import given, strategies as st&lt;/p&gt;
&lt;p&gt;&amp;#64;given(a=st.integers(), b=st.integers())
def test_divide(a, b):
result = a / b
assert a == b * result&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There’s the obvious ZeroDivisionError, fixable with b = st.integers().filter(lambda b: b != 0), but there’s another bug lurking. Can you see it? Hypothesis can!&lt;/p&gt;
&lt;p&gt;AUDIENCE&lt;/p&gt;
&lt;p&gt;This tutorial is for anybody who regularly writes tests in Python, and would like an easier and more effective way to do so. We assume that you are comfortable with traditional unit tests - reading, running, and writing; as well as familar with ideas like assertions. Most attendees will have heard &amp;quot;given, when, then&amp;quot; and &amp;quot;arrange, act, assert&amp;quot;. You may or may not have heard of pre- and post-conditions - we will explain what &amp;quot;property-based&amp;quot; means without reference to Haskell or anything algebraic.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Knowledge graph data modelling with TerminusDB</title><link href="https://pyvideo.org/pycon-us-2022/knowledge-graph-data-modelling-with-terminusdb.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/knowledge-graph-data-modelling-with-terminusdb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;FOR WHOM IS YOUR WORKSHOP&lt;/p&gt;
&lt;p&gt;Data scientists, engineers and researchers who have no prior experience in knowledge graph data modelling. In this workshop, we will start from the fundamentals - learning how to think in terms of triples to describe relations of different data objects. If your work involves data …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;FOR WHOM IS YOUR WORKSHOP&lt;/p&gt;
&lt;p&gt;Data scientists, engineers and researchers who have no prior experience in knowledge graph data modelling. In this workshop, we will start from the fundamentals - learning how to think in terms of triples to describe relations of different data objects. If your work involves data analysis, data management, data collaboration or anything data-related, this is a workshop for you to have a brand new insight into how data should be represented and stored.&lt;/p&gt;
&lt;p&gt;SHORT FORMAT OF YOUR WORKSHOP&lt;/p&gt;
&lt;p&gt;Overview-10 min, Lecture - 60 mins, Breaks- 20 minutes, Hands-on training - 80 mins, Closing - 10 mins&lt;/p&gt;
&lt;p&gt;WHAT ATTENDEES WILL LEARN&lt;/p&gt;
&lt;p&gt;By the end of the workshop, you will be able to think like a knowledge graph expert and construct a proper schema to store your data in a knowledge graph format. You will acquire the skills that you need to build knowledge graphs in TerminusDB - an open-source graph database that enables revisional control and collaborations.&lt;/p&gt;
&lt;p&gt;COURSE BENEFITS&lt;/p&gt;
&lt;p&gt;You will have learnt a new skill set that may assist you in your project in data science or research. You will have a new tool that you can better model your data and collaborate with others. Also, you gain all the prerequisites to use WOQL - a query language for knowledge graphs and the TerminusDB Python client to manage, manipulate and visualize data in your knowledge graph.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Learn Python Like a 12-Year Old</title><link href="https://pyvideo.org/pycon-us-2022/learn-python-like-a-12-year-old.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Kelly Schuster - Paredes</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/learn-python-like-a-12-year-old.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Along the way to adulthood, we often lose that sense of wonder, enjoyment, and playfulness that we had as kids in our favorite school subjects. As adults, we can become better learners ourselves when we examine how kids learn coding with Python. In this session, we’ll talk about …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Along the way to adulthood, we often lose that sense of wonder, enjoyment, and playfulness that we had as kids in our favorite school subjects. As adults, we can become better learners ourselves when we examine how kids learn coding with Python. In this session, we’ll talk about making thinking and coding visible, to the brain science behind how we learn new things, to the importance of playfulness in learning. We will share a variety of helpful tips to improve your learning whether you are new to Python or an experienced coder.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Let's talk about JWT</title><link href="https://pyvideo.org/pycon-us-2022/lets-talk-about-jwt.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jessica Temporal</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lets-talk-about-jwt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;JSON Web Tokens, or JWTs for short, are all over the web. They can be used to track bits of information about a user in a very compact way and can be used in APIs for authorization purposes. Join me and learn what JWTs are, what problems it solves …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;JSON Web Tokens, or JWTs for short, are all over the web. They can be used to track bits of information about a user in a very compact way and can be used in APIs for authorization purposes. Join me and learn what JWTs are, what problems it solves, how you can use JWTs, and how to be safer when using JWTs on your applications.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Leveraging a custom CPython data model for high-performance microprocessor design</title><link href="https://pyvideo.org/pycon-us-2022/leveraging-a-custom-cpython-data-model-for-high-performance-microprocessor-design.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Richard Taggart</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/leveraging-a-custom-cpython-data-model-for-high-performance-microprocessor-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing insights for problems encountered while building a high-performance microprocessor requires analyzing large amounts of data generated from a complicated design process. This is a Big Data problem. The four main challenges include: managing design components, reporting, linking data across time, and providing a reliable and scalable platform. The …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing insights for problems encountered while building a high-performance microprocessor requires analyzing large amounts of data generated from a complicated design process. This is a Big Data problem. The four main challenges include: managing design components, reporting, linking data across time, and providing a reliable and scalable platform. The Design Data (DD) data model is a technological breakthrough to address the above challenges for integrated circuit design, analysis, and debug. The data model efficiently stores read-only design graph topology (e.g., inter-connected logic gates and wires), and derived analysis data (e.g., estimated signal delay and power usage) in a compressed binary file. DD is a custom domain-specific read-only binary data model with an extensive query API, which is implemented using C++, CPython, and Python method bindings.&lt;/p&gt;
&lt;p&gt;The C++ data model implementation enables efficient graph traversal, custom interactive &amp;quot;offline&amp;quot; analysis, and design graph visualization. Every data file may be tagged and stored using the compressible binary format, which facilitates comparing different versions across a multi-year project. They can compare past and current data sets to identify and assess specific design trends and failure modes. This data analysis workflow powered by Python improves the quality of a chip design by allowing engineers to focus on the hard problems.&lt;/p&gt;
&lt;p&gt;This talk will share our experience of incorporating modern Free Open-Source Software technologies into a complicated ecosystem of commercial toolchains and workflows for Electronic Design Automation (EDA). After this talk, I hope you will be inspired to experiment with integrating C or C++ and CPython bindings into your application workflow. I also hope this may help you think about different ways you might be able to integrate various methods of Data Science into your application domain.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Lightning Talks - Day 1</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-1.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Sameer Wagh</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:50 - Sameer Wagh …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:50 - Sameer Wagh - Data Science without Data?&lt;/li&gt;
&lt;li&gt;2:25 - Cheuk Ting Ho - Cultural Shock - My 1st&lt;/li&gt;
&lt;li&gt;7:25 - Łukasz Langa - COVARIANCE/CONTRAVARIENCE&lt;/li&gt;
&lt;li&gt;11:45 - Seth M Larson - Truststore: OS trust stores in Python&lt;/li&gt;
&lt;li&gt;15:50 - Pablo Galindo - Memray: hardcore memory profiling&lt;/li&gt;
&lt;li&gt;20:17 - Graham Waters -The grief cycle, data security breaches, how we could code the future of America and the world&lt;/li&gt;
&lt;li&gt;24:17 - Mason Egger - What is Synthetic Data&lt;/li&gt;
&lt;li&gt;29:55 - Sophia Yang - Holoviz&lt;/li&gt;
&lt;li&gt;34:00 - Shiray Lamba - Robyn; The fastest rust based python webframework server&lt;/li&gt;
&lt;li&gt;39:00 - Chris May - Three steps to elegant code&lt;/li&gt;
&lt;li&gt;43:50 - Chris Ariza - Getting to 100% coverage&lt;/li&gt;
&lt;li&gt;49:15 - Indra - Jupyter ML model to production ML as a service&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Lightning Talks - Day 2 AM</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-2-am.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jeff Weiss</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-2-am.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:45 - Jeff Weiss …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:45 - Jeff Weiss - Teaching Python for Community Outreach (Note: Video begins at ~2:40:00)&lt;/li&gt;
&lt;li&gt;06:16 - Jessica David - How staying away from one word can change everything&lt;/li&gt;
&lt;li&gt;10:59 - Roy m Mezan  - Biometric attack&lt;/li&gt;
&lt;li&gt;15:28 - Gajendra Deshpande - Security Considerations in Python Packaging&lt;/li&gt;
&lt;li&gt;20:32 - Diamond Bishop - Scaling PyTorch Models in Prod&lt;/li&gt;
&lt;li&gt;25:44 - Manabu Terada - Our Challeng to spread Python community w/ covid in Japan&lt;/li&gt;
&lt;li&gt;30:59 - Jay Miller - DevRel: showing your company skills&lt;/li&gt;
&lt;li&gt;36:29 - Jack Lee - Non-trivial applications of binary search&lt;/li&gt;
&lt;li&gt;41:11 - Henry Schreiner - Scikit-hep: developer pages a guide for modern package development&lt;/li&gt;
&lt;li&gt;46:44 - Chrisjrn - STOP RUNNING YOUR TESTS&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Lightning Talks - Day 2 PM</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-2-pm.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Christian Maureia Fredes</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-2-pm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:35 - Christian Maureia …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:35 - Christian Maureia Fredes - Python en Espanol&lt;/li&gt;
&lt;li&gt;05:35 - Mario Munoz - My First Pycon: Reflections&lt;/li&gt;
&lt;li&gt;10:20 - Georgi Ker - Open source is a walk in the park&lt;/li&gt;
&lt;li&gt;14:30 - Bence Nagy - Lint your code, repo, playlist, and fashion sense&lt;/li&gt;
&lt;li&gt;19:49 - Mark Shannon - Help us speed up Python with benchmarks&lt;/li&gt;
&lt;li&gt;23:35 - Larry Hastings - Correlate your data with Correlate&lt;/li&gt;
&lt;li&gt;27:39 - Rich Taggart - The importance of effective concise communication&lt;/li&gt;
&lt;li&gt;35:38 - William Woodruff - Securing your PyPI account&lt;/li&gt;
&lt;li&gt;40:18 - Alexa Lindberg - Generating recipes w/ GPT-2 &amp;amp; Python&lt;/li&gt;
&lt;li&gt;20:53 - Srinivas Bontula - Managing transitive dependencies for Django&lt;/li&gt;
&lt;li&gt;50:25 - Adrian - When to rewrite in rust&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Lightning Talks - Day 3</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-3.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pandy Knight</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:23 - Pandy Knight …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:23 - Pandy Knight - How to write a test case&lt;/li&gt;
&lt;li&gt;05:09 - Shreya Batra - The Effects of Computational THinking&lt;/li&gt;
&lt;li&gt;09:36 - Patrick Arminio - The fastest way to fetch the latest python version&lt;/li&gt;
&lt;li&gt;11:57 - Ray McLendon - Not all data is created equal&lt;/li&gt;
&lt;li&gt;16:24 - Geir Arne Hjelle - Reading PEPs&lt;/li&gt;
&lt;li&gt;21:30 - Jonathan Helmus - Pip install Python?&lt;/li&gt;
&lt;li&gt;26:07 - Jelle Zijlstra - PEP 688: Typing for the buffer protocol&lt;/li&gt;
&lt;li&gt;29:30 - Nick Muoh - Post pandemic meetuup&lt;/li&gt;
&lt;li&gt;33:25 - multiple speakers talking about Regional Python Conferences&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Localize your open source documentation: a Kubernetes case study</title><link href="https://pyvideo.org/pycon-us-2022/localize-your-open-source-documentation-a-kubernetes-case-study.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Zachary Sarah Corleissen</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/localize-your-open-source-documentation-a-kubernetes-case-study.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NOTE: video begins at ~3:45
This talk covers how Kubernetes docs were able to scale from zero to eleven localizations within six months in 2018. It covers what docs maintainers learned, mistakes to avoid, and how you can start localizing your own open source project.&lt;/p&gt;
&lt;p&gt;Great documentation drives …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NOTE: video begins at ~3:45
This talk covers how Kubernetes docs were able to scale from zero to eleven localizations within six months in 2018. It covers what docs maintainers learned, mistakes to avoid, and how you can start localizing your own open source project.&lt;/p&gt;
&lt;p&gt;Great documentation drives developer adoption...but documentation is only great if it's accessible. One piece of accessibility is localization: the ability for developers to access information in their native or primary language.&lt;/p&gt;
&lt;p&gt;This talk covers the specifics of scalable localization that other projects can adopt, based on the Kubernetes documentation model: tooling, workflows, standards for minimum viable documentation, and community conduct.&lt;/p&gt;
&lt;p&gt;This talk also covers some avoidable mistakes to save your maintainers time and stress, as well as the ongoing greater-than-additive benefits that localization can bring.&lt;/p&gt;
&lt;p&gt;This talk concludes with specific recommendations for other projects to start their own localizations.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Łukasz Langa</title><link href="https://pyvideo.org/pycon-us-2022/lukasz-langa.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lukasz-langa.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython Developer in Residence, Python 3.8 and 3.9 release manager, creator of Black, pianist, dad.
ambv on Github.
Opinions his own.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Making Data Classes Work for You</title><link href="https://pyvideo.org/pycon-us-2022/making-data-classes-work-for-you.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Bruce Eckel</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/making-data-classes-work-for-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be a example-driven presentation. The first set of examples looks at
an int which should be restricted to a value from one through ten.&lt;/p&gt;
&lt;p&gt;First I'll look at the problems in the traditional approach, passing an int
to a function and checking to ensure it is within …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be a example-driven presentation. The first set of examples looks at
an int which should be restricted to a value from one through ten.&lt;/p&gt;
&lt;p&gt;First I'll look at the problems in the traditional approach, passing an int
to a function and checking to ensure it is within range.&lt;/p&gt;
&lt;p&gt;Next I'll encapsulate the int in a (regular) class OneToTen, which allows
the movement of the test into the constructor. Although this guarantees that
objects will be created correctly, such objects are mutable so they can be
modified to be invalid after creation.&lt;/p&gt;
&lt;p&gt;The solution is to use &amp;#64;dataclass together with the frozen=True option, and
add a __post_init__ function to check the validity of the object once it's
been initialized. Because such an object is invariant, it cannot be later
modified into an invalid state. This ensures that the new type can only ever
exist as a legitimate value.&lt;/p&gt;
&lt;p&gt;Next I'll use this technique to create a Person type that is composed of
FullName, BirthDate and EmailAddress fields, each of which validates
itself. Finally, I'll compose BirthDate using Day, Month and Year
fields.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Making Python better one error message at a time</title><link href="https://pyvideo.org/pycon-us-2022/making-python-better-one-error-message-at-a-time.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/making-python-better-one-error-message-at-a-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10 has been recently released and among many exciting new features, one of the biggest improvements is the inclusion of a whole new set of changes focused on improving the error messages across the interpreter and the general user experience when dealing with error messages. The new …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10 has been recently released and among many exciting new features, one of the biggest improvements is the inclusion of a whole new set of changes focused on improving the error messages across the interpreter and the general user experience when dealing with error messages. The new error messages have been one of the most welcomed features from very different sets of users ranging from Python teachers and educators, first-time learners, industry professionals and data scientists.&lt;/p&gt;
&lt;p&gt;In this talk, we will cover:&lt;/p&gt;
&lt;p&gt;What are the new improvements featured in Python 3.10.
Exciting new changes and improvements that will feature in Python 3.11.
How these improvements are useful to different sets of users from people learning Python to experienced programmers.
How the new PEG parser has unlocked adding new custom syntax errors.
How these improvements were implemented and what challenges the CPython core team faced to get them working reliably.
How users can contribute to adding new error messages: what is the workflow, how the errors are reviewed by the core team and where to find resources and help.
No matter who you are and what you do with Python, there is an improvement that will probably make you smile.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Managing the Test Data Nightmare</title><link href="https://pyvideo.org/pycon-us-2022/managing-the-test-data-nightmare.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pandy Knight</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/managing-the-test-data-nightmare.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good data for testing can be a nightmare to manage. Sometimes, teams don’t have much control over the data in their systems under test—it’s just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good data for testing can be a nightmare to manage. Sometimes, teams don’t have much control over the data in their systems under test—it’s just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing. Inaccurate data can leave test gaps. Incorrect or stale data can break tests. Large data can consume too much time. Ugh!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll cover strategies for defeating many types of test data nightmares:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;recognizing the difference between product data and test case data&lt;/li&gt;
&lt;li&gt;deciding when to prepare data statically beforehand or dynamically during testing&lt;/li&gt;
&lt;li&gt;using data to control how tests run or reflect product state&lt;/li&gt;
&lt;li&gt;hard-coding values versus discovering data in the system&lt;/li&gt;
&lt;li&gt;avoiding collisions on shared data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strategies we cover can be applied to any project in any language. After this talk, you will wake up from the nightmare and handle test data cleanly and efficiently like a pro!&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Match case para principiantes</title><link href="https://pyvideo.org/pycon-us-2022/match-case-para-principiantes.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ariel Ortiz</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/match-case-para-principiantes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python ha carecido durante mucho tiempo de un mecanismo de control de flujo condicional presente en muchos otros lenguajes de programación, algo que permita tomar un valor y compararlo de manera directa y sencilla contra varias opciones. El lenguaje C y sus derivados cuentan con la instrucción switch/case …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python ha carecido durante mucho tiempo de un mecanismo de control de flujo condicional presente en muchos otros lenguajes de programación, algo que permita tomar un valor y compararlo de manera directa y sencilla contra varias opciones. El lenguaje C y sus derivados cuentan con la instrucción switch/case. Otros lenguajes tienen un soporte más sofisticado de pattern matching. Las formas tradicionales para lograr un comportamiento equivalente en Python no eran del todo elegantes. Una opción era escribir una cadena de expresiones if/elif/else. Una segunda opción era utilizar un diccionario con llaves asociadas a funciones. En general esto funciona adecuadamente, pero puede ser complicado de construir, entender y mantener.&lt;/p&gt;
&lt;p&gt;Después de varias propuestas fallidas para agregar una sintaxis tipo switch/case a Python, se aceptó finalmente una propuesta reciente para Python 3.10: structural pattern matching (búsquedas de coincidencias de patrones estructurales). Este esquema de pattern matching no solo hace posible realizar coincidencias simples de estilos de switch/case, sino que también admite una gama más amplia de casos de uso. En esta charla se mostrará cómo aprovechar en nuestros programas esta nueva facilidad.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Naomi Ceder</title><link href="https://pyvideo.org/pycon-us-2022/naomi-ceder.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/naomi-ceder.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Naomi Ceder earned a Ph.D in Classics several decades ago, but switched from ancient human languages to computer languages sometime in the last century. Since 2001, she has been learning, teaching, writing about, and using Python.&lt;/p&gt;
&lt;p&gt;She has attended every PyCon since the first one in 2003 and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Naomi Ceder earned a Ph.D in Classics several decades ago, but switched from ancient human languages to computer languages sometime in the last century. Since 2001, she has been learning, teaching, writing about, and using Python.&lt;/p&gt;
&lt;p&gt;She has attended every PyCon since the first one in 2003 and was one of the originators of the Poster Session, the Education Summit, the Intro to Sprints sessions, the PyCon Charlas, and the Hatchery.&lt;/p&gt;
&lt;p&gt;An elected fellow of the Python Software Foundation, Naomi is the immediate past chair of its board of directors. She is also co-founder of Trans*Code and speaks internationally about Python as well as community, inclusion, and diversity in technology in general.&lt;/p&gt;
&lt;p&gt;The author of The Quick Python Book and the Explore Python Fundamentals project series, she has also done corporate training in Python. In her spare time she enjoys sketching, knitting, and deep philosophical conversations with her dog.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Network Analysis Made Simple</title><link href="https://pyvideo.org/pycon-us-2022/network-analysis-made-simple.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Eric Ma</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/network-analysis-made-simple.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered about how data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this tutorial, we will use a variety of datasets to help you understand the fundamentals …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered about how data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this tutorial, we will use a variety of datasets to help you understand the fundamentals of network thinking, with a particular focus on constructing, summarizing, visualizing, and using complex networks to solve problems.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Nixtla: Deep Learning para pronóstico de series de tiempo.</title><link href="https://pyvideo.org/pycon-us-2022/nixtla-deep-learning-para-pronostico-de-series-de-tiempo.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Federico Garza Ramirez</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/nixtla-deep-learning-para-pronostico-de-series-de-tiempo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El pronóstico de series de tiempo tiene una amplia gama de aplicaciones: finanzas, retail, salud, IoT, etc. Recientemente modelos de deep learning como ESRNN o N-BEATS han demostrado tener performance estado del arte en estas tareas. Nixtlats es una librería de python que hemos desarrollado para facilitar el uso …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El pronóstico de series de tiempo tiene una amplia gama de aplicaciones: finanzas, retail, salud, IoT, etc. Recientemente modelos de deep learning como ESRNN o N-BEATS han demostrado tener performance estado del arte en estas tareas. Nixtlats es una librería de python que hemos desarrollado para facilitar el uso de estos modelos estado del arte a data scientists y developers, para que puedan utilizarlos en ambientes productivos. Escrita en pytorch, su diseño está enfocado en la usabilidad y reproducibilidad de los experimentos. Para ello, nixtlats cuenta con diversos módulos:&lt;/p&gt;
&lt;p&gt;Data: contiene datasets de diversas competencias de series de tiempo.
Models: incluye modelos estado del arte.
Evaluation: posee diversas funciones de pérdida y métricas de evaluación.&lt;/p&gt;
&lt;p&gt;Objetivo:&lt;/p&gt;
&lt;p&gt;-Introducir a les asistentes a los retos del pronóstico de series de tiempo con deep learning.
-Aplicaciones comerciales del pronóstico de series de tiempo.
-Describir nixtlats, sus componentes y las mejores prácticas para entrenamiento y despliegue de modelos estado del arte en productivo.
-Reproducción de resultados estado del arte usando nixtlats del modelo ganador de la competencia M4 de series de tiempo (ESRNN).&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Observability driven development</title><link href="https://pyvideo.org/pycon-us-2022/observability-driven-development.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Bianca Rosa</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/observability-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're all happy developing your application but when it comes the time to send it to production and have the first customers testing, you might realize that whenever a bug is found it is just too hard to understand what is going on in a production environment - you often …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're all happy developing your application but when it comes the time to send it to production and have the first customers testing, you might realize that whenever a bug is found it is just too hard to understand what is going on in a production environment - you often don't have access to the user data, the user account and struggles to reproduce the error and support your customer properly.&lt;/p&gt;
&lt;p&gt;The story is too familiar and probably happened to a lot of of us.&lt;/p&gt;
&lt;p&gt;In this talk, we will walk through techniques and things to consider when writing an application that is going to be supported in a production environment with an eye for observability by having searchable, consistent, and rich log messages.&lt;/p&gt;
&lt;p&gt;At first, the problem will be presented to the audience with a use-case scenario where a developer has no way of knowing what happened with a particular customer in a production environment if an API request fails.
Opening the code for this request, we will add together the log messages that would've made it possible for the development to debug this problem properly - and then, talk through strategies to keep in mind during the early development of the code.
We will also walk through log levels and how to use them properly, making sure the log messages are clean and understandable, how to take take advantage of log's extra fields to have metadata about the messages that we are writing, and the best way to make log messages easily searchable.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Open Source on Easy Mode</title><link href="https://pyvideo.org/pycon-us-2022/open-source-on-easy-mode.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/open-source-on-easy-mode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source is the lifeblood of the community, and we all stand on the shoulders of giants. But the responsibility, time commitment, and processes that come with maintaining projects on PyPI can be overwhelming, even for the best of us. With this talk, we'll see how the right tools …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source is the lifeblood of the community, and we all stand on the shoulders of giants. But the responsibility, time commitment, and processes that come with maintaining projects on PyPI can be overwhelming, even for the best of us. With this talk, we'll see how the right tools and automation can cut out the overhead from running open source projects, and let you focus on the fun parts!&lt;/p&gt;
&lt;p&gt;We'll cover a wide range of topics, from packaging, metadata, and dependencies, to code quality, testing, and CI/CD, and finish with documentation, helping new developers, and reviewing contributions from the community. We'll look at high level concepts, modern best practices, and free tools available and how they make it easier than ever for new contributors to get started, while giving you confidence that their changes are safe and ready for production.&lt;/p&gt;
&lt;p&gt;Rather than just pointing to cookie cutter templates, we'll talk about the &amp;quot;why&amp;quot; behind these best practices and how they fit into common developer workflows. We'll also include links to references and popular developer tools, as well as a companion site with slides and a list of everything mentioned in the talk.&lt;/p&gt;
&lt;p&gt;Developers of all experience levels are welcome. Whether you're new to packaging and need guidance for your first release, or a seasoned package maintainer looking to simplify your workflow, this talk is for you!&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Open Source, Python Based Tools For Data Privacy</title><link href="https://pyvideo.org/pycon-us-2022/open-source-python-based-tools-for-data-privacy.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Cillian Kieran</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/open-source-python-based-tools-for-data-privacy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I make the case that the developer community has an opportunity to profoundly improve data privacy by shifting privacy upstream into the SDLC, where it belongs. I will share resources and lessons learned from my team's development of open-source, Python-based devtools for data privacy. Analogous to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I make the case that the developer community has an opportunity to profoundly improve data privacy by shifting privacy upstream into the SDLC, where it belongs. I will share resources and lessons learned from my team's development of open-source, Python-based devtools for data privacy. Analogous to physical infrastructure, our digital infrastructure needs to be designed with trustworthiness at the forefront. As developers, we have often been left out of important design decisions about how technical systems actually process personal data. Typically, privacy risk is addressed reactively, and developers have to manually fulfill users' privacy requests across disparate data infrastructure. This reactive, burdensome approach to privacy pits trustworthiness against innovation. To build trustworthy systems at scale, we need devtools for proactive privacy, and the tools must fit within existing developer workflows.&lt;/p&gt;
&lt;p&gt;I will walk through the existing points of friction for developers today, the power of privacy embedded into the SDLC, and the tight bond between open-source and privacy. My team and I have learned that we can improve privacy at scale when the tools for privacy fit into developers' existing workflows and the infrastructure they use every day, including Snowflake warehouses, mongoDB databases, Redis session stores, and more. I will demonstrate what proactive privacy can look like for developers and data engineers: automatic flags for privacy risk in the CI pipeline, and streamlined privacy request fulfillment by traversing distributed data systems for custom data operations—such as deleting personal data while upholding referential integrity across databases.&lt;/p&gt;
&lt;p&gt;Open-source and privacy go hand-in-hand in offering developers and end-users digital infrastructure that they can trust. To tackle a problem as complex as modern privacy, the solution requires all of us to build shared, transparent, and community-informed privacy standards for technology worldwide.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Peter Wang</title><link href="https://pyvideo.org/pycon-us-2022/peter-wang.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Peter Wang</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/peter-wang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peter Wang is the CEO and co-founder of Anaconda, and helped found the PyData conferences and global community. Prior to starting Anaconda, Peter worked as a professional scientific computing and visualization software engineer. He has extensive experience in software design and development across a broad range of areas, including …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peter Wang is the CEO and co-founder of Anaconda, and helped found the PyData conferences and global community. Prior to starting Anaconda, Peter worked as a professional scientific computing and visualization software engineer. He has extensive experience in software design and development across a broad range of areas, including 3D graphics, geophysics, large data simulation and visualization, financial risk modeling, and medical imaging. Peter holds a BA in Physics from Cornell University.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Productionize Research Oriented Code By Python</title><link href="https://pyvideo.org/pycon-us-2022/productionize-research-oriented-code-by-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Tetsuya Jesse Hirata</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/productionize-research-oriented-code-by-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Target audiences might be python engineers who is involved with R&amp;amp;D, data science, AI/ML projects, or data oriented projects.&lt;/p&gt;
&lt;p&gt;【Introduction】&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Background&lt;/li&gt;
&lt;li&gt;Definition of Research Oriented Code and Production Code&lt;/li&gt;
&lt;li&gt;Differences between Research Oriented Code and Production Code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【Main Talk】&lt;/p&gt;
&lt;p&gt;Four steps to productionize research oriented code&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Understand …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Target audiences might be python engineers who is involved with R&amp;amp;D, data science, AI/ML projects, or data oriented projects.&lt;/p&gt;
&lt;p&gt;【Introduction】&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Background&lt;/li&gt;
&lt;li&gt;Definition of Research Oriented Code and Production Code&lt;/li&gt;
&lt;li&gt;Differences between Research Oriented Code and Production Code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【Main Talk】&lt;/p&gt;
&lt;p&gt;Four steps to productionize research oriented code&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Understand the code through code reading and code documentation&lt;/li&gt;
&lt;li&gt;Modularize the code into preparation code, pre/post-process code, calculation code based on the code documents&lt;/li&gt;
&lt;li&gt;Refactor the code with test code&lt;/li&gt;
&lt;li&gt;Make them products&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【Summary】&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Summarize the four steps to productionize research oriented code&lt;/li&gt;
&lt;li&gt;After making the code products, improve performance and monitor the behaviors of production code&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>(Professionally) Coding with Others</title><link href="https://pyvideo.org/pycon-us-2022/professionally-coding-with-others.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>William Morrell</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/professionally-coding-with-others.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A mix of tools and practices to incorporate for facilitating collaboration between developers. As a nice side-effect, these also let past-you help future-you work on entirely solo projects. Topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Documentation, specifically calling out a README and contributor guidelines, and site generators à la Sphinx or MkDocs;&lt;/li&gt;
&lt;li&gt;Version control …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A mix of tools and practices to incorporate for facilitating collaboration between developers. As a nice side-effect, these also let past-you help future-you work on entirely solo projects. Topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Documentation, specifically calling out a README and contributor guidelines, and site generators à la Sphinx or MkDocs;&lt;/li&gt;
&lt;li&gt;Version control / git, collecting changes in logical commits, writing good commit and pull request messages;&lt;/li&gt;
&lt;li&gt;Auto-lint and formatting: pre-commit, black, isort, flake8;&lt;/li&gt;
&lt;li&gt;Dependency management: pyenv, pipenv/poetry, Docker;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Programacion Reactiva: Navegando en el mundo de la asincronia con RxPy</title><link href="https://pyvideo.org/pycon-us-2022/programacion-reactiva-navegando-en-el-mundo-de-la-asincronia-con-rxpy.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Andres Pineda</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/programacion-reactiva-navegando-en-el-mundo-de-la-asincronia-con-rxpy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A medida que nuestras aplicaciones van creciendo y estas se van poniendo más complejas, el performance pudiera verse impactado por las diferentes tareas que se ejecutan, algunas inclusive llegando a bloquear el “thread” donde estas están corriendo.&lt;/p&gt;
&lt;p&gt;La programación reactiva (ReactiveX) nos ayuda con esto, permitiéndonos escribir de una …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A medida que nuestras aplicaciones van creciendo y estas se van poniendo más complejas, el performance pudiera verse impactado por las diferentes tareas que se ejecutan, algunas inclusive llegando a bloquear el “thread” donde estas están corriendo.&lt;/p&gt;
&lt;p&gt;La programación reactiva (ReactiveX) nos ayuda con esto, permitiéndonos escribir de una forma fácil instrucciones que se ejecutarán de forma asíncrona gracias a los operadores que pueden ser usados para crear, filtrar y unificar los diferentes flujos de datos de nuestro sistema, todo esto, manteniendo nuestro código flexible, legible y fácil de mantener.&lt;/p&gt;
&lt;p&gt;Esta presentación nos muestra que es la programación reactiva, en qué consiste y que nos permite hacer para nuestros programas Python puedan implementarla y así disfrutar de sus beneficios.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Programming Your Way up a Skyscraper - Python in the Built World</title><link href="https://pyvideo.org/pycon-us-2022/programming-your-way-up-a-skyscraper-python-in-the-built-world.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Tadeh Hakopian</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/programming-your-way-up-a-skyscraper-python-in-the-built-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how Architects leverage Python in building projects to enable more design possibilities than ever before. Python is one of the fastest growing scripting languages in the Building design and construction field increasingly being used by professional in the industry. This talk will lead you through how Architects design …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how Architects leverage Python in building projects to enable more design possibilities than ever before. Python is one of the fastest growing scripting languages in the Building design and construction field increasingly being used by professional in the industry. This talk will lead you through how Architects design, plan, edit and execute scripts with Python using different editing tools. Learn about how designers tackle the challenge of putting a building together with the aid of code including; using Python script to edit geometry, create algorithmic design for buildings, sort data lists, write content to software and much more. With Python you can unleash the potential in your projects so come and see what’s possible.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Pyodide: A Python distribution for the browser</title><link href="https://pyvideo.org/pycon-us-2022/pyodide-a-python-distribution-for-the-browser.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Roman Yurchak</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/pyodide-a-python-distribution-for-the-browser.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyodide is a Python distribution for the browser and Node.js based on WebAssembly. It includes a port of CPython 3.9 to WebAssembly/Emscripten, and makes it possible to install and run Python packages in the browser. Pyodide comes with a robust Javascript ⟺ Python foreign function interface so …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyodide is a Python distribution for the browser and Node.js based on WebAssembly. It includes a port of CPython 3.9 to WebAssembly/Emscripten, and makes it possible to install and run Python packages in the browser. Pyodide comes with a robust Javascript ⟺ Python foreign function interface so that you can mix these two languages in your code with minimal friction.&lt;/p&gt;
&lt;p&gt;We will walk through simple examples of how to run Python applications in the browser with Pyodide. We will also discuss the process of porting existing Python packages, including what makes a package suitable to port and what challenges are likely to arise.&lt;/p&gt;
&lt;p&gt;Some Criteria that Determine Suitability of a Project for Porting:&lt;/p&gt;
&lt;p&gt;Purely computational projects are simple to port to run in the browser. We are missing threading and multiprocessing, so you will need to be able to run single threaded. File system code mostly works unchanged. However, much of the UI and network access are very different inside the browser. Packages with a clean divide between doing computation and doing UI will be simpler to port, the UI parts may need to be rewritten or shimmed but the pure computation need not be.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Python for Threat Intelligence</title><link href="https://pyvideo.org/pycon-us-2022/python-for-threat-intelligence.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Aaron Stephens</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-for-threat-intelligence.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For many of us, writing code isn't our job - but we do it anyways. We're not software engineers, and balancing the two isn't easy, but we make do. Because with just a few lines of Python, we can automate the boring, tedious work and enable ourselves to tackle the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For many of us, writing code isn't our job - but we do it anyways. We're not software engineers, and balancing the two isn't easy, but we make do. Because with just a few lines of Python, we can automate the boring, tedious work and enable ourselves to tackle the really hard problems. This is especially true in threat intelligence, where analysts help defenders make informed decisions to protect themselves and their businesses against the security incidents happening every single day.&lt;/p&gt;
&lt;p&gt;How do major hacks happen, who's responsible, and why? Come and learn about the world of threat intelligence, why we ask these questions, how we answer them, and - most importantly - the Python tools we've built along the way. See how we approach development on a team without any developers, balance process with productivity and enable success at scale. This one is for all the scripts out there helping us do our jobs, and for all the part-time developers who write them. Enjoy!&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Python Oddities Explained</title><link href="https://pyvideo.org/pycon-us-2022/python-oddities-explained.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-oddities-explained.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.&lt;/p&gt;
&lt;p&gt;Warning: this talk will include many Python head-scratchers so show up prepared to think on your feet!&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Python Software Foundation Community Update</title><link href="https://pyvideo.org/pycon-us-2022/python-software-foundation-community-update.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Deb Nicholson</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-software-foundation-community-update.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PSF community update by Deb Nicholson&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Python Steering Council Panel</title><link href="https://pyvideo.org/pycon-us-2022/python-steering-council-panel.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-steering-council-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PYTHON STEERING COUNCIL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pablo Galindo Salgado&lt;/li&gt;
&lt;li&gt;Petr Viktorin *&lt;/li&gt;
&lt;li&gt;Thomas Wouters&lt;/li&gt;
&lt;li&gt;Gregory P. Smith&lt;/li&gt;
&lt;li&gt;Brett Cannon *&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PYTHON STEERING COUNCIL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pablo Galindo Salgado&lt;/li&gt;
&lt;li&gt;Petr Viktorin *&lt;/li&gt;
&lt;li&gt;Thomas Wouters&lt;/li&gt;
&lt;li&gt;Gregory P. Smith&lt;/li&gt;
&lt;li&gt;Brett Cannon *&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This keynote will update the community on current and future initiatives. Additionally, the Steering Council will address community questions collected prior to the conference.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Python Types for Fun and Profit</title><link href="https://pyvideo.org/pycon-us-2022/python-types-for-fun-and-profit.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pradeep Kumar Srinivasan</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-types-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers now use type annotations to catch and fix bugs early in the coding process. This tutorial will introduce you to type annotations in Python. We’ll cover basic ideas about how types work in a dynamic language like Python, and where explicit annotations can provide value …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers now use type annotations to catch and fix bugs early in the coding process. This tutorial will introduce you to type annotations in Python. We’ll cover basic ideas about how types work in a dynamic language like Python, and where explicit annotations can provide value. We’ll then explore features of the type system in more depth, and demonstrate how they can be used to precisely yet flexibly express a huge range of programming patterns.&lt;/p&gt;
&lt;p&gt;Throughout the tutorial, you will have the chance to get your hands dirty by learning how to add types to small code snippets as well as to an example GitHub project, and run a type checker to see errors as you code. You’ll get to practice and play around with each concept as we discuss it, and walk away with concrete experience adding types to and catching bugs in real code.&lt;/p&gt;
&lt;p&gt;A laptop with Python installed is required along with internet access.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Python + VPS Jupyter HUB/Notebook, aprender, enseñar, investigar, trabajar de manera colaborativa, remota y presencial</title><link href="https://pyvideo.org/pycon-us-2022/python-vps-jupyter-hubnotebook-aprender-ensenar-investigar-trabajar-de-manera-colaborativa-remota-y-presencial.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ariel Silvio Norberto Ramos</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-vps-jupyter-hubnotebook-aprender-ensenar-investigar-trabajar-de-manera-colaborativa-remota-y-presencial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Desde 2017 en el Norte Argentino, realizamos actividades con experiencias en tecnologia de impacto positivo para la sociedad, lo hacemos con las Comunidades Python Norte y Python Argentina. Enseñamos a los asistentes buenas practicas de uso en tecnologia y Software Open Source.&lt;/p&gt;
&lt;p&gt;Combinamos 3 componentes para lograr un ambiente …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Desde 2017 en el Norte Argentino, realizamos actividades con experiencias en tecnologia de impacto positivo para la sociedad, lo hacemos con las Comunidades Python Norte y Python Argentina. Enseñamos a los asistentes buenas practicas de uso en tecnologia y Software Open Source.&lt;/p&gt;
&lt;p&gt;Combinamos 3 componentes para lograr un ambiente de tecnologia seguro y practico en estas experiencias piloto educativas, de manera remota, durante la pandemia COVID19.&lt;/p&gt;
&lt;p&gt;Los 3 componentes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lenguaje de Programacion + Entorno de Trabajo + Infraestructura == Python + Project Jupyter + VPS (Jupyter HUB/Notebook).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VPS == Servidor Privado Virtual (Virtual Private Server)&lt;/p&gt;
&lt;p&gt;Tuvimos en cuenta los conocimientos tecnicos basicos de los interesados, entonces decidimos implementar/instalar en un VPS todos los componentes necesarios (Python + Librerias + Plugins de Jupyter + Widgets), asi ellos aprenden directamente.&lt;/p&gt;
&lt;p&gt;Iniciamos con programacion, luego con experiencias piloto programando Jupyters Notebooks para enseñar Matematicas, Fisica, Robotica, armamos los notebooks con lo justo y necesario de programacion, ayudandonos de Widgets y Graficas.&lt;/p&gt;
&lt;p&gt;A medida que avanzamos, armamos Jupyter Notebooks en materias de No Calculo.&lt;/p&gt;
&lt;p&gt;Logramos una buena practica y dinamica en la asistencia de aprendizaje en el uso del VPS y la enseñanza de conceptos de materias en las que logramos armar/programar Jupyter Notebooks.&lt;/p&gt;
&lt;p&gt;Los interesados fueron Docentes, Alumnos, Particulares.&lt;/p&gt;
&lt;p&gt;Se hizo de manera remota, tambien tuvimos experiencias en forma presencial.&lt;/p&gt;
&lt;p&gt;Generamos nuestros notebook como recursos.&lt;/p&gt;
&lt;p&gt;Tambien se pudo formar Jovenes Investigadores de la Universidad de Salta en disciplinas No relacionadas a Tecnologia.&lt;/p&gt;
&lt;p&gt;Materials:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A41%3A37.101675/01-PyconUS-Ariel-Iniciando-Jupyter-Widgets.pdf"&gt;https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A41%3A37.101675/01-PyconUS-Ariel-Iniciando-Jupyter-Widgets.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T19%3A20%3A02.141276/01-LILIANA-HURTADO.pdf"&gt;https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T19%3A20%3A02.141276/01-LILIANA-HURTADO.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A46%3A33.139948/QR-GITHUB-MEDIANO.png"&gt;https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A46%3A33.139948/QR-GITHUB-MEDIANO.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A41%3A54.521757/02-PyconUS-Sofia-Ejemplos.pdf"&gt;https://pycon-assets.s3.amazonaws.com/2022/media/presentation_slides/10/2022-04-30T20%3A41%3A54.521757/02-PyconUS-Sofia-Ejemplos.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Querido Diario: cómo liberar datos oficiales de ciudades brasileñas con Python</title><link href="https://pyvideo.org/pycon-us-2022/querido-diario-como-liberar-datos-oficiales-de-ciudades-brasilenas-con-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Renne Rocha</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/querido-diario-como-liberar-datos-oficiales-de-ciudades-brasilenas-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los Diarios Oficiales son las principales formas de comunicación entre la ciudadanía y el poder ejecutivo de una ciudad. En Brasil, por ley, todos los actos oficiales del gobierno deben publicarse en los Diarios. Sin embargo, no existe un estándar sobre como deben estar disponibles estas publicaciones. Entonces tenemos …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los Diarios Oficiales son las principales formas de comunicación entre la ciudadanía y el poder ejecutivo de una ciudad. En Brasil, por ley, todos los actos oficiales del gobierno deben publicarse en los Diarios. Sin embargo, no existe un estándar sobre como deben estar disponibles estas publicaciones. Entonces tenemos un escenario donde las 5570 ciudades brasileñas publican cada uno a su manera, generalmente utilizando formatos cerrados como PDF que dificultan la consulta y análisis de datos de forma automatizada.&lt;/p&gt;
&lt;p&gt;El proyecto Querido Diario tiene como objetivo hacer más accesibles estos Diarios, facilitando la búsqueda y consulta de su contenido a través de una página de búsqueda, una API abierta y en el futuro con herramientas de análisis de contenido.&lt;/p&gt;
&lt;p&gt;En esta charla se presentará todo el proceso, desde la extracción de datos de las páginas de los municipios (mediante data scraping usando el framework Scrapy), el almacenamiento y procesamiento de archivos PDF para permitir la búsqueda en su contenido (usando OCR), a la API y la página de búsqueda, donde cualquier persona tiene acceso centralizado a los Diarios de todos los municipios.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Reconocimiento de figuras con Visión Artificial</title><link href="https://pyvideo.org/pycon-us-2022/reconocimiento-de-figuras-con-vision-artificial.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Alison Orellana Rios</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/reconocimiento-de-figuras-con-vision-artificial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se verá la gestión de la librería OpenCV para el procesamiento de imágenes, con la que será posible seguir los pasos para identificar figuras y diferentes elementos mediante algoritmos de reconocimiento de imágenes aplicados a la determinación de formas.&lt;/p&gt;
&lt;p&gt;Verás el uso de OpenCV ya que esta librería te …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se verá la gestión de la librería OpenCV para el procesamiento de imágenes, con la que será posible seguir los pasos para identificar figuras y diferentes elementos mediante algoritmos de reconocimiento de imágenes aplicados a la determinación de formas.&lt;/p&gt;
&lt;p&gt;Verás el uso de OpenCV ya que esta librería te permite codificar rápidamente, ya que cuenta con una documentación oficial con muchos ejemplos, que ayudan a entender cada algoritmo en el procesamiento de imágenes, los pasos y su código para ver su uso o aplicación. Para ello, solo requiere una instalación, (que es rápida) y su posterior importación para comenzar a ver sus funciones.&lt;/p&gt;
&lt;p&gt;La visión artificial puede ayudar a mejorar el procesamiento de datos gráficos en diferentes áreas, tales como: industria, control de calidad, conteo de grandes cantidades de materiales, separación rápida de elementos, aseguramiento de la calidad, salud, determinación de áreas de interés y más, lo que permite mejorar el trabajo. y tiempos de producción, además de facilitar el tratamiento sin necesidad de interacción humana, lo que puede mejorar los resultados.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Reduciendo prejuicio en la inteligencia artificial: introducción a Fairlearn</title><link href="https://pyvideo.org/pycon-us-2022/reduciendo-prejuicio-en-la-inteligencia-artificial-introduccion-a-fairlearn.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Laura Gutiérrez Funderburk</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/reduciendo-prejuicio-en-la-inteligencia-artificial-introduccion-a-fairlearn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, el ponente proveerá:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introducción a un problema de aprendizaje automático en el ámbito de salud: estudiaremos un problema con datos sobre pacientes, y un programa que busca recomendar a pacientes de mayor riesgo basado en el número de visitas de emergencia y no emergencia.&lt;/li&gt;
&lt;li&gt;Ejemplos de …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, el ponente proveerá:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introducción a un problema de aprendizaje automático en el ámbito de salud: estudiaremos un problema con datos sobre pacientes, y un programa que busca recomendar a pacientes de mayor riesgo basado en el número de visitas de emergencia y no emergencia.&lt;/li&gt;
&lt;li&gt;Ejemplos de cómo evaluar los datos para identificar prejuicios utilizando gráficos y los paquetes pandas y matplolib. Entrenamiento del modelo con scikit-learn y evaluación de eficacia de resultados.&lt;/li&gt;
&lt;li&gt;Una introducción a Fairlearn (&lt;a class="reference external" href="https://fairlearn.org/"&gt;https://fairlearn.org/&lt;/a&gt;). Basado en el ejemplo anterior, vamos a ver cómo podemos utilizar Fairlearn para mejorar cómo determina el algoritmo a qué pacientes recomendar via el uso de dos submóludos: MetricFrame y ThresholdOptimizer. Veremos cómo podemos mejorar la calidad de las predicciones.&lt;/li&gt;
&lt;li&gt;Cómo aprender más sobre Fairlearn, la comunidad y oportunidades para contribuir.&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Sara Issaoun</title><link href="https://pyvideo.org/pycon-us-2022/sara-issaoun.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Sara Issaoun</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/sara-issaoun.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sara Issaoun is a NASA Einstein Fellow and observational astronomer at the Center for Astrophysics | Harvard &amp;amp; Smithsonian. She is a member of the Event Horizon Telescope (EHT) collaboration, the global effort to image and study the environment close to supermassive black holes. Her research centers around the collection, calibration …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sara Issaoun is a NASA Einstein Fellow and observational astronomer at the Center for Astrophysics | Harvard &amp;amp; Smithsonian. She is a member of the Event Horizon Telescope (EHT) collaboration, the global effort to image and study the environment close to supermassive black holes. Her research centers around the collection, calibration, and imaging of millimeter-wave radio observations of supermassive black holes. Supermassive black holes generate the highest energy processes in the known Universe, ejecting jets of plasma affecting galaxy environments on large scales, but their dynamics and emission mechanisms remain shrouded in mystery. She makes use of global networks of radio-telescopes to image and study the immediate surroundings of the supermassive black holes at the centers of our Galaxy and the galaxy M87.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry><entry><title>Sculpting Data for Machine Learning V02</title><link href="https://pyvideo.org/pycon-us-2022/sculpting-data-for-machine-learning-v02.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jigyasa Grover</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/sculpting-data-for-machine-learning-v02.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the contemporary world of machine learning algorithms - “data is the new oil”. For the state-of-the-art ML algorithms to work their magic it’s important to lay a strong foundation with access to relevant data. Volumes of crude data are available on the web nowadays, and all we need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the contemporary world of machine learning algorithms - “data is the new oil”. For the state-of-the-art ML algorithms to work their magic it’s important to lay a strong foundation with access to relevant data. Volumes of crude data are available on the web nowadays, and all we need are the skills to identify and extract meaningful datasets. This talk aims to present the power of the most fundamental aspect of Machine Learning - Dataset Curation, which often does not get its due limelight. It will also walk the audience through the process of constructing good quality datasets as done in formal settings with a simple hands-on Pythonic example. The goal is to institute the importance of data, especially in its worthy format, and the spell it casts on fabricating smart learning algorithms.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Securing Code with the Python Type System</title><link href="https://pyvideo.org/pycon-us-2022/securing-code-with-the-python-type-system.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Graham Bleaney</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/securing-code-with-the-python-type-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn’t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll see how Python types allow you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn’t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll see how Python types allow you to improve your project's security incrementally. First, we’ll show how simple type annotations by themselves can prevent security-impacting logic errors. Second, we'll see how you can prevent injection vulnerabilities such as SQL injection using a special type in your APIs (PEP 675). Next, we demonstrate how to leverage runtime type validation to securely deal with user-controlled data (such as HTTP requests). Finally, we show how types naturally enable powerful typing-based tools like Pysa and CodeQL to perform static taint flow analysis and catch complex vulnerabilities that span multiple functions. No security tool is a panacea, however, so we’ll also show you where typing and the tools that rely on it can fail.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Securing the Open Source Software Supply Chain</title><link href="https://pyvideo.org/pycon-us-2022/securing-the-open-source-software-supply-chain.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/securing-the-open-source-software-supply-chain.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supply Chain Security: so hot right now. With the recently increased focus on securing software systems, there has been a incredible explosion of tools, methodologies, standards, best practices, and more. Given the sheer quantity, it's hard to keep track and stay informed: how can you know what's right for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supply Chain Security: so hot right now. With the recently increased focus on securing software systems, there has been a incredible explosion of tools, methodologies, standards, best practices, and more. Given the sheer quantity, it's hard to keep track and stay informed: how can you know what's right for you?&lt;/p&gt;
&lt;p&gt;The same attributes that make open source software desirable to use also make it challenging to secure. When anyone can publish an open-source library, how can you decide what's safe to use? If anyone can contribute, how can you trust the maintainers? If source code and development is in public, how can we identify and respond to vulnerabilities when attackers will know about them as soon as we do?&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore new tools and best practices that you can use today as open-source software user to improve the security of your software supply chain and trust in the ecosystem. We'll show how each of these serves a different purpose, and protects you from a unique way in which your software supply chain could be vulnerable. Finally, we'll discuss upcoming and potential improvements to the entire open-source ecosystem.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Serialization: More than pickling</title><link href="https://pyvideo.org/pycon-us-2022/serialization-more-than-pickling.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Joseph Lucas</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/serialization-more-than-pickling.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to persist an object or instance? You probably researched serialization (converting an object to a byte-stream). The default for python is pickle, but there are other serialization options. In this talk, we'll explore some of those other options as well as their efficiency and security …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to persist an object or instance? You probably researched serialization (converting an object to a byte-stream). The default for python is pickle, but there are other serialization options. In this talk, we'll explore some of those other options as well as their efficiency and security considerations.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Shipping Python Extensions in Rust Two Million Times a Day</title><link href="https://pyvideo.org/pycon-us-2022/shipping-python-extensions-in-rust-two-million-times-a-day.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Paul Kehrer</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/shipping-python-extensions-in-rust-two-million-times-a-day.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For as long as Python has been around, a strength has been the ecosystem of packages written not in Python, but in C -- whether that's PIL, or numpy, or simplejson, or one of the thousands of others. But why C? Why not some other language? In the last several …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For as long as Python has been around, a strength has been the ecosystem of packages written not in Python, but in C -- whether that's PIL, or numpy, or simplejson, or one of the thousands of others. But why C? Why not some other language? In the last several years, Rust has emerged as a serious competitor to C. This talk will explore how we went about the process of using Rust in the pyca/cryptography package, the challenges we faced, the successes we found, and what this means for your projects.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Software Development for Machine Learning in Python</title><link href="https://pyvideo.org/pycon-us-2022/software-development-for-machine-learning-in-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pablo Alcain</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/software-development-for-machine-learning-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine Learning and Data Science code has its own set of challenges and peculiarities. When we write code to be used by Data Scientists or Machine Learning Developers we have to keep in mind constantly that every abstraction we use has to a) be compatible with a fast and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine Learning and Data Science code has its own set of challenges and peculiarities. When we write code to be used by Data Scientists or Machine Learning Developers we have to keep in mind constantly that every abstraction we use has to a) be compatible with a fast and easy exploration playground; b) allow for sensible checkpoints and optimizations; c) implement in a declarative fashion repeated queries and functions; and d) provide an abstraction level over all of the production code so it can be tracked and monitored seamlessly.&lt;/p&gt;
&lt;p&gt;In this talk we will provide general guidelines to approach this problem from a software engineering perspective, defining what should our entities be, how deep should our abstraction go and how to avoid some usual design pitfalls. We will apply all these guidelines to a specific and small end to end problem.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Software educativo: ¿que es? ¿como se hace?</title><link href="https://pyvideo.org/pycon-us-2022/software-educativo-que-es-como-se-hace.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Débora Azevedo</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/software-educativo-que-es-como-se-hace.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Si desea incursionar en la tecnología en la educación, esta charla es para usted. Discutiremos las definiciones de tecnología y sus usos en la educación como un medio para generar conocimiento y el desarrollo de software educativo y sus etapas. Para el desarrollo de esas herramientas es fundamental pensar …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Si desea incursionar en la tecnología en la educación, esta charla es para usted. Discutiremos las definiciones de tecnología y sus usos en la educación como un medio para generar conocimiento y el desarrollo de software educativo y sus etapas. Para el desarrollo de esas herramientas es fundamental pensar en las concepciones pedagógicas, que van a orientar todo el proceso de desarrollo. Posteriormente se presentarán más detalles de cada etapa de desarrollo de este tipo de software, que son la concepción, elaboración, finalización y viabilidad. En cada uno de ellos también se discutirán procesos y patrones de buenas prácticas. Se presentará el software educativo que desarrollé durante mi master, que tiene como objetivo ayudar a la alfabetización bilingüe (para lengua de signos brasileña y portugués brasileño escrito) de niños sordos siguiendo los patrones discutidos anteriormente. Terminaremos hablando de cómo la innovación debe estar presente en este tipo de herramientas, considerando la motivación para desarrollar estas aplicaciones y los impactos que puede tener en la educación. Finalmente, también discutiremos la accesibilidad y cómo podría haber problemas considerando nuestros propios prejuicios como desarrolladores de software, entre otras dificultades relacionadas con el proceso de desarrollo de software con fines educativos.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>Speed Up Data Access with PyArrow (Apache Arrow) - Data is the new API</title><link href="https://pyvideo.org/pycon-us-2022/speed-up-data-access-with-pyarrow-apache-arrow-data-is-the-new-api.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Deepak K Gupta</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/speed-up-data-access-with-pyarrow-apache-arrow-data-is-the-new-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Till now we’re used to accessing data over API’s and the API’s used to make sure that we get the data in the desired format which unfortunately requires data to go through serialization / deserialization cycle before being returned by the API&lt;/p&gt;
&lt;p&gt;What if we can change …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Till now we’re used to accessing data over API’s and the API’s used to make sure that we get the data in the desired format which unfortunately requires data to go through serialization / deserialization cycle before being returned by the API&lt;/p&gt;
&lt;p&gt;What if we can change or arrange the data in such a way where it neither needs an API nor any serialisation / deserialization to access and understand the data that too using multiple programming languages&lt;/p&gt;
&lt;p&gt;If it sounds interesting then welcome to the world of Apache Arrow which defines a language independent columnar memory format which supports zero-copy reads for lightning-fast data access without serialization overhead.&lt;/p&gt;
&lt;p&gt;The python library of the same is called PyArrow and can be integrated with python specific libraries like pandas and numpy and can propagate the benefits to the same.&lt;/p&gt;
&lt;p&gt;Welcome to this talk where you’ll learn about the architecture, use cases and reasons for using Apache Arrow using PyArrow. I’ll share how to as well as some of the interesting statistics of the difference it makes in our day to day access &amp;amp; analytics.&lt;/p&gt;
&lt;p&gt;I’ll also talk about Apache Flight, which is a high performance wire protocol focused on bulk transfer for analytics.&lt;/p&gt;
&lt;p&gt;This Session NOT a tutorial about PyArrow but a set of interesting improvements, facts and statistics which can help you to decide whether it makes sense to explore for the work you’re doing.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Testing Machine Learning Models</title><link href="https://pyvideo.org/pycon-us-2022/testing-machine-learning-models.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Carlos Kidman</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/testing-machine-learning-models.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As ML/AI systems are becoming more prevalent, the need for setting quality standards and testing practices has become crucial. Testing these models goes beyond validation metrics like accuracy, precision, and recall.&lt;/p&gt;
&lt;p&gt;Instead, quality attributes like model Behaviors, Usability, and Fairness need to be tested and measured using exploratory …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As ML/AI systems are becoming more prevalent, the need for setting quality standards and testing practices has become crucial. Testing these models goes beyond validation metrics like accuracy, precision, and recall.&lt;/p&gt;
&lt;p&gt;Instead, quality attributes like model Behaviors, Usability, and Fairness need to be tested and measured using exploratory and automated strategies.&lt;/p&gt;
&lt;p&gt;In this talk, we'll cover some of the risks and biases that can happen throughout the MLOps pipeline, demonstrate a few techniques to test a model's behaviors and fairness, and apply them against some real-world scenarios and state-of-the-art models.&lt;/p&gt;
&lt;p&gt;By the end, you will have new ideas and techniques that you can use to test your own ML/AI systems and approach testing these quality attributes from a user's perspective.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>The Model Review: improving transparency, reproducibility, &amp; knowledge sharing using MLflow</title><link href="https://pyvideo.org/pycon-us-2022/the-model-review-improving-transparency-reproducibility-knowledge-sharing-using-mlflow.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jes Ford</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/the-model-review-improving-transparency-reproducibility-knowledge-sharing-using-mlflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code Review is an integral part of software development, but many teams don’t have similar processes in place for the development and deployment of Machine Learning (ML) models. I will motivate the decision to create a Model Review process, starting from the principles of transparency, reproducibility, and knowledge …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code Review is an integral part of software development, but many teams don’t have similar processes in place for the development and deployment of Machine Learning (ML) models. I will motivate the decision to create a Model Review process, starting from the principles of transparency, reproducibility, and knowledge sharing. MLflow is a useful Python package to help simplify and automate much of the tracking necessary to create detailed records of machine learning experiments. Much of this talk will be spent introducing this tool, and demonstrating the core MLflow Tracking functionality. I’ll discuss how my team is currently running a Model Review process for any ML models that we push to production, and how we use MLflow to streamline this work and learn from each other.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Typing Summit</title><link href="https://pyvideo.org/pycon-us-2022/typing-summit.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>David Foster</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/typing-summit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Schedule of presentations:&lt;/p&gt;
&lt;p&gt;0:00 - “New typing features in Python 3.10 and 3.11”, David Foster&lt;/p&gt;
&lt;p&gt;17:51 - “Typing of Tensor Shapes and Type Arithmetic”, Alfonso Castaño&lt;/p&gt;
&lt;p&gt;39:15 - “Too small for a PEP: minor new typing features in Python 3.11”, Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;1:00:43 - Extending …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Schedule of presentations:&lt;/p&gt;
&lt;p&gt;0:00 - “New typing features in Python 3.10 and 3.11”, David Foster&lt;/p&gt;
&lt;p&gt;17:51 - “Typing of Tensor Shapes and Type Arithmetic”, Alfonso Castaño&lt;/p&gt;
&lt;p&gt;39:15 - “Too small for a PEP: minor new typing features in Python 3.11”, Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;1:00:43 - Extending PEP 647: User-Defined Type Guards”, Rebecca Chen&lt;/p&gt;
&lt;p&gt;1:19:07 - “The future of TypedDict&amp;quot; and &amp;quot;Runtime uses for type annotations: A survey of tools”, David Foster&lt;/p&gt;
&lt;p&gt;1:50:30 - “Runtime Annotations: PEP 563 &amp;amp; 649 Overview”, Carl Meyer&lt;/p&gt;
&lt;p&gt;2:21:05 - “Beyond Subtyping”, Kevin Millikin&lt;/p&gt;
&lt;p&gt;2:50:44 - “Panel: Typing-sig and Python Core Dev”, Guido van Rossum, Pablo Galindo Salgado, Thomas Wouters, Jelle Zijlstra, Pradeep Kumar Srinivasan, Matthew Rahtz&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Understanding attributes (Or: They're not nearly as boring as you think!)</title><link href="https://pyvideo.org/pycon-us-2022/understanding-attributes-or-theyre-not-nearly-as-boring-as-you-think.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/understanding-attributes-or-theyre-not-nearly-as-boring-as-you-think.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Attributes in Python, which we use dozens of times each day, seem boring, obvious, and not worthy of attention. But it turns out that they're key to the Python language: Every time you say a.b in Python, that little dot is hiding a lot of work, from searching …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Attributes in Python, which we use dozens of times each day, seem boring, obvious, and not worthy of attention. But it turns out that they're key to the Python language: Every time you say a.b in Python, that little dot is hiding a lot of work, from searching across multiple objects to silently rewriting things. And it turns out that what happens with attributes, while not always obvious to developers, determines a great deal of behavior in the Python language.&lt;/p&gt;
&lt;p&gt;In this talk, I'll discuss what attributes are (and aren't), what Python does when you use a dot (.) in your code, and how you can take advantage of it. We'll talk about attribute lookup, about inheritance, and about methods vs. functions. We'll also look into properties, and how they allow us to have attributes that look like data but behave like setters and getters. Finally, we'll look at the descriptor protocol, which makes so much of Python's functionality possible, including the automatic insertion of &amp;quot;self&amp;quot; as the first argument in method calls.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Uniendo a las comunidades hispanohablantes de Python</title><link href="https://pyvideo.org/pycon-us-2022/uniendo-a-las-comunidades-hispanohablantes-de-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Cristián Maureira-Fredes</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/uniendo-a-las-comunidades-hispanohablantes-de-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python en Español tiene como objetivo ser el lugar de encuentro central de todas las comunidades de Python hispanohablantes, ayudando a superar la barrera de lenguaje que usualmente es el primer problema con el que muchas personas se encuentran a la hora de buscar documentación, experiencias, o consejos. El …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python en Español tiene como objetivo ser el lugar de encuentro central de todas las comunidades de Python hispanohablantes, ayudando a superar la barrera de lenguaje que usualmente es el primer problema con el que muchas personas se encuentran a la hora de buscar documentación, experiencias, o consejos. El equipo de coordinación está formado por personas de distintos países y comunidades, y busca poder tener representación de cada país hispanohablante, y así entender las distintas realidades a la que la comunidad se enfrenta.
Uno de los objetivos centrales, es poder compartir la información que la comunidad en general pueda aprender de la experiencia de todas las comunidades colectivamente, para que cada nuevo capítulo se vaya formando sin tantas dificultades.
Finalmente, la centralización de recursos y eventos, facilita el acceso para toda la comunidad.&lt;/p&gt;
&lt;p&gt;Luego de esta charla, aprenderás de los esfuerzos, proyectos e ideas detrás de esta iniciativa, y sobre todo como poder sumarte.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="charla"></category></entry><entry><title>VigNET: An intelligent camera app that assists you in understanding your surroundings</title><link href="https://pyvideo.org/pycon-us-2022/vignet-an-intelligent-camera-app-that-assists-you-in-understanding-your-surroundings.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Padmaja Bhagwat</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/vignet-an-intelligent-camera-app-that-assists-you-in-understanding-your-surroundings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you can understand your surroundings with just a click of a picture?&lt;/p&gt;
&lt;p&gt;The speakers have built an intelligent camera app that assists people with visual impairment in understanding their surroundings. This application takes camera input in the form of an image and attempts to answer questions related …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you can understand your surroundings with just a click of a picture?&lt;/p&gt;
&lt;p&gt;The speakers have built an intelligent camera app that assists people with visual impairment in understanding their surroundings. This application takes camera input in the form of an image and attempts to answer questions related to the image. Simply put, it's a Visual Question Answering (VQA) app.&lt;/p&gt;
&lt;p&gt;The deep learning based application is built using a transformer based model called Vision Language Transformer (ViLT) which is both computationally fast and efficient, thus providing answers to users’ questions within a fraction of seconds. The application is integrated with speech-to-text and text-to-speech capabilities to enhance accessibility.&lt;/p&gt;
&lt;p&gt;This talk would mainly cover the following: * What is the Vision Language Transformer (ViLT) model? * Advantages of ViLT over traditional vision language pre-trained models * Best practices around modularizing the application into different services * Steps to deploy this deep learning based application on cloud (GCP) * How in-built python libraries helped in implementing and deploying such complex models (viz. ViLT) easily&lt;/p&gt;
&lt;p&gt;The entire code is open-sourced and the talk will provide a walkthrough of the steps to build your own visual question answering application.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry></feed>