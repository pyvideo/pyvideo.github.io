<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 11 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Python Testing 201 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-201-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the September 2019 Python Frederick event, Matt explored the features of pytest and how to apply them to Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-11:python-frederick/python-testing-201-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Python Testing 101 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-101-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the March 2019 Python Frederick event, Matt focused on the fundamentals of Python testing while using the pytest package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-03-13:python-frederick/python-testing-101-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Automate Your Integration Tests Using pytest-docker-compose</title><link>https://pyvideo.org/kiwi-pycon-2019/automate-your-integration-tests-using-pytest-docker-compose.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes unit tests aren't enough, and you need to actually deploy your solution to see how it behaves as a whole. Utilities like docker-compose make it easy to stand up an entire environment, but the actual testing part still has to be done manually... or does it? Learn how to automate your integration tests using pytest-docker-compose today!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Phoenix Zerin</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/automate-your-integration-tests-using-pytest-docker-compose.html</guid><category>docker</category><category>docker-compose</category><category>pytest</category><category>testing</category></item><item><title>Integration tests ready to use with pytest-play</title><link>https://pyvideo.org/pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I will introduce a new pytest plugin with which it is very
easy (even for non-technical) go to create and run new integration
testing at any level of IOT complex systems.&lt;/p&gt;
&lt;p&gt;pytest-play is a pytest plugin that allows you to play a JSON file that
describes some actions and assertions. We can use actions like: -
Selenium, driving the browser for the UI test - MQTT messages,
simulating a device - API calls - queries to Cassandra or PostgresSQL
(in the future) - custom commands, thanks to the pluggable architecture
Other advantages: - UI tests more reliable with implicit waits before
interacting with the elements - BDD support to make the scenario more
legible - reusability of steps&lt;/p&gt;
&lt;p&gt;I will show you how easy it is to create a json and execute it on the
fly on a Continuous Integration system. So let’s start having fun in
testing with pytest-play.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serena Martinetti</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</guid><category>continuous-integration</category><category>open source</category><category>Python</category><category>testing</category><category>selenium</category><category>integration</category><category>api</category><category>pytest</category><category>Functional Testing</category></item><item><title>The practice of TDD: tips&amp;tricks</title><link>https://pyvideo.org/pycon-italia-2018/the-practice-of-tdd-tipstricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python. The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/the-practice-of-tdd-tipstricks.html</guid><category>testing</category><category>test-driven-development</category><category>tdd</category><category>patterns</category><category>pytest</category><category>test</category><category>best-practices</category></item><item><title>Visual Testing with PyCharm and pytest</title><link>https://pyvideo.org/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual testing”: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We’ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we’ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less &amp;quot;in the way&amp;quot; of other development activities&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Okken</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/visual-testing-with-pycharm-and-pytest.html</guid><category>pytest</category><category>pycharm</category><category>tdd</category></item><item><title>Concurrent Testing wiht py.test</title><link>https://pyvideo.org/pybay-2017/concurrent-testing-wiht-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing a different way to perform concurrent testing with the py.test framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reverb Chu</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/concurrent-testing-wiht-pytest.html</guid><category>lightning talks</category><category>pytest</category><category>testing</category></item><item><title>Pytest recomendaciones, paquetes básicos para testing en Python y Django</title><link>https://pyvideo.org/pycon-es-2017/pytest-recomendaciones-paquetes-basicos-para-testing-en-python-y-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Durante el desarrollo de software es vital el uso de test, bien sean unitarios, funcionales o de integración. Uno de los frameworks de testing disponibles de Python es pytest el cual es considerado prácticamente un estándar en la comunidad de Python debido a su sencillez y su extenso uso en la mayoría de proyectos de software de Python. Esta charla no trata sobre buenas prácticas de testing sino de la presentación y consejos de uso sobre una selección “curada” de plugins de pytest.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreu Vallbona Plazas</dc:creator><pubDate>Sun, 24 Sep 2017 12:30:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/pytest-recomendaciones-paquetes-basicos-para-testing-en-python-y-django.html</guid><category>pytest</category></item><item><title>pytest más allá de la documentación</title><link>https://pyvideo.org/pycon-es-2017/pytest-mas-alla-de-la-documentacion.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest es un framework de testing a la vez sencillo e increíblemente avanzado. Si bien las técnicas básicas son accesibles y están bien documentadas, dentro de pytest existe toda una familia de herramientas que nos permiten realizar operaciones tan exóticas como útiles con nuestras suites de tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Víctor Muñoz Berti</dc:creator><pubDate>Sun, 24 Sep 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/pytest-mas-alla-de-la-documentacion.html</guid><category>pytest</category></item><item><title>Introduction to Unit Testing in Python with Pytest</title><link>https://pyvideo.org/pycon-us-2016/michael-tom-wing-christie-wilson-introduction-to-unit-testing-in-python-with-pytest-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Michael Tom-Wing, Christie Wilson&lt;/p&gt;
&lt;p&gt;In this tutorial we’ll be taking you on a journey into the wonderful land of unit testing with pytest. We’ll be taking a step by step approach by iteratively adding unit test coverage to our awesome Cat In A Box™ project. You will also get a crash course on Git, Github, virtualenvs, and test automation. By the end, we hope that you’ll have a desire to bring testing to our own projects!&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Tom-Wing</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/michael-tom-wing-christie-wilson-introduction-to-unit-testing-in-python-with-pytest-pycon-2016.html</guid><category>pytest</category><category>testing</category></item><item><title>Funcargs and other fun with pytest</title><link>https://pyvideo.org/pycon-au-2012/funcargs-and-other-fun-with-pytest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;p&gt;Pytest lives by &amp;quot;convention over configuration&amp;quot; - which is great once
you know what the conventions are. This talk will look at real examples
of pytest in use, emphasising the features that differentiate it from
nose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brianna Laugher</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/funcargs-and-other-fun-with-pytest.html</guid><category>pytest</category><category>testing</category></item><item><title>py.test - feature and new release highlights</title><link>https://pyvideo.org/pycon-de-2013/pytest-feature-and-new-release-highlights.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;py.test is a popular tool for writing tests in Python. It offers unique
features not found in other testing tools. Apart from some basics, this
talk introduces the modular fixture mechanism, the assert statement
reporting and discusses the latest news of pytest-2.4 such as better
doctest support and using contextmanagers in conjunction with fixtures.
We'll also quickly discuss the most popular from the many existing
plugins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/pytest-feature-and-new-release-highlights.html</guid><category>fixtures</category><category>pytest</category><category>testing</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>py.test - Rapid Testing with Minimal Effort</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test I - rapid testing with minimal effort&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to learn writing tests in Python? This tutorial introduces basic
practises using the popular py.test (&lt;a class="reference external" href="http://pytest.org"&gt;http://pytest.org&lt;/a&gt;) tool. We start
with an overview on testing and tools in Python and then discuss and
exercise basic idioms in a step-by-step manner. We cover the basic
writing, organisation and running of tests and debugging options. In the
second part we discuss setup and teardown of test state, usage and
configuration of test functions arguments and introduce coverage
testing. We will close with time to answer questions and discuss topics
from the participants.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;beginner programmers&lt;/p&gt;
&lt;p&gt;Perequisites/knowledge: basic knowledge of python programming&lt;/p&gt;
&lt;p&gt;Requirements: Laptop with Python 2.4 or greater installed. Pairing
welcome. outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;why automated testing?&lt;/li&gt;
&lt;li&gt;Developer oriented automated tests&lt;/li&gt;
&lt;li&gt;The test tool question&lt;/li&gt;
&lt;li&gt;py.test basics&lt;/li&gt;
&lt;li&gt;py.test fundamental features&lt;/li&gt;
&lt;li&gt;cross-project test tool&lt;/li&gt;
&lt;li&gt;A Typical Python test layout&lt;/li&gt;
&lt;li&gt;Another typical test layout&lt;/li&gt;
&lt;li&gt;Choosing a test layout&lt;/li&gt;
&lt;li&gt;automatic test discovery&lt;/li&gt;
&lt;li&gt;mind the &lt;strong&gt;init&lt;/strong&gt;.py files&lt;/li&gt;
&lt;li&gt;no boilerplate python test code&lt;/li&gt;
&lt;li&gt;assert introspection&lt;/li&gt;
&lt;li&gt;asserting expected exceptions&lt;/li&gt;
&lt;li&gt;print() debugging / output capturing&lt;/li&gt;
&lt;li&gt;Getting Started, basic usage [0]&lt;/li&gt;
&lt;li&gt;Failure / Traceback Demo [0]&lt;/li&gt;
&lt;li&gt;Skipping tests&lt;/li&gt;
&lt;li&gt;Dynamically skipping tests&lt;/li&gt;
&lt;li&gt;Marking test functions&lt;/li&gt;
&lt;li&gt;Marking a test for conditional skip&lt;/li&gt;
&lt;li&gt;Marking a test as expected to fail&lt;/li&gt;
&lt;li&gt;Conditional expected to fail&lt;/li&gt;
&lt;li&gt;Marking / Skipping exercise [0]&lt;/li&gt;
&lt;li&gt;Applying Marks to classes or modules&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;warm up: boilerplate test code&lt;/li&gt;
&lt;li&gt;&amp;quot;myscan&amp;quot; Exercises of this tutorial&lt;/li&gt;
&lt;li&gt;sketching our &amp;quot;myscan&amp;quot; project&lt;/li&gt;
&lt;li&gt;Starting Exercise [1]&lt;/li&gt;
&lt;li&gt;The example Solution [1]&lt;/li&gt;
&lt;li&gt;The &amp;quot;test setup&amp;quot; and fixture Problem&lt;/li&gt;
&lt;li&gt;test functions and funcargs&lt;/li&gt;
&lt;li&gt;How do funcargs work?&lt;/li&gt;
&lt;li&gt;funcarg factory notes&lt;/li&gt;
&lt;li&gt;builtin funcargs&lt;/li&gt;
&lt;li&gt;usage example: per-test temporary directory&lt;/li&gt;
&lt;li&gt;next step: adding more tests [2]&lt;/li&gt;
&lt;li&gt;observation on new tmpdir-using tests&lt;/li&gt;
&lt;li&gt;The mysetup pattern&lt;/li&gt;
&lt;li&gt;How the mysetup pattern works&lt;/li&gt;
&lt;li&gt;next step: introducing &amp;quot;mysetup&amp;quot; pattern [3]&lt;/li&gt;
&lt;li&gt;The new test function using &amp;quot;mysetup&amp;quot;&lt;/li&gt;
&lt;li&gt;a simple hook: adding a command line opt&lt;/li&gt;
&lt;li&gt;the py.test config object&lt;/li&gt;
&lt;li&gt;exercise: implement a new command line option [4]&lt;/li&gt;
&lt;li&gt;myscan example completed&lt;/li&gt;
&lt;li&gt;py.test hooks and plugins&lt;/li&gt;
&lt;li&gt;Installing &amp;quot;global&amp;quot; plugins&lt;/li&gt;
&lt;li&gt;exercise: use the &amp;quot;figleaf&amp;quot; plugin&lt;/li&gt;
&lt;li&gt;local plugins: conftest.py&lt;/li&gt;
&lt;li&gt;a simple config: ignoring directories&lt;/li&gt;
&lt;li&gt;a simple default option: verbose&lt;/li&gt;
&lt;li&gt;quick discussion of advanced usages&lt;/li&gt;
&lt;li&gt;Summary / questions and answers&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>tutorial</category></item><item><title>Rapid multi-purpose testing (#81)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid multi-purpose testing&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to rapidly test code, javascript or documents on different Python
Interpreters and versions? This talk gives an overview on new py.test
features of the last year. I'll discuss the minimal-boilerplate testing
and new plugin model and give an overview on which testing needs are
covered so far, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run tests written for nose or unittest&lt;/li&gt;
&lt;li&gt;ad-hoc distribute tests to local or remote Python environments&lt;/li&gt;
&lt;li&gt;test compatibility with Python3&lt;/li&gt;
&lt;li&gt;run javascript unit-tests in real browsers&lt;/li&gt;
&lt;li&gt;coverage testing&lt;/li&gt;
&lt;li&gt;django-specific testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll conclude with upcoming features regarding testing-in-the-cloud and
plans on more test tool convergence. (URL:
&lt;a class="reference external" href="http://pytest.org/"&gt;http://pytest.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>testing</category></item></channel></rss>