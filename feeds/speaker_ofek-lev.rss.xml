<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Ofek Lev</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 17 May 2024 00:00:00 +0000</lastBuildDate><item><title>Hatch: The only tool you need</title><link>https://pyvideo.org/pycon-us-2024/hatch-the-only-tool-you-need.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="docutils container"&gt;
&lt;object data="https://raw.githubusercontent.com/pypa/hatch/master/docs/assets/images/logo.svg" style="width: 500px;" type="image/svg+xml"&gt;Hatch logo&lt;/object&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="title"&gt;
&lt;h4&gt;Title&lt;/h4&gt;
&lt;p&gt;Hatch: The only tool you need&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="category"&gt;
&lt;h4&gt;Category&lt;/h4&gt;
&lt;p&gt;Packaging/tooling&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;30 minutes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;While other language ecosystems have a streamlined workflow that
involves a single tool like Rust's
&lt;a class="reference external" href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt; and JavaScript's
&lt;a class="reference external" href="https://github.com/npm/cli"&gt;npm&lt;/a&gt;, maintaining Python projects has
historically involved learning and using an ever-growing set of tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;packaging: &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;flit&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;dependency management: &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;poetry&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Python management: &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt;, Homebrew, Windows store&lt;/li&gt;
&lt;li&gt;environments: &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;nox&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;versioning: &lt;tt class="docutils literal"&gt;pbr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setuptools_scm&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bump2version&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;versioneer&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;builds: &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;build&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;publishing: &lt;tt class="docutils literal"&gt;twine&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk explains how &lt;a class="reference external" href="https://github.com/pypa/hatch"&gt;Hatch&lt;/a&gt; can be
that unified tool for Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience"&gt;
&lt;h4&gt;Audience&lt;/h4&gt;
&lt;p&gt;Programmers at any level that wish to simplify their development
experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level"&gt;
&lt;h4&gt;Level&lt;/h4&gt;
&lt;p&gt;Any&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;Attendees will learn how to manage the entire lifecycle of a project
with Hatch from creation to publishing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Intro (3 minutes)&lt;/li&gt;
&lt;li&gt;brief history&lt;/li&gt;
&lt;li&gt;why rewrite&lt;/li&gt;
&lt;li&gt;status/current users&lt;/li&gt;
&lt;li&gt;Project setup (2 minutes)&lt;/li&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;li&gt;porting setuptools-based projects&lt;/li&gt;
&lt;li&gt;creating new projects, with options&lt;/li&gt;
&lt;li&gt;Python management (1 minute)&lt;/li&gt;
&lt;li&gt;Packaging (6 minutes)&lt;/li&gt;
&lt;li&gt;briefly show &lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; metadata&lt;/li&gt;
&lt;li&gt;build targets&lt;/li&gt;
&lt;li&gt;metadata hook plugins&lt;/li&gt;
&lt;li&gt;file inclusion&lt;ul&gt;
&lt;li&gt;defaults&lt;/li&gt;
&lt;li&gt;benefits vs setuptools config&lt;/li&gt;
&lt;li&gt;VCS support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dev mode&lt;/li&gt;
&lt;li&gt;build hook plugins&lt;/li&gt;
&lt;li&gt;Dependencies (2 minutes)&lt;/li&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;auto-sync&lt;/li&gt;
&lt;li&gt;workspaces, monorepos&lt;/li&gt;
&lt;li&gt;Environments (8 minutes)&lt;/li&gt;
&lt;li&gt;basic options&lt;/li&gt;
&lt;li&gt;philosophical difference between &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;nox&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;scripts&lt;/li&gt;
&lt;li&gt;context formatting&lt;/li&gt;
&lt;li&gt;matrices&lt;/li&gt;
&lt;li&gt;overrides&lt;/li&gt;
&lt;li&gt;environment plugins&lt;/li&gt;
&lt;li&gt;Static analysis via Ruff (2 minutes)&lt;/li&gt;
&lt;li&gt;Testing via pytest (2 minutes)&lt;/li&gt;
&lt;li&gt;Versioning (2 minutes)&lt;/li&gt;
&lt;li&gt;source plugins&lt;/li&gt;
&lt;li&gt;bumping&lt;/li&gt;
&lt;li&gt;Publishing (1 minute)&lt;/li&gt;
&lt;li&gt;Future (1 minute)&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ofek/extensionlib"&gt;extension modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://discuss.python.org/t/17690"&gt;lock files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ofek Lev</dc:creator><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-17:/pycon-us-2024/hatch-the-only-tool-you-need.html</guid><category>PyCon US 2024</category></item></channel></rss>