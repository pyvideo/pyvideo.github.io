<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 26 May 2018 00:00:00 +0000</lastBuildDate><item><title>Super Donkey Cars</title><link>https://pyvideo.org/pydata-amsterdam-2018/super-donkey-cars.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Donkey car is an open source DIY self driving platform powered by a Raspberry Pi running a Deep Learning network. In this talk we'll go into how we modified the platform to retrain the Deep Learning network on a AWS GPU instance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Niels Zeilemaker</dc:creator><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-26:pydata-amsterdam-2018/super-donkey-cars.html</guid></item><item><title>Deploying Python models to production</title><link>https://pyvideo.org/pydata-amsterdam-2017/deploying-python-models-to-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2017&lt;/p&gt;
&lt;p&gt;Deploying models to production can sometimes be more difficult than developing the model itself. In this talk we'll explain how we deploy our Pandas/Scikit machine learning models to production using Flask, Docker, and Kubernetes. Moreover, we'll describe the CI process which automated away all the manual steps which were required.&lt;/p&gt;
&lt;p&gt;By using an internally developed framework, we allowed Data Scientists to develop models which can easily be deployed to production. The framework exposes models either over HTTP (REST) or binds them to a Kafka topic. Additionally, the framework packages the model and its dependencies in a Docker container, and generates all deployment templates required for deploying to Kubernetes. Finally, we'll describe our Jenkins jobs which automated away all the manual steps.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Niels Zeilemaker</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pydata-amsterdam-2017/deploying-python-models-to-production.html</guid></item><item><title>Embarrassingly parallel database calls with Python</title><link>https://pyvideo.org/pydata-paris-2015/embarrassingly-parallel-database-calls-with-pytho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever squeezed you SQL queries to the last millisecond, but
still found yourself with not enough speed in your data­driven Python
applications? Then this talk is for you. We’ll look at how to shard your
data, which design changes should happen and how to use the Python
threading module to bring in the data as quickly as possible by making
parallel database calls.&lt;/p&gt;
&lt;p&gt;Expected audience: Python developers building real­time applications
needing increase their response time.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Niels Zeilemaker</dc:creator><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-14:pydata-paris-2015/embarrassingly-parallel-database-calls-with-pytho.html</guid></item></channel></rss>