<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_marcus-willock.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-30T00:00:00+00:00</updated><entry><title>Wrapping Go in Python</title><link href="https://pyvideo.org/pygotham-2016/wrapping-go-in-python.html" rel="alternate"></link><published>2016-07-17T00:00:00+00:00</published><updated>2016-07-17T00:00:00+00:00</updated><author><name>Marcus Willock</name></author><id>tag:pyvideo.org,2016-07-17:pygotham-2016/wrapping-go-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I love python, and I am interested in Go. Recently, Go has gain the ability to create shared object files, which allows you to dynamically link Go code with other languages. This talk goes over the how, why, pros and cons of wrapping Go's shared object files in python.&lt;/p&gt;
</summary><category term="GO"></category></entry><entry><title>Wrapping Go in Python</title><link href="https://pyvideo.org/pyohio-2016/wrapping-go-in-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Marcus Willock</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/wrapping-go-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will call various shared object files (created with Go) in Python and systematically check what we can and cannot do with the functions in the shared object file. This check includes passing various types, such as int, float, lists, and dictionaries, into the shared object file function, and checking what we can and cannot return from the shared object function.&lt;/p&gt;
</summary></entry></feed>