<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Catherine Devlin</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_catherine-devlin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-07-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Easy command-line applications with cmd and cmd2 (#153)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Easy command-line applications with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin (IntelliTech Systems)&lt;/p&gt;
&lt;p&gt;The Python Standard Library's cmd module makes it absurdly simple to
write command-line interpreters - non-graphical programs that
communicate with users interactively through a simple text interface.
The third-party cmd2 module adds high-powered &amp;quot;batteries&amp;quot; to
applications written …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Easy command-line applications with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin (IntelliTech Systems)&lt;/p&gt;
&lt;p&gt;The Python Standard Library's cmd module makes it absurdly simple to
write command-line interpreters - non-graphical programs that
communicate with users interactively through a simple text interface.
The third-party cmd2 module adds high-powered &amp;quot;batteries&amp;quot; to
applications written for cmd.&lt;/p&gt;
&lt;p&gt;This presentation teaches attendees how to easily make their own
powerful command-line interpreters with cmd and cmd2. It also describes
the tricks cmd2 uses for some of its more interesting functionality so
that they can implement them in their own programs (even unrelated
ones). It ends with a brief demonstration of sqlpython, a cmd2-based
application that improves on existing ad-hoc SQL applications.&lt;/p&gt;
</content><category term="PyCon US 2010"></category><category term="cmd"></category><category term="cmd2"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>46. HTSQL : a navigational query language for relational databases</title><link href="https://pyvideo.org/pycon-us-2012/46-htsql-a-navigational-query-language-for-rel.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2012-03-11:/pycon-us-2012/46-htsql-a-navigational-query-language-for-rel.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This poster will cover a description of the HTSQL query language
(&lt;a class="reference external" href="http://htsql.org"&gt;http://htsql.org&lt;/a&gt;).&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>See Docs Run. Run, Docs, Run!</title><link href="https://pyvideo.org/pycon-us-2014/see-docs-run-run-docs-run.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2014-04-13:/pycon-us-2014/see-docs-run-run-docs-run.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Code executes. Docs just sit there looking pretty. Now it's time to blur
that boundary! Tools like the IPython Notebook, Sphinx, dexy, and
old-fashioned doctests blend code with docs, making package docs,
educational materials, and system-level docs more engaging, relevant,
and trustworthy.&lt;/p&gt;
</content><category term="PyCon US 2014"></category></entry><entry><title>PSF Community Service Awards - Catherine Devlin Keynote - Final Remarks</title><link href="https://pyvideo.org/pycon-us-2018/psf-community-service-awards-catherine-devlin-keynote-final-remarks.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2018-05-13:/pycon-us-2018/psf-community-service-awards-catherine-devlin-keynote-final-remarks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PSF Community Service Awards&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2018"&gt;https://speakerdeck.com/pycon2018&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2018-slides"&gt;https://github.com/PyCon/2018-slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keynote Speaker: Catherine Devlin&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="keynote"></category></entry><entry><title>PyOhio 2010: Teach Me Python Bugfixing</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2010-07-31:/pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teach Me Python Bugfixing&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;Python wants YOU to help maintain and extend the language we love so
much... but maybe you don't know how to go about making your
contribution. Catherine doesn't either. David Murray, an experienced
Python contributor, will guide her - and you - through …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teach Me Python Bugfixing&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;Python wants YOU to help maintain and extend the language we love so
much... but maybe you don't know how to go about making your
contribution. Catherine doesn't either. David Murray, an experienced
Python contributor, will guide her - and you - through the process, live
and unscripted. Come take part in learner-controlled instruction. No C
programming required!&lt;/p&gt;
</content><category term="PyOhio 2010"></category><category term="bugfixing"></category><category term="core"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Interactive command-line interpreters with cmd and cmd2</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line interpreters with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;How should your Python program receive commands and deliver results? If
an interactive command-line interpreter is right for you, you're in luck
- Python's got some great batteries included for you.&lt;/p&gt;
</content><category term="PyOhio 2011"></category><category term="cmd"></category><category term="cmd2"></category><category term="commandline"></category><category term="interpreters"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>The IPython Notebook Revolution</title><link href="https://pyvideo.org/pyohio-2013/the-ipython-notebook-revolution.html" rel="alternate"></link><published>2013-07-28T00:00:00+00:00</published><updated>2013-07-28T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2013-07-28:/pyohio-2013/the-ipython-notebook-revolution.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you think of IPython as simply an enhanced version of the live Python
prompt, you are in need of re-education. No matter what you do with
Python, applying the IPython Notebook imaginatively will revolutionize
the way you do it.&lt;/p&gt;
</content><category term="PyOhio 2013"></category><category term="talk"></category></entry><entry><title>Panel Discussion: So You Wanna Run a Tech Conference.</title><link href="https://pyvideo.org/pyohio-2014/panel-discussion-so-you-wanna-run-a-tech-confere.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Brian Costlow</name></author><id>tag:pyvideo.org,2014-07-26:/pyohio-2014/panel-discussion-so-you-wanna-run-a-tech-confere.html</id><content type="html"></content><category term="PyOhio 2014"></category><category term="plenary"></category></entry><entry><title>Open-Source Society (PyOhio 2015 keynote)</title><link href="https://pyvideo.org/pyohio-2015/keynote-by-catherine-devlin.html" rel="alternate"></link><published>2015-08-01T00:00:00+00:00</published><updated>2015-08-01T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2015-08-01:/pyohio-2015/keynote-by-catherine-devlin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open-source developers don't just build software - we also build ways to
work cooperatively. We can serve as a laboratory of cooperation that
develops and demonstrate cooperative tools, techniques, and attitudes
that will have a huge benefit to the world outside software, helping
human society scale more effectively than it …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open-source developers don't just build software - we also build ways to
work cooperatively. We can serve as a laboratory of cooperation that
develops and demonstrate cooperative tools, techniques, and attitudes
that will have a huge benefit to the world outside software, helping
human society scale more effectively than it ever has.&lt;/p&gt;
</content><category term="PyOhio 2015"></category><category term="plenary"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/saturday-lightning-talks.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Behrens</name></author><id>tag:pyvideo.org,2016-07-30:/pyohio-2016/saturday-lightning-talks.html</id><content type="html"></content><category term="PyOhio 2016"></category><category term="lightning talks"></category></entry><entry><title>Big Data, No Big Deal: PySpark</title><link href="https://pyvideo.org/pyohio-2020/big-data-no-big-deal-pyspark.html" rel="alternate"></link><published>2020-07-25T00:00:00+00:00</published><updated>2020-07-25T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2020-07-25:/pyohio-2020/big-data-no-big-deal-pyspark.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sick of feeling like those Big Data programmers must be way smarter than
you? Good news, you can catch up in five minutes. Spark is for big data
but the PySpark library makes using it no big deal.&lt;/p&gt;
</content><category term="PyOhio 2020"></category></entry><entry><title>More ORM Than Good: Stop Not Writing SQL</title><link href="https://pyvideo.org/pyohio-2022/more-orm-than-good-stop-not-writing-sql.html" rel="alternate"></link><published>2022-07-30T00:00:00+00:00</published><updated>2022-07-30T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2022-07-30:/pyohio-2022/more-orm-than-good-stop-not-writing-sql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've spent too much time learning tool after tool to avoid writing
SQL, when there's a really good way to interact with databases; it's
called SQL. Just use it! But not alone; there's a class of simple tools
that help you keep your SQL well-organized and tie it cleanly …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've spent too much time learning tool after tool to avoid writing
SQL, when there's a really good way to interact with databases; it's
called SQL. Just use it! But not alone; there's a class of simple tools
that help you keep your SQL well-organized and tie it cleanly into your
Python code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For database migrations, Agnostic&lt;/li&gt;
&lt;li&gt;Instead of an ORM, PugSQL&lt;/li&gt;
&lt;li&gt;For ETL transformations, dbt&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2022"></category></entry><entry><title>uv: Ultimate Victory over Installation and Dependency Chaos</title><link href="https://pyvideo.org/pyohio-2025/uv-ultimate-victory-over-installation-and-dependency-chaos.html" rel="alternate"></link><published>2025-07-27T00:00:00+00:00</published><updated>2025-07-27T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2025-07-27:/pyohio-2025/uv-ultimate-victory-over-installation-and-dependency-chaos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you recoil at the news that there's &lt;em&gt;yet another&lt;/em&gt; hot new packaging
tool to cram into your poor crowded brain?&lt;/p&gt;
&lt;p&gt;Take heart, brain! It will be all right! uv is splendidly complete and
gloriously simple to use. It's the single tool that can elegantly and
easily replace the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you recoil at the news that there's &lt;em&gt;yet another&lt;/em&gt; hot new packaging
tool to cram into your poor crowded brain?&lt;/p&gt;
&lt;p&gt;Take heart, brain! It will be all right! uv is splendidly complete and
gloriously simple to use. It's the single tool that can elegantly and
easily replace the whole jumbled toolbox you've been using until now.
See the essential simple usages of uv, and you'll be a believer.&lt;/p&gt;
</content><category term="PyOhio 2025"></category></entry></feed>