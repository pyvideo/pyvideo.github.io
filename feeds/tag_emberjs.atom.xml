<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_emberjs.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-15T00:00:00+00:00</updated><entry><title>Building Rich Applications with Django and Ember.js</title><link href="https://pyvideo.org/pytexas-2012/building-rich-applications-with-django-and-emberjs.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2012-09-15:pytexas-2012/building-rich-applications-with-django-and-emberjs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After several years in the depths of high-performance computing, I returned to the web world a couple years ago and discovered that Django's awesome-to-pain ratio had tipped strongly in it's favor. I've been hooked ever since. As web lead at dotCloud for the past year, I've gotten to work on making Django deployment awesome at DotCloud in San Francisco. I'm now spending more of my time doing developer advocacy -- acting as dotCloud's &amp;quot;customer-in-residence&amp;quot; to ensure the company is producing a product developers love. I maintain and contribute to a number of open source projects: &lt;a class="reference external" href="https://github.com/gabrielgrant"&gt;https://github.com/gabrielgrant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this talk, learn how Django and Ember.js can compliment each other: how to integrate them where their functionality overlaps and reconcile the differences where their approaches contradict. Django helps quickly express a data model and handle HTTP requests, but using it alone isn't conducive to building highly-dynamic interfaces. Ember, on the other hand, is a client-side framework designed with precisely these interfaces in mind, but doesn't tackle the server-side at all. Both Django and Ember.js are large, ambitious and opinionated frameworks. This is what gives them their power over their more minimalist colleagues (Flask and Backbone.js, respectively) but because their opinions sometimes differ, it can be difficult to make them play together. In this talk, I'll briefly introduce Ember.js, compare and contrast how Django and Ember.js handle the various layers of an application, and show how to bridge between these two worlds.&lt;/p&gt;
&lt;p&gt;Topics covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ember's interpretation of MVC in Django terms&lt;/li&gt;
&lt;li&gt;Overlap in functionality: which pieces of each framework to keep, modify and throw away&lt;/li&gt;
&lt;li&gt;Compiling Assets&lt;/li&gt;
&lt;li&gt;Connecting Ember to Django with Ember-data and Django REST framework&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="django"></category><category term="ember.js"></category></entry></feed>