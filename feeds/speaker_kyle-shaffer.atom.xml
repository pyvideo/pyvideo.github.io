<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_kyle-shaffer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-06T00:00:00+00:00</updated><entry><title>Code First, Math Later: Learning Neural Nets Through Implementation and Examples</title><link href="https://pyvideo.org/pydata-seattle-2017/code-first-math-later-learning-neural-nets-through-implementation-and-examples.html" rel="alternate"></link><published>2017-07-06T00:00:00+00:00</published><updated>2017-07-06T00:00:00+00:00</updated><author><name>Kyle Shaffer</name></author><id>tag:pyvideo.org,2017-07-06:pydata-seattle-2017/code-first-math-later-learning-neural-nets-through-implementation-and-examples.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover learning about neural networks through programming and experimentation. In particular, we will use the Keras library as a straightforward way to quickly implement popular neural network architectures such as feed-forward, convolutional, and recurrent networks. We'll also focus on internal data transformations within these networks, as information is passed from layer to layer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Programming frameworks for implementing neural networks have become easy to use, and now allow for rapid prototyping and experimentation. These frameworks can also be used as teaching tools for those who are getting started in neural networks and deep learning. However, often students and practitioners start from textbooks and research papers in order to learn about these powerful techniques, and get bogged down in mathematical notation and jargon. This talk proposes a different approach through three high-level steps:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;learning the basics of neural network architectures and applications,&lt;/li&gt;
&lt;li&gt;experimenting with these models through code examples, and&lt;/li&gt;
&lt;li&gt;revisiting the math and theory behind these models with a more practical understanding of how they work.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will focus mainly on architectures for three popular types of neural networks (feed-forward, convolutional, and recurrent), setting aside the issue of optimizing these networks during training.&lt;/p&gt;
&lt;p&gt;This talk assumes some familiarity with supervised machine learning and classification, but assumes no prior knowledge of neural networks or deep learning. A familiarity with Python is beneficial, since this talk presents neural nets primarily from the perspective of programming using a high-level library. However, if you are familiar with another programming language or deep learning library, the concepts will likely make sense.&lt;/p&gt;
</summary></entry></feed>