<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 22 Oct 2014 00:00:00 +0000</lastBuildDate><item><title>Firedrake: a High-level Portable Finite Element Computation Framework</title><link>https://pyvideo.org/euroscipy-2014/firedrake-a-high-level-portable-finite-element-c.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In an ideal world, scientific applications are computationally
efficient, maintainable, composable and allow scientists to work very
productively. In this talk we demonstrate that these goals are
achievable for a specific application domain by choosing suitable
domain-specific abstractions implemented in Python that encapsulate
domain knowledge with a high degree of expressiveness.&lt;/p&gt;
&lt;p&gt;We present &lt;a class="reference external" href="http://firedrakeproject.org/"&gt;Firedrake&lt;/a&gt;, a high-level
Python framework for the portable solution of partial differential
equations on unstructured meshes with the finite element method widely
used in science and engineering. Firedrake is built on top of
&lt;a class="reference external" href="http://op2.github.io/PyOP2"&gt;PyOP2&lt;/a&gt;, a domain-specific language
embedded in Python for parallel mesh-based computations. Finite element
local assembly operations execute the same computational kernel for
every element of the mesh and is therefore efficiently parallelisable.&lt;/p&gt;
&lt;p&gt;Firedrake allows scientists to describe variational forms and
discretisations for finite element problems symbolically in a notation
very close to the maths using the Unified Form Language
&lt;a class="reference external" href="https://bitbucket.org/fenics-project/ufl/"&gt;UFL&lt;/a&gt; from the &lt;a class="reference external" href="http://fenicsproject.org/"&gt;FEniCS
project&lt;/a&gt;. Variational forms are translated
into computational kernels by the FEniCS Form Compiler
&lt;a class="reference external" href="https://bitbucket.org/fenics-project/ffc/"&gt;FFC&lt;/a&gt;. Numerical linear
algebra is delegated to PETSc, leveraged via its petsc4py interface.&lt;/p&gt;
&lt;p&gt;PyOP2 abstracts away the performance-portable parallel execution of
these kernels on a range of hardware architectures, targeting multi-core
CPUs with OpenMP and GPUs and accelerators with PyCUDA and PyOpenCL and
distributed parallel computations with mpi4py. Backend-specific code
tailored to each specific computation is generated, just-in-time
compiled and efficiently scheduled for parallel execution at runtime.&lt;/p&gt;
&lt;p&gt;Due to the composability of the Firedrake and PyOP2 abstractions,
optimised implementations for different hardware architectures can be
automatically generated without any changes to a single high-level
source. Performance matches or exceeds what is realistically attainable
by hand-written code. Both projects are open source and developed at
Imperial College London.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Rathgeber</dc:creator><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-22:euroscipy-2014/firedrake-a-high-level-portable-finite-element-c.html</guid></item></channel></rss>