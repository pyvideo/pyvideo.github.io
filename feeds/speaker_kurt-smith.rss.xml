<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 09 Jul 2015 00:00:00 +0000</lastBuildDate><item><title>Cython: Blend the Best of Python and C++</title><link>https://pyvideo.org/scipy-2015/cython-blend-the-best-of-python-and-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kurt Smith</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/cython-blend-the-best-of-python-and-c.html</guid><category>Tutorial</category></item><item><title>Efficient Parallel Python for High-Performance Computing</title><link>https://pyvideo.org/scipy-2012/efficient-parallel-python-for-high-performance-co.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted at the intermediate-to-advanced Python user
who wants to extend Python into High-Performance Computing. The tutorial
will provide hands-on examples and essential performance tips every
developer should know for writing effective parallel Python. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments.&lt;/p&gt;
&lt;p&gt;Many of the examples you often find on parallel Python focus on the
mechanics of getting the parallel infrastructure working with your code,
and not on actually building good portable parallel Python. This
tutorial is intended to be a broad introduction to writing
high-performance parallel Python that is well suited to both the
beginner and the veteran developer.&lt;/p&gt;
&lt;p&gt;We will discuss best practices for building efficient high-performance
Python through good software engineering. Parallel efficiency starts
with the speed of the target code itself, so we will first look at how
to evolve code from for-loops to list comprehensions and generator
comprehensions to using Cython with NumPy. We will also discuss how to
optimize your code for speed and memory performance by using profilers.&lt;/p&gt;
&lt;p&gt;The tutorial will cover some of the common parallel communication
technologies (multiprocessing, MPI, and cloud computing) and introduce
the use of parallel map and map-reduce.&lt;/p&gt;
&lt;p&gt;At the end of the tutorial, participants should be able to write simple
parallel Python scripts, make use of effective parallel programming
techniques, and have a framework in place to leverage the power of
Python in High- Performance Computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kurt Smith</dc:creator><pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-17:scipy-2012/efficient-parallel-python-for-high-performance-co.html</guid></item></channel></rss>