<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 12 May 2018 00:00:00 +0000</lastBuildDate><item><title>Surviving (and thriving!) when you are overloaded</title><link>https://pyvideo.org/pycon-us-2018/surviving-and-thriving-when-you-are-overloaded.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking on leadership roles always includes new demands on your attention and time. Inevitably, your finite work week will conflict with the sheer amount of tasks you have to do. How can we as leaders keep stepping up to new responsibilities while balancing our pre-existing ones?&lt;/p&gt;
&lt;p&gt;This talk will focus on strategies for managing a too-large workload without abandoning important tasks or doing a shoddy job. We’ll look at techniques to prioritize what work matters most, identify tasks we should be doing ourselves, and finally delegate the rest to build our team’s skills while reducing our own workload.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/surviving-and-thriving-when-you-are-overloaded.html</guid></item><item><title>From Monolithic to Serverless with AWS Step Functions</title><link>https://pyvideo.org/pytexas-2017/from-monolithic-to-serverless-with-aws-step-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aside from proofs of concept, how are you realistically supposed to put Serverless into practice? Hear how Yelp has been moving a 10 year old codebase from tangled spaghetti toward serverless using AWS Step Functions (SFN). Learn SFN as infrastructure and how to incrementally move to Serverless.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pytexas-2017/from-monolithic-to-serverless-with-aws-step-functions.html</guid></item><item><title>From Monolithic to Serverless with AWS Step Functions</title><link>https://pyvideo.org/pygotham-2017/from-monolithic-to-serverless-with-aws-step-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;Sometimes it seems like you can hardly go a day without hearing about how “serverless” is going to change the world of backend architecture. But aside from toy proofs of concept, how are you realistically supposed to put it into practice? Most of us work with years-old codebases that are resistant to decoupling, much less easy to transition to serverless.&lt;/p&gt;
&lt;p&gt;Come hear how Yelp has been moving a 10 year old codebase from tangled spaghetti toward a serverless future using AWS Step Functions (SFN). You’ll gain familiarity with SFN as infrastructure, learn how it can be used to effectively disentangle complicated systems, and understand how to incrementally introduce serverless components into your monolithic application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-and-why"&gt;
&lt;h4&gt;Who and Why&lt;/h4&gt;
&lt;p&gt;This session is targeted at any developer interested in introducing serverless architectures, but concerned that their current systems are hopelessly complicated to integrate. The talk will be very focused on pragmatic approaches and grounded in a case study on a Yelp system which has been using these strategies to move steadily toward serverless architectures.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pygotham-2017/from-monolithic-to-serverless-with-aws-step-functions.html</guid></item><item><title>Protect Your Users with Circuit Breakers</title><link>https://pyvideo.org/vancouver-python-developers/protect-your-users-with-circuit-breakers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The inevitability of failures is the bane of scaling any modern web service and can cause serious pain for end users! Lucky for us, there are techniques that can help protect your product and handle failures in subsystems gracefully. This talk will dive into one of these in depth, the Circuit Breaker pattern, and explore the options it gives us for keeping our users safe.&lt;/p&gt;
&lt;p&gt;We will be focusing on several real-world problems and how they can be addressed by circuit breakers. You should expect to leave the talk with details on simple circuit breakers as well as understanding how they can be adapted for more complex situations. We’ll also discuss some options for how to implement your circuit breaker in readable Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/protect-your-users-with-circuit-breakers.html</guid></item><item><title>Protect your users with Circuit Breakers</title><link>https://pyvideo.org/europython-2016/protect-your-users-with-circuit-breakers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scott Triglia - Protect your users with Circuit Breakers
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/protect-your-users-with-circuit-breakers"&gt;https://ep2016.europython.eu//conference/talks/protect-your-users-with-circuit-breakers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Failures are the bane of scaling a modern web service and can cause
serious pain for end users! Lucky for us, there are techniques that
can help protect your product and handle failures in subsystems
gracefully. This talk will dive into one of these in depth, the
Circuit Breaker pattern, and explore the options it gives us for
keeping all our users safe. We will be focusing on several real-world
problems and options for how to implement your circuit breaker setup
in nice, readable python code.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The inevitability of failures is the bane of scaling any modern web
service and can cause serious pain for end users! Lucky for us, there
are techniques that can help protect your product handle failures in
subsystems gracefully. This talk will dive into one of these in depth,
the Circuit Breaker pattern, and explore the options it gives us for
keeping our users safe.&lt;/p&gt;
&lt;p&gt;We will be focusing on several real-world problems and how they can be
addressed by circuit breakers. You should expect to leave the talk
with details on simple circuit breakers as well as understanding how
they can be adapted for more complex situations. We’ll also discuss
some options for how to implement your circuit breaker in readable
python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contrived FAQ time!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don’t know what Circuit Breakers are, should I come?&lt;/strong&gt;
Definitely! We’re going to start from scratch and work our way up.
Only requirement is basic familiarity with backend services receiving
and making HTTP requests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I totally know what Circuit Breakers are, should I come?&lt;/strong&gt;
Definitely! After the intro, the main meat of the talk will be working
through a series of more advanced situations and talking about how we
can alter the basic circuit breaker setup to address them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I want real-world advice, not made up hypotheticals!&lt;/strong&gt;
Well that’s not really a question, but you’ll be happy to know that
the examples we’ll discuss come straight from my experience at Yelp.
They should be very realistic and broadly applicable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-31:europython-2016/protect-your-users-with-circuit-breakers.html</guid></item><item><title>Working effectively with legacy code - Python edition</title><link>https://pyvideo.org/pycon-ca-2015/working-effectively-with-legacy-code-python-scott.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Legacy code is that terrifying monster lurking in almost every long-lived codebase. You may not understand it, you may wonder how it works at all! It is the type of code most developers do their best to stay away from, and for good reason. So what is there to do when you inherit such a system for the first time? How can you take it from unknown mess to gleaming example of excellent engineering? What is unique about legacy systems written in Python?&lt;/p&gt;
&lt;p&gt;This talk will present a series of tools, both technical and social, for rehabilitating unknown, untested, and maybe even unloved systems. Approaches to improving these systems will primarily focus on refactoring and testing, with sidebars on engineering culture and personal motivation. We will reference Michael Feathers's excellent book on the topic, but also depart significantly to discuss particular challenges and opportunities presented by the Python language. After all, much of the written literature on this topic assumes a fairly Java-centric view of the world, and offers little support when you realize that object you thought was a dict is actually an ORM model that just happens to support getattr lookup.&lt;/p&gt;
&lt;p&gt;The intended audience is someone relatively new to professional programming, who is encountering their first legacy codebase. This talk will be a crash course in how to handle your unknown adversary.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-08:pycon-ca-2015/working-effectively-with-legacy-code-python-scott.html</guid></item><item><title>Arrested Development</title><link>https://pyvideo.org/pycon-au-2015/arrested-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The potential upside of microservices is significant and exciting. So
much so that Yelp's Transaction Platform committed from the start to an
architecture of small, cooperative microservices. This talk explores the
inevitable complications that arise in successful projects based on
microservices as they grow larger and stretch both their own
architecture and the developers responsible for them. Come hear tales of
terror (tight coupling! low test coverage!), stories which will warm
your heart (agility! strong interfaces!), and everything in between as
we follow the adventures of our plucky team.&lt;/p&gt;
&lt;p&gt;The talk will be focused on the functional, cultural, and reliability
challenges which occur as a microservices-based project evolves and
expands over time. Particular attention will be paid to where these
diverge from the utopian way microservices are often described, and to
the practical approaches your project can take to mitigate issues and
avoid the traps inherent in scaling up this type of approach. My goal is
to share with attendees some mistakes we've made, some successful
methods for growing gracefully, and above all with useful (and maybe
unexpected!) lessons from the trenches they can apply to their own work.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:pycon-au-2015/arrested-development.html</guid></item></channel></rss>