<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 27 Feb 2012 00:00:00 +0000</lastBuildDate><item><title>Browse and print problems and solutions</title><link>https://pyvideo.org/europython-2011/browse-and-print-problems-and-solutions.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of the web, how we publish is changing. Paper alone is
not enough, web pages are also required. And for many web pages it is
not enough to rely on the browser’s print capabilities. Sphinx, used
since 2008 for Python’s documentation, is a creative response to this
tension.&lt;/p&gt;
&lt;p&gt;This talk will take a broader view of the problem. For example, many
browsers support web fonts for display but not for printing. Mathematics
on web pages is still difficult, but SVG holds out much promise not only
for mathematics but for tables and other complex typeset material.
Achieving accessibility remains difficult.&lt;/p&gt;
&lt;p&gt;Based on over 15 year’s experience in print and electronic publishing,
this talk will survey problems and emerging solutions. Software and
sites covered include LaTeX, PDF, SVG, MathJax, web-fonts, PediaPress,
Sphinx and arXiv.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-02-27:europython-2011/browse-and-print-problems-and-solutions.html</guid><category>accessibility</category><category>sphinx</category><category>web</category></item><item><title>EuroPython 2011: Video Reportage!</title><link>https://pyvideo.org/europython-2011/europython-2011-video-reportage.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Here is a report that condenses in 3 minutes the adventure of 2011!
Thanks to all participants, speakers and sponsors who made this great
event in Italy dedicated to Python!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montage of EuroPython 2011.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-11:europython-2011/europython-2011-video-reportage.html</guid></item><item><title>EuroPython 2012: Join us in Florence on July!</title><link>https://pyvideo.org/europython-2011/europython-2012-join-us-in-florence-on-july.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We hope to have you among the participants of 2012! EuroPython is the
official European conference about the Python programming language. It
is aimed at everyone in the Python community, of all skill levels, both
users and programmers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Looking forward to EuroPython 2012.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-11:europython-2011/europython-2012-join-us-in-florence-on-july.html</guid></item><item><title>Man Page of the Warrior of Light</title><link>https://pyvideo.org/europython-2011/man-page-of-the-warrior-of-light.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Semen Trygubenko - 22 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Structured as an adaptation of Paulo Coelho's teachings for the striving
for excellence member of programming community, this talk will cover
values and principles-based foundations for building good patterns and
other technical and social aspects of being a good programmer.&lt;/p&gt;
&lt;p&gt;With examples in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Wed, 10 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-10:europython-2011/man-page-of-the-warrior-of-light.html</guid><category>patterns</category></item><item><title>A Python Takeover</title><link>https://pyvideo.org/europython-2011/a-python-takeover.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago I started working on SourceForge with a couple of python
developers. Back then the site was written in PHP and was in some ways
buried in technical debt. Everything is different today, we have a
complete set of tools for Ticket tracking, Wiki documents, Git,
Mercurial, Subversion, and IRC - all written in Python, and now released
as open source software.&lt;/p&gt;
&lt;p&gt;This is the story of how the amazing libraries, tools, and talent in the
Python web community has radically changed an established company, and
allowed us to reinvent sourceforge.net.&lt;/p&gt;
&lt;p&gt;This talk will go over our tech stack, talk about the libraries we used,
the way we solved scalability, internationalization, and performance
issues issues. Ultimately we know that without python, we could not have
built a flexible plugin based system, and gotten permission from
management to open source it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/a-python-takeover.html</guid><category>community</category><category>performance</category><category>python,</category><category>sourceforge</category><category>web</category></item><item><title>Beyond Python Enhanced Generators</title><link>https://pyvideo.org/europython-2011/beyond-python-enhanced-generators.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Groeneveld - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Right after the introduction of PEP342 (Enhanced Generators) we started
to decompose programs into generators. It was soon discovered that for
real-life problems one would need something like &amp;quot;yield from&amp;quot;, as is
described in PEP380. At that time, we already had a similar solution
called '&lt;a class="reference external" href="http://weightless.io/compose"&gt;compose&lt;/a&gt;', which we adapted
to PEP380.&lt;/p&gt;
&lt;p&gt;After 5 years working with 'compose', we found a small set of other
features that are essential if you want to use Enhanced Generators not
only as a way of lightweight command scheduling, but also a a pipe-line,
or parser. Indeed, the latter concepts are what real co-routines are
about.&lt;/p&gt;
&lt;p&gt;This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into
co-routines. Parts of it have been presented on SPA (2008) and
EuroPython (2010). Understanding of Enhanced Generators is a
prerequisite.&lt;/p&gt;
&lt;p&gt;Experience has shown that the topic is subtle enough to require quite
some time for full understanding, hence the suggestion for a 90 min
slot.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Groeneveld</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/beyond-python-enhanced-generators.html</guid><category>generators</category><category>search</category></item><item><title>Building a Scientific Software Application with the Enthought Tool Suite</title><link>https://pyvideo.org/europython-2011/building-a-scientific-software-application-with-t.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Dickinson - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Enthought Tool Suite (ETS) is a collection of Python-based open
source components that form a foundation for nearly every application
that we deliver to our customers. In this talk I'll demonstrate how to
use ETS to rapidly develop an example scientific software application.
We'll concentrate particularly on introducing Traits, Traits UI, and the
Chaco and Mayavi visualisation tools.&lt;/p&gt;
&lt;p&gt;Prerequisites: some previous experience of working with Python and NumPy
/ SciPy is recommended.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Dickinson</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/building-a-scientific-software-application-with-t.html</guid><category>enthought</category><category>numpy</category><category>scientific</category><category>scipy</category><category>traits</category></item><item><title>Combining Embedded and Interactive Python in a Debugger: A Case Study</title><link>https://pyvideo.org/europython-2011/combining-embedded-and-interactive-python-in-a-de.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Caroline Tice - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;LLDB is an open source compiler currently under development. LLDB
incorporates Python in several different ways: From the command line,
one can drop into an interactive Python script interpreter, entering
normal Python interactive commands and having them interpreted and
executed. In addition, the LLDB debugger has a programming API that
allows users to call actual debugger functions and access real debugger
objects. This API is run through SWIG and converted into a Python module
that gets automatically imported into the interactive interpreter inside
LLDB. The upshot of this is that, in the Python mode, users can call the
API functions as if they were regular Python functions. This is turn
means that users can do things like hit a breakpoint, call the
appropriate API functions to get the actual current frame object, check
to see if the caller function several frames up the stack is a
particular function, and if so, perform some other interesting action.
LLDB also allows for breakpoint commands to be written in Python (which
therefore allows them to call the API functions), as well as having a
command that interprets and executes a single line of Python.&lt;/p&gt;
&lt;p&gt;Because the API and all of the debugger functionality is available in a
Python module, it is also possible to write a debugger front end
completely in Python and have it import the LLDB module and call the
LLDB API functions (which calls into the LLDB shared library), to create
a new debugger front end. Our test suite takes advantage of this to run
tests on the LLDB library without having to start up an interactive LLDB
debubgger session.&lt;/p&gt;
&lt;p&gt;There were many interesting problems encountered and overcome in getting
all of this to work. LLDB combines both interactive Python and embedded
Python. There were some interesting things worked out so that a single
Python environment dictionary is used for the entire debugger session: A
user can pop into and out of the interactive interpreter and have access
at any time to anything defined in any previous visit to the interactive
interpreter (within the same debug session); breakpoint commands have
access to everything defined in the interactive session; so do embedded
script commands. It gets even more complicated, because LLDB can have
multiple debugger sessions alive at once, and each debugger session has
its own Python interpreter with its own dictionary and must not be
allowed to interfere with another session's state. In this talk I will
discuss how we implemented many of these features in LLDB, pointing out
some of the more interesting problems we encountered and how we overcame
them, and demonstrate it all working in LLDB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caroline Tice</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/combining-embedded-and-interactive-python-in-a-de.html</guid><category>api</category><category>embedded</category></item><item><title>Data Driven Cache Invalidation</title><link>https://pyvideo.org/europython-2011/data-driven-cache-invalidation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Magnus Hagander - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In todays world, nobody (should) deploy a web application facing the
internet without having a proper caching system in place. There are many
different solutions to choose from, from manual use of memcached through
framework integrated caching to external caches like Squid or Varnish.
Most modern frameworks come with integrated functionality for at least
one of these methods, and often more than one.&lt;/p&gt;
&lt;p&gt;However, they often relies on all traffic going through the same
framework to work properly - a caching layer in Rails is hard to share
with one in Django. This talk will show a way to break the design rules
of these frameworks just a little, and have the database help solve this
problem.&lt;/p&gt;
&lt;p&gt;This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magnus Hagander</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/data-driven-cache-invalidation.html</guid><category>cache</category><category>database</category><category>deploy</category><category>design</category><category>django</category><category>framework</category><category>web</category></item><item><title>Deploying web applications to the cloud with Python</title><link>https://pyvideo.org/europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nate Aune - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is
a Python library for interfacing with Amazon web services. By using
Fabric and Boto, you can easily create repeatable deployments and
provision new resources as needed with minimal effort.&lt;/p&gt;
&lt;p&gt;This talk will introduce Amazon Web Services and how to launch new
machines using simple Boto scripts, and how to get started making your
own repeatable deployments using Fabric scripts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nate Aune</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</guid><category>boto</category><category>cloud</category><category>deploy</category><category>ec2</category><category>fabric</category><category>web</category></item><item><title>Derivatives Analytics with Python &amp; Numpy</title><link>https://pyvideo.org/europython-2011/derivatives-analytics-with-python-numpy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Yves Hilpisch - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In financial engineering and derivatives analytics, C/C++/Java/VBA and
other languages are still dominating. Visixion has developed with
&lt;a class="reference external" href="http://www.dexision.com"&gt;DEXISION&lt;/a&gt; the first full fledged
derivatives analytics suite with Python as core language.&lt;/p&gt;
&lt;p&gt;DEXISION is an On Demand application that is completely Open Source
based (LAMP). For derivatives valuation, it uses Monte Carlo simulation
- an approach known to be computationally demanding. However, Numpy
provides the performance and functionality needed to implement financial
simulation algorithms in a fast and compact manner.&lt;/p&gt;
&lt;p&gt;The talk illustrates the architecture of our analytics suite and
demonstrates how to implement fast and compact simulation algorithms
with Python and Numpy. The talk shows that the Python/Numpy combination
reaches sufficient speed for productive financial applications -
something still widely doubted.&lt;/p&gt;
&lt;p&gt;[No prerequisites.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Yves J. Hilpisch</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/derivatives-analytics-with-python-numpy.html</guid><category>architecture</category><category>engineering</category><category>numpy</category><category>performance</category><category>simulation</category></item><item><title>Developing Desktop and mobile apps with PySide and QML</title><link>https://pyvideo.org/europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Thomas Perl - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of
QML in Qt 4.7, this now gives developers a chance to develop
touch-based, rich applications directly with Python. This talk
introduces PySide development, combined with QML, and shows some
real-world examples of mobile PySide applications.&lt;/p&gt;
&lt;p&gt;This talk is based on my PySide/QML on &lt;a class="reference external" href="http://thp.io/2010%20/meego-python/"&gt;MeeGo
tutorials&lt;/a&gt;, and shows some of
the possibilities. It is aimed at Python developers looking for a GUI
toolkit to create fluent, hardware-accelerated cross-platform UIs using
QML.&lt;/p&gt;
&lt;p&gt;Materials available at: &lt;a class="reference external" href="http://thp.io/2011/europython/"&gt;http://thp.io/2011/europython/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Perl</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html</guid><category>gui</category><category>mobile</category><category>pyside</category><category>qt</category></item><item><title>Django productivity tips and tricks</title><link>https://pyvideo.org/europython-2011/django-productivity-tips-and-tricks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Federici - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will show in this talk some tips, tricks and best practices for some
recurring patterns in the django application development.&lt;/p&gt;
&lt;p&gt;This is not a list of tools and applications, but rather a homemade
summary of code snippets and design best practices. All in all, the goal
is: no mistakes and go faster.&lt;/p&gt;
&lt;p&gt;Topics include: python, users, forms, jquery, virtualenv, distribute,
buildbot, etc. …&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/django-productivity-tips-and-tricks.html</guid><category>design</category><category>django</category><category>patterns</category><category>python,</category></item><item><title>Fun with Python's newer tools</title><link>https://pyvideo.org/europython-2011/fun-with-pythons-newer-tools.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it
works under the hood, enjoy a simple example, and then have fun pushing
it to the limit in interesting ways.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/fun-with-pythons-newer-tools.html</guid><category>learning</category></item><item><title>Healthcare process management in Python: a use case</title><link>https://pyvideo.org/europython-2011/healthcare-process-management-in-python-a-use-ca.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'll describe our successful experience in introducing
Python into a system for blood collection tube labeling in laboratory
and hospital environments, based on IHE Technical Frameworks –the
industry standard for modeling and streamlining healthcare processes–
and designed to avoid human errors and ensure process traceability.&lt;/p&gt;
&lt;p&gt;During the talk I will explain why we chose Python in the first place,
how we've been able to leverage the language's features and
characteristics for our specific field and what problems and limitations
we faced.&lt;/p&gt;
&lt;p&gt;I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation
machinery, an asynchronous messaging module, the implementation of
IHE-compliant actors and the inevitable end-user web application,
implemented with Django.&lt;/p&gt;
&lt;p&gt;Using Python greatly helped us in building our system, allowing very
rapid prototyping cycles for both hardware and software, but during the
talk I'll also point out what we found was missing, and what would be
nice to have to ensure Python has its proper place as a viable platform
for designing streamlined healthcare workflows based on established
international standards.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/healthcare-process-management-in-python-a-use-ca.html</guid><category>asynchronous</category><category>prototyping</category><category>web</category></item><item><title>Introduction to Qt</title><link>https://pyvideo.org/europython-2011/introduction-to-qt.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Matti Airas - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation introduces Nokia's Qt Development Frameworks and their
relationship to Python. After an overview of Qt and the Qt ecosystem,
Qt's history and future roadmap are discussed. Different Python
bindings, PyQt and PySide in particular, are introduced. Finally,
hands-on examples of Qt Quick with Python are shown.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matti Airas</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/introduction-to-qt.html</guid><category>pyqt</category><category>pyside</category><category>qt</category></item><item><title>JSON data + RML template = PDF report</title><link>https://pyvideo.org/europython-2011/json-data-rml-template-pdf-report.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in &amp;quot;Track
Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible
to understand for your graphic designer.&lt;/p&gt;
&lt;p&gt;So the solution: just modularizes all components you need and identify
simple container formats for your data input (JSON) and document
template (ReportLab RML).&lt;/p&gt;
&lt;p&gt;Now with the power of Genshi and XInclude we will create dynamic
templates that include specific snippets (e.g., to generate on the fly a
decent graph with matplotlib or cairoplot to fill some lacks of
ReportLab) and we will detach the stylesheet from the template
structure.&lt;/p&gt;
&lt;p&gt;And at the end you can also have the internationalization service in the
PDF report generation!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/json-data-rml-template-pdf-report.html</guid><category>internationalization</category><category>json</category><category>matplotlib</category></item><item><title>Precompiling and deploying Python to any Linux, Mac OS X or FreeBSD system</title><link>https://pyvideo.org/europython-2011/precompiling-and-deploying-python-to-any-linux-m.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If a Python application has lots of dependencies and requires specific
versions of some of its dependencies, then users can easily get bored or
frustrated installing the application. To make the installation faster
and have less side effects, application authors can create bundles which
contain the application, all its dependencies and possibly the Python
interpreter. This talk presents a way of creating bundles using
StaticPython, and compares it to bb-freeze. StaticPython is a
single-file statically linked version of Python for 32-bit Linux (i386),
containing all standard and some extra Python modules and C extensions.&lt;/p&gt;
&lt;p&gt;Link to
&lt;a class="reference external" href="http://pts-mini-gpl.googlecode.com/svn/trunk/staticpython/doc%20/slides_2011-06-23/pts_staticpython_2011-06-23.html"&gt;slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/precompiling-and-deploying-python-to-any-linux-m.html</guid><category>dependencies</category></item><item><title>Refactoring PyChart</title><link>https://pyvideo.org/europython-2011/refactoring-pychart.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jacob Hallen - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyChart is a very nice program for producing print quality graphs.
However, it came equipped with a rather strange API, where every class
was called T. It was also using the global namespace in strange and
disturbing ways. Furthermore, it mixed multiple distinct tasks in some
classes.&lt;/p&gt;
&lt;p&gt;I will show how I went about refactoring the package in order to make a
nice and clean API. This talk is focused on teaching refactoring
methodology to beginner and intermediate level programmers. It will also
give a brief introduction to how to make beautiful graphs with PyChart.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/refactoring-pychart.html</guid><category>graphs</category><category>teaching</category></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>https://pyvideo.org/europython-2011/scraping-techniques-to-extract-advertisements-fro.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in
&amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and
Microeconomics. Its main goal is to choose the right ads to present to a
user engaged in a given task, such as Sponsored Search Advertising or
Contextual Advertising. The former puts ads on the page returned from a
Web search engine following a query. The latter puts ads within the
content of a generic, third party, Web page. The ads themselves are
selected and served by automated systems based on the content displayed
to the user.&lt;/p&gt;
&lt;p&gt;Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In
particular, we're interested in studying and adopting scraping
techniques for: i. accessing tags as object members ii. finding out tags
whose name, contents or attributes match selection criteria iii.
accessing tag attributes by using a dictionary-like syntax.&lt;/p&gt;
&lt;p&gt;In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed
at finding the most relevant ads for a generic web page p. Starting from
p, the system selects a set of its inlinks (i.e., the pages that link p)
and extracts the ads contained into them. Selection is performed
querying the Google search engine, whereas extraction is made by using
suitable scraping techniques.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/scraping-techniques-to-extract-advertisements-fro.html</guid><category>google</category><category>scraping</category><category>search</category><category>web</category></item><item><title>Snakes on a cloud: the OpenStack project</title><link>https://pyvideo.org/europython-2011/snakes-on-a-cloud-the-openstack-project.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Thierry Carrez - 23 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack is an innovative open source project written in Python, backed
by Rackspace Hosting and NASA, building a massively-scalable and
reliable cloud computing platform.&lt;/p&gt;
&lt;p&gt;The first part of this talk will clarify the place of OpenStack in the
general &amp;quot;cloud&amp;quot; landscape and explain why a fully open cloud
infrastructure stack is necessary to avoid vendor lock-in. We'll then
focus on the OpenStack project goals, its developer community, its open
design and release processes, and the developer tools it chose.&lt;/p&gt;
&lt;p&gt;The second part of the talk will present into more technical details the
different components of OpenStack: Nova (compute) and Swift (storage),
including the Python libraries that are used (libvirt, SQLAlchemy,
eventlet…). A Q&amp;amp;A session at the end of the talk will give the audience
a chance to clear any remaining dark area.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Carrez</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/snakes-on-a-cloud-the-openstack-project.html</guid><category>cloud</category><category>design</category><category>hosting</category><category>infrastructure</category><category>openstack</category><category>python,</category></item><item><title>Sqlkit: empowering database access</title><link>https://pyvideo.org/europython-2011/sqlkit-empowering-database-access.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 23 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there
to interactive handling of data, even for very simple tasks.&lt;/p&gt;
&lt;p&gt;Sqlkit tries to act as a bridge, offering some mega-widgets that allow
you to build GUI applications or directly access data using the
'sqledit' application, shipped with sqlkit; sqlkit is built with PyGTK
and SQLAlchemy.&lt;/p&gt;
&lt;p&gt;This presentation covers some of the most powerful features of sqlkit,
and shows how easy it is to build small programs for personal use, as
well as rich and complex applications. It primarily focuses on two
points: how easy it is to create data forms (eventually with one2many or
many2many, thanks to a original definition of layouts), and the template
system based on OpenOffice which allows easy report creation.&lt;/p&gt;
&lt;p&gt;This presentation shows how sqlkit can be used both as application
development framework and as a tool to help us while developing other
applications (e.g.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/sqlkit-empowering-database-access.html</guid><category>database</category><category>forms</category><category>framework</category><category>gui</category><category>openoffice</category><category>python,</category></item><item><title>sqlmap - security development in Python</title><link>https://pyvideo.org/europython-2011/sqlmap-security-development-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Miroslav Stampar - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;sqlmap&amp;quot; is one of the largest, widely used and most active Python
projects in the IT security community (more than 2000 commits in one
year period with community of over 100 active testers). It combines it's
developers' strong security knowledge together with analytical,
mathematical and Python development skills to provide IT professionals
with vibrant features.&lt;/p&gt;
&lt;p&gt;Talk would be consisted of several parts: short introduction to project
and developers, developing and testing environment, programming cycle,
program's workflow, technologies used, common pitfalls and how we've
circumvent them, usage of mathematical models, optimizations, project's
future goals.&lt;/p&gt;
&lt;p&gt;The significant part of this talk would be the immediate insight into
the developing process of probably the world's most advanced open-source
Python IT security project today.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miroslav Stampar</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/sqlmap-security-development-in-python.html</guid><category>community</category><category>security</category><category>testing</category></item><item><title>The London Python Code Dojo - an Education in Developer Education</title><link>https://pyvideo.org/europython-2011/the-london-python-code-dojo-an-education-in-dev.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nicholas Tollervey - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The London Python Code Dojo is a community organised monthly meeting for
Python programmers in the UK. Variously described as social coding,
developer training, &amp;quot;Scrapheap Challenge&amp;quot; for Pythonistas and &amp;quot;I didn't
learn coding like this when I was a lad&amp;quot;, we've forked the traditional
code-dojo format and turned it into something very different.&lt;/p&gt;
&lt;p&gt;This talk will explain and explore what happens in the dojo, how it's
organised and why various changes were made to the classic dojo format.
Reference will also be made to influences from music education and
philosophy of education.&lt;/p&gt;
&lt;p&gt;Hopefully, by the end of the talk you'll all want to go organise a dojo!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/the-london-python-code-dojo-an-education-in-dev.html</guid><category>community</category><category>education</category></item><item><title>The political implications of having fun (while programming open source)</title><link>https://pyvideo.org/europython-2011/the-political-implications-of-having-fun-while-p.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Benno Luthiger - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are the implications for the society if people enjoy their work,
because this work is perceived as rewarding by itself? It is this
question that occupies me since I have finished my Ph.D. research about
the motivation of open source programmers. In my research, I have been
able to show that fun is an important driver for open source
programmers. Moreover, fun plays an important role not only for
hobbyists, but for developers who are paid for their work too (open or
closed source).&lt;/p&gt;
&lt;p&gt;These findings contrast with the traditional efforts of leftist parties
and labor unions. For those political organizations, labor is perceived
as compulsion and exploitation and, therefore, people have to be
liberated from labor. The resulting political praxis is to send people
into retirement as soon as possible and, on the other hand, to make the
life for unemployed people carefree.&lt;/p&gt;
&lt;p&gt;Is the software developers‘ world a little Shangri-La, apart from the
real world, delineated by the leftist parties, or is the open source
model generalizable? What happens with the values generated through the
labor if the work as such is rewarding? The open source mode of
production is part of our modern reality and in my presentation I would
like to consider this big reality from the perspective of open source.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Luthiger</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/the-political-implications-of-having-fun-while-p.html</guid></item><item><title>What is Google App Engine?</title><link>https://pyvideo.org/europython-2011/what-is-google-app-engine.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google App Engine is a unique hosting platform that lets you build
applications and run them in Google's data centers using the massive
global infrastructure built to run the Internet's most powerful company.
App Engine offers a development environment that uses familiar
technologies (Java and Python) and provides a powerful and robust set of
APIs to users while maintaining security and independence from other
apps running in the cloud. It is always free to get started so you can
try it out with no risk, and if you need additional computing resources,
you can purchase additional computing resources beyond the free quota
limits. (If you enable billing and trust us with your credit card, we
will extend your free quotas even further; you won't get charged until
you exceed those &lt;em&gt;extended&lt;/em&gt; quotas.) Scale your application to millions
of users and pay only for what you use at competitive market pricing.&lt;/p&gt;
&lt;p&gt;In this session, we provide an update of the newest features found in
the most recent releases of the App Engine platform. We also share some
suggestions for best practices to existing App Engine developers.&lt;/p&gt;
&lt;p&gt;Beginners to the App Engine platform will be interested in the
introductory workshop which may be offered (see description below).&lt;/p&gt;
&lt;p&gt;Google App Engine workshop&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll give you a comprehensive introduction to the
platform in two/three components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1-hour Introduction to Cloud computing and Google App Engine seminar&lt;/li&gt;
&lt;li&gt;3-hour App Engine hands-on workshop/codelab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first hour, we review Cloud Computing as an industry and where
Google App Engine fits into the picture. Specifically, we discuss App
Engine as a PaaS solution because of the inherent challenges of building
web and other applications. We'll outline the architecture of App
Engine, what it's major components are, introduce its features and APIs,
discuss the service and how it works (including information on the free
quotas), present some information about current users and usage,
including integration with Google Apps, and finally, give an overview of
its enterprise edition called Google App Engine for Business.&lt;/p&gt;
&lt;p&gt;After the approximately one-hour lecture, we'll show you how to create
applications that run on App Engine by building a simple but real web
application from the ground up via a hands-on coding laboratory.
Although based on the online tutorial, this codelab goes up and beyond
what's in the documentation: you will get a more detailed step-by-step
instructions to replicate that example as well as have the opportunity
to extend your application with some of the newer APIs that come with
App Engine. The codelab will cover the Users service, non-relational
Datastore, and Memcache APIs. Time-permitting, we'll also discuss some
of the newest features found in recent App Engine releases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/what-is-google-app-engine.html</guid><category>architecture</category><category>cloud</category><category>google</category><category>hosting</category><category>infrastructure</category><category>memcache</category><category>security</category><category>web</category></item><item><title>Diversity as a Dependency</title><link>https://pyvideo.org/europython-2011/diversity-as-a-dependency.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Ravenscroft - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PSF recently adopted a diversity statement. While some argue that we
should do this just because it's &amp;quot;the right thing to do&amp;quot;, others
question why we, as a technical community, should even worry about
diversity. This talk addresses the diversity question, not in moralistic
or ethical terms, but in pragmatic ones. Studies on creativity and
productivity demonstrate the potential benefits of diversity for the
Python community. Making Python the best language it can be is not
merely helped by increasing diversity, but may be dependent on
diversity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Ravenscroft</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/diversity-as-a-dependency.html</guid><category>diversity</category><category>psf</category></item><item><title>Emulating Stackless and greenlet with each other</title><link>https://pyvideo.org/europython-2011/emulating-stackless-and-greenlet-with-each-other.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stackless Python and the greenlet package for CPython are two different
implementations of coroutine support for Python. (Coroutines are
fundamental building blocks of I/O frameworks like gevent, Eventlet,
Concurrence and Syncless to conveniently handle thousands of socket
connections at a time without creating threads.) Stackless and greenlet
implement a different interface. However, each is powerful enough so
that it can be used to emulate the other one. In this talk we explore
the differences and discuss design decisions and testing strategies of
the emulations we have implemented.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/slides_2011-06-20/pts_em%20u_coro_2011-06-20.html"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/s%20lides_2010-11-29/pts_coro_2010-11-29.html"&gt;Slides for the bonus
sub-talk&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/emulating-stackless-and-greenlet-with-each-other.html</guid><category>concurrence</category><category>cpython</category><category>design</category><category>greenlet</category><category>stackless</category><category>testing</category></item><item><title>Exploit your GPU power with PyCUDA (and friends)</title><link>https://pyvideo.org/europython-2011/exploit-your-gpu-power-with-pycuda-and-friends.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Brilli - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CUDA technology permits to exploit the power of modern NVIDIA GPUs. In
this talk, after a brief introduction to GPU architecture, we will focus
on how CUDA got inside Python through libraries like PyCUDA and others…&lt;/p&gt;
&lt;p&gt;By some examples we will show the main concepts and techniques for good
GPU programming.&lt;/p&gt;
&lt;p&gt;This talk targets anyone who wants to know how to exploit this
technology from Python, the suitable use cases, the using techniques and
the do-not-using techniques to get the best from his own GPU&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Brilli</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/exploit-your-gpu-power-with-pycuda-and-friends.html</guid><category>gpu</category><category>nvidia</category><category>pycuda</category><category>python,</category><category>technology</category></item><item><title>Exploring CPython's bytecode</title><link>https://pyvideo.org/europython-2011/exploring-cpythons-bytecode.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Floris Bruynooghe - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The CPython interpreter always compiles your source code to bytecode,
usually stored in .pyc files. This bytecode is then loaded and executed
in the CPython virtual machine.&lt;/p&gt;
&lt;p&gt;This talk will explore the bytecode from the outside in. Starting with
how to read a .pyc file, following the steps the interpreter takes to
arrive and a usable python module. It then dives into the structure of
the bytecode itself and the principles of the virtual machine, detailing
how the VM executes this bytecode to do useful work.&lt;/p&gt;
&lt;p&gt;Having seen all these details you should have a good idea of the various
innards of CPython and how to manipulate these to create weird,
wonderful, dangerous and occasional useful hacks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/exploring-cpythons-bytecode.html</guid><category>bytecode</category><category>cpython</category><category>vm</category></item><item><title>Good API design</title><link>https://pyvideo.org/europython-2011/good-api-design.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alex Martelli - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing interfaces so that other code can interact with ours (whether
our code is a library, framework, application, website…) is a very
common and clearly crucial activity, but it's fraught with dangers -
there's a lot stuff we all keep doing wrong time after time. This talk
shows some common categories of API design errors encountered in the
wild, with tips on how to avoid them when you design your next API.&lt;/p&gt;
&lt;p&gt;Goals: to show you how to focus resources and attention to help avoid
mistakes in API design. Prereqs: experience designing and developing
software, esp. software which needs to interact w/other existing
software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/good-api-design.html</guid><category>api</category><category>design</category><category>interfaces</category></item><item><title>High-performance computing on gamer PCs</title><link>https://pyvideo.org/europython-2011/high-performance-computing-on-gamer-pcs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Yann Le Du - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Electron Paramagnetic Resonance Imaging, we are faced with a
deconvolution problem that has a strong impact on the image actually
reconstructed. Faced with the need of mapping the distribution of
organic matter in Terrestrial and Martian rock samples for applications
in exobiology, we needed to see how to extract a maximum amount of
information from our data: our approach uses reservoir computing
artificial neural networks coupled to a particle swarm algorithm that
evolves the reservoirs’ weights.&lt;/p&gt;
&lt;p&gt;The code runs on the Hybrid Processing Units for Science (HPU4Science)
cluster located at the Laboratoire de Chimie de la Matière Condensée de
Paris (LCMCP). The cluster is composed of a central data storage machine
and a heterogeneous ensemble of 6 decentralized nodes. Each node is
equipped with a Core2 Quad or i7 CPU and 3-7 NVIDIA Graphical Processing
Units (GPUs) including the GF110 series. Each of the 28 GPUs
independently explores a different parameter space sphere of the same
problem. Our application shows a sustained real performance of 15.6
TFLOPS. The HPU4Science cluster cost
&lt;span class="formula"&gt;36, 090&lt;i&gt;resulting&lt;/i&gt;&lt;i&gt;in&lt;/i&gt;&lt;i&gt;a&lt;/i&gt;432.3&lt;i&gt;MFLOPS&lt;/i&gt; ⁄ &lt;/span&gt; cost performance.&lt;/p&gt;
&lt;p&gt;That talk is meant to demonstrate on a practical case how consumer grade
computer hardware coupled to a very popular computer language can be
used to tackle a difficult yet very elementary scientific problem: how
do you go from formulating the problem, to choosing the right hardware
and software, and all the way to programming the algorithms using the
appropriate development tools and methodologies (notably Literate
Programming). On the math side, the talk requires a basic understanding
of matrix algebra and of the discretization process involved when
computing integrals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yann Le Du</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/high-performance-computing-on-gamer-pcs.html</guid><category>image</category><category>mapping</category><category>nvidia</category><category>performance</category><category>processing</category><category>science</category><category>scientific</category></item><item><title>How to build complex web applications having fun?</title><link>https://pyvideo.org/europython-2011/how-to-build-complex-web-applications-having-fun.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Mleczko - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web development is a complexity challenge nowadays. Growing number of
functionalities results in customer expectations increase which makes
project design more difficult. Using proper tools that suite your
customer needs is essential.&lt;/p&gt;
&lt;p&gt;In this talk I would like to present two successful stories using
closely together Pyramid and Plone. Basing on these examples I wished to
highlight the main reasons for using Plone as a CMS only and letting
Pyramid do the rest (vertical application). Moreover, I will underscore
good and bad practices during integration process and how to make
farsighted architectural decisions in a right moment.&lt;/p&gt;
&lt;p&gt;Prerequisites: be familiarized with common python web framework
concepts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/how-to-build-complex-web-applications-having-fun.html</guid><category>cms</category><category>design</category><category>framework</category><category>plone</category><category>pyramid</category><category>rest</category><category>web</category></item><item><title>How to make intelligent web-apps</title><link>https://pyvideo.org/europython-2011/how-to-make-intelligent-web-apps.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Deepak Thukral - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The primary goal of this talk is twofold: to evaluate the need of data
mining and introduce some very cool, simple yet powerful machine
learning techniques to audience such as classification, clustering,
collaborative filtering, recommendation etc in your Python web
applications. This talk will conclude with some explanation and
limitations of machine learning algorithms.&lt;/p&gt;
&lt;p&gt;Basic knowledge of Python is sufficient. However some experience with
Django, meshups, machine learning or data hunger is encouraged. All talk
material and django apps will be available after talk under MIT license.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deepak Thukral</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/how-to-make-intelligent-web-apps.html</guid><category>django</category><category>learning</category><category>web</category></item><item><title>Introduction to Gevent</title><link>https://pyvideo.org/europython-2011/introduction-to-gevent.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Denis Bilenko - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://gevent.org"&gt;Gevent&lt;/a&gt; is a coroutine-based library that enables
you to write highly-concurrent network and web applications. learn in
detail what Gevent is, what it does and how it does it.&lt;/p&gt;
&lt;p&gt;I will introduce a coroutine-based approach to network programming,
explain it benefits and pitfalls. We will walk through the Gevent API,
including the most recent additions, and understand how it is
implemented. I will make a quick overview of the most interesting 3rd
party add-on and applications after that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denis Bilenko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/introduction-to-gevent.html</guid><category>gevent</category><category>network</category><category>web</category></item><item><title>Managing the cloud with libcloud</title><link>https://pyvideo.org/europython-2011/managing-the-cloud-with-libcloud.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tomaž Muraus - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;libcloud is an open-source client library for interacting with different
cloud providers.&lt;/p&gt;
&lt;p&gt;The primary goal of the library is to abstract all the provider
differences away and expose common functionality in a nice, clean and
concise API.&lt;/p&gt;
&lt;p&gt;This talk will address the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why a library like this was built in the first place&lt;/li&gt;
&lt;li&gt;Different problems we have encountered while building it (not all the
providers always play nice)&lt;/li&gt;
&lt;li&gt;An introduction to the library API (compute, storage and
load-balancer part)&lt;/li&gt;
&lt;li&gt;How to use it to build something useful and fun&lt;/li&gt;
&lt;li&gt;How to participate and contribute&lt;/li&gt;
&lt;li&gt;Roadmap and plans for the future&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/managing-the-cloud-with-libcloud.html</guid><category>api</category><category>cloud</category></item><item><title>MiG - A Complete Grid Middleware (mostly) in Python</title><link>https://pyvideo.org/europython-2011/mig-a-complete-grid-middleware-mostly-in-pyth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonas Bardino - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Grid computing was all the buzz in the beginning of the millennium and
still has serious attention in different forms although many of the
original grand promises were never delivered. The general level of
ambitions have instead slowly but steadily degraded to those of the
latest buzz word, Cloud.&lt;/p&gt;
&lt;p&gt;We as a project have proven that most of the original promises &lt;em&gt;can&lt;/em&gt;
actually be delivered and we have done so using Python almost solely as
the implementation language. The choice of Python provided us with a
stable and versatile base for quickly getting this far and it
significantly eases extending and maintaining our middleware in the
future. MiG is currently about 50000 lines of source code but it still
offers more features than competing grid systems with millions of lines
of code.&lt;/p&gt;
&lt;p&gt;Apart from introducing the open source MiG middleware and summarizing
how we got here, this talk will outline some of the core technologies
used to reach that goal and underline why it can make a lot of sense to
choose Python for complex HPC projects like MiG, too. Talk keywords
include Network Programming, Open Source Python projects, Science and
Math and Web-based Systems. There's no special intended audience, but a
certain level of Python knowledge and experience may be an advantage.
Please refer to &lt;a class="reference external" href="http://code.google.com/p/migrid/"&gt;http://code.google.com/p/migrid/&lt;/a&gt; for further MiG
information.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonas Bardino</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/mig-a-complete-grid-middleware-mostly-in-pyth.html</guid><category>forms</category><category>hpc</category><category>network</category><category>science</category></item><item><title>New beauty in Camelot</title><link>https://pyvideo.org/europython-2011/new-beauty-in-camelot.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in &amp;quot;Track
Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot is a Python framework that leverages SQLAlchemy and QT to build
rich desktop applications. The model - view definition used was inspired
by the Django Admin interface. Some see it as a replacement for MS
Access, but it's underlying libraries allow much more advanced features.&lt;/p&gt;
&lt;p&gt;In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and
new types of actions to displaying custom SQLAlchemy queries in a table
view.&lt;/p&gt;
&lt;p&gt;We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case
studies we will point out the mistakes we made and how they were
corrected.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/new-beauty-in-camelot.html</guid><category>deployment</category><category>django</category><category>framework</category><category>matplotlib</category><category>qt</category><category>sqlalchemy</category></item><item><title>Objects and classes in Python (and JavaScript)</title><link>https://pyvideo.org/europython-2011/objects-and-classes-in-python-and-javascript.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a well-thought out system for classes. Beginners can use it
without understanding it all. Experts can use it to produce code that is
both elegant and powerful (such as models and class-based views in
Django). Python classes can be used for many purposes.&lt;/p&gt;
&lt;p&gt;This tutorial arises from the author's experience in using classes to
solve problems, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add custom methods and attributes to objects that are, at root, just an integer&lt;/li&gt;
&lt;li&gt;Construct dictionaries whose values are functions&lt;/li&gt;
&lt;li&gt;Construct classes on-the-fly&lt;/li&gt;
&lt;li&gt;Implement JavaScript object semantics in Python (advanced topic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The outline syllabus is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review of the class statement in Python (and decorators)&lt;/li&gt;
&lt;li&gt;Subclassing built-in types such as int and tuple&lt;/li&gt;
&lt;li&gt;How to define classes without using a class statement&lt;/li&gt;
&lt;li&gt;How to define a dispatch dictionary using a class statement&lt;/li&gt;
&lt;li&gt;Metaclasses as syntactic sugar for class construction&lt;/li&gt;
&lt;li&gt;Metaclasses to provide new class semantics&lt;/li&gt;
&lt;li&gt;Review of JavaScript object semantics&lt;/li&gt;
&lt;li&gt;Using Python classes to implement JavaScript object semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Guido on the history of Python classes see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html"&gt;http://python-history.blogspot.com/2010/06/method-resolution-order.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is for Intermediate or Advanced Python programmers.
(Beginners will find it very hard going.) The aim of the course is to
explain exactly what happens when a class in constructed, and to learn
ways of using this knowledge.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/objects-and-classes-in-python-and-javascript.html</guid><category>dictionaries</category><category>javascript</category><category>tutorial</category></item><item><title>Pitfalls of Continuous Deployment</title><link>https://pyvideo.org/europython-2011/pitfalls-of-continuous-deployment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Practice iterative development like the pros. Release sooner, faster,
and more often.&lt;/p&gt;
&lt;p&gt;Continuous deployment (and testing) has started to become a reality for
many companies. It brings to light one of the many problems that face
large product teams, but also creates some of its own. This talk will
focus on the pros and cons of continuous deployment, how DISQUS switched
from the recurring release cycle to continuous releases, as well as
providing tips and arguments for adopting it in your workplace.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pitfalls-of-continuous-deployment.html</guid><category>deployment</category><category>disqus</category></item><item><title>Playing tasks with Django-Celery</title><link>https://pyvideo.org/europython-2011/playing-tasks-with-django-celery.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mauro Rocco - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing.&lt;/p&gt;
&lt;p&gt;I will talk about the tools that Celery offers for task distribution and
how to monitor and manage the system using a Django web interface. This
talk will also focus on how we use Celery at Jamendo and our real
solutions to some common issues you may encounter when developing a
back-office based on Celery.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief overview of Celery and the AMPQ protocol AMPQ protocol
overview, Celery introduction: Celery, RabbitMQ code examples&lt;/li&gt;
&lt;li&gt;The impact of Celery on the Jamendo work-flow; examples with real
tasks. Here I will talk about the Jamendo back-office infrastructure
and some of our common tasks. I will discuss the improvements made by
introducing a new back-office system based on Celery. I will show
some code snippets and go over some real scenarios.&lt;/li&gt;
&lt;li&gt;Overview of the Django Celery admin interface and some Jamendo
extensions. Let's talk about the Django-Celery interface that allows
one to monitor or schedule tasks directly from the Django admin. I
will explain which common additional features are necessary and how
to add them.&lt;/li&gt;
&lt;li&gt;Common &amp;quot;gotchas&amp;quot; we encountered while working with Celery and how we
solved them.&lt;/li&gt;
&lt;li&gt;Global task locks&lt;/li&gt;
&lt;li&gt;Centralized logging: be able to read all the logs of all celery
workers on different servers and filter them for real-time debugging&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mauro Rocco</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/playing-tasks-with-django-celery.html</guid><category>celery</category><category>distributed</category><category>django</category><category>infrastructure</category><category>queueing</category><category>rabbitmq</category><category>real-time</category><category>web</category></item><item><title>Pricing products using Python graphs and sets</title><link>https://pyvideo.org/europython-2011/pricing-products-using-python-graphs-and-sets.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Rob Collins - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the limitations of available rule engines when it comes
to complex pricing rules. Rob has been part of a Python team writing a
pricing engine based on network graphs. We will show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why pricing is not easy&lt;/li&gt;
&lt;li&gt;Rule engine anti-patterns, e.g. to change one price requires a week's
development time, and has to be fitted into a release cycle&lt;/li&gt;
&lt;li&gt;How to make pricing rules data driven, usable by the business&lt;/li&gt;
&lt;li&gt;How the use of graphs and sets reduces the complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rob is joined by David Layton of Grey Squirrel Consulting, who is a
fellow contractor working with Rob on the pricing project. He is an
American expatriate and Python developer, currently living and working
in London. His background is in scientific computing, CRMs and Business
Intelligence.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Collins</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pricing-products-using-python-graphs-and-sets.html</guid><category>business</category><category>graphs</category><category>network</category><category>scientific</category></item><item><title>PyPy hands-on</title><link>https://pyvideo.org/europython-2011/pypy-hands-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in &amp;quot;Training
Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The session is divided into two parts, of roughly 2 hours each. People
who are interested only in the first part, can leave the session after
it. However, the first part is a prerequisite for the second one, thus
people are not advised to join in the middle of the session.&lt;/p&gt;
&lt;p&gt;The session is meant to be highly interactive. People are invited to
bring their own laptop and try things by themselves.&lt;/p&gt;
&lt;div class="section" id="part-1-run-your-application-under-pypy"&gt;
&lt;h4&gt;Part 1: Run your application under PyPy&lt;/h4&gt;
&lt;p&gt;This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to fix/avoid CPython implementation details (e.g., refcounting)

- general overview of how the PyPy JIT works

- how to optimize your program for the PyPy JIT

- how to view and interpret the traces produced by the JIT

- how to tweak the parameters of the JIT and the GC

- how to use existing CPython C extensions on PyPy, and fix them if necessary
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-write-your-own-interpreter-with-pypy"&gt;
&lt;h4&gt;Part 2: Write your own interpreter with PyPy&lt;/h4&gt;
&lt;p&gt;PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to
implement their own programming languages, or who simply want to know
more about how the PyPy JIT works internally.&lt;/p&gt;
&lt;p&gt;The students will be given the source code for a toy language
implemented in RPython. They will learn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to translate it to C using the PyPy translation toolchain

- what are the &amp;quot;hints&amp;quot; needed by the JIT generator, and how to place them
&lt;/pre&gt;
&lt;p&gt;Then, they will be challenged to add the proper hints to the toy
interpreter, to get the best result with the JIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THINGS TO DO BEFORE THE TRAINING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are encouraged to bring your laptop to the training session.&lt;/p&gt;
&lt;p&gt;Make sure that the following prerequisites are met:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install PyPy 1.5:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/download.html"&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;http://doc.pypy.org/en/latest/getting-started.html#installing-pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure that &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; are installed (look
at the URL above for instructions)&lt;/li&gt;
&lt;li&gt;Clone the pypy repository, and update to the 1.5 version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/pypy"&gt;http://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd pypy&lt;/p&gt;
&lt;p&gt;$ hg up -r release-1.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone the jitviewer repository and install it on pypy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/jitviewer"&gt;http://bitbucket.org/pypy/jitviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd jitviewer&lt;/p&gt;
&lt;p&gt;$ /path/to/pypy-1.5/bin/pypy setup.py develop&lt;/p&gt;
&lt;p&gt;If you intend to follow also the second part (&amp;quot;Write your own
interpreter with PyPy&amp;quot;), you need to make sure you have a working
&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started-python.html%20#translating-the-pypy-python-interpreter"&gt;developing
environment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pypy-hands-on.html</guid><category>cd</category><category>cpython</category><category>extensions</category><category>hg</category><category>jit</category><category>optimize</category><category>pypy</category><category>setup.py</category><category>tutorial</category></item><item><title>Python 103: Mmmm... Understanding Python's Memory Model, Mutability, and Methods</title><link>https://pyvideo.org/europython-2011/python-103-mmmm-understanding-pythons-memory.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python 101, you learned basic Python syntax, what its flow control
mechanisms and basic data types are and how they work. You learned how
to write functions and developed executable Python scripts that actually
work! You probably also learned how to create files, how to open, read
from or write to them, and close them. Perhaps you've even learned a
little bit of object- oriented programming, developed a couple of Python
classes, most with user- defined methods, and have no problems creating
instances to use in your applications.&lt;/p&gt;
&lt;p&gt;In Python 102 (or equivalent in experience), you explored further, using
default values and variable arguments for functions, discovered how to
catch exceptions and write handlers for them… perhaps you've even
created your own exceptions. You have found some useful Python standard
library modules and using them actively in your own applications. You've
quite comfortable with OOP, creating classes and using instances
regularly in your programs. In fact, you've been coding Python for 6
months to a couple of years now. You're much more serious about Python
now because you're no longer a &amp;quot;beginner.&amp;quot; You've even taken notice at
the growing number of jobs requesting or requiring Python skills.&lt;/p&gt;
&lt;p&gt;As an aspiring Python developer, you are starting to be more aware of
the entire ecosystem around you, and think you may be ready for
&amp;quot;prime-time&amp;quot; and feel able to take on a full-time position as a Python
programmer. However, if you have experienced one or more of the below
questions or problems, this talk may be for you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Throughout this time, you've experienced strange bugs in your code.
In particular, you notice that things don't always behave the way you
expect and have spent a good amount of time debugging various parts
of your software that you thought were actually correct - you work
around them but are disturbed and don't have the time nor committment
to fully investigate.&lt;/li&gt;
&lt;li&gt;You've created classes and objects just fine but wish that you could
use some of Python's operators (like +, in, len(), etc.) with your
objects, which feel like they're &amp;quot;2nd-class&amp;quot; citizens compared to the
standard data types.&lt;/li&gt;
&lt;li&gt;Do you know what functional evaluation strategy means? Have you been
asked or considered whether Python is &amp;quot;call-by-value&amp;quot; or
&amp;quot;call-by-reference&amp;quot;? It is important to you, and can you clearly
explain your answer?&lt;/li&gt;
&lt;li&gt;What does &amp;quot;mutability&amp;quot; mean? What is the difference between mutable
and immutable objects? Which Python objects are mutable and which
aren't?&lt;/li&gt;
&lt;li&gt;Can you clearly explain both the output in the two code snippets
below, and even more importantly, &lt;em&gt;why&lt;/em&gt; the output is the way it is?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SNIPPET A x = 42 y = x x += 1 print x print y&lt;/p&gt;
&lt;p&gt;SNIPPET B x = [1, 2, 3] y = x x[0] = 4 print x print y&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have you seen odd behavior in container or collection objects like
lists or dictionaries? For example, you may have copied those types
of objects and discovered weird things happening to both the original
and the copy, or that you seen something not quite right if you loop
through it and remove items from it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what Python 103 is for… to fill in all the missing gaps, to
answer all the questions (including those above) that do not seem to
have easy-to-find answers on Google, but only if you have the desire to
learn more about the interpreter to take your Python skills to the next
level.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/python-103-mmmm-understanding-pythons-memory.html</guid><category>debugging</category><category>exceptions</category><category>memory</category><category>scripts</category></item><item><title>Python at Cloudkick</title><link>https://pyvideo.org/europython-2011/python-at-cloudkick.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tomaž Muraus - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloudkick is a server management and monitoring software as a service
used by thousands of different companies all across the globe.&lt;/p&gt;
&lt;p&gt;The service is built in and powered by many different programming
languages and technologies, but the web application and majority of the
backend services are written in Python.&lt;/p&gt;
&lt;p&gt;In this talk I will present how and where we use Python (Django,
Twisted, txamqp, Piston, …), different problems we have encountered
while building our service and how we worked around them, good practices
and real-world advices on building effective Twisted services and much
more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomaž Muraus</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/python-at-cloudkick.html</guid><category>monitoring</category><category>twisted</category><category>web</category></item><item><title>Python + Oracle = Prosperity &amp; Performance</title><link>https://pyvideo.org/europython-2011/python-oracle-prosperity-performance.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Todd Trichler - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted or perhaps needed to access data stored in a
corporate Oracle database from within your Python environment?&lt;/p&gt;
&lt;p&gt;This session will help developers get up and running using Python with
Oracle:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn the basics of working with cx_Oracle&lt;/li&gt;
&lt;li&gt;Learn how to use VirtualBox to set up a Python &amp;amp; Oracle test and developement environment.&lt;/li&gt;
&lt;li&gt;Discover features within Oracle that you can use to build more performant python based applications.&lt;/li&gt;
&lt;li&gt;Leave with all the resources you need to certify your python app to run against a production Oracle11gR2 database, or hone those skills for the next job.&lt;/li&gt;
&lt;li&gt;Get a quick intro to Oracle Linux along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No prior experience with Oracle is required, some basic understanding of
databases would be helpful.&lt;/p&gt;
&lt;p&gt;Look forward to meeting you &amp;#64; EuroPython 2011 - Todd&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Trichler</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/python-oracle-prosperity-performance.html</guid><category>database</category><category>performance</category><category>virtualbox</category></item><item><title>Visualization and Analysis of Large Scale Datasets with Python</title><link>https://pyvideo.org/europython-2011/visualization-and-analysis-of-large-scale-dataset.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Christine Moran - 23 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will introduce ParaView, an open source application
developed by researchers around the world for parallel visualization and
analysis of large scale datasets, which in can be used to visualize and
analyze terabytes of data in real time. ParaView’s core algorithms are
implemented in C/C++ but all its major functionality can be scripted
from python with ease. I’ll give a short introduction to AstroViz, a
parallel visualization tool for astrophysical simulations implemented as
an opensource plugin to ParaView, which I have been lead developer on
since 2009. The focus of the talk will be on driving ParaView from
within python however, both general out of the box use and customized
extensions.&lt;/p&gt;
&lt;p&gt;I also have access to several parallel supercomputers so if there’s a
huge dataset we as a crowd would like to tackle visualizing during the
course of the week that would be fun project. The end of the talk will
be a short brainstorm of cool applications of analysis and visualization
of large scale datasets.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.paraview.org/"&gt;http://www.paraview.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Moran</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/visualization-and-analysis-of-large-scale-dataset.html</guid><category>analysis</category><category>datasets</category><category>opensource</category><category>parallel</category><category>simulations</category><category>visualization</category></item><item><title>What makes Python so AWESOME</title><link>https://pyvideo.org/europython-2011/what-makes-python-so-awesome.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world of many programming languages, the popularity of Python
continues to grow without bound. We examine what makes it special and
how it influences the way we program:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;what gives python its texture and feel&lt;/li&gt;
&lt;li&gt;what features support rapid development&lt;/li&gt;
&lt;li&gt;where does the readability come from&lt;/li&gt;
&lt;li&gt;what features support economy of expression&lt;/li&gt;
&lt;li&gt;look at the mix of lightweight tools and industrial grade tools&lt;/li&gt;
&lt;li&gt;how easy is it to learn python? how hard is it to master&lt;/li&gt;
&lt;li&gt;what can python do that other languages can't&lt;/li&gt;
&lt;li&gt;what is the role of the python community&lt;/li&gt;
&lt;li&gt;why does the license matter&lt;/li&gt;
&lt;li&gt;does python just have zen or is there a python attitude?&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/what-makes-python-so-awesome.html</guid></item><item><title>5 Years of Bad Ideas</title><link>https://pyvideo.org/europython-2011/5-years-of-bad-ideas.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Armin Ronacher - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What was my motivation for working with Python after two years of PHP?
There is so much you can do. Functions are objects you can pass around,
you can decompile functions to see how they work internally, you can
alias a bound method to a global function and it will just work. You can
change import semantics, override the method resolution order, you can
write metaclasses, you can hook into the CPython interpreter API and
much more.&lt;/p&gt;
&lt;p&gt;Five years later I came to the conclusion that this is really not what
Python is about and that a lot of what I did was interesting but not
necessarily a good idea. This talk is a 45 minute recompilation of
things I really shouldn't have done in the first place. Expect a bunch
of neat and interesting hacks that showcase the possibilities of the
language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/5-years-of-bad-ideas.html</guid><category>api</category><category>cpython</category></item><item><title>Advanced Python</title><link>https://pyvideo.org/europython-2011/advanced-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Training Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will work through a series of real-world examples, showing
how an understanding of the tools built into the Python interpreter or
included in the standard library can be combined to solve difficult
problems clearly and Pythonically. We will also discuss when and how to
reach beyond the standard library when needed to address difficult
algorithmic and optimization problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/advanced-python.html</guid><category>optimization</category><category>tutorial</category></item><item><title>Building a hosting platform with Python</title><link>https://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</guid><category>ep.io</category><category>hosting</category><category>infrastructure</category><category>postgresql</category><category>redis</category><category>scalable</category><category>web</category></item><item><title>Challenges in developing a large Django site</title><link>https://pyvideo.org/europython-2011/challenges-in-developing-a-large-django-site.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django makes it easy to build web sites and applications on tight
deadlines - but how does it deal with sites that scale up in both
traffic and complexity? Using Lanyrd.com as a case study, this talk will
explore tricks and techniques for taking advantage of what Django has to
offer while coping with the unexpected challenges raised by a highly
dynamic social web application.&lt;/p&gt;
&lt;p&gt;Topics covered will include performance monitoring and optimisation,
advanced caching tricks, denormalisation with Solr and Redis and finding
the right balance between technical elegance and pragmatism.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/challenges-in-developing-a-large-django-site.html</guid><category>django</category><category>monitoring</category><category>performance</category><category>redis</category><category>web</category></item><item><title>Debugging and profiling techniques</title><link>https://pyvideo.org/europython-2011/debugging-and-profiling-techniques.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Giovanni Bajo - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give on overview over some common problems related to
profiling and debugging CPython applications (especially desktop-based
ones).&lt;/p&gt;
&lt;p&gt;The following subjects will be covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Debugging of memory/resource leaks (circular references, &lt;strong&gt;del&lt;/strong&gt;,
weakref, garbage collector, etc.). We will show in details how the
memory management of Python objects work and we will show a few
tricks to track memory leaks&lt;/li&gt;
&lt;li&gt;Python code profiling (profile/hotshots/cProfile, design of small
tests, etc.). We will show how to measure, profile, and analyse an
application to spot performance problems and solve them.&lt;/li&gt;
&lt;li&gt;Post-mortem step-by-step debugging of C/C++ extension under Windows.
We will show how to setup Visual Studio for debugging, how to see a
traceback in case of an unexpected segfault, and how to further debug
and solve the crash.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is aimed at intermediate Python programmers, who have already
developed non-trivial Python applications but have never &amp;quot;jumped
through&amp;quot; the interpreter abstraction layer. If you feel a little lost
when you see a segfault from a Python program or you don't have a clear
idea how memory is collected in Python, this talk is perfect for you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/debugging-and-profiling-techniques.html</guid><category>cpython</category><category>debugging</category><category>design</category><category>memory</category><category>performance</category><category>profiling</category><category>python,</category></item><item><title>Developing cutting-edge applications with PyQt</title><link>https://pyvideo.org/europython-2011/developing-cutting-edge-applications-with-pyqt.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in
&amp;quot;Training Pizza Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Presented with Matteo Bertozzi)&lt;/p&gt;
&lt;p&gt;Python's high development speed and Qt's gargantuan feature set allow
for comfortable development of complex desktop applications. Still, what
does one need to do to best leverage this awesome combination? And more
importantly, what crucial advantages exist to decide its adoption in
favour of more traditional tecniques?&lt;/p&gt;
&lt;p&gt;During this training, we'll start from a white canvas and show how to
develop a desktop application using the best tools Qt offers. You'll
learn how to compose complex GUIs from basic building blocks, and how to
use QPainter, one of the most advanced 2D painting systems in the open
source world. Qt's Webkit integration will be discussed, along with the
recent Qt Quick technology, which allows one to create smooth and fluid
user interfaces. Qt's solution to common deployment problems, like
handling a serious translation workflow, will be presented. At the end,
we'll package our PyQt application so it's ready to be distributed for
download.&lt;/p&gt;
&lt;p&gt;Walk away with a sound understanding of why you should choose PyQt for
your next desktop project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/developing-cutting-edge-applications-with-pyqt.html</guid><category>deployment</category><category>distributed</category><category>pyqt</category><category>qt</category></item><item><title>Distributing Python programs through PyInstaller</title><link>https://pyvideo.org/europython-2011/distributing-python-programs-through-pyinstaller.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Giovanni Bajo - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on how to distribute multi-platform proprietary
Python applications, using &lt;a class="reference external" href="http://www.pyinstaller.org"&gt;PyInstaller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python
installation, nor third party library. The executable can then be packed
and shipped in many different ways (through installer wizards, deb/rpm
packages, etc.).&lt;/p&gt;
&lt;p&gt;PyInstaller is a good multi-platform alternative to tools like py2exe
and py2app, but it found troubles to gain acceptance in a market that
seems strongly tied to older tools. Instead, PyInstaller puts forward
important new features: for instance, it works on the most important
desktop platforms (Windows, Linux/UNIX, Mac), and it has got an
automatic and fully transparent support for all the workarounds needed
to make applications using complex libraries like Matplotlib or PyQt
work within a static executable.&lt;/p&gt;
&lt;p&gt;In detail, the following points will be discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Distribution of a priopriertary software: initial requests&lt;/li&gt;
&lt;li&gt;PyInstaller: how it works (basic tutorial)&lt;/li&gt;
&lt;li&gt;The secrets of PyInstaller: technical details&lt;/li&gt;
&lt;li&gt;Import hooks: effectively handling third party extensions&lt;/li&gt;
&lt;li&gt;Flexibility with PyInstaller: what goes in and what stays out&lt;/li&gt;
&lt;li&gt;Linux: static binaries for a single distribution or
cross-distributions&lt;/li&gt;
&lt;li&gt;Mac: creation of bundles for graphic applications&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/distributing-python-programs-through-pyinstaller.html</guid><category>matplotlib</category><category>py2exe</category><category>pyqt</category></item><item><title>Advanced Aspects of the Django Ecosystem: Haystack, Celery &amp; Fabric</title><link>https://pyvideo.org/europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django benefits from a thriving third-party ecosystem. This talk will
take a deep look at three of the components I have found most useful in
my own projects: Haystack for full-text search, Celery for offline
processing and Fabric for automated eployments. I'll discuss how we use
them for Lanyrd.com, and demonstrate why they deserve a permanent place
in your toolbox.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</guid><category>celery</category><category>django</category><category>fabric</category><category>processing</category></item><item><title>Best Practices for Python in the Cloud</title><link>https://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you’re an independent developer or development manager
in a large company, “the cloud” is on everyone’s mind. But just because
it’s in the cloud, doesn’t mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState’s experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisle Aas</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</guid><category>cloud</category><category>deploy</category><category>deployment</category><category>django</category><category>gpu</category><category>hpc</category><category>infrastructure</category><category>lamp</category><category>packages</category><category>scaling</category><category>web</category></item><item><title>Building a website with PyHP and Liwe</title><link>https://pyvideo.org/europython-2011/building-a-website-with-pyhp-and-liwe.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Fabio Rotondo - 22 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session, you will start learning how to create a simple PyHP + LiWE website.&lt;/p&gt;
&lt;p&gt;Then, we'll show you how to create new custom modules for your website and we'll show up some great features of the LiWE ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Rotondo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/building-a-website-with-pyhp-and-liwe.html</guid><category>learning</category></item><item><title>Data Plumbing with Python</title><link>https://pyvideo.org/europython-2011/data-plumbing-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Pavlos Christoforou - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Point Nine provides operations outsourcing and support to large and
complex financial institutions.&lt;/p&gt;
&lt;p&gt;As part of our day to day responsibilities we are required to process
our client's trading activity which generally involves receiving data in
various formats and through various protocols, apply transformations,
validations and enrichment processes and distribute the resulting data
to various third parties, in short Data Plumbing.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce the audience to the (vast) field
of financial data processing which we believe presents a tremendous
opportunity for python and it's community and provide a brief overview
of Point Nine's deployment of Python as the main framework for all data
plumbing activities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pavlos Christoforou</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/data-plumbing-with-python.html</guid><category>community</category><category>deployment</category><category>framework</category><category>processing</category></item><item><title>Experiences making CPU-bound tasks run much faster</title><link>https://pyvideo.org/europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ian Ozsvald - 22 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;UPDATE - post-event I've created a &lt;a class="reference external" href="http://ianozsvald.com/2011/06/29/high-performance-python-tutorial-v0-1%20-from-my-4-hour-tutorial-at-europython-2011/"&gt;49 page PDF write-
up&lt;/a&gt;
which summarises the 4 hour tutorial&lt;/p&gt;
&lt;p&gt;As a long-time R&amp;amp;D consultant I'm often working to make slow,
experimental code run faster for tasks like physics simulation, flood
modeling and natural language processing. Python allows a smooth
progression from rough-and-ready (but slow) algorithms through to finely
tuned tasks that efficiently use as much CPU power as you can bring to
bear. Speed-ups of 10-500* can be expected for the Mandelbrot code
we'll use.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover a set of libraries that make CPU-bound tasks run
much faster. We'll begin with a look at profiling using RunSnakeRun and
line_profiler to identify our bottleneck. We'll take a look at slow
algorithms in Python and how they can run faster using numpy and
numexpr.&lt;/p&gt;
&lt;p&gt;Next we'll cover the use of multiprocessing to utilise multiple CPU
cores along with Cython or ShedSkin to easily use C code in a friendly
Python wrapper. Multiprocessing on a quad-core system can often provide
a 4* speed-up for the right tasks. Next parallelpython will let us run
our code on a network of machines.&lt;/p&gt;
&lt;p&gt;Finally we'll look at pyCUDA to utilise an NVIDIA GPU. CUDA can give the
best improvements for mathematical problems (over 100* on the right
tasks) but works on a narrower set of problems.&lt;/p&gt;
&lt;p&gt;How it'll work: The tutorial will be hands on, you'll be converting
example files from normal Python to faster variants using the tools
below. All of it is optional, you'll get the most benefit by having
everything installed. We'll work in groups and open discussion is
encouraged.&lt;/p&gt;
&lt;p&gt;NOTE - you are expected to have all these tools installed &lt;em&gt;before&lt;/em&gt; the
tutorial (if you don't, you might find it hard to follow what's going
on!).&lt;/p&gt;
&lt;p&gt;I'll be using Python 2.7.1 on a Macbook (Snow Leopard). All of these
tools run on Windows and Linux, as long as your versions are fairly
recent everything should run just fine.&lt;/p&gt;
&lt;p&gt;My versions (roughly ordered by importance):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7.1&lt;/li&gt;
&lt;li&gt;RunSnakeRun 2.0.1b6 (with wxPython 2.8.12.0 Unicode)&lt;/li&gt;
&lt;li&gt;line_profiler (1.0b2)&lt;/li&gt;
&lt;li&gt;Cython 0.14.1&lt;/li&gt;
&lt;li&gt;ShedSkin 0.7.1&lt;/li&gt;
&lt;li&gt;numpy 1.5.1&lt;/li&gt;
&lt;li&gt;numexpr 1.4.2&lt;/li&gt;
&lt;li&gt;ParallelPython 1.6.1&lt;/li&gt;
&lt;li&gt;pyCUDA HEAD from git as of 14th June 2011 (with CUDA 4.0 drivers)&lt;/li&gt;
&lt;li&gt;PyPy 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some background reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/"&gt;http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/"&gt;http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Ozsvald</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html</guid><category>cython</category><category>git</category><category>multiprocessing</category><category>network</category><category>numpy</category><category>nvidia</category><category>profiling</category><category>pycuda</category><category>runsnakerun</category><category>tutorial</category><category>windows</category><category>wxpython</category></item><item><title>Gestione di processi clinici in Python: un caso d'uso</title><link>https://pyvideo.org/europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 23 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo seminario descriverò la nostra esperienza positiva d'uso di
Python per lo sviluppo di un sistema di etichettatura di provette per il
prelievo sanguigno in ambito di laboratorio e corsia ospedaliera. Il
sistema è basato sui Technical Framework di IHE –standard industriale
per la modellazione di processi clinici– ed è progettato per ridurre gli
errori umani e assicurare la tracciabilità del processo.&lt;/p&gt;
&lt;p&gt;Durante il seminario spiegherò perché abbiamo scelto Python in primo
luogo, e descriverò come siamo stati in grado di sfruttarne le
caratteristiche peculiari nello specifico del nostro dominio, esaminando
le limitazioni e i problemi affrontati.&lt;/p&gt;
&lt;p&gt;Mostrerò specifici casi d'uso di Python in parti differenti del
progetto, come un driver di basso livello per la gestione della robotica
di laboratorio, un modulo di comunicazione asincrona, l'implementazione
di attori IHE, e l'inevitabile applicazione web sviluppata in Django.&lt;/p&gt;
&lt;p&gt;Usare Python ha contribuito enormemente alla progettazione del sistema,
e ci ha consentito di adottare cicli di prototipizzazione estremamente
rapidi, sia per l'hardware che per il software. Durante il seminario
parlerò anche di ciò che, secondo noi, ancora manca perché Python possa
guadagnarsi il posto che gli spetta come piattaforma credibile per
l'implementazione di processi clinici basati sui più diffusi standard
internazionali.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html</guid><category>ci</category><category>framework</category><category>web</category></item><item><title>Latest advances in the Google APIs platform</title><link>https://pyvideo.org/europython-2011/latest-advances-in-the-google-apis-platform.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ali Afshar - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give an outline of the advances that Google have made in
API delivery over the last year, and how it is relevant to you as a
Python developer. The talk is suitable for beginners and advanced
developers.&lt;/p&gt;
&lt;p&gt;We will describe the underlying platform, and the built-in features that
all Google APIs inherit.&lt;/p&gt;
&lt;p&gt;We will focus on how the Python libraries for this API platform are
generated and can be used as a single library that doesn't require
updating with API updates, as Python lends itself perfectly to the
nature of this platform.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ali Afshar</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/latest-advances-in-the-google-apis-platform.html</guid><category>api</category><category>google</category><category>updating</category></item><item><title>PyHP and the art of dating girls</title><link>https://pyvideo.org/europython-2011/pyhp-and-the-art-of-dating-girls.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Fabio Rotondo - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be both technical and light talk, introducing these important
subjects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the new scripting language PyHP, a solution to create dynamic web
pages using the Python scripting language server side, a-la PHP, but
smarter.&lt;/li&gt;
&lt;li&gt;the LiWE (Lightweight Web Environment) Web Framework, a new and
robust web framework written in both JavaScript and Python that will
help you creating amazing websites.&lt;/li&gt;
&lt;li&gt;how this new amazing technologies can help you date girls (this will
be the light and funny part of the talk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Very basic knowledge of PHP&lt;/li&gt;
&lt;li&gt;Basic Python&lt;/li&gt;
&lt;li&gt;Basic / None JavaScript&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Rotondo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/pyhp-and-the-art-of-dating-girls.html</guid><category>art</category><category>framework</category><category>javascript</category><category>web</category></item><item><title>Python's other collection types and algorithms</title><link>https://pyvideo.org/europython-2011/pythons-other-collection-types-and-algorithms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Dalke - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's impossible to use Python without learning about lists, dictionaries
and tuples, and most people have at least heard about sets. These four
collection types are so important and useful that Python has special
syntax for creating them.&lt;/p&gt;
&lt;p&gt;Fewer people know about Python's other built-in collection data types
and algorithms. A deque supports fast appends and pops from both ends
and is great for breath-first searches, the heapq module helps you
construct a priority queue on top of lists, and the bisect module is
handy for quick binary searches of an already sorted list.&lt;/p&gt;
&lt;p&gt;The defaultdict uses the dict &lt;strong&gt;missing&lt;/strong&gt; hook as a better solution to
setdefault, OrderedDict is a dictionary that preserves insertion order,
and Counter is a dictionary specialized for counting hashable objects. A
namedtuple is handy if you want to support both index and attribute
lookups for the same item, and a frozenset is a hashable form of a set
which can be used as keys in a dictionary or set.&lt;/p&gt;
&lt;p&gt;My talk will go over these 8 different classes and modules. I'll give
concrete examples of how to use them and why they are useful. The target
audience is intermediate programmers who are familiar with the Python's
standard data types and with data types in general, but who don't know
all of the functionality available in modern Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/pythons-other-collection-types-and-algorithms.html</guid><category>bisect</category><category>dictionaries</category><category>frozenset</category><category>heapq</category><category>learning</category><category>namedtuple</category><category>ordereddict</category></item><item><title>Remote execution of Python scripts using Viri</title><link>https://pyvideo.org/europython-2011/remote-execution-of-python-scripts-using-viri.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc Garcia - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Viri is a system for automatic distribution and execution of Python code
on remote machines. This is especially useful when dealing with a large
group of hosts.&lt;/p&gt;
&lt;p&gt;With Viri, Sysadmins can write their own scripts, and easily distribute
and execute them on any number of remote machines. Depending on the
number of computers to administrate, Viri can save thousands of hours,
that Sysadmins would spend transferring files, logging into remote
hosts, and waiting for the scripts to finish. Viri automates the whole
process.&lt;/p&gt;
&lt;p&gt;Viri can also be useful for remotely managing host settings. It should
work together with an application where the information about hosts
would be maintained. This information can include cron tasks, firewall
rules, backup settings,etc. After a simple Integration of this
application with your Viri infrastructure, you can change any settings
in the application, and see how it gets applied on the target host
automatically.&lt;/p&gt;
&lt;p&gt;The talk will cover next topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Viri&lt;/li&gt;
&lt;li&gt;Live demo on how to install Viri, write a Viri task, and execute it
in a remote host&lt;/li&gt;
&lt;li&gt;Security concerns using Viri&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a class="reference external" href="http://www.viriproject.com"&gt;Viri project page&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Garcia</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/remote-execution-of-python-scripts-using-viri.html</guid><category>backup</category><category>logging</category><category>scripts</category></item><item><title>Social Network Analysis con Python</title><link>https://pyvideo.org/europython-2011/social-network-analysis-con-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Enrico Franchi - 24 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La popolarità dell'analisi dei network è cresciuta molto con la recente
diffusione dei social network. Si tratta di un argomento
multidisciplinare, con importanti contributi dai ricercatori di svariate
aree come fisica, sociologia, matematica ed informatica&lt;/p&gt;
&lt;p&gt;Tuttavia, l'analisi dei network è anche uno strumento utile per i
programmatori. Le tecniche base che saranno introdotte in questo talk
possono infatti essere usate ad esempio per i) testare la robustezza e
la resistenza ai fallimenti di un network, e ii) comprendere a fondo la
struttura di un social network, cosa che può portare ad intuizioni su
mode e trend a partire dai moderni servizi di networking.&lt;/p&gt;
&lt;p&gt;Insieme a questi concetti, sarà mostrato del codice Python che sfrutterà
sia dei tool esistenti per l'analisi dei network che dei package di
calcolo numerico. L'attenzione sarà principalmente sul codice, mostrato
e discusso insieme alla teoria su cui è basato.&lt;/p&gt;
&lt;p&gt;Gli unici prerequisiti consigliati per seguire questo talk sono delle
abilità matematiche di base e la conoscenza a livello introduttivo del
linguaggio di programmazione Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/social-network-analysis-con-python.html</guid><category>analysis</category><category>network</category></item><item><title>Sqlkit: database ad accesso immediato</title><link>https://pyvideo.org/europython-2011/sqlkit-database-ad-accesso-immediato.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 21 June 2011 in &amp;quot;Track Italiana
Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;È molto facile accedere ad un database con Python e ci sono molti ORM
che permettono un alto livello di astrazione. Da qui c'é ancora una
lunga strada per arrivare a manipolare interattivamente i dati anche per
semplici compiti.&lt;/p&gt;
&lt;p&gt;Sqlkit cerca di coprire questa distanza fornendo alcuni mega-widgets che
permettono di costruire ogni applicazione GUI o accedere direttamente ai
dati con l'applicazione 'sqledit', che viene distribuita con sqlkit.
Sqlkit è costruita con PyGTK e SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Questa presentazione esplora alcune fra le più potenti caratteristiche
di sqlkit e mostra quanto sia semplice costruire piccoli programmini ad
uso personale o applicazioni ricche ed articolate. Si focalizza
principalmente su due punti: quanto sia facile creare maschere per
editare dati (anche relazioni on2many o many2many, grazie al modo
originale di definire i layout) e al sistema di template basato su
OpenOffice che rende incredibilmente semplice creare report.&lt;/p&gt;
&lt;p&gt;Questa presentazione vuole mostrare come sqlkit può essere usato sia
come framework di sviluppo di applicazioni, sia come strumento che ci
aiuta mentre sviluppiamo altre applicazioni (es.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;Per rendere la presentazione più graduale, sfrutteremo il sistema di
configurazione di sqledit Partendo da una configurazione minima -un URL-
aggiungeremo elementi fino ad ottenere una vera applicazione.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/sqlkit-database-ad-accesso-immediato.html</guid><category>ci</category><category>database</category><category>framework</category><category>gui</category><category>openoffice</category><category>orm</category></item><item><title>Ubuntu e la programmazione occasionale</title><link>https://pyvideo.org/europython-2011/ubuntu-e-la-programmazione-occasionale.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Paolo Sammicheli - 21 June 2011 in &amp;quot;Track Italiana Big
Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk, mosteremo i tool e l'infastruttura che rende molto
semplice la creazione di progetti Python in Ubunut, e la loro
distribuzione a milioni di utenti. Verranno mostrati vari tool:
Launchpad, Quickly e i PPA (personal package archiving).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Sammicheli</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/ubuntu-e-la-programmazione-occasionale.html</guid></item><item><title>Using Python in Software for the Medical Industry</title><link>https://pyvideo.org/europython-2011/using-python-in-software-for-the-medical-industry.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The medical industry has long been dominated by custom software written
by manufacturers of medical equipment. With the widespread use of
lower-cost computing power and abundance of software developers using
cost-beneficial open source development tools, it is no surprise that
this is a rapidly- growing field in software engineering. In this talk,
I will describe some of my experiences using Python and other open
source tools, temporarily transitioning from the world of the web and
Internet development, jumping into the medical industry, an experience
much like being a fish out of water. The experiences of working in this
field, specifically developing software for use in clinical trials. We
describe the use of open source tools for such software development, the
required integration with closed-source software, and the documentation
rigor that is necessary in a field under the jurisdiction of the US Food
and Drug Administration (FDA). In particular, I'll describe direct
experience in building an application for the use of analyzing spinal
fractures and the various tools that make up the application suite,
whose primary development language was Python. We will also discuss the
particular role of the my employer at the time in the clinical trials
process and elaborate on the data flow that was necessary for all
medical applications developed at the firm, not just the one in
particular.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/using-python-in-software-for-the-medical-industry.html</guid><category>documentation</category><category>web</category></item><item><title>Web API Mashups in a Python Application</title><link>https://pyvideo.org/europython-2011/web-api-mashups-in-a-python-application.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Johan Euphrosine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover: - How to use OAuth into your webapp so users can
give permission to access their data stored in third party web
application. - How your webapp can interact with their Web API using
RESTful JSON protocols.&lt;/p&gt;
&lt;p&gt;This talk is suitable for beginners already familiar with any WSGI web
framework.&lt;/p&gt;
&lt;p&gt;This talk will be illustrated with code samples using Google App Engine
and Google APIs client library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johan Euphrosine</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/web-api-mashups-in-a-python-application.html</guid><category>api</category><category>google</category><category>json</category><category>oauth</category><category>web</category><category>wsgi</category></item><item><title>A Deep-Dive Into Python Classes</title><link>https://pyvideo.org/europython-2011/a-deep-dive-into-python-classes.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Smith - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to lift the lid on the system that governs how types
behave in Python - everything except Metaclasses.&lt;/p&gt;
&lt;p&gt;The talk answers questions such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a class, and how can we think of them?&lt;/li&gt;
&lt;li&gt;How are classes instantiated?&lt;/li&gt;
&lt;li&gt;How are attributes obtained from a class or an instance?&lt;/li&gt;
&lt;li&gt;Why do I get a different thing when accessing a method via its class
instead of its instance?&lt;/li&gt;
&lt;li&gt;How do the classmethod and staticmethod decorators work?&lt;/li&gt;
&lt;li&gt;How can I modify classes and instances after they've been
initialised?&lt;/li&gt;
&lt;li&gt;Does any of this allow me to do any clever tricks?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees should understand at least the basics of object oriented
programming in Python. This talk doesn't aim to explain
object-orientation, o-o design, or how Python represents objects in C.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Fri, 15 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-15:europython-2011/a-deep-dive-into-python-classes.html</guid><category>decorators</category></item><item><title>Introduction to Python Database Programming</title><link>https://pyvideo.org/europython-2011/introduction-to-python-database-programming.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc-Andre Lemburg - 21 June 2011 in &amp;quot;Track
Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will give an introduction to the concepts used in the Python
Database API and relational databases in general. Connection, cursors
and transactions are discussed, and their use in a typical Python
database application are demonstrated. The talk will also touch upon
some advanced database programming techniques and discuss best
practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-14:europython-2011/introduction-to-python-database-programming.html</guid><category>api</category><category>database</category><category>transactions</category></item><item><title>Ubuntu and the opportunistic programming</title><link>https://pyvideo.org/europython-2011/ubuntu-and-the-opportunistic-programming.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Paolo Sammicheli - 20 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will show the tools and the infrastructure that makes easy creating
own python project in Ubuntu and distributing it to millions of users.
It will be shown several tools: Launchpad, Quickly and and the Ubuntu's
PPA (personal package archiving).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Sammicheli</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-14:europython-2011/ubuntu-and-the-opportunistic-programming.html</guid><category>infrastructure</category></item><item><title>Developing a Cad application as an hobby. My exciting hobby is now my job</title><link>https://pyvideo.org/europython-2011/developing-a-cad-application-as-an-hobby-my-exci.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Matteo Boscolo - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PythonCAD is a CAD package written, surprisingly enough, in Python using
the PyQt interface. The PythonCAD project aims to produce a scriptable,
open- source, easy to use CAD package for Linux (Cross Platforms).&lt;/p&gt;
&lt;p&gt;I start developing PythonCAD in my spare time and now python is the
programming language that I mostly use. I think that will be very
interesting to tell my story and how I learn python pyqt ,sqlite, sympy…
and how python and pycon and OpenERP change my job.&lt;/p&gt;
&lt;p&gt;The goal will be to tell at the new python programmer how easy to use is
python even for complex problem. I can explain why I chose pyqt .. what
kind of trouble I have found and how I solve it. Starting from python
going to pyqt and at the end how to deploy a python application with
pyInstaller …&lt;/p&gt;
&lt;p&gt;I also explain my actual project OpenPLM an OpenERP module to manage PLM
data into OpenERP&lt;/p&gt;
&lt;p&gt;see you soon Matteo&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Boscolo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/developing-a-cad-application-as-an-hobby-my-exci.html</guid><category>deploy</category><category>pycon</category><category>pyqt</category></item><item><title>django-rdflib and postgresql - the best of both worlds</title><link>https://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</guid><category>architecture</category><category>database</category><category>django</category><category>orm</category><category>postgresql</category><category>reusing</category><category>search</category><category>serialization</category><category>university</category></item><item><title>django-rdflib e postgresql - il meglio dei due mondi</title><link>https://pyvideo.org/europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 24 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib è una libreria python che fornisce una base di dati con vari
back-end per le triple, dei parser, serializzatori, SPARQL è
un'interfaccia in python per estrarre/inserire le triple. L'abbiamo
integrata con Django tramite il riutilizzo della connessione alla base
di dati fornendo un'interfaccia ORM e la capacità di fare ricerca
full-text sui valori letterali. La presentazione contiene un studio di
caso per django-rdflib con un back-end postgresql in Brain Architecture
Management System (&lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;http://brancusi1.usc.edu&lt;/a&gt;) - un progetto
neuroscientifico per University of Southern California. Si vedranno i
benefici della struttura flessibile del RDF che permette ai ricercatori
di introdurre dati in formatto libero, rendere i dati pubblici con una
serializzazione personalizzata e usare la potente ricerca full-text
fornita da postgresql.&lt;/p&gt;
&lt;p&gt;Scopo: introdurre al pubblico una combinazione di RDF, la ricerca
full-text di postgresql e l'ORM di Django tramite django-rdflib.&lt;/p&gt;
&lt;p&gt;Requisiti: familiarità con Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</guid><category>architecture</category><category>django</category><category>orm</category><category>postgresql</category><category>university</category></item><item><title>Django: trucchi per migliorare la produttività</title><link>https://pyvideo.org/europython-2011/django-trucchi-per-migliorare-la-produttivita.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Federici - 22 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Proverò ad illustrare in questi 60 minuti alcuni consigli e best
practices, da utilizzare nello sviluppo di applicazioni django based.&lt;/p&gt;
&lt;p&gt;Non è un mero elenco di tools e/o applicazioni, bensì un bignami di
snippets e tips architetturali. Tutto sommato l’obbiettivo è non
sbagliare e andare più veloci.&lt;/p&gt;
&lt;p&gt;Argomenti trattati: python, users, forms, jquery, virtualenv,
distribute, buildbot, ecc…&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-trucchi-per-migliorare-la-produttivita.html</guid><category>django</category><category>python,</category></item><item><title>Flow-based programming made easy with PyF 2.0</title><link>https://pyvideo.org/europython-2011/flow-based-programming-made-easy-with-pyf-20.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in &amp;quot;Training Pizza
Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyF is a python framework to ease flow based programming and allow
massive data crunching on multiple CPUs. We boast an optional web-based
interface to visually design processing tubes, batch scheduling, report
generation and email alerts.&lt;/p&gt;
&lt;p&gt;The Framework is easily extensible by writing plugins, a lot of features
like data persistence, reporting and web scrapping are already part of
the ecosystem.&lt;/p&gt;
&lt;p&gt;This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.&lt;/p&gt;
&lt;p&gt;If available, an additional training session will focus on working with
the framework to create your own flow-based processes and plugins.&lt;/p&gt;
&lt;p&gt;For more information: &lt;a class="reference external" href="http://www.pyfproject.org/"&gt;http://www.pyfproject.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/flow-based-programming-made-easy-with-pyf-20.html</guid><category>architecture</category><category>design</category><category>framework</category><category>processing</category><category>ui</category><category>web</category></item><item><title>Generazione di codice in Python : dal documento al codice C++ passando per la modellizzazione UML.</title><link>https://pyvideo.org/europython-2011/generazione-di-codice-in-python-dal-documento-a.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Francesco Bochicchio - 24 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intendo presentare un programma di utilità che ho sviluppato per aiutare
me e i miei colleghi nel nostro attuale progetto.Space Software Italia
Questo programma esegue le seguenti attività: - Analizza un documento
Microsoft Word - generato automaticamente - allo scopo di estrarne le
informazioni relative alle strutture dati da usare per comunicare con
dispositivi e/o programmi software. Tali informazioni sono memorizzate
in un modello UML, generato interfacciandosi con il CASE tool usato in
azienda (Rational Rose). - Utilizza i dati in un modello UML - di solito
una versione migliorata a mano di quello generato automaticamente - per
generare un set di classi C++, una per messaggio, che forniscono i
metodi per serializzare/deserializzare i messaggi usando le API
specifiche del progetto. Il programma è stato scritto in Python 2.x ed
utilizza i seguenti moduli esterni: - pywin32: per interfacciare sia MS
Word che il tool CASE usando lo standard COM. - ply : per analizzare il
file in cui il tool CASE memorizza il modello,&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Bochicchio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/generazione-di-codice-in-python-dal-documento-a.html</guid><category>api</category><category>ply</category></item><item><title>Getting ready for PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>Hacking PyLongObject on Python 3.2</title><link>https://pyvideo.org/europython-2011/hacking-pylongobject-on-python-32.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Cesare Di Mauro - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Beginning with Python 3 the old integer (&amp;quot;int&amp;quot;) type has gone leaving
the place to &amp;quot;long&amp;quot;, which replaced it giving a unique, uniform type to
deal with integers. However longs need a more complex structure which
effectively dropped a bit of Python 3.x performance. Looking at their
implementation, an idea grown that can help to improve the situation on
common sceneries (using &amp;quot;short&amp;quot; integers). A slightly changed structure
will be presented and compared with the old PyIntObject and the current
Python 3.2 PyLongObject, along with some optimizations, thoughts, and
issues found on the road, which will show the effort required by such
change on a Python core element.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cesare Di Mauro</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/hacking-pylongobject-on-python-32.html</guid><category>hacking</category></item><item><title>Implementing distributed applications using ZeroMQ, Python and other bad guys...</title><link>https://pyvideo.org/europython-2011/implementing-distributed-applications-using-zerom.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Francesco Crippa - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloud Computing and Large Scale environments require sometime
applications based on complex and distributed architectures… and this
usually means a huge overhead in the design and confusion out of control
in the code (network wise race conditions, single points of failure and
so on)&lt;/p&gt;
&lt;p&gt;Introducing elements like *MQ and IPC frameworks in this kind of
applications is the only way to reduce the complexity and enable a fluid
design (in other words: mess-under-control)&lt;/p&gt;
&lt;p&gt;The talk is focused on describing how to design a distributed
application in different scenarios, using ZeroMQ (a modern broker-less
MQ system) as core framework, with examples and demos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Crippa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/implementing-distributed-applications-using-zerom.html</guid><category>design</category><category>distributed</category><category>zeromq</category></item><item><title>Interoperability: from Python to Clojure and the other way round</title><link>https://pyvideo.org/europython-2011/interoperability-from-python-to-clojure-and-the.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Enrico Franchi - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clojure is a modern Lisp dialect symbiotic with the Java Virtual Machine
and designed for concurrency. Clojure is compiled to byte-code and yet
is fully dynamic. It is very oriented towards functional programming and
manages state change in a controlled environment with software
transactional memory (STM). Since Clojure is a Lisp dialect, it retains
the code-as-data philosophy and has a powerful macro system&lt;/p&gt;
&lt;p&gt;Using the Jython, an implementation of the Python programming language
written in Java, it is possible to call Clojure from Python and call
Python from Clojure, using the JVM as an interoperability platform.&lt;/p&gt;
&lt;p&gt;After a brief introduction of the main Clojure features, the
presentation will show how Jython and Clojure can be used together.&lt;/p&gt;
&lt;p&gt;No previous knowledge of Clojure (or Lisp) is assumed nor required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/interoperability-from-python-to-clojure-and-the.html</guid><category>java</category><category>jvm</category><category>jython</category><category>memory</category></item><item><title>Introducing Django REST framework</title><link>https://pyvideo.org/europython-2011/introducing-django-rest-framework.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tom Christie - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST framework is a new project that aims to make it easy to
build RESTful Web APIs.&lt;/p&gt;
&lt;p&gt;The APIs it creates are fully Web browse-able, using an awesome Django
admin style interface, allowing them to be truly self-describing,
well-connected systems.&lt;/p&gt;
&lt;p&gt;The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RESTful Web APIs and Django - what batteries aren't in the box&lt;/li&gt;
&lt;li&gt;An introduction to the framework - What it is, what problems it tries
to solve&lt;/li&gt;
&lt;li&gt;Why it's so important that Web APIs should be Web browse-able&lt;/li&gt;
&lt;li&gt;A live coding demonstration&lt;/li&gt;
&lt;li&gt;Audience discussion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sign up for the &lt;a class="reference external" href="http://ep2011.europython.eu/p3/sprints/"&gt;sprint&lt;/a&gt;
More &lt;a class="reference external" href="http://django-rest-framework.org"&gt;info&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Christie</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/introducing-django-rest-framework.html</guid><category>django</category><category>framework</category><category>rest</category><category>web</category></item><item><title>It's the message, stupid: python &amp; amqp</title><link>https://pyvideo.org/europython-2011/its-the-message-stupid-python-amqp.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Muharem Hrnjadovic - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Messaging is a well established domain in information technology and can
greatly improve the scalability and throughput of a system when employed
appropriately. Message queues can be used to achieve&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;spatial decoupling i.e. the systems that produce and consume messages
may be deployed on different machines, networks, continents etc.&lt;/li&gt;
&lt;li&gt;temporal decoupling i.e. a system can enqueue a message and carry on
without waiting for the message consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use e.g. messaging in &lt;a class="reference external" href="http://openquake.org"&gt;OpenQuake&lt;/a&gt; to
distribute calculations of &lt;a class="reference external" href="http://openquake.org/about/gem/"&gt;seismic
hazard&lt;/a&gt; and the respective risk to
human lives and infrastructure.&lt;/p&gt;
&lt;p&gt;There is a huge number of messaging patterns identified in the
&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;industry&lt;/a&gt; and a small
selection of these will be presented to whet your appetite :-)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;AMQP&lt;/a&gt; is a fairly new and open messaging
standard with a number of freely available open source message brokers
(&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;,
&lt;a class="reference external" href="http://www.zeromq.org/"&gt;ZeroMQ&lt;/a&gt;, &lt;a class="reference external" href="http://qpid.apache.org/"&gt;qpid&lt;/a&gt;
etc.) with different features and performance trade-offs.&lt;/p&gt;
&lt;p&gt;In the course of the presentation you will be - introduced to AMQP
concepts and jargon - introduced to available Python AMQP bindings
(focussing on an asynchronous
(&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;txAMQP&lt;/a&gt;) and a synchronous variant
(most likely &lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;kombu&lt;/a&gt;) - shown code
examples demonstrating how to use these Python bindings&lt;/p&gt;
&lt;p&gt;The presentation (45 minutes in total) is structured as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;7.5 minutes for messaging concepts and patterns&lt;/li&gt;
&lt;li&gt;7.5 minutes for AMQP concepts&lt;/li&gt;
&lt;li&gt;5 minutes for an overview of the Python bindings for AMQP&lt;/li&gt;
&lt;li&gt;10 minutes for txAMQP examples (asynchronous bindings)&lt;/li&gt;
&lt;li&gt;10 minutes for kombu examples (synchronous bindings)&lt;/li&gt;
&lt;li&gt;5 minutes for questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;http://www.amqp.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;http://www.rabbitmq.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.zeromq.org/"&gt;http://www.zeromq.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qpid.apache.org/"&gt;http://qpid.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;https://launchpad.net/txamqp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;http://ask.github.com/kombu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;http://www.amazon.com/dp/0321200683/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Muharem Hrnjadovic</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/its-the-message-stupid-python-amqp.html</guid><category>amqp</category><category>asynchronous</category><category>patterns</category><category>performance</category><category>queues</category><category>scalability</category><category>technology</category></item><item><title>Leveraging an instant messaging protocol to build a scalable cloud architecture</title><link>https://pyvideo.org/europython-2011/leveraging-an-instant-messaging-protocol-to-build.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Achiel van der Mandele - 24 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;XMPP is an open technology for real-time communication. Although
primarily known for its application in the IM service &amp;quot;Jabber&amp;quot; (and,
subsequently, gchat/gtalk), it has numerous applications and creates new
opportunities for inter-system communication.&lt;/p&gt;
&lt;p&gt;While researching for an alternative to webservices at Mendix, we came
across XMPP and realized it solved many of the shortcomings of
webservices. It is currently being used to handle all inter-system and
inter-process communication in the Mendix cloud hosting environment.&lt;/p&gt;
&lt;p&gt;The talk will give a general overview of what XMPP is, an introduction
to the sleekxmpp python library and how the core features of xmpp can
help an architecture scale well horizontally.&lt;/p&gt;
&lt;p&gt;Required knowledge: basic understanding of hosting environments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Achiel van der Mandele</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/leveraging-an-instant-messaging-protocol-to-build.html</guid><category>architecture</category><category>cloud</category><category>hosting</category><category>real-time</category><category>scalable</category><category>technology</category></item><item><title>Making CPython Fast Using Trace-based Optimisations</title><link>https://pyvideo.org/europython-2011/making-cpython-fast-using-trace-based-optimisatio.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Shannon - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython can be made faster by implementing the sort of optimizations
used in the PyPy VM, and in my HotPy VM. All the necessary changes can
be made without modifying the language or the API.&lt;/p&gt;
&lt;p&gt;The CPython VM can be modified to support optimizations by adding an
effective garbage collector and by separating the virtual-machine state
from the real- machine state (like Stackless).&lt;/p&gt;
&lt;p&gt;Optimizations can be implemented incrementally. Since almost all of the
optimizations are implemented in the interpreter, all hardware platforms
can benefit. JIT compiler(s) can then be added for common platforms
(intel, ARM, etc.).&lt;/p&gt;
&lt;p&gt;For more information see &lt;a class="reference external" href="http://hotpy.blogspot.com/"&gt;http://hotpy.blogspot.com/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shannon</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-cpython-fast-using-trace-based-optimisatio.html</guid><category>cpython</category><category>jit</category><category>pypy</category><category>vm</category></item><item><title>Making use of OpenStreetMap data with Python</title><link>https://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Mishkovskyi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</guid><category>gis</category><category>google</category><category>importing</category><category>learning</category><category>maps</category><category>parsing</category><category>postgresql</category><category>web</category></item><item><title>Merengue: the new surprising and refreshing Django based CMS.</title><link>https://pyvideo.org/europython-2011/merengue-the-new-surprising-and-refreshing-djang.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Manuel Saelices - 20 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is an excellent web development platform with an extensive
developers community. It may be the most popular Python web framework
nowadays. However, the exisiting django based CMS products are not as
feature complete as other comparable solutions (Drupal, Plone, Alfresco,
ModX, etc.).&lt;/p&gt;
&lt;p&gt;The Merengue project tries to fill this gap. It is financed by the
University of Málaga (Spain) and takes advantage of existing code and
knowledge from other projects (Plone, Drupal, Pinax, django-cms,
feincms, LFC, etc.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manuel Saelices</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/merengue-the-new-surprising-and-refreshing-djang.html</guid><category>cms</category><category>django</category><category>framework</category><category>university</category><category>web</category></item><item><title>Meteorology, Climate and Python: desperately trying to forget technical details</title><link>https://pyvideo.org/europython-2011/meteorology-climate-and-python-desperately-tryi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Claude Gibert - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="contents"&gt;
&lt;h4&gt;Contents&lt;/h4&gt;
&lt;p&gt;Python is a great language for writing programming frameworks. Python
frameworks are normally addressed to software developers who are Python
professionals. I developed a software package in a scientific
institution, designed to be used by non-programmers, but also designed
to enable customisation through programming by some users. I finally
designed a three level package:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python programming framework, addressed whoever wanted to invest in
Python and had plans to develop applications;&lt;/li&gt;
&lt;li&gt;An application built on that framework with an interface designed for
non-programmers;&lt;/li&gt;
&lt;li&gt;Ways of customising the behaviour of the application by providing
some basic Python functions or more elaborated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the challenges was to offer an application with an easy to use
interface, not graphical, not web-based and not requiring Python
programming. This interface was necessary for batch processing.&lt;/p&gt;
&lt;p&gt;This talk addresses how this project was carried out, the technical
solutions adopted and how Python was introduced in an operational
scientific institution (&lt;a class="reference external" href="http://www.ecmwf.int"&gt;http://www.ecmwf.int&lt;/a&gt;) where most users were
Fortran programmers. Python was introduced as early as 2004 and it was a
challenge to gain acceptance. I will also make a parallel with a project
I am currently working on for NASA (&lt;a class="reference external" href="http://gmao.gsfc.nasa.gov/"&gt;http://gmao.gsfc.nasa.gov/&lt;/a&gt;).
&lt;em&gt;Desperately trying to forget technical details&lt;/em&gt; summarises how I tried,
using Python, to help Meteorology scientists to focus on their domain of
expertise instead of constantly solving technical problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h4&gt;Background:&lt;/h4&gt;
&lt;p&gt;The disciplines of Meteorology and Climate involve numerical modelling
of physical phenomena. The amount of data going in and out of the model
is considerable. The organisation and the storage of data is
complicated, their post-processing is a challenge. Scientists need to
access and process input and output data to monitor the trends of the
input data and to evaluate the performance of their models. Those
statistics, diagnostics, plots and verifications are crucial to the
improvement of the quality of the models. Finding the right data,
decoding it, transforming it to be ready for use are necessary steps to
initiate the pre-processing. All these actions are fundamentally the
same between different prediction centres, but the data organisation and
file formats can differ.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claude Gibert</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/meteorology-climate-and-python-desperately-tryi.html</guid><category>framework</category><category>nasa</category><category>parallel</category><category>performance</category><category>python,</category><category>scientific</category></item><item><title>OpenERP: 100% pythonic way for business management</title><link>https://pyvideo.org/europython-2011/openerp-100-pythonic-way-for-business-managemen.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Davide Corio - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Business management isn't just accounting. Let's see how Python can help
us to build a complete ERP infrastructure. From CRM to e-commerce, from
accounting to document management…we'll see how Python is mature and
able to do great things where Java and .NET are still considered as the
only option. Case studies to be presented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Corio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/openerp-100-pythonic-way-for-business-managemen.html</guid><category>business</category><category>crm</category><category>java</category><category>.net</category></item><item><title>OpenStack Compute's automated testing</title><link>https://pyvideo.org/europython-2011/openstack-computes-automated-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Soren Hansen - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a patch is propoed against OpenStack compute (a.k.a. Nova) and it
makes it through our peer review process, our automated test system
takes over:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It finds the approved patch on Launchpad;&lt;/li&gt;
&lt;li&gt;An attempt to merge the patch is performed;&lt;/li&gt;
&lt;li&gt;The unit tests are run;&lt;/li&gt;
&lt;li&gt;A PEP-8 check is run;&lt;/li&gt;
&lt;li&gt;The merge is completed, applying the patch to our trunk;&lt;/li&gt;
&lt;li&gt;A tarball is built and published;&lt;/li&gt;
&lt;li&gt;An Ubuntu source package is built for several editions of Ubuntu;&lt;/li&gt;
&lt;li&gt;The source packages get uploaded to a PPA;&lt;/li&gt;
&lt;li&gt;Once built, the packages are installed on a test setup;&lt;/li&gt;
&lt;li&gt;A test battery is run against the installed &amp;quot;cloud&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll explain the various steps, showing how it works and attempt to
demonstrate it (Murphy's law permitting), and then I'll speak about the
benefits we've gotten from PPA's and working closely with Ubuntu.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Soren Hansen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/openstack-computes-automated-testing.html</guid><category>openstack</category><category>packages</category><category>testing</category></item><item><title>Paver: the build tool you missed</title><link>https://pyvideo.org/europython-2011/paver-the-build-tool-you-missed.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lukaš Linhart - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build tools are not very popular in Python environment. In this talk,
I'd like to show how useful it is to have one, even if you do just
simple web applications. A nice, single point of entry instead of hairy
shell scripts, fabric fabfiles and django admin commands all over the
place.&lt;/p&gt;
&lt;p&gt;Written in the neat, friendly Python instead of some Anty XML jumbo, you
are about to have a refreshing cleanup.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lukáš Linhart</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/paver-the-build-tool-you-missed.html</guid><category>django</category><category>fabric</category><category>web</category><category>xml</category></item><item><title>plac: more than just another command-line arguments parser</title><link>https://pyvideo.org/europython-2011/plac-more-than-just-another-command-line-argumen.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Michele Simionato - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;plac is general purpose tool than can be used to define command-oriented
domain specific languages (DSLs). In its simplest form it can be used as
a command-line arguments parser with an easier-to-use API than argparse.
It can also be used to replace the cmd module in the standard library.
Moreover it can be used to automatize functional tests and for much
more. The talk will touch upon many use cases where plac can make your
life as a developer simpler and better. Technically Plac is a wrapper
over argparse and works in all versions of Python starting from Python
2.3 up to Python 3.2. In Python 3.X it takes advantage of function
annotations to define the parser in a declarative way, instead of the
imperative way of argparse. In Python 2.X it uses decorators instead, to
reach the same goal. The talk is a hands-on interactive demonstration of
plac capabilities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michele Simionato</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/plac-more-than-just-another-command-line-argumen.html</guid><category>api</category><category>argparse</category><category>cmd</category><category>decorators</category><category>parser</category></item><item><title>PL/Python -- Python inside the PostgreSQL RDBMS</title><link>https://pyvideo.org/europython-2011/plpython-python-inside-the-postgresql-rdbms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Geoghegan - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/plpython-python-inside-the-postgresql-rdbms.html</guid><category>postgresql</category><category>rdbms</category></item><item><title>PostgreSQL - the database-sister of Python</title><link>https://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</guid><category>business</category><category>database</category><category>json</category><category>postgresql</category><category>replication</category><category>web</category></item><item><title>Programmazione MapReduce in Python con Pydoop</title><link>https://pyvideo.org/europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Leo - 23 June 2011 in &amp;quot;Track Italiana Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop è la principale implementazione open source di MapReduce, il
paradigma di calcolo distribuito su larga scala di Google. L'API nativa
di Hadoop è in Java e le opzioni built-in per la programmazione in
Python - Streaming e Jython - presentano diversi inconvenienti: la prima
consente di accedere solo a un piccolo sottoinsieme delle funzionalità
di Hadoop, mentre la seconda ha tutte le limitazioni di Jython rispetto
a CPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydoop.sourceforge.net"&gt;Pydoop&lt;/a&gt; è un'API per Hadoop che rende
disponibile buona parte delle funzionalità di Hadoop al programmatore
Python, consentendo lo sviluppo in CPython. I suoi moduli di base sono
wrapper Boost.Python per l'interfaccia C/C++ di Hadoop.&lt;/p&gt;
&lt;p&gt;Il talk consiste in un tutorial su MapReduce/Hadoop e in una
presentazione dell'API Pydoop, con l'obiettivo principale di avvicinare
le community di Hadoop e Python. Può essere utile, anche se non
strettamente necessaria, una conoscenza di base della programmazione
distribuita.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</guid><category>community</category><category>hadoop</category><category>java</category><category>jython</category><category>mapreduce</category><category>python,</category><category>tutorial</category></item><item><title>PyPy in production</title><link>https://pyvideo.org/europython-2011/pypy-in-production.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language - it is the fastest Python
interpreter, and the most compatible and most stable 'alternative´ one.
No longer merely a research project, PyPy is now suitable for production
use. We are working on improvements on calling into C libraries and
generally integrating with the existing Python extensions ecosystem.&lt;/p&gt;
&lt;p&gt;We will give an overview on how the tracing Just-in-Time compiler works
in PyPy. From there, we will then focus on what the PyPy project has
achieved, particularly in the past two years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most Python benchmarks run much faster than with CPython or Psyco&lt;/li&gt;
&lt;li&gt;the real-world PyPy compiler toolchain itself (200 KLocs) runs twice
as fast&lt;/li&gt;
&lt;li&gt;already supports 32 and 64bit x86 and is in the process of supporting
ARM&lt;/li&gt;
&lt;li&gt;full compatibility with CPython (more than Jython/IronPython)&lt;/li&gt;
&lt;li&gt;full (and JIT-ed) ctypes support to call C libraries from Python&lt;/li&gt;
&lt;li&gt;supports Stackless Python (in-progress)&lt;/li&gt;
&lt;li&gt;new &amp;quot;cpyext&amp;quot; layer which integrates existing CPython C extensions&lt;/li&gt;
&lt;li&gt;an experimental super-fast JIT-compilation of calls to C++ libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to reserve time for discussing potential future work like SWIG
and/or Cython compatibility and other areas brought up by the audience.
There are many interesting details that can be explored further; we will
focus on the points the audience is most interested in.&lt;/p&gt;
&lt;p&gt;For more info:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;http://pypy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our blog: &lt;a class="reference external" href="http://morepypy.blogspot.com/"&gt;http://morepypy.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eureka program: &lt;a class="reference external" href="http://www.eurostars-eureka.eu/"&gt;http://www.eurostars-eureka.eu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Eurostars Eureka is our funding source since 2009. It is a
cross-European funding collaboration that targets small firms which
produce research.&lt;/em&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/pypy-in-production.html</guid><category>cpython</category><category>ctypes</category><category>cython</category><category>extensions</category><category>pypy</category><category>stackless</category></item><item><title>Python 3: the Next Generation (is here already)</title><link>https://pyvideo.org/europython-2011/python-3-the-next-generation-is-here-already-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is currently at a crossroads: Python 2 has taken it from a quiet
word- of-mouth language to primetime, with many companies around the
world using it and an ever-increasing global marketshare of the
programming world. But now comes Python 3, the first version of the
language that is not backwards compatible with previous releases.&lt;/p&gt;
&lt;p&gt;What does this mean? Are all my Python programs going to break? Will I
have to rewrite everything? How much time do I have? When is Python 2
going to be EOL'd? Is the language undergoing a complete rewrite and
will I even recognize it? What are the changes between Python 2 and 3
anyway? Also, the next generation is already here, as Python 3 is over
two years old now. What has been ported so far, and what is its current
status? Are migration plans or transition tools available? If I want to
start learning Python, should I do Python 2 or Python 3? Are all Python
2 books obsolete?&lt;/p&gt;
&lt;p&gt;We will attempt to answer all of these questions and more. Join us!&lt;/p&gt;
&lt;p&gt;OUTLINE/TOPICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2 vs. Python 3&lt;/li&gt;
&lt;li&gt;Introduction to Python 3&lt;/li&gt;
&lt;li&gt;Backwards Compatibility&lt;/li&gt;
&lt;li&gt;Generational Changes&lt;/li&gt;
&lt;li&gt;Key Differences&lt;/li&gt;
&lt;li&gt;Role of Remaining Python 2.x releases&lt;/li&gt;
&lt;li&gt;Transition &amp;amp; Migration Plans &amp;amp; Tools&lt;/li&gt;
&lt;li&gt;Futures&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-3-the-next-generation-is-here-already-0.html</guid><category>learning</category><category>migration</category><category>python,</category></item><item><title>Python Design Patterns</title><link>https://pyvideo.org/europython-2011/python-design-patterns.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alex Martelli - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A completely misguided meme has long been going around: that Python
doesn't have, or need, any Design Patterns. This terrible meme may
spring from not realizing what the Gang Of Four state so plainly in
their historical &amp;quot;Design Patterns&amp;quot; book: which design patterns are
useful DOES depend on the programming language one targets - design is
NOT independent of implementation, as the epic-fail &amp;quot;Waterfall&amp;quot;
Methodology Pattern would suggest. What patterns apply to a design,
depends to some extent on what implementation technologies will be used
to realize that design.&lt;/p&gt;
&lt;p&gt;If you focus on some &amp;quot;classic DPs&amp;quot; that are basically workarounds for
some other language's lack of garbage collection, or for a clumsy
static-typing system, those may indeed be worthless for Python. But many
other DPs are perfectly useful and applicable, and Python's strengths as
a language afford riffing on them to develop highly Pythonic, powerful,
productive variants.&lt;/p&gt;
&lt;p&gt;In this talk, I analyze some of my favorite pattern families - e.g.,
Template Method and its variants, Dependency Injection and its ilk,
Callback and friends - in a highly Pythonic context. Non-pattern Idioms,
and Patterns that aren't really Design Patterns but rather Architecture
or Methodology ones, make cameo appearances.&lt;/p&gt;
&lt;p&gt;Goals: remove from your system any residue of the pernicious meme about
Python not having or needing design patterns. Prereqs: experience
designing and developing software; intermediate-level Python knowledge.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-design-patterns.html</guid><category>architecture</category><category>design</category><category>patterns</category></item></channel></rss>