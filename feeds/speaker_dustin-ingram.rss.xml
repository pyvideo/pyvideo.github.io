<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Static Typing in Python</title><link>https://pyvideo.org/pycon-de-2019/static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/NH9UEY"&gt;https://de.pycon.org/program/NH9UEY&lt;/a&gt;
Follow us on Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-10:pycon-de-2019/static-typing-in-python.html</guid></item><item><title>PEP 572: The Walrus Operator</title><link>https://pyvideo.org/pycon-taiwan-2019/pep-572-the-walrus-operator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R0 13:55–14:25&lt;/p&gt;
&lt;p&gt;In this talk, we’ll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.&lt;/p&gt;
&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of PyPI, organizer for the PyTexas conference.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-20:pycon-taiwan-2019/pep-572-the-walrus-operator.html</guid></item><item><title>Python with Dustin Ingram: GCPPodcast 165</title><link>https://pyvideo.org/google-cloud-platform/python-with-dustin-ingram-gcppodcast-165.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Original post → &lt;a class="reference external" href="http://bit.ly/2UFhAi4"&gt;http://bit.ly/2UFhAi4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mark and Brian Dorsey spend today talking Python with Dustin Ingram. Python is an interpreted, dynamically typed language, which encourages very readable code. Python is popular for web applications, data science, and much more! Python works great on Google Cloud, especially with App Engine, Compute Engine, and Cloud Functions. To learn more about best (and worst) use cases, listen in!&lt;/p&gt;
&lt;p&gt;For more GCP Podcasts → &lt;a class="reference external" href="https://bit.ly/2rBQl6W"&gt;https://bit.ly/2rBQl6W&lt;/a&gt;
Subscribe to the Google Cloud Platform channel → &lt;a class="reference external" href="https://bit.ly/GCloudPlatform"&gt;https://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-16:google-cloud-platform/python-with-dustin-ingram-gcppodcast-165.html</guid></item><item><title>Getting Started with App Engine Python</title><link>https://pyvideo.org/google-cloud-platform/getting-started-with-app-engine-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This video walks you through how to deploy an App Engine standard app to Google Cloud Platform.&lt;/p&gt;
&lt;p&gt;Learn more about the Google App Engine → &lt;a class="reference external" href="https://bit.ly/2IiA1Dl"&gt;https://bit.ly/2IiA1Dl&lt;/a&gt;
Python on Google App Engine → &lt;a class="reference external" href="https://bit.ly/2ItSsFt"&gt;https://bit.ly/2ItSsFt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch the Getting Started with GCP Playlist → &lt;a class="reference external" href="https://bit.ly/2TNymHm"&gt;https://bit.ly/2TNymHm&lt;/a&gt;
Subscribe to the GCP Channel for more content → &lt;a class="reference external" href="https://bit.ly/GCloudPlatform"&gt;https://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-15:google-cloud-platform/getting-started-with-app-engine-python.html</guid></item><item><title>Deploying a Content Management System to App Engine with Python 3</title><link>https://pyvideo.org/google-cloud-platform/deploying-a-content-management-system-to-app-engine-with-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy Wagtail, an open source content management system built on Django, to Google App Engine’s new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Setting Up a Python Development Environment →  &lt;a class="reference external" href="http://bit.ly/2CDdn3N"&gt;http://bit.ly/2CDdn3N&lt;/a&gt;
Install the ‘gcloud’ Google Cloud SDK → &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Install the Cloud SQL Proxy → &lt;a class="reference external" href="http://bit.ly/2SmPRNL"&gt;http://bit.ly/2SmPRNL&lt;/a&gt;
Storing secrets →  &lt;a class="reference external" href="http://bit.ly/2AjwuON"&gt;http://bit.ly/2AjwuON&lt;/a&gt;
Google App Engine Python 3 Standard Environment Documentation → &lt;a class="reference external" href="http://bit.ly/2PIql3t"&gt;http://bit.ly/2PIql3t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay up to date by subscribing to the Google Cloud Platform Channel → &lt;a class="reference external" href="http://bit.ly/GCloudPlatform"&gt;http://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 28 Dec 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-12-28:google-cloud-platform/deploying-a-content-management-system-to-app-engine-with-python-3.html</guid></item><item><title>Introduction App Engine’s new Python 3 Runtime</title><link>https://pyvideo.org/google-cloud-platform/introduction-app-engines-new-python-3-runtime.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy a Python 3 app to Google App Engine’s new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Install the ‘gcloud’ Google Cloud SDK → &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Google App Engine Python 3 Standard Environment Documentation → &lt;a class="reference external" href="http://bit.ly/2PIql3t"&gt;http://bit.ly/2PIql3t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay up to date by subscribing to the Google Cloud Platform Channel → &lt;a class="reference external" href="http://bit.ly/GCloudPlatform"&gt;http://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Mon, 17 Dec 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-12-17:google-cloud-platform/introduction-app-engines-new-python-3-runtime.html</guid></item><item><title>Python 2 to 3: Migration Patterns &amp; Motivators (Cloud Next '19)</title><link>https://pyvideo.org/google-cloud-platform/python-2-to-3-migration-patterns-motivators-cloud-next-19.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As January 1, 2020 approaches, the world’s Python applications are moving to Python 3. While migrations never feel glamorous, there are plenty of reasons to be excited. Python 3 brings new features that can improve the day-to-day lives of a software development team. In this talk, we’ll discuss motivations, common migration patterns, common pitfalls, and how you can convince your team that there has never been a better time to embrace Python 3.&lt;/p&gt;
&lt;p&gt;Python on GCP → &lt;a class="reference external" href="https://bit.ly/2TXoJF8"&gt;https://bit.ly/2TXoJF8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch more:
Next ‘19 All Sessions playlist → &lt;a class="reference external" href="https://bit.ly/Next19AllSessions"&gt;https://bit.ly/Next19AllSessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Subscribe to the Google Cloud Channel → &lt;a class="reference external" href="https://bit.ly/GoogleCloud1"&gt;https://bit.ly/GoogleCloud1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker(s): Christopher Wilcox, Dustin Ingram&lt;/p&gt;
&lt;p&gt;Session ID: DEV308
product:App Engine,Cloud Functions,Cloud Run; fullname:Dustin Ingram,Christopher Wilcox;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Thu, 12 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-12:google-cloud-platform/python-2-to-3-migration-patterns-motivators-cloud-next-19.html</guid></item><item><title>Static Typing in Python</title><link>https://pyvideo.org/djangocon-us-2019/static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Static Typing in Python by Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/static-typing-in-python/"&gt;https://2019.djangocon.us/talks/static-typing-in-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Dustin Ingram 👇
On Twitter: &lt;a class="reference external" href="https://twitter.com/di_codes"&gt;https://twitter.com/di_codes&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://di.codes"&gt;https://di.codes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US 👇
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA 👇
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-24:djangocon-us-2019/static-typing-in-python.html</guid></item><item><title>Lightning Talks Day 1</title><link>https://pyvideo.org/djangocon-us-2019/lightning-talks-day-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks Day 1 by Various Speakers&lt;/p&gt;
&lt;p&gt;Wayne Merry 00:00
Ayaz Amlani 5:24
Tyler Rudie 9:37
Pandy Knight 14:30
Dustin Ingram 18:32
Paul Stieber 22:23
Dawn Wages 26:16&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Kojo Idrissa 👇
On Twitter: &lt;a class="reference external" href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://kojoidrissa.com/"&gt;http://kojoidrissa.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US 👇
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA 👇
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wayne Merry</dc:creator><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-23:djangocon-us-2019/lightning-talks-day-1.html</guid></item><item><title>Static Typing in Python</title><link>https://pyvideo.org/pycolorado-2019/static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we’ll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional “type hints” and various tools to aid in adding types to Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-08:pycolorado-2019/static-typing-in-python.html</guid></item><item><title>Modern development environments for Pythonistas</title><link>https://pyvideo.org/pycon-jp-2019/modern-development-environments-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;02-201_Modern development environments for Pythonistas(Dustin Ingram)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-17:pycon-jp-2019/modern-development-environments-for-pythonistas.html</guid></item><item><title>Building a Sustainable Python Package Index</title><link>https://pyvideo.org/pybay-2019/building-a-sustainable-python-package-index.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Abstract
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Unlike some other languages, Python has a centralized repository for third-party Python packages. Also unlike some other languages, this repository, the Python Package Index, is entirely supported by the community and operated by the non-profit Python Software Foundation.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss why we have the PyPI we all know and love, and why the current status quo is preferred. We'll go a bit into how PyPI works, both from a technical perspective, and from the perspective as an open-source and non-profit project.&lt;/p&gt;
&lt;p&gt;Finally, we'll have a call to action to help improve, and more importantly sustain, this critical piece of Python infrastructure.&lt;/p&gt;
&lt;p&gt;About the speaker
Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of the Python Package Index, and organizer for the PyTexas conference.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/building-a-sustainable-python-package-index.html</guid></item><item><title>Ministry of Silly Runtimes: Vintage Python on Cloud Run</title><link>https://pyvideo.org/pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html</guid></item><item><title>Static Typing in Python</title><link>https://pyvideo.org/pygotham-2019/static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This
means that you don't need to say what a given variable will hold, or whether
your function will return a string or an integer (or sometimes one, and
sometimes another!). This has historically made Python a very flexible and
beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static
type system, as well as recent efforts to introduce static typing to Python
via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python
code. We'll see what this means for Python, for Python programmers, and what
the future has in store for Python's type system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/static-typing-in-python.html</guid></item><item><title>The Ministry of Silly Talks</title><link>https://pyvideo.org/pygotham-2019/the-ministry-of-silly-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2019's Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aditya Sirish</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/the-ministry-of-silly-talks.html</guid></item><item><title>Modern development environments for Pythonistas</title><link>https://pyvideo.org/pycon-latam-2019/modern-development-environments-for-pythonistas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-30:pycon-latam-2019/modern-development-environments-for-pythonistas.html</guid></item><item><title>Static Typing in Python</title><link>https://pyvideo.org/pycon-uk-2019/static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional 'type hints' and various tools to aid in adding types to Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-13:pycon-uk-2019/static-typing-in-python.html</guid></item><item><title>Keeping Fun in Computing</title><link>https://pyvideo.org/pyohio-2019/keeping-fun-in-computing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how maintaining a sense of fun and whimsy in
science has a profound effect on discovery, innovation and progress.&lt;/p&gt;
&lt;p&gt;We'll also talk about some modern examples of how folks are ensuring
technology remains not-so-serious, including some examples specific to
the Python community, and how some famous thinkers followed their
natural curiosity to keep science fun, all to great success.&lt;/p&gt;
&lt;p&gt;And finally, we'll discuss how you and I can keep computing fun on a
day-to- day basis, maintain and nurture our natural curiosity, and just
be open to the unknown, all to the benefit of our field, those we work
with, and ourselves.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sun, 28 Jul 2019 14:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-28:pyohio-2019/keeping-fun-in-computing.html</guid></item><item><title>Sunday Lightning Talks</title><link>https://pyvideo.org/pyohio-2019/sunday-lightning-talks.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kat Passen</dc:creator><pubDate>Sat, 27 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-27:pyohio-2019/sunday-lightning-talks.html</guid></item><item><title>Building a Sustainable Python Package Index</title><link>https://pyvideo.org/pycon-au-2019/building-a-sustainable-python-package-index.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/building-a-sustainable-python-package-index"&gt;https://2019.pycon-au.org/talks/building-a-sustainable-python-package-index&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 10:30:00 2019 at Cockle Bay&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-03:pycon-au-2019/building-a-sustainable-python-package-index.html</guid></item><item><title>Google Cloud for Pythonistas</title><link>https://pyvideo.org/europython-2019/google-cloud-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for Python on Google Cloud has never been better. Join us for a
tour of Python runtimes, services and client libraries, including App
Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools
for monitoring and debugging your Python application, and best practices
for using Python on Google Cloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/google-cloud-for-pythonistas.html</guid><category>Deployment/Continuous Integration and Delivery</category><category>DevOps general</category><category>Development</category><category>Public Cloud (AWS/Google/...)</category><category>Web</category></item><item><title>PEP 572: The Walrus Operator</title><link>https://pyvideo.org/pycon-ca-2018/pep-572-the-walrus-operator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Presentation page -- &lt;a class="reference external" href="https://2018.pycon.ca/talks/talk-PC-55520/"&gt;https://2018.pycon.ca/talks/talk-PC-55520/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:pycon-ca-2018/pep-572-the-walrus-operator.html</guid></item><item><title>PEP 572: The Walrus Operator</title><link>https://pyvideo.org/pycon-us-2019/pep-572-the-walrus-operator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial change to Python
syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Along the way we'll go in-depth on how new ideas about Python are
proposed, discussed, and become part of the language, what's unique
about Python's process compared to other open source projects, and
recent developments and what they mean for the future of the wider
Python community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 04 May 2019 13:55:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-us-2019/pep-572-the-walrus-operator.html</guid><category>talk</category></item><item><title>Data Protection for Developers: Past, Present, and Future</title><link>https://pyvideo.org/pycascades-2019/data-protection-for-developers-past-present-and-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 1970, the German state of Hesse enacted what is widely considered the very first data protection laws. Nearly fifty years later, the European Union has implemented the strongest, most comprehensive data protection regulation ever. This talk gives a crash course on data protection and the GDPR.&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/data-protection-for-developers-past-present-and-future/"&gt;https://2019.pycascades.com/talks/data-protection-for-developers-past-present-and-future/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-24:pycascades-2019/data-protection-for-developers-past-present-and-future.html</guid></item><item><title>Detecting Asteroids with Neural Networks</title><link>https://pyvideo.org/florida-pycon-2017/detecting-asteroids-with-neural-networks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is an open-source software library for Machine Intelligence.
In this talk, we will learn how to use it to build and train a neural
network with the goal of correctly identifying asteroids in
astrophotography data. The dataset used will be from the Sloan Digital
Sky Survey, one of the most ambitious and influential surveys in the
history of astronomy.&lt;/p&gt;
&lt;p&gt;Using this data, we will learn how to create and featurize a training
dataset, build and fit a neural network, and train our model to
correctly identify asteroids visible from Earth.&lt;/p&gt;
&lt;p&gt;This talk is for a wide range of Python developers, from those who have
heard of machine learning, but have never experimented with it, to those
who have significant experience with neural networks, but have never
used TensorFlow before.&lt;/p&gt;
&lt;p&gt;The audience should have some basic Python knowledge, but no formal or
informal experience with machine intelligence is assumed.&lt;/p&gt;
&lt;p&gt;After watching this talk, the audience should know how to determine and
develop features, how and why to build a training dataset, how to build
and train a neural network, and some other approaches to supervised
learning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:florida-pycon-2017/detecting-asteroids-with-neural-networks.html</guid></item><item><title>Swiss Train Deployments</title><link>https://pyvideo.org/florida-pycon-2017/swiss-train-deployments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Swiss Train deployment is a general-purpose deployment philosophy
based on ideas from the Ember.js development process, modern browser
releases, and various open-source project releases, such as the Ubuntu
project.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll explore the motivation for a Swiss Train style
deployment, the problems which it seeks to solve in existing deployment
philosophies, and the core philosophy of a Swiss Train deployment.&lt;/p&gt;
&lt;p&gt;This talk is for developers who are responsible for deploying code (not
just Python!) to production in a timely manner, while still providing a
stable ecosystem for their users.&lt;/p&gt;
&lt;p&gt;The only background knowledge required is some amount of experience
“deploying” code or releasing applications, whatever that may mean for
an individual developer (essentially, this will allow the audience
member to better empathize with the inefficiencies of current deployment
philosophies (or lack thereof) and highlight the advantage of the
proposed philosophy.&lt;/p&gt;
&lt;p&gt;After watching this talk, the audience should be able to: – understand
why it is important to have a deployment philosophy – see the
inefficiencies in current deployment philosophies – present a strong
argument for adopting Swiss Train style deployments – be able to
implement the deployment philosophy in their own workflow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:florida-pycon-2017/swiss-train-deployments.html</guid></item><item><title>Lightning Talks Day 3 Round 2</title><link>https://pyvideo.org/pybay-2018/lightning-talks-day-3-round-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-18:pybay-2018/lightning-talks-day-3-round-2.html</guid></item><item><title>Inside the Cheeseshop: How Python Packaging Works</title><link>https://pyvideo.org/pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is
this &lt;cite&gt;setup.py&lt;/cite&gt; file? What’s the difference between wheels and eggs? Do I use
setuptools or distutils? Why should I use twine? Do I put my projects
dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do I just get my
module up on PyPI? Wait, what is Warehouse?&lt;/p&gt;
&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In addition,
we’ll see how they all work together, what it takes to make them work, and
what the future has in store for Python packaging.&lt;/p&gt;
&lt;p&gt;## Who and Why&lt;/p&gt;
&lt;p&gt;This talk is for any Pythonista that has been confused by Python Packaging
(read: everyone).&lt;/p&gt;
&lt;p&gt;This talk requires that the audience has just the slightest familiarity with
how Python Packaging works – that you need to upload your source code, that
there are a few popular and familiar tools, and that they are all a little
confusing. Attendees do not need to be publishers of Python Packages but
likely will be people interested in publishing someday.&lt;/p&gt;
&lt;p&gt;After watching this talk, attendees should have a significant amount of
their confusion about the Python packaging ecosystem resolved, and should be
able to make informed, reasonable decisions when they want to publish a
package (without having to be told step by step instructions, or given
extremely opinionated advice).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html</guid></item><item><title>Python Grab Bag: A Set of Short Plays</title><link>https://pyvideo.org/pygotham-2018/python-grab-bag-a-set-of-short-plays.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A frenetic combination of educational and entertaining segments, as chosen
by the audience! In between segments, audience members will shout out
numbers from a menu, and we’ll perform the selected segment: it may be a
short monologue, it may be a play, it may be a physical demo, or it may be a
tiny traditional conference talk.&lt;/p&gt;
&lt;p&gt;Audience members should walk away with some additional understanding of the
history of Python, knowledge of some tools and libraries available in the
Python ecosystem, and some Python-related amusement.&lt;/p&gt;
&lt;p&gt;This talk is inspired by [the Neo-Futurists’ Infinite
Wrench](&lt;a class="reference external" href="http://www.nyneofuturists.org/"&gt;http://www.nyneofuturists.org/&lt;/a&gt;), a creative and energetic piece of
theater.&lt;/p&gt;
&lt;p&gt;The audience can select from these plays:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Unvarnished Truth&lt;/li&gt;
&lt;li&gt;&amp;lt;tt&amp;gt;from import import import&amp;lt;/tt&amp;gt;&lt;/li&gt;
&lt;li&gt;WHAT'S the DEAL with CLIENTS?&lt;/li&gt;
&lt;li&gt;A Play Entirely Full of Monty Python References&lt;/li&gt;
&lt;li&gt;A Proposal for Explaining PEPs&lt;/li&gt;
&lt;li&gt;GNU Mailman: A Pythonic Playlist&lt;/li&gt;
&lt;li&gt;Soup, Scrape, Sweep&lt;/li&gt;
&lt;li&gt;Generators: Taste the Freshness&lt;/li&gt;
&lt;li&gt;This Is How We Do It&lt;/li&gt;
&lt;li&gt;Cookie For Your Thoughts&lt;/li&gt;
&lt;li&gt;If Shakespeare Wrote Incident Reports&lt;/li&gt;
&lt;li&gt;Code Review: Fast Forward and Back&lt;/li&gt;
&lt;li&gt;When The Old Was New&lt;/li&gt;
&lt;li&gt;Things We Don't Say At The Daily Standup Meeting&lt;/li&gt;
&lt;li&gt;The Relief of Reuse (The Colorful &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Be A Better Bureaucrat (The Intellectual &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Speaking Python&lt;/li&gt;
&lt;li&gt;The End (Of 2.7) Is Near (feat. Jason as Guido van Rossum)&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Owen</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/python-grab-bag-a-set-of-short-plays.html</guid></item><item><title>Inside the Cheeseshop: How Python Packaging Works</title><link>https://pyvideo.org/scipy-2018/inside-the-cheeseshop-how-python-packaging-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound.
What is this &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file? What's the difference between wheels and
eggs? Do I use setuptools or distutils? Why should I use twine? Do I put
my projects dependencies in a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; or in &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;?
How do I just get my module up on PyPI? Should I use &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt;? Wait, what is Warehouse? This talk will identify the key
tools one might encounter when trying to distribute Python software,
what they are used for, why they exist, and their history (including
where their weird names come from). In addition, we'll see how they all
work together, what it takes to make them work, and what the future has
in store for Python packaging.Presenter(s): Speaker: Dustin Ingram,
Python Packaging Authority&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-11:scipy-2018/inside-the-cheeseshop-how-python-packaging-works.html</guid></item><item><title>Inside the Cheeseshop: How Python Packaging Works</title><link>https://pyvideo.org/pyohio-2018/inside-the-cheeseshop-how-python-packaging-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In
addition, we'll see how they all work together, what it takes to make
them work, and what the future has in store for Python packaging.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-28:pyohio-2018/inside-the-cheeseshop-how-python-packaging-works.html</guid></item><item><title>Saturday Lightning Talks</title><link>https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aly Sivji</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-28:pyohio-2018/saturday-lightning-talks.html</guid></item><item><title>Inside the Cheeseshop: How Python Packaging Works</title><link>https://pyvideo.org/pycon-us-2018/inside-the-cheeseshop-how-python-packaging-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is this &lt;cite&gt;setup.py&lt;/cite&gt; file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do I just get my module up on PyPI? Wait, what is Warehouse?&lt;/p&gt;
&lt;p&gt;This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/inside-the-cheeseshop-how-python-packaging-works.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/pytexas-2017/lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=00m00s"&gt;00:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Walker Hale&lt;/td&gt;
&lt;td&gt;Conda packages for bash scripts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=05m10s"&gt;05:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ricky Whitaker&lt;/td&gt;
&lt;td&gt;Becoming Comfortable in Discomfort: A few life lessons from quitting my job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=12m26s"&gt;12:26&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moshe Zadka&lt;/td&gt;
&lt;td&gt;Introducing NColony&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=17m05s"&gt;17:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Graham&lt;/td&gt;
&lt;td&gt;Safely using read replica with postgres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=24m12s"&gt;24:12&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;John Arbelaez&lt;/td&gt;
&lt;td&gt;The pyslackers community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=30m52s"&gt;30:52&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caroline D Dikibo&lt;/td&gt;
&lt;td&gt;OSS Project Awareness: Zulip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=39m22s"&gt;39:22&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dustin Ingram&lt;/td&gt;
&lt;td&gt;Good Hacker; Bad Hacker&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Walker Hale</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pytexas-2017/lightning-talks.html</guid><category>lightning talks</category></item><item><title>The Fastest FizzBuzz in the West</title><link>https://pyvideo.org/pytexas-2017/the-fastest-fizzbuzz-in-the-west.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pytexas-2017/the-fastest-fizzbuzz-in-the-west.html</guid></item><item><title>The Fastest FizzBuzz in the West: How to Make Your Own Programming Language</title><link>https://pyvideo.org/pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.'&lt;/p&gt;
&lt;p&gt;This talk is for anyone who has ever wondered how computers understand programming languages, or how to create your own programming language. It will be approachable for novices who have never studied programming language design, but will offer tools and concepts that will enable experienced users to actually build their own language, if they so desire.&lt;/p&gt;
&lt;p&gt;The audience should understand that a programming language consists of a set of symbols and patterns, and that an interpreter determines whether any given set of symbols and patterns is &amp;quot;valid&amp;quot; or &amp;quot;invalid&amp;quot;. The audience will NOT need prior experience or knowledge of advanced programming language concepts.&lt;/p&gt;
&lt;p&gt;After watching the talk, the novice users in the audience should gain an understanding of how a computer understands a programming language, including programming language concepts such as tokens, lexers, parsers and grammars.  Furthermore, experienced users should be able to implement a very simple DSL of their own using the tools discussed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html</guid></item><item><title>PEP 572: The Walrus Operator</title><link>https://pyvideo.org/philadelphia-python-users-group/pep-572-the-walrus-operator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Mon, 20 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-20:philadelphia-python-users-group/pep-572-the-walrus-operator.html</guid></item><item><title>Python Tips, Tricks and Hidden Features</title><link>https://pyvideo.org/philadelphia-python-users-group/python-tips-tricks-and-hidden-features.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;Python Tips, Tricks and Hidden Features&lt;/dt&gt;
&lt;dd&gt;(using type, collections, metaclasses and more)&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-19:philadelphia-python-users-group/python-tips-tricks-and-hidden-features.html</guid></item><item><title>The Fastest FizzBuzz in the West: Make Your Own Language with RPLY and RPython</title><link>https://pyvideo.org/pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very
Special Programming Language), a tongue-in-cheek domain-specific
language, which is particularly good for implementing FizzBuzz -- as
quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY
(but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a
restricted subset of the Python programming language. Along the way,
you'll learn about lexers, parsers, and grammars, and in the end, you'll
know how to build your own language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html</guid></item><item><title>wat‽ Mind-bending Edge Cases in Python</title><link>https://pyvideo.org/pygotham-2016/wat-mind-bending-edge-cases-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore ten of the most paradoxical and mind-numbing &amp;quot;Python wats&amp;quot; -- unique edge cases in the language. We'll even go so far as to re-implement the stdlib functions which cause them to understand just why they actually make sense.&lt;/p&gt;
&lt;p&gt;This is a fun and entertaining talk. In the end, attendees will gain insight into functions they use every day, including &lt;cite&gt;zip&lt;/cite&gt;, &lt;cite&gt;max&lt;/cite&gt;, &lt;cite&gt;min&lt;/cite&gt;, &lt;cite&gt;any&lt;/cite&gt;,  &lt;cite&gt;all&lt;/cite&gt;,  and more. Even the simplest of tools, when combined, can produce really weird results!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/wat-mind-bending-edge-cases-in-python.html</guid></item><item><title>Lightning Talks - 2016-06-01</title><link>https://pyvideo.org/pycon-us-2016/lightning-talks-2016-06-01.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hayley Denbraver</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-01:pycon-us-2016/lightning-talks-2016-06-01.html</guid><category>lightning talks</category></item><item><title>What Is and What Can Be: An Exploration from `type` to Metaclasses</title><link>https://pyvideo.org/pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Most of us use &lt;cite&gt;type&lt;/cite&gt; every day, but few can say they know it well. This talk explores &lt;cite&gt;type&lt;/cite&gt; and along the way, reveals how it relates to &lt;cite&gt;object&lt;/cite&gt;, &lt;cite&gt;class&lt;/cite&gt; and more, eventually arriving at deeper understanding of metaclasses in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html</guid><category>metaclasses</category><category>metaprogramming</category><category>types</category></item></channel></rss>