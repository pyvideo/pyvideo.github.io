<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_julien-dehos.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-06T00:00:00+00:00</updated><entry><title>L'écosystème Nix pour développer en Python, et au delà</title><link href="https://pyvideo.org/pycon-fr-2018/lecosysteme-nix-pour-developper-en-python-et-au-dela.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Julien Dehos</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/lecosysteme-nix-pour-developper-en-python-et-au-dela.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Un programme en Python est rarement script isolé effectuant quelques
interactions basiques avec le système exploitation. Il est fréquent
d'utiliser également des bibliothèques, des modules écrits dans d'autres
langages, des systèmes de base de données... Il en résulte de nombreuses
dépendances qui peuvent rendre un projet difficile à construire et à
déployer.&lt;/p&gt;
&lt;p&gt;L'écosystème Nix permet de gérer ce genre de dépendances efficacement.
Il complète ou remplace certains outils classiques de Python mais
également d'autres langages, fournissant ainsi un système commun pour
construire et déployer des packages et des services.&lt;/p&gt;
&lt;p&gt;Dans cette présentation, accessible à tous les niveaux, je rappellerai
quelques outils de packaging classiques en Python, puis je présenterai
l'écosystème Nix et montrerai comment l'utiliser pour développer,
packager et déployer une application web Python comportant un module C++
et une base de données.&lt;/p&gt;
</summary></entry></feed>