<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_adam-jorgensen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-05T00:00:00+00:00</updated><entry><title>Python in the context of a Start-up: The Good, The Bad and the Ugly</title><link href="https://pyvideo.org/pycon-za-2014/python-in-the-context-of-a-start-up-the-good-th.html" rel="alternate"></link><published>2014-10-03T00:00:00+00:00</published><updated>2014-10-03T00:00:00+00:00</updated><author><name>Adam Jorgensen</name></author><id>tag:pyvideo.org,2014-10-03:pycon-za-2014/python-in-the-context-of-a-start-up-the-good-th.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python is great language for developing software that works well in a
short time-span. The ability to produce code quickly that is of a
reasonable quality is very important in a work environment where
productivity is of extreme importance. It would thus seem to be very
well suited for usage in a start-up environment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is great language for developing software that works well in a
short time-span. The ability to produce code quickly that is of a
reasonable quality is very important in a work environment where
productivity is of extreme importance. It would thus seem to be very
well suited for usage in a start-up environment. Is this really the case
though? Here at Springlab we've been using Python to develop our
product, an online platform for locating and booking with medical
practitioners, since day one. Along the way we've written a lot of code,
used a variety of frameworks, libraries and toolkits while experimenting
with various approaches to solving the problems we've encountered. Of
key importance to us has been balancing the need to produce code that
works now against the desire to develop something that we won't become a
serious time-sink in the future. From our position it is thus possible
to go into a bit of detail about the pros, cons and extremely sharp
corners encountered using Python in the context of a small start-up
environment where time is of the essence and there is a lot of pressure
to produce a quality product as quickly AND as well as possibly. My aim
with this talk is to give the listener an idea of what kind of
experience to expect when using Python in an environment like ours and
also to hopefully share some tips that will help others avoid some of
the problems we've run into. I hope to cover issues on the subjects of
back-end development involving Django + Tastypie, front-end development
with Flask, client-side development involving JavaScript as well as
touching on the subject of integrating with other tools and pieces of
software.&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2014"></category></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2014/lightning-talks-17.html" rel="alternate"></link><published>2014-10-02T00:00:00+00:00</published><updated>2014-10-02T00:00:00+00:00</updated><author><name>Mike Jones</name></author><id>tag:pyvideo.org,2014-10-02:pycon-za-2014/lightning-talks-17.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks are fun, short, five-minute (or less) talks. Ideally
each talk should make a single point, often in a fun, quirky or
over-the-top way.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;Launch to Borderline Zombie in a Year by Mike Jones&lt;/li&gt;
&lt;li&gt;Why you're dumb if you are doing a Python GUI in anything other than
Kivy by Richard Larkin&lt;/li&gt;
&lt;li&gt;PyPy by Adam Jorgensen (slides)&lt;/li&gt;
&lt;li&gt;Sonic Pi by Simon de Haan&lt;/li&gt;
&lt;li&gt;The challenge of mathematical formula markup for African feature
phones by Jonathan Endersby&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="lightning talks"></category><category term="kivy"></category><category term="pyconza"></category><category term="pyconza2014"></category></entry><entry><title>Friday Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2015/friday-lightning-talks.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Adam Jorgensen</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/friday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h0m0s"&gt;(0:00:00)&lt;/a&gt; &lt;strong&gt;Using Odo to
load data&lt;/strong&gt; by Tobias Brandt&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h5m23s"&gt;(0:05:23)&lt;/a&gt; &lt;strong&gt;Sh&lt;/strong&gt; by
Adrianna Pi≈Ñska&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h8m44s"&gt;(0:08:44)&lt;/a&gt; &lt;strong&gt;Pygame Zero&lt;/strong&gt;
by Neil Muller&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h11m57s"&gt;(0:11:57)&lt;/a&gt; &lt;strong&gt;How not to
hate Javascript&lt;/strong&gt; by Adam Jorgensen&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h16m28s"&gt;(0:16:28)&lt;/a&gt; &lt;strong&gt;Testing code
examples from your slides&lt;/strong&gt; by Jeremy Thurgood&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="Room 215"></category></entry><entry><title>Distributed Applications in Python: Celery vs Crossbar</title><link href="https://pyvideo.org/pycon-za-2016/distributed-applications-in-python-celery-vs-crossbar.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Adam Jorgensen</name></author><id>tag:pyvideo.org,2016-10-07:pycon-za-2016/distributed-applications-in-python-celery-vs-crossbar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will discuss two specific methods of implementing
distributed applications in Python. Distributed applications allow one
to improve resiliency and performance, although this can come at the
cost of increased complexity. The trick is to apply a distributed
application framework in situations where that complexity is less
significant than the benefits it provides.&lt;/p&gt;
&lt;p&gt;Of the two systems I will be covering, Celery is by far the better known
and more mature, with version 0.1.0 having been released in 2009. Celery
is currently at version 3.1.23 and has come a long way in that time.
Today it provides a stable and mature distributed task queue with a
focus on real-time execution although it is also capable of cron-like
scheduled operations. Celery is extremely flexible and configurable,
although this comes at the cost of some complexity. Thankfully the
documentation is rock solid and the community large.&lt;/p&gt;
&lt;p&gt;Crossbar is a newer project that was first released in 2013. Compared to
Celery it's less well known, has a smaller community and the
documentation is definitely lacking in terms of quality and robustness.
Despite these flaws Crossbar is a very exciting project that is very
pleasant to work with once you've gotten past the initial learning
curve. While Celery provides a distributed task queue, Crossbar
functions as a WAMP router. WAMP is a routed messaging protocol built on
WebSockets that provides RPC and PubSub. As such it targets a slightly
different space from Celery. That said, there is enough overlap for
discussion.&lt;/p&gt;
&lt;p&gt;Picking a distributed application framework can be tricky as there are a
variety of options available. My aim with this talk is to compare and
contrast two specific frameworks that I have some experience with,
illustrating their similarities, differences, strengths and weaknesses.
I will cover some basic examples for each framework and hopefully
provide the audience with a better idea of why they might choose to use
one or the other (or even both!).&lt;/p&gt;
&lt;p&gt;There is no specific audience focus for this talk as I imagine
distributed applications can be of benefit to many different use-cases.
With that said, my background is in web development and hence my
discussion of the two frameworks in question will probably draw on that
experience. Regardless, I think that anyone with an interest in
distributed applications could benefit from this talk.&lt;/p&gt;
</summary></entry><entry><title>Experiences in Asynchronous Application Development with Crossbar.io</title><link href="https://pyvideo.org/pycon-za-2017/experiences-in-asynchronous-application-development-with-crossbario.html" rel="alternate"></link><published>2017-10-05T00:00:00+00:00</published><updated>2017-10-05T00:00:00+00:00</updated><author><name>Adam Jorgensen</name></author><id>tag:pyvideo.org,2017-10-05:pycon-za-2017/experiences-in-asynchronous-application-development-with-crossbario.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently at OpenDNA we've been rebuilding one of our core internal
applications from the ground-up. Early on we decided that we wanted
to make the new system completely asynchronous, leveraging the
ability of modern browsers to communicate with the server in a
bi-directional fashion unconstrained by the usual flow of a RESTful
application.&lt;/p&gt;
&lt;p&gt;There are a number of ways to implement this kind of application in
Python but only one of them (in our humble opinion) is really worth
investing time in: Crossbar.io&lt;/p&gt;
&lt;p&gt;In this talk I will cover the process of developing a purely
asynchronous application using Crossbar from top to bottom, detailing
everything from high-level design considerations to low-level code
decisions to potential pitfalls and how to avoid them.&lt;/p&gt;
&lt;p&gt;The aim: To convince you that your next application should be built
using Crossbar!&lt;/p&gt;
&lt;p&gt;This talk should be suitable for any audience but will be of particular
interest to developers looking for a way to leverage WebSockets and/or
WAMP to develop highly or even purely asynchronous applications.&lt;/p&gt;
</summary></entry></feed>