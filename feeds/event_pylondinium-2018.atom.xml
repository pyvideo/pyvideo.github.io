<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pylondinium-2018.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-10T00:00:00+00:00</updated><entry><title>Can you boost your acceptance tests?</title><link href="https://pyvideo.org/pylondinium-2018/can-you-boost-your-acceptance-tests.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Donal Mee</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/can-you-boost-your-acceptance-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all want to know whether our product works for the user. In this talk, I'll show you a framework for developing system-wide user-level automated-tests using Robot Framework with more-exhaustive test inputs that to Hypothesis. It won't fine all your bugs, but it'll certainly help.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Dot Dash Dash</title><link href="https://pyvideo.org/pylondinium-2018/dot-dash-dash.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Gordon McQuarrie</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/dot-dash-dash.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the Python's most powerful mechanisms, attribute access control, is not widely understood. The talk will explain the opportunities that users have to take advantage of the mechanism to write safer, more efficient and generally more effective code.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Citizen Science with Python</title><link href="https://pyvideo.org/pylondinium-2018/keynote-citizen-science-with-python.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Ian Ozsvald</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/keynote-citizen-science-with-python.html</id><summary type="html"></summary></entry><entry><title>Keynote: Python 3: 10 years later</title><link href="https://pyvideo.org/pylondinium-2018/keynote-python-3-10-years-later.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/keynote-python-3-10-years-later.html</id><summary type="html"></summary></entry><entry><title>List me your virtues</title><link href="https://pyvideo.org/pylondinium-2018/list-me-your-virtues.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Maite Giménez</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/list-me-your-virtues.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the first data structure that comes to your mind? Lists of course! But, Do we know how those lovely lists work? Is there any difference between a list and an array? What algorithm order Python's list? So many questions for a tiny data structure so widely used. Let's learn together about it!&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>MicroPython used in industrial applications</title><link href="https://pyvideo.org/pylondinium-2018/micropython-used-in-industrial-applications.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Christine Spindler</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/micropython-used-in-industrial-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython has been around for almost five years and it's used by Makers, Educators and Software Developers. Since 2015 the ESA is funding further development to make MicroPython more robust for critical embedded systems. Learn how MicroPython is used to make devices reliable and energy efficient.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Secret Histories: The Women of Python</title><link href="https://pyvideo.org/pylondinium-2018/secret-histories-the-women-of-python.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Elissa Shevinsky</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/secret-histories-the-women-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know the role women have played in building the Python community worldwide? Elissa Shevinsky interviewed both established and emerging leaders in the Python community, and will share their insights on what is most exciting in Python in 2018. This is an opportunity to hear insights from other community members, and to acknowledge their contributions.&lt;/p&gt;
&lt;p&gt;Shevinsky is documenting the contributions of women and under-represented people in the Python community, and continuously updating this talk as new people and interviews are added to the slides. Shevinsky is Editor of the anthology &amp;quot;Lean Out: The Struggle for Gender Equality in Tech and Startup Culture.&amp;quot;&lt;/p&gt;
</summary></entry><entry><title>The 8 things that happen at the "."</title><link href="https://pyvideo.org/pylondinium-2018/the-8-things-that-happen-at-the.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/the-8-things-that-happen-at-the.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We rarely think about the dot &amp;quot;.&amp;quot; between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python. This talk will include the commonly known functions, (dict, getattr, etc), but especially focus on the Descriptor Protocol.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>The snake and the blackhole</title><link href="https://pyvideo.org/pylondinium-2018/the-snake-and-the-blackhole.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Pablo Galindo</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/the-snake-and-the-blackhole.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will learn how to construct a general relativity raytracer in Python. Our goal will be to obtain synthetic images of black holes (similar to those observed in the movie Interstellar) by recreating how the light propagates in an environment of extreme gravity, such as a rotating black hole. Using this as an excuse, we will analyse different approaches to optimise our code as much as possible using all the tools available in the Python ecosystem. We will also learn how to construct efficient scientific simulations in Python that can match the speed of any other programming language.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Tuning the knobs of neural networks using Bayesian Optimization</title><link href="https://pyvideo.org/pylondinium-2018/tuning-the-knobs-of-neural-networks-using-bayesian-optimization.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Niall Turbitt</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/tuning-the-knobs-of-neural-networks-using-bayesian-optimization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Choosing the best hyperparameters for machine learning models is sometimes considered as more of an art than science. For most machine learning practitioners, mastering this art of tuning hyperparameters requires not only a competent background in machine learning algorithms, but also extensive experience working with real-world datasets. Most machine learning algorithms present a variety of hyperparameters to tune, and in the case of neural networks and deep learning models, the list of potential hyperparameters to adjust can increase exponentially. As such, deep learning models are notoriously tricky to optimally tune, where thorough exploration of architectures and hyperparameters is imperative.&lt;/p&gt;
&lt;p&gt;Grid search and randomized search methodologies are traditionally used to tune model hyperparameters, however they are costly approaches and incorporate no notion of how trials of previous hyperparameters have performed. Bayesian Optimization is one such approach that forms knowledge about the relation between the hyperparameter settings and model performance in order to make a smarter choice for future parameter settings.&lt;/p&gt;
&lt;p&gt;Using Zalando’s Fashion MNIST dataset, which comprises of 60,000 clothing images, I present the use of Bayesian Optimization to tune the hyperparameters of a convolutional neural network in Keras.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Types: what they are, why to care, and how to use them in Python</title><link href="https://pyvideo.org/pylondinium-2018/types-what-they-are-why-to-care-and-how-to-use-them-in-python.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Oliver Ford</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/types-what-they-are-why-to-care-and-how-to-use-them-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type systems are among the hottest toys in town, with a new typed language transpiling to JavaScript every week. But isn't that incompatible with Python's fast, productive, dynamic typing?&lt;/p&gt;
&lt;p&gt;In this talk, I'll introduce these things called 'types', and motivate and demonstrate their use in Python.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Working with Time Zones: Everything You Wish You Didn't Need to Know</title><link href="https://pyvideo.org/pylondinium-2018/working-with-time-zones-everything-you-wish-you-didnt-need-to-know.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/working-with-time-zones-everything-you-wish-you-didnt-need-to-know.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Time zones are complicated, but they are a fact of engineering life. Time zones have skipped entire days and repeated others. There are time zones that switch to DST twice per year. But not necessarily every year. In Python it's even possible to create datetimes with non-transitive equality (&lt;tt class="docutils literal"&gt;a == b&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;b == c&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;a != c&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;In this talk you'll learn about Python's time zone model and other concepts critical to avoiding datetime troubles. Using &lt;tt class="docutils literal"&gt;dateutil&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pytz&lt;/tt&gt; as examples, this talk covers how to deal with ambiguous and imaginary times, datetime arithmetic around a Daylight Saving Time transition, and datetime's new fold attribute, introduced in Python 3.6 ([PEP 495](&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0495/"&gt;https://www.python.org/dev/peps/pep-0495/&lt;/a&gt;)).&lt;/p&gt;
</summary></entry><entry><title>Deep Learning with Keras</title><link href="https://pyvideo.org/pylondinium-2018/deep-learning-with-keras.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/deep-learning-with-keras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computers are getting closer to speak like humans. But can we even make them speak in particular ways, like as Trump or Shakespeare? In this hands on talk we will see how this is possible with the latest deep learning techniques combined with word embeddings and other advanced NLP technique.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Delve into Art and Creativity with Python</title><link href="https://pyvideo.org/pylondinium-2018/delve-into-art-and-creativity-with-python.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Aparna Krishnakumar</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/delve-into-art-and-creativity-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Around 2 million years ago, the primitive man started on the journey of evolution. They made tools out of stones, houses out of wood, food out of the wilderness. They imagined, innovated and created. Suddenly there was civilization, there was commerce. People were interested in more than just day-to-day functioning but also in something called art. There were paintings, there was music, dance, drama.&lt;/p&gt;
&lt;p&gt;Fast forward to the 1990’s with the onset of technology and the world-wide-web. From then to now, we have had Wifi, Google, Artificial Intelligence, AR/VR, Cryptocurrency. As Technology is getting more exciting, the misconception about it making humans a dull, monotonous species is also increasing. Instead, technology serves to be the medium through which creative thoughts are made into a reality.&lt;/p&gt;
&lt;p&gt;This talk aims to inspire both novices and professionals in the field to create. It will cover the unexplored applications of python programming in art and creativity by harnessing simple programming and mathematical techniques as well as by creating Artificially Intelligent Systems. The talk will cover a wide range of examples from bringing past artists back to life, integrating the cultures of the world with programming as well as examining real-life applications of artistically aimed python programming in music videos, museums and much more. Moreover, it will also cover the speaker’s role in the field and new, exciting areas to explore and prospective problems to solve to make humans a more creatively able and remarkable species.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://pyvideo.org/pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There's a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from 'an integer' to 'matching this regex' to 'Django model'; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself!&lt;/p&gt;
</summary></entry><entry><title>GraphQL in Python</title><link href="https://pyvideo.org/pylondinium-2018/graphql-in-python.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Alex Chamberlain</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/graphql-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will discuss what GraphQL is, including the basic semantics and syntax. We'll have a whistle-stop tour of the Python libraries available, as well as a couple of illustrative examples.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Introduction to citizen data science with Home-Assistant</title><link href="https://pyvideo.org/pylondinium-2018/introduction-to-citizen-data-science-with-home-assistant.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Oliver Crask</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/introduction-to-citizen-data-science-with-home-assistant.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Home-Assistant is an open-source python-3 platform home automation that is ideal for gathering, analysing and acting on data from a wide range of sources. Citizen-scientists can use Home-Assistant as their data backend, allowing them to integrate their project into their daily life.&lt;/p&gt;
</summary></entry><entry><title>Keynote: The naïve programmer</title><link href="https://pyvideo.org/pylondinium-2018/keynote-the-naive-programmer.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/keynote-the-naive-programmer.html</id><summary type="html"></summary></entry><entry><title>Keynote: What lies ahead?</title><link href="https://pyvideo.org/pylondinium-2018/keynote-what-lies-ahead.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/keynote-what-lies-ahead.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Load test your backend with locust.io</title><link href="https://pyvideo.org/pylondinium-2018/load-test-your-backend-with-locustio.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Ivan Matellanes</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/load-test-your-backend-with-locustio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is your capacity? Does your backend scale? Are you on the edge of an outage? Find out with locust.io, a Python based load testing tool. Locust.io is open source, battle-tested, extensible and can help you sleep better at night ahead of a big product release.&lt;/p&gt;
&lt;p&gt;Video copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Micropython Gotchas</title><link href="https://pyvideo.org/pylondinium-2018/micropython-gotchas.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Michał Gałka</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/micropython-gotchas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all somehow feel that MicroPython is not quite the Python we know. During the talk I'll show you what the &amp;quot;not quite&amp;quot; actually means. I'll present a few cases I stumbled upon when connecting a small thermal printer to different MicroPython powered boards.&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Opening</title><link href="https://pyvideo.org/pylondinium-2018/opening.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/opening.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Opening ceremony.&lt;/p&gt;
</summary></entry><entry><title>Party Like it's ANSI 1999</title><link href="https://pyvideo.org/pylondinium-2018/party-like-its-ansi-1999.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Huss EL-Sheikh</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/party-like-its-ansi-1999.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQL is back! Well it never went away. Relational database systems development is accelerating more so than ever before. To keep up and access the latest features from your application, you have to write SQL directly, bypassing ORMs. But how do you do that without filling your code with SQL strings?&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Practical Python Design Patterns</title><link href="https://pyvideo.org/pylondinium-2018/practical-python-design-patterns.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Ramanathan Ramakrishnamoorthy</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/practical-python-design-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any production application requires good use of design patterns and this talk will be about popular design patterns/choices and their implementation. The talk will also cover basics of metaclasses and be using metaclasses in some design choices practically.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pylondinium-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/saturday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lighting talks and Saturday wrap up.&lt;/p&gt;
</summary></entry><entry><title>Snow globe intruder alert system</title><link href="https://pyvideo.org/pylondinium-2018/snow-globe-intruder-alert-system.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Marwan Al-Sabbagh</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/snow-globe-intruder-alert-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build a snow globe that sounds an alarm and flashes a red alert when intruders are about. Me and my six year old daughter designed and built this project to have fun with friends and learn a bit about computers along the way.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>The Jupyter Interactive Widgets Ecosystem</title><link href="https://pyvideo.org/pylondinium-2018/the-jupyter-interactive-widgets-ecosystem.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Sylvain Corlay</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/the-jupyter-interactive-widgets-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we present a general overview of the Jupyter interactive widgets framework and the main interactive visualization libraries that were built upon it. Then we dive into the latest developments by the Jupyter team, including the JupyterLab integration, the use of widgets outside of the notebook, and the support for other languages.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Type hints inside the snake pit</title><link href="https://pyvideo.org/pylondinium-2018/type-hints-inside-the-snake-pit.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/type-hints-inside-the-snake-pit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to re-use type hints for much more than just type checking.&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>Why should kids learn to code and how can we help?</title><link href="https://pyvideo.org/pylondinium-2018/why-should-kids-learn-to-code-and-how-can-we-help.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Cat Lamin</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/why-should-kids-learn-to-code-and-how-can-we-help.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the 21st Century, computers are ubiqitous, but too many young people are passive consumers of technology. We need to shift understanding from consumers, to users, to creators of content in order to prepare young people for the workplace.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry></feed>