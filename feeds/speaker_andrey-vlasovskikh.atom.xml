<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrey-vlasovskikh.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>The Story of Features Coming in Python 3.8 and Beyond</title><link href="https://pyvideo.org/europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's coming in Python 3.8? You can learn it by yourself by reading an
excellent document [What's New in Python 3.8][1]. I'm not going to
retell this document. Instead I'll focus on things barely described
there or not mentioned at all:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why will the new features appear in Python 3.8 and what's the story
behind them?&lt;/li&gt;
&lt;li&gt;What is being discussed and developed now, but won't appear in Python
3.8?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll share the news I learned at PyCon 2019 from the talks and
discussions with Python core developers. I'll mention the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New syntax: &lt;tt class="docutils literal"&gt;x := expr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f(...,&lt;/span&gt; /, &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f'{expr=}'&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;New types: &lt;tt class="docutils literal"&gt;Literal&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Final&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;TypedDict&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Future features of typing and async/await&lt;/li&gt;
&lt;li&gt;New approaches to optimizing Python: sub-interpreters, mypyc&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Compiler and Interpreters"></category><category term="New Features"></category><category term="Python 3"></category><category term="Type-Hinting"></category></entry><entry><title>What Python Can Do with Microcontrollers</title><link href="https://pyvideo.org/pycon-belarus-2018/what-python-can-do-with-microcontrollers.html" rel="alternate"></link><published>2018-02-24T00:00:00+00:00</published><updated>2018-02-24T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2018-02-24:pycon-belarus-2018/what-python-can-do-with-microcontrollers.html</id><summary type="html"></summary></entry><entry><title>Static analysis of Python</title><link href="https://pyvideo.org/europython-2013/static-analysis-of-python.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/static-analysis-of-python.html</id><summary type="html"></summary><category term="text-editors"></category><category term="static-analysis"></category><category term="productivity"></category></entry><entry><title>What makes coding for MicroPython different?</title><link href="https://pyvideo.org/europython-2018/what-makes-coding-for-micropython-different.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/what-makes-coding-for-micropython-different.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A microcontroller unit is a CPU, memory modules, and I/O devices on a
single chip. There are tens of billions of microcontrollers in world:
they are everywhere from watches to cars. Developers program them mostly
in C, since their tiny hardware resources make it very hard to use
higher-level langauges such as Python. In 2014 the MicroPython project
was started with the goal of making it possible to program
microcontrollers in Python.&lt;/p&gt;
&lt;p&gt;Was it hard to make Python work on a device with only 16 KB of RAM? Is
MicroPython a Python dialect or is it a different language? I’ll start
with the most important optimizations and the key differences in the
language implementation to give you an idea of what MicroPython really
is.&lt;/p&gt;
&lt;p&gt;Most of us are not contributors to MicroPython though and it’s much more
important for us to understand how Python coding for microcontrollers is
different from, say, web development or scripting. What do you need to
learn in order to program your mictrocontroller-based IoT devices? I’ll
talk about several traits of Python coding for microcontrollers that
make it different, but exciting to learn.&lt;/p&gt;
</summary></entry><entry><title>Panel Discussion: What is Static Typing in Python?</title><link href="https://pyvideo.org/pybay-2017/panel-discussion-what-is-static-typing-in-python.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/panel-discussion-what-is-static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This panel discussion was MC by Daniel Pyrathon and held as part of the opening night at PyBay, SF Bay Area's regional Python Conference, on Friday, August 11, 2017.  For more information on PyBay, visit &lt;a class="reference external" href="https://pybay.com"&gt;https://pybay.com&lt;/a&gt;, subscribe to be notified of upcoming conferences.&lt;/p&gt;
&lt;p&gt;What is static typing in Python?&lt;/p&gt;
&lt;p&gt;Python added support for annotation as part of function definitions with PEP 3107. PEP 484 later provided a standard syntax for type annotations, bringing static analysis, runtime type checking, and faster refactoring to Python. Since Python is a dynamic programming language, type hints don’t have any influence at runtime, but they allow certain tools to save time with fewer bugs. For example, IDEs such as PyCharm are able to perform safer refactoring, and static analysis tools such as Mypy can perform further type checks during build phases.&lt;/p&gt;
&lt;p&gt;So far, static typing has been adopted by some renowned open source projects such as Zulip and is used at companies such as Google, Instagram, Lyft, and Quora.&lt;/p&gt;
&lt;p&gt;What will we be speaking about during this panel?&lt;/p&gt;
&lt;p&gt;We’ll be making this panel discussion accessible to everyone, so expect the panel to start with an introduction to static typing and then go deeper into best practices, support, and experience from open source project maintainers and companies. Since this feature has been a topic of substantial debate in the community, we’ll be discussing not only the pros but also the cons of this feature. Indeed, there are situations where type hinting may do more harm than good, and our panelists will be sharing with us their words of advice on this topic.&lt;/p&gt;
&lt;p&gt;Why might this panel discussion be interesting to you?&lt;/p&gt;
&lt;p&gt;Type hints are one of the new additions to the Python syntax may drastically increase the speed at which you program. Beginners will learn more about where the language development is heading.
Open source project maintainers and contributors will learn the tooling, support, and best “getting started” advice from our expert panelists.&lt;/p&gt;
&lt;p&gt;Project managers, CTOs, and engineers will learn how type hints can make their team more productive. We know companies spend a huge amount of money recruiting and sourcing engineers, and I’m sure they would do everything possible to make their onboarding experience more enjoyable, easier and faster since employees can expect to be more productive with an annotated codebase.
This panel will not only help developers learn more about static typing, but also help identify areas where static type checking isn’t doing a good job, and learn how we can all improve it together.&lt;/p&gt;
&lt;p&gt;Our panelists
And now for the part that I’m most proud of, our list of panelists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Łukasz Langa&lt;/p&gt;
&lt;p&gt;Łukasz is one of the PEP484 authors, a Python core developer, and currently a Production Engineer at Facebook. Łukasz has also been using mypy at work and I imagine has also been part of the latest push to port Instagram’s code base to Python 3! Łukasz is a long-time Python contributor, was a mentor for the Python Software Foundation for Google Summer of Code, and has spoken about Python around the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;Jelle is a Staff Engineer at Quora, where he works on infrastructure, internationalization, development tools, and ML infrastructure. He’s a contributor to mypy and has also used mypy at Quora. Jelle will offer his perspective on advocating for static type checking at a great engineering organization like Quora and will also be talking about typeshed, a project that hosts type stubs for the standard library and major third-party libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ethan Smith&lt;/p&gt;
&lt;p&gt;Ethan has been involved with mypy for a while and has been working on typical, a project that uses the frame evaluation API (PEP 523) to dynamically generate stubs. While Ethan is still in college, he has been doing some amazing work to improve the support of type hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Andrey Vlasovskikh&lt;/p&gt;
&lt;p&gt;Andrey is the PyCharm community lead and maintainer of IdeaVim. PyCharm is used by many Python developers and its support for type checking “out of the box” makes it easy for developers to adopt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Matthias Kramm&lt;/p&gt;
&lt;p&gt;Matthias is the author of pytype, one of the maintainers of typeshed, and has been working on Python static analysis tools for Google. Pytype is used in a few hundred projects at Google, including YouTube! Matthias will give us great insight into adopting type checking “at scale”!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="panel"></category><category term="static-typing"></category></entry><entry><title>What Python can do with microcontrollers</title><link href="https://pyvideo.org/pycon-russia-2017/what-python-can-do-with-microcontrollers.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/what-python-can-do-with-microcontrollers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Микроконтроллер — это процессор, память и ввод-вывод, размещённые в одном чипе. Их в мире десятки миллиардов штук: микроконтроллеры везде от часов до автомобилей. Софт для их крохотных ресурсов пишут в основном на C, а таким языкам, как Python, тут делать нечего. Точнее, так было до 2014 года, когда появился MicroPython — реализация Python для микроконтроллеров.&lt;/p&gt;
&lt;p&gt;Как вообще удалось заставить Python работать на чём-то с всего лишь 16 килобайт памяти? Сильно ли пришлось урезать для этого язык? (спойлер: нет!) Что интересного можно делать с железками и MicroPython? Разные сенсоры, акселерометры, светодиоды, моторчики — вот это всё.&lt;/p&gt;
</summary></entry><entry><title>Динамические хитрости в Python</title><link href="https://pyvideo.org/pycon-ukraine-2012/dinamicheskie-khitrosti-v-python.html" rel="alternate"></link><published>2012-10-20T00:00:00+00:00</published><updated>2012-10-20T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2012-10-20:pycon-ukraine-2012/dinamicheskie-khitrosti-v-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python — довольно динамический язык. В нём используется динамическая типизация, присутствуют средства интроспекции. Он позволяет получать доступ к таблицам локальных и глобальных переменных, стеку вызовов, настраивать механизмы импортов, расширять модули и объекты во время выполнения программы. По имеющимся динамическим средствам Python близок к языку Ruby, известному широким использованием monkey patching и других динамических приёмов. Но культура программирования на Python, кратко описанная в The Zen of Python, не поощряет повседневное применение динамических хитростей, оставляя их для случаев, где это действительно необходимо. В докладе будет рассморено, что позволяют сделать динамические особенности языка Python, в каких случаях их применение уместно и когда от их использования лучше воздержаться согласно The Zen of Python.&lt;/p&gt;
</summary></entry><entry><title>Pycon JP Opening〜Keynote 2016-09-22</title><link href="https://pyvideo.org/pycon-japan-2016/pycon-jp-opening-keynote-2016-09-22.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/pycon-jp-opening-keynote-2016-09-22.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote (10:15)&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>How you can benefit from type hints</title><link href="https://pyvideo.org/europython-2015/how-you-can-benefit-from-type-hints.html" rel="alternate"></link><published>2015-08-02T00:00:00+00:00</published><updated>2015-08-02T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2015-08-02:europython-2015/how-you-can-benefit-from-type-hints.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrey Vlasovskikh - How you can benefit from type hints
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;PEP 484 introduces type hints for Python 3. Type hints can increase
readability of our code for both humans and tools and lead to better
and safer outcomes. And we'll prove it in this talk!&lt;/p&gt;
&lt;p&gt;We're going to take a closer look at type hints, see practical
examples of where they can be used and the value they provide.  We'll
see that simple class types and built-in collection types are often
enough for our public API's. We'll also discuss how you can benefit
from type hinting stubs for third-party libraries and briefly cover
more advanced scenarios like generic types.&lt;/p&gt;
</summary></entry></feed>