<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 16 Oct 2013 00:00:00 +0000</lastBuildDate><item><title>The Lazy Dev's Guide to Testing Your Web API</title><link>https://pyvideo.org/pycon-au-2012/the-lazy-devs-guide-to-testing-your-web-api.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Do you enjoy writing test cases for your web application? If so then
this may not be the talk for you. I'm going to show you how to make a
single test suite perform triple testing duty, so you can get on with
writing the fun stuff.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you enjoy writing test cases for your web application? If so then
this may not be the talk for you. I'm going to show you how to make a
single test suite perform triple testing duty, so you can get on with
writing the fun stuff.&lt;/p&gt;
&lt;p&gt;First, I'll show you how to use WebTest to construct a simple functional
testsuite for your application. By running in-process against a WSGI
callable, the tests can be fast and light enough to form part of your
regularly-executed suite.&lt;/p&gt;
&lt;p&gt;Second, we'll use WSGIProxy to turn this into a deployment/acceptance
test script that you can point at a real live server to verify its
behaviour. Run this after every deployment to make sure you haven't
broken something in the wild.&lt;/p&gt;
&lt;p&gt;Finally, we'll connect the suite to FunkLoad and pummel the server with
a distributed barrage of tests, to see how it copes under pressure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Kelly</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-21:pycon-au-2012/the-lazy-devs-guide-to-testing-your-web-api.html</guid><category>WebTest</category></item><item><title>Schlangenhochzeit in der Wolke</title><link>https://pyvideo.org/pycon-de-2013/schlangenhochzeit-in-der-wolke.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Googles Appengine steht für hochskalierbare Anwendungen in der Cloud.
Locandy ist unser Startup für mobile Location based Games.&lt;/p&gt;
&lt;p&gt;Auf der Cloud-Platform mit ihrer sehr restriktiven Python-Umgebung haben
wir das Portal für Spieler, Autoren und Business Kunden umgesetzt.
Browser, Mobile-App und PDF-Server werden damit bedient.&lt;/p&gt;
&lt;p&gt;Dabei ist nicht alles so rund gelaufen, wie wir es gerne gehabt hätten.
Die Probleme wurden gelöst - dank Python mit seinem starken
Werkzeugkasten.&lt;/p&gt;
&lt;p&gt;Der Vortrag geht kurz auf die Anforderungen ein, zeigt auf welche
Probleme es gab und wie wir sie gelöst haben. In einem Github Repository
stelle ich ein Buildout inkl. kleiner Beispielapplikation mit den
meisten dieser Lösungen zur Verfügung.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jens Klein</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/schlangenhochzeit-in-der-wolke.html</guid><category>appengine</category><category>buildout</category><category>cloud</category><category>gruntjs</category><category>mobile</category><category>plone.testing</category><category>pyramid</category><category>testlayers</category><category>velruse</category><category>WebTest</category></item></channel></rss>