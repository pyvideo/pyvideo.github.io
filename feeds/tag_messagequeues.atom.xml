<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_messagequeues.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Communicating Between Microservices</title><link href="https://pyvideo.org/pycon-italia-2019/communicating-between-microservices.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/communicating-between-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are not just a bunch of little apps, it’s a connected
ecosystem.&lt;/p&gt;
&lt;p&gt;Within a monolith, code modules invoke each other simply by using
language- level function calls, but in a microservice architecture,
communication between components does not come for free anymore.
Choosing not just a protocol, but a paradigm for communication between
endpoints is considered the most tricky issue of microservice approach.&lt;/p&gt;
&lt;p&gt;Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1638"&gt;https://python.it/feedback-1638&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="MessageQueues"></category><category term="microservices"></category><category term="HTTP"></category><category term="communication"></category><category term="architecture"></category><category term="websockets"></category></entry><entry><title>Messaging for the Internet of Things</title><link href="https://pyvideo.org/europython-2013/messaging-for-the-internet-of-things.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/messaging-for-the-internet-of-things.html</id><summary type="html"></summary><category term="MessageQueues"></category><category term="networking"></category><category term="arduino"></category><category term="raspberrypi"></category><category term="sensor networks"></category><category term="healthcare"></category><category term="android"></category></entry><entry><title>Marconi: Queuing and Notification service for OpenStack</title><link href="https://pyvideo.org/europython-2013/marconi-queuing-and-notification-service-for-openstack.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Flavio Percoco</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/marconi-queuing-and-notification-service-for-openstack.html</id><summary type="html"></summary><category term="MessageQueues"></category><category term="WSGI"></category><category term="mongodb"></category><category term="REST"></category><category term="tdd"></category><category term="application-design"></category><category term="architecture"></category><category term="cloud"></category></entry><entry><title>Quando Django incontra PostgreSQL!</title><link href="https://pyvideo.org/pycon-italia-2018/quando-django-incontra-postgresql.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Leonardo Cecchi</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/quando-django-incontra-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vi siete mai chiesti cosa succede quando due strumenti potenti si
completano?&lt;/p&gt;
&lt;p&gt;Vedremo come ottenere un ambiente di sviluppo molto veloce e come
analizzare i tempi delle query in produzione per isolare i colli di
bottiglia. Analizzeremo cosa ci offre Django per gestire i pool di
connessioni e l’uso di pgbouncer.&lt;/p&gt;
&lt;p&gt;Esploreremo le strade che si aprono utilizzando i campi JSON ed i campi
ARRAY, che sono i più comunemente usati, ma anche di come utilizzare
PostgreSQL come un gestore di code.&lt;/p&gt;
&lt;p&gt;Requisiti: conoscenze basilari di Python, di Django ed uso di PostgreSQL&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="MessageQueues"></category><category term="django-orm"></category><category term="database"></category><category term="postgresql"></category><category term="django"></category></entry><entry><title>Massaging the Pony: Message Queues and You</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--massaging-the-pony--message-queue.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Shawn Rider</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--massaging-the-pony--message-queue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Message queues are a potential solution for any site that needs to
facilitate robust asynchronous operations on your website including
carrying out intensive or long-running actions or synchronizing off-site
services. We will look at how PBS has used Celery and RabbitMQ to
provide more reliable service and how to set up a robust message queue
solution in a cloud hosting environment.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In maintaining several different site projects written in Django over
the past four years, the PBS Education team repeatedly found the need
for the ability to create asynchronous processes that could handle
long-running actions and mission-critical synchronization. We needed a
way to handle tasks such as generating reports on large data sets and
executing remote processes on fussy third-party services. The clear
solution to the problems we encountered was to implement a robust
message queue solution.&lt;/p&gt;
&lt;p&gt;Message queues allow sites to execute processes outside the normal HTTP
request cycle and then deliver the results of those processes in a
variety of ways. After a survey of all available message queue solutions
we settled on a combination of Celery and RabbitMQ to create a reliable,
always-available system that can handle mission-critical tasks. We can
easily develop against a message queue in our development builds, and we
have an infrastucture based in a cloud hosting service that allows us to
rely on the message queue without reservation.&lt;/p&gt;
&lt;p&gt;In this talk will will look at what a message queue does for your site,
how to implement a message queue in your Django code, and how to set up
a reliable message queue infrastructure on your servers. We will show
examples from some of our sites at PBS so it is clear how message queues
work and to present some common use cases that warrant a message queue
solution. We will also discuss some of the design patterns that made it
easy to switch to message queue based processing for discreet tasks, as
well as some of the things we learned that have made the solution even
easier to implement for new tasks.&lt;/p&gt;
</summary><category term="celery"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="messagequeues"></category><category term="queues"></category><category term="rabbitmq"></category></entry></feed>