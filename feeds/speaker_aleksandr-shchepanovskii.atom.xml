<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aleksandr-shchepanovskii.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-02-06T00:00:00+00:00</updated><entry><title>ORM и автоматическое кеширование</title><link href="https://pyvideo.org/pycon-belarus-2016/orm-i-avtomaticheskoe-keshirovanie.html" rel="alternate"></link><published>2016-02-06T00:00:00+00:00</published><updated>2016-02-06T00:00:00+00:00</updated><author><name>Александр Щепановский</name></author><id>tag:pyvideo.org,2016-02-06:pycon-belarus-2016/orm-i-avtomaticheskoe-keshirovanie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;С одной стороны, ORM упрощает и отчасти автоматизирует доступ приложения
к базе. С другой, он привносит структуру, дополнительные возможности
рефлексии в ваши запросы. Эту структуру можно использовать для
автоматизации кеширования и, что ещё важнее, для автоматизации
инвалидации. Последняя, однако, известна своим коварством, требованием
компромиссов и отсутствием общих решений. Последние пять лет Александр
поддерживает свою библиотеку для автоматического кеширования ORM Django,
а также внимательно следит за альтернативными подходами. В своём докладе
расскажет о фундаментальных проблемах на пути автоматической
инвалидации, о разных способах их разрешения, о том во что это
выливается на практике в вашем коде и вашей архитектуре.&lt;/p&gt;
</summary></entry><entry><title>Почему Python нужен (был) свой underscore</title><link href="https://pyvideo.org/pycon-russia-2014/pochemu-python-nuzhen-byl-svoi-underscore.html" rel="alternate"></link><published>2014-06-02T00:00:00+00:00</published><updated>2014-06-02T00:00:00+00:00</updated><author><name>Александр Щепановский</name></author><id>tag:pyvideo.org,2014-06-02:pycon-russia-2014/pochemu-python-nuzhen-byl-svoi-underscore.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Такие библиотеки как funcy и underscore часто связывают с функциональным программированием, но настоящий их фокус - это практичность.
Задача funcy - упростить манипулирование данными, коллекциями, функциями и даже потоком управления, а также абстрагировать часто встречащиеся полезные поведения.
В своём докладе я приведу жизненные примеры использования всего этого, а также расскажу об идеях заложенных в и продвигаемых funcy.
Доклад рассчитан на всех, кто пишет на питоне, а также интересуется другими языками и парадигмами. Задача минимум - познакомить с библиотекой.
Максимум - заставить по новому взглянуть на язык и на решаемые задачи.&lt;/p&gt;
</summary></entry></feed>