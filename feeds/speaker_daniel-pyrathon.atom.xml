<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_daniel-pyrathon.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>A practical guide to Singular Value Decomposition in Python</title><link href="https://pyvideo.org/pycon-us-2018/a-practical-guide-to-singular-value-decomposition-in-python.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Daniel Pyrathon</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/a-practical-guide-to-singular-value-decomposition-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recommender systems have become increasingly popular in recent years, and are used by some of the largest websites in the world to predict the likelihood of a user taking an action on an item. In the world of Netflix, this means recommending similar movies to the ones you have seen. In the world of dating, this means suggesting matches similar to people you already showed interest in!&lt;/p&gt;
&lt;p&gt;My path to recommenders has been an unusual one: from a Software Engineer to working on matching algorithms at a dating company, with a little background on machine learning. With my knowledge of Python and the use of basic SVD (Singular Value Decomposition) frameworks, I was able to understand SVDs from a practical standpoint of what you can do with them, instead of focusing on the science.&lt;/p&gt;
&lt;p&gt;In my talk, you will learn 2 practical ways of generating recommendations using SVDs: matrix factorization and item similarity. We will be learning the high-level components of SVD the &amp;quot;doer way&amp;quot;: we will be implementing a simple movie recommendation engine with the help of Jupiter notebooks, the MovieLens database, and the Surprise recommendation package.&lt;/p&gt;
</summary></entry><entry><title>Panel Discussion: What is Static Typing in Python?</title><link href="https://pyvideo.org/pybay-2017/panel-discussion-what-is-static-typing-in-python.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/panel-discussion-what-is-static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This panel discussion was MC by Daniel Pyrathon and held as part of the opening night at PyBay, SF Bay Area's regional Python Conference, on Friday, August 11, 2017.  For more information on PyBay, visit &lt;a class="reference external" href="https://pybay.com"&gt;https://pybay.com&lt;/a&gt;, subscribe to be notified of upcoming conferences.&lt;/p&gt;
&lt;p&gt;What is static typing in Python?&lt;/p&gt;
&lt;p&gt;Python added support for annotation as part of function definitions with PEP 3107. PEP 484 later provided a standard syntax for type annotations, bringing static analysis, runtime type checking, and faster refactoring to Python. Since Python is a dynamic programming language, type hints don’t have any influence at runtime, but they allow certain tools to save time with fewer bugs. For example, IDEs such as PyCharm are able to perform safer refactoring, and static analysis tools such as Mypy can perform further type checks during build phases.&lt;/p&gt;
&lt;p&gt;So far, static typing has been adopted by some renowned open source projects such as Zulip and is used at companies such as Google, Instagram, Lyft, and Quora.&lt;/p&gt;
&lt;p&gt;What will we be speaking about during this panel?&lt;/p&gt;
&lt;p&gt;We’ll be making this panel discussion accessible to everyone, so expect the panel to start with an introduction to static typing and then go deeper into best practices, support, and experience from open source project maintainers and companies. Since this feature has been a topic of substantial debate in the community, we’ll be discussing not only the pros but also the cons of this feature. Indeed, there are situations where type hinting may do more harm than good, and our panelists will be sharing with us their words of advice on this topic.&lt;/p&gt;
&lt;p&gt;Why might this panel discussion be interesting to you?&lt;/p&gt;
&lt;p&gt;Type hints are one of the new additions to the Python syntax may drastically increase the speed at which you program. Beginners will learn more about where the language development is heading.
Open source project maintainers and contributors will learn the tooling, support, and best “getting started” advice from our expert panelists.&lt;/p&gt;
&lt;p&gt;Project managers, CTOs, and engineers will learn how type hints can make their team more productive. We know companies spend a huge amount of money recruiting and sourcing engineers, and I’m sure they would do everything possible to make their onboarding experience more enjoyable, easier and faster since employees can expect to be more productive with an annotated codebase.
This panel will not only help developers learn more about static typing, but also help identify areas where static type checking isn’t doing a good job, and learn how we can all improve it together.&lt;/p&gt;
&lt;p&gt;Our panelists
And now for the part that I’m most proud of, our list of panelists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Łukasz Langa&lt;/p&gt;
&lt;p&gt;Łukasz is one of the PEP484 authors, a Python core developer, and currently a Production Engineer at Facebook. Łukasz has also been using mypy at work and I imagine has also been part of the latest push to port Instagram’s code base to Python 3! Łukasz is a long-time Python contributor, was a mentor for the Python Software Foundation for Google Summer of Code, and has spoken about Python around the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;Jelle is a Staff Engineer at Quora, where he works on infrastructure, internationalization, development tools, and ML infrastructure. He’s a contributor to mypy and has also used mypy at Quora. Jelle will offer his perspective on advocating for static type checking at a great engineering organization like Quora and will also be talking about typeshed, a project that hosts type stubs for the standard library and major third-party libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ethan Smith&lt;/p&gt;
&lt;p&gt;Ethan has been involved with mypy for a while and has been working on typical, a project that uses the frame evaluation API (PEP 523) to dynamically generate stubs. While Ethan is still in college, he has been doing some amazing work to improve the support of type hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Andrey Vlasovskikh&lt;/p&gt;
&lt;p&gt;Andrey is the PyCharm community lead and maintainer of IdeaVim. PyCharm is used by many Python developers and its support for type checking “out of the box” makes it easy for developers to adopt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Matthias Kramm&lt;/p&gt;
&lt;p&gt;Matthias is the author of pytype, one of the maintainers of typeshed, and has been working on Python static analysis tools for Google. Pytype is used in a few hundred projects at Google, including YouTube! Matthias will give us great insight into adopting type checking “at scale”!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="panel"></category><category term="static-typing"></category></entry><entry><title>Daniel Pyrathon about Meta API at Django: Under The Hood</title><link href="https://pyvideo.org/django-under-the-hood-2014/daniel-pyrathon-about-meta-api-at-django-under-the-hood.html" rel="alternate"></link><published>2014-11-14T00:00:00+00:00</published><updated>2014-11-14T00:00:00+00:00</updated><author><name>Daniel Pyrathon</name></author><id>tag:pyvideo.org,2014-11-14:django-under-the-hood-2014/daniel-pyrathon-about-meta-api-at-django-under-the-hood.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/pirosb3/the-django-meta-api-a-journey-of-optimization-and-design"&gt;https://speakerdeck.com/pirosb3/the-django-meta-api-a-journey-of-optimization-and-design&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood: &lt;a class="reference external" href="http://djangounderthehood.com/"&gt;http://djangounderthehood.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood is an annual Django conference for experienced Django developers. Come and learn about the internals of Django, and help to shape its future.&lt;/p&gt;
</summary></entry><entry><title>Machine Learning as a Service: fare sentiment analysys in realtime con ZMQ e NLTK</title><link href="https://pyvideo.org/pycon-italia-2014/machine-learning-as-a-service-fare-sentiment-analysys-in-realtime-con-zmq-e-nltk.html" rel="alternate"></link><published>2014-05-25T00:00:00+00:00</published><updated>2014-05-25T00:00:00+00:00</updated><author><name>Daniel Pyrathon</name></author><id>tag:pyvideo.org,2014-05-25:pycon-italia-2014/machine-learning-as-a-service-fare-sentiment-analysys-in-realtime-con-zmq-e-nltk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sono un appassionato di Machine Learning e Natural Language Processing. Quest'anno, per la mia tesi di laurea, ho deciso di creare una applicazione di Twitter sentiment analysis in tempo reale. Per questo motivo, nel mio talk voglio raccontare la mia esperienza nel creare un sistema di machine learning scalabile e adottabile su qualsiasi piattaforma. Lo scopo di questo talk non è quello di entrare nei dettagli dal punto di vista scientifico (perchè ovviamente sono alle prime armi) ma invece far vedere come Python e librerie fondamentali NLTK, ZMQ e MrJob mi hanno aiutato a creare un sistema distribuito e facilmente replicabile. Questo talk avrebbe benefici sia per un utente alle prime armi che per un veterano di ML: L'utente alle prime armi si porta a casa un overview di cosa è Machine learning, e tutti gli strumenti necessari per replicare il progetto a casa. L'utente più esperto si porta a casa nuove idee che può mettere in pratica e molto probabilmente creare un prodotto migliore del mio! Inoltre, a fine talk pubblicherò anche un GitHub project con slide e prodotto finito.&lt;/p&gt;
</summary></entry><entry><title>Machine Learning as a Service: making sentiment predictions in realtime with ZMQ and NLTK</title><link href="https://pyvideo.org/pycon-italia-2014/machine-learning-as-a-service-making-sentiment-predictions-in-realtime-with-zmq-and-nltk.html" rel="alternate"></link><published>2014-05-24T00:00:00+00:00</published><updated>2014-05-24T00:00:00+00:00</updated><author><name>Daniel Pyrathon</name></author><id>tag:pyvideo.org,2014-05-24:pycon-italia-2014/machine-learning-as-a-service-making-sentiment-predictions-in-realtime-with-zmq-and-nltk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I am a Machine Learning (ML) and Natural Language Processing enthusiast. For my university dissertation I created a realtime sentiment analysis classifier for Twitter. My talk will be about the experience and the lessons learned. I will explain how to build a scalable machine learning software as a service, consumable with a REST API. The purpose of this talk is not to dig into the mathematics behind machine learning (as I do not have this experience), but it's more about showing how easy it can be to build a ML SaaS by using some of the amazing libraries such as NLTK, ZMQ and MrJob that have helped me make throughout the development. This talk will give several benefits: users with no ML background will have a great introduction to the subject, they will also be able to replicate my project at home. More experienced users will gain new ideas to put in practice and (most) probably build a better system than mine! Finally, I will attach a GitHub project with the slides and a finished product.&lt;/p&gt;
&lt;p&gt;Contents:&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Overview
Brief demo
Introduction to Machine Learning and Natural Language processing
Naive Bayes
Offline training&lt;/p&gt;
&lt;p&gt;Overview of offline training
Pre-processing: NLTK for feature extraction, stemming, stopword removal, chi-square tests.
Training script: using MrJob for MapReduce
Testing script: accuracy, precision and recall
Classification as a service&lt;/p&gt;
&lt;p&gt;Intuition
ZeroMQ and PUSH-PULL
NodeJS for a RESTful back-end
End&lt;/p&gt;
&lt;p&gt;Things that can be improved
Q and A&lt;/p&gt;
</summary></entry><entry><title>The Meta API: yesterday, today, and tomorrow</title><link href="https://pyvideo.org/pycon-italia-2015/the-meta-api-yesterday-today-and-tomorrow.html" rel="alternate"></link><published>2015-05-29T00:00:00+00:00</published><updated>2015-05-29T00:00:00+00:00</updated><author><name>Daniel Pyrathon</name></author><id>tag:pyvideo.org,2015-05-29:pycon-italia-2015/the-meta-api-yesterday-today-and-tomorrow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meta API is the core part of Django that enables introspection of
the ORM with the rest of the system. The API allows different parts of
the framework such as lookups, queries, forms, admin to understand and
use the capabilities of every model. As part of Summer of Code 2014 I
refactored and redesigned some core parts of this API and, as the
purpose of this talk, I plan on advocating how developers can benefit
from this API in numerous ways: from understanding how Django’s model
works, to enhancing your application through model introspection.
Moreover, I will give an overview of how we can create a custom store
that can be plugged into Django, together with some code snippets and
(maybe) a live demo. This talk is an extension of the talk I did at
Django Under the Hood, when the API was not finished yet. Now that the
API has landed in master, I will also describe my process in getting
involved into the Django community and how easy and rewarding it is to
contribute to the project. Objectives&lt;/p&gt;
&lt;p&gt;Give a brief overview of what the Meta API is, it’s features and what
can be done with it Look at some of Django’s ORM code: from the model
metaclass to the relation graph Describe my experience in creating a
custom Meta that talks to GMail through Django’s Model API (demo) Define
a small but concise guide on how to contribute to Django&lt;/p&gt;
</summary></entry></feed>