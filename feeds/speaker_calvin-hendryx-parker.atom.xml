<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Calvin Hendryx-Parker</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_calvin-hendryx-parker.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-07-26T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Lightning talks - Wednesday - part 1</title><link href="https://pyvideo.org/djangocon-europe-2017/lightning-talks-wednesday-part-1.html" rel="alternate"></link><published>2017-04-05T00:00:00+00:00</published><updated>2017-04-05T00:00:00+00:00</updated><author><name>Daniel Quinn</name></author><id>tag:pyvideo.org,2017-04-05:/djangocon-europe-2017/lightning-talks-wednesday-part-1.html</id><content type="html"></content><category term="DjangoCon Europe 2017"></category><category term="lightning talks"></category></entry><entry><title>Deploying a Django Virtual Event Platform Using Containers and Terraform</title><link href="https://pyvideo.org/djangocon-europe-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-06-03:/djangocon-europe-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django application into the Cloud with Fargate. We’ll dive in with how to getting up and running fast, but leaving the overhead of managing virtual machines and Kubernetes behind. Create and store the application Docker images …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django application into the Cloud with Fargate. We’ll dive in with how to getting up and running fast, but leaving the overhead of managing virtual machines and Kubernetes behind. Create and store the application Docker images in a container repository and without touching the AWS console we can create fully Infrastructure as Code automated deployments via CodePipeline into Fargate containers and S3 buckets. Deliver the React application via CloudFront and S3 for full global scalability. Leave the legacy deployments behind and forge bravely into the new world of Cloud Native applications.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro to Cloud Native deployment — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Hitchhikers Guide to Cloud Native vocabulary&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Laying the groundwork for going Cloud Native — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Containerizing your app&lt;/li&gt;
&lt;li&gt;Preparing your image for production&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Building the pipeline — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Sketching out your infrastructure&lt;/li&gt;
&lt;li&gt;Moving to Terraform&lt;/li&gt;
&lt;li&gt;Creating a CI/CD workflow&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Playing with Building Blocks — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Leveraging AWS Cloud Components for Delivery&lt;/li&gt;
&lt;li&gt;Using Environment Variables and keeping Secrets&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Scaling Considerations, Load Balancers and CDNs — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Many routes behind one URL&lt;/li&gt;
&lt;li&gt;Enable effective caching&lt;/li&gt;
&lt;li&gt;Keep things on a need to know basis (only pass what you need)&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Load Testing — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Build test plans with Locust.io (Python powered!)&lt;/li&gt;
&lt;li&gt;Testing and debugging load tests with remote PDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion — 10%&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon Europe 2021"></category><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Hacking Django Channels for Fun and Profit</title><link href="https://pyvideo.org/djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-06-03:/djangocon-europe-2021/hacking-django-channels-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro and Backstory on Django Channels history — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Synchronous vs Async Request Loops&lt;/li&gt;
&lt;li&gt;WSGI vs ASGI for your Django Application&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro to WebSockets — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Demo of them used in the real world web applications&lt;/li&gt;
&lt;li&gt;How they interact with async event loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Django Channels Core Concepts — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Consumers&lt;/li&gt;
&lt;li&gt;Channel Layers …&lt;/li&gt;&lt;/ul&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro and Backstory on Django Channels history — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Synchronous vs Async Request Loops&lt;/li&gt;
&lt;li&gt;WSGI vs ASGI for your Django Application&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Intro to WebSockets — 3%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Demo of them used in the real world web applications&lt;/li&gt;
&lt;li&gt;How they interact with async event loops&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Django Channels Core Concepts — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Consumers&lt;/li&gt;
&lt;li&gt;Channel Layers&lt;/li&gt;
&lt;li&gt;Background Workers&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Consumers and ASGI Routing Example — 10%&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Where to Background Workers Fit? — 10%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Lightweight Tasks&lt;/li&gt;
&lt;li&gt;Considerations when reliability is not needed&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;How about reversing the Consumer use case? — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Create long-running Background Workers&lt;/li&gt;
&lt;li&gt;Connect to remote services such as Discord to create Bots&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Example application integration with Discord — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Connect to Discord on start and listen for messages and other events&lt;/li&gt;
&lt;li&gt;Send our own application messages into Discord&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Building your own long-running Channel Worker — 20%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;What to add to your project&lt;/li&gt;
&lt;li&gt;Define channel background tasks to run at start&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Next steps for this project — 2%&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Upstream or create Channels addon to make this functionality more generic&lt;/li&gt;
&lt;li&gt;Add ability to define one-shot tasks&lt;/li&gt;
&lt;li&gt;Add ability to define post-job tasks to run on stop&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion — 2%&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon Europe 2021"></category><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Bootstrapping your Local Python Environment</title><link href="https://pyvideo.org/djangocon-us-2021/bootstrapping-your-local-python-environment.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/bootstrapping-your-local-python-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and lo and behold, it has Python out-of-the-box and ready to roll… Or so you think? Maybe you want to get started doing Python development on Windows and see that you can grab Python easily from the Microsoft …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and lo and behold, it has Python out-of-the-box and ready to roll… Or so you think? Maybe you want to get started doing Python development on Windows and see that you can grab Python easily from the Microsoft Store. Should you? Let’s talk about getting started with the end in mind and making sure your development computer doesn’t become the next [superfund site](&lt;a class="reference external" href="https://xkcd.com/1987/"&gt;https://xkcd.com/1987/&lt;/a&gt;). We’ll quickly go through a tour of the various options such as pyenv, venv, virtualenv, conda and Docker as great ways to make sure you can develop in a sane environment.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Predict Lightning Strikes using Django and AWS</title><link href="https://pyvideo.org/djangocon-us-2022/predict-lightning-strikes-using-django-and-aws.html" rel="alternate"></link><published>2022-10-17T00:00:00+00:00</published><updated>2022-10-17T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2022-10-17:/djangocon-us-2022/predict-lightning-strikes-using-django-and-aws.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Predicting a lightning strike with 99.6% accuracy requires advanced algorithms, expert developers and data — a lot of data. FLASH Scientific Technology pulls data from a variety of sources including weather radars and location-specific information like altitude, moisture, wind direction and temperature. It was imperative that FLASH develop an …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Predicting a lightning strike with 99.6% accuracy requires advanced algorithms, expert developers and data — a lot of data. FLASH Scientific Technology pulls data from a variety of sources including weather radars and location-specific information like altitude, moisture, wind direction and temperature. It was imperative that FLASH develop an application that could pull, read and process the data both quickly and accurately.&lt;/p&gt;
&lt;p&gt;In this case study and product demo, you’ll learn how to take an algorithm and idea from a Jupyter Notebook to production ready and cloud native.&lt;/p&gt;
&lt;p&gt;(1) Optimize Python code structure
-- As the Zen of Python states, “simple is better than complex.” The first part of this presentation will focus on the importance of reviewing and simplifying code to ensure faster data processing speeds and that the code is easy to both read and duplicate.
(2) Build fast, efficient and accurate APIs with Django
--Once the code is optimized, it’s ready for production. You’ll learn how we built an interface that could both request data from various web services and quickly make accurate predictions using FLASH’s proprietary and patent-issued algorithm. Specifically, this talk will feature:
1. best practices and lessons learned, including insight into why we stored all of the Django application elements in a single library;
2. why all of the data needed to be pulled directly from the cache; and
3. why the algorithm was kept separate.
(3) Deploy serverless and scalable applications using AWS Lambda and AWS Fargate
--Finally, this talk will:
1. showcase how the Django application we built integrates seamlessly with the serverless components of AWS including AWS Lambda and AWS Fargate;
2. unveil the secrets of building Python Container Images for AWS Lambda (Hint: by using container images for Lambda code vs. manually submitting .zip files we saved significant time, money, and effort. We also reduced errors associated with manual changes.);
3. review the importance of building applications to be serverless from the beginning.
(4) Product Demo
-- Today, the application — which initially took minutes to make lightning strike predictions with 99.6% accuracy and a 15- to 25-minute lead time (saving time, money and lives) — can predict when and where lightning will strike in just seconds. The presentation will conclude with a demo of the product, which is deployed with GitLab CI/CD merge request pipeline.&lt;/p&gt;
&lt;p&gt;Both beginner and intermediate developers will benefit from this talk, and it is ideal for developers wanting to learn how to use Django for complex predictive-technology projects.&lt;/p&gt;
</content><category term="DjangoCon US 2022"></category></entry><entry><title>Sponsored Talk: Make an IMPACT with Django</title><link href="https://pyvideo.org/djangocon-us-2022/sponsored-talk-make-an-impact-with-django.html" rel="alternate"></link><published>2022-10-17T00:00:00+00:00</published><updated>2022-10-17T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2022-10-17:/djangocon-us-2022/sponsored-talk-make-an-impact-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you using technology to make the world a better place? We all have a role to play. As technologists, we have the opportunity to find solutions for complex challenges — and Django has the superpowers to meet the need. Django is used every day to bring impressive, purposeful and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you using technology to make the world a better place? We all have a role to play. As technologists, we have the opportunity to find solutions for complex challenges — and Django has the superpowers to meet the need. Django is used every day to bring impressive, purposeful and transformative projects to life. Calvin Hendryx-Parker, Six Feet Up CTO and AWS Community Hero, will discuss what makes a project IMPACTFUL. He’ll share examples of how Django has been used to: predict when and where lightning will strike in just seconds, map forest fire trajectory, streamline battery energy storage operations and more.&lt;/p&gt;
</content><category term="DjangoCon US 2022"></category></entry><entry><title>Powering Energy Storage Beyond Excel</title><link href="https://pyvideo.org/djangocon-us-2023/powering-energy-storage-beyond-excel.html" rel="alternate"></link><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2023-10-17:/djangocon-us-2023/powering-energy-storage-beyond-excel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world where renewable energy is crucial for combating climate change, a national installer of battery energy storage solutions found themselves outgrowing Excel and seeking a more powerful solution. Django’s superpowers allowed this company to optimize energy storage configurations, enhance accuracy in pricing models, and streamline business …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world where renewable energy is crucial for combating climate change, a national installer of battery energy storage solutions found themselves outgrowing Excel and seeking a more powerful solution. Django’s superpowers allowed this company to optimize energy storage configurations, enhance accuracy in pricing models, and streamline business workflows.&lt;/p&gt;
&lt;p&gt;During this talk, we will discuss the process of converting complex Excel formulas into powerful Python code. Explore the cutting-edge technologies employed, such as Django's framework and a PostgreSQL database managed by AWS RDS. Discover how Docker and AWS App Runner facilitated seamless deployment, while the Next.js React front end transformed the user experience.&lt;/p&gt;
&lt;p&gt;The impact of this project extends far beyond a single company. Attendees will uncover best practices for empowering any organization, especially those with vast amounts of data and complex processes. Learn how to streamline operations, enhance accuracy, ensure reliability and improve quality assurance, all while embracing the power of Django. Discover how Django's superpower is driving innovation, efficiency, and impact in climate tech and beyond.&lt;/p&gt;
&lt;p&gt;Together, let's harness the power of Django and pave the way for a greener, more sustainable world.&lt;/p&gt;
</content><category term="DjangoCon US 2023"></category></entry><entry><title>Sponsored Talk: Supercharge Your Django Dev Team: Introducing the BEST Framework</title><link href="https://pyvideo.org/djangocon-us-2023/sponsored-talk-supercharge-your-django-dev-team-introducing-the-best-framework.html" rel="alternate"></link><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2023-10-16:/djangocon-us-2023/sponsored-talk-supercharge-your-django-dev-team-introducing-the-best-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever sensed an unseen throttle on your team's potential? Get ready to unmask those bottlenecks and elevate your Django prowess. Explore the BEST framework with Six Feet Up CTO Calvin Hendryx-Parker. BEST is a catalyst designed by devs, for devs, to turbocharge team efficiency. Ready to up your game …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever sensed an unseen throttle on your team's potential? Get ready to unmask those bottlenecks and elevate your Django prowess. Explore the BEST framework with Six Feet Up CTO Calvin Hendryx-Parker. BEST is a catalyst designed by devs, for devs, to turbocharge team efficiency. Ready to up your game? Join Calvin and dive into insights to lay the groundwork for unmatched synergy.&lt;/p&gt;
</content><category term="DjangoCon US 2023"></category></entry><entry><title>Finite State Machine (FSM) in Django</title><link href="https://pyvideo.org/pycon-us-2020/finite-state-machine-fsm-in-django.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/finite-state-machine-fsm-in-django.html</id><content type="html"></content><category term="PyCon US 2020"></category></entry><entry><title>Bootstrapping Your Local Python Environment</title><link href="https://pyvideo.org/pycon-us-2022/bootstrapping-your-local-python-environment.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/bootstrapping-your-local-python-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are simple, yet crucial, reminders that can differentiate an expert developer from a hobbyist. In this talk and live demo, developers will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the importance of abiding by the Zen of Python;&lt;/li&gt;
&lt;li&gt;where (and how) to install Python on your machine;&lt;/li&gt;
&lt;li&gt;three rules to follow when installing Python …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are simple, yet crucial, reminders that can differentiate an expert developer from a hobbyist. In this talk and live demo, developers will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the importance of abiding by the Zen of Python;&lt;/li&gt;
&lt;li&gt;where (and how) to install Python on your machine;&lt;/li&gt;
&lt;li&gt;three rules to follow when installing Python;&lt;/li&gt;
&lt;li&gt;proper version management with pyenv;&lt;/li&gt;
&lt;li&gt;which Python add-ons (e.g.: virtualenv, pipx, piptools, Docker) can be used to make environments both repeatable and simple.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resources and Links&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ActiveState: &lt;a class="reference external" href="https://www.activestate.com/products/python/"&gt;https://www.activestate.com/products/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;asdf: &lt;a class="reference external" href="https://github.com/danhper/asdf-python"&gt;https://github.com/danhper/asdf-python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anaconda: &lt;a class="reference external" href="https://www.anaconda.com/products/individual"&gt;https://www.anaconda.com/products/individual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brew: &lt;a class="reference external" href="https://brew.sh/"&gt;https://brew.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chocolatey: &lt;a class="reference external" href="https://chocolatey.org/"&gt;https://chocolatey.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker’s Python integration: &lt;a class="reference external" href="https://hub.docker.com/_/python/"&gt;https://hub.docker.com/_/python/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PDM: &lt;a class="reference external" href="https://pypi.org/project/pdm/"&gt;https://pypi.org/project/pdm/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyenv setup: &lt;a class="reference external" href="https://github.com/pyenv/pyenv#installation"&gt;https://github.com/pyenv/pyenv#installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyenv setup for Windows: &lt;a class="reference external" href="https://pyenv-win.github.io/pyenv-win/"&gt;https://pyenv-win.github.io/pyenv-win/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipenv versions: &lt;a class="reference external" href="https://pipenv.pypa.io/en/latest/"&gt;https://pipenv.pypa.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;piptools: &lt;a class="reference external" href="https://github.com/jazzband/pip-tools/#readme"&gt;https://github.com/jazzband/pip-tools/#readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipx setup: &lt;a class="reference external" href="https://pypi.org/project/pipx/"&gt;https://pypi.org/project/pipx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pipx: &lt;a class="reference external" href="https://pypa.github.io/pipx/"&gt;https://pypa.github.io/pipx/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;poetry: &lt;a class="reference external" href="https://python-poetry.org/"&gt;https://python-poetry.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyproject.toml: &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0621/"&gt;https://www.python.org/dev/peps/pep-0621/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python.org: &lt;a class="reference external" href="https://python.org/"&gt;https://python.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenv: &lt;a class="reference external" href="https://virtualenv.pypa.io/en/latest/"&gt;https://virtualenv.pypa.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;virtualenvwrapper: &lt;a class="reference external" href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;https://virtualenvwrapper.readthedocs.io/en/latest/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zen of Python: &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;https://www.python.org/dev/peps/pep-0020/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Too Big for DAG Factories?</title><link href="https://pyvideo.org/pycon-us-2023/too-big-for-dag-factories.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/too-big-for-dag-factories.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’re working on a project that needs to aggregate petabytes of data,
and it doesn’t make sense to manually hard-code thousands of tables,
DAGs (Directed Acyclic Graphs) and pipelines. How can you transform,
optimize and scale your data workflow? Developers around the world
(especially those who love …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’re working on a project that needs to aggregate petabytes of data,
and it doesn’t make sense to manually hard-code thousands of tables,
DAGs (Directed Acyclic Graphs) and pipelines. How can you transform,
optimize and scale your data workflow? Developers around the world
(especially those who love Python) are using Apache Airflow — a platform
created by the community to programmatically author, schedule and
monitor workflows without limiting the scope of your pipelines.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll review use cases, and you’ll learn best practices
for how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;use Airflow to transfer data, manage your infrastructure and more;&lt;/li&gt;
&lt;li&gt;implement Airflow in practical use cases, including as a:&lt;ul&gt;
&lt;li&gt;workflow controller for ETL pipelines loading big data;&lt;/li&gt;
&lt;li&gt;scheduler for a manufacturing process; and/or&lt;/li&gt;
&lt;li&gt;batch process coordinator for any type of enterprise;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scale and dynamically generate thousands of DAGs that come from JSON
configuration files;&lt;/li&gt;
&lt;li&gt;automate the release of both the DAGs and infrastructure updates via
a CI/CD pipeline;&lt;/li&gt;
&lt;li&gt;run all tasks simultaneously using Airflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both beginner and intermediate developers will benefit from this talk,
and it is ideal for developers wanting to learn how to use Airflow for
managing big data. Beginners will learn about dynamic DAG factories, and
intermediate developers will learn how to scale DAG factories to
thousands of DAGS — which is something Airflow can’t do out of the box.&lt;/p&gt;
&lt;p&gt;After this talk and live demo, people will learn best practices
(including access to a code repo) that will allow them to scale to
thousands of DAGs and spend more time having fun with big data.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Keynote by Calvin Hendryx-Parker</title><link href="https://pyvideo.org/pydata-indy-2018/keynote-by-calvin-hendryx-parker.html" rel="alternate"></link><published>2018-10-12T00:00:00+00:00</published><updated>2018-10-12T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2018-10-12:/pydata-indy-2018/keynote-by-calvin-hendryx-parker.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Calvin Hendryx-Parker opens the PyData Indy 2018 conference with a keynote explaining the different presentations of the day.&lt;/p&gt;
</content><category term="PyData Indy 2018"></category><category term="keynote"></category></entry><entry><title>Deploying a Django Virtual Event Platform Using Containers and Terraform</title><link href="https://pyvideo.org/pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django
application into the Cloud with Fargate. We’ll dive in with how to getting
up and running fast, but leaving the overhead of managing virtual machines
and Kubernetes behind. Create and store the application Docker images …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django
application into the Cloud with Fargate. We’ll dive in with how to getting
up and running fast, but leaving the overhead of managing virtual machines
and Kubernetes behind. Create and store the application Docker images in a
container repository and without touching the AWS console we can create
fully Infrastructure as Code automated deployments via CodePipeline into
Fargate containers and S3 buckets. Deliver the React application via
CloudFront and S3 for full global scalability. Leave the legacy deployments
behind and forge bravely into the new world of Cloud Native applications.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>PyOhio 2010: Controlling UNIX Processes using Supervisor</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2010-07-31:/pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Controlling UNIX Processes using Supervisor&lt;/p&gt;
&lt;p&gt;Presented by Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Supervisor is a Python daemon that can control arbitrary processes in a
UNIX- like environment. It features a client/server model of control
that can easily be extended. This talk will cover the configuration and
setup of Supervisor. It will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Controlling UNIX Processes using Supervisor&lt;/p&gt;
&lt;p&gt;Presented by Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Supervisor is a Python daemon that can control arbitrary processes in a
UNIX- like environment. It features a client/server model of control
that can easily be extended. This talk will cover the configuration and
setup of Supervisor. It will also cover how to extend Supervisor and
take advantage of its XML-RPC interface and ability to react to events
that it generates.&lt;/p&gt;
</content><category term="PyOhio 2010"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="supervisor"></category></entry><entry><title>PyOhio 2010: Lightning Talks</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lightning-talks.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:/pyohio-2010/pyohio-2010--lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2010"></category><category term="lightning talks"></category><category term="concurrency"></category><category term="gil"></category><category term="lxml"></category><category term="mercurial"></category><category term="plone"></category><category term="plone4"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="suds"></category></entry><entry><title>Hacking Django Channels for Fun (and Profit)</title><link href="https://pyvideo.org/pyohio-2021/hacking-django-channels-for-fun-and-profit.html" rel="alternate"></link><published>2021-07-31T00:00:00+00:00</published><updated>2021-07-31T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-07-31:/pyohio-2021/hacking-django-channels-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is growing some great async features and Channels has been great
for handling websockets connecting from your visitor's browser. But what
happens when you need to do more? What if you want to keep long-running
connections from Django to other websockets, such as Discord servers?
How do you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is growing some great async features and Channels has been great
for handling websockets connecting from your visitor's browser. But what
happens when you need to do more? What if you want to keep long-running
connections from Django to other websockets, such as Discord servers?
How do you do this and still leverage all the batteries included with
Django? We will show an approach that makes this all possible and easy
as a developer.&lt;/p&gt;
</content><category term="PyOhio 2021"></category></entry><entry><title>Bootstrapping Your Local Python Environment</title><link href="https://pyvideo.org/pyohio-2022/bootstrapping-your-local-python-environment.html" rel="alternate"></link><published>2022-07-30T00:00:00+00:00</published><updated>2022-07-30T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2022-07-30:/pyohio-2022/bootstrapping-your-local-python-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and low and
behold, it has Python out-of-the-box and ready to roll… Or so you think?
Maybe you want to get started doing Python development on Windows and
see that you can grab Python easily from the Microsoft …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and low and
behold, it has Python out-of-the-box and ready to roll… Or so you think?
Maybe you want to get started doing Python development on Windows and
see that you can grab Python easily from the Microsoft Store. Should
you?&lt;/p&gt;
&lt;p&gt;There are simple, yet crucial, reminders that can differentiate an
expert developer from a hobbyist. This talk is ideal for developers who
want to optimize their system setups. Developers of all skill levels
often forget about the journey — and the troubles — they had when first
installing Python on their machines. Established, senior developers
might be able to install Python easily, but are they following the Zen
of Python when it comes to best practices for environment settings and
versioning?&lt;/p&gt;
&lt;p&gt;In this talk and live demo, we’ll discuss getting started with the end
in mind and making sure your development computer doesn’t become the
next superfund site (&lt;a class="reference external" href="https://xkcd.com/1987/"&gt;https://xkcd.com/1987/&lt;/a&gt;).&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Developers will learn:&lt;/div&gt;
&lt;div class="line"&gt;- the importance of abiding by the Zen of Python;&lt;/div&gt;
&lt;div class="line"&gt;- where (and how) to install Python on your machine;&lt;/div&gt;
&lt;div class="line"&gt;- three rules to follow when installing Python;&lt;/div&gt;
&lt;div class="line"&gt;- proper version management with pyenv;&lt;/div&gt;
&lt;div class="line"&gt;- which Python add-ons (e.g.: virtualenv, pipx, piptools, Docker) can
be used to make environments both repeatable and simple.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After this presentation, developers will know the best practices needed
to spend less time setting up and more time having fun with the code.&lt;/p&gt;
</content><category term="PyOhio 2022"></category></entry><entry><title>Mastering the Zen of Dev Experience: Kubernetes and the Art of Simplicity</title><link href="https://pyvideo.org/pyohio-2024/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of-simplicity.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of-simplicity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Happy developers do not have to fight their tools and environment to be
productive. They get set up in minutes, deploy without hesitation, and
use the same tools to debug in any environment. In this talk and live
demo, we'll explore how a Kubernetes-based development workflow can help
you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Happy developers do not have to fight their tools and environment to be
productive. They get set up in minutes, deploy without hesitation, and
use the same tools to debug in any environment. In this talk and live
demo, we'll explore how a Kubernetes-based development workflow can help
you and your team hit the ground running.&lt;/p&gt;
&lt;p&gt;We will delve into establishing a powerful Django backend for
server-side functionality and a dynamic React frontend for an engaging
user experience. For databases, the setup will include a local Postgres
database for development and CloudNativePG for production-level
deployments. Additionally, the integration of Redis for enhanced
application performance and email testing will be covered.&lt;/p&gt;
&lt;p&gt;This comprehensive approach ensures that onboarding a new developer on a
project is streamlined, overcoming the typical pain points such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;manual installation steps&lt;/li&gt;
&lt;li&gt;the inconsistency of tools across development environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes will empower your development and DevOps teams to speak a
common language and collaborate effectively, standardizing deployments
and debugging processes in local, preview, staging, and production
environments.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Deploy Django: GitOps &amp; Kubernetes Made Easy</title><link href="https://pyvideo.org/pyohio-2025/deploy-django-gitops-kubernetes-made-easy.html" rel="alternate"></link><published>2025-07-26T00:00:00+00:00</published><updated>2025-07-26T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2025-07-26:/pyohio-2025/deploy-django-gitops-kubernetes-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying code shouldn’t be stressful. But too often, the journey from
local dev to production is fragile, manual, and hard to debug. This talk
is about building peace of mind into your pipeline — with GitOps,
Kubernetes, and open source tools like Argo CD that make continuous
delivery predictable …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying code shouldn’t be stressful. But too often, the journey from
local dev to production is fragile, manual, and hard to debug. This talk
is about building peace of mind into your pipeline — with GitOps,
Kubernetes, and open source tools like Argo CD that make continuous
delivery predictable, repeatable, and scalable from the very first
release to the 50th.&lt;/p&gt;
&lt;p&gt;We’ll tackle the realities of “day two” DevOps — what happens after the
first deploy. From managing rollbacks and coordinating releases to
enforcing consistency across dev, staging, and production, you’ll learn
how to bring stability and scalability to your delivery pipeline.&lt;/p&gt;
&lt;p&gt;In a live demo, we’ll deploy a full stack Django app from GitHub to
production using Argo CD and GitHub Actions — with observability,
rollback strategies, and environment parity built in from the start.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;You’ll learn how to:&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Set up a GitOps-based CI/CD pipeline that works across all
environments&lt;/div&gt;
&lt;div class="line"&gt;- Automate rollouts, rollbacks, and version control of infrastructure&lt;/div&gt;
&lt;div class="line"&gt;- Understand why Kubernetes is a future-proof platform for Django
teams&lt;/div&gt;
&lt;div class="line"&gt;- Gain confidence in releasing updates safely, consistently, and at
scale&lt;/div&gt;
&lt;div class="line"&gt;- Leverage open source tools to eliminate manual deployment headaches&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Whether you're writing the code or leading the team, you'll leave with a
clear, practical blueprint for shipping faster — and with fewer
surprises.&lt;/p&gt;
</content><category term="PyOhio 2025"></category></entry><entry><title>Finite State Machine (FSM) in Django</title><link href="https://pyvideo.org/python-web-conf-2020/finite-state-machine-fsm-in-django.html" rel="alternate"></link><published>2020-06-18T00:00:00+00:00</published><updated>2020-06-18T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2020-06-18:/python-web-conf-2020/finite-state-machine-fsm-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Finite State Machine (FSM) in Django&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Workflows are super powerful tools for automating business processes online. Our everyday life is full of workflows such as requesting time off from work. Many of these are actually Finite State Machines that move from state to state via transitions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Finite State Machine (FSM) in Django&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Workflows are super powerful tools for automating business processes online. Our everyday life is full of workflows such as requesting time off from work. Many of these are actually Finite State Machines that move from state to state via transitions. Popular CMS’ such as Plone have rich support for workflows, but now with django-fsm we can build quick, lightweight business workflows for our applications. Plus, we have full audit logging and even build visualizations of our workflow to confirm with the business owners generated from the code.&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category><category term="Django"></category></entry><entry><title>Deploying a Virtual Event Platform Using Fargate and Terraform</title><link href="https://pyvideo.org/python-web-conf-2021/deploying-a-virtual-event-platform-using-fargate-and-terraform.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/deploying-a-virtual-event-platform-using-fargate-and-terraform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Deploying a Virtual Event Platform Using Fargate and Terraform&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Learn to leverage cloud native tools and launch a scalable application into the Cloud with Fargate. We’ll dive in with how to getting up and running fast, but leaving the overhead of managing virtual machines and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Deploying a Virtual Event Platform Using Fargate and Terraform&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Learn to leverage cloud native tools and launch a scalable application into the Cloud with Fargate. We’ll dive in with how to getting up and running fast, but leaving the overhead of managing virtual machines and Kubernetes behind. Create and store the application Docker images in ECR and without touching the AWS console we can create fully Infrastructure as Code automated deployments via CodePipeline into Fargate containers and S3 buckets. Deliver the React application via CloudFront and S3 for full global scalability. Leave the legacy deployments behind and forge bravely into the new world of Cloud applications.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry><entry><title>Hacking Django Channels for Fun (and Profit)</title><link href="https://pyvideo.org/python-web-conf-2021/hacking-django-channels-for-fun-and-profit.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/hacking-django-channels-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Hacking Django Channels for Fun (and Profit)&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Django is growing some great async features and Channels has been great for handling websockets connecting from your visitor's browser. But what happens when you need to do more? What if you want to keep long-running connections from Django …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Hacking Django Channels for Fun (and Profit)&amp;quot; by: Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Django is growing some great async features and Channels has been great for handling websockets connecting from your visitor's browser. But what happens when you need to do more? What if you want to keep long-running connections from Django to other websockets, such as Discord servers?  How do you do this and still leverage all the batteries included with Django? We will show an approach that makes this all possible and easy as a developer.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry></feed>