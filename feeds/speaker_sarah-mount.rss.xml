<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>The PyCon UK Panel</title><link>https://pyvideo.org/pycon-uk-2015/the-pycon-uk-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the style of Question Time (or Gardeners' Question Time, but without the plants), PyCon UK's acting Chair Zeth chairs a panel of Python experts who each give an short overview of how they found the conference and then try to answer your questions about the future of Python, Software development and the meaning of life, the universe and everything.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-pycon-uk-panel.html</guid></item><item><title>Simulating a CPU with Python</title><link>https://pyvideo.org/pycon-uk-2016/simulating-a-cpu-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarah Mount&lt;/p&gt;
&lt;p&gt;Simulating a CPU with Python or: surprising programs you might have thought were better written in C&lt;/p&gt;
&lt;p&gt;Can you imagine writing a complete functional simulator for a CPU architecture in Python? This talk describes the Revelation simulator for the Adapteva Epiphany architecture. The simulator is written in RPython, the restricted Python that underlies the PyPy interpreter, and uses Pydgin, a framework for writing CPU simulators . Revelation is simple to understand (because Python) but also fast (thanks to the automatically generated just-in-time interpreter provided by the RPython toolchain). By the end of this talk you will be convinced that functional simulators for complex CPU architectures can actually be pretty simple to implement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Mount</dc:creator><pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-18:pycon-uk-2016/simulating-a-cpu-with-python.html</guid></item><item><title>Message-passing concurrency for Python</title><link>https://pyvideo.org/europython-2014/message-passing-concurrency-for-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Concurrency and parallelism in Python are always hot topics. This talk
will look the variety of forms of concurrency and parallelism. In
particular this talk will give an overview of various forms of
message-passing concurrency which have become popular in languages like
Scala and Go. A Python library called python-csp which implements
similar ideas in a Pythonic way will be introduced and we will look at
how this style of programming can be used to avoid deadlocks, race
hazards and &amp;quot;callback hell&amp;quot;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrency and parallelism in Python are always hot topics. Early
Python versions had a threading library to perform concurrency over
operating system threads, Python version 2.6 introduced the
multiprocessing library and Python 3.2 has introduced a futures library
for asynchronous tasks. In addition to the modules in the standard
library a number of packages such as gevent exist on PyPI to implement
concurrency with &amp;quot;green threads&amp;quot;.&lt;/p&gt;
&lt;p&gt;This talk will look the variety of forms of concurrency and parallelism.
When are the different libraries useful and how does their performance
compare? Why do programmers want to &amp;quot;remove the GIL&amp;quot; and why is it so
hard to do? In particular this talk will give an overview of various
forms of message-passing concurrency which have become popular in
languages like Scala and Go. A Python library called python-csp which
implements similar ideas in a Pythonic way will be introduced and we
will look at how this style of programming can be used to avoid
deadlocks, race hazards and &amp;quot;callback hell&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Mount</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/message-passing-concurrency-for-python.html</guid></item></channel></rss>