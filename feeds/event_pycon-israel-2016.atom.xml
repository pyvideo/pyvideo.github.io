<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-israel-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-10T00:00:00+00:00</updated><entry><title>Building Python with Bazel</title><link href="https://pyvideo.org/pycon-israel-2016/building-python-with-bazel.html" rel="alternate"></link><published>2016-10-10T00:00:00+00:00</published><updated>2016-10-10T00:00:00+00:00</updated><author><name>Benjamin Peterson</name></author><id>tag:pyvideo.org,2016-10-10:pycon-israel-2016/building-python-with-bazel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bazel is a build system recently open sourced by Google. Even though Python doesn't require 'building' in the traditional way like C++, large code bases can benefit from Bazel's features. Bazel provides powerful tools for expressing and querying dependencies—even between systems in different languages.&lt;/p&gt;
&lt;p&gt;It also makes it possible to bundle applications with all of their dependencies into a hermetic package for distribution. This talk will cover:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;an introduction to Bazel and how it differs from other build systems,&lt;/li&gt;
&lt;li&gt;how Bazel can be used with Python, and&lt;/li&gt;
&lt;li&gt;the limitations of Bazel.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/benjamin-peterson.pdf"&gt;http://il.pycon.org/2016/static/sessions/benjamin-peterson.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Generating, automating and processing 3D graphics with Blender's python API</title><link href="https://pyvideo.org/pycon-israel-2016/generating-automating-and-processing-3d-graphics-with-blenders-python-api.html" rel="alternate"></link><published>2016-10-10T00:00:00+00:00</published><updated>2016-10-10T00:00:00+00:00</updated><author><name>Tamir Lousky</name></author><id>tag:pyvideo.org,2016-10-10:pycon-israel-2016/generating-automating-and-processing-3d-graphics-with-blenders-python-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is often used as a scripting language within graphics software. One of these is the open source 3D animation program Blender, which has a powerful python API that can be extended with any python library. At Invertex, we use this tool to automatically analyze 3D scans and generate custom products, in some cases ready for 3D printing. This talk will provide a short overview of Blender and its python API, and demonstrate how to use it with a few short examples.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/tamir-lousky.pdf"&gt;http://il.pycon.org/2016/static/sessions/tamir-lousky.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Network Analysis with Python</title><link href="https://pyvideo.org/pycon-israel-2016/network-analysis-with-python.html" rel="alternate"></link><published>2016-10-10T00:00:00+00:00</published><updated>2016-10-10T00:00:00+00:00</updated><author><name>Orsolya Vasarhelyi</name></author><id>tag:pyvideo.org,2016-10-10:pycon-israel-2016/network-analysis-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extracting meaning from data is one of the biggest challenge in science and industry. We can see many types of network-like data in Nature and man-made systems from social networks to protein-protein interaction networks. Here, I would like to show the capabilities of NetworkX which is a package for creation, manipulation and studying complex networks with Python. The topics involved this presentation will be:&lt;/p&gt;
&lt;ol class="lowerroman simple"&gt;
&lt;li&gt;a very brief introduction to NetworkX (also mentioning other relevant python packages); and&lt;/li&gt;
&lt;li&gt;real examples and use cases in the second part (community detection and visualization with python), with a little hands-on session.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slides available here:
&lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/orsolya-vasarhelyi.pdf"&gt;http://il.pycon.org/2016/static/sessions/orsolya-vasarhelyi.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and here (requires flash):
&lt;a class="reference external" href="http://prezi.com/szsbgd2ortmu/?utm_campaign=share&amp;amp;utm_medium=copy&amp;amp;rc=ex0share"&gt;http://prezi.com/szsbgd2ortmu/?utm_campaign=share&amp;amp;utm_medium=copy&amp;amp;rc=ex0share&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introduction to app development with OpenStack SDK</title><link href="https://pyvideo.org/pycon-israel-2016/introduction-to-app-development-with-openstack-sdk.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Francesco Vollero</name></author><id>tag:pyvideo.org,2016-10-09:pycon-israel-2016/introduction-to-app-development-with-openstack-sdk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever thought about what it takes to write a scalable cloud application using an OpenStack SDK? My talk is aiming to introduce the audience to the 'magicness' of the OpenStack SDK to develop applications that could use effectively all the features exposed. This talk is a way to evangelize people to use the proper tools and getting in touch with what's already out there instead to rewrite everything from scratch or reinvent the wheel. At the end of the talk the audience will see and 'touch' how easy is to write from scratch an application and make use of it, immediately using for example the trystack environment. Since the talk time is 30 minutes, there will be a template on github from what to start and at the end the working apps.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/francesco-vollerol.pdf"&gt;http://il.pycon.org/2016/static/sessions/francesco-vollerol.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Keynotes session</title><link href="https://pyvideo.org/pycon-israel-2016/keynotes-session.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2016-10-09:pycon-israel-2016/keynotes-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Due to technical reasons this session is missing the recording of the laptop, which is important for this kind of a keynote.
Nevertheless there's still tremendous value in watching the video and the slides which are available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/raymond-hettinger.pdf"&gt;http://il.pycon.org/2016/static/sessions/raymond-hettinger.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Poetry in Python: Using Markov Chains to Generate Texts</title><link href="https://pyvideo.org/pycon-israel-2016/poetry-in-python-using-markov-chains-to-generate-texts.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Omer Nevo</name></author><id>tag:pyvideo.org,2016-10-09:pycon-israel-2016/poetry-in-python-using-markov-chains-to-generate-texts.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markov chains are an incredibly simple way to understand text and speech. In this talk we'll implement Markov chains, train them on different data and try to let python create new texts on it's own. Let's see how well this basic method does in creating texts that simulate poetry, famous books and other interesting things. The results might surprise you.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/omer-nevo.pdf"&gt;http://il.pycon.org/2016/static/sessions/omer-nevo.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Fight or Flight? - dealing with real world applications in Python</title><link href="https://pyvideo.org/pycon-israel-2016/fight-or-flight-dealing-with-real-world-applications-in-python.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Gabor Szabo</name></author><id>tag:pyvideo.org,2016-09-22:pycon-israel-2016/fight-or-flight-dealing-with-real-world-applications-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have just landed a new job as a hero Python developer. Your first task is simple. Make a little tweak to an existing application. To your horror you discover the code is a mess written in the past 10 years by many different people who have just started their career as Python programmers. They all have already move on. They left behind the code, but it has no tests and no documentation. Oh and by the way, the company depends on the application. What do you do now? Fight or flight? In this talk you will hear about a couple of ways to fight with such a beast.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/gabor-szabo.pdf"&gt;http://il.pycon.org/2016/static/sessions/gabor-szabo.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Hacking the Selenium WebDriver</title><link href="https://pyvideo.org/pycon-israel-2016/hacking-the-selenium-webdriver.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Daniel Puterman</name></author><id>tag:pyvideo.org,2016-09-22:pycon-israel-2016/hacking-the-selenium-webdriver.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we would dive into the the heart of the Selenium WebDriver's python implementation. WebDriver is the de-facto automation standard for the web, and quite recently a rising start in mobile automation as well (via Appium). We will briefly describe the WebDriver wire protocol, which is the API layer of the automation, and see its python implementation. We will build a quick SDK wrapping the WebDriver class: It will be able to record (and export) actions done using a WebDriver instance, which can later be viewed or replayed by external tools.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/daniel-puterman.pdf"&gt;http://il.pycon.org/2016/static/sessions/daniel-puterman.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>If They Build It… They will code...(lessons from a school coding club)</title><link href="https://pyvideo.org/pycon-israel-2016/if-they-build-it-they-will-codelessons-from-a-school-coding-club.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Rony Sheer</name></author><id>tag:pyvideo.org,2016-09-22:pycon-israel-2016/if-they-build-it-they-will-codelessons-from-a-school-coding-club.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why do people say “I don’t like programming” without having tried it? Could it be that we are not teaching the right stuff? For the past year, Rony Sheer has been running the Code4Change hacking program at Tichonet High School and has lessons from the trenches. How do you teach teenagers to build Django apps together? How can agile methodology change education? What happens when you stop teaching “programming” and start teaching “making”? This is a talk about our role in introducing young people to code.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/rony-sheer.pdf"&gt;http://il.pycon.org/2016/static/sessions/rony-sheer.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Quick and robust CLI creation with Click module</title><link href="https://pyvideo.org/pycon-israel-2016/quick-and-robust-cli-creation-with-click-module.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Ilia Meerovich</name></author><id>tag:pyvideo.org,2016-09-22:pycon-israel-2016/quick-and-robust-cli-creation-with-click-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'll show how we can create very quickly rich CLI front-end for Python programs. Than I will explain how we can make this CLI expandable and Independent from back-end. Attendees will gain knowledge how to use Python Click module in order to create powerful, easily expandable and maintaniable front-end for their programs in a very quick way.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/ilia-meerovich.pdf"&gt;http://il.pycon.org/2016/static/sessions/ilia-meerovich.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Deep dive into threat detection in the cloud with Spark and Python</title><link href="https://pyvideo.org/pycon-israel-2016/deep-dive-into-threat-detection-in-the-cloud-with-spark-and-python.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>David Melamed</name></author><id>tag:pyvideo.org,2016-09-21:pycon-israel-2016/deep-dive-into-threat-detection-in-the-cloud-with-spark-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine learning is all over the place. In the cyber space, it's one of the biggest buzzwords of 2015 and most prominent tools used to detect anomalies, in particular when involved in User Behavior Analysis. This talk is a journey inside the cyber security techniques put in place at CloudLock to detect anomalies using Python. We will start our journey by looking at the data collection and processing implemented mostly inside celery tasks in order to produce a clean and enriched feed of billions of events daily. We will then present our use of Apache Spark MLLib with python and how we leverage AWS Lambda and EMR in our flexible infrastructure. Finally, we will show an example of data visualization around our threat map. We will also discuss the pros and cons of using Python with Apache Spark when dealing with scale as well as Docker as a way to encapsulate some parts of the data pipeline and to serve the models to the application. Come learn how to build an efficient ETL at scale using Python all the way!&lt;/p&gt;
&lt;p&gt;Slides available here: Deep dive into threat detection in the cloud with Spark and Python by David Melamed&lt;/p&gt;
</summary></entry><entry><title>Optimizing Latency</title><link href="https://pyvideo.org/pycon-israel-2016/optimizing-latency.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Imri Goldberg</name></author><id>tag:pyvideo.org,2016-09-21:pycon-israel-2016/optimizing-latency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any growing startup will at some point face the problem of making their product work fast enough to provide a good user experience. At Desti, we had to get our search from taking multiple seconds to an average of 300ms. To achieve that goal, we developed a tool and methodology for measurement, and employed multiple techniques of optimization. We improved our architecture, system design, and implementation before reaching that goal. In this talk, I’ll share our measurement tool and methodology, and the optimization techniques we used.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/imri-goldberg.pdf"&gt;http://il.pycon.org/2016/static/sessions/imri-goldberg.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Packaging / dependecy hell in python</title><link href="https://pyvideo.org/pycon-israel-2016/packaging-dependecy-hell-in-python.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Niv Mizrahi</name></author><id>tag:pyvideo.org,2016-09-21:pycon-israel-2016/packaging-dependecy-hell-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will discuss packing, dependencies and deploying apps in python. We all love python, The syntax is simple and expressive, it has tons of open source modules and frameworks and a great community.&lt;/p&gt;
&lt;p&gt;However one of pythons biggest pitfalls is the lack of clear way for deploying python apps. We will discuss and show packaging, dependency management and deployment solutions in Python. The talk will be separated to four short parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python packaging pitfalls&lt;/li&gt;
&lt;li&gt;What can python learn from NPM&lt;/li&gt;
&lt;li&gt;Our current solutions: from DEB/RPM to docker&lt;/li&gt;
&lt;li&gt;What new in python 3.X and packaging (venv, ensurepip, zipapp)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/niv-mizrahi.pdf"&gt;http://il.pycon.org/2016/static/sessions/niv-mizrahi.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Running upstream Spacewalk tests using Ansible and Vagrant</title><link href="https://pyvideo.org/pycon-israel-2016/running-upstream-spacewalk-tests-using-ansible-and-vagrant.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Aleš Dujíček</name></author><id>tag:pyvideo.org,2016-09-21:pycon-israel-2016/running-upstream-spacewalk-tests-using-ansible-and-vagrant.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We have many tests for our product running in our test lab managed by Beaker. Unfortunately our community do not have access to this environment. And it would be too complicated for them to set up the same environment to test their contributions to upstream project. But we can provide them easy to use solution with Vagrant and Ansible. Vagrant is a tool for creating and configuring virtual development environment. And Ansible is configuration and management tool what can be used to configure Vagrant systems. I will introduce these projects, and show practical example how to use them to to set up testing environment for community contributing to upstream project of our enterprise application.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/ales-dujicek.pdf"&gt;http://il.pycon.org/2016/static/sessions/ales-dujicek.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>When Dependencies between Test Cases are Inevitable</title><link href="https://pyvideo.org/pycon-israel-2016/when-dependencies-between-test-cases-are-inevitable.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Irina Gulina</name></author><id>tag:pyvideo.org,2016-09-21:pycon-israel-2016/when-dependencies-between-test-cases-are-inevitable.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You need to test your images on various instance types in the cloud, but which tools do you use? How to run dozens of thousands of test cases on hundreds of machines in the cloud in parallel? Is it OK to have dependencies between test cases to make this task less expensive?&lt;/p&gt;
&lt;p&gt;Dva is an open source validation tool which is applicable to various images and instance types. Using your image, it will launch instances of different types in defined regions and will execute test cases in parallel. How?&lt;/p&gt;
&lt;p&gt;All test cases are represented as a Directed Acyclic Graph structure – parents and children. Then these test cases are assigned to workers by a modified BFS algorithm that allows processing of sibling test cases in parallel. It includes test result processing tools such as a Bugzilla module to report bugs for you. 3rd-party test case modules are supported too.&lt;/p&gt;
&lt;p&gt;This tool is used by Red Hat QE for RHEL image release sanity testing in EC2, however Fedora images and OpenStack cloud are supported too. To test a RHEL release, Dva launches hundreds of machines of various types in all EC2 regions and executes a set of nearly 70 test cases with dependencies on every machine in parallel.&lt;/p&gt;
&lt;p&gt;Source Code/Home page: &lt;a class="reference external" href="https://github.com/RedHatQE/dva/"&gt;https://github.com/RedHatQE/dva/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Topics: Open Source, Cloud, QA/QE, Automation, Python&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/irina-igulina.pdf"&gt;http://il.pycon.org/2016/static/sessions/irina-igulina.pdf&lt;/a&gt;&lt;/p&gt;
</summary><category term="Open Source"></category><category term="Cloud"></category><category term="QA/QE"></category><category term="Automation"></category></entry><entry><title>Algorithms to Sample From Streams - Reservoir Sampling &amp; Variants</title><link href="https://pyvideo.org/pycon-israel-2016/algorithms-to-sample-from-streams-reservoir-sampling-variants.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Jonathan Arfa</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/algorithms-to-sample-from-streams-reservoir-sampling-variants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Those of us who build systems that deal with constant streams of incoming data (which includes anybody whose code touches the internet) often need algorithms that keep a fixed-size sample from the stream for on-the-fly analytics. Reservoir sampling is a commonly used algorithm for keeping a sample that's unbiased over all events in the stream. But what if you want your algorithm to keep a representative sample from the past 10 minutes instead of the entire stream? In this talk I'll start with a gentle introduction to Reservoir sampling for those who are not familiar with it, and then discuss several variants which keep a sample that is biased towards the present. One of these is the VIRB (Variable Incoming Rate Biased) sampler, which we have developed in-house at Magnetic. This talk covers the same material as this blog post: &lt;a class="reference external" href="http://tech.magnetic.com/2016/04/virbs-sampling-events-from-streams.html"&gt;http://tech.magnetic.com/2016/04/virbs-sampling-events-from-streams.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/jonathan-arfa.pdf"&gt;http://il.pycon.org/2016/static/sessions/jonathan-arfa.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>CPython byte-code and code-injection</title><link href="https://pyvideo.org/pycon-israel-2016/cpython-byte-code-and-code-injection.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Tom Zickel</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/cpython-byte-code-and-code-injection.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Description:&lt;/p&gt;
&lt;p&gt;Want to know what makes CPython interpreter's engine tick?&lt;/p&gt;
&lt;p&gt;How about modifying Python's bytecode or maybe modifying it live in another running Python process?&lt;/p&gt;
&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;In this talk we will go into what is in a Python .pyc file and how CPython executes that bytecode (mainly by looking at the code object). Afterwards we will talk about how to make simple modifications to the bytecode in order to insert hook points into preexisting code. We will see how we can use pyrasite for inspecting and modifying an already running Python process (useful for debugging long-running servers or detecting memory leaks). Finally, we will survey some more generic Python bytecode modifiers and code injectors.&lt;/p&gt;
&lt;p&gt;Bonus points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How can CPython 2 (but not 3) can create valid yet unusable or wrong .pyc files from .py files? The talk will be based mainly on CPython 2.7.&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/tzickel/bytehook"&gt;bytehook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/lmacken/pyrasite"&gt;pyrasite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/llllllllll/codetransformer"&gt;codetransformer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Microsoft/PTVS/blob/0a3d9d17008e8d9b8fe2cb40c6c501f13861ccdb/Python/Product/PyDebugAttach/PyDebugAttach.cpp"&gt;PTVS code injector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;that 20 years unclosed &lt;a class="reference external" href="https://bugs.python.org/issue25083"&gt;python 2 bug&lt;/a&gt; mentioned in the bonus points: )  + another timing quirk not documented.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides available here:
&lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/tom-zickel.pdf"&gt;http://il.pycon.org/2016/static/sessions/tom-zickel.pdf&lt;/a&gt;
and here:
&lt;a class="reference external" href="http://tom.zickel.org/pyconil-2016"&gt;http://tom.zickel.org/pyconil-2016&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>From Experimentation to Production: Pandas and Sci-Kit learn on Azure ML</title><link href="https://pyvideo.org/pycon-israel-2016/from-experimentation-to-production-pandas-and-sci-kit-learn-on-azure-ml.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Ari Bornstein</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/from-experimentation-to-production-pandas-and-sci-kit-learn-on-azure-ml.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas and Sci-Kit learn are powerful open source data science and machine learning toolkits. However, putting them into production is not as seamless as it could be. In this talk attendees will learn how to build, visualize and connect Pandas and SciKit learn ensemble models into an Azure ML pipeline for experimentation and production.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/ari-bornstein.pdf"&gt;http://il.pycon.org/2016/static/sessions/ari-bornstein.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Getting started with chatops in python with errbot</title><link href="https://pyvideo.org/pycon-israel-2016/getting-started-with-chatops-in-python-with-errbot.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Guillaume Binet</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/getting-started-with-chatops-in-python-with-errbot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ChatOps is about bringing your devops tools into your team chatroom. The recent rise of professional chatting services like Slack or Hipchat shows that people are embracing a new way of collaborating. Bringing your tools within those conversations tightens the feedback loop, improves information sharing and onboarding new people in your team. Some common operations implemented with chatops includes deployments, provisioning, monitoring, graphs, development tracking... Those are often implemented with the help of a chat bot like in this presentation Errbot. If your chatops system can be easily extended, for example here in Python, we will see that a team culture can crystallize around it with fun additions. This presentation's goal is to show you how easy it is to get started with chatops in Python, with some technical tips (installation, security, architecture...) but also some social tips to make your company understand better its potential for your team.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/guillaume-binet.pdf"&gt;http://il.pycon.org/2016/static/sessions/guillaume-binet.pdf&lt;/a&gt;&lt;/p&gt;
</summary><category term="errbot"></category><category term="chatops"></category><category term="devops"></category></entry><entry><title>How to Study Evolution Using Scientific Python</title><link href="https://pyvideo.org/pycon-israel-2016/how-to-study-evolution-using-scientific-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Yoav Ram</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/how-to-study-evolution-using-scientific-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Evolution takes place in large populations over long time and geographic scales. Due to these constraints, mathematical and computational approaches have been used to study evolution since the 1920's, leading to important developments in modern statistics, mathematics, and computer science. In this talk we will see how Scientific Python can be used to study evolutionary theory using mathematical and computational models. We'll see how to run fast evolutionary simulations with NumPy, analyze and visualize simulation results with Pandas and Seaborn, and find solutions to evolutionary models using SciPy and SymPy. Everything will be done in an open GitHub repo and presented using an online Jupyter Notebook to allow listeners to participate. This talk is a wonderful opportunity to discover how theoretical evolutionary biologists approach their research, as well as an occasion to learn about Scientific Python through actual research-based examples.&lt;/p&gt;
&lt;p&gt;Slides available here:
&lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/yoav-ram.pdf"&gt;http://il.pycon.org/2016/static/sessions/yoav-ram.pdf&lt;/a&gt;
and also:
&lt;a class="reference external" href="https://github.com/yoavram/PyConIL2016"&gt;https://github.com/yoavram/PyConIL2016&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Pandas - not just for data scientists</title><link href="https://pyvideo.org/pycon-israel-2016/pandas-not-just-for-data-scientists.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Uzi Halaby-Senerman</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/pandas-not-just-for-data-scientists.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is not a tutorial. It's an attempt to expose non data scientists experiencied pythonistas to the powerful pandas library. Most of python developers don't use pandas (either because they never heard of it, felt that it's a too steep learning curve or never thought that it will be useful for them). I intend to talk about python performance limitations and show how pandas can be used to overcome some of these limitations.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/uzi-hs.pdf"&gt;http://il.pycon.org/2016/static/sessions/uzi-hs.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python as a brain for your devices (web developement, hardware 'IoT', etc.)</title><link href="https://pyvideo.org/pycon-israel-2016/python-as-a-brain-for-your-devices-web-developement-hardware-iot-etc.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Jonathan Schemoul</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/python-as-a-brain-for-your-devices-web-developement-hardware-iot-etc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you talk between python and embedded apps ? I'll show an example using the very popular ESP8266 micro-controller, with popular messaging protocols (json, mqtt, etc.) and web interface using react and material ui.&lt;/p&gt;
</summary></entry><entry><title>Python In The Serverless Era</title><link href="https://pyvideo.org/pycon-israel-2016/python-in-the-serverless-era.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Benny Bauer</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/python-in-the-serverless-era.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless Architecture is considered to be the successor of PaaS model and is the next phase in the evolution of cloud development. As one of only 3 languages supported by AWS Lambda, these are very exciting times for Python. This talk will review the serverless ecosystem, use cases and the role Python plays in it.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/benny-bauer.pdf"&gt;http://il.pycon.org/2016/static/sessions/benny-bauer.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Type hints in Python</title><link href="https://pyvideo.org/pycon-israel-2016/type-hints-in-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Eli Gur</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/type-hints-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Short intro for the new feature of Python 3.5 and how it can improve your Python coding&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/eli-gur-typehints.pdf"&gt;http://il.pycon.org/2016/static/sessions/eli-gur-typehints.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>When Regular Expressions are Not Enough</title><link href="https://pyvideo.org/pycon-israel-2016/when-regular-expressions-are-not-enough.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Nati Cohen</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/when-regular-expressions-are-not-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Handling input languages like XML, YAML, or JSON is simple enough, just grab your favorite module and hammer it out. But what should one do when facing a more obscure markup language, configuration file or another artifact of a developer with acute NIH syndrome? In this talk we’ll (quickly) revisit formal languages basics and what can and cannot be parsed. We will then introduce parsimonious, a simple, fast, and economic Parsing Expression Grammar parser written by Eric Rose.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/nati-cohen.pdf"&gt;http://il.pycon.org/2016/static/sessions/nati-cohen.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Wrestling Python into LLVM Intermediate Representation</title><link href="https://pyvideo.org/pycon-israel-2016/wrestling-python-into-llvm-intermediate-representation.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Anna Herlihy</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/wrestling-python-into-llvm-intermediate-representation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is LLVM-IR? The LLVM Compiler Infrastructure Project provides a transportable intermediate representation (LLVM-IR) that can be compiled and linked into multiple types of assembly code. LLVM-IR is great because you can take any language and distill it into a form that can be run on many different machines. Once the code gets into IR it doesn’t matter what platform it was originally written on, and it doesn’t matter that Python can be slow. It doesn’t matter if you have weird CPUs - if they are supported by LLVM it will run. What is Tupleware? TupleWare is an analytical framework built at Brown University that allows users to compile functions into distributed programs that are automatically deployed. TupleWare is unique because it uses LLVM-IR to be language and platform independent. What is PyLLVM? This is the heart of the talk. PyLLVM is a simple, easy to extend, one-pass static compiler that takes in the subset of Python most likely to be used by Tupleware. PyLLVM is based on an existing project called py2llvm (&lt;a class="reference external" href="https://code.google.com/archive/p/py2llvm"&gt;https://code.google.com/archive/p/py2llvm&lt;/a&gt;) that was abandoned around 2011. This talk will go through some basic compiler design and talk about how some LLVM-IR features make our lives easier, and some much harder. It will cover types, scoping, memory management, and other implementation details. To conclude, it will compare PyLLVM to Numba, a Python-to-LLVM compiler from Continuum Analytics and touch on what the future has in store for PyLLVM. Talk Objective Attendees will learn what LLVM-IR is and how it can be leveraged to allow data scientists to write their algorithms in Python. They will leave with a high-level understanding of the design process and considerations of writing a simple compiler. Last, they will know all about how PyLLVM coaxes Python code into LLVM-IR. It will become evident how cool LLVM and Python can be when they work together!&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/anna-herlihy.pdf"&gt;http://il.pycon.org/2016/static/sessions/anna-herlihy.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Debugging Hung Python Processes With GDB</title><link href="https://pyvideo.org/pycon-israel-2016/debugging-hung-python-processes-with-gdb.html" rel="alternate"></link><published>2016-09-19T00:00:00+00:00</published><updated>2016-09-19T00:00:00+00:00</updated><author><name>John Schwarz</name></author><id>tag:pyvideo.org,2016-09-19:pycon-israel-2016/debugging-hung-python-processes-with-gdb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Complex Python programs can be rather difficult to debug when hung. Finding out why a 500k lines process is completely stuck can be a daunting task, especially since PDB can't be attached to the stuck process in order to display rudimentary details such as local/global variables, stack traces and more. However, this can be mitigated greatly by tools such as GDB and strace. This talk will focus on such methods that will surely help you debug such programs.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/john-schwarz.pdf"&gt;http://il.pycon.org/2016/static/sessions/john-schwarz.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How to make Python perform like C</title><link href="https://pyvideo.org/pycon-israel-2016/how-to-make-python-perform-like-c.html" rel="alternate"></link><published>2016-09-19T00:00:00+00:00</published><updated>2016-09-19T00:00:00+00:00</updated><author><name>Ron Barak</name></author><id>tag:pyvideo.org,2016-09-19:pycon-israel-2016/how-to-make-python-perform-like-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will present several strategies and tools that will allow Python code to run as lower-level code. Will touch on JIT vs. AOT compilers, which are the task suitable to be compiled so as to perform faster than native Python? How can one annotate Python to speed up compiled Python code? Optionally (time permitting): writing Python modules in C or Fortran, and using libraries from C or Fortran in Python.&lt;/p&gt;
&lt;p&gt;Slides available here: How to make Python perform like C by Ron Barak&lt;/p&gt;
</summary></entry><entry><title>PyTest, the testing framework you've been dreaming of</title><link href="https://pyvideo.org/pycon-israel-2016/pytest-the-testing-framework-youve-been-dreaming-of.html" rel="alternate"></link><published>2016-09-19T00:00:00+00:00</published><updated>2016-09-19T00:00:00+00:00</updated><author><name>Eli Gur</name></author><id>tag:pyvideo.org,2016-09-19:pycon-israel-2016/pytest-the-testing-framework-youve-been-dreaming-of.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to PyTest enabling people a simple start with it as well getting the information about its strengths and features&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/eli-gur-pytest.pdf"&gt;http://il.pycon.org/2016/static/sessions/eli-gur-pytest.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introduction to JSON Schema</title><link href="https://pyvideo.org/pycon-israel-2016/introduction-to-json-schema.html" rel="alternate"></link><published>2016-09-07T00:00:00+00:00</published><updated>2016-09-07T00:00:00+00:00</updated><author><name>Julian Berman</name></author><id>tag:pyvideo.org,2016-09-07:pycon-israel-2016/introduction-to-json-schema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;JSON Schema (&lt;a class="reference external" href="http://json-schema.org/"&gt;http://json-schema.org/&lt;/a&gt;) is an increasingly popular, cross-language specification for schematization of JSON documents. It represents schema constraints on a JSON document as a JSON document, in a flexible validation language. We’ll investigate some simple (and not so simple) examples of data validation using the jsonschema Python package (&lt;a class="reference external" href="https://pypi.python.org/pypi/jsonschema"&gt;https://pypi.python.org/pypi/jsonschema&lt;/a&gt;), which implements the specification.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/julian-berman.pdf"&gt;http://il.pycon.org/2016/static/sessions/julian-berman.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Many Faces of Concurrency in Python</title><link href="https://pyvideo.org/pycon-israel-2016/the-many-faces-of-concurrency-in-python.html" rel="alternate"></link><published>2016-09-07T00:00:00+00:00</published><updated>2016-09-07T00:00:00+00:00</updated><author><name>Sagiv Malihi</name></author><id>tag:pyvideo.org,2016-09-07:pycon-israel-2016/the-many-faces-of-concurrency-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'll talk about the many ways to achieve concurrency in Python, including multi-threading, multi-processing, gevent, and maybe even asyncio / python 3.5's async-await. The talk will include examples from our experience developing a scale-out system for managing huge cellular networks in pure python.&lt;/p&gt;
&lt;p&gt;Slides available here:
&lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/sagiv-malihi.pdf"&gt;http://il.pycon.org/2016/static/sessions/sagiv-malihi.pdf&lt;/a&gt;
and here:
&lt;a class="reference external" href="https://docs.google.com/presentation/d/1OM3UkcwZIjESw9M4peTLRYxc327vHS2F9P_LCdAZ78g/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/1OM3UkcwZIjESw9M4peTLRYxc327vHS2F9P_LCdAZ78g/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Practical Metaclasses and Decorators</title><link href="https://pyvideo.org/pycon-israel-2016/practical-metaclasses-and-decorators.html" rel="alternate"></link><published>2016-08-11T00:00:00+00:00</published><updated>2016-08-11T00:00:00+00:00</updated><author><name>Sim Zacks</name></author><id>tag:pyvideo.org,2016-08-11:pycon-israel-2016/practical-metaclasses-and-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python gives developers direct control over every stage of the OOP process. Metaclasses are the framework used in creating classes themselves and descriptors are what goes on behind the scene when you call a function or set an attribute. These programming tools are often considered to be among the black magic tools of expert python developers. However, they are not as scary as they look. In this talk, I will explain how metaclasses work and present some practical examples, including a minimally invasive way to add full usage/error logging to your entire application. When you leave my talk, you will have a newfound understanding of the power that metaclass programming and descriptor manipulation can give you.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/sim-zacks.pdf"&gt;http://il.pycon.org/2016/static/sessions/sim-zacks.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>What's new in PyPy and what will be next</title><link href="https://pyvideo.org/pycon-israel-2016/whats-new-in-pypy-and-what-will-be-next.html" rel="alternate"></link><published>2016-08-11T00:00:00+00:00</published><updated>2016-08-11T00:00:00+00:00</updated><author><name>Matti Picus</name></author><id>tag:pyvideo.org,2016-08-11:pycon-israel-2016/whats-new-in-pypy-and-what-will-be-next.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is moving toward the goto solution for improving python performance. We are expanding our support for the python capi, can support much of the numpy python interface, and should have released a Python 3.3 compatible version by the time Pycon Israel happens Attendees of the talk can see a full demo of PyPy on Windows, including installation of Numpy and running some scientific benchmarks.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/matti-picus.pdf"&gt;http://il.pycon.org/2016/static/sessions/matti-picus.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Keynotes: Growing Community That Makes a Difference</title><link href="https://pyvideo.org/pycon-israel-2016/keynotes-growing-community-that-makes-a-difference.html" rel="alternate"></link><published>2016-08-08T00:00:00+00:00</published><updated>2016-08-08T00:00:00+00:00</updated><author><name>Ola Sendecka</name></author><id>tag:pyvideo.org,2016-08-08:pycon-israel-2016/keynotes-growing-community-that-makes-a-difference.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/ola-and-ola.pdf"&gt;http://il.pycon.org/2016/static/sessions/ola-and-ola.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Keynotes: Scaling PyData Up and Out with Anaconda</title><link href="https://pyvideo.org/pycon-israel-2016/keynotes-scaling-pydata-up-and-out-with-anaconda.html" rel="alternate"></link><published>2016-08-08T00:00:00+00:00</published><updated>2016-08-08T00:00:00+00:00</updated><author><name>Travis Oliphant</name></author><id>tag:pyvideo.org,2016-08-08:pycon-israel-2016/keynotes-scaling-pydata-up-and-out-with-anaconda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/travis-oliphant.pdf"&gt;http://il.pycon.org/2016/static/sessions/travis-oliphant.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>