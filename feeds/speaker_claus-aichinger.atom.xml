<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_claus-aichinger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-03T00:00:00+00:00</updated><entry><title>Shipping Containers using Dunder Methods</title><link href="https://pyvideo.org/pycon-cz-2018/shipping-containers-using-dunder-methods.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>Claus Aichinger</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/shipping-containers-using-dunder-methods.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we delve into the world of container-related double underscore (dunder) methods which define an objectâ€™s behavior.&lt;/p&gt;
&lt;p&gt;We will discover some of the most important dunder methods along the lines of the following two use cases:&lt;/p&gt;
&lt;p&gt;How to extend a tuple to represent data?
How to implement a dict-like container for data handling?
In both cases we will try to quickly come up with implementations that not only serve our purpose, but also render easy-to-use containers mimicking already existing ones.&lt;/p&gt;
</summary></entry><entry><title>Scientific Computing with Python</title><link href="https://pyvideo.org/pycon-sk-2016/scientific-computing-with-python.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Claus Aichinger</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/scientific-computing-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You'll get a short overview of the Scientific Computing ecosystem in
Python and what kind of problems it can be applied to.&lt;/p&gt;
&lt;p&gt;In recent years, Python's scientific stack has emerged as a serious open
source alternative to established proprietary systems like MATLAB or
specialized solutions like R. However, the wide range of packages and
options is often confusing for inexperienced users - this talk aims to
provide a remedy.&lt;/p&gt;
&lt;p&gt;In particular, you'll learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why Scientific Computing with Python? (Motivation)&lt;/li&gt;
&lt;li&gt;What is it the scientific stack has to offer? (Interesting
packages/libraries)&lt;/li&gt;
&lt;li&gt;Who is using it? (Companies/applications working with Python's
scientific stack)&lt;/li&gt;
&lt;li&gt;How can I start? (Scientific Python distributions)&lt;/li&gt;
&lt;li&gt;Is it really that simple? (Yes! Showcases)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Lightning talks: PyDays Vienna</title><link href="https://pyvideo.org/pycon-sk-2017/lightning-talks-pydays-vienna.html" rel="alternate"></link><published>2017-03-12T00:00:00+00:00</published><updated>2017-03-12T00:00:00+00:00</updated><author><name>Claus Aichinger</name></author><id>tag:pyvideo.org,2017-03-12:pycon-sk-2017/lightning-talks-pydays-vienna.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks: Claus Aichinger - PyDays Vienna&lt;/p&gt;
</summary><category term="lightning talks"></category></entry></feed>