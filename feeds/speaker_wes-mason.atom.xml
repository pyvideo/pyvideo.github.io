<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_wes-mason.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-09-15T00:00:00+00:00</updated><entry><title>Ops for Humans</title><link href="https://pyvideo.org/pycon-uk-2018/ops-for-humans.html" rel="alternate"></link><published>2018-09-15T00:00:00+00:00</published><updated>2018-09-15T00:00:00+00:00</updated><author><name>Wes Mason</name></author><id>tag:pyvideo.org,2018-09-15:pycon-uk-2018/ops-for-humans.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure that makes everyone happy, not just your vendors&lt;/p&gt;
&lt;p&gt;A large focus of DevOps culture has been on embracing automation in
order to offload repetitive tasks from Smart People™ to our robot
overlords&lt;em&gt;COUGH&lt;/em&gt; I mean helpers, which can help lower business costs.&lt;/p&gt;
&lt;p&gt;But what if we focus not just on the bottom line and KPIs, but people
themselves?&lt;/p&gt;
&lt;p&gt;With some care and thought for the frustrations and cognitive issues
that devs, ops and business folk encounter regularly you'll not only
make everyone happier, but in turn improve business performance.&lt;/p&gt;
&lt;p&gt;Expect an overview and case-studies of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Common operations tools, and across software engineering (Python,
JavaScript etc.)&lt;/li&gt;
&lt;li&gt;Infrastructure patterns for deployments&lt;/li&gt;
&lt;li&gt;On call rotation and postmortems&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Stormy Webber</title><link href="https://pyvideo.org/pycon-uk-2014/stormy-webber.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Wes Mason</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/stormy-webber.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Wes Mason&lt;/p&gt;
&lt;p&gt;An introductory talk to building fast non-blocking async web services with Tornado, especially relevant to Django, Flask, bottle, web.py, Pyramid, Zope, Gevent, Twisted and every other web (or not) dev interested in learning what makes Tornado special for such tasks.&lt;/p&gt;
&lt;p&gt;Bonus: advanced tips and tricks for migrating from current systems and working with technologies such as WebSockets and Server Sent Events in Tornado.&lt;/p&gt;
</summary></entry><entry><title>How to deploy everything with Juju, twice</title><link href="https://pyvideo.org/pycon-pl-2014/how-to-deploy-everything-with-juju-twice.html" rel="alternate"></link><published>2014-10-16T00:00:00+00:00</published><updated>2014-10-16T00:00:00+00:00</updated><author><name>Wes Mason</name></author><id>tag:pyvideo.org,2014-10-16:pycon-pl-2014/how-to-deploy-everything-with-juju-twice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: How to deploy everything with Juju, twice
Prelegent/Speaker: Wes Mason&lt;/p&gt;
&lt;p&gt;Wanna deploy an app? How about a whole cluster of services? Let me show you how I can deploy an app, infrastructure and an OpenStack cluster 20 times a day, with some Python, some YAML, and a bit of Juju. Juju is an open source service orchestration framework/toolkit which allow you to work with services just as that: services, leaving much of the mundane details of infrastructure and deployment to it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>