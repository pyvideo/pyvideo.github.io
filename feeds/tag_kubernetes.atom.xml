<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_kubernetes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-31T00:00:00+00:00</updated><entry><title>Writing highly scalable and provenanceable data pipelines</title><link href="https://pyvideo.org/pycon-se-2019/writing-highly-scalable-and-provenanceable-data-pipelines.html" rel="alternate"></link><published>2019-10-31T00:00:00+00:00</published><updated>2019-10-31T00:00:00+00:00</updated><author><name>Guilherme Caminha</name></author><id>tag:pyvideo.org,2019-10-31:pycon-se-2019/writing-highly-scalable-and-provenanceable-data-pipelines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we are gonna explore launching and maintaining highly scalable data pipelines using Kubernetes. We are gonna go through the process of setting up a Pachyderm cluster and deploying Python-based data processing workloads. This setup enables teams to develop and maintain very robust data pipelines, with the benefits of autoscaling clusters and quick code iteration.&lt;/p&gt;
</summary><category term="kubernetes"></category><category term="data pipeline"></category></entry><entry><title>The journey of building a production-ready managed Kubernetes service</title><link href="https://pyvideo.org/kiwi-pycon-2019/the-journey-of-building-a-production-ready-managed-kubernetes-service.html" rel="alternate"></link><published>2019-08-24T00:00:00+00:00</published><updated>2019-08-24T00:00:00+00:00</updated><author><name>Fei Long Wang</name></author><id>tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/the-journey-of-building-a-production-ready-managed-kubernetes-service.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this presentation we will share Catalyst’s public cloud journey in building a production ready managed Kubernetes service on top of OpenStack.&lt;/p&gt;
</summary><category term="kubernetes"></category><category term="OpenStack"></category></entry><entry><title>Building a Celery alternative in Django on Kubernetes</title><link href="https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Alec Clowes</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I’ve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn’t about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform’s hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="celery"></category><category term="reactjs"></category><category term="postgresql"></category><category term="kubernetes"></category><category term="django"></category></entry><entry><title>PostgreSQL on the kube</title><link href="https://pyvideo.org/pycon-italia-2019/postgresql-on-the-kube.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Marco Nenciarini</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/postgresql-on-the-kube.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kubernetes è un sistema di orchestrazione di container che permette di
gestire il deploy, lo scaling e l’aggiornamento di una applicazione e di
tutti i suoi componenti.&lt;/p&gt;
&lt;p&gt;In questo talk parleremo di quali strumenti sono a disposizione per
effettuare un deploy di un database PostgreSQL in un cluster Kubernetes.
Inoltre vedremo come sia implementabile l’alta disponibilità e la
disaster recovery, in maniera da avere i propri dati al sicuro e sempre
accessibili.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1784"&gt;https://python.it/feedback-1784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 10:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="postgresql"></category><category term="postgres"></category><category term="kubernetes"></category><category term="storage"></category><category term="containers"></category><category term="docker"></category><category term="k8s"></category><category term="cloud"></category></entry><entry><title>DevOps di applicazioni Python (e non solo) su OpenShift</title><link href="https://pyvideo.org/pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Francesco Fiore</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenShift Origin è la Platform-as-a-Service opensource di riferimento.
Basata su Kubernetes e Docker, contiene features aggiuntive e
integrazioni con altri componenti che semplificano le pratiche di
DevOps.&lt;/p&gt;
&lt;p&gt;Dopo una breve introduzione ad Openshift ed alla sua architettura,
vedremo come:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fare il setup di infrastrutture applicative microservice-based (es.
microservizi Python Flask/Django, single page application Angular,
ecc…)&lt;/li&gt;
&lt;li&gt;creare una piattaforma di Continuous Integration e Continuous
Delivery&lt;/li&gt;
&lt;li&gt;implementare e gestire la CI/CD di microservice-based application
sfruttando l’integrazione con Git e Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architettura di base di OpenShift&lt;/li&gt;
&lt;li&gt;come costruire un &lt;em&gt;project&lt;/em&gt; OpenShift: &lt;em&gt;builds&lt;/em&gt; e &lt;em&gt;deployments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;automatizzare il setup mediante &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;utilizzare Git, Jenkins e Openshift per creare una semplice pipeline
di CI/CD&lt;/li&gt;
&lt;li&gt;strategie di deployment avanzate: &lt;em&gt;blue-green deployment&lt;/em&gt; , &lt;em&gt;A/B
deployment&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisiti"&gt;
&lt;h4&gt;Prerequisiti&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Git e Jenkins&lt;/li&gt;
&lt;li&gt;conoscenza base dei concetti CI/CD e DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="microservices"></category><category term="continuous-integration"></category><category term="git"></category><category term="continuous-delivery"></category><category term="kubernetes"></category><category term="devops"></category><category term="jenkins"></category><category term="docker"></category><category term="OpenShift"></category></entry><entry><title>PaaS per tutti i gusti: CI/CD sotto controllo con Kubernetes e Dokku</title><link href="https://pyvideo.org/pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Claudio Mignanti</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk saranno illustrati processi e workflow tipici dei
paradigmi del DevOp e delle metodologie Agile. Vedremo quali
&lt;strong&gt;accorgimenti&lt;/strong&gt; devono essere presi con le applicazioni pacchettizzate
con &lt;strong&gt;Docker&lt;/strong&gt; , in particolare le applicazioni Django e come &lt;strong&gt;evitare
le problematiche principali che portano frustrazione e impediscono
un’adozione reale della CI/CD&lt;/strong&gt;. Saranno presentati degli esempi pratici
&lt;strong&gt;workflow&lt;/strong&gt; implementati con successo, in modo snello, versionato e
ripetibile, in ambienti che vanno dal test fino alla produzione. In
ultimo faremo una carrellata dei sistemi di &lt;strong&gt;PaaS&lt;/strong&gt; più in voga del
momento concentrandoci quindi su &lt;strong&gt;Dokku&lt;/strong&gt; e &lt;strong&gt;Kubernetes&lt;/strong&gt; , che
coprono tutto il ventaglio delle necessità di deploy, dal piccolo sito
fino al sistema ultra scalabile e ridondato.&lt;/p&gt;
&lt;p&gt;Prerequisito per il talk è conoscere i concetti base di Docker e
dell’uso di git. Durante il talk con 3 distinti esempi e demo di
complessità crescente esploreremo il mondo della CI/CD.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="paas"></category><category term="continuous-integration"></category><category term="gitlab"></category><category term="kubernetes"></category><category term="testing"></category><category term="git"></category><category term="docker"></category></entry><entry><title>Democratizing Distributed Computing with Dask and JupyterHub</title><link href="https://pyvideo.org/pycon-us-2018/democratizing-distributed-computing-with-dask-and-jupyterhub.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Matthew Rocklin</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/democratizing-distributed-computing-with-dask-and-jupyterhub.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We use JupyterHub, XArray, Dask, and Kubernetes to build a cloud-based system to enable scientists to analyze and manage large datasets.  We use this in practice to serve a broad community of atmospheric and climate scientists.&lt;/p&gt;
&lt;p&gt;Atmospheric and climate scientists analyze large volumes of observational and simulated data to better understand our planet.  They have historically used tools like NumPy and SciPy along with Jupyter notebooks to combine efficient computation with accessibility.  However, as datasets increase in size and collaboration extends to new populations of scientists these tools begin to feel their age.  In this talk we use more recent libraries to build a modern deployment for academic scientists.  In particular we use the following tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Dask:&lt;/strong&gt; to parallelize and scale NumPy computations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XArray&lt;/strong&gt;: as a self-discribing data model and tool kit for labeled and index arrays&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JupyterLab:&lt;/strong&gt; to enable more APIs for users beyond the classic notebook&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JupyterHub:&lt;/strong&gt; to manage users and maintain environments for a new population of cloud-friendly users&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes:&lt;/strong&gt; to manage everything and deploy easily on cloud hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will focus less on how these libraries work and will instead be a case study of using them together in an operational setting.  During the talk we will build up and deploy a running system that the audience can then use to access distributed computing resources.&lt;/p&gt;
</summary><category term="jupyterhub"></category><category term="xarray"></category><category term="dask"></category><category term="kubernetes"></category></entry><entry><title>A Python-flavored Introduction to Containers And Kubernetes</title><link href="https://pyvideo.org/pycon-us-2018/a-python-flavored-introduction-to-containers-and-kubernetes.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Ruben Orduz</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/a-python-flavored-introduction-to-containers-and-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containers have more or less taken over the world of application, web APIs, mobile endpoints and other forms of deployment. They have become the currency, the &amp;quot;table stakes&amp;quot; and de-facto application deployment unit. Their raise to the fore has brought about a whole host of use cases which weren't practical or accessible in the world of &amp;quot;classic&amp;quot; paradigms of infrastructure and virtualization. Containers have also brought application deployment closer and more accessible to developers.&lt;/p&gt;
&lt;p&gt;But as more use cases, deployment styles and exponential adoption of containers was ongoing, a new set of problems began to surface: how do you manage the ever growing number of containers in a deployment? How do you make sure containers have the right resources, deployed to the right machine, running with the correct parameters, how do you scale in and out without disruption? How do you make sure in a fleet of X containers that they’re all running and in healthy state? Enter Kubernetes.&lt;/p&gt;
&lt;p&gt;Initially developed internally by Google to replace their own complex container orchestration and management framework. It had to meet all the stringent standards and mind-boggling scale that Google operates on, but from the get-go an effort was made to make the learning curve and developer experience as approachable as possible. At certain point the creators made the case to Google to release kubernetes to the open source community -- a crucial decision that has helped “k8s” (as it’s commonly referred to as) reach rock star levels of fame and mind share not just in the FOSS community but also across industries and businesses from small operations to gigantic multinational corporations with thousands of deployments.&lt;/p&gt;
</summary><category term="containers"></category><category term="kubernetes"></category></entry><entry><title>Going Serverless with OpenFaaS, Kubernetes, and Python</title><link href="https://pyvideo.org/pycon-us-2018/going-serverless-with-openfaas-kubernetes-and-python.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Michael Herman</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/going-serverless-with-openfaas-kubernetes-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenFaaS (Functions as a Service) is a framework for building serverless, event-driven functions with Docker and Kubernetes.&lt;/p&gt;
&lt;p&gt;In this tutorial, you'll learn how to build and deploy a full-stack application that uses Flask (client-facing app) along with OpenFaaS to handle background processes.&lt;/p&gt;
</summary><category term="erverless"></category><category term="openfaas"></category><category term="kubernetes"></category></entry><entry><title>Desplegando webapps con Django en Kubernetes</title><link href="https://pyvideo.org/pyday-galicia-2017/desplegando-webapps-con-django-en-kubernetes.html" rel="alternate"></link><published>2017-06-10T17:40:00+02:00</published><updated>2017-06-10T17:40:00+02:00</updated><author><name>José Corral</name></author><id>tag:pyvideo.org,2017-06-10:pyday-galicia-2017/desplegando-webapps-con-django-en-kubernetes.html</id><summary type="html"></summary><category term="pyday"></category><category term="Galicia"></category><category term="django"></category><category term="kubernetes"></category></entry></feed>