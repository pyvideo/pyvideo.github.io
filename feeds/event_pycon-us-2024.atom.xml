<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyCon US 2024</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-us-2024.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>A low latency deepdive of Python with Cython</title><link href="https://pyvideo.org/pycon-us-2024/a-low-latency-deepdive-of-python-with-cython.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Saksham Sharma</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/a-low-latency-deepdive-of-python-with-cython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When someone finds Python slow, Cython is a popular choice to speed it
up. But how slow is any given thing you’re doing? How much faster is
Cython? 100X of what? In this talk, we will write some python data
analysis code in Cython, read some parts of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When someone finds Python slow, Cython is a popular choice to speed it
up. But how slow is any given thing you’re doing? How much faster is
Cython? 100X of what? In this talk, we will write some python data
analysis code in Cython, read some parts of its generated code to
understand what all Python has to do to run it, and understand how long
different things take by running microbenchmarks. We will then see how
simple hints to Cython can help it generate faster code, and see how
fast it gets. This talk is intended for Python users writing performance
sensitive applications, who are at least mildly familiar with Cython
and/or C/C++. Attendees will learn how to profile and optimize common
operations, which should help them to evaluate Cython or Python for
their use-case.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>AI, IP, and Your Code: What Developers Need to Know</title><link href="https://pyvideo.org/pycon-us-2024/ai-ip-and-your-code-what-developers-need-to-know.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Alla Barbalat</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/ai-ip-and-your-code-what-developers-need-to-know.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world where AI-generated code is becoming more prevalent, who owns
the output? Can AI companies freely use your open-source code as
training data? What are the legal ramifications when an AI system
infringes upon existing intellectual property rights?&lt;/p&gt;
&lt;p&gt;Alla will address these critical questions focused on code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world where AI-generated code is becoming more prevalent, who owns
the output? Can AI companies freely use your open-source code as
training data? What are the legal ramifications when an AI system
infringes upon existing intellectual property rights?&lt;/p&gt;
&lt;p&gt;Alla will address these critical questions focused on code and IP law.
The talk aims to demystify the complex legal landscape developers may
find themselves navigating when using AI-generated code.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Building a JIT compiler for CPython</title><link href="https://pyvideo.org/pycon-us-2024/building-a-jit-compiler-for-cpython.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Brandt Bucher</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/building-a-jit-compiler-for-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython is a programming language implementation that is mostly
maintained by volunteers, but has a huge, diverse user base spread
across a wide variety of platforms. These factors present a difficult
set of challenges and tradeoffs when making design decisions, especially
those related to just-in-time machine code generation.&lt;/p&gt;
&lt;p&gt;As …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython is a programming language implementation that is mostly
maintained by volunteers, but has a huge, diverse user base spread
across a wide variety of platforms. These factors present a difficult
set of challenges and tradeoffs when making design decisions, especially
those related to just-in-time machine code generation.&lt;/p&gt;
&lt;p&gt;As one of the engineers working on Microsoft's ambitious &amp;quot;Faster
CPython&amp;quot; project, I'll introduce our prototype of &amp;quot;copy-and-patch&amp;quot;, an
interesting technique for generating high-quality template JIT
compilers. Along the way, I'll also cover some of the important work in
recent CPython releases that this approach builds upon, and how
copy-and-patch promises to be an incredibly attractive tool for pushing
Python's performance forward in a scalable, maintainable way.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Building FPGA-based Machine Learning Accelerators in Python</title><link href="https://pyvideo.org/pycon-us-2024/building-fpga-based-machine-learning-accelerators-in-python.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Tim Paine</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/building-fpga-based-machine-learning-accelerators-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will demo a simple machine learning accelerator
deployed on a commodity FPGA and developed using a Python-based
toolchain. The FPGA platform is based on an entry level Xilinx FPGA,
with a total cost of materials &amp;lt;$200. The toolchain uses a combination
of open source software …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will demo a simple machine learning accelerator
deployed on a commodity FPGA and developed using a Python-based
toolchain. The FPGA platform is based on an entry level Xilinx FPGA,
with a total cost of materials &amp;lt;$200. The toolchain uses a combination
of open source software, including PyTorch and
&lt;a class="reference external" href="https://onnx.ai/"&gt;ONNX&lt;/a&gt; for modeling, and
&lt;a class="reference external" href="https://github.com/m-labs/migen"&gt;Migen&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/enjoy-digital/litex"&gt;LiteX&lt;/a&gt; for the construction
of the System-on-chip. We will also survey the wide array of both open
source and proprietary vendor tools necessary to build this project, and
discuss the broader open source silicon landscape.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Closing</title><link href="https://pyvideo.org/pycon-us-2024/closing.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Mariatta Wijaya</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/closing.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Closing&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Connecting Old to New with CircuitPython: Retrocomputer input devices on modern PCs</title><link href="https://pyvideo.org/pycon-us-2024/connecting-old-to-new-with-circuitpython-retrocomputer-input-devices-on-modern-pcs.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Jeff Epler</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/connecting-old-to-new-with-circuitpython-retrocomputer-input-devices-on-modern-pcs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The input devices of decades past hold nostalgic value for many folks.
But they don't need to merely sit on a shelf as museum objects—they can
be reverse engineered and then adapted to modern computers without
modifying the original hardware.&lt;/p&gt;
&lt;p&gt;CircuitPython, an implementation of the Python language for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The input devices of decades past hold nostalgic value for many folks.
But they don't need to merely sit on a shelf as museum objects—they can
be reverse engineered and then adapted to modern computers without
modifying the original hardware.&lt;/p&gt;
&lt;p&gt;CircuitPython, an implementation of the Python language for
microcontrollers, is an excellent language for projects like these,
thanks to native USB Human Interface Device (HID) support and the
ability to ‘bitbang’ archaic interfaces combined with the fast
development cycle of an interpreted language, as you'll learn in case
studies adapting these keyboards &amp;amp; mice.&lt;/p&gt;
&lt;p&gt;No previous experience with CircuitPython is necessary. Some knowledge
of electronics will enhance your enjoyment of this talk, though there
will be a quick summary of key electronics concepts as the talk
proceeds.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Graphs and Vogue Dance: using data structures to create choreographies</title><link href="https://pyvideo.org/pycon-us-2024/graphs-and-vogue-dance-using-data-structures-to-create-choreographies.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Alynne Ferreira</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/graphs-and-vogue-dance-using-data-structures-to-create-choreographies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vogue Dance is a dance form that emerged in LGBTQIA+ culture and has
become a global phenomenon, full of complex movements, creativity and
social connections. Graphs are powerful tools for analyzing and
visualizing interconnected networks. To organize a choreography using
graphs, you first need to create a directed graph …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vogue Dance is a dance form that emerged in LGBTQIA+ culture and has
become a global phenomenon, full of complex movements, creativity and
social connections. Graphs are powerful tools for analyzing and
visualizing interconnected networks. To organize a choreography using
graphs, you first need to create a directed graph that represents the
sequence of movements in the choreography. Each node will have a picture
that represents a specific pose, and each edge represents the connection
between the poses. The sequence used to change from one pose to the next
will represent the movement. Graphs can be used to facilitate the
creation of a choreography, allowing you to visualize the sequence of
movements and the relationship between them. At the end of this lecture,
we hope to put together a choreography based on the poses presented. The
order of the poses can be chosen manually or generated at random.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>How two undergrads from the other side of the planet are speeding up your future code</title><link href="https://pyvideo.org/pycon-us-2024/how-two-undergrads-from-the-other-side-of-the-planet-are-speeding-up-your-future-code.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Ken Jin</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/how-two-undergrads-from-the-other-side-of-the-planet-are-speeding-up-your-future-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython 3.13 is planned to get cool new performance features. One of
them is an experimental runtime bytecode optimizer, which will optimize
bytecode on the fly using compiler optimizations. It aims to do
fancy-sounding things like type propagation, guard elimination, constant
promotion and more!&lt;/p&gt;
&lt;p&gt;What’s less known …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython 3.13 is planned to get cool new performance features. One of
them is an experimental runtime bytecode optimizer, which will optimize
bytecode on the fly using compiler optimizations. It aims to do
fancy-sounding things like type propagation, guard elimination, constant
promotion and more!&lt;/p&gt;
&lt;p&gt;What’s less known - this optimizer is currently being built by a
university undergraduate 😲, with earlier iterations contributed by
another undergrad. We’re also receiving course credit for it! One of us
had no prior experience contributing to CPython.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll split our time 60-40, with some time for the
performance enthusiasts out there, and the remaining time on our
experience contributing to CPython as an (in our opinion)
underrepresented group, and how you can contribute to CPython as a
university student as well.&lt;/p&gt;
&lt;p&gt;You don’t have to be a compiler or CPython expert to attend – this talk
is aimed at everyone who can read and write some Python.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Keynote - Kate Chapman</title><link href="https://pyvideo.org/pycon-us-2024/keynote-kate-chapman.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Kate Chapman</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/keynote-kate-chapman.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Keynote - Sumana Harihareswara</title><link href="https://pyvideo.org/pycon-us-2024/keynote-sumana-harihareswara.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Sumana Harihareswara</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/keynote-sumana-harihareswara.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Lightning Talks - May 19, 8am</title><link href="https://pyvideo.org/pycon-us-2024/lightning-talks-may-19-8am.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/lightning-talks-may-19-8am.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Open Source Robotics with Python: Learn Robotics with No Robot Required</title><link href="https://pyvideo.org/pycon-us-2024/open-source-robotics-with-python-learn-robotics-with-no-robot-required.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Kat Scott</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/open-source-robotics-with-python-learn-robotics-with-no-robot-required.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to learn robotics but are unable to sink thousands of
dollars into a new hobby? Good news! It turns out that many professional
roboticists rarely touch hardware at all! Many modern robot developers
use simulations, basically fancy video games, to develop the source code
for their …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to learn robotics but are unable to sink thousands of
dollars into a new hobby? Good news! It turns out that many professional
roboticists rarely touch hardware at all! Many modern robot developers
use simulations, basically fancy video games, to develop the source code
for their robots. This new approach to robotics means you too can start
learning robotics without ever touching an Allen wrench or a soldering
iron. More importantly, you can transfer your existing Python skills
into solving challenging robotics problems.&lt;/p&gt;
&lt;p&gt;In this talk we’ll walk you through getting started with &lt;a class="reference external" href="https://ros.org/"&gt;Robot
Operating System 2 (ROS 2)&lt;/a&gt; and the &lt;a class="reference external" href="https://gazebosim.org/home"&gt;Gazebo
simulator&lt;/a&gt;. ROS 2 and Gazebo are two
large, open-source projects used by thousands of companies, and tens of
thousands of developers, to build the robots we encounter in our daily
lives. Better yet, both ROS 2 and Gazebo support Python, making it
easier than ever to learn robotics fundamentals. In fact, ROS should be
very familiar, it draws much of a project structure from Python itself.
Just like the Python 2 to Python 3 transition. ROS and Gazebo have seen
some major changes in the past few years; and now is a good time for
Python developers to revisit these important tools.&lt;/p&gt;
&lt;p&gt;In this talk we’ll introduce you to ROS 2 and Gazebo using existing open
source libraries and robots. We’ll touch on how to get started, the
Python APIs for both projects, and some of the fiddly bits in between
(like CLIs, and other file types) that make robotics simulation
possible. This talk is geared towards novice to intermediate programmers
who are ready to branch out and start applying programming fundamentals
to the domain of robotics.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>PSF - Meet our Security Engineers</title><link href="https://pyvideo.org/pycon-us-2024/psf-meet-our-security-engineers.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Mike Fiedler</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/psf-meet-our-security-engineers.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PSF - Meet our Security Engineers&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Python Software Foundation Update</title><link href="https://pyvideo.org/pycon-us-2024/python-software-foundation-update.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Deb Nicholson</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/python-software-foundation-update.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Software Foundation Update&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Rest Easy with Jupyrest: Deploy notebooks as web services</title><link href="https://pyvideo.org/pycon-us-2024/rest-easy-with-jupyrest-deploy-notebooks-as-web-services.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Koushik Krishnan</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/rest-easy-with-jupyrest-deploy-notebooks-as-web-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks are awesome! However, a notebook on its own is not a
product or a service. Bridging this gap usually involves a complete
rewrite into a web service that leaves behind all the awesome-ness of
the notebook. What if we didn't have to do this? That's where Jupyrest …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks are awesome! However, a notebook on its own is not a
product or a service. Bridging this gap usually involves a complete
rewrite into a web service that leaves behind all the awesome-ness of
the notebook. What if we didn't have to do this? That's where Jupyrest
comes in! Jupyrest is a library I created to solve this exact problem
for my team at Microsoft. In this talk I'll show you how you can turn
your Jupyter notebooks into a web service without any modifications to
it. Jupyrest is being used at Microsoft by data scientists to deploy
hundreds of microservices.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>SPy (Static Python) lang: fast as C, Pythonic as Python</title><link href="https://pyvideo.org/pycon-us-2024/spy-static-python-lang-fast-as-c-pythonic-as-python.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/spy-static-python-lang-fast-as-c-pythonic-as-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SPy is a brand new statically typed variant of Python which aim to get
performance comparable to system languages such as C and C++, while
preserving the &amp;quot;Pythonic feeling&amp;quot; of the language.&lt;/p&gt;
&lt;p&gt;The main idea behind SPy is that &amp;quot;modern Python&amp;quot; is actually a subset of
Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;many of …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SPy is a brand new statically typed variant of Python which aim to get
performance comparable to system languages such as C and C++, while
preserving the &amp;quot;Pythonic feeling&amp;quot; of the language.&lt;/p&gt;
&lt;p&gt;The main idea behind SPy is that &amp;quot;modern Python&amp;quot; is actually a subset of
Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;many of the most dynamic features of the language are considered bad
practice and actively discouraged;&lt;/li&gt;
&lt;li&gt;the alway-increasingly adoption of typing leads to codebases which
are largerly statically typed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, these rules are not enforced by the language, and there are
cases in which &amp;quot;breaking the rules&amp;quot; is actually useful and make the code
easier/better/faster.&lt;/p&gt;
&lt;p&gt;From the point of view of language implementors, the VM cannot easily
take advantage of the &amp;quot;mostly static&amp;quot; nature of programs because it has
always to be ready for the generic case.&lt;/p&gt;
&lt;p&gt;SPy tries to reconcile these two sides:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;it uses a static type system which is designed specifically for
safety and performance;&lt;/li&gt;
&lt;li&gt;the vast majority of &amp;quot;dynamic&amp;quot; feature of Python (like decorators,
metaclasses, &lt;tt class="docutils literal"&gt;__special_methods__&lt;/tt&gt;, ...) can be used at zero cost,
since they are resolved at compile time by using meta-programming and
partial evaluation techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will present in the details the ideas behind SPy and its
current status.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Steering Council Panel</title><link href="https://pyvideo.org/pycon-us-2024/steering-council-panel.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/steering-council-panel.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Sync vs. Async in Python: Tools, Benchmarks, and ASGI/WSGI Explained</title><link href="https://pyvideo.org/pycon-us-2024/sync-vs-async-in-python-tools-benchmarks-and-asgiwsgi-explained.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Arun Suresh Kumar</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/sync-vs-async-in-python-tools-benchmarks-and-asgiwsgi-explained.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk focuses on synchronous and asynchronous programming in Python,
highlighting tools like Uvicorn and uvloop, their benchmarks, and the
role of ASGI/WSGI servers.&lt;/p&gt;
&lt;div class="section" id="topics-covered"&gt;
&lt;h4&gt;Topics Covered:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Synchronous vs. Asynchronous Programming&lt;/strong&gt;: Key differences and
applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools like Uvicorn and uvloop&lt;/strong&gt;: Detailed exploration of these
async tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Benchmarking Async Tools …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk focuses on synchronous and asynchronous programming in Python,
highlighting tools like Uvicorn and uvloop, their benchmarks, and the
role of ASGI/WSGI servers.&lt;/p&gt;
&lt;div class="section" id="topics-covered"&gt;
&lt;h4&gt;Topics Covered:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Synchronous vs. Asynchronous Programming&lt;/strong&gt;: Key differences and
applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tools like Uvicorn and uvloop&lt;/strong&gt;: Detailed exploration of these
async tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Benchmarking Async Tools&lt;/strong&gt;: Performance analysis and comparisons.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ASGI and WSGI Servers&lt;/strong&gt;: Their evolution and importance in Python
web development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best Practices and Recommendations&lt;/strong&gt;: Effective sync and async
programming strategies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real-World Scenarios and Examples&lt;/strong&gt;: Practical insights from actual
use-cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Unlocking the Parallel Universe: Subinterpreters and Free-Threading in Python 3.13</title><link href="https://pyvideo.org/pycon-us-2024/unlocking-the-parallel-universe-subinterpreters-and-free-threading-in-python-313.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/unlocking-the-parallel-universe-subinterpreters-and-free-threading-in-python-313.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.12 introduced a new parallel execution model called &amp;quot;sub
interpreters&amp;quot; that uses a per-interpreter GIL to unlock a new way of
writing parallel code that's faster than multiprocessing. Python 3.13
introduces another new parallel execution model called &amp;quot;free-threading&amp;quot;
(previously called &lt;em&gt;no-gil&lt;/em&gt;) that replaces that optionally removes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.12 introduced a new parallel execution model called &amp;quot;sub
interpreters&amp;quot; that uses a per-interpreter GIL to unlock a new way of
writing parallel code that's faster than multiprocessing. Python 3.13
introduces another new parallel execution model called &amp;quot;free-threading&amp;quot;
(previously called &lt;em&gt;no-gil&lt;/em&gt;) that replaces that optionally removes the
GIL so that threads can truly be parallel. Does free-threading make sub
interpreters redundant? We'll answer that question in this talk. We
unpack what sub interpreters are, how to use them and their limitations.
We'll explore free-threading, the optional flag to remove the GIL in
3.13. Finally we look at a use case for sub interpreters &lt;strong&gt;and&lt;/strong&gt;
free-threading together, a multi-worker, multi-thread ASGI web server.
We benchmark this against traditional web server architecture with
multiprocessing and threading. So fasten your seatbelts, fellow
Pythonistas! Let’s ride the comet tail of parallelism, leaving behind
the single-threaded past. 🚀✨&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Building a Rusty path validation library for PyCA Cryptography</title><link href="https://pyvideo.org/pycon-us-2024/building-a-rusty-path-validation-library-for-pyca-cryptography.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/building-a-rusty-path-validation-library-for-pyca-cryptography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem has historically relied on OpenSSL (and its myriad
forks) to provide an implementation of X.509 path validation, a
little-known but essential component of every secure HTTPS connection
made on the modern Internet. This has brought technical debt, developer
frustration (due to OpenSSL's poorly documented implementation …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem has historically relied on OpenSSL (and its myriad
forks) to provide an implementation of X.509 path validation, a
little-known but essential component of every secure HTTPS connection
made on the modern Internet. This has brought technical debt, developer
frustration (due to OpenSSL's poorly documented implementation quirks),
and a mottled security history.&lt;/p&gt;
&lt;p&gt;This talk introduces an alternative, developed over the past year: a new
implementation of X.509 path validation, written from the ground-up in a
memory-safe language with standards conformance as a priority, newly
integrated into &lt;a class="reference external" href="https://cryptography.io/en/latest/"&gt;PyCA
Cryptography&lt;/a&gt;, Python's most
popular cryptographic library. We'll cover the work's implementation
details, strategies applied for reducing complexity, technical decisions
and tradeoffs made in its Rust components, as well as the work's impact
on the millions of Python developers that depend on &lt;a class="reference external" href="https://cryptography.io/en/latest/"&gt;PyCA
Cryptography&lt;/a&gt; and &lt;a class="reference external" href="https://www.pyopenssl.org/en/latest/"&gt;PyCA
pyOpenSSL&lt;/a&gt;. Particular
attention will be dedicated to the work's critical security scope and
accompanying testing philosophy, including developed strategies for
reaching perfect test coverage and avoiding vulnerability classes that
have historically afflicted X.509 path validation implementations.&lt;/p&gt;
&lt;p&gt;The audience is expected to have an intermediate familiarity with
general Python development, including a high-level familiarity with
SSL/TLS and HTTPS (but not X.509 or X.509 path validation). Audience
members will leave the talk with a more complete understanding of the
modern Internet's security model, as well as how the Python ecosystem is
maturing to accomodate modern cryptographic best practices in networked
settings.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Clasificación de violencia mediante análisis de audio y embeddings</title><link href="https://pyvideo.org/pycon-us-2024/clasificacion-de-violencia-mediante-analisis-de-audio-y-embeddings.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Carla Marcela Florida Román</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/clasificacion-de-violencia-mediante-analisis-de-audio-y-embeddings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La investigación se centra en la clasificación y análisis de audio
mediante el uso de embeddings para evaluar la severidad de episodios
auditivos, para lograr esto, se ha desarrollado un proyecto que abarca
la creación de un dataset específico destinado al entrenamiento de una
red neuronal diseñada para analizar …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La investigación se centra en la clasificación y análisis de audio
mediante el uso de embeddings para evaluar la severidad de episodios
auditivos, para lograr esto, se ha desarrollado un proyecto que abarca
la creación de un dataset específico destinado al entrenamiento de una
red neuronal diseñada para analizar señales de audio.&lt;/p&gt;
&lt;p&gt;En la primera fase del proyecto, se ha puesto énfasis en la recopilación
y procesamiento de datos de audio, con el objetivo de construir un
conjunto de entrenamiento robusto y representativo, este dataset se ha
utilizado para alimentar una red neuronal especializada capaz de
clasificar violencia en 5 clases.&lt;/p&gt;
&lt;p&gt;Además del análisis de audio, se ha explorado el análisis de texto
utilizando embeddings para determinar la cercanía semántica de las
palabras y frases asociadas con la agresividad o la intención de
violencia, esta dimensión adicional proporciona una perspectiva más
completa, permitiendo una evaluación integral de la violencia en los
segmentos auditivos.&lt;/p&gt;
&lt;p&gt;La combinación de técnicas de análisis de audio y texto ha demostrado
ser efectiva para calificar la violencia en episodios auditivos,
ofreciendo un enfoque multidimensional para entender la naturaleza de
los contenidos, este método no solo identifica la presencia de
violencia, sino que también asigna un grado de severidad, brindando una
evaluación más precisa y detallada.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Combining Django ORM &amp; FastAPI in a Single App</title><link href="https://pyvideo.org/pycon-us-2024/combining-django-orm-fastapi-in-a-single-app.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Mia Bajić</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/combining-django-orm-fastapi-in-a-single-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most extensive Python framework, which is also very
opinionated and synchronous. In contrast, FastAPI emerges as a more
recent, asynchronous framework.&lt;/p&gt;
&lt;p&gt;As a developer and the maintainer of several services, one of which is a
data visualization tool deployed in production across various companies,
I have …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most extensive Python framework, which is also very
opinionated and synchronous. In contrast, FastAPI emerges as a more
recent, asynchronous framework.&lt;/p&gt;
&lt;p&gt;As a developer and the maintainer of several services, one of which is a
data visualization tool deployed in production across various companies,
I have had the unique opportunity to use Django ORM with FastAPI. If you
take a look through GitHub or other resources, you’ll notice there’s not
much out there about combining Django and FastAPI — it’s a bit of an
unconventional setup. The aim of my talk is to share insights from my
experience with this setup, highlighting its practical implementation
and the lessons learned along the way.&lt;/p&gt;
&lt;p&gt;This talk is aimed at programmers from beginners to more experienced
ones familiar with either of these frameworks. You’ll gain insights into
combining asynchronous frameworks with synchronous ones, along with
understanding the benefits and challenges of this approach.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Computational Origami</title><link href="https://pyvideo.org/pycon-us-2024/computational-origami.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Alastair Stanley</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/computational-origami.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the best thing you can do with a piece of paper?&lt;/p&gt;
&lt;p&gt;I'm not talking about paper planes or dragons (or even Mr. Napkin Head).
The elegant art of paper folding can be harnessed to perform
surprisingly powerful calculations. From a handful of basic folding
axioms, we will construct …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the best thing you can do with a piece of paper?&lt;/p&gt;
&lt;p&gt;I'm not talking about paper planes or dragons (or even Mr. Napkin Head).
The elegant art of paper folding can be harnessed to perform
surprisingly powerful calculations. From a handful of basic folding
axioms, we will construct computational systems to solve a wide range of
problems. Starting with basic arithmetic operations, we will build up to
tackling cubic equations and even proofs of irrationality.&lt;/p&gt;
&lt;p&gt;I'll be simulating the fold sequences in a custom Python library, but
feel free to bring a sheet of paper to follow along.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Construyendo Puentes en Diversidad, Equidad e Inclusión en Open Source</title><link href="https://pyvideo.org/pycon-us-2024/construyendo-puentes-en-diversidad-equidad-e-inclusion-en-open-source.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Lucy Jiménez</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/construyendo-puentes-en-diversidad-equidad-e-inclusion-en-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla de 30 minutos, exploraremos la fascinante travesía DEI
desde liderar PyLadies Colombia hasta colaborar en los comités DEI del
Proyecto Jupyter y de becas de PyData Global 2023. Descubriremos
estrategias prácticas para fomentar la diversidad en el mundo del código
abierto, desde el desarrollo de comunidades …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla de 30 minutos, exploraremos la fascinante travesía DEI
desde liderar PyLadies Colombia hasta colaborar en los comités DEI del
Proyecto Jupyter y de becas de PyData Global 2023. Descubriremos
estrategias prácticas para fomentar la diversidad en el mundo del código
abierto, desde el desarrollo de comunidades hasta la participación en
proyectos a escala global.&lt;/p&gt;
&lt;p&gt;Compartiré experiencias concretas, desde desafíos superados hasta éxitos
inspiradores, destacando el impacto de las actividades informales, como
talleres personales, en la construcción de comunidades inclusivas.
Exploraremos cómo pequeñas acciones pueden tener un impacto
significativo en la promoción de la diversidad, la equidad y la
inclusión.&lt;/p&gt;
&lt;p&gt;Esta charla proporcionará ideas accionables para impulsar la diversidad
en tu entorno de código abierto y te dará con una visión de cómo
construir puentes DEI sólidos en proyectos y comunidades. ¡Te espero
para compartir estas experiencias y explorar juntos cómo hacer del
código abierto un espacio para todos!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Outline:&lt;/strong&gt; 1. Introducción (5 minutos) 1. PyLadies Colombia:
Construyendo Comunidades Inclusivas (6 minutos) 1. Rol y contribuciones
en los comités DEI y de becas a nivel global (6 minutos) 1. Desafíos y
éxitos en la implementación de iniciativas inclusivas a nivel
internacional (6 minutos) 1. Acciones Concretas para Impulsar la
Diversidad en Open Source (6 minutos)&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>CPython's Compilation Pipeline</title><link href="https://pyvideo.org/pycon-us-2024/cpythons-compilation-pipeline.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Irit Katriel</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/cpythons-compilation-pipeline.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last couple of years, CPython's compiler was refactored. In
version 3.13, we will have access from Python scripts to more of the
compilation stages: Instead of the old 4-stage pipeline (source --&amp;gt;
tokens --&amp;gt; AST --&amp;gt; code object), we will have a more refined pipeline
(source --&amp;gt; tokens --&amp;gt; AST --&amp;gt; optimized …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last couple of years, CPython's compiler was refactored. In
version 3.13, we will have access from Python scripts to more of the
compilation stages: Instead of the old 4-stage pipeline (source --&amp;gt;
tokens --&amp;gt; AST --&amp;gt; code object), we will have a more refined pipeline
(source --&amp;gt; tokens --&amp;gt; AST --&amp;gt; optimized AST --&amp;gt; pseudo bytecode --&amp;gt;
optimized pseudo bytecode --&amp;gt; bytecode --&amp;gt; code object).&lt;/p&gt;
&lt;p&gt;This talk describes the new compilation pipeline of CPython 3.13 and the
possibilities that it creates for CPython users, maintainers and
educators. It presents Codoscope, a new vizualization tool that displays
CPython's process of translating Python source code into an executable
code object.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Creative Coding with py5, the Python version of Processing</title><link href="https://pyvideo.org/pycon-us-2024/creative-coding-with-py5-the-python-version-of-processing.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>James Schmitz</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/creative-coding-with-py5-the-python-version-of-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://py5coding.org"&gt;py5&lt;/a&gt; is a framework for doing creative coding
in Python that is very similar to the widely used Java framework
&lt;a class="reference external" href="https://processing.org/"&gt;Processing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce py5 to the Python community and
demonstrate how it can be used for data visualization, art, and
education. It is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://py5coding.org"&gt;py5&lt;/a&gt; is a framework for doing creative coding
in Python that is very similar to the widely used Java framework
&lt;a class="reference external" href="https://processing.org/"&gt;Processing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce py5 to the Python community and
demonstrate how it can be used for data visualization, art, and
education. It is accessible to beginners while also being capable of
supporting professional artists creating digital art that is shown in
galleries. By design, py5 is integrated into the Python ecosystem,
working well with popular Python libraries such as numpy, matplotlib,
PIL, shapely, and trimesh.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Demystifying AsyncIO: Building Your Own Event Loop in Python</title><link href="https://pyvideo.org/pycon-us-2024/demystifying-asyncio-building-your-own-event-loop-in-python.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Arthur Pastel</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/demystifying-asyncio-building-your-own-event-loop-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AsyncIO&lt;/strong&gt; has emerged as a vital tool in Python's ecosystem,
particularly in web development, IO-bound tasks, and network
programming. However, its internal mechanics often remain obscure, even
to seasoned Python developers. This talk aims to demystify AsyncIO by
guiding you through creating your own event loop in Python, culminating …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AsyncIO&lt;/strong&gt; has emerged as a vital tool in Python's ecosystem,
particularly in web development, IO-bound tasks, and network
programming. However, its internal mechanics often remain obscure, even
to seasoned Python developers. This talk aims to demystify AsyncIO by
guiding you through creating your own event loop in Python, culminating
in running a FastAPI application with it.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll build an event loop from scratch in Python, capable
of running an HTTP server through a FastAPI application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plan:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Introduction to AsyncIO&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core Concepts:&lt;/strong&gt; Deep dive into Event loop, Futures, Tasks, and
coroutines&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands-On Building:&lt;/strong&gt; Constructing an event loop from scratch&lt;ul&gt;
&lt;li&gt;Scheduling callbacks&lt;/li&gt;
&lt;li&gt;Executing tasks and coroutines&lt;/li&gt;
&lt;li&gt;Handling network calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Practical Application:&lt;/strong&gt; Running a FastAPI HTTP server with our
loop&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance Insights:&lt;/strong&gt; Comparing our event loop with the fastest
ones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, you'll be able to understand the internal
workings of AsyncIO and create a basic event loop capable of running a
FastAPI application.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Diversity &amp; Inclusion Panel</title><link href="https://pyvideo.org/pycon-us-2024/diversity-inclusion-panel.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Debora Azevedo</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/diversity-inclusion-panel.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Embeddings, transfer learning y más: LLM a tu medida</title><link href="https://pyvideo.org/pycon-us-2024/embeddings-transfer-learning-y-mas-llm-a-tu-medida.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Jorge de Paz</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/embeddings-transfer-learning-y-mas-llm-a-tu-medida.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La inteligencia artificial ha sido parte de nuestro ecosistema
tecnológico desde ya hace algunos años, pero su estallido se dio con el
despliegue de Gen AI y LLMs que aumento su popularidad marcando un antes
y un después. Actualmente, la comunidad tecnológica muestra un gran
interés en aprender a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La inteligencia artificial ha sido parte de nuestro ecosistema
tecnológico desde ya hace algunos años, pero su estallido se dio con el
despliegue de Gen AI y LLMs que aumento su popularidad marcando un antes
y un después. Actualmente, la comunidad tecnológica muestra un gran
interés en aprender a desarrollar aplicaciones haciendo uso de este tipo
de tecnología, en ese contexto sin duda Python es el lenguaje por
excelencia.&lt;/p&gt;
&lt;p&gt;En esta charla exploraremos técnicas clave, como el Fine Tunning y el
Transfer Learning aplicadas a modelos super conocidos como GPT-3.5
Turbo/GPT4 e inclusive modelos de código abierto disponibles en Hugging
Face. Veremos como adaptar estos modelos a nuestros propios casos de uso
en las apps que queramos desarrollar.&lt;/p&gt;
&lt;p&gt;Además de entrenar modelos, también hablaremos acerca de cómo realizar
consultas de información a bases de datos vectoriales (vector search)
para localizar información dentro de un determinado documento y poder
generar contenido sintético en base a esta búsqueda.&lt;/p&gt;
&lt;p&gt;En esta misma línea aprenderemos que son los embeddings, como trasformar
nuestra información no estructurada en vectores y luego como indexarla
en estas bases de datos vectoriales para un acceso más eficiente.&lt;/p&gt;
&lt;p&gt;Todo esto utilizando Python y sus poderosas bibliotecas, entre las
cuales utilizaremos transformers, langChain y PyTorch.&lt;/p&gt;
&lt;p&gt;Para lograr esto daré una introducción para poner en contexto al
público, para luego pasar a demostraciones prácticas de cómo realizar
estas operaciones de manera comprensible, tal como a mí me hubiera
gustado que me lo explicaran.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Eternal sunshine of the spotless development environment</title><link href="https://pyvideo.org/pycon-us-2024/eternal-sunshine-of-the-spotless-development-environment.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Sarah Kaiser</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/eternal-sunshine-of-the-spotless-development-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“It says the package is not installed?” is a common refrain when working
on software projects, especially in Python. Creating and configuring
reproducible environments is a major part of modern software development
and has led to the popularity of tools like Docker to specify where and
how code runs …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“It says the package is not installed?” is a common refrain when working
on software projects, especially in Python. Creating and configuring
reproducible environments is a major part of modern software development
and has led to the popularity of tools like Docker to specify where and
how code runs. &lt;a class="reference external" href="https://containers.dev/"&gt;Development (Dev) Container&lt;/a&gt;
are an open specification that extends Docker images to make it easy to
configure not only the where the code runs, but also the developer
workspace in your preferred editors or toolchains like VS Code, PyCharm,
or DevPod. Setting up Dev Containers for your projects can reduce
maintainer overhead of OSS projects, bootstrap contributors, and make
running events like workshops or sprints go more smoothly.&lt;/p&gt;
&lt;p&gt;In this talk, we will briefly cover why setting up container
infrastructure can be useful for isolating your project environments and
dig into how you can extend that with Dev Containers to configure a
complete development experience using VS Code. We will look at two
common OSS project situations, onboarding and workshops, to see how
workflows for using Dev Containers and other supporting tools make
things easier. No container experience required, brief familiarity with
VS Code is helpful, but not necessary.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Event-Driven asyncio: A Case Study of Trio's API</title><link href="https://pyvideo.org/pycon-us-2024/event-driven-asyncio-a-case-study-of-trios-api.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Junya Fukuda</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/event-driven-asyncio-a-case-study-of-trios-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is highly efficient in operating within a single thread, making
it exceptionally well-suited for environments with limited resources.&lt;/p&gt;
&lt;p&gt;In our product, we leverage Python's asynchronous capabilities to
streamline the decision-making processes of &lt;strong&gt;our robots&lt;/strong&gt;. I will
individually introduce &lt;strong&gt;trio&lt;/strong&gt; and &lt;strong&gt;trio-util&lt;/strong&gt;, as well as anyio and
asyncio, in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is highly efficient in operating within a single thread, making
it exceptionally well-suited for environments with limited resources.&lt;/p&gt;
&lt;p&gt;In our product, we leverage Python's asynchronous capabilities to
streamline the decision-making processes of &lt;strong&gt;our robots&lt;/strong&gt;. I will
individually introduce &lt;strong&gt;trio&lt;/strong&gt; and &lt;strong&gt;trio-util&lt;/strong&gt;, as well as anyio and
asyncio, in the presentation.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Everything is a graph, including LLM Applications (and that’s handy)</title><link href="https://pyvideo.org/pycon-us-2024/everything-is-a-graph-including-llm-applications-and-thats-handy.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Tuana Celik</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/everything-is-a-graph-including-llm-applications-and-thats-handy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NLP applications and LLMs have incredible potential to transform the way
we live, work, and play. But NLP applications, especially at production
scale, can be confusing. In this talk, we’ll explore how thinking of NLP
applications as graphs can reduce confusion and help you build and
customize quickly …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NLP applications and LLMs have incredible potential to transform the way
we live, work, and play. But NLP applications, especially at production
scale, can be confusing. In this talk, we’ll explore how thinking of NLP
applications as graphs can reduce confusion and help you build and
customize quickly.&lt;/p&gt;
&lt;p&gt;We will first look into what makes up some of the most common NLP
applications today, such as retrieval-augmented generation (RAG), and
how each step of these applications can be represented as a node in a
graph. Then, we will see how we can incorporate branches and loops into
these applications.&lt;/p&gt;
&lt;p&gt;As a final step, we’ll see how we can build customized tooling for NLP
applications in Python.&lt;/p&gt;
&lt;p&gt;We will make use of the pipeline structure of Haystack (an open-source
LLM framework in Python) as the basis for the examples. We will cover
two working examples that use Haystack’s custom component API (nodes of
the graph) within a full pipeline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A private Notion question-answering app&lt;/li&gt;
&lt;li&gt;A summarizer for the latest Hacker News posts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key takeaways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It’s useful to think of NLP applications as directed (multi-)graphs&lt;/li&gt;
&lt;li&gt;There are tools for Python developers to build their own tooling that
slots into this architecture with the use of open-source frameworks
like Haystack.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Explicando el sistema de un vehículo autónomo con Python.</title><link href="https://pyvideo.org/pycon-us-2024/explicando-el-sistema-de-un-vehiculo-autonomo-con-python.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Jesus Armando Anaya</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/explicando-el-sistema-de-un-vehiculo-autonomo-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En los últimos años, hemos visto el crecimiento de compañías enfocadas
al desarrollo de vehículos autónomos, como lo son Tesla ,Waymo o
Kiwibots. Al ver estos grandes proyectos podría pensarse que la lógica
detrás de un sistema informático para controlar este tipo de robots es
muy complicada. En esta …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En los últimos años, hemos visto el crecimiento de compañías enfocadas
al desarrollo de vehículos autónomos, como lo son Tesla ,Waymo o
Kiwibots. Al ver estos grandes proyectos podría pensarse que la lógica
detrás de un sistema informático para controlar este tipo de robots es
muy complicada. En esta charla vamos a desmitificar un poco el
funcionamiento de esta clase de sistemas, aprenderemos sobre algunas
tendencias en cuanto a frameworks de robótica como ROS, y como es que se
comunican los distintos sensores del vehículo para lograr la conducción
autónoma. Todo desde un punto de vista de ingeniería de software
enfocada a trabajar con nodos de comunicación en tiempo real. Y por
supuesto, todos los ejemplos escritos en Python.&lt;/p&gt;
&lt;p&gt;Audiencia&lt;/p&gt;
&lt;p&gt;La audiencia puede ser cualquier persona entusiasmada en temas de
robótica o de conducción autónoma, no hace falta tener algún tipo de
conocimiento previo en algo en particular, ya que la charla está
enfocada a tocar conceptos teóricos y explicarlos.&lt;/p&gt;
&lt;p&gt;Esquema&lt;/p&gt;
&lt;p&gt;Introducción a los vehículos autónomos (5 minutos)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Explicación breve de los tipos de vehículos autónomos.&lt;/li&gt;
&lt;li&gt;Explicación sobre el enfoque de la charla y las limitaciones de la
misma.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introducción a ROS con Python (7 minutos)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;El framework de robótica ROS y los sistemas en tiempo real.&lt;/li&gt;
&lt;li&gt;Los nodos de comunicación y los tipos de mensajes.&lt;/li&gt;
&lt;li&gt;Breve analogía entre los sistemas de robótica y los servicios en una
nube.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cómo funcionan los sensores de un vehículo autónomo, y el control (10
minutos)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sensor Fusion (Cámaras, LiDAR, Radar, GPS)&lt;/li&gt;
&lt;li&gt;Aprendizaje automático para tomar decisiones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo del funcionamiento de un vehiculo autonomo con CARLA Simulator y
ROS2 (10 minutos)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mostrando una aplicación funcional de un vehículo autónomo en el
simulador CARLA para visualizar el funcionamiento de ROS y su
interacción con los sensores del vehículo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conclusiones (3 minutos)&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Friends don't let friends package alone</title><link href="https://pyvideo.org/pycon-us-2024/friends-dont-let-friends-package-alone.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Leah Wasser</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/friends-dont-let-friends-package-alone.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python packaging can be a scary and confusing endeavor. The ecosystem
can be thorny and filled with many decisions around which tool or
approach to use. You’re also likely to get pricked by an approach or
tutorial that doesn't work as expected. However, the packaging journey
doesn’t …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python packaging can be a scary and confusing endeavor. The ecosystem
can be thorny and filled with many decisions around which tool or
approach to use. You’re also likely to get pricked by an approach or
tutorial that doesn't work as expected. However, the packaging journey
doesn’t have to be prickly - particularly for pure Python packages. By
building community consensus around user goals and moderating healthy
discussion, pyOpenSci is paving a smooth, thorn-free path for successful
packaging.&lt;/p&gt;
&lt;p&gt;This talk presents pyOpenSci’s people-first approach to guiding the
scientific community through thorny packaging decisions. First, we
engaged with the broader community to understand packaging needs.
Second, we brought together packaging experts, tool maintainers, and
beginning-to-advanced users to successfully build consensus around tools
and best practices. Community outreach helped us understand both user
needs and the packaging tool ecosystem. Finally, consensus around tools
and needs was transformed into accessible recommendations in our
community-driven Packaging Guide. Guidebook pull requests go through
extensive, open community review with 38 people and thousands of
comments contributing to the guidebook’s current state. Careful
moderation ensures healthy and productive conversations and also drives
consensus-building around beginner-friendly content. Our guidebook’s
development process allows us to harness community expertise to create
an accessible and accurate packaging guide that smooths out the
packaging path.&lt;/p&gt;
&lt;p&gt;You will will walk away from this talk with a better understanding of:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Why consensus-building and user-focused content development is
critical for tackling thorny topics such as packaging.&lt;/li&gt;
&lt;li&gt;How to decide which packaging tools satisfy your packaging needs.&lt;/li&gt;
&lt;li&gt;Where to find more information and support around packaging.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;You don’t have to package alone. The vibrant Python community is here
to help.&lt;/strong&gt;&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Functional Error Handling</title><link href="https://pyvideo.org/pycon-us-2024/functional-error-handling.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Bruce Eckel</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/functional-error-handling.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the early days, people wrote small applications in assembly language,
using gotos to get around. This didn't scale, so we traded gotos for
structured functions with single entry and exit points—and then we added
a new kind of goto with the exception, which not only blows up …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the early days, people wrote small applications in assembly language,
using gotos to get around. This didn't scale, so we traded gotos for
structured functions with single entry and exit points—and then we added
a new kind of goto with the exception, which not only blows up your
function but can end up anywhere. This makes functions difficult to
compose. We’ll look at strategies in Python that bring exceptions under
control and make functions composable again, including the third-party
&lt;tt class="docutils literal"&gt;returns&lt;/tt&gt; library.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Hacking `import` for speed: how we wrote a GPU accelerator for pandas</title><link href="https://pyvideo.org/pycon-us-2024/hacking-import-for-speed-how-we-wrote-a-gpu-accelerator-for-pandas.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Bradley Dice</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/hacking-import-for-speed-how-we-wrote-a-gpu-accelerator-for-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s import system is eminently hackable. Often, this is a tool of
last resort, but it can be extremely powerful. In this talk, we’ll
describe our ambitious effort to hack &lt;tt class="docutils literal"&gt;import pandas&lt;/tt&gt; to accelerate
large parts of it on the GPU using cuDF: a GPU DataFrame library …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s import system is eminently hackable. Often, this is a tool of
last resort, but it can be extremely powerful. In this talk, we’ll
describe our ambitious effort to hack &lt;tt class="docutils literal"&gt;import pandas&lt;/tt&gt; to accelerate
large parts of it on the GPU using cuDF: a GPU DataFrame library.&lt;/p&gt;
&lt;p&gt;We’ll cover the basics of import hacking and other tricks like Pythonic
proxy patterns. We’ll show how we use these more dynamic features of
Python to effectively accelerate any code that uses pandas, including
third-party libraries. We’ll also get into the technical and social
problems that currently necessitate these sophisticated solutions, and
share some thoughts on solving them. It will be a story of successes,
failures, wishes and tears, and excursions into exciting parts of Python
many developers may not have encountered before!&lt;/p&gt;
&lt;p&gt;This talk is for the Pythonista interested in the import system and how
to hack it for performance. It is also for developers interested in the
question of speeding up the vast ecosystem built on top of libraries
like numpy and pandas without code changes.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Having fun with pydantic and pattern matching</title><link href="https://pyvideo.org/pycon-us-2024/having-fun-with-pydantic-and-pattern-matching.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Sebastian Buczyński</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/having-fun-with-pydantic-and-pattern-matching.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pattern matching has been with us since Python3.10. Since the
introduction of the match-case statement, we've got a powerful and
elegant tool to control the flow of the program.&lt;/p&gt;
&lt;p&gt;This talk is to showcase a real-world scenario of handling different
messages coming from a broker, using match-case and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pattern matching has been with us since Python3.10. Since the
introduction of the match-case statement, we've got a powerful and
elegant tool to control the flow of the program.&lt;/p&gt;
&lt;p&gt;This talk is to showcase a real-world scenario of handling different
messages coming from a broker, using match-case and Pydantic.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>How Python Harnesses Rust through PyO3</title><link href="https://pyvideo.org/pycon-us-2024/how-python-harnesses-rust-through-pyo3.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>David Hewitt</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/how-python-harnesses-rust-through-pyo3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The last few years have seen Rust burst onto the scene as a language for
implementing much-loved software for the Python ecosystem. The most well
known examples of these are &lt;tt class="docutils literal"&gt;pydantic&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;polars&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cryptography&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;ruff&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;These Rust components are usually built on top of
&lt;a class="reference external" href="https://pyo3.rs/"&gt;PyO3&lt;/a&gt;, a Rust library for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The last few years have seen Rust burst onto the scene as a language for
implementing much-loved software for the Python ecosystem. The most well
known examples of these are &lt;tt class="docutils literal"&gt;pydantic&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;polars&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;cryptography&lt;/tt&gt;,
and &lt;tt class="docutils literal"&gt;ruff&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;These Rust components are usually built on top of
&lt;a class="reference external" href="https://pyo3.rs/"&gt;PyO3&lt;/a&gt;, a Rust library for binding the two
languages together, and &lt;a class="reference external" href="https://www.maturin.rs/"&gt;maturin&lt;/a&gt;, a PEP517
build backend for Rust software. There are a growing number of talks,
blogs, and guides showing how to use these tools.&lt;/p&gt;
&lt;p&gt;In this talk I'll lead you through the details of how a Python function
call ends up executing Rust code via PyO3. We'll first spend some time
introducing some key ideas as well as the benefits of adding Rust to
your Python stack. I'll then break down step-by-step what happens inside
the Python interpreter and PyO3's internals as a seemingly simple enough
Python expression leads to execution of your Rust function.&lt;/p&gt;
&lt;p&gt;You should walk away from this talk with an idea of how Rust/PyO3
software works under the hood. These same stages of a &amp;quot;native&amp;quot; function
call are similar for multiple other languages too, including Python
standard library &amp;quot;builtins&amp;quot;, Cython code, and C++/pybind11 software, so
this may bring you some useful insight even if Rust is not planned to be
in your software stack soon.&lt;/p&gt;
&lt;p&gt;While this talk will get technical, no knowledge of Rust will be
assumed. An understanding of Python functions and types will be useful,
as I'll use these to introduce the analogous Rust concepts. Expect to
see Rust code (and maybe a little C), but only for illustration - all
code will be broken down and stepped through.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Hybrid Quantum-Classical Machine Learning using Qiskit</title><link href="https://pyvideo.org/pycon-us-2024/hybrid-quantum-classical-machine-learning-using-qiskit.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Naveed Mahmud</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/hybrid-quantum-classical-machine-learning-using-qiskit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Qiskit is a python-based open-source toolkit for working with quantum
computers. In this talk, we describe our work of developing a hybrid
Quantum-Classical Machine Learning (ML) framework using Qiskit. This
talk will cover how to build quantum circuits and classical models for
ML tasks such as text classification and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Qiskit is a python-based open-source toolkit for working with quantum
computers. In this talk, we describe our work of developing a hybrid
Quantum-Classical Machine Learning (ML) framework using Qiskit. This
talk will cover how to build quantum circuits and classical models for
ML tasks such as text classification and sentiment analysis.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Improve Your ML Projects: Embrace Reproducibility and Production Readiness with Kedro</title><link href="https://pyvideo.org/pycon-us-2024/improve-your-ml-projects-embrace-reproducibility-and-production-readiness-with-kedro.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Juliana Ferreira Alves</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/improve-your-ml-projects-embrace-reproducibility-and-production-readiness-with-kedro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The more complex your ML project becomes, the more challenging it is to
manage and deploy it into production. Beyond reproducibility, factors
such as flexibility, readability, and production readiness play crucial
roles in enhancing project efficiency. This is where Kedro comes in, a
framework specifically designed to take your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The more complex your ML project becomes, the more challenging it is to
manage and deploy it into production. Beyond reproducibility, factors
such as flexibility, readability, and production readiness play crucial
roles in enhancing project efficiency. This is where Kedro comes in, a
framework specifically designed to take your ML projects to another
level.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce Kedro and explain the contexts in which
it should be used. You'll gain hands-on experience with Python, learning
how to smoothly integrate Kedro into your projects. This will enable you
to spend less time on tedious 'plumbing' work and more time focusing on
solving new problems.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Keynote - Simon Willison</title><link href="https://pyvideo.org/pycon-us-2024/keynote-simon-willison.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Simon Willison</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/keynote-simon-willison.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Lies, damned lies and large language models</title><link href="https://pyvideo.org/pycon-us-2024/lies-damned-lies-and-large-language-models.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Jodie Burchell</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/lies-damned-lies-and-large-language-models.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Would you like to use large language models (LLMs) in your own project,
but are troubled by their tendency to frequently “hallucinate”, or
produce incorrect information? Have you ever wondered if there was a way
to easily measure an LLM’s hallucination rate, and compare this against
other models …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Would you like to use large language models (LLMs) in your own project,
but are troubled by their tendency to frequently “hallucinate”, or
produce incorrect information? Have you ever wondered if there was a way
to easily measure an LLM’s hallucination rate, and compare this against
other models? And would you like to learn how to help LLMs produce more
accurate information?&lt;/p&gt;
&lt;p&gt;In this talk, we’ll have a look at some of the main reasons that
hallucinations occur in LLMs, and then focus on how we can measure one
specific type of hallucination: the tendency of models to regurgitate
misinformation that they have learned from their training data. We’ll
explore how we can easily measure this type of hallucination in LLMs
using a dataset called &lt;em&gt;TruthfulQA&lt;/em&gt; in conjunction with Python tooling
including Hugging Face’s &lt;tt class="docutils literal"&gt;datasets&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;transformers&lt;/tt&gt; packages, and
the &lt;tt class="docutils literal"&gt;langchain&lt;/tt&gt; package.&lt;/p&gt;
&lt;p&gt;We’ll end by looking at recent initiatives to reduce hallucinations in
LLMs, using a technique called retrieval augmented generation (RAG).
We’ll look at how and why RAG makes LLMs less likely to hallucinate, and
how this can help make these models more reliable and usable in a range
of contexts.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Lightning Talks - May 18, 5pm</title><link href="https://pyvideo.org/pycon-us-2024/lightning-talks-may-18-5pm.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/lightning-talks-may-18-5pm.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Lightning Talks - May 18, 8am</title><link href="https://pyvideo.org/pycon-us-2024/lightning-talks-may-18-8am.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/lightning-talks-may-18-8am.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Making Python safer than ever</title><link href="https://pyvideo.org/pycon-us-2024/making-python-safer-than-ever.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/making-python-safer-than-ever.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is one of the programming languages that has a huge open-source
supply chain. There are over 400,000 Python packages on Python Package
Index (PyPI) and many more on other registries like conda-forge, mostly
for scientific libraries. Making sure this and the wider Python
ecosystem are secure is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is one of the programming languages that has a huge open-source
supply chain. There are over 400,000 Python packages on Python Package
Index (PyPI) and many more on other registries like conda-forge, mostly
for scientific libraries. Making sure this and the wider Python
ecosystem are secure is a huge job and requires consistent
contributions.&lt;/p&gt;
&lt;p&gt;Thanks to OpenSSF’s Alpha-Omega project and AWS, we now have a PSF
Security Developer-in-Residence and PyPI Safety &amp;amp; Security Engineer
whose responsibility includes a security audit of the PyPI codebase and
infrastructure, improving security practices, and establishing metrics
on security posture to show the impact.&lt;/p&gt;
&lt;p&gt;In this talk, we will go over the work that has been done by the PSF
security team and what the best practices for Python library maintainers
and users are.&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h4&gt;Goal&lt;/h4&gt;
&lt;p&gt;The goal of this talk is to draw awareness of security, especially in
Python's ecosystem. It highlights how PSF is helping the community, on
the other hand, it also provides advice for a user or community member
on what can be done to make sure they are using Python safely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="target-audiences"&gt;
&lt;h4&gt;Target audiences&lt;/h4&gt;
&lt;p&gt;Ths talk is for anyone in the Python community. If you are using Python,
or your company is using Python. This talk is for you.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Measuring the performance of CPython</title><link href="https://pyvideo.org/pycon-us-2024/measuring-the-performance-of-cpython.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/measuring-the-performance-of-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years, improving performance has been one of the main
areas of focus for CPython. This talk focuses on how CPython's
performance is measured, and what it means when we say that one version
is X% faster than another. Many of these techniques apply in general …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years, improving performance has been one of the main
areas of focus for CPython. This talk focuses on how CPython's
performance is measured, and what it means when we say that one version
is X% faster than another. Many of these techniques apply in general to
all kinds of software.&lt;/p&gt;
&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A history of performance measurement in Python, and how measuring an
interpreter can be different from other kinds of software.&lt;/li&gt;
&lt;li&gt;An overview of CPython's &lt;tt class="docutils literal"&gt;pyperformance&lt;/tt&gt; benchmark suite, and what
makes a benchmark more or less useful. Why is the concept of the
&amp;quot;typical Python workload&amp;quot; so elusive? An evaluation of the breadth of
the benchmark suite and a discussion of ways in which the Python
community can help to improve it.&lt;/li&gt;
&lt;li&gt;Why measuring time is hard, and how we improve that situation with
software, hardware, and statistics.&lt;/li&gt;
&lt;li&gt;An overview of our continuous benchmarking system, based on Github
Actions.&lt;/li&gt;
&lt;li&gt;Lastly, a discussion of how these techniques can be applied to
software in general.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>NetworkX is Fast Now: Graph Analytics Unleashed</title><link href="https://pyvideo.org/pycon-us-2024/networkx-is-fast-now-graph-analytics-unleashed.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Mridul Seth</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/networkx-is-fast-now-graph-analytics-unleashed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how to find connections in your data and to gain
insights from them? Come discover how NetworkX makes this easy (and
fast!).&lt;/p&gt;
&lt;p&gt;This talk is broadly divided into two parts. First we will talk about
the power of graph analytics and how you can use …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how to find connections in your data and to gain
insights from them? Come discover how NetworkX makes this easy (and
fast!).&lt;/p&gt;
&lt;p&gt;This talk is broadly divided into two parts. First we will talk about
the power of graph analytics and how you can use tools like NetworkX to
extract information from your data, and then we will talk about how we
made the machinery behind NetworkX work with heterogeneous backends like
GraphBLAS (CPU optimized) and cuGraph (GPU optimized).&lt;/p&gt;
&lt;div class="section" id="part-i"&gt;
&lt;h4&gt;Part I&lt;/h4&gt;
&lt;p&gt;NetworkX is the most popular library in Python for graph theory and
applied network science thanks to its extensive API and
beginner-friendly documentation. NetworkX is used &amp;quot;everywhere&amp;quot;, because
graphs are everywhere. Don't believe me? We surveyed more than 300
Python packages to understand how they use NetworkX in domains ranging
from geoscience, neuroscience, genomics, biology, chemistry, quantum
computing, text and language, machine learning, causal inference,
optimization, and more. We will summarize what we learned to help you
apply graph analytics to your data.&lt;/p&gt;
&lt;p&gt;Once you start using NetworkX you will soon realize that the pure-Python
implementation starts becoming a roadblock to scalable graph analytics.
This takes us to the second part of the talk...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="part-ii"&gt;
&lt;h4&gt;Part II&lt;/h4&gt;
&lt;p&gt;What should you do when your graph data becomes too large or NetworkX
becomes too slow? Simple: use an accelerated NetworkX backend!&lt;/p&gt;
&lt;p&gt;NetworkX 3.0 added the ability to dispatch to other implementations.
This means you can use other highly tuned libraries from NetworkX to
achieve up to 100 to 10_000+ times speedup! As &amp;quot;the API for graphs&amp;quot;,
NetworkX now makes it easy to accelerate your graph workflows on CPUs
with GraphBLAS and NVIDIA GPUs with nx-cugraph. Other backends are
welcome, and we plan to support distributed graphs soon for extreme
scalability 🚀&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Observabilidad en Python para principiantes</title><link href="https://pyvideo.org/pycon-us-2024/observabilidad-en-python-para-principiantes.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Ana Paula Gonzaga</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/observabilidad-en-python-para-principiantes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, analizaré los conceptos fundamentales de observabilidad
y cómo se pueden aplicar usando Python. Demostraré qué es la
observabilidad y por qué es tan crucial en el desarrollo de software.
Cubriremos los tres pilares esenciales de la observabilidad (registros,
métricas y seguimiento) y exploraremos cómo Python, con …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, analizaré los conceptos fundamentales de observabilidad
y cómo se pueden aplicar usando Python. Demostraré qué es la
observabilidad y por qué es tan crucial en el desarrollo de software.
Cubriremos los tres pilares esenciales de la observabilidad (registros,
métricas y seguimiento) y exploraremos cómo Python, con su simplicidad y
eficacia, encaja perfectamente en este escenario. Veamos ejemplos
prácticos de cómo implementar el registro básico, recopilar métricas
simples y comprender los fundamentos del seguimiento distribuido.&lt;/p&gt;
&lt;p&gt;Línea de tiempo: 1. Introducción (3-5 minutos) Bienvenido y sobre mí:
contextualice rápidamente su experiencia con Python y la observabilidad.
Resumen de lo que se cubrirá.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;¿Qué es la observabilidad? (5 minutos) Definición e importancia:
explique de manera concisa qué es la observabilidad y por qué es
crucial en el desarrollo de software. Pilares de observabilidad: un
vistazo rápido a registros, métricas y seguimiento.&lt;/li&gt;
&lt;li&gt;Python y observabilidad (5 minutos) ¿Por qué Python? Destacaré la
idoneidad de Python para tareas de observabilidad, centrándome en la
simplicidad y eficacia. ¿Herramientas? Mencionaré rápidamente algunas
herramientas y bibliotecas como el registro y Prometheus.&lt;/li&gt;
&lt;li&gt;Demostración Práctica (10 minutos) Ejemplo con registro; Introducción
a las Métricas; Seguimiento básico;&lt;/li&gt;
&lt;li&gt;Conclusión (5 minutos) Resumen de la conferencia, repasando palabras
clave;&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Open Source Industrial Control: Turning 2,800 Tons of Metal with Python and Flask</title><link href="https://pyvideo.org/pycon-us-2024/open-source-industrial-control-turning-2800-tons-of-metal-with-python-and-flask.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Jacob Lapenna</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/open-source-industrial-control-turning-2800-tons-of-metal-with-python-and-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a story of how Python can fit into the physical world around us.
It is a story of system design and product development. It is a tale of
great breadth, covering distributed computing, custom printed circuits,
electromagnetism, some of the largest hydropower generators in the
world, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a story of how Python can fit into the physical world around us.
It is a story of system design and product development. It is a tale of
great breadth, covering distributed computing, custom printed circuits,
electromagnetism, some of the largest hydropower generators in the
world, and the software and hardware that brings this all together. This
tale covers several years of research and development, culminating in a
cyber physical system built on open-source software and easily
attainable off-the-shelf products and components.&lt;/p&gt;
&lt;p&gt;The Bureau of Reclamation is the 2nd largest hydropower generator in the
United States and operates 53 hydroelectric plants with 14.7 gigawatts
of installed capacity. On average, Reclamation plants generate 40
billion kilowatt hours of electricity annually. It takes a large fleet
of rotating machines (generators and pumps) across the western United
States to produce this much electricity, and operations and maintenance
of this fleet is a significant part of Reclamation’s annual budget.&lt;/p&gt;
&lt;p&gt;During routine diagnostic and maintenance tasks, it is often necessary
to slowly and precisely turn a machine’s rotor to make measurements at
various rotational positions. This was previously done with many
personnel climbing into the machine and pushing (or, for very large
machines, complicated crane maneuvers). This is dangerous, inefficient,
and lacks precision.&lt;/p&gt;
&lt;p&gt;With custom software and intelligent system design, we have developed a
modular system that can easily scale to turn even our largest machines
with the click of a button. The software can track the machine’s
rotational position in real time to one thousandth of a degree and can
easily expand to accommodate future diagnostic test methods. What once
put personnel at risk and potentially took days to carry out can now be
done in hours with little to no risk to personnel.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Pandas + Dask DataFrame 2.0 - Comparison to Spark, DuckDB and Polars</title><link href="https://pyvideo.org/pycon-us-2024/pandas-dask-dataframe-20-comparison-to-spark-duckdb-and-polars.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Patrick Hoefler</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/pandas-dask-dataframe-20-comparison-to-spark-duckdb-and-polars.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a library for distributed computing with Python that integrates
tightly with pandas and other libraries from the PyData stack. It offers
a DataFrame API that wraps pandas and thus offers an easy transition
into the big data space.&lt;/p&gt;
&lt;p&gt;Historically, Dask was the easiest choice to use (it …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a library for distributed computing with Python that integrates
tightly with pandas and other libraries from the PyData stack. It offers
a DataFrame API that wraps pandas and thus offers an easy transition
into the big data space.&lt;/p&gt;
&lt;p&gt;Historically, Dask was the easiest choice to use (it’s just pandas) but
struggled to achieve robust performance (there were many ways to
accidentally perform poorly). It was great for experts, but bad for
novices. Other tools (Spark, DuckDB, Polars) just did this better.&lt;/p&gt;
&lt;p&gt;Fortunately, these pain points have been fixed with the following
features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A new and vastly improved shuffle algorithm&lt;/li&gt;
&lt;li&gt;A logical query planning layer to improve performance and usability&lt;/li&gt;
&lt;li&gt;A reduced memory footprint through a more efficient data model due to
pandas 2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will look into how these changes work together across pandas, Arrow,
and Dask to provide a better UX and a more robust and faster system
overall. Additionally, we will look into a comparison of Dask against
other tools in the big data space, including Spark, Polars and DuckDB.&lt;/p&gt;
&lt;p&gt;We will use the TPC-H benchmarks to compare these tools. We will look
ahead into what the future will bring for pandas and Dask and how the
logical query planning layer can be extended to fit other frameworks
like Dask Array and XArray.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Proyecto Centinela: Seguridad en el hogar usando Raspberry Pi y Tensorflow</title><link href="https://pyvideo.org/pycon-us-2024/proyecto-centinela-seguridad-en-el-hogar-usando-raspberry-pi-y-tensorflow.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Monica Limachi</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/proyecto-centinela-seguridad-en-el-hogar-usando-raspberry-pi-y-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teniendo un Raspberry Pi con las características de un mini computador
brinda diversas opciones para construir un sistema de seguridad
utilizando bibliotecas como Tensorflow, ofreciendo varias ventajas sobre
los sistemas tradicionales, por lo que es una opción para las personas
en general con conocimiento en tecnología que buscan la …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teniendo un Raspberry Pi con las características de un mini computador
brinda diversas opciones para construir un sistema de seguridad
utilizando bibliotecas como Tensorflow, ofreciendo varias ventajas sobre
los sistemas tradicionales, por lo que es una opción para las personas
en general con conocimiento en tecnología que buscan la personalización,
el control, el almacenamiento, el reconocimiento facial entre otros:&lt;/p&gt;
&lt;p&gt;Personalizar las tareas. Actualmente las bibliotecas cuentan con
reconocimiento facial para accesos autorizados, por lo cual existe una
posibilidad de integración con otros dispositivos domésticos
inteligentes, se puede crear un ecosistema interconectado, activando
luces, cerraduras o alarmas en función de las detecciones de la app.&lt;/p&gt;
&lt;p&gt;Almacenamiento local de datos, esto para mantener las grabaciones y
datos privados, evitando problemas de almacenamiento en la nube. Ademas
de tener acceso a las bibliotecas de código abierto para una mayor
transparencia y control.&lt;/p&gt;
&lt;p&gt;Reconocimiento facial y de objetos, va mas allá de la detección de
movimiento básico, identificando intrusos, mascotas u objetos
específicos para respuestas específicas.&lt;/p&gt;
&lt;p&gt;Mensajes: También se realiza la supervisión y alertas en tiempo real al
celular.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Python and Data Storytelling to the Rescue: Let's Avoid More Deaths by PowerPoint</title><link href="https://pyvideo.org/pycon-us-2024/python-and-data-storytelling-to-the-rescue-lets-avoid-more-deaths-by-powerpoint.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Sebastián Flores</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/python-and-data-storytelling-to-the-rescue-lets-avoid-more-deaths-by-powerpoint.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; Over the past few years, I have experimented with various
presentation formats (jupyter notebook + RISE, streamlit, and quarto)
and graphic libraries (matplotlib, seaborn, altair, powerbi, tableau,
vizzu) in search of greater interactivity when presenting and teaching.
At the same time, I became very interested in the related topic …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; Over the past few years, I have experimented with various
presentation formats (jupyter notebook + RISE, streamlit, and quarto)
and graphic libraries (matplotlib, seaborn, altair, powerbi, tableau,
vizzu) in search of greater interactivity when presenting and teaching.
At the same time, I became very interested in the related topic of data
storytelling, which focuses on the skills and hacks to make a
presentation memorable and impactful. I think this combination of
concepts (Python and Data Storytelling) is innovative and has not been
sufficiently explored and taught. During the talk, I will share insights
and suggestions on different skills and technical tools that we can use
to create more engaging, entertaining, and memorable presentations using
Python libraries and programs. Let's make the world better, one
presentation at a time!&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Python and SQL: Better Together, Powered by DuckDB</title><link href="https://pyvideo.org/pycon-us-2024/python-and-sql-better-together-powered-by-duckdb.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Alex Monahan</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/python-and-sql-better-together-powered-by-duckdb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data management systems and data scientists have a troubled
relationship: Common systems such as Postgres or Spark are hard to set
up and maintain, hard to transfer data into and out of, and hard to
integrate into Python workflows. In response, data scientists have
developed their own data wrangling …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data management systems and data scientists have a troubled
relationship: Common systems such as Postgres or Spark are hard to set
up and maintain, hard to transfer data into and out of, and hard to
integrate into Python workflows. In response, data scientists have
developed their own data wrangling tools including Pandas and Polars.
These tools are more natural to use, but are limited in the amount of
data they can process and the amount of automatic optimization.&lt;/p&gt;
&lt;p&gt;DuckDB is a novel database management system purpose-built to combine
cutting edge data processing and dataframe-like ease of use. DuckDB
integrates deeply with the Python data analytics and engineering
ecosystems - its Python client has over 1.5 million downloads each
month. DuckDB can read and write popular Python dataframe libraries:
Pandas, Polars, and Apache Arrow. DuckDB can even query Pandas
dataframes faster than Pandas itself. Beyond dataframes, reading and
writing is supported for Postgres, MySQL, and SQLite databases, and
across many file formats (even on cloud object storage).&lt;/p&gt;
&lt;p&gt;In addition to the friendliest SQL dialect in the world, DuckDB provides
options for using Pythonic dataframe syntax directly on top of the
database engine. DuckDB includes a relational API, an experimental
PySpark-compatible API, and is the default engine for the Ibis portable
dataframe library.&lt;/p&gt;
&lt;p&gt;DuckDB supports complex queries, is MIT licensed, and has no external
dependencies - it is a single pip install away! It is fast, easy to
install and use, and handles larger than RAM datasets. Since DuckDB runs
in the same process as the Python interpreter, no socket communication
has to occur, making data transfer virtually instantaneous.&lt;/p&gt;
&lt;p&gt;In our talk, we will describe DuckDB, compare it with Python dataframe
libraries, and show how to combine DuckDB and dataframes for fast and
easy data processing.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>¿Qué pasa, calabaza(_bot)? Ingenería de datos para mi salud mental</title><link href="https://pyvideo.org/pycon-us-2024/que-pasa-calabaza_bot-ingeneria-de-datos-para-mi-salud-mental.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Sergio Sanchez</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/que-pasa-calabaza_bot-ingeneria-de-datos-para-mi-salud-mental.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Calabaza_bot&amp;quot; es un bot de telegram que me permite hacer seguimiento de
mi salud mental, registrar momentos importantes y notas de voz, todo
utilizando tecnologías open source, gratuitas (o exageradamente baratas)
como: 1. Telegram y el paquete &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-telegram-bot&lt;/span&gt;&lt;/tt&gt; 2. Fly.io 3. La
nube de AWS (S3, Lambda Functions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Calabaza_bot&amp;quot; es un bot de telegram que me permite hacer seguimiento de
mi salud mental, registrar momentos importantes y notas de voz, todo
utilizando tecnologías open source, gratuitas (o exageradamente baratas)
como: 1. Telegram y el paquete &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-telegram-bot&lt;/span&gt;&lt;/tt&gt; 2. Fly.io 3. La
nube de AWS (S3, Lambda Functions) 4. Whisper de OpenAI 5. GitHub
Actions y dbt 6. Snowflake&lt;/p&gt;
&lt;p&gt;Con &amp;quot;Calabaza_bot&amp;quot;, puedo fácilmente mantener un registro de tus
emociones y estado de ánimo diario, registrar momentos importantes e
insights, y analizar las tendencias de tu salud mental a lo largo del
tiempo. Al aprovechar la potencia de las últimas tecnologías,
&amp;quot;Calabaza_bot&amp;quot; me ayuda a entender mejor mi salud mental y tomar
decisiones informadas sobre mi bienestar general.&lt;/p&gt;
&lt;p&gt;En esta charla, te llevaré en el viaje de construcción de
&amp;quot;Calabaza_bot&amp;quot;, compartiré los desafíos, lecciones e ideas que aprendí
durante el proceso de desarrollo. Descubre cómo aproveché las últimas
tecnologías y técnicas para construir un bot funcional y efectivo de
seguimiento de la salud mental, y aprende cómo puedes aplicar estos
conocimientos a tus propios proyectos.&lt;/p&gt;
&lt;p&gt;Ya seas desarrollador, analista de datos o defensor de la salud mental,
esta charla es para ti.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Speed is Not All You Need for Data Processing</title><link href="https://pyvideo.org/pycon-us-2024/speed-is-not-all-you-need-for-data-processing.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Kevin Kho</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/speed-is-not-all-you-need-for-data-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas was the dominant local data processing framework for majority of
the last decade. Now, there are many other options available like Polars
and DuckDB. Is it worth switching to them? One of the main reasons
developers switch is because of the supposed speed. TPCH benchmarks show
Polars and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas was the dominant local data processing framework for majority of
the last decade. Now, there are many other options available like Polars
and DuckDB. Is it worth switching to them? One of the main reasons
developers switch is because of the supposed speed. TPCH benchmarks show
Polars and DuckDB are an order of magnitude faster than Pandas (and
Dask) because of the Rust-based or C++ implementation.&lt;/p&gt;
&lt;p&gt;For large-scale data, we are often told to use pure native Spark
whenever possible. Pandas UDFs are often discouraged because they are
deemed as a bottleneck. The optimizer works best when it can see the
entire query plan, but Pandas UDFs are a black box.&lt;/p&gt;
&lt;p&gt;But as practitioners, we have to ask two related questions: 1. Are these
assumptions true? Is it universally true that Pandas and Pandas UDFs are
slower? 2. Even if it it slower, is it worth the development overhead to
avoid using Pandas?&lt;/p&gt;
&lt;p&gt;In this talk, we'll show benchmarks across data of various sizes to show
that these common assumptions are not always true. In fact, we'll see
that Pandas UDFs can actually be faster than native Spark in some cases.
With this result in mind, data practitioners should just focus on the
tools that serve them best rather than adjusting to the tools.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Testing Data Pipelines</title><link href="https://pyvideo.org/pycon-us-2024/testing-data-pipelines.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Amitosh Swain</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/testing-data-pipelines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hello 👋!&lt;/p&gt;
&lt;p&gt;I'll review few great ways to test data pipelines in this talk. This
approach's primary goal is to ensure data flows smoothly through the
pipelines by quickly identifying and fixing any problems. While the talk
uses Airflow as the base, the techniques presented are toolkit-agnostic.&lt;/p&gt;
&lt;p&gt;When it comes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hello 👋!&lt;/p&gt;
&lt;p&gt;I'll review few great ways to test data pipelines in this talk. This
approach's primary goal is to ensure data flows smoothly through the
pipelines by quickly identifying and fixing any problems. While the talk
uses Airflow as the base, the techniques presented are toolkit-agnostic.&lt;/p&gt;
&lt;p&gt;When it comes to testing pipelines, the process is similar to testing
software applications. It includes running unit tests for each pipeline
component, integration tests for the entire pipeline, and end-to-end
tests to ensure accurate data output. However, I'll also discuss unique
methods like data snapshot testing and online and offline data quality
checks.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Trust Fall: Three Hidden Gems in MLFlow</title><link href="https://pyvideo.org/pycon-us-2024/trust-fall-three-hidden-gems-in-mlflow.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Krishi Sharma</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/trust-fall-three-hidden-gems-in-mlflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AI research is more important now than ever. Trust in AI is critical,
but it’s hard to build trust without metrics and documentation. How can
we make documentation as easy as possible in order to maintain trust in
the results from our research? Is there a way to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AI research is more important now than ever. Trust in AI is critical,
but it’s hard to build trust without metrics and documentation. How can
we make documentation as easy as possible in order to maintain trust in
the results from our research? Is there a way to organize our models so
that we can ensure reproducibility? How can we save ourselves precious
development time by automating parts of the metric tracking process?&lt;/p&gt;
&lt;p&gt;In this talk, we’ll give a brief introduction to a popular metric
tracking tool, MLFlow, before going into a deep dive on three lesser
known features that can enhance collaboration, increase transparency and
reduce the time wasted reproducing results.&lt;/p&gt;
&lt;p&gt;The three features that we’ll talk about are autologging, MLFlow system
tags and the MLFlow model registry. We’ll see how using these three
features can save you tons of time that would have otherwise been wasted
writing lines of code, looking for old code or finding the right model
version.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you’ll have all the knowledge you need to
successfully use MLFlow to your best advantage. You’ll be able to
automatically log every parameter and metric according to your framework
of choice, link the version of code to the metrics that version produced
for faster reproducibility and have a process that you can reliably use
to write helpful documentation quickly.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Usando Python en una oficina tradicional</title><link href="https://pyvideo.org/pycon-us-2024/usando-python-en-una-oficina-tradicional.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Steph Orellana Bello</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/usando-python-en-una-oficina-tradicional.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla hablaré sobre cómo compartir soluciones y fomentar el uso
de Python en tareas cotidianas cuando trabajas dentro de una compañía
que usa métodos tradicionales como Word y Excel. Es importante entender
que, si bien existe un importante desarrollo de tecnologías a gran
escala que nos permiten …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla hablaré sobre cómo compartir soluciones y fomentar el uso
de Python en tareas cotidianas cuando trabajas dentro de una compañía
que usa métodos tradicionales como Word y Excel. Es importante entender
que, si bien existe un importante desarrollo de tecnologías a gran
escala que nos permiten trabajar con Inteligencia Artificial, Big Data,
Aplicaciones Web, etc. en el mundo real, especialmente en instituciones
de carácter público, se siguen utilizando y exigiendo métodos
tradicionales para compartir y almacenar la información. En este trabajo
“a pequeña escala”, existen desafíos como la generación de reportes
automáticos en formato Word, el relleno de formularios en planillas
Excel para la entrega de información oficial y la generación de
aplicaciones que ayuden a las personas que no programan a realizar
procesos repetitivos. Presentaré ejemplos de reportes reproducibles con
Quarto, relleno automático de formatos oficiales en planillas Excel con
Pandas+xlwings y generación de aplicaciones con Streamlit y Shiny.
También entregaré algunos consejos sobre cómo trabajar colaborativamente
con personas que no programan y cómo desarrollar soluciones con Python
que puedan ser utilizadas dentro del contexto del trabajo de oficina
diario.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Using Python to assess landslide risk: A matter of life and death</title><link href="https://pyvideo.org/pycon-us-2024/using-python-to-assess-landslide-risk-a-matter-of-life-and-death.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Eric Matthes</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/using-python-to-assess-landslide-risk-a-matter-of-life-and-death.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Southeast Alaska is a temperate rainforest, and landslides have been
happening here for thousands of years. But shifting rainfall patterns
have increased the frequency of landslides, with catastrophic results.
In the last 8 years, three different towns in our region have
experienced fatal landslides.&lt;/p&gt;
&lt;p&gt;After a major landslide in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Southeast Alaska is a temperate rainforest, and landslides have been
happening here for thousands of years. But shifting rainfall patterns
have increased the frequency of landslides, with catastrophic results.
In the last 8 years, three different towns in our region have
experienced fatal landslides.&lt;/p&gt;
&lt;p&gt;After a major landslide in 2015, a number of local people with
experience in the outdoors and in various scientific fields noticed a
possible correlation between river levels and landslide activity. Our
main river has a small watershed, so it responds rapidly to periods of
heavy precipitation. Using Python, I was able to investigate the
question we all kept coming back to:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Is the correlation between changing river levels and landslide activity
strong enough to serve as the basis for predicting landslides?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using historical readings from a local river gage, a set of conditions
was identified that correlate meaningfully with landslide activity. In
about 12 events where the river met those conditions, at least 5 were
associated with known landslides.&lt;/p&gt;
&lt;p&gt;I posted a landslide-risk monitoring tool in 2021, which provides a
visual indication of when the river is behaving in a way that correlates
with previously known landslide events. This tool is used by many
community members to assess the ongoing risk of landslide activity
during heavy rain events. Just as importantly, it helps people let go of
anxiety when we're experiencing rain that feels heavy, but isn't
actually associated with landslide risk.&lt;/p&gt;
&lt;p&gt;This talk will show how Python's vast ecosystem supports the entire
citizen-scientist lifecycle, from idea to public-facing resource.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Visual Data Storytelling with Blender and Python</title><link href="https://pyvideo.org/pycon-us-2024/visual-data-storytelling-with-blender-and-python.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Neeraj Pandey</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/visual-data-storytelling-with-blender-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have encountered beautiful animations and data storytelling
through many educators and experimentalists online and wondered if it’s
only done in javascript or could also be done by Python. In this talk,
the attendees will learn how to blend the 3D animation power of Blender
with the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have encountered beautiful animations and data storytelling
through many educators and experimentalists online and wondered if it’s
only done in javascript or could also be done by Python. In this talk,
the attendees will learn how to blend the 3D animation power of Blender
with the 2D plotting capabilities from Python libraries like matplotlib,
plotly, seaborn, etc.&lt;/p&gt;
&lt;p&gt;We will demonstrate some practical techniques to create immersive 3D
models with Blender and enhance them with detailed 2D plots, providing a
comprehensive narrative for data interpretation. By integrating these
data-viz tools, devs and data enthusiasts will discover new &amp;amp; impactful
ways to leverage Python to present and communicate their data insights
from educational and work projects.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Weaving algorithms: the threads that bind the python and textile communities</title><link href="https://pyvideo.org/pycon-us-2024/weaving-algorithms-the-threads-that-bind-the-python-and-textile-communities.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Kelsey Vavasour</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/weaving-algorithms-the-threads-that-bind-the-python-and-textile-communities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are a lot of curious crossovers between programming and fiber
arts, from the origins of punch cards to borrowed terminology and shared
cultural mores. Computing drew a surprising amount from fiber arts, and
as I began programming and knitting around the same time I was
fascinated to consider …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are a lot of curious crossovers between programming and fiber
arts, from the origins of punch cards to borrowed terminology and shared
cultural mores. Computing drew a surprising amount from fiber arts, and
as I began programming and knitting around the same time I was
fascinated to consider things such as how knitting patterns can be
viewed with the same conceptual framework as programs, and that
understanding how to modify one can provide interesting insights to the
other. Both the Python and textile communities are also wonderfully
diverse and put some very important efforts in place to encourage
inclusivity, which has helped lead me to feel comfortable sharing these
insights with such a large audience. This talk aims to get people
thinking a bit outside the box and understanding connections with
communities they might not have interacted with before.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Acknowledging Women’s Contributions in the Python Community Through Podcast</title><link href="https://pyvideo.org/pycon-us-2024/acknowledging-womens-contributions-in-the-python-community-through-podcast.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/acknowledging-womens-contributions-in-the-python-community-through-podcast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been making efforts in improving the diversity
and representation among its members. There are examples of success
stories such as PyCon US Charlas, PyLadies, Djangonaut, and Django
Girls. Yet in the Python podcast community, women are still
underrepresented, making up only 17% of invited guests …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been making efforts in improving the diversity
and representation among its members. There are examples of success
stories such as PyCon US Charlas, PyLadies, Djangonaut, and Django
Girls. Yet in the Python podcast community, women are still
underrepresented, making up only 17% of invited guests among the popular
podcast series. Being a guest in a podcast is a privilege, and an
opportunity to influence the Python community. There are many women and
underrepresented group members who have made impactful contributions to
the Python community globally, and they deserve the recognition and to
be heard by the rest of us. Disheartened by the lack of representation
by women on Python podcasts, and inspired by others who have shown us
how diversity in the community can be improved through intentionality,
we decided to start a podcast with a goal to highlight their voices so
that they could receive the recognition they deserve. In this talk,earn
about them, and about our podcast series. We’ll also share how you can
further help out cause in improving representation and diversity in the
Python community.&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h4&gt;Goal&lt;/h4&gt;
&lt;p&gt;To raise awareness of the underrepresentation of certain groups,
especially women. To acknowledge the progress made by the Python
community and what can be done further to continue the improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="target-audience"&gt;
&lt;h4&gt;Target Audience&lt;/h4&gt;
&lt;p&gt;Anyone who cares about the diversity and inclusion progression in the
Python community. Community leaders who want to be allies.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Apache Arrow - El format columnar! Lo cualo?</title><link href="https://pyvideo.org/pycon-us-2024/apache-arrow-el-format-columnar-lo-cualo.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Raúl Cumplido</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/apache-arrow-el-format-columnar-lo-cualo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Escuchamos que Apache Arrow se ha convertido en un estándar de facto
para la representación eficiente de datos columnares en memoria.&lt;/p&gt;
&lt;p&gt;¡¿Pero, qué significa esto realmente?!&lt;/p&gt;
&lt;p&gt;Basado en la documentación de Apache Arrow: - es una plataforma de
desarrollo para análisis en memoria - permite que los sistemas de big
data …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Escuchamos que Apache Arrow se ha convertido en un estándar de facto
para la representación eficiente de datos columnares en memoria.&lt;/p&gt;
&lt;p&gt;¡¿Pero, qué significa esto realmente?!&lt;/p&gt;
&lt;p&gt;Basado en la documentación de Apache Arrow: - es una plataforma de
desarrollo para análisis en memoria - permite que los sistemas de big
data procesen y muevan datos rápidamente - especifica un formato de
memoria en columnas estandarizado e independiente del idioma para datos
planos y jerárquicos.&lt;/p&gt;
&lt;p&gt;Hay un poco más de información ahí, pero todavía no es fácil de digerir,
¿verdad?&lt;/p&gt;
&lt;p&gt;En esta charla pretendemos arrojar algo de luz sobre los conceptos
básicos de Apache Arrow como formato de columnas. Revisaremos los
diferentes diseños de memoria física y los tipos lógicos, profundizando
en ellos.&lt;/p&gt;
&lt;p&gt;Esta charla también cubrirá los conceptos básicos de serialización y
comunicación entre procesos (IPC), junto con los tipos de extensión
canónica y otras estructuras de datos como matrices multidimensionales
tensoriales.&lt;/p&gt;
&lt;p&gt;La charla pretende ser un ejercicio para comprender la representación
física de los datos. Proporcionará ejemplos y mostrará cómo se
representan realmente los buffers en la memoria.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Build a data visualization app for your phone</title><link href="https://pyvideo.org/pycon-us-2024/build-a-data-visualization-app-for-your-phone.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/build-a-data-visualization-app-for-your-phone.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The modern mobile phone is an incredibly powerful computing device.
However, mobile platforms have historically excluded the Python data
science community, requiring specialist platform-specific skills, or
making the use of Python data science tools exceedingly difficult.&lt;/p&gt;
&lt;p&gt;This isn't true any more. In this talk, you'll learn how to build …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The modern mobile phone is an incredibly powerful computing device.
However, mobile platforms have historically excluded the Python data
science community, requiring specialist platform-specific skills, or
making the use of Python data science tools exceedingly difficult.&lt;/p&gt;
&lt;p&gt;This isn't true any more. In this talk, you'll learn how to build and
run an app on your phone that uses the Python data analysis and
visualization tools you're already familiar with, like NumPy and
Matplotlib. No special mobile development skills are required; only a
basic familiarity with Python.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Build in-browser 3D experiences with WebGL and PyScript</title><link href="https://pyvideo.org/pycon-us-2024/build-in-browser-3d-experiences-with-webgl-and-pyscript.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/build-in-browser-3d-experiences-with-webgl-and-pyscript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know you can write Python to write no-nonsense 3D games and
interactive experiences that run entirely in the Web browser?&lt;/p&gt;
&lt;p&gt;Python's original killer app used to be ZOPE, an environment to create
dynamic websites before &amp;quot;content management system&amp;quot; was even a term.
Now, in 2024, the rules …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know you can write Python to write no-nonsense 3D games and
interactive experiences that run entirely in the Web browser?&lt;/p&gt;
&lt;p&gt;Python's original killer app used to be ZOPE, an environment to create
dynamic websites before &amp;quot;content management system&amp;quot; was even a term.
Now, in 2024, the rules have changed. Web apps are predominantly
client-side, and JavaScript rules that use case. It doesn't have to be
like this!&lt;/p&gt;
&lt;p&gt;You've probably heard about PyScript and maybe seen an intro or two.
This talk is something else. I will show you a deep dive into a single
topic: how to use PyScript with WebGL to harness the graphical power of
the Web browser. By the end of the talk, I expect you to gain confidence
that you can do it, too, and be inspired to try! The talk assumes
familiarity with Python and high-school math.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Enhancing Decorators with Type Annotations: Techniques and Best Practices</title><link href="https://pyvideo.org/pycon-us-2024/enhancing-decorators-with-type-annotations-techniques-and-best-practices.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Koudai Aono</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/enhancing-decorators-with-type-annotations-techniques-and-best-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are powerful, magical syntax sugar, offering a convenient way
to wrap and enhance functions. But sometimes, it's not clear how to use
a defined decorator.&lt;/p&gt;
&lt;p&gt;What arguments should we pass to a given decorator? What functions does
it target? Does it change the return type of the wrapped …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are powerful, magical syntax sugar, offering a convenient way
to wrap and enhance functions. But sometimes, it's not clear how to use
a defined decorator.&lt;/p&gt;
&lt;p&gt;What arguments should we pass to a given decorator? What functions does
it target? Does it change the return type of the wrapped function? Have
you ever faced these questions?&lt;/p&gt;
&lt;p&gt;If proper type hints are defined for decorators, static type checkers
like mypy and pyright IDEs will point out the errors in usage. Thus,
guiding you on the right path by catching bugs earlier, reducing
unnecessary debugging and unexpected runtime behaviour.&lt;/p&gt;
&lt;p&gt;This talk will step you through type definitions utilizing
&lt;tt class="docutils literal"&gt;typing.TypeVarTuple&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;typing.Protocol&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;typing.ParamSpec&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;typing.Concatenate&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Type Parameter Syntax&lt;/tt&gt;, and more, all of
which are practical to implement and can make your project robust!&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Extensible Python: Robustness Through Addition</title><link href="https://pyvideo.org/pycon-us-2024/extensible-python-robustness-through-addition.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Pat Viafore</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/extensible-python-robustness-through-addition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modifying existing code is just the worst. It's a tangled mess of
dependencies, you don't know the original author's intent, and simple
changes feel like they break the world. But it can be better. Wouldn't
it be nice to be in a codebase where you primarily added new code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modifying existing code is just the worst. It's a tangled mess of
dependencies, you don't know the original author's intent, and simple
changes feel like they break the world. But it can be better. Wouldn't
it be nice to be in a codebase where you primarily added new code and
didn't touch the old stuff? We can achieve this by viewing your code
through the lens of extensibility.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn what extensibility means, and some common
patterns for making your code more extensible. We'll take a hard look at
the Open-Closed Principle and how to deal with a mess of dependencies.
We'll then walk through how to make your code composable so that it's
easier to build up abstractions. We'll finish off by looking through two
architectural styles that promote extensilbility: event-driven
architectures and pluggable architectures.&lt;/p&gt;
&lt;p&gt;Software is going to change (that's why we call it &amp;quot;soft&amp;quot;ware). That's
inevitable. How your codebase withstands that change is up to you. Don't
write a tangled, fragile mess that is incomprehensible. Make it easy to
extend, and you'll greatly extend the lifetime of your products.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Facilitar la comprensión de un análisis de neuroimágenes 🧠</title><link href="https://pyvideo.org/pycon-us-2024/facilitar-la-comprension-de-un-analisis-de-neuroimagenes.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Carlos Aranibar</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/facilitar-la-comprension-de-un-analisis-de-neuroimagenes.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facilitar la comprensión de los resultados de un análisis cerebral EEG
para los pacientes y proveer a los técnicos con un conjunto de
herramientas que incluye capacidades de mejorar las visualizaciones y
análisis estadístico mediante MNE, un Python library.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Geospatial Validations Using FastAPI and PostGIS</title><link href="https://pyvideo.org/pycon-us-2024/geospatial-validations-using-fastapi-and-postgis.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Lazouich Ford</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/geospatial-validations-using-fastapi-and-postgis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given the results it can deliver (and its inherent complexity),
geospatial data often takes center stage in projects it's incorporated
into. Its star power and intimidating array of fellow-travelers (GDAL,
et al) can make it easy to discount its value in simpler supporting
roles or behind-the-scenes. Looking beyond the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given the results it can deliver (and its inherent complexity),
geospatial data often takes center stage in projects it's incorporated
into. Its star power and intimidating array of fellow-travelers (GDAL,
et al) can make it easy to discount its value in simpler supporting
roles or behind-the-scenes. Looking beyond the typical analysis and
visualization toolchains--and their extreme learning curves--this talk
demonstrates some comparatively low-lift patterns for leveraging geodata
in a web application back end.&lt;/p&gt;
&lt;p&gt;We'll begin by briefly discussing how geospatial data differs from other
data types, how it is commonly formatted and made available, and which
aspects (spatial reference identifiers, e.g.) are crucial to maintaining
data correctness. Having laid out a few fundamentals we will look at
PostGIS, an open-source extension to PostgreSQL which enables support
for spatial datatypes, functions, and indexes. Finally, we'll look at an
example application based on the FastAPI web framework which uses
features of Pydantic and SQLAlchemy + GeoAlchemy 2 to implement custom
geospatial validations for inbound requests.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Hackeando el Pensamiento: Traduciendo Señales Eléctricas del Cerebro en Acciones a través de Modelos LLM.</title><link href="https://pyvideo.org/pycon-us-2024/hackeando-el-pensamiento-traduciendo-senales-electricas-del-cerebro-en-acciones-a-traves-de-modelos-llm.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Adonai Vera</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/hackeando-el-pensamiento-traduciendo-senales-electricas-del-cerebro-en-acciones-a-traves-de-modelos-llm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla única, demostraremos la increíble capacidad de &amp;quot;hackear&amp;quot;
el cerebro humano para interactuar con tecnologías avanzadas. Usando el
dispositivo Neurosity, capturaremos señales eléctricas cerebrales, que
luego serán interpretadas en Python para realizar acciones específicas.&lt;/p&gt;
&lt;p&gt;Este proceso comienza con la lectura de ondas cerebrales, utilizando un
clasificador para …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla única, demostraremos la increíble capacidad de &amp;quot;hackear&amp;quot;
el cerebro humano para interactuar con tecnologías avanzadas. Usando el
dispositivo Neurosity, capturaremos señales eléctricas cerebrales, que
luego serán interpretadas en Python para realizar acciones específicas.&lt;/p&gt;
&lt;p&gt;Este proceso comienza con la lectura de ondas cerebrales, utilizando un
clasificador para convertirlas en comandos digitales. Por ejemplo,
mostraremos cómo estas señales pueden transformarse en la acción de
pedir una pizza. Esta demostración práctica resalta el potencial de
combinar neurotecnología con aplicaciones cotidianas.&lt;/p&gt;
&lt;p&gt;Luego, incorporaremos tecnología de voz a texto para convertir un
diálogo sobre pedir una pizza en una llamada telefónica real. Esta
integración multifacética ilustra la eficacia de Python en la unión de
distintas tecnologías en un flujo de trabajo coherente.&lt;/p&gt;
&lt;p&gt;Además, compartiremos insights y recomendaciones basadas en nuestra
experiencia en la implementación de estas tecnologías. Los participantes
obtendrán una comprensión detallada de cómo la interpretación de señales
cerebrales puede aplicarse en situaciones reales, abriendo nuevas
posibilidades en la interacción humano-máquina.&lt;/p&gt;
&lt;p&gt;Esta presentación es una ventana al futuro de la interacción
humano-computadora, destacando el poder transformador de la
neurotecnología y la inteligencia artificial en la vida diaria.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Hatch: The only tool you need</title><link href="https://pyvideo.org/pycon-us-2024/hatch-the-only-tool-you-need.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Ofek Lev</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/hatch-the-only-tool-you-need.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="docutils container"&gt;
&lt;object data="https://raw.githubusercontent.com/pypa/hatch/master/docs/assets/images/logo.svg" style="width: 500px;" type="image/svg+xml"&gt;Hatch logo&lt;/object&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="title"&gt;
&lt;h4&gt;Title&lt;/h4&gt;
&lt;p&gt;Hatch: The only tool you need&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="category"&gt;
&lt;h4&gt;Category&lt;/h4&gt;
&lt;p&gt;Packaging/tooling&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;30 minutes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;While other language ecosystems have a streamlined workflow that
involves a single tool like Rust's
&lt;a class="reference external" href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt; and JavaScript's
&lt;a class="reference external" href="https://github.com/npm/cli"&gt;npm&lt;/a&gt;, maintaining Python projects has
historically involved learning and using an ever-growing set of tools …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="docutils container"&gt;
&lt;object data="https://raw.githubusercontent.com/pypa/hatch/master/docs/assets/images/logo.svg" style="width: 500px;" type="image/svg+xml"&gt;Hatch logo&lt;/object&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="title"&gt;
&lt;h4&gt;Title&lt;/h4&gt;
&lt;p&gt;Hatch: The only tool you need&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="category"&gt;
&lt;h4&gt;Category&lt;/h4&gt;
&lt;p&gt;Packaging/tooling&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;30 minutes&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;While other language ecosystems have a streamlined workflow that
involves a single tool like Rust's
&lt;a class="reference external" href="https://github.com/rust-lang/cargo"&gt;Cargo&lt;/a&gt; and JavaScript's
&lt;a class="reference external" href="https://github.com/npm/cli"&gt;npm&lt;/a&gt;, maintaining Python projects has
historically involved learning and using an ever-growing set of tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;packaging: &lt;tt class="docutils literal"&gt;distutils&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;flit&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;dependency management: &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pip-tools&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;poetry&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Python management: &lt;tt class="docutils literal"&gt;pyenv&lt;/tt&gt;, Homebrew, Windows store&lt;/li&gt;
&lt;li&gt;environments: &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;nox&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;versioning: &lt;tt class="docutils literal"&gt;pbr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;setuptools_scm&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;bump2version&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;versioneer&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;builds: &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;build&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;publishing: &lt;tt class="docutils literal"&gt;twine&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk explains how &lt;a class="reference external" href="https://github.com/pypa/hatch"&gt;Hatch&lt;/a&gt; can be
that unified tool for Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience"&gt;
&lt;h4&gt;Audience&lt;/h4&gt;
&lt;p&gt;Programmers at any level that wish to simplify their development
experience.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="level"&gt;
&lt;h4&gt;Level&lt;/h4&gt;
&lt;p&gt;Any&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;Attendees will learn how to manage the entire lifecycle of a project
with Hatch from creation to publishing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Intro (3 minutes)&lt;/li&gt;
&lt;li&gt;brief history&lt;/li&gt;
&lt;li&gt;why rewrite&lt;/li&gt;
&lt;li&gt;status/current users&lt;/li&gt;
&lt;li&gt;Project setup (2 minutes)&lt;/li&gt;
&lt;li&gt;installation&lt;/li&gt;
&lt;li&gt;porting setuptools-based projects&lt;/li&gt;
&lt;li&gt;creating new projects, with options&lt;/li&gt;
&lt;li&gt;Python management (1 minute)&lt;/li&gt;
&lt;li&gt;Packaging (6 minutes)&lt;/li&gt;
&lt;li&gt;briefly show &lt;tt class="docutils literal"&gt;pyproject.toml&lt;/tt&gt; metadata&lt;/li&gt;
&lt;li&gt;build targets&lt;/li&gt;
&lt;li&gt;metadata hook plugins&lt;/li&gt;
&lt;li&gt;file inclusion&lt;ul&gt;
&lt;li&gt;defaults&lt;/li&gt;
&lt;li&gt;benefits vs setuptools config&lt;/li&gt;
&lt;li&gt;VCS support&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dev mode&lt;/li&gt;
&lt;li&gt;build hook plugins&lt;/li&gt;
&lt;li&gt;Dependencies (2 minutes)&lt;/li&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;auto-sync&lt;/li&gt;
&lt;li&gt;workspaces, monorepos&lt;/li&gt;
&lt;li&gt;Environments (8 minutes)&lt;/li&gt;
&lt;li&gt;basic options&lt;/li&gt;
&lt;li&gt;philosophical difference between &lt;tt class="docutils literal"&gt;tox&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;nox&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;scripts&lt;/li&gt;
&lt;li&gt;context formatting&lt;/li&gt;
&lt;li&gt;matrices&lt;/li&gt;
&lt;li&gt;overrides&lt;/li&gt;
&lt;li&gt;environment plugins&lt;/li&gt;
&lt;li&gt;Static analysis via Ruff (2 minutes)&lt;/li&gt;
&lt;li&gt;Testing via pytest (2 minutes)&lt;/li&gt;
&lt;li&gt;Versioning (2 minutes)&lt;/li&gt;
&lt;li&gt;source plugins&lt;/li&gt;
&lt;li&gt;bumping&lt;/li&gt;
&lt;li&gt;Publishing (1 minute)&lt;/li&gt;
&lt;li&gt;Future (1 minute)&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ofek/extensionlib"&gt;extension modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://discuss.python.org/t/17690"&gt;lock files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>How to amplify diversity inside a Python community?</title><link href="https://pyvideo.org/pycon-us-2024/how-to-amplify-diversity-inside-a-python-community.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Juliana (Jules) Barros Lima</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/how-to-amplify-diversity-inside-a-python-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I once heard the question of whether there was a real need to create
more support subgroups for minorities in Python: whether, at the end of
the day, the community would be more segregated than united. When I
passed this on to a few people, a new demand emerged …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I once heard the question of whether there was a real need to create
more support subgroups for minorities in Python: whether, at the end of
the day, the community would be more segregated than united. When I
passed this on to a few people, a new demand emerged: that there were
difficulties in creating more diverse teams.&lt;/p&gt;
&lt;p&gt;Based on the organization of meetups, regional events and ethnographic
research among different tech communities, this talk seeks not only to
present possible solutions for increasing diversity in python
environments (such as academia, companies and communities), but also to
instigate debate about where we can improve and how to truly listen to
pythonistas.&lt;/p&gt;
&lt;p&gt;This talk also aims to explore already established tools - such as the
Code of Conduct - and evolve them in the light of new minorities and to
provide a safe space for learning and connections.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Keynote - Jay Miller</title><link href="https://pyvideo.org/pycon-us-2024/keynote-jay-miller.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Jay Miller</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/keynote-jay-miller.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Lightning Talks - May 17, 6pm</title><link href="https://pyvideo.org/pycon-us-2024/lightning-talks-may-17-6pm.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/lightning-talks-may-17-6pm.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>LSP Demystified - How to write an LSP server in Python</title><link href="https://pyvideo.org/pycon-us-2024/lsp-demystified-how-to-write-an-lsp-server-in-python.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Chahak Mehta</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/lsp-demystified-how-to-write-an-lsp-server-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today's IDE-land, we've often overheard conversations between
developers about new features being added to their editor-of-choice and
how editor XYZ is better than ABC (vim vs emacs vs VSCode vs IntelliJ,
we know the drill). This talk doesn't stoke fire to that debate in any
direction (since different …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today's IDE-land, we've often overheard conversations between
developers about new features being added to their editor-of-choice and
how editor XYZ is better than ABC (vim vs emacs vs VSCode vs IntelliJ,
we know the drill). This talk doesn't stoke fire to that debate in any
direction (since different things work for different people). But, a
very important tool that often powers most of the magical features that
come with modern software development is the LSP server. The LSP server
often keeps chugging in the background, tirelessly providing the user
with diagnosis regarding the codes, autocompleting variables, and
formatting the codebase to maintain prettiness. While various elements
such as parsing, linting, and formatting have long existed, it is the
LSP server that seamlessly unifies these features in an editor-agnostic
manner.&lt;/p&gt;
&lt;p&gt;LSP servers are used everywhere, often installed individually by the
user even, but there aren't many resources regarding how to actually
build a functional server that can do more than send /&amp;quot;Hello Editor
World!&amp;quot;/ messages to the editor. This talk aims to fill in that gap to
provide a blueprint of steps that anyone who wants to implement an LSP
server in Python can follow. Following this talk will provide a better
understanding of the JSON-RPC protocol used by LSP servers to
communicate with the client, diagnosis that a server can share with the
user and pitfalls that one can fall into while implementing their own
server. It will end with a live demonstration of a toy-LSP server that
provides the basic functionalities to an editor client.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Making Beautiful, Publication Quality Tables in Python is Possible in 2024</title><link href="https://pyvideo.org/pycon-us-2024/making-beautiful-publication-quality-tables-in-python-is-possible-in-2024.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Michael Chow</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/making-beautiful-publication-quality-tables-in-python-is-possible-in-2024.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tables are undeniably useful for data work. We have many excellent
DataFrame libraries in Python and they give us the flexibility to
manipulate data to our hearts content. But what happens when comes to
presenting tables to others?&lt;/p&gt;
&lt;p&gt;The display of tables can be beautiful. Tables can convey information …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tables are undeniably useful for data work. We have many excellent
DataFrame libraries in Python and they give us the flexibility to
manipulate data to our hearts content. But what happens when comes to
presenting tables to others?&lt;/p&gt;
&lt;p&gt;The display of tables can be beautiful. Tables can convey information
effectively, just as plots do and, sometimes, it’s the better way to
present data. Truly, the time has come to bridge the divide between raw
DataFrame output and wondrously-structured tables suitable for
publication.&lt;/p&gt;
&lt;p&gt;Let's review the state of ‘display tables’ in 2024. We’ll go over which
table components make for effective displays of information. It’s
surprising but there are many considerations that go into making a
well-crafted table. We’ll take a look at the combinations of Python
packages that fit together to make this important task possible, and
marvel together at the tabular results they can provide.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Making Your Documentation Interactive with PyScript</title><link href="https://pyvideo.org/pycon-us-2024/making-your-documentation-interactive-with-pyscript.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Jeff Glass</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/making-your-documentation-interactive-with-pyscript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The documentation for your Python package is already peppered with
examples – what if users could run them in an interactive REPL, right
inside the online documentation? With PyScript, developers can add an
interactive Python session to any webpage, including integration with
Sphinx, MkDocs, readthedocs, and GitHub Pages. Your documentation …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The documentation for your Python package is already peppered with
examples – what if users could run them in an interactive REPL, right
inside the online documentation? With PyScript, developers can add an
interactive Python session to any webpage, including integration with
Sphinx, MkDocs, readthedocs, and GitHub Pages. Your documentation
examples become an interactive learning session with zero backend or
installation.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how to enhance your Python web
documentation by making it interactive and runnable anywhere, in a fully
serverless way.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Mock It Till You Make It: How to Verify Your External Mocks Without Ever Leaving Unittest</title><link href="https://pyvideo.org/pycon-us-2024/mock-it-till-you-make-it-how-to-verify-your-external-mocks-without-ever-leaving-unittest.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Liz Acosta</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/mock-it-till-you-make-it-how-to-verify-your-external-mocks-without-ever-leaving-unittest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A controlled environment and consistent dependencies are crucial to
writing good and – most importantly – relevant tests in Python. While
the advent of APIs has made using external services so much more
accessible, APIs can lead to flaky or deceptive tests, ultimately
putting applications at risk. In this talk, you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A controlled environment and consistent dependencies are crucial to
writing good and – most importantly – relevant tests in Python. While
the advent of APIs has made using external services so much more
accessible, APIs can lead to flaky or deceptive tests, ultimately
putting applications at risk. In this talk, you will learn how to use
Python’s Mock object to create more reliable stand-ins for APIs beyond
your control … all within the unittest framework.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Modern binary build systems</title><link href="https://pyvideo.org/pycon-us-2024/modern-binary-build-systems.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Henry Fredrick Schreiner III</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/modern-binary-build-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Binary extensions underlie much of the modern Python ecosystem,
providing performance and access to a wealth of existing code. Packaging
for these libraries is rapidly changing from thousands of lines of
distutils and setuptools based hackery to build systems designed for
binaries like scikit-build-core, meson-python, and maturin. NumPy, for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Binary extensions underlie much of the modern Python ecosystem,
providing performance and access to a wealth of existing code. Packaging
for these libraries is rapidly changing from thousands of lines of
distutils and setuptools based hackery to build systems designed for
binaries like scikit-build-core, meson-python, and maturin. NumPy, for
example, went from around 13K to 2K lines of building related code by
moving to Meson in NumPy 1.26.&lt;/p&gt;
&lt;p&gt;These build systems provide a much more integrated experience than was
previously possible for compiled extensions. For example, CMake or Ninja
are only required if the system doesn’t already provide an appropriate
copy, which allows building with an external ninja/cmake on systems
without binary wheels on PyPI like Pyodide, BSD, and Android. Modern
editable installs are supported. Support for advanced features like ABI3
wheels or wheels that don’t call CPython is usually just a single
configuration option.&lt;/p&gt;
&lt;p&gt;We will look at how easy it is now to set up a binary extension using
CMake, Meson, or Maturin (Rust only). It can be done with only three
files each containing only a handful of lines of code. Unlike the
previous solutions, this covers cross-compilation,multithreaded builds,
modern C++ standards, and other features that would each require custom
code in a classic setup.py. Combined with cibuildwheel for building
wheels and good support from modern binding tools like pybind11 and
nanobind, the barrier for entry to reliable compiled extensions has
dropped dramatically.&lt;/p&gt;
&lt;p&gt;We will also look at the challenges and solutions from some larger
conversions to modern build systems, like NumPy’s and RAPIDS.ai.&lt;/p&gt;
&lt;p&gt;After this talk, you will know how to easily create compiled extensions
to solve problems you encounter, and how to move existing projects to
these modern build systems.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Near Zero-Overhead Python Code Coverage</title><link href="https://pyvideo.org/pycon-us-2024/near-zero-overhead-python-code-coverage.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Juan Altmayer Pizzorno</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/near-zero-overhead-python-code-coverage.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code &lt;em&gt;coverage&lt;/em&gt; shows what lines or branches your tests are missing. If
you maintain Python code, chances are you use &lt;tt class="docutils literal"&gt;coverage.py&lt;/tt&gt; to measure
it. You probably don't use it all the time, though, as it slows down
your tests -- up to a whopping 2.6x. This talk introduces …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code &lt;em&gt;coverage&lt;/em&gt; shows what lines or branches your tests are missing. If
you maintain Python code, chances are you use &lt;tt class="docutils literal"&gt;coverage.py&lt;/tt&gt; to measure
it. You probably don't use it all the time, though, as it slows down
your tests -- up to a whopping 2.6x. This talk introduces SlipCover, a
new tool that brings this overhead down to only 5%. We look into what
slows down &lt;tt class="docutils literal"&gt;coverage.py&lt;/tt&gt;, and show how &lt;tt class="docutils literal"&gt;SlipCover&lt;/tt&gt; is able to do
better. For Python 3.12, SlipCover adopts the new &lt;a class="reference external" href="https://peps.python.org/pep-0669/"&gt;Low Impact Monitoring
API&lt;/a&gt; (PEP669); we discuss the
advantages and challenges of integrating it into SlipCover.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>PEP 683: Immortal Objects - A new approach for memory managing</title><link href="https://pyvideo.org/pycon-us-2024/pep-683-immortal-objects-a-new-approach-for-memory-managing.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Vinícius Gubiani Ferreira</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/pep-683-immortal-objects-a-new-approach-for-memory-managing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most people that use Python, worrying about memory is not an issue.
But that's not the case when you have to handle a lot of requests on a
large scale. So how do you reduce memory consumption without affecting
the CPU?&lt;/p&gt;
&lt;p&gt;In this presentation I'll discuss about memory …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most people that use Python, worrying about memory is not an issue.
But that's not the case when you have to handle a lot of requests on a
large scale. So how do you reduce memory consumption without affecting
the CPU?&lt;/p&gt;
&lt;p&gt;In this presentation I'll discuss about memory management in Python from
the basics, where the necessity for PEP 683 came from, and the changes
introduced by it. I also intend to discuss why this PEP is so important
for the language, and what we'll be able to achieve with it in the
future, such as changes to the GIL and true parallelism.&lt;/p&gt;
&lt;p&gt;The talk is targeted for folks who are intermediate/advanced
pythonistas. People who are just starting with Python (maybe less than
1.5 years) may feel a bit lost. Even so, curious learners are more than
welcome to join, and I'll try my best to make it easy for all audiences
on this advanced topic. After this presentation, participants will learn
a bit more about how memory management works under the hood in python,
and how it may change in the next couple of years.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>¡Pero si funciona en mi computadora! Cómo lograr que nuestros análisis de datos sean reproducibles</title><link href="https://pyvideo.org/pycon-us-2024/pero-si-funciona-en-mi-computadora-como-lograr-que-nuestros-analisis-de-datos-sean-reproducibles.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Riva Quiroga</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/pero-si-funciona-en-mi-computadora-como-lograr-que-nuestros-analisis-de-datos-sean-reproducibles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La reproducibilidad computacional no solo es un asunto de ejecución de
código, sino, sobre todo, un asunto vinculado a la comunicación. Para
asegurarnos de que otras personas (nuestro equipo, nuestro yo del
futuro, otras colegas, etc.) puedan reproducir nuestros resultados a
partir de los datos y el código que …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La reproducibilidad computacional no solo es un asunto de ejecución de
código, sino, sobre todo, un asunto vinculado a la comunicación. Para
asegurarnos de que otras personas (nuestro equipo, nuestro yo del
futuro, otras colegas, etc.) puedan reproducir nuestros resultados a
partir de los datos y el código que escribimos, necesitamos que nuestros
proyectos comuniquen de manera clara para qué sirve cada uno de sus
componentes y dónde encontrar los piezas necesarias para hacer que todo
funcione. La charla tiene como audiencia objetivo a personas que usan
Python para análisis de datos, tanto quienes trabajan en contextos
académicos de investigación, como quienes trabajan como científicos o
científicas de datos en industria. Puede ser de particular interés para
quienes recién están empezando en esta área y quieren adoptar buenas
prácticas. Al finalizar la charla, la audiencia tendrá una serie de
lineamientos prácticos y aplicables que podrán ayudar que sus flujos de
análisis de datos con Python sean reproducibles.&lt;/p&gt;
&lt;p&gt;Luego de dar algunos ejemplos de la vida real en los que (casi) todo
salió mal producto de que el código no era reproducible, se abordarán
los siguientes tópicos: - uso de entornos virtuales. - uso de control de
versiones. - organización de directorios y archivos. - escribir
funciones y automatizar tareas - cómo crear documentación útil para
quienes utilizarán nuestro código en el futuro.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Personalizando LLMs: Guía para “Fine-Tuning” local de modelos Open Source en Español</title><link href="https://pyvideo.org/pycon-us-2024/personalizando-llms-guia-para-fine-tuning-local-de-modelos-open-source-en-espanol.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Maria Jose Molina Contreras</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/personalizando-llms-guia-para-fine-tuning-local-de-modelos-open-source-en-espanol.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En el mundo actual, los modelos de lenguaje grandes (LLM, en inglés)
están revolucionando cómo interactuamos con la tecnología, permitiendo
tener conversaciones, organizar datos, redactar textos, y otras
actividades con mínimo esfuerzo humano.&lt;/p&gt;
&lt;p&gt;Es probable que al usar algún LLM hayas recibido respuestas incorrectas
¿a qué se debe eso …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En el mundo actual, los modelos de lenguaje grandes (LLM, en inglés)
están revolucionando cómo interactuamos con la tecnología, permitiendo
tener conversaciones, organizar datos, redactar textos, y otras
actividades con mínimo esfuerzo humano.&lt;/p&gt;
&lt;p&gt;Es probable que al usar algún LLM hayas recibido respuestas incorrectas
¿a qué se debe eso? Durante el entrenamiento de estos modelos, suelen
ingerir grandes cantidades de texto sin etiquetar de fuentes como
libros, páginas web, foros, los cuales desarrollan un gran entendimiento
de conocimiento pero carecen de conocimientos específicos. Por este
motivo ajustar modelos (“Fine-Tuning”, en inglés) que han sido
pre-entrenados con este gran corpus de datos es crucial para: (1)
obtener mejor rendimiento en la calidad de respuestas, y (2) ajustar el
modelo a un dominio específico al proporcionar textos específicos para
que puedan especializarse.&lt;/p&gt;
&lt;p&gt;Entonces, ¿Por qué es necesario entender el “Fine-Tuning” en modelos
locales? Dentro de los diversos motivos, uno de los más relevantes es la
privacidad de datos. Puesto que al hacer el proceso de “Fine-Tuning”
localmente se puede enseñar al modelo datos que son privados, como datos
personales, datos clínicos, información confidencial de empresas, etc.&lt;/p&gt;
&lt;p&gt;En esta charla, los asistentes aprenderán paso a paso cómo modelos LLM
Open Source, como Mixtral-8x22B-v0.1, Mistral-7B (multi lenguaje),
bloom-7b u otros modelos, son opciones muy interesantes para aprender a
realizar “Fine-Tuning” y especializar modelo para el dominio específico.
Además, se compartirá el rol de Python del proceso, la aplicación de
módulos externos para tener una implementación simple, para realizar
“Fine-Tuning” de LLMs.&lt;/p&gt;
&lt;p&gt;Conocimientos generales de Data Science son recomendables para seguir la
temática con facilidad, aunque se explicará de manera simplificada y
yendo por todos los pasos para entender cómo se realiza “Fine-Tuning”.
Outline añadido en la sección Notes.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Porque SQL está en todas partes.</title><link href="https://pyvideo.org/pycon-us-2024/porque-sql-esta-en-todas-partes.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Phillip Cloud</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/porque-sql-esta-en-todas-partes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nos encanta usar Python en nuestro trabajo, pero lamentablemente la base
de datos de tu empresa donde ejecutas tus ETL (extracción,
transformación y carga) te lo previene. Muy probablemente tu base de
datos hable SQL, ¿Por qué? Porque SQL está en todos lados, ha estado
presente durante un largo …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nos encanta usar Python en nuestro trabajo, pero lamentablemente la base
de datos de tu empresa donde ejecutas tus ETL (extracción,
transformación y carga) te lo previene. Muy probablemente tu base de
datos hable SQL, ¿Por qué? Porque SQL está en todos lados, ha estado
presente durante un largo tiempo, está estandarizado y es conciso.&lt;/p&gt;
&lt;p&gt;¿Pero realmente está estandarizado? ¿Y siempre es conciso? ¡No! ¿Aún
necesitamos usarlo? ¡Probablemente sí! ¿Qué puede hacer una persona que
trabaja con datos? ¿SQL con string-templating (plantilla de cadena de
caracteres)? print(f&amp;quot;Ese camino conduce a {locura}}&amp;quot;.)&lt;/p&gt;
&lt;p&gt;Mejor, ¡ven y aprende sobre Ibis!&lt;/p&gt;
&lt;p&gt;Ibis es una biblioteca completamente en Python que ofrece una una
interfaz similar a aquellas con estructuras de datos tabulares (data
frames), que te permite construir queries concisas y componibles que se
pueden ejecutar en una amplia variedad de backends (SQLite, DuckDB,
Postgres, Spark, Clickhouse, Snowflake, BigQuery, ¡y más!).&lt;/p&gt;
&lt;p&gt;¿Alguna vez has tenido que traducir un prototipo de Pandas a PySpark
para ejecutarlo en &amp;quot;datos reales&amp;quot;?&lt;/p&gt;
&lt;p&gt;¿O descargar un enorme archivo parquet porque los datos en la fuente son
el resultado de 500 líneas de SQL denso y tienes miedo de tocarlo?&lt;/p&gt;
&lt;p&gt;¿Quieres probar esta cosa llamada &amp;quot;DuckDB&amp;quot; pero no quieres aprender SQL?&lt;/p&gt;
&lt;p&gt;¿Tienes una relación de amor/odio con SQL porque te permite hacer tu
trabajo, pero piensas que debe haber una mejor manera?&lt;/p&gt;
&lt;p&gt;¿Te has quedado atascado manteniendo un creciente y amorfo conjunto de
SQL con plantillas que solo se suponía que se usaría para esa
demostración?&lt;/p&gt;
&lt;p&gt;Bueno, si eres un ingeniero de datos, científico de datos, entusiasta de
los datos o cualquier cosa relacionada con los datos, ¡ven y únete a
nosotros para descubrir lo que Ibis puede hacer por ti!&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Profiling at the speed of light</title><link href="https://pyvideo.org/pycon-us-2024/profiling-at-the-speed-of-light.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Pablo Galindo Salgado</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/profiling-at-the-speed-of-light.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know that Python 3.12 will include one of the world's smallest
just-in-time (JIT) compilers? Also, you will be surprised to learn it is
not what you probably think it is.&lt;/p&gt;
&lt;p&gt;Python 3.12 will include support for the Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler. The
Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know that Python 3.12 will include one of the world's smallest
just-in-time (JIT) compilers? Also, you will be surprised to learn it is
not what you probably think it is.&lt;/p&gt;
&lt;p&gt;Python 3.12 will include support for the Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler. The
Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler is a very powerful tool that allows you to
profile and obtain information about the performance of your
application. &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; also has a very vibrant ecosystem of tools that
help with the analysis of the data that it produces.&lt;/p&gt;
&lt;p&gt;In this talk, we will talk about how this exciting feature was
implemented, how the support provided by the &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler differs
from other performance-oriented profilers for Python, and how it can be
used effectively, including how to activate it dynamically to enable
production profiling. We will also cover some of the requirements that
are needed to obtain the best results, as well as some of the
limitations of the implementation and how those can affect your metrics.&lt;/p&gt;
&lt;p&gt;Being able to understand where our Python applications are expending
their time is crucial to being able to improve the performance
characteristics of our applications. Several tools already exist to help
with this task, but they all have their own limitations, especially when
native code written in C, C++, Rust, etc. is involved. Being able to
gather and cross-correlate performance information with other
performance-related markers, such as branch mispredictions, cache
misses, context switches, and other events, can be key in understanding
some of the most challenging profiling puzzles.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Pydantic Power-up: Performance Tips for Lightning-Fast Python Applications</title><link href="https://pyvideo.org/pycon-us-2024/pydantic-power-up-performance-tips-for-lightning-fast-python-applications.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Sydney Runkle</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/pydantic-power-up-performance-tips-for-lightning-fast-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pydantic is the most widely used data validation library for Python.
With the V2 release, the library shifted to using Rust for core
validation logic, which resulted in 5-50x speedups compared to V1.
Though Pydantic is already quite efficient, there are some little-known
performance tips and tricks you can …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pydantic is the most widely used data validation library for Python.
With the V2 release, the library shifted to using Rust for core
validation logic, which resulted in 5-50x speedups compared to V1.
Though Pydantic is already quite efficient, there are some little-known
performance tips and tricks you can use to ensure optimal performance.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll delve into a spectrum of optimizations, ranging from
one line fixes to larger scale design modifications that can help you
squeeze the best performance out of Pydantic. In terms of one line
fixes, I’ll suggest changes ranging from opinionated JSON loading syntax
to &lt;tt class="docutils literal"&gt;TypeAdapter&lt;/tt&gt; usage tips. The focal point of the talk will be
tagged (also called discriminated) unions, a Pydantic tool used to
efficiently validate union types, while also taming related validation
errors.&lt;/p&gt;
&lt;p&gt;Listeners will walk away from this talk with a more nuanced
understanding of performance with Pydantic, an abundance of examples
that they can apply to their own code, and insights into upcoming
performance enhancing features coming to Pydantic.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>pytest for unittesters</title><link href="https://pyvideo.org/pycon-us-2024/pytest-for-unittesters.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/pytest-for-unittesters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; user interested to learn more about &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;?
Do you want to learn to write more idiomatic &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; tests? Do you
use neither and want an overview of some of the differences between the
two frameworks? If you answered yes to any of these questions, then …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; user interested to learn more about &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;?
Do you want to learn to write more idiomatic &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; tests? Do you
use neither and want an overview of some of the differences between the
two frameworks? If you answered yes to any of these questions, then this
talk is for you!&lt;/p&gt;
&lt;p&gt;Join us for an introduction to fixtures, test parameterization,and an
explanation of some of &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;'s subtler user experience
enhancements, in a talk that will just scratch the surface of
&lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;'s extensive feature set.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Rewind: Python Time-Travel Debugger</title><link href="https://pyvideo.org/pycon-us-2024/rewind-python-time-travel-debugger.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Toby Ho</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/rewind-python-time-travel-debugger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging is one of the hardest parts of our jobs. Experienced
developers shrug it off as an inevitability of life, but it's one of the
biggest obstacles standing in the way of newcomers. While working as a
mentor, the pain of this fact became ever so vivid for me …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging is one of the hardest parts of our jobs. Experienced
developers shrug it off as an inevitability of life, but it's one of the
biggest obstacles standing in the way of newcomers. While working as a
mentor, the pain of this fact became ever so vivid for me. Inspired by
Bret Victor's &amp;quot;Inventing on Principle&amp;quot; and Redux, I went on a quest to
find out if time-travel debugging was possible.&lt;/p&gt;
&lt;p&gt;In my journey, I created a time-travel debugger for Python: Rewind.
Rewind is a fork of CPython. It works by logging each state change to a
file as the Python interpreter runs. Then, another program reads back
the log file, recreates all historical states of the program and saves
them to a database. A debugger GUI allows the user to step through the
program line by line both forward and backward.&lt;/p&gt;
&lt;p&gt;Developing software using a time-travel debugger is a uniquely pleasant
experience. It removes the anxiety of using a regular step debugger by
allowing you to &amp;quot;undo&amp;quot;. It's often more productive to start at the end
where an error occurred, then step in reverse to go towards its cause.
Moreover, omniscience - knowing all historical states of the program
before hand - allows us to rethink what a debugger user interface can
be.&lt;/p&gt;
&lt;p&gt;The talk will be fast paced. In addition to slides, I'll be voicing over
some pre-recorded animations / videos in the style of YouTube
documentaries. Demos are pre-recorded so there will be no risk of things
going wrong live.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Ruff: An Extremely Fast Python Linter and Code Formatter, Written in Rust</title><link href="https://pyvideo.org/pycon-us-2024/ruff-an-extremely-fast-python-linter-and-code-formatter-written-in-rust.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Charlie Marsh</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/ruff-an-extremely-fast-python-linter-and-code-formatter-written-in-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt; is an extremely fast Python
linter and code formatter, written in Rust. With Ruff, projects can
replace dozens of static analysis tools with a single dependency, all
while executing 10x, 100x, or even 1000x faster.&lt;/p&gt;
&lt;p&gt;Over the past year, Ruff has grown to millions of downloads per month …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/astral-sh/ruff"&gt;Ruff&lt;/a&gt; is an extremely fast Python
linter and code formatter, written in Rust. With Ruff, projects can
replace dozens of static analysis tools with a single dependency, all
while executing 10x, 100x, or even 1000x faster.&lt;/p&gt;
&lt;p&gt;Over the past year, Ruff has grown to millions of downloads per month,
and now powers static analysis for the largest projects in the Python
ecosystem, including NumPy, Pandas, PyTorch, LangChain, and more.&lt;/p&gt;
&lt;p&gt;This talk will open with a brief overview of Ruff’s functionality before
diving into its internals, with a focus on performance. In particular,
we’ll look to answer the question: &lt;strong&gt;what does it take to build a
developer tool that’s orders of magnitude faster than the
alternatives?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our exploration will be grounded in specific optimizations and design
decisions that make Ruff fast. Along the way, we’ll also explore the
broader tradeoffs that come with building developer tools for Python, in
Rust.&lt;/p&gt;
&lt;p&gt;Although Ruff is written in Rust, no Rust knowledge is required.
Instead, this talk is aimed at those interested in building performant
developer tools for any domain, in any language.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Seeing is Believing - Using Diagrams to Communicate Complex Ideas with Python</title><link href="https://pyvideo.org/pycon-us-2024/seeing-is-believing-using-diagrams-to-communicate-complex-ideas-with-python.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Tadeh Hakopian</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/seeing-is-believing-using-diagrams-to-communicate-complex-ideas-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about communicating with visuals to make complex ideas
simple to understand. Over the years I have produced diagrams, charts,
illustrations and other graphics to help people understand sophisticated
project concepts. This includes project architecture, standard operating
procedures, coding concepts, sprints and roadmaps.&lt;/p&gt;
&lt;p&gt;You will be guided …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about communicating with visuals to make complex ideas
simple to understand. Over the years I have produced diagrams, charts,
illustrations and other graphics to help people understand sophisticated
project concepts. This includes project architecture, standard operating
procedures, coding concepts, sprints and roadmaps.&lt;/p&gt;
&lt;p&gt;You will be guided through ways of how to make stylized examples of your
project code and workflows in easy to follow examples. By using common
software for illustrations along with some simple guidelines you too can
make easy to follow visual content for your next project.&lt;/p&gt;
&lt;p&gt;Key Takeaways:&lt;/p&gt;
&lt;p&gt;Learn methods to visually communicate with your team including with
color, shapes, images, gifs and even memes to help get a point across
Understand how to make your technical documentation into visual graphics
with diagram design style guides See examples of using libraries like
Sphinx, Pydoc, and PlantUML to help make great diagrams Come away with
an ability to execute a simple (or sophisticated) graphic with essential
steps and key requirements&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>The Design of Everyday APIs</title><link href="https://pyvideo.org/pycon-us-2024/the-design-of-everyday-apis.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/the-design-of-everyday-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What makes a good API for a library? Or more importantly, what makes an
API bad?&lt;/p&gt;
&lt;p&gt;Implementing an API is an art. It’s the connection between the user and
the library itself. How can we optimize that connection to make the
experience more pleasing? What makes a user …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What makes a good API for a library? Or more importantly, what makes an
API bad?&lt;/p&gt;
&lt;p&gt;Implementing an API is an art. It’s the connection between the user and
the library itself. How can we optimize that connection to make the
experience more pleasing? What makes a user reach for one library over
another? What goes into an ergonomic API?&lt;/p&gt;
&lt;p&gt;This talk will discuss what makes an API good: simplicity, consistency,
and flexibility. We will apply those principles by iterating and
improving on a real world example, ending with a library that is
delightful to work with.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>There and Back Again: Reverse Engineering Python Binaries</title><link href="https://pyvideo.org/pycon-us-2024/there-and-back-again-reverse-engineering-python-binaries.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Josh Wiedemeier</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/there-and-back-again-reverse-engineering-python-binaries.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Companies and malware authors use packaging tools to distribute products
and payloads as Python bytecode (.pyc) files, often thinking that their
secret logic will be unreadable by humans. Using a simple example, we
will teach curious developers how to interpret and decompile Python
bytecode by hand. Finally, we will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Companies and malware authors use packaging tools to distribute products
and payloads as Python bytecode (.pyc) files, often thinking that their
secret logic will be unreadable by humans. Using a simple example, we
will teach curious developers how to interpret and decompile Python
bytecode by hand. Finally, we will discuss challenges and solutions of
automating Python decompilation.&lt;/p&gt;
&lt;p&gt;This talk is targeted towards intrepid intermediate Python developers
who are looking to take a look under the hood, and reverse engineers who
are looking to add Python binaries to their repertoire. Unlike previous
bytecode-oriented talks at PyCon, which primarily focus on Python's
execution model, this talk is primarily interested in recovering Python
source code from Python bytecode.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Times and dates in Pandas</title><link href="https://pyvideo.org/pycon-us-2024/times-and-dates-in-pandas.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/times-and-dates-in-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is famously flexible and capable at analyzing numeric data. But
Pandas is also flexible and capable at working with times and dates. In
this talk, I'll describe the dtypes associated with times and dates, the
sorts of calculations you can perform, issues with parsing and importing
datetime data …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is famously flexible and capable at analyzing numeric data. But
Pandas is also flexible and capable at working with times and dates. In
this talk, I'll describe the dtypes associated with times and dates, the
sorts of calculations you can perform, issues with parsing and importing
datetime data, and how you can perform more complex tasks, such as
grouping, pivoting, and resampling. By the time this talk is over,
you'll be able to work with time-based data in new ways.&lt;/p&gt;
&lt;p&gt;times and dates work, from handling inputs to performing sophisticated
analysis.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Welcome</title><link href="https://pyvideo.org/pycon-us-2024/welcome.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Mariatta Wijaya</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/welcome.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>You've got trust issues, we've got solutions: Differential Privacy</title><link href="https://pyvideo.org/pycon-us-2024/youve-got-trust-issues-weve-got-solutions-differential-privacy.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Vikram Waradpande</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/youve-got-trust-issues-weve-got-solutions-differential-privacy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we are in an era of big data where large groups of information are
assimilated and analyzed, for insights into human behavior, data privacy
has become a hot topic. Since there is a lot of private information
which once leaked can be misused, all data cannot be released …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we are in an era of big data where large groups of information are
assimilated and analyzed, for insights into human behavior, data privacy
has become a hot topic. Since there is a lot of private information
which once leaked can be misused, all data cannot be released for
research. So, how should privacy be protected in the environment where
data is stored and shared at such an escalating pace? One might think
that simply making personally identifiable fields in the dataset
anonymous might be useful, but this can lead to the entire dataset
becoming useless and not fit for analysis. And research has proven that
by statistically studying both the datasets, private information can
easily be re-extracted!&lt;/p&gt;
&lt;p&gt;The session will start with a brief on the current standards of privacy,
and the possible risks of handling customer data. This will lay the
foundation for introducing Differential Privacy, a cutting-edge
technique of cybersecurity that claims to preserve an individual’s
privacy, by manipulating data in such a way as to not render it useless
for data analysis. Attendees will gain an insight into the concept of
Differential Privacy, how it is employed to minimize the risks
associated with private data, its practical applications in various
domains, and how Python eases the task of employing it in our models
with PyDP. As the talk progresses, a walkthrough of a real-life
practical example, along with a nifty visualization will acquaint the
audience with PyDP, and how differential private results come out to be
in approximation to what unfiltered data would have provided.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>All about decorators</title><link href="https://pyvideo.org/pycon-us-2024/all-about-decorators.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/all-about-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But for many
developers, they remain somewhat mysterious and intimidating. In this
tutorial, you'll learn what decorators are, how they work, how to write
them, and when you should use them. Along the way, you'll write a bunch
of decorators that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But for many
developers, they remain somewhat mysterious and intimidating. In this
tutorial, you'll learn what decorators are, how they work, how to write
them, and when you should use them. Along the way, you'll write a bunch
of decorators that will demonstrate their power.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>An Introduction to Simulation And Ansys For Developers (Sponsor: Ansys)</title><link href="https://pyvideo.org/pycon-us-2024/an-introduction-to-simulation-and-ansys-for-developers-sponsor-ansys.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>James Derrick</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/an-introduction-to-simulation-and-ansys-for-developers-sponsor-ansys.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Numerical simulation can be complicated and scary. Often, it is the
exclusive realm of engineers and the highly trained, but it doesn't have
to be that way! Simulation has a lot to offer to anyone interested in
investigating the world around them and while the basics may seem
overwhelming …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Numerical simulation can be complicated and scary. Often, it is the
exclusive realm of engineers and the highly trained, but it doesn't have
to be that way! Simulation has a lot to offer to anyone interested in
investigating the world around them and while the basics may seem
overwhelming at first, it really can be valuable, and even fun to have a
working knowledge of the steps involved. This presentation is designed
to prepare you with a basic grounding in simulation and how it works so
that you too can go away and build your own simulations, or more
realistically, use simulation tools (such as Ansys) to model every day
things. In particular this presentation will take you through an example
script of PyMAPDL (our Open Source Python interface for Ansys' original
product: Mechanical APDL), modelling a simple 2D bridge&amp;nbsp;scenario.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Avoid the top 5 web data pitfalls when developing AI models (Sponsor: Bright Data)</title><link href="https://pyvideo.org/pycon-us-2024/avoid-the-top-5-web-data-pitfalls-when-developing-ai-models-sponsor-bright-data.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Jakub Glodek</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/avoid-the-top-5-web-data-pitfalls-when-developing-ai-models-sponsor-bright-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Data Bias:&lt;/strong&gt; ensuring that the training data is not biased. Biased
data can lead to AI models that are unfair or discriminatory. For
example, if a dataset for facial recognition software predominantly
contains images of people from certain ethnic groups, the model may
perform poorly on faces from underrepresented …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Data Bias:&lt;/strong&gt; ensuring that the training data is not biased. Biased
data can lead to AI models that are unfair or discriminatory. For
example, if a dataset for facial recognition software predominantly
contains images of people from certain ethnic groups, the model may
perform poorly on faces from underrepresented groups. &lt;strong&gt;Insufficient
Data Variety:&lt;/strong&gt; AI models require diverse data to understand different
scenarios and variations. If the training data is too homogeneous or
lacks variety, the model might not perform well in real-world, diverse
conditions. &lt;strong&gt;Overfitting and Underfitting:&lt;/strong&gt; Overfitting occurs when a
model is too complex and learns to fit the training data so closely that
it fails to generalize to new data. Underfitting happens when the model
is too simple to capture the underlying patterns in the data. &lt;strong&gt;Poor
Data Quality:&lt;/strong&gt; If the training data is full of errors, inconsistencies,
or is poorly labeled, the AI model will likely inherit these flaws.
Ensuring high data quality is essential for developing reliable and
accurate AI models. &lt;strong&gt;Ignoring Data Drift:&lt;/strong&gt; Over time, the real-world
data that an AI model encounters may change or 'drift' from the data on
which it was trained. This can happen due to evolving trends, behaviors,
or environments. Failing to monitor and adapt to these changes can
render an AI model less effective or even obsolete.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Blockchain now speaks Python: How to use it on Algorand to build real solutions (Sponsor: Algorand)</title><link href="https://pyvideo.org/pycon-us-2024/blockchain-now-speaks-python-how-to-use-it-on-algorand-to-build-real-solutions-sponsor-algorand.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Joe Polny</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/blockchain-now-speaks-python-how-to-use-it-on-algorand-to-build-real-solutions-sponsor-algorand.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bring your existing Python skills, existing testing framework, and
favorite IDE to start building on the blockchain! It has never been
easier for you as a Python dev to add another powerful tool to your
toolbox. Why build on blockchain? It offers permanent, transparent
record-keeping, enables traceability and provenance …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bring your existing Python skills, existing testing framework, and
favorite IDE to start building on the blockchain! It has never been
easier for you as a Python dev to add another powerful tool to your
toolbox. Why build on blockchain? It offers permanent, transparent
record-keeping, enables traceability and provenance, and unlocks
opportunities for innovation across industries.&lt;/p&gt;
&lt;p&gt;All you need is your laptop, a willingness to code, and the same Python
toolchain you're already familiar with. We have everything you need to
code, including Poetry, Pytest, and Docker, wrapped up in a neat
package. To get you started quickly, some basic templates are included
too! The best part? You can code using the free and open-source GitHub
Codespaces virtual IDE, so no need to install anything locally. Within
the hour you'll deploy fundamental blockchain primitives, including data
storage CRUD, getter/setter methods, logic evaluations, and role-based
access control.&lt;/p&gt;
&lt;p&gt;Be the first in your team to know blockchain.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Build a cross-platform app with BeeWare</title><link href="https://pyvideo.org/pycon-us-2024/build-a-cross-platform-app-with-beeware.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/build-a-cross-platform-app-with-beeware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All code needs a user interface. That might be an API, or a web page -
but these days, many users will expect an app that they can install on
their laptop, or on their phone. But how do you build a native
application in Python? And do you need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All code needs a user interface. That might be an API, or a web page -
but these days, many users will expect an app that they can install on
their laptop, or on their phone. But how do you build a native
application in Python? And do you need to build a different version of
your app the app for every device and operating system you want to
support?&lt;/p&gt;
&lt;p&gt;In this hands-on tutorial, you'll lean how you can use the BeeWare suite
of tools to build a graphical user interface for your code, and deploy
that code as a desktop app, and as a mobile app - all from a single
Python codebase. You'll learn how to integrate third-party libraries
like NumPy into your app, and how to customize the appearance of your
packaged app. You'll also learn how you can access device hardware (such
as cameras and geolocation) in your app's code.&lt;/p&gt;
&lt;p&gt;No experience with mobile or desktop app development is required; a
basic familiarity with Python is all you need. By the end of the
tutorial, you'll have an app running on multiple platforms, written
entirely by you, using nothing but Python.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry></feed>