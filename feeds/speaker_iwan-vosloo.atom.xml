<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_iwan-vosloo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Reahl: The Python-only web framework</title><link href="https://pyvideo.org/europython-2015/reahl-the-python-only-web-framework.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2015-08-04:europython-2015/reahl-the-python-only-web-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Iwan Vosloo - Reahl: The Python-only web framework
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Reahl is a full-featured web framework with a twist: with Reahl you
write a web application purely in Python. HTML, JavaScript, CSS and
all those cumbersome web technologies (and a few other lower level
concerns) are hidden away from you. As far as web frameworks go this
is truly a paradigm shift: away from the cobwebs of all the different
web technologies, template languages and low-level details -- towards
being able to focus on the goals at hand instead, using a single
language.&lt;/p&gt;
&lt;p&gt;In this talk I will give you a brief idea of what Reahl is all about:
why it is worthwhile doing, how it works, where we are and what still
needs to be done. I hope to convince you that this is an important
direction for web frameworks, and of how unique Reahl is. Developing
such an abstract framework is an ambitious goal. I'd like to convey
the message that what we have achieved so far, and the strategy
lessons learnt along the way demonstrate this goal to be realistic and
practical.&lt;/p&gt;
</summary></entry><entry><title>What's the point of Object Orientation? - EuroPython 2016</title><link href="https://pyvideo.org/europython-2016/whats-the-point-of-object-orientation-europython-2016.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/whats-the-point-of-object-orientation-europython-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Iwan Vosloo - What's the point of Object Orientation?
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/whats-the-point-of-object-orientation"&gt;https://ep2016.europython.eu//conference/talks/whats-the-point-of-object-orientation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk covers the basics of what Object Orientation (OO) is really
about. It focusses on the problem OO is aimed at solving and shows
where the OO mechanisms of Python fit into this picture. This material
can serve as an introduction to OO for beginners, but also as a homing
signal for experienced programmers who are doubting whether they are
reaping the benefits OO promises.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Object Orientation (OO) is often introduced in terms of how it is
implemented by a specific language. However, understanding the theory
underlying OO is not quite the same as understanding how OO concepts
are supported by a particular language. It is insightful to understand
the simple OO fundamentals and how these map to the particular
implementation provided by Python.&lt;/p&gt;
&lt;p&gt;In this talk I will first explain the very basics of OO from a
language-neutral point of view with the aim of showing what OO can
offer you and to give a glimpse of the simple mathematical theory
underlying OO. I hope to give you enough information to help you
distinguish between better and worse designs and to detect whether
you’re using OO as it was intended. I will also very briefly show how
these fundamentals map to Python.&lt;/p&gt;
&lt;p&gt;This talk is for anyone: whether you’re new at Object Orientation, or
a practitioner wondering whether OO is worth the effort you’ve spent
trying to use it.&lt;/p&gt;
</summary></entry><entry><title>The elephant in the web application</title><link href="https://pyvideo.org/pycon-za-2014/the-elephant-in-the-web-application.html" rel="alternate"></link><published>2014-10-02T00:00:00+00:00</published><updated>2014-10-02T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2014-10-02:pycon-za-2014/the-elephant-in-the-web-application.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Developing a web application today is an unnecessarily cumbersome and
error prone task. It is time for web frameworks to evolve and become
more like graphical user interface (GUI) frameworks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I'd like to convince you that developing a web application
today is an unnecessarily cumbersome and error prone task. It is time
for web frameworks to evolve and become more like graphical user
interface (GUI) frameworks: these provide abstractions called &amp;quot;windows&amp;quot;
or &amp;quot;widgets&amp;quot; that let a programmer write an application using terms that
describe what is being built, with less (if any) focus on the underlying
technologies needed to accomplish drawing these items on a screen. A web
application programmer (in contrast to a GUI programmer) needs to know
quite a few different technologies and a fair bit of effort is required
to orchestrate these tools into achieving an end result: a template
language, HTML, HTTP, CSS, JavaScript, etc. Reusing something
substantial is especially difficult, which means in a sizeable web
application the same dragons need to be fought several times over. If a
programmer has to constantly deal with all this subject matter, it takes
focus away from what actually needs to be built: the application itself.
Why are we putting up with having to know HTML and similar low-level
technologies? Is it an elephant in the room? Something we pretend not to
see, yet we accept the burden of having to work around it? I will show
you what it takes to build a web application; what repetitive tasks
there are and what a programmer needs to be aware of. I hope to convince
you that there's a better way, and that what was perhaps an idealistic
dream a decade ago can now be done - not only by our own fully-featured
Python web framework (Reahl), but also by a small number of others
beyond the realm of Python.&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2014"></category></entry><entry><title>What's the point of Object Orientation?</title><link href="https://pyvideo.org/pycon-za-2015/whats-the-point-of-object-orientation.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/whats-the-point-of-object-orientation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Object Orientation (OO) is often introduced in terms of how it is
implemented by a specific language. However, understanding the theory
underlying OO is not quite the same as understanding how OO concepts are
supported by a particular language. It is insightful to understand the
simple OO fundamentals and how these map to the particular
implementation provided by Python.&lt;/p&gt;
&lt;p&gt;In this talk I will first explain the very basics of OO from a
language-neutral point of view with the aim of showing what OO can offer
you. I will touch upon the simple mathematical theory underlying OO and
how it can be used as a mental discipline to improve your natural
capacity to reason about programs. I hope to give you enough information
to help you distinguish between better and worse designs and to detect
whether you're using OO as it was intended. I will show how these
fundamentals map to Python, and compare the difference of Python's
implementation to that of some other languages (even functional
languages).&lt;/p&gt;
&lt;p&gt;This talk is for anyone: whether you're new at Object Orientation, or a
practitioner wondering whether OO is worth the effort you've spent
trying to use it.&lt;/p&gt;
</summary><category term="Room 211"></category></entry><entry><title>Experiments with test setup</title><link href="https://pyvideo.org/pycon-za-2016/experiments-with-test-setup.html" rel="alternate"></link><published>2016-10-06T00:00:00+00:00</published><updated>2016-10-06T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2016-10-06:pycon-za-2016/experiments-with-test-setup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever since test driven development took hold, people have been
experimenting with different ways to deal with setting up and tearing
down test objects and data (amongst other things).&lt;/p&gt;
&lt;p&gt;Focussing on this particular concern (set up and tear down of test
objects), this talk provides an overview of how the mainstream python
tools have developed over time in this regard: unittest, nose and
py.test. A bit of a wider context is also given in terms of two ideas
pioneered by tools in other languages: the annotations of TestNG and
resources of Smalltalk's SUnit. Two ideas that address problems beyond
the reach of the tools themselves are also introduced, namely the
&amp;quot;object mother&amp;quot; and &amp;quot;builder pattern&amp;quot;.&lt;/p&gt;
&lt;p&gt;Against the backdrop of this overview, I also show some of our own
experiments (as part of &lt;a class="reference external" href="http://www.reahl.org"&gt;the Reahl project&lt;/a&gt;) to
translate a combination of the object mother and the builder pattern
into Python -- with surprising results.&lt;/p&gt;
&lt;p&gt;The talk is aimed at people interested in improving the ways we can do
set up for tests and people who are generally interested in how tests
can be made easier to write and more useful. I hope to stimulate more
thoughts around the topic against the backdrop of a slight overview. The
talk is accessible to newcomers to this topic as well.&lt;/p&gt;
</summary></entry><entry><title>Another angle on test infrastructure</title><link href="https://pyvideo.org/pycon-za-2017/another-angle-on-test-infrastructure.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Iwan Vosloo</name></author><id>tag:pyvideo.org,2017-10-06:pycon-za-2017/another-angle-on-test-infrastructure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last year at PyConZA I presented a talk about different approaches to
test setup and alluded to an idea that we have been playing with at
&lt;a class="reference external" href="http://www.reahl.org"&gt;Reahl&lt;/a&gt;: class based test Fixtures. We have
since refined our approach and built it as an add-on that works with
py.test.&lt;/p&gt;
&lt;p&gt;In this talk I briefly introduce Fixtures again for people who did not
see the &lt;a class="reference external" href="https://2016.za.pycon.org/talks/26/"&gt;last year's talk&lt;/a&gt;. I
then show more detail about the types of problems we deal with while
testing and how our fixture ideas solve these issues.&lt;/p&gt;
&lt;p&gt;For example, in our tests the database schema is created from scratch at
the beginning of a test run, but the database is kept clean by rolling
back a transaction between each individual test. We can also create
extra temporary database tables, just for a test run.&lt;/p&gt;
&lt;p&gt;We integrate Selenium webdriver with our web server so that the web
server runs in the same thread as the tests themselves, in the same
database transaction. The effect of this is that when something breaks
inside the web server, the test immediately breaks as well, and gives a
sensible stack trace.&lt;/p&gt;
&lt;p&gt;In our code, we use a global context much like what Flask does. This is
a design often criticised because of the fact that it makes testing
difficult. We use our fixtures to hide the associated complexities
regarding the global context as well.&lt;/p&gt;
&lt;p&gt;The talk covers some details about how we use Fixtures to provide this
functionality and some thoughts on where we found it useful and which
things we still struggle to deal with elegantly.&lt;/p&gt;
</summary></entry></feed>