<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Paul Prescod</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_paul-prescod.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-05-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>SalesForce sponsor workshop</title><link href="https://pyvideo.org/pycon-us-2021/salesforce-sponsor-workshop.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Paul Prescod</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/salesforce-sponsor-workshop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever one builds a new application, there is a challenge in testing it at scale: where do you get sufficient data to generate a realistic “data shape?”. Snowfakery is a Domain Specific Language that builds on and deeply integrates with Python to excel at this task.&lt;/p&gt;
&lt;p&gt;This talk will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever one builds a new application, there is a challenge in testing it at scale: where do you get sufficient data to generate a realistic “data shape?”. Snowfakery is a Domain Specific Language that builds on and deeply integrates with Python to excel at this task.&lt;/p&gt;
&lt;p&gt;This talk will describe how to build an “interpreter” for a YAML-based language in Python, including how we leverage Python-specific superpowers such as Jinja templating and easy dynamic loading.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://docs.google.com/presentation/d/17VmU_mW2lQGsj_ChJHB4nG9qmhGbVwEtqQTvweBFTAQ/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/17VmU_mW2lQGsj_ChJHB4nG9qmhGbVwEtqQTvweBFTAQ/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry></feed>