<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_scientific.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-03-02T00:00:00+00:00</updated><entry><title>Workshop Panel with Guido van Rossum</title><link href="https://pyvideo.org/pydata/workshop-panel-with-guido-van-rossum.html" rel="alternate"></link><published>2012-03-02T00:00:00+00:00</published><updated>2012-03-02T00:00:00+00:00</updated><author><name>Guido Van Rossum</name></author><id>tag:pyvideo.org,2012-03-02:pydata/workshop-panel-with-guido-van-rossum.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this presentation from the 2012 PyData Workshop hosted at Google on
March 2-3, Guido van Rossum, author of the Python programming language,
engages in an open discussion on the intersection of the evolution of
Python and the growth of the scientific community. Panelists include
Fernando Perez, Travis Oliphant, and David Cournapeau.&lt;/p&gt;
</summary><category term="science"></category><category term="scientific"></category></entry><entry><title>Building a Scientific Software Application with the Enthought Tool Suite</title><link href="https://pyvideo.org/europython-2011/building-a-scientific-software-application-with-t.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Mark Dickinson</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/building-a-scientific-software-application-with-t.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Dickinson - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Enthought Tool Suite (ETS) is a collection of Python-based open
source components that form a foundation for nearly every application
that we deliver to our customers. In this talk I'll demonstrate how to
use ETS to rapidly develop an example scientific software application.
We'll concentrate particularly on introducing Traits, Traits UI, and the
Chaco and Mayavi visualisation tools.&lt;/p&gt;
&lt;p&gt;Prerequisites: some previous experience of working with Python and NumPy
/ SciPy is recommended.&lt;/p&gt;
</summary><category term="enthought"></category><category term="numpy"></category><category term="scientific"></category><category term="scipy"></category><category term="traits"></category></entry><entry><title>High-performance computing on gamer PCs</title><link href="https://pyvideo.org/europython-2011/high-performance-computing-on-gamer-pcs.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Yann Le Du</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/high-performance-computing-on-gamer-pcs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Yann Le Du - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Electron Paramagnetic Resonance Imaging, we are faced with a
deconvolution problem that has a strong impact on the image actually
reconstructed. Faced with the need of mapping the distribution of
organic matter in Terrestrial and Martian rock samples for applications
in exobiology, we needed to see how to extract a maximum amount of
information from our data: our approach uses reservoir computing
artificial neural networks coupled to a particle swarm algorithm that
evolves the reservoirs’ weights.&lt;/p&gt;
&lt;p&gt;The code runs on the Hybrid Processing Units for Science (HPU4Science)
cluster located at the Laboratoire de Chimie de la Matière Condensée de
Paris (LCMCP). The cluster is composed of a central data storage machine
and a heterogeneous ensemble of 6 decentralized nodes. Each node is
equipped with a Core2 Quad or i7 CPU and 3-7 NVIDIA Graphical Processing
Units (GPUs) including the GF110 series. Each of the 28 GPUs
independently explores a different parameter space sphere of the same
problem. Our application shows a sustained real performance of 15.6
TFLOPS. The HPU4Science cluster cost
&lt;span class="formula"&gt;36, 090&lt;i&gt;resulting&lt;/i&gt;&lt;i&gt;in&lt;/i&gt;&lt;i&gt;a&lt;/i&gt;432.3&lt;i&gt;MFLOPS&lt;/i&gt; ⁄ &lt;/span&gt; cost performance.&lt;/p&gt;
&lt;p&gt;That talk is meant to demonstrate on a practical case how consumer grade
computer hardware coupled to a very popular computer language can be
used to tackle a difficult yet very elementary scientific problem: how
do you go from formulating the problem, to choosing the right hardware
and software, and all the way to programming the algorithms using the
appropriate development tools and methodologies (notably Literate
Programming). On the math side, the talk requires a basic understanding
of matrix algebra and of the discretization process involved when
computing integrals.&lt;/p&gt;
</summary><category term="image"></category><category term="mapping"></category><category term="nvidia"></category><category term="performance"></category><category term="processing"></category><category term="science"></category><category term="scientific"></category></entry><entry><title>Pricing products using Python graphs and sets</title><link href="https://pyvideo.org/europython-2011/pricing-products-using-python-graphs-and-sets.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/pricing-products-using-python-graphs-and-sets.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Rob Collins - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the limitations of available rule engines when it comes
to complex pricing rules. Rob has been part of a Python team writing a
pricing engine based on network graphs. We will show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why pricing is not easy&lt;/li&gt;
&lt;li&gt;Rule engine anti-patterns, e.g. to change one price requires a week's
development time, and has to be fitted into a release cycle&lt;/li&gt;
&lt;li&gt;How to make pricing rules data driven, usable by the business&lt;/li&gt;
&lt;li&gt;How the use of graphs and sets reduces the complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rob is joined by David Layton of Grey Squirrel Consulting, who is a
fellow contractor working with Rob on the pricing project. He is an
American expatriate and Python developer, currently living and working
in London. His background is in scientific computing, CRMs and Business
Intelligence.&lt;/p&gt;
</summary><category term="business"></category><category term="graphs"></category><category term="network"></category><category term="scientific"></category></entry><entry><title>Meteorology, Climate and Python: desperately trying to forget technical details</title><link href="https://pyvideo.org/europython-2011/meteorology-climate-and-python-desperately-tryi.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Claude Gibert</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/meteorology-climate-and-python-desperately-tryi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Claude Gibert - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="contents"&gt;
&lt;h4&gt;Contents&lt;/h4&gt;
&lt;p&gt;Python is a great language for writing programming frameworks. Python
frameworks are normally addressed to software developers who are Python
professionals. I developed a software package in a scientific
institution, designed to be used by non-programmers, but also designed
to enable customisation through programming by some users. I finally
designed a three level package:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python programming framework, addressed whoever wanted to invest in
Python and had plans to develop applications;&lt;/li&gt;
&lt;li&gt;An application built on that framework with an interface designed for
non-programmers;&lt;/li&gt;
&lt;li&gt;Ways of customising the behaviour of the application by providing
some basic Python functions or more elaborated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the challenges was to offer an application with an easy to use
interface, not graphical, not web-based and not requiring Python
programming. This interface was necessary for batch processing.&lt;/p&gt;
&lt;p&gt;This talk addresses how this project was carried out, the technical
solutions adopted and how Python was introduced in an operational
scientific institution (&lt;a class="reference external" href="http://www.ecmwf.int"&gt;http://www.ecmwf.int&lt;/a&gt;) where most users were
Fortran programmers. Python was introduced as early as 2004 and it was a
challenge to gain acceptance. I will also make a parallel with a project
I am currently working on for NASA (&lt;a class="reference external" href="http://gmao.gsfc.nasa.gov/"&gt;http://gmao.gsfc.nasa.gov/&lt;/a&gt;).
&lt;em&gt;Desperately trying to forget technical details&lt;/em&gt; summarises how I tried,
using Python, to help Meteorology scientists to focus on their domain of
expertise instead of constantly solving technical problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h4&gt;Background:&lt;/h4&gt;
&lt;p&gt;The disciplines of Meteorology and Climate involve numerical modelling
of physical phenomena. The amount of data going in and out of the model
is considerable. The organisation and the storage of data is
complicated, their post-processing is a challenge. Scientists need to
access and process input and output data to monitor the trends of the
input data and to evaluate the performance of their models. Those
statistics, diagnostics, plots and verifications are crucial to the
improvement of the quality of the models. Finding the right data,
decoding it, transforming it to be ready for use are necessary steps to
initiate the pre-processing. All these actions are fundamentally the
same between different prediction centres, but the data organisation and
file formats can differ.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="framework"></category><category term="nasa"></category><category term="parallel"></category><category term="performance"></category><category term="python,"></category><category term="scientific"></category></entry><entry><title>Python for High Performance and Scientific Computing</title><link href="https://pyvideo.org/europython-2011/python-for-high-performance-and-scientific-comput.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/python-for-high-performance-and-scientific-comput.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andreas Schreiber - 23 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an accepted high-level scripting language with a growing
community in academia and industry. It is used in a lot of scientific
applications in many different scientific fields and in more and more
industries, for example, in engineering or life science). In all fields,
the use of Python for high- performance and parallel computing is
increasing. Several organizations and companies are providing tools or
support for Python development. This includes libraries for scientific
computing, parallel computing, and MPI. Python is also used on many core
architectures and GPUs, for which specific Python interpreters are being
developed. A related topic is the performance of the various interpreter
and compiler implementations for Python. The talk gives an overview of
Python’s use in HPC and Scientific Computing and gives information on
many topics, such as Python on massively parallel systems, GPU
programming with Python, scientific libraries in Python, and Python
interpreter performance issues. The talk will include examples for
scientific codes and applications from many domains.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/k94rC4"&gt;Slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="community"></category><category term="engineering"></category><category term="gpu"></category><category term="hpc"></category><category term="interpreters"></category><category term="parallel"></category><category term="performance"></category><category term="python,"></category><category term="scientific"></category></entry><entry><title>Python(x,y): diving into scientific Python</title><link href="https://pyvideo.org/europython-2011/pythonxy-diving-into-scientific-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Vincent Noel</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/pythonxy-diving-into-scientific-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Vincent Noel - 22 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This training session will introduce the Python scientific stack to
beginner or intermediate-level Python programmers. The basics of
scientific programming with Python will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;creation of arrays and structured arrays using numpy&lt;/li&gt;
&lt;li&gt;fast, loopless manipulation of numpy arrays through fancy indexing
and vectorized functions&lt;/li&gt;
&lt;li&gt;convenient saving/loading of array variables using numpy&lt;/li&gt;
&lt;li&gt;improved interactive use through ipython&lt;/li&gt;
&lt;li&gt;data analysis using various scipy modules (signal analysis, image
classification, etc)&lt;/li&gt;
&lt;li&gt;plotting large time series, histograms, scatterplots, images etc.
using matplotlib&lt;/li&gt;
&lt;li&gt;saving/loading large datasets in structured scientific formats such
as netCDF, HDF (depending on interest)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These concepts will be used in coding exercises, in the programming
environnement provided by the Python(x,y) distribution, which is freely
downloadable and includes recent versions of Python, numpy and
matplotlib. The Python(x,y) distribution runs on Windows, which will be
the OS of choice for this session. You should still be able to follow
the examples in other Python distributions, e.g. EPD.&lt;/p&gt;
&lt;p&gt;The entire talk (PDF), code samples and data files can be downloaded
from the following
&lt;a class="reference external" href="http://www.lmd.polytechnique.fr/~noel/EP2011/DivingIntoSci%20entificPython.zip"&gt;archive&lt;/a&gt;&lt;/p&gt;
</summary><category term="analysis"></category><category term="datasets"></category><category term="image"></category><category term="numpy"></category><category term="python,"></category><category term="scientific"></category><category term="scipy"></category></entry><entry><title>Developing Scientific Software in Python</title><link href="https://pyvideo.org/pycon-au-2011/developing-scientific-software-in-python.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Duncan S Gray</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/developing-scientific-software-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This presentation will outline key lessons learnt in developing
scientific software in Python. Methods of maintaining and assuring code
quality will be discussed.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In particular:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;designing effective unit tests;&lt;/li&gt;
&lt;li&gt;visualising output data to discover defects; and&lt;/li&gt;
&lt;li&gt;designing characterisation tests to test the actual system behaviour
and to&lt;/li&gt;
&lt;li&gt;identify unintended system changes&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="scientific"></category></entry><entry><title>VisTrails: A Python-Based Scientific Workflow and Provenance System (#172)</title><link href="https://pyvideo.org/pycon-us-2010/vistrails-a-python-based-scientific-workflow-and.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>David Koop</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/vistrails-a-python-based-scientific-workflow-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;VisTrails: A Python-Based Scientific Workflow and Provenance System&lt;/p&gt;
&lt;p&gt;Presented by David Koop (University of Utah and VisTrails, Inc.)&lt;/p&gt;
&lt;p&gt;In this talk, we will give an overview of VisTrails
(&lt;a class="reference external" href="http://www.vistrails.org/"&gt;http://www.vistrails.org&lt;/a&gt;), a
python-based open- source scientific workflow that transparently
captures provenance (i.e., lineage) of both data products and the
processes used to derive these products. We will show how VisTrails can
be used to streamline data exploration and visualization. Using real
examples, we will demonstrate key features of the system, including the
ability to visually create information processing pipelines that combine
multiple tools and Iibraries such as VTK, pylab, and matplotlib. We will
also show how VisTrails leverages provenance information not only to
support result reproducibility, but also to simplify the creation and
refinement of pipelines.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="scientific"></category><category term="vistrails"></category></entry></feed>