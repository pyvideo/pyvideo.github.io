<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jeroen-dierckx.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-07-02T00:00:00+00:00</updated><entry><title>The next iteration of your GUI</title><link href="https://pyvideo.org/europython-2013/the-next-iteration-of-your-gui.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Erik Janssens</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/the-next-iteration-of-your-gui.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show how GUI applications written as a series of
generators are fun to write, responsive, user friendly and easy to unit
test. We dive into the details of language functions of PEP 342
(Coroutines via Enhanced Generators) and PEP 380 (Syntax for Delegating
to a Subgenerator). With this knowledge refreshed, we discuss why and
how these functions can be integrated in an event loop. Then we
demonstrate how we used these functions to rewrite all the asynchronous
operations of the Camelot framework and avoided series of callbacks
transforming the code from complicated to beatiful.&lt;/p&gt;
</summary><category term="camelot"></category><category term="gui"></category><category term="coroutine"></category></entry><entry><title>New beauty in Camelot</title><link href="https://pyvideo.org/europython-2011/new-beauty-in-camelot.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Erik Janssens</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/new-beauty-in-camelot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in &amp;quot;Track
Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot is a Python framework that leverages SQLAlchemy and QT to build
rich desktop applications. The model - view definition used was inspired
by the Django Admin interface. Some see it as a replacement for MS
Access, but it's underlying libraries allow much more advanced features.&lt;/p&gt;
&lt;p&gt;In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and
new types of actions to displaying custom SQLAlchemy queries in a table
view.&lt;/p&gt;
&lt;p&gt;We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case
studies we will point out the mistakes we made and how they were
corrected.&lt;/p&gt;
</summary><category term="deployment"></category><category term="django"></category><category term="framework"></category><category term="matplotlib"></category><category term="qt"></category><category term="sqlalchemy"></category></entry></feed>