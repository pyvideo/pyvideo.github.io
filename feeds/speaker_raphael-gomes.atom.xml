<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_raphael-gomes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-02T00:00:00+00:00</updated><entry><title>Booster Python avec Rust : le cas de Mercurial</title><link href="https://pyvideo.org/pycon-fr-2019/booster-python-avec-rust-le-cas-de-mercurial.html" rel="alternate"></link><published>2019-11-02T00:00:00+00:00</published><updated>2019-11-02T00:00:00+00:00</updated><author><name>Raphaël Gomès</name></author><id>tag:pyvideo.org,2019-11-02:pycon-fr-2019/booster-python-avec-rust-le-cas-de-mercurial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Historiquement, le gestionnaire de version Mercurial utilise des modules en C pour améliorer ses performance lorsque Python ne suffit plus. L'année dernière, des contributeurs ont commencé à utiliser des modules en Rust comme une alternative plus sécuritaire, plus agréable et mieux outillée que C afin de compléter la base Python de Mercurial.&lt;/p&gt;
&lt;p&gt;Depuis fin 2018, Octobus a le plus grand nombre de contributions Rust dans Mercurial. Nous avons découvert des problèmes liés l'interaction de ces deux langages et trouvé des solutions qui n'avaient jusque-là  - à notre connaissance -  jamais été publiées sur Internet.&lt;/p&gt;
&lt;p&gt;Au programme :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Une vue d'ensemble de l'intégration de Rust à Python&lt;/li&gt;
&lt;li&gt;Les points positifs et négatifs de notre solution et les alternatives&lt;/li&gt;
&lt;li&gt;Des chiffres comparatifs de performance&lt;/li&gt;
&lt;li&gt;Une porte ouverte à la curiosité quant aux détails excessivement techniques.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>