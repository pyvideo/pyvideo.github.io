<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pyserf.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2009-11-07T00:00:00+00:00</updated><entry><title>Douglas Bagnall - pyserf - a shortcut for writing C extensions in C</title><link href="https://pyvideo.org/kiwi-pycon-2009/douglas-bagnall---pyserf---a-shortcut-for-writing.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Douglas Bagnall</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/douglas-bagnall---pyserf---a-shortcut-for-writing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pyserf - a shortcut for writing C extensions in C&lt;/p&gt;
&lt;p&gt;Presented by Douglas Bagnall&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are many clever ways of connecting Python and C code together, and
pyserf is one of those. It is just a short script that parses a module
outline and produces an idiomatic template for a C extension providing
the same signatures, so all you need to do is write the bits that
actually do stuff.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Pyserf is a tiny project that I wrote for my own use years ago and never
released because it is so obvious that dozens of better versions must
exist. The idea is simple -- you write an outline of a module like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;module documentation&amp;quot;&amp;quot;&amp;quot;
def top_level_function(int_a, float_b):
   &amp;quot;function documentation&amp;quot;
   return float_c

class SomeModule:
   &amp;quot;&amp;quot;&amp;quot;class documentation&amp;quot;&amp;quot;&amp;quot;
   def foo(self, int_ants obj_zoo):
      &amp;quot;&amp;quot;&amp;quot;method documentation&amp;quot;&amp;quot;&amp;quot;
      return float_frogs
&lt;/pre&gt;
&lt;p&gt;and pyserf uses the parsing modules in the standard library to generate
a C file that will compile to an extension providing the interface it
describes, with the documentation appearing in the right place and the
type conversions all properly handled. The generated file is not a
hideous unreadable mess, rather it is within a few characters of best
practise according to the official tutorial. Once you have this
template, you abandon your outline and write the middles of each
function in C. In describing what pyserf does, this talk will
demonstrate what is required to write an extension in C by hand, and
show you some ways of using the standard libraries parsing modules.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="extensions"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="pyserf"></category></entry></feed>