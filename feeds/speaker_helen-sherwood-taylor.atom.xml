<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_helen-sherwood-taylor.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-18T00:00:00+00:00</updated><entry><title>Managing mocks - the how why and when of mocking in Python</title><link href="https://pyvideo.org/pycon-uk-2015/managing-mocks-the-how-why-and-when-of-mocking-in-python.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/managing-mocks-the-how-why-and-when-of-mocking-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mocking is a valuable technique for writing tests, but is it always a
good idea?&lt;/p&gt;
&lt;p&gt;I want to give a brief introduction to the how and why of mocking and
the scope of its usefulness - I'll look at situations where it is
provides the most benefit and the times when it can be taken too far.&lt;/p&gt;
&lt;p&gt;Python is packaged with an excellent mocking module but we'll also look
at some other libraries which can help with mocking effectively.&lt;/p&gt;
</summary></entry><entry><title>Taking control of your Bluetooth devices</title><link href="https://pyvideo.org/pycon-uk-2016/taking-control-of-your-bluetooth-devices.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/taking-control-of-your-bluetooth-devices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helen Sherwood-Taylor&lt;/p&gt;
&lt;p&gt;Bluetooth Low Energy (BTLE) is a part of the Bluetooth standard aimed at bringing wireless technology to low power devices, and it's getting into everything - lightbulbs, robots, personal health and fitness devices and plenty more. However, these devices don't always come with a nice developer friendly API - often all you get is a phone app.&lt;/p&gt;
&lt;p&gt;We will investigate one of these devices and see how we can decipher some meaning from the conversations it has with its app. Armed with that information, we can go into Python and start writing code to control our device. Along the way we'll looking at the protocols and properties used in BTLE interactions and see how the same principles can be applied to a multitude of devices.&lt;/p&gt;
</summary></entry><entry><title>Managing Mocks</title><link href="https://pyvideo.org/europython-2016/managing-mocks.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/managing-mocks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helen Sherwood-Taylor - Managing Mocks
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/managing-mocks"&gt;https://ep2016.europython.eu//conference/talks/managing-mocks&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Mocking is a valuable technique for writing tests but mocking
effectively is often a stumbling block for many developers and can
raise questions about its overall value as a technique.&lt;/p&gt;
&lt;p&gt;There will be a brief introduction to mocking, then a look at features
and techniques of Python’s unittest.mock library and cover some useful
tips and common scenarios, so this will be useful to those who have
some experience mocking but would like to do so more effectively.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mocking is a valuable technique for writing tests but mocking
effectively is often a stumbling block for many developers and can
raise questions about its overall value as a technique.&lt;/p&gt;
&lt;p&gt;The audience will have some familiarity with unit testing and may have
tried mocking before, but some introduction will be provided for those
who haven’t. We will look at some features and techniques of Python’s
unittest.mock library and cover some useful tips and common scenarios,
so this will be useful to those who have some experience mocking but
would like to do so more effectively.&lt;/p&gt;
&lt;p&gt;Summary of proposed content:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A short introduction to what mocking is and why it is useful.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tour of Python’s mock library and how to make the most of it&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Creating and manipulating Mock objects&lt;/li&gt;
&lt;li&gt;Setting up return values and side effects to control test environment&lt;/li&gt;
&lt;li&gt;Inspecting mocks - different ways to examine a mock object and find out what happened during the test&lt;/li&gt;
&lt;li&gt;How and where to patch&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Common mocking situations - scenarios where mocking is particularly useful and/or tricky to get right. For example - date/time, filesystem, read only properties&lt;/li&gt;
&lt;li&gt;Some discussion of when mocking is and isn't helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Focus will be mainly on Python's unittest.mock module but we will also
have a brief look at some other useful libraries.&lt;/p&gt;
</summary></entry></feed>