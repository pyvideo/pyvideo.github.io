<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_eloise-ducky-macdonald-meyer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-05T00:00:00+00:00</updated><entry><title>An introduction to Wagtail (CMS)</title><link href="https://pyvideo.org/kiwi-pycon-2015/an-introduction-to-wagtail-cms.html" rel="alternate"></link><published>2015-09-05T00:00:00+00:00</published><updated>2015-09-05T00:00:00+00:00</updated><author><name>Eloise "Ducky" Macdonald-Meyer</name></author><id>tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/an-introduction-to-wagtail-cms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an introduction to Wagtail, a content management system
built on the Python web framework, Django. Many content managers are not
designed with web developers in mind, and choosing the right CMS for a
project, that does it's job well and assists with fast paced
development, can be difficult. Everyone has a favourite out there. I'm
not sure if I can call Wagtail my favourite yet, however I have found it
to be a very developer-friendly system. And after unknowingly working
alongside a core contributor for some time, I hadn't realised what
little recognition Wagtail has as a tool, even among Django developers.
My talk will thus discuss the pros and cons of the system, with a
demonstration to show how easy it is to get started with using it. I
will also touch on it's nature as an open-source platform and some of
it's potential futures.&lt;/p&gt;
</summary></entry><entry><title>Python in Classrooms</title><link href="https://pyvideo.org/kiwi-pycon-2015/python-in-classrooms.html" rel="alternate"></link><published>2015-09-05T00:00:00+00:00</published><updated>2015-09-05T00:00:00+00:00</updated><author><name>Eloise "Ducky" Macdonald-Meyer</name></author><id>tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/python-in-classrooms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python as a language has had great success in being accessible to
aspiring programmers of much younger ages than most contemporary
languages, and the skill set attained from learning to program may
include basic problem solving, mathematics and even literacy. We have
conducted several workshops with diverse groups of primary school
children in years 4 to 6, attempting to teach elementary programming
skills using Python. The goals of the workshops were to promote numeracy
and literacy in Tasmanian schools, where there may be lower rates of
competency in these areas. We wanted to do this through the use of a
formal, syntax-dependent language, which could have benefits related to
natural language skills and literacy. To engage our students we
constructed exercises in different topics, that lead to children being
able to modify a small, simple and modular game using PyGame for Python
2.7. In some of these exercises, the students created elementary
programs to answer simple math questions and participated in group
exercises to make modifications to one version of the game (adding
characters, dialogue and interactions) before being able to modify their
own version. In these sessions we found participants to engage well with
the source material despite being reasonably advanced, with teaching
staff making comparisons between accurate python syntax and
grammatically correct English.&lt;/p&gt;
</summary></entry></feed>