<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_room-215.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-02T00:00:00+00:00</updated><entry><title>Closing</title><link href="https://pyvideo.org/pycon-za-2015/closing.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Simon Cross</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/closing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The closing ceremony. A general wrap of the conference. There will also
be announcements about sprints on Saturday and Sunday.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Friday Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2015/friday-lightning-talks.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Adam Jorgensen</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/friday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h0m0s"&gt;(0:00:00)&lt;/a&gt; &lt;strong&gt;Using Odo to
load data&lt;/strong&gt; by Tobias Brandt&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h5m23s"&gt;(0:05:23)&lt;/a&gt; &lt;strong&gt;Sh&lt;/strong&gt; by
Adrianna Pi≈Ñska&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h8m44s"&gt;(0:08:44)&lt;/a&gt; &lt;strong&gt;Pygame Zero&lt;/strong&gt;
by Neil Muller&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h11m57s"&gt;(0:11:57)&lt;/a&gt; &lt;strong&gt;How not to
hate Javascript&lt;/strong&gt; by Adam Jorgensen&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h16m28s"&gt;(0:16:28)&lt;/a&gt; &lt;strong&gt;Testing code
examples from your slides&lt;/strong&gt; by Jeremy Thurgood&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="Room 215"></category></entry><entry><title>How I learnt to stop worrying and love Boost.Python</title><link href="https://pyvideo.org/pycon-za-2015/how-i-learnt-to-stop-worrying-and-love-boostpyth.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/how-i-learnt-to-stop-worrying-and-love-boostpyth.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Zen of Python dictates that there should be one - and preferably
only one - obvious way to do something. However, when it comes to
interoperation with C and C++, there is a multitude of options: the
Python C API, Boost.Python, ctypes, cffi, Cython. I will describe my
quest to find the &lt;strong&gt;holy grail&lt;/strong&gt;&lt;sup&gt;W&lt;/sup&gt;W &lt;strong&gt;right interface&lt;/strong&gt; for a
high-performance networking library.&lt;/p&gt;
&lt;p&gt;The talk is largely a case study in applying Boost.Python, and will look
at some issues such as the Global Interpreter Lock, handling
KeyboardInterrupt cleanly, and managing object lifetime. I will briefly
mention some of the alternative tools to explain why I settled on
Boost.Python. It is not a complete Boost.Python tutorial, but rather
aims to give a sense of the flavour and show how it's used in a real
application.&lt;/p&gt;
&lt;p&gt;For obvious reasons, this talk will have a lot of C++ code in it, and
some familiarity with C++ will be useful.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>How PyPy runs your program</title><link href="https://pyvideo.org/pycon-za-2015/how-pypy-runs-your-program.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Maciej Fijalkowski</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/how-pypy-runs-your-program.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we would like to have a short introduction on how Python
programs are compiled and executed, with special attention towards
just-in-time compilation done by PyPy. PyPy is the most advanced Python
interpreter around, and while it should generally just speed up your
programs, there is a wide range of performance that you can get out of
PyPy, ranging from slightly faster than CPython to C speeds, depending
on how you write your programs.&lt;/p&gt;
&lt;p&gt;We will split the talk in two parts. In the first part we will explain
how things work, and what can and cannot be optimized, as well as
describe the basic heuristics of the JIT compiler and optimizer. In the
next part we will do a brief survey of existing tools for looking at
performance of Python programs, with a specific focus on PyPy. We'll
mostly focus on vmprof with a brief mention of others.&lt;/p&gt;
&lt;p&gt;As a result of this talk, an audience member should be better equipped
with the tools to write new software and improve existing software with
performance in mind.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Kivy Showcase: a short exploration of how Kivy is changing the world</title><link href="https://pyvideo.org/pycon-za-2015/kivy-showcase-a-short-exploration-of-how-kivy-is.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Richard Larkin</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/kivy-showcase-a-short-exploration-of-how-kivy-is.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will look at some real-world success stories using
Kivy. From exhibition-size interactive displays to race car telemetry
systems to robotics, Kivy is being used to deliver many compelling and
innovative applications. We'll use these applications to discuss some of
the features and abilities of the framework that make it such a good
choice for a wide range of uses.&lt;/p&gt;
&lt;p&gt;We'll briefly cover some exciting projects using Kivy, namely:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Project Liatris: a new, open source project using Kivy touch devices
to control robots.&lt;/li&gt;
&lt;li&gt;RaceCapture Pro: A race car telemetry system that uses Kivy
interactive displays both in-car and in post-session analytics
interaction.&lt;/li&gt;
&lt;li&gt;Brain Trainer Plus: A mental dexterity trainer deployed to old age
homes and medical treatment facilities that has been shown effective
in treating dementia and other mental disorders, as well as bringing
a greatly enhanced quality-of-life to the aged and mentally ill.&lt;/li&gt;
&lt;li&gt;CAMI Educational products: The rich feature set and effortless
animation abilities of Kivy make developing compelling, responsive
desktop and mobile interactions easy.&lt;/li&gt;
&lt;li&gt;The Icarus touch and Touch live projects: creating radically new and
exciting interactive musical instruments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these applications are being delivered using Kivy, a free, open
source, full stack, multi-touch, cross-platform Python/Cython framework
that runs on a watch. I kid you not.&lt;/p&gt;
</summary><category term="kivy"></category><category term="Room 215"></category></entry><entry><title>Property-based testing with Hypothesis</title><link href="https://pyvideo.org/pycon-za-2015/property-based-testing-with-hypothesis.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Jeremy Thurgood</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/property-based-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit testing can be more effective and less tedious when you have an
army of robot monkeys at your disposal. Why should humans have to worry
about finding the particular combination of Turkish and Tengwar that
crashes the serialiser, or the convoluted sequence of operations that
corrupts the database?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
Hypothesis is a Python library for turning unit tests into generative tests,
covering a far wider range of cases than you can manually. Rather than just
testing for the things you already know about, Hypothesis goes out and
actively hunts for bugs in your code. It usually finds them, and when it
does it gives you simple and easy to read examples to demonstrate.
&lt;/pre&gt;
&lt;p class="attribution"&gt;&amp;mdash;Hypothesis 1.0 release announcement&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Property-based testing lets you think about your tests in terms of
general behaviour and invariant properties instead of getting lost in
the details of individual examples, and good tools (such as Hypothesis)
will explore quite complex combinations of test data and reduce them to
minimum failing cases.&lt;/p&gt;
&lt;p&gt;This talk will provide a practical introduction to property-based
testing with Hypothesis, and show how you can use it to build more
effective test suites with less effort.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>"Python in Production" Panel Discussion</title><link href="https://pyvideo.org/pycon-za-2015/python-in-production-panel-discussion.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Simon Cross</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/python-in-production-panel-discussion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A panel discussion on using and deploying Python projects in production.
The panel will follow a simple discussion format with panelists
responding to questions from the audience.&lt;/p&gt;
&lt;p&gt;Panel chair: * &lt;em&gt;Simon Cross&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Panelists:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Andy Rabagliati&lt;/em&gt; (CSIR / CHPC)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Bryn Divey&lt;/em&gt; (Oracle)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Colin Alston&lt;/em&gt; (Praekelt)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Milton Madanda&lt;/em&gt; (Praekelt)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stefano Rivera&lt;/em&gt; (Debian Developer)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Room 215"></category></entry><entry><title>The Road to Continuous Deployment</title><link href="https://pyvideo.org/pycon-za-2015/the-road-to-continuous-deploys.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Stefano Rivera</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/the-road-to-continuous-deploys.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do we get work from a developer's laptop to a production server? How
do we do this repeatedly? How do we avoid releasing bad patches? How do
we get changes out as fast as possible? And what happens to requests
during a deploy? If you want continuous deployment, you have to solve
these problems.&lt;/p&gt;
&lt;p&gt;How do you handle configuration, so that the same code can run in
multiple environment? From a developers laptop, to QA environments, to
production. What about the quirks of each machine in production?&lt;/p&gt;
&lt;p&gt;This talk will look at the path Yola took, with Jenkins, yoconfigurator,
yodeploy. It's by no means a complete solution, but it's good enough
that I rarely find myself working on it, these days.&lt;/p&gt;
&lt;p&gt;We will cover the pros and cons of each path one can take. The whole
platform architecture is really affected by this. We can talk about:
Bare hardware, virtualization, containerization, build systems, linux
distributions packages, language package ecosystems, configuration
management systems, notifications, secret distribution, and much more.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Distributed pub-sub infrastructure with Apache Kafka</title><link href="https://pyvideo.org/pycon-za-2015/distributed-pub-sub-infrastructure-with-apache-ka.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Carl Scheffler</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/distributed-pub-sub-infrastructure-with-apache-ka.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt; is great for building a
large scale distributed data bus. Even a small cluster will happily
accept and store thousands of messages per second, and make them
available to consumers with low latency.&lt;/p&gt;
&lt;p&gt;Kafka was chosen as the solution to our publish-subscribe infrastructure
at &lt;a class="reference external" href="http://www.takealot.com/"&gt;Takealot.com&lt;/a&gt;. It supports our
event-driven systems on the website, in the warehouses and in the
office, as well as our analytics and machine learning projects.&lt;/p&gt;
&lt;p&gt;This talk will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;introduce the basic Kafka principles that make things work,&lt;/li&gt;
&lt;li&gt;outline how Kafka fits in with the rest of our architecture,&lt;/li&gt;
&lt;li&gt;cover some of the practicalities of building Python-based Kafka
services,&lt;/li&gt;
&lt;li&gt;compare the two main Python libraries for Kafka, namely
&lt;a class="reference external" href="https://github.com/mumrah/kafka-python"&gt;kafka-python&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/Parsely/pykafka"&gt;pykafka&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;demonstrate some practical applications at Takealot.com.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Join in if you are interested in scalable distributed infrastructure.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Numberplate recognition using python, opencv and some other magic.</title><link href="https://pyvideo.org/pycon-za-2015/numberplate-recognition-using-python-opencv-and.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Kobus Wolvaardt</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/numberplate-recognition-using-python-opencv-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to build/construct a numberplate recognition system for you or your
neighbourhood. Using Python and openCV to detect and recognize
numberplates from images, check and log it in a DB. Some challenges in
getting usable numberplates at night and how the software was designed
will be covered.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>OpenCanary: a new Python-based honeypot</title><link href="https://pyvideo.org/pycon-za-2015/opencanary-a-new-python-based-honeypot.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Azhar Desai</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/opencanary-a-new-python-based-honeypot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Honeypots: a great idea tempered by over a decade of glorious
misapplication resulting in a slow relegation to the realm of academia
and slightly dubious research. But it doesn‚Äôt have to be that way. In
August 2015 we released OpenCanary, the Open Source version of our
commercial Python-based honeypot.&lt;/p&gt;
&lt;p&gt;Traditional honeypots aim to reveal attacker tools, techniques and
procedures, by entrapping attackers through emulation (or
instrumentation) of common protocols and services. They are typically
installed standalone, and seldom updated. We argue that this honeypot
approach is outdated; current organisations struggle far more with
identifying breaches than identifying the version of some generic
rootkit installed post-breach.&lt;/p&gt;
&lt;p&gt;OpenCanary changes that, treating the honeypot as an internal
distributed sensor rather than a standalone alert generator. Each event
reported is a high-quality indicator of investigation-worthy activity,
and each OpenCanary instance feeds event data to a correlator which
produces single alerts even in the face of network-wide scans. With such
a high signal-to-noise ratio, every alert requires investigation. This
is in contrast to the stream of alerts produced by tools such as
anti-virus, network IDS or traditional honeypots.&lt;/p&gt;
&lt;p&gt;OpenCanary wound up relying on Python for the majority of the code. The
Python eco-system provided support that sped up development and, more
importantly, deployment. However it didn‚Äôt take us the full distance.&lt;/p&gt;
&lt;p&gt;In this talk, we provide a brief background on honeypots, discuss the
design of OpenCanary, delve into the challenges experienced and our
plans for the project. Along the way, we‚Äôll demo the trivially
installable OpenCanary, configure a few fake services and provide an
outsider‚Äôs view of developing in Python.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Opening</title><link href="https://pyvideo.org/pycon-za-2015/opening.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Simon Cross</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/opening.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A general welcome and an introduction to all the exciting things that
will be happening at PyConZA 2015!&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Pragmatic Python for Social Change</title><link href="https://pyvideo.org/pycon-za-2015/pragmatic-python-for-social-change.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Greg Kempe</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/pragmatic-python-for-social-change.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://code4sa.org"&gt;Code for South Africa&lt;/a&gt; is a civic technology lab
that uses Python and open data to promote informed decision making to
drive social change. We use our skills for social good.&lt;/p&gt;
&lt;p&gt;We build tools like &lt;a class="reference external" href="http://living-wage.co.za/"&gt;Living Wage&lt;/a&gt; for
calculating fair wages for domestic workers,
&lt;a class="reference external" href="http://wazimap.co.za"&gt;Wazimap.co.za&lt;/a&gt; for exploring your
neighbourhood through statistics, &lt;a class="reference external" href="http://mpr.code4sa.org"&gt;Medicine Prices
(mpr.code4sa.org)&lt;/a&gt; for finding cheaper
generics of prescription medicines,
&lt;a class="reference external" href="http://openbylaws.org.za"&gt;OpenByLaws.org.za&lt;/a&gt; for local legislation
that's easy to read and share, and &lt;a class="reference external" href="http://pmg.org.za"&gt;PMG.org.za&lt;/a&gt;
for keeping an eye on Parliament.&lt;/p&gt;
&lt;p&gt;In this talk we'll discuss what civic technology means, how you can get
involved, and the why, what and how of our approach to building and
running more than 25 websites, services and applications with a small
budget and an even smaller team.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>PyCon Montr√©al in 30 min</title><link href="https://pyvideo.org/pycon-za-2015/pycon-montreal-in-30-min.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Petrus Janse van Rensburg</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/pycon-montreal-in-30-min.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be a whirlwind overview of some of the most interesting talks
from this year's big PyCon in Montr√©al. The goal is to boil down the
gist of my 10 favourite talks into a single, super-charged talk that
gives you a good idea of what went down, but without getting stuck on
any particular topic.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Python @ CloudFlare</title><link href="https://pyvideo.org/pycon-za-2015/python-cloudflare.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Gideon Redelinghuys</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/python-cloudflare.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CloudFlare protects and accelerates any website online. Whether it's
protecting large customers from 160Gbps DDOS attacks, dealing with
normal Reddit traffic, Universal SSL or providing one of the fastest DNS
servers in the world we need to stay up, work fast and deploy fast.&lt;/p&gt;
&lt;p&gt;To this end we have two large Python projects we use at CloudFlare. One
is the popular configuration manager Salt. We provide patches, features
and bug reports on regular intervals to the Salt project. The other is
an internal tool called CFSetup. CFSetup allows us to do the following
with a few simple commands: spin up Docker containers that reflect
machines in production, spin up a tightly coupled stack of Docker
containers that reflect our software and hardware stacks, run build
environments inside of well defined Docker containers to ensure that the
compiled end-product was built using the same libraries that are on the
production machines, and various other utility features.&lt;/p&gt;
&lt;p&gt;This talk will cover how Salt works, how we've extended it to scale up
and how we've had to debug it. It also cover how we've managed to build
a layer on top of Docker to make it easier to use for ad-hoc testing and
developing and what it's like interacting with Docker using Python.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Thursday Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2015/thursday-lightning-talks.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/thursday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h0m0s"&gt;(0:00:00)&lt;/a&gt; &lt;strong&gt;Racy interrupt handling&lt;/strong&gt; by Bruce Merry&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h6m0s"&gt;(0:06:00)&lt;/a&gt; &lt;strong&gt;Vulture in Python&lt;/strong&gt; by Philip Sterne&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h11m9s"&gt;(0:11:09)&lt;/a&gt; &lt;strong&gt;Edx&lt;/strong&gt; by Carl Dawson&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h17m39s"&gt;(0:17:39)&lt;/a&gt; &lt;strong&gt;AST linting&lt;/strong&gt; by Bryn Divey&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h24m33s"&gt;(0:24:33)&lt;/a&gt; &lt;strong&gt;Numpy in Anger!&lt;/strong&gt; by Laura Richter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h29m28s"&gt;(0:29:28)&lt;/a&gt; &lt;strong&gt;How to screw up loading CSVs in Python&lt;/strong&gt; by James Saunders&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h33m34s"&gt;(0:33:34)&lt;/a&gt; &lt;strong&gt;PyQuery&lt;/strong&gt; by Nicholas Spagnoletti&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h37m27s"&gt;(0:37:27)&lt;/a&gt; &lt;strong&gt;Debian Python moves kicking and screaming to Git&lt;/strong&gt; by Stefano Rivera&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="Room 215"></category></entry></feed>