<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 11 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>How to write a JIT compiler in 30 minutes</title><link>https://pyvideo.org/europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This is a live-coding exercise: we will start from a blank page and
write a working (albeit simple and limited) JIT compiler from scratch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html</guid><category>Compiler and Interpreters</category><category>Development</category><category>TDD</category></item><item><title>How to write a JIT compiler in 30 minutes</title><link>https://pyvideo.org/pycon-italia-2019/how-to-write-a-jit-compiler-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This will be a live-coding exercise: we will write a working (albeit
simple and limited) JIT compiler from scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1675"&gt;https://python.it/feedback-1675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/how-to-write-a-jit-compiler-in-30-minutes.html</guid><category>performance</category><category>JIT</category><category>assembly</category><category>live-coding</category><category>compilers</category></item><item><title>Bug hunting for dummies</title><link>https://pyvideo.org/europython-2013/bug-hunting-for-dummies.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/bug-hunting-for-dummies.html</guid><category>debugging</category><category>testing</category><category>programming</category><category>tdd</category><category>gdb</category><category>code generation</category><category>pdb</category></item><item><title>The practice of TDD: tips&amp;tricks</title><link>https://pyvideo.org/pycon-italia-2018/the-practice-of-tdd-tipstricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python. The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/the-practice-of-tdd-tipstricks.html</guid><category>testing</category><category>test-driven-development</category><category>tdd</category><category>patterns</category><category>pytest</category><category>test</category><category>best-practices</category></item><item><title>PyPy Status Update</title><link>https://pyvideo.org/pycon-italia-2017/pypy-status-update.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this talk is to present the latest news in the PyPy world.
In particular, I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the current status of PyPy, including performance and compatibility
w.r.t CPython&lt;/li&gt;
&lt;li&gt;the status of NumPy and in general of the scientific stack: what
works, what doesn’t, the speed and compatibility tradeoffs, etc.&lt;/li&gt;
&lt;li&gt;the status Python 3 on PyPy&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/pypy-status-update.html</guid><category>performance</category><category>JIT</category><category>pypy</category><category>python3</category><category>numpy</category></item><item><title>The joy of PyPy JIT: abstractions for free</title><link>https://pyvideo.org/europython-2017/the-joy-of-pypy-jit-abstractions-for-free.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy JIT is a powerful piece of technology which makes Python program
running faster: in this talk, we will see how it helps us to write our
programs better without sacrificing performance.&lt;/p&gt;
&lt;p&gt;One of the key to write complex software systems of good quality is to make a
good usage of abstractions, to clearly separate the various layers and
components.  However, often each layer of abstraction adds some cost in terms
of runtime performance, so we need to struggle finding the best trade-off
between maintainability and speed.&lt;/p&gt;
&lt;p&gt;Because of the way it works, the PyPy JIT naturally removes the cost of most
abstractions: we will look at real-life examples of how this is possible,
showing what the JIT can and can't do. We will also show how this compares to
other popular systems of optimizing Python code, such as Cython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:europython-2017/the-joy-of-pypy-jit-abstractions-for-free.html</guid></item><item><title>PyPy status (a.k.a.: no, PyPy è ancora vivo)</title><link>https://pyvideo.org/pycon-italia-2014/pypy-status-aka-no-pypy-e-ancora-vivo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk presenterò le ultime novità di PyPy, con un particolare focus su quello che è accaduto negli ultimi anni. In particolare parlerò della velocità di PyPy e di quali sono le linee di sviluppo attuali, come ad esempio:&lt;/p&gt;
&lt;p&gt;lo status del JIT compiler e delle prestazioni di PyPy in generale;&lt;/p&gt;
&lt;p&gt;i miglioramenti del Garbage Collector (GC);&lt;/p&gt;
&lt;p&gt;lo status dei sottoprogetti per implementare NumPy e la compatibilità con Python 3;&lt;/p&gt;
&lt;p&gt;CFFI, che vuole essere una libreria generica per interfacciarsi con il C sia per PyPy che per CPython&lt;/p&gt;
&lt;p&gt;uno sguardo veloce al sottoprogetto STM (Software Transactional Memory), che ha mira a risolvere l'annoso problema del GIL&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-24:pycon-italia-2014/pypy-status-aka-no-pypy-e-ancora-vivo.html</guid></item><item><title>Python and PyPy performance (not) for dummies</title><link>https://pyvideo.org/europython-2015/python-and-pypy-performance-not-for-dummies.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Antonio Cuni - Python and PyPy performance (not) for dummies
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;In this talk we would like to have a short introduction on how Python
programs are compiled and executed, with a special attention towards
just in time compilation done by PyPy. PyPy is the most advanced Python
interpreter around and while it should generally just speed up your programs
there is a wide range of performance that you can get out of PyPy, ranging from
slightly faster than CPython to C speeds, depending on how you write your
programs.&lt;/p&gt;
&lt;p&gt;We will split the talk in two parts. In the first part we will explain
how things work and what can and what cannot be optimized as well as describe
the basic heuristics of JIT compiler and optimizer. In the next part we will
do a survey of existing tools for looking at performance of Python programs
with specific focus on PyPy.&lt;/p&gt;
&lt;p&gt;As a result of this talk, an audience member should be better equipped with
tools how to write new software and improve existing software with performance
in mind.&lt;/p&gt;
&lt;p&gt;The talk will be given by Antonio Cuni and Maciej Fijalkowski,
both long time PyPy core developers and expert in the area of
Python performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 07 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-07:europython-2015/python-and-pypy-performance-not-for-dummies.html</guid></item><item><title>PyPy hands-on</title><link>https://pyvideo.org/europython-2011/pypy-hands-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in &amp;quot;Training
Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The session is divided into two parts, of roughly 2 hours each. People
who are interested only in the first part, can leave the session after
it. However, the first part is a prerequisite for the second one, thus
people are not advised to join in the middle of the session.&lt;/p&gt;
&lt;p&gt;The session is meant to be highly interactive. People are invited to
bring their own laptop and try things by themselves.&lt;/p&gt;
&lt;div class="section" id="part-1-run-your-application-under-pypy"&gt;
&lt;h4&gt;Part 1: Run your application under PyPy&lt;/h4&gt;
&lt;p&gt;This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to fix/avoid CPython implementation details (e.g., refcounting)

- general overview of how the PyPy JIT works

- how to optimize your program for the PyPy JIT

- how to view and interpret the traces produced by the JIT

- how to tweak the parameters of the JIT and the GC

- how to use existing CPython C extensions on PyPy, and fix them if necessary
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-write-your-own-interpreter-with-pypy"&gt;
&lt;h4&gt;Part 2: Write your own interpreter with PyPy&lt;/h4&gt;
&lt;p&gt;PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to
implement their own programming languages, or who simply want to know
more about how the PyPy JIT works internally.&lt;/p&gt;
&lt;p&gt;The students will be given the source code for a toy language
implemented in RPython. They will learn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to translate it to C using the PyPy translation toolchain

- what are the &amp;quot;hints&amp;quot; needed by the JIT generator, and how to place them
&lt;/pre&gt;
&lt;p&gt;Then, they will be challenged to add the proper hints to the toy
interpreter, to get the best result with the JIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THINGS TO DO BEFORE THE TRAINING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are encouraged to bring your laptop to the training session.&lt;/p&gt;
&lt;p&gt;Make sure that the following prerequisites are met:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install PyPy 1.5:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/download.html"&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;http://doc.pypy.org/en/latest/getting-started.html#installing-pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure that &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; are installed (look
at the URL above for instructions)&lt;/li&gt;
&lt;li&gt;Clone the pypy repository, and update to the 1.5 version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/pypy"&gt;http://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd pypy&lt;/p&gt;
&lt;p&gt;$ hg up -r release-1.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone the jitviewer repository and install it on pypy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/jitviewer"&gt;http://bitbucket.org/pypy/jitviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd jitviewer&lt;/p&gt;
&lt;p&gt;$ /path/to/pypy-1.5/bin/pypy setup.py develop&lt;/p&gt;
&lt;p&gt;If you intend to follow also the second part (&amp;quot;Write your own
interpreter with PyPy&amp;quot;), you need to make sure you have a working
&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started-python.html%20#translating-the-pypy-python-interpreter"&gt;developing
environment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pypy-hands-on.html</guid><category>cd</category><category>cpython</category><category>extensions</category><category>hg</category><category>jit</category><category>optimize</category><category>pypy</category><category>setup.py</category><category>tutorial</category></item><item><title>PyPy in production</title><link>https://pyvideo.org/europython-2011/pypy-in-production.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language - it is the fastest Python
interpreter, and the most compatible and most stable 'alternative´ one.
No longer merely a research project, PyPy is now suitable for production
use. We are working on improvements on calling into C libraries and
generally integrating with the existing Python extensions ecosystem.&lt;/p&gt;
&lt;p&gt;We will give an overview on how the tracing Just-in-Time compiler works
in PyPy. From there, we will then focus on what the PyPy project has
achieved, particularly in the past two years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most Python benchmarks run much faster than with CPython or Psyco&lt;/li&gt;
&lt;li&gt;the real-world PyPy compiler toolchain itself (200 KLocs) runs twice
as fast&lt;/li&gt;
&lt;li&gt;already supports 32 and 64bit x86 and is in the process of supporting
ARM&lt;/li&gt;
&lt;li&gt;full compatibility with CPython (more than Jython/IronPython)&lt;/li&gt;
&lt;li&gt;full (and JIT-ed) ctypes support to call C libraries from Python&lt;/li&gt;
&lt;li&gt;supports Stackless Python (in-progress)&lt;/li&gt;
&lt;li&gt;new &amp;quot;cpyext&amp;quot; layer which integrates existing CPython C extensions&lt;/li&gt;
&lt;li&gt;an experimental super-fast JIT-compilation of calls to C++ libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to reserve time for discussing potential future work like SWIG
and/or Cython compatibility and other areas brought up by the audience.
There are many interesting details that can be explored further; we will
focus on the points the audience is most interested in.&lt;/p&gt;
&lt;p&gt;For more info:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;http://pypy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our blog: &lt;a class="reference external" href="http://morepypy.blogspot.com/"&gt;http://morepypy.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eureka program: &lt;a class="reference external" href="http://www.eurostars-eureka.eu/"&gt;http://www.eurostars-eureka.eu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Eurostars Eureka is our funding source since 2009. It is a
cross-European funding collaboration that targets small firms which
produce research.&lt;/em&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/pypy-in-production.html</guid><category>cpython</category><category>ctypes</category><category>cython</category><category>extensions</category><category>pypy</category><category>stackless</category></item><item><title>Python white magic</title><link>https://pyvideo.org/europython-2012/python-white-magic.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Antonio Cuni - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a powerful language. Beginners appreciate its surface of
simplicity and ease to use, where (almost) everything “just works” (TM)
as expected. However, under the hood, there is a whole world of rules
and layers which can be (ab)used by experienced programmers to tweak the
language in unexpected ways. Often, these techniques are labeled as
“hacks” or “black magic”, to indicate that they should not used in
production or that you should not look at it unless you are “initiated”
to some not better specified sorcery. However, if used with care and in
the right places, these techniques can lead to better, faster and/or
more readable code, or can be extremely useful during debugging, and
thus deserve the definition of “white magic” which programmers can use
to improve their code. Moreover, looking at how they are implemented is
a good way to learn about some of the deep corners of the language. This
talk presents some of these advanced techniques which I have seen in use
in real code, e.g. in PyPy or pdb++. Including, but not limited to:
creating new functions by reusing existing code objects, instantiating
multiple copies of the same module, playing with metaclasses in various
ways, changing the &lt;strong&gt;class&lt;/strong&gt; of an object on the fly to get specialized
behavior, automatically entering the debugger when a certain event
occur, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/python-white-magic.html</guid></item><item><title>Understanding PyPy</title><link>https://pyvideo.org/pycon-italia-2015/understanding-pypy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy is an alternative implementation of CPython implemented in Python.
Understanding concepts like RPython, JIT, PyPy garbage collection and
other core concepts can be difficult for newcomers to understand. This
talk is aimed to introduce all of these concepts to help better
understand how PyPy works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-09:pycon-italia-2015/understanding-pypy.html</guid></item><item><title>The practice of TDD: tips&amp;tricks</title><link>https://pyvideo.org/pycon-za-2017/the-practice-of-tdd-tipstricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the
aim of this talk is to help the audience to fill the gap and apply
TDD effectively in Python.&lt;/p&gt;
&lt;p&gt;The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pycon-za-2017/the-practice-of-tdd-tipstricks.html</guid></item></channel></rss>