<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pybay-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-21T00:00:00+00:00</updated><entry><title>Automating Your Browser and Desktop Apps</title><link href="https://pyvideo.org/pybay-2016/automating-your-browser-and-desktop-apps.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Al Sweigart</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/automating-your-browser-and-desktop-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's a lot of data on the web and in your desktop apps, but accessing it can involve a lot of tedious typing and clicking. This talk is an introduction to the Selenium and PyAutoGUI modules, with live demos straight from the interactive shell. Al Sweigart explains web scraping techniques and programmatically controlling the keyboard and mouse to automate these tasks for you.
​
Abstract
The internet and personal computer are central tools in many jobs, including professions outside of engineering. This makes web scraping and GUI automation are relevant to not just developers and QA testers, but academics, organizers, and office workers. This talk is an introduction to Selenium and PyAutoGUI modules. and programatically controlling your browser and desktop applications from Python.&lt;/p&gt;
&lt;p&gt;Web scraping and GUI automation frameworks have an intimidating reputation for a steep learning curve. While they do have many sophisticated features, the basics that most folks will ever need can be covered in a single presentation.&lt;/p&gt;
&lt;p&gt;This presentation has multiple live demos to showcase these modules straight from the interactive shell.&lt;/p&gt;
&lt;p&gt;The content from this talk is derived from Automate the Boring Stuff with Python, a beginner's Python book freely available under a Creative Commons license at &lt;a class="reference external" href="https://automatetheboringstuff.com"&gt;https://automatetheboringstuff.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Al Sweigart is a software developer and the author of Automate the Boring Stuff with Python, Invent Your Own Computer Games with Python, Making Games with Python &amp;amp; Pygame, and Hacking Secret Ciphers with Python. These books are freely available under a Creative Commons license at &lt;a class="reference external" href="https://inventwithpython.com"&gt;https://inventwithpython.com&lt;/a&gt;. Al enjoys haunting coffee shops, writing educational materials, cat whispering, and making useful software. He lives in San Francisco.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/al-sweigart-automating-your-browser-and-desktop-apps"&gt;https://speakerdeck.com/pybay2016/al-sweigart-automating-your-browser-and-desktop-apps&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Data in a dynamic system: Strategies for backwards compatibility</title><link href="https://pyvideo.org/pybay-2016/data-in-a-dynamic-system-strategies-for-backwards-compatibility.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Trisha Kothari</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/data-in-a-dynamic-system-strategies-for-backwards-compatibility.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are several unanswered questions in deploying huge schema or logic changes: How do you modify systems with zero downtime or service interruption? How do you optimize online data migrations to allow for fallbacks? Any changes in schema or code in dynamic systems may cause existing users to experience downtime. The talk focuses on strategies to ensure backwards compatibility and prevent breaking data integrity.
​
Abstract
In an ideal scenario, feature development is easy. Just replace the old code with new code, and you’re done. This is, in fact, true for a system in state of inertia. However, in a dynamic system, with constantly moving pieces of business logic, this presents a hard problem. There are several unanswered questions while deploying huge schema or logic changes: How do you make code and schema changes with zero downtime or service interruption? How do you optimize online migrations of data to allow for fallbacks? Any changes in schema or code in dynamic systems may cause existing users to experience downtime. The talk focuses on strategies to ensure backwards compatibility and prevent breaking data integrity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Trisha works as a Software Engineer at Affirm, a take on modern banking started by Max Levchin. At Affirm, Trisha has worked on several projects including the creation of the underlying financial system, architecture of systems for underwriting data processing, and several other product features. She graduated from the University of Pennsylvania studying Computer Science.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/trisha-kothari-data-in-a-dynamic-system-strategies-for-backwards-compatibility/edit"&gt;https://speakerdeck.com/pybay2016/trisha-kothari-data-in-a-dynamic-system-strategies-for-backwards-compatibility/edit&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Django, Channels, and Distributed Systems</title><link href="https://pyvideo.org/pybay-2016/django-channels-and-distributed-systems.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/django-channels-and-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about the Django Channels project, how it makes WebSockets easy, how it's not just limited to Django, and the difficulty of building WebSocket and other stateful protocol handling at scale.
​
Abstract
Django Channels' headline feature is bringing WebSocket support to Django, but what it provides is far more useful than that. Underlying it is a robust, generic cross-process communication mechanism, built to support and scale with stateful protocols like WebSockets.&lt;/p&gt;
&lt;p&gt;This talk will look at the design of this mechanism - codenamed ASGI - and the difficulties of building an entire system to support WebSockets and broadcast systems across a large number of servers, and how Django encapsulates this to provide you a simple but powerful interface with good performance characteristics.&lt;/p&gt;
&lt;p&gt;We'll also take a brief look at how parts of Channels are useable outside of Django with other web frameworks or pure Python code, and how it lets us build better systems overall.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt; Andrew is a Python programmer, Django core developer and Senior Engineer at Eventbrite. He's behind Django's migration and channels systems, and in his spare time enjoys mountains, archery, and cheese.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/andrew-godwin-django-channels-and-distributed-systems"&gt;https://speakerdeck.com/pybay2016/andrew-godwin-django-channels-and-distributed-systems&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>"Good Enough" IS Good Enough!</title><link href="https://pyvideo.org/pybay-2016/good-enough-is-good-enough.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/good-enough-is-good-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our culture's default assumption is that everybody should always be striving for perfection -- settling for anything less is seen as a regrettable compromise. This is wrong in most software development situations: focus instead on keeping the software simple, just &amp;quot;good enough&amp;quot;, launch it early, and iteratively improve, enhance, and re-factor it. This is how software success is achieved!
​
Abstract
In 1989, Richard Gabriel caricatured two approaches to SW development: &amp;quot;worse is better&amp;quot; (&amp;quot;New Jersey approach&amp;quot;) and &amp;quot;the right thing&amp;quot; (&amp;quot;MIT/Stanford approach&amp;quot;), reluctantly concluding NJ was more viable, for several reasons (speed of development, flexible designs, systems adaptable to a variety of uses [including changes in requirements], ease of gradual, incremental improvement, ...). And this debate hasn't died down since.&lt;/p&gt;
&lt;p&gt;Debate rages, but reality has moved away from &amp;quot;right thing&amp;quot; (&amp;quot;Cathedral&amp;quot;-centralized &amp;quot;Big Design Up Front&amp;quot;, focus on academia/large firms, unsuited to shifting real-world requirements), toward &amp;quot;NJ&amp;quot; (&amp;quot;Bazaar&amp;quot;-like, agile iterative enhancement, dynamic start-ups/independent developers, a world of always-shifting specs).&lt;/p&gt;
&lt;p&gt;In this talk I support &amp;quot;the NJ approach&amp;quot;, on both philosophical and pragmatical grounds, with examples from many areas. Winners of the &amp;quot;mind-share battles&amp;quot; focused on simplicity (&amp;quot;good enough&amp;quot;), not theoretical refinement/completeness: large ecosystems of developers, incremental improvement -- TCP/IP approach vs ISO/OSI, HTTP/HTML vs Xanadu, early Unix's simplistic (but OK) approach to interrupted system calls vs Multic's/ITS's perfectionism.&lt;/p&gt;
&lt;p&gt;In Python, metaclasses often end up too complex (80% of their pluses can be had via class decorators, for 20% of the complexity); OTOH, incremental improvement worked just fine in sorting, generators, and guaranteed-finalization semantics.&lt;/p&gt;
&lt;p&gt;The talk is not perfect, but I do think it's good enough.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Author of &amp;quot;Python in a Nutshell&amp;quot;, co-author of &amp;quot;Python Cookbook&amp;quot;, PSF Fellow, frequent speaker at Python conferences, prolific contributor to StackOverflow, and winner of the 2006 Frank Willison Memorial Award for contributions to Python, Alex currently leads &amp;quot;1:many tech support&amp;quot; for Google Cloud Platform. He's married to Anna Ravenscroft, his co-author in the &amp;quot;Cookbook&amp;quot; 2nd edition and &amp;quot;Nutshell&amp;quot; 3rd edition, also a PSF Fellow, and also a winner of the Frank Willison Memorial Award, in 2013.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/alex-martelli-good-enough-is-good-enough"&gt;https://speakerdeck.com/pybay2016/alex-martelli-good-enough-is-good-enough&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Image processing using Python</title><link href="https://pyvideo.org/pybay-2016/image-processing-using-python.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Ravi Chityala</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/image-processing-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Image acquisition and processing have become a standard method for qualifying and quantifying experimental measurements in many fields of science and engineering. Python provides many computational tools that can be used to perform image processing. In this talk, we will walk through the most common workflow in image processing along with examples.
​
Abstract
Image acquisition and processing have become a standard method for qualifying and quantifying experimental measurements in many fields of science and engineering. Python offers the following advantage: simpler syntax, powerful libraries and modules that focuses on increasing the productivity and most importantly it is free and open-source.&lt;/p&gt;
&lt;p&gt;We will learn image processing through a simple and common workflow. We will read a high-resolution image of a mice. We will filter the image to reduce noise and improve the quality of the image. We will then segment the image, so that we obtain only the bones. We will clean up the over-segmented regions using morphological operations. We will perform measurements on the segmented image. Finally, we will discuss the workflow with a Python code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Ravi Chityala is a Senior Engineer at Elekta Inc. He has more than 12 years of experience in image processing and scientific computing. He is also a part time instructor at the UCSC Extension, San Jose, CA, where he teaches advanced Python to programmers. He uses Python for web development, scientific prototyping and computing and as a glue to automate process. He is the co-author of the book, &amp;quot;Image Processing and Acquisition using Python&amp;quot; published by CRC Press.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/ravi-chityala-image-processing-using-python"&gt;https://speakerdeck.com/pybay2016/ravi-chityala-image-processing-using-python&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Log Visualization for dummies</title><link href="https://pyvideo.org/pybay-2016/log-visualization-for-dummies.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Varang Amin</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/log-visualization-for-dummies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk the attendees will have an opportunity to use the ELK(Elasticsearch, Logstash, Kibana) stack to visualize their complex log data.
​
Abstract
Data is the new bacon. For all industries, including health, security, entertainment, etc., it is impossible for anyone to store and analyze data without using an automated platform. A unified platform is needed to provide data visualization and extract intelligence.&lt;/p&gt;
&lt;p&gt;Elasticsearch is a distributed, real-time, search and analytics platform. With the help of a restful API, Elasticsearch saves data and auto indexes the parsed data.&lt;/p&gt;
&lt;p&gt;During our talk, we will walk attendees through configuring the ELK stack and visualize datasets on Kibana.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Varang Amin is working as a Sr Staff Engineer at Palo Alto Networks. Darlene Wong is working as a Sr Staff Engineer at Palo Alto Networks.
​
Bio2
Darlene Wong is working as a Sr Staff Engineer at Palo Alto Networks. Before PAN, she worked in development role at Juniper Networks &amp;amp; Cisco Systems.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/varang-amin-darlene-wong-log-visualization-for-dummies"&gt;https://speakerdeck.com/pybay2016/varang-amin-darlene-wong-log-visualization-for-dummies&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Make sense of Deep Neural Networks using TensorBoard</title><link href="https://pyvideo.org/pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Arpan Chakraborty</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we look at some ways in which the TensorBoard utility can be used to better understand the structure of Deep Neural Networks and how they function. Best practices on how to use the TensorFlow Python API to make your models and results more interpretable are discussed.
​
Abstract
Deep Neural Networks are fast becoming the face of modern Machine Learning. But understanding how they work can be a real challenge, especially while you are trying to build a model. Google's recently published library, TensorFlow, includes a lesser-used utility called TensorBoard that can be used to visualize the structure of your neural network model and inspect how data flows through it. This talk will demonstrate some techniques which will help you use TensorBoard more effectively, and better understand how TensorFlow computations work. Code walkthroughs will be done in iPython notebooks, which will be made available to attendees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Arpan likes to find computing solutions to everyday problems. He is interested in human-computer interaction, robotics and cognitive science. He obtained his PhD from North Carolina State University, focusing on biologically-inspired computer vision. ​Working at Udacity, he develops content for artificial intelligence and machine learning courses.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard"&gt;https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard&lt;/a&gt;&lt;/p&gt;
</summary><category term="deep learning"></category><category term="tensorflow"></category></entry><entry><title>Pants, or How I Learned to Stop Worrying and Love Builds</title><link href="https://pyvideo.org/pybay-2016/pants-or-how-i-learned-to-stop-worrying-and-love-builds.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/pants-or-how-i-learned-to-stop-worrying-and-love-builds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For integrated services, it makes sense to keep several logical Python projects in a single repository -- a common library, a web front end and a back end service. For such repositories, Pants (build in Python for Python, Java, C++ and more) helps maintain dependencies and build (mostly) stand-alone executables which simplify deployment.
​
Abstract
Pants is a modern build system written in Python. It can build Python, Java, C++, Go and more. Twitter, Square and FourSquare use it internally, and contribute to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Moshe is a Twisted contributor, and has contributed to core Python. He loves infrastructure for building, monitoring and making services highly available.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/moshe-zadka-pants-building-python-for-fun-and-profit"&gt;https://speakerdeck.com/pybay2016/moshe-zadka-pants-building-python-for-fun-and-profit&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PyBay2016 Highlights</title><link href="https://pyvideo.org/pybay-2016/pybay2016-highlights.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/pybay2016-highlights.html</id><summary type="html"></summary></entry><entry><title>Python Profiling &amp; Performance: elementary to enterprise</title><link href="https://pyvideo.org/pybay-2016/python-profiling-performance-elementary-to-enterprise.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/python-profiling-performance-elementary-to-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides an end-to-end introduction and overview of Python performance practices, from fundamentals to functional industry practices to the future of performant Python. If you've ever felt lost in or out of touch with the constant whirl of Python performance advancements, this practical talk will put it back into perspective.
​
Abstract
Performance is a complex topic. It means a lot of things to a lot of people. Python gives us a great starting point: strong primitives and the &amp;quot;good enough&amp;quot; philosophy. But is Python actually good enough for performance-critical applications?&lt;/p&gt;
&lt;p&gt;This talk defines different kinds of performance, covers basic principles, and dives right into measurement. With those foundations laid, it outlines eight approaches to scaling Python, four of which are stack-agnostic and four of which are Python-specific. It outlines many examples from industry to promote a holistic view of performance as a practical process, not a large-scale benchmarking competition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Mahmoud Hashemi is Lead Developer of Python Infrastructure at PayPal, where he focuses on distributed systems, API design, and application security. He presented O'Reilly's Enterprise Software with Python, as well as several guides to topics from DNS to software versioning to statistics. An avid Wikipedian, Mahmoud is half of Hatnote, creators of Listen to Wikipedia and other fine wiki-based software.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise"&gt;https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>REST Websockets API with Django Channels</title><link href="https://pyvideo.org/pybay-2016/rest-websockets-api-with-django-channels.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Sam Bolgert</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/rest-websockets-api-with-django-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building REST APIs over HTTP has been discussed time and again. But could we do the same with WebSockets? What is the performance benefit? What learnings can we carry over from HTTP to WS? This talk will describe how engineers can build a REST API over WebSockets using Django and Channels. It is largely based on my experiences trying to build a REST WebSocket API.
​
Abstract
Websockets have been around for a number of years but popular web frameworks have been slow to integrate because of their asynchronous nature. With Django Channels we’ve finally broken that frontier in a synchronous way. How will developers use this new territory? I will outline some of my explorations that I have serialized into a library I call channels-api. It takes familiar patterns from Django Rest Framework and applies them to websocket land. I will walk through a sample project to demonstrate the configuration and installation of the library. I will demonstrate using these patterns we can create a “REST like” API relatively quickly. We can also implement new features that HTTP doesn’t support like server side push.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Author of channels-api library. Former Lead engineer at a number of startups.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/sam-bolgert-rest-websockets-api-with-django-channels"&gt;https://speakerdeck.com/pybay2016/sam-bolgert-rest-websockets-api-with-django-channels&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Safe-ish By Default</title><link href="https://pyvideo.org/pybay-2016/safe-ish-by-default.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/safe-ish-by-default.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come join us by the fire as we have Security Story Time with our friends, Frog and Toad. With them, you'll learn about all the things Django does to protect users and developers out of the box. We'll look at simplified code samples from the Django codebase to see what's happening under the hood, and cover how to make the Django security model even stronger in your application
​
Abstract
Introduction to the story, and the characters. Safe-ish: Talk about Django’s Security Model and how it tries to provide sane defaults for developers&lt;/p&gt;
&lt;p&gt;Run-through of the parts of the django security model:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XSS (brief definition). How do you turn it off? Mark Safe, | n, safe&lt;/li&gt;
&lt;li&gt;CSRF (brief definition). Django has middleware that checks POST requests for a token. Token is stored in cookie, also. Side-effect: harder to JS. Also, only an issue if you’re already owned, so maybe not an issue?. How to get around it? csrf_exempt&lt;/li&gt;
&lt;li&gt;SQLi (brief definition). Django’s ORM makes clean sql, (even when given bad data?). How? How to get around it: extra()/RawSQL()&lt;/li&gt;
&lt;li&gt;Clickjacking protection (brief definition). Django has middleware that sets headers browsers are supposed to respect. How to get around it: xframe_options_exempt, xframe_options_deny, xframe_options_sameorigin&lt;/li&gt;
&lt;li&gt;HTTPS. This one is less &amp;quot;out of the box&amp;quot; than the others, so won’t be talked about here.&lt;/li&gt;
&lt;li&gt;Host Header Validation (brief definition). Django verifies against allowed hosts in settings. How? get_host()&lt;/li&gt;
&lt;li&gt;Session security. What are django sessions?. Cookie-based by design. How can we make this better?&lt;/li&gt;
&lt;li&gt;Overall: Vigilance. Be aware of uses of this within your product&lt;/li&gt;
&lt;li&gt;HTTPS: Use it!. Set the correct settings. SECURE_SSL_REDIRECT: How does it work?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Philip is a Senior Software Engineer at Eventbrite. In his spare time, he writes novels, makes twitter bots, and gives technical talks. He used to run a webcomic, but there's just no money in it, you know? Philip is a refugee from the video games industry, and wishes anyone still there the best of luck. Philip has spoken at conferences about Python, Django, Node.js, and Linux. Philip believes in the web.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/philip-james-safe-ish-by-default-the-django-security-model-and-how-to-make-it-better-security-intermediate"&gt;https://speakerdeck.com/pybay2016/philip-james-safe-ish-by-default-the-django-security-model-and-how-to-make-it-better-security-intermediate&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Self-Healing Systems: The Road to 99.99% Uptime</title><link href="https://pyvideo.org/pybay-2016/self-healing-systems-the-road-to-9999-uptime.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>William Ting</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/self-healing-systems-the-road-to-9999-uptime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stop firefighting and start fireproofing! There are many tools that make oncall easier and increase availability, but we'll be mostly focusing on a few principles and design patterns that help make your systems more robust.
​
Abstract
Feature velocity is typically a higher priority early in a software's lifecycle, but as the system matures there is an effort to start fireproofing the system. On the Yelp Transactions Platform team we've used a combination of circuit breakers, queues, and idempotent operations to minimize downtime and waking up in the middle of the night.&lt;/p&gt;
&lt;p&gt;We'll take a look at how these design patterns help us in a distributed system, when they should be used, and common pitfalls associated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
William Ting is a longtime FOSS advocate with contributions in various projects (Pelican, autojump, pyramid_swagger, Rust, GNOME). He's currently an infrastructure engineer at Reddit, and previously on the Yelp Transaction Platform team.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/william-ting-self-healing-systems-the-road-to-99-dot-99-percent-uptime"&gt;https://speakerdeck.com/pybay2016/william-ting-self-healing-systems-the-road-to-99-dot-99-percent-uptime&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>TensorFlow on the Web</title><link href="https://pyvideo.org/pybay-2016/tensorflow-on-the-web.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Kendall Chuang</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/tensorflow-on-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be about walking through the steps to put a TensorFlow project into production on the web with Flask and Heroku. The goal is to introduce the project and show how TensorFlow can be used online for real data tasks, and discuss other considerations for deployment of a TensorFlow project.
​
Abstract
TensorFlow is a deep learning library with Python and C++ bindings that was released in 2015. The talk start with a brief intro to TensorFlow, and then dive into the specific steps to set up a simple project that can be served online.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Kendall is a lead software engineer at YesGraph, where he uses machine learning and Flask to power better invite flows for mobile and web apps. Previously he worked as an independent software consultant for four years, and before that he was a hardware designer at Qualcomm in San Diego for three years. Kendall was an an organizer of the San Diego Python Users Group, where he helped plan six one-day workshops on various Python topics.
​
Bio2
David Clark has a background in astrophysics, where he used Python extensively to analyze astronomical data. He recently transitioned careers to data science. Currently he is doing consulting for two startups. At Palo Alto Scientific, Inc., he uses the machine learning library TensorFlow to model sensor data from a wearable and infer a runner’s performance. He is also doing work for Quantea, Inc., making a dashboard using the Python libraries Bokeh and Pandas.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web"&gt;https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry><entry><title>The Tower of Abstraction</title><link href="https://pyvideo.org/pybay-2016/the-tower-of-abstraction.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/the-tower-of-abstraction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstraction is a powerful servant, but a dangerous master. We code, design, think, debug ... on a tower of abstractions. Spolsky's Law tells us that &amp;quot;All abstractions leak&amp;quot;. This talk explores why they leak, why that's often a problem, what to do about it; I also cover why sometimes abstractions SHOULD &amp;quot;leak&amp;quot;, and how best to produce and consume abstraction layers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Author of &amp;quot;Python in a Nutshell&amp;quot;, co-author of &amp;quot;Python Cookbook&amp;quot;, PSF Fellow, frequent speaker at Python conferences, prolific contributor to StackOverflow, and winner of the 2006 Frank Willison Memorial Award for contributions to Python, Alex currently leads &amp;quot;1:many tech support&amp;quot; for Google Cloud Platform. He's married to Anna Ravenscroft, his co-author in the &amp;quot;Cookbook&amp;quot; 2nd edition and &amp;quot;Nutshell&amp;quot; 3rd edition, also a PSF Fellow, and also a winner of the Frank Willison Memorial Award, in 2013.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/alex-martelli-the-tower-of-abstraction"&gt;https://speakerdeck.com/pybay2016/alex-martelli-the-tower-of-abstraction&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Turnkey Distributed Tracing: OpenTracing and Python</title><link href="https://pyvideo.org/pybay-2016/turnkey-distributed-tracing-opentracing-and-python.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Ben Sigelman</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/turnkey-distributed-tracing-opentracing-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk underlines the importance of distributed tracing in microservices, reveals the need for standardization of tracing instrumentation, and explains how the OpenTracing project addresses that need. We will showcase OpenTracing’s set of consistent, expressive, explicitly vendor-neutral tracing APIs with working examples using python gRPC, Flask, and possibly other frameworks if time allows.
​
Abstract
Microservice architectures offer many benefits but are notoriously difficult to observe or debug, especially as transactions inevitably cross process boundaries. I focused on this problem at Google and built Dapper, Google’s production distributed tracing system. I learned from Dapper’s design eccentricities that—in order to facilitate ubiquitous, transparent distributed tracing in OSS-heavy applications—as an industry we must find a way to make open-source software components interoperate from a tracing standpoint.&lt;/p&gt;
&lt;p&gt;This need for standardized tracing instrumentation across open source brings us to OpenTracing. By offering consistent, expressive, vendor-neutral, open-source APIs for popular platforms, OpenTracing provides a semantic and syntactic standard for distributed tracing instrumentation, allowing developers to add (or switch) tracing implementations with an O(1) configuration change.&lt;/p&gt;
&lt;p&gt;I will explain OpenTracing’s data model and the motivations behind it, describe how it generalizes across tracing systems and instrumentation languages (with a focus on Python), and show demos of how it integrates with frameworks (like Flask and gRPC) and applications. We will then cover the “hello world” of tracing: creating and linking traces that traverse process boundaries. Finally, I’ll share what’s in store for the rest of 2016 and 2017 and talk about ways to get involved.&lt;/p&gt;
</summary></entry><entry><title>A Guide to Bad Programming</title><link href="https://pyvideo.org/pybay-2016/a-guide-to-bad-programming.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Paul Bailey</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/a-guide-to-bad-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a sea of talks and information about how to improve your coding skills, this talk will make a case for bad code in your everyday life. In this talk you'll learn how and why you should write bad code.
​
Abstract
Inspired by &amp;quot;the queen of sh*tty robots&amp;quot; and a talk I had recently with a friend about how often our code &amp;quot;optimizations&amp;quot; and best practices don't matter, this talk will point out some of the obsessions we have as professional programmers that don't matter and can even be harmful to the progress of a product. The talk will show how identifying as a &amp;quot;bad programmer&amp;quot; can improve your skills in the long run and help you become a better programmer. Lastly, the talk will showcase some &amp;quot;bad practices&amp;quot; that can be fine or even good when used appropriately.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/paul-bailey-a-guide-to-bad-programming"&gt;https://speakerdeck.com/pybay2016/paul-bailey-a-guide-to-bad-programming&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Practical Introduction to Airflow</title><link href="https://pyvideo.org/pybay-2016/a-practical-introduction-to-airflow.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/a-practical-introduction-to-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moving data through transformations and from one place to another is a big part of data science/eng. We’ve been using Airflow for several months at Clover Health and have learned a lot about its strengths and weaknesses. We will use this talk to give a practical introduction to Airflow that gives people the information they need to decide whether Airflow is right for them and how to get started.
​
Abstract
Airflow is a popular pipeline orchestration tool for Python that allows users to configure complex (or simple!) multi-system workflows that are executed in parallel across any number of workers. A single pipeline might contain bash, Python, and SQL operations. With dependencies specified between tasks, Airflow knows which ones it can run in parallel and which ones must run after others. Airflow is written in Python and users can add their own operators with custom functionality, doing anything Python can do.&lt;/p&gt;
&lt;p&gt;At Clover Health, we’ve been pushing Airflow’s limits, digging into the source code, and contributing patches upstream. In this talk, we’ll cover the basics of Airflow so you can use what we’ve learned to start your Airflow journey on the right foot. This talk aims to answer questions such as: What is Airflow useful for? How do I get started? What do I need to know that’s not in the docs?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I have been a scientific Python developer since 2008. I’ve worked in atmospheric science, astronomy, urban planning, web applications, and healthcare. I maintain several open source Python libraries and am currently a data engineer at Clover Health.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow"&gt;https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A/B Testing: Harder than just a color change</title><link href="https://pyvideo.org/pybay-2016/ab-testing-harder-than-just-a-color-change.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Or Weizman</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/ab-testing-harder-than-just-a-color-change.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is your Product Manager asking you to test out different text or button colors? Not sure where to start? This talk will contain methodology and two case studies from Yelp’s Transaction Platform on how to properly run an experiment and get the best result. Learn about how to run a simple button color experiment, avoid pitfalls, test, and analyze the results with confidence. Statistical confidence!
​
Abstract
A/B testing is a common practice for websites...but where do you begin? This data-driven approach allows you to launch experiments and features with confidence. So how do you prepare, launch, and analyze an A/B experiment? How do you know for how long to keep it running? What about which metrics to track?&lt;/p&gt;
&lt;p&gt;This talk will present a procedure developed to run an A/B experiment, from planning the task and understanding the key metrics to analyzing the results. We will cover both simple and more complex case study, which help us understand the challenges involved in running experiments.&lt;/p&gt;
&lt;p&gt;This talk will cover a topic that will enable developers to make more data-driven decisions but has not been covered at Pycon. By providing case studies as motivation and a procedure to implement A/B testing this talk will excite the audience. Yelp runs multiple experiments on different aspects and the Transaction Platform team has gotten unique experience of needing to create experiments with limited traffic which will be discussed in the talk.&lt;/p&gt;
</summary></entry><entry><title>Beautiful Documentation Oriented Programming</title><link href="https://pyvideo.org/pybay-2016/beautiful-documentation-oriented-programming.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Daniel Mizyrycki</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/beautiful-documentation-oriented-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wonder how to write beautiful documentation with minimal effort? Did the tools get in your way in the process? This talk offers practical examples of leveraging simple text and docstrings to create stunning browsable documentation while making sure your code works as designed.
​
Abstract
Documentation is a fundamental organizational tool. Not only it help us to understand our programs, documentation can help us to develop and test our code iteratively.&lt;/p&gt;
&lt;p&gt;Formats and tools like reStructuredText and Sphinx had made a positive lasting impact in our Python community as we can now easily write splendid documentation with little effort. In turn, the documentation can be auto-tested and taken straight from our source code avoiding redundancy.&lt;/p&gt;
&lt;p&gt;This talk highlights the benefits of using simple text for writing programs and documentation, teaching the basics of reStructuredText, Sphinx, docstrings and doctests. We will be modeling the early stages of developing an application, following best practices, verifying program correctness and learning how to create beautiful documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Daniel Mizyrycki has been programming in Python for over a decade in industry (GreenBusinessCA, Amazon, Docker) and educational (CCSF, RCSD) environments. Previously, he used assembly, C, perl, bash, founded the first Argentinean Linux User Group (1993) and consulted for early Argentinean ISPs. He loves Python's community being a PSF Contributing Member at SFPython, PyLadies, Baypiggies, PyCon and authoring sphinxserve and loadconfig. Today, he teaches Python to hundreds of Cisco engineers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/daniel-mizyrycki-beautiful-documentation-oriented-programming"&gt;https://speakerdeck.com/pybay2016/daniel-mizyrycki-beautiful-documentation-oriented-programming&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Behind Closed Doors: Managing Passwords in a Dangerous World</title><link href="https://pyvideo.org/pybay-2016/behind-closed-doors-managing-passwords-in-a-dangerous-world.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Noah Kantrowitz</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/behind-closed-doors-managing-passwords-in-a-dangerous-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A modern application has a lot of passwords and keys floating around. Encryption keys, database passwords, and API credentials; often typed in to text files and forgotten. Fortunately a new wave of tools are emerging to help manage, update, and audit these secrets. Come learn how to avoid being the next TechCrunch headline.
​
Abstract
Secrets come in many forms, passwords, keys, tokens. All crucial for the operation of an application, but each dangerous in its own way. In the past, many of us have pasted those secrets in to a text file and moved on, but in a world of config automation and ephemeral microservices these patterns are leaving our data at greater risk than ever before.
​
New tools, products, and libraries are being released all the time to try to cope with this massive rise in threats, both new and old-but-ignored. This talk will cover the major types of secrets in a normal web application, how to model their security properties, what tools are best for each situation, and how to use them with major Python frameworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Noah Kantrowitz is a web developer turned infrastructure automation enthusiast, and all around engineering rabble-rouser. By day he builds tools and teaches, and by night he works with the Python Software Foundation infrastructure team. He is an active member of the Chef community, and enjoys merge commits, cat pictures, and beards.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/noah-kantrowitz-behind-closed-doors"&gt;https://speakerdeck.com/pybay2016/noah-kantrowitz-behind-closed-doors&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Being a Core Developer in Python</title><link href="https://pyvideo.org/pybay-2016/being-a-core-developer-in-python.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/being-a-core-developer-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyBay 2016 Keynote&lt;/p&gt;
&lt;p&gt;What I've learned from being a maintainer and core developer for the past 15 years. Thoughts on channeling Guido, stability, hyper-generalization, Sturgeon's law and egativity, evaluating submissions, inability to predict the future, user centric design, treating mature code differently, believing in or doubting your predecessors, lever arguments and completers, problems of too many choices, implementation details, how much to document, needs of the standard library versus the needs of users, code that is dead on arrival and how PyPI changed everything, orthogonality, importance of skill and expertise, consistency and foolish consistency, optimization and premature optimization, security tautologies, argument ordering, operator abuse, avoiding race to implementation (we can all write working code), the naming of parts, economy of force and complexity balance, feature creep, developing for others, over reliance on Guido, great minds don't think alike, preference for compactness,   and aversion to deprecations. What it means to be completely reliant on long term unpaid volunteers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Raymond has been a prolific contributor to the CPython project for over a decade, having implemented and maintained many of Python's great features. He has been instrumental in modules like bisect, collections, decimal, functools, itertools, math, random, with types like namedtuple, sets, dictionaries, and in many other places around the codebase. He has contributed to the modification of nearly 90,000 lines of code in the CPython repository, and has made over 160 changes in the PEP repository.&lt;/p&gt;
&lt;p&gt;Raymond has also served as a director of the Python Software Foundation, and has mentored many people over the years on their contributions to the python-dev community. He's also well known for his contributions to the Python Cookbook, and shares many pieces of Python wisdom on Twitter. He received the Distinguished Service Award at PyCon 2014 for his exceptional contributions to the python community.
​
&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/raymond-hettinger-keynote-core-developer-world"&gt;https://speakerdeck.com/pybay2016/raymond-hettinger-keynote-core-developer-world&lt;/a&gt;
​&lt;/p&gt;
</summary></entry><entry><title>Breaking The Rules</title><link href="https://pyvideo.org/pybay-2016/breaking-the-rules.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Jessica McKellar</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/breaking-the-rules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote at PyBay 2016&lt;/p&gt;
&lt;p&gt;Bio
Jessica McKellar is an American software developer, engineering manager, and author. Since 2012, she has been a director of the Python Software Foundation. In 2013, McKellar won the O'Reilly Open Source Award for her contributions to Python. She is a contributor to Twisted, a networking framework for Python.She is a director of engineering and the chief of staff to the VP of Engineering at Dropbox.
McKellar is the co-author of two books about computer programming, both for O'Reilly Media: &amp;quot;Twisted Network Programming Essentials&amp;quot; (2013) and &amp;quot;Linux Device Drivers, 4th Edition&amp;quot; (upcoming)&lt;/p&gt;
</summary></entry><entry><title>Building a Tic-Tac-Toe Two-Player Game using Tornado over Websockets</title><link href="https://pyvideo.org/pybay-2016/building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Ramesh Sampath</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build a Two-player game using Python Tornado web framework. We will be using websockets to make the app realtime.
​
Abstract
We will live code and learn how to build a real-time game app using Tornado web framework and websockets. Through this app, we will learn how to write an web app using Tornado web framework (&lt;a class="reference external" href="http://www.tornadoweb.org/"&gt;http://www.tornadoweb.org/&lt;/a&gt;), and how to communicate over websockets. We will be building a Tic-Tac-Toe two-player game to learn about these concepts. A player can start a new game or accept a challenge from another player.&lt;/p&gt;
&lt;p&gt;When a player starts a new game, the app would create a new game channel, provide a handle to the channel that the player can send to his friend to join in and play. We will not be dealing with any authentication or logins to start a new game or to join an existing one. The goal is to show how easy it's to build an realtime app with Tornado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Ramesh loves building data products that blend visualization and machine learning. He mostly uses Flask / Tornado to create web apps, Pandas / Scikit-learn for build machine learning models and D3 for visualizations&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/ramesh-sampath-building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets"&gt;https://speakerdeck.com/pybay2016/ramesh-sampath-building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Caffe + Jupyter + Pandas It’s not rocket science, well sorta</title><link href="https://pyvideo.org/pybay-2016/caffe-jupyter-pandas-its-not-rocket-science-well-sorta.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Katherine Scott</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/caffe-jupyter-pandas-its-not-rocket-science-well-sorta.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will walk the users through the entire process of building a convolutional neural network for image classification. The process starts with a flask application to label your data, followed by characterizing, training, and evaluating the CNN using Pandas, Jupyter Notebooks, and Bokeh plots. Finally we show how the CNN can be deployed and used in real-world applications.
​
Abstract
Convolutional Neural Networks: they’re new, they’re big, they’re complex, they’re poorly documented and accordingly they are a little scary. At Planet we will image the entire earth every day, and to deliver that data to customers we need to analyze images without it ever being seen by human eyes. In this talk we’ll cover how to build, train, and characterize a neural net for image classification all from the comfort and safety of a Jupyter notebook. This talk will serve as a template for building and using your very own CNN.&lt;/p&gt;
&lt;p&gt;Bio
Katherine Scott is a senior software engineer at Planet working on image classification. Prior to planet Ms. Scott was the co-founder and CTO of Tempo Automation and a co-founder at Sight Machine.&lt;/p&gt;
</summary></entry><entry><title>Caravel - A data visualization</title><link href="https://pyvideo.org/pybay-2016/caravel-a-data-visualization.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Maxime Beauchemin</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/caravel-a-data-visualization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Airbnb developed Caravel to provide all employees with interactive access to data while minimizing friction. Caravel's main goal is to make it easy to slice, dice and visualize data. It empowers each and everyone to perform analytics at the speed of thought.
​
Abstract
Topics include:
* Intuitively visualizing datasets while filtering, pivoting, and changing views
* Creating and sharing simple dashboards
* Caravel's rich set of visualizations
* Caravel's extensible, high-granularity security/permission model allowing intricate rules on who can access individual features and the dataset
* Caravel's enterprise-ready authentication with integration with major authentication providers (database, OpenID, LDAP, OAuth, and REMOTE_USER through Flask AppBuilder)
* Caravel's simple semantic layer, allowing users to control how data sources are displayed in the UI by defining which fields should show up in which drop-down and which aggregation and function metrics are made available to the user
* Caravel’s deep integration with Druid
* Caravel’s integration with most RDBMS through SQLAlchemy
* How Javascript/Node/D3/React can cohabit and work well along with Python/Pypi/Flask&lt;/p&gt;
&lt;p&gt;Bio
Maxime Beauchemin works at Airbnb as part of the Data Tools team, developing open source products that reduce friction that help generating insight from data. He is the creator and a leading maintainer of Apache Airflow [incubating] (a workflow engine) and Caravel (a data visualization platform). Before Airbnb, Maxime worked at Facebook on computation frameworks around engagement and growth analytics, at Yahoo! on social properties analytics, and at Ubisoft as a data warehouse architect.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay/2016-maxime-beauchemin-caravel-a-data-visualization-exploration-and-dashboarding-platform"&gt;https://speakerdeck.com/pybay/2016-maxime-beauchemin-caravel-a-data-visualization-exploration-and-dashboarding-platform&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Deep Dive into Principal Components Analysis</title><link href="https://pyvideo.org/pybay-2016/deep-dive-into-principal-components-analysis.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Rumman Chowdhury</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/deep-dive-into-principal-components-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Commonly used in image recognition, speech to text and text analysis, Principal Components Analysis (or PCA) separates the signal from the noise in your data and reduces your dimensionality so that meaningful analyses can be performed.
​
Abstract
PCA is vital for reducing high dimensional models with sparsity issues, without sacrificing the information contributed by each feature. In this talk, I will be explaining what happens under the hood during PCA, making the code and math accessible and interpretable.&lt;/p&gt;
&lt;p&gt;Bio
Rumman comes to data science from a quantitative social science background. Prior to joining Metis, she was a data scientist at Quotient Technology, where she used retailer transaction data to build an award-winning media targeting model. Her industry experience ranges from public policy, to economics, and consulting. Her prior clients include the World Bank, the Vera Institute of Justice, and the Los Angeles County Museum of the Arts. She holds two undergraduate degrees from MIT, a Masters in Quantitative Methods of the Social Sciences from Columbia, and she is currently finishing her Political Science PhD from the University of California, San Diego. Her dissertation uses machine learning techniques to determine whether single-industry towns have a broken political process. Her passion lies in teaching and learning from teaching. In her spare time, she teaches and practices yoga, reads comic books, and works on her podcast.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay/2016-rumman-chowdhury-deep-dive-into-principal-components-analysis"&gt;https://speakerdeck.com/pybay/2016-rumman-chowdhury-deep-dive-into-principal-components-analysis&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Explore Git internals using Python | Let's write `git log` in Python</title><link href="https://pyvideo.org/pybay-2016/explore-git-internals-using-python-lets-write-git-log-in-python.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Glen Jarvis</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/explore-git-internals-using-python-lets-write-git-log-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Git is a powerful tool for source control. It's often misunderstood and abused. Under the surface Git is an elegant and simple data structure. When you don't understand that data structure, you don't really understand Git. It is flexible enough to give you all the rope that you need to hang yourself in Git hell. However, if you understand it, you are released from Git hell.
​
Abstract
In this talk, we start with a simple explanation of the Git data structure on disk. We discuss where the local Git repo is stored: &lt;cite&gt;.git&lt;/cite&gt;. From there, we discuss the &lt;cite&gt;config, `HEAD&lt;/cite&gt;, &lt;cite&gt;refs/heads&lt;/cite&gt;, and &lt;cite&gt;objects&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;We use Python to read those data structures and reconstruct a &lt;cite&gt;git log&lt;/cite&gt; command for any arbitrary git repository. When finished, we should have our own working command that does the same thing as &lt;cite&gt;git log&lt;/cite&gt; for any arbitrary repository, on any branch. We'll simply start at &lt;cite&gt;HEAD&lt;/cite&gt; and work our way down the data structure.&lt;/p&gt;
&lt;p&gt;Although it is not &lt;em&gt;useful&lt;/em&gt; to have a Python version of Git, it is &lt;em&gt;fun&lt;/em&gt;. Also, this exploration helps you understand the Git tool on a much deeper level. When you can program something, you can understand it. And, understanding Git helps you be a better developer and collaborator.&lt;/p&gt;
&lt;p&gt;Bio
Glen Jarvis has been programming Python for over 8 years and has been programming in different languages for longer. He has been certified in Linux/Unix administration by UC-Berkeley. He gained the highest certification available for Informix DBAs. He is also certified in MongoDB as Developer and Administrator. He has worked for companies such as IBM, UC-Berkeley, Sprint and Silicon Valley Start-ups. He has worked in the fields of Databases, DataScience, Bioinformatics and Web Technologies.&lt;/p&gt;
</summary></entry><entry><title>Exploring complex data w/ Elasticsearch &amp; Python</title><link href="https://pyvideo.org/pybay-2016/exploring-complex-data-w-elasticsearch-python.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Simon Willison</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/exploring-complex-data-w-elasticsearch-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Elasticsearch is a powerful open-source search and analytics engine with applications that stretch far beyond adding text-based search to a website. Learn how Elasticsearch can be used with Python and Django to crunch through complex datasets and quickly build powerful interfaces for exploring information.&lt;/p&gt;
&lt;p&gt;Bio
Simon Willison is an engineering director at Eventbrite, a Bay Area ticketing company working to bring the world together through live experiences. Simon works as part of a small product research and prototyping lab helping develop new concepts for Eventbrite products and features. Simon joined Eventbrite through their acquisition of Lanyrd, a Y Combinator funded company he co-founded in 2010. He is a co-creator of the Django Web Framework.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/simon-willison-exploring-complex-data-with-elasticsearch-and-python"&gt;https://speakerdeck.com/pybay2016/simon-willison-exploring-complex-data-with-elasticsearch-and-python&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Flask for Fun and Profit</title><link href="https://pyvideo.org/pybay-2016/flask-for-fun-and-profit.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/flask-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about building small and large projects with Flask in ways you probably did not see yet.
​
Abstract
This talk explores how you can build applications and APIs with Flask step by step by being easy to test and scale to larger and more complex scenarios.&lt;/p&gt;
&lt;p&gt;The talk will also go a bit into the history of some design decisions in Flask and what works well and in which areas you might want to mix it with other technologies for better results.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/armin-ronacher-flask-for-fun-and-profit"&gt;https://speakerdeck.com/pybay2016/armin-ronacher-flask-for-fun-and-profit&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Interactive Data Visualization Applications for the Browser w/ Bokeh</title><link href="https://pyvideo.org/pybay-2016/interactive-data-visualization-applications-for-the-browser-w-bokeh.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Bryan Van de Ven</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/interactive-data-visualization-applications-for-the-browser-w-bokeh.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bokeh (&lt;a class="reference external" href="http://bokeh.pydata.org/en/latest"&gt;http://bokeh.pydata.org/en/latest&lt;/a&gt;) provides a compelling open-source platform for creating interactive data visualization applications in the browser. This talk will demonstrate Bokeh's newest capabilities: the second generation Bokeh server, APIs for streaming data, new hooks for user-extensibility (e.g. to easily leverage JavaScript 3D plot libraries), new features for GIS, and more.
​
Abstract
With support from the DARPA XDATA Initiative, commercial engagements, and contributions from over 150 community members, the Bokeh visualization library (&lt;a class="reference external" href="http://bokeh.pydata.org"&gt;http://bokeh.pydata.org&lt;/a&gt;) has grown into a large, successful open source project with heavy interest and following on GitHub (&lt;a class="reference external" href="https://github.com/bokeh/bokeh"&gt;https://github.com/bokeh/bokeh&lt;/a&gt;). The principal goals of Bokeh are to provide capability to developers and domain experts: easily create and share interactive, versatile, and powerful visualizations that extract insight from data sets that may be remote, large, or streaming. Bokeh provides a platform for anyone to create interactive data and visualization applications in the browser for themselves, their colleagues, or for a wider audience.&lt;/p&gt;
&lt;p&gt;This talk will give a quick overview of recent developments, and demonstrate some of the newest capabilities of Bokeh including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bokeh applications and the second generation Bokeh server (that is more performant, better documented, and much simpler to use and deploy)&lt;/li&gt;
&lt;li&gt;APIs for streaming data (both in the notebook and Bokeh applications)&lt;/li&gt;
&lt;li&gt;The ability to extend Bokeh with your own custom functionality (for example to create 3D plots or network graphs)&lt;/li&gt;
&lt;li&gt;Recent GIS features such as support for GeoJSON and tiled map data sources&lt;/li&gt;
&lt;li&gt;The new Datashader library that can be used together with Bokeh to visualize billions of data points.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally the talk will discuss near-term plans for the project, it's governance, and community development.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/bryan-van-de-ven-interactive-data-visualization-applications-for-the-browser-with-bokeh"&gt;https://speakerdeck.com/pybay2016/bryan-van-de-ven-interactive-data-visualization-applications-for-the-browser-with-bokeh&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introduction to HTTPS: A Comedy of Errors</title><link href="https://pyvideo.org/pybay-2016/introduction-to-https-a-comedy-of-errors.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/introduction-to-https-a-comedy-of-errors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given recent increases in hostile attacks on internet services and large scale surveillance operations by certain unnamed government organizations, security in our software is becoming ever more important. We'll give you an idea of how modern crypto works in web services and clients, look at some of the common flaws in these crypto implementations, and discuss recent developments in TLS.
​
Abstract
In this talk I'll explain what happens behind the scenes when we try to establish a secure connection to a web site.
I'll cover the common security flaws in popular TLS implementations like OpenSSL, and show how these issues can be avoided if we have a well-designed TLS implementation in a high level language like Python.&lt;/p&gt;
&lt;p&gt;Finally, I'll demonstrate and discuss how the API design of OpenSSL leads to application bugs, and a lack of abstract secure defaults leads to insecure applications.&lt;/p&gt;
&lt;p&gt;Bio
Ashwini is a Software Engineer at Eventbrite, and an open source developer living in San Francisco. In the past, she has worked on a pure Python TLS implementation through the Stripe Open Source Retreat, an asynchronous event-driven networking framework - Twisted, and a PHP implementation in RPython called HippyVM. She also served as a Director of the Python Software Foundation last year.&lt;/p&gt;
</summary></entry><entry><title>Magic Considered Harmful?</title><link href="https://pyvideo.org/pybay-2016/magic-considered-harmful.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Adam Hitchcock</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/magic-considered-harmful.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We talk about magic tongue-in-cheek and often with a negative connotation.  This talk will look to clearly define magic and answer the question of &amp;quot;when is magic harmful?&amp;quot;
​
Abstract
This talk will look into some libraries we use (and love!) and the magic that powers them.
​
We will look at how things like namedtuple, Django models, and the Flask request object are implemented. We will look at how each of these libraries encapsulates complexity. At the end of the talk (hopefully) we will understand more about the internals of these libraries and have new tools to gauge if magic should be considered harmful for yourself.&lt;/p&gt;
&lt;p&gt;Bio
Adam is a tech lead at Disqus and advocate for service-oriented architecture. He has given several talks at Pycon and EuroPycon on the high scale systems that Disqus has shipped to production. In his free time he swing dances and has way too many apps on his phone. Originally from Michigan he currently resides in San Francisco.&lt;/p&gt;
</summary></entry><entry><title>One Pykid at a time</title><link href="https://pyvideo.org/pybay-2016/one-pykid-at-a-time.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Meenal Pant</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/one-pykid-at-a-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you are a Pythonista, an educator, STEM supporter, love free software and a parent then you should attend this talk. This talk brings home the importance of brining STEM and computing education to the K-12 school children early and in a timely manner.
​
Abstract
Python is a language that makes learning programming easy and can set the foundation for our children to go on and take STEM coursework or use their knowledge of computing in other subject areas when its time for graduate school. Our school system currently has a gap in their curriculum when it comes to computing and learning how to code. pykids is a voluntary organization that is aiming to fill that gap by providing easy to use learning resources. pykids is also encouraging classroom learning by creating a space for local meetups and volunteer classes that run through the curriculum.&lt;/p&gt;
&lt;p&gt;The pykids set up today includes the following:
- A blog/website where students/instructors register and share ideas
- A jupyter server that allows running notebooks on the fly
- Downloadable Notebooks created for K3-High School students (WIP)
- Teaching material for K-3 students
- Volunteers&lt;/p&gt;
&lt;p&gt;All a student needs is a laptop and an internet connection to start learning Python!&lt;/p&gt;
&lt;p&gt;Bio
Meenal Pant is a mom, long time programmer and yes a Pythonista!. She has worked in both the industry and academic /research institutes and therefore is keen to “build a bond” between technology and education. She is a poster presenter and speaker (education summit/lightening talks) in the past few PyCons - the most recent being PyCon2016. She is actively involved in the STEM education via her workplace and also personally in her kid’s schools.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/meenal-pant-one-pykid-at-a-time"&gt;https://speakerdeck.com/pybay2016/meenal-pant-one-pykid-at-a-time&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Project Jupyter</title><link href="https://pyvideo.org/pybay-2016/project-jupyter.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Jamie Whitacre</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/project-jupyter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview of Project Jupyter.
​
Abstract
Jupyter is an open source, language agnostic, interactive computing platform used in scientific computing and data science that provides multiple tools tailored for different workflows, from traditional terminal-style control to the popular web-based Notebook. The Jupyter Notebook is a web application that allows users to create and share documents that contain live code, equations, visualizations and explanatory text. Jupyter is the evolution of the original ideas in the IPython interactive shell, as we generalized them into a language agnostic protocol that has now been implemented in over 50 separate languages.&lt;/p&gt;
&lt;p&gt;One project within the Jupyter ecosystem, JupyterHub, is a multi-user environment for Jupyter Notebooks that runs off a central server and that can be used to serve Notebooks to classes of students, corporate workgroups, or scientific research groups. JupyterHub is the backbone for UC Berkeley’s new Undergraduate Data Science Education Program, an ambitious program that aims to provide every freshman with core knowledge and skills in data science.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss and demonstrate the many development activities underway at Project Jupyter, including IPython 5.0, JupyterHub, and JupyterLab, and how these tools are used in data science, industry, scientific research, and education.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Jamie Whitacre is the technical project manager for Project Jupyter, an open-source scientific computing and data science ecosystem used extensively in academia and industry. Project Jupyter operates out of the Berkeley Institute for Data Science (BIDS) at UC Berkeley. Matthias Bussonnier is a postdoctoral researcher at BIDS and a core developer for Jupyter and IPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/jamie-whitacre-project-jupyter"&gt;https://speakerdeck.com/pybay2016/jamie-whitacre-project-jupyter&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python 103: Memory Model &amp; Best Practices</title><link href="https://pyvideo.org/pybay-2016/python-103-memory-model-best-practices.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/python-103-memory-model-best-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's a growing crowd of Python users who don't consider themselves beginners anymore. However some users at this stage discover odd behavior that's hard to explain. Why doesn't code behave like it should? Why doesn't &amp;quot;correct&amp;quot; code execute correctly? We'll focus on Python's object &amp;amp; memory model, addressing these issues directly. Let's empower attendees to not create these bugs to begin with!
​
Abstract
In &amp;quot;Python 101,&amp;quot; you learned basic Python syntax. In &amp;quot;Python 102&amp;quot; (or equivalent in experience), you went further, exploring Python more deeply -- creating/using classes, decorators, files, other standard library or 3rd-party modules/packages -- and graduated from being purely a beginner. Because Python has been around the block for quite awhile now, there is a continuously growing number of &amp;quot;Python 103&amp;quot; programmers out there. Many are no longer new to the language, however, they have run into various issues, bugs, or odd behavior in their code that is difficult to explain. It's time to take a closer look. This is an interactive best practices talk, focusing on how Python objects, references, and the memory model work as well as thinking about performance. Knowing more about how the interpreter works under the covers, including the relationship between data objects and memory management, will make you a much more effective Python programmer, and the (main) goal with the knowledge imparted in this talk is to empower developers to not (inadvertently) create certain classes of bugs in their code to begin with! All you need to bring is the desire to learn more about the interpreter to take your Python skills to the next level.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Wesley J Chun is the author of the bestselling Core Python titles and the Python Fundamentals Live Lessons companion video. He is coauthor of Python Web Development with Django (withdjango.com), and has written for Linux Journal, CNET, and InformIT. Wesley is an architect and Developer Advocate at Google.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/wesley-chun-python-103-memory-model-and-best-practices"&gt;https://speakerdeck.com/pybay2016/wesley-chun-python-103-memory-model-and-best-practices&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Python Deployment Albatross</title><link href="https://pyvideo.org/pybay-2016/the-python-deployment-albatross.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Cindy Sridharan</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/the-python-deployment-albatross.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python deployments can be notoriously tricky - a lot more trickier than they need to be. This talk will briefly outline the history of Python deployments, explore in depth the current landscape and will shed light on the variety of tools and techniques available to deploy Python applications, from the popular to the trendy/state-of-the-art to the esoteric and my experiences with them.
​
Abstract
To understand the current state of packaging, distribution and deployment of Python artifacts, it's important to understand the architecture and internals of commonly used tools such as distutils, setuptools, eggs, pip, PyPI, virtualenv, wheels and building compiled extensions.&lt;/p&gt;
&lt;p&gt;In the recent few years, an interesting development from Twitter has been PEX - P(ython) EX(ecutable). PEX is famously being used at companies like Twitter, Square and LinkedIn to deploy &lt;em&gt;all&lt;/em&gt; applications. This talk will chart our history of using PEX (along with the Pants build system) at imgix over the course of the last 2 years.&lt;/p&gt;
&lt;p&gt;No talk on python packaging and distribution will be complete without mentioning the D word - yes, you guessed it right - Docker. This talk will explore the current state of Python deployment using Docker/containers as well as several anti patterns. The talk will highlight the challenges containerization calls for and why it might not be the right solution for many use cases. I'll be drawing on my experience running a Dockerized Tornado application in production.&lt;/p&gt;
&lt;p&gt;Lastly, the talk will explore Nix - a powerful open source package manager for Linux and other Unix systems that makes package management reliable and reproducible. The talk will detail some of our experience with Nix so far as well as some of the issues we ran into, and whether Nix is a viable alternative to the existing tools in the ecosystem.&lt;/p&gt;
</summary></entry><entry><title>Unspeakably Evil Hacks in Service of Marginally Improved Syntax</title><link href="https://pyvideo.org/pybay-2016/unspeakably-evil-hacks-in-service-of-marginally-improved-syntax.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Scott Sanderson</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/unspeakably-evil-hacks-in-service-of-marginally-improved-syntax.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of Python's strengths as a dynamic language is its suite of powerful metaprogramming tools. What happens, however, when you want to move beyond the tools provided by &amp;quot;traditional&amp;quot; metaprogramming techniques? This talk will take the audience on a brief tour of projects and techniques that stretch the boundaries of what's possible in Python.
​
Abstract
In this talk, we provide an introduction to several lesser-known techniques for hacking extending the functionality of Python. Along the way, we consider the costs (in clarity, portability, or otherwise) of employing nonstandard tools to work around limitations of Python.&lt;/p&gt;
&lt;p&gt;Topics may include:
- Runtime Bytecode Rewriting (&lt;a class="reference external" href="https://github.com/llllllllll/codetransformer"&gt;https://github.com/llllllllll/codetransformer&lt;/a&gt;)
- Hooking the Lexer with Custom Encodings (&lt;a class="reference external" href="https://github.com/dropbox/pyxl"&gt;https://github.com/dropbox/pyxl&lt;/a&gt;)
- Import Hooks (&lt;a class="reference external" href="https://github.com/hylang/hy"&gt;https://github.com/hylang/hy&lt;/a&gt;, &lt;a class="reference external" href="http://cython.org/"&gt;http://cython.org/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Scott Sanderson is an engineer at Quantopian, where he is responsible for the design of Quantopian's backtesting and research APIs. He is a core developer on the open source backtesting library Zipline, and he is a contributor to several projects in the PyData ecosystem, including IPython and the Jupyter Notebook. Scott graduated from Williams College in 2013 with bachelor's degrees in Mathematics and Philosophy.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/scott-sanderson-unspeakably-evil-hacks-in-service-of-marginally-improved-syntax-compile-time-python-programming"&gt;https://speakerdeck.com/pybay2016/scott-sanderson-unspeakably-evil-hacks-in-service-of-marginally-improved-syntax-compile-time-python-programming&lt;/a&gt;
​&lt;/p&gt;
</summary></entry><entry><title>What to do when your data is large, but not big</title><link href="https://pyvideo.org/pybay-2016/what-to-do-when-your-data-is-large-but-not-big.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Dillon Niederhut</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/what-to-do-when-your-data-is-large-but-not-big.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will present strategies in Python for handling data that is too large to fit in memory and/or too slow to process in one thread, but small enough to still fit in one machine.
​
Abstract
Unless you work at a large internet company, you probably don't have BIG data, but you might have LARGE data. Large data consume an unacceptable amount of time and memory when medium strategies are used, but also incur unnecessary financial and latency costs when big strategies are used. Two basic strategies for handling large data, chunking and parallelization, will be discussed with live coded examples in Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I'm a research scientist currently living in the Bay Area and working in neuroethology, human evolution, and natural language processing. I currently work at D-Lab, where I help researchers apply advances in computation to their research paradigms.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/dillon-niederhut-what-to-do-when-your-data-is-large-but-not-big"&gt;https://speakerdeck.com/pybay2016/dillon-niederhut-what-to-do-when-your-data-is-large-but-not-big&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Xonsh - put some Python in your Shell</title><link href="https://pyvideo.org/pybay-2016/xonsh-put-some-python-in-your-shell.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Matthias Bussonnier</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/xonsh-put-some-python-in-your-shell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Xonsh is a Python-ish, BASHwards-looking shell language and command prompt. The language is a superset of Python 3.4+ with additional support for the best parts of shells that you are used to, such as Bash, zsh, fish, and IPython. It works on all major systems including Linux, Mac OSX, and Windows. Xonsh is meant for the daily use of experts and novices alike.
​
Abstract
Programmers spend their time at a command line interface often sticking to default shell. A lot of progress have been made for the friendliness, usability, extensibility of shell. We thus introduce Xonsh which attempt to bring the command line shell to the 21st century.&lt;/p&gt;
&lt;p&gt;Xonsh is general purpose shell that combines Python and the best features of Bash, zsh, IPython and fish. Written in Python and relying only the standard library and PLY, the xonsh language is a strict superset of Python that compiles to a Python AST. The shell can provides exciting features: rich history, tab completion from bash and man pages, syntax highlighting, auto-suggestion, foreign-function aliases and more!&lt;/p&gt;
&lt;p&gt;Wether you are a novice who is looking to use use the command line, or an Python expert Xonsh is made for you.&lt;/p&gt;
&lt;p&gt;Because xonsh is Python, it automatically has all the available python ecosystem at your fingertip. Xonsh makes meshing and intertwining python code with command-line interfaces as seamless as possible. Have you ever wanted to use regular expressions to glob files? No problem! Ever wanted to curl a remote
resource right into &lt;cite&gt;json.loads()&lt;/cite&gt;? Now you can. Do you not want to leave the command line to use pandas, NLTK or add two numbers together? No big deal.&lt;/p&gt;
&lt;p&gt;The xonsh homepage is at &lt;a class="reference external" href="https://xon.sh"&gt;https://xon.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I am a PostDoc at UC Berkeley Institute for Data science, and have been a core Developer of IPython and Jupyter for a couple of years. With a background in Physics I spend most of my time developing tools for the scientific community and for education as well as promoting Python 3.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/matthias-bussonnier-xonsh-put-some-python-in-your-shell"&gt;https://speakerdeck.com/pybay2016/matthias-bussonnier-xonsh-put-some-python-in-your-shell&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>