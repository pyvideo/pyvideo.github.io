<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nickolas-grigoriadis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-12T00:00:00+00:00</updated><entry><title>Developing good ORMs is HARD!</title><link href="https://pyvideo.org/pycon-za-2018/developing-good-orms-is-hard.html" rel="alternate"></link><published>2018-10-12T00:00:00+00:00</published><updated>2018-10-12T00:00:00+00:00</updated><author><name>Nickolas Grigoriadis</name></author><id>tag:pyvideo.org,2018-10-12:pycon-za-2018/developing-good-orms-is-hard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As with many people, I was looking for an ORM for &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; Python.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Whilst &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; is a great framework for I/O bound applications,
there isn't any mature, recommendable ORMs for it.&lt;/div&gt;
&lt;div class="line"&gt;Many attempts to wrap an existing sync Python ORM (such as peewee or
sqlAlchemy) by having them run in a separate thread, and then dealing
with synchronising between the event loop and threads got abandoned,
due to a myriad of problems, including performance, correctness and
blocking.&lt;/div&gt;
&lt;div class="line"&gt;Other ORMs were abandoned before they worked, or had so many layers of
abstraction that I feared to touch it.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Then I came across &lt;a class="reference external" href="http://tortoise-orm.readthedocs.io/"&gt;Tortoise
ORM&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;It had a simple design. (Inspired by the Django ORM syntax)&lt;/div&gt;
&lt;div class="line"&gt;It actually worked when I tried it out.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So I decided to jump in, and help with development.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this talk I'll talk about my experience of being on a development
team on an ORM.&lt;/div&gt;
&lt;div class="line"&gt;There is a reason there are so few successful ORM projects out there.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Developing good ORMs are &lt;strong&gt;HARD&lt;/strong&gt;&lt;/p&gt;
</summary></entry><entry><title>How Python helps writing documentation less painful</title><link href="https://pyvideo.org/pycon-za-2014/how-python-helps-writing-documentation-less-painf.html" rel="alternate"></link><published>2014-10-03T00:00:00+00:00</published><updated>2014-10-03T00:00:00+00:00</updated><author><name>Nickolas Grigoriadis</name></author><id>tag:pyvideo.org,2014-10-03:pycon-za-2014/how-python-helps-writing-documentation-less-painf.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We all know writing documentation is an arduous exercise. We all know
how useless and frustrating out-of-date or just plain incorrect
documentation is. In this talk I'd like to demonstrate how Python can
help make writing documentation, keeping it up-to-date and verifying its
validity. It can be surprising what happens when other people discover
your little-but-well-documented API. Python has several built-in
concepts and standard tools to help making this easier, such as
docstrings, help(), Sphinx, Sphinx plugins, Doctests and generating
documentation off tests themselves. I'll focus on not only using Sphinx
as a tool, but also on how to structure your application/library/tool so
as to make writing accurate documentation as simple as possible.&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2014"></category></entry><entry><title>Taking back control of your code</title><link href="https://pyvideo.org/pycon-za-2017/taking-back-control-of-your-code.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Nickolas Grigoriadis</name></author><id>tag:pyvideo.org,2017-10-06:pycon-za-2017/taking-back-control-of-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing your code is like managing anything else.&lt;/p&gt;
</summary></entry></feed>