<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 Jun 2015 00:00:00 +0000</lastBuildDate><item><title>Accelerating Scientific Code with Numba</title><link>https://pyvideo.org/pydata-london-2015/accelerating-scientific-code-with-numba.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Numba is a just-in-time Python compiler that can be used to speed up
a wide range of scientific and other numerical applications. This
tutorial is intended to provide an introduction to using Numba, and
ways of understanding of the performance of Numba-compiled code.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will provide an overview of
&lt;a class="reference external" href="http://numba.pydata.org/"&gt;Numba&lt;/a&gt;, a just-in-time Python compiler
focused on numerical computing. Originally aimed at computations using
Numpy arrays, it has been expanded to work with other Python types and
can speed up computations that require more than just fast linear
algebra operations. Numba targets both CPUs and CUDA GPUs by generating
native code using the LLVM compiler infrastructure.&lt;/p&gt;
&lt;p&gt;As there are different components of Numba that can be applied in
different circumstances, this introduction aims to span the breadth of
use cases rather than focusing on a single area in depth. This is in
order to enable the selection of appropriate portions of code to use
with Numba, and the correct selection of Numba's facilities in each
case.&lt;/p&gt;
&lt;p&gt;Areas that will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An overview of the type system, with a view to understanding and
overcoming typing issues,&lt;/li&gt;
&lt;li&gt;Compilation of Python functions using the &lt;tt class="docutils literal"&gt;&amp;#64;jit&lt;/tt&gt; decorator,&lt;/li&gt;
&lt;li&gt;Creation of Numpy ufuncs in Python using the &lt;tt class="docutils literal"&gt;&amp;#64;vectorize&lt;/tt&gt;
decorator,&lt;/li&gt;
&lt;li&gt;Understanding and measuring the performance of Numba-compiled code,&lt;/li&gt;
&lt;li&gt;Debugging facilities in Numba.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is intended for an audience of programmers and data
scientists who have an interest in speeding up numerical routines, and
people with a general interest in high-performance Python. In order to
get started quickly, it is recommended that attendees install the
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda Python
distribution&lt;/a&gt; or
&lt;a class="reference external" href="http://conda.pydata.org/miniconda.html"&gt;Miniconda&lt;/a&gt;, as this provides
a robust mechanism for installing Numba on Linux, Mac OS X and Windows.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Markall</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pydata-london-2015/accelerating-scientific-code-with-numba.html</guid><category>tutorial</category></item></channel></rss>