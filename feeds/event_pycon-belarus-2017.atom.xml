<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-belarus-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-02-04T00:00:00+00:00</updated><entry><title>Big open source project development with Python (RU)</title><link href="https://pyvideo.org/pycon-belarus-2017/big-open-source-project-development-with-python-ru.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Ivan Kolodyazhny</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/big-open-source-project-development-with-python-ru.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;«I'll describe how to develop big open source applications with Python.
I'm OpenStack Cinder Core Reviewer and will talk about community
collaboration, guidelines, code reviews. I'm going to discuss how can we
use and support open source enterprise-grade applications in Python»&lt;/p&gt;
</summary></entry><entry><title>Binary Python: Introducing Native Code</title><link href="https://pyvideo.org/pycon-belarus-2017/binary-python-introducing-native-code.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/binary-python-introducing-native-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When Python becomes a performance bottleneck or you need to work with
C/C++/Rust libraries various new problems appear that need solving. This
is the experience I made at Sentry and my open source projects of how to
deal with these issues.&lt;/p&gt;
</summary></entry><entry><title>Crash test of Django ORM</title><link href="https://pyvideo.org/pycon-belarus-2017/crash-test-of-django-orm.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/crash-test-of-django-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is swimming in articles and books about Django and Django ORM
itself. All this sources cover only basic use cases of Django ORM
comparing to real world examples. This talk is dedicated to the
proposition to crash test Django ORM 80% of functionalities in 20% of
the time. Also I’m going to show the important features and capabilities
of Django ORM compare to most of SQL features. Traditionally, ORM is
presented in a “bottom-up” fashion, but I would like to propose
approach, on the other hand, is “top-down”. We begin by identifying a
rather short list of standard questions, or precisely types of
questions, that are often asked of relations databases. We then show how
these standard questions are posted in Django ORM, introducing and
motivating the use of its capabilities and features as they become
relevant.&lt;/p&gt;
</summary></entry><entry><title>Dynamic concept space analysis</title><link href="https://pyvideo.org/pycon-belarus-2017/dynamic-concept-space-analysis.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Oles Petriv</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/dynamic-concept-space-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Векторые репрезентации слов – мощный инструмент для изучения
закономерностей языка, который привел к множеству прорывов в сфере
natural language processing. Возможность измерять семантическую близость
слов позволяет не только конструировать лучшие модели языка, но и
отслеживать изменения смысла слов во времени. Я покажу результаты
некоторых экспериментов с динамическими векторными моделями английского
и русского языков, трехмерные визуализации макроструктуры якыка,
траектории движения слов и кластеров слов за последние 70 лет, опишу
процес создания временных датасетов для языков, конструкции векторных
репрезентаций с помощю нейронных сетей, инструментарий для анализа
движения векторов слов и уменьшения размерности модели языка до трех
измерений, а также создания интерактивных визуализаций языка и
семантических облаков Википедии.&lt;/p&gt;
</summary></entry><entry><title>Elastic Python - the what and why of the python clients for elasticsearch</title><link href="https://pyvideo.org/pycon-belarus-2017/elastic-python-the-what-and-why-of-the-python-clients-for-elasticsearch.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/elastic-python-the-what-and-why-of-the-python-clients-for-elasticsearch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Elasticsearch is an open source datastore, in this talk we will explore
the official python clients - their design philosophy as well as history
and future plans.&lt;/p&gt;
</summary></entry><entry><title>Engineering an Open Source Company</title><link href="https://pyvideo.org/pycon-belarus-2017/engineering-an-open-source-company.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/engineering-an-open-source-company.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As software engineers we're fundamentally builders. Whether its for
business or just as a hobby, we set out to solve problems through code.
Sentry is another story of that simple idea, but one that has continued
over the better part of a decade. We'll talk about how Sentry was
started as an unambitious side project and grew into the open source,
venture-backed business it is today. Additionally we'll cover what it's
taken to build a company as an extremely technical software engineer,
including lessons learned along the way.&lt;/p&gt;
</summary></entry><entry><title>Эволюция Python-экосистемы для Data Science</title><link href="https://pyvideo.org/pycon-belarus-2017/evoliutsiia-python-ekosistemy-dlia-data-science.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Denis Pirshtuk</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/evoliutsiia-python-ekosistemy-dlia-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;В момент моего первого знакомства с машинным обучением около 5 лет назад
большинство исследователей предпочитали узкоспециализированный R, но но
экосистема Python уже вела активную борьбу за место под солнцем. И
буквально через год на моих глазах был стремительно достигнут паритет
мнений, особенно за счет data scientist-ов, непосредственно вовлеченных
в промышленную разработку. С тех пор в экосистеме Python произошли
гигантские изменения. Мы рассмотрим куда движется машинное обучение как
наука и как инновационная прикладная область в целом, какие новые
технические потребности возникли в связи с этим у
исследователей-разработчиков за последнее время и как это отразилось на
развитии различных Python-библиотек.&lt;/p&gt;
</summary></entry><entry><title>Fully asynchronous queue solution with Kafka</title><link href="https://pyvideo.org/pycon-belarus-2017/fully-asynchronous-queue-solution-with-kafka.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Ondřej Veselý</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/fully-asynchronous-queue-solution-with-kafka.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Showcase: Let's say we want to have an API endpoint which saves data
stream with very variable flow to Postgresql. We'll use Kafka queue and
various async modules like asyncio, aiokafka and aiopg with Python 3.6
syntax sugar. Based on real-case scenario&lt;/p&gt;
</summary></entry><entry><title>Going global with Python</title><link href="https://pyvideo.org/pycon-belarus-2017/going-global-with-python.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Konstantinos Koukopoulos</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/going-global-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most people in the world don’t speak English, and are more comfortable
using software in their native language. Yet around the world software
is usually produced with English text by default. This weird situation
might seem normal if you think of Software Localization in terms of
string freezes, content handoffs and the emailing of spreadsheets with
content strings. Can it be different? Can translation work follow the
pace of today’s software delivery pipelines, and join in on the
continuous delivery party? In this talk, we will discuss software
localization and some ways that teams can improve their localization
processes, from the personal perspective of a Python dev team based in
Greece. What challenges did we face and what did we learn while building
our own web-based localization automation platform using Django and
Python?&lt;/p&gt;
</summary></entry><entry><title>Когда приедет ваш водитель?</title><link href="https://pyvideo.org/pycon-belarus-2017/kogda-priedet-vash-voditel.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Arseny Kravchenko</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/kogda-priedet-vash-voditel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Обзор проблемы предсказания времени прибытия автомобиля из точки А в
точку B.&lt;/p&gt;
</summary></entry><entry><title>Организация воспроизводимого процесса обучения Machine Learning моделей</title><link href="https://pyvideo.org/pycon-belarus-2017/organizatsiia-vosproizvodimogo-protsessa-obucheniia-machine-learning-modelei.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Denis Dus</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/organizatsiia-vosproizvodimogo-protsessa-obucheniia-machine-learning-modelei.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Одной из технических особенностей промышленной Data Science-разработки
является высокая необходимость организации стабильного пайплайна для
обучения и тестирования моделей, который будет включать в себя все
необходимые шаги на пути от &amp;quot;Raw Data&amp;quot; до &amp;quot;Model Deploy&amp;quot;. Важно
обеспечить неизменность входных данных в процессе экспериментов, уметь
разрешать зависимости промежуточных подзадач друг от друга, иметь
средства мониторинга за выполением, гарантировать сигнализацию о
произошедших ошибках и их обработку, иметь (в идеале) возможность
перезапускать pipeline с любой промежуточной точки в случае какого-либо
отказа, а также многое другое. Но главное - это то, что всё это нужно
уметь делать прозрачным, понятным и удобным для machine learning
инженера способом. В рамках доклада будет рассмотрен опыт построения
такого рода end-to-end системы для обучения и тестирования моделей на
базе Python- фрэймворка для batch-обработки данных Luigi.&lt;/p&gt;
</summary></entry><entry><title>Правильные пчёлы</title><link href="https://pyvideo.org/pycon-belarus-2017/pravilnye-pchioly.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Artem Malyshev</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/pravilnye-pchioly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Доклад о многообещающем проекте BeeWare, который находится в стадии
интенсивной разработки. Если у вашей программы есть пользователи, то они
скорее всего хотят графический интерфейс. Причём хотят они его в родном
для платформы исполнении, будь то десктоп, браузер, телефон или умные
часы. Целью проекта BeeWare и является эта самая возможность написания
изоморфных приложений на Python, используя предоставленные системой
возможности. О том как и почему устроен проект и пойдёт речь.&lt;/p&gt;
</summary></entry><entry><title>Python + Raspberry Pi GPIO</title><link href="https://pyvideo.org/pycon-belarus-2017/python-raspberry-pi-gpio.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/python-raspberry-pi-gpio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Несколько лет тому назад Интернет лихорадила тяга к Raspberry Pi,
одноплатному компьютеру от одноименного фонда. Многие покупали себе
&amp;quot;малинку&amp;quot; или её многочисленные клоны, вертели в руках и в лучшем случае
делали из неё домашний сервер. Но мало кто догадывался, что загадочный
разъем на этой плате хранит в себе потенциал для чего-то большего: от
моргания светодиодами до управления сервомоторами, подключения внешних
дисплеев и многого другого. Имя ему - GPIO, и в своем докладе я расскажу
про существующие библиотеки на Python, покажу примеры работы и
постараюсь ответить на ваши вопросы.&lt;/p&gt;
</summary></entry><entry><title>Создание Open Source библиотек</title><link href="https://pyvideo.org/pycon-belarus-2017/sozdanie-open-source-bibliotek.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Andrew Svetlov</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/sozdanie-open-source-bibliotek.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Все используют &lt;em&gt;чужой&lt;/em&gt; открытый код для решения ежедневных задач. В ходе
доклада я поделюсь опытом по созданию более или менее популярных &lt;em&gt;своих&lt;/em&gt;
библиотек: - Описание разницы между коммерческим закрытым кодом и
открытым - Советы по организации кода, тестов, документации -
Рекомендации по работе с community - Некоторые трюки, упрощающие жизнь&lt;/p&gt;
</summary></entry><entry><title>Why Python 3.6 is faster than Python 3.5?</title><link href="https://pyvideo.org/pycon-belarus-2017/why-python-36-is-faster-than-python-35.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Igor Davydenko</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/why-python-36-is-faster-than-python-35.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Detailed review of changes &amp;amp; optimizations in Python 3.6, which
increased performance compared to Python 3.5 code. With examples and
explanations.&lt;/p&gt;
</summary></entry></feed>