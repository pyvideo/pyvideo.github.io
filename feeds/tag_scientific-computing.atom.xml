<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - scientific computing</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_scientific-computing.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Scegliere le armi per la battaglia del calcolo intensivo</title><link href="https://pyvideo.org/europython-2013/scegliere-le-armi-per-la-battaglia-del-calcolo-intensivo.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Enrico Franchi</name></author><id>tag:pyvideo.org,2013-07-05:/europython-2013/scegliere-le-armi-per-la-battaglia-del-calcolo-intensivo.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="bigdata"></category><category term="optimization"></category><category term="data-analysis"></category><category term="hpc"></category><category term="performance"></category><category term="scientific-computing"></category></entry><entry><title>An optimizing static Python compiler</title><link href="https://pyvideo.org/europython-2013/an-optimizing-static-python-compiler.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Kay Hayen</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/an-optimizing-static-python-compiler.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="performance"></category><category term="scientific-computing"></category><category term="optimization"></category><category term="open-source"></category><category term="python3"></category></entry><entry><title>Never get in a battle of bits without ammunition.</title><link href="https://pyvideo.org/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Enrico Franchi</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="cython"></category><category term="C/C++"></category><category term="nosql"></category><category term="mongodb"></category><category term="numeric"></category><category term="iPython"></category><category term="optimization"></category><category term="Algorithms"></category><category term="data-analysis"></category><category term="hpc"></category><category term="performance"></category><category term="scientific-computing"></category><category term="numpy"></category></entry><entry><title>Python on Mars</title><link href="https://pyvideo.org/europython-2013/python-on-mars.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/python-on-mars.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="pytango"></category><category term="space suit tango"></category><category term="tango"></category><category term="mars"></category><category term="scientific-computing"></category><category term="neural network"></category><category term="space suit"></category></entry><entry><title>Python su Marte</title><link href="https://pyvideo.org/europython-2013/python-su-marte.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/python-su-marte.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="tango"></category><category term="scientific-computing"></category><category term="pytango"></category><category term="neural network"></category><category term="tuta spaziale"></category></entry><entry><title>Solving Google Code Jam problems with PyPy - Part 1</title><link href="https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Solving Google Code Jam problems with PyPy - Part 2</title><link href="https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Coding competitions with PyPy aka "Python for the win!"</title><link href="https://pyvideo.org/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Introduction to machine learning using Python tools</title><link href="https://pyvideo.org/europython-2013/introduction-to-machine-learning-using-python-tools.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Satish Shankar</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/introduction-to-machine-learning-using-python-tools.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="statistics"></category><category term="machine-learning"></category><category term="datamining"></category><category term="Algorithms"></category><category term="data-analysis"></category><category term="scientific-computing"></category><category term="sklearn"></category></entry><entry><title>Programmazione competitiva con PyPy: "Vincere con Python!"</title><link href="https://pyvideo.org/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Simulare l'assetto e l'orbita di un satellite con SymPy e PyEphem</title><link href="https://pyvideo.org/europython-2013/simulare-lassetto-e-lorbita-di-un-satellite-con-sympy-e-pyephem.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Aureliana Barghini</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/simulare-lassetto-e-lorbita-di-un-satellite-con-sympy-e-pyephem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questa presentazione descriviamo la componente geometrica di un
simulatore di immagini da satellite; in sostanza si tratta di un sistema
che restituisce dove si trova (posizione) e dove guarda (assetto) un
satellite a partire da opportune informazioni di input. La soluzione
deve essere sufficientemente flessibile da accettare leggi …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questa presentazione descriviamo la componente geometrica di un
simulatore di immagini da satellite; in sostanza si tratta di un sistema
che restituisce dove si trova (posizione) e dove guarda (assetto) un
satellite a partire da opportune informazioni di input. La soluzione
deve essere sufficientemente flessibile da accettare leggi orarie
arbitrarie per poter simulare il movimento di satelliti differenti.&lt;/p&gt;
&lt;p&gt;Per questo motivo si è scelto di ultilizzare la libreria di calcolo
simbolico SymPy per il calcolo dell’orientamento del satellite definito
da funzioni del tempo generiche (pitch, roll, yaw), e la libreria
astronomica PyEphem il calcolo della posizione orbitale.&lt;/p&gt;
&lt;p&gt;Integrando PyEphem con SymPy è stato possibile sviluppare un sistema
dinamico duttile e di facile utilizzo, capace di gestire facilmente
molteplici sistemi di riferimento mobili, posizioni e direzioni.&lt;/p&gt;
</content><category term="EuroPython 2013"></category><category term="Sympy"></category><category term="scientific-computing"></category><category term="earth-obeservation"></category><category term="PyEphem"></category></entry><entry><title>Real World Numba: Taking the Path of Least Resistance</title><link href="https://pyvideo.org/pycon-india-2019/real-world-numba-taking-the-path-of-least-resistance.html" rel="alternate"></link><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><author><name>Ankit Mahato</name></author><id>tag:pyvideo.org,2019-10-12:/pycon-india-2019/real-world-numba-taking-the-path-of-least-resistance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The prominent reasons for the wide adoption of Python is the ease of learning, usability and readability coupled with the powerful ecosystem of Python packages. This often makes Python an attractive language for researchers &amp;amp; scholars to undertake computational projects and thesis. The ease of prototyping and tinkering also allows …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The prominent reasons for the wide adoption of Python is the ease of learning, usability and readability coupled with the powerful ecosystem of Python packages. This often makes Python an attractive language for researchers &amp;amp; scholars to undertake computational projects and thesis. The ease of prototyping and tinkering also allows for higher number of iterations and customization in the project, leading to increase in research output. But, one of the pain points of Python is its speed when compared to languages like C++ or FORTRAN which are still widely used in research.
Scholars, when hit by the performance bottleneck of pure python code, often come across some methods to increase their code performance like using PyMPI, Numpy or CPython. But, the learning curve is steep as things get less familiar. If learning Python is so easy, why should increasing the performance of Python code be so difficult?
This talk will address this question and introduce Numba, an open source JIT compiler that translates Python and NumPy code into fast machine code. 3 real world computational problems and their Numba counter-parts will be presented to the audience to demonstrate the ease and effectiveness of using Numba. Thereby showcasing how it can be useful in lowering the barrier to achieve code performance for scientific computing using Python.&lt;/p&gt;
</content><category term="PyCon India 2019"></category><category term="numba"></category><category term="scientific computing"></category></entry><entry><title>GPU-accelerated data analysis in Python: a study case in Material Sciences</title><link href="https://pyvideo.org/pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Giuseppe Di Bernardo</name></author><id>tag:pyvideo.org,2018-04-21:/pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Max Planck Computing and Data Facility is engaged in the development
and optimization of algorithms and applications for high performance
computing as well as for data-intensive projects. As programming
language in data science, Python is now used at MPCDF in the scientific
area of “atom probe crystallography” (APT …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Max Planck Computing and Data Facility is engaged in the development
and optimization of algorithms and applications for high performance
computing as well as for data-intensive projects. As programming
language in data science, Python is now used at MPCDF in the scientific
area of “atom probe crystallography” (APT): a Fourier analysis in 3D
space can be simulated in order to reveal composition and
crystallographic structure at the atomic scale of billions APT
experimental data sets.&lt;/p&gt;
&lt;p&gt;The Python data ecosystem has proved to be well suited to this, as it
has grown beyond the confines of single machines to embrace scalability.
The talk aims to describe our approach to scaling across multiple GPUs,
and the role of visualization methods too.&lt;/p&gt;
&lt;p&gt;Our data workflow analysis relies on the GPU-accelerated Python software
package PyNX, an open source library which provides fast parallel
computation scattering. The code takes advantage of the high throughput
of GPUs, using the pyCUDA library.&lt;/p&gt;
&lt;p&gt;Exploratory data analysis, high productivity and rapid prototyping with
high performance are enabled through Jupyter Notebooks and Python
packages e.g., pandas, matplotlib/plotly. In production stage,
interactive visualization is realized by using standard scientific tool,
e.g. Paraview, an open-source 3D visualization program which requires
Python modules to generate visualization components within VTK files.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon Italia 2018"></category><category term="GPUComputing"></category><category term="visualization"></category><category term="mathematical-modelling"></category><category term="image-processing"></category><category term="bigdata"></category><category term="matplotlib"></category><category term="analytics"></category><category term="data-visualization"></category><category term="data-analysis"></category><category term="Data Mining"></category><category term="scientific-computing"></category><category term="physics"></category><category term="python3"></category></entry></feed>