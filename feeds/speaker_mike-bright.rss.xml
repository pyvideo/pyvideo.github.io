<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 18 May 2017 00:00:00 +0000</lastBuildDate><item><title>IPython and Jupyter in Depth: High productivity, interactive Python</title><link>https://pyvideo.org/pycon-us-2017/ipython-and-jupyter-in-depth-high-productivity-interactive-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;IPython and Jupyter provide tools for interactive computing that are
widely used in scientific computing, education, and data science, but
can benefit any Python developer.&lt;/p&gt;
&lt;p&gt;You will learn how to use IPython in different ways, as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an interactive shell,&lt;/li&gt;
&lt;li&gt;a graphical console,&lt;/li&gt;
&lt;li&gt;a network-aware VM (Virtual machine) in GUIs,&lt;/li&gt;
&lt;li&gt;a web-based notebook combining code, graphics and rich HTML.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will demonstrate how to deploy a custom environment with Docker that
not only contains multiple Python kernels but also a couple of other
languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;At the end of this tutorial, attendees will have an understanding of the
overall design of Jupyter (and IPython) as a suite of applications they
can use and combine in multiple ways in the course of their development
work with Python and other programming languages. They will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tricks from the IPython machinery that are useful in everyday
development,&lt;/li&gt;
&lt;li&gt;What high-level applications in Jupyter, the web-based notebooks, can
do and how these applications can be used.&lt;/li&gt;
&lt;li&gt;How to use IPython and Jupyter together so that they can be best used
for the problem at hand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="python-level"&gt;
&lt;h4&gt;Python Level&lt;/h4&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domain-level"&gt;
&lt;h4&gt;Domain Level&lt;/h4&gt;
&lt;p&gt;Introductory&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="detailed-abstract"&gt;
&lt;h4&gt;Detailed Abstract&lt;/h4&gt;
&lt;p&gt;IPython started in 2001 simply as a better interactive Python shell.
Over the last decade it has grown into a powerful set of interlocking
tools that maximize developer productivity in Python while working
interactively.&lt;/p&gt;
&lt;p&gt;Today, Jupyter consists of an IPython kernel that executes user code,
provides many features for introspection and namespace manipulation, and
tools to control this kernel either in-process or out-of-process thanks
to a well specified communications protocol implemented over ZeroMQ.
This architecture allows the core features to be accessed via a variety
of clients, each providing unique functionality tuned to a specific use
case:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;An interactive, terminal-based shell with capabilities beyond the
default Python interactive interpreter (this is the classic
application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that many users have
worked with)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A &lt;a class="reference external" href="http://jupyter.org/"&gt;web-based notebook&lt;/a&gt; that can execute code
and also contain rich text and figures, mathematical equations and
arbitrary HTML. This notebook presents a document-like view with
cells where code is executed but that can be edited in-place,
reordered, mixed with explanatory text and figures, etc. The notebook
provides an interactive experience that combines live code and
results with literate documentation and the rich media that modern
browsers can display:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Notebook screenshot" src="http://jupyter.org/assets/jupyterpreview.png" /&gt;
&lt;p class="caption"&gt;Notebook screenshot&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The notebooks also allow for code in multiple languages allowing to mix
Python with Cython, C, R and other programming languages to access
features hard to obain from Python.&lt;/p&gt;
&lt;p&gt;These tools also increasingly work with languages other than Python, and
we renamed the language independent frontend components to &lt;em&gt;Jupyter&lt;/em&gt; in
order to make this clearer. The Python kernel we provide and the
original terminal-based shell will continue to be called &lt;em&gt;IPython&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this hands-on, in-depth tutorial, we will briefly describe IPython's
architecture and will then show how to use the above tools for a highly
productive workflow in Python.&lt;/p&gt;
&lt;p&gt;The materials for this tutorial are &lt;a class="reference external" href="https://github.com/ipython/ipython-in-depth"&gt;available on a github
repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussonnier</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/ipython-and-jupyter-in-depth-high-productivity-interactive-python.html</guid></item><item><title>ContainerOrchestration.py: The tutorial session</title><link>https://pyvideo.org/pycon-us-2017/containerorchestrationpy-the-tutorial-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Container Orchestration is the new hot topic in design of scalable
system architecture.&lt;/p&gt;
&lt;p&gt;In this tutorial we look at the main choices for container
orchestrators: Docker Swarm, Kubernetes and Apache Mesos.&lt;/p&gt;
&lt;p&gt;We will look at the use of the respective Python APIs for interacting
with thoses engines.&lt;/p&gt;
&lt;p&gt;This 3-hr session will provide hands-on use of those orchestrators with
real use-cases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Bright</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/containerorchestrationpy-the-tutorial-session.html</guid></item><item><title>IPython vers Jupyter</title><link>https://pyvideo.org/pycon-fr-2015/ipython-vers-jupyter.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython permet d’experimenter avec Python tout en gardant trace
d’execution en forme de notebook. Largement utilise par des
scientifiques pour partager, documenter leur travail de facon
reproducible. Nous allons regarder l’evolution vers un outil
multi-langage, Jupyter annonce en 2014. Regardons les capabilites de
Jupyter ainsi que les evolutions et investissements dans le projet.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ce talk vise les debutants, ou debutants IPython/Jupyter, en tout cas.&lt;/p&gt;
&lt;p&gt;Nous allons regarder les capabilites d’IPython/Jupyter. Depuis 2014
projet Jupyter permet de faire differents langages en notebook, via des
kernels specifiques (ils existent 49 aujourd’hui, il n’y avait que 45 il
y a deux semaines).&lt;/p&gt;
&lt;p&gt;Regardons d’abord les capabilites d’IPython meme avec quelques examples
graphiques a base de Pandas, Numpy pour l’analyse de donnees. Voyons
comment Jupyter puissent utiliser sympy/MathJAX.js pour travailler avec
des equations et symboles mathematiques dans un notebook.&lt;/p&gt;
&lt;p&gt;Nous ferons des choses similaires dans d’autres langages aussi utilises
pour l’analyze de donnees, tels que R et Julia.&lt;/p&gt;
&lt;p&gt;Regardons les projets autour de Jupyter et les evolutions en cours: *
javascript front ends * integration avec Google Drive _ integration
avec github _ integration avec Microsoft Azure&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike BRIGHT</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-fr-2015/ipython-vers-jupyter.html</guid></item><item><title>Jupyter for everything else</title><link>https://pyvideo.org/europython-2016/jupyter-for-everything-else.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mike BRIGHT - Jupyter for everything else
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/jupyter-for-everything-else"&gt;https://ep2016.europython.eu//conference/talks/jupyter-for-everything-else&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Sure you can do a chunk of scientific exploration and stuff in Jupyter
in your choice of language supplemented with visuals and that's
already awesome !&lt;/p&gt;
&lt;p&gt;But let's head off the beaten track a little to look at other uses,
especially command-line.&lt;/p&gt;
&lt;p&gt;We'll look at some alternate uses of Jupyter ...&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write command-line tutorials, cheat sheets in an easy to maintain format.&lt;/li&gt;
&lt;li&gt;Perform visualization tasks for command-line tools&lt;/li&gt;
&lt;li&gt;Write blog posts&lt;/li&gt;
&lt;li&gt;Create interactive presentations (thanks Damian !)&lt;/li&gt;
&lt;li&gt;Publish interactive books, articles and blog posts&lt;/li&gt;
&lt;li&gt;HTML/js/css experimentation&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike BRIGHT</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/jupyter-for-everything-else.html</guid></item></channel></rss>