<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Carmen Alvarez</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_carmen-alvarez.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-11-02T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Optimizing SQL Queries in Django and SQLAlchemy: Tackling the N+1 Problem with ORMs</title><link href="https://pyvideo.org/pycon-fr-2024/optimizing-sql-queries-in-django-and-sqlalchemy-tackling-the-n1-problem-with-orms.html" rel="alternate"></link><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><author><name>Carmen Alvarez</name></author><id>tag:pyvideo.org,2024-11-02:/pycon-fr-2024/optimizing-sql-queries-in-django-and-sqlalchemy-tackling-the-n1-problem-with-orms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will introduce the N+1 query problem, a common pitfall encountered when using Object-Relational Mappers (ORMs) like Django's ORM and SQLAlchemy. We'll see how ORMs simplify our lives compared to maintaining raw SQL queries.&lt;/p&gt;
&lt;p&gt;We'll demonstrate how to debug the SQL queries generated by the â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will introduce the N+1 query problem, a common pitfall encountered when using Object-Relational Mappers (ORMs) like Django's ORM and SQLAlchemy. We'll see how ORMs simplify our lives compared to maintaining raw SQL queries.&lt;/p&gt;
&lt;p&gt;We'll demonstrate how to debug the SQL queries generated by the ORM.&lt;/p&gt;
&lt;p&gt;We'll explain the concept of lazy loading in ORMs and how it can lead to the N+1 query problem if we're not careful. Using a practical example of a CRUD application, we'll show how lazy loading can result in multiple SQL queries, thus degrading performance.&lt;/p&gt;
&lt;p&gt;We will then provide a solution to the N+1 problem by using the select_related method in Django or joinedLoad in SQLAlchemy to optimize query performance, reducing the number of SQL queries to just one.&lt;/p&gt;
&lt;p&gt;Additionally, we'll introduce Django's CaptureQueriesContext and get_record_queries from Flask-SQLAlchemy, tools that can be used in unit tests to ensure that our application remains optimized as it evolves, preventing regressions related to N+1 queries.&lt;/p&gt;
</content><category term="PyCon FR 2024"></category></entry></feed>