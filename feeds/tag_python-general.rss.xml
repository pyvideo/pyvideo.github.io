<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Delta Chat, CFFI, pytest and all the Rust</title><link>https://pyvideo.org/europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delta Chat, a new approach to decentralized messaging, uses Python in
several ways. Delta Chat is a Whatsapp/Telegram-style messenger app
which uses the existing e-mail server network instead of central
servers. There is no address book upload, and no necessity to tie
accounts to mobile numbers. We'll live- demo how &amp;quot;Chat over E-mail&amp;quot;
works, with random audience members, in real-time.&lt;/p&gt;
&lt;p&gt;We'll then look into how Python is used for automated testing (with
pytest) against the messenger core library which is exposed through
CFFI. However, the core library will soon be ported to full Rust. Are
there better ways to interface Rust with Python than going through
C-interfaces?&lt;/p&gt;
&lt;p&gt;In the third part we'll introduce first example Chat Bots, written in
Python. Do you want to send an machine-generated system allert to a
sysadmin group? Or safely archive all media that is posted to a family
group? Or have your IoT sensor react to commands or send info? Just do
it without registering a bot to some central cite, or by exposing all
content information to (e. g. Telegram) servers. A Chat Bot only needs
access to a standard IMAP/SMTP account. We'll look at the simple Python
API for writing and testing powerful and versatile Chat bots.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- Delta Chat: &lt;a class="reference external" href="https://delta.chat"&gt;https://delta.chat&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Core library and Py bindings:
&lt;a class="reference external" href="https://github.com/deltachat/deltachat-core"&gt;https://github.com/deltachat/deltachat-core&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Deltabot: &lt;a class="reference external" href="https://github.com/deltachat/deltabot/"&gt;https://github.com/deltachat/deltabot/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</guid><category>Development</category><category>Python general</category><category>Rust</category><category>Sensors</category><category>System Administration</category></item><item><title>import bacon ü•ì</title><link>https://pyvideo.org/europython-2019/import-bacon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's often said that Python comes with batteries included, meaning that
the standard library can do basically anything except for maybe conjure
bacon for you (though I heard that's coming in 3.8). I don't think we
fully appreciate the sheer vastness of it, though, so I went through it
module by module looking for hidden gems (sorry, eggs). This is a by no
means exhaustive compilation of the useful, the underrated, and the
funny.&lt;/p&gt;
&lt;p&gt;When it comes to the Python standard library, chances are you use it on
a daily basis -- or more likely, a more or less stable subset of it. The
usual way we add things to the subset is by looking for a solution to a
problem and ending up getting pointed to a standard library module.
That, however, means that the odds of you finding out that there is a
whole module whose sole purpose is to tell you if a string is a Python
keyword are very slim.&lt;/p&gt;
&lt;p&gt;The aim of this talk is to showcase CPython libraries that are
interesting in some way: mostly for their usefulness, but in some cases
simply for being wonderfully weird in some way. The talk is not aimed at
any particular level of Python experience - as a beginner you'll get a
taste of just how many batteries Python ships with, and as a person
using the language often you might end up growing your own personal
subset a bit more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivana Kellyerova</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/import-bacon.html</guid><category>CPython</category><category>Python general</category></item><item><title>PEP yourself: 10 PEPs you should pay attention to</title><link>https://pyvideo.org/europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reading standards documents can be a dull task. But like in other
fields, standards in Python play a big part. Python Enhancement
Proposals (PEPs) are defined, improved, and eventually implemented by
the community. They apply to mostly anything related to Python, from the
more abstract and general to the more concrete and specific. Paying
attention to them, and knowing which ones to read beforehand is a vital
task that should take place prior to writing the first lines of code in
a project.&lt;/p&gt;
&lt;p&gt;In this talk we will go over a condensed list of the most important PEPs
to this date and see how they influence everyday coding. From style
guides and docstring conventions to data classes and assignment
expressions, we will see how these PEPs affect (or can affect) the code
we write, and how can we use them to improve our code and make
developing easier and more fun.&lt;/p&gt;
&lt;p&gt;After this talk, attendees will have a better grasp on why PEPs are
important to Python, which are a must read, and which ones they should
use as a guide in the future, both for coding and refactoring.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Santos</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</guid><category>Clean Code</category><category>Python Skills</category><category>Python general</category></item><item><title>A Day Has Only 24¬±1 Hours</title><link>https://pyvideo.org/europython-2019/a-day-has-only-24-1-hours.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On the last Sunday of October you may get ‚Äúone more hour of sleep‚Äù but
as well may spend much more time debugging code dealing with the time
zones, daylight saving time shifts and datetime stuff in general.&lt;/p&gt;
&lt;p&gt;We'll look at a few pitfalls you may encounter when working with
datetimes in Python. We'll dissect the pytz library, explain why it
contains over 500 individual time zones while focusing on the 63 entries
in Europe. We'll also find the reason why pytz is not part of the
standard Python, why it gets updated so often and why even that won't
solve all your problems. Do you know what happens after 2021 when the EU
stops DST switching?&lt;/p&gt;
&lt;p&gt;Two centuries of short-sighted propaganda and long-term chaos in
forty-five minutes. Maybe that will make you want to avoid time zones in
your code altogether!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miroslav ≈†ediv√Ω</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/a-day-has-only-24-1-hours.html</guid><category>Best Practice</category><category>Community</category><category>Python general</category><category>failures/mistakes</category></item><item><title>How software can feed the world üå±</title><link>https://pyvideo.org/europython-2019/how-software-can-feed-the-world.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infarm is a FaaS, Farming as a Service, and whether you believe it or
not, our business is in-house farming at scale.&lt;/p&gt;
&lt;p&gt;We design and build our farms, grow vegetables and sell them, and the
backbone of our infrastructure is based on Python.&lt;/p&gt;
&lt;p&gt;You can check this video to see what we do -&amp;gt;
&lt;a class="reference external" href="https://twitter.com/christianbarra/status/1096399602159439874"&gt;https://twitter.com/christianbarra/status/1096399602159439874&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More than 10 million observations are recorded from our farms, feeding
our farm management system that allows operators, plant scientists, and
supervisors to monitor each farm in real-time.&lt;/p&gt;
&lt;p&gt;During this talk I will briefly introduce the world's problems we are
trying to resolve at Infarm and then talk about our IoT farms,
infrastructure, how we use Python and how we plan to improve the
capabilities of our farms by adding edge machine learning.&lt;/p&gt;
&lt;p&gt;Agenda&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- What are the problems we are trying to solve at Infarm&lt;/div&gt;
&lt;div class="line"&gt;- Our 4 tech pillars&lt;/div&gt;
&lt;div class="line"&gt;- How we started with Python&lt;/div&gt;
&lt;div class="line"&gt;- Issues we are facing while scaling our Python infrastructure to
support &amp;gt; 400 farms&lt;/div&gt;
&lt;div class="line"&gt;- How we plan to evolve our software and infrastructure on 4 different
levels: consolidate, architecture, cloud native and observability&lt;/div&gt;
&lt;div class="line"&gt;- How Python is going to support our automated farms and its role in
making the farms smarter (edge computing with AI)&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Barra</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/how-software-can-feed-the-world.html</guid><category>Big Data</category><category>Hardware/IoT</category><category>Internet of Things (IoT)</category><category>Machine-Learning</category><category>Python general</category></item><item><title>Practical decorators</title><link>https://pyvideo.org/europython-2019/practical-decorators.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher level of abstraction, applying the same treatment to functions
and classes.&lt;/p&gt;
&lt;p&gt;But what can you actually do with them? For many Python developers I've
encountered, decorators sometimes appear to be a solution looking for a
problem.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you some practical uses for decorators, and how
you can use them to make your code more readable and maintainable, while
also providing more semantic power. Moreover, you'll see examples of
things would be hard to do without decorators. I hope that after this
talk, you'll have a good sense of how to use decorators in your own
Python projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuven Lerner</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/practical-decorators.html</guid><category>Compiler and Interpreters</category><category>Data Structures</category><category>Programming</category><category>Python Skills</category><category>Python general</category></item><item><title>Visual debugger for Jupyter Notebooks: Myth or Reality?</title><link>https://pyvideo.org/europython-2019/visual-debugger-for-jupyter-notebooks-myth-or-reality.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers like Jupyter Notebooks for their flexibility:
they are very useful for interactive prototyping, scientific
experiments, visualizations and many other tasks. There are different
development tools which make working with Jupyter Notebooks easier and
smoother, but all of them lack very important feature: visual debugger.
Since Jupyter Kernel is a usual Python process, it looks reasonably to
use one of existing Python debuggers with it. But is it really possible?&lt;/p&gt;
&lt;p&gt;In this talk we‚Äôll try to understand how Python debugger should be
changed to work with Jupyter cells and how these changes are already
implemented in the PyCharm IDE. After that we‚Äôll look into the whole
Jupyter architecture and try to understand which bottlenecks in it
prevent creation of universal Jupyter debugger at the moment.&lt;/p&gt;
&lt;p&gt;This talk requires a basic knowledge of Jupyter Notebooks and
understanding of Python functions and objects. It will be interesting
for people who want to learn internals of the tools they use every day.
Also it might be an inspiration for people who want to implement a
visual debugger in their favourite IDE.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elizaveta Shashkova</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/visual-debugger-for-jupyter-notebooks-myth-or-reality.html</guid><category>Debugging</category><category>Jupyter</category><category>Python general</category><category>Tooling</category></item></channel></rss>