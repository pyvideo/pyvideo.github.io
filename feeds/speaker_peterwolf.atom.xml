<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PeterWolf</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_peterwolf.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>寫個能幹的中文斷詞系統</title><link href="https://pyvideo.org/pycon-taiwan-2019/xie-ge-neng-gan-de-zhong-wen-duan-ci-xi-tong.html" rel="alternate"></link><published>2019-09-20T00:00:00+00:00</published><updated>2019-09-20T00:00:00+00:00</updated><author><name>PeterWolf</name></author><id>tag:pyvideo.org,2019-09-20:/pycon-taiwan-2019/xie-ge-neng-gan-de-zhong-wen-duan-ci-xi-tong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R2 14:50–15:35&lt;/p&gt;
&lt;p&gt;我們利用語言學的中文句法原則，從零開始打造了一套中文斷詞引擎 - 文截斷詞 (Articut)，而且不只斷詞，它還能推理詞性標記。&lt;/p&gt;
&lt;p&gt;本演講將分享一點點中文語言學 (雖然深度不足以理解程式邏輯)、我們在開發過程中遇到的有趣語料和斷詞結果 (可能會有些冷場)以及 Python3 的 Unicode 如何省下我們和字串編碼戰鬥的力氣 (還有 Python3.5 的 re 模組有什麼問題…啊啊，扯遠了)、還有看著 Articut 犯下和人類孩童一樣的語言錯誤時的感動(底特律變人嗎？)、以不同斷詞引擎處理特殊語料的修羅場 (我們對同領域的前輩還是非常尊敬的)以及最後用 SIGHAN 2005 的資料集，和其它文獻中的演算法進行良率競爭的結果。&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/Droidtown/PyConTW2019"&gt;https://github.com/Droidtown/PyConTW2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: PeterWolf …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R2 14:50–15:35&lt;/p&gt;
&lt;p&gt;我們利用語言學的中文句法原則，從零開始打造了一套中文斷詞引擎 - 文截斷詞 (Articut)，而且不只斷詞，它還能推理詞性標記。&lt;/p&gt;
&lt;p&gt;本演講將分享一點點中文語言學 (雖然深度不足以理解程式邏輯)、我們在開發過程中遇到的有趣語料和斷詞結果 (可能會有些冷場)以及 Python3 的 Unicode 如何省下我們和字串編碼戰鬥的力氣 (還有 Python3.5 的 re 模組有什麼問題…啊啊，扯遠了)、還有看著 Articut 犯下和人類孩童一樣的語言錯誤時的感動(底特律變人嗎？)、以不同斷詞引擎處理特殊語料的修羅場 (我們對同領域的前輩還是非常尊敬的)以及最後用 SIGHAN 2005 的資料集，和其它文獻中的演算法進行良率競爭的結果。&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/Droidtown/PyConTW2019"&gt;https://github.com/Droidtown/PyConTW2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: PeterWolf&lt;/p&gt;
&lt;p&gt;Droidtown Linguistic Tech. Co. (卓騰語言科技) 創辦人兼核心開發者。&lt;/p&gt;
&lt;p&gt;平常開發基於語言學理論的中文斷詞(NLP)、中文語意處理(NLU)、自動語音處理、語音辨識、自然語言文本解析及資料探勘的演算法及前端應用。&lt;/p&gt;
&lt;p&gt;是一個覺得流浪很美，卻差一點成為流浪漢的大叔。&lt;/p&gt;
</content><category term="PyCon Taiwan 2019"></category></entry><entry><title>Loki：自動生成 Python 碼的 Chatbot 意圖分類引擎 – PyCon Taiwan 2020</title><link href="https://pyvideo.org/pycon-taiwan-2020/lokizi-dong-sheng-cheng-python-ma-de-chatbot-yi-tu-fen-lei-yin-qing-pycon-taiwan-2020.html" rel="alternate"></link><published>2020-09-05T00:00:00+00:00</published><updated>2020-09-05T00:00:00+00:00</updated><author><name>PeterWolf</name></author><id>tag:pyvideo.org,2020-09-05:/pycon-taiwan-2020/lokizi-dong-sheng-cheng-python-ma-de-chatbot-yi-tu-fen-lei-yin-qing-pycon-taiwan-2020.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R1 11:30–12:00&lt;/p&gt;
&lt;p&gt;現行的聊天機器人意圖分析引擎如 LUIS 或 DiaglogFlow 往往需要大量的範例以及精細的劇本設計，才能產生好像在對話的效果。但透過其系統背後的文本訓練後，因為機器學習的黑盒子特性，遇到邊界問題時，仍然不易修正雞同鴨講的回覆。這個瓶頸使得大部份聊天機器人其實不具備聊天功能，而只是把網站地圖或是文件關鍵字查詢的功能搬上聊天軟體的介面上而已。&lt;/p&gt;
&lt;p&gt;為了突破這些瓶頸，我們推出 Loki 中文意圖分類引擎。Loki 全文是 Linguistic Oriented Keyword Interface (語言導向的關鍵詞介面)。基於句法分析的方式，自動產生 Python 的 Regular Expression (正則表示式) 的條件式 (if...else...) 區塊程式碼。一次解決了兩個問題：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;相較於語言模型的黑盒子，Loki 的 Regular Expression 是「人類可讀 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R1 11:30–12:00&lt;/p&gt;
&lt;p&gt;現行的聊天機器人意圖分析引擎如 LUIS 或 DiaglogFlow 往往需要大量的範例以及精細的劇本設計，才能產生好像在對話的效果。但透過其系統背後的文本訓練後，因為機器學習的黑盒子特性，遇到邊界問題時，仍然不易修正雞同鴨講的回覆。這個瓶頸使得大部份聊天機器人其實不具備聊天功能，而只是把網站地圖或是文件關鍵字查詢的功能搬上聊天軟體的介面上而已。&lt;/p&gt;
&lt;p&gt;為了突破這些瓶頸，我們推出 Loki 中文意圖分類引擎。Loki 全文是 Linguistic Oriented Keyword Interface (語言導向的關鍵詞介面)。基於句法分析的方式，自動產生 Python 的 Regular Expression (正則表示式) 的條件式 (if...else...) 區塊程式碼。一次解決了兩個問題：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;相較於語言模型的黑盒子，Loki 的 Regular Expression 是「人類可讀，且可直接修改」的分類器。&lt;/li&gt;
&lt;li&gt;不需要大量的資料，一個句型只要出現一次，就可以產生有效的分類條件式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本次演講的內容，將同時以 LUIS/DiaglogFlow 和 Loki 產生的結果，比較「透過機器學習而來的意圖分析」和「透過句法分析而來的意圖分析」兩種方法在中文 Chatbot (聊天機器人) 應用上的差別。&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://bit.ly/Pycontw2020_Loki"&gt;http://bit.ly/Pycontw2020_Loki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: PeterWolf&lt;/p&gt;
&lt;p&gt;強人工智慧倡議者、設計者與實作者。&lt;/p&gt;
</content><category term="PyCon Taiwan 2020"></category></entry><entry><title>PEP 634 Structural Pattern Matching 參上，你終究還是要用語言學來做 NLP 齁！ – PeterWolf (PyCon Taiwan 2021)</title><link href="https://pyvideo.org/pycon-taiwan-2021/pep-634-structural-pattern-matching-can-shang-ni-zhong-jiu-huan-shi-yao-yong-yu-yan-xue-lai-zuo-nlp-hou-peterwolf-pycon-taiwan-2021.html" rel="alternate"></link><published>2021-10-03T00:00:00+00:00</published><updated>2021-10-03T00:00:00+00:00</updated><author><name>PeterWolf</name></author><id>tag:pyvideo.org,2021-10-03:/pycon-taiwan-2021/pep-634-structural-pattern-matching-can-shang-ni-zhong-jiu-huan-shi-yao-yong-yu-yan-xue-lai-zuo-nlp-hou-peterwolf-pycon-taiwan-2021.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 2, 13:00-13:45&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;PEP622(後改併到 PEP634) 提出的 Structural Pattern Matching (以下簡稱 SPM) 結構讓人乍看之下以為 Python 終於在 3.10 向 case 投降。然而，歹誌並不是表面上一個 case 的保留字所呈現得這麼簡單！ 本講題將從解析「意圖」的角度出發，說明解析程式碼的「意圖」和解析自然語言的「意圖」兩項任務之間，透過語言學的眼光來看，其實有異曲同工之妙。藉由目前世界上唯一利用 SPM 來做 NLU 的 Loki 意圖分析系統和 Python 3.10 在 PEP622 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 2, 13:00-13:45&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;PEP622(後改併到 PEP634) 提出的 Structural Pattern Matching (以下簡稱 SPM) 結構讓人乍看之下以為 Python 終於在 3.10 向 case 投降。然而，歹誌並不是表面上一個 case 的保留字所呈現得這麼簡單！ 本講題將從解析「意圖」的角度出發，說明解析程式碼的「意圖」和解析自然語言的「意圖」兩項任務之間，透過語言學的眼光來看，其實有異曲同工之妙。藉由目前世界上唯一利用 SPM 來做 NLU 的 Loki 意圖分析系統和 Python 3.10 在 PEP622 提出的新功能，我們將來回穿梭「自然語言」和「程式語言」兩個平行宇宙說明兩個重點： 1. 為什麼 Structure Pattern Matching 解析語言是個好主意。 2. Structure Pattern Matching 這招，程式語言用，好；自然語言用，更好。 理解了 PEP622 的運作後，更會發現它是對 PEP20: The zen of Python 中的 &amp;quot;Readibility counts.&amp;quot; 這句話非常強烈的支持與實現。它讓程式語言不只是在表層的可讀性獲得了提升，更在底層的運作原理也更接近人類的自然語言。 最後，不論是程式語言還是自然語言，你終究還是要用語言學來做 NLP 的！&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;在 BigData 和各種 ML 框架興起以前，許多學校的資訊教育是包含「編譯器/直譯器」的設計的。在編譯器/直譯器的設計課程裡，本來就會提到「程式語言」和「自然語言」的相似與一致之處。比如說這個影片裡講者
&lt;a class="reference external" href="https://youtu.be/vstmnbzGbwU"&gt;https://youtu.be/vstmnbzGbwU&lt;/a&gt; 就是試圖用短短的 5 分鐘解釋什麼是 &amp;quot;Programming logic (程式邏輯)&amp;quot;, &amp;quot;Syntax (句法結構)&amp;quot; 和 &amp;quot;Semantics (語意)&amp;quot;。&lt;/p&gt;
&lt;p&gt;以她舉的例子為例，在某個程式語言中：&lt;/p&gt;
&lt;p&gt;price := 12,99&lt;/p&gt;
&lt;p&gt;是可以執行的，但&lt;/p&gt;
&lt;p&gt;price = A&lt;/p&gt;
&lt;p&gt;則是無法執行的。原因是它的語意和結構都是錯的。&lt;/p&gt;
&lt;p&gt;如果我們想讓 price 的語意指涉一個「數值」的話，那麼很明顯地讓它指涉成為一個「字符」是不對的，這是語意上的錯誤 (Semantic Error)。此外，就算字符 A 背後代表了某個「數值」，但在這個程式語言中使用了 X := Y 這樣的結構來賦值，因此如果是用 X = Y 這樣的結構來賦值時，就是句法上的錯誤 (Syntax Error)。&lt;/p&gt;
&lt;p&gt;這說明了，要讓程式順利地依著「程式邏輯 (意圖)」運作，那麼設計者不只要在語意上合情合理，更要注意「結構」是否正確。因為編譯器/直譯器有賴設計者透過「結構」來進行比對，才能確認程式設計的目標為何。&lt;/p&gt;
&lt;p&gt;我們用自然語言為例：&lt;/p&gt;
&lt;p&gt;我 [ ]了 你的晚餐&lt;/p&gt;
&lt;p&gt;這個結構要合情合理，那麼在 [] 裡一定得放個表示動作的事件。否則如果卡了個：&lt;/p&gt;
&lt;p&gt;我 [昨天]了 你的晚餐&lt;/p&gt;
&lt;p&gt;就成了結構不正確 (該放動詞的地方，放的不是動詞)，而且語意也不正確 (不知道 [昨天] 和 [你的晚餐] 之間究竟發生了什麼) 的結果。&lt;/p&gt;
&lt;p&gt;我必需再一次地強調，PEP622 的提出，是 Python 程式語言對 PEP20: The zen of Python 中的 &amp;quot;Readibility counts.&amp;quot; 這句話非常強烈的支持與實現。它讓程式語言不只是在表層的可讀性獲得了提升，更在底層的運作原理也更接近人類的自然語言。&lt;/p&gt;
&lt;p&gt;我非常期待能有機會和 Python 社群的朋友們從語言學的觀點來分享這個發現。&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.
HackMD: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fr1fu-4cfY"&gt;https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fr1fu-4cfY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: PeterWolf&lt;/p&gt;
&lt;p&gt;Droidtown Linguistic Tech. Co. (卓騰語言科技) 創辦人兼核心開發者。 平常開發基於語言學理論的中文斷詞(NLP)、中文語意處理(NLU)、自動語音處理、語音辨識、自然語言文本解析及資料探勘的演算法及前端應用。 創業第一天就決心要做「百年企業」的那個男人！&lt;/p&gt;
</content><category term="PyCon Taiwan 2021"></category></entry></feed>