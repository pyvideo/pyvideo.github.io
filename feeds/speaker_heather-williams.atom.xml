<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_heather-williams.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-11T00:00:00+00:00</updated><entry><title>Testing in the wild</title><link href="https://pyvideo.org/pycon-za-2018/testing-in-the-wild.html" rel="alternate"></link><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><author><name>Heather Williams</name></author><id>tag:pyvideo.org,2018-10-11:pycon-za-2018/testing-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is aimed at anyone interested in testing real code with real
deadlines. In this talk Test Driven Development (TDD) will be explored
along with alternatives to TDD. By the end of this talk participants
will have a greater understanding of how to apply one of the tools of
testing in the real world and how to ensure they have time in the
development cycle to test their code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Questions covered&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Almost everyone talks about TDD these days. TDD is taken as the thing to
aim for and the one thing you must do as a developer. But does TDD
actually work when you are out of the classroom context and in the real
world? Are there alternatives to TDD that are better to use? How do you
begin to test legacy code so that you can change it safely? What about
that new feature that marketing wants ASAP and you have to quickly pull
a rabbit out the hat for? How should one ensure that this new code is
added rapidly but with good tests? These and many other questions will
be briefly explored in this talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools used&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will focus on unit testing and will use &lt;a class="reference external" href="https://pypi.org/project/nose/"&gt;Python
nose&lt;/a&gt; as the test runner. Python nose
extends &lt;a class="reference external" href="https://docs.python.org/2/library/unittest.html"&gt;unittest&lt;/a&gt;
and makes it easier to setup, discover and run tests with Python. Some
brief examples of tests will be shown using Python 2.7 but the broader
concepts apply equally well to Python 3.&lt;/p&gt;
</summary></entry></feed>