<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_thomi-richards.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-03T00:00:00+00:00</updated><entry><title>Post-mortems: Building better software together.</title><link href="https://pyvideo.org/pycon-au-2019/post-mortems-building-better-software-together.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2019-08-03:pycon-au-2019/post-mortems-building-better-software-together.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Improving the reliability of complex software requires more than just reacting to the latest issue. In this talk we’ll learn how you and your team can work together to build a post-mortem process that helps you identify and fix systematic flaws in your environment.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/post-mortems-building-better-software-together"&gt;https://2019.pycon-au.org/talks/post-mortems-building-better-software-together&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 11:50:00 2019 at C3.3&lt;/p&gt;
</summary></entry><entry><title>From PyPI to Production: Shipping Software Responsibly.</title><link href="https://pyvideo.org/pycon-au-2017/from-pypi-to-production-shipping-software-responsibly.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/from-pypi-to-production-shipping-software-responsibly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most, if not all, Python developers know how to create a wheel on PyPI - however, that's just the first step in delivering a product in a responsible manner to your users. As a publisher, it is your responsibility to ensure that you are able to deliver software updates to your users quickly, safely, and reliably.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How will users who have installed your application know to update when there's a critical security bug that needs to be fixed?&lt;/li&gt;
&lt;li&gt;How do you manage users that want to install a beta version of your application, effectively trading stability for the latest features?&lt;/li&gt;
&lt;li&gt;How do you handle multiple stable release series simultaneously?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When faced with these and similar issues, most Python developers will quickly come to the realisation that PyPI is simply not suitable for releasing applications to users. Fortunately there's a solution: Using snap packages you too can ship Python-based software in a responsible manner. Starting from a simple Python application I will demonstrate the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How snap packages can be created and shipped to users.&lt;/li&gt;
&lt;li&gt;How snap packages make automated software updates easy.&lt;/li&gt;
&lt;li&gt;How users can pick the level of risk they're willing to take when using your software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Shipping Python-based applications has always been painful. Snap packages make it easy. Come and see how!&lt;/p&gt;
</summary></entry><entry><title>Using Autopilot for Functional UI Testing</title><link href="https://pyvideo.org/kiwi-pycon-2013/using-autopilot-for-functional-ui-testing.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/using-autopilot-for-functional-ui-testing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Autopilot is a tool designed for writing high-level functional tests for
GUI applications. It is written by a team of engineers at Canonical, and
is being used to test everything from the Unity desktop shell to desktop
applications, to core phone applications for the Ubuntu Touch project.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What autopilot is, how it's made, and how it works.&lt;/li&gt;
&lt;li&gt;How we use it at Canonical, and what benefits we've seen from using
it.&lt;/li&gt;
&lt;li&gt;How you can use it to test your own applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-using-autopilot-for-functional-ui-testing"&gt;https://speakerdeck.com/nzpug/thomi-richards-using-autopilot-for-functional-ui-testing&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/kiwi-pycon-2014/lightning-talks-12.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Jen Zajac</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/lightning-talks-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;01 - Jen Zajac - PRIZE DRAW - 1:44 02 - Steven Ellis - LCA Auckland 2015
- 5:43 03 - Jay Gattuso - Heritage Preserve; #WeWantJam - 8:54 04 -
James Polly - Fewer Boilerplate! - 12:07 05 - Aurynn Shaw - Let me show
you the world - 16:19 06 - Ronen Baram - MySQL Performance Schema -
19:41 07 - Douglas Bagnall - Julia - 22:14 08 - Grant Paton-Simpson /
Richard Shea - NZ Python Promotion Pamhplet 24:50 09 - Elliot
Paton-Simpson - Blackbox - 27:23 10 - Danny Adair / Thomi Richards - New
Zealand Python User Group - 30:45 11 - Ben Olsen - Docker &amp;amp; Python -
35:37 12 - Tim Penhey - Object Factories for TDD - 40:46 13 - Hamish
Campbell - Horrible Python Obfuscation Tricks - 43:20 14 - Nick Wareing
- Arduino Pull Request Notifier - 48:35 15 - Giovanni Moretti -
Dynamically creating Python tutorials and presentations - 53:12 16 -
Robert Coup - Bad-ass Postgres Tricks - 58:36 17 - Juergen Brendel -
&amp;quot;One button&amp;quot; test and deploy on AWS - 1:03:59 18 - Tobi Wulff - Python
Anti-Patterns - 1:09:14 19 - Sanjay Wadhwa - Map Production using Python
scripts - 1:14:32 20 - Chris McDowall - Making weird maps with Python -
1:19:34&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>A Testing Talk</title><link href="https://pyvideo.org/kiwi-pycon-2014/a-testing-talk.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/a-testing-talk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will contain my opinionated views on several topics,
including, but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which areas of testing are well catered for, and which are not?&lt;/li&gt;
&lt;li&gt;What sources of bugs are frequent, and very hard to test?&lt;/li&gt;
&lt;li&gt;Should we perhaps start talking about unit tests less, and start
talking about other forms of testing more?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my day job I spend a lot of time looking at projects that are part of
Ubuntu, and trying to find out why they’re being released with bugs.
This in turn leads to a lot of dissection of test suites, and a lot of
discussion with my colleagues around tests, names of tests, why some
tests are better than others, where the common gaps in test coverage
are, how applications should be tested, where, when, and why certain
test suites should be run, and other subjects too boring to mention.&lt;/p&gt;
&lt;p&gt;Having done this for several years, I've started to form a few troubling
thoughts about the state of automated testing in software development,
and in python specifically. When taken together, these can start to form
a rough and ready 'testing philosophy' - a way of looking at code and,
by analysing it's structure and visibility, start to find gaps in it's
test coverage.&lt;/p&gt;
&lt;p&gt;This talk contains no silver bullets - no magical solutions, but does
(hopefully) contain some interesting questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk"&gt;https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Connascence in Python</title><link href="https://pyvideo.org/kiwi-pycon-2015/connascence-in-python.html" rel="alternate"></link><published>2015-09-05T00:00:00+00:00</published><updated>2015-09-05T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/connascence-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Connascence is the taxonomy of coupling: it allows us to specify how two
or more pieces of code are connected, and suggests ways of minimising
the impact of that coupling. Ultimately this allows developers to write
software that is more flexible to change.&lt;/p&gt;
&lt;p&gt;At the end of the talk the audience will have learned some of the forms
of connascence with real python code examples, and will understand how
to apply those principles to their own code.&lt;/p&gt;
</summary></entry></feed>