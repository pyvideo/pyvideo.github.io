<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Lim Chan-sik</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lim-chan-sik.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-08-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Development of a Markdown parser that extends code block functionality</title><link href="https://pyvideo.org/pycon-korea-2022/development-of-a-markdown-parser-that-extends-code-block-functionality.html" rel="alternate"></link><published>2022-10-02T00:00:00+00:00</published><updated>2022-10-02T00:00:00+00:00</updated><author><name>Lim Chan-sik</name></author><id>tag:pyvideo.org,2022-10-02:/pycon-korea-2022/development-of-a-markdown-parser-that-extends-code-block-functionality.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing a document explaining the code, I mainly use a Markdown document. I usually list the entire code first and then explain the related code parts again. At this time, if the code has line numbers, it is easy to specify the code and it can help to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing a document explaining the code, I mainly use a Markdown document. I usually list the entire code first and then explain the related code parts again. At this time, if the code has line numbers, it is easy to specify the code and it can help to find it. For this, I use the PLY (Python Lex-Yacc) project to define additional grammar in the code block and develop a Markdown parser that parses it.&lt;/p&gt;
</content><category term="PyCon Korea 2022"></category><category term="Python Library"></category></entry><entry><title>Developing web-based operational tools with the Pynecone framework</title><link href="https://pyvideo.org/pycon-korea-2023/developing-web-based-operational-tools-with-the-pynecone-framework.html" rel="alternate"></link><published>2023-08-12T00:00:00+00:00</published><updated>2023-08-12T00:00:00+00:00</updated><author><name>Lim Chan-sik</name></author><id>tag:pyvideo.org,2023-08-12:/pycon-korea-2023/developing-web-based-operational-tools-with-the-pynecone-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is not easy to create the necessary operational tools while developing and operating a service. In particular, in a situation where the proportion of backend developers is high, developing web-based tools can be a huge burden.
However, if you use various open sources that help with web development …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is not easy to create the necessary operational tools while developing and operating a service. In particular, in a situation where the proportion of backend developers is high, developing web-based tools can be a huge burden.
However, if you use various open sources that help with web development, you can easily start developing the necessary operational tools. In this session, I would like to share my experience developing a web-based operational tool using the Pynecone framework among the various open source projects mentioned above.&lt;/p&gt;
&lt;p&gt;Lim Chan-sik
I use Python for various purposes while developing backend systems or operating platforms. Recently, I am developing an on-premise serving platform that can operate high-performance applications based on Kubernetes. I am developing various tools necessary for platform operation in Python, which helps me reduce repetitive tasks and makes operation easier.&lt;/p&gt;
</content><category term="PyCon Korea 2023"></category></entry></feed>