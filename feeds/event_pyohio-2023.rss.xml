<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyOhio 2023</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 16 Dec 2023 00:00:00 +0000</lastBuildDate><item><title>Adafruit Circuit Playground Express as an “On Air” Light</title><link>https://pyvideo.org/pyohio-2023/adafruit-circuit-playground-express-as-an-on-air-light.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The swag bags for PyCon 2019 included an Adafruit Circuit Playground
Express, a lovely little circuit board with many inputs and outputs,
and—crucially for us—the ability to run Python. With the power of Python
and a few other bits of software, it’s possible to turn one into your
personal “On Air” light. This talk will walk the viewer through the
steps required to accomplish this, and reference related resources for
the sake of inspiration. There will be pretty lights.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nik Kantar</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/adafruit-circuit-playground-express-as-an-on-air-light.html</guid><category>PyOhio 2023</category></item><item><title>Animations from First Principles</title><link>https://pyvideo.org/pyohio-2023/animations-from-first-principles.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do animations really work?&lt;/p&gt;
&lt;p&gt;How do you create an animation?&lt;/p&gt;
&lt;p&gt;What if you want to morph a circle into a figure eight?&lt;/p&gt;
&lt;p&gt;As it turns out, all you need is two or three functions and a loop!&lt;/p&gt;
&lt;p&gt;In this talk, we'll go over the basic concepts and code needed to create
an animation &lt;em&gt;from first principles&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because the talk presents the ideas and the code from first principles,
you will be able to take the key concepts and build your own animations!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Girão Serrão</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/animations-from-first-principles.html</guid><category>PyOhio 2023</category></item><item><title>Better Living Through Direnv</title><link>https://pyvideo.org/pyohio-2023/better-living-through-direnv.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Never have to activate another virtualenv again? Yes, please! Remove the
clutter of various API tokens that have accumulated in my shell
configuration over the years? Yes, please! Use Direnv to automate your
environment setup, removing pain points and barriers for your
development team. We'll look at good, better, and best levels of
managing environment variables with Direnv.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Adams</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/better-living-through-direnv.html</guid><category>PyOhio 2023</category></item><item><title>Build a Web Map with PyScript!</title><link>https://pyvideo.org/pyohio-2023/build-a-web-map-with-pyscript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyScript allows you to run Python code in a browser, like JavaScript
does. It also lets you import geospatial mapping libraries like Folium
and GeoPandas, all without actually installing anything! In this talk,
we'll discuss the benefits and ease of using PyScript for this task,
then we'll go through a basic geospatial analysis and display the
results in a web map. In the end we'll have an app that can be easily
shared, containing Python code that anyone can view and run.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christy Heaton</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/build-a-web-map-with-pyscript.html</guid><category>PyOhio 2023</category></item><item><title>Debugging Failing Pytest Tests in a Notebook</title><link>https://pyvideo.org/pyohio-2023/debugging-failing-pytest-tests-in-a-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes how to use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-ndb&lt;/span&gt;&lt;/tt&gt; package for debugging
failed pytest tests using a notebook.&lt;/p&gt;
&lt;p&gt;In our opinion, developers should often prefer to debug failing tests
using a debugger such as pdb. However for certain applications, such as
those that occur in data science with large complex data sets or long
running models, this is can be quite difficult. Debugging a failing test
can mean having to analyze data, for which there is little support in a
debugger and where notebooks truly shine.&lt;/p&gt;
&lt;p&gt;Traditionally to debug in a notebook, all of the code from the test,
including fixtures and parametrizations, must be copied. For simple
tests this might not be an issue, but for a complex test it can be quite
time consuming. Instead, you can use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-ndb&lt;/span&gt;&lt;/tt&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Shadrach</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/debugging-failing-pytest-tests-in-a-notebook.html</guid><category>PyOhio 2023</category></item><item><title>Digital Signal Processing in Python: A MATLAB Alternative</title><link>https://pyvideo.org/pyohio-2023/digital-signal-processing-in-python-a-matlab-alternative.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will be discussing the use of digital signal processing techniques
using various Python libraries, such as numpy and scipy, as alternatives
to classic signal engineering approaches in MATLAB. An introductory
walk-through example will be given, as well commentary on how to
pipeline processed signal into machine learning libraries such as
scikit-learn and tensorflow2.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Meg Sharma</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/digital-signal-processing-in-python-a-matlab-alternative.html</guid><category>PyOhio 2023</category></item><item><title>Exploring OpenSearch, Python, and Serverless: Crafting Efficient and Modern Search Applications</title><link>https://pyvideo.org/pyohio-2023/exploring-opensearch-python-and-serverless-crafting-efficient-and-modern-search-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenSearch, a community-driven, open-source project, offers a robust
alternative for search and analytics needs. When coupled with Python's
flexibility and the efficiency of serverless architecture, it transforms
into a dynamic trio that empowers developers to create efficient and
modern search applications.&lt;/p&gt;
&lt;p&gt;Join us on a journey as we explore the synergy between OpenSearch,
Python, and serverless architecture. In this talk, we'll provide an
overview of OpenSearch and demonstrate how to utilize Python with
serverless architecture to power your search engine. Additionally, we
will delve into best practices and challenges that arise when employing
this combination in production.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll gain a clear understanding of how to
architect, build, and deploy efficient search applications using
OpenSearch, Python, and serverless architecture. Whether you're a
developer aiming to enhance your search capabilities or an architect
exploring modern search solutions, this talk will equip you with the
tools and insights needed to embrace this exciting synergy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laysa Uchoa</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/exploring-opensearch-python-and-serverless-crafting-efficient-and-modern-search-applications.html</guid><category>PyOhio 2023</category></item><item><title>F-strings!</title><link>https://pyvideo.org/pyohio-2023/f-strings.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By now we hope you've been using f-strings, but do you know that there's
more to it than sticking variables into curly braces?&lt;/p&gt;
&lt;p&gt;In this talk, we'll go through the useful features of f-strings, from
formatting to debugging. We'll also share how f-strings have been
improved since Python 3.12. Watch this talk so you don't miss out!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/f-strings.html</guid><category>PyOhio 2023</category></item><item><title>From Code to Clarity: How Good Technical Documentation is the Key to Great Software</title><link>https://pyvideo.org/pyohio-2023/from-code-to-clarity-how-good-technical-documentation-is-the-key-to-great-software.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As developers, we know that writing code is only half the battle. The
other half is writing documentation that effectively communicates our
ideas and helps others understand and use our code. But how do we write
good technical documentation that is both accurate and engaging? In this
talk, let's explore the secrets to mastering the art of software
technical documentation and transform the way you approach technical
writing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ria Bhatia</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/from-code-to-clarity-how-good-technical-documentation-is-the-key-to-great-software.html</guid><category>PyOhio 2023</category></item><item><title>Full-Stack Python with HTMX</title><link>https://pyvideo.org/pyohio-2023/full-stack-python-with-htmx.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;These days, JavaScript dominates the front-end web ecosystem because it
is the primary language for the browser. That means you need to use
JavaScript for dynamic web page interactions, even if your backend is
written in a different language like Python. However, that's no longer
the case! Thanks to &lt;a class="reference external" href="https://htmx.org/"&gt;HTMX&lt;/a&gt;, we can develop dynamic
interactions directly in hypertext rather than in explicit JS code. In
this lightning talk, I'll show you how to create a &lt;a class="reference external" href="https://github.com/AutomationPanda/bulldoggy-reminders-app"&gt;full-stack Python
app&lt;/a&gt; with
FastAPI, HTMX, and a few other Python tools. You will learn how to build
modern web apps entirely in Python – as well as how HTMX democratizes
front-end web development!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pandy Knight</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/full-stack-python-with-htmx.html</guid><category>PyOhio 2023</category></item><item><title>Glacial Refactoring: A Glacier-inspired Approach to Code Cleanup</title><link>https://pyvideo.org/pyohio-2023/glacial-refactoring-a-glacier-inspired-approach-to-code-cleanup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Explore a glacier-inspired approach to understanding and refactoring
(seemingly) complicated code. Learn how the glacial retreat can help you
understand code and codescapes. This intentionally slow-moving method
allows the safe reworking of scary-looking code through a practical
incremental approach. Transform code mountains, cliffs, lakes, and
caverns into flattened out easy to explore codebase.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rose Hooper</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/glacial-refactoring-a-glacier-inspired-approach-to-code-cleanup.html</guid><category>PyOhio 2023</category></item><item><title>Hamming it Up! Using Python with Ham Radio</title><link>https://pyvideo.org/pyohio-2023/hamming-it-up-using-python-with-ham-radio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amateur (Ham) Radio is a hobby and service that has been around for
generations. A lot of the concepts have not changed over the years, but
the technologies that enable Hams to talk around the world have evolved
and developed greatly over the years. Ham Radio is all about
experimenting and learning new things with electronics and software. But
what if there is not something that you can find that quite fits what
you want to be able to do?&lt;/p&gt;
&lt;p&gt;In this talk, we will look at some of the ways that Python can be used
to fill in some of the gaps and what Python can do to help you in Ham
Radio.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Lehman</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/hamming-it-up-using-python-with-ham-radio.html</guid><category>PyOhio 2023</category></item><item><title>How Many Times Can One Line Fail? ExceptionGroups &amp; Except*: What They Are and How to Use Them</title><link>https://pyvideo.org/pyohio-2023/how-many-times-can-one-line-fail-exceptiongroups-except-what-they-are-and-how-to-use-them.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async programming can make complex things easy, but at the same time be
hard to get 100% correct; particularly when it comes to exceptions and
handling states outside the &amp;quot;happy path&amp;quot;. Python has been gaining tools
to more easily handle the failure cases, notably in 3.11 a new exception
handling syntax: &lt;tt class="docutils literal"&gt;except*&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Don't know what this does or how to read it? This talk is for you.&lt;/p&gt;
&lt;p&gt;This talk will briefly discuss asyncio and how async code differs from
normal functions, &lt;tt class="docutils literal"&gt;TaskGroups&lt;/tt&gt; and when to use them, and finally
&lt;tt class="docutils literal"&gt;ExceptionGroups&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;try: except*:&lt;/tt&gt; syntax.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Kubera</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/how-many-times-can-one-line-fail-exceptiongroups-except-what-they-are-and-how-to-use-them.html</guid><category>PyOhio 2023</category></item><item><title>How to Test Your Cloud Code Confidently</title><link>https://pyvideo.org/pyohio-2023/how-to-test-your-cloud-code-confidently.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing cloud native Python is one of the easiest ways to build an
application for AWS. However, when it comes to running unit tests on
your code, how do you ensure that your API calls to other AWS services
don't actually change things? Thats where The Stubber comes in! A
lesser-known part of AWS's python SDK Boto3, The Stubber is a way to
mock your API calls and return exactly what AWS promises that you will
get when you invoke their APIs without actually invoking them. This talk
will cover why its important to unit test your Python AWS Lambdas, how
to use the Stubber, and a demo running unit tests with the Stubber.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Drake Pocsatko</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/how-to-test-your-cloud-code-confidently.html</guid><category>PyOhio 2023</category></item><item><title>Inequality Joins in Pandas with Pyjanitor</title><link>https://pyvideo.org/pyohio-2023/inequality-joins-in-pandas-with-pyjanitor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joins in Pandas are equality based. However, there are other scenarios
that require joins on inequality or a combination of equi and non-equi
joins. Examples include a manufacturer wishing to minimise the cost of
storage while maximising profits (increasing the inventory of the more
profitable product, while decreasing the storage for the less profitable
product), or a tax audit to find out which employers earn more, but pay
less tax. Usually in Pandas this is executed via a Cartesian join which
can be inefficient as well as memory intensive. Another option is via an
Interval index; however efficient execution depends on non overlapping
intervals. There is also pandas.merge_asof - however it is limited to
just first,last or nearest matches.&lt;/p&gt;
&lt;p&gt;This talk shows an efficient way to handle inequality joins in Pandas.
It also shows benchmarks that shows significant performance benefits as
well as lower memory usage compared to Cartesian joins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Oranyeli</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/inequality-joins-in-pandas-with-pyjanitor.html</guid><category>PyOhio 2023</category></item><item><title>Iterate, Iterate, Iterate</title><link>https://pyvideo.org/pyohio-2023/iterate-iterate-iterate.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The iteration protocol and generators are Python's power tools. Properly
used, they allow for clearer code that is easier to debug and
understand. The talk will cover the iteration protocol itself, generator
functions and expressions, the itertools and more_itertools libraries,
and how to use them to up your Python level.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/iterate-iterate-iterate.html</guid><category>PyOhio 2023</category></item><item><title>Learn Just Enough Computer Science to Be a Better (Self-taught) Data Scientist/Engineer</title><link>https://pyvideo.org/pyohio-2023/learn-just-enough-computer-science-to-be-a-better-self-taught-data-scientistengineer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an aspiring data scientist or engineer, forging your own path
through the vast landscape of data science and engineering? The journey
can be intimidating, with an ever-expanding array of tools and concepts
to master, both within and beyond the realm of Python. In this talk, I
will be your guide, helping you navigate this wilderness by focusing on
the indispensable knowledge that has opened doors to more projects and
become a proficient self-taught data scientist and engineer.&lt;/p&gt;
&lt;p&gt;Join me as I share my personal experiences and insights, highlighting
the skills and knowledge that have had the most significant impact on my
journey. From the Linux command line and version control with Git to
delving into the basics of computer networks and learning just enough
web development for efficient data scraping. I'll break down these key
components that will empower you on your path to expertise in data
science and engineering.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jian Jin</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/learn-just-enough-computer-science-to-be-a-better-self-taught-data-scientistengineer.html</guid><category>PyOhio 2023</category></item><item><title>Make Your Documentation Interactive with PyScript</title><link>https://pyvideo.org/pyohio-2023/make-your-documentation-interactive-with-pyscript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your documentation is peppered with examples – what if users could run
them in an interactive REPL, right inside the online documentation? With
PyScript, developers can add an interactive Python session to any
webpage, including integration with Sphinx, MkDocs, readthedocs, and
GitHub Pages.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how to enhance your Python web
documentation by making it fully interactive and runnable anywhere, in a
fully serverless way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Glass</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/make-your-documentation-interactive-with-pyscript.html</guid><category>PyOhio 2023</category></item><item><title>Making Our Python Code More Accessible</title><link>https://pyvideo.org/pyohio-2023/making-our-python-code-more-accessible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While web developers work to make websites more accessible to end users,
we rarely talk about the accessibility of the code itself. This talk
gives a brief introduction into accessibility concepts, and a glimpse
into our effort to tackle the accessibility of our Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dmitriy Chukhin</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/making-our-python-code-more-accessible.html</guid><category>PyOhio 2023</category></item><item><title>Mommy, How Are Objects Made? - by Dunder Seuss</title><link>https://pyvideo.org/pyohio-2023/mommy-how-are-objects-made-by-dunder-seuss.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A whimsical explanation of the various dunders and types that
participate in object creation and construction as told by Momma Python
to her child.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Cannon</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/mommy-how-are-objects-made-by-dunder-seuss.html</guid><category>PyOhio 2023</category></item><item><title>(Not-so) Precise Float Arithmetic in Python</title><link>https://pyvideo.org/pyohio-2023/not-so-precise-float-arithmetic-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just like in other programming languages, floating number arithmetics is
not very precise in Python. What makes floats so special and weird that
a simple arithmetic operation might not yield the expected result? Why
is it so? For instance, what happens when you run the following line on
the Python terminal: 0.1+0.1+0.1==0.3? What will be the output? True or
False?&lt;/p&gt;
&lt;p&gt;This small talk will focus on the underlying behavior of floating
arithmetics precision and then discuss a few potential solutions to the
problem in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Syed Muhammad Dawoud Sheraz Ali</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/not-so-precise-float-arithmetic-in-python.html</guid><category>PyOhio 2023</category></item><item><title>Orchestrating Workflows Is a 'cron-ic' Systems Problem. Airflow Is the Modern Solution.</title><link>https://pyvideo.org/pyohio-2023/orchestrating-workflows-is-a-cron-ic-systems-problem-airflow-is-the-modern-solution.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a developer, devops specialist, or SRE, you almost certainly have
recurring computational jobs running on your systems. cron is the
simple, time-tested sysadmin tool for making a Unix host run a task on a
regular schedule.&lt;/p&gt;
&lt;p&gt;However, with the ongoing migration to cloud-based microservices and
APIs, many computational tasks have a large, complex, and widely
distributed graph of upstream dependencies. These dependencies come in
many different forms: for example, a file or other resource arrives; a
service or API becomes available; a database finishes a maintenance
task; the clock strikes midnight.&lt;/p&gt;
&lt;p&gt;Teams that try to manage such complex dependencies with cron inevitably
end up writing brittle, custom code and scripts to ensure that their
jobs execute in the correct order.&lt;/p&gt;
&lt;p&gt;This raises the question: how can a team more effectively define,
manage, visualize, and monitor such complex workflows? An increasingly
popular answer is Apache Airflow, the open-source system for workflow
orchestration.&lt;/p&gt;
&lt;p&gt;From this talk, you will learn about the use cases for Airflow, walk
through some introductory examples of the Python code that defines
workflows, and watch these workflows operating in real-time in the web
UI.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Bennett</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/orchestrating-workflows-is-a-cron-ic-systems-problem-airflow-is-the-modern-solution.html</guid><category>PyOhio 2023</category></item><item><title>Python's Magic for Machine Learning in 15 Minutes</title><link>https://pyvideo.org/pyohio-2023/pythons-magic-for-machine-learning-in-15-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uncover the extraordinary world of Python's machine learning and data
science capabilities in a lightning-fast 15-minute presentation. Join me
for an exhilarating journey as we explore how Python empowers
data-driven insights:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;Python's Potent Toolkit:&lt;/strong&gt; We'll introduce the essential Python
libraries for data manipulation, analysis, and machine learning,
setting the stage for rapid exploration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dazzling Data Alchemy:&lt;/strong&gt; Learn quick techniques for data
preprocessing, visualization, and exploration, unlocking hidden
insights with lightning speed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prompt Predictive Wizardry:&lt;/strong&gt; Witness Python's incredible powers as
we rapidly introduce, create, and deploy a simple machine learning
model to predict the future in the blink of an eye!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In just 15 minutes, you'll grasp the essence of Python's enchanting
capabilities within the world of data science and machine learning. This
presentation promises a thrilling adventure without the need for magic
spells or sorcery. Join us at PyOhio for this whirlwind exploration of
Python's magic for Machine Learning!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Connie Skomra</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/pythons-magic-for-machine-learning-in-15-minutes.html</guid><category>PyOhio 2023</category></item><item><title>Serverless Jupyter Notebook Functions</title><link>https://pyvideo.org/pyohio-2023/serverless-jupyter-notebook-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks are awesome! They are a great tool for both Python
beginners and experienced professionals alike. A problem arises when we
have to &amp;quot;productionize&amp;quot; our Jupyter notebook code into a web service.
What if we didn't have to rewrite our code to do this? That's where
Jupyrest comes in! Jupyrest is a library I created to solve this exact
problem for my team at Microsoft. In this talk I'll show you how you can
turn your Jupyter notebooks into a web service without any modifications
to it. Jupyrest is being used at Microsoft to power hundreds of
microservices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Koushik Krishnan</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/serverless-jupyter-notebook-functions.html</guid><category>PyOhio 2023</category></item><item><title>Slaying Software Zombies with LLMs (and Lesser Incantations)</title><link>https://pyvideo.org/pyohio-2023/slaying-software-zombies-with-llms-and-lesser-incantations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code is organic: it grows and rots with neglect. So does the associated
“meta-code” - like docs, tests, configurations, and requirements. This
is fertile soil for Zombies, a horde of which can seriously disrupt the
software development process.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore how automated testing strategies can be used
to identify and minimize drift in meta-code. Techniques of yore - such
as Behaviour-Driven Development and Living Documentation - are
resuscitated before your eyes using the arcane magic of Large Language
Models (LLMs). Limitations / good targets for application are discussed
in the context of the author's experience.&lt;/p&gt;
&lt;p&gt;And if you act now, we'll throw in two other hyphenated proper nouns
(Provider-Driven Contracts and Example-Based Requirements) for free!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Pereyda Karayan</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/slaying-software-zombies-with-llms-and-lesser-incantations.html</guid><category>PyOhio 2023</category></item><item><title>Thank You &amp; Looking Ahead to PyOhio 2024</title><link>https://pyvideo.org/pyohio-2023/thank-you-looking-ahead-to-pyohio-2024.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thank you to everyone who helped make PyOhio happen this year, including
YOU!&lt;/p&gt;
&lt;p&gt;We can't wait to tell you about PyOhio 2024!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Forgac</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/thank-you-looking-ahead-to-pyohio-2024.html</guid><category>PyOhio 2023</category></item><item><title>Web Scraping Crash Course! With Python and Scrapy</title><link>https://pyvideo.org/pyohio-2023/web-scraping-crash-course-with-python-and-scrapy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;APIs are a great way to consume publicly accessible data. But what do
you do when there's no API? Enter web scraping: a way you can harvest
data out of the same HTML documents you look at in your web browser.&lt;/p&gt;
&lt;p&gt;We'll talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is web scraping?&lt;/li&gt;
&lt;li&gt;What is Scrapy and why should you use it?&lt;/li&gt;
&lt;li&gt;How to scrape data from HTML elements in a web page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Source code for the example project in the talk will be available!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Walters</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/web-scraping-crash-course-with-python-and-scrapy.html</guid><category>PyOhio 2023</category></item><item><title>Welcome!</title><link>https://pyvideo.org/pyohio-2023/welcome.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome to PyOhio!&lt;/p&gt;
&lt;p&gt;Here is some important information before we get started:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pyohio.org/2023/code-of-conduct/"&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pyohio.org/2023/discord/"&gt;Chat on Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.customink.com/fundraising/pyohio-2023"&gt;T-Shirts&lt;/a&gt; –
available through Dec 19!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pyohio.org/volunteer"&gt;Volunteer!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pyohio.org/2023/talks/schedule/"&gt;Conference Schedule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Forgac</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/welcome.html</guid><category>PyOhio 2023</category></item><item><title>What I Learned in Three Years Writing Tests Live</title><link>https://pyvideo.org/pyohio-2023/what-i-learned-in-three-years-writing-tests-live.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Live-streaming the writing of tests on Twitch – twice a week, for three
years – taught me a lot. Join me for a retrospective about the good, the
bad, and the ugly lessons that I learned running the Salt Project Test
Clinic on Twitch during a global pandemic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wayne</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/what-i-learned-in-three-years-writing-tests-live.html</guid><category>PyOhio 2023</category></item><item><title>What Is the `Annotated` Type?</title><link>https://pyvideo.org/pyohio-2023/what-is-the-annotated-type.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PEP 593 introduced the &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; Type in Python 3.9, allowing typing
metadata. In 2023, usage of the type by popular libraries has
significantly increased. For example, &lt;tt class="docutils literal"&gt;FastAPI&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Pydantic&lt;/tt&gt; have
fully adopted the &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type and recommend it as the preferred
syntax for their functionality. In this talk, we will explore usage of
this type in open source projects and take a look at how it might be
used in your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Schelkoph</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/what-is-the-annotated-type.html</guid><category>PyOhio 2023</category></item><item><title>Who Put the Python in My Browser?! A Quick Guide to PyScript!</title><link>https://pyvideo.org/pyohio-2023/who-put-the-python-in-my-browser-a-quick-guide-to-pyscript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By the powers of WASM, Pyodide, and modern web technologies, you can run
Python in the browser with PyScript. From mixing Python with HTML to
using libraries such as Pandas, Matplotlib, Numpy, WebGL, and more...
PyScript allows you to leverage your Python skills to create rich web
applications. Come see what you can do with PyScript!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sadukie</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/who-put-the-python-in-my-browser-a-quick-guide-to-pyscript.html</guid><category>PyOhio 2023</category></item></channel></rss>