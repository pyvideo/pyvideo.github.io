<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Seth Michael Larson</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 May 2025 00:00:00 +0000</lastBuildDate><item><title>Shipping Breaking Changes as the Most Downloaded Python Package</title><link>https://pyvideo.org/pycascades-2021/shipping-breaking-changes-as-the-most-downloaded-python-package.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will start with a brief introduction into what urllib3 is, what it accomplishes, and why it was created:&lt;/p&gt;
&lt;p&gt;“urllib3 is a tool that speaks a special language that lets you download puppy pictures from the Internet”. That language that urllib3 speaks is “HTTP”. HTTP is one of the most important network protocols ever invented, so much so that engineers are rewriting TCP just so cellphones can speak HTTP better and DNS is done over HTTPS because it’s easier to secure HTTP than it is to secure DNS. HTTP is ubiquitous and it’s likely not going away any time soon.&lt;/p&gt;
&lt;p&gt;So then it matters that Python’s HTTP story is a very good one.  In the beginning Python’s included HTTP library had a few key missing features, like supporting HTTPS for security, redirects, connection pooling, thread safety, multipart encoding, retries, and compression.  All of these features are necessities of an HTTP library and when urllib3 was first written these things weren’t so easy with the standard library, so Andrey created urllib3 in 2008.&lt;/p&gt;
&lt;p&gt;Around that same time came Python 3, things became even tougher because the HTTP library had changed between Python 2 and 3 along with Python’s handling of binary strings. urllib3 juggles all of these nuances to make HTTP easy for users, especially those who were trying to write libraries that also supported Python 2 and 3 to make the migration between the two major versions smoother.&lt;/p&gt;
&lt;p&gt;Now that 12 years have passed, urllib3 is as ubiquitous within the Python ecosystem as HTTP. The package was downloaded over a billion times in the past 12 months, about 3 millions times per day. And with Python 2 riding off into the sunset our team is looking to solve new challenges coming for Python and HTTP.&lt;/p&gt;
&lt;p&gt;After three amazing in-person conferences, this time we're moving PyCascades online.&lt;/p&gt;
&lt;p&gt;PyCascades is a regional PyCon in the Pacific Northwest, celebrating the west coast Python developer and user community. Our organizing team includes members of the Vancouver, Seattle, and Portland Python user groups.&lt;/p&gt;
&lt;p&gt;Videos are released as CC BY-NC-SA 4.0.&lt;/p&gt;
&lt;p&gt;Produced by Next Day Video Australia: &lt;a class="reference external" href="https://nextdayvideo.com.au"&gt;https://nextdayvideo.com.au&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#pycascades #pycon #python #conference&lt;/p&gt;
&lt;p&gt;Sat Feb 20 16:40:00 2021 at Prerecorded Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-02-20:/pycascades-2021/shipping-breaking-changes-as-the-most-downloaded-python-package.html</guid><category>PyCascades 2021</category><category>#pycascades#pycon#python#conference</category><category>pycascades</category><category>pycascades2021</category></item><item><title>State of Python Supply Chain Security (Sponsor: Alpha-Omega)</title><link>https://pyvideo.org/pycon-us-2024/state-of-python-supply-chain-security-sponsor-alpha-omega.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alpha-Omega is investing in the security of open source software
ecosystems like Python by staffing security champions focused on
improving software supply chain security. In this session attendees will
hear from the inaugural PSF Security Developer-in-Residence about
improvements that have been made to Python and how through collaboration
and knowledge sharing the tides are raised for all ecosystems and users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-16:/pycon-us-2024/state-of-python-supply-chain-security-sponsor-alpha-omega.html</guid><category>PyCon US 2024</category></item><item><title>Phantom Dependencies: is your requirements.txt haunted?</title><link>https://pyvideo.org/pycon-us-2025/phantom-dependencies-is-your-requirementstxt-haunted.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know there’s more than Python code included in Python packages? This might be a surprise, especially if you’ve inspected your list of dependencies and only found exactly what you've pip-installed. There's something else lurking in the dark corners of your virtual environments.&lt;/p&gt;
&lt;p&gt;Modern software systems are complex, graph-like, and difficult to measure by both humans and our tools. Luckily there’s an answer: Software Bill-of-Materials (SBOMs). SBOMs can describe any amalgamation of Python, C, C++, Rust, and JavaScript in your Python application which enables static code analysis, license compliance, vulnerability management, and complying with new security regulations.&lt;/p&gt;
&lt;p&gt;By the end of this talk you'll know what Software Bill-of-Materials documents are, why they are useful, and what you need to do when someone asks for one!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/phantom-dependencies-is-your-requirementstxt-haunted.html</guid><category>PyCon US 2025</category></item><item><title>PSF - Update from our Security Engineers</title><link>https://pyvideo.org/pycon-us-2025/psf-update-from-our-security-engineers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Update from Python Software Foundation Security Engineers, Seth Michael Larson and Mike Fiedler&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/psf-update-from-our-security-engineers.html</guid><category>PyCon US 2025</category></item><item><title>Reviewing another year of security partnership between the PSF &amp; Alpha-Omega (Sponsor: Alpha-Omega)</title><link>https://pyvideo.org/pycon-us-2025/reviewing-another-year-of-security-partnership-between-the-psf-alpha-omega-sponsor-alpha-omega.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alpha-Omega's mission is to protect society by catalyzing sustainable security improvements to the most critical open source software projects and ecosystems. Funded by Amazon AWS, Google, Microsoft, and Citi, Alpha-Omega has partnered with the Python Software Foundation to support two critical security-focused roles for the Python Ecosystem. Last year's talk with Seth Larson and Michael Winser was the origin story of this effort and showed the road ahead. This year's talk will be at least 50% more interesting and entertaining because we're adding Mike Fiedler. Together we have a lot to talk about.&lt;/p&gt;
&lt;p&gt;Michael Winser is the co-founder of Alpha-Omega. Seth Larson is the Python Security Developer in Residence and Mike Fiedler is the PyPI Safety and Security Engineer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/reviewing-another-year-of-security-partnership-between-the-psf-alpha-omega-sponsor-alpha-omega.html</guid><category>PyCon US 2025</category></item></channel></rss>