<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>I'm So Meta Even This Acronym...</title><link>https://pyvideo.org/kiwi-pycon-2019/im-so-meta-even-this-acronym.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to better understand metaclasses?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Curtis Maloney</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/im-so-meta-even-this-acronym.html</guid><category>metaclass</category><category>metaclasses</category></item><item><title>Python Type and Object</title><link>https://pyvideo.org/pycon-japan-2012/python-type-and-object.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation is to explain type and object concept in Python object model. To understand the type and object is useful when you try to understand metaclass proramming in Python, especially when you are confused the attribute you want to modify is a type attribute or a class attribute or a object attribute.
I would like to introduce how an object be created and how a class be created. then introduce how I write a meta class to trace all phase of creating an object.
If you are new to meta class programming, you may want to check this slide 'What can meta class do for you'(&lt;a class="reference external" href="http://www.slideshare.net/hychen/what-can-meta-class-do-for-you-pycon-taiwan-2012"&gt;http://www.slideshare.net/hychen/what-can-meta-class-do-for-you-pycon-taiwan-2012&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hsin-Yi Chen</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pycon-japan-2012/python-type-and-object.html</guid><category>metaclass</category></item><item><title>Metaclases: exactamente qué y (sobre todo) por qué</title><link>https://pyvideo.org/pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de estar charla es abordar un problema que parece ser desafortunadamente común entre el material disponible sobre las metaclases: por más que nos lo expliquen nos sigue sin quedar claro qué son las metaclases… o lo olvidamos a los diez minutos. Los ejemplos que se usan para ilustrar esa cosa tan arcana son casi inevitablemente crípticos, solucionando de forma compleja problemas demasiado rebuscados y que no nos hemos encontrado jamás en nuestro día a día. ¿Tienen realmente alguna utilidad práctica, o son sólo una excusa usada por ponentes para parecer r/iamverysmart? ¿Por qué deberían importarme a mí, con mi nivel medio de Python?&lt;/p&gt;
&lt;p&gt;Lo que vamos a hacer en esta charla es empezar describiendo un problema: queremos implementar el mismo comportamiento (por ejemplo, logging) en todos los métodos de mi clase. Para ello tenemos varias opciones, en creciente orden de complejidad: (a) copiar y pegar la misma línea de código en todos los métodos, (b) usar un decorador en cada método y (c) usar un decorador de clase. Pero ninguna solución es ideal, y la falta de elegancia provoca lamentos y lágrimas. Es ante un problema así cuando las metaclases tienen una función, y agradeceremos que se encuentren en nuestro repertorio de habilidades de Python.&lt;/p&gt;
&lt;p&gt;Entendiendo por qué nos hacen falta, procedereremos a explicar cómo crear una: primero repasando brevemente la función de __new__() e __init__() para clases normales, y a continuación mostrando cómo hacer lo mismo con las metaclases. Ilustraremos esto con varios ejemplos, usando metaclases para añadir funcionalidad de auto-logging o compilación just-in-time, como hace Numba, a nuestro código. Por último, y a modo de curiosidad, continuaremos hacia mayores niveles de abstracción, aprendiendo qué son los hooks de metaclases y para qué son útiles los ficheros .pth.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 23 Sep 2017 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-23:pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html</guid><category>metaclass</category></item><item><title>Metaprogramación en Python</title><link>https://pyvideo.org/pycon-es-2015/pycon-es-2015-metaprogramacion-en-python-raul-cumplido-track-avanzado.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Según wikipedia: “La metaprogramación consiste en escribir programas que escriben o manipulan otros programas (o a sí mismos) como datos, o que hacen en tiempo de compilación parte del trabajo que, de otra forma, se haría en tiempo de ejecución. Esto permite al programador ahorrar tiempo en la producción de código.”&lt;/p&gt;
&lt;p&gt;En esta charla veremos diferentes mecanismos que Python proporciona como:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decoradores.&lt;/li&gt;
&lt;li&gt;Metaclasses.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raúl Cumplido</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/pycon-es-2015-metaprogramacion-en-python-raul-cumplido-track-avanzado.html</guid><category>Track Avanzado</category><category>metaprograming</category><category>metaclass</category><category>decorator</category></item></channel></rss>