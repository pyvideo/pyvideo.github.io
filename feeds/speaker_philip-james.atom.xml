<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_philip-james.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-30T00:00:00+00:00</updated><entry><title>The Elephant and the Serpent: Using Mastodon with Python</title><link href="https://pyvideo.org/pycon-latam-2019/the-elephant-and-the-serpent-using-mastodon-with-python.html" rel="alternate"></link><published>2019-08-30T00:00:00+00:00</published><updated>2019-08-30T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2019-08-30:pycon-latam-2019/the-elephant-and-the-serpent-using-mastodon-with-python.html</id><summary type="html"></summary></entry><entry><title>Account Security Patterns: How Logged-In Are you?</title><link href="https://pyvideo.org/pycon-us-2019/account-security-patterns-how-logged-in-are-you.html" rel="alternate"></link><published>2019-05-05T13:10:00+00:00</published><updated>2019-05-05T13:10:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2019-05-05:pycon-us-2019/account-security-patterns-how-logged-in-are-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Account security means making sure your users are only ones who can
access their accounts. Account takeovers happen for a variety of reasons
-- password re-use, compromised computers, guessable passwords, and
more. This talk gives you concepts and concrete skills that will help
you identify and prevent account takeovers and limit the damage. It’s
inspired by practices in use at GitHub, Google, and the Python Package
Index.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>The Elephant and the Serpent: Using Mastodon with Python</title><link href="https://pyvideo.org/pycon-us-2019/the-elephant-and-the-serpent-using-mastodon-with-python.html" rel="alternate"></link><published>2019-05-04T12:10:00+00:00</published><updated>2019-05-04T12:10:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/the-elephant-and-the-serpent-using-mastodon-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the past two years, an Open Source social network has been building
on the foundations laid by years of Open Web work and quietly growing to
provide a viable alternative to the social network megacorps we’ve grown
used to. It’s name is Mastodon, and it wants you to be part of the
community.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll learn what Mastodon is, how it works, how you can
participate, and how you can interact with the community using Python.
Along the way, we’ll learn about OAuth, APIs, and best practices for
writing bots. Attendees will walk away with the knowledge of how to
build a Mastodon bot.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Account Security for the Fashionable App Developer</title><link href="https://pyvideo.org/pycascades-2019/account-security-for-the-fashionable-app-developer.html" rel="alternate"></link><published>2019-02-24T00:00:00+00:00</published><updated>2019-02-24T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2019-02-24:pycascades-2019/account-security-for-the-fashionable-app-developer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the same way that we feel safe giving our info to some app and nervous giving our info to other apps, your users have some feeling of safety or concern with the apps you develop. We’ll go over design patterns and Python libraries that will help you protect your user’s accounts.&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/account-security-for-the-fashionable-app-developer/"&gt;https://2019.pycascades.com/talks/account-security-for-the-fashionable-app-developer/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>All in the timing: How side channel attacks work</title><link href="https://pyvideo.org/north-bay-python-2018/all-in-the-timing-how-side-channel-attacks-work.html" rel="alternate"></link><published>2018-11-03T00:00:00+00:00</published><updated>2018-11-03T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2018-11-03:north-bay-python-2018/all-in-the-timing-how-side-channel-attacks-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you’ll learn about a category of security issue known as
side channel attacks. You’ll be amused to see how features like
automatic data compression, short-circuit execution, and deterministic
hashing can be abused to bypass security systems. No security background
knowledge is required. The talk assumes at least intermediate Python
experience.&lt;/p&gt;
</summary></entry><entry><title>All in the Timing: Side-Channel Attacks</title><link href="https://pyvideo.org/pycon-au-2018/all-in-the-timing-side-channel-attacks.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2018-08-25:pycon-au-2018/all-in-the-timing-side-channel-attacks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here, you’ll learn about a category of security issue known as side channel attacks. You’ll be amused to see how features like automatic data compression, short-circuit execution, and deterministic hashing can be abused to bypass security systems. No security background knowledge is required.&lt;/p&gt;
</summary></entry><entry><title>All in the timing: How side channel attacks work</title><link href="https://pyvideo.org/pycon-us-2018/all-in-the-timing-how-side-channel-attacks-work.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/all-in-the-timing-how-side-channel-attacks-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you’ll learn about a category of security issue known as side channel attacks. You’ll be amused to see how features like automatic data compression, short-circuit execution, and deterministic hashing can be abused to bypass security systems. No security background knowledge is required. The talk assumes at least intermediate Python experience.&lt;/p&gt;
&lt;p&gt;We’ll take a tour of real side channel vulnerabilities in open source Python codebases, including the patches that fixed them. It also offers practical advice for avoiding these issues. My goal is to demystify this topic, even if you aren’t writing security-critical software.&lt;/p&gt;
</summary><category term="security"></category><category term="vulnerability"></category></entry><entry><title>API-Driven Django</title><link href="https://pyvideo.org/pycon-us-2018/api-driven-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/api-driven-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the web continues to evolve, the demand for data-driven backends matched with rich frontend experiences grows every day. Django comes with a robust templating system and rendering engine, but more and more web applications using Django are just focusing on it’s API abilities.&lt;/p&gt;
&lt;p&gt;What if we could have the best of both worlds? What if we could use Django and django-rest-framework to write views that let us prototype quickly using the Django templating system, and have those same views return API responses to rich clients?&lt;/p&gt;
&lt;p&gt;In this tutorial, we’ll build a sample data collection and display web application, taking advantage of the ways Django and django-rest-framework work together. The end result will be a web application you could adapt for many kinds of data collection needs, and you’ll come away knowing how to get a rich API and a frontend prototype out of just one Django view.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Type uWSGI; press enter; what happens?</title><link href="https://pyvideo.org/pycon-us-2017/type-uwsgi-press-enter-what-happens.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Asheesh Laroia</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/type-uwsgi-press-enter-what-happens.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're a pretty knowledgeable Python web application developer, but how
does that web application get served to the world? For many of us, uWSGI
is the magic that makes our application available, and in this talk
we'll look at how uWSGI works with the OS and the networking stack to
make the magic happen.&lt;/p&gt;
</summary></entry><entry><title>Frog and Toad Learn Django Security</title><link href="https://pyvideo.org/pydx-2016/frog-and-toad-learn-django-security.html" rel="alternate"></link><published>2016-12-30T00:00:00+00:00</published><updated>2016-12-30T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2016-12-30:pydx-2016/frog-and-toad-learn-django-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2016 talk by Philip James&lt;/p&gt;
&lt;p&gt;Come join us by the fire as we have Security Story Time with our friends, Frog and Toad. With them, you'll learn about all the things Django does to protect users and developers out of the box. We'll look at simplified code samples from the Django codebase to see what's happening under the hood, and cover how to make the Django security model even stronger in your application.&lt;/p&gt;
</summary><category term="security"></category><category term="django"></category></entry><entry><title>Safe-ish By Default</title><link href="https://pyvideo.org/pybay-2016/safe-ish-by-default.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/safe-ish-by-default.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come join us by the fire as we have Security Story Time with our friends, Frog and Toad. With them, you'll learn about all the things Django does to protect users and developers out of the box. We'll look at simplified code samples from the Django codebase to see what's happening under the hood, and cover how to make the Django security model even stronger in your application
​
Abstract
Introduction to the story, and the characters. Safe-ish: Talk about Django’s Security Model and how it tries to provide sane defaults for developers&lt;/p&gt;
&lt;p&gt;Run-through of the parts of the django security model:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;XSS (brief definition). How do you turn it off? Mark Safe, | n, safe&lt;/li&gt;
&lt;li&gt;CSRF (brief definition). Django has middleware that checks POST requests for a token. Token is stored in cookie, also. Side-effect: harder to JS. Also, only an issue if you’re already owned, so maybe not an issue?. How to get around it? csrf_exempt&lt;/li&gt;
&lt;li&gt;SQLi (brief definition). Django’s ORM makes clean sql, (even when given bad data?). How? How to get around it: extra()/RawSQL()&lt;/li&gt;
&lt;li&gt;Clickjacking protection (brief definition). Django has middleware that sets headers browsers are supposed to respect. How to get around it: xframe_options_exempt, xframe_options_deny, xframe_options_sameorigin&lt;/li&gt;
&lt;li&gt;HTTPS. This one is less &amp;quot;out of the box&amp;quot; than the others, so won’t be talked about here.&lt;/li&gt;
&lt;li&gt;Host Header Validation (brief definition). Django verifies against allowed hosts in settings. How? get_host()&lt;/li&gt;
&lt;li&gt;Session security. What are django sessions?. Cookie-based by design. How can we make this better?&lt;/li&gt;
&lt;li&gt;Overall: Vigilance. Be aware of uses of this within your product&lt;/li&gt;
&lt;li&gt;HTTPS: Use it!. Set the correct settings. SECURE_SSL_REDIRECT: How does it work?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Philip is a Senior Software Engineer at Eventbrite. In his spare time, he writes novels, makes twitter bots, and gives technical talks. He used to run a webcomic, but there's just no money in it, you know? Philip is a refugee from the video games industry, and wishes anyone still there the best of luck. Philip has spoken at conferences about Python, Django, Node.js, and Linux. Philip believes in the web.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/philip-james-safe-ish-by-default-the-django-security-model-and-how-to-make-it-better-security-intermediate"&gt;https://speakerdeck.com/pybay2016/philip-james-safe-ish-by-default-the-django-security-model-and-how-to-make-it-better-security-intermediate&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PyDX 2015: Type Python, Press Enter, What Happens?</title><link href="https://pyvideo.org/pydx-2015/pydx-2015-type-python-press-enter-what-happens.html" rel="alternate"></link><published>2015-10-10T00:00:00+00:00</published><updated>2015-10-10T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2015-10-10:pydx-2015/pydx-2015-type-python-press-enter-what-happens.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2015 talk by Philip James&lt;/p&gt;
</summary></entry><entry><title>Day 3 Lightning Talks</title><link href="https://pyvideo.org/djangocon-us-2016/day-3-lightning-talks.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Andrew Sauber</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-us-2016/day-3-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=00m15s"&gt;00:15&lt;/a&gt; - Andrew Sauber&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=05m04s"&gt;05:04&lt;/a&gt; - Dan Davis&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=09m21s"&gt;09:21&lt;/a&gt; - Justin Caratzas&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=14m02s"&gt;14:02&lt;/a&gt; - Kevin Daum&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=17m10s"&gt;17:10&lt;/a&gt; - Adrienne Lowe&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=20m52s"&gt;20:52&lt;/a&gt; - Ethan McCreadie&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=25m02s"&gt;25:02&lt;/a&gt; - Dan Dietz&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=29m56s"&gt;29:56&lt;/a&gt; - Philip James&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=fmmhxGcLTBQ&amp;amp;t=32m56s"&gt;32:56&lt;/a&gt; - Haris Ibrahim K.V.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Frog and Toad Learn About Django Security</title><link href="https://pyvideo.org/djangocon-us-2016/frog-and-toad-learn-about-django-security.html" rel="alternate"></link><published>2016-08-10T00:00:00+00:00</published><updated>2016-08-10T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2016-08-10:djangocon-us-2016/frog-and-toad-learn-about-django-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2016 - Frog and Toad Learn About Django Security by Philip James&lt;/p&gt;
&lt;p&gt;Django Security Talk Notes&lt;/p&gt;
&lt;p&gt;Introduction
Philip James, how long I’ve worked with Python and Django, background at EB
Introduction to the story, and the characters
Safe-ish: Talk about Django’s Security Model and how it tries to provide sane defaults for developers
Run-through of the parts of the django security model&lt;/p&gt;
&lt;p&gt;XSS (brief definition)&lt;/p&gt;
&lt;p&gt;Django escapes characters by default&lt;/p&gt;
&lt;p&gt;How?&lt;/p&gt;
&lt;p&gt;How do you turn it off? Mark Safe, | n, safe&lt;/p&gt;
&lt;p&gt;CSRF (brief definition)&lt;/p&gt;
&lt;p&gt;Django has middleware that checks POST requests for a token&lt;/p&gt;
&lt;p&gt;How?&lt;/p&gt;
&lt;p&gt;Token is stored in cookie, also&lt;/p&gt;
&lt;p&gt;Could be better? Make cookie httponly&lt;/p&gt;
&lt;p&gt;Side-effect: harder to JS. Also, only an issue if you’re already owned, so maybe not an issue?&lt;/p&gt;
&lt;p&gt;How to get around it? csrf_exempt&lt;/p&gt;
&lt;p&gt;SQLi (brief definition)&lt;/p&gt;
&lt;p&gt;Django’s ORM makes clean sql, (even when given bad data?)&lt;/p&gt;
&lt;p&gt;How?&lt;/p&gt;
&lt;p&gt;How to get around it: extra()/RawSQL()&lt;/p&gt;
&lt;p&gt;Clickjacking protection (brief definition)&lt;/p&gt;
&lt;p&gt;Django has middleware that sets headers browsers are supposed to respect&lt;/p&gt;
&lt;p&gt;Which browsers? &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.8/ref/clickjacking/#limitations"&gt;https://docs.djangoproject.com/en/1.8/ref/clickjacking/#limitations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to get around it: xframe_options_exempt, xframe_options_deny, xframe_options_sameorigin&lt;/p&gt;
&lt;p&gt;HTTPS&lt;/p&gt;
&lt;p&gt;This one is less &amp;quot;out of the box&amp;quot; than the others, so won’t be talked about here.
Host Header Validation (brief definition)&lt;/p&gt;
&lt;p&gt;Django verifies against allowed hosts in settings&lt;/p&gt;
&lt;p&gt;How? get_host()&lt;/p&gt;
&lt;p&gt;Session security&lt;/p&gt;
&lt;p&gt;What are django sessions?&lt;/p&gt;
&lt;p&gt;Cookie-based by design&lt;/p&gt;
&lt;p&gt;How can we make this better?&lt;/p&gt;
&lt;p&gt;Overall: Vigilance. Be aware of uses of this within your product&lt;/p&gt;
&lt;p&gt;XSS, CSRF, SQLi, Clickjacking: Have them all enabled, write rules to check for &amp;quot;escape-hatch&amp;quot; functions&lt;/p&gt;
&lt;p&gt;HTTPS:&lt;/p&gt;
&lt;p&gt;Use it!&lt;/p&gt;
&lt;p&gt;Set the correct settings&lt;/p&gt;
&lt;p&gt;SECURE_SSL_REDIRECT: How does it work?&lt;/p&gt;
&lt;p&gt;Other things&lt;/p&gt;
&lt;p&gt;django-secure&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.ponycheckup.com/"&gt;https://www.ponycheckup.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nerd.kelseyinnis.com/blog/2015/09/08/making-django-really-really-ridiculously-secure/"&gt;http://nerd.kelseyinnis.com/blog/2015/09/08/making-django-really-really-ridiculously-secure/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Type UWSGI; Press Enter; What Happens?</title><link href="https://pyvideo.org/djangocon-us-2017/type-uwsgi-press-enter-what-happens.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/type-uwsgi-press-enter-what-happens.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is aiming right at professional or experienced amateur Django developers who want to learn about one of the core technologies used in modern web apps. We’ll do our best to make it accessible for all, but it’s going to be best to come in with working knowledge of web applications and a rough understanding of web servers.&lt;/p&gt;
&lt;p&gt;We’ll be covering how uWSGI serves Python web applications, how it manages workers and processes, and how it works with the operating system to handle networking. Our goal is to show how this works both in code and through abstractions, recognizing that different audience members are going to grasp things in different ways.&lt;/p&gt;
&lt;p&gt;The hope is that attendees will walk away with a working of knowledge of how their apps interact with the network and the operating system through uWSGI, and that a commonly-used but less-understood piece of software will become demystified.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2017.djangocon.us/talks/type-uwsgi-press-enter-what-happens/"&gt;https://2017.djangocon.us/talks/type-uwsgi-press-enter-what-happens/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Safe-Ish by Default: The Django Security Model and How to Make it Better</title><link href="https://pyvideo.org/djangocon-europe-2016/safe-ish-by-default-the-django-security-model-and-how-to-make-it-better.html" rel="alternate"></link><published>2016-04-01T00:00:00+00:00</published><updated>2016-04-01T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2016-04-01:djangocon-europe-2016/safe-ish-by-default-the-django-security-model-and-how-to-make-it-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can find more about this talk on &lt;a class="reference external" href="https://2016.djangocon.eu/speakers/23"&gt;djangocon.eu&lt;/a&gt;. This video is hosted by &lt;a class="reference external" href="http://opbeat.com/community/posts/safe-ish-by-default-the-django-security-model-and-how-to-make-it-better-by-philip-james/"&gt;opbeat.com&lt;/a&gt;.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Type python, press enter. What happens?</title><link href="https://pyvideo.org/pycon-us-2015/type-python-press-enter-what-happens.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Asheesh Laroia</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/type-python-press-enter-what-happens.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk discusses how the Python interpreter starts, from the
perspective of the operating system (OS). Together, we will see the ins
&amp;amp; outs of processes: fork(), exec(), stdin, and stdout.&lt;/p&gt;
&lt;p&gt;It focuses on OS concepts and requires no background knowledge, using
analogies to Python data structures. (The talk does not discuss Python’s
own initialization, such as site.py or global variables.)&lt;/p&gt;
</summary></entry></feed>