<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Command-Line</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Become a command line wizard</title><link>https://pyvideo.org/europython-2019/become-a-command-line-wizard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many modern terminal tools with vastly improved user
experiences as compared to their traditional alternatives. This talk
aims to show off some of those modern terminal tools and compare them
side by side with the traditional ones.&lt;/p&gt;
&lt;p&gt;Python is not only used by software developers with fancy IDEs but also
by DevOps engineers, administrators, and on remote development machines
where using a GUI is impractical. Therefore, many people are stuck with
a terminal interface only and have to use tools like vim, grep, find,
wc, cloc, less and many others to explore their way around their Python
programs.&lt;/p&gt;
&lt;p&gt;However, thanks to the advent of many new and improved tools, we can do
many of the same tasks better, faster and with nicer ergonomics.&lt;/p&gt;
&lt;p&gt;This talk will show off effective use of vim as an IDE with completions
and linting provided by LSP, fd (instead of find) for finding files,
ripgrep (instead of grep) for searching strings, tokei (instead of cloc)
for counting lines of code, bat (instead of cat) for looking at files,
hyperfine for microbenchmarking, httpie (instead of curl) for making
HTTP requests, sd (instead of sed) for text replacement.&lt;/p&gt;
&lt;p&gt;This talk should make terminal work more approachable for all attendees
by showing off how to do some everyday tasks on the terminal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sven-Hendrik Haase</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:/europython-2019/become-a-command-line-wizard.html</guid><category>EuroPython 2019</category><category>Command-Line</category><category>Linux</category><category>System Administration</category><category>Tooling</category><category>Unix</category></item><item><title>Bioinformatics pipeline for revealing tumour heterogeneity</title><link>https://pyvideo.org/europython-2019/bioinformatics-pipeline-for-revealing-tumour-heterogeneity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Reproducibility of research is a common issue in science, especially
in computationally expensive research fields e.g. cancer research.&lt;/div&gt;
&lt;div class="line"&gt;A comprehensive picture of the genomic aberrations that occur during
tumour progression and the resulting intra-tumour heterogeneity, is
essential for personalised and precise cancer therapies. With the
change in the tumour environment under treatment, heterogeneity allows
the tumour additional ways to evolve resistance, such that
intra-tumour genomic diversity is a cause of relapse and treatment
failure. Earlier bulk sequencing technologies were incapable of
determining the diversity in the tumour.&lt;/div&gt;
&lt;div class="line"&gt;Single-cell DNA sequencing - a recent sequencing technology - offers
resolution down to the level of individual cells and is playing an
increasingly important role in this field.&lt;/div&gt;
&lt;div class="line"&gt;We present a reproducible and scalable Python data analysis pipeline
that employs a statistical model and an MCMC algorithm to infer the
evolutionary history of copy number alterations of a tumour from
single cells. The pipeline is built using Python, Conda environment
management system and the Snakemake workflow management system. The
pipeline starts from the raw sequencing files and a settings file for
parameter configurations. After running the data analysis, pipeline
produces report and figures to inform the treatment decision of the
cancer patient.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mustafa Anil Tuncel</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:/europython-2019/bioinformatics-pipeline-for-revealing-tumour-heterogeneity.html</guid><category>EuroPython 2019</category><category>Algorithms</category><category>Analytics</category><category>C-Languages</category><category>Command-Line</category><category>Data Science</category></item><item><title>Bringing your Python script to more users!</title><link>https://pyvideo.org/europython-2020/bringing-your-python-script-to-more-users.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick tour from CLI through GUI to Web app with image size reduction script&lt;/p&gt;
&lt;p&gt;It is wonderful to automate boring stuffs with Python.
In Japan, new introductory books are being published every month and more and more Pythonistas are working on automation.
A Python script that is useful to you may be useful to others.
So I talk about how to enable others to use your script.&lt;/p&gt;
&lt;p&gt;In this talk, I use a simple script which can reduce the width and the height of a specified image in your computer.
I assume someone who's read the introductory book can understand the script.&lt;/p&gt;
&lt;p&gt;First, I introduce Command Line Interface (CLI) to solve hardcoding in the sample script.
After implementing CLI, you don't need to edit the script.
Second, I introduce Grafical User Interface (GUI) to make the script more user-friendly.
Finally, I introduce web application so that users can the script without installation. All users have to do is connecting the Internet!&lt;/p&gt;
&lt;p&gt;The timeline is supposed to be the following:&lt;/p&gt;
&lt;p&gt;# Introduction (3min)
- self-introduction
- motivation of this talk
- sample script (pathlib, Pillow)&lt;/p&gt;
&lt;p&gt;# CLI (5min)
- problem: need to edit the script
- introduce argparse module (pass target file path from command line)
- about positional arguments and optional arguments
- check whether a path points an existing file (type parameter of add_argument())&lt;/p&gt;
&lt;p&gt;# GUI (9min)
- problem: CLI is not easy to handle than GUI
- introduce eel
- eel's elements: HTML, CSS, JavaScript
- hello world in eel
- file access in eel app
- convert sample script to eel app (user can see which image is specified as targetðŸ˜ƒ)
- how to distribute&lt;/p&gt;
&lt;p&gt;# Web app (9min)
- problem: Users need to install
- introduce Web app
- server / client
- actually eel's elements are used in web app (we can recycle codes)
- introduce Flask
- hello world in flask
- static files in web app
- how to deploy (heroku)&lt;/p&gt;
&lt;p&gt;# wrap up (1min)
# Q&amp;amp;A (3min)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Takuya Futatsugi</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/bringing-your-python-script-to-more-users.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Command-Line</category><category>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</category></item><item><title>The Hitchhiker's Guide to CLIs in Python</title><link>https://pyvideo.org/europython-2020/the-hitchhikers-guide-to-clis-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn all about CLIs and how to create one&lt;/p&gt;
&lt;p&gt;Command-line applications and interfaces are used by both newcomers and experienced Python developers everyday. But do you know how they came to be? Hop on to this ship as we go through the CLI galaxy and look at its history, explore the CLI anatomy and discover some Python packages that can help us create them.&lt;/p&gt;
&lt;p&gt;Weâ€™ll then look at some widely used CLIs of our time. And emulate one of them by creating our own CLI using Click. Finally, weâ€™ll package it and publish it on PyPI. Are you ready to travel faster-than-light using this shipâ€™s Infinite Improbability Drive? Carry your towel!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vinayak Mehta</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/the-hitchhikers-guide-to-clis-in-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Command-Line</category><category>Development</category><category>Python general</category><category>The Answer to Life the Universe and Everything Else</category><category>Tooling</category></item><item><title>Writing Command Line Friendly Applications</title><link>https://pyvideo.org/pycon-israel-2018/writing-command-line-friendly-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In &amp;quot;The Art of Unix Programming&amp;quot; ESR defines the rule of composition as: Design programs to be connected with other programs.&lt;/p&gt;
&lt;p&gt;We'll discuss how to write applications that are good citizens of the command line. These applications can be show display nice help, accept data from standard input or files, emit only required data to standard output or files and more. We'll show how to use the argparse module to achieve these goals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miki Tebeka</dc:creator><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-04:/pycon-israel-2018/writing-command-line-friendly-applications.html</guid><category>PyCon Israel 2018</category><category>command line</category><category>argparse</category></item><item><title>Awesome CLI</title><link>https://pyvideo.org/pycon-italia-2017/awesome-cli.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to get user input from your command line program?
Or maybe color the output a bit? Or do you want to write an immersive
terminal application like top, or even vim? Then you need to speak a bit
of terminal! This talk describes how to talk to your terminal from
scratch and goes on to show why the Python library prompt-toolkit is so
awesome.&lt;/p&gt;
&lt;p&gt;The terminal emulators we run so many of our programming tools in are
more powerful than we give them credit for, and the key to that power is
understanding the interface. This talk will cover terminal colors and
styles, writing to arbitrary portions of the screen, handling signals
from the terminal, determining the terminalâ€™s dimensions and scrollback
buffer behavior.&lt;/p&gt;
&lt;p&gt;Terminal programming can get hairy, especially if you want to support
multiple platforms like Mac, Linux and Win; along the way weâ€™ll deal
with encoding issues, automatisation issues and look into 4 decadesâ€™ of
terminal communication. By gaining a deeper understanding of these
issues, weâ€™ll be able to choose from the abstractions over them offered
by Python libraries like Blessings, prompt-toolkit, asciimatics etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Fink</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:/pycon-italia-2017/awesome-cli.html</guid><category>PyCon Italia 2017</category><category>terminal</category><category>prompt-toolkit</category><category>cli</category><category>command-line</category></item><item><title>Ansible roles, private git repos and the Ansible Galaxy tool</title><link>https://pyvideo.org/pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a python tool that automates the management of an IT
infrastructure. It is easy to learn but rushing to use it with a limited
knowledge of its best practices leads to not reusable code.&lt;/p&gt;
&lt;p&gt;Creating reusable Ansible roles is a strongly encouraged practice, in
fact there is a tool designed just for this purpose: Ansible Galaxy. It
comes bundled with Ansible and its purpose is to download roles from the
Galaxy hub and other sources.&lt;/p&gt;
&lt;p&gt;This talk wants to show how we manage our Ansible roles and their
dependencies in a consistent way by means of Ansible Galaxy. It will
also offer an overview of how Ansible roles can be tested.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">serena lorenzini</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:/pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</guid><category>PyCon Italia 2017</category><category>config-ninja</category><category>continuous-integration</category><category>command-line</category><category>gitlab</category><category>ansible</category><category>best-practices</category></item><item><title>Presenting pysftpserver: OpenSSH SFTP service with Python</title><link>https://pyvideo.org/pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to connect to an OpenSSH SFTP server and keep track
of the user activities? Or maybe limit user permissions? Or define
specific callbacks to react to user actions?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pysftpserver&lt;/em&gt; is an OpenSSH SFTP wrapper, written purely in Python. It
is yet another cool example of what you might already know: how powerful
Python can be while staying extremely simple.&lt;/p&gt;
&lt;p&gt;This talk aims at presenting the tool and a few use cases in which it
was harnessed, including one with Django and Django REST Framework. It
requires a good knowledge of Python and Django and understanding the
basics of a SFTP service.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filippo Morelli</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:/pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html</guid><category>PyCon Italia 2017</category><category>SFTP</category><category>command-line</category><category>django-rest-framework</category><category>storage</category><category>django</category><category>ssh</category><category>servers</category></item><item><title>External Commands</title><link>https://pyvideo.org/scipyla-2016/external-commands.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestrante: Juan Cabral&lt;/p&gt;
&lt;p&gt;Resumo:
Probably as a scientist you need to develop your fancy new experiment code around some obscure inherited piece of legacy software in some obscure language. In the worst scenario you can't access the original source code. The only alternative is (sadly) run the command and capture their output. This dissertation try to review all the available alternatives to interact with external commands in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Cabral</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:/scipyla-2016/external-commands.html</guid><category>SciPyLA 2016</category><category>command line</category></item></channel></rss>