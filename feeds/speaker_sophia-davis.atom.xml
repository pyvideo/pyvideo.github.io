<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sophia-davis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-05T00:00:00+00:00</updated><entry><title>Peeking into Python’s C API</title><link href="https://pyvideo.org/europython-2016/peeking-into-pythons-c-api.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Sophia Davis</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/peeking-into-pythons-c-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sophia Davis - Peeking into Python’s C API
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/peeking-into-pythons-c-api"&gt;https://ep2016.europython.eu//conference/talks/peeking-into-pythons-c-api&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Ever wondered how Python works under the hood? One way to learn about
Python-the-C-program is by exploring the C API for writing Python
bindings to native C libraries. In this talk, we will walk through a
simple example of making a C library callable from Python code and
vice versa. Along the way, we will encounter some essential features
of Python: reference counting, memory management, and the inner-
workings of objects and modules.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We all love Python. It’s so elegant and easy to use as a programming
language that we forget about the giant, complicated C program
executing our strings of white-space sensitive code. For many Python
programmers, this side of Python is just a big black box. It works
well, so thankfully we don’t &lt;em&gt;need&lt;/em&gt; to go messing around inside... but
what if you &lt;em&gt;want&lt;/em&gt; to look into the inner workings of this powerful
tool? One way to dive into the C-program-side of Python is by
exploring the C API for writing Python bindings to native C libraries.
In this talk I will explore the basics of this API as I recount my
journey to make a simple C library callable from Python code, and
allow C code to invoke objects defined in pure Python. Along the way,
we will encounter some essential features of Python: reference
counting, memory management, and the inner-workings of objects and
modules.&lt;/p&gt;
</summary></entry></feed>