<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jon-banafato.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-27T12:00:00+00:00</updated><entry><title>A Brief History of Fire Brigades</title><link href="https://pyvideo.org/pyohio-2019/a-brief-history-of-fire-brigades.html" rel="alternate"></link><published>2019-07-27T12:00:00+00:00</published><updated>2019-07-27T12:00:00+00:00</updated><author><name>Jon Banafato</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/a-brief-history-of-fire-brigades.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Publicly funded fire departments are critical to our society. We rely on
them for fire prevention and fighting, and their influence has shaped
our cities for centuries. It's time the software industry learned from
history and created a public service of our own.&lt;/p&gt;
&lt;p&gt;The history of fire companies dates back millennia, but their current
form is relatively new, just a few hundred years old. The evolution of
these companies happened in parallel in different nations, but I’d like
to tell the story of how London’s fire brigades became the public
service we know today. We'll look at how fire departments have evolved
starting with the Roman Empire all the way through the formation of the
first publicly funded fire brigades in London. By the end, I hope to
convince you that we need an Internet emergency service and that we
should take a shortcut to get there.&lt;/p&gt;
</summary></entry><entry><title>Going Passwordless</title><link href="https://pyvideo.org/pyohio-2018/going-passwordless.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Jon Banafato</name></author><id>tag:pyvideo.org,2018-07-28:pyohio-2018/going-passwordless.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Passwords suck. They're often weak and reused, making them one of the
least secure parts of web applications. This is such a problem that
entire industries of password managers and two-factor authentication
products have popped up as extra layers of security. To really address
this issue and make our users and products more secure, we need a more
fundamental change.&lt;/p&gt;
</summary></entry><entry><title>PyGotham 2017 Closing Remarks</title><link href="https://pyvideo.org/pygotham-2017/pygotham-2017-closing-remarks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Paul Logston</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/pygotham-2017-closing-remarks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 Closing Remarks&lt;/p&gt;
</summary></entry><entry><title>PyGotham 2017 Opening Remarks</title><link href="https://pyvideo.org/pygotham-2017/pygotham-2017-opening-remarks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Paul Logston</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/pygotham-2017-opening-remarks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 Opening Remarks&lt;/p&gt;
</summary></entry><entry><title>What's in your pip toolbox?</title><link href="https://pyvideo.org/pycon-us-2017/whats-in-your-pip-toolbox.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Jon Banafato</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/whats-in-your-pip-toolbox.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; is a great tool, but dependency management doesn't stop there.
I'll explore several tools that work with &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; to make managing your
dependencies easier, faster, and safer. I'll cover generating
dependencies a better way, maintaining your &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; for the
long-term, and exploring existing Python environments. Afterward, you'll
never want to &lt;tt class="docutils literal"&gt;pip freeze &amp;gt; requirements.txt&lt;/tt&gt; again.&lt;/p&gt;
</summary></entry></feed>