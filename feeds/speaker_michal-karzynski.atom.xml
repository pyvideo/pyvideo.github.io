<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michal-karzynski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>From Python script to Open Source Project</title><link href="https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/from-python-script-to-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Static Analysis"></category><category term="Tooling"></category></entry><entry><title>Developing elegant workflows in Python code with Apache Airflow</title><link href="https://pyvideo.org/europython-2017/developing-elegant-workflows-in-python-code-with-apache-airflow.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/developing-elegant-workflows-in-python-code-with-apache-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every time a new batch of data comes in, you start a set of tasks.
Some tasks can run in parallel, some must run in a sequence, perhaps
on a number of different machines. That's a workflow.&lt;/p&gt;
&lt;p&gt;Did you ever draw a block diagram of your workflow? Imagine you could
bring that diagram to life and actually run it as it looks on the
whiteboard. With Airflow you can just about do that.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://airflow.apache.org"&gt;http://airflow.apache.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Airflow is an open-source Python tool for orchestrating data
processing pipelines. In each workflow tasks are arranged into a
directed acyclic graph (DAG). Shape of this graph decides the overall
logic of the workflow. A DAG can have many branches and you can
decide which of them to follow and which to skip at execution time.&lt;/p&gt;
&lt;p&gt;This creates a resilient design because each task can be retried
multiple times if an error occurs. Airflow can even be stopped
entirely and running workflows will resume by restarting the last
unfinished task. Logs for each task are stored separately and are
easily accessible through a friendly web UI.&lt;/p&gt;
&lt;p&gt;In my talk I will go over basic Airflow concepts and through examples
demonstrate how easy it is to define your own workflows in Python
code. We'll also go over ways to extend Airflow by adding custom task
operators, sensors and plugins.&lt;/p&gt;
</summary></entry><entry><title>Building beautiful RESTful APIs using Flask</title><link href="https://pyvideo.org/europython-2016/building-beautiful-restful-apis-using-flask.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/building-beautiful-restful-apis-using-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michał Karzyński - Building beautiful RESTful APIs using Flask
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1"&gt;https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk demonstrates a technique for developing RESTful APIs using
Flask and Flask-Restplus. These tools automate common API tasks such
as: validating input, serializing output, routing requests to methods,
and turning Python exceptions into HTTP responses.&lt;/p&gt;
&lt;p&gt;The final API comes with a Swagger interactive UI, which documents all
endpoints and makes testing easy. The described tools tools provide
just enough syntactic sugar to make your code readable, scalable and
easy to maintain.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Modern software is powered by APIs. User facing apps may run in the
browser or on mobile platforms, but they almost universally rely on
data stored in the cloud. More often then not apps use a RESTful API
to exchange data with the server.&lt;/p&gt;
&lt;p&gt;In my talk I will demonstrate a technique for developing RESTful APIs
using the [Flask][1] micro-framework and [Flask-Restplus][2]. These
powerful tools automate most common tasks associated with API
development: validating input, serializing output, routing requests to
methods, and turning Python exceptions into machine-readable HTTP
responses.&lt;/p&gt;
&lt;p&gt;A Flask-Restplus API is fully documented by [Swagger][3] which lists
all defined endpoints, their query parameters and the format of input
and output JSON objects. Swagger generates an [interactive UI][4] for
selecting options and easily testing queries. Flask and Flask-Restplus
provide just enough syntactic sugar to make your code readable,
scalable and easy to maintain.&lt;/p&gt;
&lt;p&gt;My presentation will give an overview of the features of Flask and
Flask-Restplus; I will describe how easy it is to get started and
discuss some best practices for building complex APIs using this
approach. I will wrap up by briefly mentioning other components of the
Flask ecosystem, which give this micro-framework power to match fully-
loaded systems such as Django.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;http://flask.pocoo.org/&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://flask-restplus.readthedocs.org/en/latest/"&gt;http://flask-restplus.readthedocs.org/en/latest/&lt;/a&gt;
[3]: &lt;a class="reference external" href="http://swagger.io/"&gt;http://swagger.io/&lt;/a&gt;
[4]: &lt;a class="reference external" href="http://petstore.swagger.io/#/pet"&gt;http://petstore.swagger.io/#/pet&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>