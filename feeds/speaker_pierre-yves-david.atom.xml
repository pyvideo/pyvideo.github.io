<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_pierre-yves-david.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-06T00:00:00+00:00</updated><entry><title>La gestion de version en 2018: présent et future</title><link href="https://pyvideo.org/pycon-fr-2018/la-gestion-de-version-en-2018-present-et-future.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/la-gestion-de-version-en-2018-present-et-future.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La gestion de version a profondément changé ces 10 dernières années,
avec l’arrivée des gestionnaires de versions décentralisés et des
plateformes comme Github. Pourtant, malgré son succès retentissant, git
n’est pas non plus la solution ultime couvrant tous les besoins. De
nombreuses personnes et entreprises font le choix de solutions plus
anciennes (comme SVN), propriétaires (comme Perforce™) ou de la même
génération (comme Mercurial).&lt;/p&gt;
&lt;p&gt;Dans cette présentation, nous étudierons les besoins classiques qui ont
façonnés et préservés les solutions actuelles, puis nous explorerons les
nouvelles habitudes de développement auquelles les gestionnaires de
versions doivent s’adapter. Cette présentation sera jalonnée d’exemples
concrets qui vous permettront entre autre de comprendre en quoi les
alternatives à Git sont utiles pour l’innovation et pourquoi, chez
Octobus, nous avons choisi de travailler sur Mercurial plutôt que Git.&lt;/p&gt;
</summary></entry><entry><title>Présentation, l’approche itérative</title><link href="https://pyvideo.org/pycon-fr-2018/presentation-lapproche-iterative.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/presentation-lapproche-iterative.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tous les ans le monde Python se pose les même questions: “Est-ce que je
propose une présentation à Pyconfr ?”, “De quoi je vais parler ?”,
“Est-ce que j’aurais le temps de la préparer?”. Tous ses questionnements
nous privent chaque année de présentations qui auraient été
passionnantes. Pourtant, sans forcément s’en rendre compte, chacun de
nous a déjà les réponses à toutes ces questions clefs. En suivant une
suite de principes simples, il est possible de produire une présentation
sur un sujet pertinent et d’une qualité correspondante au temps qu’on a
trouvé à y consacrer.&lt;/p&gt;
</summary></entry><entry><title>Mercurial, with real python bites</title><link href="https://pyvideo.org/montreal-python/mercurial-with-real-python-bites.html" rel="alternate"></link><published>2015-04-13T00:00:00+00:00</published><updated>2015-04-13T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2015-04-13:montreal-python/mercurial-with-real-python-bites.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 13, 2015 - In this talk, Pierre-Yves David goes over on the advantages of Python that helped the project both in its early life when so much feature needs to be implemented, but also nowaday when major companies like Facebook bet on Mercurial for scaling. We'll also point at the drawback of choosing Python and how some work-arounds had to be found. Finally, we'll look at how the choice of Python have an impact on the user too with a demonstration of the extensions system.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pierre-Yves David: &lt;a class="reference external" href="http://sflx.ca/pydavid"&gt;http://sflx.ca/pydavid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP53: &lt;a class="reference external" href="http://sflx.ca/mp53e"&gt;http://sflx.ca/mp53e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recorded and edited live by &amp;#64;ChristianAubry at Montréal-Python 53 (Sanctified Terabit) with a little help from Savoir-faire Linux (&lt;a class="reference external" href="http://sflx.ca/jobs"&gt;http://sflx.ca/jobs&lt;/a&gt;).&lt;/p&gt;
</summary></entry><entry><title>Tester les performances, pourquoi et comment ?</title><link href="https://pyvideo.org/pycon-fr-2017/tester-les-performances-pourquoi-et-comment.html" rel="alternate"></link><published>2017-09-23T00:00:00+00:00</published><updated>2017-09-23T00:00:00+00:00</updated><author><name>Boris Feld</name></author><id>tag:pyvideo.org,2017-09-23:pycon-fr-2017/tester-les-performances-pourquoi-et-comment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La qualité est un avantage reconnu du logiciel libre. Les tests d'acceptance et de régression sont bien maîtrisés et utilisés par les projets libres.&lt;/p&gt;
&lt;p&gt;Mais un type de test manque encore et toujours aux projets libres : les tests de performance. Qui est content de mettre à jour son outil libre préféré pour se rendre compte qu'il lui faut maintenant deux fois plus de temps pour exécuter une commande fondamentale à son workflow ? Les performances font partie intégrante de l'expérience du développeur, les régressions y sont sournoises et douloureuses…&lt;/p&gt;
&lt;p&gt;L'une des raisons de cette lacune est la difficulté de mise en place de ce type de test. Nous l'avons expérimenté récemment dans la communauté Mercurial et nous vous proposons un retour d'expérience.&lt;/p&gt;
&lt;p&gt;Quels sont les bénéfices de la mise en place de tels tests ? Comment s'assurer que leurs résultats sont vraiment utilisables ? Quels sont les pièges à éviter ? Quelles approches pour quels besoins ? Quels outils utiliser pour collecter, analyser et visualiser les résultats ? Nous répondrons de notre mieux à toutes ces questions.&lt;/p&gt;
</summary></entry><entry><title>10 ans d'astuce et d'abus, Mercurial jongle avec Python</title><link href="https://pyvideo.org/pycon-fr-2015/10-ans-dastuce-et-dabus-mercurial-jongle-avec-python.html" rel="alternate"></link><published>2015-10-18T00:00:00+00:00</published><updated>2015-10-18T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2015-10-18:pycon-fr-2015/10-ans-dastuce-et-dabus-mercurial-jongle-avec-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Depuis 10 ans, le logiciel Mercurial utilise, profite et abuse du
language Python. Nous vous proposons une rétrospective des piégés dans
lequel nous sommes tombé, des petits trucs pour améliorer nos
performance et de toute les astuces pythonesques qui nous ont donner
plus de flexibilité.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depuis 2005, les développeurs de Mercurial profitent et abusent de
Python. Cela laisse largement assez de temps pour explorer différent
aspect du langage et découvrir de nombreuse blagues. Certaine des idées
ont été de francs succès, au point d'être intégrées aux futures versions
du langages, d'autre ont été d'affreuses erreurs que nous essayons
encore d'éradiquer aujourd'hui.&lt;/p&gt;
&lt;p&gt;Cette présentation se concentrera sur deux aspects de la relation entre
Python et Mercurial. Nous traiterons d'abord des pièges et astuces à
propos des performances de Python. Puis nous étudierons les avantages et
inconvénients du language en termes de flexibilité (introspection,
monkey-patching, syntaxe, etc) dans le contexte de Mercurial.&lt;/p&gt;
</summary></entry><entry><title>Import et Compagnie</title><link href="https://pyvideo.org/pycon-fr-2016/import-et-compagnie.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2016-10-15:pycon-fr-2016/import-et-compagnie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;et hop, &amp;quot;import antigravity&amp;quot;, la magie de Python résumée en deux mots. mais au fait, comment ça marche ? non, pas l'anti-gravité -ça tout le monde l'apprend à l'école. Comment fonctionnent les imports en Python&amp;nbsp;?
Plongeons ensemble dans les entrailles de la bête pour découvrir les bases de cette mécanique indispensable. Une fois que nous serons un peu plus familliers avec les forces et les faiblesses du système, nous verrons comment nous usons et abusons de sa flexibilité dans le gestionnaire de version Mercurial. Qui n'a jamais rêvé d'importer son code Python 2 directement avec Python 3 ?&lt;/p&gt;
</summary></entry><entry><title>Python for command line tools: the ups and downs of Mercurial's language choice</title><link href="https://pyvideo.org/pycon-ca-2015/python-for-command-line-tools-the-ups-and-downs-of.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/python-for-command-line-tools-the-ups-and-downs-of.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In 2005, Matt Mackall picked Python to implement a new version control system: Mercurial. Ten years later, the project is a success! Thanks to python? Lets see what shinning advantages met us and what issues we, developers, had to work around. We'll also take a detour to the place were python outcrop to the users, the extensions system.&lt;/p&gt;
&lt;p&gt;In 2005, Matt Mackall picked Python to implement a new version control system: Mercurial. Ten years later, the project is a success! Thanks to python?&lt;/p&gt;
&lt;p&gt;In this Talk, we'll go over on the advantages of Python that helped the project both in its early life when so much feature needs to be implemented, but also nowaday when major companies like Facebook bet on Mercurial for scaling. We'll also point at the drawback of choosing python and how some work-arounds had to be found. Finally, we'll look at how the choice of python have an impact on the user too with a demonstration of the extensions system.&lt;/p&gt;
</summary></entry><entry><title>Mercurial, avec des vrais morceaux de python</title><link href="https://pyvideo.org/pycon-fr-2013/mercurial-avec-des-vrais-morceaux-de-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Alexis Métaireau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/mercurial-avec-des-vrais-morceaux-de-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mercurial, avec des vrais morceaux de python dedans&lt;/p&gt;
&lt;p&gt;En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de
version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python
? Voyons ensemble ce que python apporte aux developeurs mais aussi, à
travers son système d'extensions, aux utilisateurs.&lt;/p&gt;
&lt;p&gt;En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de
version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python
? Dans cette présentation, nous aborderons d'abord les atouts de Python
pour les developpeurs de Mercurial.&lt;/p&gt;
&lt;p&gt;Nous prendrons ensuite le point de vue de l'utilisateur en montrant
comment le systéme d'extensions tire parti du language. Certaines
limitations de l'interpréteur python posent parfois problème. Nous
presenterons comment celles-cis peuvent être contournées grace à des
extension écrites en C ou des algorithmes adaptés.&lt;/p&gt;
&lt;p&gt;Pour finir nous detaillerons des cas d'utilisation avancés que seul
python à rendu possible.&lt;/p&gt;
</summary></entry></feed>