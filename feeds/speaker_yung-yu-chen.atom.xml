<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_yung-yu-chen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-21T00:00:00+00:00</updated><entry><title>Develop Numerical Software</title><link href="https://pyvideo.org/pycon-taiwan-2019/develop-numerical-software.html" rel="alternate"></link><published>2019-09-21T00:00:00+00:00</published><updated>2019-09-21T00:00:00+00:00</updated><author><name>Yung-Yu Chen</name></author><id>tag:pyvideo.org,2019-09-21:pycon-taiwan-2019/develop-numerical-software.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 2, R1 13:15â€“14:00&lt;/p&gt;
&lt;p&gt;Numerical software development is a unique subject.  On one hand, programming skills and computer science are indispensable for proper implementation.  On the other hand, the understandings to the scientific or engineering problems are the foundation of the software.  The fundamental knowledge is so important that the application experts, e.g., mathematicians and scientists, often become the best programmers.  However, it is difficult to train people for the multi-disciplinary skills.  This talk will discuss how Python makes the development and training manageable.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/yyc/develop-numerical-software-pycontw-2019"&gt;https://speakerdeck.com/yyc/develop-numerical-software-pycontw-2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Yung-Yu Chen&lt;/p&gt;
&lt;p&gt;HPC software developer.&lt;/p&gt;
</summary></entry><entry><title>Implement High-Performance PDE Solvers for First-Principle Simulations by Using Python</title><link href="https://pyvideo.org/pycon-japan-2012/implement-high-performance-pde-solvers-for-first-principle-simulations-by-using-python.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Yung-Yu Chen</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/implement-high-performance-pde-solvers-for-first-principle-simulations-by-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aided by its powerful gluing capability, Python can be used to build simulation software that demands high performance. As performance hotspots being replaced by C, the software can be organized by using Python for a clear structure. The resulting software provides high flexibility along with high performance. In this talk, SOLVCON, a Python-based software framework for solving conservation laws, is used to demonstrate the approach.&lt;/p&gt;
</summary><category term="simluation"></category><category term="solvcon"></category></entry><entry><title>SOLVCON: Software-Engineering Simulations of Conservation Laws</title><link href="https://pyvideo.org/pycon-apac-2014/solvcon-software-engineering-simulations-of-cons.html" rel="alternate"></link><published>2014-06-24T00:00:00+00:00</published><updated>2014-06-24T00:00:00+00:00</updated><author><name>Yung-Yu Chen</name></author><id>tag:pyvideo.org,2014-06-24:pycon-apac-2014/solvcon-software-engineering-simulations-of-cons.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SOLVCON is a collection of Python-based conservation-law solvers and
uses the space-time Conservation Element and Solution Element (CESE)
method. SOLVCON targets at providing a reusable code base for systems of
first-order, linear or non-linear partial differential equations (PDEs).
In addition to numerical methods, modern conservation-law simulations
require code for parallel computing and flexible input, output, and work
flow. Researchers spend a lot of time in these supportive
functionalities, although they should have focused on the physical
processes or numerical methods. Further, SOLVCON emphasizes the
connections among documenting, coding, and testing. Many Python-based
tools are used in the development, e.g., Sphinx, NumPy, Cython, nose,
etc. SOLVCON is open-source and uses a BSD-style license.&lt;/p&gt;
&lt;p&gt;About the speaker&lt;/p&gt;
&lt;p&gt;Yung-Yu is a software developer for high-performance computing
applications. His interests lie on numerical simulations of conservation
laws.&lt;/p&gt;
</summary></entry><entry><title>SOLVCON: A New Python-Based Software Framework for Massively Parallelized Numerical Simulations</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--solvcon--a-new-python-based-software-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Yung-Yu Chen</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--solvcon--a-new-python-based-software-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SOLVCON: A New Python-Based Software Framework for Massively
Parallelized Numerical Simulations&lt;/p&gt;
&lt;p&gt;Presented by Yung-Yu Chen&lt;/p&gt;
&lt;p&gt;SOLVCON is the first Python-based software framework for high-resolution
simulations of multi-physics conservation laws. More than ninety
percents of the codes are done in Python. Performance hot-spots are
optimized by C and glued by ctypes library. SOLVCON is high-performance
in nature and has been able to utilize 512 4-core nodes at Ohio
Supercomputer Center.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In this decade, performance improvements of scientific computing will
mainly come from major changes in the computing hardware. A
well-organized software structure is imperative to accommodate such
changes. Based on Python, SOLVCON (&lt;a class="reference external" href="http://solvcon.net/"&gt;http://solvcon.net/&lt;/a&gt;) is designed as a
software framework to develop conservation-law solvers by segregating
solving kernels from various supportive functionalities. Being the
governing equations for the physical world, conservation laws are
applied everywhere in science and engineering. Although it is well known
that the numerical algorithms and physical models form the kernel of any
conservation-law solver, few if not none code can cleanly separate those
core components from supportive functionalities. The lack of
organization has hindered the development of legacy codes. To address
the issues, the supportive functionalities are internalized in the
framework of SOLVCON. Aided by the framework, both multi- physics and
hybrid parallelism can be implemented in an organized way. To date,
SOLVCON has utilized up to 512 4-core nodes at Ohio Supercomputer Center
for high-resolution simulations of computational fluid dynamics (CFD).
SOLVCON targets to concurrently utilize thousands of computer nodes for
high- resolution simulations using over one billion mesh points.&lt;/p&gt;
&lt;p&gt;One of the major purposes of SOLVCON is to resolve the complicated
programming efforts for GPU clusters. Supercomputing is undergoing the
third revolution by the emerging GPU computing. To date, the fastest
supercomputer in the Top 500 list, Tianhe-1A, is a GPU cluster. GPU
computing promises numerical analysts to reduce the time for the
high-resolution simulations from months to days. In order to use GPU
computing to accelerate such large-scale problems, GPU nodes must be
networked together to form a GPU cluster. As such, shared-memory and
distributed-memory parallelization must be simultaneously utilized to
achieve the so-called hybrid parallelism. Parallel computing is
difficult, and hybrid parallel computing is more difficult. By using
Python to develop the fundamental software structure, GPU or
multi-threaded programming for shared- memory parallelization are locked
in solving kernels. Complex message-passing is implemented in SOLVCON
and isolated from solving-kernel developers. Highly optimized C and GPU
codes are glued into SOLVCON without loss of performance by using the
ctypes package. Othere important features of SOLVCON include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pluggable multi-physics.&lt;/li&gt;
&lt;li&gt;Built-in &lt;a class="reference external" href="http://www.grc.nasa.gov/WWW/microbus/"&gt;CESE&lt;/a&gt; solvers.&lt;/li&gt;
&lt;li&gt;Unstructured mesh consisting of mixed elements.&lt;/li&gt;
&lt;li&gt;Interface to Message-Passing Interface (MPI) libraries.&lt;/li&gt;
&lt;li&gt;Socket communication layer: working without MPI installed.&lt;/li&gt;
&lt;li&gt;Automatic distributed-memory parallelization by domain decomposition.&lt;/li&gt;
&lt;li&gt;Parallel I/O.&lt;/li&gt;
&lt;li&gt;In situ visualization by &lt;a class="reference external" href="http://vtk.org"&gt;VTK&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Standalone writers to VTK legacy and XML file formats.&lt;/li&gt;
&lt;li&gt;Integration to supercomputer (cluster) batch systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOLVCON has been applied to computation fluid dynamics and computational
mechanics. More physical solvers are being developed for various
propagating wave problems, e.g., electromagnetic waves. By using Python
as the foundation in SOLVCON, performance and extensibility are well
balanced, and computational research is being done in the most
productive way. In this talk, the author of SOLVCON will make an
introduction to the software framework by including the following
topics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Simulations of conservation laws and hybrid parallelism for
supercomputing.&lt;/li&gt;
&lt;li&gt;Issues in legacy codes and challenges to code for emerging
supercomputer hardware.&lt;/li&gt;
&lt;li&gt;Using SOLVCON in the simple way by pre-defined modules.&lt;/li&gt;
&lt;li&gt;Fixed parts in SOLVCON.&lt;ol class="arabic"&gt;
&lt;li&gt;Distributed computing.&lt;/li&gt;
&lt;li&gt;Multi-thread utilities.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Customizable parts in SOLVCON.&lt;ol class="arabic"&gt;
&lt;li&gt;Pluggable multi-physics and GPGPU computing.&lt;/li&gt;
&lt;li&gt;Supercomputer batch system and bootstrapping.&lt;/li&gt;
&lt;li&gt;In situ visualization.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The talk will take 30 minutes.&lt;/p&gt;
</summary><category term="gpgpu"></category><category term="numericalsimulations"></category><category term="parallelcomputing"></category><category term="pycon"></category><category term="pycon2011"></category><category term="simulations"></category><category term="solvcon"></category></entry></feed>