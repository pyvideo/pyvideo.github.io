<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nati-cohen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-20T00:00:00+00:00</updated><entry><title>When Regular Expressions are Not Enough</title><link href="https://pyvideo.org/pycon-israel-2016/when-regular-expressions-are-not-enough.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Nati Cohen</name></author><id>tag:pyvideo.org,2016-09-20:pycon-israel-2016/when-regular-expressions-are-not-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Handling input languages like XML, YAML, or JSON is simple enough, just grab your favorite module and hammer it out. But what should one do when facing a more obscure markup language, configuration file or another artifact of a developer with acute NIH syndrome? In this talk weâ€™ll (quickly) revisit formal languages basics and what can and cannot be parsed. We will then introduce parsimonious, a simple, fast, and economic Parsing Expression Grammar parser written by Eric Rose.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/nati-cohen.pdf"&gt;http://il.pycon.org/2016/static/sessions/nati-cohen.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>