<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_markus-holtermann.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-13T00:00:00+00:00</updated><entry><title>Logging Rethought 2: The Actions of Frank Taylor Jr.</title><link href="https://pyvideo.org/pycon-uk-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2019-09-13:pycon-uk-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We build services, potentially used by millions of people. And despite all the testing we do, some interactions with these services will not work out the way we hope. Wouldn‚Äôt it be great to reconstruct what let to a problem and analyze if the problem occurred at other times?&lt;/p&gt;
</summary></entry><entry><title>Logging Rethought 2: The Actions of Frank Taylor Jr.</title><link href="https://pyvideo.org/pycon-au-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2019-08-03:pycon-au-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We build services, potentially used by thousands or even millions of people. And despite all the testing we do, some interactions with these services will not work out the way we hope. Wouldn‚Äôt it be great to reconstruct what let to a problem and analyze if the problem occurred at other times?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/logging-rethought-2-the-actions-of-frank-taylor-jr"&gt;https://2019.pycon-au.org/talks/logging-rethought-2-the-actions-of-frank-taylor-jr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 13:30:00 2019 at C3.4 &amp;amp; C3.5&lt;/p&gt;
</summary></entry><entry><title>Logging Rethought 2: The Actions of Frank Taylor Jr.</title><link href="https://pyvideo.org/djangocon-europe-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html" rel="alternate"></link><published>2019-04-20T00:00:00+00:00</published><updated>2019-04-20T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2019-04-20:djangocon-europe-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We build services, potentially used by hundreds, thousands or even millions of people. And despite all the testing we do, some operations and interactions with these services will not work out the way we expect or hope. Wouldn‚Äôt it be great to be able to reconstruct what led to a problem? And then analyze if the same problem occurred at other times?
In this talk, I want to look at structured logging. What are the benefits of it over plain-text logging? How can it be used effectively?
Logging, by itself, can help to trace bugs. Structured logging adds additional, post-logging capabilities when used correctly. Because log events are structured data, they can be analyzed much more efficiently and effectively than plain text log messages. Furthermore, one can even build graphs and diagrams to visualize what‚Äôs happening in a service nicely.&lt;/p&gt;
</summary></entry><entry><title>Less Obvious Things To Do With Django's ORM.</title><link href="https://pyvideo.org/pycon-sk-2019/less-obvious-things-to-do-with-djangos-orm.html" rel="alternate"></link><published>2019-03-23T00:00:00+00:00</published><updated>2019-03-23T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2019-03-23:pycon-sk-2019/less-obvious-things-to-do-with-djangos-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django‚Äôs ORM is powerful. And it has been for ages. It only became even
more powerful over the last years. Django‚Äôs ORM can be intimidating
because it can do so many things. And it can also be confusing when
trying to find out how to do things.&lt;/p&gt;
</summary></entry><entry><title>On The Look-Out For Your Data</title><link href="https://pyvideo.org/djangocon-europe-2018/on-the-look-out-for-your-data.html" rel="alternate"></link><published>2018-05-24T00:00:00+00:00</published><updated>2018-05-24T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2018-05-24:djangocon-europe-2018/on-the-look-out-for-your-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you have data in the database of your Django project? Do you want to find that the needle in the haystack of your data? There are plenty options how you can achieve that. With various levels of complexity, confidence, and reliability. I'll give an insight into what the most common are nowadays.&lt;/p&gt;
&lt;p&gt;You're tasked with building a search for the project you're working on. But where do you start? What search implementation are you going to use? There's a sheer unlimited set of ways to implement &amp;quot;I'm looking for X in Y&amp;quot; out there. Elasticsearch, LIKE and ILIKE queries, MySQL's Fulltext Search, PostgreSQL's Fulltext Search, Solr, Whoosh, Xapian, to only name a few. I'll be looking at the most common ones and will be showing some basic implementation techniques.&lt;/p&gt;
&lt;p&gt;You should be familiar with Django in so much as that I'm not talking about how to create or update an object in a database. You should also have an idea of what database transactions are. The talk will feature some code snippets that I will provide in full, afterward.&lt;/p&gt;
&lt;p&gt;Markus Holtermann&lt;/p&gt;
</summary></entry><entry><title>Oh, I found a Security Issue</title><link href="https://pyvideo.org/pyconweb-2017/oh-i-found-a-security-issue.html" rel="alternate"></link><published>2017-05-28T00:00:00+00:00</published><updated>2017-05-28T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-05-28:pyconweb-2017/oh-i-found-a-security-issue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk together with Florian Apolloner&lt;/p&gt;
&lt;p&gt;Ever thought about what happens when somebody finds a security issue in Django? How does one responsibly disclose the issue? What happens after that? How does the Django team work on it? What happens until a Django security release is published? What comes afterwards?
Also, Django is ‚Äúreassuringly secure‚Äù. Let‚Äôs look at the history ;-)&lt;/p&gt;
&lt;p&gt;We'll give an insight on how the Django team handles security issues,
which can serve as a guideline and followed in own projects. We'll
will also review the history of Django's security issues to identify
hotspots and areas to look out for.&lt;/p&gt;
</summary><category term="django"></category><category term="security"></category></entry><entry><title>To index or not, that's not the question</title><link href="https://pyvideo.org/pyconweb-2017/to-index-or-not-thats-not-the-question.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/to-index-or-not-thats-not-the-question.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database indexes play a key role in every database query. Hence, it's not a question that you should be able to define them through Django. While you're already kind of able to do that with &lt;cite&gt;dbindex=true&lt;/cite&gt; and &lt;cite&gt;index_together&lt;/cite&gt;, these options are rather limiting. Django 1.11 comes with a new feature to allow you to express your index requirements much more granular.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Oh, I Found a Security Issue</title><link href="https://pyvideo.org/pycon-au-2017/oh-i-found-a-security-issue.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/oh-i-found-a-security-issue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever thought about what happens when somebody finds a security issue in Django? How does one responsibly disclose the issue? What happens after that? How does the Django team work on it? What happens until a Django security release is published? What comes afterwards?&lt;/p&gt;
&lt;p&gt;Also, Django is ‚Äúreassuringly secure‚Äù. Let‚Äôs look at the history üòâ&lt;/p&gt;
</summary></entry><entry><title>To Index or Not, That's Not The Question</title><link href="https://pyvideo.org/djangocon-europe-2017/to-index-or-not-thats-not-the-question.html" rel="alternate"></link><published>2017-04-04T00:00:00+00:00</published><updated>2017-04-04T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-04-04:djangocon-europe-2017/to-index-or-not-thats-not-the-question.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database indexes play a key role in every database query. Hence, it‚Äôs not a question that you should be able to define them through Django. While you‚Äôre already kind of able to do that with &lt;cite&gt;dbindex=true&lt;/cite&gt; and &lt;cite&gt;index_together&lt;/cite&gt;, these options are rather limiting. Django 1.11 comes with a new feature to allow you to express your index requirements much more granular.&lt;/p&gt;
</summary></entry><entry><title>Integrating 2 factor authentication into your project</title><link href="https://pyvideo.org/djangocon-au-2016/integrating-2-factor-authentication-into-your-project.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/integrating-2-factor-authentication-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most websites these days require some kind of authentication. User name + password is the most common one. OAuth with Facebook / Github / Google / Twitter is also common. But sometimes you can't rely on 3rd party services and user name + password is not enough. In those cases 2 Factor Authentication is a nice, additional security layer. Use e.g. a phone to ensure a more secure authentication.&lt;/p&gt;
</summary></entry><entry><title>SSL all the things</title><link href="https://pyvideo.org/pycon-de-2016/ssl-all-the-things.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/ssl-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years SSL/TLS encryption of not only websites but many other services as well has risen tremendously. The Let‚Äôs Encrypt organization and certificate authority (CA) makes that pretty easy. Since September 2015 more than 10 million certificates have been issued. And you can use it, too. For free!In this talk I'll give a quick introduction how SSL/TLS works. I‚Äôll briefly layout the Let's Encrypt ACME protocol and explain what you need to make use of it. I will then give some examples of how to use SSL in Python while not shooting yourself in the foot or knee.&lt;/p&gt;
</summary></entry><entry><title>SSL all the things</title><link href="https://pyvideo.org/kiwi-pycon-2016/ssl-all-the-things.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/ssl-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markus Holtermann
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/134/"&gt;https://kiwi.pycon.org/schedule/presentation/134/&lt;/a&gt;
Over the last few years SSL/TLS encryption of websites has risen tremendously. The Let‚Äôs Encrypt organization makes that pretty easy. And you can use it, too. For free! In this talk I'll show how to integrate SSL/TLS and point out some common pitfalls.&lt;/p&gt;
</summary></entry><entry><title>Integrating 2 factor authentication into your project</title><link href="https://pyvideo.org/pycon-au-2016/integrating-2-factor-authentication-into-your-project.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/integrating-2-factor-authentication-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markus Holtermann
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/31/view_talk"&gt;https://2016.pycon-au.org/schedule/31/view_talk&lt;/a&gt;
Most websites these days require some kind of authentication. User name + password is the most common one. OAuth with Facebook / Github / Google / Twitter is also common. But sometimes you can't rely on 3rd party services and user name + password is not enough. In those cases 2 Factor Authentication is a nice, additional security layer. Use e.g. a phone to ensure a more secure authentication.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>SSL all the things</title><link href="https://pyvideo.org/pycon-au-2016/pycon-au-2016-ssl-all-the-things.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/pycon-au-2016-ssl-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markus Holtermann
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/50/view_talk"&gt;https://2016.pycon-au.org/schedule/50/view_talk&lt;/a&gt;
Over the last few years SSL/TLS encryption of websites has risen tremendously. The Let‚Äôs Encrypt organization makes that pretty easy. And you can use it, too. For free! In this talk I'll show how to integrate SSL/TLS and point out some common pitfalls.&lt;/p&gt;
</summary></entry><entry><title>SSL All The Things</title><link href="https://pyvideo.org/djangocon-us-2016/ssl-all-the-things.html" rel="alternate"></link><published>2016-08-14T00:00:00+00:00</published><updated>2016-08-14T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-08-14:djangocon-us-2016/ssl-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2016 - SSL All The Things by Markus Holtermann&lt;/p&gt;
&lt;p&gt;Over the last few years SSL/TLS encryption of not only websites but many other services as well has risen tremendously. The Let‚Äôs Encrypt organization and certificate authority (CA) makes that pretty easy. Since September 2015 almost 1.8 million certificates have been issued. And you can use it, too. For free!&lt;/p&gt;
&lt;p&gt;In this talk I'll demonstrate how to integrate SSL/TLS and point out some common pitfalls. I‚Äôll briefly layout the Let's Encrypt ACME protocol and explain what you need to set up in Django to make SSL/TLS the default and only way to access your site.&lt;/p&gt;
</summary></entry><entry><title>Don't be afraid of writing migrations</title><link href="https://pyvideo.org/djangocon-europe-2016/dont-be-afraid-of-writing-migrations.html" rel="alternate"></link><published>2016-04-01T00:00:00+00:00</published><updated>2016-04-01T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-04-01:djangocon-europe-2016/dont-be-afraid-of-writing-migrations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can find more about this talk on &lt;a class="reference external" href="https://2016.djangocon.eu/speakers/4"&gt;djangocon.eu&lt;/a&gt;. This video is hosted by &lt;a class="reference external" href="http://opbeat.com/community/posts/dont-be-afraid-of-writing-migrations-by-markus-holtermann/"&gt;opbeat.com&lt;/a&gt;.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Login canary</title><link href="https://pyvideo.org/djangocon-europe-2015/markus-holtermann-login-canary-at-djangocon-europe.html" rel="alternate"></link><published>2015-08-10T00:00:00+00:00</published><updated>2015-08-10T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2015-08-10:djangocon-europe-2015/markus-holtermann-login-canary-at-djangocon-europe.html</id><summary type="html"></summary></entry><entry><title>forms are static -- no they aren't</title><link href="https://pyvideo.org/djangocon-europe-2015/markus-holtermann-forms-are-static-no-they-arent.html" rel="alternate"></link><published>2015-07-15T00:00:00+00:00</published><updated>2015-07-15T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2015-07-15:djangocon-europe-2015/markus-holtermann-forms-are-static-no-they-arent.html</id><summary type="html"></summary></entry><entry><title>Core Team Panel, featuring: Chris Beaven, Markus Holterman, Russell Keith-Magee, Curtis Maloney</title><link href="https://pyvideo.org/pycon-au-2015/core-team-panel-featuring-chris-beaven-markus.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Chris Beaven</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/core-team-panel-featuring-chris-beaven-markus.html</id><summary type="html"></summary></entry><entry><title>The Necessity of Configuration and System Management Tools</title><link href="https://pyvideo.org/pycon-au-2015/the-necessity-of-configuration-and-system-managem.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/the-necessity-of-configuration-and-system-managem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In practically every moment of our life we rely on the possibly largest
communication medium humanity ever had. The Internet. Being able to at
least partially understand how this &lt;em&gt;thing&lt;/em&gt; works, we know that it takes
a lot of work to keep it running smoothly.&lt;/p&gt;
&lt;p&gt;To do that IT administrators use configuration and system management
tools to deploy changes to thousands of servers and keep them in sync.
But how can one roll back a change done in the past that turned out to
introduce a bug?&lt;/p&gt;
&lt;p&gt;This talk I will introduce you to configuration management and explain
the problems that arise over time and make changing something back
complicated or even impossible.&lt;/p&gt;
</summary></entry></feed>