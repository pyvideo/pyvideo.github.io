<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-russia-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-17T00:00:00+00:00</updated><entry><title>Amazing AppEngine</title><link href="https://pyvideo.org/pycon-russia-2017/amazing-appengine.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Aleksander Hayorov</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/amazing-appengine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I want to talk about AppEngine hosting platform (GCP) and our more than two years of production experience . I'm going to explain why you should use AppEngine for Python project and how it can be well cooked. There will be concrete examples and tips for developers.&lt;/p&gt;
</summary></entry><entry><title>Another Yandex Search</title><link href="https://pyvideo.org/pycon-russia-2017/another-yandex-search.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Alexander Koshelev</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/another-yandex-search.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Яндекс — поисковая компания. Но хорошо находить информацию нужно не только в Интернете. У нас внутри есть огромный интранет –&amp;nbsp;большое количество внутренних сервисов, по которым тоже нужно эффективно искать. Мы любим Python и активно его используем для того, чтобы сделать поиск удобным, быстрым и максимально точно отвечающим на вопросы сотрудников. У нас довольно интересная инфраструктура –&amp;nbsp;есть компонентны и на Django, и на Tornado. Мы активно используем Celery с разными брокерами. Взаимодействуем с внутренними инструментами и API, чтобы переиспользовать наработки большого Поиска. Этот же механизм стал недавно использоваться для поиска по данным организаций внутри сервисов Яндекс.Коннекта. Я хочу рассказать, как все эти компоненты взаимодействуют и какие есть интересные особенности.&lt;/p&gt;
</summary></entry><entry><title>Debugging in Python 3.6: Better, Faster, Stronger</title><link href="https://pyvideo.org/pycon-russia-2017/debugging-in-python-36-better-faster-stronger.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Elizabeth Shashkova</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/debugging-in-python-36-better-faster-stronger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.6 was released in December of 2016 and it has a lot of new cool features. Some of them are quite easy for using: a developer can read, for example, about f-strings and they can start using them in their programs as soon as possible. But sometimes features are not so evident, and a new frame evaluation API is one of them.&lt;/p&gt;
&lt;p&gt;The new frame evaluation API was introduced to CPython in PEP 523 and it allows to specify a per-interpreter function pointer to handle the evaluation of frames. It might not be evident how to use this new feature in everyday life, but it’s quite easy to understand how to build a fast debugger based on it.&lt;/p&gt;
&lt;p&gt;In this talk we are going to explain how standard way of debugging in Python works and how a new frame evaluation API may be useful for creating the fast debugger. Also we will consider why such fast debugging was not possible in the previous versions of Python. If someone hasn’t made a final decision to move to Python 3.6 this talk will provide some new reasons to do it.&lt;/p&gt;
</summary></entry><entry><title>Gevent — to be or not to be?</title><link href="https://pyvideo.org/pycon-russia-2017/gevent-to-be-or-not-to-be.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Alexander Mokrov</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/gevent-to-be-or-not-to-be.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When Python was a kid, still the second version, there was no asynchrony in it and we dealt with it as we could. Among the spin-offs of such initiatives were the greenlet package and the gevent library, based on this package. The gevent library is used in various projects to this day. My report will be about this library, what's under its hood, and what it can be useful for. I will bring architectural solutions for building asynchronous RPC based on gevent, and will talk about the problems you might encounter when using it. In the end, I'll show you how the same things can be implemented with the help of standard tools of the modern Python (the asyncio library), and will compare these approaches.&lt;/p&gt;
</summary></entry><entry><title>How to write your own debugger</title><link href="https://pyvideo.org/pycon-russia-2017/how-to-write-your-own-debugger.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Artem Malyshev</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/how-to-write-your-own-debugger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very rare programmer doesn't need debugging tools. Change a variable value, look at program execution step by step, get the whole picture of the situation is extremely hard without Pdb. How were all these debuggers implemented? What underlying mechanisms are they use? What issues do they need to solve? I will address all those questions in my talk.&lt;/p&gt;
</summary></entry><entry><title>Live-chat's childhood illnesses</title><link href="https://pyvideo.org/pycon-russia-2017/live-chats-childhood-illnesses.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Olga Sentemova</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/live-chats-childhood-illnesses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays Telegram, Viber, Whatsapp and social media are crucial in customer support. It means that platforms for this purpose are getting large-scale and high-load.&lt;/p&gt;
&lt;p&gt;Today we have about 50 operators simultaneously and about 10000 chats every day. We want to report about the architecture of out live-chat application, predictive answers on users side to lower high-load and integration with other systems.&lt;/p&gt;
</summary></entry><entry><title>Memory &amp; Python. What you need to know for happiness?</title><link href="https://pyvideo.org/pycon-russia-2017/memory-python-what-you-need-to-know-for-happiness.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Alexey Kuzmin</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/memory-python-what-you-need-to-know-for-happiness.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to know how Python deals with memory? Do you want to know why your applications consume it so much? Or maybe it's already leaks?&lt;/p&gt;
&lt;p&gt;If you answered at least one question &amp;quot;YES!&amp;quot; - come. If you answered &amp;quot;NO!&amp;quot; - the more you come, MEMORY - IT IS VERY IMPORTANT!&lt;/p&gt;
</summary></entry><entry><title>Microservices strikes back!</title><link href="https://pyvideo.org/pycon-russia-2017/microservices-strikes-back.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Oleg Churkin</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/microservices-strikes-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For more than 10 years, the theme of microservice architecture has been exciting the IT-industry, despite this many developers have not yet &amp;quot;split their monolith&amp;quot; and do not &amp;quot;roll containers in the cloud&amp;quot;, but they certainly want it. In my presentation, I will describe what are requirements for the development process and the project infrastructure to take advantage of micro (services) quickly, efficiently and quite painlessly. We'll talk about what problems a pythonist will face when using microservices in production. Let's find out best practices to choose the framework or utilitarian library for a particular type of microservice. I'll tell you how to provide fault tolerance and handle errors from third-party integrations correctly. Let's go through the list of classic developers mistakes and a little bit of the topic of data caching.&lt;/p&gt;
</summary></entry><entry><title>Python on the edge of a razor: PyPy project</title><link href="https://pyvideo.org/pycon-russia-2017/python-on-the-edge-of-a-razor-pypy-project.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/python-on-the-edge-of-a-razor-pypy-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This time we are going to discuss performance and some technical details of cutting edge implementation of Python VM called PyPy. Write an interpreted language in another interpreted language? Whaaaaaaaa? How this is a good idea?&lt;/p&gt;
</summary></entry><entry><title>Scrapy internals</title><link href="https://pyvideo.org/pycon-russia-2017/scrapy-internals.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Alexander Sibiryakov</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/scrapy-internals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scrapy itself is a good example of modern asynchronous application. Moreover it's a swiss army knife with all kinds of extensions: Item pipelines, HTML/CSS selectors, Middlewares. In this talk, I’m going to explain how the Scrapy’s internal processing pipeline works, the design of it’s downloader queue and all the things needed to debug it: Scrapy shell, telnet console, memory consumption debugging.&lt;/p&gt;
&lt;p&gt;Scrapy is a 100% asynchronous web scraping framework built with Twisted event loop with 21K GitHub stars!&lt;/p&gt;
</summary></entry><entry><title>Total Performance Control</title><link href="https://pyvideo.org/pycon-russia-2017/total-performance-control.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Mikhail Yumatov</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/total-performance-control.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to understand quickly what’s your app doing right now. Where does it spend its time? Which is the weakest link?&lt;/p&gt;
&lt;p&gt;We’ll talk about available tools for monitoring web application performance. How to use them to collect detail information on all operations, detect problems quickly and react. Slowlog on steroids. What is statistical analysis and how to use it to debug performance.&lt;/p&gt;
</summary></entry><entry><title>What is serverless-architecture and how to live with it?</title><link href="https://pyvideo.org/pycon-russia-2017/what-is-serverless-architecture-and-how-to-live-with-it.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Nikolay Markov</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/what-is-serverless-architecture-and-how-to-live-with-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why use dedicated servers if you don't need them? In modern times, we are already able to just build the whole complex pipelines and deploy applications directly on the cloud, without &amp;quot;cutting&amp;quot; it to separate instances. And you may don't even care how and where things are going to be executed. It's just several lines of code and no more non-trivial maintenance and deployment, just pure business logic. Magic? No, it's serverless.&lt;/p&gt;
</summary></entry><entry><title>Why is Python slow?</title><link href="https://pyvideo.org/pycon-russia-2017/why-is-python-slow.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Maciej Fijałkowski</name></author><id>tag:pyvideo.org,2017-07-17:pycon-russia-2017/why-is-python-slow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will cover one of the usual topics of discussions of deficiencies of the Python language, notably it's speed.
We've spent last decade improving on the performance of the language (but not the default implementation). What we've learned so far is not the common interpretation of that question - things like dynamic dispatch, dynamic typing and interpreter can all be worked around.
What we've learned are the places in the Python language which make unnecessary string copies, but are easier to write, a lot of &amp;quot;pythonic&amp;quot; constructs that cannot be implemented efficiently and a lot of quirks that make some constructs slow for no good reason. Additionally we're overwhelmed by the sheer size of the &amp;quot;simple&amp;quot; language and the necessity of supporting C extensions.
This talk will cover detailed view of those problems and some potential remedies.&lt;/p&gt;
</summary></entry><entry><title>About the analyst and silver bullets</title><link href="https://pyvideo.org/pycon-russia-2017/about-the-analyst-and-silver-bullets.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Alexander Podsoblyaev</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/about-the-analyst-and-silver-bullets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I will touch upon Rambler/top-100 relaunch, available instruments for realime analytics' system developement and about our experience of exchanging batch-calculations for realtime pipelines. I'll introduce you to the architecture we used for both data processing approaches and will pay attention to all the components. Then we'll duscuss peculiar properties of python that matter when implementing data procession algorithms for HIVE, touch upon fundamental problems of storing aggregates as well as pros and cons of alternative approach. I'll bring you details on how we use Spark for changing sessions calculation, we'll discuss emerging issues and existing solutions. In the end i'll show you our results of performance tests and will introduce you to several pitfalls we've met on our way.&lt;/p&gt;
</summary></entry><entry><title>Desktop app in Python: Write once, run anywhere</title><link href="https://pyvideo.org/pycon-russia-2017/desktop-app-in-python-write-once-run-anywhere.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Igor Novikov</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/desktop-app-in-python-write-once-run-anywhere.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Despite of wide Python server side usage the language is suitable for desktop apps too. Moreover Python's high-level syntax and relatively lightweight Python VM accelerate development process, reduce size of project code, speed up testing and bug-fixing and so on. All the features highly decrease cost of development and allow small teams to write a complex application that works on all the major desktop platforms.&lt;/p&gt;
&lt;p&gt;All this sounds great but as usual in practice there are a lot of technical issues in this approach. This presentation is dedicated how to avoid potential architectural problems in multi platform development and reach project goals without serious troubles. We will overview major widgetsets and will try finding a silver bullet for multi platform desktop development.&lt;/p&gt;
</summary></entry><entry><title>Elegant Solutions for Everyday Python Problems</title><link href="https://pyvideo.org/pycon-russia-2017/elegant-solutions-for-everyday-python-problems.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Nina Zakharenko</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/elegant-solutions-for-everyday-python-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an intermediate Python programmer who becomes frustrated by copy and pasting or duplicating code? Luckily, the Python programming language provides us with a unique set of tools to make our code more elegant, readable, and reduce duplication. In this talk, I’ll share common anti-patterns in python programs and show you practical pythonic solutions for supercharging your code with tools like Decorators, Context Managers, Mixins, and Lambdas.&lt;/p&gt;
</summary></entry><entry><title>Gensim — Topic Modelling for Humans</title><link href="https://pyvideo.org/pycon-russia-2017/gensim-topic-modelling-for-humans.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Ivan Menshikh</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/gensim-topic-modelling-for-humans.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over time, companies are accumulating more and more texts: mail, chat messages, service logs and so on, you can extract profit from them. In the report I'll talk about what is topic modelling (what are &amp;quot;topics&amp;quot; and how to extract them from a variety of texts) and how can we apply it to the data that we have (and not only). I'll tell you about the Gensim framework and show examples.&lt;/p&gt;
</summary></entry><entry><title>Gradual Typing of Production Applications</title><link href="https://pyvideo.org/pycon-russia-2017/gradual-typing-of-production-applications.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/gradual-typing-of-production-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thanks to Python's dynamic nature and minimal boilerplate, it's easy to start a project. But how do you keep it maintainable and easy to understand as it grows beyond a million lines of code? Come learn how annotating it with types makes your program better for human readers and more robust during execution. No prior Haskell experience required!&lt;/p&gt;
&lt;p&gt;In an hour I'm going to demonstrate real world problems of big software projects that type annotations solve. The talk is going to explain how you can introduce typing to an already mature application, what is a sensible workflow to follow and how to solve common gotchas.  No ducks were harmed in the making of this talk.&lt;/p&gt;
</summary></entry><entry><title>How I Learned to Stop Worrying and Love the BFG: Load Testing with a Touch of Python</title><link href="https://pyvideo.org/pycon-russia-2017/how-i-learned-to-stop-worrying-and-love-the-bfg-load-testing-with-a-touch-of-python.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Nadezhda Mirgorodskaya</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/how-i-learned-to-stop-worrying-and-love-the-bfg-load-testing-with-a-touch-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk can be useful for all the listeners who face the problem of measuring application performance and capacity and decide which is the best tool for their needs. It's great when a simple tool like ab or wrk is enough to ensure your application performance. And what if you need a sophisticated scenario to test your service? What should you choose? JMeter because of hundred of plugins? Tsung because of easy scaling? Gatling because of support for different protocols? And why not use Python for load test scenario? I'll share the experience of load testing with Yandex Tank and BFG - load generator which supports user-defined scripts in Python. We'll focus on one recovery test realized with BFG. I'll show how Python scenarios can be used for load, performance and another non-functional testing. Why it helped to make load testing a part of a development cycle. And how BFG became more popular than jMeter in our daily practice.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycon-russia-2017/lightning-talks.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks на PYCON RUSSIA 2017&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Python of Things</title><link href="https://pyvideo.org/pycon-russia-2017/python-of-things.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/python-of-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Look at our desperate times, where toothbrushes have obligatory Bluetooth features, trashcans collect data about your habits, and cameras track your every move. And what exactly can you contribute to this IoT mayhem, our dearest Python developer? Imagine yourself building new things, connecting existing ones into something exciting and (maybe) having a good time.&lt;/p&gt;
&lt;p&gt;In this talk we will look at Python's place in a IoT world, how to use it for interaction with various peripherals and what hardware platforms are best suited for this purpose.&lt;/p&gt;
&lt;p&gt;Intended auditory: middle-level (and higher) software developers, makers and IoT enthusiasts.&lt;/p&gt;
&lt;p&gt;Main points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Abundance of computation resources are getting us lazy&lt;/li&gt;
&lt;li&gt;You can't win against IoT, so all that left is to join the fray.&lt;/li&gt;
&lt;li&gt;Python can be used for low-level interaction with various hardware.&lt;/li&gt;
&lt;li&gt;MicroPython - stripped-down version of Python 3 for use on various microcontrollers.&lt;/li&gt;
&lt;li&gt;Python ecosystem has various libraries for working with industry-proven communication protocols (e.g. ZigBee).&lt;/li&gt;
&lt;li&gt;Safety first!&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>PyWat. Do you know Python well enough?</title><link href="https://pyvideo.org/pycon-russia-2017/pywat-do-you-know-python-well-enough.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Alexander Shvets</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/pywat-do-you-know-python-well-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python developers don’t trust to other programming languages because Python is undoubtedly the coolest language in the world! It is great pleasure to make fun of JavaScript or Ruby for their non-obviousness and magic. But is Python behavior always so obvious? Will it let you down at the crucial moment? Let's see!&lt;/p&gt;
&lt;p&gt;In interactive mode, we'll play with you in the PyWat quiz and, of course, deep dive into Python for the correct answers. Disclaimer: The sarcasm in this talk does not represent anyone's actual opinion.&lt;/p&gt;
</summary></entry><entry><title>(Un)safe python</title><link href="https://pyvideo.org/pycon-russia-2017/unsafe-python.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Ivan Tsyganov</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/unsafe-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every developer expects his app is vulnerability safe. But we all know that such applications do not exist, but we usually deal with not enough tested. This year the Open Web Application Security Project (OWASP) has published TOP-10 most critical vulnerabilities of web applications. I'll tell you what it is and what was changed over the last 4 years from the moment of publication of the previous version. I'm going to explain which types of vulnerabilities are the developer's responsibility and which we can't influence on. I'll show how the popular frameworks help us to develop secure applications and in which situations they can't help.&lt;/p&gt;
</summary></entry><entry><title>What Python can do with microcontrollers</title><link href="https://pyvideo.org/pycon-russia-2017/what-python-can-do-with-microcontrollers.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/what-python-can-do-with-microcontrollers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Микроконтроллер — это процессор, память и ввод-вывод, размещённые в одном чипе. Их в мире десятки миллиардов штук: микроконтроллеры везде от часов до автомобилей. Софт для их крохотных ресурсов пишут в основном на C, а таким языкам, как Python, тут делать нечего. Точнее, так было до 2014 года, когда появился MicroPython — реализация Python для микроконтроллеров.&lt;/p&gt;
&lt;p&gt;Как вообще удалось заставить Python работать на чём-то с всего лишь 16 килобайт памяти? Сильно ли пришлось урезать для этого язык? (спойлер: нет!) Что интересного можно делать с железками и MicroPython? Разные сенсоры, акселерометры, светодиоды, моторчики — вот это всё.&lt;/p&gt;
</summary></entry></feed>