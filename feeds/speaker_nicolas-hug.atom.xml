<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nicolas-hug.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Fast Gradient Boosting Decision Trees with PyGBM and Numba</title><link href="https://pyvideo.org/scipy-2019/fast-gradient-boosting-decision-trees-with-pygbm-and-numba.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Nicolas Hug</name></author><id>tag:pyvideo.org,2019-07-11:scipy-2019/fast-gradient-boosting-decision-trees-with-pygbm-and-numba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With a high predictive power and a low tendency to overfit, Gradient Boosting Decision Trees (GBDT) are very popular, and they are often used in winning solutions to machine learning competitions, as well as industry applications. After presenting Gradient Boosting as a special kind of gradient descent, we will describe various tricks and techniques that can speed up a GBDT implementation by multiple orders of magnitude. We will also present PyGBM, a fast pure-Python implementation of GBDTs inspired by LightGBM, that leverages Numba's JIT compilation. We will also provide feedback about our extensive use of Numba.&lt;/p&gt;
</summary></entry><entry><title>Collaborative filtering for recommendation systems in Python</title><link href="https://pyvideo.org/pyparis-2017/collaborative-filtering-for-recommendation-systems-in-python.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Nicolas Hug</name></author><id>tag:pyvideo.org,2017-06-12:pyparis-2017/collaborative-filtering-for-recommendation-systems-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will present the topic of recommendation systems. We
will focus on two popular approaches: neighborhood-based methods and
matrix- factorization based techniques. We will also present Surprise,
an open source Python package for easily building and analyzing
recommendation algorithms.&lt;/p&gt;
</summary></entry></feed>