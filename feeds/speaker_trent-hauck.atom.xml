<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_trent-hauck.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-07-26T00:00:00+00:00</updated><entry><title>Low Friction NLP with Gensim</title><link href="https://pyvideo.org/pydata-seattle-2015/low-friction-nlp-with-gensim.html" rel="alternate"></link><published>2015-07-26T00:00:00+00:00</published><updated>2015-07-26T00:00:00+00:00</updated><author><name>Trent Hauck</name></author><id>tag:pyvideo.org,2015-07-26:pydata-seattle-2015/low-friction-nlp-with-gensim.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gensim is fairly popular NLP library available in Python. In addition to having implementations of several popular algorithms, it has a utilities that make working with the corpus itself easier.&lt;/p&gt;
&lt;p&gt;In this talk I'd like to give an overview of Gensim, and then two examples. One will illustrate an LDA example, then I'll show a somewhat novel use of Word2Vec to understand user preferences.&lt;/p&gt;
&lt;p&gt;Overview:
The overview will follow the general arc of an NLP project.
Reading the corpus, here this is done with gensim's streaming API.
Transformations, often a transformation to BOW is done, and potentially something like TFIDF.
Training the model from the corpus.
Working with the result for analysis or otherwise.
Examples:
This will be a straight forward application: topic discovery on a corpus and then analyzing the resulting topics to look for patterns.
Next I'll cover how to use Gensim's Word2Vec implementation to better understand customer preferences.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://blog.trenthauck.com/portfolio/presentation.pdf"&gt;http://blog.trenthauck.com/portfolio/presentation.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>