<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - functional programming</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Functional programming in Python and even Haskell - Part 1</title><link>https://pyvideo.org/europython-2013/functional-programming-in-python-and-even-haskell-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:/europython-2013/functional-programming-in-python-and-even-haskell-part-1.html</guid><category>EuroPython 2013</category><category>Functional Programming</category><category>Algorithms</category></item><item><title>Functional programming in Python and even Haskell - Part 2</title><link>https://pyvideo.org/europython-2013/functional-programming-in-python-and-even-haskell-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semen Trygubenko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:/europython-2013/functional-programming-in-python-and-even-haskell-part-2.html</guid><category>EuroPython 2013</category><category>Functional Programming</category><category>Algorithms</category></item><item><title>Decision Science with Probabilistic Programming</title><link>https://pyvideo.org/europython-2020/decision-science-with-probabilistic-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Make robust optimal decisions with Python!&lt;/p&gt;
&lt;p&gt;Generative Models are the Swiss Army Knife for the Decision Scientist. Generative models allow the simulation of scenarios based on different business hypotheses (Bayesian priors). With Probabilistic Programming, decision makers can simulate the impact of business drivers in times of great uncertainty.&lt;/p&gt;
&lt;p&gt;Furthermore, Probabilistic Programming Languages provide all the inference tools necessary to identify the assumptions that have most likely generated an outcome. Inference is a statistical tool that enables optimal decision-making based on models that explicitly quantify uncertainty.&lt;/p&gt;
&lt;p&gt;Generative models of key optimization parameters are necessary input to Robust Optimization and Stochastic Programming problems.
Python provides all the tools to successfully integrate Probabilitistic Programs with Robust and Stochastic Optimization and therefore cope with high uncertainty in optimization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mattia Ferrini</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/decision-science-with-probabilistic-programming.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Data Science</category><category>Deep Learning</category><category>Functional Programming</category><category>Science</category></item><item><title>How to sort anything</title><link>https://pyvideo.org/europython-2020/how-to-sort-anything.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keeping your data organized with &amp;quot;sorted&amp;quot; and custom functions&lt;/p&gt;
&lt;p&gt;Sorting is one of those things that we take for granted in Python. The built-in &amp;quot;sorted&amp;quot; function knows how to sort any iterable of objects that are themselves sortable.&lt;/p&gt;
&lt;p&gt;But hiding behind that simple description is a great deal of depth. In this talk, I'll go deep into what it means to sort, and how we can sort any collection of Python data.  We'll see how you can use custom functions to sort built-in data structures in new and interesting ways.  And we'll see how you can design your own custom classes such that they will sort in just the way you want.&lt;/p&gt;
&lt;p&gt;After watching this talk, you'll have a better understanding of sorting, built-in data structures, function objects, and how &amp;quot;magic methods&amp;quot; affect the our Python classes.  Moreover, you'll be able to write clearer, shorter, and more easily understood code.&lt;/p&gt;
&lt;p&gt;Topics I'll address in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;sorted&amp;quot; and Timsort&lt;/li&gt;
&lt;li&gt;Sorting a list of simple structures&lt;/li&gt;
&lt;li&gt;Reversing the direction with &amp;quot;reverse&amp;quot;&lt;/li&gt;
&lt;li&gt;Custom sorting with &amp;quot;key&amp;quot;&lt;/li&gt;
&lt;li&gt;Stable sort&lt;/li&gt;
&lt;li&gt;Sorting a list of dicts&lt;/li&gt;
&lt;li&gt;Using &amp;quot;lambda&amp;quot;&lt;/li&gt;
&lt;li&gt;Using operator.itemgetter&lt;/li&gt;
&lt;li&gt;Sorting a list of named tuples&lt;/li&gt;
&lt;li&gt;Sorting a list of objects&lt;/li&gt;
&lt;li&gt;Making your object sortable&lt;/li&gt;
&lt;li&gt;The functools.total_ordering decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an intermediate-level talk; I'll assume that anyone attending knows how to write functions, classes, and methods.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuven Lerner</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/how-to-sort-anything.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Data</category><category>Development</category><category>Functional Programming</category></item><item><title>How to write multi-paradigm code</title><link>https://pyvideo.org/europython-2020/how-to-write-multi-paradigm-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;... without making a mess&lt;/p&gt;
&lt;p&gt;Python is a powerful multi-paradigm language which combines elements of object-orientation and functional programming. Both concepts can be really powerful if used right. But what if you use them together? It can be pragmatic and very efficient, but things can also get messy really quickly.&lt;/p&gt;
&lt;p&gt;This talk explores peaceful co-existence of oo-classes and pure functions in the same code base. The focus is on identifying the right tool for the right job and bringing together the best of both. The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code Structure&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;State Handling&lt;/li&gt;
&lt;li&gt;Multiple implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:
There are no formal prerequisites for this course, although it is recommended that participants have a strong background in Python and its code structuring mechanisms, as well as a deep understanding of at least one of the paradigms of OOP and FP.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Mistler</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/how-to-write-multi-paradigm-code.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Abstractions</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category><category>Functional Programming</category></item><item><title>Programación funcional con Python</title><link>https://pyvideo.org/pycon-es-2014/programacion-funcional-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta charla es un recorrido por las posibilidades para programación funcional que tiene python, incluyendo las que están en las baterias de python, las propias estructuras inmutables de python y bibliotecas externas como fn.py.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Espino</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:/pycon-es-2014/programacion-funcional-con-python.html</guid><category>PyCon ES 2014</category><category>functional programming</category><category>fn</category></item><item><title>Haskell es mi pastor y Python, mi profeta</title><link>https://pyvideo.org/pycon-es-2017/haskell-es-mi-pastor-y-python-mi-profeta.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se explicará el paradigma de programación funcional. Para ello, se utilizará como ejemplo el lenguaje puramente funcional Haskell y se explicará cómo hacer programación funcional en Python. Por último, se comparará la eficiencia y la elegancia del paradigma de programación funcional frente al imperativo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Braulio Vargas López</dc:creator><pubDate>Sun, 24 Sep 2017 11:30:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:/pycon-es-2017/haskell-es-mi-pastor-y-python-mi-profeta.html</guid><category>PyCon ES 2017</category><category>haskell</category><category>functional programming</category></item><item><title>Functional Programming for Data Science</title><link>https://pyvideo.org/pycon-ireland-2018/functional-programming-for-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a versatile language and it supports a wide variety of programming paradigms. At its heart it's object-oriented, but in this talk I want to discuss how you can use Python to write clean, efficient, and modular functional code. I'll begin by giving a little background on what functional programming is and why you might use it. I'll talk through some of the simple primitives of functional programming, and I'll give some useful examples of functional code for data analysis. The aim is to give a practical and pragmatic introduction to these ideas, covering some of the strengths and weaknesses of Python as a functional language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neal Ó Riain</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/functional-programming-for-data-science.html</guid><category>PyCon Ireland 2018</category><category>functional programming</category><category>data science</category></item><item><title>Everything You Always Wanted to Know About Async But Were Afraid to Ask (cit.)</title><link>https://pyvideo.org/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Always Wanted to Know About Async But Were Afraid to Ask
(cit.) - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In this talk, we will dig in the marvelous world of sync/async/parallel
computation. And show you how to define abstract computation upfront
lazily using Promises, deferring execution subsequently and throttling
the computation as you please. After this, async processing won’t have
any secret to you I still remember when during an interview for a Junior
Data Scientist position, I was asked about async and when to use it. I
was buffled. And - I must say - after learning about these concepts,
they are not that hard. Nevertheless, still mysterious to some. In this
talk, after explaining some basic concepts about asynchronous processing
and reviewing the most important Pythonic packages to be used in the
async context, we will gently introduce some notions of functional
programming and - most of all - one of its most useful tool for async
operations: the Promise monad. Thanks to this, we will then be able to
create, compose and chain abstract computations together, therefore
defining what we want to do, without actually doing it yet. Acting
lazily, its execution will rather be deferred to a second moment, where
we will make use of async and parallel framework to speed up and
parallelise execution. We will also show you how to throttle the
execution, a need that often arises when dealing with rate-limited
services and/or avoid overloading external component or resources. The
talk will be accompanied by the help of a simple Github repo that will
have examples and (hopefully) useful utility functions that will allow
you to approach the asynchronous world more easily and seamlessly.&lt;/p&gt;
&lt;p&gt;Speaker: Deusebio&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deusebio</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html</guid><category>PyCon Italia 2022</category><category>asyncio</category><category>clean code</category><category>functional programming</category></item><item><title>Mutabilità e side effect non sono tuoi amici</title><link>https://pyvideo.org/pycon-italia-2022/mutabilita-e-side-effect-non-sono-tuoi-amici.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutabilità e side effect non sono tuoi amici - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;La mutabilità di classi ed oggetti in python è croce e delizia degli
sviluppatori. L’utilizzo di operatori di modifica può generare problemi
nella consistenza delle strutture dati. In questo talk analizzeremo il
concetto di mutabilità mostrando alcuni metodi per evitare side effect
indesiderati. Python lascia agli sviluppatori un’enorme libertà di
utilizzo quando si tratta di modificare strutture dati o classi. E’
dunque necessario procedere in modo strutturato e rigoroso quando
vengono effettuate delle modifiche al fine di evitare che strutture dati
mutabili possano essere modificate in modo impropio generando dei side
effect che si ripercuotono all’interno di tutto il codice. Questo
problema è di particolare importanza quando si scrivono delle pipeline
di machine learning. In questi casi, infatti, a mutazione di una
struttura dati può portare ad un errato processing dei dati che, di
conseguenza, porterà al training di algoritmi di machine learning
errati. Scopo di questo talk è quello di investigare il concetto di
mutabilità nelle strutture dati e nelle classi e di quali effetti
dannosi essi possono generare all’interno del codice ed in particolar
modo in pipeline di machine learning. Verranno inoltre proposte alcune
buone norme (che prendono spunto dalla programmazione funzionale) utili
per poter scrivere codice robusto e privo di effetti indesiderati dati
dalla mutazione di eventuali strutture dati o classi.&lt;/p&gt;
&lt;p&gt;Speaker: Claudio Stamile&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claudio Stamile</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/mutabilita-e-side-effect-non-sono-tuoi-amici.html</guid><category>PyCon Italia 2022</category><category>best practice</category><category>data structures</category><category>functional programming</category></item><item><title>Write Any Python Program in One Line and Only Using Lambdas!</title><link>https://pyvideo.org/pycon-italia-2022/write-any-python-program-in-one-line-and-only-using-lambdas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write Any Python Program in One Line and Only Using Lambdas! - PyCon
Italia 2022&lt;/p&gt;
&lt;p&gt;Any program can be written in just one statement and only using lambda.&lt;/p&gt;
&lt;p&gt;Sounds weird? The first claim will bring us into what functional
programming is (+ map, functools…); the second one will dig into λ
calculus.&lt;/p&gt;
&lt;p&gt;But why? You will learn the power of λ and how to be concise: a better
pythonist! This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Recursion! Recursion enables to write simple and concise python code.
We will bring many examples of recursion, how to make it fast with
memoizing and what tail call optimization is.&lt;/li&gt;
&lt;li&gt;Mutable vs Immutable objects! Since FP uses a completely immutable
approach, this might be the right time to learn about tuples,
frozendicts, and all immutable data structures.&lt;/li&gt;
&lt;li&gt;Higher order functions! You can pass functions as arguments and
return them in functions. There are many functions in python that use
this feature: sort, min, max, map, filter etc.&lt;/li&gt;
&lt;li&gt;Functools! Functools is the standard python library containing many
useful functional tools. The library functions will be all explained
properly, such as partial and reduce, often used in FP.&lt;/li&gt;
&lt;li&gt;Lambda calculus! λ calculus is the first functional language! In
fact, a λ calculus interpreter could be written using exclusively the
lambda statement (no loops, numbers, standard functions, libraries,
anything).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: Niccolò «Veggero» Venerandi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Niccolò «Veggero» Venerandi</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/write-any-python-program-in-one-line-and-only-using-lambdas.html</guid><category>PyCon Italia 2022</category><category>functional programming</category></item><item><title>Functional Programming in Python</title><link>https://pyvideo.org/pycon-philippines-2012/functional-programming-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intro to functional programming using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-06-30:/pycon-philippines-2012/functional-programming-in-python.html</guid><category>PyCon Philippines 2012</category><category>functional programming</category></item></channel></rss>