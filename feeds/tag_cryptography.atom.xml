<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_cryptography.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-20T00:00:00+00:00</updated><entry><title>Everyday security issues and how to avoid them</title><link href="https://pyvideo.org/pycon-italia-2018/everyday-security-issues-and-how-to-avoid-them.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Christian Heimes</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/everyday-security-issues-and-how-to-avoid-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Security is hard, yet vital for any software these days. After all you
don’t want to become the laughing stock on hacker news or cause your
company to loose billions in shareholder value. This talk won’t turn you
into a security specialist over night, but you will learn how to avoid
common mistakes in your daily work as developer or administrator. I’m
going to take you on a brief tour in secure software design, illustrate
various attack vectors, and point you to helpful tools and resources.
Topics include threat analysis, deployment, parsing, authentication,
TLS/SSL, crypto, and user interaction, with some real life examples from
my daily work.&lt;/p&gt;
&lt;div class="section" id="note"&gt;
&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;The talk will be an extended version of my PyCon UK 2017 and DevConf.CZ
2018 info sec talk. Slides are recordings of my PyCon UK talk are
available at
https://speakerdeck.com/tiran/pycon-uk-2017-everyday-security-issues-and-how-
to-avoid-them .&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="security"></category><category term="infosec"></category><category term="Cryptography"></category></entry><entry><title>La sicurezza dei database MySQL in ottica GDPR</title><link href="https://pyvideo.org/pycon-italia-2018/la-sicurezza-dei-database-mysql-in-ottica-gdpr.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Marco Carlessi</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/la-sicurezza-dei-database-mysql-in-ottica-gdpr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il 25 maggio 2018 la GDPR diventerà legge per tutte le aziende che
trattano dati sensibili di cittadini europei, a prescindere dalla
nazionalità o dalle leggi locali: in pratica tutte le aziende private
italiane, nessuna esclusa.&lt;/p&gt;
&lt;p&gt;Questa presentazione è quindi dedicata a chi si occupa di sicurezza e
che dovrà fare i conti con questa normativa, ma non da un punto di vista
legale, bensì tecnico: come posso aderire alle richieste se uso il
database MySQL?&lt;/p&gt;
&lt;p&gt;Quindi dopo un breve introduzione alla GDPR, ci concentreremo su come
MySQL possa soddisfarne le richieste (con riferimento ai vari articoli)
così da fornire la conoscenza che permetta di scegliere le strategie
migliori per il proprio business.&lt;/p&gt;
&lt;p&gt;Questa sessione è indicata per chiunque lavori con MySQL. Saranno date
per scontate solo le conoscenze di base dei database, ma chi ha già
conoscenza di MySQL potrà apprezzarne a pieno le opzioni.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Cryptography"></category><category term="sql"></category><category term="architecture"></category><category term="mysql"></category><category term="best-practices"></category><category term="security"></category></entry><entry><title>Cryptography in Python</title><link href="https://pyvideo.org/pygotham-2016/cryptography-in-python.html" rel="alternate"></link><published>2016-07-17T00:00:00+00:00</published><updated>2016-07-17T00:00:00+00:00</updated><author><name>Amirali Sanatinia</name></author><id>tag:pyvideo.org,2016-07-17:pygotham-2016/cryptography-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today we use cryptography in almost everywhere. From surfing the web over https, to working remotely over ssh. However, many of us do not appreciate the subtleties of crypto primitives, and the lack of correct and updated resources leads to design and development of vulnerable applications. In this talk, we cover the building block of modern crypto, and how to develop secure applications in Python.&lt;/p&gt;
</summary><category term="Cryptography"></category></entry><entry><title>Exploring Cryptography</title><link href="https://pyvideo.org/pygotham-2016/exploring-cryptography.html" rel="alternate"></link><published>2016-07-17T00:00:00+00:00</published><updated>2016-07-17T00:00:00+00:00</updated><author><name>John Downs</name></author><id>tag:pyvideo.org,2016-07-17:pygotham-2016/exploring-cryptography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A hacker's introduction to cryptography&lt;/p&gt;
</summary><category term="Cryptography"></category></entry><entry><title>Cryptography for Django Applications</title><link href="https://pyvideo.org/djangocon-us-2012/cryptography-for-django-applications.html" rel="alternate"></link><published>2012-09-05T00:00:00+00:00</published><updated>2012-09-05T00:00:00+00:00</updated><author><name>Erik Labianca</name></author><id>tag:pyvideo.org,2012-09-05:djangocon-us-2012/cryptography-for-django-applications.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A review of encryption in the context of a web application storing
sensitive information. Topics covered include choosing whether to use
crypto, selection of tools, proper usage (including examples), and
operational considerations with respect to security assessment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="introduction"&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;The web is a hostile place, and isn't showing any signs of becoming less
so. In order to mitigate this, many developers turn to cryptography.
Unfortunately, cryptography can be complicated, and is easily
circumvented if not properly handled. This presentation will provide an
introduction to cryptographic tools available to Python/Django
applications, appropriate use cases for each, proper usage, and
operational concerns necessary to operate in a certified environment.
Finally, we will also demonstrate a reusable application that wraps this
all up, providing secure key-management capabilities to a running Django
environment via the Django admin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-encrypt"&gt;
&lt;h4&gt;Why Encrypt?&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="rules-of-encryption"&gt;
&lt;h4&gt;Rules of Encryption&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't do it if you don't need it.&lt;/li&gt;
&lt;li&gt;Don't write your own.&lt;/li&gt;
&lt;li&gt;Understand what you're doing if you do.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="when-to-encrypt"&gt;
&lt;h4&gt;When to encrypt?&lt;/h4&gt;
&lt;div class="section" id="understand-what-you-re-protecting"&gt;
&lt;h5&gt;Understand what you're protecting&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data&lt;/li&gt;
&lt;li&gt;User records&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="understand-your-attack-vectors"&gt;
&lt;h5&gt;Understand your attack vectors&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data (backups, revision control)&lt;/li&gt;
&lt;li&gt;Systems&lt;/li&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Transport&lt;/li&gt;
&lt;li&gt;Client&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="understand-the-types-of-encryption-you-might-use"&gt;
&lt;h5&gt;Understand the types of encryption you might use:&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hashing&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="passwords-are-a-special-case-use-a-key-derivation-function"&gt;
&lt;h6&gt;Passwords are a special case. Use a key derivation function&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PBKDF2 – Upgrade to Django 1.4!&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hashing-algorithms"&gt;
&lt;h6&gt;Hashing Algorithms&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MD5 - fine as a checksum. not fine as a cryptographic hash.&lt;/li&gt;
&lt;li&gt;SHA1 - fine as a checksum. becoming less fine as a cryptographic hash
every day&lt;/li&gt;
&lt;li&gt;SHA2 - so far so good. use as many bits as you can handle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="symmetric-encryption"&gt;
&lt;h5&gt;Symmetric Encryption&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;li&gt;Reversible&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="algorithms-symmetric"&gt;
&lt;h6&gt;Algorithms (Symmetric)&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Caesar Cipher (for fun puzzles)&lt;/li&gt;
&lt;li&gt;DES (don't use)&lt;/li&gt;
&lt;li&gt;AES (certified)&lt;/li&gt;
&lt;li&gt;Blowfish&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="asymmetric-encryption"&gt;
&lt;h5&gt;Asymmetric Encryption&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Slow&lt;/li&gt;
&lt;li&gt;One-way&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="algorithms-asymmetric"&gt;
&lt;h6&gt;Algorithms (Asymmetric)&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;DSA&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="uses"&gt;
&lt;h7&gt;Uses&lt;/h7&gt;
&lt;div class="section" id="signing"&gt;
&lt;h8&gt;Signing&lt;/h8&gt;
&lt;p&gt;Web of Trust&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PGP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PKI&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="encryption"&gt;
&lt;h8&gt;Encryption&lt;/h8&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PGP&lt;/li&gt;
&lt;li&gt;SSL&lt;/li&gt;
&lt;li&gt;TLS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="doing-it-right"&gt;
&lt;h4&gt;Doing it right&lt;/h4&gt;
&lt;div class="section" id="use-known-good-algorithms"&gt;
&lt;h5&gt;Use known-good algorithms&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;AES-256&lt;/li&gt;
&lt;li&gt;SHA2&lt;/li&gt;
&lt;li&gt;RSA&lt;/li&gt;
&lt;li&gt;DSA&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-known-good-implementations"&gt;
&lt;h5&gt;Use known-good implementations&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open Source is good&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-credit"&gt;
&lt;h5&gt;Extra Credit&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FIPS 140 certified implementations&lt;/li&gt;
&lt;li&gt;FIPS 140 / NIST configurations&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="transport-always-use-https"&gt;
&lt;h5&gt;Transport (always use HTTPS)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use good algorithms AES-256&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="at-rest-insecure-servers-or-backups"&gt;
&lt;h5&gt;At Rest (insecure servers or backups)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Understand the ramifications of key management&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;div class="section" id="hashing"&gt;
&lt;h5&gt;Hashing&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use a key-derivation function&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="don-t-be-linked-in"&gt;
&lt;h6&gt;Don't be linked-in&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Salt your hashes (with a secret).&lt;/li&gt;
&lt;li&gt;Salt and pepper your hashes if possible (with a known unique value)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h5&gt;SSL&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Forced connections&lt;/li&gt;
&lt;li&gt;Making the application aware&lt;/li&gt;
&lt;li&gt;Hardened cipher selection&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="robust-pki"&gt;
&lt;h6&gt;Robust PKI&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Client authentication&lt;/li&gt;
&lt;li&gt;SSL Test Page&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h5&gt;Asymmetric Encryption.&lt;/h5&gt;
&lt;div class="section" id="key-management"&gt;
&lt;h6&gt;Key Management&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using GPG Agent&lt;/li&gt;
&lt;li&gt;GPG Manager App&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pgp-files"&gt;
&lt;h6&gt;PGP Files&lt;/h6&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h5&gt;Symmetric Encryption.&lt;/h5&gt;
&lt;div class="section" id="id3"&gt;
&lt;h6&gt;Key Management.&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use Asymmetric Encryption&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="use-a-unique-initialization-vector-if-possible"&gt;
&lt;h6&gt;Use a unique Initialization Vector if possible&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;LoopBack Devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="cryptography"></category><category term="django"></category></entry></feed>