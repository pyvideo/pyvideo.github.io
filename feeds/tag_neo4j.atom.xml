<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_neo4j.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T00:00:00+00:00</updated><entry><title>Traversing the land of graph computing and databases</title><link href="https://pyvideo.org/pycon-italia-2019/traversing-the-land-of-graph-computing-and-databases.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Akash Tandon</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/traversing-the-land-of-graph-computing-and-databases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphs have long held a special place in the computer science’s history
(and codebases). With the advent of a new wave of the information age
characterized by a greater emphasis on linked data, graph computing and
databases have risen to prominence. Be it enterprise knowledge graphs or
graph-based analytics, there are a great number of potential
applications.&lt;/p&gt;
&lt;p&gt;To reap the benefits of graph databases and computing, one needs to
understand the basics as well as current technical landscape and
offerings. Also, it’s important to understand if a graph-based approach
suits your problem. This talk will touch upon these points. Be prepared
to learn some graph fundamentals and witness a live demo using Neo4j, a
popular graph database.&lt;/p&gt;
&lt;p&gt;Soft pre-requisites include familiarity with Python and experience
working with a SQL or NoSQL database. There are no hard pre-requisites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1682"&gt;https://python.it/feedback-1682&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="nosql"></category><category term="graph"></category><category term="analytics"></category><category term="databases"></category><category term="neo4j"></category><category term="datascience"></category><category term="graphdatabase"></category></entry><entry><title>Unveiling the potential of graph databases with Python and Neo4j</title><link href="https://pyvideo.org/pycon-italia-2018/unveiling-the-potential-of-graph-databases-with-python-and-neo4j.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Fabio Lamanna</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/unveiling-the-potential-of-graph-databases-with-python-and-neo4j.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every time we are dealing with data coming from the real world, big and
not so big, you know that usually 80% of the time is needed to clean,
prepare and arrange them. We can then spend the other 20% of the time
enjoying our beloved data analysis.&lt;/p&gt;
&lt;p&gt;The thing that you may know less is that in the last years, the Neo4j
graph database went into the light of being the “right” place to store
data, thanks to its capacity of direct modelling relations among data,
its high availability and its easy, fast and clean query language
Cypher.&lt;/p&gt;
&lt;p&gt;In this talk I’m going to show you some tips to set up in the right way
your data using Pandas, in order to proper model and import them into
Neo4j. A Neo4j Python driver is available to easily import Cypher
queries embedded in Python code. Still, the py2neo package allows
building and querying your database right within your favourite snake
command line.&lt;/p&gt;
&lt;p&gt;Forget about “tall as teen” SQL queries here; thanks to Pandas, Python
and Cypher modelling, loading and query your database is going to be
really straightforward. After this talk, you’ll can’t wait to give Neo4j
a try!&lt;/p&gt;
&lt;p&gt;Prerequisite: a little knowledge of Pandas.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="database"></category><category term="graph"></category><category term="storage"></category><category term="neo4j"></category><category term="data"></category><category term="pandas"></category></entry><entry><title>Building a Recommendation Engine with Neo4j and Python</title><link href="https://pyvideo.org/pydata-chicago-2016/building-a-recommendation-engine-with-neo4j-and-python.html" rel="alternate"></link><published>2016-08-26T00:00:00+00:00</published><updated>2016-08-26T00:00:00+00:00</updated><author><name>Kevin Van Gundy</name></author><id>tag:pyvideo.org,2016-08-26:pydata-chicago-2016/building-a-recommendation-engine-with-neo4j-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/secret/DwbGswbtHTmYvy"&gt;http://www.slideshare.net/secret/DwbGswbtHTmYvy&lt;/a&gt;
Github: github.com/kevinvangundy&lt;/p&gt;
&lt;p&gt;In this session we will show how to build a meetup.com recommendation engine using Neo4j and Python. Our solution will be a hybrid approach which makes uses of both content based and collaborative filtering using Neo4j to glue all the data together, Cypher to query the dataset and Python to do analysis and pre/post processing of data.&lt;/p&gt;
</summary><category term="neo4j"></category></entry><entry><title>Persistent Graphs in Python with Neo4j (#140)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--persistent-graphs-in-python-with-neo4.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Tobias Ivarsson</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--persistent-graphs-in-python-with-neo4.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Persistent Graphs in Python with Neo4j&lt;/p&gt;
&lt;p&gt;Presented by Tobias Ivarsson&lt;/p&gt;
&lt;p&gt;Databases that employ a data model other than the relational model are
increasingly a hot topic. Neo4j is an open source database where the
data model is a graph. Data in Neo4j is stored as Nodes and
Relationships in between nodes. A lot of the data we model in
applications every day is actually graph oriented, having a database
that persists such data natively is a huge benefit. In this presentation
we will see how to use Neo4j in Python, and demonstrate this with a web
application in Django.&lt;/p&gt;
</summary><category term="neo4j"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>