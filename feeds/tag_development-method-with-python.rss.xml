<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Development Method with Python</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 02 Oct 2022 00:00:00 +0000</lastBuildDate><item><title>How to Use Python Type Hints Properly</title><link>https://pyvideo.org/pycon-korea-2022/how-to-use-python-type-hints-properly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I think many people are already familiar with the simple Python type hints. However, there may be times when you cannot give type hints as you want in practice with only the basic usage. I felt that type hints were more useful after I learned about the various functions of Python type hints and started using them. In fact, simple type hints are often enough for most Python codes. The complex type hints introduced in this session are not used often. So I think there are often cases where you forget or do not use them because you do not know about them. In this session, rather than going into depth about the application concepts of type hints one by one, I will introduce them in general. I hope that you will vaguely remember them when you encounter a situation where you need them later. Personally, I learned a lot about this “type system for people who are not compilers” while using TypeScript. There are still many things that Python type hints are inconvenient or cannot express, but I think Python type hints have their own charm. I think the advantages are that they can be used dynamically and that they are used within existing grammar. Of course, there are limitations due to this, but I expect that they will improve as they develop further in the future. I hope that this session will be an opportunity to discuss Python type hints with more people and to spark new interest in type hints.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Choi Bo-seong</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/how-to-use-python-type-hints-properly.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item><item><title>Migrating large Python projects to a monorepo using Pantsbuild</title><link>https://pyvideo.org/pycon-korea-2022/migrating-large-python-projects-to-a-monorepo-using-pantsbuild.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session introduces the process of migrating the Backend.AI open source project to a mono-repo using the Pantsbuild tool. The Backend.AI project is written with over 74,000 lines of Python code accumulated over 7 years, and has a code base with considerable complexity that requires combining and installing multiple packages to develop and test the overall function. As the number of project participants increased and the internal code became more complex, managing the repository by package unit became a bottleneck in the development process, and to overcome this problem, we considered and decided to introduce a mono-repo. Although a mono-repo is not always the right answer in all cases, we considered various conditions such as the size of the development team, the current and expected complexity of internal dependencies, the way the organization operates, the scope of the impact of code changes, the release cycle, and the limitations of the project board function of GitHub, an issue management tool, and we thought it was a reasonable transition at this point. In particular, the process of writing and reviewing multiple pull requests in multiple repositories to resolve a single issue significantly increased the context switching overhead of developers, and there were repeated problems of forgetting to write pull requests for specific repositories or forgetting to unify branches, leading to errors. In the process of converting to a monorepo, Pantsbuild was introduced to explicitly and automatically manage internal and external dependencies as much as possible. Pantsbuild is a modern build tool that primarily supports the Python ecosystem, and it supports powerful caching and parallel execution of build and CI-related tasks. In this presentation, we will introduce how we merged existing Backend.AI repositories to enable seamless use of Pantsbuild, and the process of adapting to Pantsbuild by writing Pantsbuild plugins and responding to Backend.AI's dynamic module loading mechanism. We will also explain additional problems that the development team encountered after the basic migration and how we dealt with them. We hope that this session will provide you with examples and hints on configuring a monorepo for a large-scale Python project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kim Jun-ki</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/migrating-large-python-projects-to-a-monorepo-using-pantsbuild.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item><item><title>Python Code Review Tips</title><link>https://pyvideo.org/pycon-korea-2022/python-code-review-tips.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here are some libraries that you can use when you want to suggest opinions as a reviewer during a Python application code review but lack evidence, when you want to provide evidence for changes as a reviewer, or when you want to automatically handle annoying things that need to be caught during the code review phase. We will learn about dis, a library for analyzing bytecode of Python code, timeit, a library for measuring execution time of Python code snippets, and pre-commit, a git-hook framework that automatically searches for and corrects parts to be caught during code review using git-hook, from the basic usage of pre-commit to how to use it during code review.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kim Dong-hyun</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/python-code-review-tips.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item><item><title>Technical Art 101 Building a Blender Pipeline with Python</title><link>https://pyvideo.org/pycon-korea-2022/technical-art-101-building-a-blender-pipeline-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an essential language for technical artists around the world. Maya, one of the most widely used DCC (Digital Content Creation) tools, also uses Python as a scripting language in addition to MEL (Maya Embedded Language). Blender, which has recently emerged as a rising powerhouse in DCC, has also adopted Python as a scripting language, which is useful for creating plugins and building pipelines. This lecture shares the concept of how Python is used in actual game development from the perspective of a technical artist, from the perspective of a technical artist to practical experience. Technical Art is a craft that connects engineers and artists, and practitioners in this job are called technical artists. The work areas of technical artists are diverse, including rendering or building asset pipelines, shader writing, optimization, and profiling, and these work areas also vary by industry. Technical art is a bridge between technology and art, and depending on each individual's capabilities, some individuals have strong capabilities as engineers while others have weak capabilities as artists. Blender, like Maya, uses Python as a scripting language, so all Blender plugins are made in Python. In this reality, Python, which automates unnecessary repetition in artists' daily lives and easily provides necessary tools and functions, is an essential language for building a game development pipeline using Blender. In this session, we will introduce the concept of &amp;quot;pipeline&amp;quot; for building a pipeline, which is one of the core capabilities of a technical artist. In addition, we will introduce an extension of Visual Studio Code that facilitates Blender scripting using Python, and share our experience building an asset pipeline that is actually used in game development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Park Sung-guk</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/technical-art-101-building-a-blender-pipeline-with-python.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item><item><title>Challenge Building Management with Event Sourcing</title><link>https://pyvideo.org/pycon-korea-2022/challenge-building-management-with-event-sourcing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We introduce the Event Sourcing pattern used in stock account management by Doomoolmori's Boolileo, a robo-advisor service. Event Sourcing is used to stably manage states that are prone to change. An example that can be easily encountered in everyday life is a bankbook. If you look at all the deposit/withdrawal details of your bankbook and calculate from the first occurrence to the last occurrence, you can find out your current balance. In this lesson, we will talk about how the fictional character Ensome improves a building management project using Event Sourcing. We will not go into depth about Event Sourcing. The goal is to explain only the essential parts lightly so that you can naturally accept Event Sourcing. If there is anyone who is interested in Event Sourcing and wants to introduce it, we will find out whether this pattern is really necessary for the project you are trying to apply it to using the project Ensome conducted in the last part.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">cotton</dc:creator><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-01:/pycon-korea-2022/challenge-building-management-with-event-sourcing.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item><item><title>(No time to be bored) Deep Joy and Joy with Python (Subtitle: Wanted Lab's Python Stories)</title><link>https://pyvideo.org/pycon-korea-2022/no-time-to-be-bored-deep-joy-and-joy-with-python-subtitle-wanted-labs-python-stories.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wanted Lab uses Python as its main technology in the server and data fields, and shares its experiences with Python. In the server part, we talk about the hardships we experienced when migrating Wanted's actual service from Flask to FastAPI. We introduce three major difficulties we experienced when applying FastAPI, which has not yet been released as a major version, to the production level, and talk about how we solved those difficulties. We also briefly introduce our plans to use FastAPI better in the future. In the data engineering part, we introduce representative cases that can clearly show how Wanted Lab's data team independently solves problems in the life cycle from product development to distribution. Wanted Lab's data environment enables flexible collaboration with other teams through responsibility separation and environment separation. We introduce the method of how we built this independent data environment, and talk about how we can further advance the data team in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kwon Jin-man Choi Jong-won</dc:creator><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-01:/pycon-korea-2022/no-time-to-be-bored-deep-joy-and-joy-with-python-subtitle-wanted-labs-python-stories.html</guid><category>PyCon Korea 2022</category><category>Development Method with Python</category></item></channel></rss>