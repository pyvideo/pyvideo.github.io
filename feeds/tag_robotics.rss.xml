<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Robotics</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Boosting simulation performance with Python</title><link>https://pyvideo.org/europython-2020/boosting-simulation-performance-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simulating hours of robots' work in minutes&lt;/p&gt;
&lt;p&gt;Our product uses a fleet of real (not virtual) robots to perform different tasks in a fulfillment warehouse. Simulation is an essential tool in this kind of product: it allows to perform regression tests and test new features without the need for real and expensive hardware, to compare the impact of different algorithms and optimizations, to inject failures, and more.&lt;/p&gt;
&lt;p&gt;Tasks performed by physical robots take time (movement over the warehouse, box lifting, etc.), but in simulation, where virtual robots are used, there is no need to wait all that time. I will describe our implementation of the Discrete-Event Simulation approach which allows us to simulate hours of real-life in minutes.&lt;/p&gt;
&lt;p&gt;Shortening simulation time improves the development process by providing faster feedback to developers and quicker CI and testing cycles. Another powerful advantage is a more deterministic simulation - using this approach, each component in the system gets equal opportunity (CPU time) in each time tick, which is not affected by the underlying machine that the simulation is running on. Also, it is possible to simulate any date and hour easily, and by that we wouldn't panic before the &amp;quot;Y2K bug&amp;quot;.&lt;/p&gt;
&lt;p&gt;I will elaborate on some challenges we encountered: time leak of event-driven components, differences between dev and production environments and running a distributed simulation due to the transition to microservices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eran Friedman</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/boosting-simulation-performance-with-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Architecture</category><category>Robotics</category><category>Testing</category></item><item><title>Simulation of logistic systems in Python with salabim</title><link>https://pyvideo.org/europython-2020/simulation-of-logistic-systems-in-python-with-salabim.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Salabim can help to model complex logistic systems, like warehouses, ports, supply chains, hospitals&lt;/p&gt;
&lt;p&gt;Discrete event simulation is a very powerful technique in many fields, like transport, warehousing, hospitals, manufacturing and logistics.
There are several commercial packages that provide high end GUIs to design a system and to animate the operations. These  packages are neary always close source and are very expensive (think USD 10-20 K per user). Often implementing complex algorithms is cumbersome.
On the other end of the spectrum are open source packages that use existing program languages. Python is particularly interesting because of the vast number of (scientific) packages, like machine learning, statistics and databases.
In te Python landscape there is SimPy, that is rather limited in functionality. In this poster I will present my discrete even simulation package called salabim. Salabim uses coroutines via generators and makes it very easy to model complex systems. The package offers advanced real time (2D) animation, monitoring and statistical sampling.
I will show some applications and how a simple model is built up.&lt;/p&gt;
&lt;p&gt;Ruud van der Ham, core developer salabim&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ruud van der Ham</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/simulation-of-logistic-systems-in-python-with-salabim.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Algorithms</category><category>Engineering</category><category>Robotics</category><category>Use Case</category><category>Visualization</category></item><item><title>CloudSim: robots en la nube, el caso del DARPA Robotics Challenge</title><link>https://pyvideo.org/pycon-es-2013/cloudsim-robots-en-la-nube-el-caso-del-darpa-robotics-challenge.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: Esteve Fernández&lt;/p&gt;
&lt;p&gt;Track: BityVip (Científico)&lt;/p&gt;
&lt;p&gt;Con la popularización de los servicios de la nube, se abren nuevas oportunidades para muchos ámbitos, incluido el mundo de la robótica. El DARPA Robotics Challenge (&lt;a class="reference external" href="http://www.theroboticschallenge.org/"&gt;http://www.theroboticschallenge.org/&lt;/a&gt;) es una competición a nivel mundial organizada por DARPA para producir robots que ayuden en desastres, tanto naturales como provocados. En la primera fase de la competición, los equipos participantes simularon sus algoritmos usando la nube y el software de licencia libre CloudSim, escrito en Python y desarrollado por la Open Source Robotics Foundation. En esta charla hablaré de los requisitos que tenía que cumplir CloudSim, los retos a la hora de desarrollarlo e implantarlo, y cómo puede ayudar a cualquier organización que necesite simular experimentos robóticos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Esteve Fernández</dc:creator><pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-31:/pycon-es-2013/cloudsim-robots-en-la-nube-el-caso-del-darpa-robotics-challenge.html</guid><category>PyCon ES 2013</category><category>robotics</category></item><item><title>Pilotare un braccio robotico dal cloud con GenroPy e Raspberry</title><link>https://pyvideo.org/pycon-italia-2017/pilotare-un-braccio-robotico-dal-cloud-con-genropy-e-raspberry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spesso con gli applicativi in cloud si pone il problema di pilotare
periferiche presenti nella rete locale o collegate direttamente al
computer come registratori di cassa, stampanti industriali o altri
dispositivi. Per superare questa difficoltà abbiamo sviluppato un client
in Python sfruttando il framework GenroPy e installandolo sul proprio
computer o su una scheda RaspberryPi possiamo pilotare le periferiche
dal software in cloud. Il software è scritto interamente in Python ed è
studiato per usare un sistema a plugin grazie al quale basta scrivere un
solo modulo Python per aggiungere le funzionalità specifiche di una
singola periferica. Nel talk mostreremo come pilotare un piccolo braccio
robotico direttamente dal web sfruttando i WebSocket per la
comunicazione con il server, le Bag di GenroPy per la messaggistica e
qualche componente elettronico per il collegamento fisico con il
braccio.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michele Bertoldi</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:/pycon-italia-2017/pilotare-un-braccio-robotico-dal-cloud-con-genropy-e-raspberry.html</guid><category>PyCon Italia 2017</category><category>raspberrypi</category><category>genropy</category><category>robotics</category></item><item><title>Using Python to Create Robotic Simulations for Planetary Exploration (#159)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--using-python-to-create-robotic-simula.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to Create Robotic Simulations for Planetary Exploration
(#159)&lt;/p&gt;
&lt;p&gt;Presented by Dr. Jonathan M Cameron (Jet Propulsion Laboratory (NASA))&lt;/p&gt;
&lt;p&gt;The primary activity of the Dartslab (&lt;a class="reference external" href="http://dartslab.jpl.nasa.gov"&gt;http://dartslab.jpl.nasa.gov&lt;/a&gt;) at
Jet Propulsion Laboratory (JPL) is to create simulations of robotic
vehicles for planetary exploration. We have created simulations of a
wide variety of robotic vehicles such as spacecraft, rovers, and
airships. We have been using Python in a variety of ways to build our
simulations. In this talk we will outline how we use Python to set up a
runtime environment for our simulations and to tie together
computationally intense C++ code modules at runtime. We will also
discuss how we have been using Python to help prototype and design C++
code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Jonathan M Cameron</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--using-python-to-create-robotic-simula.html</guid><category>PyCon US 2010</category><category>nasa</category><category>pycon</category><category>pycon2010</category><category>robotics</category><category>simulation</category></item></channel></rss>