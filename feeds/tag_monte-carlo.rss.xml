<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 18 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Designing a Python-based Monte Carlo Tool for Generating Non-Equilibrium Semi-Crystalline Polymer Configurations</title><link>https://pyvideo.org/scipy-2017/designing-a-python-based-monte-carlo-tool-for-generating-non-equilibrium-semi-crystalline-polymer-configurations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Semi-crystalline polymers are a class of polymers which are used in applications ranging from piping to photovoltaics to food packaging. Despite their near-ubiquitous use, our understanding of semi-crystalline polymer microstructure and its connection to mechanical properties is far from complete. While measuring the mechanical properties of material systems using Molecular Dynamics simulations is routine, generating the initial conditions for semi-crystalline polymers is difficult due to their non-equilibrium, kinetically trapped nature. In this contribution, I discuss the development of a python-based simulation tool which uses an adapted Configurational Bias Monte Carlo technique to “grow” coarse-grained representations of semi-crystalline polymer systems. Specifically, I will discuss the process of developing a performant and flexible simulation tool for materials simulation using various tools in the python ecosystem including NumPy, Cython, VTK, and various profiling tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Martin</dc:creator><pubDate>Tue, 18 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-18:scipy-2017/designing-a-python-based-monte-carlo-tool-for-generating-non-equilibrium-semi-crystalline-polymer-configurations.html</guid><category>monte carlo</category></item><item><title>PyMC: Markov Chain Monte Carlo in Python</title><link>https://pyvideo.org/scipy-2014/pymc-markov-chain-monte-carlo-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyMC is a Python module that implements Bayesian statistical models and
fitting algorithms, including Markov chain Monte Carlo (MCMC). Its
flexibility, extensibility, and clean interface make it applicable to a
large suite of statistical modeling applications. The upcoming release
of PyMC 3 features an expanded set of MCMC samplers, including
Hamiltonian Monte Carlo.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://pymc-devs.github.io/pymc/"&gt;PyMC&lt;/a&gt; is a Python module that
implements Bayesian statistical models and fitting algorithms, including
Markov chain Monte Carlo (MCMC). Its flexibility and extensibility make
it applicable to a large suite of problems. Along with core sampling
functionality, PyMC includes methods for summarizing output, plotting,
goodness-of-fit and convergence diagnostics. PyMC seeks to make Bayesian
analysis as painless as possible, so that it may be used by a range of
data analysts. Its key features include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fits Bayesian statistical models with Markov chain Monte Carlo and
other algorithms.&lt;/li&gt;
&lt;li&gt;Includes a large suite of well-documented statistical distributions.&lt;/li&gt;
&lt;li&gt;Uses NumPy for numerics wherever possible.&lt;/li&gt;
&lt;li&gt;Includes a module for modeling Gaussian processes.&lt;/li&gt;
&lt;li&gt;Sampling loops can be paused and tuned manually, or saved and
restarted later.&lt;/li&gt;
&lt;li&gt;Creates summaries including tables and plots.&lt;/li&gt;
&lt;li&gt;Traces can be saved to the disk as plain text, Python pickles, SQLite
or MySQL database, or hdf5 archives.&lt;/li&gt;
&lt;li&gt;Several convergence diagnostics are available.&lt;/li&gt;
&lt;li&gt;Extensible: easily incorporates custom step methods and unusual
probability distributions.&lt;/li&gt;
&lt;li&gt;MCMC loops can be embedded in larger programs, and results can be
analyzed with the full power of Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The upcoming release of &lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC 3&lt;/a&gt;
features an expanded set of MCMC samplers, including Hamiltonian Monte
Carlo. For this, we tap into the power of Theano to provide automatic
evaluation of mathematical expressions, including gradients used by
modern MCMC samplers.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;source&lt;/a&gt; and
&lt;a class="reference external" href="http://pymc-devs.github.io/pymc/"&gt;documentation&lt;/a&gt; for PyMC can be
found on GitHub.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Fonnesbeck</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/pymc-markov-chain-monte-carlo-in-python.html</guid><category>markov</category><category>monte carlo</category></item></channel></rss>