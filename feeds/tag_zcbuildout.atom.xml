<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_zcbuildout.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-08-22T00:00:00+00:00</updated><entry><title>PyConAU 2010: whoops I deployed again - new ways to get your app in the cloud</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;whoops I deployed again - new ways to get your app in the cloud&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;A overview of new tools for deploying python based applications to
servers including cloud inferstructure such as Amazon Ec2.&lt;/p&gt;
&lt;p&gt;The talk will cover Ian Bicking's Silver Lining, zc.buildout, Fabric and
hostout. This talk will focus on how to get your first web app hosted
easily.&lt;/p&gt;
</summary><category term="deployment"></category><category term="hostout"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="silverlining"></category><category term="web"></category><category term="wsgi"></category><category term="zc.buildout"></category></entry><entry><title>How to maintain big app stacks without losing your mind</title><link href="https://pyvideo.org/pycon-au-2011/how-to-maintain-big-app-stacks-without-losing-you.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/how-to-maintain-big-app-stacks-without-losing-you.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;zc.buildout is a powerful build/configure/deployment tool for creating
applications from multiple parts, some not python. It's perfect for
sharing a development environment or deploy applications to many hosts.
This tutorial will cover basic concepts, similarity to other tools such
as virtual-env, puppet etc as well as practical examples. zc.buildout
has successful been used with web applications such as Plone, django and
pyramid.&lt;/p&gt;
</summary><category term="deploy"></category><category term="django"></category><category term="puppet"></category><category term="tutorial"></category><category term="web"></category><category term="zc.buildout"></category></entry><entry><title>PyCon 2009: Eggs and Buildout Deployment in Python (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pyth0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pyth0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Puzzled about Python eggs and packages? Wondering how to repeatably pull
together collections of packages into standalone development, testing
and deployment environments, all while managing inter-dependencies? In
this participatory tutorial, we'll start with distutils, walk through
using eggs in the cheeseshop and creating your own eggs, touch a bit on
using virtualenv to set up a development environment, and then dig into
using zc.buildout to rigorously control assembly specifications, with
build recipes, versioning and dependency management. We'll close by
showing how to create your own recipes. Attendees are strongly
encouraged to bring a laptop or partner with someone who does.&lt;/p&gt;
</summary><category term="cheeseshop"></category><category term="eggs"></category><category term="pycon"></category><category term="pycon2009"></category><category term="virtualenv"></category><category term="zc.buildout"></category></entry><entry><title>PyCon 2009: Eggs and Buildout Deployment in Python (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pyth1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pyth1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Puzzled about Python eggs and packages? Wondering how to repeatably pull
together collections of packages into standalone development, testing
and deployment environments, all while managing inter-dependencies? In
this participatory tutorial, we'll start with distutils, walk through
using eggs in the cheeseshop and creating your own eggs, touch a bit on
using virtualenv to set up a development environment, and then dig into
using zc.buildout to rigorously control assembly specifications, with
build recipes, versioning and dependency management. We'll close by
showing how to create your own recipes. Attendees are strongly
encouraged to bring a laptop or partner with someone who does.&lt;/p&gt;
</summary><category term="cheeseshop"></category><category term="eggs"></category><category term="pycon"></category><category term="pycon2009"></category><category term="virtualenv"></category><category term="zc.buildout"></category></entry><entry><title>PyCon 2009: Eggs and Buildout Deployment in Python (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pytho.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--eggs-and-buildout-deployment-in-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Puzzled about Python eggs and packages? Wondering how to repeatably pull
together collections of packages into standalone development, testing
and deployment environments, all while managing inter-dependencies? In
this participatory tutorial, we'll start with distutils, walk through
using eggs in the cheeseshop and creating your own eggs, touch a bit on
using virtualenv to set up a development environment, and then dig into
using zc.buildout to rigorously control assembly specifications, with
build recipes, versioning and dependency management. We'll close by
showing how to create your own recipes. Attendees are strongly
encouraged to bring a laptop or partner with someone who does.&lt;/p&gt;
</summary><category term="cheeseshop"></category><category term="eggs"></category><category term="pycon"></category><category term="pycon2009"></category><category term="virtualenv"></category><category term="zc.buildout"></category></entry><entry><title>PyCon 2009: How AlterWay releases web applications using zc.buildout (#22)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--how-alterway-releases-web-application.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--how-alterway-releases-web-application.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will describe how zc.buildout is used in our company every day
to develop, package and distribute Pylons, Django or Plone applications.
It will focus on the best practices we have built around the tool and
the tools we have built on the top of it to speed up our work.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="zc.buildout"></category></entry><entry><title>PyCon 2009: Plenary: Morning Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--morning-lightning-talks.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Adam Fast</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Plenary: Morning Lightning Talks covering GeoDjango, Zope, Launchpad,
JSOT, AppEngine, StackOverflow, Miro, zc.buildout and RPM, ham radio,
Plyne, GozerBot, picking tools, and stop watch.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:20) GeoDjango - Justin Bronn&lt;/li&gt;
&lt;li&gt;(05:50) What's up with Zope - Martijn Faassen&lt;/li&gt;
&lt;li&gt;(10:55) Scripting Launchpad - Paul Hummer&lt;/li&gt;
&lt;li&gt;(13:50) JSQT - ?&lt;/li&gt;
&lt;li&gt;(16:10) Python, AppEngine, and Informatics - Charles Severance&lt;/li&gt;
&lt;li&gt;(20:55) an online game called stackoverflow - John Mulder&lt;/li&gt;
&lt;li&gt;(25:25) Miro - Chris Webber&lt;/li&gt;
&lt;li&gt;(28:40) Deploying applications with zc.buildout and RPM - Jim Fulton&lt;/li&gt;
&lt;li&gt;(34:10) Ham radio and Python - Adam Fast&lt;/li&gt;
&lt;li&gt;(38:30) Plone + Pylons = Plyne - Roberto Allende&lt;/li&gt;
&lt;li&gt;(41:35) GozerBot - John Hampton&lt;/li&gt;
&lt;li&gt;(44:25) Software Engineering and the Pickling Tools - Rich Saunders&lt;/li&gt;
&lt;li&gt;(48:45) Talks about the stop watch&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="appengine"></category><category term="geodjango"></category><category term="informatics"></category><category term="jsqt"></category><category term="launchpad"></category><category term="miro"></category><category term="pickling"></category><category term="plone"></category><category term="plyne"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pylons"></category><category term="stack overflow"></category><category term="zc.buildout"></category><category term="zope"></category></entry><entry><title>Deploying Applications with zc.buildout</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>JIm Fulton</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying Applications with zc.buildout&lt;/p&gt;
&lt;p&gt;Presented by JIm Fulton&lt;/p&gt;
&lt;p&gt;This talk described using zc.buildout for application deployment to
production environments. It presents building self-contained source
releases, and using these to create RPM distributions. It shows how to
use buildout to configure services, including web servers, cron jobs,
monitoring and so on. Finally, it presents ongoing efforts to deploy
applications that span many machines.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We build and deploy large Python applications for our customers. These
applications are built from many component parts including Python
packages and non-python applications and tools. Assembling these pieces
can be a tedious and error-prone process. The zc.buildout (Buildout)
package was developed to automate this process.&lt;/p&gt;
&lt;p&gt;As our use of buildout has matured, we've integrated it with system
packaging tools and developed techniques for managing software
deployemnt and service configuration. I'll provide a detailed
description of the techniques and tools used.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Buildout&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;History&lt;/li&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;li&gt;Recipes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment pholisophy: keeping software and service configuration
separate&lt;/li&gt;
&lt;li&gt;System Packaging&lt;ul&gt;
&lt;li&gt;Making self-contained source releases (tar balls)&lt;/li&gt;
&lt;li&gt;Creating system packages from source releases with RPM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service configuration -- system build outs&lt;ul&gt;
&lt;li&gt;Scope: Python processes, cron, log rotation, run scripts,
monitoring, etc.&lt;/li&gt;
&lt;li&gt;Place files in &amp;quot;standard&amp;quot; locations.&lt;/li&gt;
&lt;li&gt;Run by root&lt;/li&gt;
&lt;li&gt;examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meta recipes&lt;ul&gt;
&lt;li&gt;Goal: provide only essential information.&lt;/li&gt;
&lt;li&gt;Recipes provide basic level of abstraction.&lt;/li&gt;
&lt;li&gt;Buildout provides basic tools to build on these abstractions, but
these tools only scale so far.&lt;/li&gt;
&lt;li&gt;Buildout configuration language is &lt;em&gt;not&lt;/em&gt; a programming language.&lt;/li&gt;
&lt;li&gt;Meta-recipes provide a much more powerful way to build high-level
abstractions over basic recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next step: Make me a ...&lt;ul&gt;
&lt;li&gt;Model based definition of complete systems spanning multiple hosts
with interlocking services&lt;/li&gt;
&lt;li&gt;Automatic management of resources&lt;/li&gt;
&lt;li&gt;Implemented with ssh, system packaging tools (e.g. yum) and
buildout-based tools.&lt;/li&gt;
&lt;li&gt;Four levels of abstraction&lt;/li&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="zc.buildout"></category></entry><entry><title>Packaging, from Distutils to Distutils2</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--packaging--from-distutils-to-distutil.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--packaging--from-distutils-to-distutil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging, from Distutils to Distutils2&lt;/p&gt;
&lt;p&gt;Tarek Ziadé&lt;/p&gt;
&lt;p&gt;Packaging or installing a Python application can be extremely painful.
This talk will deep-dive into the new Distutils2 features and explain
how you can use them in your project &lt;em&gt;today&lt;/em&gt; to make life easier for
everyone (users, OS package managers, developers, etc.).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Distutils2 presentation and goals&lt;ol class="arabic"&gt;
&lt;li&gt;Framework&lt;/li&gt;
&lt;li&gt;Command-driven packaging system&lt;/li&gt;
&lt;li&gt;Changes from Distutils1&lt;/li&gt;
&lt;li&gt;R.I.P. setup.py&lt;/li&gt;
&lt;li&gt;The new metadata fields (PEP 345)&lt;/li&gt;
&lt;li&gt;versions for your project (PEP 386)&lt;/li&gt;
&lt;li&gt;PyPI goodies&lt;ol class="arabic"&gt;
&lt;li&gt;browsing&lt;/li&gt;
&lt;li&gt;uploading docs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;What's installed ? what to install ? (PEP 376)&lt;ol class="arabic"&gt;
&lt;li&gt;The Dependency graph tool&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility !&lt;ol class="arabic"&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;compilers&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pysetup, one command to rule them all&lt;/li&gt;
&lt;li&gt;install !&lt;/li&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;li&gt;do other things&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Example 1: A simple Distutils2 project&lt;/li&gt;
&lt;li&gt;Example 2: Porting your project to Distutils2, and keep it
working in Distutils/Setuptools/zc.buildout environments.&lt;/li&gt;
&lt;li&gt;Example 3: Creating and releasing your own commands and compilers&lt;/li&gt;
&lt;li&gt;Example 4: Developement process made simple with Distutils2&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;Roadmap&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="distutils"></category><category term="distutils2"></category><category term="pycon"></category><category term="pycon2011"></category><category term="setup.py"></category><category term="setuptools"></category><category term="zc.buildout"></category></entry></feed>