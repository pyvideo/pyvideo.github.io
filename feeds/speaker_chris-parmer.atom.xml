<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_chris-parmer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>Using Plotly and iPython for Scientific Graphing</title><link href="https://pyvideo.org/montreal-python/using-plotly-and-ipython-for-scientific-graphing.html" rel="alternate"></link><published>2013-11-11T00:00:00+00:00</published><updated>2013-11-11T00:00:00+00:00</updated><author><name>Chris Parmer</name></author><id>tag:pyvideo.org,2013-11-11:montreal-python/using-plotly-and-ipython-for-scientific-graphing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, November 11, 2013 -- Using Plotly and iPython for Scientific Graphing by Chris Parmer from Plotly.&lt;/p&gt;
&lt;p&gt;Source of the presentation: &lt;a class="reference external" href="https://nbviewer.jupyter.org/github/plotly/IPython-plotly/tree/master/"&gt;https://nbviewer.jupyter.org/github/plotly/IPython-plotly/tree/master/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plotly: &lt;a class="reference external" href="https://plot.ly/"&gt;https://plot.ly/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iPython: &lt;a class="reference external" href="http://ipython.org/"&gt;http://ipython.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chris Parmer: &lt;a class="reference external" href="https://github.com/cparmer"&gt;https://github.com/cparmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP41: &lt;a class="reference external" href="http://sflx.ca/mp41"&gt;http://sflx.ca/mp41&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Dash - A New Framework for Building User Interfaces for Technical Computing</title><link href="https://pyvideo.org/scipy-2017/dash-a-new-framework-for-building-user-interfaces-for-technical-computing.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Chris Parmer</name></author><id>tag:pyvideo.org,2017-07-14:scipy-2017/dash-a-new-framework-for-building-user-interfaces-for-technical-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you are a data scientist today, it's actually pretty tough to build a data visualization web-application. If you're not a full-stack developer, you're practically out of luck.&lt;/p&gt;
&lt;p&gt;But GUIs like sliders, dropdowns, and text inputs are extremely helpful to the data scientist or engineer. If you're an R programmer, you're in luck with Shiny. If you're a MATLAB programmer, you can use GUIDE (but good luck sharing it!).     The dash project introduces a framework for building web-based technical computing apps (GUIs). It's like a Shiny for Python. dash is built off of plotly.js and react.js to provide rich interactive graphing and user interfaces and Python's flask to provide a simple but scalable web server.&lt;/p&gt;
&lt;p&gt;This talk will introduce the scientific community to Dash. We'll go over motivations behind the project, the basic architecture of the framework, several interactive examples, and leave with a vision for the future of interactive and sharable technical computing.&lt;/p&gt;
</summary></entry><entry><title>Collaborative, streaming, 3D, and interactive matplotlib, ggplot2, and MATLAB plots in an IPython Notebook with Plotly</title><link href="https://pyvideo.org/pycon-uk-2014/collaborative-streaming-3d-and-interactive-matplotlib-ggplot2-and-matlab-plots-in-an-ipython-notebook-with-plotly.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Carole Griffiths</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/collaborative-streaming-3d-and-interactive-matplotlib-ggplot2-and-matlab-plots-in-an-ipython-notebook-with-plotly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Carole Griffiths &amp;amp; Chris Parmer&lt;/p&gt;
&lt;p&gt;Plotly's Python API lets you make and share beautiful, web-based plots. This talk will be a walk-through of Plotly's library. We will craft and embed interactive graphs within an IPython Notebook, use Plotly's web-app to edit and share graphs, and use Plotly's matplotlib wrapper to create web-based graphs and data files from matplotlib scripts.&lt;/p&gt;
&lt;p&gt;Plotly is the easiest way to graph and share your data online. Plotly allows you to make beautiful, interactive online graphs from Python, R, or MATLAB code or with its web-based spreadsheet tool. Public sharing is free, users own their data, and users control whether data and graphs are public or private.&lt;/p&gt;
</summary></entry></feed>