<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 19 Nov 2017 00:00:00 +0000</lastBuildDate><item><title>Python and fluid mechanics</title><link>https://pyvideo.org/pycon-ca-2017/python-and-fluid-mechanics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="introduction"&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Fluid mechanics is the study of fluids (obvious examples are air and water). This could involve anything from studying how to reduce drag over the latest commercial airliners to the ideal design of a water turbine for extracting energy in dams.&lt;/p&gt;
&lt;p&gt;Worried that you’ve never studied fluid mechanics before? Come and join us to hear how we’ve been using Python in science. Don’t worry, we’ll explain everything!&lt;/p&gt;
&lt;div class="section" id="what-is-particle-image-velocimetry"&gt;
&lt;h5&gt;What is Particle Image Velocimetry?&lt;/h5&gt;
&lt;p&gt;On the experimental side of fluid mechanics these problems are studied by constructing experiments that represent the problem being studies (one common example of this that might pop into your head is that of a car inside a wind tunnel with a streak of smoke flowing over its surface). To analyze these experiments, various techniques are used (such as the smoke visualization mentioned earlier, or colored dye in water based studies). One of the most powerful of these techniques is Particle Image Velocimetry (or PIV).&lt;/p&gt;
&lt;p&gt;PIV involves 3 key things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dispersing many small particles throughout a fluid flow&lt;/li&gt;
&lt;li&gt;High intensity illumination (usually lasers) to illuminate the particles&lt;/li&gt;
&lt;li&gt;High-speed cameras to record the motion of the particles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The end result of this technique is a series of images, each of which looks like a field of small bright speckles (each speckle being a illuminated particle). By correlating these images across time, PIV analysis software can determine the velocity at regularly spaced points in the image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analysis-of-piv-vector-fields"&gt;
&lt;h5&gt;Analysis of PIV vector fields&lt;/h5&gt;
&lt;p&gt;After obtaining these vector fields, the real science comes in analyzing them. For example one might be interested in what the pressure distribution over an airfoil is. This could be done by reconstructing the pressure field from the vector field. Another example is determining what the average turbulence level is in a jet of air. Now this is where Python comes in!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-python-package-for-analysis-of-piv-data"&gt;
&lt;h4&gt;A Python Package for Analysis of PIV Data&lt;/h4&gt;
&lt;p&gt;To facilitate analysis of PIV data we have developed a package that can perform many of these analysis tasks and further provides awesome visualization tools that aid in the PIV analysis workflow.&lt;/p&gt;
&lt;p&gt;The package provides 4 main functionalities:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A PIV data set object that contains analysis functions for analyzing its data&lt;/li&gt;
&lt;li&gt;Utilities for loading PIV vector data sets from PIV processing software file formats&lt;/li&gt;
&lt;li&gt;Visualization tools&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h5&gt;Utilities&lt;/h5&gt;
&lt;p&gt;Typically the actual processing of images into vector fields is done by specialized PIV software such as DaVis (by LaVision). We use the package ReadIM by user fleming79 (&lt;a class="reference external" href="https://github.com/fleming79/readim"&gt;https://github.com/fleming79/readim&lt;/a&gt;) to accomplish this. In the future other file formats from different PIV software providers would be supported too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analysis-tools"&gt;
&lt;h5&gt;Analysis Tools&lt;/h5&gt;
&lt;p&gt;Analysis functions include calculation of turbulence quantities such as: turbulent kinetic energy production, and turbulent kinetic energy.&lt;/p&gt;
&lt;p&gt;Functions for calculating mean quantities in the flow also exist, such as calculation of the Reynold's number and mean velocity.&lt;/p&gt;
&lt;p&gt;Typically these functions are all implemented of the core scientific programming packages for Python: Numpy and Scipy.&lt;/p&gt;
&lt;p&gt;In the talk we will visually demonstrate a workflow showing what these functions actually produce (and what they even mean, if you're not familiar with fluid mechanics!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interactive-data-visualization"&gt;
&lt;h5&gt;Interactive Data Visualization&lt;/h5&gt;
&lt;p&gt;One of the biggest problems in working with PIV data is in visualizing the data.&lt;/p&gt;
&lt;p&gt;In many cases, just to check if the analysis did what you thought it should, one must write several lines of code just to display a figure. This can make the data analysis workflow extremely cumbersome.&lt;/p&gt;
&lt;p&gt;Included in our package are functions that easily show researchers the data they want to see without having to write several lines of code to do it.&lt;/p&gt;
&lt;p&gt;These are implemented with Bokeh and HoloViews.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-side-note-on-the-open-science-initiative"&gt;
&lt;h4&gt;A Side Note on the Open Science Initiative&lt;/h4&gt;
&lt;p&gt;Part of the motivation for developing such a package is the fact that many of these analysis functions are routinely used by researchers all over the world. However due to lack of collaboration, different researchers implement their own version of essentially the same function. Furthermore new-comers into the field often have to re-write their functions from scratch, or if lucky, inherit them from there close predecessors.&lt;/p&gt;
&lt;p&gt;An open source package would make the codes used for PIV analysis available to all. This means that results produced from the code can be scrutinized in depth. Furthermore this would contribute to the reproducibility of results. For example, one researcher's average velocity code may return a different result from another's'. If researchers shared the code they used, reproducibility would be much easier.&lt;/p&gt;
&lt;p&gt;By creating this package, we hope to initiate collaboration such that we can produce better science than we could individually.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Deng</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/python-and-fluid-mechanics.html</guid></item></channel></rss>