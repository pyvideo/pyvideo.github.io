<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Abigail Afi Gbadago</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_abigail-afi-gbadago.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-10-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Strategies for handling conflicts and rollbacks in Django database migrations</title><link href="https://pyvideo.org/djangocon-us-2023/strategies-for-handling-conflicts-and-rollbacks-in-django-database-migrations.html" rel="alternate"></link><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><author><name>Abigail Afi Gbadago</name></author><id>tag:pyvideo.org,2023-10-17:/djangocon-us-2023/strategies-for-handling-conflicts-and-rollbacks-in-django-database-migrations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing database migrations in Django can be challenging, especially in large projects with multiple developers and frequent releases. Conflicts can arise when multiple developers modify the same models when migration files are applied in the wrong order or in some cases where fields are faked. Rollbacks are also necessary â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing database migrations in Django can be challenging, especially in large projects with multiple developers and frequent releases. Conflicts can arise when multiple developers modify the same models when migration files are applied in the wrong order or in some cases where fields are faked. Rollbacks are also necessary when migrations fail or need to be reverted.&lt;/p&gt;
&lt;p&gt;This talk will explore various strategies for handling conflicts and rollbacks in Django database migrations. The aim is to provide attendees with practical solutions that can help them effectively manage database schema changes in their Django projects.&lt;/p&gt;
&lt;p&gt;Some of the strategies that will be discussed in the talk include using database locking to prevent conflicts, resolving conflicts manually by merging migration files, using migration squashing to reduce the number of migration files, and handling rollbacks by using version control systems.&lt;/p&gt;
&lt;p&gt;Attendees will learn how to identify and resolve conflicts in their migration files and how to apply best practices to ensure a smooth migration process. They will also gain insights into how to minimize the risk of data loss and downtime during rollbacks.&lt;/p&gt;
&lt;p&gt;By the end of the talk, attendees will have a deeper understanding of the challenges involved in managing database migrations and be better equipped to handle conflicts and rollbacks in their Django projects.&lt;/p&gt;
</content><category term="DjangoCon US 2023"></category></entry></feed>