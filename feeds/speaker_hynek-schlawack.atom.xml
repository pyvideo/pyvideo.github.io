<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_hynek-schlawack.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-04T00:00:00+00:00</updated><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://pyvideo.org/pygotham-2019/maintaining-a-python-project-when-its-not-your-job.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/maintaining-a-python-project-when-its-not-your-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be written
first.  More often than not, projects that millions of people depend on are
written and maintained by only one person.  If you’re unlucky, that person
is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering a &lt;em&gt;high quality&lt;/em&gt; Python package you can be
proud of and having only limited time at your disposal?  The answer is not
“try harder,” the answer is to &lt;strong&gt;do less&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This talk will help you get there by talking about how you can make your
life easier, remove causes of friction with your contributors, and empower
said contributors to take over tasks that you can’t make time for anymore.&lt;/p&gt;
</summary></entry><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://pyvideo.org/europython-2019/maintaining-a-python-project-when-its-not-your-job.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/maintaining-a-python-project-when-its-not-your-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be
written first. More often than not, projects that millions of people
depend on are written and maintained by only one person. If you’re
unlucky, that person is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering a high quality Python package you can be
proud of and having only limited time at your disposal? The answer is
not “try harder,” the answer is to do less.&lt;/p&gt;
&lt;p&gt;This talk will help you get there by talking about how you can make your
life easier, remove causes of friction with your contributors, and
empower said contributors to take over tasks that you can’t make time
for anymore.&lt;/p&gt;
</summary><category term="Best Practice"></category><category term="Open-Source"></category></entry><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://pyvideo.org/pycon-us-2019/maintaining-a-python-project-when-its-not-your-job.html" rel="alternate"></link><published>2019-05-03T15:15:00+00:00</published><updated>2019-05-03T15:15:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/maintaining-a-python-project-when-its-not-your-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be
written first. More often than not, projects that millions of people
depend on are written and maintained by only one person. If you’re
unlucky, that person is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering a &lt;em&gt;high quality&lt;/em&gt; Python package you can
be proud of and having only limited time at your disposal? The answer is
not “try harder,” the answer is to &lt;strong&gt;do less&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This talk will help you get there by talking about how you can make your
life easier, remove causes of friction with your contributors, and
empower said contributors to take over tasks that you can’t make time
for anymore.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>How to write deployment-friendly applications</title><link href="https://pyvideo.org/pycon-belarus-2019/how-to-write-deployment-friendly-applications.html" rel="alternate"></link><published>2019-02-16T00:00:00+00:00</published><updated>2019-02-16T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-02-16:pycon-belarus-2019/how-to-write-deployment-friendly-applications.html</id><summary type="html"></summary></entry><entry><title>Solid Snakes or: How to Take 5 Weeks of Vacation</title><link href="https://pyvideo.org/pycon-belarus-2018/solid-snakes-or-how-to-take-5-weeks-of-vacation.html" rel="alternate"></link><published>2018-02-24T00:00:00+00:00</published><updated>2018-02-24T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2018-02-24:pycon-belarus-2018/solid-snakes-or-how-to-take-5-weeks-of-vacation.html</id><summary type="html"></summary></entry><entry><title>Solid Python Application Deployments For Everybody - Questions</title><link href="https://pyvideo.org/europython-2013/solid-python-application-deployments-for-everybody-questions.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/solid-python-application-deployments-for-everybody-questions.html</id><summary type="html"></summary><category term="best-practices"></category><category term="software-engineering"></category><category term="project-management"></category><category term="principles"></category><category term="automation"></category></entry><entry><title>Solid Python Application Deployments For Everybody</title><link href="https://pyvideo.org/europython-2013/solid-python-application-deployments-for-everybody.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/solid-python-application-deployments-for-everybody.html</id><summary type="html"></summary><category term="best-practices"></category><category term="software-engineering"></category><category term="project-management"></category><category term="principles"></category><category term="automation"></category></entry><entry><title>How to Write Deployment-friendly Applications</title><link href="https://pyvideo.org/europython-2018/how-to-write-deployment-friendly-applications.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/how-to-write-deployment-friendly-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The DevOps movement gave us many ways to put Python applications into
production. But should your application care? Should it need to know
whether it’s running on your notebook, on a server, in a Docker
container, or in some cloud platform as a service?&lt;/p&gt;
&lt;p&gt;It should not, because environment-agnostic applications are easier to
test, easier to deploy, easier to handle, and easier to scale.&lt;/p&gt;
&lt;p&gt;But how can you practically structure and configure your applications to
make them indifferent to the environment they run in? How do secrets fit
into the picture? And where do you put that log file?&lt;/p&gt;
&lt;p&gt;By the end of this talk you’ll know the tools and techniques that enable
you to write such Python applications and you’ll be ready for the next
big change.&lt;/p&gt;
</summary></entry><entry><title>How to Write Deployment-friendly Applications</title><link href="https://pyvideo.org/pycon-us-2018/how-to-write-deployment-friendly-applications.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/how-to-write-deployment-friendly-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The DevOps movement gave us many ways to put Python applications into production.  But should your &lt;em&gt;application&lt;/em&gt; care?  Should it need to know whether it’s running on your notebook, on a server, in a Docker container, or in some cloud platform as a service?&lt;/p&gt;
&lt;p&gt;It should not, because environment-agnostic applications are easier to &lt;strong&gt;test&lt;/strong&gt;, easier to &lt;strong&gt;deploy&lt;/strong&gt;, easier to &lt;strong&gt;handle&lt;/strong&gt;, and easier to &lt;strong&gt;scale&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But how can you &lt;em&gt;practically&lt;/em&gt; structure and configure your applications to make them indifferent to the environment they run in?  How do secrets fit into the picture?  And where do you put that log file?&lt;/p&gt;
&lt;p&gt;By the end of this talk you’ll know the tools and techniques that enable you to write such Python applications and you’ll be ready for the next big change.&lt;/p&gt;
</summary><category term="devops"></category></entry><entry><title>Solid Snakes</title><link href="https://pyvideo.org/europython-2017/solid-snakes.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/solid-snakes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;No matter whether you run a web app, search for gravitational waves,
or maintain a backup script: being responsible for a piece of
software or infrastructure means that you either get a pager right
away, or that you get angry calls from people affected by outages.
Being paged at 4am in everyday life is bad enough. Having to fix
problems from hotel rooms while your travel buddies go for brunch is
even worse.&lt;/p&gt;
&lt;p&gt;And while incidents can’t be prevented completely, there are ways to
make your systems more reliable and minimize the need for (your!)
manual intervention. This talk will help you to get calm nights and
relaxing vacations by teaching you some of them.&lt;/p&gt;
</summary></entry><entry><title>Solid Snakes or: How to Take 5 Weeks of Vacation</title><link href="https://pyvideo.org/pycon-us-2017/solid-snakes-or-how-to-take-5-weeks-of-vacation.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/solid-snakes-or-how-to-take-5-weeks-of-vacation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;No matter whether you run a web app, search for gravitational waves, or
maintain a backup script: being responsible for a piece of software or
infrastructure means that you either get a pager right away, or that you
get angry calls from people affected by outages. Being paged at 4am in
everyday life is bad enough. Having to fix problems from hotel rooms
while your travel buddies go for brunch is even worse.&lt;/p&gt;
&lt;p&gt;And while incidents can’t be prevented completely, there are ways to
make your systems more reliable and minimize the need for (your!) manual
intervention. This talk will help you to get calm nights and relaxing
vacations by teaching you some of them.&lt;/p&gt;
</summary></entry><entry><title>The Sorry State of SSL</title><link href="https://pyvideo.org/pycon-russia-2014/the-sorry-state-of-ssl.html" rel="alternate"></link><published>2014-06-02T00:00:00+00:00</published><updated>2014-06-02T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2014-06-02:pycon-russia-2014/the-sorry-state-of-ssl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Those web pages with shiny lock icons boasting that your data is safe because of “256 bit encryption”? They are lying. In times of mass surveillance and commercialized Internet crime you should know why that’s the case. This talk will give you an overview that will help you to assess your personal security more realistically and to make your applications as secure as possible against all odds.
The rule of thumb for people without degrees in cryptography on securing data on the Internet is “GPG for data at rest. TLS for data in motion”. And it’s actually a very good rule everyone should follow.
The only kicker though is that configuring (and using!) TLS properly is not as simple as it sounds and if you’re not diligent as a user, developer, and ops engineer, you can easily compromise your data’s security despite best effort of everyone else.
This talk will be multifaceted; you will learn:
- how SSL and TLS roughly work and why their state is sorry,
- server- and client-side duties for best possible security,
- what alternatives you have for using TLS in Python,
- things to keep in mind when configuring servers,
- and what perils outside your control still can trip you up.
In other words, the leitmotif is to show you the most common traps you should know about when using and deploying applications relying on TLS for transport layer security and how to avoid them.&lt;/p&gt;
</summary></entry><entry><title>The Sorry State of SSL</title><link href="https://pyvideo.org/pycon-pl-2014/the-sorry-state-of-ssl.html" rel="alternate"></link><published>2014-10-18T00:00:00+00:00</published><updated>2014-10-18T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2014-10-18:pycon-pl-2014/the-sorry-state-of-ssl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: The Sorry State of SSL
Prelegent/Speaker: Hynek Schlawack&lt;/p&gt;
&lt;p&gt;Those web pages with shiny lock icons boasting that your data is safe because of “256 bit encryption”? They are lying. In times of mass surveillance and commercialized Internet crime you should know why that’s the case. This talk will give you an overview that will help you to assess your personal security more realistically and to make your applications as secure as possible against all odds.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Beyond grep: Practical Logging and Metrics</title><link href="https://pyvideo.org/europython-2015/europython-2015-hynek-schlawack-beyond-grep-practical-logging-and-metrics.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2015-08-07:europython-2015/europython-2015-hynek-schlawack-beyond-grep-practical-logging-and-metrics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hynek Schlawack - Beyond grep: Practical Logging and Metrics
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Knowing that your application is up and running is great. However in
order to make informed decisions about the future, you also need to
know in what state your application currently is and how its state is
developing over time.&lt;/p&gt;
&lt;p&gt;This talk combines two topics that are usually discussed separately.
However I do believe that they have a lot of overlap and ultimately a
similar goal: giving you vital insights about your system in
production.&lt;/p&gt;
&lt;p&gt;We'll have a look at their commonalities, differences, popular tools,
and how to apply everything in your own systems while avoiding some
common pitfalls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides &amp;amp; Notes&lt;/strong&gt;:  [&lt;a class="reference external" href="https://hynek.me/talks/beyond"&gt;https://hynek.me/talks/beyond&lt;/a&gt;-
grep/](&lt;a class="reference external" href="https://hynek.me/talks/beyond-grep/"&gt;https://hynek.me/talks/beyond-grep/&lt;/a&gt;)&lt;/p&gt;
</summary></entry><entry><title>Get Instrumented!</title><link href="https://pyvideo.org/europython-2016/get-instrumented.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/get-instrumented.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hynek Schlawack - Get Instrumented!
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/get-instrumented"&gt;https://ep2016.europython.eu//conference/talks/get-instrumented&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To get real time insight into your running applications you need to
instrument them and collect metrics: count events, measure times,
expose numbers. Sadly this important aspect of development was a
patchwork of half-integrated solutions for years. Prometheus changed
that and this talk will walk you through instrumenting your apps and
servers, building dashboards, and monitoring using metrics.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Metrics are highly superior to logging in regards of understanding the
past, presence, and future of your applications and systems.  They are
cheap to gather (just increment a number!) but setting up a metrics
system to collect and store them is a major task.&lt;/p&gt;
&lt;p&gt;You may have heard of statsd, Riemann, Graphite, InfluxDB, or OpenTSB.
They all look promising but on a closer look it’s apparent that some
of those solutions are straight-out flawed and others are hard to
integrate with each other or even to get up and running.&lt;/p&gt;
&lt;p&gt;Then came Prometheus and gave us independence of UDP, no complex math
in your application, multi-dimensional data by adding labels to values
(no more server names in your metric names!), baked in monitoring
capabilities, integration with many common systems, and official
clients for all major programming languages.  In short: a &lt;em&gt;unified&lt;/em&gt;
way to gather, process, and present metrics.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;explain why you want to collect metrics,&lt;/li&gt;
&lt;li&gt;give an overview of the problems with existing solutions,&lt;/li&gt;
&lt;li&gt;try to convince you that Prometheus may be what you’ve been waiting for,&lt;/li&gt;
&lt;li&gt;teach how to impress your co-workers with beautiful graphs and intelligent monitoring by putting a fully instrumented Python application into production,&lt;/li&gt;
&lt;li&gt;and finally give you pointers on how to migrate an existing metrics infrastructure to Prometheus &lt;em&gt;or&lt;/em&gt; how to integrate Prometheus therein.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Get Instrumented: How Prometheus Can Unify Your Metrics</title><link href="https://pyvideo.org/pycon-us-2016/hynek-schlawack-get-instrumented-how-prometheus-can-unify-your-metrics-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/hynek-schlawack-get-instrumented-how-prometheus-can-unify-your-metrics-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Hynek Schlawack&lt;/p&gt;
&lt;p&gt;To get real time insight into your running applications you need to instrument them and collect metrics: count events, measure times, expose numbers. Sadly this important aspect of development was a patchwork of half-integrated solutions for years. Prometheus changed that and this talk will walk you through instrumenting your apps and servers, building dashboards, and monitoring using metrics.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Hitchhiker's Guide to TLS &amp; SSL</title><link href="https://pyvideo.org/pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>lvh</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer&lt;/p&gt;
&lt;p&gt;Since the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there’s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS stacks that’s hard to come by.  Join the makers of PyOpenSSL, the standard library’s ssl module, requests/urllib3, Twisted, the former maintainer of a CA, and&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Sorry State of SSL</title><link href="https://pyvideo.org/europython-2014/the-sorry-state-of-ssl-0.html" rel="alternate"></link><published>2014-07-22T00:00:00+00:00</published><updated>2014-07-22T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2014-07-22:europython-2014/the-sorry-state-of-ssl-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Those web pages with shiny lock icons boasting that your data is safe
because of &amp;quot;256 bit encryption&amp;quot;? They are lying. In times of mass
surveillance and commercialized Internet crime you should know why
that's the case. This talk will give you an overview that will help you
to assess your personal security more realistically and to make your
applications as secure as possible against all odds.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The rule of thumb for people without degrees in cryptography on securing
data on the Internet is “GPG for data at rest. TLS for data in motion”.
And it’s actually a very good rule everyone should follow.&lt;/p&gt;
&lt;p&gt;The only kicker though is that configuring (and using!) TLS properly is
not as simple as it sounds and if you’re not diligent as a user,
developer, and ops engineer, you can easily compromise your data’s
security despite best effort of everyone else.&lt;/p&gt;
&lt;p&gt;This talk will be multifaceted; you will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how SSL and TLS roughly work and why their state is sorry,&lt;/li&gt;
&lt;li&gt;server- and client-side duties for best possible security,&lt;/li&gt;
&lt;li&gt;what alternatives you have for using TLS in Python,&lt;/li&gt;
&lt;li&gt;things to keep in mind when configuring servers,&lt;/li&gt;
&lt;li&gt;and what perils outside your control still can trip you up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, the leitmotif is to show you the most common traps you
should know about when using and deploying applications relying on TLS
for transport layer security and how to avoid them.&lt;/p&gt;
</summary></entry><entry><title>Solid Python Application Deployments For Everybody</title><link href="https://pyvideo.org/pycon-us-2013/solid-python-application-deployments-for-everybod.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/solid-python-application-deployments-for-everybod.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Do you dread the moment when your shiny new application is “ready for
production”; except it isn’t because deploying is hard? How about moving
existing apps or deploying one app to many servers? I’ll take you on a
trip of dos and don’ts of deploying Python apps on UNIXy systems.
Afterwards, you will be able to find the best way to deploy your code
without repeating the mistakes of many before you.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>The Sorry State of SSL</title><link href="https://pyvideo.org/pycon-us-2014/the-sorry-state-of-ssl.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/the-sorry-state-of-ssl.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Those web pages with shiny lock icons boasting that your data is safe
because of &amp;quot;256 bit encryption&amp;quot;? They are lying. In times of mass
surveillance and commercialized Internet crime you should know why
that's the case. This talk will give you an overview that will help you
to assess your personal security more realistically and to make your
applications as secure as possible against all odds.&lt;/p&gt;
</summary></entry><entry><title>Beyond grep: Practical Logging and Metrics</title><link href="https://pyvideo.org/pycon-us-2015/beyond-grep-practical-logging-and-metrics.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/beyond-grep-practical-logging-and-metrics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your Python server applications are running but you’re wondering what
they are doing? Your only clue about their current state is the server
load? Let’s have stroll through the landscape of logging and metrics so
you’ll find the perfect fit for your use cases!&lt;/p&gt;
</summary></entry><entry><title>Get Instrumented: How Prometheus Can Unify Your Metrics</title><link href="https://pyvideo.org/pycon-za-2016/get-instrumented-how-prometheus-can-unify-your-metrics.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2016-10-07:pycon-za-2016/get-instrumented-how-prometheus-can-unify-your-metrics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Metrics are highly superior to logging in regards of understanding the
past, presence, and future of your applications and systems. They are
cheap to gather (just increment a number!) but setting up a metrics
system to collect and store them is a major task.&lt;/p&gt;
&lt;p&gt;You may have heard of statsd, Riemann, Graphite, InfluxDB, or OpenTSB.
They all look promising but on a closer look it’s apparent that some of
those solutions are straight-out flawed and others are hard to integrate
with each other or even to get up and running.&lt;/p&gt;
&lt;p&gt;Then came Prometheus and gave us independence of UDP, no complex math in
your application, multi-dimensional data by adding labels to values (no
more server names in your metric names!), baked in monitoring
capabilities, integration with many common systems, and official clients
for all major programming languages. In short: a unified way to gather,
process, and present metrics.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;explain why you want to collect metrics,&lt;/li&gt;
&lt;li&gt;give an overview of the problems with existing solutions,&lt;/li&gt;
&lt;li&gt;try to convince you that Prometheus may be what you’ve been waiting
for,&lt;/li&gt;
&lt;li&gt;teach how to impress your co-workers with beautiful graphs and
intelligent monitoring by putting a fully instrumented Python
application into production,&lt;/li&gt;
&lt;li&gt;and finally give you pointers on how to migrate an existing metrics
infrastructure to Prometheus or how to integrate Prometheus therein.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Solid Snakes or: How to Take 5 Weeks of Vacation</title><link href="https://pyvideo.org/pycon-za-2017/solid-snakes-or-how-to-take-5-weeks-of-vacation.html" rel="alternate"></link><published>2017-10-05T00:00:00+00:00</published><updated>2017-10-05T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2017-10-05:pycon-za-2017/solid-snakes-or-how-to-take-5-weeks-of-vacation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;No matter whether you run a web app, search for gravitational waves,
or maintain a backup script: being responsible for a piece of
software or infrastructure means that you either get a pager right
away, or that you get angry calls from people affected by outages.
Being paged at 4am in everyday life is bad enough. Having to fix
problems from hotel rooms while your travel buddies go for brunch is
even worse.&lt;/p&gt;
&lt;p&gt;And while incidents can’t be prevented completely, there are ways to
make your systems more reliable and minimize the need for (your!) manual
intervention. This talk will help you to get calm nights and relaxing
vacations by teaching you some of them.&lt;/p&gt;
</summary></entry></feed>