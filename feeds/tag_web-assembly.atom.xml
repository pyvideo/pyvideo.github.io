<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_web-assembly.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-31T00:00:00+00:00</updated><entry><title>Getting the hang of WASM</title><link href="https://pyvideo.org/euroscipy-2017/getting-the-hang-of-wasm.html" rel="alternate"></link><published>2017-08-31T00:00:00+00:00</published><updated>2017-08-31T00:00:00+00:00</updated><author><name>Almar Klein</name></author><id>tag:pyvideo.org,2017-08-31:euroscipy-2017/getting-the-hang-of-wasm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://webassembly.org/"&gt;Web Assembly&lt;/a&gt; (WASM) is a new open standard
developed by representatives from all major browsers. It is a low level
binary format designed to be compact and run at native speed, while
being memory-safe.&lt;/p&gt;
&lt;p&gt;WASM is primarily intended to run code in browsers, but will also run in
other environments like desktop, mobile and more. This makes it
interesting to use as an intermediate language (IR); code that compiles
to WASM will (in the future) run basically anywhere.&lt;/p&gt;
&lt;p&gt;A proof of concept was released early this year and works out of the box
in recent Firefox and Chrome browsers. In order to play with WASM
myself, I wrote a &lt;a class="reference external" href="https://github.com/almarklein/pywasm"&gt;tiny Python
library&lt;/a&gt; that makes it
relatively easy to generate WASM modules.&lt;/p&gt;
&lt;p&gt;In this talk I will briefly explain what WASM is, describe the anatomy
of a WASM module, how it fits in the host environment (e.g. JavaScript
or a C++ program), and the kinds of opportunities that this provides.
Via live coding in a notebook, I will first write a simple WASM program
by hand, compile it to binary WASM, and execute it in the notebook
itself. We will then move to higher levels (including a Mindfuck to WASM
compiler) and end with compiling a simple Python program to WASM, which
will find the 10001st prime much faster than Python does. As a side
effect, this talk is also a crash course on how compilers work.&lt;/p&gt;
&lt;p&gt;I expect WASM to have a major impact. Although it is currently in its
early infancy, we can already play with it, and I hope to give a glimpse
of the awesome things that it can do.&lt;/p&gt;
</summary><category term="web assembly"></category><category term="wasm"></category></entry></feed>