<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Antoine Rozo</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_antoine-rozo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-11-02T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Les secrets d'un code pythonique</title><link href="https://pyvideo.org/pycon-fr-2017/les-secrets-dun-code-pythonique.html" rel="alternate"></link><published>2017-09-23T00:00:00+00:00</published><updated>2017-09-23T00:00:00+00:00</updated><author><name>Antoine Rozo</name></author><id>tag:pyvideo.org,2017-09-23:/pycon-fr-2017/les-secrets-dun-code-pythonique.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avez-vous déjà vu… un code pythonique ?&lt;/p&gt;
&lt;p&gt;« Pythonique », c’est un terme que l’on rencontre souvent au sein d’articles ou sur des forums, pour qualifier un code Python bien conçu, un code idiomatique (en accord avec les règles d’usage du langage, et donc compréhensible par tout développeur …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avez-vous déjà vu… un code pythonique ?&lt;/p&gt;
&lt;p&gt;« Pythonique », c’est un terme que l’on rencontre souvent au sein d’articles ou sur des forums, pour qualifier un code Python bien conçu, un code idiomatique (en accord avec les règles d’usage du langage, et donc compréhensible par tout développeur).&lt;/p&gt;
&lt;p&gt;Seulement, la distinction entre un bon code et un autre peut s’avérer floue, cette présentation a justement pour but de détailler les règles qui font qualifier un code de pythonique ou non.&lt;/p&gt;
&lt;p&gt;Il s'agit d'un tour d'horizon de la philosophie du langage, explicitant le fameux Zen of Python, passant par les règles de style, rappelant les autres principes à prendre en compte, appuyant les mécanismes du langage, explorant la bibliothèque standard, et s'achevant sur les bons réflexes à adopter.&lt;/p&gt;
</content><category term="PyCon FR 2017"></category></entry><entry><title>Devenir incollable sur les callables !</title><link href="https://pyvideo.org/pycon-fr-2023/devenir-incollable-sur-les-callables.html" rel="alternate"></link><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><author><name>Antoine Rozo</name></author><id>tag:pyvideo.org,2023-02-18:/pycon-fr-2023/devenir-incollable-sur-les-callables.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il n'y a pas que les fonctions qui sont appelables en Python&amp;nbsp;: on peut aussi appeler des types (&lt;cite&gt;int()&lt;/cite&gt;), des méthodes (&lt;cite&gt;foo.bar()&lt;/cite&gt;) et plus généralement toutes sortes d'objets bien particuliers.
Quels sont-ils&amp;nbsp;? Comment fonctionnent-ils&amp;nbsp;? Et plus généralement que se passe-t-il lors d'un appel&amp;nbsp;?
Ce sont à ces questions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il n'y a pas que les fonctions qui sont appelables en Python&amp;nbsp;: on peut aussi appeler des types (&lt;cite&gt;int()&lt;/cite&gt;), des méthodes (&lt;cite&gt;foo.bar()&lt;/cite&gt;) et plus généralement toutes sortes d'objets bien particuliers.
Quels sont-ils&amp;nbsp;? Comment fonctionnent-ils&amp;nbsp;? Et plus généralement que se passe-t-il lors d'un appel&amp;nbsp;?
Ce sont à ces questions qu'entend répondre la présentation.
Seront aussi abordées les notions d'arguments et de paramètres, les différents types d'arguments (positionnels, nommés), les signatures de fonctions et les décorateurs.&lt;/p&gt;
</content><category term="PyCon FR 2023"></category></entry><entry><title>La mécanique des imports</title><link href="https://pyvideo.org/pycon-fr-2024/la-mecanique-des-imports.html" rel="alternate"></link><published>2024-11-02T00:00:00+00:00</published><updated>2024-11-02T00:00:00+00:00</updated><author><name>Antoine Rozo</name></author><id>tag:pyvideo.org,2024-11-02:/pycon-fr-2024/la-mecanique-des-imports.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Voyage au cœur du mécanisme des imports en Python afin de comprendre comment ils fonctionnent et comment nous pouvons agir sur leur comportement, à travers l'écriture de _finders_ et de _loaders_ personnalisés.&lt;/p&gt;
</content><category term="PyCon FR 2024"></category></entry></feed>