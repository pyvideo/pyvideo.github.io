<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_emin-martinian.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T14:35:00+00:00</updated><entry><title>Statistical Profiling (and other fun with the sys module)</title><link href="https://pyvideo.org/pycon-us-2019/statistical-profiling-and-other-fun-with-the-sys-module.html" rel="alternate"></link><published>2019-05-04T14:35:00+00:00</published><updated>2019-05-04T14:35:00+00:00</updated><author><name>Emin Martinian</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/statistical-profiling-and-other-fun-with-the-sys-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Profiling involves computing a set of data about how often and how long
various parts of your program are executed. Profiling is useful to
understand what makes your program slow and how you can improve it.
After a quick review of deterministic profiling tools and techniques, I
will describe how you can do statistical profiling with existing
packages or write your own from scratch.&lt;/p&gt;
&lt;p&gt;Statistical profiling involves occasionally sampling what your program
is doing instead of watching each line or function. A key feature of
statistical profiling is that by using a moderate sampling frequency,
you can profile your production code with almost no overhead. This lets
you find the actual bottlenecks in real use cases.&lt;/p&gt;
&lt;p&gt;The core technical focus of the talk is python's sys module and how it
lets you easily examine a running program. I also describe some tricks
to be aware of related to threading, context switches, locks, and so on.
At the conclusion of the talk, you will hopefully understand how to use
an existing statistical profiler or write a customized version yourself.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>