<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 15 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Scalable Machine Learning using Spark and Python</title><link>https://pyvideo.org/bay-piggies/scalable-machine-learning-using-spark-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ABSTRACT:
Deep architecture helps in the representation of high-level abstractions as in vision, language, speech and other AI-level tasks. A deep architecture is composed of multiple levels of non-linear operations. Learning algorithms like Deep Belief Networks  have recently been proposed to tackle these problems with a notable success.[1]   A couple of years ago, The New York Times wrote a story about Google using a network of 16,000 computers to teach itself to identify images of cats. That is a difficult task for computers, and it was an impressive achievement.   Project Adam, an initiative by Microsoft researchers and engineers, aims to demonstrate that large-scale, commodity distributed systems can train huge deep neural networks effectively. For proof, the researchers created the world’s best photograph classifier, using 14 million images from ImageNet, an image database divided into 22,000 categories.   Project Adam is 50 times faster—and more than twice as accurate, as outlined in a paper currently under academic review. In addition, it is efficient, using 30 times fewer machines, and scalable, areas in which the Google effort fell short.   The team at Google lead by Jeffrey Dean came up with the first implementation of distributed deep learning [2]. Architecturally, it was a pseudo-central realization, with a centralized parameter server being a single source of parameter values across the distributed system.   The talk demonstrates an end to end design (architecture, implementation and deployment) of Downpour-like stochastic gradient descent using Apache Spark. Spark is the next generation cluster computing framework from the UC Berkeley and Databricks teams.&lt;/p&gt;
&lt;p&gt;[1] Building High-level Features Using Large Scale Unsupervised Learning. Quoc V. Le,Marc'Aurelio Ranzato, Stanford &amp;amp; Google Inc.&lt;/p&gt;
&lt;p&gt;[2] Large Scale Distributed Deep Networks. Jeffrey Dean, Google Inc.&lt;/p&gt;
&lt;p&gt;SPEAKER:
Saket Bhushan is the founder of Sosio, a data platform primarily for non-profits. In his previous life he spent considerable time in optimizing computational mechanics algorithms.&lt;/p&gt;
&lt;p&gt;Presented at the Bay Area Python Interest Group (BayPIGgies) on September 24, 2015.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saket Bhushan</dc:creator><pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-24:bay-piggies/scalable-machine-learning-using-spark-and-python.html</guid></item><item><title>Django Reduxed</title><link>https://pyvideo.org/pycon-au-2016/django-reduxed.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saket  Bhushan
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/56/view_talk"&gt;https://2016.pycon-au.org/schedule/56/view_talk&lt;/a&gt;
The talk will be an introduction to all the moving parts involved in building
a client side isomorphic single page application with a REST backend. We
will take a dive into How and where does React-Redux fit into the bigger picture
of REST APIs and Client Side MVC, and how to seamlessly introduce the goodness
it brings to your django project. We will also see some non obvious things that you had
to deal while using redux.&lt;/p&gt;
&lt;p&gt;Having a service oriented architecture in web projects require interfacing the
backend using a REST-ful interface. Building your website as a single page app
allows you to focus on building the API up front, rather than duplicating your
efforts to build a website and then replicating the functionality with an API.
With a single page app, your website can be constructed in much the same way as
a mobile app. Django and the Django REST Framework enabled my team to quickly
deliverable a highly functional REST API that was customised to our unique needs.&lt;/p&gt;
&lt;p&gt;React is a great tool to keep UI organised, but won't keep
track of the data and state of application. Redux comes to rescue over here -
it defines a minimal but sufficiently powerful way of interacting with that state.
An action from the UI is combined with a simple JS object(state).
Redux helps developers manage the state and flow of data around an application.&lt;/p&gt;
&lt;p&gt;One of the strengths of redux is that everything is very explicit.
It ease out the process of managing the state and flow of data
around an application. Imagine tons of asynchronous actions without introducing
annoying UI bugs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saket  Bhushan</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/django-reduxed.html</guid></item></channel></rss>