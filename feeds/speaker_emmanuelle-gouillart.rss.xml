<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 10 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Image processing with scikit-image and Dash</title><link>https://pyvideo.org/europython-2019/image-processing-with-scikit-image-and-dash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Images are an ubiquitous form of data in various fields of science and&lt;/div&gt;
&lt;div class="line"&gt;industry. Images often need to be transformed and processed, for
example for helping medical diagnosis by extracting regions of
interest or measures, or for building training sets for machine
learning.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this talk, I will present and discuss several tools for automatic
and&lt;/div&gt;
&lt;div class="line"&gt;interactive image processing with Python. I will start by a short&lt;/div&gt;
&lt;div class="line"&gt;introduction to scikit-image (&lt;a class="reference external" href="https://scikit-image.org/"&gt;https://scikit-image.org/&lt;/a&gt;), the
open-source&lt;/div&gt;
&lt;div class="line"&gt;image processing toolkit of the Pydata ecosystem, which aims at&lt;/div&gt;
&lt;div class="line"&gt;processing images from a large class of modalities (2-D, 3-D, etc.)
and&lt;/div&gt;
&lt;div class="line"&gt;strives to have a gentle learning curve with pedagogical example-based&lt;/div&gt;
&lt;div class="line"&gt;documentation. scikit-image provides users with a simple API based on
a large number of functions, which can be used to build pipelines of
image processing workflows.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In a second part, I will explain how to use Dash for building
interactive&lt;/div&gt;
&lt;div class="line"&gt;image processing operations. Dash (&lt;a class="reference external" href="https://dash.plot.ly/"&gt;https://dash.plot.ly/&lt;/a&gt;) is an&lt;/div&gt;
&lt;div class="line"&gt;open-source Python web application framework developed by Plotly.
Written on top of Flask, Plotly.js, and React.js, Dash is meant for
building data visualization apps with highly custom user interfaces in
pure Python. The dash-canvas component library of Dash
(&lt;a class="reference external" href="https://dash.plot.ly/canvas"&gt;https://dash.plot.ly/canvas&lt;/a&gt;) is an interactive component for
annotating images with several tools (freehand brush, lines, bounding
boxes, ...). It also provides utility functions for using
user-provided annotations for several image processing tasks such as
segmentation, transformation, measures, etc. The latter functions are
based on libraries such scikit-image and openCV. A gallery of examples
showcases some typical uses of Dash for image processing on&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="https://dash-canvas.plotly.host/"&gt;https://dash-canvas.plotly.host/&lt;/a&gt;. Also, other components of Dash can
be leveraged easily to build powerful image processing applications,
such as widgets to tune parameters or data tables for inspecting
object&lt;/div&gt;
&lt;div class="line"&gt;properties.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/image-processing-with-scikit-image-and-dash.html</guid><category>Computer Vision</category><category>Data Science</category><category>Image Processing</category><category>JavaScript Web Frameworks (AngularJS/ReactJS/...)</category><category>Scientific Libraries (Numpy/Pandas/SciKit/...)</category></item><item><title>Exploring image processing pipelines with scikit-image, joblib, ipywidgets and dash</title><link>https://pyvideo.org/pyparis-2018/exploring-image-processing-pipelines-with-scikit-image-joblib-ipywidgets-and-dash.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-14:pyparis-2018/exploring-image-processing-pipelines-with-scikit-image-joblib-ipywidgets-and-dash.html</guid></item><item><title>Keynote: Learning programming &amp; science with Scientific Python</title><link>https://pyvideo.org/pycon-de-2018/keynote-learning-programming-science-with-scientific-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-26:pycon-de-2018/keynote-learning-programming-science-with-scientific-python.html</guid><category>keynote</category></item><item><title>Keynote: Learning programming and science with Scientific Python</title><link>https://pyvideo.org/pydata-london-2018/keynote-learning-programming-and-science-with-scientific-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to, and what for use a new software package? The discovery of API,
programming abstractions and package capabilities at the same time is a
complex process for the user. In this talk I will review several tools
which make this process easier for the user: simple APIs, galleries of
examples, umbrella functions for exploring algorithms, etc. Using such
tools, some packages such as scikit-learn or scikit-image can be used to
solve efficiently data science questions, but also to improve one's
culture and intuition in data science.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-29:pydata-london-2018/keynote-learning-programming-and-science-with-scientific-python.html</guid></item><item><title>Scikit-image</title><link>https://pyvideo.org/euroscipy-2017/scikit-image.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials can be found on
&lt;a class="reference external" href="https://github.com/emmanuelle/scikit-image-euroscipy2017"&gt;https://github.com/emmanuelle/scikit-image-euroscipy2017&lt;/a&gt;: you can
download a zip on
&lt;a class="reference external" href="https://github.com/emmanuelle/scikit-image-euroscipy2017/archive/master.zip"&gt;https://github.com/emmanuelle/scikit-image-euroscipy2017/archive/master.zip&lt;/a&gt;.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you installed Anaconda or Canopy, you already have scikit-image
installed.&lt;/div&gt;
&lt;div class="line"&gt;Otherwise, see &lt;a class="reference external" href="http://scikit-image.org/docs/stable/install.html"&gt;http://scikit-image.org/docs/stable/install.html&lt;/a&gt; for
installation instructions.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;scikit-image version 0.12 or 0.13 is preferable.&lt;/p&gt;
&lt;p&gt;Test code&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; from skimage import io, data
&amp;gt;&amp;gt;&amp;gt; camera = data.camera()
&amp;gt;&amp;gt;&amp;gt; io.imshow(camera)
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/scikit-image.html</guid><category>tutorial</category><category>scikit-image</category></item><item><title>Image Processing with Scikit Image</title><link>https://pyvideo.org/euroscipy-2015/image-processing-with-scikit-image.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From telescopes to satellite cameras to electron microscopes, scientists are producing large datasets of images to be processed and analyzed. This tutorial will introduce image processing using the &amp;quot;images as numpy arrays&amp;quot; abstraction, run through various fundamental image analysis operations (filters, morphology, segmentation), and finally complete one or two more advanced real-world examples.&lt;/p&gt;
&lt;p&gt;Access materials here:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jni/skimage-tutorials/blob/euroscipy2015/2015-euroscipy/index.ipynb"&gt;https://github.com/jni/skimage-tutorials/blob/euroscipy2015/2015-euroscipy/index.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jni/skimage-tutorials/blob/a7ab20a6da21222c4006537cba2c6ca85c7b9d33/lectures/00_images_are_arrays.ipynb"&gt;https://github.com/jni/skimage-tutorials/blob/a7ab20a6da21222c4006537cba2c6ca85c7b9d33/lectures/00_images_are_arrays.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jni/skimage-tutorials/blob/a7ab20a6da21222c4006537cba2c6ca85c7b9d33/lectures/1_image_filters.ipynb"&gt;https://github.com/jni/skimage-tutorials/blob/a7ab20a6da21222c4006537cba2c6ca85c7b9d33/lectures/1_image_filters.ipynb&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-07:euroscipy-2015/image-processing-with-scikit-image.html</guid></item><item><title>Introduction to scikit-image</title><link>https://pyvideo.org/pydata-paris-2015/introduction-to-scikit-image.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;scikit-image is a general-purpose image processing module for the Python
programming language. It is designed to interact efficiently with other
popular scientific Python libraries, such as NumPy and SciPy. In
particular, scikit-image leverages the powerful data array container of
NumPy, that can store images of various dimensions (2-D, 2D RGB, 3D,
4D…).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-10:pydata-paris-2015/introduction-to-scikit-image.html</guid></item><item><title>Why Scientific Python rocks: simple APIs and innovative documentation</title><link>https://pyvideo.org/pydata-paris-2016/why-scientific-python-rocks-simple-apis-and-innovative-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why Scientific Python rocks: simple APIs and innovative documentation, by Emmanuelle Gouillart&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuelle Gouillart</dc:creator><pubDate>Tue, 14 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-14:pydata-paris-2016/why-scientific-python-rocks-simple-apis-and-innovative-documentation.html</guid></item></channel></rss>