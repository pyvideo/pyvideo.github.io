<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_djangocon-au-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-12T00:00:00+00:00</updated><entry><title>Behind Closed Doors: Managing Passwords in a Dangerous World</title><link href="https://pyvideo.org/djangocon-au-2016/behind-closed-doors-managing-passwords-in-a-dangerous-world.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Noah Kantrowitz</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/behind-closed-doors-managing-passwords-in-a-dangerous-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Noah Kantrowitz
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/61/view_talk"&gt;https://2016.pycon-au.org/schedule/61/view_talk&lt;/a&gt;
Secrets come in many forms, passwords, keys, tokens. All crucial for the operation of an application, but each dangerous in its own way. In the past, many of us have pasted those secrets in to a text file and moved on, but in a world of config automation and ephemeral microservices these patterns are leaving our data at greater risk than ever before.&lt;/p&gt;
&lt;p&gt;New tools, products, and libraries are being released all the time to try to cope with this massive rise in threats, both new and old-but-ignored. This talk will cover the major types of secrets in a normal web application, how to model their security properties, what tools are best for each situation, and how to use them with major web frameworks.&lt;/p&gt;
</summary></entry><entry><title>Comparing Wagtail, Django CMS and Mezzanine</title><link href="https://pyvideo.org/djangocon-au-2016/comparing-wagtail-django-cms-and-mezzanine.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Adam Brenecki</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/comparing-wagtail-django-cms-and-mezzanine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adam Brenecki
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/102/view_talk"&gt;https://2016.pycon-au.org/schedule/102/view_talk&lt;/a&gt;
Django CMS, Mezzanine and Wagtail are the three most popular Django-based content management systems; all three have kept (or, in Wagtail's case, gained) their popularity because they are so different to each other. In many ways, from their fundamental data models right through to how they approach their content editing UIs, each one has a very different take on how a CMS should work.&lt;/p&gt;
&lt;p&gt;This talk will explore the different approaches, strengths and weaknesses of each CMS, and what they mean for you as a developer and for your content editors.&lt;/p&gt;
</summary></entry><entry><title>Digitising 100 years of parliamentary data - Django as a framework for government data management</title><link href="https://pyvideo.org/djangocon-au-2016/digitising-100-years-of-parliamentary-data-django-as-a-framework-for-government-data-management.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Samuel Spencer</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/digitising-100-years-of-parliamentary-data-django-as-a-framework-for-government-data-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Samuel Spencer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/135/view_talk"&gt;https://2016.pycon-au.org/schedule/135/view_talk&lt;/a&gt;
Historical information on Australian Parliaments has been available in the Parliamentary Library's flagship publication the Parliamentary Handbook - an extensive almanac with biographies, tables and records dating back to Australia's federation. This data is used as a way to track key social issues, such as length of service, gender representation in parliament and historical election information in an authoritative format.&lt;/p&gt;
&lt;p&gt;To improve access to this information the library began development of a mobile app which evolved into a complete Django-based data management system for managing parliamentary biographies and service histories based on Popolo, a civic data framework for the management and dissemination of parliamentary information. Along with interactive biographies and records of ministries and parties, the system for the first time allows users to build custom tables from complex queries that are dynamically updated as new information is made available.&lt;/p&gt;
&lt;p&gt;Coupled with this is the development of a biographical data management system that will ensure that records of new parliamentarians and future changes to existing parliamentarians are captured in a single system.&lt;/p&gt;
&lt;p&gt;In this presentation, we cover the challenges and successes in digitising over 100 years parliamentary data, including migration, data cleansing and data trust issues. We also provide a technical breakdown of the chosen framework and infrastructure, and issues during development especially when dealing with imprecise or incomplete historical records. Lastly, we cover the Django apps for data modelling and querying built for this project that have already been released as open-source.&lt;/p&gt;
</summary></entry><entry><title>Django - Customise your SQL</title><link href="https://pyvideo.org/djangocon-au-2016/django-customise-your-sql.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Josh Smeaton</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/django-customise-your-sql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Josh Smeaton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/86/view_talk"&gt;https://2016.pycon-au.org/schedule/86/view_talk&lt;/a&gt;
Learn about the different methods of altering the SQL that the Django ORM generates. Write complex reporting queries, perform calculations within the database, or drop down to writing the entire query in pure SQL. Take advantage of your specific database features.&lt;/p&gt;
</summary></entry><entry><title>Django &amp; Drupal: A tale of two cities.</title><link href="https://pyvideo.org/djangocon-au-2016/django-drupal-a-tale-of-two-cities.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Donna Benjamin</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/django-drupal-a-tale-of-two-cities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Donna Benjamin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/201/view_talk"&gt;https://2016.pycon-au.org/schedule/201/view_talk&lt;/a&gt;
Drupal and Django have much in common. They’re both open source tools for building the web. They’re also marked by some fundamental differences. However, both are so much more than that.&lt;/p&gt;
&lt;p&gt;&amp;quot;Every human creature is constituted to be that profound secret and mystery to every other. A solemn consideration, when I enter a great city by night, that every one of those darkly clustered houses encloses its own secret; that every room in every one of them encloses its own secret!&amp;quot; - Charles Dickens.&lt;/p&gt;
&lt;p&gt;Let’s explore the darkly clustered houses of these two different communities of open source people.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What common challenges do we face?&lt;/li&gt;
&lt;li&gt;What different approaches do we take?&lt;/li&gt;
&lt;li&gt;What can we learn from each other?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;And finally, what could we do together?&lt;/p&gt;
</summary></entry><entry><title>DjangoConf Lightning Talks and Closing</title><link href="https://pyvideo.org/djangocon-au-2016/djangoconf-lightning-talks-and-closing.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/djangoconf-lightning-talks-and-closing.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Integrating 2 factor authentication into your project</title><link href="https://pyvideo.org/djangocon-au-2016/integrating-2-factor-authentication-into-your-project.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/integrating-2-factor-authentication-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most websites these days require some kind of authentication. User name + password is the most common one. OAuth with Facebook / Github / Google / Twitter is also common. But sometimes you can't rely on 3rd party services and user name + password is not enough. In those cases 2 Factor Authentication is a nice, additional security layer. Use e.g. a phone to ensure a more secure authentication.&lt;/p&gt;
</summary></entry><entry><title>Reinventing Django for the Real-Time Web</title><link href="https://pyvideo.org/djangocon-au-2016/reinventing-django-for-the-real-time-web.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/reinventing-django-for-the-real-time-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Godwin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/28/view_talk"&gt;https://2016.pycon-au.org/schedule/28/view_talk&lt;/a&gt;
Django's new Channels feature takes Django beyond the world of HTTP's request-response protocol and into the modern Web protocol world of WebSockets and real-time communication - but it also does a lot more. Learn how Django can now respond to WebSockets, emails or instant messages as easily as HTTP, and we re-architected Django to support all these changes while keeping a clean API and backwards compatibility, and the implications it has for the wider Python ecosystem.&lt;/p&gt;
</summary></entry><entry><title>Search-First Writing for Developers</title><link href="https://pyvideo.org/djangocon-au-2016/search-first-writing-for-developers.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Heidi Waterhouse</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/search-first-writing-for-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Heidi Waterhouse
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/47/view_talk"&gt;https://2016.pycon-au.org/schedule/47/view_talk&lt;/a&gt;
If people can't use your software, you have already failed as a developer.&lt;/p&gt;
&lt;p&gt;This talk digs in to how optimizing for search and using the existing technical assistance forums can put your product ahead of the pack. Technical writing, in all its variations, is a type of interface with your product. It incorporates everything from an error message to an implementation guide. How can you as a developer make deploying, using, and promoting your product as painless as possible? Make it searchable. Make finding the answer to a problem so trivially easy that your user barely even remembers they had a problem.&lt;/p&gt;
&lt;p&gt;No one wants to be using software. They want to be data mining or manipulating beautiful photos or targeting advertising. Making them think about the software diverts them from what they want to be accomplishing. Use these documentation techniques to get them in and out and on their way.&lt;/p&gt;
&lt;p&gt;(my secret is: I'm always angry when I have to read help)&lt;/p&gt;
</summary></entry></feed>