<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Emma Delescolle</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 22 Sep 2023 00:00:00 +0000</lastBuildDate><item><title>Staying DRY(er) when working with Django and frontend frameworks/libraries</title><link>https://pyvideo.org/djangocon-europe-2017/staying-dryer-when-working-with-django-and-frontend-frameworkslibraries.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written an API and wished you could magically export it to the frontend framework or library of your choice without having to redefine every model or every form?&lt;/p&gt;
&lt;p&gt;Well, today it is possible! Come to this talk and learn how.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-03:/djangocon-europe-2017/staying-dryer-when-working-with-django-and-frontend-frameworkslibraries.html</guid><category>DjangoCon Europe 2017</category></item><item><title>Creating a Spotify-like personal streaming service - Emma Delescolle</title><link>https://pyvideo.org/djangocon-europe-2020/creating-a-spotify-like-personal-streaming-service-emma-delescolle.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 15h10 (GMT+1)&lt;/p&gt;
&lt;p&gt;&amp;quot;Creating a spotify-like personal streaming service with Django and Vue: Lessons learned&amp;quot; by Emma Delescolle&lt;/p&gt;
&lt;p&gt;In today's web, working with a frontend framework or library is becoming the norm. Vue is one of the most popular ones but how does it play with Django, what are the advantages and caveats? We'll use a practical example to explore some of those, ranging from getting the 2 frameworks to &amp;quot;just&amp;quot; work together to data exchange through a DRF API, authentication and websockets.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-09-18:/djangocon-europe-2020/creating-a-spotify-like-personal-streaming-service-emma-delescolle.html</guid><category>DjangoCon Europe 2020</category></item><item><title>Rewriting Django from almost scratch in 2021</title><link>https://pyvideo.org/djangocon-europe-2021/rewriting-django-from-almost-scratch-in-2021.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the decisions that was made 15 years ago was to use &lt;em&gt;home-made&lt;/em&gt; code for everything. Django depends on very few libraries. Django doesn't use anything from the Python eco-system, when it comes to ORM, templates, routing, etc.&lt;/p&gt;
&lt;p&gt;And that is a decision I would probably have done at the time as well. The Python world was much less welcoming at the time and documentation was still regarded as a second-class citizen. Let's not even mention the wrath you were taking the risk of exposing yourself to if you dared make a pull request on a project you weren't involved with.&lt;/p&gt;
&lt;p&gt;Those choices are not the only reasons to consider a rewrite though... After attending several Django conferences, I noticed a few trends about what prominent Django developers would like to change. For example &lt;strong&gt;WSGI middlewares&lt;/strong&gt; is something that's often put on the table, &lt;strong&gt;websockets&lt;/strong&gt; is another of those things that comes up very often.&lt;/p&gt;
&lt;p&gt;It is true that the world of the web is quite different today compared to what it was 15 years ago. It seems to me that today &lt;strong&gt;REST API's&lt;/strong&gt; and &lt;strong&gt;websockets&lt;/strong&gt; are first class citizens while server-rendered pages have become less important. Once again, that's just a personal feeling.&lt;/p&gt;
&lt;p&gt;A complete Django rewrite is also not my very own idea, several people have been working on a similar idea. Tom Christie has been working on many libraries in order to be able to rewrite Django as an async framework in order to better accommodate websockets. Others like Tobias have been working on something similar but starting at the other end of the problem. I guess this is just my own version of that thought experiment.&lt;/p&gt;
&lt;p&gt;For this thought experiment I will care about retaining the &amp;quot;spirit&amp;quot; of Django as I perceive it but I will not care at all about backward compatibility!&lt;/p&gt;
&lt;p&gt;## What does a Django rewrite needs to achieve in 2021?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Batteries included: Anything that claims to be a Django-like needs to come with everything out of the box&lt;/li&gt;
&lt;li&gt;A friendly ORM with a syntax that is closer to the objects than to SQL&lt;/li&gt;
&lt;li&gt;Middlewares&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Authentication and authorization&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Easy to build REST API's&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;Template-based rendering&lt;/li&gt;
&lt;li&gt;Static files serving during development&lt;/li&gt;
&lt;li&gt;Easy documenting of API's&lt;/li&gt;
&lt;li&gt;MVC implementation&lt;/li&gt;
&lt;li&gt;Easy to use CRUD controller and associated views&lt;/li&gt;
&lt;li&gt;A powerful admin(based on its own CRUD controllers)&lt;/li&gt;
&lt;li&gt;Error management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will cover all of those points, how they could be approached and whether using an existing Python library for that job might be a good idea&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code:&lt;/strong&gt;
-  Cordy (&lt;a class="reference external" href="https://gitlab.levitnet.be/levit/cordy/-/tree/master"&gt;https://gitlab.levitnet.be/levit/cordy/-/tree/master&lt;/a&gt;)
- CookieCutter for starting a project (&lt;a class="reference external" href="https://gitlab.levitnet.be/levit/cordy-project/-/tree/master"&gt;https://gitlab.levitnet.be/levit/cordy-project/-/tree/master&lt;/a&gt;)
- Demo app (Splendid) (&lt;a class="reference external" href="https://gitlab.levitnet.be/emma/splendid/-/tree/master"&gt;https://gitlab.levitnet.be/emma/splendid/-/tree/master&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a class="reference external" href="https://levit.be/uploads/Kazam_screencast_00003.mp4"&gt;https://levit.be/uploads/Kazam_screencast_00003.mp4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a class="reference external" href="https://slides.com/emma_be/cordy"&gt;https://slides.com/emma_be/cordy&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-06-04:/djangocon-europe-2021/rewriting-django-from-almost-scratch-in-2021.html</guid><category>DjangoCon Europe 2021</category><category>Django</category><category>DjangoConEU</category><category>djangoconeu2021</category></item><item><title>Making your life (h)APIer with Django</title><link>https://pyvideo.org/djangocon-europe-2019/making-your-life-hapier-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today’s web, creating API’s has become a big part of web-development. Django and Django REST Framework make our lives easy :-) But let’s take it a notch further with DRF-Schema-Adapter.
When it comes to building API’s with Django, Django REST Framework has become the go-to solution. It is a great tool that integrates seamlessly with Django and it’s ORM.
Unfortunately when building a medium-to-large API, DRF leads to a lot of very similar and somewhat repetitive code in building your ViewSet, Serializer, Pagination or Filter classes. In the long-run, all this code also has to be maintained!
This is where DRF-Schema-Adapter can make your life easier and happier!
In this talk, we’ll go over the basics of building an API with DRF versus using DRF-Schema-Adapter and how it will help shrink your codebase.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:/djangocon-europe-2019/making-your-life-hapier-with-django.html</guid><category>DjangoCon Europe 2019</category></item><item><title>Introduction to python running on different hardware types</title><link>https://pyvideo.org/pycon-uk-2018/introduction-to-python-running-on-different-hardware-types.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the past few years we have seen a lot of advances regarding the
hardware python can run on.&lt;/p&gt;
&lt;p&gt;You're probably used to Python running on &amp;quot;regular&amp;quot; computers. But 10
years ago a revolution started with the Raspberry Pi that was one of the
first computers in decades, thanks to its GPIO headers, which allowed
easy control of electronic hardware from a programming language.&lt;/p&gt;
&lt;p&gt;That was the dawn of a new era that opened-up electronic hardware
programming with python on multiple devices as micro-controllers like
the BBC Micro:bit thanks to MicroPyton and plenty of other MCU's running
either MicroPython or CircuitPython (a friendly fork of MicroPython).&lt;/p&gt;
&lt;p&gt;But it doesn't stop there, Python can also run on phones and tablets
thanks to BeeWare and Kivy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-17:/pycon-uk-2018/introduction-to-python-running-on-different-hardware-types.html</guid><category>PyCon UK 2018</category></item><item><title>We made a clock with Python</title><link>https://pyvideo.org/pycon-uk-2018/we-made-a-clock-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session is about the story of two girls who decided to make a clock
themselves after searching a lot on the internet and without finding
what they were looking for.&lt;/p&gt;
&lt;p&gt;In this talk we will tell you what we used and how we used it, we will
also tell you how we made plans and then how we made circuits (timing,
requirements, how difficult and fun it was)&lt;/p&gt;
&lt;p&gt;We will finally tell you more about code and why exactly we wrote it
like that (Spoiler: there was a module with the RTC we used but the
memory of the trinket was to small to support the original code to do
what exactly we wanted to do)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leila Verhaegen</dc:creator><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-17:/pycon-uk-2018/we-made-a-clock-with-python.html</guid><category>PyCon UK 2018</category></item><item><title>Writing micro services in Python - Sure But which framework</title><link>https://pyvideo.org/pycon-uk-2019/writing-micro-services-in-python-sure-but-which-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When googling 'python micro-service framework', there are plenty of 'Hello world' examples out there for many (micro-)frameworks. But how do they scale to 'real' world applications? How can I connect framework X to a database or what do you need to do to use OAuth2 with framework Y?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-15:/pycon-uk-2019/writing-micro-services-in-python-sure-but-which-framework.html</guid><category>PyCon UK 2019</category></item><item><title>I plugged a Z80 into a Pi Pico, here's how it happened</title><link>https://pyvideo.org/pycon-uk-2023/i-plugged-a-z80-into-a-pi-pico-heres-how-it-happened.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've always wanted to build a retro computer based on an old-stock Z80 cpu. The biggest roadblock for me in this endeavor has always been finding a way to manage I/O and a modern display.&lt;/p&gt;
&lt;p&gt;The Pi Pico solved all this for me.&lt;/p&gt;
&lt;p&gt;Introducing the Raspberry Pi Pico Z80-Based Retro Computer: A Revolutionary Fusion of Modern Technology, geekiness and Nostalgic Computing!&lt;/p&gt;
&lt;p&gt;Prepare to be blown away by this project, where the almighty Pi Pico take on the role of the ultimate multitasker —a graphics card, clock, ROM, and keyboard controller— for a Z80-based retro computer. Did I ignite your inner geek yet?!&lt;/p&gt;
&lt;p&gt;Imagine a Z80 cpu, like the one that powers the BBC micro but with vibrant 8-bit color graphics coming to life on a VGA screen! All thanks the Raspberry Pi Pico and its PIO capabilities. The Pico in this project has been turned into a somewhat efficient graphics card, enabling smooth rendering of retro-style visuals on modern screens. Experience the nostalgia of blocky pixels.... &lt;strong&gt;in 4K&lt;/strong&gt; (with an HDMI adapter)&lt;/p&gt;
&lt;p&gt;The Raspberry Pi Pico's versatility extends beyond its graphics capabilities. Acting as the clock, it allows for varying the speed of the cpu and do &amp;quot;fancy&amp;quot; things like step by step debugging of Z80 assembly.&lt;/p&gt;
&lt;p&gt;One of the most delightful aspects of the project is using the Pico as a ROM. Gone are the days of meticulously erasing and rewriting chips, as this setup allows you to effortlessly load files instead.&lt;/p&gt;
&lt;p&gt;And with the Pico acting as a USB host, you are free to plug in modern hardware directly into this fancy retro computer! USB keyboard and mouse, SD-card reader, you name it!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/i-plugged-a-z80-into-a-pi-pico-heres-how-it-happened.html</guid><category>PyCon UK 2023</category></item></channel></rss>