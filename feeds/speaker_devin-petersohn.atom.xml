<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_devin-petersohn.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-04T00:00:00+00:00</updated><entry><title>Modin: Scaling the Capabilities of the Data Scientist, not the machine</title><link href="https://pyvideo.org/euroscipy-2019/modin-scaling-the-capabilities-of-the-data-scientist-not-the-machine.html" rel="alternate"></link><published>2019-09-04T00:00:00+00:00</published><updated>2019-09-04T00:00:00+00:00</updated><author><name>Devin Petersohn</name></author><id>tag:pyvideo.org,2019-09-04:euroscipy-2019/modin-scaling-the-capabilities-of-the-data-scientist-not-the-machine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern data systems tend to heavily focus on optimizing for the system’s
time. Some of these optimizations, however, are counterproductive to the
end user’s workflow and thought process. In this talk, we discuss the
design of Modin, a DataFrame library, and how to optimize for the human
system.&lt;/p&gt;
&lt;p&gt;Modin is a project at UC Berkeley's RISELab designed to optimize for the
data scientist’s time. Often when building a data system, the system
designers will follow a set of “best practices” in order to optimize
performance. These “best practices” often require data scientists to
understand and personally optimize concepts and system components that
are not central to extracting value from their data.&lt;/p&gt;
&lt;p&gt;The fundamental goal of data science is to extract value from data.
Despite this, data systems are being built with user requirements such
as: (1) knowledge of partitioning, (2) understanding laziness and what
triggers computation, (3) an entirely new API, and (4) where their code
is running (e.g. locally, on-prem cluster, cloud). This overhead is
passed to the data scientist, even though there is no overlap between
these new requirements and the fundamental goal of their profession.&lt;/p&gt;
&lt;p&gt;In this talk, we will discuss how we think about the problem of large
scale data science and optimizing for the human system. We will discuss
the system design of Modin, which enables pluggable backends, runtimes,
and APIs. The system is designed to solve the needs of the data science
community regardless of an individual user’s environment. Currently,
Modin supports the pandas API, and a proof of concept for SQL has been
implemented. Modin is completely open- source and can be found on
GitHub: &lt;a class="reference external" href="https://github.com/modin-project/modin"&gt;https://github.com/modin-project/modin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modern data systems tend to heavily focus on optimizing for the system’s
time. In this talk, we discuss the design of Modin, a DataFrame library,
and how to optimize for the human system.&lt;/p&gt;
</summary></entry><entry><title>Scaling Interactive Pandas Workflows with Modin</title><link href="https://pyvideo.org/pydata-new-york-city-2018/scaling-interactive-pandas-workflows-with-modin.html" rel="alternate"></link><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><author><name>Devin Petersohn</name></author><id>tag:pyvideo.org,2018-08-17:pydata-new-york-city-2018/scaling-interactive-pandas-workflows-with-modin.html</id><summary type="html"></summary></entry><entry><title>Learning to Scale Data Science, Machine Learning, and Pandas with Ray and Modin</title><link href="https://pyvideo.org/pydata-la-2018/learning-to-scale-data-science-machine-learning-and-pandas-with-ray-and-modin.html" rel="alternate"></link><published>2018-10-21T00:00:00+00:00</published><updated>2018-10-21T00:00:00+00:00</updated><author><name>Devin Petersohn</name></author><id>tag:pyvideo.org,2018-10-21:pydata-la-2018/learning-to-scale-data-science-machine-learning-and-pandas-with-ray-and-modin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to use Ray to scale their new
and existing Python code. It will cover the Ray system architecture,
example applications, GPU support, and best practices. It will also
include material for more comprehensive exercises. Attendees will also
receive a tutorial on Modin, and how Pandas workflows can be scaled by
changing a single line of code.&lt;/p&gt;
</summary></entry></feed>