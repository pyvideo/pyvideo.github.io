<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 06 Jul 2012 00:00:00 +0000</lastBuildDate><item><title>A laboratory Notebook System</title><link>https://pyvideo.org/europython-2012/a-laboratory-notebook-system.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many scientists are using a laboratory notebook when conducting
experiments. The scientist documents each step, either taken in the
experiment or afterwards when processing data. Due to computerized
research systems, acquired data increases in volume and becomes more
elaborate. This increases the need to migrate from originally
paper-based to electronic notebooks with data storage, computational
features and reliable electronic documentation. This talks describes a
laboratory notebook based on the Python data management software
DataFinder. It allows to manage data from experiments and simulations,
to run analysis software and to create visualizations of results. The
laboratory notebook assures that the complete history of all performed
steps (&amp;quot;Provenance&amp;quot;) is recorded, that results can be signed digitally,
and that results can be archived in a secure archive to avoid and
prevent legal issues.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Schereiber</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/a-laboratory-notebook-system.html</guid></item><item><title>Advanced Flask Pattern Q&amp;A session</title><link>https://pyvideo.org/europython-2012/advanced-flask-pattern-qa-session.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/advanced-flask-pattern-qa-session.html</guid></item><item><title>Advanced Flask Patterns</title><link>https://pyvideo.org/europython-2012/advanced-flask-patterns.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Ronacher - 5 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk shows some interesting patterns for large scale Flask
applications and how Flask extension should be structured. It also dives
into some of the more unknown helpers in the Werkzeug and Jinja2 base
libraries. The goal of this talk is to share some of the things that the
documentation can’t explain well by itself. Required prerequisites:
basic knowledge of how Flask operates.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Ronacher</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/advanced-flask-patterns.html</guid></item><item><title>Aspect oriented programming applied to dictionary trees</title><link>https://pyvideo.org/europython-2012/aspect-oriented-programming-applied-to-dictionary.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Florian Friesdorf - 5 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mixins enable code re-usage across class hierarchies, adapters allow for
additional run-time behaviour — metachao aspects merge these two concept
and go beyond: they can be applied to classes, instances and aspects
themselves, allowing for functional meta-programming in python. Their
beauty will be demonstrated by example of dictionary trees, where all
behaviour is implemented in form of aspects and applied to different
dictionary implementations. The goal of the talk is to get an
understanding of how aspect oriented programming can look and why
dictionary trees in combination with aspects are a cool way of designing
applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Friesdorf</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/aspect-oriented-programming-applied-to-dictionary.html</guid></item><item><title>Behaviour Driven Development at BSkyB</title><link>https://pyvideo.org/europython-2012/behaviour-driven-development-at-bskyb.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Russell Sherwood- David Sale - 5 JULY 2012 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BSkyB is a major player in the broadcasting and telecoms market in the
United Kingdom. Skyâ??s offering of premium sports, movies and
entertainment channels puts it at the forefront of Television
entertainment in more than 10 million homes. Its ample broadband and
telephone products have allowed the company to expand its customer base
and offer an all round package to its customers. With a focus on quality
and stability in everything Sky produces, testing of applications is
paramount. As part of this business, the company needs a successful and
efficient way to sell these products to its customers and as such the
modelling, rules and pricing of packages need to lay a firm foundation
for different parts of a sales application to function well. Testing
plays a key role to ensure that delivery of a product is always as
incident free as possible. Within the agile framework, unit tests,
behaviour driven development (BDD) and continuous integration play a key
role in making this possible. Ensuring we discover defects early enables
us to deliver software fortnightly. BDD tests allow the team to test the
application as the user will use it, highlighting any issues from front
end through to back end. More importantly with BDD tests written in
plain English and python code underneath it allows the Quality Assurance
personnel (QAâ??s), developers and business owners to work together in
constructing and writing tests. This brings together the entire team
rather than separating the separate stages of application development.
In this EuroPython presentation, we will cover the following aspects of
BDD: â?¢ The role of BDD in Agile Development â?? a brief introduction
to the usage of BDD on a daily basis and the process of QAâ??s and
developers working together to form quality tests. â?¢ Creating a
successful and useful BDD test â?? writing the feature file (plain
English definition of what the test will achieve), underlying step
definitions and how working collectively can maximize the coverage of
routes through the code. â?¢ BDD usage in continuous integration â?? the
movement of code through a continuous build process, catching defects
early and how BDD tests ensure confidence in your application as it
moves into production.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Sale</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/behaviour-driven-development-at-bskyb.html</guid></item><item><title>Building a full featured Python Web Application in 10 minutes with turbogears2 pluggable extensions part 2</title><link>https://pyvideo.org/europython-2012/building-a-full-featured-python-web-application-i.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building a full featured Python Web Application in 10 minutes with
turbogears2 pluggable extensions part 2 [EuroPython 2012] A Molina - 5
JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The TurboGears 2.1 release series has deeply focused on speeding up the
development process for rapidly prototyping full featured applications.
This has lead to a many improvements to the CRUD extension and to the
support to pluggable applications. Mastering those tools can make
possible to build a complete application without much effort using the
partials made available by the pluggable applications and exposing
administrative interfaces in a bunch of lines of code using the CRUD
extension both using SQLA and MongoDB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Molina</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/building-a-full-featured-python-web-application-i.html</guid></item><item><title>Building your first app with python and MongoDB</title><link>https://pyvideo.org/europython-2012/building-your-first-app-with-python-and-mongodb.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Ross Lawley - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MongoDB - from “humongous” - is an open source, non-relational,
document- oriented database. Trading off a few traditional features of
databases (Notably joins and transactions) in order to Achieve much
better performance, MongoDB is fast, scalable, and designed for web
development. The goal of the project is MongoDB to bridge the gap
between key-value stores (which are fast and highly scalable) and
traditional RDBMS systems (which queries Provide rich and deep
functionality). This talk will introduce the rich feature set of mongoDB
and examine how easy it is to develop with using python. We’ll discuss
the various ODM’s solutions that really let you develop quickly and how
mongoDB can be used to easily scale.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ross Lawley</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/building-your-first-app-with-python-and-mongodb.html</guid></item><item><title>concurrent.futures is here</title><link>https://pyvideo.org/europython-2012/concurrentfutures-is-here.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Andrew Dalke - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The future is here! Or rather, concurrent.futures became part of the
Python standard library with 3.2. This style of asynchronous
programming, also known as promises, has been around for decades but is
only recently becoming popular in a number of languages and libraries.
My presentation is meant for a Python programmer who knows nothing about
futures. I’ll structure it around processing web server logs, and show
several ways to Python code can make more effective use of a multi-core
machine. In some cases the multi-threaded executor is good enough, but
in others the right solution is the multi-process executor. Because of
the unified API, it’s a one line change to switch from one to the other.
It isn’t hard to write your own executor for different compute models.
I’ll show that by developing a new one which works on top of the PiCloud
API. At the end I’ll describe some of the more experimental work I’m
doing to use promises in a dependency graph, where certain computed
properties are dependent on others. Even though concurrent.futures came
in 3.2, Python 2.x users can use the API through Alex Grönholm’s
‘futures’ backport.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/concurrentfutures-is-here.html</guid></item><item><title>Content Management professionale con Python nel 2012</title><link>https://pyvideo.org/europython-2012/content-management-professionale-con-python-nel-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Maurizio Delmonte - 5 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django o Pyramid, rapidi da apprendere e mettere a frutto, sono potenti
strumenti di lavoro, utili a costruire siti gestiti da un solo autore o
applicazioni web di servizio. Ma se avete bisogno di far collaborare un
vera redazione alla pubblicazione di un portale ricco di
contenuti,&amp;amp;nbsp_place_holder;non troverete stoffa pythonica migliore
di Plone! Come costruire un servizio di Content e Document Management
potente e professionale nel 2012? Facciamo il punto su cosa offre il
mondo Python di oggi.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maurizio Delmonte</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/content-management-professionale-con-python-nel-2.html</guid></item><item><title>Costruire applicazioni web complesse con le pluggable applications di TurboGears2 in pochi minuti</title><link>https://pyvideo.org/europython-2012/costruire-applicazioni-web-complesse-con-le-plugg.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Alessandro Molina - 5 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Con la release 2.1 di TurboGears il team di sviluppo ha posto molta
enfasi nel creare un set di strumenti utili al rapid prototyping di
applicazioni web. Questo ha portato alla realizzazione di molte
migliorie all’estensione per la generazione di CRUD ed al supporto per
le applicazioni pluggabili. Padroneggiare questi strumenti può
permetterci di creare applicazioni web complesse senza troppa fatica
riutilizzando parti messe a disposizione da altre applicazioni
pluggabili e creando sezioni amministrative con poche righe di codice
tramite l’uso dell’estensione CRUD sia su SQLAlchemy che MongoDB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/costruire-applicazioni-web-complesse-con-le-plugg.html</guid></item><item><title>Fast Data Mining with Pytables and pandas</title><link>https://pyvideo.org/europython-2012/fast-data-mining-with-pytables-and-pandas.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Y Hipisch - 5 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a number of industries, like financial services or utilities, it is
important to analyze huge sets of data in an efficient and fast manner.
Typical solutions that are based on SQL databases or follow some kind of
data warehouse approach are generally quite expensive and demand for
huge computing power. Using the Python libraries PyTables and pandas
brings high performance data mining to your desktop computer or even
notebook. The talk illustrates how to beneficially apply these libraries
in the context of financial time series and other data sets. It is also
illustrated how you can implement fast calculations on data sets which
do not fit into the memory of your computer. In addition, the talk
provides a number of examples for the visualization of your data mining
efforts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Yves J. Hilpisch</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/fast-data-mining-with-pytables-and-pandas.html</guid></item><item><title>Full text search for trac with apache solr</title><link>https://pyvideo.org/europython-2012/full-text-search-for-trac-with-apache-solr.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Willmer- 5 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trac is a widely used integrated bug, wiki and source control interface
for managing software projects. It’s very extensible and a wide range of
plugins are available. We shall present a newly written full text search
plugin for Trac that uses Apache Solr to make all parts of trac
searchable - including the source code repository and all file
attachments. The session will introduce Solr and show how it can be
integrated into a Python project -including the pitfalls to avoid and
the more useful features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Willmer</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/full-text-search-for-trac-with-apache-solr.html</guid></item><item><title>Fully Test-driven Django with selenium part 1</title><link>https://pyvideo.org/europython-2012/fully-test-driven-django-with-selenium-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] H Percival - 5 JULY 2012 in &amp;quot;Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;tl; dr: The concept: run through the official Django tutorial, but with
full TDD Includes browser-based testing with Selenium, using the new
WebDriver API In-depth unit-testing, including the Django Test Client
and tools like Mock Discussions of TDD philosophy: what to test, what
not to test, how to test &lt;a class="reference external" href="http://www.tdd-django-tutorial.com/"&gt;http://www.tdd-django-tutorial.com/&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/hjwp%20/Test-Driven-Django-Tutorial"&gt;https://github.com/hjwp/Test-Driven-Django-Tutorial&lt;/a&gt;
come prepared! you’ll need git, firefox, python2.7, django1.4 and
selenium installed. Fully Test-Driven Django with Selenium AKA “The
Django Pony vs The Testing Goat” This tutorial is aimed primarily at
people who want to learn about one or many of: Django Selenium
Test-Driven-Development So it’s aimed at beginners of one kind or
another – if you are already well versed in all three, then you may not
get much out of it. The idea is to run through the steps covered by the
official Django tutorial, covering the essentials of Django from a
beginner’s point of view. However, at each stage, instead of “just”
writing the Django code required to build our site, we first write
tests. And we don’t just write unit tests! We start by writing
“functional” or “acceptance” tests, using Selenium - which means driving
a real browser, and checking the actual behaviour of the site as it is
rendered, from the user’s point of view. Why should you listen to me, I
hear you ask? Well, I was lucky enough to get my first “proper” software
development job about two years ago with a bunch of Extreme Programming
fanatics, who’ve thoroughly inculcated me into their cult of Test-Driven
development. Believe me when I say I’m contrary enough to have
questioned every single practice, challenged every single decision,
moaned about every extra minute spent doing “pointless” tests instead of
writing “proper” code. But I’ve come round to the idea now, and whenever
I’ve had to go back to some of my old projects which don’t have tests,
boy have I ever realised the wisdom of the approach. So, I’ve learnt
from some really good people, and the learning process is still fresh in
my mind, and most importantly, I still have the passion of a recent
convert! Pre-requisites Come with the following pre- installed on your
laptop please: Git Firefox Python 2.7 setuptools/easy_install/pip then:
pip install django pip install selenium pip install mock PS - I don’t
have a preview of my TDD talk, but there is one video of me giving a
lightning talk at last year’s Pycon UK. It’s on a totally different
topic, but it gives a hit of my “dynamic” presentation “skills&amp;quot;: -
&lt;a class="reference external" href="https://www.youtube.com/watch?v=e%206NLAbgmRZ4"&gt;https://www.youtube.com/watch?v=e6NLAbgmRZ4&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">H Percival</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/fully-test-driven-django-with-selenium-part-1.html</guid></item><item><title>Fully Test-driven Django with selenium part 2</title><link>https://pyvideo.org/europython-2012/fully-test-driven-django-with-selenium-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] H Percival - 5 JULY 2012 in &amp;quot;Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;tl; dr: The concept: run through the official Django tutorial, but with
full TDD Includes browser-based testing with Selenium, using the new
WebDriver API In-depth unit-testing, including the Django Test Client
and tools like Mock Discussions of TDD philosophy: what to test, what
not to test, how to test &lt;a class="reference external" href="http://www.tdd-django-tutorial.com/"&gt;http://www.tdd-django-tutorial.com/&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/hjwp%20/Test-Driven-Django-Tutorial"&gt;https://github.com/hjwp/Test-Driven-Django-Tutorial&lt;/a&gt;
come prepared! you’ll need git, firefox, python2.7, django1.4 and
selenium installed. Fully Test-Driven Django with Selenium AKA “The
Django Pony vs The Testing Goat” This tutorial is aimed primarily at
people who want to learn about one or many of: Django Selenium
Test-Driven-Development So it’s aimed at beginners of one kind or
another – if you are already well versed in all three, then you may not
get much out of it. The idea is to run through the steps covered by the
official Django tutorial, covering the essentials of Django from a
beginner’s point of view. However, at each stage, instead of “just”
writing the Django code required to build our site, we first write
tests. And we don’t just write unit tests! We start by writing
“functional” or “acceptance” tests, using Selenium - which means driving
a real browser, and checking the actual behaviour of the site as it is
rendered, from the user’s point of view. Why should you listen to me, I
hear you ask? Well, I was lucky enough to get my first “proper” software
development job about two years ago with a bunch of Extreme Programming
fanatics, who’ve thoroughly inculcated me into their cult of Test-Driven
development. Believe me when I say I’m contrary enough to have
questioned every single practice, challenged every single decision,
moaned about every extra minute spent doing “pointless” tests instead of
writing “proper” code. But I’ve come round to the idea now, and whenever
I’ve had to go back to some of my old projects which don’t have tests,
boy have I ever realised the wisdom of the approach. So, I’ve learnt
from some really good people, and the learning process is still fresh in
my mind, and most importantly, I still have the passion of a recent
convert! Pre-requisites Come with the following pre- installed on your
laptop please: Git Firefox Python 2.7 setuptools/easy_install/pip then:
pip install django pip install selenium pip install mock PS - I don’t
have a preview of my TDD talk, but there is one video of me giving a
lightning talk at last year’s Pycon UK. It’s on a totally different
topic, but it gives a hit of my “dynamic” presentation “skills&amp;quot;: -
&lt;a class="reference external" href="https://www.youtube.com/watch?v=e%206NLAbgmRZ4"&gt;https://www.youtube.com/watch?v=e6NLAbgmRZ4&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">H Percival</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/fully-test-driven-django-with-selenium-part-2.html</guid></item><item><title>Functional functional programming in Python and even Haskell part 2</title><link>https://pyvideo.org/europython-2012/functional-functional-programming-in-python-and-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Trygubenko - 5 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reaping the benefits of functional programming can be a real challenge,
falling anywhere between exciting and frustrating, to the point that one
might end up feeling demotivated and embarrassed about writing in the
functional style in the “real world”. I have always strived to write
functional side- effect free code for production, and this year I have
been taking functional programming for myself one step further by
re-writing some of my Python tools in Haskell, and I would like to share
my findings. In this tutorial we will work through a progression of
increasing in complexity fun-to-solve problems, obtain solutions both in
Python and Haskell, in order to be able to first hand compare and
contrast readability, performance and development time. Bring a laptop
and a couple of interpreters (ipython and ghci) and lets do some
hacking!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S Trygubenko</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/functional-functional-programming-in-python-and-0.html</guid></item><item><title>Functional functional programming in Python and even Haskell part 1</title><link>https://pyvideo.org/europython-2012/functional-functional-programming-in-python-and-e.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Trygubenko - 5 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reaping the benefits of functional programming can be a real challenge,
falling anywhere between exciting and frustrating, to the point that one
might end up feeling demotivated and embarrassed about writing in the
functional style in the “real world”. I have always strived to write
functional side- effect free code for production, and this year I have
been taking functional programming for myself one step further by
re-writing some of my Python tools in Haskell, and I would like to share
my findings. In this tutorial we will work through a progression of
increasing in complexity fun-to-solve problems, obtain solutions both in
Python and Haskell, in order to be able to first hand compare and
contrast readability, performance and development time. Bring a laptop
and a couple of interpreters (ipython and ghci) and lets do some
hacking!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S Trygubenko</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/functional-functional-programming-in-python-and-e.html</guid></item><item><title>Guidelines to writing a Python API</title><link>https://pyvideo.org/europython-2012/guidelines-to-writing-a-python-api.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] George Peristerakis - 5 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will address the design and implementation of APIs using
Python. The goal is show how Python can help design clean and consist
API from the engineering point of view. The talk will be divided into 3
parts. 1. The motivation behind writing a API. 2. Show design patterns
that help design the foundations of an API 3. Show an example of
building an API (e-commerce module)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George Peristerakis</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/guidelines-to-writing-a-python-api.html</guid></item><item><title>HotPy (2) - A High Performance Binary-Compatible Virtual Machine for Python</title><link>https://pyvideo.org/europython-2012/hotpy-2-a-high-performance-binary-compatible.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Mark Shannon - 5 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HotPy (2) is a new interpreter for Python. It is binary compatible with
CPython and reuses CPython’s object and module implementations. The core
interpreter is new and uses many of the techniques developed during the
1990s and 2000s plus a technique developed during my PhD. Once the first
stage of the optimisation chain is completed (May or June), HotPy is
expected to be between 2 and 3 times as fast as CPython. It will
probably never be as fast as PyPy, but it might be possible to get
close. During the talk I will explain how it works (with lots of
pictures), and how it compares to CPython and PyPy. I will also discuss
whether the techniques used in HotPy would be suitable for Jython and
IronPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shannon</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/hotpy-2-a-high-performance-binary-compatible.html</guid></item><item><title>Increasing women engagement in the Python community</title><link>https://pyvideo.org/europython-2012/increasing-women-engagement-in-the-python-communi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] L Root - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a woman wanting to break into the engineering field? Or do you
know any women wanting to learn how to code, but don’t know how to help
them? Perhaps our nerdy ladies are a bit shy to ask for help. That’s
okay! I’ll give you some tools to nudge you in the right direction. In
this session, Iâ??ll be talking about how I increased womenâ??s
engagement in the Python community though demonstrating how versatile
the language is with practical projects, by creating a safe space for
women to learn and to fail, and by encouraging involvement beyond the
classroom.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/increasing-women-engagement-in-the-python-communi.html</guid></item><item><title>Language alone won't pay your bills</title><link>https://pyvideo.org/europython-2012/language-alone-wont-pay-your-bills.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Alan Franzoni - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What’s Python like? Is it ready for the “enterprise”? Does it scale well
in the “cloud”? How does it stand against its old, bearded enemies like
Java, or new threats like Ruby? A lot of work on Python is focused on
the language itself, making it quite pleasant to read and write, and
catering hordes of language lovers that swear by it. Nowadays, though,
we don’t just choose a language: we pick a platform - which includes a
runtime, APIs, and a lot of tools - along with its strengths and
weaknesses, and many factors should be considered before doing so -
mostly because we don’t usually have a “best choice ever” and we must
face some sort of tradeoff with each design choice. Java is ubiquitous
in the “enterprise software” world despite its cumbersomeness - why? Is
it really just a matter of slow adoption rate, or does it still stand
strong in some fields? We’ll explore where Python already works well and
where it falls beyond others, not just in terms of language beauty, but
in terms of tools and team productivity. We won’t be able to go really
deep into each aspect since time is limited, but questions are welcome.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/language-alone-wont-pay-your-bills.html</guid></item><item><title>Making DISQUS realtime</title><link>https://pyvideo.org/europython-2012/making-disqus-realtime.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Adam Hitchcock - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will overview what it took to add realtime to a truly “web
scale” app. The result is the DISQUS realtime system, a highly
concurrent system for allowing web clients to subscribe to arbitrary
events in the DISQUS infrastructure. The talk will be about 30 minutes
with an extended Question/Answer/Open discussion time (because your
ideas are good too!). Overview of the architecture (redis + gevent +
flask) and why those choices were made Numbers! how much concurrency and
msg/s we are supporting with realtime How we baked high availability
into the application, not just the infrastructure Overview of the
hardware involved Lessons learned (what broke hard, what worked awesome)
Suggested audience experience: Medium/Advanced level experience
Familiarity with Flask, Gevent/Eventlet would be really good.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/making-disqus-realtime.html</guid></item><item><title>Minimalism in software development, or why you should do less</title><link>https://pyvideo.org/europython-2012/minimalism-in-software-development-or-why-you-sh.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Fredrik Haard - 5 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lean and agile promises - when implemented right - to reduce the pain of
process and management overhead. As agile proponents say (the better of
them at least), this does not actually solve all our problems, it merely
lets us see them clearer. And one thing that we can see clear once
management overhead goes down, is that we are perfectly able to create
our own, technical, overhead. Developer culture and a tendency of
solving problems ‘the usual way’ can - and does - create complicated
solutions to simple problems, and regularly leaves us in configuration
hell. This is a talk about frameworks and API:s, programming languages
and data storage, and why we - developers - spend a large amount of time
not creating value. Even if we have the most perfect of agile
implementations with zero process overhead (yeah, right!), we still
waste time in development, and its all our own fault. I will discuss
what we spend our time on, why any framework should be approached with
trepidation, and how we can do better than keep repeating the mistakes
of yesteryear.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Haard</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/minimalism-in-software-development-or-why-you-sh.html</guid></item><item><title>NDB: the new data store library for Google App Engine</title><link>https://pyvideo.org/europython-2012/ndb-the-new-data-store-library-for-google-app-en.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NDB is a new Python client library for the Google App Engine Datastore.
NDB has an integrated multi-level cache, supports synchronous and
asynchronous calls, automatically batches requests, and several ways of
storing structured data. The thrust for developing NDB was the
realization that the original Python datastore client library, “db”, had
some architectural and design flaws which were hard to fix due to strict
backward compatibility requirements. But in the process, NDB became much
more than an improved db library. NDB offers a new paradigm for
asynchronous APIs, based on coroutines implemented using Python’s
“yield” expression (and a simple event loop). It also supports a
flexible way to create new Property classes by subclassing existing
Property classes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/ndb-the-new-data-store-library-for-google-app-en.html</guid></item><item><title>Non solo Django MVC orientato ai contenuti con Plone e Zope Toolkit</title><link>https://pyvideo.org/europython-2012/non-solo-django-mvc-orientato-ai-contenuti-con-pl.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maurizio Delmonte</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/non-solo-django-mvc-orientato-ai-contenuti-con-pl.html</guid></item><item><title>PSF Address</title><link>https://pyvideo.org/europython-2012/psf-address.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marcandre Lembourg</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/psf-address.html</guid></item><item><title>Python and Arduino: a tale of snakes and kings</title><link>https://pyvideo.org/europython-2012/python-and-arduino-a-tale-of-snakes-and-kings.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Davide Corio e Alessandro Pasotti - 5 JULY 2012 in
&amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interact with the real world is one of the most common needs when we
talk about monitoring, robotics, PLC and other business software related
needs we often hear about. Arduino is the most important electronic
prototyping platform, but few know we can use Python to interact with
it. So, let’s discover how we can use Python to develop applications and
interact with this awesome prototyping board.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pasotti</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/python-and-arduino-a-tale-of-snakes-and-kings.html</guid></item><item><title>Python e Arduino una storia di serpenti e re</title><link>https://pyvideo.org/europython-2012/python-e-arduino-una-storia-di-serpenti-e-re.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pasotti</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/python-e-arduino-una-storia-di-serpenti-e-re.html</guid></item><item><title>Python in banking systems</title><link>https://pyvideo.org/europython-2012/python-in-banking-systems.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Dziergwa - 5 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating applications for banks, especially internet banking systems, is
a very complicated process. Because we do it since many years, I would
like to show how we do it. The talk will cover: architecture of bank
transactional system tools used to create such solutions python
frameworks used to build bank applications generating advanced forms and
tables testing process build process logging what to focus on when you
work with banks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Dziergwa</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/python-in-banking-systems.html</guid></item><item><title>Python is faster than fortran</title><link>https://pyvideo.org/europython-2012/python-is-faster-than-fortran.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Muller - 5 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people may think that Python is slow because it is compiled to byte
code. This presentation shows that Python can be fast even for
computational intensive applications. In the example presented here,
Python competes with FORTRAN, a programming languages renowned for its
performance and aggressively optimizing compilers. Python offers
powerful data structures such as sets that make writing efficient
algorithms extremely simple. FORTRAN on the other hand, has much less in
such support. For the given example, it takes considerably more
programming in FORTRAN than in Python to achieve similar execution times
for large data sizes. The comparison of program run times and lines of
code, which can be roughly translated into development effort, shows
that Python can actually be faster than FORTRAN under many circumstances
typically found in real life.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Muller</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/python-is-faster-than-fortran.html</guid></item><item><title>Python web applications in multihost, low latency environments</title><link>https://pyvideo.org/europython-2012/python-web-applications-in-multihost-low-latency.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] P Schon - 5 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating low-level truncated WSGI frameworks to have lightweight
skeleton Sharing state between nodes, stateless nodes, H+V scalability
Background worker/writer processes to prepare and cache data Customizing
Apache+mod-wsgi, running specialised daemons with mod-wsgi Realtime data
updates via SOAP, RPC, AJAX, REST Goal of the talk is to show ways, how
to develop and run python web applications, that responds as fast as
possible Audience should know basics of HTTP, WSGI, python web
frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">P Schon</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/python-web-applications-in-multihost-low-latency.html</guid></item><item><title>Reproducible installation of applications using zc.buildout</title><link>https://pyvideo.org/europython-2012/reproducible-installation-of-applications-using-z.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] T Lotze- 5 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;zc.buildout is a tool to install and configure applications. An
application may consist of multiple parts and include multiple programs
and processes. Both installation and configuration of the application as
a whole are controlled by a configuration file which makes it possible
to reproduce them exactly at a later point in time or on a different
host. zc.buildout is extensible so it may be used to install application
parts with nearly arbitrary individual requirements. The talk introduces
zc.buildout, gives an overview of its possibilities as well as the major
third-party extensions and demonstrates the system by means of a case
study.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">T Lotze</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/reproducible-installation-of-applications-using-z.html</guid></item><item><title>Scegliere con saggezza il proprio WSGI server</title><link>https://pyvideo.org/europython-2012/scegliere-con-saggezza-il-proprio-wsgi-server.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Roberto De Ioris - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il mondo dei WSGI server e’ costellato di miti e leggende. La maggior
parte degli utenti (soprattutto quelli alle prime armi) tende a
sceglierli in base a fattori poco rilevanti o facendosi indirizzare da
analisi completamente errate. Il talk descrivera’ cosa e’ un WSGI
server, quali sono le scelte disponibili nel mondo opensource e come
scegliere il prodotto piu’ adatto alle proprie esigenze&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/scegliere-con-saggezza-il-proprio-wsgi-server.html</guid></item><item><title>Some Experiences with Python-for-Android (Py4A)</title><link>https://pyvideo.org/europython-2012/some-experiences-with-python-for-android-py4a.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Nik Klever - 5 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will talk about some experiences about the API of the Scripting Layer
for Android (SL4A) which is included in the Python-for-Android Package.
The simplicity of the SL4A API lets students code mobile Python programs
in a quick and easy way. Some properties of the Android GUI and the
underlying Linux are discussed using an GPS tracking application and
some standard Python applications like the Web Application Framework
Web2py. This talk is intended for beginners who have some experience
with Python but none with Android and the Py4A library. It’s not going
into details, but more on how easy it was, porting Python code on
Android and using especially the Android GUI with the Scripting Layer
for Android (SL4A).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nik Klever</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/some-experiences-with-python-for-android-py4a.html</guid></item><item><title>sys._current_frames(): take real-time X-rays of your software for fun and performance</title><link>https://pyvideo.org/europython-2012/sys_current_frames-take-real-time-x-rays-of-y.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Leonardo Almeida - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Profiling is hard. Trying to understand what is making your system slow
can be very frustrating. Specially when it happens only when your
clients are looking, but not you. Python comes with elaborate profiling
tools, but understanding the output of profile/cProfile can be a
daunting task, specially on complex frameworks, and these modules might
be impractical in a production environment where their performance toll
can make the system unusable. But Python is a very reflexive language,
allowing extensive investigation of its own state during runtime, and
one of its lesser known tools is the sys.&lt;em&gt;current&lt;/em&gt;frames() function.
It can be used to take an X-ray of what all the threads in your running
Python program are doing. It can also be used for a kind of
“statistical” profiling, with little impact on your running system. In
this talk we’ll investigate how this function can be used to tell what
your program is doing, exactly at the moment when it is misbehaving.
We’ll learn how looking at a series of tracebacks, instead of a bunch of
calling statistics, can help zooming quickly into code hot spots. We’ll
also show some case studies of real world server-side slowdowns that
were solved by the use of this technique which were caused by complex
interactions of different components, including a case where a serious
performance issue was diagnosed in a production deployment of ERP5 in a
corporate client of Nexedi’s.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Almeida</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/sys_current_frames-take-real-time-x-rays-of-y.html</guid></item><item><title>The integrator's guide to duct-taping</title><link>https://pyvideo.org/europython-2012/the-integrators-guide-to-duct-taping.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Deponti - 5 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Duct-taping” different systems together is a common task, and is
generally regarded as “mostly harmless”. However, “duct-taping” hides
much more pitfalls than a cursory examination might reveal, especially
when the constraints outside the developer’s control are many. In this
talk, a classification of the different integration scenarios is
presented, along with methodologies to identify them and asses their
complexity: those hiding the most dangerous pitfalls will be examined in
detail, and methodologies and best practices to avoid them will be
exposed, with a special care put into considerations about security and
scalability.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S Deponti</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/the-integrators-guide-to-duct-taping.html</guid></item><item><title>Twisted tutorial part 1</title><link>https://pyvideo.org/europython-2012/twisted-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Thorne - 5 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twisted is one of the best asynchronous network programming frameworks
out there, and can help you build cool stuff very easily, once you
understand the core design. Unfortunately, Twisted is also a huge
framework and can be very daunting for beginners to approach. This
training session aims to help people with little or no asynchronous
programming experience understand both Twisted and asynchronous
programming. The plan is to cover core asynchronous topics, the Twisted
way, and as many practical applications as we can cover, including web
services, IPC, GUI applications etc. The audience should be competent in
core Python constructs. No previous asynchronous or threading
programming experience required. This is a repeat of the popular
EuroPython 2011 Twisted Tutorial, improved after feedback.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S Thorne</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/twisted-tutorial-part-1.html</guid></item><item><title>Twisted tutorial part 2</title><link>https://pyvideo.org/europython-2012/twisted-tutorial-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Thorne - 5 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twisted is one of the best asynchronous network programming frameworks
out there, and can help you build cool stuff very easily, once you
understand the core design. Unfortunately, Twisted is also a huge
framework and can be very daunting for beginners to approach. This
training session aims to help people with little or no asynchronous
programming experience understand both Twisted and asynchronous
programming. The plan is to cover core asynchronous topics, the Twisted
way, and as many practical applications as we can cover, including web
services, IPC, GUI applications etc. The audience should be competent in
core Python constructs. No previous asynchronous or threading
programming experience required. This is a repeat of the popular
EuroPython 2011 Twisted Tutorial, improved after feedback.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S Thorne</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/twisted-tutorial-part-2.html</guid></item><item><title>Usiamo la api di uWSGI per scrivere applicazioni meno noiose</title><link>https://pyvideo.org/europython-2012/usiamo-la-api-di-uwsgi-per-scrivere-applicazioni.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Roberto De Ioris - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;uWSGI oltre a fornire un ambiente per eseguire le vostre applicazioni
python/WSGI, offre una serie di funzionalita’ che estendono le
possibilita’ dei vostri progetti. La api di uWSGI esporta funzioni per
gestire il tempo, i task asincroni, il monitoraggio dei file e tante
altre robe divertenti che vi eviteranno di istallare tonnellate di
grassi demoni o dire di “no” al cliente. Il talk mostrera’ vari utilizzi
della api (in ordine di complessita’) e qualcuna delle nuove features in
sviluppo&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/usiamo-la-api-di-uwsgi-per-scrivere-applicazioni.html</guid></item><item><title>Using sockets in Python</title><link>https://pyvideo.org/europython-2012/using-sockets-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] F Buynooghe - 5 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sockets are a fundamental abstraction operating systems provide to
expose networking operations. Initially they look like a fairly straight
forward interface but they hide a surprising amount of complexity. Many
protocol libraries hide sockets away from the developer but it can still
be useful to know the sockets themselves. Other times directly using
sockets is just a better or simpler option. This talk will cover
practical socket programming in python, concentrating on TCP and UDP
over IP (v4 &amp;amp; v6) the basic APIs of address resolution and using sockets
will be covered. Common patterns and pitfalls will be pointed out which
should enable to you to write robust socket code with the help of tools
like StringIO and memoryview. After the basics python’s higher level
abstractions like create_connection(), .makefile() and the io module
are covered, explaining when and how these can make life easier. Finally
a quick look at how non-blocking sockets can be used and how libraries
like asyncore/asynchat, twisted, eventlet and gevent all approach
non-blocking I/O in their own way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">F Buynooghe</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/using-sockets-in-python.html</guid></item><item><title>Big a little i (practical artificial intelligence in python)</title><link>https://pyvideo.org/europython-2012/big-a-little-i-practical-artificial-intelligence.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] T Mawushe - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;These days it is difficult for software to meet users’ expectations to
behave intelligently. When a program displays a lack of even the most
basic awareness of context it is jarring. At the same time organisations
are seeking to gain a competitive advantage through software that
behaves adaptively based on the information at hand. Solving these
problems is a challenge for today’s developers. There is general
agreement among seasoned developers that having a good understanding of
basic computer science data structures and algorithms is essential. That
said there is one sub-section of algorithms that is underused by most
developers, the algorithms that fall under the general rubric of
Artificial Intelligence. This talk aims to remedy that by providing a
quick refresher course on basic AI algorithms using Python. This talk is
not about building thinking machines, but rather about creating software
that users won’t think is stupid. Basic AI techniques such as Constraint
Propagation and Identification Trees, can really help developers along
the road to smarter software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">T Mawushe</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/big-a-little-i-practical-artificial-intelligence.html</guid></item><item><title>Building C++ APIs on Python</title><link>https://pyvideo.org/europython-2012/building-c-apis-on-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Bingham - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has great support for interfacing with C/C++ code, and this has
been used to great advantage by exposing many C/C++ libraries as Python
modules. In this talk, I will reverse the equation. I will show you how
you can - and why you might want to - build C++ APIs on top of Python
modules and use them directly from your C++ programs. The topics will
include: Conversion of types across the language boundary.
Implementation of C++ idioms (e.g. the begin()/end() iterator API) on
top of Python idioms. Python runtime management: initialization, module
loading, etc. Working with the “impedance mismatches” between the
languages (e.g. duck-typing vs. static typing) I will also discuss the
reasons why C++ APIs on Python code represent a very useful and often
powerful technique. The reasons range from simple pragmatism (you want
to use an existing Python module in an existing C++ program) to
productivity (writing Python code plus a C++ wrapper can be easier and
faster than writing pure C++.) link -
&lt;a class="reference external" href="https://docs.google.com/presentation/d%20/1hx_59DMQm6ZlI3Jz-LX-DZ4m5LVLpGcSlk1Dq1PiELI/edit"&gt;https://docs.google.com/presentation/d /1hx_59DMQm6ZlI3Jz-LX-
DZ4m5LVLpGcSlk1Dq1PiELI/edit&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Bingham</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/building-c-apis-on-python.html</guid></item><item><title>Camelot 101</title><link>https://pyvideo.org/europython-2012/camelot-101.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] J Dierckx A Cuni - 4 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot , as seen on EuroPython 2010 and 2011 is a framework for
developing desktop database applications at warp speed. It is to desktop
applications what Django is to web applications. Some see it as a
replacement for MS Access, but its tight integration with SQLAlchemy
enables a vast amount of more advanced features and possibilities. This
tutorial style course will enable you to get started with your own
Camelot project. We will tackle the hurdles met when going through the
lifecycle of a desktop application First Example : We start our little
Camelot project, have a look at the concepts and terminology used within
Camelot. We go through the different parts of the application and look
at the possibilities to customize them. Declarative Models and Views :
Then we move on by defining a relational model and use introspection
together with a declarative definition of our view to generate table and
form views. We look at the various options that can be used to create
and reuse form and table definitions. Actions and Reports : Next we’ll
dive into the details of actions the user can trigger, we discuss and
experiment with the standard actions Camelot offers. One of those
actions can be the generation of a nicely formatted Word document.
Advanced Model Definition : Once an application grows, more advanced
model definition is needed. We will try out some advanced features of
SQLAlchemy and see how they interact with the graphical interface. Fine
tuning of the GUI : Here we have a look at how Qt’s model-view-delegate
framework works and how it is used by Camelot. This will enable us to
fully customize the graphical interface to our needs. Deployment and
Users : The last step of the development process is getting the
application to the users. We will discuss the deployment options and
list the things to be aware of when submitting an application to its
users. Q &amp;amp; A : Throw all Camelot questions you have in the group and try
to resolve them together.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Cuni</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/camelot-101.html</guid></item><item><title>Clone detection in python</title><link>https://pyvideo.org/europython-2012/clone-detection-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] V Maggio - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The clone detection is a longstanding and very active research area in
the field of Software Maintenance aimed at identifying duplications in
source code. The presence of clones may affect maintenance activities.
For example, errors in the “original” fragment of code have to be fixed
in every clone. To make things worse, code clones are usually not
documented and so their location in the source code is not known. In
case of small-size software systems the clone detection may be manually
performed, but on large software systems it can be accomplished only by
means of automatic techniques. In this talk an approach that exploits
structural (i.e., AST) and lexical information of the code (e.g., name
of methods, variables) for the identification of clones will be
presented. The main innovation of such approach is represented by the
adoption of a Machine Learning technique based on (Tree) Kernel
functions. Some insights on mathematical properties of these
Kernel-based method along with its corresponding (efficient) Python
implementation (Numpy, Scipy) will be presented. Afterwards the talk
will be focused on the explanation of some detection results gathered on
well-known Python systems (Eric, Plone, networkx, Zope), compared with
other non-Python ones (Eclipse- Jdtcore, JHotDraw). The aim of this part
will be to analyze what are the Python features that could possibly
avoid (or allow) duplications w.r.t. other OO languages. Some snippets
for analyzing the Python code “by itself” will be also presented,
emphasizing the powerful Python built-in reflection capabilities,
extremely useful in this specific code analysis task. Basic maths skill
and basic knowledge of the Python language are the only suggested
prerequisites for the talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/clone-detection-in-python.html</guid></item><item><title>Developing Restful web apis with python, flask and mongodb</title><link>https://pyvideo.org/europython-2012/developing-restful-web-apis-with-python-flask-an.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] N Iarocci - 4 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last year we have been working on a full featured, Python
powered, RESTful Web API. We learned quite a few things on REST best
patterns, and we got a chance to put Python’s renowned web capabilities
under review, even releasing a couple Open Source projects in the
process. In my talk I will share what we learned. We will consider
‘pure’ REST API design and its many hurdles. We will look at what Python
as to offer in this field and finally, we will dig further down by
looking at some of the code we developed. Some of the
technologies/stacks I’ll cover are (in no particular order): Flask,
PyMongo, MongoDB, REST, JSON, XML, Heroku. Did you know? Like it or not,
there is going to be a REST API in your future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">N Iarocci</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/developing-restful-web-apis-with-python-flask-an.html</guid></item><item><title>Faster python programs through optimization part 2</title><link>https://pyvideo.org/europython-2012/faster-python-programs-through-optimization-part.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Mollerv- 4 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Objective This tutorial provides an overview of techniques to improve
the performance of Python programs. The focus is on concepts such as
profiling, diffrence of data structures and algorithms as well as a
selection of tools an libraries that help to speed up Python. Intended
Audience Python programmers who would like concepts to improve
performance. Audience Level Programmers with good Python knowledge.
Prerequisites Please bring your laptop with the operating system of your
choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we
need: RunSnakeRun (&lt;a class="reference external" href="http://www.vrplumber.com/programming/runsnakerun"&gt;http://www.vrplumber.com/programming
/runsnakerun&lt;/a&gt;)
Guppy_PE framework (&lt;a class="reference external" href="http://guppy-pe.sourceforge.net"&gt;http://guppy-pe.sourceforge.net&lt;/a&gt;) (&amp;lt;= Python 2.6 )
lineprofiler
(&lt;a class="reference external" href="htt%20p://packages.python.org/line_profiler/"&gt;http://packages.python.org/line_profiler/&lt;/a&gt;)
pympler (&lt;a class="reference external" href="http://code.google.com/p/pympler/"&gt;http://code.google.com/p/pympler/&lt;/a&gt;) psyco
(&lt;a class="reference external" href="http://psyco.sourceforge.net"&gt;http://psyco.sourceforge.net&lt;/a&gt;, Python 2.6 only, version 1.5.2 or higher)
pypy (&lt;a class="reference external" href="http://pypy.org"&gt;http://pypy.org&lt;/a&gt;) and NumPy (&lt;a class="reference external" href="http://numpy.scipy.org"&gt;http://numpy.scipy.org&lt;/a&gt;, version 1.2 or
higher). Method This is a hands-on course. Students are strongly
encouraged to work along with the trainer at the interactive prompt.
There will be exercises the students need to do on their own. Experience
shows that this active involvement is essential for an effective
learning. Outline How fast is fast enough? Optimization guidelines
Premature optimization Optimization rules Seven steps for incremental
optimization Optimization strategy Measuring in stones Profiling CPU
usage Profiling memory usage Algorithms and Anti-patterns String
concatenation List and generator comprehensions The right data structure
Caching The example Testing speed Pure Python Meet Psyco, the JIT Using
PyPy NumPy for numeric arrays Using multiple CPUs with multiprocessing
Combination of optimization strategies Results of different example
implementations I taught this tutorial multiple times and will update
the content as I regularly do.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Mollerv</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/faster-python-programs-through-optimization-part.html</guid></item><item><title>Faster python programs through optimization part 1</title><link>https://pyvideo.org/europython-2012/faster-python-programs-through-optimization-part-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Mollerv- 4 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Objective This tutorial provides an overview of techniques to improve
the performance of Python programs. The focus is on concepts such as
profiling, diffrence of data structures and algorithms as well as a
selection of tools an libraries that help to speed up Python. Intended
Audience Python programmers who would like concepts to improve
performance. Audience Level Programmers with good Python knowledge.
Prerequisites Please bring your laptop with the operating system of your
choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we
need: RunSnakeRun (&lt;a class="reference external" href="http://www.vrplumber.com/programming/runsnakerun"&gt;http://www.vrplumber.com/programming
/runsnakerun&lt;/a&gt;)
Guppy_PE framework (&lt;a class="reference external" href="http://guppy-pe.sourceforge.net"&gt;http://guppy-pe.sourceforge.net&lt;/a&gt;) (&amp;lt;= Python 2.6 )
lineprofiler
(&lt;a class="reference external" href="htt%20p://packages.python.org/line_profiler/"&gt;http://packages.python.org/line_profiler/&lt;/a&gt;)
pympler (&lt;a class="reference external" href="http://code.google.com/p/pympler/"&gt;http://code.google.com/p/pympler/&lt;/a&gt;) psyco
(&lt;a class="reference external" href="http://psyco.sourceforge.net"&gt;http://psyco.sourceforge.net&lt;/a&gt;, Python 2.6 only, version 1.5.2 or higher)
pypy (&lt;a class="reference external" href="http://pypy.org"&gt;http://pypy.org&lt;/a&gt;) and NumPy (&lt;a class="reference external" href="http://numpy.scipy.org"&gt;http://numpy.scipy.org&lt;/a&gt;, version 1.2 or
higher). Method This is a hands-on course. Students are strongly
encouraged to work along with the trainer at the interactive prompt.
There will be exercises the students need to do on their own. Experience
shows that this active involvement is essential for an effective
learning. Outline How fast is fast enough? Optimization guidelines
Premature optimization Optimization rules Seven steps for incremental
optimization Optimization strategy Measuring in stones Profiling CPU
usage Profiling memory usage Algorithms and Anti-patterns String
concatenation List and generator comprehensions The right data structure
Caching The example Testing speed Pure Python Meet Psyco, the JIT Using
PyPy NumPy for numeric arrays Using multiple CPUs with multiprocessing
Combination of optimization strategies Results of different example
implementations I taught this tutorial multiple times and will update
the content as I regularly do.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Mollerv</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/faster-python-programs-through-optimization-part-0.html</guid></item><item><title>Google Apps loves Python?</title><link>https://pyvideo.org/europython-2012/google-apps-loves-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Simone Dalla - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Can we put a new appointment on our Google Calendar with Python script?
Yes, we can. Can we get the list of our Google Documents with Python
script? Yes, we can. Can we create filters and labels on our Gmail
account with Python script? Yes, we can. Can we add a web page to our
Google Site with Python script? Yes, we can. Can we add, delete, modify
users of our Goole Apps with Python script? Yes, we can. Can we
integrate our Python, Django projects with Google Apps? Yes, we can. Go
to show how Pyhton and Gdata library can afford to do and if Google Apps
really loves Python…&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Dalla</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/google-apps-loves-python.html</guid></item><item><title>Health for geeks: feel better, save money, live longer by being lazy</title><link>https://pyvideo.org/europython-2012/health-for-geeks-feel-better-save-money-live-l.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] N Larosa - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Take care of the most important thing, your psychophysical well-being,
and be efficient about it. You don’t need to be hungry (well, just a
little bit), do lots of exercise (well, just a little bit) and spend a
lot of time and money (well, just a little bit… uhm, there seems to be a
pattern :-) ). You just need to take care of your body using the same
thing that lets you program computers: your mind. No, the human body is
not “a machine”, as it’s often said: it’s much more complex than that.
Nonetheless, knowledge of a few facts, some guiding principles, and some
tech tools (we’re geeks after all, aren’t we? :-) ) can definitely
improve your life. Warning: this speaker is not a doctor, and this talk
is not medical advice. Get the advice of a qualified doctor/physician
before changing your diet and/or your physical regimen. Neither this
speaker nor the conference organization will be liable for any injuries
or illnesses you may incur by however applying the concepts discussed in
this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">N Larosa</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/health-for-geeks-feel-better-save-money-live-l.html</guid></item><item><title>Healthy webapps through continuous introspection</title><link>https://pyvideo.org/europython-2012/healthy-webapps-through-continuous-introspection.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Nicolas Venegas - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every application has its hotspots – small portions of code that consume
considerably more resources than all of the other code combined. Django
apps are no different. Some pages, invoked with the just the right, or
wrong input, can bring a server to its knees, hogging the CPU and taking
many seconds, or in extreme cases even minutes to render. By keeping
workers tied up, the whole system can then become slow to respond, or
collapse altogether. Many webservers have a crude built-in failsafe to
prevent this. They automatically kill workers that fail to complete
their requests in time. As a result, you may not fully appreciate, or
indeed realize at all that you are routinely serving 500 pages, denying
users access to your service, or leaving uncommitted database
transactions – possibly even slowly corrupting data. Workers killed by
force leave virtually no forensic traces and so even when issues are
suspected, it’s hard to pin them down. The cause behind these hotspots
can be poorly generated SQL queries from the ORM, an algorithm with
non-linear complexity, excessive disk or network IO, or lock contention
in the database – to name just a few. Oftentimes these problems escape a
developer’s attention, as dev and test environments simply don’t have
the dataset, level of concurrency or sheer size of the real thing. In
this talk we’ll address the challenges of tuning your Django app with
continuous automatic runtime inspection tools, including homegrown
Dogslow. We’ll uncover the pages that consume disproportionate amounts
of time and cycles to complete and the pages that get killed altogether.
We’ll discuss several ways to help you identify and eliminate the
hotspots, both passively through monitoring exclusively, as well as
actively by selectively interrupting workers before they get killed and
examine how to effectively interpret the automatically collected
forensic evidence.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Venegas</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/healthy-webapps-through-continuous-introspection.html</guid></item><item><title>Javascript for Pythonistas part 1</title><link>https://pyvideo.org/europython-2012/javascript-for-pythonistas-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] P Dopieralski - 4 JULY 2012 in &amp;quot;Track Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of AJAX and other client-side technologies many Python
programmers, web-applications increasingly involve large amounts of
JavaScript. Many of us find that, just to keep doing our job, we have
understand JavaScript better. This tutorial, which was also given at
EuroPython 2009, 2010 and 2011, provides an introduction to JavaScript
that emphasises the similarities and differences between Python and
JavaScript. It has a focus on the concepts underlying JavaScript, and in
particular the object model and the lack of built-in classes. It also
covers quite a few JavaScript gotchas and other traps for the unwary.
This course is suitable for those who are Beginners or better in Python.
Previous JavaScript knowledge is not required, but would helpful. This
course was prepared and previously delivered by Jonathan Fine. I was
assisting in the course in 2010 as a helper and worked a little on
improving the materials during the sprints. I intend to improve the
materials further and bring them up to date with recent developments in
the JavaScript world, and then deliver the tutorial, because Jonathan
will not be attending the conference this year.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">P Dopieralski</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/javascript-for-pythonistas-part-1.html</guid></item><item><title>Javascript for Pythonistas part 2</title><link>https://pyvideo.org/europython-2012/javascript-for-pythonistas-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] P Dopieralski - 4 JULY 2012 in &amp;quot;Track Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of AJAX and other client-side technologies many Python
programmers, web-applications increasingly involve large amounts of
JavaScript. Many of us find that, just to keep doing our job, we have
understand JavaScript better. This tutorial, which was also given at
EuroPython 2009, 2010 and 2011, provides an introduction to JavaScript
that emphasises the similarities and differences between Python and
JavaScript. It has a focus on the concepts underlying JavaScript, and in
particular the object model and the lack of built-in classes. It also
covers quite a few JavaScript gotchas and other traps for the unwary.
This course is suitable for those who are Beginners or better in Python.
Previous JavaScript knowledge is not required, but would helpful. This
course was prepared and previously delivered by Jonathan Fine. I was
assisting in the course in 2010 as a helper and worked a little on
improving the materials during the sprints. I intend to improve the
materials further and bring them up to date with recent developments in
the JavaScript world, and then deliver the tutorial, because Jonathan
will not be attending the conference this year.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">P Dopieralski</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/javascript-for-pythonistas-part-2.html</guid></item><item><title>La salute per i geek: stai meglio, risparmia, vivi a lungo tramite la pigrizia</title><link>https://pyvideo.org/europython-2012/la-salute-per-i-geek-stai-meglio-risparmia-viv.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Nicola Larosa - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prenditi cura della cosa piÃ¹ importante, il benessere psicofisico, e
fallo in modo efficiente. Non bisogna patire la fame (magari solo un
pochino), fare tanta ginnastica (magari solo un pochino) e impiegare
tanto tempo e soldi (magari solo un pochino… sembra di intravedere uno
schema di fondo :-) ). Occorre soltanto prendersi cura del proprio corpo
usando ciÃ² che ci permette di programmare i computer: la nostra mente.
No, il corpo umano non Ã¨ una “macchina”, come spesso si dice: Ã¨ molto
piÃ¹ complesso. Ciononostante, conoscere alcuni fatti, qualche principio
guida e alcuni strumenti tecnologici (dopo tutto siamo geek, no? :-) )
puÃ² decisamente migliorare la nostra vita. Attenzione: il relatore non
Ã¨ un medico, e questo talk non costituisce parere medico. Si consiglia
di ottenere il parere di un medico qualificato prima di apportare
cambiamenti alla propria dieta o alla propria
attivitÃ&amp;amp;nbsp_place_holder; fisica. NÃ¨ il relatore, nÃ¨
l’organizzazione della conferenza saranno responsabili di lesioni o
malattie derivanti dall’applicazione di concetti discussi in questo
talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Larosa</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/la-salute-per-i-geek-stai-meglio-risparmia-viv.html</guid></item><item><title>Lessons in Testing</title><link>https://pyvideo.org/europython-2012/lessons-in-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] David Cramer - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing may be one of the more difficult concepts to pick up in a
development cycle. With the complexities of large projects, and even
small projects, writing effective, automated tests can take many times
longer than writing the code and testing it by hand. This talk will
explore the various patterns of testing that DISQUS has implemented, and
iterated upon over the last two years. It will describe how testing has
been used to speed up the product lifecycle, improve stability through
automation, and the culture shift required to get there. Most
importantly, it will cover the practices that have been put in place
that have helped ease the burden of writing tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/lessons-in-testing.html</guid></item><item><title>Mongodb and Python part 1</title><link>https://pyvideo.org/europython-2012/mongodb-and-python-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] R Lawley - 4 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This intermediate-level class will teach you techniques using the
popular NoSQL database MongoDB, its driver PyMongo, and the
object-document mapper MongoEngine to write maintainable,
high-performance, and scalable applications. We will cover everything
you need to become an effective MongoEngine/MongoDB developer from basic
PyMongo queries to high-level object- document mapping setups in
MongoEngine.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ross Lawley</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/mongodb-and-python-part-1.html</guid></item><item><title>Mongodb and Python part 2</title><link>https://pyvideo.org/europython-2012/mongodb-and-python-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] R Lawley - 4 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This intermediate-level class will teach you techniques using the
popular NoSQL database MongoDB, its driver PyMongo, and the
object-document mapper MongoEngine to write maintainable,
high-performance, and scalable applications. We will cover everything
you need to become an effective MongoEngine/MongoDB developer from basic
PyMongo queries to high-level object- document mapping setups in
MongoEngine.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ross Lawley</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/mongodb-and-python-part-2.html</guid></item><item><title>Multi-document consistency with MongoDB</title><link>https://pyvideo.org/europython-2012/multi-document-consistency-with-mongodb.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Anders Hammarquist - 4 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working with MongoDB, especially if you are coming from (or
converting an application) the SQL world, you will probably miss the SQL
transaction, which gives you, among other things, atomic writes. MongoDB
only provides atomic writes to one document. We will show you how you
can implement multi-document writes that are, if all writers cooperate,
consistent across multiple documents and either writes all changes
completely or fail without writing any changes. Audience: People who are
looking at SQL alternatives, but still need some sort of
transaction-like consistency. Understanding of parallellism issues, race
conditions and deadlocks, may be helpful. MongoDB knowledge is not
needed. Slides online at: &lt;a class="reference external" href="http://www2.openend.se/~iko/ep2012/"&gt;http://www2.openend.se/~iko/ep2012/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Hammarquist</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/multi-document-consistency-with-mongodb.html</guid></item><item><title>Music Theory, Genetic Algorithms and Python</title><link>https://pyvideo.org/europython-2012/music-theory-genetic-algorithms-and-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Nicolas Tollervey - 4 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I’ll explain how a genetic algorithm written in Python solves musical
exercises used to train composers. I’ll also embarrass myself by
comparing the computer generated results with solutions by the composers
Johan Joseph Fux and Wolfgang Amadeus Mozart. The presented project is a
fun “brain break” based upon work I originally started at university. No
prior musical knowledge will be required as I intend to explain just
enough musical theory for the audience to understand the nature of the
problem (although I’ll assume familiarity with Python).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Tollervey</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/music-theory-genetic-algorithms-and-python.html</guid></item><item><title>Nuitka - the Python compiler</title><link>https://pyvideo.org/europython-2012/nuitka-the-python-compiler.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] K Haye - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With Nuitka, for the first time, there is a consequently executed
approach to statically translate the full language extent of Python,
with all its special cases, without introducing a new or reduced version
of Python. It is compiled, but with practically 100% compatibility.
Function dictionaries work, code objects exist, frame stack works,
exception tracebacks, eval, exec, closures, nested functions, meta
classes, etc. it’s all there, and behaves identical. First, I would like
to start out and explain how I came to write a Python compiler, why I
want it to be 100% compatible, and why I find deviations from Python
unacceptable and out of scope. Then I would like to describe where
difficulties were in the implementation, what Python constructs
surprised me, and where the mapping from Python to C++ left things to
desire. In this project, I learned a lot about Python, it wasn’t easy to
get the full CPython test suite to run. In doing that, I have learned
anecdotes and fine details of Python, that are normally hidden in daily
programming, but are still useful to know. Esp. the work on
re-formulating “with” statements, “assert”, “while&amp;quot;/&amp;quot;for” as generic
loops, etc. gives an interesting view on Python itself. And I would like
to present it, also for the insight it gives on Python. I will give an
overview over newly developed infrastructure, aiming for type inference
at compile time, and show existing stuff. I will try and explain, why I
hope to have picked the right approach in this domain. An interesting
side game, is the approach to use XML representations of the internal
node tree of Nuitka to discover regressions/changes in the optimizer.
Then I will also present a project road map, with the milestones for
Nuitka, and why I believe this is the right plan, and how Nuitka is
different from projects like “Cython” and “PyPy”. To round it up, I
would like to make a demonstration of Nuitka, and give an example for
how easy it should be to contribute. As this will be the first time,
Nuitka is introduced the PyCON EU (it was only shown on PyCON DE 2011 so
far). And to celebrate that, the current GPLv3 license will be lifted,
and replaced with Apache 2.0 license (ASF), which is entirely liberal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">K Haye</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/nuitka-the-python-compiler.html</guid></item><item><title>Obidire alla capra! TDD con Python i Selenium</title><link>https://pyvideo.org/europython-2012/obidire-alla-capra-tdd-con-python-i-selenium.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Harry Percival - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In breve: - Seguiremo il tutorial officiale di Django, pero con la
metodologia TDD - primo, i test! - Inclusi i test del browser stesso con
Selenium - Anche “unit test” dei model, views e forms di Django -
Discussioni della filosofia TDD: cosa testare, cosa non testare, come
testare… - l’Italiano del speaker non e garantito perfetto, pero
&lt;a class="reference external" href="http://harry.pythonanywhere.com/"&gt;http://harry.pythonanywhere.com/&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/hjwp%20/Test-Driven-Django-Tutorial"&gt;https://github.com/hjwp/Test-Driven-Django-Tutorial&lt;/a&gt;
“Test-Driven Django with Selenium” o “La capra di Test incontra il pony
di Django” Questo training sarÃ&amp;amp;nbsp_place_holder; particolarmente per
in principianti, o uno che vuol’ imparare un po di: Django Selenium TDD
(&amp;quot;Test-Driven-Development&amp;quot;) Per uno che conosce giÃ&amp;amp;nbsp_place_holder;
bene questi tre temi, non sarÃ&amp;amp;nbsp_place_holder; tanto utile. L’idea
e di seguire il tutorial officiale di Django, dunque
sarÃ&amp;amp;nbsp_place_holder; dal punto di visto dal principiante, pero a
ogni punto useremo la metodologia “TDD” - costruendo dei test prima dal
coding del sito. Non sara solo i “unit test”. Si comincia con i
“functional” test, usando Selenium, che permette da usare un vero
browser per testare le funzione del sito, dal punto di vista del
utilizzatore. Sento una domanda: PerchÃ© dovrÃ² ascoltare a lui? Son’
fortunato di avere iniziato la mia carriera con una compagnie di
fanatici del “Extreme Programming”, una metodologia che domanda un
devozione quasi-religiosa al test. La mia conversione non era facile,
posso dire che ho chiesto domande ad ogni turno, “perchÃ© fasciamo cosi,
perchÃ© non possiamo andare direttamente al coding” etc etc - e posso
dire che adesso son proprio convinto. Ho imparato degli migliori, e ho
tutta la passione di un neofita. Questo training
sarÃ&amp;amp;nbsp_place_holder; anche la prima volta che l’ho fatto in
Italiano, allora sarÃ&amp;amp;nbsp_place_holder; sicuramente emozionante.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harry Percival</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/obidire-alla-capra-tdd-con-python-i-selenium.html</guid></item><item><title>Practical guide to kill optimization, testing and other sw. project beasts</title><link>https://pyvideo.org/europython-2012/practical-guide-to-kill-optimization-testing-and.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Fabio Pliger - 4 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimization, testing, tunning and design in sw. project can be both
heaven or hell for a sw. development project. Python provides many tools
to deal with these topics but by theirselves they could not be enough.
The talk tries to expose techniques, self failures/success and practical
tips and hints to make the right choice at the right time. This talk
will expose optimization, testing, tunning patterns ( and other critical
topics ) of a python project and try to analyze the options python
provides ( such as packages, techiniques and patterns/anti-patterns ) to
deal with them. There is not one true way to deal with these topics and
the main goal of the talks is to provide practical examples/techniques
and create an active discussion with the public. Main discussion topics:
Testing ( modules and techniques ) Optimization and performance (
analysis of the problem, profiling and tuning techniques ) Debugging
Deployment and automation Python traps&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Pliger</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/practical-guide-to-kill-optimization-testing-and.html</guid></item><item><title>Pyrun - the one file python runtime environment</title><link>https://pyvideo.org/europython-2012/pyrun-the-one-file-python-runtime-environment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Lembuirg - 4 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing a simple to deploy Python run-time which can be used to
easily ship products based on Python, create custom private Python
environments and have Python readily available without having to install
it first. The talk will give a short introduction on what pyrun can
deliver, how it can be used and how to build it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Lembuirg</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/pyrun-the-one-file-python-runtime-environment.html</guid></item><item><title>Python + Qt + MySQL = Konga ERP</title><link>https://pyvideo.org/europython-2012/python-qt-mysql-konga-erp.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Fabrizio Toso - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L’obiettivo di questo talk è quello descrivere brevemente come in
azienda abbiamo utilizzato Python, QT, MySQL e altre tecnologie open
source per lo sviluppo di un moderno ERP italiano, Konga
&lt;a class="reference external" href="http://blog.konga.it/"&gt;http://blog.konga.it/&lt;/a&gt;. In particolare approfondiremo l’architettura del
programma client, scritto completamente in Python e vedremo come sia
possibile distribuire un’applicazione completa e cross-platform (Mac OS
X, Windows e Linux) identica - o quasi - alle applicazioni scritte con i
sistemi di sviluppo nativi. Particolare attenzione sarà dedicata
all’integrazione di QT tramite l’uso della libreria “slewlib” e alla
libreria utilizzata per la descrizione e la generazione dei report di
stampa.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabrizio Toso</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/python-qt-mysql-konga-erp.html</guid></item><item><title>Restfs the next generation cloud storage</title><link>https://pyvideo.org/europython-2012/restfs-the-next-generation-cloud-storage.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] F Manfredi F Mosca - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The RestFS is an experimental project to develop an open-source
distributed filesystem for large environments. It is designed to scale
up from a single server to thousand of nodes and delivering a high
availability storage system with special features for high i/o
performance and network optimization for work better in WAN environment.
The Restfs is pure-python, but several of the libraries that it depends
upon use C extensions (sometimes for speed, sometimes to interface to
pre-existing C libraries). The Project is on the beginning stage, with
some technology previews released. The main characteristics of the
RestFS are : - Scalability, no limits on storage and clients size - High
availability, no single point of failure and data replication -
Adaptative, load balancing and uniform distribution - High Performance,
parallel transfer, local cache consistency , data transfer by difference
- Flexible, S3 compatibility interface, dedicated library for
integration in web server and application layer This talk describes the
architecture, internals of RestFS and comparison among different free
software solutions. The session will discuss our experience in this
development and detailed information on performance and scalability
RestFS Introduction RestFS Website&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">F Manfredi</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/restfs-the-next-generation-cloud-storage.html</guid></item><item><title>Seamless integration of python and postgresql</title><link>https://pyvideo.org/europython-2012/seamless-integration-of-python-and-postgresql.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] H Krossing - 4 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presenting a better way of using PostgreSQL from python with Simple to
use way to avoid moving data back and forth to client for just for
processing while still maintaining your code in client code and getting
all the benefits of server-side programming with ease of Python. access
to data without writing SQL for simple usage while SQL is still
available where appropriate, like complex data analysis This is achieved
by the following: decorators which ship python code to be executed in
database, with potentially 100x speedup for some use cases direct
building of query plans bypassing SQL generation and parsing Some more
infrastructure is presented which is needed for using code-shipping in
more complex scenarios like django extra import hooks in server for
loading python modules from caller (client) extra import hooks for
importing modules from database loadatstartup modules for pl/python ways
to scale this type of application by sharding (a.k.a. horisontally
scaling) it using pl/proxy&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">H Krossing</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/seamless-integration-of-python-and-postgresql.html</guid></item><item><title>Spotify: Ask us anything</title><link>https://pyvideo.org/europython-2012/spotify-ask-us-anything.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Jyrki Pulliainen - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jyrki Pulliainen</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/spotify-ask-us-anything.html</guid></item><item><title>The story of stackless Python</title><link>https://pyvideo.org/europython-2012/the-story-of-stackless-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] C Tismet A Rigo - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk gives a good overview of the status of Stackless Python: Its
history from the beginning, its current status and its future
development to be expected. A discussion and comparison with similar
approaches like Greenlet, Eventlet and how they relate is also included.
Stackless Python 1.0 was started in 1998 as an implementation of true
continuations, with all implied complications. In 2002, Stackless 2.0
was born, a complete rewrite. Continuations were abandoned in favor of
the much easier to comprehend tasklets - one-shot continuations that
could resume their current state just once, like Coroutines. In 2004,
Stackless 3.0 was created, which merged the 2.0 features with a new
concept: so-called “Soft-Switching”, which made the Pickling of Program
State” possible. As a consequence, a few recent application make solely
use of Program State Pickling, which changes the purpose of Stackless
Python quite a bit. One example of this is the “Nagare Web Framework”
which will be shown in examples. In the light of the popularity of a
Stackless spin-off, called “Greenlet”, the concept of a new Stackless
branch will be depicted: Stackless, written as a pure extension module
on top of Greenlets, which includes State Pickling - a feature that
seemed to be impossible to implement without changing CPython. But the
impossible and ways to get around it was always a major topic in this
project, which is going to augment what Stackless on PyPy already can
do. Christian Tismer, creator of Stackless Python Perhaps with Armin
Rigo as a guest, talking about Stackless status in PyPy. Otherwise, I
will insert this myself. cheers – Chris&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Rigo</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/the-story-of-stackless-python.html</guid></item><item><title>Ask your BDFL</title><link>https://pyvideo.org/europython-2012/ask-your-bdfl.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Guido van Rossum - 2 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An open session where the BDFL will answer questions from attendees.
Questions must be submitted (and voted) through Google Moderator ; we
will ask the most popular questions to Guido during this session. Submit
your question now!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/ask-your-bdfl.html</guid></item><item><title>Becoming a better programmer</title><link>https://pyvideo.org/europython-2012/becoming-a-better-programmer.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Harald Massa - 3 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;so you have selected the best possible programming language; you learned
about object oriented design, functional paradigmas, test driven
development and the Structure and interpretation of computer programs.
What else can you do? Harald did research and experimented outside
computer sciences. What methods and substances are available to tune
your brain for programming? This talk will describe personal experiences
with various motivational, self discipline, learning and information
management techniques; substances and exercises to tune your brains
operating system. There will be expeditions into results from brain
research. A critical judgement, pointing out snake oil and stuff that
worked.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Massa</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/becoming-a-better-programmer.html</guid></item><item><title>Come "liberare" i dati catastali in formato CXF con GDAL/OGR e Proj4</title><link>https://pyvideo.org/europython-2012/come-liberare-i-dati-catastali-in-formato-cxf-c.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Alessandro Amici - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La buona notizia è che l’Agenzia del Territorio è in grado di fornire i
dati cartografici e catastali ufficiali su tutta Italia in formato
elettronico. La cattiva notizia è che tali dati sono distribuiti in vari
formati proprietari scarsamente e malamente supportati dai software GIS
di largo uso. In questa presentazione mostriamo come leggere, validare,
correggere e tradurre in formati standard (ad esempio shapefile) i dati
del catasto terreni e fabbricati in formato CXF usando il potente stack
di geoprocessing e format translation in Python. L’intero processo e
numerosi dei singoli passaggi sono completamente generici e possono
essere applicati alla lettura e traduzione di qualsiasi formato
geografico proprietario. B-Open ha recentemente rilasciato con licenza
Open Source bgeo.catasto, una parte della propria libreria di parser e
traduttori dai formati dell’Agenzia del Territorio. bgeo.catasto al
momento supporta la lettura e traduzione dei dati catastali in formato
CXF e dei dati censuari nei formati TER e FAB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/come-liberare-i-dati-catastali-in-formato-cxf-c.html</guid></item><item><title>Complex and social network analysis in Python</title><link>https://pyvideo.org/europython-2012/complex-and-social-network-analysis-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] E Franchi - 3 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A complex network is a network that has non trivial topological
properties, i.e., properties hinting the presence of elaborate
relationships among the actors, opposed to simple networks such as
regular lattices or random graphs. Examples of complex networks are most
social, technological or biological networks, such as the internet, the
web, a professional network, the nervous system of an animal or the
contact network of any social networking system. Network analysis has
many practical applications, e.g., ranking or grouping items on the
basis of their position in the network, and is also the basis of some
collective intelligence and data mining techniques. Recently network
analysis is also applied to security problems in the form of trust
networks. Along with the basic concepts, working Python code is
presented, both using existing network analysis Python tools and numeric
packages. The focus is mainly placed on code, which will be shown and
discussed together with the theory, with the idea that running code and
simulations are easier to understand that formal maths. Since complex
network datasets are typically huge, some high-level optimization
techniques are also discussed. Although formulas are kept at the
minimum, some maths skills are required along with basic knowledge of
the Python programming language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">E Franchi</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/complex-and-social-network-analysis-in-python.html</guid></item><item><title>Diving into Flask (head on)</title><link>https://pyvideo.org/europython-2012/diving-into-flask-head-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Andni Mishkovskyi - 3 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About the talk What is Flask? Is it any better than Django? Can I use
Flask on Google AppEngine? Fortunately, during the course of this talk I
will not have to answer any of these questions. This talk is a showcase
of our experience with using Flask to build flexible and scalable web
service and it focuses strongly on Flask and Flask extensions’
internals. Who should come to this talk Basically anybody who’s looking
to invest into learning Flask or already started using Flask. Even
though this talk focuses strongly on Flask-related topics, it also
raises important points relevant to any web development framework or
library. Abstract Introduction What we’re building Why we chose Flask
Flask RESTful APIs and Flask.route() Scaling Exploring Flask-Celery
Monitoring Celery logging: Oh, my! Scaling Celery Flask-SQLAlchemy
Migrations Sharding and master/slave setup Celery and SQLAlchemy:
unexpected issues Performance analysis Using werkzeug’s profiler
Integrating with statsd Investigating cache usage patterns Summary&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andni Mishkovskyi</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/diving-into-flask-head-on.html</guid></item><item><title>Esageriamo con uWSGI e Nginx</title><link>https://pyvideo.org/europython-2012/esageriamo-con-uwsgi-e-nginx.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Roberto De Ioris - 3 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Siamo tutti capaci di far girare una applicazione WSGI su un server
(indipendentemente da quale sia), ma che succede quando ne vogliamo
eseguire centinaia scritte da programmatori che non conosciamo (o che
conosciamo fin troppo bene e quindi non vorremmo avere sui nostri
server) ? uWSGI e’ un application server estremamente avanzato, usato
principalmente per l’esecuzione di applicazioni WSGI. Nginx e’ un
webserver estremamente performante e leggero. Il task mostrera’ come
usare entrambi per costruire una infrastruttura per il deployment di
applicazioni WSGI per voi, i vostri collaboratori e i vostri clienti,
tenendo i costi hardware (e umani) al minimo sindacale&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/esageriamo-con-uwsgi-e-nginx.html</guid></item><item><title>Further neck and amd shoulder massage training</title><link>https://pyvideo.org/europython-2012/further-neck-and-amd-shoulder-massage-training.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Rob Collins - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Collins</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/further-neck-and-amd-shoulder-massage-training.html</guid></item><item><title>Getting the logging module to do your bidding</title><link>https://pyvideo.org/europython-2012/getting-the-logging-module-to-do-your-bidding.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Sandford - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python logging module is a useful tool for getting all kinds of
information out of your program; everything from error notifications
through to debug information. The standard facilities are useful out of
the box, but, sometimes, you need a bit more. Not surprisingly, it turns
out that the logging module is designed to be extended. This
presentation shows some of the things you can do; things like gathering
statistics on message type, directing emails to different recipients
depending on severity, dynamic updating of attributes, and logging to a
database. The examples are based on the notification facilities in
Lokai. The talk covers: an overview of why I thought I needed the extra
features, a look at the logger structures that need to be changed, and
some actual code that does the job. I’m sure there are many different
ways of doing this. Some of the code might be obvious in retrospect, and
some might be surprising. Whatever the case, if you havn’t thought of
doing this before you might be encouraged to give it a go. And if you
have done it before you can always come and heckle.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">M Sandford</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/getting-the-logging-module-to-do-your-bidding.html</guid></item><item><title>Going International</title><link>https://pyvideo.org/europython-2012/going-international.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Bessas - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk targets developers who wish to publish applications to an
international audience and will discuss three topics that developers
have to deal with: handling Unicode, localizing the software with
gettext and handling time zones. First, the talk will address what
Unicode is and how to write applications that deal with Unicode
correctly. Then, the talk will discuss software localization using
gettext and will conclude with a discussion of time zone handling in
Python. No prerequisites are necessary.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Bessas</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/going-international.html</guid></item><item><title>Hands on with Pygame</title><link>https://pyvideo.org/europython-2012/hands-on-with-pygame.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] R Dopieralski - 3 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGame continues to be Python’s most popular 2D game library, even
though there is growing competition from more modern OpenGL-based
libraries. It is still an excellent way to learn how our favorite games
work internally and to write similar games ourselves. During this
tutorial I want to introduce the basics of using PyGame to create
interactive, animated graphical applications (such as games), and then
help the participants make their own start at a simple adventure game,
which they can later develop further into projects of their own. I want
to concentrate on commonly used techniques and patterns in game
development, which are useful no matter what library is used in the
implementation. In particular I will be discussing animations,
tile-based maps, collision detection, event systems, internal
representation of game state and different approaches to code
organisation and internal structure of games. I have previously created
a (much simpler) tutorial for creating a turn-based tile-based PyGame
game and a couple of games, such as Z-Day and Jelly . I will be using
the materials and experiences from those projects in the tutorial.
Please bring your laptop with Python 2.7 and PyGame installed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">R Dopieralski</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/hands-on-with-pygame.html</guid></item><item><title>How to bootstrap a startup using django</title><link>https://pyvideo.org/europython-2012/how-to-bootstrap-a-startup-using-django.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] J Leidel -P Wassibauer - 3 JULY 2012&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Based on our (Philipp Wassibauer and Jannis Leidel) experiences building
Gidsy.com this talk will give you valuable insight as to how your
infrastructure will evolve and how to set up the basic components
(Loadbalancer, Webservers, DB, Caching, Celery, CDN, …) of your site.
Outline: Basic project layout - How to handle different configurations
and package your project to make it easy to deploy and install. A basic
timeline of how your infrastructure needs will evolve - Starting from
the initial 1 server setup we will talk about how and when to scale out
your servers. Replicate production environments in development - We
developed a way to have all your services (Webserver, Celeryd, Solr,
Cache, Compass compiler, …) running using one management command.
Setting up Chef recipes to provision your servers. Dealing with cloud
based servers - Tips and tricks on how to manage your cloud based server
using tools like Instagrams ec2-ssh. Automating deploying to a bigger
infrastructure (5+ servers) - Once the infrastructure becomes larger the
deployments become more tedious. There are a few automation tools for
these scenarios like the Etsy Deployinator. Tips on performance - How to
find and remove performance bottlenecks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J Leidel</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/how-to-bootstrap-a-startup-using-django.html</guid></item><item><title>Juju - Service orchestration and deployment</title><link>https://pyvideo.org/europython-2012/juju-service-orchestration-and-deployment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] J Page - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Juju is a new opensource configuration management and tool for deploying
services into a cloud and data center environments. Juju provides a
higher level semantic to its users of service level management rather
than machine management. By rethinking this focus, Juju is able to
provide real reuse of service definitions in much the same way that
package management allows deployment and reuse of software bits in many
different context. Juju’s goal is to be the apt of the clouds. By
providing these higher level semantics to end users, juju aims to be a
preferred solution for deploying services to the cloud. Underneath the
hood, juju is written in python, but part of its beauty is you can write
service definitions in any language. Juju relies on zookeeper for
distributed coordination and state management of the managed machines,
and LXC for higher utilization of machines and minimal separation of
deployed services. It can deploy to physical machines as well as cloud
environments like AWS/EC2 and Openstack.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">J Page</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/juju-service-orchestration-and-deployment.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/europython-2012/lightning-talks-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] - 2 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/lightning-talks-0.html</guid><category>lightning talks</category></item><item><title>Method restrictions (abstract, final, @override etc.) and implementing them for Python</title><link>https://pyvideo.org/europython-2012/method-restrictions-abstract-final-override-e.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] P Szabo - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The earlier a bug is discovered, the cheaper it is to fix it. Method
restrictions (such as abstract, final and &amp;#64;Override) help the programmer
in discovering incompatibilities between a class and its subclass early
(i.e. at startup time for Python and at compile time for compiled
languages). Python doesn’t provide method restrictions out of the box.
To implement them, we take a deep dive to the realms of Python
metaprogramming (decorators, metaclasses, method wrappers, traceback
inspection and builtins). Lots of short and code examples will be
provided to show the building blocks and how we combine them. Slides:
&lt;a class="reference external" href="http://pts-mini-%20gpl.googlecode.com/svn/trunk/pobjects/ptsmethodrestrictions_2012-07-03.html"&gt;http://pts-mini-gpl.googlecode.com/svn/trunk/pobjects/ptsmethodrestri
ctions_2012-07-03.html&lt;/a&gt;
Source code download: &lt;a class="reference external" href="http://code.google.com/p/pts-mini-%20gpl/source/browse/#svn/trunk/pobjects"&gt;http://code.google.com/p/pts-mini-
gpl/source/browse/#svn/trunk/pobjects&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">P Szabo</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/method-restrictions-abstract-final-override-e.html</guid></item><item><title>Not the state of the Python union</title><link>https://pyvideo.org/europython-2012/not-the-state-of-the-python-union.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] G. van Rossum - 2 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Worried about the future of Python 3? Wondering when lambda will be
fixed? Angry about the GIL? Eager to get your package into the standard
library? In this keynote, Python’s BDFL will address these issues and
many others from his unique, personal perspective. Learn how not to be a
troll!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/not-the-state-of-the-python-union.html</guid></item><item><title>OpenERP 6.1, come progettare applicazioni business</title><link>https://pyvideo.org/europython-2012/openerp-61-come-progettare-applicazioni-busines.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Davide Corio - 3 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenERP 6.1 è uno dei più importanti free e opensource software scritti
in Python. Immergiamoci nel framework a scopriamo come progettare la
nostra applicazione. Durante la presentazione exploreremo gli strumenti
integrati a disposizione degli sviluppatori per la creazione di nuove
funzionalità, la progettazione di stampe o per dialogare con dispositivi
mobile e applicazioni di terze parti.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Corio</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/openerp-61-come-progettare-applicazioni-busines.html</guid></item><item><title>Openstack Overview - Operational Details of a large Python Project</title><link>https://pyvideo.org/europython-2012/openstack-overview-operational-details-of-a-lar.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Padraig Brady - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack is a large and relatively new platform for building IaaS
public and private clouds, which has attracted widespread backing from
many companies. Covered in the talk is: A summary of what OpenStack is
trying to achieve An overview of the structure of OpenStack services
Details of the multitude of python components used Deployment and
Packaging information&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Padraig Brady</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/openstack-overview-operational-details-of-a-lar.html</guid></item><item><title>Permission or forgiveness?</title><link>https://pyvideo.org/europython-2012/permission-or-forgiveness-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012 ] Alex Martelli - 2 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Grace Murray Hopper’s famous motto, “It’s easier to ask forgiveness than
permission”, has many useful applications – in Python, in concurrency,
in networking, as well of course as in real life. However, it’s not
universally valid. This talk explores both useful and damaging
applications of this principle. I start by introducing the motto “It’s
easier to ask forgiveness than permission” and the woman who used it,
Rear Admiral Grace Murray Hopper, also known as the “mother of Cobol”
and the author of the first ever programming-language compiler. I then
move on to the Python context, where the motto supports the proper usage
of exception-catching rather than preliminary checks; and the “rule that
proves the exception” introduced by abstract base classes. Expanding the
subject, I show how “optimistic concurrency” applies that motto (while
locking would “ask permission”, in essence, STM “asks forgiveness&amp;quot;), and
how collision-detection focused networking protocols have similarly
triumphed over more highly structured, “ask permission” ones like
token-ring. Moving to the fuzzier context of real life, I then show how
this daring approach does not work quite as well as in the technical
realm – except when applied correctly, in the right circumstances… and I
try to evince a general law describing what the right circumstances for
its application are, comparing and contrasting with the similar issue of
“do it right the first time” versus “launch and iterate” (and the
latter’s cognate “fail, but fail fast” principle).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/permission-or-forgiveness-0.html</guid></item><item><title>PostSQL - using PostgreSQL as a better NoSQL</title><link>https://pyvideo.org/europython-2012/postsql-using-postgresql-as-a-better-nosql.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] H Krosing - 3 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A short overview how PostgreSQL can be used for tasks that are currently
often delegated to heterogeneous bunch of data storage solutions
referred to by common name NoSQL. Covered topics from traditional NoSQL
area are: developer friendlyness, even for sloppy developers scalability
easy extensibility and maintainability And from SQL part partial ACID
(Atomicity, Consistency, Isolation, Durability) , general BASE
(basically available, soft state, eventually consistent) business rule
checking in database, hard to overlook even in case of multiple
applications using the same data&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">H Krosing</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/postsql-using-postgresql-as-a-better-nosql.html</guid></item><item><title>Programming mobile apps with python</title><link>https://pyvideo.org/europython-2012/programming-mobile-apps-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Andreas Schreiber - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apps for smartphones and tablet PCs are getting the most relevant kind
of software. The numbers of apps in app markets for Android, iOS and
Windows Phone simply explodes. Unfortunately, almost none of them are
developed with Python which is a bit of shame. This talk covers the
various mobile platforms and explains current solutions for programming
apps with Python. It shows todays problems as well as possibilities, so
that every listener can decide whether Python is already ready for his
mobile app project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/programming-mobile-apps-with-python.html</guid></item><item><title>Protocol specifications written in python</title><link>https://pyvideo.org/europython-2012/protocol-specifications-written-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] F Haard - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapidly updating the requirements and implementation of a
machine-to-machine communication protocol is hard in itself, and keeping
a protocol specification and documentation up-to-date is always a
burden, and sometimes becomes an impossibility. At Visual Units, when
this became a problem with the protocol between the embedded software
and the fleet management server, we changed the approach and specified
the protocol in Python. This allows us to use the specification directly
when generating and parsing messages, as well as making it possible to
generate protocol documentation, and source code for our Java (J2ME)
client software. We implemented everything from scratch, and found it
surprisingly easy to do without documentation and specifications
external to The Code. This talk will focus on lessons learned and
pitfalls found during the implementation of this solution, with code
examples from our current state of art as well as showcases of some of
the mistakes we made and the types of magic used in different iterations
- most notably metaclasses and the inspect and imp modules. It will
follow the evolution from the first (quite horrible) attempts, to our
current implementation. I will also discuss what has been gained by
adopting this solution and the tradeoffs that we have made. The intended
audience is developers and designers who work with and design protocols,
as well as developers with a general interest in code as specification.
This is not a presentation of a framework for use in any application
(although code is available), but an in-depth look at how far you can go
with custom-built tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">F Haard</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/protocol-specifications-written-in-python.html</guid></item><item><title>Pypedia: a python development environment on a wiki</title><link>https://pyvideo.org/europython-2012/pypedia-a-python-development-environment-on-a-wi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Kanterakis - 4 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we present PyPedia. PyPedia is an effort to host a Python
programming environment in a MediaWiki content management system. The
concept is similar to any wiki except that each article contains the
documentation, python source code and unit tests for a known and well
defined computational problem. Through an article, a user can edit the
source code, download it, execute it locally, in a remote computer
through SSH, or in Google App Engine (GAE). Moreover, through a python
package users can import PyPedia methods in their local python
environment. In the source code, a developer can simply call a function
or instantiate a class that is defined in another article. In every code
edit, the article’s unit-tests are evaluated in GAE before saving. A
special parameters section allows editors to build an HTML form within
the article that help fellow users to execute the method as a simple
online service. Articles are divided in two categories: User and Main.
In User articles, the creator of the article manages the edit privileges
of each section. Any non-deliberately malicious content is allowed. Main
articles are selected from the pool of User articles that exhibit highly
qualitative content and can be edited only by trusted users. All content
is under the simplified BSD license. The vision of this project is to
create an encyclopedia of documented, executable and verifiable python
implementation of common algorithms or computational problems through
the development of a vivid community. Specialized or user aware content
is also encouraged in the User namespace. The source code of PyPedia is
available under the GPL v.3 license. Availability:
&lt;a class="reference external" href="http://www.pypedia.com"&gt;http://www.pypedia.com&lt;/a&gt; Video demonstration:
&lt;a class="reference external" href="https://www.youtube%20.com/watch?v=25jMEivICD8"&gt;https://www.youtube.com/watch?v=25jMEivICD8&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Kanterakis</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/pypedia-a-python-development-environment-on-a-wi.html</guid></item><item><title>Pypy: current status and gil-less future</title><link>https://pyvideo.org/europython-2012/pypy-current-status-and-gil-less-future.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A. Rigo, A. Cuni, M. Fijalkowski - 2 JULY 2012 in
&amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the first part of the keynote we will present the current status of
PyPy, with a particular focus on what happened in the last year. We will
give a brief overview of the current speed and the on-going development
efforts. The second part of the keynote is about one particular feature
whose development is in progress in PyPy: Automatic Mutual Exclusion.
What it is needs some explanation: The GIL, or Global Interpreter Lock,
is a well-known issue for Python programmers that want to have a single
program using the multiple cores of today’s machines. This keynote is
not about writing a GIL-less Python interpreter; although hard, this has
been done before, notably in Jython. The real issue is that writing each
and every multi-threaded Python programs is hard too. The threading
module offers locks in several variants, conditions, events, semaphores…
But using them correctly without missing one case is difficult,
impossible to seriously test, often impossible to retrofit into existing
programs, and arguably doesn’t scale. (Other solutions like the
multiprocessing module are at best workarounds, suffering some of the
same issues plus their own ones.) Instead, this keynote is about an
alternate solution: a minimal thread-less API that lets programs use
multiple cores, without worrying about races. This may sound impossible,
but is in fact similar to the API simplification of using a garbage
collected language over an explicitly managed one — what is not minimal
is “just” the internal implementation of that API. I will explain how it
can actually be done using Automatic Mutual Exclusion, a technique based
on Transactional Memory. I will give preliminary results on a modified
version of the PyPy Python interpreter that show that it can actually
work. I will also explain how the API is used, e.g. in a modified
Twisted reactor that gives multi-core capability to any existing,
non-thread-based Twisted program.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Cuni</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/pypy-current-status-and-gil-less-future.html</guid></item><item><title>PyPy JIT under the hood</title><link>https://pyvideo.org/europython-2012/pypy-jit-under-the-hood.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Rigo - A Cuni - 4 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is probably the fastest Python implementation around, thanks to its
automatically generated JIT compiler. This talk explains how the JIT
works internally: in particular, it shows all the intermediate steps
which lead to the compilation of the Python source into fast machine
code, and how to use the right tools to inspect the output of the JIT
compiler. By examining the internals of the JIT, you will also learn why
some code is more “JIT friendly” than other, and how to write programs
which exploits its full potential.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Cuni</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/pypy-jit-under-the-hood.html</guid></item><item><title>Python white magic</title><link>https://pyvideo.org/europython-2012/python-white-magic.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Antonio Cuni - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a powerful language. Beginners appreciate its surface of
simplicity and ease to use, where (almost) everything “just works” (TM)
as expected. However, under the hood, there is a whole world of rules
and layers which can be (ab)used by experienced programmers to tweak the
language in unexpected ways. Often, these techniques are labeled as
“hacks” or “black magic”, to indicate that they should not used in
production or that you should not look at it unless you are “initiated”
to some not better specified sorcery. However, if used with care and in
the right places, these techniques can lead to better, faster and/or
more readable code, or can be extremely useful during debugging, and
thus deserve the definition of “white magic” which programmers can use
to improve their code. Moreover, looking at how they are implemented is
a good way to learn about some of the deep corners of the language. This
talk presents some of these advanced techniques which I have seen in use
in real code, e.g. in PyPy or pdb++. Including, but not limited to:
creating new functions by reusing existing code objects, instantiating
multiple copies of the same module, playing with metaclasses in various
ways, changing the &lt;strong&gt;class&lt;/strong&gt; of an object on the fly to get specialized
behavior, automatically entering the debugger when a certain event
occur, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/python-white-magic.html</guid></item><item><title>Python without filesystem</title><link>https://pyvideo.org/europython-2012/python-without-filesystem.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Arnaud Fontaine - 3 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recent cloud architecture are heavily based on key-value storage
databases rather than distributed filesystems. While the data itself is
usually stored in scalable database, the source code is mainly kept on
the filesystem. However, having the source code on filesystem raises a
lot of issues for cloud applications and more generally for
transactional web applications supposed to be deployed on a large number
of servers: Everytime the source code is modified, it has to be
synchronized on all the nodes somehow and the application server must be
restarted, therefore implying downtime or inconsistency. Usually, the
developer cannot directly modify the source code as this task is left to
the administrator. This talk will show how source code, including
modules and their classes, can be migrated away from filesystem, thanks
to import hooks, meta classes, reflection and metaprogramming provided
by Python, and the different challenges involved: Technical: modules and
classes must be loaded and reset while carefully considering concurrency
and database issues and ensuring that the system will stay usable
whatever happens and without breaking existing class instances. Also,
developers must be efficient with the new system, including convenient
source code edition and meaningful backtraces. Performance: having
dynamic modules and classes involved a performance tradeoff which should
be kept to the minimum. Security: as the source code is dynamically
loaded from the database, extra care must be taken care of compared to
filesystem source code where the source code is never supposed to change
once the applications has been started. In order to give practical
examples of how this migration can be achieved, two examples will be
studied and explain thoroughly, based on the experience I have acquired
through the implementation for ERP5 I have worked on during the past
year: First, through a basic WSGI application based on a lightweight web
application framework to explain the basics behind having Python source
code available in a transactional key-value storage database and more
precisely how modules and their classes can be dynamically loaded and
reset on-demand upon modifications while keeping good performances. This
usually involved specific features from the database point of view which
will also be discussed. Secondly, through ERP5 which is mainly known as
an open source ERP based on Zope and thus ZODB, and as such it provides
features an ERP typically provides, but it is also used for a wide range
of other purposes. Therefore, this will give a more real-world example
on how this migration has been performed on a complex web application
where 90% of the code is going to be moved away from filesystem into the
ZODB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Arnaud Fontaine</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/python-without-filesystem.html</guid></item><item><title>Recruiting session</title><link>https://pyvideo.org/europython-2012/recruiting-session.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] - 2 JULY 2012 &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/recruiting-session.html</guid></item><item><title>Snakes and onions: Python developers and Tor</title><link>https://pyvideo.org/europython-2012/snakes-and-onions-python-developers-and-tor.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Runa Sandvik - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Tor Project develops and maintains Tor, a free and open-source
software that allows users to browse the web anonymously and securely.
In addition, the Tor Project also develops and maintains a number of
Python applications related to Tor, such as a command-line monitor,
censorship scanner, network simulator, controller library, and bridge
distributor. In this talk, Runa A. Sandvik will present the Tor Project,
and talk about Tor and how it works. She will also introduce some of the
Python projects currently under development, and explain how you can get
involved and contribute with code, testing, and documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Runa Sandvik</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/snakes-and-onions-python-developers-and-tor.html</guid></item><item><title>Spotify, pipelining your music</title><link>https://pyvideo.org/europython-2012/spotify-pipelining-your-music.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Jyrki Pulliainen - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spotify’s current catalog contains 15 million songs. Original storage of
audio and metadata is over 500 terabytes and we’re transcoding 500 000
new audio streams a day. At it’s best the system can make an album
playable just few minutes after it’s delivery. This talk is about
building the music pipeline, all the way from the labels, who deliver
music and metadata XML to our system, to the clients. Problems here are
the concurrency, massive amount of data, enriching the metadata to
provide better quality and to actually deliver 100 gigabytes of indexes
daily.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jyrki Pulliainen</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/spotify-pipelining-your-music.html</guid></item><item><title>Sviluppare una Restful web API con Python, Flask e MongoDB</title><link>https://pyvideo.org/europython-2012/sviluppare-una-restful-web-api-con-python-flask.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Nicola Tarocci - 3 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nel corso dell’ultimo anno abbiamo lavorato all’implementazione Python
di una RESTful Web API completa. Abbiamo imparato un bel po’ di cose sui
best pattern REST e, naturalmente, abbiamo messo alla prova le ben note
capacitÃ&amp;amp;nbsp_place_holder; web di Python, rilasciando nel frattempo
un paio di progetti Open Source. Nel corso del mio intervento
condividerÃ² quel che abbiamo imparato. Prenderemo in considerazione il
problematico design di una REST API ‘pura’. Vedremo che cosa offre
Python in questo campo e scenderemo infine nel dettaglio, dando una
occhiata al codice che abbiamo scritto. Alcune tecnologie/stack che
tratteremo sono (in nessun ordine particolare): Flask, PyMongo, MongoDB,
REST, JSON, XML, Heroku. Lo sapevi? Che ti piaccia o no, c’Ã¨ una REST
API nel tuo futuro.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Tarocci</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/sviluppare-una-restful-web-api-con-python-flask.html</guid></item><item><title>Tornado in Depth</title><link>https://pyvideo.org/europython-2012/tornado-in-depth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] O Vilaplana - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tornado is a non-blocking light-weight web server and framework. There’s
been many introductory talks about it, and it’s time to look deeper into
it: not just what Tornado does, but how it does it and what can we learn
from it when designing our own concurrent systems. We’ll cover each
topic in two parts: first we’ll see how to use a certain feature in our
applications; then, we’ll dig into Tornado’s source code to see how it
really works. How much time we’ll spend in the “how to use” will depend
on the audience’s knowledge of Tornado. Getting Started: quickly get a
simple Tornado application up and running. We’ll keep digging into,
changing and poking this Application for most of the talk. An
Application Listens: what an Application is, how does Tornado start it
and how does it process its requests. Application and IOLoop: we’ll look
at how the IOLoop receives the connections from the users and passes
them on to the Applications. Scheduled Tasks: we’ll see how to schedule
tasks and how the IOLoop will run them. Generators: we’ll learn to use
generators to handle the responses of our asynchronous calls, and how
they work with the IOLoop. Websockets: how to use them and how they
work. IOStream: how do Tornado’s non- blocking sockets work. Database:
how to use non-blocking sockets to connect to a MySQL or MongoDB
database.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">O Vilaplana</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/tornado-in-depth.html</guid></item><item><title>What i learned from big web app deployments</title><link>https://pyvideo.org/europython-2012/what-i-learned-from-big-web-app-deployments.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Christian Theune - 3 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The requirements and expectations towards deployment and operations are
advancing at an incredible pace. Especially the DevOps community
encourages and demonstrates how system administrators can leverage
methods from other areas of expertise to achieve classical goals: fewer
outages, more flexibility, lower cost, higher security standards,
improved reproducability and overall increased quality. The hosting of
complex, traffic-intensive web applications nowadays requires a solid
and flexible infrastructure: you need to take care of all the homework
first before going into the nitty gritty details of your specific
application. My talk shall demonstrate the aspects we meet on the
infrastructure and service level when deploying and operating complex
services. I’ll show-case how we approach the problems we face to prepare
for an ever-improving future. As many people and companies are
experimenting with different approaches today, I’d love to spawn a
separate discussion, maybe in an open space, to talk about why you do
something different from us and what your experiences are. The topics
will specifically include: infrastructure versus service, data center
operations, make-or-buy, automation, virtualisation, monitoring, help
desk, SLAs, deployment checklist, staging, secrets, HTTP/S termination,
load balancing, reporting As you can see, the talk’s topics are mainly
focused on methods and lines of thought. However, if you’re interest in
tools - I will also mention the following on a varying level of detail:
puppet,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
haproxy, nginx, apache, varnish, supervisor, cron, Linux, DELL, ProCurve, KVM, Nagios, RT, fabric, zc.buildout, batou
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Theune</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/what-i-learned-from-big-web-app-deployments.html</guid></item><item><title>EuroPython 2012 - Track Big Mac</title><link>https://pyvideo.org/europython-2012/europython-2012-track-big-mac.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;None&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-03:europython-2012/europython-2012-track-big-mac.html</guid></item></channel></rss>