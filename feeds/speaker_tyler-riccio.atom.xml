<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Tyler Riccio</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tyler-riccio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-07-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Why Python Loops Are "Slow": A Gentle Introduction to Interpretation, Bytecode, and Fast Code</title><link href="https://pyvideo.org/pyohio-2025/why-python-loops-are-slow-a-gentle-introduction-to-interpretation-bytecode-and-fast-code.html" rel="alternate"></link><published>2025-07-27T00:00:00+00:00</published><updated>2025-07-27T00:00:00+00:00</updated><author><name>Tyler Riccio</name></author><id>tag:pyvideo.org,2025-07-27:/pyohio-2025/why-python-loops-are-slow-a-gentle-introduction-to-interpretation-bytecode-and-fast-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python loops are &amp;quot;slow&amp;quot;, is a phrase every python programmer has heard.
For better or worse, it is partially true. This talk breaks down how
Python executes code and why that creates overhead, especially in tight
loops. I'll also explore how tools like NumPy, SIMD, and JIT compilation
achieve â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python loops are &amp;quot;slow&amp;quot;, is a phrase every python programmer has heard.
For better or worse, it is partially true. This talk breaks down how
Python executes code and why that creates overhead, especially in tight
loops. I'll also explore how tools like NumPy, SIMD, and JIT compilation
achieve massive speedups by working with the CPU instead of against it.&lt;/p&gt;
&lt;p&gt;You should walk away from this talk with more insight into why loops are
slow, how python code is executed at a high level, and what you should
do about it if anything.&lt;/p&gt;
</content><category term="PyOhio 2025"></category></entry></feed>