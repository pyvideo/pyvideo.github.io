<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_gimgihwan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-30T00:00:00+00:00</updated><entry><title>Python의 계산성능 향상을 위해 Fortran, C, CUDA-C, OpenCL-C 와 연동하기</title><link href="https://pyvideo.org/pycon-korea-2015/pythonyi-gyesanseongneung-hyangsangeul-wihae-fortran-c-cuda-c-opencl-c-wa-yeondonghagi.html" rel="alternate"></link><published>2015-08-30T00:00:00+00:00</published><updated>2015-08-30T00:00:00+00:00</updated><author><name>김기환</name></author><id>tag:pyvideo.org,2015-08-30:pycon-korea-2015/pythonyi-gyesanseongneung-hyangsangeul-wihae-fortran-c-cuda-c-opencl-c-wa-yeondonghagi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python은 과학 계산 분야에서도 이미 널리 사용되고 있습니다. numpy와 scipy
기반으로 만들어진 많은 모듈들이 휼륭한 생태계를 이루고 있기 때문입니다.
그러나 극한의 계산 성능을 요구하는 분야(HPC, High Performance
Computing)에서는 여전히 C와 Fortran으로만으로 짜여진 코드들이 선호되고
있습니다. 이런 분야에서 Python에 대한 일반적인 견해는 전처리/후처리에는
유용하지만 메인 코드에 적용하기에는 느리다라는 것입니다.&lt;/p&gt;
&lt;p&gt;이번 발표에서는 HPC 분야에서도 Python의 유용함을 보여줍니다. 계산이
집중된 부분만을 Fortran, C로 구현하여 Python 메인 코드에 접합하면,
Python의 장점은 충분히 활용하면서도 계산 성능에 큰 손해는 보지 않을 수
있습니다. 게다가 CUDA-C, OpenCL-C와 연동하면 GPU, MIC와 같은 가속
프로세서들도 비교적 쉽게 활용할 수 있습니다. 이번 발표에서는 간단한
시뮬레이션 코드를 예제로 사용하여 Python 코드로부터 시작하여 Fortran, C,
CUDA-C, OpenCL-C 등을 단계적으로 접합해 나가는 것을 보여줄 것입니다.&lt;/p&gt;
</summary></entry></feed>