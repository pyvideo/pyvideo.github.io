<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_s-trygubenko.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-07-06T00:00:00+00:00</updated><entry><title>Functional functional programming in Python and even Haskell part 2</title><link href="https://pyvideo.org/europython-2012/functional-functional-programming-in-python-and-0.html" rel="alternate"></link><published>2012-07-06T00:00:00+00:00</published><updated>2012-07-06T00:00:00+00:00</updated><author><name>S Trygubenko</name></author><id>tag:pyvideo.org,2012-07-06:europython-2012/functional-functional-programming-in-python-and-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Trygubenko - 5 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reaping the benefits of functional programming can be a real challenge,
falling anywhere between exciting and frustrating, to the point that one
might end up feeling demotivated and embarrassed about writing in the
functional style in the “real world”. I have always strived to write
functional side- effect free code for production, and this year I have
been taking functional programming for myself one step further by
re-writing some of my Python tools in Haskell, and I would like to share
my findings. In this tutorial we will work through a progression of
increasing in complexity fun-to-solve problems, obtain solutions both in
Python and Haskell, in order to be able to first hand compare and
contrast readability, performance and development time. Bring a laptop
and a couple of interpreters (ipython and ghci) and lets do some
hacking!&lt;/p&gt;
</summary></entry><entry><title>Functional functional programming in Python and even Haskell part 1</title><link href="https://pyvideo.org/europython-2012/functional-functional-programming-in-python-and-e.html" rel="alternate"></link><published>2012-07-06T00:00:00+00:00</published><updated>2012-07-06T00:00:00+00:00</updated><author><name>S Trygubenko</name></author><id>tag:pyvideo.org,2012-07-06:europython-2012/functional-functional-programming-in-python-and-e.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] S Trygubenko - 5 JULY 2012 in &amp;quot;Track Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reaping the benefits of functional programming can be a real challenge,
falling anywhere between exciting and frustrating, to the point that one
might end up feeling demotivated and embarrassed about writing in the
functional style in the “real world”. I have always strived to write
functional side- effect free code for production, and this year I have
been taking functional programming for myself one step further by
re-writing some of my Python tools in Haskell, and I would like to share
my findings. In this tutorial we will work through a progression of
increasing in complexity fun-to-solve problems, obtain solutions both in
Python and Haskell, in order to be able to first hand compare and
contrast readability, performance and development time. Bring a laptop
and a couple of interpreters (ipython and ghci) and lets do some
hacking!&lt;/p&gt;
</summary></entry></feed>