<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_h-krossing.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-07-05T00:00:00+00:00</updated><entry><title>Seamless integration of python and postgresql</title><link href="https://pyvideo.org/europython-2012/seamless-integration-of-python-and-postgresql.html" rel="alternate"></link><published>2012-07-05T00:00:00+00:00</published><updated>2012-07-05T00:00:00+00:00</updated><author><name>H Krossing</name></author><id>tag:pyvideo.org,2012-07-05:europython-2012/seamless-integration-of-python-and-postgresql.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] H Krossing - 4 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presenting a better way of using PostgreSQL from python with Simple to
use way to avoid moving data back and forth to client for just for
processing while still maintaining your code in client code and getting
all the benefits of server-side programming with ease of Python. access
to data without writing SQL for simple usage while SQL is still
available where appropriate, like complex data analysis This is achieved
by the following: decorators which ship python code to be executed in
database, with potentially 100x speedup for some use cases direct
building of query plans bypassing SQL generation and parsing Some more
infrastructure is presented which is needed for using code-shipping in
more complex scenarios like django extra import hooks in server for
loading python modules from caller (client) extra import hooks for
importing modules from database loadatstartup modules for pl/python ways
to scale this type of application by sharding (a.k.a. horisontally
scaling) it using pl/proxy&lt;/p&gt;
</summary></entry></feed>