<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_hardwareiot.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Game Development with CircuitPython</title><link href="https://pyvideo.org/europython-2019/game-development-with-circuitpython.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Radomir Dopieralski</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/game-development-with-circuitpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making computer games is difficult: it requires creativity,
multidisciplinary knowledge of art, psychology, math, computer science,
physics and others, patience, open mind and dedication. Making computer
games with Python is a nightmare. You hit practically every sharp corner
that Python has, starting with installation, through binary libraries,
poor hardware support, up to distribution.&lt;/p&gt;
&lt;p&gt;PewPew devices are an attempt at solving the worst problems by giving
you a dedicated, cheap, simple and portable gaming device, that you can
easily program with Python with just a simple text editor. They also
make pretty neat conference badges. I will talk about how they were
conceived, how they are used, and how you can extend and improve them
yourself.&lt;/p&gt;
&lt;p&gt;At the end of the talk you should have a good idea about what is
CircuitPython and MicroPython and how they can be used to build and
program such simple devices. You should also know where to find the
resources necessary to try designing and building your own.&lt;/p&gt;
</summary><category term="Education"></category><category term="Gadgets"></category><category term="Hardware/IoT"></category><category term="Learning"></category><category term="MicroPython"></category></entry><entry><title>Running a Synchrotron on Open Source Python</title><link href="https://pyvideo.org/europython-2019/running-a-synchrotron-on-open-source-python.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/running-a-synchrotron-on-open-source-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A synchrotron is a large research facility that has a large software
stack to keep things running, fortunately a large chunk of the stack is
Open Source and fair chunk of it is Python to boot. By the end of the
talk attendees will understand the scale of the infrastructure (both
physical and software) that is required, and have an idea of what sort
of problems a synchrotron could help them solve.&lt;/p&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Architecture"></category><category term="Big Data"></category><category term="Engineering"></category><category term="Hardware/IoT"></category></entry><entry><title>Building Industry 4.0 logistics applications with MicroPython and ESP32 MCUs</title><link href="https://pyvideo.org/europython-2019/building-industry-40-logistics-applications-with-micropython-and-esp32-mcus.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Florian Wahl</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/building-industry-40-logistics-applications-with-micropython-and-esp32-mcus.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this session, we will report about a forklift hailing application
we built using MicroPython and the ESP32-based prototyping hardware
M5Stack.&lt;/div&gt;
&lt;div class="line"&gt;In a production facility, machine operators can hail a forklift using
an ESP32 device running MicroPython. The device sends a request to a
forklift dispatcher software, written in Python. The request is queued
and subsequently, the next available forklift is notified and sent to
the machine. Each forklift is also fitted with an ESP32 device. In
this project, the prototyping hardware M5Stack was used. It features
an ESP32 micro controller with Bluetooth, WIFI, GPIO, three buttons,
and a display.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Attendees will learn how MicroPython and prototyping hardware can be
used to scale from an idea on the developers desk to a working system in
a rough Industry 4.0 production environment. The talk will recap our
journey with MicroPython, the lessons learned, and the pitfalls to
avoid. Furthermore, the tooling setup will be introduced, including our
M5Stack GUI-simulator to mock the M5Stack display.&lt;/p&gt;
&lt;p&gt;The central dispatch server is built using Python and deployed in a
Docker container. Messages are exchanged using MQTT, a popular IoT
message protocol. The talk will conclude with a live demonstration of
the forklift hailing system. Attendees should be comfortable with the
Python syntax but are not expected to have any MicroPython, MQTT, Docker
or domain knowledge.&lt;/p&gt;
&lt;p&gt;Materials can be found at &lt;a class="reference external" href="https://gitlab.com/fwahl/europython2019"&gt;https://gitlab.com/fwahl/europython2019&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Cross-Platform-Development"></category><category term="DIY"></category><category term="Hardware/IoT"></category><category term="Internet of Things (IoT)"></category><category term="MicroPython"></category></entry><entry><title>How software can feed the world ðŸŒ±</title><link href="https://pyvideo.org/europython-2019/how-software-can-feed-the-world.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Christian Barra</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/how-software-can-feed-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infarm is a FaaS, Farming as a Service, and whether you believe it or
not, our business is in-house farming at scale.&lt;/p&gt;
&lt;p&gt;We design and build our farms, grow vegetables and sell them, and the
backbone of our infrastructure is based on Python.&lt;/p&gt;
&lt;p&gt;You can check this video to see what we do -&amp;gt;
&lt;a class="reference external" href="https://twitter.com/christianbarra/status/1096399602159439874"&gt;https://twitter.com/christianbarra/status/1096399602159439874&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More than 10 million observations are recorded from our farms, feeding
our farm management system that allows operators, plant scientists, and
supervisors to monitor each farm in real-time.&lt;/p&gt;
&lt;p&gt;During this talk I will briefly introduce the world's problems we are
trying to resolve at Infarm and then talk about our IoT farms,
infrastructure, how we use Python and how we plan to improve the
capabilities of our farms by adding edge machine learning.&lt;/p&gt;
&lt;p&gt;Agenda&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- What are the problems we are trying to solve at Infarm&lt;/div&gt;
&lt;div class="line"&gt;- Our 4 tech pillars&lt;/div&gt;
&lt;div class="line"&gt;- How we started with Python&lt;/div&gt;
&lt;div class="line"&gt;- Issues we are facing while scaling our Python infrastructure to
support &amp;gt; 400 farms&lt;/div&gt;
&lt;div class="line"&gt;- How we plan to evolve our software and infrastructure on 4 different
levels: consolidate, architecture, cloud native and observability&lt;/div&gt;
&lt;div class="line"&gt;- How Python is going to support our automated farms and its role in
making the farms smarter (edge computing with AI)&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Big Data"></category><category term="Hardware/IoT"></category><category term="Internet of Things (IoT)"></category><category term="Machine-Learning"></category><category term="Python general"></category></entry></feed>