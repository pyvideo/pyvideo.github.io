<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 11 May 2018 00:00:00 +0000</lastBuildDate><item><title>I Love Bugs (Keynote)</title><link>https://pyvideo.org/python-brasil-2017/i-love-bugs-keynote.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:python-brasil-2017/i-love-bugs-keynote.html</guid></item><item><title>Love your bugs</title><link>https://pyvideo.org/pycon-us-2018/love-your-bugs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wrestling bugs can be one of the most frustrating parts of programming - but with the right framing, bugs can also be our best allies. I'll tell the tales of two of my favorite bugs, including the time I triggered a DDOS of a logging cluster, and explain why I love them. I'll also give you concrete strategies for approaching tricky bugs and making them easier and more fun.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/love-your-bugs.html</guid><category>debug</category></item><item><title>Keynote: Ways that we (as professional or hobby programmers) can be more effective learners</title><link>https://pyvideo.org/kiwi-pycon-2015/keynote-ways-that-we-as-professional-or-hobby-p.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/keynote-ways-that-we-as-professional-or-hobby-p.html</guid></item><item><title>Import-ant Decisions</title><link>https://pyvideo.org/pycon-us-2014/import-ant-decisions.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Suppose &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; didn't exist, and we had to invent it from scratch.
We'll look at the problem - code sharing and reuse across modules - and
different ways we could solve it. We'll come up with &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; from
parallel universes and then reinvent python's actual implementation.
Finally, we'll import - using python's design - without using the
&lt;tt class="docutils literal"&gt;import&lt;/tt&gt; keyword.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/import-ant-decisions.html</guid></item><item><title>Bytes in the Machine: Inside the CPython interpreter</title><link>https://pyvideo.org/pycon-us-2015/bytes-in-the-machine-inside-the-cpython-interpre.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how the CPython interpreter works? Do you know
where to find a 1,500 line switch statement in CPython? I'll talk about
the structure of the interpreter that we all use every day by explaining
how Ned Batchelder and I chased down a mysterious bug in Byterun, a
Python interpreter written in Python. We'll also see visualizations of
the VM as it executes your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/bytes-in-the-machine-inside-the-cpython-interpre.html</guid></item><item><title>Exploring is never boring: understanding CPython without reading the code</title><link>https://pyvideo.org/pycon-us-2015/exploring-is-never-boring-understanding-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you started to read the source code of CPython but not gotten as
far as you wanted? Maybe you want to understand more about CPython but
don't know where to begin. I'll present a number of strategies for
getting more familiar with Python under the hood that go beyond &amp;quot;&amp;quot;just
read it!&amp;quot;&amp;quot; This talk isn't about contributing - it's about getting into
the code base and discovering interesting things.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/exploring-is-never-boring-understanding-cpython.html</guid></item></channel></rss>