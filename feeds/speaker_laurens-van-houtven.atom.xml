<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_laurens-van-houtven.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-28T00:00:00+00:00</updated><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-07-28:pyohio-2018/saturday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Object capability security</title><link href="https://pyvideo.org/pycon-pl-2015/object-capability-security.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Laurens van Houtven</name></author><id>tag:pyvideo.org,2015-10-15:pycon-pl-2015/object-capability-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most software we write has the ability to do essentially anything: open sockets, spawn processes, perform long blocking computation, read arbitrary objects in memory, et cetera. Most tools for limiting what applications can do are opt-in; many of them are complex to use. This has important security implications; software can often be tricked into abusing those privileges that it didn’t really even need to have to begin with. The object-capability model is an alternative security model that reasons about capabilities as first-class objects. In this talk, we’ll explore what object-capability security is, why we’re not all using it already, how we can leverage the ideas in it to materially improve the security of the projects we maintain today and start tomorrow.&lt;/p&gt;
</summary></entry><entry><title>DjangoCon EU 2013: Laurens Van Houtven - Fractal Architectures</title><link href="https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-laurens-van-houtven-fractal-architectures.html" rel="alternate"></link><published>2013-05-15T00:00:00+00:00</published><updated>2013-05-15T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2013-05-15:djangocon-europe-2013/djangocon-eu-2013-laurens-van-houtven-fractal-architectures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Continuous deployment</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--continuous-deployment.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--continuous-deployment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting the latest revision of
software into production use all the time, as opposed to working towards
larger releases. The important difference is iteration time: whereas
large software packages produce new software in timeframes of years or
months, continuous deployment teams typically put new code into
production in timeframes of hours or less.&lt;/p&gt;
&lt;p&gt;The practice is slowly attracting a small but growing group of loyal
followers, just like continuous integration over the past few years and
test- driven development did before that. They can be explained in terms
of being natural extensions of each other. Like TDD and CI, CD gets eyed
somewhat suspiciously (and rightfully so: skeptical analysis is great),
but the undersigned believes there's a legitimate advantage for many
applications.&lt;/p&gt;
&lt;p&gt;Many years ago, TTD and testing tools in general were mostly ad-hockery.
Now, with many different production-quality testing tools, this has
become unthinkable. Similarly, continuous integration was something
other people did for a long time, but now we have tools such as Buildbot
and Hudson. Continuous deployment is still somewhat in the early stage
in terms of ready-to-use tools, but it's likely that we'll see a similar
evolution.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what I plan to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a short history of people developed software&lt;/li&gt;
&lt;li&gt;from the recent models to CD (sort of a working definition of CD
here)&lt;/li&gt;
&lt;li&gt;when is it a good idea? pros/cons&lt;/li&gt;
&lt;li&gt;requirements &amp;amp; battle plan for applying CD in an existing development
environment (and possibly code base)&lt;/li&gt;
&lt;li&gt;an overview of existing tools and how they work together&lt;/li&gt;
&lt;li&gt;caveat emptors, known pitfalls (deployment and recovery strategies go
here, since most implementations figure out they need them after
stuff blows up)&lt;/li&gt;
&lt;li&gt;questions! (hopefully lots of people who've tried or are thinking
about implementing something similar -- like I said, there are a lot
of people implementing it but not too many ideas being bounced
around)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cd"></category><category term="ci"></category><category term="continuousdeployment"></category><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="softwaredevelopment"></category><category term="tdd"></category><category term="workflow"></category></entry><entry><title>Crypto 101</title><link href="https://pyvideo.org/pycon-us-2013/crypto-101.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/crypto-101.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to applied cryptography and information security
suitable for programmers of all ages and skill levels.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Twisted Mixing</title><link href="https://pyvideo.org/pycon-us-2014/twisted-mixing.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/twisted-mixing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A talk about mixing Twisted, an asynchronous IO framework for Python,
with other Python code: blocking code, other asynchronous code...&lt;/p&gt;
</summary></entry><entry><title>Building secure systems</title><link href="https://pyvideo.org/pycon-us-2015/building-secure-systems.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/building-secure-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you build secure software? Why do we see bad security track
records in projects that otherwise seem to tick all the right
engineering boxes? Why is communicating about security issues so
painful? More importantly: how can we do all of these things better?&lt;/p&gt;
</summary></entry><entry><title>Distributed Systems 101</title><link href="https://pyvideo.org/pycon-us-2015/distributed-systems-101.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/distributed-systems-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very brief introduction to the theory and practice of distributed
systems.&lt;/p&gt;
</summary></entry><entry><title>PyConZA 2012: Fractal Architectures</title><link href="https://pyvideo.org/pycon-za-2012/pyconza-2012-fractal-architectures.html" rel="alternate"></link><published>2012-10-05T00:00:00+00:00</published><updated>2012-10-05T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2012-10-05:pycon-za-2012/pyconza-2012-fractal-architectures.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Fractal Architectures: Laurens Van Houtven's talk at PyConZA 2012&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2012"></category></entry></feed>