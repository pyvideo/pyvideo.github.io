<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Beyond Paradigms: a new key to grok Python &amp; other languages</title><link>https://pyvideo.org/pycon-de-2019/beyond-paradigms-a-new-key-to-grok-python-other-languages.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Luciano Ramalho&lt;/p&gt;
&lt;p&gt;Track:PyConDE
Focus on features, not paradigms. This new approach to the study of programming languages offers practical advice for programmers learning a new language, adopting coding idioms, and choosing suitable design patterns.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/QCNNTW"&gt;https://de.pycon.org/program/QCNNTW&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-10:pycon-de-2019/beyond-paradigms-a-new-key-to-grok-python-other-languages.html</guid></item><item><title>Beyond Paradigms</title><link>https://pyvideo.org/pybay-2019/beyond-paradigms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Java is object oriented and Haskell is functional. How about Python? Is it really OO with free-standing functions and porous encapsulation? Python has lambdas and closures, but is it functional? Are these useful questions?&lt;/p&gt;
&lt;p&gt;A better approach to learning of programming languages is to focus on features, not paradigms. This delivers practical advice for choosing patterns and understanding idioms.&lt;/p&gt;
&lt;p&gt;Abstract
In the last 10 years a new approach to the study of programming languages has emerged: focus on features, not paradigms. This approach offers more direct, practical advice for programmers learning a new language, taking up coding idioms, and choosing suitable design patterns.&lt;/p&gt;
&lt;p&gt;This talk will name some key language features, show how they affect the use of design patterns, and conclude with a refactoring guided by this new approach, producing simpler, more efficient code. Theory in practice.&lt;/p&gt;
&lt;p&gt;About the speaker
Luciano Ramalho is the author of Fluent Python, an international bestseller published in 9 languages. He started using Python in 1998, creating publishing systems for &amp;quot;Web 1.0&amp;quot;. Python is Luciano's favorite language, but he also enjoys coding in Elixir and Go.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/beyond-paradigms.html</guid></item><item><title>Set Practice: learning from Python's set types</title><link>https://pyvideo.org/pycon-us-2019/set-practice-learning-from-pythons-set-types.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Key takeaways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Set operations enable simpler and faster solutions for many tasks;&lt;/li&gt;
&lt;li&gt;Python's set classes are lessons in elegant, idiomatic API design;&lt;/li&gt;
&lt;li&gt;A set class is a suitable context for implementing operator
overloading.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Boolean logic and set theory are closely related. In practice, we will
see cases where set operations provide simple and fast declarative
solutions to programming problems that otherwise require complicated and
slow procedural coding.&lt;/p&gt;
&lt;p&gt;Python's set built-ins and ABCs provide a rich and well designed API. We
will consider their interfaces, and how they can inspire the creation of
Pythonic APIs for your own classes.&lt;/p&gt;
&lt;p&gt;Finally, we will discuss operator overloading â€” a technique that is not
suitable everywhere, but certainly makes sense with sets. Taking a few
operators as examples, we will study their implementation in a new
&lt;tt class="docutils literal"&gt;UintSet&lt;/tt&gt; class for integer elements. &lt;tt class="docutils literal"&gt;UintSet&lt;/tt&gt; fully implements the
&lt;tt class="docutils literal"&gt;MutableSet&lt;/tt&gt; interface over a totally different internal
representation based on a bit array instead of a hash table. Membership
tests run in &lt;em&gt;O(1)&lt;/em&gt; time like the built-in sets (however, &lt;tt class="docutils literal"&gt;UintSet&lt;/tt&gt; is
currently pure Python, so YMMV). Using bit arrays allow core set
operations like intersection and union to be implemented with fast
bitwise operators, and provides compact storage for dense sets of
integers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 03 May 2019 10:50:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-us-2019/set-practice-learning-from-pythons-set-types.html</guid><category>talk</category></item><item><title>Pythonic Objects: idiomatic OOP in Python</title><link>https://pyvideo.org/pycon-us-2019/pythonic-objects-idiomatic-oop-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Objects and classes are part of Python since version 1 -- not an
afterthought. But all languages implement and support OOP in different
ways. &amp;quot;Classic&amp;quot; patterns that make sense elsewhere may not be as useful
in Python, and Python provides unique solutions to some familiar
problems.&lt;/p&gt;
&lt;p&gt;This tutorial is about modern, idiomatic OOP in Python 3.7. Most of the
discussion will be relevant to previous versions all the way to Python
2.7, but newer features will be highlighted.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 01 May 2019 09:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-01:pycon-us-2019/pythonic-objects-idiomatic-oop-in-python.html</guid><category>tutorial</category></item><item><title>Go e Python lado a lado</title><link>https://pyvideo.org/python-brasil-2018/go-e-python-lado-a-lado.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-17:python-brasil-2018/go-e-python-lado-a-lado.html</guid></item><item><title>Insight About Async/Await</title><link>https://pyvideo.org/pybay-2017/insight-about-asyncawait.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slide deck referenced: &lt;a class="reference external" href="https://speakerdeck.com/pybay/2017-luciano-ramalho-modern-concurrency"&gt;https://speakerdeck.com/pybay/2017-luciano-ramalho-modern-concurrency&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/insight-about-asyncawait.html</guid><category>lightning talks</category></item><item><title>Think Like a Pythonista</title><link>https://pyvideo.org/pybay-2017/think-like-a-pythonista.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Luciano Ramalho is a Technical Principal at ThoughtWorks and the author of the bestselling book Fluent Python (O'Reilly, 2015). Since 1998 he has deployed Python on some of the largest Web sites in Brazil. His speaking record includes PyCon US, OSCON, OSCON-EU, PythonBrasil, RuPy and an ACM Webinar that was attended by more than 900 people. Ramalho is a fellow of the PSF and co-founder of the Brazilian Python Association and of Garoa Hacker Clube, the first hackerspace in Brazil.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about some key insights that made Luciano Ramalho a better Python programmer and resulted in the success of Fluent Python.&lt;/p&gt;
&lt;p&gt;Fluent Python was the #1 seller out of all O'Reilly books and videos in September, 2015, the first full month of sales after it was released -- and O'Reilly is the #1 seller of Python books.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/think-like-a-pythonista.html</guid></item><item><title>Descritores de atributos em Python</title><link>https://pyvideo.org/python-brasil-2012/descritores-de-atributos-em-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Descritores de atributos em Python - Luciano Ramalho&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 23 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-23:python-brasil-2012/descritores-de-atributos-em-python.html</guid></item><item><title>Python AssÃ­ncrono: tudo ao mesmo tempo agora - Luciano Ramalho</title><link>https://pyvideo.org/python-brasil-2016/python-assincrono-tudo-ao-mesmo-tempo-agora-luciano-ramalho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.4 incorporou um loop de eventos e a biblioteca &lt;strong&gt;AsyncIO&lt;/strong&gt;. No
3.5 ganhamos 4 construÃ§Ãµes sintÃ¡ticas novas: &lt;strong&gt;await&lt;/strong&gt;, &lt;strong&gt;async def&lt;/strong&gt;,
&lt;strong&gt;async for&lt;/strong&gt; e &lt;strong&gt;async with&lt;/strong&gt;, junto com vÃ¡rios mÃ©todos especiais para
suportar essas construÃ§Ãµes, como &lt;strong&gt;__aiter__&lt;/strong&gt; e &lt;strong&gt;__anext__&lt;/strong&gt;. E
agora temos o pacote &lt;strong&gt;uvloop&lt;/strong&gt;, que traz para o Python o alto
desempenho da biblioteca &lt;strong&gt;libuv&lt;/strong&gt; -- o motor assÃ­ncrono do &lt;strong&gt;Node.js&lt;/strong&gt;.
Estamos mais preparados do que nunca para resolver problemas envolvendo
alta concorrÃªncia de I/O. Vejam o que diz a &lt;a class="reference external" href="https://code.facebook.com/posts/1040181199381023/python-in-production-engineering/"&gt;engenharia de
infra-estrutura do Facebook&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;We are increasingly relying on AsyncIO, which was introduced in Python  3.4, and seeing huge performance gains as we move codebases away from  Python 2.&lt;/p&gt;
&lt;p&gt;(Estamos contando cada vez mais com AsyncIO, que foi lanÃ§ado no Python
3.4, e observando grandes ganhos de desempenho Ã  medida que convertemos
nosso legado de Python 2). Vamos falar sobre isso, e -- com sorte -- atÃ©
ouvir depoimentos dos presentes sobre usos de AsyncIO!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-13:python-brasil-2016/python-assincrono-tudo-ao-mesmo-tempo-agora-luciano-ramalho.html</guid></item><item><title>Lightning talks May 20th, 2017 Evening session session</title><link>https://pyvideo.org/pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks 2017-05-20 Evening&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;0:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Meredydd Luff&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Compiling blocking Python to non-blocking JS&lt;/strong&gt;
- Wrote client side JS in Python before yield or await
statements, using Skulpt transpiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;5:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Efron Licht&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Elements of Style&lt;/strong&gt;
- Write understandable code; write a story. Shorter
functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;11:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Maria Mckinley&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Refactoring Lengthy Bits of Code&lt;/strong&gt;
- Towards understanding the steps to refactoring: a
test, prose, outline, make functions and tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;15:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Erik Rose&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Getting Things Unguilty&lt;/strong&gt;
- Using &amp;quot;getting things done&amp;quot; as a one slide
flowchart.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;21:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Meggie Mahnken&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Using _slots_ for More Opinionated Objects&lt;/strong&gt;
- __slots__ when you don't want to allow attributes;
sometimes efficient.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;26:00&lt;/td&gt;
&lt;td rowspan="3"&gt;Travis&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;Crowd Computing&lt;/strong&gt;
- fun controlling crowds with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;29:15&lt;/td&gt;
&lt;td rowspan="5"&gt;Allen Downey&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Physical Modeling in Python&lt;/strong&gt;
- Making an interactive book to improve the undergrad
engineering student retention by putting in real world
early.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;33:00&lt;/td&gt;
&lt;td rowspan="4"&gt;Luceneo&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Time is Money&lt;/strong&gt;
- Communicating Professor Antonio Candido's
alternative view to this aphorism.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;35:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Cynthia Lynn&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;PyCon, a High Schooler's Perspective&lt;/strong&gt;
- A 15 year-old programmer.  Didn't come for a job;
felt accepted and welcome.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;41:45&lt;/td&gt;
&lt;td rowspan="4"&gt;David Bieber&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Python Fire, comand line interfaces&lt;/strong&gt;
- A single line or decorators added to functions or
classes to make CLIs; great workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;47:15&lt;/td&gt;
&lt;td rowspan="4"&gt;&amp;nbsp;&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Pitches for different conferences&lt;/strong&gt;
- One minute each for Python conferences around the
world.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Merdydd Luff</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</guid><category>lightning talks</category></item><item><title>Decorators and descriptors decoded</title><link>https://pyvideo.org/pycon-us-2017/decorators-and-descriptors-decoded.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python developers use decorators and descriptors on a daily basis, but
many don't understand them well enough to create (or debug) them.
Decorators are widely deployed in popular Python Web frameworks.
Descriptors are the key to the database mappers used with those
frameworks, but under the covers they play an even more crucial role in
Python as the device that turns plain functions into bound methods,
setting the value of the &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; argument. This tutorial is a gentle
introduction these important language features, using a test-driven
presentation and exercises, and covering enhancements in Python 3.6 that
make class metaprogramming easier to get right.&lt;/p&gt;
&lt;p&gt;Decorators without closures are presented first, highlighting the
difference between &lt;em&gt;run time&lt;/em&gt; and &lt;em&gt;import time&lt;/em&gt; that is crucial when
meta-programming. We then get a firm grounding on closures and how they
are implemented in Python, before moving to higher order function
decorators and class decorators.&lt;/p&gt;
&lt;p&gt;Coverage of descriptors starts with a close look at Python's
&lt;tt class="docutils literal"&gt;property&lt;/tt&gt; built-in function and dynamic attribute look up. We then
implement some ORM-like field validation descriptors, encounter a
usability problem, and leverage PEP 487 -- Simpler customisation of
class creation -- to solve it. Alternative implementations using a class
decorator and a metaclass will be contrasted to the PEP 487 solution.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/decorators-and-descriptors-decoded.html</guid></item><item><title>Trilha Pydata | Girando pratos: concorrÃªncia moderna em Python</title><link>https://pyvideo.org/python-brasil-2015/trilha-pydata-girando-pratos-concorrencia-moderna-em-python-luciano-ramalho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra na trilha de Pydata da ConferÃªncia Python Brasil 11 [2015] - SÃ£o JosÃ© dos Campos&lt;/p&gt;
&lt;p&gt;A conferÃªncia Python Brasil aconteceu dos dias 09 e 10 de Novembro de 2015, no Novotel, em SÃ£o JosÃ© dos Campos.&lt;/p&gt;
&lt;p&gt;Palestra do Luciano Ramalho sobre Girando pratos: concorrÃªncia moderna em Python&lt;/p&gt;
&lt;p&gt;Mais informaÃ§Ãµes:&lt;/p&gt;
&lt;p&gt;Site: &lt;a class="reference external" href="http://pythonbrasil.github.io/pythonb"&gt;http://pythonbrasil.github.io/pythonb&lt;/a&gt;...
Twitter: &amp;#64;pythonbrasil
Facebook: &lt;a class="reference external" href="http://www.facebook.com/pythonbrasil"&gt;http://www.facebook.com/pythonbrasil&lt;/a&gt;
Manual do Big Kahuna: &lt;a class="reference external" href="https://manual-do-big-kahuna.readthed"&gt;https://manual-do-big-kahuna.readthed&lt;/a&gt;...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-09:python-brasil-2015/trilha-pydata-girando-pratos-concorrencia-moderna-em-python-luciano-ramalho.html</guid></item><item><title>Pythonic Objects: implementing productive APIs with the Python Data Model</title><link>https://pyvideo.org/pycon-us-2016/luciano-ramalho-pythonic-objects-implementing-productive-apis-with-the-python-data-model.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Luciano Ramalho&lt;/p&gt;
&lt;p&gt;Python is so consistent that often we can infer the behavior of new objects by assuming they work as the built-ins. The Python Data Model is the foundation of this consistent behavior. This talk presents the construction of Pythonic objects: classes that feel &amp;quot;&amp;quot;natural&amp;quot;&amp;quot; to a Python programmer, and leverage some of the best language features by implementing key protocols of the Data Model.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-29:pycon-us-2016/luciano-ramalho-pythonic-objects-implementing-productive-apis-with-the-python-data-model.html</guid></item><item><title>Pingo means "pin, go!"</title><link>https://pyvideo.org/chipy/pingo-means-pin-go.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:chipy/pingo-means-pin-go.html</guid></item><item><title>38. ABC: the mother of Python</title><link>https://pyvideo.org/pycon-us-2012/38-abc-the-mother-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Before Python, Guido was a contributor to the ABC language and
environment. ABC was designed to teach programming, and introduced many
&amp;quot;Pythonic&amp;quot; ideas: integrated dicts and tuples, structure by indentation,
strong typing without declarations etc. With high demand for Python in
education, the legacy of ABC is more relevant than ever as we design
courses and environments for learners.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-11:pycon-us-2012/38-abc-the-mother-of-python.html</guid></item><item><title>Iteration &amp; Generators: the Python Way</title><link>https://pyvideo.org/pycon-us-2013/iteration-generators-the-python-way.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Did you know that &amp;quot;for a, (b, c) in s:&amp;quot; is a valid Python line? From the
elegant for statement through list/set/dict comprehensions and generator
functions, this talk shows how the Iterator pattern is so deeply
embedded in the syntax of Python, and so widely supported by its
libraries, that some of its most powerful applications can be overlooked
by programmers coming from other languages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-17:pycon-us-2013/iteration-generators-the-python-way.html</guid><category>talk</category></item><item><title>Encapsulation with descriptors</title><link>https://pyvideo.org/pycon-us-2013/encapsulation-with-descriptors.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has no private fields, but the property decorator lets you
replace public attributes with getters and setters without breaking
client code. And the descriptor mechanism, used in Django for model
field declarations, enables wide reuse of getter/setter logic via
composition instead of inheritance. This talk explains how properties
and descriptors work by refactoring a practical example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/encapsulation-with-descriptors.html</guid><category>talk</category></item></channel></rss>