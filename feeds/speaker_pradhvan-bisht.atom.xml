<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Pradhvan Bisht</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_pradhvan-bisht.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-02-06T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python’s tale of concurrency</title><link href="https://pyvideo.org/pycascades-2022/pythons-tale-of-concurrency.html" rel="alternate"></link><published>2022-02-06T00:00:00+00:00</published><updated>2022-02-06T00:00:00+00:00</updated><author><name>Pradhvan Bisht</name></author><id>tag:pyvideo.org,2022-02-06:/pycascades-2022/pythons-tale-of-concurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is underrated when it comes to concurrency. The main aim of the talk would focus on exploring the general concept of concurrency and how we can utilise those concepts to write Python programs that are more scalable and more efficient in terms of I/0 bound operations. From …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is underrated when it comes to concurrency. The main aim of the talk would focus on exploring the general concept of concurrency and how we can utilise those concepts to write Python programs that are more scalable and more efficient in terms of I/0 bound operations. From the threading module and its limitations, to the asyncio module with its async and await keywords. We will look into different types of concurrent programming techniques available in Python though the major focus would be on the asyncio module, exploring best practises and common pitfalls while using asyncio.&lt;/p&gt;
</content><category term="PyCascades 2022"></category></entry></feed>