<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_recommendation.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-07T00:00:00+00:00</updated><entry><title>Recommendations at Rappi: from MVP to Data Product</title><link href="https://pyvideo.org/pydata-austin-2019/recommendations-at-rappi-from-mvp-to-data-product.html" rel="alternate"></link><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><author><name>Ariel Wolfmann</name></author><id>tag:pyvideo.org,2019-12-07:pydata-austin-2019/recommendations-at-rappi-from-mvp-to-data-product.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The idea of the talk is to present Product Management approach applied to a real case data science project. We will show how we started the Recommendations project at Rappi, working on last mile delivery. Having a business case well defined let us the chance to start from top sold products to personalized recommendations, iterating and seeing how metrics are improving.&lt;/p&gt;
</summary><category term="recommendation"></category></entry><entry><title>Recommendation Model for Ranking Matching Houses</title><link href="https://pyvideo.org/pycon-italia-2018/recommendation-model-for-ranking-matching-houses.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Chiara Basei</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/recommendation-model-for-ranking-matching-houses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We aim to address the problem of missing data for recommendation systems
with Python 2.7 and the H2O package. To this end, we “re-impute”
artificially removed values into a dataframe with the help of two
models: (1) &lt;strong&gt;Deep Learning with Autoencoder&lt;/strong&gt; &amp;amp; (2) &lt;strong&gt;Generalized Low
Rank Model&lt;/strong&gt; (GLRM). To tune and evaluate both models, we implement a
cross validation that optimizes the imputation accuracy of the
artifically removed values. As a result, &lt;strong&gt;Deep Learning with
Autoencoder&lt;/strong&gt; consistently preforms better in terms of precision, wheras
&lt;strong&gt;GLRM&lt;/strong&gt; performs better in terms of execution time. Finally, we also
present a new ranking formula which is inspired by &lt;em&gt;Lucene Similarity&lt;/em&gt;
but weighs the cosine similarity according to the percentage of matches.&lt;/p&gt;
&lt;p&gt;It will be shown an implementation of the recommendation system to real
estate data. We will show:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;some tuning plots of the models for imputation of missing features
of real estate queries;&lt;/li&gt;
&lt;li&gt;a discussion about approximation of the scoring formula to rank the
matching houses;&lt;/li&gt;
&lt;li&gt;a excerpt of the recommendation system front-end implemented in
Flask.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To attend this talk, a basic knowledge about statistics and Python is
helpful.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Deep-Learning"></category><category term="GLRM"></category><category term="Autoencoder"></category><category term="H2O"></category><category term="Recommendation"></category></entry></feed>