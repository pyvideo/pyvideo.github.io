<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_john-kitchin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-13T00:00:00+00:00</updated><entry><title>Emacs + org-mode + python in reproducible research; SciPy 2013 Presentation</title><link href="https://pyvideo.org/scipy-2013/emacs-org-mode-python-in-reproducible-researc.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>John Kitchin</name></author><id>tag:pyvideo.org,2013-07-02:scipy-2013/emacs-org-mode-python-in-reproducible-researc.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We discuss the use of emacs + org-mode + python in enabling reproducible
research.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Kitchin, John Carnegie Mellon University&lt;/p&gt;
&lt;p&gt;Track: Reproducible Science&lt;/p&gt;
&lt;p&gt;We will discuss the use of emacs + org-mode + python in enabling
reproducible research. This combination of software enables researchers
to intertwine narrative and mathematical text with figures and code that
is executable within a document, with capture of the output. Portions of
the document can be selectively exported to LaTeX, HTML, pdf and other
other formats. We have used this method to produce technical manuscripts
submitted for peer review in scientific journals, in the preparation of
two e-books (about 300 pages each) on using python in scientific and
engineering applications (&lt;a class="reference external" href="http://jkitchin.github.com/pycse"&gt;http://jkitchin.github.com/pycse&lt;/a&gt;), and in
using python in the modeling of the properties of materials with density
functional theory (&lt;a class="reference external" href="http://jkitchin.github.com/dft-book"&gt;http://jkitchin.github.com/dft-book&lt;/a&gt;), as well as a
python-powered blog at &lt;a class="reference external" href="http://jkitchin.github.com"&gt;http://jkitchin.github.com&lt;/a&gt;. Our experience
suggests all three components are critical for enabling reproducible
research in practice: an extensible editor, a markup language that
separates text, math, data and code, and an effective language such as
python. We will show examples of the pros and cons of this particular
implementation of editor/markup/code combination.&lt;/p&gt;
</summary><category term="emacs"></category><category term="reproducibility"></category></entry><entry><title>A Success Story in Using Python in a Graduate Chemical Engineering Course</title><link href="https://pyvideo.org/scipy-2014/a-success-story-in-using-python-in-a-graduate-che.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>John Kitchin</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/a-success-story-in-using-python-in-a-graduate-che.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I recently used Python in a new required graduate level chemical
reaction engineering core course. The course was taken by 60 Master's
students with a broad set of educational backgrounds and programming
experience. Several factors contributed to the success of this course,
which I will present and discuss. Based on my experience, it is feasible
to use Python in engineering courses.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Historically, Matlab has been the primary math software tool used in our
courses on Chemical Engineering. Last year, I taught the first course in
the department using Python. In this talk I will present how I did that,
and why it was possible. The first step was demonstrating that Python +
numpy + scipy + matplotlib can solve all the problems we used to solve
with Matlab. This was documented in a project called PYCSE through a
series of over one hundred blog posts and organized in a web site
(&lt;a class="reference external" href="http://kitchingroup.cheme.cmu.edu/pycse"&gt;1&lt;/a&gt;). Second, the
development of Python distributions such as Enthought Canopy made it
possible to students to easily install and use Python. I had to augment
this with some additional functionality with PYCSE
(&lt;a class="reference external" href="http://github.com/jkitchin/pycse"&gt;2&lt;/a&gt;) which adds some statistical
analysis, differential equation solvers, numerical differentiation
functions and a publish function to convert Python scripts to PDF files
with captured output for grading. The only feature of Python missing is
a robust units package; several partial solutions exist, but none solve
all the needs of engineering calculations. Third, Emacs + org-mode
enabled me to write the course notes with integrated Python code and
output. These notes were provided to the students in PDF form, and
annotated during lecture using a tablet PC. Finally, the course was
administered with box.com and a custom python module to automate
assignment collection and return
(&lt;a class="reference external" href="https://github.com/jkitchin/box-course"&gt;3&lt;/a&gt;). An integrated grade
widget in the PDF files that was created when the students published
their assignments was used to aggregate the grades for the gradebook. I
used an innovative homework schedule of one problem every 2-4 days with
rapid feedback to keep students using Python frequently. We used timed
quizzes and online exams to assess their learning. Overall, the course
was successful. Student evaluations of the course were as good as
courses that used other software packages. Based on my experiences, I
will continue to use Python and expand its role in engineering
education.&lt;/p&gt;
</summary></entry></feed>