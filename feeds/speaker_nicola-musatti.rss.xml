<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 25 May 2014 00:00:00 +0000</lastBuildDate><item><title>Making Python a better scripting language</title><link>https://pyvideo.org/pycon-italia-2014/making-python-a-better-scripting-language.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python programmers wince when they hear their favourite language called a &amp;quot;scripting language&amp;quot;, but Python is indeed very convenient for scripting. Small Python scripts have a tendency to grow into full-fledged programs just because it is so easy to add new features.&lt;/p&gt;
&lt;p&gt;However there is one task in which traditional scripting languages such as the UNIX/Linux shells or even Windows's &amp;quot;cmd&amp;quot; fare better than Python: invoking external commands. String manipulations required to build command lines for os.system() or Popen seem unnecessarily complicated compared to just writing out your command line in your script, possibly sprinkled with a shell variable here and there.&lt;/p&gt;
&lt;p&gt;In this presentation I will show how my own nxpy.command package can be used to wrap external programs so that they can be invoked as Python functions whose arguments are then translated to command line arguments and options.&lt;/p&gt;
&lt;p&gt;This is also possible for interactive command interpreters; I will describe how the current command's output and error messages may be inspected to check that it terminated correctly, as well as how timing constraints may be imposed.&lt;/p&gt;
&lt;p&gt;While this approach would be overkill for simple, static command lines, it becomes convenient in the presence of multiple sub-commands that share many of their options, like svn or git. In the absence of a proper API this is an effective way of creating one quickly and incrementally.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Musatti</dc:creator><pubDate>Sun, 25 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-25:pycon-italia-2014/making-python-a-better-scripting-language.html</guid></item><item><title>Rendere Python un linguaggio di scripting migliore</title><link>https://pyvideo.org/pycon-italia-2014/rendere-python-un-linguaggio-di-scripting-migliore.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Molti programmatori Python non amano che il loro linguaggio preferito venga chiamato &amp;quot;linguaggio di scripting&amp;quot;, sebbene Python sia molto pratico per questo tipo di attività. Piccoli script in Python tendono a crescere fino a diventare veri e propri programmi solo perché è molto facile aggiungere nuove funzionalità.&lt;/p&gt;
&lt;p&gt;Per contro c'è un compito nel quale linguaggi di scripting tradizionali come gli shell Unix/Linux o persino il cmd di Windows sono più pratici di Python: l'invocazione di comandi esterni. Le manipolazioni di stringhe necessarie per costruire linee di comando per os.system() o Popen paiono eccessivamente complicate rispetto allo scrivere il comando direttamente nello script, magari con una spruzzatina di variabili d'ambiente qui e là.&lt;/p&gt;
&lt;p&gt;In questa presentazione mostrerò come il mio package nxpy.command possa essere usato per creare wrapper di comandi esterni in modo che possano essere richiamati come funzioni Python, i cui argomenti vengono poi tradotti in opzioni e argomenti del comando stesso.&lt;/p&gt;
&lt;p&gt;Questo è possibile anche per gli interpreti di comandi interattivi; descriverò come ispezionare l'output e l'error del comando corrente per verificare che sia terminato correttamente, così come la possibilità di imporre vincoli temporali all'esecuzione dei comandi.&lt;/p&gt;
&lt;p&gt;Sebbene questo approccio risulti eccessivo per linee di comando semplici e fisse, diventa pratico in presenza di molteplici sotto-comandi che condividono molte delle loro opzioni, come avviene ad esempio per svn o git. In assenza di una vera e propria API questo è un modo efficace di crearne una in modo rapido ed incrementale.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Musatti</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-24:pycon-italia-2014/rendere-python-un-linguaggio-di-scripting-migliore.html</guid></item></channel></rss>