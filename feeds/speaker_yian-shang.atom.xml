<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_yian-shang.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-03-12T00:00:00+00:00</updated><entry><title>Discovering Related Content with Python</title><link href="https://pyvideo.org/pycon-sk-2017/discovering-related-content-with-python.html" rel="alternate"></link><published>2017-03-12T00:00:00+00:00</published><updated>2017-03-12T00:00:00+00:00</updated><author><name>Yian Shang</name></author><id>tag:pyvideo.org,2017-03-12:pycon-sk-2017/discovering-related-content-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Short Description:&lt;/p&gt;
&lt;p&gt;This talk goes over how Vox Media built a content similarity tool for journalists, including algorithm selection, input weighting, UI design, and user feedback.&lt;/p&gt;
&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;At the end of reading a news article, we sometimes find ourselves wanting more - more context, more insight, perhaps something related that dives deeper. In this talk, I will explain how we built a tool in Python for journalists to discover related content from a large corpus of articles.&lt;/p&gt;
&lt;p&gt;I'll go over some of the different models we tried (given the abundance of machine learning and NLP libraries in Python) and how we eventually settled on Word2Vec. I will also talk about how we worked with journalists to incrementally improve the tool - from minor tweaks like assigning higher weights to title words vs article body words to the ability to feed in external seed articles.&lt;/p&gt;
&lt;p&gt;Intended Audience:&lt;/p&gt;
&lt;p&gt;Python developers who are interested in machine learning and neural networks&lt;/p&gt;
</summary></entry></feed>