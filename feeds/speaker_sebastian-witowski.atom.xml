<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Sebastian Witowski</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastian-witowski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Writing faster Python</title><link href="https://pyvideo.org/europython-2016/writing-faster-python.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2016-07-31:/europython-2016/writing-faster-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Witowski - Writing faster Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/writing-faster-python"&gt;https://ep2016.europython.eu//conference/talks/writing-faster-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Presentation on how you can write faster Python in your daily work. I
will briefly explain ways of profiling the code, discuss different
code structures and show how they …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Witowski - Writing faster Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/writing-faster-python"&gt;https://ep2016.europython.eu//conference/talks/writing-faster-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Presentation on how you can write faster Python in your daily work. I
will briefly explain ways of profiling the code, discuss different
code structures and show how they can be improved. You will see what
is the fastest way to remove duplicates from a list, what is faster
than a _for_ loop or how “asking for permission” is slower than
“begging for forgiveness”.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Did you know that Python preallocates integers from -5 to 257 ?
Reusing them 1000 times, instead of allocating memory for a bigger
integer, can save you a couple of milliseconds of code’s execution
time. If you want to learn more about this kind of optimizations then,
… well, probably this presentation is not for you :) Instead of going
into such small details, I will talk about more _&amp;quot;sane&amp;quot;_ ideas for
writing faster code.&lt;/p&gt;
&lt;p&gt;After a very brief overview of how to optimize Python code (rule 1:
don’t do this, rule 2: don’t do this yet, rule 3: ok, but what if I
really want to do this ?), I will show simple and fast ways of
measuring the execution time and finally, discuss examples of how some
code structures could be improved.&lt;/p&gt;
&lt;p&gt;You will see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the fastest way of removing duplicates from a list&lt;/li&gt;
&lt;li&gt;How much faster your code is when you reuse the built-in functions instead of trying to reinvent the wheel&lt;/li&gt;
&lt;li&gt;What is faster than the good ol’ _for_ loop&lt;/li&gt;
&lt;li&gt;If the lookup is faster in a list or a set (and when it makes sense to use each)&lt;/li&gt;
&lt;li&gt;How the “It's better to beg for forgiveness than to ask for permission” rule works in practice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will NOT go into details of _&amp;quot;serious&amp;quot;_ optimization, like using
different Python implementation or rewriting critical code in C, etc.&lt;/p&gt;
</content><category term="EuroPython 2016"></category></entry><entry><title>Wait, IPython can do that?!</title><link href="https://pyvideo.org/europython-2019/wait-ipython-can-do-that.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/wait-ipython-can-do-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks that IPython could do: embedding IPython sessions,
starting IPython automatically when a test fails, taking advantage of
the startup files, not to mention all the various magic functions.&lt;/p&gt;
&lt;p&gt;It took me some time to discover all those features (if there is one
thing I would like you to take away from this talk, it’s that reading
the documentation of a tool that you are using &lt;em&gt;every day&lt;/em&gt; is probably a
good idea) and in this talk, I will give an overview of what you can do
with IPython REPL.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the things I will talk about:&lt;/div&gt;
&lt;div class="line"&gt;- Documentation with ? and ??, running shell functions in IPython,
magic functions&lt;/div&gt;
&lt;div class="line"&gt;- Profiles, startup files, configuration file, kernels, and extensions&lt;/div&gt;
&lt;div class="line"&gt;- How to better use IPython for debugging&lt;/div&gt;
&lt;div class="line"&gt;- How to use IPython for profiling&lt;/div&gt;
&lt;div class="line"&gt;- Alternatives to IPython REPL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk is for you if you are a casual user of IPython - you know some
of its features, but maybe not all of them and instead of reading
through the documentation, you would prefer to see someone giving an
overview of IPython features and how you can use them.&lt;/p&gt;
&lt;p&gt;This talk is NOT for you if you are up to date with IPython
documentation and you think you know most of its features.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Development"></category><category term="Ipython"></category><category term="Tooling"></category><category term="iPython"></category></entry><entry><title>Python Versions and Dependencies Made Easy</title><link href="https://pyvideo.org/pycon-au-2021/python-versions-and-dependencies-made-easy.html" rel="alternate"></link><published>2021-09-11T00:00:00+00:00</published><updated>2021-09-11T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2021-09-11:/pycon-au-2021/python-versions-and-dependencies-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Sebastian Witowski) Presentation on using pyenv, virtual environments, and pipx to build an easy-to-manage Python development setup. Setup, where you can easily switch between different Python versions, and you don't have to worry about messing up packages in your projects.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2021.pycon.org.au/program/YHTFLA/"&gt;https://2021.pycon.org.au/program/YHTFLA/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python, pycon …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Sebastian Witowski) Presentation on using pyenv, virtual environments, and pipx to build an easy-to-manage Python development setup. Setup, where you can easily switch between different Python versions, and you don't have to worry about messing up packages in your projects.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2021.pycon.org.au/program/YHTFLA/"&gt;https://2021.pycon.org.au/program/YHTFLA/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;python, pycon, australia, programming, conference, technical, pyconline, developers, panel, sessions, libraries, frameworks, community, sysadmins, students, education, data, science&lt;/p&gt;
&lt;p&gt;Videos licensed as CC-BY-NC-SA 4.0&lt;/p&gt;
&lt;p&gt;PyCon AU is the national conference for the Python programming community, bringing together professional, student and enthusiast developers, sysadmins and operations folk, students, educators, scientists, statisticians, and many others besides, all with a love for working with Python.&lt;/p&gt;
&lt;p&gt;PyCon AU informs the country’s Python developers with presentations, tutorials and panel sessions by experts and core developers of Python, as well as the libraries and frameworks that they rely on.&lt;/p&gt;
&lt;p&gt;Produced by Next Day Video Australia: &lt;a class="reference external" href="https://nextdayvideo.com.au"&gt;https://nextdayvideo.com.au&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Sep 11 17:30:00 2021 at Curlyboi Theatre&lt;/p&gt;
</content><category term="PyCon AU 2021"></category><category term="SebastianWitowski"></category><category term="pyconau"></category><category term="pyconau_2021"></category></entry><entry><title>Python Versions and Dependencies Made Easy</title><link href="https://pyvideo.org/pycon-india-2021/python-versions-and-dependencies-made-easy.html" rel="alternate"></link><published>2021-09-18T00:00:00+00:00</published><updated>2021-09-18T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2021-09-18:/pycon-india-2021/python-versions-and-dependencies-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Python Versions and Dependencies Made Easy - Sebastian Witowski&lt;/p&gt;
&lt;p&gt;This talk was presented at PyCon India 2021 Online.&lt;/p&gt;
&lt;p&gt;PyCon India is the largest gathering of Pythonistas in India for the Python programming language.
The 13th edition of PyCon India took place online from 17th Sept to 20th Sept 2021 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Python Versions and Dependencies Made Easy - Sebastian Witowski&lt;/p&gt;
&lt;p&gt;This talk was presented at PyCon India 2021 Online.&lt;/p&gt;
&lt;p&gt;PyCon India is the largest gathering of Pythonistas in India for the Python programming language.
The 13th edition of PyCon India took place online from 17th Sept to 20th Sept 2021.&lt;/p&gt;
&lt;p&gt;Talk Detail: &lt;a class="reference external" href="https://in.pycon.org/cfp/2021/proposals/python-versions-and-dependencies-made-easy~ejRqP/"&gt;https://in.pycon.org/cfp/2021/proposals/python-versions-and-dependencies-made-easy~ejRqP/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click here to subscribe to the PyCon India channel: &lt;a class="reference external" href="https://www.youtube.com/user/inpycon?sub_confirmation=1"&gt;https://www.youtube.com/user/inpycon?sub_confirmation=1&lt;/a&gt;
Follow PyCon India on Twitter: &lt;a class="reference external" href="https://twitter.com/pyconindia"&gt;https://twitter.com/pyconindia&lt;/a&gt;
Follow PyCon India on Facebook: &lt;a class="reference external" href="https://www.facebook.com/PyConIndia/"&gt;https://www.facebook.com/PyConIndia/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon India 2021"></category><category term="PyConIndia"></category><category term="PyConIndia2021"></category></entry><entry><title>Writing Faster Python 3</title><link href="https://pyvideo.org/pycon-italia-2022/writing-faster-python-3.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/writing-faster-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Faster Python 3 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Source code level optimization is often neglected - people don’t bother,
because getting a faster server often gives better results. But if you -
like me - always wonder what is the most efficient way to write some
code, then this talk is for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Faster Python 3 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Source code level optimization is often neglected - people don’t bother,
because getting a faster server often gives better results. But if you -
like me - always wonder what is the most efficient way to write some
code, then this talk is for you! Did you know that Python preallocates
integers from -5 to 257? Reusing them 1000 times, instead of allocating
memory for a bigger integer, can save you a couple milliseconds of
code’s execution time. If you want to learn more about this kind of
optimizations then, … well, probably this presentation is not for you :)
Instead of going into such small details, I will talk about more “sane”
ideas for writing faster code.&lt;/p&gt;
&lt;p&gt;After a brief overview of different levels of optimization and how they
work in Python, I will show you simple and fast ways of measuring the
execution time of your code and finally, discuss examples of how some
code structures could be improved.&lt;/p&gt;
&lt;p&gt;You will see: * The fastest way of removing duplicates from a list *
How much faster your code is when you reuse the built-in functions
instead of trying to reinvent the wheel * What is faster than the “for
loop” * If the lookup is faster in a list or a set * When it’s better
to beg for forgiveness than to ask for permission&lt;/p&gt;
&lt;p&gt;Speaker: Sebastian Witowski&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="cpython"></category><category term="development"></category></entry><entry><title>It’s 2019 and I’m still using Python 2. Should I be worried?</title><link href="https://pyvideo.org/pycon-jp-2019/its-2019-and-im-still-using-python-2-should-i-be-worried.html" rel="alternate"></link><published>2019-09-16T00:00:00+00:00</published><updated>2019-09-16T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-09-16:/pycon-jp-2019/its-2019-and-im-still-using-python-2-should-i-be-worried.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;01_402_It’s 2019 and I’m still using Python 2. Should I be worried?(Sebastian Witowski)&lt;/p&gt;
</content><category term="PyCon JP 2019"></category></entry><entry><title>Wait, IPython Can Do That?</title><link href="https://pyvideo.org/pycon-taiwan-2019/wait-ipython-can-do-that.html" rel="alternate"></link><published>2019-09-22T00:00:00+00:00</published><updated>2019-09-22T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-09-22:/pycon-taiwan-2019/wait-ipython-can-do-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 3, R0 11:30–12:00&lt;/p&gt;
&lt;p&gt;I’ve been using IPython since the beginning of my adventure with Python. Over the years, I've picked up more and more tricks that it could do.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share some of them with you:
- Documentation with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 3, R0 11:30–12:00&lt;/p&gt;
&lt;p&gt;I’ve been using IPython since the beginning of my adventure with Python. Over the years, I've picked up more and more tricks that it could do.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share some of them with you:
- Documentation with ? and ??, running shell functions in IPython, magic functions
- Profiles, startup files, configuration file, kernels, and extensions
- How to better use IPython for debugging
- How to use IPython for profiling
- Alternatives to IPython REPL&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://switowski.com/python/ipython/slides/2019/07/07/wait-ipython-can-do-that.html"&gt;https://switowski.com/python/ipython/slides/2019/07/07/wait-ipython-can-do-that.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Sebastian Witowski&lt;/p&gt;
&lt;p&gt;I'm a software engineer with 7 years of experience in full stack development, operations and leading small projects.
I had worked as a DevOps at CERN for the past 6 years, but recently I have decided to move to Python consulting and trainings.&lt;/p&gt;
&lt;p&gt;In my spare time, I like to give talks about Python, coding and productivity. Python is my main programming language, but I don't shy away from using different languages as well.&lt;/p&gt;
</content><category term="PyCon Taiwan 2019"></category></entry><entry><title>Modern Python Developer's Toolkit</title><link href="https://pyvideo.org/pycon-us-2020/modern-python-developers-toolkit.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/modern-python-developers-toolkit.html</id><content type="html"></content><category term="PyCon US 2020"></category><category term="tutorial"></category></entry><entry><title>Lightning Talks 2</title><link href="https://pyvideo.org/pycon-us-2021/lightning-talks-2.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/lightning-talks-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Aakanksha Chouhan - Moulding Data for ML&lt;/p&gt;
&lt;p&gt;Andres &amp;amp; Denny - PyCon Latam the conference you don't want to miss&lt;/p&gt;
&lt;p&gt;Cristián Maureira-Fredes - Python Chile and its first PyCon!&lt;/p&gt;
&lt;p&gt;Dia-ning Yudono - Parametrizing tests with unittest and pytest&lt;/p&gt;
&lt;p&gt;Gregory M. Kapfhammer - Committing to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Aakanksha Chouhan - Moulding Data for ML&lt;/p&gt;
&lt;p&gt;Andres &amp;amp; Denny - PyCon Latam the conference you don't want to miss&lt;/p&gt;
&lt;p&gt;Cristián Maureira-Fredes - Python Chile and its first PyCon!&lt;/p&gt;
&lt;p&gt;Dia-ning Yudono - Parametrizing tests with unittest and pytest&lt;/p&gt;
&lt;p&gt;Gregory M. Kapfhammer - Committing to Writing Good Commit Messages: Supporting the   Creation of Human and Machine-Readable Commit Messages with Python&lt;/p&gt;
&lt;p&gt;Rumanu - Save Sheldon, in 5 minutes!&lt;/p&gt;
&lt;p&gt;Sebastian Witowski - 9 Jupyter notebook tricks for your next Advent of Code&lt;/p&gt;
&lt;p&gt;Dhananjay Jindal - f-Strings: How cool are they?&lt;/p&gt;
&lt;p&gt;Grey Li - FastAPI Seems Good, so Why Don't We Build Something Similar For Flask?&lt;/p&gt;
&lt;p&gt;Jeremy Gibson - direnv will change your life... maybe.&lt;/p&gt;
&lt;p&gt;Jürgen Gmach - How to Maintain Many, Many, Many, Many... Many Git Repositories?&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Let's Write an IPython Extension (in IPython)</title><link href="https://pyvideo.org/pyohio-2020/lets-write-an-ipython-extension-in-ipython.html" rel="alternate"></link><published>2020-07-25T00:00:00+00:00</published><updated>2020-07-25T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2020-07-25:/pyohio-2020/lets-write-an-ipython-extension-in-ipython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython is a Python REPL on steroids. It has many features, but if they
are not enough, you can easily add new ones by writing an extension. In
this talk, I will show you how to write one. We will build a simple code
profiler that will measure the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython is a Python REPL on steroids. It has many features, but if they
are not enough, you can easily add new ones by writing an extension. In
this talk, I will show you how to write one. We will build a simple code
profiler that will measure the execution time of each command. And, for
an additional challenge, I will do everything without closing IPython.&lt;/p&gt;
</content><category term="PyOhio 2020"></category></entry><entry><title>9 Jupyter Notebook Tricks for Your Next Advent of Code</title><link href="https://pyvideo.org/pyohio-2021/9-jupyter-notebook-tricks-for-your-next-advent-of-code.html" rel="alternate"></link><published>2021-07-31T00:00:00+00:00</published><updated>2021-07-31T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2021-07-31:/pyohio-2021/9-jupyter-notebook-tricks-for-your-next-advent-of-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every year thousands of developers try to solve the programming puzzles
of the Advent of Code&lt;a class="reference external" href="#fn:1"&gt;1&lt;/a&gt; challenge. For many Pythonistas, their
favorite tool to do that is the Jupyter notebook. As the problems get
progressively more challenging, solving them step-by-step is an
excellent approach. You read some data …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every year thousands of developers try to solve the programming puzzles
of the Advent of Code&lt;a class="reference external" href="#fn:1"&gt;1&lt;/a&gt; challenge. For many Pythonistas, their
favorite tool to do that is the Jupyter notebook. As the problems get
progressively more challenging, solving them step-by-step is an
excellent approach. You read some data, play with it, solve the
small-scale problem and then try to solve the whole challenge.&lt;/p&gt;
&lt;p&gt;Apart from showing the output of each intermediate step, Jupyter
notebooks offer plenty of useful features. Including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easy access to the documentation&lt;/li&gt;
&lt;li&gt;Different debugging mechanisms&lt;/li&gt;
&lt;li&gt;Lightweight storage&lt;/li&gt;
&lt;li&gt;Shell commands&lt;/li&gt;
&lt;li&gt;Pastebin support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this lightning talk, I will show you how to use them when solving
problems in Jupyter Notebooks.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;blockquote&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first docutils container" id="fn-1"&gt;
&lt;p&gt;If you never heard about the Advent of Code - it's a series of
25 code challenges. Each of them is released daily between the
1st and 25th of December. It's like the advent calendar
(&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Advent_calendar"&gt;https://en.wikipedia.org/wiki/Advent_calendar&lt;/a&gt;), but instead of
chocolate or a small gift, you get frustration if you can't
solve a given problem. At least I do ;)&amp;nbsp;&lt;a class="reference external" href="#fnref:1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content><category term="PyOhio 2021"></category></entry></feed>