<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastian-witowski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-22T00:00:00+00:00</updated><entry><title>Wait, IPython Can Do That?</title><link href="https://pyvideo.org/pycon-taiwan-2019/wait-ipython-can-do-that.html" rel="alternate"></link><published>2019-09-22T00:00:00+00:00</published><updated>2019-09-22T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-09-22:pycon-taiwan-2019/wait-ipython-can-do-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 3, R0 11:30–12:00&lt;/p&gt;
&lt;p&gt;I’ve been using IPython since the beginning of my adventure with Python. Over the years, I've picked up more and more tricks that it could do.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share some of them with you:
- Documentation with ? and ??, running shell functions in IPython, magic functions
- Profiles, startup files, configuration file, kernels, and extensions
- How to better use IPython for debugging
- How to use IPython for profiling
- Alternatives to IPython REPL&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://switowski.com/python/ipython/slides/2019/07/07/wait-ipython-can-do-that.html"&gt;https://switowski.com/python/ipython/slides/2019/07/07/wait-ipython-can-do-that.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Sebastian Witowski&lt;/p&gt;
&lt;p&gt;I'm a software engineer with 7 years of experience in full stack development, operations and leading small projects.
I had worked as a DevOps at CERN for the past 6 years, but recently I have decided to move to Python consulting and trainings.&lt;/p&gt;
&lt;p&gt;In my spare time, I like to give talks about Python, coding and productivity. Python is my main programming language, but I don't shy away from using different languages as well.&lt;/p&gt;
</summary></entry><entry><title>It’s 2019 and I’m still using Python 2. Should I be worried?</title><link href="https://pyvideo.org/pycon-jp-2019/its-2019-and-im-still-using-python-2-should-i-be-worried.html" rel="alternate"></link><published>2019-09-16T00:00:00+00:00</published><updated>2019-09-16T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-09-16:pycon-jp-2019/its-2019-and-im-still-using-python-2-should-i-be-worried.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;01_402_It’s 2019 and I’m still using Python 2. Should I be worried?(Sebastian Witowski)&lt;/p&gt;
</summary></entry><entry><title>Wait, IPython can do that?!</title><link href="https://pyvideo.org/europython-2019/wait-ipython-can-do-that.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/wait-ipython-can-do-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks that IPython could do: embedding IPython sessions,
starting IPython automatically when a test fails, taking advantage of
the startup files, not to mention all the various magic functions.&lt;/p&gt;
&lt;p&gt;It took me some time to discover all those features (if there is one
thing I would like you to take away from this talk, it’s that reading
the documentation of a tool that you are using &lt;em&gt;every day&lt;/em&gt; is probably a
good idea) and in this talk, I will give an overview of what you can do
with IPython REPL.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the things I will talk about:&lt;/div&gt;
&lt;div class="line"&gt;- Documentation with ? and ??, running shell functions in IPython,
magic functions&lt;/div&gt;
&lt;div class="line"&gt;- Profiles, startup files, configuration file, kernels, and extensions&lt;/div&gt;
&lt;div class="line"&gt;- How to better use IPython for debugging&lt;/div&gt;
&lt;div class="line"&gt;- How to use IPython for profiling&lt;/div&gt;
&lt;div class="line"&gt;- Alternatives to IPython REPL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk is for you if you are a casual user of IPython - you know some
of its features, but maybe not all of them and instead of reading
through the documentation, you would prefer to see someone giving an
overview of IPython features and how you can use them.&lt;/p&gt;
&lt;p&gt;This talk is NOT for you if you are up to date with IPython
documentation and you think you know most of its features.&lt;/p&gt;
</summary><category term="Best Practice"></category><category term="Development"></category><category term="Ipython"></category><category term="Tooling"></category><category term="iPython"></category></entry><entry><title>Writing faster Python</title><link href="https://pyvideo.org/europython-2016/writing-faster-python.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2016-07-31:europython-2016/writing-faster-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Witowski - Writing faster Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/writing-faster-python"&gt;https://ep2016.europython.eu//conference/talks/writing-faster-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Presentation on how you can write faster Python in your daily work. I
will briefly explain ways of profiling the code, discuss different
code structures and show how they can be improved. You will see what
is the fastest way to remove duplicates from a list, what is faster
than a _for_ loop or how “asking for permission” is slower than
“begging for forgiveness”.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Did you know that Python preallocates integers from -5 to 257 ?
Reusing them 1000 times, instead of allocating memory for a bigger
integer, can save you a couple of milliseconds of code’s execution
time. If you want to learn more about this kind of optimizations then,
… well, probably this presentation is not for you :) Instead of going
into such small details, I will talk about more _&amp;quot;sane&amp;quot;_ ideas for
writing faster code.&lt;/p&gt;
&lt;p&gt;After a very brief overview of how to optimize Python code (rule 1:
don’t do this, rule 2: don’t do this yet, rule 3: ok, but what if I
really want to do this ?), I will show simple and fast ways of
measuring the execution time and finally, discuss examples of how some
code structures could be improved.&lt;/p&gt;
&lt;p&gt;You will see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the fastest way of removing duplicates from a list&lt;/li&gt;
&lt;li&gt;How much faster your code is when you reuse the built-in functions instead of trying to reinvent the wheel&lt;/li&gt;
&lt;li&gt;What is faster than the good ol’ _for_ loop&lt;/li&gt;
&lt;li&gt;If the lookup is faster in a list or a set (and when it makes sense to use each)&lt;/li&gt;
&lt;li&gt;How the “It's better to beg for forgiveness than to ask for permission” rule works in practice&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will NOT go into details of _&amp;quot;serious&amp;quot;_ optimization, like using
different Python implementation or rewriting critical code in C, etc.&lt;/p&gt;
</summary></entry></feed>