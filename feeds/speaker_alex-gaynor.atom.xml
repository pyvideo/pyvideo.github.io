<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alex-gaynor.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>Learning From Failure: Post Mortems</title><link href="https://pyvideo.org/pycon-us-2018/learning-from-failure-post-mortems.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/learning-from-failure-post-mortems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unless you work on pacemakers or at NASA, you've probably accepted the fact that you will make mistakes in your code, and those mistakes will creep into production. This talk will introduce you to post-mortems, and how to use them as a vehicle for improving your code and your process.&lt;/p&gt;
</summary><category term="post-mortem"></category></entry><entry><title>Code Review</title><link href="https://pyvideo.org/montreal-python/code-review.html" rel="alternate"></link><published>2014-04-14T00:00:00+00:00</published><updated>2014-04-14T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2014-04-14:montreal-python/code-review.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - According to Alex Gaynor (Rackspace), code review is fun. This talk will explore the benefits of code review, and a number of different workflows to enable it in both open source and commercial software development.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rackspace: &lt;a class="reference external" href="http://www.rackspace.com"&gt;http://www.rackspace.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex: &lt;a class="reference external" href="https://twitter.com/alex_gaynor"&gt;https://twitter.com/alex_gaynor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP45: &lt;a class="reference external" href="http://sflx.ca/mp45e"&gt;http://sflx.ca/mp45e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Panel: Python 3 Adoption and Barriers</title><link href="https://pyvideo.org/montreal-python/panel-python-3-adoption-and-barriers.html" rel="alternate"></link><published>2014-04-14T00:00:00+00:00</published><updated>2014-04-14T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-14:montreal-python/panel-python-3-adoption-and-barriers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - Python 3.4.0 was just released! Many Python developers are enthusiastic about the cleanups in the language and standard library, but many others suffer from missing features in the Python 2 line. What's the status of the migration? How are the core developers in tune with the larger community? Invited representatives, including CPython core developer Nick Coghlan and CPython and PyPy core developer Alex Gaynor share their experience and answer questions from the audience.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Brandon Rhodes: &lt;a class="reference external" href="https://twitter.com/brandon_rhodes"&gt;https://twitter.com/brandon_rhodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Victor Stinner: &lt;a class="reference external" href="https://twitter.com/victor_stinner"&gt;https://twitter.com/victor_stinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nick Coghlan: &lt;a class="reference external" href="https://twitter.com/ncoghlan_dev"&gt;https://twitter.com/ncoghlan_dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Gaynor: &lt;a class="reference external" href="https://twitter.com/alex_gaynor"&gt;https://twitter.com/alex_gaynor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Selena Deckelmann: &lt;a class="reference external" href="https://twitter.com/selenamarie"&gt;https://twitter.com/selenamarie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alexandre Vassalotti: &lt;a class="reference external" href="https://twitter.com/avassalotti"&gt;https://twitter.com/avassalotti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP45: &lt;a class="reference external" href="http://sflx.ca/mp45e"&gt;http://sflx.ca/mp45e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Documenting Domain Specific Knowledge</title><link href="https://pyvideo.org/write-the-docs-2014/documenting-domain-specific-knowledge.html" rel="alternate"></link><published>2014-05-05T00:00:00+00:00</published><updated>2014-05-05T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2014-05-05:write-the-docs-2014/documenting-domain-specific-knowledge.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of my career as a software engineer, I've written documentation for very general purpose tools, where users' had an existing familiarity. For the last six months I've been working on a cryptography library, a domain most developers are ignorant of. We set out with the goal of making our documentation accessible to any developer, regardless of previous cryptographic experience, which presents unique challenges. This talk will dive into what these challenges are, and how we try to solve them.&lt;/p&gt;
</summary><category term="documentation"></category></entry><entry><title>The cobbler's children have no shoes, or building better tools for ourselves</title><link href="https://pyvideo.org/pycon-us-2016/alex-gaynor-the-cobblers-children-have-no-shoes-or-building-better-tools-for-ourselves.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/alex-gaynor-the-cobblers-children-have-no-shoes-or-building-better-tools-for-ourselves.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Alex Gaynor&lt;/p&gt;
&lt;p&gt;As developers, we make programs which do things. But we don't build nearly enough programs to make our own jobs easier. Once, not all that long ago, we didn't even have continuous integration servers. This talk will go through what types of new specialized tools we, as developers, can and should be building to make our jobs better.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PyOhio 2010: PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy and Unladen-Swallow: Making your Python Fast&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="optimizing"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/chipy/pypy-and-unladen-swallow--making-your-python-fast.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-08:chipy/pypy-and-unladen-swallow--making-your-python-fast.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="chipy"></category><category term="optimization"></category><category term="performance"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>7 Years With Django: To Core Developer and Back</title><link href="https://pyvideo.org/django-birthday/7-years-with-django-to-core-developer-and-back.html" rel="alternate"></link><published>2015-07-11T00:00:00+00:00</published><updated>2015-07-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2015-07-11:django-birthday/7-years-with-django-to-core-developer-and-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One night, in September 2007, I read every page of Django's
documentation and the entire (then draft) Django Book. Over the next few
years I became a frequent contributor to Django, including becoming a
core developer and later a member of the DSF board. Now I'm largely
uninvolved with Django's development. This talk is the story of my time
with Django. This talk is a walk through my time with Django -- from
emailing Adrian to ask about attending a sprint that had already
happened, to contributing patches, to the multi-db GSOC, to Eric
Florenzano's keynote, becoming a core developer, joining the board, to
slowly fading away and becoming an emeritus developer.&lt;/p&gt;
</summary></entry><entry><title>Google Summer of Code Overview Panel</title><link href="https://pyvideo.org/djangocon-us-2009/google-summer-of-code-overview-panel.html" rel="alternate"></link><published>2009-09-10T00:00:00+00:00</published><updated>2009-09-10T00:00:00+00:00</updated><author><name>Zain Memon</name></author><id>tag:pyvideo.org,2009-09-10:djangocon-us-2009/google-summer-of-code-overview-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google Summer of Code Overview Panel&lt;/p&gt;
&lt;p&gt;Featuring Zain Memon, Alex Gaynor, Honza Kral, Marc Garcia&lt;/p&gt;
&lt;p&gt;Moderated question and answer about GSOC and Django.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2009"></category><category term="gsoc"></category></entry><entry><title>Lightning Talks Day 2</title><link href="https://pyvideo.org/djangocon-us-2009/djangocon-2009--lightning-talks-day-2.html" rel="alternate"></link><published>2009-09-09T00:00:00+00:00</published><updated>2009-09-09T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2009-09-09:djangocon-us-2009/djangocon-2009--lightning-talks-day-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks Day 2&lt;/p&gt;
&lt;p&gt;(00:09) Dive into CPython Bytecode - Alex Gaynor&lt;/p&gt;
&lt;p&gt;(05:10) Testing with pywatch - Chris Heisel&lt;/p&gt;
&lt;p&gt;(07:08) Pluggable Django E-Commerce - Aaron Cuker and someone else&lt;/p&gt;
&lt;p&gt;(12:13) Introduction to Surlex - Cody Soyland&lt;/p&gt;
</summary><category term="bytecode"></category><category term="cpython"></category><category term="djangocon"></category><category term="djangocon2009"></category><category term="pywatch"></category><category term="surlex"></category><category term="testing"></category></entry><entry><title>Rethinking the Reusable Application Paradigm</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--rethinking-the-reusable-applicati.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--rethinking-the-reusable-applicati.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the past few years the reusable application paradigm has been
considered one of the major selling points of Django, however the common
wisdom about what it means to make an application reusable isn't really
accurate. This talk is going to discuss ways to truly make your
applications reusable across &lt;em&gt;any&lt;/em&gt; project.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The common wisdom about reusable application says to do things like let
your views take arguments for things like the form class or the template
name. However, that doesn't satisfy most of the real need for
extendability: changing the business logic or altering models. This talk
is going to look at ways to combat these limitations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Class based views&lt;/li&gt;
&lt;li&gt;By making everything overidable in a view you can absolutely minimize
the need to &amp;quot;copy-paste&amp;quot; when changing the logic of things around.&lt;/li&gt;
&lt;li&gt;As seen in the admin.&lt;/li&gt;
&lt;li&gt;Do less&lt;/li&gt;
&lt;li&gt;brabeion&lt;/li&gt;
&lt;li&gt;Provide the absolute minimum at the model layer, and only small
wrappers for the business logic users can implement their own logic
to control how things happen.&lt;/li&gt;
&lt;li&gt;Related to the idea of &amp;quot;application frameworks&amp;quot;. Providing the tools
for others to build their logic around various helpers.&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;django-taggit&lt;/li&gt;
&lt;li&gt;Provide a concrete implementation, but allow swapping out of various
layers.&lt;/li&gt;
&lt;li&gt;Don't like the Tag model, swap it out, want a new intermediary model,
swap it out.&lt;/li&gt;
&lt;li&gt;django-registration&lt;/li&gt;
&lt;li&gt;Providing swappable backends to change behavior.&lt;/li&gt;
&lt;li&gt;Libraries&lt;/li&gt;
&lt;li&gt;django-filter&lt;/li&gt;
&lt;li&gt;django-fixture-generator&lt;/li&gt;
&lt;li&gt;django-templatetag-sugar&lt;/li&gt;
&lt;li&gt;django-compressor&lt;/li&gt;
&lt;li&gt;Providing tools for others to build around.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using these techniques you can develop reusable application that work
beyond any single use case. Of course there are cases where you don't
need any of these, and just need something that fits &amp;quot;traditional&amp;quot;
reusable application paradigm, so this talk will cover when that works
as well.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="modularizing"></category><category term="reuse"></category><category term="reusing"></category></entry><entry><title>A Summer in the Wild</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--a-summer-in-the-wild.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--a-summer-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A summer in the wild&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;I've spent this past summer away from Django, working for Quora,
venturing into the depths of a foreign codebase, and making it faster by
running on PyPy. This talk will feature the lessons I've learned about
Django, PyPy, and web development in general.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="pypy"></category><category term="web"></category></entry><entry><title>Take Two: If I got to do it all over again</title><link href="https://pyvideo.org/djangocon-us-2012/take-two-if-i-got-to-do-it-all-over-again.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-us-2012/take-two-if-i-got-to-do-it-all-over-again.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django has always had a strong commitment to backwards compatibility,
and is used by thousands of developers every day. This means that it's
very difficult to make large sweeping changes to Django. This talk is a
look at how I'd redesign different components of Django, if I got to do
it all over again.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk has two parts.&lt;/p&gt;
&lt;p&gt;First, identifying the principles we're trying to adhere to, and the
problems we're trying to solve by re-imagining every single API.&lt;/p&gt;
&lt;p&gt;Second, looking at specific changes to individual APIs.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Keynote: A divided web, a review of the role of frameworks</title><link href="https://pyvideo.org/djangocon-au-2013/keynote-a-divided-web-a-review-of-the-role-of-f.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/keynote-a-divided-web-a-review-of-the-role-of-f.html</id><summary type="html"></summary></entry><entry><title>NoSQL Panel</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-nosqlpanel416m4v.html" rel="alternate"></link><published>2010-05-26T00:00:00+00:00</published><updated>2010-05-26T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-05-26:djangocon-europe-2010/djangoconeu-nosqlpanel416m4v.html</id><summary type="html"></summary></entry><entry><title>Django Technical Design Panel</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-djangotechnicaldesignpanel420flv.html" rel="alternate"></link><published>2010-05-25T00:00:00+00:00</published><updated>2010-05-25T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2010-05-25:djangocon-europe-2010/djangoconeu-djangotechnicaldesignpanel420flv.html</id><summary type="html"></summary></entry><entry><title>What NoSQL support in the Django ORM looks like, and how do we get there</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-alexgaynorwhatnosqlsupportinthedjango.html" rel="alternate"></link><published>2010-05-24T00:00:00+00:00</published><updated>2010-05-24T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-05-24:djangocon-europe-2010/djangoconeu-alexgaynorwhatnosqlsupportinthedjango.html</id><summary type="html"></summary></entry><entry><title>Lightning Talks (day 1)</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-lightningtalksmontag905flv.html" rel="alternate"></link><published>2010-05-24T00:00:00+00:00</published><updated>2010-05-24T00:00:00+00:00</updated><author><name>Markus Zapke-Gründemann</name></author><id>tag:pyvideo.org,2010-05-24:djangocon-europe-2010/djangoconeu-lightningtalksmontag905flv.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Computer Science, Software Engineering, and the Scientific Method</title><link href="https://pyvideo.org/pycon-au-2013/computer-science-software-engineering-and-the-s.html" rel="alternate"></link><published>2013-07-06T00:00:00+00:00</published><updated>2013-07-06T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-07-06:pycon-au-2013/computer-science-software-engineering-and-the-s.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Classifying what type of job programmers do can be a challenge. Are we
engineers? Are we scientists? Craftspeople? Something else entirely? Are
software engineers, software developers, software architects, and
programmers all really the same thing? This talk explores the nature of
our work, and its relationship to the scientific method, including a
dive into epistemology.&lt;/p&gt;
</summary></entry><entry><title>Why Open Source Works</title><link href="https://pyvideo.org/pycon-ca-2013/why-open-source-works.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/why-open-source-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Open source software powers the world. But it defies a lot of
conventional expectations about how people organize and innovate. This
talk will explore the psychology, sociology, and economics of open
source, and how we come together to effectively build things.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the
real- time web with Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor (Eldarion)&lt;/p&gt;
&lt;p&gt;Websites are getting increasingly dynamic and realtime in order to
compete with desktop applications. This talk is an examination of 3
websites/tools I've built, all using Python. I'm going to try to explain
what we did to build these, and how you can do the same.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="realtime"></category><category term="web"></category></entry><entry><title>The Data Structures of Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--the-data-structures-of-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-data-structures-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Data Structures of Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Any Python programmer knows about the major builtin data strcutres,
lists, dicts, tuples, but do you always remember when you're supposed to
use them? Do you know about all the cool data structures hidden in the
standard library? This talk will be a review of the characteristics of
the different data structures, and a tour of idiomatic ways to use some
of the structures in the standard library.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;First, as a note this talk borders between survey and discuss in depth.
For each data structure I want to cover their implementation,
performance characteristics, and idiomatic usage (e.g. tuples vs.
lists), a lot of them have similar implementations so idiomatic usage
will dominate for some of them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The builtins (10 minutes)&lt;ul&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an array of pointers&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Immutable*&lt;/li&gt;
&lt;li&gt;Implemented as a fixed-length array of pointers&lt;/li&gt;
&lt;li&gt;dicts&lt;/li&gt;
&lt;li&gt;Unordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;Why no immutable variant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;Unordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;frozenset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Standard Library (10 minutes)&lt;ul&gt;
&lt;li&gt;OrderedDict&lt;/li&gt;
&lt;li&gt;Ordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a dict with a doubly-linked list running through
it.&lt;/li&gt;
&lt;li&gt;deque&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an unrolled, doubly-linked list&lt;/li&gt;
&lt;li&gt;namedtuple&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects, &lt;em&gt;also&lt;/em&gt; addressable by
name.&lt;/li&gt;
&lt;li&gt;Immutable&lt;/li&gt;
&lt;li&gt;Implemented as a tuple with extra properties&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;Like a list... but limited to &amp;quot;primitve&amp;quot; types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance characteristics.&lt;/li&gt;
&lt;li&gt;Writing your own (5 minutes)&lt;ul&gt;
&lt;li&gt;Abstract Base Classes&lt;/li&gt;
&lt;li&gt;Duck typing&lt;ul&gt;
&lt;li&gt;Why would you want to use them!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's available.&lt;/li&gt;
&lt;li&gt;OrderedSet&lt;/li&gt;
&lt;li&gt;An ordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a set with a doubly-linked list running through it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Questions (5 minutes)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="abc"></category><category term="datastructures"></category><category term="dequearray"></category><category term="dict"></category><category term="ducktyping"></category><category term="frozenset"></category><category term="list"></category><category term="namedtuple"></category><category term="ordereddict"></category><category term="orderedset"></category><category term="pycon"></category><category term="pycon2011"></category><category term="set"></category><category term="tuple"></category></entry><entry><title>Why is Python slow and how PyPy can help?</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is Python slow and how PyPy can help?&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski and Alex Gaynor&lt;/p&gt;
&lt;p&gt;PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance. This talk is going
to be a deep dive into what exactly makes Python such a hard language to
optimize, how PyPy is organized, and what optimizations our JIT can do
(and what it can't do) for your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will detail how a python interpreter works internally and why
some operations are costly. We'll go through several python features,
how they work, why they're slow in CPython and how we're fixing it.&lt;/p&gt;
&lt;p&gt;The list of mentioned features is not exhaustive, however we will try to
focus at least on the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dynamic language - In Python code we have no known types, like a
statically typed language. Even operations like &amp;quot;a + b&amp;quot; can do
anything, unless we know more about the code, and the types it is
operating on.&lt;/li&gt;
&lt;li&gt;Frame introspection - Frame objects need to be allocated for every
function call, and all local variables are stored on the frame, and
must be accessible from further down the call stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy uses a novel approach called &amp;quot;virtualizables&amp;quot; which makes it
possible to avoid frame allocation in most common cases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Object model - All user defined Python objects have a dictionary
which stores their attributes, as does every type. When Python does
an attribute lookup this requires at least two dictionary lookups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In PyPy we use an approach similar to the one used by V8 with hidden
classes (except more PyPy specific) called map dictionaries and other
optimizations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FFI calls - Calling C from Python is costly and hard to optimize. In
PyPy we expose C APIs to Python code via ctypes. This part explains
how we can optimize ctypes calls.&lt;/li&gt;
&lt;li&gt;array module - Users of CPython's array module probably know it can
save them quite a bit of memory, however it's also slower than using
a list, due to the overhead of boxing and unboxing on every
operations. Here we will tie everything together and describe how the
array module is much faster with PyPy's JIT, combining our
optimizations to: unbox values, remove the dynamicism within traces,
and deliver great performance.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="jit"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category><category term="vm"></category></entry><entry><title>Why PyPy by example</title><link href="https://pyvideo.org/pycon-us-2012/why-pypy-by-example.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/why-pypy-by-example.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the goals of PyPy is to make existing Python code faster, however
an even broader goal was to make it possible to write things in Python
that previous would needed to be written in C or other low-level
language. This talk will show examples of this, and describe how they
represent the tremendous progress PyPy has made, and what it means for
people looking to use PyPy.&lt;/p&gt;
</summary></entry><entry><title>How to get the most out of your PyPy</title><link href="https://pyvideo.org/pycon-us-2012/how-to-get-the-most-out-of-your-pypy.html" rel="alternate"></link><published>2012-03-07T00:00:00+00:00</published><updated>2012-03-07T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2012-03-07:pycon-us-2012/how-to-get-the-most-out-of-your-pypy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;For many applications PyPy can provide performance benefits right out of
the box. However, little details can push your application to perform
much better. In this tutorial we'll give you insights on how to push
pypy to it's limites. We'll focus on understanding the performance
characteristics of PyPy, and learning the analysis tools in order to
maximize your applications performance.&lt;/p&gt;
</summary></entry><entry><title>So you want to write an interpreter?</title><link href="https://pyvideo.org/pycon-us-2013/so-you-want-to-write-an-interpreter.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/so-you-want-to-write-an-interpreter.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;You're a programmer, you use interpreter and compilers every day (and
twice on Sundays!). But how do these things work? Could you build one
yourself? What would it take? Where would you start? This talk takes you
through the process, from lexing to interpreting, and leaves you ready
to start on your own language!&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Fast Python, Slow Python</title><link href="https://pyvideo.org/pycon-us-2014/fast-python-slow-python.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/fast-python-slow-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The common wisdom is that Python is slow. And yet people run high
performance software on it. It's hard to make Python fast, and yet there
are incredibly high performance Python VMs. This talk breaks down the
facts and the myths of Python performance.&lt;/p&gt;
</summary></entry><entry><title>Pickles are for Delis, not Software</title><link href="https://pyvideo.org/pycon-us-2014/pickles-are-for-delis-not-software.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/pickles-are-for-delis-not-software.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;You may have encountered the pickle or cPickle libraries, and used them
to persist some state about your program. But how do they work? This
talk explores how the pickle protocol works, what its advantages are,
and its disadvantages&lt;/p&gt;
</summary></entry><entry><title>Techniques for Debugging Hard Problems</title><link href="https://pyvideo.org/pycon-us-2015/techniques-for-debugging-hard-problems.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/techniques-for-debugging-hard-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes your programs have bugs. Often they're shallow things, simple
AttributeErrors or TypeErrors. Sometimes they're large, complex, and
nearly impossible to debug. This talk explores techniques for figuring
these out.&lt;/p&gt;
</summary></entry><entry><title>PyConZA 2012: Scaling Django: serving traffic and growing your team</title><link href="https://pyvideo.org/pycon-za-2012/pyconza-2012-scaling-django-serving-traffic-and.html" rel="alternate"></link><published>2012-10-04T00:00:00+00:00</published><updated>2012-10-04T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2012-10-04:pycon-za-2012/pyconza-2012-scaling-django-serving-traffic-and.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Scaling Django: serving traffic and growing your team: Alex Gaynor's
talk at PyConZA 2012&lt;/p&gt;
</summary><category term="pyconza"></category><category term="pyconza2012"></category></entry></feed>