<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 21 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Solid Python Application Deployments For Everybody - Questions</title><link>https://pyvideo.org/europython-2013/solid-python-application-deployments-for-everybody-questions.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hynek Schlawack</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/solid-python-application-deployments-for-everybody-questions.html</guid><category>best-practices</category><category>software-engineering</category><category>project-management</category><category>principles</category><category>automation</category></item><item><title>Flussi di dati GPS in near real-time</title><link>https://pyvideo.org/europython-2013/flussi-di-dati-gps-in-near-real-time.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessio Siniscalchi</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/flussi-di-dati-gps-in-near-real-time.html</guid><category>quality-assurance</category><category>automation</category><category>sensor networks</category><category>realtime</category></item><item><title>Functional testing with Python</title><link>https://pyvideo.org/europython-2013/functional-testing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kay Schluehr</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/functional-testing-with-python.html</guid><category>testing</category><category>automation</category></item><item><title>Solid Python Application Deployments For Everybody</title><link>https://pyvideo.org/europython-2013/solid-python-application-deployments-for-everybody.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hynek Schlawack</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/solid-python-application-deployments-for-everybody.html</guid><category>best-practices</category><category>software-engineering</category><category>project-management</category><category>principles</category><category>automation</category></item><item><title>IoT con Python: si può fare! dall'ESP8266 alla casa domotica</title><link>https://pyvideo.org/pycon-italia-2018/iot-con-python-si-puo-fare-dallesp8266-alla-casa-domotica.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se anche tu negli ultimi tempi hai sentito l’irrefrenabile bisogno di
accendere le luci della tua casa mentre sei in vacanza o di guardare
cosa fanno i tuoi animaletti quando non ci sei, ma non ti accontenti…
allora questo talk fa per te!&lt;/p&gt;
&lt;p&gt;Vi farò vedere come è possibile avere uno stack completo di sviluppo per
la domotica completamente in python, dalla programmazione dei sensori
attraverso gli economici ESP 8266 e suoi derivati ai sistemi di gestione
complessi.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lelio Campanile</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/iot-con-python-si-puo-fare-dallesp8266-alla-casa-domotica.html</guid><category>micropython</category><category>iot</category><category>Python</category><category>practice</category><category>automation</category><category>raspberrypi</category></item><item><title>Sphinxを使って本を書こう</title><link>https://pyvideo.org/pycon-japan-2012/sphinxwoshi-tsuteben-woshu-kou.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;私の過去2冊の翻訳・執筆した本の経験から、Sphinxを活用して執筆環境を自動化したときの手順とそのメリットなどを紹介します。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">清水川 貴之</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-16:pycon-japan-2012/sphinxwoshi-tsuteben-woshu-kou.html</guid><category>sphinx</category><category>automation</category></item><item><title>Roboto Framework for Test Code Coverage for cloud services.</title><link>https://pyvideo.org/pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test case design is an important phase of software testing life cycle
where test cases are identified. Designing test cases for cloud
solutions requires a different approach from traditional application
oriented testing. The quality which is multidimensional will include
more attributes like network resiliency, fault recovery, reliability and
availability when it comes to cloud-based solutions. If such aspects
when not encompassed through test development framework, it will lead to
high chances of defect leakage in production in an agile mode of
delivery. We propose a strategy to design the test cases which traverse
across different levels of testing to find gaps using the Roboto
framework with Python. The solution provides the teams and the product
owners to get a picture of what is getting tested and how much of
coverage is done. The data can be used in team release discussions to
build confidence in the tests that gets executed as part of that
release. &lt;a class="reference external" href="https://github.com/robotframework/robotframework"&gt;https://github.com/robotframework/robotframework&lt;/a&gt; Testing
performed for features in a product is diverse and can be widely
categorized into functional, non-functional like reliability, fault
injections etc. Though developing test cases for functional changes is
achievable, arriving at test cases for non-functional requirements is
challenging in the given two-week sprint cycle of agile, and so leads to
defect leakage. Some vital modules in a project would have been running
in production for years and would have different sets of teams working
at different periods. Quantifying test code coverage and quality only by
a number of test cases per feature does not suffice as testing is
multidimensional and has to span across different levels. Measuring and
improving the test code coverage is the challenge generally faced by
product teams.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">khushbu parakh</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</guid><category>quality-assurance</category><category>Functional Testing</category><category>Python</category><category>testing</category><category>robustness</category><category>integration</category><category>automation</category><category>framework</category><category>deployment</category><category>google-cloud</category></item><item><title>Taking care of PostgreSQL with Ansible</title><link>https://pyvideo.org/pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; is a powerful automation tool written in &lt;strong&gt;Python&lt;/strong&gt;. With
its modules already built for &lt;strong&gt;PostgreSQL&lt;/strong&gt;, we can easily manage the
most advanced open source database, making sure the configuration is
exact in every detail and repeatable as many times as it is needed. In
this talk we will understand how &lt;strong&gt;Ansible&lt;/strong&gt; works, see some of its main
modules for system/cloud administration, and learn how it can be used to
orchestrate &lt;strong&gt;PostgreSQL&lt;/strong&gt; deployments, managing all parts of the
process at ease. A &lt;strong&gt;PostgreSQL&lt;/strong&gt; test environment configuration, using
&lt;strong&gt;Ansible&lt;/strong&gt; and &lt;strong&gt;Vagrant&lt;/strong&gt;, will be shown as an example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rubens Souza</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</guid><category>postgresql</category><category>database</category><category>devops</category><category>automation</category><category>ansible</category></item><item><title>Deploy automatizzato di un progetto Python 3/Django con Ansible</title><link>https://pyvideo.org/pycon-italia-2017/deploy-automatizzato-di-un-progetto-python-3django-con-ansible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La mia applicazione è pronta e funziona senza problemi sulla mia
macchina con il server di sviluppo, ma non ho chiaro come portarla in un
ambiente di produzione. Ci sono parecchi servizi che permettono il
deploy con un solo click, adatti soprattutto a semplici siti, ma essi
non sono pienamente configurabili e nascondono il modo in cui il server
è effettivamente organizzato. Anche se molti usano ingegnose soluzioni
PaaS, vale ancora la pena capire come costruire da zero un ambiente di
produzione con Linux, Python 3, Django e uWSGI. Nel talk questo classico
stack verrà brevemente introdotto e si mostrerà poi come automatizzare
la configurazione e la procedura di deploy con un &lt;a class="reference external" href="https://github.com/marco-santamaria/django-%20ansible-deploy"&gt;playbook
Ansible&lt;/a&gt;
che verrà messo a disposizione. Una particolare enfasi verrà data
all’uso di variabili d’ambiente per la configurazione del progetto
seguendo l’approccio delle twelve-factor-app. Inoltre verranno spiegati
i concetti più importanti di Ansible (playbook, ruoli, template, moduli,
inventari).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Santamaria</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/deploy-automatizzato-di-un-progetto-python-3django-con-ansible.html</guid><category>deploy</category><category>devops</category><category>automation</category><category>nginx</category><category>ansible</category><category>best-practices</category><category>django</category><category>uwsgi</category></item><item><title>When Dependencies between Test Cases are Inevitable</title><link>https://pyvideo.org/pycon-israel-2016/when-dependencies-between-test-cases-are-inevitable.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You need to test your images on various instance types in the cloud, but which tools do you use? How to run dozens of thousands of test cases on hundreds of machines in the cloud in parallel? Is it OK to have dependencies between test cases to make this task less expensive?&lt;/p&gt;
&lt;p&gt;Dva is an open source validation tool which is applicable to various images and instance types. Using your image, it will launch instances of different types in defined regions and will execute test cases in parallel. How?&lt;/p&gt;
&lt;p&gt;All test cases are represented as a Directed Acyclic Graph structure – parents and children. Then these test cases are assigned to workers by a modified BFS algorithm that allows processing of sibling test cases in parallel. It includes test result processing tools such as a Bugzilla module to report bugs for you. 3rd-party test case modules are supported too.&lt;/p&gt;
&lt;p&gt;This tool is used by Red Hat QE for RHEL image release sanity testing in EC2, however Fedora images and OpenStack cloud are supported too. To test a RHEL release, Dva launches hundreds of machines of various types in all EC2 regions and executes a set of nearly 70 test cases with dependencies on every machine in parallel.&lt;/p&gt;
&lt;p&gt;Source Code/Home page: &lt;a class="reference external" href="https://github.com/RedHatQE/dva/"&gt;https://github.com/RedHatQE/dva/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Topics: Open Source, Cloud, QA/QE, Automation, Python&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/irina-igulina.pdf"&gt;http://il.pycon.org/2016/static/sessions/irina-igulina.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Irina Gulina</dc:creator><pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-21:pycon-israel-2016/when-dependencies-between-test-cases-are-inevitable.html</guid><category>Open Source</category><category>Cloud</category><category>QA/QE</category><category>Automation</category></item><item><title>Automate your web deployments with fabric</title><link>https://pyvideo.org/pytexas-2015/automate-your-web-deployments-with-fabric.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to use fabric to deploy your web applications and other thoughts on
web deployments in general.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes Thomas</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-09:pytexas-2015/automate-your-web-deployments-with-fabric.html</guid><category>fabric</category><category>Automation</category></item><item><title>Continuous building with Pybuilder</title><link>https://pyvideo.org/pycon-de-2013/continuous-building-with-pybuilder.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pybuilder ist ein erweiterbares und benutzerfreundliches &lt;em&gt;continuous
Build Tool&lt;/em&gt; für Python, welches die Arbeit mit fremden (und eigenen)
Python-Projekten angenehmer macht. Damit lassen sich diverse Buildtools
wie coverage, unittest, pip oder auch setuptools zentral
instrumentieren. Und das Beste zum Schluß : 100% open source!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">YADT Project</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/continuous-building-with-pybuilder.html</guid><category>automation</category><category>build</category><category>buildtool</category><category>lifecycle</category><category>maven</category><category>pybuilder</category><category>python</category></item></channel></rss>