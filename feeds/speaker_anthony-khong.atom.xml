<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anthony-khong.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-02-23T00:00:00+00:00</updated><entry><title>Property Based Testing in Python with Hypothesis</title><link href="https://pyvideo.org/pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html" rel="alternate"></link><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><author><name>Anthony Khong</name></author><id>tag:pyvideo.org,2019-02-23:pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;High unit-test coverage is great, but it cannot effectively find bugs triggered by interactions between multiple features. Since it is not scalable to write tests for all possible interactions, we turn to property-based testing - an approach where we generate tests instead of writing them.  Property-based testing (PBT) is a random-testing approach that first became popular in the Haskell community as QuickCheck. It works by generating random examples to find minimal counterexamples to a pattern or law that ought to always hold true. PBT is especially useful in testing edge cases and interactions between multiple features, particularly in stateful systems. This talk introduces the principles of PBT along with its history and success stories. We then illustrate PBT patterns and examples in Python using Hypothesis. Finally, we see how it fits in with TDD and integration testing.&lt;/p&gt;
</summary><category term="hypothesis"></category><category term="testing"></category></entry><entry><title>Pythonic Functional Programming with Coconut</title><link href="https://pyvideo.org/pycon-thailand-2018/pythonic-functional-programming-with-coconut.html" rel="alternate"></link><published>2018-06-16T00:00:00+00:00</published><updated>2018-06-16T00:00:00+00:00</updated><author><name>Anthony Khong</name></author><id>tag:pyvideo.org,2018-06-16:pycon-thailand-2018/pythonic-functional-programming-with-coconut.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With functions being first-class citizens, Python allows us to build programmes with higher-order functions. However, it is often cumbersome to do something that would be bread-and-butter in a typical functional language. The lack of concise syntax for lambdas, currying and function compositions is a nuisance. The lack of boilerplate-less pattern matching and pattern matching could be a deal breaker. This talk presents Coconut, a functional superset of Python, which aims to enable writing elegant functional code, whilst staying with the familiar Python environment and libraries. We will identify various pain points of writing functional code in Python, and demonstrates how Coconut addresses the problems. In particular, we will start with a basic coding problem, and move on to designing a machine-learning pipeline with a functional approach.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I am a data scientist in Agoda, an innovative accommodation website that places a huge emphasis in machine learning algorithms. I have been using Python on a daily basis since 2013 as a freelance data scientist and algorithmic trader. I am also a functional programming enthusiast, and my experience mainly comes from writing Scala code in Agoda and using Haskell for scripting. I enjoy writing functional-style code in Python, and have been actively trying to marry the two for years. My other passion include high-performance computing, Bayesian statistics and Vim.&lt;/p&gt;
</summary></entry></feed>