<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 22 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Continuous Delivery starts at your Development Environment</title><link>https://pyvideo.org/pycon-italia-2018/continuous-delivery-starts-at-your-development-environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous Delivery is the automation of our deployment and QA, isn’t
it? The industrialized software production chain that solves all our
problems. Well, kind of. It’s more than that. Because: You still have
pain when …&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You bring new developers on board (e.g. for installing Docker and
friends, IDEs and command line tools).&lt;/li&gt;
&lt;li&gt;Your development machine behaves weird or needs an upgrade. (Can you
simply re-install it and continue working without losing a day or a
week of productivity?)&lt;/li&gt;
&lt;li&gt;You need to explain to your colleagues, or even convince them, how to
configure which of their tools?&lt;/li&gt;
&lt;li&gt;Everyone turns to you (or your admin wizard) when there are troubles
to get some tools or projects running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talks explains how to bootstrap a super-efficient startup, SMB, or
just any development team that needs a development infrastructure.
You’ll see a demo of The Foreman, Puppet, Ansible and optionally FreeIPA
and virtualization technology, which gets you from zero to 100 in just a
few hours. This talk explains how you do infrastructure like software
development. Everything under control. Everything under version control.&lt;/p&gt;
&lt;p&gt;Come join the show, and take home the recipe that tells you how to step
up the next level of Continuous Delivery! - If you’re a beginner fear
not: this talk starts with an introduction to CI/CD and brings you up to
speed quickly.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 22 April&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Bittner</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/continuous-delivery-starts-at-your-development-environment.html</guid><category>infrastructure</category><category>continuous-delivery</category><category>agile</category><category>ansible</category><category>puppet</category><category>free-software</category><category>FreeIPA</category><category>infrastructure-as-code</category></item><item><title>Heroku: come deployare un'app Django in 10 minuti!</title><link>https://pyvideo.org/pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se sei stanco di occuparti di &lt;em&gt;load balancing&lt;/em&gt; , &lt;em&gt;routing&lt;/em&gt; e &lt;em&gt;cloud
monitoring&lt;/em&gt; e vorresti dedicarti solo a &lt;em&gt;lambda function&lt;/em&gt; , &lt;em&gt;list
comprehension&lt;/em&gt; o &lt;em&gt;class-based view&lt;/em&gt; allora questo è il talk che fa per
te.&lt;/p&gt;
&lt;p&gt;Heroku è la piattaforma PaaS ( &lt;em&gt;Platform as a Service&lt;/em&gt; ) che consente
agli sviluppatori di creare, eseguire e gestire applicazioni interamente
nel cloud. Ad essere fornito come servizio non c’è solo l’hardware, ma
anche la piattaforma che astrae l’hardware stesso e permette di
usufruire di funzionalità che consentono di ottenere bilanciamenti
automatici, gestione del deployment e altro ancora.&lt;/p&gt;
&lt;p&gt;Il vantaggio per l’utente è quello di concentrarsi solo ed
esclusivamente sullo sviluppo dell’applicazione senza perdersi
nell’analisi di problematiche legate all’ambiente in cui essa deve
essere distribuita ottenendo così la scalabilità e l’affidabilità
necessaria.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sabatino Severino</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</guid><category>paas</category><category>continuous-integration</category><category>github</category><category>continuous-delivery</category><category>Python</category><category>pipeline</category><category>django</category><category>heroku</category><category>git</category><category>deployment</category><category>web development</category></item><item><title>DevOps di applicazioni Python (e non solo) su OpenShift</title><link>https://pyvideo.org/pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenShift Origin è la Platform-as-a-Service opensource di riferimento.
Basata su Kubernetes e Docker, contiene features aggiuntive e
integrazioni con altri componenti che semplificano le pratiche di
DevOps.&lt;/p&gt;
&lt;p&gt;Dopo una breve introduzione ad Openshift ed alla sua architettura,
vedremo come:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fare il setup di infrastrutture applicative microservice-based (es.
microservizi Python Flask/Django, single page application Angular,
ecc…)&lt;/li&gt;
&lt;li&gt;creare una piattaforma di Continuous Integration e Continuous
Delivery&lt;/li&gt;
&lt;li&gt;implementare e gestire la CI/CD di microservice-based application
sfruttando l’integrazione con Git e Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architettura di base di OpenShift&lt;/li&gt;
&lt;li&gt;come costruire un &lt;em&gt;project&lt;/em&gt; OpenShift: &lt;em&gt;builds&lt;/em&gt; e &lt;em&gt;deployments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;automatizzare il setup mediante &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;utilizzare Git, Jenkins e Openshift per creare una semplice pipeline
di CI/CD&lt;/li&gt;
&lt;li&gt;strategie di deployment avanzate: &lt;em&gt;blue-green deployment&lt;/em&gt; , &lt;em&gt;A/B
deployment&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisiti"&gt;
&lt;h4&gt;Prerequisiti&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Git e Jenkins&lt;/li&gt;
&lt;li&gt;conoscenza base dei concetti CI/CD e DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Fiore</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</guid><category>microservices</category><category>continuous-integration</category><category>git</category><category>continuous-delivery</category><category>kubernetes</category><category>devops</category><category>jenkins</category><category>docker</category><category>OpenShift</category></item><item><title>Trying Continuous Delivery</title><link>https://pyvideo.org/pycon-japan-2012/trying-continuous-delivery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will share why we tried continuous development and delivery process, what have been done, what succeeded and – probably more importantly – what failed through location-based social networking service development using Python on Google App Engine.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">古川 亨</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-16:pycon-japan-2012/trying-continuous-delivery.html</guid><category>continuous delivery</category><category>continuous integration</category><category>googleappengine</category></item><item><title>From 0 to Continuous Delivery in 30 minutes.</title><link>https://pyvideo.org/pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you wrote this neat software, which uses one or two cool 3rd party packages and now you have to get it running on your test or prod servers. Now you could check out your code and install the dependencies manually but that seems like a lot of wasted time, right? Shouldn't there be a more convenient way of doing this?&lt;/p&gt;
&lt;p&gt;Yes! And it's easier than you think! In this talk you'll learn how to build a Continuous Delivery pipeline for your python (or whatever) projects in 30 Minutes.&lt;/p&gt;
&lt;p&gt;In the beginning you'll get a quick introduction into the topic and the used tools, which are open source and free to use. For those who know a little about the subject: We will use conda (&lt;a class="reference external" href="https://conda.io"&gt;https://conda.io&lt;/a&gt;) to build the software package and for the dependency handling. GitLab.com will process the actual pipeline for us and Anaconda.com serves us with a package distribution channel.&lt;/p&gt;
&lt;p&gt;After that it's &amp;quot;hands on&amp;quot; time. We will go step by step trough the process. Starting with the creation of a little dummy program. Then extending the dummy in such manner that it can be build into a package. Afterwards we will create the pipeline and finally do a demo deploy. And if the gods of conference internet are merciful, you see all this as a live demonstration.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Wölfe</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</guid><category>hands on</category><category>continuous delivery</category><category>devops</category><category>python</category><category>gitlab</category><category>conda</category></item><item><title>Continuous Delivery for Iot with Python and Iottly</title><link>https://pyvideo.org/pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We know, continuous delivery is one of the current buzzwords (much like
IoT was a couple of years ago). But think of an industrial IoT project
connecting thousands of remote and inaccessible devices which should be
kept secure and updated over time. Now, imagine you can just write
Python code for your devices, test it over-the-internet both locally in
the lab, and in a real test environment simply by pushing your code to
specific branches and finally just pushing to master to update the
entire fleet.&lt;/p&gt;
&lt;p&gt;During the talk we will use Iottly to showcase this continuous delivery
pattern for the internet of things, with live code and connected devices
(Raspberry Pi).&lt;/p&gt;
&lt;p&gt;Iottly is a Development and Management Cloud Service for IoT Projects,
built by TomorrowData. Iottly is written in Python and is open source
(github). It features a Python sandbox for the devices, an online editor
to program the devices over-the-internet, and the integration with git
as the base for continuous delivery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Terna</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/continuous-delivery-for-iot-with-python-and-iottly.html</guid><category>raspberrypi</category><category>git</category><category>continuous-delivery</category><category>iot</category><category>over-the-air firmware upgrade</category><category>InternetOfThings</category><category>InternetDelleCose</category><category>github</category><category>IDE</category></item><item><title>Desplegando Python continuamente sin esfuerzo</title><link>https://pyvideo.org/pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los términos &amp;quot;despliegue continuo&amp;quot; e &amp;quot;integración continua&amp;quot; están cada vez más presentes en el léxico del programador. Si bien Python es un lenguaje tremendamente apropiado para aplicar estas prácticas, la cantidad de herramientas, opciones o, simplemente, de conceptos hace que el recién llegado alcance un nivel de confusión tal que la tarea parezca imposible. Usando herramientas habituales en Python mostraremos que construir un sistema de despliegue continuo es cómodo y sencillo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ana López Pérez</dc:creator><pubDate>Sun, 24 Sep 2017 10:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</guid><category>continuous integration</category><category>continuous delivery</category></item></channel></rss>