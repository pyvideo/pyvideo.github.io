<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 08 Jun 2017 00:00:00 +0000</lastBuildDate><item><title>Lightning talks Thursday</title><link>https://pyvideo.org/pycon-cz-2017/lightning-talks-thursday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks Thursday&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Viktor St√≠skala</dc:creator><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-08:pycon-cz-2017/lightning-talks-thursday.html</guid><category>lightning talks</category></item><item><title>Effectively running python applications in Kubernetes/OpenShift</title><link>https://pyvideo.org/pycon-us-2017/effectively-running-python-applications-in-kubernetesopenshift.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google, Red Hat, Intel, Huawei, Mirantis, Deis and many, many others are
investing a lot of time and effort into improving Kubernetes. I bet, you
have encountered that name at least once in the past twelve months,
either on Hacker News, Reddit, or somewhere else. Do you want to learn
more about the best container orchestration in the universe, but were
afraid of the setup complexity? Do you want to see how easy it is to run
any application using containers? Do you want to experience the joy of
scaling application with a single click? This, and a lot more will be
discussed in details. In this tutorial, every attendee will be provided
with an environment, and step by step instructions necessary to setup
the environment, build and deploy a microservices based sample
application. Alternatively, a sample application of any choosing can be
used throughout the entire tutorial. All that will be performed on
OpenShift, which is a Red Hat distribution of Kuberenets with some
add-ons that will be described in details at the beginning of the
tutorial. To wet your appetite even more, here are some of the topics we
are going to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;automatic build and deployment&lt;/li&gt;
&lt;li&gt;git integration&lt;/li&gt;
&lt;li&gt;image registry integration&lt;/li&gt;
&lt;li&gt;scaling application&lt;/li&gt;
&lt;li&gt;containers security&lt;/li&gt;
&lt;li&gt;batch tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and much more.&lt;/p&gt;
&lt;p&gt;After the session, every person will be able to play around with the
accompanying code repository that was used in the tutorial, which
includes detailed instructions how to run it on your own from scratch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Szulik</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/effectively-running-python-applications-in-kubernetesopenshift.html</guid></item><item><title>Colorful deployments</title><link>https://pyvideo.org/pycon-pl-2016/colorful-deployments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have created your awesome application, deployed it for the very
first time, now what? How you handle application updates, what are the
possible approaches? Do you pick your deployment strategy by your
favorite color, blue- green, canary, other? Yet, the decision is very
simple, or I should rather say switching from one strategy to other is
as simple as never before. During this presentation I will show you
three different deployment strategies and how to apply those to sample
python application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Szulik</dc:creator><pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-14:pycon-pl-2016/colorful-deployments.html</guid></item><item><title>Microservices on OpenShift v3</title><link>https://pyvideo.org/pycon-pl-2015/microservices-on-openshift-v3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to Martin Fowler, microservices &amp;quot;is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.&amp;quot; (&lt;a class="reference external" href="http://martinfowler.com/articles/microservices.html"&gt;http://martinfowler.com/articles/microservices.html&lt;/a&gt;) That definition sounds very promising and makes you think about miscroservices architecture as something very easy. But is it really that simple to create such services? If you think about each of the pieces separately then maybe the answer is &amp;quot;yes&amp;quot;, but what about that moment when your project grows into more than 5 tasks? What about deploying them into tens, hundreds or thousands of instances? What about rolling out a new release of a single component or even dozens of them? You can see that the problem becomes very complex, very quickly. But now can you imagine a world where doing such complex tasks will be as easy as pressing one button (or invoking one command for CLI nerds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Szulik</dc:creator><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-15:pycon-pl-2015/microservices-on-openshift-v3.html</guid></item></channel></rss>