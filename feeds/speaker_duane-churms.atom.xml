<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_duane-churms.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Managing 2000+ CPEs with Celery and Django</title><link href="https://pyvideo.org/pycon-za-2017/managing-2000-cpes-with-celery-and-django.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Duane Churms</name></author><id>tag:pyvideo.org,2017-10-06:pycon-za-2017/managing-2000-cpes-with-celery-and-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We implemented an interface between a TR069 Auto Configuration Server
(ACS) and an ISP's billing system. This system ensures consistency
between data on the billing system and over 2000 CPEs (Customer
Premises Equipment) in the field. It prevents fraud by ensuring that
credentials are only used on the devices for which they are intended.
Django was used to present an API to the billing system, which can
provision credentials for each CPE or deprovision a CPE. Celery is
used to perform asynchronous communication with the ACS, which can
take several seconds per call.&lt;/p&gt;
&lt;p&gt;We encountered several challenges during this project, such as TR069
parameter locations being inconsistent across CPE models and firmware
versions. A mapping system had to be implemented to allow all device
models to be managed. This talk covers the challenges we faced and the
approach we used to overcome these challenges.&lt;/p&gt;
</summary></entry></feed>