<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Ryota SUENAGA</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ryota-suenaga.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-02T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Queick: A simple job-queue system for Python – Ryota SUENAGA (PyCon Taiwan 2021)</title><link href="https://pyvideo.org/pycon-taiwan-2021/queick-a-simple-job-queue-system-for-python-ryota-suenaga-pycon-taiwan-2021.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Ryota SUENAGA</name></author><id>tag:pyvideo.org,2021-10-02:/pycon-taiwan-2021/queick-a-simple-job-queue-system-for-python-ryota-suenaga-pycon-taiwan-2021.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, 10:05-10:35&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In this talk, I introduce the concept of a job queue system named Queick that I individually developed, its internal architecture, and comparison with other job queue systems. Queick is a simple job queue system for Python. The main features are; 1. only …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, 10:05-10:35&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In this talk, I introduce the concept of a job queue system named Queick that I individually developed, its internal architecture, and comparison with other job queue systems. Queick is a simple job queue system for Python. The main features are; 1. only std libraries are used 2. in-memory data store 3. retry when network connection available Queick stands on the idea of &amp;quot;Deadly Simple&amp;quot;, thus, it is made of only standard libraries. This talk includes 4 topics. First, the overview of Queick and its application. Second, the general architecture of a job-queue system. Third, the design and the internal implementation of Queick. In the end, I will explain my OSS development experience. You will get the following knowledge through my presentation; general features and architecture of a job-queue system and things to be aware of when multi-thread programming is needed by using Python. &lt;a class="reference external" href="https://github.com/asmsuechan/queick"&gt;https://github.com/asmsuechan/queick&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Queick is published at &lt;a class="reference external" href="https://github.com/asmsuechan/queick"&gt;https://github.com/asmsuechan/queick&lt;/a&gt;. Also, there is a post at &lt;a class="reference external" href="https://dev.to"&gt;https://dev.to&lt;/a&gt; (&lt;a class="reference external" href="https://dev.to/asmsuechan/queick-a-simple-job-queue-system-for-python-1jhi"&gt;https://dev.to/asmsuechan/queick-a-simple-job-queue-system-for-python-1jhi&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I will give my audience not only Queick specific information like my effort and my hardships, but also general information about job-queue system. Actually, the main point of my presentation is a comprehension of job-queue system through my explanation of Queick architecture.&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.
HackMD: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2FSkVaByKMF"&gt;https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2FSkVaByKMF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Ryota SUENAGA&lt;/p&gt;
&lt;p&gt;asmsuechan. A software developer working for M3, Inc. in Tokyo, Japan. 实际上，我会说一点儿中文。&lt;/p&gt;
</content><category term="PyCon Taiwan 2021"></category></entry></feed>