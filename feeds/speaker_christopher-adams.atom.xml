<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Christopher Adams</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_christopher-adams.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Epic South Disasters: or, Why You Actually Need to Pay Attention to your DBMS</title><link href="https://pyvideo.org/djangocon-us-2013/epic-south-disasters-or-why-you-actually-need-to.html" rel="alternate"></link><published>2013-10-03T00:00:00+00:00</published><updated>2013-10-03T00:00:00+00:00</updated><author><name>Christopher Adams</name></author><id>tag:pyvideo.org,2013-10-03:/djangocon-us-2013/epic-south-disasters-or-why-you-actually-need-to.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Epic South Disasters: or, Why You Actually Need to Pay Attention to your
DBMS&lt;/p&gt;
&lt;p&gt;Wednesday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Using South has its gotchas. I'll go over some of them by using colorful
examples involving data loss and hard-to-recover states. Abstract&lt;/p&gt;
&lt;p&gt;Epic …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Epic South Disasters: or, Why You Actually Need to Pay Attention to your
DBMS&lt;/p&gt;
&lt;p&gt;Wednesday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Using South has its gotchas. I'll go over some of them by using colorful
examples involving data loss and hard-to-recover states. Abstract&lt;/p&gt;
&lt;p&gt;Epic South Disasters: or, why you actually need to pay attention to your
DBMS&lt;/p&gt;
&lt;p&gt;A lot of people use South to manage database migrations. It's a great
addition to the Django space that allows you to iterate quickly, without
spending a lot of time writing and testing schema migrations. But what
happens when South does things you didn't expect it to do? From the
quibbles of differing database backends to phantom post_save signals
sent during data migrations, this talk will offer a set of warnings
illustrated by example. Prepare to be horrified.&lt;/p&gt;
</content><category term="DjangoCon US 2013"></category></entry><entry><title>Optimizing your webapp by using django-debug-toolbar</title><link href="https://pyvideo.org/djangocon-us-2014/optimizing-your-webapp-by-using-django-debug.html" rel="alternate"></link><published>2014-09-19T00:00:00+00:00</published><updated>2014-09-19T00:00:00+00:00</updated><author><name>Christopher Adams</name></author><id>tag:pyvideo.org,2014-09-19:/djangocon-us-2014/optimizing-your-webapp-by-using-django-debug.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk explains how to perform SQL query analysis and how to rewrite
your views to reduce the number of queries Django uses in evaluating
your model objects and their attributes. Special emphasis will be given
to the powerful methods &amp;quot;select_related&amp;quot; and &amp;quot;prefetch_related.&amp;quot; I
will highlight the problem with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk explains how to perform SQL query analysis and how to rewrite
your views to reduce the number of queries Django uses in evaluating
your model objects and their attributes. Special emphasis will be given
to the powerful methods &amp;quot;select_related&amp;quot; and &amp;quot;prefetch_related.&amp;quot; I
will highlight the problem with a naive use of the ORM, how to target
code for optimization, and the beneficial result.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FPWg/"&gt;http://amara.org/v/FPWg/&lt;/a&gt;&lt;/p&gt;
</content><category term="DjangoCon US 2014"></category></entry><entry><title>A Related Matter: Optimizing your webapp by using django-debug-toolbar, select_related(), and prefetch_related()</title><link href="https://pyvideo.org/djangocon-us-2024/a-related-matter-optimizing-your-webapp-by-using-django-debug-toolbar-select_related-and-prefetch_related.html" rel="alternate"></link><published>2024-09-23T00:00:00+00:00</published><updated>2024-09-23T00:00:00+00:00</updated><author><name>Christopher Adams</name></author><id>tag:pyvideo.org,2024-09-23:/djangocon-us-2024/a-related-matter-optimizing-your-webapp-by-using-django-debug-toolbar-select_related-and-prefetch_related.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What happens in an HTTP request-response cycle is often difficult to understand. Optimizing database queries is a crucial aspect of web development, yet it often remains shrouded in mystery for many beginners. By attending this talk, attendees will gain practical insights into how to leverage django-debug-toolbar to inspect an …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What happens in an HTTP request-response cycle is often difficult to understand. Optimizing database queries is a crucial aspect of web development, yet it often remains shrouded in mystery for many beginners. By attending this talk, attendees will gain practical insights into how to leverage django-debug-toolbar to inspect an HTTP request-response cycle. By revealing and fixing pathological queries, developers can improve application performance and user experience. The talk will cover indexing, select_related, prefetching, and other optimization strategies.&lt;/p&gt;
&lt;p&gt;During the session, I will guide attendees through the following key points:
1. Understanding Query Execution: Exploring the anatomy of a QuerySet, focusing on immutability, lazy evaluation, and the fact that a QuerySet is not a query.
2. Introduction to django-debug-toolbar: An overview of what django-debug-toolbar is and how it can be integrated into Django projects.
3. Identifying Pathological Queries: Techniques for using django-debug-toolbar to identify slow or inefficient database queries within an HTTP request.
4. Strategies for Optimization: Practical tips and strategies for optimizing identified queries, including indexing, select_related, prefetching, and other optimization.
5. Real-World Examples: Illustrative examples and case studies demonstrating the impact of query optimization on application performance.&lt;/p&gt;
&lt;p&gt;This talk is ideal for beginners in Django development who are looking to deepen their understanding of query optimization and improve the performance of their Django applications. Attendees should have a basic familiarity with Django concepts such as models and basic database design, but no prior experience with query optimization is required.&lt;/p&gt;
</content><category term="DjangoCon US 2024"></category></entry></feed>