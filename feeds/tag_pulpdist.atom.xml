<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pulpdist.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-08-22T00:00:00+00:00</updated><entry><title>Path Dependent Development: Why on Earth are you using SQL Alchemy as a JSON validator?</title><link href="https://pyvideo.org/pycon-au-2012/path-dependent-development-why-on-earth-are-you.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/path-dependent-development-why-on-earth-are-you.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The PulpDist project uses SQL Alchemy as part of a custom JSON
validator. This could be seen as an unusual choice, so it's worth
exploring the way this approach came to be adopted. Practicing iterative
development means coping with the tension between &amp;quot;doing the simplest
thing that could possibly work&amp;quot; to meet immediate project requirements
and avoiding &amp;quot;reinventing the wheel&amp;quot;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PulpDist project uses SQL Alchemy as part of a custom JSON
validator. This could be seen as an unusual choice, so it's worth
exploring the way this approach came to be adopted.&lt;/p&gt;
&lt;p&gt;Practicing iterative development means coping with the inevitable
tension between &amp;quot;doing the simplest thing that could possibly work&amp;quot; to
meet immediate project requirements and avoiding &amp;quot;reinventing the wheel&amp;quot;
in order to take full advantage of existing software components.&lt;/p&gt;
&lt;p&gt;This means that iterative software designs are inevitably path
dependent: decisions made in early iterations can shape later aspects of
a project in unexpected ways. These early influences may even predate
the project itself, instead being a consequence of wider organisational
policies and the personal preferences and abilities of key developers.&lt;/p&gt;
&lt;p&gt;Understanding some of these factors can help with understanding why:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;good enough&amp;quot; is usually a better target than &amp;quot;perfect&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Not Invented Here&amp;quot; syndrome is not always the villain it is
frequently made out to be&lt;/li&gt;
&lt;li&gt;the need to extensively rewrite existing components is not always a
sign of past failure&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pulpdist"></category></entry></feed>