<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>Javascript para programadores python</title><link>https://pyvideo.org/pycon-ar-2012/javascript-para-programadores-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Muchos de nosotros programamos Python pero nos vemos ocasionalmente
obligados a programar Javascript (ya sea para trabajar en web o integrar
con otra herramienta). Esta charla compara muchos aspectos en detalle de
Javascript y los compara con Python. La charla asume buena familiaridad
con el modelo de objetos y de ejecución de python. También se menciona
como implementar algunos features interesantes de Javascript en Python.
La charla no requiere conocimiento previo de Javascript, pero si un buen
conocimiento previo de Python. El foco es en el lenguaje base (con lo
cual no se toca jquery, DOM u otras herramientas &amp;quot;externas&amp;quot;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel F. Moisset</dc:creator><pubDate>Sat, 17 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-17:pycon-ar-2012/javascript-para-programadores-python.html</guid></item><item><title>Ponete las pilas con Django</title><link>https://pyvideo.org/pycon-ar-2012/ponete-las-pilas-con-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Si bien Django viene con &amp;quot;baterías incluidas&amp;quot; lo suficiente para poder
desarrollar stand-alone con él, existen decenas de herramientas
importantes y útiles fuera del core que pueden ser de mucho valor para
nuestro proyecto. Esta charla muestra un poutpurri de las herramientas y
aplicaciones que más útiles me han resultado y que son de propósito más
general, con lo cual si estás desarrollando un proyecto en django
probablemente también te interesen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel F. Moisset</dc:creator><pubDate>Fri, 16 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-16:pycon-ar-2012/ponete-las-pilas-con-django.html</guid></item><item><title>Python and static types: Let's use mypy!</title><link>https://pyvideo.org/pycon-uk-2016/python-and-static-types-lets-use-mypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel F Moisset&lt;/p&gt;
&lt;p&gt;Python has always been one of the most dynamic languages, and that's the most important factor in making it as flexible and expressive as it is. However, some recent efforts being done to also bring the world of static typing into Python, initially as a 3rd party project called mypy, and currently with some support in the core language in the form of PEP-484.&lt;/p&gt;
&lt;p&gt;Will this make Python a more boring, restrictive, and Java-like language? Is this practical given how dynamic python programs are? are the tools ready for production use? are they hard to use? What are the real benefits? My talk intends to give some background and answer these questions, although the title should be a spoiler about what the answers will be!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel F Moisset</dc:creator><pubDate>Sun, 18 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-18:pycon-uk-2016/python-and-static-types-lets-use-mypy.html</guid></item></channel></rss>