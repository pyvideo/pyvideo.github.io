<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>AsyncIO in production - War Stories</title><link>https://pyvideo.org/europython-2019/asyncio-in-production-war-stories.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My team has been running AsyncIO in production for over 2 years now and
the only thing I can say about my experience with it is: &amp;quot;Oh boy, what a
rollercoaster of feelings&amp;quot;. I've experienced laughs and tears, sweat and
blood but also sang songs of glory. AsyncIO is currently the biggest
buzzword in the Python world advertised as a silver bullet capable of
solving all Python's shortcomings in the field of performance. However,
it also brings a burden of being a completely new approach with a fresh
implementation which is not often mentioned and taken into
consideration. In some of my team's projects we've achieved a great
success thanks to AsyncIO, but there's been a few where we decided to
get rid of it and replace it with a more traditional fork-join
architecture. I'd like to share my experience with AsyncIO, tell some
War Stories and discuss which projects it suits perfectly and which ones
should avoid it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Wysokinski</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/asyncio-in-production-war-stories.html</guid><category>ASYNC / Concurrency</category><category>Debugging</category><category>Python 3</category><category>Use Case</category></item><item><title>Running Python code in parallel and asynchronously</title><link>https://pyvideo.org/europython-2017/running-python-code-in-parallel-and-asynchronously.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My outline will be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What does it mean to run code in parallel in Python? How does it differ from concurrency? Can they be applied at the some time?&lt;/li&gt;
&lt;li&gt;GIL and why it complicates parallelism in Python (CPython), but only to some extent.&lt;/li&gt;
&lt;li&gt;Difference between a thread and a process from the OS point of view.&lt;/li&gt;
&lt;li&gt;When parallelism in Python is useful and when to avoid it.&lt;/li&gt;
&lt;li&gt;Description of how to achieve parallel execution in CPython and how to do it properly.&lt;/li&gt;
&lt;li&gt;Possible traps when using parallel programming in Python.&lt;/li&gt;
&lt;li&gt;What happens if the code runs both in parallel and asynchronously?&lt;/li&gt;
&lt;li&gt;Is it really beneficial?&lt;/li&gt;
&lt;li&gt;How such execution can be achieved?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the outline shows I will focus on the parallel part as it is an
important topic in our current time of multicore processors and
multiprocessor systems.&lt;/p&gt;
&lt;p&gt;The topic has been discussed a lot of times but mainly from the
scientific point of view, where it's been used for speeding up
calulcations time.  I will not go into these use cases (e.g. using
MPI) but rather discuss it from web development point of view (e.g.
multi worker applications).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Wysokinski</dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-11:europython-2017/running-python-code-in-parallel-and-asynchronously.html</guid></item><item><title>Parallel Python</title><link>https://pyvideo.org/pycon-pl-2016/parallel-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people believe that GIL completely rules out executing Python code
in parallel. It's true that GIL limits it to some extent, however the
rich ecosystem of Python modules not only allows that, but even offers
several ways of how it can be achieved. During the talk I will describe
these approaches together with their corresponding modules. I will also
briefly discuss when using parallelism in Python might be beneficial,
when to avoid it and what possible traps might be encountered during
parallel execution of Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Wysokiński</dc:creator><pubDate>Fri, 14 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-14:pycon-pl-2016/parallel-python.html</guid></item></channel></rss>