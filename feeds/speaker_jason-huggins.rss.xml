<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 May 2018 00:00:00 +0000</lastBuildDate><item><title>Keynote - Jason Huggins</title><link>https://pyvideo.org/pycon-us-2018/keynote-jason-huggins.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jason Huggins&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-10:pycon-us-2018/keynote-jason-huggins.html</guid><category>keynote</category></item><item><title>Sunday Afternoon Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(02:20) Steve Holden - Lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest
stuff, mock&lt;/p&gt;
&lt;p&gt;(08:00) Harald Armin Massa - The real harm of functional programming&lt;/p&gt;
&lt;p&gt;(11:41) Karl ? - FreeBSD certiciation&lt;/p&gt;
&lt;p&gt;(13:50) Peter Fein - Please Pirate&lt;/p&gt;
&lt;p&gt;(19;15) Chris McDonough - writing books with Sphinx
(&lt;a class="reference external" href="http://bfg.repoze.org/book"&gt;repoze.bfg&lt;/a&gt;);
&lt;a class="reference external" href="https://www.createspace.com/"&gt;createspace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(22:05) Chris Petrilli - celery, distributed task queue&lt;/p&gt;
&lt;p&gt;(26:30) Godefroid Chapelle - vim and pdb&lt;/p&gt;
&lt;p&gt;(29:20) ? - fork() vs. threads&lt;/p&gt;
&lt;p&gt;(33:40) - doing pyweek game with a large number of contributors&lt;/p&gt;
&lt;p&gt;(38:05) Jason Huggins - Orbison&lt;/p&gt;
&lt;p&gt;(43:20) Noufal Brahim - State of Python community in India&lt;/p&gt;
&lt;p&gt;(47:40) Mike MÃ¼ller - EuroSciPy 2010&lt;/p&gt;
&lt;p&gt;(49:50) David gives away stuff, sprint intros, ...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</guid><category>lightning talks</category><category>celery</category><category>euroscipy</category><category>euroscipy2010</category><category>fork</category><category>freebsd</category><category>functionalprogramming</category><category>india</category><category>orbison</category><category>pdb</category><category>pycon</category><category>pycon2010</category><category>pyweek</category><category>sphinx</category><category>threads</category><category>unittest</category><category>vim</category></item><item><title>Python - The Secret Sauce in the Open Cloud</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--python---the-secret-sauce-in-the-open.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python - The Secret Sauce in the Open Cloud&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;This talk will go into detail on current cloud computing technology,
specifically OpenStack and libvirt and how Python is the &amp;quot;secret sauce&amp;quot;
that powers the open cloud. We'll show how to bring up your own cloud
&amp;quot;from scratch&amp;quot;, and explain why you would do such a thing.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Covered topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to use VirtualBox&lt;/li&gt;
&lt;li&gt;How to use kvm&lt;/li&gt;
&lt;li&gt;How to use libvirt with Python&lt;/li&gt;
&lt;li&gt;How to check out, build, and deploy OpenStack&lt;/li&gt;
&lt;li&gt;How to setup and maintain your own cloud&lt;/li&gt;
&lt;li&gt;Real world examples&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python---the-secret-sauce-in-the-open.html</guid><category>kvm</category><category>libvirt</category><category>openstack</category><category>pycon</category><category>pycon2011</category><category>virtualbox</category></item><item><title>Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster,
and more Pythonicly&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;Selenium is a popular web application testing tool for acceptance
testing dynamic web applications. Selenium 2.0 has a different
architecture that makes it leaner, meaner, and more pythonic -- for
testing desktop &lt;em&gt;and&lt;/em&gt; mobile web (iPhone/Android) apps. This talk will
go into detail on how Selenium 2 works. If you like testing and Python,
you'll enjoy what's cooking in Selenium 2.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Selenium was originally created by Jason Huggins and his team at
ThoughtWorks in 2004 as a tool for cross-browser acceptance testing of
dynamic web apps -- apps that use JavaScript heavily on the client. Over
the years, the Selenium tool family has expanded to include a Firefox
record and playback tool (Selenium IDE), a Remote Control server that
allows API access from any major programming language, and a Grid server
that allows tests to run in parallel across many machines.&lt;/p&gt;
&lt;p&gt;Despite it's widespread industry adoption, the Selenium project is far
from done. Selenium's goal is to drive any browser the same way an end
user would (e.g. opening pages, clicking buttons, entering text, etc.)
with any programming language on any OS platform. It's an ambitious
goal, and with a steady stream of new browsers (Chrome), new platforms
(Android, iPhone), and new HTML5 technologies (video, canvas, offline
storage) to support, just keeping up is an arduous task.&lt;/p&gt;
&lt;p&gt;Astute observers will note, though, the bulk of Selenium's automation
engine is implemented in JavaScript, which is confined by the browser's
security sandbox in which it executes JavaScript code. That security
sandbox ultimately is at odds with Selenium's goal to drive the browser
just as a user would. A user has no problem interacting with security
alerts for untrusted certificates, or file upload dialog boxes, but
Selenium can't deal with these kinds of things easily without extra
effort.&lt;/p&gt;
&lt;p&gt;Enter WebDriver. There's a lot in common between the Selenium and
WebDriver projects. They're both tools for automated testing of web
applications, and both aspire to offer browser test automation from any
language on any platform. However, they do their thing in radically
different ways. Selenium uses the strategy that JavaScript is the one
common tool available for automating all browsers, even though its
capabilities can be highly constrained. Meanwhile, WebDriver leverages
the strategy that acknowledges different automation strategies work best
for different browsers. COM works best for IE on Windows, Apple Events
for Safari on OS X. And Firefox, well, the best way to natively automate
Firefox is to turn it into a telnet server. (But that's a whole other
PyCon talk entirely!) WebDriver aims to natively drive each browser the
best way possible for maximum capability, then hiding those differences
between lower level C and C++ APIs, and finally exposing the
functionality through the appropriate C/C++ mechanism for each target
language, such as using ctypes for Python. With WebDriver's technical
approach, anything a user can do is now possible in test automation
code.&lt;/p&gt;
&lt;p&gt;This talk will go into detail explaining how Selenium and WebDriver (aka
Selenium 2) work, comparing the strengths and weaknesses of each tool's
approach to browser automation. The talk will then explain what Selenium
2.0 looks like and how to use it.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Description of problem space&lt;ul&gt;
&lt;li&gt;More browsers&lt;/li&gt;
&lt;li&gt;More frequent browser releases&lt;/li&gt;
&lt;li&gt;HTML 5 - video, canvas, offline storage&lt;/li&gt;
&lt;li&gt;The web in more places - Mobile, Chrome OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium&lt;/li&gt;
&lt;li&gt;Strengths of Selenium&lt;/li&gt;
&lt;li&gt;Description of challenges for Selenium 1&lt;ul&gt;
&lt;li&gt;Javascript security sandbox&lt;/li&gt;
&lt;li&gt;Same origin policy / cross-site scripting&lt;/li&gt;
&lt;li&gt;OS-level popups&lt;/li&gt;
&lt;li&gt;Speed / stability&lt;/li&gt;
&lt;li&gt;Java as the cross-language integration point (aka Not Very
Pythonic, eh?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium 2 (aka WebDriver)&lt;/li&gt;
&lt;li&gt;Strengths of Selenium 2&lt;/li&gt;
&lt;li&gt;How Selenium 2 is more pythonic&lt;ul&gt;
&lt;li&gt;(Lots and lots of example code goes here.)&lt;/li&gt;
&lt;li&gt;Spoiler Alert: No Java server required!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to test Android apps&lt;/li&gt;
&lt;li&gt;How to test iPhone apps&lt;/li&gt;
&lt;li&gt;Selenium development roadmap&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</guid><category>browsers</category><category>embedded</category><category>html5</category><category>pycon</category><category>pycon2011</category><category>selenium</category><category>webdriver</category></item><item><title>37. Building a Robot that Can Play Angry Birds on a Smartphone (or Robots are the Future of Testing)</title><link>https://pyvideo.org/pycon-us-2012/37-building-a-robot-that-can-play-angry-birds-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A poster session for a hands-on demo of &amp;quot;BitbeamBot&amp;quot;. It started as an
art project, but it has a much more serious practical application:
mobile web testing. To trust that your mobile app truly works, you need
an end-to-end test on the actual device. BitbeamBot is an
Arduino-powered open-source hardware CNC robot that can test any
application on any mobile device.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-11:pycon-us-2012/37-building-a-robot-that-can-play-angry-birds-on.html</guid></item><item><title>Building a Robot that Can Play Angry Birds on a Smartphone, (or Robots are the Future of Testing)</title><link>https://pyvideo.org/pycon-us-2012/building-a-robot-that-can-play-angry-birds-on-a-s.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Can your robot play Angry Birds? On an iPhone? Mine can. I call it
&amp;quot;BitbeamBot&amp;quot;. It started as an art project, but it has a much more
serious practical application: mobile web testing. To trust that your
mobile app truly works, you need an end-to-end test on the actual
device. BitbeamBot is an Arduino-powered open-source hardware CNC robot
that can test any application on any mobile device.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:pycon-us-2012/building-a-robot-that-can-play-angry-birds-on-a-s.html</guid></item></channel></rss>