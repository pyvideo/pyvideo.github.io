<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_europython-2018.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-27T00:00:00+00:00</updated><entry><title>A tale of refactoring</title><link href="https://pyvideo.org/europython-2018/a-tale-of-refactoring.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Emmanuelle Delescolle</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/a-tale-of-refactoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A couple years ago I was approached by a client to help them improve the
performance and maintainability of their code.&lt;/p&gt;
&lt;p&gt;That code was filled with very long functions, some of them with very
similar code and the project was really hard to understand as a whole.&lt;/p&gt;
&lt;p&gt;My first reflex was to refactor this code code to make it more
understandable. In my opinion, it did fit part of my assignment as
understandable code is easier to maintain but it was also very helpful
later in letting me make small changes with full knowledge of what was
going to be affected by those changes.&lt;/p&gt;
&lt;p&gt;Large methods and functions is something that creeps into our code
whether we plan for it or not. This talk is about one way to deal with
it.&lt;/p&gt;
&lt;p&gt;This talk will be based on code provided by the GildedRose Refcatoring
Kata: &lt;a class="reference external" href="https://github.com/emilybache/GildedRose-Refactoring-Kata"&gt;https://github.com/emilybache/GildedRose-Refactoring-Kata&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prerequisites: - Basic knowledge of Python - Basic knowledge of OOP&lt;/p&gt;
&lt;p&gt;Goals: - Demonstrate one approach for refactoring code - Show how to
leverage Python’s dynamic nature to make code simpler&lt;/p&gt;
</summary></entry><entry><title>A Taxonomy of Decorators: A-E</title><link href="https://pyvideo.org/europython-2018/a-taxonomy-of-decorators-a-e.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/a-taxonomy-of-decorators-a-e.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will briefly go over the various decorator syntaxes before
breaking up the common usages of decorators into 5 categories.
Effectively, these are design patterns for decorators. The usages to be
considered are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A - Argument Changing Decorators – Decorators that change a
function’s arguments, including changing its signature&lt;/li&gt;
&lt;li&gt;B - Binding Decorators – Decorators that implement the Descriptor
Protocol, such as the builtins: &amp;#64;property, &amp;#64;classmethod, and
&amp;#64;staticmethod&lt;/li&gt;
&lt;li&gt;C - Control Flow Decorators – Decorators that change when or whether
the function will be called, such as &amp;#64;retry or &amp;#64;lrucache&lt;/li&gt;
&lt;li&gt;D - Descriptive Decorators – Decorators that do not change the
function, but create a reference to it elsewhere, like pytest.mark
and flask.app.route&lt;/li&gt;
&lt;li&gt;E - Execution Decorators – Decorators that retrieve source code
and/or AST and alter it.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Addressing multithreading and multiprocessing in transparent and Pythonic ways</title><link href="https://pyvideo.org/europython-2018/addressing-multithreading-and-multiprocessing-in-transparent-and-pythonic-ways.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>David Liu</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/addressing-multithreading-and-multiprocessing-in-transparent-and-pythonic-ways.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the increase in computing power, harnessing and controlling one’s
code out of the single-threaded realm becomes an ever-increasing
problem, coupled with the desire to stay in the Python layer. With the
recent tools and frameworks that have been published, escaping the GIL
cleanly is much easier than before, allow one’s Python code to
effectively utilize multi-core and many core architectures in the most
Pythonic ways possible. In this talk, learn about how to utilize static
multiprocessing for process pinning, and effectively balancing thread
pools with a monkey-patched import of threading modules.&lt;/p&gt;
&lt;p&gt;Overview:&lt;/p&gt;
&lt;p&gt;Introduction to multithreading and multiprocessing in Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;History of multithreading+multiprocessing in Python, classic
frameworks&lt;/li&gt;
&lt;li&gt;Problems that can occur (oversubscription, nested parallelism issues,
process hopping, pool resource on shared machines)&lt;/li&gt;
&lt;li&gt;Python accessing bigger hardware over the last few years (28+ cores,
etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When to stay in the GIL, and when to escape it&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The advantages and safety of the GIL&lt;/li&gt;
&lt;li&gt;Python-level exiting of the GIL; analysis of when to return to
single-threaded, and when threading is a deceivingly bad idea&lt;/li&gt;
&lt;li&gt;Accountability of frameworks that natively exit the GIL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new multithreading and multiprocessing libraries and techniques&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;static multiprocessing module (smp) (and monkey patching of
multiprocessing)&lt;/li&gt;
&lt;li&gt;thread pool control with command line calls of Python ( python -m tbb
-p 8)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Putting it all together&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Examples of using static multiprocessing on a large machine to stop
oversubscription&lt;/li&gt;
&lt;li&gt;Example of pseudo-daemon process on 4-core machine by processor
pinning&lt;/li&gt;
&lt;li&gt;Thread pool control on a simple NumPy example&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Summary - Best practices for using above methods to control
multithreading+multiprocessing&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What needs to be done in the space (frameworks and things that need
to be exposed)&lt;/li&gt;
&lt;li&gt;Problems that still exist in the area&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q&amp;amp;A&lt;/p&gt;
</summary></entry><entry><title>Air Quality &amp; Python: Developing Online Analysis Tools</title><link href="https://pyvideo.org/europython-2018/air-quality-python-developing-online-analysis-tools.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Douglas Finch</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/air-quality-python-developing-online-analysis-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Poor surface air quality has a range of implications for human health
and the economy. Without concerted mitigation efforts, trends in
urbanisation and aspirations for progressive economic growth will result
in poorer levels of air quality. Analysing and interpreting the incoming
data streams from heterogeneous air quality measurement stations is
critical for tackling the problem and for developing early warning
systems. I am using Python to develop a set of online analysis tools
(ukatmos.org) to enable the public to quickly and easily plot air
quality data in many ways, effectively freeing up information that is
already publicly available but in awkward formats and often involves
development of code. We anticipate these tools will also support data
science classes at school, and can speed up scientific research by
minimizing effort in repeating analyses.&lt;/p&gt;
&lt;p&gt;This talk will cover how the tools integrate numerous Python libraries
(e.g. Pandas and NumPy), the Django web framework, the Plot.ly tools for
creating interactive graphs, and SQL to address the large data volumes.
Developing these Python tools in an adaptive and scalable way allows it
to grow as more data become available, e.g. satellite observations.
Adaptability also includes evolving user requirements. This project will
also be developed into a Python library allowing the user to easily use
the online analysis tools from an offline Python environment.&lt;/p&gt;
</summary></entry><entry><title>Automating testing and deployment with Github and Travis</title><link href="https://pyvideo.org/europython-2018/automating-testing-and-deployment-with-github-and-travis.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Alex Grönholm</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/automating-testing-and-deployment-with-github-and-travis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Maintaining an open source project can be a drag. Especially when you
have dozens of them. Besides being tedious , making a new release can be
a very error prone process. Maybe you forgot to run the full test suite,
forgot to update the release version or tag the release on VCS or maybe
you bungled up the upload to PyPI. Fortunately there are things you can
do to eliminate entire categories of human errors in the release process
– by automating them.&lt;/p&gt;
&lt;p&gt;This talk uses a trivial project as an example to present a release
pipeline, from packaging and testing to deployment, that only requires
you to push a git tag to your Github repository. Automation then takes
care of the rest and you end up with a new release on PyPI (yay!).&lt;/p&gt;
&lt;p&gt;This talk is mostly useful for open source developers using Github to
house their projects, as it heavily leans on Travis, its continuous
integration provider . You also need to be at least somewhat familiar
with Python packaging and testing in order to follow along. Familiarity
with common tools like pytest and tox helps but is not strictly
required.&lt;/p&gt;
</summary></entry><entry><title>Bytecodes and stacks: A look at CPython’s compiler and its execution model</title><link href="https://pyvideo.org/europython-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So, you wrote some Python code. What needs to happen before it starts
running? And once it’s running, how does Python keep track of what it’s
doing?&lt;/p&gt;
&lt;p&gt;I’ll talk about CPython’s tokenization, parsing, bytecode and its
serialization and cache, the stack-based virtual machine, line number
tables, and code, frame and function objects.&lt;/p&gt;
&lt;p&gt;Don’t worry if you’ve never heard of these concepts. While even experts
should learn something new, the talk is aimed at anyone who’s worked on
a Python project or two.&lt;/p&gt;
</summary></entry><entry><title>Change music in two epochs</title><link href="https://pyvideo.org/europython-2018/change-music-in-two-epochs.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Marcel Raas</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/change-music-in-two-epochs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about applying deep learning to music. We will look at the
raw music data and discover the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to detect instruments from a piece of music&lt;/li&gt;
&lt;li&gt;How to detect what is being played by what instrument&lt;/li&gt;
&lt;li&gt;How to isolate instruments in multi-instrument (polyphonic) music&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of applying it to existing music we will generate our own music
using some simple musical rules. The benefit of this is that we are in
control of the complexity and we know exactly what is being played. We
start out simple and then start adding more instruments, different
timbres, etc. As we go up in complexity, we shall see how to adapt our
models to be able to deal with it. This gives interesting insights in
what structures in deep nets work well.&lt;/p&gt;
&lt;p&gt;I will show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to build a simple synthesizer using numpy&lt;/li&gt;
&lt;li&gt;How to create an unlimited data set of improvisation that sounds
musical&lt;/li&gt;
&lt;li&gt;How to use this data set for detecting instruments using deep
learning&lt;/li&gt;
&lt;li&gt;How to filter out one instrument when multiple synthesizers are
playing at once&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more info, see the github repository at
&lt;a class="reference external" href="https://github.com/marcelraas/music-generator"&gt;https://github.com/marcelraas/music-generator&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Citizen Science with Python</title><link href="https://pyvideo.org/europython-2018/citizen-science-with-python.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Ian Ozsvald</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/citizen-science-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You could make a difference in the world with a little science and
Python. We’ll look at several data-driven humanitarian and healthcare
projects developed using Python and, all going well, run some audience
experiments. By the end of the talk I hope you’ll be looking to run your
own experiments with the scientific Python stack.&lt;/p&gt;
</summary></entry><entry><title>Creating a Culture of Software Craftsmanship</title><link href="https://pyvideo.org/europython-2018/creating-a-culture-of-software-craftsmanship.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Keith Harrison</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/creating-a-culture-of-software-craftsmanship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This time it’ll be different. It’s a green field project and you’ve
learned from your mistakes. You’re not going to make the same ones
again.&lt;/p&gt;
&lt;p&gt;Fast forward several months and you’re in a mess. A change in one place
causes bugs in a completely different place. Adding a simple feature
means making changes all over your application. Progress is getting
slower and slower. You’re lost in complexity.&lt;/p&gt;
&lt;p&gt;Why does this keep happening and what can we do about it?&lt;/p&gt;
&lt;p&gt;This talk will try to answer those questions.&lt;/p&gt;
&lt;p&gt;I’ll show how complex software really is, define the different types of
complexity found in software, explain the issues complexity causes and
discuss different techniques we can use to manage it.&lt;/p&gt;
&lt;p&gt;This talk is suitable for anyone who has worked or will work on a
software development project. No development experience is required.&lt;/p&gt;
</summary></entry><entry><title>Creating Solid APIs</title><link href="https://pyvideo.org/europython-2018/creating-solid-apis.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/creating-solid-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increasingly, our apps are used not by humans but by other apps - via
their APIs. Thus it is increasingly important that your APIs are
well-designed and easy to consume for other developers.&lt;/p&gt;
&lt;p&gt;Adding a few API endpoints to your application for internal consumption
is easy. Creating APIs that other developers will love to use is a much
harder problem. You’ll need to think about solving variety of topics
such as versioning, authentication, response structure, documentation
and more. There are existing good practices for each of them, but often
developers who haven’t done a lot of API work aren’t familiar with them.&lt;/p&gt;
&lt;p&gt;My talk will show how to find reasonable solutions for those problems. I
will talk about importance and intricacies of good documentation and why
auto- generating it from your code is useful. I’ll show how to make use
of familiarity by using standards such as JSON API and show benefits
brought by its standardized response structure that makes lives of
3rd-party developers easier.&lt;/p&gt;
&lt;p&gt;Authentication will be discussed, including introduction to OAuth2. I’ll
talk about when OAuth2 is a good choice and when not, as well as dig
into some trickier parts of it. We’ll then move on to versioning and how
you can change your API without breaking all existing apps. Finally
we’ll wrap it all up by looking at some major APIs that are using the
same principles.&lt;/p&gt;
</summary></entry><entry><title>Domain-Driven Design Patterns in Python</title><link href="https://pyvideo.org/europython-2018/domain-driven-design-patterns-in-python.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Robert Smallshire</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/domain-driven-design-patterns-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domain-Driven Design (DDD) is an approach to software development that
emphasises high-fidelity modelling of the problem domain, and which uses
a software implementation of the domain model as a foundation for system
design. This approach helps organize and minimize the essential
complexity of your software. DDD has been used with success within the
traditional enterprise programming ecosystems of Java and .NET, but has
seen only limited adoption in the Python community.&lt;/p&gt;
&lt;p&gt;In this talk we introduce Python programmers to the core tactical
patterns of DDD and show how they can be realised in idiomatic Python,
freeing the most valuable parts of your system – the domain model – from
onerous dependencies on particular databases or application frameworks.&lt;/p&gt;
&lt;p&gt;In this talk we share what we’ve learned from applying DDD in Python to
large projects.&lt;/p&gt;
</summary></entry><entry><title>Easy interactive data applications with Dash</title><link href="https://pyvideo.org/europython-2018/easy-interactive-data-applications-with-dash.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Matteo Guzzo</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/easy-interactive-data-applications-with-dash.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plotly Dash is a Python framework for building interactive dashboards
and web data applications, based on Flask, React.js, and Plotly. It
allows a python- only approach to something that previously required
knowledge of Javascript, heavily reducing the overhead required to
create a web application. I’ll show how easy it is to set up a small
interactive web app using data from the Twitch API and to expand it at
will, using only Python.&lt;/p&gt;
</summary></entry><entry><title>EduBlocks - Making the transition to Python easier!</title><link href="https://pyvideo.org/europython-2018/edublocks-making-the-transition-to-python-easier.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Joshua Lowe</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/edublocks-making-the-transition-to-python-easier.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Looking for ways to make the transition from block based programming to
Python easier, then look no further! In this talk 14 year old Josh will
introduce you to his project called EduBlocks, which is a drag and drop
version of Python 3 that he has created to help teachers introduce
programming languages, like Python, to children at an earlier age. The
goal of the project is to make the transition from block based programs
like Scratch to Python easier for students and teachers, as presently
there is no drop-in solution that bridges this gap. Josh will share his
journey so far with you, from how he came up with the idea when he was
only 11 years old, the developments along the way, the exciting plans
for the future and how schools today in over 72 different countries
around the world are making use of EduBlocks on the Raspberry Pi and
micro:bit.&lt;/p&gt;
</summary></entry><entry><title>EPS General Assembly 2018</title><link href="https://pyvideo.org/europython-2018/eps-general-assembly-2018.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/eps-general-assembly-2018.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is where the EuroPython Society (EPS) board gives its reports,
resolutions are passed and the EPS members can vote in a new EPS board.&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018 - Closing</title><link href="https://pyvideo.org/europython-2018/europython-2018-closing.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/europython-2018-closing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Closing Session
[EuroPython 2018 -  - 2018-07-27 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018 - Lightning talks on Friday, July 27</title><link href="https://pyvideo.org/europython-2018/europython-2018-lightning-talks-on-friday-july-27.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/europython-2018-lightning-talks-on-friday-july-27.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks
[EuroPython 2018 -  - 2018-07-27 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018 - Sprint Orientation</title><link href="https://pyvideo.org/europython-2018/europython-2018-sprint-orientation.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/europython-2018-sprint-orientation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sprint Orientation
[EuroPython 2018 -  - 2018-07-27 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2019: Help us build the next edition!</title><link href="https://pyvideo.org/europython-2018/europython-2019-help-us-build-the-next-edition.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/europython-2019-help-us-build-the-next-edition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We need help with organizing and running EuroPython 2018.&lt;/p&gt;
&lt;p&gt;In this session, we will explain how the EuroPython workgroup model
works and where you could help.&lt;/p&gt;
</summary></entry><entry><title>Exploring the Python AST Ecosystem</title><link href="https://pyvideo.org/europython-2018/exploring-the-python-ast-ecosystem.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Chase Stevens</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/exploring-the-python-ast-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials are available at
&lt;a class="reference external" href="https://github.com/hchasestevens/europython-2018"&gt;https://github.com/hchasestevens/europython-2018&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This session will introduce attendees to Python’s rich ecosystem of
abstract syntax tree tooling and libraries, with an emphasis on
practical applications in static analysis and metaprogramming. Attendees
should be fully comfortable with Python syntax and semantics, but
familiarity with the ast module itself will not be necessary.&lt;/p&gt;
&lt;p&gt;The talk will begin with a conceptual overview of ASTs, including a
brief look at Python’s built-in introspection capabilities. It will
introduce tools for AST visualization (astor, showast,
python-ast-explorer), creation (asttools, meta), and transformation to
source code (codegen).&lt;/p&gt;
&lt;p&gt;How the AST can be used for static analysis will be covered; this will
include discussion of Python’s built-in facilities (NodeVisitor) as well
as of the 3rd party tools astsearch, astpath, and bellybutton. The talk
will demonstrate the advantages and limits of these tools in comparison
to other static analysis tooling (pylint, mypy); particular attention
will be paid to how these tools can be incorporated into attendees’
workflows and existing codebases and projects.&lt;/p&gt;
&lt;p&gt;Tooling for Python AST manipulation and metaprogramming will be the
final topic covered, focusing on the use of the NodeTransformer
built-in. The talk will cover practical applications and examples of
metaprogramming, such as metaprogramming for DSLS (pony, xpyth), runtime
code manipulation (patterns, yield-from), and others (e.g. assertion
rewriting in pytest).&lt;/p&gt;
&lt;p&gt;While the talk will touch only briefly on each of the applications
discussed, by the end of the session attendees should have a firm grasp
of the kinds of problems the AST can be used to solve, what existing AST
tooling can accomplish, and what resources are available for the
development of their own AST tools.&lt;/p&gt;
</summary></entry><entry><title>Faster Python startup</title><link href="https://pyvideo.org/europython-2018/faster-python-startup.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Jeethu Rao</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/faster-python-startup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The cPython’s startup speed generally quite fast compared to other
similar dynamic language interpreters. Despite this, the interpreter’s
startup time increases linearly with the number and size of imported
python modules. Although interpreter startup speed isn’t a significant
concern in long running servers, it does matter for the command line and
other frequently launched applications.&lt;/p&gt;
&lt;p&gt;One of the oldest tricks in the book, when it comes to performance
optimizations is to perform frequent and expensive operations fewer
times and reuse results from previous invocations. We noticed that the
overhead of reading and un-marshalling .pyc files at startup can be
eliminated if we could directly embed code objects and their associated
object graph from .pyc files into the data segment of the cPython
binary. This technique is quite similar to the approach taken by image
based languages like Smalltalk in the past. Implementing this for
cPython is made simpler because marshaled code objects in .pyc files
contain a subset of the types of objects that marshal format supports.
With this approach, loading a module included in the python binary is as
cheap as dereferencing a pointer, albeit at the cost of increased binary
size.&lt;/p&gt;
&lt;p&gt;This talk will discuss the approach taken to implement the
aforementioned idea for Python 3.6 and the challenges faced in
implementing it. It will also talk about benchmark results from the
improvements and possible future directions for this work. Although this
talk delves into cPython internals, no prior experience with cPython
internals is required to follow along.&lt;/p&gt;
</summary></entry><entry><title>From linear algebra to machine learning</title><link href="https://pyvideo.org/europython-2018/from-linear-algebra-to-machine-learning.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Omar Gutiérrez</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/from-linear-algebra-to-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Math is a crucial skill for people who are interested in Data Science
and Machine Learning. Until now, most of the people who are doing Data
Science have a strong background in math, usually, people with master or
Ph.D. degrees.&lt;/p&gt;
&lt;p&gt;However, this fact seems to change in the next years, after the hype of
Machine Learning we are facing a process of &lt;em&gt;democratization&lt;/em&gt;. Now the
door of Data Science is open for everyone.&lt;/p&gt;
&lt;p&gt;To &lt;em&gt;truly madly deeply&lt;/em&gt; understand how the machine learning algorithms
work we need to understand some mathematical concepts. In this tutorial,
I would like to share my experience in the process of learning some of
those concepts.&lt;/p&gt;
&lt;p&gt;What I want to do is build a bridge between those concepts and Python,
more specifically, &lt;em&gt;SciPy&lt;/em&gt; and &lt;em&gt;NumPy&lt;/em&gt; and &lt;em&gt;TensorFlow&lt;/em&gt;. Basically is
&lt;em&gt;just another tutorial about vectorization&lt;/em&gt; , in this case, oriented to
understand and implement machine learning algorithms and the
mathematical foundation that supports it.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Review of linear algebra&lt;/em&gt; : A brief review of essential &lt;em&gt;linear
algebra&lt;/em&gt; , concepts and the explanation with NumPy: scalars, vectors,
matrices, tensors, multiplication of vectors, inner products, vector
spaces, etc.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Review of machine learning&lt;/em&gt; : A brief review of essential &lt;em&gt;machine
learning&lt;/em&gt; , concepts that are related to mathematical concepts:
dimensionality reduction, principal component analysis, etc.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Optimization&lt;/em&gt; : Analytical vs. numerical solutions. This part has
too many formulas, &lt;em&gt;well, not too many&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Vectorization&lt;/em&gt; : Numpy and TensorFlow.&lt;/li&gt;
&lt;li&gt;Small practical cases:&lt;ul&gt;
&lt;li&gt;I want to show how we can solve the XOR problem with only one
neuron&lt;/li&gt;
&lt;li&gt;Explain the math behind linear regression.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The material of the talk can be found
&lt;a class="reference external" href="https://github.com/omartrinidad/ep2018"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Get Productive with Python in Visual Studio Code</title><link href="https://pyvideo.org/europython-2018/get-productive-with-python-in-visual-studio-code.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Dan Taylor</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/get-productive-with-python-in-visual-studio-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this demo driven session, we’ll show you how to use the
cross-platform, free, and open source Visual Studio Code for all your
Python development needs. From editing, to linting, to debugging and
more, you will learn how to get started, as well as tips and tricks to
save you time in your everyday development lifecycle.&lt;/p&gt;
&lt;p&gt;If you’re an experienced Python developer, you will learn how to take
advantage of all of Visual Studio Code’s capabilities to maximize your
productivity. If you’re a new Python developer, you will learn more
about Python and how to use Visual Studio Code to get up and running
quickly.&lt;/p&gt;
&lt;p&gt;We will start by showing how to create a new application, configure
linting, manage virtual environments, and run code. Then we’ll show how
to use more powerful features like debugging, unit testing, the Docker
extension, and Visual Studio Live Share for collaborative editing and
debugging with your co- workers.&lt;/p&gt;
&lt;p&gt;Code available at: &lt;a class="reference external" href="http://github.com/qubitron/pydemo"&gt;http://github.com/qubitron/pydemo&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Good features beat algorithms</title><link href="https://pyvideo.org/europython-2018/good-features-beat-algorithms.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Pietro Mascolo</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/good-features-beat-algorithms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Machine Learning and Data Science in general, understanding the data
is paramount. This understanding can come from many different sources
and techniques: domain expertise, exploratory analysis, SMEs, some
specific Machine Learning techniques, and feature engineering. As a
matter of fact, most Machine Learning and Statistical analysis strongly
depends on how the data is prepared, thus making feature engineering
very important for any serious Machine Learning enterprise.&lt;/p&gt;
&lt;p&gt;“Feature engineering is the process of transforming raw data into
features that better represent the underlying problem to the predictive
models, resulting in improved model accuracy on unseen data.”&lt;/p&gt;
&lt;p&gt;In this talk we will discuss what feature engineering and feature
selection are; how to select important features in a real-world dataset
and how to develop a simple, but powerful ensemble to measure feature
importance and perform feature selection.&lt;/p&gt;
&lt;p&gt;Familiarity with intermediate concepts of the Python programming
language is required to follow the implementation steps. General
knowledge of the basic concepts of Machine Learning and data cleaning
will be useful, but not strictly necessary, to follow the discussion on
feature selection and feature engineering.&lt;/p&gt;
</summary></entry><entry><title>How async and await ended up in Python</title><link href="https://pyvideo.org/europython-2018/how-async-and-await-ended-up-in-python.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Pavlin Gergov</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/how-async-and-await-ended-up-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’re going to talk about regular functions, iterables, iterators,
function execution and yield - generator functions. We will send values
and play with generators a bit. A quick look at asyncio will be followed
by async and await, what a coroutine is and how to write async code with
Python.&lt;/p&gt;
&lt;p&gt;Code snippets can be found here:
&lt;a class="reference external" href="https://github.com/pgergov/europython-2018"&gt;https://github.com/pgergov/europython-2018&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Integration Tests with Super Powers</title><link href="https://pyvideo.org/europython-2018/integration-tests-with-super-powers.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Alexandre Figura</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/integration-tests-with-super-powers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You are maybe like me: I never learned at school how to write tests. My
teachers gave me at first a broad overview of computer history. Then,
they explained me some basic design patterns. And to finish, I often had
to write more or less basic programs, to validate and demonstrate my
skills. Not the kind of code I would be really proud of today: the
procrastinator monkey living in my head at this time was more thinking
about planning my summer holidays, rather than writing Ninja code!&lt;/p&gt;
&lt;p&gt;And to make things worse, my studies focused on network and system
engineering. Not software architecture. Funny story, because I decided
to become programmer a couple of years later…&lt;/p&gt;
&lt;p&gt;What I realize now is that I don’t have as much time as before to learn.
And in a world driven by business, where time is money, and where
tradeoffs are the rule, there is rarely enough money to write both shiny
new features and a complete test suite.&lt;/p&gt;
&lt;p&gt;People who practice Test-Driven Development know how complicated it can
be to write proper tests. TDD is often discouraging at first: the
learning curve is steep. But this problem also exists in the testing
world in general. Because writing good tests is hard, many beginners get
headaches trying to reach this goal. How to convince project managers to
have more time for writing tests in these conditions…&lt;/p&gt;
&lt;p&gt;But “le jeu en vaut la chandelle” as we say in French (&amp;quot;the juice is
worth the squeeze&amp;quot;). Well tested applications are not only easier to
maintain and extend. They also have in general a better API. That’s what
we will see in this talk, by focusing on how to write integration tests.
Our journey will begin with a presentation of different testing
strategies. We will then jump to the practical part, using Pytest,
interface testing , dependency injections and stubs, amongst many
others. And because we want to add nice buzzwords on our resume after
EuroPython, we will finish this talk by automating the whole with Docker
Compose.&lt;/p&gt;
</summary></entry><entry><title>Lies, damned lies, and statistics</title><link href="https://pyvideo.org/europython-2018/lies-damned-lies-and-statistics.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/lies-damned-lies-and-statistics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Statistics show that eating ice cream causes death by drowning.&lt;/p&gt;
&lt;p&gt;If this sounds baffling, this talk will help you to understand
correlation, bias, statistical significance and other statistical
techniques that are commonly (mis)used to support an argument that
leads, by accident or on purpose, to drawing the wrong conclusions.&lt;/p&gt;
&lt;p&gt;The casual observer is exposed to the use of statistics and probability
in everyday life, but it is extremely easy to fall victim of a
statistical fallacy, even for professional users.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to help the audience understand how to
recognise and avoid these fallacies, by combining an introduction to
statistics with examples of lies and damned lies, in a way that is
approachable for beginners.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlation and causation&lt;/li&gt;
&lt;li&gt;Simpson’s Paradox&lt;/li&gt;
&lt;li&gt;Sampling bias&lt;/li&gt;
&lt;li&gt;Data visualisation gone wild&lt;/li&gt;
&lt;li&gt;Statistical significance (and Data dredging a.k.a. p-hacking)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Processing Geodata using Python and Open Source Modules</title><link href="https://pyvideo.org/europython-2018/processing-geodata-using-python-and-open-source-modules.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/processing-geodata-using-python-and-open-source-modules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The need for processing small-scale to large-scale spatial data is huge.
In this talk, it is shown how to analyze, manipulate and visualize
geospatial data by using Python and various open source modules.&lt;/p&gt;
&lt;p&gt;The following modules will be covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Shapely: Manipulation and analysis of geometric objects&lt;/li&gt;
&lt;li&gt;Fiona - The pythonic way to handle vector data&lt;/li&gt;
&lt;li&gt;rasterio - The pythonic way to handle raster data&lt;/li&gt;
&lt;li&gt;pyproj - transforming spatial reference systems&lt;/li&gt;
&lt;li&gt;Vector File Formats (Shapefiles, GeoJSON, KML, GeoPackage)&lt;/li&gt;
&lt;li&gt;Geospatial analysis with GeoPandas&lt;/li&gt;
&lt;li&gt;Creating maps using Folium&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github repo: &lt;a class="reference external" href="https://github.com/martinchristen/EP2018_Geo"&gt;https://github.com/martinchristen/EP2018_Geo&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Productionizing your ML code seamlessly</title><link href="https://pyvideo.org/europython-2018/productionizing-your-ml-code-seamlessly.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Lauris Jullien</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/productionizing-your-ml-code-seamlessly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data science and Machine Learning are hot topics right now for Software
Engineers and beyond. And there are a lot of python tools that allow you
to hack together a notebook to quickly get insight on your data, or
train a model to predict, or classify. Or you might have inherited some
data wrangling and modeling {Jupyter/Zeppelin} notebook code from
someone else, like the resident data scientist.&lt;/p&gt;
&lt;p&gt;The code works on test data, when you run the cells in the right order
(skipping cell 22), and you believe that the insight gained from this
work would be a valuable game changer. But now how do you take this
experimental code into production, and keep it up-to-date with a regular
retraining schedule? And what do you need to do after that, to ensure
that it remains reliable and brings value in the long term?&lt;/p&gt;
&lt;p&gt;These will be the questions this talk will answer, focusing on 2 main
themes: 1. What does running an ML model in production involve? 2. How
to improve your development workflow to make the path to production
easier?&lt;/p&gt;
&lt;p&gt;This talk will draw examples from real projects at Yelp, like migrating
a pandas/sklearn classification project into production with pyspark,
while aiming to give advice that is not dependent on specific
frameworks, or tools, and is useful for listeners from all backgrounds.&lt;/p&gt;
</summary></entry><entry><title>Programming paradigms for physical computing and IoT</title><link href="https://pyvideo.org/europython-2018/programming-paradigms-for-physical-computing-and-iot.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/programming-paradigms-for-physical-computing-and-iot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A look at the GPIO Zero library for Raspberry Pi yields the blueprint
for a Pythonic API for programming the behaviour of interconnected
devices.&lt;/p&gt;
&lt;p&gt;GPIO Zero provides a multi-paradigm programming interface to GPIO
devices: - procedural (polling) - procedural (blocking) - event-driven
(callbacks) - declarative&lt;/p&gt;
&lt;p&gt;Start with simple scripts to control LEDs and buttons on a breadboard,
learn to prototype ideas and move on to declaring interaction between
more advanced devices in the home and beyond.&lt;/p&gt;
&lt;p&gt;These options for device programming, along with the extensibility of
the library, provide the means to program complex behaviour using simple
Pythonic code.&lt;/p&gt;
</summary></entry><entry><title>Python 3: ten years later</title><link href="https://pyvideo.org/europython-2018/python-3-ten-years-later.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/python-3-ten-years-later.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Draft of the talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Growing populary of the Python programming language&lt;ul&gt;
&lt;li&gt;Defacto language in the scientific world, replacing other closed
source and more specialized but limited language&lt;/li&gt;
&lt;li&gt;Favorite programming language used as the first language to learn
programming&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Port Python 2 code to Python 3&lt;ul&gt;
&lt;li&gt;Port Python 2 code to Python 3&lt;/li&gt;
&lt;li&gt;No: “Add support for Python 3”, don’t loose Python 2 support&lt;/li&gt;
&lt;li&gt;Port Python 3 code to Python 2&lt;/li&gt;
&lt;li&gt;Python changes to make the transition smoother:&lt;/li&gt;
&lt;li&gt;PEP 414: u&amp;quot;syntax” reintroduced in Python 3.3&lt;/li&gt;
&lt;li&gt;PEP 461: bytes % args, Python 3.5&lt;/li&gt;
&lt;li&gt;More “Py3k” warnings added to Python 2.7.x&lt;/li&gt;
&lt;li&gt;Linters like flake8 detect some issues&lt;/li&gt;
&lt;li&gt;six, futures, modernize, 2to6, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analysis of the transition&lt;ul&gt;
&lt;li&gt;Good: At Pycon US 2014, Guido van Rossum announced that the Python
2.7 support was extended from 2015 to 2020 to give more time to
companies to port their applications to Python 3.&lt;/li&gt;
&lt;li&gt;Bad: 2to3: “drop Python2 support at once”, don’t work when you
have dependencies.&lt;/li&gt;
&lt;li&gt;If done again, would it be different? Yes, obviously.&lt;/li&gt;
&lt;li&gt;Python 4 will be different than Python 3: no more “break the
world” release, but a “regular deprecation period” release, as
&lt;em&gt;any&lt;/em&gt; other release. Break things, one by one :-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bugs that won’t be fixed in Python 2 anymore&lt;ul&gt;
&lt;li&gt;Some bugs cannot be fixed without breaking the backward
compatibility&lt;/li&gt;
&lt;li&gt;Unicode Support&lt;/li&gt;
&lt;li&gt;Python 2 I/O stack bugs: rely on libc stdio.h&lt;/li&gt;
&lt;li&gt;Security: hash DoS, enabled by default in Python 3.3, Python 3.4
now uses SipHash&lt;/li&gt;
&lt;li&gt;subprocess is not thread-safe in Python 2. Python 2 subprocess has
many race conditions: fixed in Python 3 with a C implementation
which has less or no race condition. Handling signals while
forking in complex.&lt;/li&gt;
&lt;li&gt;threading.RLock is not “signal safe” in Python 2&lt;/li&gt;
&lt;li&gt;Python 2 requires polling to wait for a lock or for I/O. Python 3
uses native threading API with timeout and has asyncio.&lt;/li&gt;
&lt;li&gt;Python 3 uses a monotonic clock to not crash on system clock
update (ex: DST change).&lt;/li&gt;
&lt;li&gt;Python 3 has a better GIL.&lt;/li&gt;
&lt;li&gt;Python 2 inherits file descriptors on fork+exec by default. Python
3 don’t: PEP 446.&lt;/li&gt;
&lt;li&gt;Functions can fail with OSError(EINTR) when interrupted by a
signal, need to be very careful everywhere. SIGCHLD when a child
process completes, SIGWINCH when using ncurses. Python 3.5
restarts the interrupted system call for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance&lt;ul&gt;
&lt;li&gt;Python 3.6 is now faster than Python 2.7&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://speed.python.org/"&gt;https://speed.python.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Evolutions of the Python language&lt;ul&gt;
&lt;li&gt;Python 3.5&lt;/li&gt;
&lt;li&gt;PEP 492: async/await “keywords” for asyncio. (Really keywords in
Python 3.7.)&lt;/li&gt;
&lt;li&gt;PEP 461: bytes % args and bytearray % args&lt;/li&gt;
&lt;li&gt;PEP 465, a new matrix multiplication operator: a &amp;#64; b.&lt;/li&gt;
&lt;li&gt;PEP 448: Generalized unpacking:
&lt;tt class="docutils literal"&gt;head, *tail = &lt;span class="pre"&gt;list``mylist&lt;/span&gt; = [1, 2, &lt;span class="pre"&gt;**other_list]``mydict&lt;/span&gt; = {&amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;, **other_dict}&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Python 3.6&lt;/li&gt;
&lt;li&gt;PEP 515: &lt;tt class="docutils literal"&gt;million = 1_000_000&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;PEP 498: f-string: &lt;tt class="docutils literal"&gt;name = &amp;quot;World&amp;quot;; print(f&amp;quot;Hello &lt;span class="pre"&gt;{name}!&amp;quot;)&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;PEP 526, syntax for variable annotations.&lt;/li&gt;
&lt;li&gt;PEP 525, asynchronous generators.&lt;/li&gt;
&lt;li&gt;PEP 530: asynchronous comprehensions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bury Python 2?&lt;ul&gt;
&lt;li&gt;“Python 3 only”&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonclock.org/"&gt;https://pythonclock.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.python3statement.org/"&gt;http://www.python3statement.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fedora 23, Ubuntu 17.10: no python2 (/usr/bin/python) in the base
system&lt;/li&gt;
&lt;li&gt;2017, April: IPython 6.0&lt;/li&gt;
&lt;li&gt;2017, December: Django 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python and GraphQL</title><link href="https://pyvideo.org/europython-2018/python-and-graphql.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Alec MacQueen</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/python-and-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GraphQL query language is gaining popularity and seeing more adoption.
This is mainly due to the efficiency with which consumers can get their
data, the ease with which you can document and explore your API and the
powerful tooling that has been built around the query language.&lt;/p&gt;
&lt;p&gt;This talk is for novices and experts of GraphQL alike and aims to cover
the basics of the query language, how to implement it using Flask and
SQLAlchemy and to take a deeper dive into how Python’s type-hinting can
be used to generate your GraphQL schema.&lt;/p&gt;
&lt;p&gt;I’ll also be talking about some of the tooling that can be used to
provide consumers and developers working on your API with a great
development experience. Next I’ll cover some ways you can use these
tools to empower your development process and get you developing ‘API
First’.&lt;/p&gt;
&lt;p&gt;To get the most out of this talk you should have a general understanding
of APIs, Python frameworks and Python ORMs. However, my aim is to make
it as accessible as possible for developers of all experience levels.&lt;/p&gt;
</summary></entry><entry><title>Python Software Foundation Session</title><link href="https://pyvideo.org/europython-2018/python-software-foundation-session.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/python-software-foundation-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Software Foundation (PSF) is the organization behind Python
itself. It holds the IP rights, runs PyCon US and tries to help the
Python community world-wide to run events, user groups, workshops or
Python related programming projects by giving out grants. This year,
we’re again having a PSF Members meeting at EuroPython, where the PSF
reports on its activities, new plans and organizational changes.&lt;/p&gt;
&lt;p&gt;The meeting is open to everyone, so if you want to learn more about the
PSF activities, please join in.&lt;/p&gt;
</summary></entry><entry><title>Quart a asyncio alternative to Flask</title><link href="https://pyvideo.org/europython-2018/quart-a-asyncio-alternative-to-flask.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/quart-a-asyncio-alternative-to-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a great web mirco-framework, that is best utilised with
event-loop concurrency. Sadly with Flask the event-loop framework can’t
be asyncio, although some extensions (Flask-Aiohttp) have tried. Quart
is the solution as it shares the Flask API and is based on asyncio. In
addition Quart goes beyond Flask adding HTTP/2 and websockets.&lt;/p&gt;
&lt;p&gt;This talk will outline why event-loop concurrency is a good choice for
web servers, why asyncio is a good choice and then give an overview of
Quart, demonstrating features that go beyond the Flask framework.&lt;/p&gt;
</summary></entry><entry><title>Rehabilitating Pickle</title><link href="https://pyvideo.org/europython-2018/rehabilitating-pickle.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Alex Willmer</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/rehabilitating-pickle.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pickle is a compact serialisation protocol for Python objects. It could
be a convenient way for Python programs and distributed systems to
communicate. Unfortunately pickle is widely considered to be unsafe, and
it has lead to several vulnerabilities over the years. As the Python
manual warns&lt;/p&gt;
&lt;blockquote&gt;
The pickle module is not secure against erroneous or maliciously
constructed data. Never unpickle data received from an untrusted or
unauthenticated source.&lt;/blockquote&gt;
&lt;p&gt;Does this have to be the case? Can we use Pickle safely?&lt;/p&gt;
&lt;p&gt;This talk will be a deep dive into what an attacker can do with a
maliciously constructed pickles. I’ll show what defences you can
implement against the common attacks, especially those that gain
arbitrary code execution. I will present new research into other
attacks, and mitigations. Finally I will review a few less known
alternatives to pickle.&lt;/p&gt;
&lt;p&gt;This talk will expand on a &lt;a class="reference external" href="https://www.youtube.com/watch?v=5omAT9sqguE&amp;amp;list=PLWsDEQH0HiPZUhtqGczfDnNdiJMhWpmWd&amp;amp;index=9&amp;amp;t=13m10s"&gt;PyLondinium 2018 lightning
talk&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Rust and Python - Oxidize Your Snake</title><link href="https://pyvideo.org/europython-2018/rust-and-python-oxidize-your-snake.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Sven-Hendrik Haase</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/rust-and-python-oxidize-your-snake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rust is a safe and modern systems programming language that is easily
able to call and be called from Python. As such, it is a prime candidate
for replacing C for writing Python modules that have to be fast or that
have to interact with other native code. Rust is extremely fast and
makes it very hard to get concurrency wrong.&lt;/p&gt;
&lt;p&gt;Many ways of making Python call into lower level have appeared over the
years such as CFFI, ctypes, boost.python, cython, SWIG. All of them are
cumbersome in their own ways. PyO3 is a Rust library that makes it easy
and simple to write native Python modules with minimal glue code and no
crazy tooling required. It even works cross-platform without problems.&lt;/p&gt;
&lt;p&gt;The talk shows some sample code of PyO3-based modules and compares it
with the code of the alternatives as well as the alternative’s
cross-platform support and tooling.&lt;/p&gt;
&lt;p&gt;The goal is for the audience to be informed about a new safe and modern
way of writing native Python modules.&lt;/p&gt;
&lt;p&gt;The audience doesn’t need any prerequisites except for a healthy
interest in native code and Python modules. C knowledge is optional.&lt;/p&gt;
</summary></entry><entry><title>System testing with Pytest, Docker, and Flask</title><link href="https://pyvideo.org/europython-2018/system-testing-with-pytest-docker-and-flask.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Neil Gall</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/system-testing-with-pytest-docker-and-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The composability of fixtures in pytest is an improvement over
traditional xUnit setup/teardown, reducing the incentive to commit
testing crimes such as multi-stage and stepwise tests. This is great out
of the box for unit tests, but I’m going to show how to combine the
power of pytest fixtures with Docker to build high-level integration
tests for microservices or other complex systems with multiple
components. I’ll then build on that to show how to embed mock web
services written with Flask right into the test code.&lt;/p&gt;
&lt;p&gt;With a sample Java application that makes use of some external resources
to offer a data processing service I’ll first quick an overview of
Pytest, Docker, and Flask. Then I’ll mix some pre-built code with live
test coding to demonstrate how to build high-level system tests which
spin up the application and its dependencies in Docker. I’ll then mock
one of the external dependencies using Flask, allowing the test to
control and verify interaction between the system components. Finally
I’ll show how to wrap the Flask application in a WSGI middleware that
lets the test inspect interaction with the mocked service.&lt;/p&gt;
&lt;p&gt;From a learning and development point of view, building your own is
better than re-using someone else’s code so I’ll show how the support
code for these features is relatively simple and how the audience can
build it themselves to exactly meet their own needs. And I’ll do it all
with a sense of fun, a joke or two and maybe a little storytelling.&lt;/p&gt;
</summary></entry><entry><title>The Boring Python Office Talk - Automate Powerpoint, Excel, and PDF with Python</title><link href="https://pyvideo.org/europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Stefan Baerisch</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will have a quick tour of the many ways Python gives us to handle
DOCX, XLSX, PPTX, and PDF and automate some boring office tasks.&lt;/p&gt;
&lt;p&gt;Many things are more interesting than office file formats like DOCX,
XLSX, PPTX, and PDF. Still, while working with office formats does not
seem to be the most fun, it is useful. But we can do better than just
useful. With the Python and some great libraries, it is possible to have
Python do much of the work you would have to do otherwise:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create and modify PDF files.&lt;/li&gt;
&lt;li&gt;Create Powerpoints presentations from scripts.&lt;/li&gt;
&lt;li&gt;Create Excel files, from simple tables to charts and reports.&lt;/li&gt;
&lt;li&gt;Combine information in Word documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we will have a look at a usual working day for Bob and
Ann, two fictional office works. Both Bob and Ann work office jobs, but
while Bob does all of his work by hand, but Ann knows Python. We will
look at different tasks that Bob wants to do, such as preparing an Excel
report, building a Powerpoint presentation, or rearranging a PDF. Then,
we will look how Ann use Python and some exciting libraries to automate
these task.&lt;/p&gt;
&lt;p&gt;During the talk, we will use Bob and Ann to consider different task
related to office file formats. We will then look at the Python
libraries that are available. Then, using this library, we will see how
an otherwise boring task can be automated. The goal of the task is to
showcase the libraries to Python offers to work with standard office
formats and provide you with a starting point for your own office
automation.&lt;/p&gt;
&lt;p&gt;After this talk, you will know how to automate at least some of your
daily office tasks. You may also be bored because Python is doing so
much of your work for you. If you know basic Python programming, you
will be right at home. There will be some use of Pandas, but it is not
required.&lt;/p&gt;
</summary></entry><entry><title>The Challenges of Maintaining a Popular Open-Source Project</title><link href="https://pyvideo.org/europython-2018/the-challenges-of-maintaining-a-popular-open-source-project.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Raphael Pierzina</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/the-challenges-of-maintaining-a-popular-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will give an insight into what it means to maintain a
popular project for me personally, what it involves and what we as a
community can do to help out and finally why I think it’s an important
discussion to have.&lt;/p&gt;
&lt;p&gt;Cookiecutter is a command-line utility that creates projects from
templates. It is free and open-source software distributed under the
terms of a permissive BSD-3 license. With around 180 individual
contributors, more than 1000 public templates on GitHub alone, and
multiple talks at conferences, it is fair to say that there is a small
community around it.&lt;/p&gt;
&lt;p&gt;But who are the people behind the project and what is it that they are
doing?&lt;/p&gt;
&lt;p&gt;It’s been three years since I was granted the commit bit by the core
team. I have learned a lot about FOSS communities and also about myself.
At times I struggle with balancing my day job as a full-time Software
Engineer and maintaining Cookiecutter and other FOSS projects in my
spare time. By now I’m OK with not responding to issues immediately and
closing pull requests. However it took me quite a while to get to this
point.&lt;/p&gt;
&lt;p&gt;Maintaining FOSS projects can be incredibly rewarding and fun, but it
can also be quite frustrating. It involves so much more than writing
code or merging PRs, and yet sometimes it feels like that’s what most
people think. The goal of this talk is to start a conversation around
this topic and hear what other EuroPython attendees think about it and
their challenges as contributors or maintainers.&lt;/p&gt;
</summary></entry><entry><title>Trust me, I'm a Data Scientist - ethics for builders of data-based applications</title><link href="https://pyvideo.org/europython-2018/trust-me-im-a-data-scientist-ethics-for-builders-of-data-based-applications.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Sarah Diot-Girard</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/trust-me-im-a-data-scientist-ethics-for-builders-of-data-based-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data Science is gonna save the world, right? Or is it? Machine Learning
epic fails are being largely commented. It’s easy to convince ourselves
that they are due to the inconsiderate misuse of Data Science. But is it
really so? Is it possible that innocuous choices lead an honnest team to
a disaster?&lt;/p&gt;
&lt;p&gt;During the course of this talk, we will build together an (imaginary)
application: a disruptive AI-based smart virtual assistant, pledging to
help high-schoolers with their university choice. We will see how
unintended biaises may creep in at every step, even with the best of
intentions. We will explore different topics, such as algorithmic
fairness, model interpretability and the handling of minority classes.&lt;/p&gt;
&lt;p&gt;Through this practical example, this talk will present a review of major
ethical pitfalls identified in the Machine Learning community along with
suggestions on how to avoid them.&lt;/p&gt;
&lt;p&gt;This talk is intended for beginner to intermediate Data Scientists, and
people working with Data Scientists, even without specific technical
knowledge.&lt;/p&gt;
&lt;p&gt;Slides :
&lt;a class="reference external" href="https://sdgjlbl.github.io/Presentations/Data%20Science%20and%20Ethics/presentation.html#/"&gt;https://sdgjlbl.github.io/Presentations/Data%20Science%20and%20Ethics/presentation.html#/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Walking the Random Forest and boosting the trees</title><link href="https://pyvideo.org/europython-2018/walking-the-random-forest-and-boosting-the-trees.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Kevin Lemagnen</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/walking-the-random-forest-and-boosting-the-trees.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deep Learning is all the rage, but ensemble models are still in the
game. With libraries such as the recent and performant LightGBM, the
Kaggle superstar XGboost or the classic Random Forest from scikit-learn,
ensembles models are a must-have in a data scientist’s toolbox. They’ve
been proven to provide good performance on a wide range of problems, and
are usually simpler to tune and interpret. This talk focuses on two of
the most popular tree-based ensemble models. You will learn about Random
Forest and Gradient Boosting, relying respectively on bagging and
boosting. This talk will attempt to build a bridge between the theory of
ensemble models and their implementation in Python.&lt;/p&gt;
&lt;p&gt;Notebook:
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://github.com/klemag/europython2018_walking_the_random_forest&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
</summary></entry><entry><title>Winning card games with 1000+ CPUs</title><link href="https://pyvideo.org/europython-2018/winning-card-games-with-1000-cpus.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>vincent warmerdam</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/winning-card-games-with-1000-cpus.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vincent was playing a card game against his girlfriend and he kept
loosing. So he wanted to train a bot to play on his behalf. This is our
story.&lt;/p&gt;
&lt;p&gt;We’re using AWS Lambda to get better at a card game named SushiGO. We
make a small genetic algorithm in Python that uses AWS Lambda as a
backend. The talk consists of these parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick Explanation of the rules of the SushiGo Card Game&lt;/li&gt;
&lt;li&gt;Translation of real life to an algorithm&lt;/li&gt;
&lt;li&gt;Explain why this problem needs a lot of CPU&lt;/li&gt;
&lt;li&gt;Explain why AWS Lambda fits the simulation use-case&lt;/li&gt;
&lt;li&gt;How to quickly hack Concurrency in Python&lt;/li&gt;
&lt;li&gt;How to deploy lambda very quickly with chalice&lt;/li&gt;
&lt;li&gt;Experimentation Results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will discuss an algorithm that we’ve tried to improve in three
ways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Applying simple maths to make the search algorithm better&lt;/li&gt;
&lt;li&gt;Throwing lots (lots!) of CPU’s against the problem by leveraging AWS
Lambda and python concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will conclude by discussing whether or not AWS Lambda is suitable for
a gridsearch/grid simulation (hint, it’s not meant for this task, but it
actually kind of works very well).&lt;/p&gt;
</summary></entry><entry><title>Writing good error messages</title><link href="https://pyvideo.org/europython-2018/writing-good-error-messages.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Paul Keating</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/writing-good-error-messages.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anyone who has ever conducted an elementary programming course, or even
answered a question on StackOverflow, will know that reading error
messages is a skill that beginners have to learn. It is less widely
appreciated that writing good error messages is also a skill that must
be learnt. This talk is in two parts. The first covers the commonest
error message gaffes: • Insufficiently explicit messages. • Issuing the
same message for two different conditions. • Suppressing the stack
trace. • Polluting the stack trace. The second part describes a way to
ensure usable, actionable error messages, even when the writer of the
message is not a professional coder. This was developed for an
environment where superusers code up most of the dozens of data
validation rules and the accompanying messages, and the application in
which Python is embedded suppresses the stack trace.&lt;/p&gt;
</summary></entry><entry><title>10 years of EuroPython and the Python community</title><link href="https://pyvideo.org/europython-2018/10-years-of-europython-and-the-python-community.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Dougal Matthews</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/10-years-of-europython-and-the-python-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will take you on a journey from Birmingham to Edinburgh via
Florence, Berlin, Bilbao and Rimini. The last 10 years of EuroPython.&lt;/p&gt;
&lt;p&gt;This will be a trip down memory lane where we look at how the language,
community and conference have evolved with some personal anecdotes along
the way.&lt;/p&gt;
&lt;p&gt;This will be in part a retrospective, where we will look at what we have
done well and where we can do better. Finally, we will look at some
aspirations and ideas for the coming years.&lt;/p&gt;
</summary></entry><entry><title>A Python implementation in Rust?</title><link href="https://pyvideo.org/europython-2018/a-python-implementation-in-rust.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Windel Bouwman</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/a-python-implementation-in-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rust is a fairly new programming language aimed as a competitor of C.
There are already attempts to write extension modules in rust and load
them into CPython. A whole new approach would be to re-implement the
Python language in rust.&lt;/p&gt;
&lt;p&gt;This is what the rspython project is about: implementing a python
interpreter in rust. Rust already has many features such as vectors,
hashmaps and strings as unicode. There also exist already modules for
regular expressions and dealing with files, so a lot can be re-used in
this area.&lt;/p&gt;
&lt;p&gt;During this talk we will dive into rust and python and the design of the
rspython. We will present some challenges and opportunities. Also we
will show the current state of this project in a demo.&lt;/p&gt;
</summary></entry><entry><title>asyncio in Practice: We Did It Wrong</title><link href="https://pyvideo.org/europython-2018/asyncio-in-practice-we-did-it-wrong.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/asyncio-in-practice-we-did-it-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is aimed at those that have at least intermediate experience
in Python and have played around with asynchronous Python using asyncio
or other libraries. I want the audience to learn from my mistakes! For
instance, how easy it is to get into “callback hell” (and how to
avoid/get out of it), how to screw up thread safety and deadlock
yourself, and making code async but not actually concurrent.&lt;/p&gt;
&lt;p&gt;I’ll talk through some anti-patterns and best practices that I learned
the hard way. This includes proper concurrency, calling coroutines from
synchronous code, working with threads and threadsafety, properly
shutting down an async programs, and hidden “gotchas”.&lt;/p&gt;
</summary></entry><entry><title>Building a Naive Bayes Text Classifier with scikit-learn</title><link href="https://pyvideo.org/europython-2018/building-a-naive-bayes-text-classifier-with-scikit-learn.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Obiamaka Agbaneje</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/building-a-naive-bayes-text-classifier-with-scikit-learn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine learning algorithms used in the classification of text are
Support Vector Machines, k Nearest Neighbors but the most popular
algorithm to implement is Naive Bayes because of its simplicity based on
Bayes Theorem.&lt;/p&gt;
&lt;p&gt;The Naive Bayes classifier is able to memorise the relationships between
the training attributes and the outcome and predicts by multiplying the
conditional probabilities of the attributes with the assumption that
they are independent of the outcome. It is popularly used in classifying
data sets that have a large number of features that are sparse or nearly
independent such as text documents.&lt;/p&gt;
&lt;p&gt;In this talk, I will describe how to build a model using the Naive Bayes
algorithm with the scikit-learn library using the spam/ham youtube
comment dataset from the UCI repository. Preprocessing techniques such
as Text normalisation and Feature extraction will be also be discussed.&lt;/p&gt;
</summary></entry><entry><title>Building new NLP solutions with spaCy and Prodigy</title><link href="https://pyvideo.org/europython-2018/building-new-nlp-solutions-with-spacy-and-prodigy.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Matthew Honnibal</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/building-new-nlp-solutions-with-spacy-and-prodigy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Commercial machine learning projects are currently like start-ups: many
projects fail, but some are extremely successful, justifying the total
investment. While some people will tell you to “embrace failure”, I say
failure sucks — so what can we do to fight it? In this talk, I will
discuss how to address some of the most likely causes of failure for new
Natural Language Processing (NLP) projects. My main recommendation is to
take an iterative approach: don’t assume you know what your pipeline
should look like, let alone your annotation schemes or model
architectures. I will also discuss a few tips for figuring out what’s
likely to work, along with a few common mistakes. To keep the advice
well-grounded, I will refer specifically to our open-source library
spaCy, and our commercial annotation tool Prodigy.&lt;/p&gt;
</summary></entry><entry><title>CatBoost - the new generation of Gradient Boosting</title><link href="https://pyvideo.org/europython-2018/catboost-the-new-generation-of-gradient-boosting.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Anna Veronika Dorogush</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/catboost-the-new-generation-of-gradient-boosting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gradient boosting is a powerful machine-learning technique that achieves
state-of-the-art results in a variety of practical tasks. For a number
of years, it has remained the primary method for learning problems with
heterogeneous features, noisy data, and complex dependencies: web
search, recommendation systems, weather forecasting, and many others.
CatBoost (&lt;a class="reference external" href="http://catboost.yandex"&gt;http://catboost.yandex&lt;/a&gt;) is a new open-source gradient boosting
library, that outperforms existing publicly available implementations of
gradient boosting in terms of quality. It has a set of addional
advantages.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;CatBoost is able to incorporate categorical features in your data
(like music genre, URL, search query, etc.) in predictive models with
no additional preprocessing. For more details on our approach please
refer to our NIPS 2017 ML Systems Workshop paper
(&lt;a class="reference external" href="http://learningsys.org/nips17/assets/papers/paper_11.pdf"&gt;http://learningsys.org/nips17/assets/papers/paper_11.pdf&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;CatBoost inference is 20-60 times faster then in other open-source
gradient boosting libraries, which makes it possible to use CatBoost
for latency-critical tasks.&lt;/li&gt;
&lt;li&gt;CatBoost has the fastest GPU and multi GPU training implementations
of all the openly available gradient boosting libraries.&lt;/li&gt;
&lt;li&gt;CatBoost requires no hyperparameter tunning in order to get a model
with good quality.&lt;/li&gt;
&lt;li&gt;CatBoost is highly scalable and can be efficiently trained using
hundreds of machines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The talk will cover a broad description of gradient boosting and its
areas of usage and the differences between CatBoost and other gradient
boosting libraries. We will also briefly explain the details of the
proprietary algorithm that leads to a boost in quality.&lt;/p&gt;
</summary></entry><entry><title>Code Review Skills for Pythonistas</title><link href="https://pyvideo.org/europython-2018/code-review-skills-for-pythonistas.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Nina Zakharenko</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/code-review-skills-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As teams and projects grow, code review becomes increasingly important
to support the maintainability of complex codebases. In this talk, I’ll
cover guidelines for writing consistent python code beyond pep8, how to
look out for common python gotchas, and what python tools are available
to automate various parts of the review process. Most importantly, I’ll
cover the human aspect of code reviews - how we can be better at
approaching reviews with empathy and understanding from the perspective
of both a reviewer and a submitter. Following these successful code
review practices will lead to happier teams and healthier code bases.&lt;/p&gt;
&lt;p&gt;This talk is useful for python developers with any amount of experience.
No prerequisite knowledge is necessary. - For those who are just
starting out, it will be a great general overview. - Intermediate
developers may not know about the wide variety of tooling that’s
available. - Advanced developers will learn techniques for performing
code reviews with empathy.&lt;/p&gt;
&lt;p&gt;This talk will enable you to have better code reviews on your teams at
work, and a better approach to code reviews in open source projects.
You’ll leave with 3 main takeaways: 1. Code Reviews are most effective
when conducted with empathy. If you do reviews with growth and learning
in mind, they become tools for sharing knowledge instead of an
opportunity to bruise egos or show off esoteric knowledge. 2. Python has
powerful tooling available for code reviews such as pep8 as a style
guide, pylint as a linter, coverage.py to identify test coverage, and
vulture to identify dead code. 3. That python style guides beyond pep8
have clear benefits in terms of producing more consistent code that’s
easier to review and easier to maintain.&lt;/p&gt;
</summary></entry><entry><title>Cython to speed up your Python code</title><link href="https://pyvideo.org/europython-2018/cython-to-speed-up-your-python-code.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Stefan Behnel</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/cython-to-speed-up-your-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://cython.org"&gt;Cython&lt;/a&gt; is not only a very fast and comfortable
way to talk to native code and libraries, it is also a widely used tool
for speeding up Python code. The Cython compiler translates Python code
to C or C++ code, and applies many static optimisations that make Python
code run visibly faster than in the interpreter. But even better, it
supports static type annotations that allow direct use of C/C++ data
types and functions, which the compiler uses to convert and optimise the
code into fast, native C. The tight integration of all three languages,
Python, C and C++, makes it possible to freely mix Python features like
generators and comprehensions with C/C++ features like native data
types, pointer arithmetic or manually tuned memory management in the
same code.&lt;/p&gt;
&lt;p&gt;This talk by a core developer introduces the Cython compiler by
interactive code examples, and shows how you can use it to speed up your
Python code. You will learn how you can profile a Python module and use
Cython to compile and optimise it into a fast binary extension module.
All of that, without losing the ability to run it through common
development tools like static analysers or coverage test tools.&lt;/p&gt;
</summary></entry><entry><title>Data is not flat</title><link href="https://pyvideo.org/europython-2018/data-is-not-flat.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Alisa Dammer</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/data-is-not-flat.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Feature engineering and model training often comes hand in hand. Some
tasks have an overwhelming amount of high dimensional data, some tasks
have little data or very low-dimension data. This talk targets the
latter problem: what can be done with the data itself to significantly
improve the model performance and when manual feature engineering does
make sense.&lt;/div&gt;
&lt;div class="line"&gt;A sample case of Classification problem with NN will be presented The
goal of the talk is to remind about something every person working
with the data thinks and probably uses. Slides, Jupyter notebook with
the example, test and train sets, NN configuration file are available
on: &lt;a class="reference external" href="https://github.com/Alisa"&gt;https://github.com/Alisa&lt;/a&gt;- lisa/conferences&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Debugging Your Code with Data Visualization</title><link href="https://pyvideo.org/europython-2018/debugging-your-code-with-data-visualization.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>James Saryerwinnie</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/debugging-your-code-with-data-visualization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let’s face it. Sometimes our code just isn’t working how we expect it to
work. When this happens, we fall back to our trusty tools to help us
debug: pdb, the logging module, or even simple print statements. But
sometimes that just isn’t enough, we still can’t figure out why our code
is broken. We need something more.&lt;/p&gt;
&lt;p&gt;There are a number of fantastic libraries in python for creating data
visualizations. These libraries are commonly used for analyzing and
visualizing large sets of data, but don’t see as much usage when it
comes to helping us write and debug our code.&lt;/p&gt;
&lt;p&gt;What if we could combine the two? What if we could leverage data
visualization tools to understand what our program is doing? Sometimes,
by seeing a visual representation of what our code is doing, it becomes
much easier to understand why our code is not working. We don’t need to
create publication quality graphs and charts, we just need to generate
quick, one-off visualizations to understand what our code is doing. What
we want is the “data visualization” equivalent to print() statements.&lt;/p&gt;
&lt;p&gt;To help illustrate this point, I will walk through some of the hardest
bugs I’ve had to track down while working on projects such as the AWS
CLI and boto3, the AWS SDK for Python. For each bug, I’ll show you how I
was able to leverage data visualization techniques to troubleshoot and
fix these bugs. Come learn how to debug more efficiently by leveraging
data visualization.&lt;/p&gt;
</summary></entry><entry><title>Deep Learning with PyTorch for Fun and Profit</title><link href="https://pyvideo.org/europython-2018/deep-learning-with-pytorch-for-fun-and-profit.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/deep-learning-with-pytorch-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are all these great blog posts about Deep Learning describing all
that awesome stuff. - Is it all that easy? Let’s check!&lt;/p&gt;
&lt;p&gt;We’ll look into: style transfer (making a picture look like painting),
speech generation (like Siri or Alexa) and text generation (writing a
story). In this talk I’ll describe the whole journey: A fun ride from
the idea to the very end including all the struggles, failures and
successes.&lt;/p&gt;
&lt;p&gt;Steps, we’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The data challenge: get the data ready&lt;/li&gt;
&lt;li&gt;Have it run on your Mac with PyTorch and an eGPU&lt;/li&gt;
&lt;li&gt;Creating a character-level language models with an Recurrent Neural
Network&lt;/li&gt;
&lt;li&gt;Creating a text generator&lt;/li&gt;
&lt;li&gt;Creating artwork&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Developing in a black hole: vim, tmux, httpie and jq</title><link href="https://pyvideo.org/europython-2018/developing-in-a-black-hole-vim-tmux-httpie-and-jq.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Francisco Javier Aceituno Lapido</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/developing-in-a-black-hole-vim-tmux-httpie-and-jq.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Productivity depends on the knowledge you have of the tools used.”&lt;/p&gt;
&lt;p&gt;Do you feel that the development tools you use are heavy? Do you think
that they make you less productive? Do you want to have maximum
productivity without lifting your hands from the keyboard?&lt;/p&gt;
&lt;p&gt;If so, this talk is for you.&lt;/p&gt;
&lt;p&gt;In this talk, I will show what are the tools I use every day in software
development at OnTruck and how you can integrate&lt;/p&gt;
&lt;p&gt;the text editor, vim the terminal multiplexer, tmux the HTTP client,
httpie and the json processor, jq&lt;/p&gt;
&lt;p&gt;to get a very productive development environment, all running on a
simple terminal.&lt;/p&gt;
</summary></entry><entry><title>Django queries optimization</title><link href="https://pyvideo.org/europython-2018/django-queries-optimization.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Ivaylo Donchev</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/django-queries-optimization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Collecting data from multiple Models is a common flow in Django
development. In most of the cases &lt;tt class="docutils literal"&gt;prefetch_related&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;select_related&lt;/tt&gt; do all of the job for optimizing the queries.&lt;/p&gt;
&lt;p&gt;When the models structure become complicated enough and we’ve put our
logic for collecting these items in models’ properties we suddenly
cannot use &lt;tt class="docutils literal"&gt;prefetch_related&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;select_related&lt;/tt&gt; anymore. Our View
‘s queries count depends on selected items count with high complexity.
The problem is in the selection logic: we’ve implemented an algorithm
which calculates something and we cannot prefetch or select all of the
objects.&lt;/p&gt;
&lt;p&gt;So this talk’s purpose is: To show how to use Django ORM to move the
selection logic, the calculations, the aggregations over group of
objects from our python code to our database and moving all of the logic
for this in one place - the queryset and test it easily.&lt;/p&gt;
</summary></entry><entry><title>Django structure for scale and longevity</title><link href="https://pyvideo.org/europython-2018/django-structure-for-scale-and-longevity.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Radoslav Georgiev</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/django-structure-for-scale-and-longevity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="why"&gt;
&lt;h4&gt;Why&lt;/h4&gt;
&lt;p&gt;Django is great.&lt;/p&gt;
&lt;p&gt;But as we add new features, as our dev team grows &amp;amp; the software needs
to be stable on production, things can get quite messy.&lt;/p&gt;
&lt;p&gt;We are going to look at some common patterns, derived from experience,
on how to structure your Django project for scale and longevity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h4&gt;What&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Main topics are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django service layer or where should business logic live?&lt;/li&gt;
&lt;li&gt;Using Django Rest Framework in a clean &amp;amp; repeatable way &amp;amp; combining
it with the service layer.&lt;/li&gt;
&lt;li&gt;Testing everything that matters, without repeating ourselves in
different tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are going to talk about when to rely on existing abstraction so it’s
actually helpful &amp;amp; when to avoid existing abstraction, and code things
ourselves.&lt;/p&gt;
&lt;p&gt;The examples showed in this talk are derived from working with Django in
the last 5 years on projects with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Daily production usage &amp;amp; production deploys.&lt;/li&gt;
&lt;li&gt;Dozens of apps.&lt;/li&gt;
&lt;li&gt;Hundreds of models &amp;amp; APIs.&lt;/li&gt;
&lt;li&gt;Tens of integrations working simultaneously.&lt;/li&gt;
&lt;li&gt;Teams of 5 to 10 people.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="who"&gt;
&lt;h4&gt;Who&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Key takeaways from the talk:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Increased productivity when developing with Django.&lt;/li&gt;
&lt;li&gt;Deeper understanding of the software development process with Django.&lt;/li&gt;
&lt;li&gt;Demo project with everything mentioned in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk is great for all levels of Django knowledge - from beginners to
advanced users &amp;amp; teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h4&gt;How&lt;/h4&gt;
&lt;p&gt;The main way of getting the point across is going to be by showing
regular code, talking how it can get messy &amp;amp; then following up with
examples of improving that code. Hopefully this talk will start a lot of
discussion afterwards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breakdown of the talk:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django service layer&lt;ul&gt;
&lt;li&gt;Fat models or fat views?&lt;/li&gt;
&lt;li&gt;Where do I put my business logic?&lt;/li&gt;
&lt;li&gt;What is a service &amp;amp; what goes into a service?&lt;/li&gt;
&lt;li&gt;What is a selector &amp;amp; what goes into a selector?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Django structure&lt;ul&gt;
&lt;li&gt;How many apps should I have?&lt;/li&gt;
&lt;li&gt;Structuring your code so youр team can be more productive and have
less conflicts.&lt;/li&gt;
&lt;li&gt;Common modules &amp;amp; utilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doing APIs with Django Rest Framework&lt;ul&gt;
&lt;li&gt;Splitting APIs in 2 groups - “giving data” and “taking data”&lt;/li&gt;
&lt;li&gt;Using a lot of generics for “give data”&lt;/li&gt;
&lt;li&gt;When do to selectors?&lt;/li&gt;
&lt;li&gt;Using no generics for “take data” (APIView + Services)&lt;/li&gt;
&lt;li&gt;Handling errors from services&lt;/li&gt;
&lt;li&gt;Inlining serializers &amp;amp; avoiding serializers reuse&lt;/li&gt;
&lt;li&gt;A neat &lt;tt class="docutils literal"&gt;inline_serializer&lt;/tt&gt; util&lt;/li&gt;
&lt;li&gt;Introducing general error formatting for your API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing all of that - what should be &amp;amp; not be tested?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>EuroPython 2018 - Lightning talks on Thursday, July 26</title><link href="https://pyvideo.org/europython-2018/europython-2018-lightning-talks-on-thursday-july-26.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/europython-2018-lightning-talks-on-thursday-july-26.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks
[EuroPython 2018 -  - 2018-07-26 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Getting Started with Mypy and Type Checking</title><link href="https://pyvideo.org/europython-2018/getting-started-with-mypy-and-type-checking.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Jukka Lehtosalo</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/getting-started-with-mypy-and-type-checking.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered if you should try type checking in your Python project, or
what it takes to get started with mypy? I will show how to introduce
type checking the easy way, one step at a time.&lt;/p&gt;
&lt;p&gt;Dropbox was an early adopter of type checking and mypy, and we’ve been
gradually adding type annotations to our large production codebases
since 2016. Engineers love how type annotations improve the clarity of
code, and how mypy can surface hard-to-find bugs. We’ve learned a lot in
the process of annotating millions of lines of code, and in this talk
you’ll learn battle- tested approaches for adding type checking to an
existing codebase.&lt;/p&gt;
&lt;p&gt;I expect no previous experience with mypy. You’ll benefit the most if
you’ve worked on a project with multiple developers.&lt;/p&gt;
</summary></entry><entry><title>Hello to the World in 8 Web Frameworks (micro, batteries included &amp; async)</title><link href="https://pyvideo.org/europython-2018/hello-to-the-world-in-8-web-frameworks-micro-batteries-included-async.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Aaron Bassett</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/hello-to-the-world-in-8-web-frameworks-micro-batteries-included-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join us for a Phileas Fogg inspired whirlwind tour of eight Python web
frameworks.&lt;/p&gt;
&lt;p&gt;“Had he programmed? It was likely, for no one seemed to know web
frameworks more familiarly; there was no framework so obscure that he
did not appear to have an intimate acquaintance with it. He must have
developed in everything, at least in the spirit.”&lt;/p&gt;
&lt;p&gt;We’ll start with the current crop of microframeworks, showing how to
achieve the same task in each, before progressing to “Batteries
included” and the more specialised async frameworks.&lt;/p&gt;
&lt;p&gt;For developers who perhaps have only used a single framework, this talk
gives them an opportunity to get out and explore the world (of web
frameworks) and broaden their horizons, with plenty of Jules Verne
inspired fun along the way.&lt;/p&gt;
</summary></entry><entry><title>How can you use Open Source materials to learn Python &amp; data science?</title><link href="https://pyvideo.org/europython-2018/how-can-you-use-open-source-materials-to-learn-python-data-science.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Kamila Stepniowska</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/how-can-you-use-open-source-materials-to-learn-python-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is very often recommended as the language of choice in a
programming education. I can see at least two cases when it’s a thing: -
introduction to programming - regardless an age and any previous
educational experience, - data science - it’s just a standard… and
actually both - you can teach a future data scientists starting by
teaching Python.&lt;/p&gt;
&lt;p&gt;During this talk, I would like to briefly present you what Open Source
Python educational materials do we have there and how those are and can
be used to teach Python and data science. PyLadies, Django Girls, Django
Carrots, Python Software Foundation creates many very available
materials. From the data science side, you have Open Source materials
created by kaggle, Minerva, Github repos, and many other organizations
and individuals.&lt;/p&gt;
&lt;p&gt;During this talk you will learn: - where to find an Open Source Python
and data science tutorials and educational materials - how does the
Python community can support your learning process - why learning data
science with Python is a good idea.&lt;/p&gt;
&lt;p&gt;I’m also interested in learning your educational experience with an Open
Source materials and Python community supporting your learning
experience. If you would like to share a link or your educational story,
please feel free to send me an email on &lt;a class="reference external" href="mailto:kamila&amp;#64;stepniowski.com"&gt;kamila&amp;#64;stepniowski.com&lt;/a&gt;. If I
will find it interesting for the audience and if you will give me your
permission to share it, I might use it in the talk.&lt;/p&gt;
</summary></entry><entry><title>How to Ignore Most Startup Advice and Build a Decent Software Business</title><link href="https://pyvideo.org/europython-2018/how-to-ignore-most-startup-advice-and-build-a-decent-software-business.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Ines Montani</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/how-to-ignore-most-startup-advice-and-build-a-decent-software-business.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s a great time to be a software developer. Platforms are steadily
becoming more mature, useful tools are released almost daily and things
that seemed hopelessly futuristic only a few years ago are suddenly
commercially viable. Despite this, the software world is awash with
bullshit. The success of the largest technology companies has led to a
very skewed set of lessons. This narrow focus is amplified by the
venture capital industry and the fact that nobody really knows what’s
going to happen next.&lt;/p&gt;
&lt;p&gt;The good news is, none of this actually matters. The basics of creating
something useful and selling it for money remain the same. In this talk,
I’m not going to give you “one weird trick” or tell you to ~* just
follow your dreams *~. But I’ll share some of the things we’ve learned
from building a successful software company around commercial developer
tools and our open- source library spaCy.&lt;/p&gt;
</summary></entry><entry><title>How to make money using Python - Unused potential in the Enterprise World</title><link href="https://pyvideo.org/europython-2018/how-to-make-money-using-python-unused-potential-in-the-enterprise-world.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/how-to-make-money-using-python-unused-potential-in-the-enterprise-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has gained quite some traction in the web development world and
more recently as the goto language for anything that has to do with data
science. However, it’s use in the enterprise world of applications is
rather limited.&lt;/p&gt;
&lt;p&gt;Based on the author’s many years experience in working in enterprise
environments, the talk will demonstrate areas in the business
application space where Python has significant advantages over other
languages, but which are currently dominated by applications written in
Java, C++ or C#.&lt;/p&gt;
&lt;p&gt;There are huge opportunities out there for companies to excel at and use
the Python advantage to their benefit. If you are looking for a lead
idea to kick start your Python business (and you have the resources to
invest into marketing), this talk is for you.&lt;/p&gt;
</summary></entry><entry><title>How to Write Deployment-friendly Applications</title><link href="https://pyvideo.org/europython-2018/how-to-write-deployment-friendly-applications.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/how-to-write-deployment-friendly-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The DevOps movement gave us many ways to put Python applications into
production. But should your application care? Should it need to know
whether it’s running on your notebook, on a server, in a Docker
container, or in some cloud platform as a service?&lt;/p&gt;
&lt;p&gt;It should not, because environment-agnostic applications are easier to
test, easier to deploy, easier to handle, and easier to scale.&lt;/p&gt;
&lt;p&gt;But how can you practically structure and configure your applications to
make them indifferent to the environment they run in? How do secrets fit
into the picture? And where do you put that log file?&lt;/p&gt;
&lt;p&gt;By the end of this talk you’ll know the tools and techniques that enable
you to write such Python applications and you’ll be ready for the next
big change.&lt;/p&gt;
</summary></entry><entry><title>Industrial Machine Learning Pipelines with Python &amp; Airflow</title><link href="https://pyvideo.org/europython-2018/industrial-machine-learning-pipelines-with-python-airflow.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Alejandro Saucedo</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/industrial-machine-learning-pipelines-with-python-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will provide key insights on the learnings I have obtained
throughout my career building &amp;amp; deploying machine learning systems in
critical environments across several sectors. I will provide a deep dive
on how to build scalable and distributed machine learning data pipelines
using Airflow with a Celery backend. I will also compare Airflow with
other technologies available out there and how it differentiates, such
as Luigi, Chronos, Pinball, etc. If you attend the talk, you will obtain
an understanding on the solid fundamentals of Airflow, together with its
caveats and walk-arounds for more complex use-cases. As we proceed with
the examples, I will cover the challenges that you will run into when
scaling Machine Learning systems, and how Airflow can be used to address
these using a manager-worker-queue architecture for distributed
processing with Celery. By the end of this talk you will have the
knowledge required to build your own industry-ready machine learning
pipelines to process data at scale, and I will provide further reading
resources so people are able to implement the knowledge obtained almost
right away.&lt;/p&gt;
</summary></entry><entry><title>Interoperability Rules for an European API Ecosystem: do we still need SOAP?</title><link href="https://pyvideo.org/europython-2018/interoperability-rules-for-an-european-api-ecosystem-do-we-still-need-soap.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/interoperability-rules-for-an-european-api-ecosystem-do-we-still-need-soap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="intro"&gt;
&lt;h4&gt;Intro&lt;/h4&gt;
&lt;p&gt;Italy is introducing a new API Ecosystem because the complexity of the
old SOAP-based protocol was now a barrier for the creation of newer
services.&lt;/p&gt;
&lt;p&gt;This talk presents the Digital Transformation Team ongoing work on an
interoperability framework based on (REST) API, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the scheme standardization based on EU standards, ontologies and RFC&lt;/li&gt;
&lt;li&gt;an availability strategy based on a distributed circuit-breaker and
throttling patterns&lt;/li&gt;
&lt;li&gt;a contract-first (API-first) approach to REST services via &lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPI
spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when you can replace SOAP Headers with the HTTP semantics introduced
in RFC 7230-7238&lt;/li&gt;
&lt;li&gt;strategies for a non-repudiation system based on HTTP (eg. DOSETA,
JWS, ..)&lt;/li&gt;
&lt;li&gt;the path towards an European interoperable API Ecosystem&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h4&gt;Prerequisites&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;basic knowledge of SOAP, REST and the HTTP protocol&lt;/li&gt;
&lt;li&gt;general web service issues, DDOS, availability and metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Introduction to sentiment analysis with spaCy</title><link href="https://pyvideo.org/europython-2018/introduction-to-sentiment-analysis-with-spacy.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Thomas Aglassinger</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/introduction-to-sentiment-analysis-with-spacy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sentiment analysis aims at extracting opinions from texts written in
natural language, typically reviews or comments on social sites and
forums. SpaCy already provides mechanisms for dealing with natural
languages in general but does not offer means for sentiment analysis.&lt;/p&gt;
&lt;p&gt;This talk gives a short introduction to sentiment analysis in general
and shows how to extract topics and ratings by utilizing spaCy’s basic
tools and extending them with a lexicon based approach and simple Python
code to consolidate sentiments spread over multiple words.&lt;/p&gt;
&lt;p&gt;Topic covered are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is sentiment analysis?&lt;/li&gt;
&lt;li&gt;Levels of sentiment detection&lt;/li&gt;
&lt;li&gt;Representing opinions&lt;/li&gt;
&lt;li&gt;Splitting texts in sentences and words.&lt;/li&gt;
&lt;li&gt;Finding the base word (lemma)&lt;/li&gt;
&lt;li&gt;Extending spaCy’s pipeline and tokens&lt;/li&gt;
&lt;li&gt;Matching words to topics and ratings&lt;/li&gt;
&lt;li&gt;Combining multiple words to a rating&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code examples are introduced and explained using a Jupyter notebook that
can be used as basis for your own analysis.&lt;/p&gt;
&lt;p&gt;As additional twist the analyzed texts are not in English but German to
show that this approach can be used for multiple languages. No knowledge
of German is required though because translations of the short examples
sentences are provided.&lt;/p&gt;
</summary></entry><entry><title>Is your code tainted? Finding security vulnerabilities using taint-tracking.</title><link href="https://pyvideo.org/europython-2018/is-your-code-tainted-finding-security-vulnerabilities-using-taint-tracking.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mark Shannon</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/is-your-code-tainted-finding-security-vulnerabilities-using-taint-tracking.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Taint tracking” is a technique used in code analysis to find security
vulnerabilities and other problems.&lt;/p&gt;
&lt;p&gt;Any data that comes from an untrusted source, for example a HTTP
request, is treated as “tainted”. If that “tainted” data is able to
reach a vulnerable part of your code, then you have a problem.
Sophisticated code analysis tools can track this data, and reveal
potential security problems. Examples of the sort of problem that can be
found include cross-site scripting (XSS), code injection, SQL injection
and others.&lt;/p&gt;
&lt;p&gt;In this talk I will show how taint tracking analysis works in practice,
introducing the concepts of source, sink and sanitizer. I will then
demonstrate using taint tracking to find a XSS vulnerability in a django
app. (We will chose a project that is designed to teach django security,
where the vulnerability is deliberate.)&lt;/p&gt;
&lt;p&gt;I will also explain how thinking in terms of “taint” can help you write
safer code, even without access to code analysis.&lt;/p&gt;
&lt;p&gt;During this talk I will use the code analysis tools on lgtm.com to
demonstrate the analysis. lgtm.com is free to use for open-source
projects. A paid version is available.&lt;/p&gt;
</summary></entry><entry><title>Iteration Inside Out - Python's Iteration Protocol</title><link href="https://pyvideo.org/europython-2018/iteration-inside-out-pythons-iteration-protocol.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/iteration-inside-out-pythons-iteration-protocol.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using for loops and list comprehensions in Python is basic and quite
common, right? But how does iteration in Python actually work “under the
hood”? The words “iterator” and “iterable” each occur over 500 times in
the Python documentation, but what does an iterator actually &lt;em&gt;do&lt;/em&gt; , as
opposed to an iterable? And how do they do it? Learn the details as we
turn the iteration protocol inside out, with live coded demonstrations
along the way.&lt;/p&gt;
&lt;p&gt;This talk will start from the way Python iterates of over a sequence, in
comparison with iterating by index, like C. The key point of iterating
over a sequence is that something needs to track which item in the
sequence is next, which is something that Python’s iteration protocol
manages.&lt;/p&gt;
&lt;p&gt;The iterable section will demonstrate creating a simple object that
returns items by index (e.g., a fibonacci series), showing that
&lt;strong&gt;getitem&lt;/strong&gt; is really all you need for an iterable, since an iterator is
created for such objects when iterated upon. BUT, this doesn’t answer
the question of how Python keeps track of which item is next.&lt;/p&gt;
&lt;p&gt;The iterator section answers that question by converting the iterable
just created to an iterator - adding &lt;strong&gt;iter&lt;/strong&gt; and &lt;strong&gt;next&lt;/strong&gt; methods and
showing how the iterator saves state and essentially drives the
iteration protocol.&lt;/p&gt;
&lt;p&gt;Having an accurate understanding of iteration protocol will help
developing Pythonistas reason better about both iterating over existing
objects and creating their own iterables and iterators.&lt;/p&gt;
</summary></entry><entry><title>JavaScript for Python Developers</title><link href="https://pyvideo.org/europython-2018/javascript-for-python-developers.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Žan Anderle</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/javascript-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Having a hard time keeping track of where the modern JavaScript is
going? Are you familiar only with jQuery and you want to know more? Or
maybe you’re not familiar with JavaScript at all and want to learn it
but you don’t know where to start? Then this talk is for you!&lt;/p&gt;
&lt;p&gt;You’ll learn about modern JavaScript from a perspective of a Python
developer. By the end of the talk you’ll know everything you need to
know about the language, its ecosystem, and different tools and
frameworks. You’ll be able to start using JavaScript more confidently
and be familiar with different tools that are at your disposal.&lt;/p&gt;
&lt;p&gt;We’ll go over all the things I wish I’d known when I first got started
with JavaScript.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basics of the language (types, operators, data structures, functions,
modules, etc.) and how they are similar to or different from Python.&lt;/li&gt;
&lt;li&gt;Overview of the commonly used development and build tools.&lt;/li&gt;
&lt;li&gt;Overview of the popular frontend frameworks.&lt;/li&gt;
&lt;li&gt;A look into the newest features and Typescript.&lt;/li&gt;
&lt;li&gt;How to get started and make sense of everything with so much going
on.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Keystone Sponsor Talk - Why Python is at the heart of Smarkets</title><link href="https://pyvideo.org/europython-2018/keystone-sponsor-talk-why-python-is-at-the-heart-of-smarkets.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/keystone-sponsor-talk-why-python-is-at-the-heart-of-smarkets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why Python is at the heart of Smarkets
[EuroPython 2018 -  - 2018-07-26 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;Smarkets is heavily invested in Python and this is why we've decided to
be the Keystone sponsor of EuroPython 2018! In this talk, we'll tell you
more about what we do at Smarkets, why we think we're a unique place to
work, the interesting things we're doing at the Conference and of course
how we use Python every day. We'll also tell you about some of our
current challenges in upgrading from 3.6 to 3.7, evaluating asyncio in
production and what we've learned from type hinting over the past two years.&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Marge: A bot for better Git'ing</title><link href="https://pyvideo.org/europython-2018/marge-a-bot-for-better-giting.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mika Boström</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/marge-a-bot-for-better-giting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past decade, development workflows across industries have
converged towards Continuous Integration (CI) with pull requests (PR).
Automated testing and artifact generation is useful, but the logic is
often flawed: test are run against the source branch, and side effects
from successful merges are not accounted for. Marge-bot improves this
workflow by allowing to test the PR against the target branch while
providing a host of other conveniences.&lt;/p&gt;
</summary></entry><entry><title>May the Fuzz be with you</title><link href="https://pyvideo.org/europython-2018/may-the-fuzz-be-with-you.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Heidi Thorpe</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/may-the-fuzz-be-with-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will explore how Long short-term memory (LSTM) recurrent
neural networks combined with Python can use Artificial Intelligence to
provide invalid, unexpected, or random data as inputs for testing
software and finding network security vulnerabilities. The technique of
machine generated test inputs is an established testing approach and is
sometimes referred to as fuzzing. I will take this idea further by
presenting how various types of machine learning can provide novel
outlier test cases to harden software and networks in a way that is
superior to using only randomness. Instead, I will discuss how to train
neural networks to produce better fuzzing data.This is a natural
progression from my work with machine learning and image processing
using support vector machines (SVM) and Generative Adversarial Networks
(GAN) which I have applied to this new domain of software testing. This
a beginner level talk aimed at all software developers and testers with
a goal to giving attendees a basic understanding of fuzz testing.&lt;/p&gt;
&lt;p&gt;Timing of presentation 1 Introduction 0-5 minutes 2 What is a neural
fuzzing 5-10 minutes 3 How does fuzzing work 10-15 minutes 4 Steps to
train a deep neural network 15-20 minutes 5 Implementing a basic LSTM
neural network for security testing 20-25 minutes 6 Conclusion and
Questions 25-30 minutes&lt;/p&gt;
</summary></entry><entry><title>Microservices and Serverless in Python projects</title><link href="https://pyvideo.org/europython-2018/microservices-and-serverless-in-python-projects.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/microservices-and-serverless-in-python-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monoliths, microservices and now Serverless. Function as a Service
(FaaS) platforms give us new ways to attack old problems. The
possibility of executing functions as a service allows designing
scalable and highly parallel applications, but on the other hand, this
kind of applications require a particular programming style. For
example, bundling dependencies and managing state is not trivial.&lt;/p&gt;
&lt;p&gt;However, there are plenty of tools and frameworks to help you code
serverless applications with Python, and once you get started it is not
complicated.&lt;/p&gt;
&lt;p&gt;In this talk we will mention the advantages of Serverless and we will
focus on the situations in which we can introduce it into our Python
projects. We will use AWS Lambda for the examples.&lt;/p&gt;
&lt;p&gt;These could be the main talking points:&lt;/p&gt;
&lt;p&gt;Introducing Serverless and Function as a Service (FaaS) in Python
projects Advantages of Microservices and Serverless AWS Lambda functions
with chalice Testing AWS lambda with docker&lt;/p&gt;
</summary></entry><entry><title>Mocks, fakes, dummies, stubs and spies: Successfully isolating the snake</title><link href="https://pyvideo.org/europython-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wonder what mocks, fakes, dummies stubs or spies are? Or what the
differences are between them and when one should be used instead of
another? We will take a deep look into these concepts, what they mean
and examples on how to use/create them in Python.&lt;/p&gt;
&lt;p&gt;In this talk, we will quickly explore the reasons for using mock and how
it works, quickly jumping into the different concepts of testing doubles
and how they can be used in Python. The talk will include as part of the
examples from some features in mock coming in Python 3.7 that might
change how usual mocking is performed. The talk builds on the writings
of Gerard Meszaros and Martin Fowler about testing doubles, focusing on
how to apply them to Python.&lt;/p&gt;
&lt;p&gt;This session, which will review test isolation concepts and the
unittest.mock module, is structured in a way that both beginners and
intermediate developers will learn from it. A basic knowledge of testing
is recommended. Intermediate developers will leave the room with a clear
understanding of the tools - further than just using simple mocks - to
successfully fake dependencies. Multiple “not so well known” features of
unittest.mock will be presented so we can shape those objects to behave
functionally different. Unittest.mock is an extremely useful library
which is commonly underused, this talk aims to bring clarity into
stubbing in general and into medium/advanced mock features to ease and
remove pain when users work with it.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro (1’)&lt;/li&gt;
&lt;li&gt;Why doubles are important (1’)&lt;/li&gt;
&lt;li&gt;Main qualities of a double (2’)&lt;/li&gt;
&lt;li&gt;Overview of unittest.mock (5’)&lt;/li&gt;
&lt;li&gt;Testing doubles (15’)
- Doubles (1’)
- Stubs (2’)
- Spies (3’)
- Mocks (5’)
- Fakes (2’)&lt;/li&gt;
&lt;li&gt;Wrap up, conclusion and pointers (2’)&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A (Expected 5’)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>More Than You Ever Wanted To Know About Python Functions</title><link href="https://pyvideo.org/europython-2018/more-than-you-ever-wanted-to-know-about-python-functions.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/more-than-you-ever-wanted-to-know-about-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What exactly &lt;em&gt;are&lt;/em&gt; functions? Let’s talk about functions, methods,
callables and closures - what they are, what you can give them, what
they can give you, what you can do with them … and what’s inside.&lt;/p&gt;
&lt;p&gt;You probably think you already know everything about functions, but you
probably don’t!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input &amp;amp; Output&lt;/strong&gt;: How do you get things in and out of functions? I’ll
cover parameters and the myriad of ways they can be specified, provided
and accessed - including helpful hints to avoid common mistakes! I’ll
cover return values, briefly, along with variable scopes and exceptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closures&lt;/strong&gt; : What are they, how do they work and how they can affect
memory usage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt; : How does a method differ from a function, when are they
made, how do they work (where does &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; come from?) and how to
access the function inside every method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;**magic**&lt;/strong&gt; :Make your own callables from any object!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introspection&lt;/strong&gt; : Using modern Python techniques, what can you find
out about a function, and what can you do with that information?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bytecode&lt;/strong&gt; : What happens if you open up a function and look at its
insides? Can you change it and put it back together again? (Spoiler:
Yes, you can.)&lt;/p&gt;
&lt;p&gt;By the end of this talk, I guarantee* you’ll know more about callables
than when you walked in, along with techniques both practical and so
extreme your colleagues will never let you merge them to master.&lt;/p&gt;
&lt;p&gt;(*This guarantee is legally non-binding and cannot be redeemed in any
way.)&lt;/p&gt;
</summary></entry><entry><title>PEP 557* versus the world</title><link href="https://pyvideo.org/europython-2018/pep-557-versus-the-world.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Guillaume Gelin</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/pep-557-versus-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.7 will ship with a new module called &lt;tt class="docutils literal"&gt;dataclasses&lt;/tt&gt;, which has
been defined in PEP 557.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is this module?&lt;/li&gt;
&lt;li&gt;What are the problems that PEP 557 authors try to solve?&lt;/li&gt;
&lt;li&gt;What was the chosen design, and why?&lt;/li&gt;
&lt;li&gt;How does it compare against the tools that already exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will deeply cover &lt;tt class="docutils literal"&gt;dataclasses&lt;/tt&gt;, but also &lt;tt class="docutils literal"&gt;attrs&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;box&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;thingy&lt;/tt&gt;, and others.&lt;/p&gt;
&lt;p&gt;Post-conference notes: - Slides: &lt;a class="reference external" href="https://slides.com/ramnes/pep-557"&gt;https://slides.com/ramnes/pep-557&lt;/a&gt; -
Implementations and micro-benchmark:
&lt;a class="reference external" href="https://github.com/ramnes/pep-557-vs-the"&gt;https://github.com/ramnes/pep-557-vs-the&lt;/a&gt;- world&lt;/p&gt;
</summary></entry><entry><title>Proper Django Testing</title><link href="https://pyvideo.org/europython-2018/proper-django-testing.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Martin Angelov</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/proper-django-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I’m currently working in a Django project, We have a lot of tests (~
2000) and a fair amount of code coverage currently. The system and the
requirements of the client grows everyday (like in every other project
these days). I’ve convinced that the effort we put in making each of
these tests pays off daily.&lt;/p&gt;
&lt;p&gt;Speaking with other Django and Python developers I’ve noticed that
people often “overengineer” their unit tests and they usually tend to
break their principles.&lt;/p&gt;
&lt;p&gt;In this presentation I will talk mainly about unit tests. - what
packages we use and how and when to use them (properly). We will take a
look on how we structure our projects and how this structure actually
helps us write proper unit tests. I will start with the very basic tests
and continue with the mocking technique. In the end I’m going to refer
to other testing methods (integration, E2E, validation testing, visual
regression, etc.).&lt;/p&gt;
&lt;p&gt;The goal of this talk is to make people better in testing and to show
them how these skills will fasten the development process and help them
maintain their project and it’s quality.&lt;/p&gt;
</summary></entry><entry><title>PyPI: Past, Present and Future</title><link href="https://pyvideo.org/europython-2018/pypi-past-present-and-future.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Nicole Harris</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/pypi-past-present-and-future.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Package Index (PyPI) is the principal repository of software
packages for the Python programming language.&lt;/p&gt;
&lt;p&gt;In May 2018, PyPI served 12.3 billion HTTP requests, with 1.4 million
people visiting pypi.org via their web browser.&lt;/p&gt;
&lt;p&gt;The Python community depends on PyPI for the ongoing functioning of the
entire Python ecosystem.&lt;/p&gt;
</summary></entry><entry><title>Python and Web Sockets</title><link href="https://pyvideo.org/europython-2018/python-and-web-sockets.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/python-and-web-sockets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most web-frameworks do not support Web Socket integration out
of the box, Python has multiple options available making it a piece of
cake. This talk showcases integrating Web Sockets in Python web-apps,
focusing on situations that can make good use of it and presenting
implementations with most popular frameworks: Tornado and Django. We
will explore a similar style but different underlying technologies of
both, and finish with a live demo.&lt;/p&gt;
</summary></entry><entry><title>Standardize Testing in Python</title><link href="https://pyvideo.org/europython-2018/standardize-testing-in-python.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/standardize-testing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, Bernat will introduce tox, an open source tool with the
bold vision of standardizing testing. From a CIs point of view, testing
contains much more than just unit and/or integration tests; other things
like code style checks, packaging, testing under various versions of
Python, and checking that documentation still generates, are just as
important. Things quickly start to spiral out of control once you add
into the mix that there are many tools and ways to accomplish each of
these tasks. In this talk, we will learn how tox tries to abstract away
all this complexity, how to easily run CI tests on your local machine,
and how one can use this tool inside your CI frameworks to ensure high
quality and easily maintainable packages.&lt;/p&gt;
</summary></entry><entry><title>Succinct data structures for python</title><link href="https://pyvideo.org/europython-2018/succinct-data-structures-for-python.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Konstantin Ignatov</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/succinct-data-structures-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a presentation of and call for participation in development and
testing of Python bindings to Succinct Data Structure Library.&lt;/p&gt;
&lt;p&gt;From Wikipedia: Succinct data structures can represent an object (such
as a bitvector or a tree) in space close to the information-theoretic
lower bound of the object while supporting operations of the original
object efficiently. The theoretical time complexity of an operation
performed on the classical data structure and the equivalent succinct
data structure are (most of the time) identical.&lt;/p&gt;
&lt;p&gt;Currently bindings are provided for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mutable bit-compressed vectors&lt;/li&gt;
&lt;li&gt;Immutable compressed integer vectors&lt;/li&gt;
&lt;li&gt;Immutable compressed bit (boolean) vectors&lt;/li&gt;
&lt;li&gt;Rank and select operations on bitvectors&lt;/li&gt;
&lt;li&gt;Wavelet trees&lt;/li&gt;
&lt;li&gt;Comressed suffix arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Original library: &lt;a class="reference external" href="https://github.com/simongog/sdsl-lite"&gt;https://github.com/simongog/sdsl-lite&lt;/a&gt; Most of examples
from SDSL cheat sheet and SDSL tutorial are implemented.&lt;/p&gt;
</summary></entry><entry><title>The rise of Python in the data communities</title><link href="https://pyvideo.org/europython-2018/the-rise-of-python-in-the-data-communities.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/the-rise-of-python-in-the-data-communities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A retrospective and prospective of Python’s adoption in the
&lt;strong&gt;data-driven industries&lt;/strong&gt; and how it has and should influence its
ecosystem and communities.&lt;/p&gt;
&lt;p&gt;Thanks to its versatility, Python’s usage and adoption has changed a lot
over the last decade to go beyond the very act of software programming.&lt;/p&gt;
&lt;p&gt;From Developers to SysOps, closely followed by Scientists and Data
analysts, Python has spread to become a common tongue for a wide range
of people.&lt;/p&gt;
&lt;p&gt;We will start by looking at how this increased adoption impacted Python
ecosystem and is still shaping it today. While &lt;strong&gt;this talk is not walk
through all the Python technologies around data&lt;/strong&gt; , some of them will be
outlined so you will hear words like Numpy, Pandas or Jupyter.&lt;/p&gt;
&lt;p&gt;Then we will try to project ourselves in the future and by
&lt;strong&gt;highlighting the pitfalls Python has to overcome&lt;/strong&gt; to keep up with its
pace and mature in its ability to &lt;strong&gt;scale&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Draft of the agenda&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The rise and collusion of science and engineering and their influence
on Python&lt;/li&gt;
&lt;li&gt;From DevOps to DataOps, the shape and breakthroughs of Python’s
ecosystem&lt;/li&gt;
&lt;li&gt;Prospect of challenges and pitfalls in the massive data era&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>The Web is Terrifying! Using the PyData stack to spy on the spies.</title><link href="https://pyvideo.org/europython-2018/the-web-is-terrifying-using-the-pydata-stack-to-spy-on-the-spies.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Sarah Bird</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/the-web-is-terrifying-using-the-pydata-stack-to-spy-on-the-spies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all know the internet can be a scary place. In this talk I’ll focus
on two ways I’ve found it positively terrifying. First, digging into
tracking technologies, I have learned about the breadth and depth of
ways our online activity is monitored, stored, and repackaged. Second,
when starting out to learn a new skill, the tidal wave of information
available online can be overwhelming.&lt;/p&gt;
&lt;p&gt;Using the PyData stack to explore and visualize different data sources,
including a new dataset from Mozilla, we’ll examine some of the many
types of online tracking. My goal is to leave the audience with:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A sense of the breadth of tools in the PyData toolbox that can be
applied to a real-world analysis 2) An understanding of a few methods
of online tracking so they can be more informed internet citizens&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In particular, now that the EU’s General Data Protection Regulation
(GDPR) has come into force, we can explore the data in light of EU
citizens’ new rights, and the new responsibilities of companies
worldwide.&lt;/p&gt;
&lt;p&gt;Along the way, I’ll also talk about becoming a software engineer, then a
builder of data science tools, and my new journey into data science.
Being self-taught can be, lonely, scary, and full of embarrassing
pitfalls. I’ll share some stories about my learning journey, and the
people and resources that have supported me.&lt;/p&gt;
</summary></entry><entry><title>Type annotations with larger codebases</title><link href="https://pyvideo.org/europython-2018/type-annotations-with-larger-codebases.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Stephan Jaensch</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/type-annotations-with-larger-codebases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve heard about type annotations, you know they help reduce bugs and
improve documentation especially for large codebases, and you’ve
attended an introductory talk or read a tutorial about using them. But
how do you get started using them with your big, existing codebase? How
do you make sure your colleagues will be annotating new code they write
- or existing code they’re changing? And how do you get around some of
the issues you might run into when using the still-beta type checker
mypy on your codebase?&lt;/p&gt;
&lt;p&gt;This talk will start where the typical introductory Python type
annotation talks end and discuss the real-world challenges when starting
to annotate types with an existing codebase of tens or hundreds of
thousands of lines of code. I’ll walk you through best practices learned
from doing just that at Yelp, telling you about some of the roadblocks
we hit (and how we got past them).&lt;/p&gt;
&lt;p&gt;We’ll also take a look at: - how you can get the most out of type
annotations even with non-annotated third-party libraries - how to deal
with code patterns that currently don’t always work well with
annotations - when the only way to get proper type checking is through
refactoring your code.&lt;/p&gt;
</summary></entry><entry><title>Understanding and Applying CQRS</title><link href="https://pyvideo.org/europython-2018/understanding-and-applying-cqrs.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Vinicius Pacheco</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/understanding-and-applying-cqrs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating scalable applications has a number of complex variables and one
of them is to work with scalability and performance in the database
layer. Command Query Responsibility Segregation (CQRS) is a design
pattern that helps produce more performance and resilience in
applications where data access is intense. In this talk, we will
understand when to use and the problems that CQRS solves. We will also
apply CQRS in a Python application using the Nameko framework.&lt;/p&gt;
&lt;p&gt;The outline talk is: ○ (4 minutes) - Present a real problem of a web
application, when creating new instances is not a solution, because the
database receives an overwrite of writing and unfeasible to read the
data, collapsing the application. ○ (6 minutes) - Present the CQRS
pattern conceptually and how this design pattern solves this type of
problem using the structure of Command Stack and Query Stack ○ (3
minutes) - Show Nameko as an interesting tool to apply the CQRS. It will
demonstrate the use of HTTP, RPC and the possibility of applying
pub/sub. ○ (6 minutes) - Create (live code) the Command Stack layer
using Nameko on a Postgresql database. ○ (5 minutes) - Create (live
code) the Query Stack layer using Nameko over a MongoDB database. ○ (3
minutes) - Explain common myths and mistakes about CQRS (3 minutes) - Q
&amp;amp; A Session&lt;/p&gt;
</summary></entry><entry><title>When to use Machine Learning: Tips, Tricks and Warnings</title><link href="https://pyvideo.org/europython-2018/when-to-use-machine-learning-tips-tricks-and-warnings.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Pascal van Kooten</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/when-to-use-machine-learning-tips-tricks-and-warnings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Artificial Intelligence, and machine learning in particular, is one of
the hottest topics in tech/business. I will explain the core of machine
learning, and the main goal of this talk will be to help you judge the
success whenever someone yells “I know! let’s solve this using machine
learning!”. I will also provide tips and tricks on how to increase the
success of such projects. The second part of the talk will be about 2
open-source python projects I’ve created, as well as a project I’m
working on regarding the trading of cryptocurrency… and their relation
to machine learning. Specifically, the challenges and findings in making
these cases work will be explored.&lt;/p&gt;
</summary></entry><entry><title>Why develop a CLI (Command Line Interface) first?</title><link href="https://pyvideo.org/europython-2018/why-develop-a-cli-command-line-interface-first.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Steve Barnes</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/why-develop-a-cli-command-line-interface-first.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the core concepts of Application Development, (not just in
python), is the separation between the Business Logic and the User
Interface. However there is a strong temptation to start with the user
interface and add the business logic to it some methodologies emphasize
this with the process of prototyping the (G)UI first. The danger is that
your business logic code can get too entangled with the UI and a change
of platform or framework becomes almost impossible.&lt;/p&gt;
&lt;p&gt;This presentation will show how to maintain a clear separation between
the Business Logic and the User Interface by starting with a command
line interface using argparse and growing a GUI on top.&lt;/p&gt;
&lt;p&gt;We will cover: - Why maintain the seperation - Using argparse - Adding a
GUI layer with wxPython - Automating the GUI generation - Adding a web
interface - Testing advantages of this approach - Scripting advantages -
Some packaging models.&lt;/p&gt;
&lt;p&gt;Slides and Samples all uploaded to
&lt;a class="reference external" href="https://github.com/GadgetSteve/EP2018_Talk"&gt;https://github.com/GadgetSteve/EP2018_Talk&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Jupyter Enhancement Proposal Story</title><link href="https://pyvideo.org/europython-2018/a-jupyter-enhancement-proposal-story.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Raniere Silva</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/a-jupyter-enhancement-proposal-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python users should be familiar with the concept of Python Enhancement
Proposals (PEPs), the way that the Python language evolves over time. In
a similar fashion, the Jupyter project has Jupyter Enhancement Proposals
(JEPs). This talk with cover the proposer first-hand experience when
submiting JEP 23 - Add Template as Metatada enhancement proposal from
it’s beginning, during EuroPython 2017, up to its current status. We
will, in addition, present efforts made as part of the OpenDreamKit
project to perform Jupyter notebooks conversions using custom metadata,
templates, and exporters, in a programmatic way.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;0:00 - 0:05 Who are we? We are impostors! 0:05 - 0:10 Our previous
experience with Jupyter Notebook. We will talk about the time that
Software Carpentry used Jupyter Notebook for their lesson creation and
OpenDreamKit Jupyter notebook programmatic notebooks conversion. 0:10 -
0:15 You are not alone. We will talk how the idea for the Jupyter
Enhancement Proposals (JEPs) borned at EuroPython 2017 Help Desk 0:15 -
0:20 Writing our first Jupyter Enhancement Proposals. We will cover our
steps to create the pull request required by the Jupyter Project. 0:20 -
0:25 What is the current status of the Jupyter Enhancement Proposals? We
will cover any progress from the time of this talk proposal submission
and the date of it presentation. 0:25 - 0:30 Time for questions&lt;/p&gt;
</summary></entry><entry><title>Adventures in compatibility: emulating CPython's C API in PyPy</title><link href="https://pyvideo.org/europython-2018/adventures-in-compatibility-emulating-cpythons-c-api-in-pypy.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Ronan Lamy</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/adventures-in-compatibility-emulating-cpythons-c-api-in-pypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is a fast and compliant implementation of Python. In other words,
it’s an interpreter for the Python language that can act as a full
replacement for the reference interpreter, CPython. It’s optimised to
enable efficient just-in- time compilation of Python code to machine
code, and has releases matching versions 2.7, 3.5 and soon(ish) 3.6. The
PyPy project also developed cffi as a clean and efficient way of
interfacing with C code.&lt;/p&gt;
&lt;p&gt;However, many libraries in the Python ecosystem are implemented as C
extensions, which target CPython’s C API. Many others use Cython, which
builds C extensions under the hood. Therefore, PyPy needs an emulation
layer for the C API.&lt;/p&gt;
&lt;p&gt;This emulation needs to bridge the differences between the
implementation languages and the object models of CPython and PyPy. The
solution is called cpyext. It’s implemented in a mixture of RPython and
C, with most of the API functions and macros implemented in RPython.
cpyext exposes PyObjects to the extension code that appear similar to
CPython objects (as long as extension writers stay within the fuzzily
defined boundaries of the public API) but are merely ‘shadows’ of the
real PyPy objects.&lt;/p&gt;
&lt;p&gt;After a brief presentation of PyPy, its goals, and its current statuts
and roadmap, this talk will dive into the vexed topic of its handling of
C extensions. By the end of it, the audience should understand the
operating principles of cpyext and have a clearer understanding of what
happens when you install and run numpy, for instance, on top of PyPy.
Some basic familiarity with CPython internals and how C extensions are
made will be assumed.&lt;/p&gt;
</summary></entry><entry><title>All You Need is Pandas: Unexpected Success Stories</title><link href="https://pyvideo.org/europython-2018/all-you-need-is-pandas-unexpected-success-stories.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Dimiter Naydenov</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/all-you-need-is-pandas-unexpected-success-stories.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning to use the awesome Pandas toolkit helped me immensely in lots
of ways. Finding novel, efficient solutions to complex day-to-day
problems with Pandas not only saves time, but can be fun and rewarding
experience.&lt;/p&gt;
&lt;p&gt;In this talk I’ll present use cases I had to solve, but the
“traditional” approach proved tough and/or otherwise frustrating
implement nicely. Since I was just starting to learn Pandas, decided to
try an alternative solution with it. What I learned changed the way I
think about data processing with Python, and it only got better since!&lt;/p&gt;
&lt;p&gt;The use cases deals with extracting pen strokes from handwritten SVG
samples, and recomposing them into reusable letters and numbers. When
you need to compare each stroke to all others, often more than once,
resulted in inefficient, slow, and hard to maintain code. Even a naive
Pandas approach with loops helped to reduce both the memory footprint,
and improve the performance considerably! Improving the implementation
further, vectorizing inner loops, and taking advantage of multi-index
operations, I managed to get the same results, using less memory and a
lot faster (by orders of magnitude).&lt;/p&gt;
</summary></entry><entry><title>Asyncio in production</title><link href="https://pyvideo.org/europython-2018/asyncio-in-production.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Hrafn Eiriksson</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/asyncio-in-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Much has been written about asynchronous programming in Python,
especially after the introduction of asyncio into the standard library
of the language. We’ve all seen the benchmarks that tell us how
asyncio-powered web servers massively outperform their non-asyncio
counterparts for trivial routes and we’ve seen the articles that tell us
how to make the move from flask to aiohttp and why we should.&lt;/p&gt;
&lt;p&gt;Despite all of this, the question remains: How is it to use asyncio in a
production setting? What are the pain points of migrating a large
application to use asyncio? How does the performance of this real-world
application differ after the migration? Is it still just unicorns and
fairy tales? The goal of this talk is to address these questions.&lt;/p&gt;
&lt;p&gt;If you are curious about taking the step from asyncio-dabbling to
creating actual mission critical software systems in asyncio; this is
the talk for you!&lt;/p&gt;
</summary></entry><entry><title>Asyncio in Python 3.7 and 3.8.</title><link href="https://pyvideo.org/europython-2018/asyncio-in-python-37-and-38.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/asyncio-in-python-37-and-38.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk is aimed to give attendees a clear picture of new asyncio
features in Python 3.7 and give an idea of what to expect in Python 3.8.
As a CPython core developer and the lead asyncio maintainer I believe I
have a unique perspective to share with EuroPython guests.&lt;/p&gt;
&lt;p&gt;Python 3.7 boasts a number of new amazing features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sendfile&lt;/li&gt;
&lt;li&gt;start TLS&lt;/li&gt;
&lt;li&gt;new high performance buffered protocols&lt;/li&gt;
&lt;li&gt;context-local state via PEP 567&lt;/li&gt;
&lt;li&gt;asyncio.run &amp;amp; create_task &amp;amp; other usability improvements&lt;/li&gt;
&lt;li&gt;many performance improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first part of the talk will be focusing on new APIs to explain them
and give ideas how they can be used in production.&lt;/p&gt;
&lt;p&gt;The second part of the talk will be focused on what to expect to see in
asyncio in Python 3.8:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;new performance tracking &amp;amp; profiling API&lt;/li&gt;
&lt;li&gt;supervisors &amp;amp; cancel scopes&lt;/li&gt;
&lt;li&gt;new timeouts API&lt;/li&gt;
&lt;li&gt;a completely new way of writing asyncio applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these ideas are borrowed from Trio and Curio (two other popular
async/await Python frameworks), many are borrowed from languages like
Erlang and Scala. One thing I can say for certain is that 3.8 will be
the biggest and most interesting asyncio release ever!&lt;/p&gt;
</summary></entry><entry><title>Autism in development</title><link href="https://pyvideo.org/europython-2018/autism-in-development.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Ed Singleton</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/autism-in-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autism is a condition that correlates with engineering. Many people in
the industry are diagnosed autistic, undiagnosed autistic, or near
autistic. There are many lessons that can be learned from how to deal
with autistic people that are very useful in our industry. These lessons
are often also useful when dealing with non-autistic people. There are
many lessons on how to deal with your own autism that are useful to
undiagnosed autistic people and near autistic people.&lt;/p&gt;
&lt;p&gt;We will cover the basics of autism, and related conditions. We will
cover simple tricks that can make discussions and changes easier in
workplaces (&amp;quot;10 Simple tricks to make your autistic colleagues shout
less!&amp;quot;). We will also cover techniques you can use for dealing with your
own autistic tendencies (&amp;quot;100 coping mechanisms to pretend that you are
normal!&amp;quot;).&lt;/p&gt;
&lt;p&gt;I am a late diagnosis autistic person myself, and will discuss the
difference between knowing and not knowing that you are autistic.&lt;/p&gt;
</summary></entry><entry><title>Bad hotel again? Find your perfect match!</title><link href="https://pyvideo.org/europython-2018/bad-hotel-again-find-your-perfect-match.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Elisabetta Bergamini</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/bad-hotel-again-find-your-perfect-match.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most travellers, online reviews play a major role when it comes to
choosing which hotel to stay in. But can we actually trust a hotel
review? And if yes, how can we select which are the most meaningful and
interesting for us among the billions available in platforms such as
Booking.com, Tripadvisor, Facebook (just to mention a few)? For 10 years
now, at TrustYou we have built processes that analyze terabytes of hotel
reviews at a global scale, and strive to understand what people complain
about or like in the hotels worldwide. Dealing with a huge amount of
reviews written in tens of different languages - each having its own
subtle shades of meanings - is the challenge we work on everyday. In
this talk, we will show what goes on behind the scenes of the TrustYou
Metareview and dive into the technologies and the algorithms that allow
us to provide travellers with all the information they need to find the
perfect hotel.&lt;/p&gt;
</summary></entry><entry><title>Bridging the Gap: from Data Science to Production</title><link href="https://pyvideo.org/europython-2018/bridging-the-gap-from-data-science-to-production.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Florian Wilhelm</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/bridging-the-gap-from-data-science-to-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A recent but quite common observation in industry is that although there
is an overall high adoption of data science, many companies struggle to
get it into production. Huge teams of well-payed data scientists often
present one fancy model after the other to their managers but their
proof of concepts never manifest into something business relevant. The
frustration grows on both sides, managers and data scientists.&lt;/p&gt;
&lt;p&gt;In my talk I elaborate on the many reasons why data science to
production is such a hard nut to crack. I start with a taxonomy of data
use cases in order to easier assess technical requirements. Based
thereon, my focus lies on overcoming the two-language-problem which is
Python/R loved by data scientists vs. the enterprise-established
Java/Scala. From my project experiences I present three different
solutions, namely 1) migrating to a single language, 2) reimplementation
and 3) usage of a framework. The advantages and disadvantages of each
approach is presented and general advices based on the introduced
taxonomy is given.&lt;/p&gt;
&lt;p&gt;Additionally, my talk also addresses organisational as well as problems
in quality assurance and deployment. Best practices and further
references are presented on a high-level in order to cover all facets of
data science to production.&lt;/p&gt;
&lt;p&gt;With my talk I hope to convey the message that breakdowns on the road
from data science to production are rather the rule than the exception,
so you are not alone. At the end of my talk, you will have a better
understanding of why your team and you are struggling and what to do
about it.&lt;/p&gt;
</summary></entry><entry><title>Die Threads</title><link href="https://pyvideo.org/europython-2018/die-threads.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/die-threads.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the brave new world of async, threads are now a thing of the past. Or
are they not?&lt;/p&gt;
</summary></entry><entry><title>ETL pipeline to achieve reliability at scale</title><link href="https://pyvideo.org/europython-2018/etl-pipeline-to-achieve-reliability-at-scale.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Isabel Lopez</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/etl-pipeline-to-achieve-reliability-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In an online betting exchange, thousands of money related transactions
are generated per minute. This data flow transforms a common and, in
general, tedious task such as accounting into an interesting big data
engineering problem. At Smarkets, accounting reports serve two main
purposes: housekeeping of our financial operations and documentation for
the relevant regulation authorities. In both cases, reliability and
accuracy are crucial in the final result. The fact that these reports
are generated daily, the need to cope with failure when retrieving data
from previous days, and the fast growing transaction volume obsoleted
the original accounting system and required a new pipeline that could
scale.&lt;/p&gt;
&lt;p&gt;This talk presents the ETL pipeline designed to meet the constraints
highlighted above, and explains the motivations behind the tech stack
chosen for the job, which includes Python3, Luigi and Spark among
others. These topics will be covered by describing the main technical
problems solved with our design: - Fault tolerance and reliability, i.e
ability to identify faulty steps and only rerun those instead of the
whole pipeline. - Fast input/output. - Fast computations.&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018 - Lightning talks on Wednesday, July 25</title><link href="https://pyvideo.org/europython-2018/europython-2018-lightning-talks-on-wednesday-july-25.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/europython-2018-lightning-talks-on-wednesday-july-25.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks
[EuroPython 2018 -  - 2018-07-25 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018 - Opening Session</title><link href="https://pyvideo.org/europython-2018/europython-2018-opening-session.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/europython-2018-opening-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Opening session
[EuroPython 2018 -  - 2018-07-25 - Smarkets]
[Edinburgh, UK]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2018.europython.eu/en/speaker-release-agreement/"&gt;https://ep2018.europython.eu/en/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>From Zero to Azure with Python, Docker containers, and Visual Studio Code</title><link href="https://pyvideo.org/europython-2018/from-zero-to-azure-with-python-docker-containers-and-visual-studio-code.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Dan Taylor</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/from-zero-to-azure-with-python-docker-containers-and-visual-studio-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session we will walk through creating a Python web app with
Docker and deploying it to Microsoft Azure using the free,
cross-platform, and open- source Visual Studio Code. We will also show
using hosted Jupyter notebooks in Azure Notebooks to analyze data, and
storing data in CosmosDB using the Azure SDK for Python. If you’re
excited about Python and want to learn more about the capabilities of
Azure, then this session is for you. We will cover all of the basics, no
experience with Azure, containers, cloud computing, or Visual Studio
Code necessary!&lt;/p&gt;
&lt;p&gt;Code Repository: &lt;a class="reference external" href="https://github.com/qubitron/zerotoazure-flaskcosmos"&gt;https://github.com/qubitron/zerotoazure-flaskcosmos&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>