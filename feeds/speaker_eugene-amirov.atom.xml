<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_eugene-amirov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-03T00:00:00+00:00</updated><entry><title>Sustainable way of testing your code</title><link href="https://pyvideo.org/europython-2015/sustainable-way-of-testing-your-code.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Eugene Amirov</name></author><id>tag:pyvideo.org,2015-08-03:europython-2015/sustainable-way-of-testing-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eugene Amirov - Sustainable way of testing your code
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;How to write a test so you would remember what it does in a year from
now? How to write selective tests with different inputs? What is test?
How to subclass tests cases and yet maintain control on which tests
would run? How to extend or to filter inputs used in parent classes?
Are you a tiny bit intrigued now? :)&lt;/p&gt;
&lt;p&gt;This is not another talk about how to test, but how to organize your
tests so they were maintainable. I will be using nose framework as an
example, however main ideas should be applicable to any other
framework you choose. Explaining how some parts of code works I would
have to briefly touch some advanced python topics, although I will
provide need-to-know basics there, so people with any level of python
knowledge could enjoy the ride.&lt;/p&gt;
</summary></entry></feed>