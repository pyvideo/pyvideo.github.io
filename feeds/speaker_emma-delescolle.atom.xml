<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_emma-delescolle.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-15T00:00:00+00:00</updated><entry><title>Writing micro services in Python - Sure But which framework</title><link href="https://pyvideo.org/pycon-uk-2019/writing-micro-services-in-python-sure-but-which-framework.html" rel="alternate"></link><published>2019-09-15T00:00:00+00:00</published><updated>2019-09-15T00:00:00+00:00</updated><author><name>Emma Delescolle</name></author><id>tag:pyvideo.org,2019-09-15:pycon-uk-2019/writing-micro-services-in-python-sure-but-which-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When googling 'python micro-service framework', there are plenty of 'Hello world' examples out there for many (micro-)frameworks. But how do they scale to 'real' world applications? How can I connect framework X to a database or what do you need to do to use OAuth2 with framework Y?&lt;/p&gt;
</summary></entry><entry><title>Making your life (h)APIer with Django</title><link href="https://pyvideo.org/djangocon-europe-2019/making-your-life-hapier-with-django.html" rel="alternate"></link><published>2019-04-20T00:00:00+00:00</published><updated>2019-04-20T00:00:00+00:00</updated><author><name>Emma Delescolle</name></author><id>tag:pyvideo.org,2019-04-20:djangocon-europe-2019/making-your-life-hapier-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today’s web, creating API’s has become a big part of web-development. Django and Django REST Framework make our lives easy :-) But let’s take it a notch further with DRF-Schema-Adapter.
When it comes to building API’s with Django, Django REST Framework has become the go-to solution. It is a great tool that integrates seamlessly with Django and it’s ORM.
Unfortunately when building a medium-to-large API, DRF leads to a lot of very similar and somewhat repetitive code in building your ViewSet, Serializer, Pagination or Filter classes. In the long-run, all this code also has to be maintained!
This is where DRF-Schema-Adapter can make your life easier and happier!
In this talk, we’ll go over the basics of building an API with DRF versus using DRF-Schema-Adapter and how it will help shrink your codebase.&lt;/p&gt;
</summary></entry><entry><title>Introduction to python running on different hardware types</title><link href="https://pyvideo.org/pycon-uk-2018/introduction-to-python-running-on-different-hardware-types.html" rel="alternate"></link><published>2018-09-17T00:00:00+00:00</published><updated>2018-09-17T00:00:00+00:00</updated><author><name>Emma Delescolle</name></author><id>tag:pyvideo.org,2018-09-17:pycon-uk-2018/introduction-to-python-running-on-different-hardware-types.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the past few years we have seen a lot of advances regarding the
hardware python can run on.&lt;/p&gt;
&lt;p&gt;You're probably used to Python running on &amp;quot;regular&amp;quot; computers. But 10
years ago a revolution started with the Raspberry Pi that was one of the
first computers in decades, thanks to its GPIO headers, which allowed
easy control of electronic hardware from a programming language.&lt;/p&gt;
&lt;p&gt;That was the dawn of a new era that opened-up electronic hardware
programming with python on multiple devices as micro-controllers like
the BBC Micro:bit thanks to MicroPyton and plenty of other MCU's running
either MicroPython or CircuitPython (a friendly fork of MicroPython).&lt;/p&gt;
&lt;p&gt;But it doesn't stop there, Python can also run on phones and tablets
thanks to BeeWare and Kivy.&lt;/p&gt;
</summary></entry><entry><title>We made a clock with Python</title><link href="https://pyvideo.org/pycon-uk-2018/we-made-a-clock-with-python.html" rel="alternate"></link><published>2018-09-17T00:00:00+00:00</published><updated>2018-09-17T00:00:00+00:00</updated><author><name>Leila Verhaegen</name></author><id>tag:pyvideo.org,2018-09-17:pycon-uk-2018/we-made-a-clock-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session is about the story of two girls who decided to make a clock
themselves after searching a lot on the internet and without finding
what they were looking for.&lt;/p&gt;
&lt;p&gt;In this talk we will tell you what we used and how we used it, we will
also tell you how we made plans and then how we made circuits (timing,
requirements, how difficult and fun it was)&lt;/p&gt;
&lt;p&gt;We will finally tell you more about code and why exactly we wrote it
like that (Spoiler: there was a module with the RTC we used but the
memory of the trinket was to small to support the original code to do
what exactly we wanted to do)&lt;/p&gt;
</summary></entry><entry><title>Staying DRY(er) when working with Django and frontend frameworks/libraries</title><link href="https://pyvideo.org/djangocon-europe-2017/staying-dryer-when-working-with-django-and-frontend-frameworkslibraries.html" rel="alternate"></link><published>2017-04-03T00:00:00+00:00</published><updated>2017-04-03T00:00:00+00:00</updated><author><name>Emma Delescolle</name></author><id>tag:pyvideo.org,2017-04-03:djangocon-europe-2017/staying-dryer-when-working-with-django-and-frontend-frameworkslibraries.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written an API and wished you could magically export it to the frontend framework or library of your choice without having to redefine every model or every form?&lt;/p&gt;
&lt;p&gt;Well, today it is possible! Come to this talk and learn how.&lt;/p&gt;
</summary></entry></feed>