<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Code quality in Python</title><link>https://pyvideo.org/europython-2019/code-quality-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Four years ago I talked about code quality during EuroPython in
Bilbao. A lot of things changed from that time. Firstly, most tools I
presented were still developed and gained new features, but also new
ones appeared I wanted to discuss with you. Secondly, Python changed,
Python 3 has type hints on board and there is a new tool dedicated to
checking the types. Thirdly - I changed. I'm more distanced form my
zealous approach from four years ago. I got real and reasonable.
That's why I wanted to talk about code quality tools in Python again.&lt;/div&gt;
&lt;div class="line"&gt;I'll talk about all the software that can make code review a bit
simpler by pointing out possible errors, duplicates or unused code.
I'll talk again about formatters and how can they be used in
modern-time projects. And I'll talk about hobgoblins, if you know what
I mean :)&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radosław Ganczarek</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/code-quality-in-python.html</guid><category>Best Practice</category><category>Code Analysis</category><category>Python 3</category><category>Tooling</category><category>Type-Hinting</category></item><item><title>The Story of Features Coming in Python 3.8 and Beyond</title><link>https://pyvideo.org/europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's coming in Python 3.8? You can learn it by yourself by reading an
excellent document [What's New in Python 3.8][1]. I'm not going to
retell this document. Instead I'll focus on things barely described
there or not mentioned at all:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why will the new features appear in Python 3.8 and what's the story
behind them?&lt;/li&gt;
&lt;li&gt;What is being discussed and developed now, but won't appear in Python
3.8?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll share the news I learned at PyCon 2019 from the talks and
discussions with Python core developers. I'll mention the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New syntax: &lt;tt class="docutils literal"&gt;x := expr&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f(...,&lt;/span&gt; /, &lt;span class="pre"&gt;...)&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;f'{expr=}'&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;New types: &lt;tt class="docutils literal"&gt;Literal&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Final&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;TypedDict&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Future features of typing and async/await&lt;/li&gt;
&lt;li&gt;New approaches to optimizing Python: sub-interpreters, mypyc&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrey Vlasovskikh</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/the-story-of-features-coming-in-python-38-and-beyond.html</guid><category>ASYNC / Concurrency</category><category>Compiler and Interpreters</category><category>New Features</category><category>Python 3</category><category>Type-Hinting</category></item><item><title>Static typing: beyond the basics of def foo(x: int) -&gt; str:</title><link>https://pyvideo.org/europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been warming up to static typing for a few
years now. You may have seen talks that did a great job of introducing
the basic concepts, mypy, and high-level strategies to cover existing
code bases.&lt;/p&gt;
&lt;p&gt;We need to go deeper.&lt;/p&gt;
&lt;p&gt;Let’s talk about the challenges you inevitably encounter when you try to
type- check a large code base. One full of many moving parts, complex
architectures, metaprogramming tricks, and interfaces with a dozen other
packages.&lt;/p&gt;
&lt;p&gt;Static type checking is very powerful – when you use it to maximum
advantage and explain your code to the typechecker accurately. We will
cover a few tools at your disposal: generics, signature overloads,
protocols, custom mypy plug- ins, and more.&lt;/p&gt;
&lt;p&gt;There is more than just tools, though. Behind them all are universal
concepts valid in any language. I hope to convince you that thinking in
terms of the type system helps you write better code…&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vita Smid</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html</guid><category>Static Analysis</category><category>Type-Hinting</category></item></channel></rss>