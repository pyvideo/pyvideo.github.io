<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_library.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-11T00:00:00+00:00</updated><entry><title>Gathering Related Functionality: Patterns for Clean API Design</title><link href="https://pyvideo.org/pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html" rel="alternate"></link><published>2018-11-11T00:00:00+00:00</published><updated>2018-11-11T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2018-11-11:pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will arm you with some tools to design a library that 'just works', but also has obvious escape hatches to handle corner cases. It covers several patterns for cleanly organizing related and overlapping functionality in a way that statisfies both humans and static analysis tools.&lt;/p&gt;
&lt;p&gt;---&lt;/p&gt;
&lt;p&gt;What do you do when you have to choose between designing your function for one of two common use cases?&lt;/p&gt;
&lt;p&gt;How about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?&lt;/p&gt;
&lt;p&gt;These kinds of questions can be vexing when trying to design a clean, well-scoped API.&lt;/p&gt;
&lt;p&gt;This talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alternate constructors with &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Inheritance with &amp;#64;staticmethod and &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Dispatch by type&lt;/li&gt;
&lt;li&gt;A new convention for namespacing functions: variants&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="library"></category><category term="api design"></category></entry></feed>