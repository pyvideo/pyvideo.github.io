<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 21 Jun 2016 00:00:00 +0000</lastBuildDate><item><title>Mutation Testing in Python with Cosmic Ray</title><link>https://pyvideo.org/ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-21:ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</guid><category>unit testing</category><category>testing</category><category>mutation testing</category><category>ndc</category><category>ndcoslo</category><category>ndcoslo2016</category></item><item><title>Python: An Amazing Second Language for .NET Developers</title><link>https://pyvideo.org/ndc-oslo-2016/python-an-amazing-second-language-for-dotnet-developers.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The modern software development landscape is a terrain of many platforms and technologies. Gone are the days where simply knowing one technology really really well is sufficient to stay on the cutting edge. We are expected to write web-based applications, mobile applications, cross-platform applications and so on. Even as we know we should learn more and branch out, that choice is increasingly difficult as the technology options explode.
This talk will give you one very solid choice that is familiar to .NET developers: Python. It may seem like a very different language and ecosystem when compared to .NET but just below the surface, there are many more similarities than there are differences. For .NET's Entity Framework, Python has SQLAlchemy. For .NET's ASP.NET MVC, Python has The Pyramid Web Framework. The list goes on and on.
Come learn why your team should learn Python as a complementary language to .NET.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The modern software development landscape is a terrain of many platforms and technologies. Gone are the days where simply knowing one technology really really well is sufficient to stay on the cutting edge. We are expected to write web-based applications, mobile applications, cross-platform applications and so on. Even as we know we should learn more and branch out, that choice is increasingly difficult as the technology options explode.
This talk will give you one very solid choice that is familiar to .NET developers: Python. It may seem like a very different language and ecosystem when compared to .NET but just below the surface, there are many more similarities than there are differences. For .NET's Entity Framework, Python has SQLAlchemy. For .NET's ASP.NET MVC, Python has The Pyramid Web Framework. The list goes on and on.
Come learn why your team should learn Python as a complementary language to .NET.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Kennedy</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-21:ndc-oslo-2016/python-an-amazing-second-language-for-dotnet-developers.html</guid><category>language</category><category>polyglot</category><category>dotnet</category><category>ndc</category><category>ndcoslo</category><category>ndcoslo2016</category></item></channel></rss>