<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tennessee-j-leeuwenburg.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-15T00:00:00+00:00</updated><entry><title>Data Science Design Patterns</title><link href="https://pyvideo.org/pycon-au-2016/data-science-design-patterns.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/data-science-design-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tennessee Leeuwenburg
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/78/view_talk"&gt;https://2016.pycon-au.org/schedule/78/view_talk&lt;/a&gt;
Most 'data science' projects fall into just a few well-understood design patterns. This talk de-mystifies what those patterns are, how to use them practically, and how to get to grips with your data. We'll a look at how to understand the input/output structure of the models, how to design a reasonable 'experiment', and how to get started. We'll look at getting to grips with problems by simple data sets that can fit entirely on-screen, designing the basic 'form' of the machine before levelling up to bigger data and badder algorithms.&lt;/p&gt;
&lt;p&gt;All of this will be shown using Python tools, libraries and running code.&lt;/p&gt;
</summary><category term="datascience"></category></entry><entry><title>PyConAU 2010: Using Python for Natural Language Generation and Analysis</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--using-python-for-natural-language-g.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--using-python-for-natural-language-g.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python for Natural Language Generation and Analysis&lt;/p&gt;
&lt;p&gt;Presented by Tennessee J Leeuwenburg (Australian Government Bureau of
Meteorology)&lt;/p&gt;
&lt;p&gt;Python is used within the Bureau of Meteorology to automatically
generate weather forecast text based on numerical data. In addition, the
development team has also used Python to introspect the forecast
language and statistics used in the past. NTLK is an open-source
language processing toolkit which can be used for visualising language
patterns. This presentation will talk about some of the techniques used
for automatically describing datasets and also how NTLK can be used to
discover information about language uses and requirements in an
organisation.&lt;/p&gt;
</summary><category term="language"></category><category term="nltk"></category><category term="parsing"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>Benchmarking stuff made ridiculously easy (with lots of pictures)</title><link href="https://pyvideo.org/pycon-au-2011/benchmarking-stuff-made-ridiculously-easy-with-l.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/benchmarking-stuff-made-ridiculously-easy-with-l.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;(Mic issues for first ~1:30) Tennessee has been working on a module for
integrating cpu time management with unit testing using an easy-to-use
decorator. With all the options turned on, this will produce a a
performance history, tracked by revision, integrated with the software
used to produce the benchmarking graphs as used
on&amp;amp;nbsp_place_holder;http://speed.pypy.org/. You too can have this
kind of shinyness for (almost) free!.&lt;/p&gt;
</summary><category term="performance"></category><category term="testing"></category></entry><entry><title>Virtual robotic car racing with Python and TORCS</title><link href="https://pyvideo.org/pycon-au-2012/virtual-robotic-car-racing-with-python-and-torcs.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/virtual-robotic-car-racing-with-python-and-torcs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a
covering of the basic AI algorithms required to make the wheels go
round. AI, math, Python an&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a
covering of the basic AI algorithms required to make the wheels go
round. AI, math, Python and eye candy. What could possibly go wrong...
what indeed.&lt;/p&gt;
</summary><category term="torcs"></category></entry><entry><title>Visualising architecture</title><link href="https://pyvideo.org/pycon-au-2012/visualising-architecture.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/visualising-architecture.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Architecture. It's an oxymoron all by itself, and using Python is no
silver bullet to the perennial problem of code rot and design
complexity. How does complexity bite us in practise? What tools exist to
simplify and explain arc&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architecture. It's an oxymoron all by itself, and using Python is no
silver bullet to the perennial problem of code rot and design
complexity. How does complexity bite us in practise? What tools exist to
simplify and explain architecture? Is anybody doing this right? This
talk will cover some tools that exist for visualising Python codebases,
examining architectures and how to deal with things in practise.&lt;/p&gt;
</summary></entry><entry><title>Solving problems by sharing them... with Python!</title><link href="https://pyvideo.org/pycon-au-2013/solving-problems-by-sharing-them-with-python.html" rel="alternate"></link><published>2013-07-07T00:00:00+00:00</published><updated>2013-07-07T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2013-07-07:pycon-au-2013/solving-problems-by-sharing-them-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;By using a variety of techniques and technologies, you can tap into the
expert knowledge of others more effectively. Revision control and code
reviews are great for software quality, but not everyone is going to
work that way. Tools such as ipython notebook, sharing gists,
demonstration sessions and screencasts are a great way to get others
involved in problem solving. Knowing how to use these tools quickly and
effectively can also be a great way to explain problems to management,
or to walk them through a complex requirement.&lt;/p&gt;
</summary></entry><entry><title>Verification: Truth in Statistics by Tennessee Leeuwenburg</title><link href="https://pyvideo.org/pycon-au-2014/verification-truth-in-statistics-by-tennessee-le.html" rel="alternate"></link><published>2014-08-09T00:00:00+00:00</published><updated>2014-08-09T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2014-08-09:pycon-au-2014/verification-truth-in-statistics-by-tennessee-le.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come to this talk if you want to learn a few basic techniques for
putting numerical data in context. If you've ever predicted anything, or
tried to work out whether some number was &amp;quot;good enough&amp;quot;, you'll probably
get something out of this presentation. All techniques and tools
demonstrated using Python.&lt;/p&gt;
&lt;p&gt;Every day, decisions both big and small are made on the basis of the
information published by the Bureau of Meteorology. These include simple
decisions such as taking an umbrella or planning a barbecue. Our
forecasts also inform Australia's emergency services on where extreme
weather events may have occurred, to help with planning and preparation.&lt;/p&gt;
&lt;p&gt;Understanding and communicating our strengths and weaknesses is very
important, both as an organisation and also internally within the
Environment and Research division. This presentation will focus on the
statistical methods and systems used to evaluate the objective,
scientific performance of our forecast systems. The name for this area
of study is &amp;quot;Verification&amp;quot;. While the concepts have come from the
research environment, they are widely applicable and can help anyone who
is assessing the performance of any system.&lt;/p&gt;
&lt;p&gt;This presentation will include: -- An overview of the major ideas of
verification -- How to create a 'skill score' -- The application of
these concepts to thunderstorm forecasting -- How to use Python tools
for verification analyses -- Tips on how to apply these ideas easily in
other contexts&lt;/p&gt;
&lt;p&gt;Obtaining relevant thunderstorm observational data can be particularly
challenging, particularly pertaining to severe and damaging aspects:
lightning, hail, heavy rain and very strong wind gusts. In order achieve
a stronger footing, some new methods of analysis are under development.
It is necessary to establish the scientific validity of the verification
metrics at the same time as constructing the systems to support the data
analysis.&lt;/p&gt;
&lt;p&gt;A prototype web-based tool written in Python (and under active
development by the presenter) will be demonstrated. This tool can run
locally to provide an enhanced lab environment for assessing case study
data, or be set up as a server for continuous monitoring and reporting.&lt;/p&gt;
&lt;p&gt;No pre-existing knowledge of Python or statistics is assumed. The talk
will include several technical aspects, such as working at different
computing scales, usability and user experience, working with
statistical algorithms, data visualisation for both web and journal
publications, and the architectural challenges of a complex application.&lt;/p&gt;
</summary></entry><entry><title>Applied Data Science</title><link href="https://pyvideo.org/pycon-au-2015/applied-data-science.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/applied-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever tried to get into data science or machine learning, but struggled
with getting your tech stack working, or found the maths off-putting?
Curious about the limits of what your laptop or desktop really are when
it comes to Big Data and predictive analytics? Ever wondered if these
tools were really accessible to a general developer?&lt;/p&gt;
&lt;p&gt;Note: Attendees should consider visiting the project URL for instruction
to get set up ahead of time. The will allow more time for coding,
although setup assistance will also be available on the day.&lt;/p&gt;
&lt;p&gt;This tutorial will provide attendees with a walkthrough on getting set
up for this work, and an overview of a good tech stack / software
ecosystem for beginning work. We'll cover some of the standard data sets
in machine learning, and how to apply interesting algorithms. Random
Forests and neural networks will be included, but with a minimum of fuss
and jargon. There will be a focus on the application of technology, with
only the most relevant theoretical aspects included. This is about
actually getting things done.&lt;/p&gt;
&lt;p&gt;This tutorial would be suitable for intermediate developers of any
background, or experienced developers who would like an introduction to
data science that gets to the point fast. Prerequisites: the ability to
install Python modules on your laptop, the ability to set up a new
virtual environment, and an interest in applying new techniques.&lt;/p&gt;
&lt;p&gt;The tutorial will include clear walkthroughs, as well as allowing
adequate time for discussion and individual learning. Please contact
Tennessee via email ahead of time if you would like to get a head start
on setting up your environment -- this may help you get more out of the
tutorial.&lt;/p&gt;
</summary></entry><entry><title>Sprinting For Beginners</title><link href="https://pyvideo.org/pycon-au-2015/sprinting-for-beginners.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/sprinting-for-beginners.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do sprinters eat before a race? Nothing, they fast.&lt;/p&gt;
&lt;p&gt;Sprinting at PyCon AU is not like that at all. Instead, it's a great
chance to do something good for the community and get to know some
fellow devs along the way. The sprints are an semi-formal two-day event
following the close of the main track of the conference where people get
together and code on whatever takes their fancy. Most of the time, it's
a a chance to work on an open source package you're already involved
with in some way, or to meet face-to-face with people you otherwise know
only by email.&lt;/p&gt;
&lt;p&gt;However, there are also those brave souls who are joining in for the
first time. It can be particularly intimidating if you don't know the
others there or how to really get started. This presentation will talk
about the sprint format, how to get in with a sprint group, and how to
be productive in such a short time (especially if you're new to the
concept).&lt;/p&gt;
&lt;p&gt;We'll cover off basics like getting your environment set up, checking
out the code, and identifying appropriate projects and tasks to work on.
Standard workflows and tips on how and when to approach people for
assistance can also help to make things flow more smoothly.&lt;/p&gt;
&lt;p&gt;It will also include some tips for sprint leaders about how to make your
project easy and enjoyable for others to hack on. There is a lot than
can be done without a lot of effort, such as pre-classifying bugs or
identifying appropriate tasks for newcomers, identifying &amp;quot;go-to&amp;quot; people
in your project, and spending time on the day talking to people and
getting them comfortable working on your code. Clearly documenting
simple workflows (like how to submit a patch, what code standards are
used, and how to validate results) can help tremendously.&lt;/p&gt;
&lt;p&gt;With any luck, this presentation can help both sprint leaders and
attendees with a smoother experience which gets the difficulties out the
way and leaves maximum opportunity for coding and enjoyment.&lt;/p&gt;
&lt;p&gt;Tennessee has gone through the meatgrinder of sprinting, from sitting
down with a group of strangers trying to help them fix trivial bugs, to
developing significant extensions, to leading sprints. With the scars to
show and lessons learned, he is in a reasonable position to help suggest
some simple things that can make sprinting easier and more enjoyable for
the newcomer.&lt;/p&gt;
</summary></entry></feed>