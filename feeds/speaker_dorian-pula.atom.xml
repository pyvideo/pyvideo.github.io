<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dorian-pula.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-11T00:00:00+00:00</updated><entry><title>Surviving Success: How-to Approach Scaling Python Web Apps</title><link href="https://pyvideo.org/pycon-ca-2018/surviving-success-how-to-approach-scaling-python-web-apps.html" rel="alternate"></link><published>2018-11-11T00:00:00+00:00</published><updated>2018-11-11T00:00:00+00:00</updated><author><name>Dorian Pula</name></author><id>tag:pyvideo.org,2018-11-11:pycon-ca-2018/surviving-success-how-to-approach-scaling-python-web-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk walks through how to approach successfully scaling a Python web application. I break down the problem of scaling in terms of designing, building and operating a web app or REST API. I examine which parts are important, and I finish off by looking at 3 approaches to scaling such apps.&lt;/p&gt;
&lt;p&gt;Presentation page -- &lt;a class="reference external" href="https://2018.pycon.ca/talks/talk-PC-55208/"&gt;https://2018.pycon.ca/talks/talk-PC-55208/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The art of writing wargames in Python with Kivy</title><link href="https://pyvideo.org/pycon-ca-2016/the-art-of-writing-wargames-in-python-with-kivy.html" rel="alternate"></link><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><author><name>Dorian Pula</name></author><id>tag:pyvideo.org,2016-11-12:pycon-ca-2016/the-art-of-writing-wargames-in-python-with-kivy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us got our start in programming, by building games and simple
apps. However creating interesting games and UIs in Python was not a
simple task especially for multiple platforms. Kivy, a cross-platform
Python UI app framework changes all that. This talk discusses the
journey of working with Kivy to develop a moderately complex strategy
game. It also contrasts to using other platforms&lt;/p&gt;
&lt;div class="section" id="dorian-pula-bio"&gt;
&lt;h4&gt;Dorian Pula Bio&lt;/h4&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pythons in A Container - Lessons Learned Dockerizing Python Micro-Services</title><link href="https://pyvideo.org/pycon-us-2016/dorian-pula-pythons-in-a-container-lessons-learned-dockerizing-python-micro-services.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Dorian Pula</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/dorian-pula-pythons-in-a-container-lessons-learned-dockerizing-python-micro-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dorian Pula&lt;/p&gt;
&lt;p&gt;Micro-services and Docker are all the rage for developing scalable systems.  But what challenges will you face when developing and deploying Python apps using Docker to production? This talk goes into the real-life lessons learned from creating, deploying and scaling Dockerized Python applications.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Fabric-less deployments for WSGI apps</title><link href="https://pyvideo.org/pycon-ca-2015/fabric-less-deployments-for-wsgi-apps-dorian-pula.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Dorian Pula</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/fabric-less-deployments-for-wsgi-apps-dorian-pula.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Intermediate level talk about migrating a Fabric deployment to a more flexible setup using using Ansible and Invoke. Follows the journey of changing the deployment of a Flask based blogging app from a Fabric script and pre-provisioned server to a modular system with Invoke tasks and provisioning using Ansible. Discusses the advantages and cons of moving to a declarative system versus direct shell commands. Touches upon on Ansible Roles, Ansible Galaxy and Invoke.&lt;/p&gt;
</summary></entry></feed>