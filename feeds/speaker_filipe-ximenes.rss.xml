<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Pluggable Libs Through Design Patterns</title><link>https://pyvideo.org/pygotham-2018/pluggable-libs-through-design-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Design Patterns are a standardized way to talk about certain code architectures. They've been first formally introduced through the book &amp;quot;Design Patterns: Elements of Reusable Object-Oriented Software&amp;quot; and we are still discovering new ones. They are such a good way to architecture code that even Python comes with some of them, such as the iterator, built into the language.&lt;/p&gt;
&lt;p&gt;In this talk I'll will walk the audience through 3 popular design patterns: Adapter, Strategy and Pipeline. Some of the best examples of use cases for those are open source libraries. Open source libraries heavily rely on patterns to allow flexibility and pluggability. A very good example of this if the Python Social Auth (PSA) project. PSA allows applications to integrate with a huge number of web authentication service providers. It works with frameworks such as Django, Flask, Tornado and Pyramid and knows how to handle OAuth1, OAuth2, OpenID and SAML (and its slight customizations through each provider). This kind of flexibility is only possible because PSA has design patterns in its core.&lt;/p&gt;
&lt;p&gt;Before observing patterns in the libraries, attendees will be presented to real world situations being tackled with poorly designed software. This will give context before we move on to understand how we can use a pattern to improve the quality of it and a give a more detailed explanation on how it works. This will lead to examples of tools that implement that pattern and an exploration of the architecture and the source code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/pluggable-libs-through-design-patterns.html</guid></item><item><title>[Quase] Tudo que você precisa saber sobre tarefas assíncronas</title><link>https://pyvideo.org/python-brasil-2017/quase-tudo-que-voce-precisa-saber-sobre-tarefas-assincronas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:python-brasil-2017/quase-tudo-que-voce-precisa-saber-sobre-tarefas-assincronas.html</guid></item><item><title>O que é esse tal de REST?</title><link>https://pyvideo.org/python-brasil-2016/o-que-e-esse-tal-de-rest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;REST é a bola vez quando falamos sobre API. As maioria dos serviços que
encontramos na web fornece interfaces deste tipo para que possamos
desenvolver integrações. Será mesmo que estas APIs podem ser
consideradas RESTful? O que é preciso para que uma API seja considerada
RESTful? Você sabia que este padrão já existe a mais de 15 anos? Nesta
palestra vamos nos aprofundar no tema e entender os conceitos e
&lt;em&gt;constraints&lt;/em&gt; de um sistema RESTful para que possamos explorar suas
vantagens na hora de arquitetar nossa próxima API web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:python-brasil-2016/o-que-e-esse-tal-de-rest.html</guid></item><item><title>Lightning Talks Day 2</title><link>https://pyvideo.org/djangocon-us-2017/lightning-talks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Lightning Talks Day 2 by  Various Speakers&lt;/p&gt;
&lt;p&gt;00:00 Filipe Ximenes
05:42 Paul Bailey
10:53 Richard Latimer
14:30 ???
19:14 James Bennett
24:11 Wayne Merry
28:54 Tim Allen
34:23 Vic Yang
35:26 Dan Dietz&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-14:djangocon-us-2017/lightning-talks-day-2.html</guid></item><item><title>Tasks: you gotta know how to run 'em, you gotta know how to safe' em</title><link>https://pyvideo.org/djangocon-us-2017/tasks-you-gotta-know-how-to-run-em-you-gotta-know-how-to-safe-em.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Tasks: you gotta know how to run 'em, you gotta know how to safe' em by Filipe Ximenes&lt;/p&gt;
&lt;p&gt;Web developers often find themselves in situations where server processing takes longer than a user would accept. One very common situation is when sending emails. Although simple and relatively quick task, it requires the communication with an external service. In this situation, it’s not possible to foresee how long that service will take to answer. Not to mention the many unexpected situations that can arise, such as errors and bugs. The solution to this problem is to delegate long lasting tasks while responding quickly to the user. This is the point where we need async tasks. There are some tools available that can assist in this job. In this talk, you will learn about the concepts, caveats and best practices for when developing async tasks. For this, I will use Python’s most popular tool for the task: Celery.&lt;/p&gt;
&lt;p&gt;Rundown:&lt;/p&gt;
&lt;p&gt;Setting the context&lt;/p&gt;
&lt;p&gt;The architecture:
Brokers
Workers&lt;/p&gt;
&lt;p&gt;Use cases:
External calls
Long computations
Data caching&lt;/p&gt;
&lt;p&gt;Tools available&lt;/p&gt;
&lt;p&gt;Celery:
Callbacks
Canvas
Logging
Retrying
Monitoring
Tests and debugging&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2017.djangocon.us/talks/tasks-you-gotta-know-how-to-run-em-you-gotta-know-how-to-safe-em/"&gt;https://2017.djangocon.us/talks/tasks-you-gotta-know-how-to-run-em-you-gotta-know-how-to-safe-em/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-14:djangocon-us-2017/tasks-you-gotta-know-how-to-run-em-you-gotta-know-how-to-safe-em.html</guid></item><item><title>What is wrong with API wrappers and how can we do better</title><link>https://pyvideo.org/europython-2015/what-is-wrong-with-api-wrappers-and-how-can-we-do-better.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filipe Ximenes - What is wrong with API wrappers and how can we do better
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Wrappers are an essential tool for interacting with web APIs. They
reduce the amount of work needed to make requests and sometimes, only
sometimes prevent the developer from dealing with extensive
documentations. It’s common to encounter libs that require not only
the study of their own documentation, but also the APIs one,
duplicating the needed work. This is caused because wrappers do not
follow a design pattern, each developer creates it’s own design,
coding style and use their preferred tools.&lt;/p&gt;
&lt;p&gt;[Tapioca][1] is what can be called: &amp;quot;a wrapper generator”. Creating API wrappers with Tapioca is extremely easy and fast. For example, it took 1 hour to write the full wrapper for the [Parse.com][2] REST API. But this is not the more important thing, Tapioca libs have a similar interface so once understood how they work, developers can work with any other without the need to learn a new interface.&lt;/p&gt;
&lt;p&gt;Tapioca is also thought to comply with REST features and takes HATEOAS
(Hypermedia as the engine of application state) seriously, so
“following” links and pagination are natively supported. Explorability
is also a key concept and developers are encouraged to play with
Tapioca packages and find their way through APIs before writing their
final code. Although there are some production ready [Tapioca
wrappers][3], it is a work in progress, there are still many features
to be explored.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://github.com/vintasoftware/tapioca-wrapper"&gt;https://github.com/vintasoftware/tapioca-wrapper&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://parse.com"&gt;http://parse.com&lt;/a&gt;
[3]: &lt;a class="reference external" href="https://github.com/vintasoftware/tapioca-wrapper#tapioca-comes-in-many-flavours"&gt;https://github.com/vintasoftware/tapioca-wrapper#tapioca-comes-in-many-flavours&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:europython-2015/what-is-wrong-with-api-wrappers-and-how-can-we-do-better.html</guid></item></channel></rss>