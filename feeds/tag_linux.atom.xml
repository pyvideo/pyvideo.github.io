<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_linux.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Astro Pi: Python on the International Space Station</title><link href="https://pyvideo.org/europython-2019/astro-pi-python-on-the-international-space-station.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/astro-pi-python-on-the-international-space-station.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collaboration between the Raspberry Pi Foundation and the European
Space Agency put two Raspberry Pi computers augmented with sensor boards
and camera modules on the International Space Station in 2015. Every
year we run a series of competitions for kids in schools around Europe
to design science experiments using the available sensors.&lt;/p&gt;
&lt;p&gt;Mission Zero is a low-barrier challenge where students can run a 1
minute Python program in space to display a message to the astronauts.
They have access to the sensors for conditional logic but cannot record
data or take photos.&lt;/p&gt;
&lt;p&gt;Mission Space Lab is a more involved challenge, including planning an
experiment, writing and testing code which will run for 3 hours in
space, either studying life in space or life on earth (which includes
taking photos of Earth out of the ISS window). MSL teams get to keep the
data and photo they record in their experiment and are to write a report
analysing their findings.&lt;/p&gt;
&lt;p&gt;A small tech team at the Raspberry Pi Foundation maintain the operating
system used in flight and work in collaboration with ESA and partners to
keep the operation of the Pis running smoothly on the ISS LAN.&lt;/p&gt;
&lt;p&gt;As well as sharing details of the OS maintenance and devops for the
Astro Pis, I'll share photos taken from space and show findings from
student experiments using opencv, tensorflow, scikit-learn, ephem and
more.&lt;/p&gt;
</summary><category term="Data"></category><category term="Education"></category><category term="Linux"></category><category term="OpenCV"></category><category term="Raspberry PI"></category></entry><entry><title>Become a command line wizard</title><link href="https://pyvideo.org/europython-2019/become-a-command-line-wizard.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Sven-Hendrik Haase</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/become-a-command-line-wizard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many modern terminal tools with vastly improved user
experiences as compared to their traditional alternatives. This talk
aims to show off some of those modern terminal tools and compare them
side by side with the traditional ones.&lt;/p&gt;
&lt;p&gt;Python is not only used by software developers with fancy IDEs but also
by DevOps engineers, administrators, and on remote development machines
where using a GUI is impractical. Therefore, many people are stuck with
a terminal interface only and have to use tools like vim, grep, find,
wc, cloc, less and many others to explore their way around their Python
programs.&lt;/p&gt;
&lt;p&gt;However, thanks to the advent of many new and improved tools, we can do
many of the same tasks better, faster and with nicer ergonomics.&lt;/p&gt;
&lt;p&gt;This talk will show off effective use of vim as an IDE with completions
and linting provided by LSP, fd (instead of find) for finding files,
ripgrep (instead of grep) for searching strings, tokei (instead of cloc)
for counting lines of code, bat (instead of cat) for looking at files,
hyperfine for microbenchmarking, httpie (instead of curl) for making
HTTP requests, sd (instead of sed) for text replacement.&lt;/p&gt;
&lt;p&gt;This talk should make terminal work more approachable for all attendees
by showing off how to do some everyday tasks on the terminal.&lt;/p&gt;
</summary><category term="Command-Line"></category><category term="Linux"></category><category term="System Administration"></category><category term="Tooling"></category><category term="Unix"></category></entry><entry><title>PyRun - Shipping the Python 3.7 runtime in just 4.8MB</title><link href="https://pyvideo.org/europython-2019/pyrun-shipping-the-python-37-runtime-in-just-48mb.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/pyrun-shipping-the-python-37-runtime-in-just-48mb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has become the defacto standard tool for many people to write
tools, command scripts, smaller applications and even large
applications.&lt;/p&gt;
&lt;p&gt;On Windows, it is fairly easy to build application bundles using e.g.
py2exe, but on Unix, the situation is less obvious, unless you want to
rely on OS specific Python distributions, which often require severall
100MB with of installation on the system and are usually customized in
distribution specific ways.&lt;/p&gt;
&lt;p&gt;Instead of relying on OS installed Python distributions on Unix, our
open- source eGenix PyRun provides a more or less complete Python
runtime (interpreter and stdlib modules) in a single file, which can be
&amp;quot;installed&amp;quot; by simply copying the binary to the destination system. The
file can be as small as 4.8MB for Python 3.7, by using compressors such
as upx.&lt;/p&gt;
&lt;p&gt;Due to its size, it's also the perfect Python distribution for Docker
containers.&lt;/p&gt;
&lt;p&gt;The talk will show how PyRun works, is built, how to customize it to
include additional modules and applications.&lt;/p&gt;
</summary><category term="CPython"></category><category term="Development"></category><category term="Linux"></category><category term="Tooling"></category><category term="Use Case"></category></entry><entry><title>Python for realtime audio processing in a live music context</title><link href="https://pyvideo.org/europython-2019/python-for-realtime-audio-processing-in-a-live-music-context.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Matthieu Amiguet</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/python-for-realtime-audio-processing-in-a-live-music-context.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Les Chemins de Traverse we explore ways of &amp;quot;augmenting&amp;quot; acoustical
musical instruments with new sonic possibilities offered by computers.
For doing so, we need ultra-low latency real-time audio processing
programs. Pretty much the typical situation where python should &lt;em&gt;not&lt;/em&gt; be
used, right? Wrong. As it happens, that's exactly what we've been doing
for the past few years.&lt;/p&gt;
&lt;p&gt;Building on Olivier Belanger's wonderful pyo module and (ab)using
python's flexibility, we developed custom software to allow us to
express our musical ideas.&lt;/p&gt;
&lt;p&gt;If you want to hear how it sounds, you should go to Europython's social
event that will feature a gig based on python-augmented (!) instruments.
And if you want to know how we came to use python in this context and
how we do it, you should come to this talk!&lt;/p&gt;
</summary><category term="Augmented Reality"></category><category term="DIY"></category><category term="Linux"></category><category term="Use Case"></category></entry><entry><title>Python for hackers and Penetration testing</title><link href="https://pyvideo.org/europython-2013/python-for-hackers-and-penetration-testing.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Oltjano Terpollari</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/python-for-hackers-and-penetration-testing.html</id><summary type="html"></summary><category term="sqlmap"></category><category term="subnet"></category><category term="set"></category><category term="networking"></category><category term="zip"></category><category term="whitehat"></category><category term="web"></category><category term="windows"></category><category term="sysadmin"></category><category term="ssh"></category><category term="linux"></category><category term="hacking"></category><category term="pythonscripts"></category><category term="security"></category><category term="socket"></category></entry><entry><title>Will ipython replace bash?</title><link href="https://pyvideo.org/europython-2013/will-ipython-replace-bash.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/will-ipython-replace-bash.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While python is widely used for automating administration tasks, it’s
not still widely known and used between system administrators.&lt;/p&gt;
&lt;p&gt;iPython is an interactive python shell that embeds bash functionalities.
We’ll show how to :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;replace some bash tasks avoiding common errors&lt;/li&gt;
&lt;li&gt;resembling some bash behaviour&lt;/li&gt;
&lt;li&gt;create testing (nose) and monitoring scripts&lt;/li&gt;
&lt;li&gt;reuse existing python modules (eg.iotop, psutil, …)&lt;/li&gt;
&lt;li&gt;use flask to expose those scripts on HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see something specific? Leave a comment! We’ll tune the talk
agenda on the audience interests!&lt;/p&gt;
&lt;div class="section" id="there-is-also-a-teaser-video"&gt;
&lt;h4&gt;There is also a teaser video.&lt;/h4&gt;
&lt;/div&gt;
</summary><category term="flask"></category><category term="testing"></category><category term="devops"></category><category term="sysadmin"></category><category term="linux"></category><category term="iPython"></category><category term="bash"></category></entry><entry><title>Building your own SDN with Debian Linux, Salt Stack and Python</title><link href="https://pyvideo.org/pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Maximilian Wilhelm</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/building-your-own-sdn-with-debian-linux-salt-stack-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Maximilian Wilhelm&lt;/strong&gt; (&amp;#64;BarbarossaTM)&lt;/p&gt;
&lt;p&gt;By day Maximilian Wilhelm is working as a Senior Infrastructure Architect in the central computing department of the University of Paderborn, by night he's hacking on the infrastructure of the Freifunk Hochstift network and some Open Source projects. Since the early 2000s he has a heart for Linux and Open Source, developed a weaknes for networking, IPv6 and routing a long while a go and has beed a speaker and tutor at the #Routingdays. Lately he got his hands dirty with ifupdown2, VXLAN, Linux VRFs, infrastructure automation with Salt Stack and &amp;quot;kommunistischen Frickelnetzen&amp;quot; and is afraid of SDNs ever since. In his spare time he likes playing piano and the organ, taking pictures of natures and cute animals, and trying to stay on the board while Windsurfing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk you will get an overview about some awesome features of comtemporary Linux networking, how to easily integrate them with some cool open source tools, and glueing all this together with Salt Stack and some Python to get your very own SDN controller for a service-provider style network.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topics like Infrastructure Automation / Orchestration, Cloud, and Software Defined Networks are on everyones tongue and nearly all network vendors who think highly of themselves provide products and maybe even solutions in this sphere of buzzwords.&lt;/p&gt;
&lt;p&gt;Within the last years there has been a paradigm shift towards host and segment routing – think »IP Fabric« – as well as a focus on open protocols and standards like OSPF, IS-IS, BGP &amp;amp; MPLS not only in the data center. This even brought us some new standards like VXLAN and a bunch of open source based “open networking” platforms. Now we aren't always locked to the operating systems of a networking vendor but can choose the control plane software from a variety of Linux based solutions which can be managed and orchestrated by lots of different means.&lt;/p&gt;
&lt;p&gt;Thanks to the Linux basis and the Open Source spirit of some vendors, some features (VRFs, MPLS forwarding plane, …) today are part of the upstream Linux kernel and available for everyone! Most notable are the contributions of the Debian Linux based platform from Cumulus Networks, which include the VRF support for Linux, some MPLS patches for FRR and ifupdown2 (which is written in Python :-)).&lt;/p&gt;
&lt;p&gt;Putting a bunch of these technologies and ideas together will open up a lot of powerful options for building low budget yet mighty networks. This talk will lay out how to build a SDN based service provide like infrastructure with the help of Salt Stack, some 1000 lines of Python and a bunch of affordable hardware where overlay networks and anycast aren't things to be scared of. The Freifunk Hochstift network and server infrastructure will be used as an example.&lt;/p&gt;
&lt;p&gt;The target audience mainly consists of (Linux-) system and network engineers / architects, who already have some experience with the other world. A positive attitude towards automation and magic is a plus.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="sdn"></category><category term="saltstack"></category><category term="linux"></category><category term="debian"></category><category term="networking"></category><category term="devops"></category><category term="use-case"></category><category term="netops"></category><category term="netdevops"></category></entry><entry><title>dev --+ qual --+ prod</title><link href="https://pyvideo.org/pycon-de-2012/dev-qual-prod.html" rel="alternate"></link><published>2012-11-01T00:00:00+00:00</published><updated>2012-11-01T00:00:00+00:00</updated><author><name>Thomas Güttler</name></author><id>tag:pyvideo.org,2012-11-01:pycon-de-2012/dev-qual-prod.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Es wird das Konzept vorgestellt, wie man Projekte strukturieren kann um
von der ersten Minute an eine mind. dreistufige Landschaft (Entwicklung,
Qualitätssicherung, Produktiv) vorzusehen.&lt;/p&gt;
&lt;p&gt;Die zentrale Rolle spielen getrennte Systemnutzer um isolierte
Umgebungen zu erstellen. Dieser Ansatz ist für Python-Server-Anwendungen
wie z.B Django- Anwendungen sehr gut anwendbar.&lt;/p&gt;
&lt;p&gt;Seit einiger Zeit setzen wir getrennte Linux-Nutzer anstatt virtualenv
ein. Das zentrale Merkmal, ist der Name des Systemnutzers:&lt;/p&gt;
&lt;p&gt;Namensschema des Linux-Nutzers: app_customer_stage&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;app ist die Anwendung (zB cms)&lt;/li&gt;
&lt;li&gt;customer ist ein Kürzel für den Kunden&lt;/li&gt;
&lt;li&gt;stage ist d, q, p (dev, qual, prod).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mycms_customer1_d Entwicklungssystem&lt;/li&gt;
&lt;li&gt;mycms_customer1_q Qualitätssicherung&lt;/li&gt;
&lt;li&gt;mycms_customer1_p Produktivsystem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In einer zentralen Datei wird konfiguriert auf welchem Host welches
System läuft. Jedes System kennt das nächste System (Bsp dev-&amp;gt;qual), so
dass ein Abgleich relativ einfach möglich ist.&lt;/p&gt;
&lt;p&gt;Das simple System hat viele Vorteile, die ich in dem Vortrag vorstellen
möchte.&lt;/p&gt;
</summary><category term="deployment"></category><category term="linux"></category><category term="virtualenv"></category></entry><entry><title>PyCon 2009: How to Build Applications Linux Distributions will Package (#78)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty
application that makes people's lives easier you know the truly hard
part is convincing others to use it. One way to increase the number of
people installing your software is to convince Linux distributions to
package your software so that their end users can install by using the
system tools they're used to. One way of convincing them is by making
your application easy to package.&lt;/p&gt;
</summary><category term="linux"></category><category term="packaging"></category><category term="pycon"></category><category term="pycon2009"></category></entry></feed>