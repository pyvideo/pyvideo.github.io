<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_clinton-roy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-25T00:00:00+00:00</updated><entry><title>The Packaging Lifecycle with Poetry</title><link href="https://pyvideo.org/kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html" rel="alternate"></link><published>2019-08-25T00:00:00+00:00</published><updated>2019-08-25T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2019-08-25:kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Right now is an interesting time in the land of Python packaging; there are a lot of ideas flying around about the correct way to package, develop and publish your code. Poetry is one thread in this conversation.&lt;/p&gt;
</summary><category term="poetry"></category><category term="Packaging"></category></entry><entry><title>Running a Synchrotron on Open Source Python</title><link href="https://pyvideo.org/europython-2019/running-a-synchrotron-on-open-source-python.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/running-a-synchrotron-on-open-source-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A synchrotron is a large research facility that has a large software
stack to keep things running, fortunately a large chunk of the stack is
Open Source and fair chunk of it is Python to boot. By the end of the
talk attendees will understand the scale of the infrastructure (both
physical and software) that is required, and have an idea of what sort
of problems a synchrotron could help them solve.&lt;/p&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Architecture"></category><category term="Big Data"></category><category term="Engineering"></category><category term="Hardware/IoT"></category></entry><entry><title>Lightning Talks 2017-12-03</title><link href="https://pyvideo.org/kiwi-pycon-2017/lightning-talks-2017-12-03.html" rel="alternate"></link><published>2017-12-03T10:40:00+13:00</published><updated>2017-12-03T10:40:00+13:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2017-12-03:kiwi-pycon-2017/lightning-talks-2017-12-03.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=00m00s"&gt;00:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;Golang vs Python and why we are losing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=04m40s"&gt;04:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;John Graves&lt;/td&gt;
&lt;td&gt;Zappa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=08m20s"&gt;08:20&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ben Denham&lt;/td&gt;
&lt;td&gt;Tips for python webscraping&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=12m42s"&gt;12:42&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Samuel Bishop&lt;/td&gt;
&lt;td&gt;Failing is awesome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=15m43s"&gt;15:43&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;Asterisk_comma where you should use it and why&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=20m35s"&gt;20:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;Generating text from EBNF with Antler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=25m40s"&gt;25:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Unknown&lt;/td&gt;
&lt;td&gt;CI/CD with Gitlab for a Django website&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://youtu.be/BFlrZnHYBYU?t=29m30s"&gt;29:30&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Clinton Roy&lt;/td&gt;
&lt;td&gt;Come to Australia&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>State Machines</title><link href="https://pyvideo.org/kiwi-pycon-2017/state-machines.html" rel="alternate"></link><published>2017-12-02T15:30:00+13:00</published><updated>2017-12-02T15:30:00+13:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2017-12-02:kiwi-pycon-2017/state-machines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Automat project is a pythonic approach to state machines, in that the user describes all their states, inputs and outputs using standard python idioms. Automat encapsulates your use of a state machine, users of your state machine don't actually have to learn about state machines, or even know there's a state machine inside, all they call are standard Python methods on an instance.&lt;/p&gt;
</summary></entry><entry><title>State Machines</title><link href="https://pyvideo.org/pycon-au-2017/state-machines.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/state-machines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The programming world is full of state, lots and lots of state, dealing with it in a disciplined way provides benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;makes reasoning about a program not only possible, but easy&lt;/li&gt;
&lt;li&gt;makes testing easier and more rigorous&lt;/li&gt;
&lt;li&gt;makes it easier to decompose a problem&lt;/li&gt;
&lt;li&gt;improves traceability from the specification down to the implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Automat project is a pythonic approach to state machines, in that the user describes all their  states, inputs and outputs using standard python idioms. The real advantage of Automat is that in encapsulates your use of a state machine, users of your state machine don't actually have to learn about state machines, or even know there's a state machine inside, all they call are standard python methods on an instance.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll be able to recognise the state machines you're already writing, know some of the theory behind state machines, and be able to use that knowledge to write more rigorous state machines in future, and reap the rewards.&lt;/p&gt;
</summary></entry><entry><title>More testing with fewer tests</title><link href="https://pyvideo.org/kiwi-pycon-2016/more-testing-with-fewer-tests.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/more-testing-with-fewer-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clinton Roy
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/113/"&gt;https://kiwi.pycon.org/schedule/presentation/113/&lt;/a&gt;
We all wish we were were testing more, but tests are ugly, a pain to write and are brittle. Property based testing helps to solve all of these problems. Now, with Hypothesis, Python has an outstanding toolkit to write property based tests.&lt;/p&gt;
</summary></entry><entry><title>More testing with fewer tests</title><link href="https://pyvideo.org/pycon-au-2016/more-testing-with-fewer-tests.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/more-testing-with-fewer-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clinton Roy
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/188/view_talk"&gt;https://2016.pycon-au.org/schedule/188/view_talk&lt;/a&gt;
We all wish we were were testing more, but tests are ugly, a pain to write and are brittle. Property based testing helps to solve all of these problems. Now, with Hypothesis, Python has an outstanding toolkit to write property based tests.&lt;/p&gt;
&lt;p&gt;With Hypothesis, instead of writing individual tests, you describe properties of your code and Hypothesis generates the test cases for you. This frees you from writing repetitive and error prone test cases. Hypothesis will generate many more test cases than you'll ever be able to bare writing, and will find more bugs.&lt;/p&gt;
&lt;p&gt;Hypothesis has plugins for Django and numpy to help you generate test cases for these two frameworks.&lt;/p&gt;
</summary></entry><entry><title>Lrparsing, when regular expressions aren't enough</title><link href="https://pyvideo.org/pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lrparsing is a fast, well documented and tested parsing infrastructure
for Python. Parsing infrastructures are used when the input to be parsed
is too complex to be done by regular expressions alone. Parsing
infrastructures are ideally suited to parsing programming languages and
configuration files. Lrparsing is roughly equivalent to the combination
of Flex and Bison, except completely implemented in Python, and is thus
very Pythonic.&lt;/p&gt;
&lt;p&gt;The rest of the abstract uses the following Python snippet as an
example:&lt;/p&gt;
&lt;p&gt;1 if option else 2&lt;/p&gt;
&lt;p&gt;lrparsing provides both a lexer (which breaks the input down into
tokens, e.g.:&lt;/p&gt;
&lt;p&gt;['1', 'if' , 'option', 'else', '2']&lt;/p&gt;
&lt;p&gt;and a parser generator, which produces a concrete parse tree:&lt;/p&gt;
&lt;p&gt;(«ternary», («bool», 'option'), («expr», '1')), («expr», '2')))&lt;/p&gt;
&lt;p&gt;Lrparsing provides Pythonic syntax support to easily construct parsers
for programming languages, Domain Specific Languages and configuration
file formats.&lt;/p&gt;
&lt;p&gt;Lrparsing is very well suited to constructing Concrete Parse Trees but
has little support for creating Abstract Syntax Trees (AST), which are
much easier to use: My work has added Abstract Syntax Tree support to
lrparsing, yielding exactly the same AST nodes that the Python AST
module supports:&lt;/p&gt;
&lt;p&gt;IfExp(condition, 1, 2)&lt;/p&gt;
&lt;p&gt;This talk will give an overview of the major features of Lrparsing, then
look at my work to add AST support.&lt;/p&gt;
</summary></entry></feed>