<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Brett Beutell</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brett-beutell.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-09-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Open-source, developer-friendly observability in only a few lines code</title><link href="https://pyvideo.org/pycon-uk-2023/open-source-developer-friendly-observability-in-only-a-few-lines-code.html" rel="alternate"></link><published>2023-09-23T00:00:00+00:00</published><updated>2023-09-23T00:00:00+00:00</updated><author><name>Brett Beutell</name></author><id>tag:pyvideo.org,2023-09-23:/pycon-uk-2023/open-source-developer-friendly-observability-in-only-a-few-lines-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I want a clear picture of how my application is performing in production, but proper observability involves a lot of faff. So let's look at how to add metrics to an application with only a few lines of code and an open-source library called autometrics-py.&lt;/p&gt;
&lt;p&gt;Marie Curie said, “Nothing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I want a clear picture of how my application is performing in production, but proper observability involves a lot of faff. So let's look at how to add metrics to an application with only a few lines of code and an open-source library called autometrics-py.&lt;/p&gt;
&lt;p&gt;Marie Curie said, “Nothing in life is to be feared, it is only to be understood.”&lt;/p&gt;
&lt;p&gt;For developers, writing code is a big part of our lives. And if we want to understand how the code we write is actually performing out in the wild, then we need to use techniques and tooling from the world of observability.&lt;/p&gt;
&lt;p&gt;This poses a problem for many of us, including myself: Observability tooling is itself fear-inducing!&lt;/p&gt;
&lt;p&gt;Yes, I would love to understand how my code is doing after I release it onto the scary internets. (Please. Tell me. I have no idea.)&lt;/p&gt;
&lt;p&gt;However, the path to an observable codebase is full of easy-to-take wrong turns and very confusing signage. Speaking personally, I needed to get to know the the quirks of a time-series database, determine what to measure (and how to measure it), label my data correctly, and then learn a new query language to generate charts that would help me understand whether or not my app is doing as well as I (really, really) hope it is.&lt;/p&gt;
&lt;p&gt;I am a developer. I’ve been creating web applications for a decade. And yet, before working for an observability company, I still relied mostly on carefully placed log statements to debug my production code.&lt;/p&gt;
&lt;p&gt;This is why I started contributing to autometrics-py, which is a small, open source micro-framework that exposes a cute little python decorator to make implementing observability best practices much, much simpler for developers. (To be clear: I am by no measure an expert in observability, but that’s exactly why I’m excited to share what I’ve learned while helping to make it easier for others.)&lt;/p&gt;
&lt;p&gt;In this talk, we’ll cover what makes observability tricky, especially for devs, and how we can do away with this trickiness by making some smarty-pants assumptions about the type of data we are most interested in. We’ll focus on the unique power of getting metrics at the function level (because who doesn’t love functions?!), and emerge with the confidence of Marie Curie when it comes to understanding the health of our codebase in production.&lt;/p&gt;
</content><category term="PyCon UK 2023"></category></entry></feed>