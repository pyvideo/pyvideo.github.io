<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_redis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>RedisAI</title><link href="https://pyvideo.org/pycon-italia-2019/redisai.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Luca Antiga</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/redisai.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking deep learning models to production and doing so reliably is one
of the next frontiers of DevOps. With the advent of Redis modules and
the availability of C APIs for the major deep learning frameworks, it is
now possible to turn Redis into a reliable runtime for deep learning
workloads, providing a simple solution for a model serving microservice.
In this talk we will introduce RedisAI, a joint effort by Orobix and
RedisLabs that introduces tensors and graphs as new Redis data types and
allows to execute graphs over tensors using multiple backends (PyTorch,
TensorFlow, and ONNXRuntime), both on the CPU and GPU. The module also
supports scripting with TorchScript, which provides a Python-like tensor
language that can be used to facilitate pre- and post-processing
operations, like input shaping or output ensambling. In addition, thanks
to its support for the ONNX standard, including ONNX-ML, RedisAI is not
strictly limited to deep learning, but it offers support for general
machine learning algorithms. In this talk, we will demonstrate a full,
Python-powered journey from fine tuning a model to a scalable Flask +
RedisAI deployment. Last, we will lay down the roadmap for the future,
like automated batching, sharding, integration with Redis data types
(e.g. streams) and advanced monitoring. The talk will include sample
code, best practices and a live demo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1756"&gt;https://python.it/feedback-1756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="database"></category><category term="redis"></category><category term="devops"></category><category term="Machine Learning"></category><category term="deployment"></category><category term="neural network"></category></entry><entry><title>Internet delle cose con Redis e django-channels</title><link href="https://pyvideo.org/pycon-italia-2019/internet-delle-cose-con-redis-e-django-channels.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Mario Orlandi</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/internet-delle-cose-con-redis-e-django-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/morlandi/sinewave"&gt;https://github.com/morlandi/sinewave&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;L’esempio proposto ha lo scopo di esaminare alcuni possibili paradigmi
di comunicazione fra dispositivi periferici e un server centrale, con
particolare riferimento al protocollo PUB/SUB reso disponibile da Redis.
L’invio di informazioni da parte del dispositivo può essere
concretizzato sia utilizzando una delle tante librerie client
disponibili (Python o altri linguaggi), sia mediante una funzione
“publish” minimale (per es. scritta in C); questa seconda opzione può
essere convenientemente utilizzata in contesti limitati quali Arduino o
altre schede embedded. Le informazioni ricevute sul server possono
essere ulteriormente propagate ad eventuali clients web che avessero
manifestato il proprio interesse, predisponendo sul server un processo
“listener” incaricato di raccogliere i dati come subscriber, per poi
eseguirne il broadcast via WebSocket; l’esempio proposto illustra una
semplice implementazione basata su django-channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1726"&gt;https://python.it/feedback-1726&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="pub/sub"></category><category term="redis"></category><category term="arduino"></category></entry><entry><title>Gathering and visualizing metrics with ZeroMQ, Redis &amp; Graphite</title><link href="https://pyvideo.org/pycon-japan-2012/gathering-and-visualizing-metrics-with-zeromq-redis-graphite.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Brian Dorsey</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/gathering-and-visualizing-metrics-with-zeromq-redis-graphite.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will present a small system to collect, summarize and graph detailed application metrics. The system is simple, reliable and easy to extend. In this talk, I’ll walk through the tools, configuration and Python code which glues everything together.&lt;/p&gt;
</summary><category term="metrics"></category><category term="logging"></category><category term="zeromq"></category><category term="redis"></category><category term="graphite"></category></entry><entry><title>ElasticSearch and Redis How and When to Use Them</title><link href="https://pyvideo.org/pydata-dc-2016/elasticsearch-and-redis-how-and-when-to-use-them.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Tim Marcinowski</name></author><id>tag:pyvideo.org,2016-10-09:pydata-dc-2016/elasticsearch-and-redis-how-and-when-to-use-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;When working with data, you have some viable options for keeping them in short and long-term storage. I will be going over why ElasticSearch and Redis are great for data storage. This talk will explain the purpose of each datastore when visualizing on Kibana or websockets.&lt;/p&gt;
</summary><category term="elasticsearch"></category><category term="redis"></category></entry><entry><title>Lightning Talks - Tuesday morning</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--lightning-talks---tuesday-morning.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--lightning-talks---tuesday-morning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks - Tuesday morning&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Joshua Ginsberg: Redis and Protocol Buffers&lt;/li&gt;
&lt;li&gt;05:40 - Nate Aune: &lt;a class="reference external" href="http://djangozoom/com/"&gt;DjangoZoom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;10:45 - Justin Mayer: Tips for a prettier and more productive
terminal&lt;/li&gt;
&lt;li&gt;16:35 - ?: Philo&lt;/li&gt;
&lt;li&gt;20:10 - 21:10 (musical interlude)&lt;/li&gt;
&lt;li&gt;21:40 - Steve Holden: Making a Small Positive Difference&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="djangozoom"></category><category term="philo"></category><category term="protobuf"></category><category term="redis"></category></entry><entry><title>Accelerating and Enhancing Django with Redis</title><link href="https://pyvideo.org/djangocon-us-2012/accelerating-and-enhancing-django-with-redis.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Joshua Ginsberg</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/accelerating-and-enhancing-django-with-redis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial introduces Redis, an in-memory key-object NoSQL datastore.
We discuss out-of-the-box ways Redis can help improve the performance of
your Django deployments, ways that using Redis instead of SQL for some
data management can accelerate your apps, and more advanced and
unconventional uses for Redis to solve real-time and big-data problems.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting your Django app to a v1.0 release means focusing on function and
user experience before prematurely focusing on optimization. But once
it's off the ground, the Redis key-object store provides a versatile and
functional way to take your app to the next level of performance and
function with minimal engineering.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt; is an in-memory key-object database that can
perform standard operations on simple values, lists, sets, hash maps,
and scored sets with incredible efficiency. While it cannot and should
not replace SQL for schema-defined, persistent data storage, it can
provide dramatically faster operational efficiency for volatile,
temporary, or rapidly changing data with minimal coding required.&lt;/p&gt;
&lt;p&gt;This talk begins by introducing Redis, its basic featureset, and the
data types and operations it supports. We'll cover some high-level
guidelines and strategies for identifying where Redis may be an
appropriate performance- enhancing solution. We then cover the
out-of-the-box ways that Redis can improve a Django application as a
cache, session store, Celery broker, and more. We'll then proceed to
more advanced usage possibilities, implementing a real-time websocket
based messaging solution, scripting within Redis using its embedded Lua
interpreter, and connecting Redis to PostgreSQL using Foreign Data
Wrappers to efficiently blend SQL tables with Redis data.&lt;/p&gt;
&lt;p&gt;By the end of the presentation, you should be able to use all of the
data- structures offered by Redis, to identify opportunities within you
codebase that Redis may offer simple but dramatic efficiency
improvements, and to envision how advanced Redis usage may bring new and
cutting-edge functionality to your project.&lt;/p&gt;
&lt;p&gt;Redis was developed by &lt;a class="reference external" href="http://twitter.com/antirez"&gt;Salvatore
Sanfilippo&lt;/a&gt; and &lt;a class="reference external" href="http://twitter.com/pnoordhuis"&gt;Pieter
Noordhuis&lt;/a&gt;, who are both supported by
VMWare to develop the database full-time. Redis has excellent &lt;a class="reference external" href="https://github.com/andymccurdy/redis-py/"&gt;Python
bindings&lt;/a&gt; developed by Andy
McCurdy.&lt;/p&gt;
</summary><category term="django"></category><category term="redis"></category></entry><entry><title>Building a hosting platform with Python</title><link href="https://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</summary><category term="ep.io"></category><category term="hosting"></category><category term="infrastructure"></category><category term="postgresql"></category><category term="redis"></category><category term="scalable"></category><category term="web"></category></entry><entry><title>Challenges in developing a large Django site</title><link href="https://pyvideo.org/europython-2011/challenges-in-developing-a-large-django-site.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Simon Willison</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/challenges-in-developing-a-large-django-site.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django makes it easy to build web sites and applications on tight
deadlines - but how does it deal with sites that scale up in both
traffic and complexity? Using Lanyrd.com as a case study, this talk will
explore tricks and techniques for taking advantage of what Django has to
offer while coping with the unexpected challenges raised by a highly
dynamic social web application.&lt;/p&gt;
&lt;p&gt;Topics covered will include performance monitoring and optimisation,
advanced caching tricks, denormalisation with Solr and Redis and finding
the right balance between technical elegance and pragmatism.&lt;/p&gt;
</summary><category term="django"></category><category term="monitoring"></category><category term="performance"></category><category term="redis"></category><category term="web"></category></entry></feed>