<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 04 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Constrained Data Synthesis</title><link>https://pyvideo.org/euroscipy-2019/constrained-data-synthesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Synthetic data is useful in many contexts, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;providing &amp;quot;safe&amp;quot;, non-private alternatives to data containing
personally identifiable information&lt;/li&gt;
&lt;li&gt;software and pipeline testing&lt;/li&gt;
&lt;li&gt;software and service development&lt;/li&gt;
&lt;li&gt;enhancing datasets for machine learning.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Synthetic data is often created on a bespoke basis, and since the advent
of generative adverserial networks (GANs) there has been considerable
interest and experimentation with using those as the basis for creating
synthetic data.&lt;/p&gt;
&lt;p&gt;We have taken a different approach. We have worked for some years on
developing methods for automatically finding constraints that
characterise data, and which can be used for testing data validity
(so-called &amp;quot;test-driven data analysis&amp;quot;, TDDA). Such constraints form (by
design) a useful characterisation of the data from which they were
generated. As a result, methods that generate datasets that match the
constraints necessarily construct datasets that match many of the
original characteristics of the data from which the constraints were
extracted.&lt;/p&gt;
&lt;p&gt;An important aspect of datasets is the relationship between &amp;quot;good&amp;quot; (~
valid) and &amp;quot;bad&amp;quot; (~ invalid) data, both of which are typically present.
Systems for creating useful, realistic synthetic data generally need to
be able to synthesize both kinds, in realistic mixtures.&lt;/p&gt;
&lt;p&gt;This talk will discuss data synthesis from constraints, describing what
has been achieved so far (which includes synthesizing good and bad data)
and future research directions.&lt;/p&gt;
&lt;p&gt;We introduce a method for creating synthetic data &amp;quot;to order&amp;quot; based on
learned (or provided) constraints and data classifications. This
includes &amp;quot;good&amp;quot; and &amp;quot;bad&amp;quot; data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-04:euroscipy-2019/constrained-data-synthesis.html</guid></item><item><title>Quantum Computing: a Very Gentle Glimpse into a Possible Future</title><link>https://pyvideo.org/europython-2018/quantum-computing-a-very-gentle-glimpse-into-a-possible-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will aim to demystify quantum computing and will assume no
prior knowledge. The speaker, while having studied Quantum Field Theory
many years ago, has only relatively recently started learning properly
about Quantum Computing, and is going to try to take advantage of the
fact that the ideas are relatively new to him to explain the key
concepts simply, to an audience (probably) consisting mostly of
non-experts in quantum computing.&lt;/p&gt;
&lt;p&gt;Key questions I will try to cover are likely to include * What is
quantum mechanics anyway? * What are quantum computers? Are they real?
And are they really faster/more powerful than classical computers? *
What is a qubit (the quantum computing analogue of a bit) * What
problems are likely to be solved well by quantum computers? * How do
you program a quantum computer? * How do you get results out of a
quantum computer? What kind of results are they anyway? Do you have to
visit other universes to get them? * Can you get access to quantum
computers online and use Python to program them (kind-of!) * Will
quantum computers break all encryption? * What are Shor’s and Grover’s
algorithms and (just possibly) how do they work? * What are the
challenges with building practical quantum computers? * What is the
Python story with Quantum Computing?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-25:europython-2018/quantum-computing-a-very-gentle-glimpse-into-a-possible-future.html</guid></item><item><title>Anomaly Detection</title><link>https://pyvideo.org/pydata-london-2018/anomaly-detection.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stochastic Solutions is producing a course on Anomaly Detection in
Python for DataCamp. This workshop will give a preview of part of that
course. Topics covered will include characterizing normality and
abnormality, spotting anomalies by eye, building automated anomaly
detectors over various kinds of data streams and types, and
considerations for monitoring (false positives vs. false negatives).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-27:pydata-london-2018/anomaly-detection.html</guid></item><item><title>Test-Driven Data Analysis</title><link>https://pyvideo.org/pydata-london-2018/test-driven-data-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will introduce attendees to the concepts of test-driven
data analysis and practical, hands-on use of the tdda library (available
from Github and PyPI) for (1) writing reference tests, and (2)
generating and verifying constraints from data, using Pandas data
frames.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Fri, 27 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-27:pydata-london-2018/test-driven-data-analysis.html</guid></item><item><title>Developments in Test-Driven Data Analysis</title><link>https://pyvideo.org/pydata-berlin-2017/developments-in-test-driven-data-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test-driven data analysis fuses and builds upon the ideas of test-driven development and reproducible research to support higher quality data analysis. This talk will extend the foundation parts of TDDA with extensions including tight constraints on string fields with automatically discovered regular expressions and automatically discovered relationships between datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Test-driven data analysis fuses and builds upon the ideas of test-driven development and reproducible research to support higher quality data analysis.&lt;/p&gt;
&lt;p&gt;Foundational concepts are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Level 0: Reference Tests&lt;/li&gt;
&lt;li&gt;Level 1: Automatic constraint discovery and validation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will extend these to cover tight constraints on string fields with&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;automatically discovered regular expressions with rexpy&lt;/li&gt;
&lt;li&gt;constraints between datasets and probably more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Background material:&lt;/p&gt;
&lt;p&gt;PyCon UK Talk, Cardiff, Test-Driven Data Analysis &lt;a class="reference external" href="https://www.youtube.com/watch?v=FIw_7aUuY50"&gt;https://www.youtube.com/watch?v=FIw_7aUuY50&lt;/a&gt;
Blog: &lt;a class="reference external" href="http://tdda.info"&gt;http://tdda.info&lt;/a&gt;, especially posts &lt;a class="reference external" href="http://www.tdda.info/the-new-referencetest-class-for-tdda"&gt;http://www.tdda.info/the-new-referencetest-class-for-tdda&lt;/a&gt; and &lt;a class="reference external" href="http://www.tdda.info/constraint-discovery-and-verification-for-pandas-dataframes"&gt;http://www.tdda.info/constraint-discovery-and-verification-for-pandas-dataframes&lt;/a&gt;
Overview: &lt;a class="reference external" href="http://www.predictiveanalyticsworld.com/patimes/four-ways-data-science-goes-wrong-and-how-test-driven-data-analysis-can-help/"&gt;http://www.predictiveanalyticsworld.com/patimes/four-ways-data-science-goes-wrong-and-how-test-driven-data-analysis-can-help/&lt;/a&gt; In terms of some of the new material that will be covered in this talk, see
&lt;a class="reference external" href="http://www.tdda.info/introducing-rexpy-automatic-discovery-of-regular-expressions"&gt;http://www.tdda.info/introducing-rexpy-automatic-discovery-of-regular-expressions&lt;/a&gt;
&lt;a class="reference external" href="http://rexpy.herokuapp.com"&gt;http://rexpy.herokuapp.com&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/developments-in-test-driven-data-analysis.html</guid></item><item><title>Test-Driven Data Analysis</title><link>https://pyvideo.org/pydata-london-2017/test-driven-data-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData London 2017&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;This tutorial will introduce attendees to the concepts of test-driven data analysis and practical, hands-on use of the tdda library (available from Github and PyPI) for:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;writing reference tests, and&lt;/li&gt;
&lt;li&gt;generating and verifying constraints from data, using Pandas data frames.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;TDDA aims to bring the ideas and benefits of test-driven development to the arena of data analysis, augmenting those ideas as appropriate. There are two central planks of TDDA at present:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The idea of a reference test, which is a lot like a system or integration test for an analytical process&lt;/li&gt;
&lt;li&gt;The idea of using constraints to verify input, intermediate and output data for/from analytical processes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The tdda library (available from Github and PyPI) provides tooling support for both of these, major current components being:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for writing tests, under unittest or pytest, than involve comparison of complex objects (e.g. graphs, dataframes etc.), possibly with variable components, and regenerating reference (&amp;quot;expected&amp;quot;) results easily when they have changed (after verification!)&lt;/li&gt;
&lt;li&gt;Support for automatically generating suggested constraints from example datasets/data frames (including Pandas DataFrames)&lt;/li&gt;
&lt;li&gt;Support for verifying a dataset/dataframe against a set of constraints&lt;/li&gt;
&lt;li&gt;Support for generating regular expressions from example strings, for possible use as constraints (or otherwise). (It will probably do more by May, but these things are there now!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial will introduce users to using these ideas through the tdda library. Users will be able to use their own analytical processes and/or datasets, or to use example data that will be provided.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Radcliffe</dc:creator><pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-05:pydata-london-2017/test-driven-data-analysis.html</guid></item></channel></rss>