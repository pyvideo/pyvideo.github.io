<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nathan-faggian.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-15T00:00:00+00:00</updated><entry><title>Evaluating fire simulators using Docker, Dask and Jupyter notebooks!</title><link href="https://pyvideo.org/pycon-au-2016/evaluating-fire-simulators-using-docker-dask-and-jupyter-notebooks.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Nathan Faggian</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/evaluating-fire-simulators-using-docker-dask-and-jupyter-notebooks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nathan Faggian
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/168/view_talk"&gt;https://2016.pycon-au.org/schedule/168/view_talk&lt;/a&gt;
Bushfires are one of the most destructive forces in our environment. A major responsibility of the Bureau of Meteorology is to provide information on weather conditions that could make bushfires difficult to fight. Fire agencies then use simulators of fire behaviour to inform finer grained warnings to protect the Australian public. Objectively choosing the best performing simulators, or indeed the best versions of the same simulator, with respect to end-user requirements is a difficult task that requires a large amount of computation.&lt;/p&gt;
&lt;p&gt;The introduction of new tools like Docker, Dask and Jupyter notebooks make the task of large scale computation much easier! The Bureau of Meteorology is looking at these technologies to help modernise its legacy workflows and processes, one example is our recent work in the area of fire simulators.&lt;/p&gt;
&lt;p&gt;This talk will work through the approach developed for a reproducible environment (using Docker) and then how we form workflows (jupyter notebooks) that execute fire simulators on a small compute cluster of both windows and linux hosts (Dask, Distributed).  Finally, we will work through an example of scaling up an experiment and demonstrate a process that is easy to replicate and follow for fellow scientists.&lt;/p&gt;
</summary></entry><entry><title>Weather field warping using Python</title><link href="https://pyvideo.org/pycon-au-2011/weather-field-warping-using-python.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Nathan Faggian</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/weather-field-warping-using-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python is a great language for prototyping computer vision algorithms,
the availability of libraries such as Numpy and Scipy make for rapid
development similar to that of Matlab, R and IDL. At the Bureau of
Meteorology (BoM) we are solving the interesting problem of weather
field warping. Warping (aka non-linear image registration) is used, for
example, to determine what the predicted temperature will be hourly if
we only have predictions every three hours&lt;/p&gt;
</summary><category term="numpy"></category><category term="prototyping"></category></entry></feed>