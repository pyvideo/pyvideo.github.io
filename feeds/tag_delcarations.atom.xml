<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_delcarations.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-02-19T00:00:00+00:00</updated><entry><title>Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turtles all the way down: Demystifying deferreds, decorators and
declarations&lt;/p&gt;
&lt;p&gt;Presented by Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;Python's flexible object model allows library and framework authors to
add very flexible declarations. Metaclasses, decorators, callable
objects, and operator overloading practically allow libraries to
re-define the language in order to provide a more concise, natural style
for that library. Unfortunately, the library user's first experience of
such conveniences is often confusing, because it's not clear what's
going on.&lt;/p&gt;
&lt;p&gt;In this talk, I will try to convince you that all of this wonderful
magic isn't all that weird. This is not a typical how-to session on how
to use a particular feature, either of Python or of Twisted, but will
rather draw examples from Python, Twisted, and Zope to illustrate
techniques you can use to read and understand &amp;quot;magical&amp;quot; Python code.&lt;/p&gt;
</summary><category term="decorators"></category><category term="deferreds"></category><category term="delcarations"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>