<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_async.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-31T00:00:00+00:00</updated><entry><title>Asyncio in the Wild</title><link href="https://pyvideo.org/pycon-se-2019/asyncio-in-the-wild.html" rel="alternate"></link><published>2019-10-31T00:00:00+00:00</published><updated>2019-10-31T00:00:00+00:00</updated><author><name>Akos Hochrein</name></author><id>tag:pyvideo.org,2019-10-31:pycon-se-2019/asyncio-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is a fairly new tool and no often used in production. In this talk we will be aiming for use-cases and examples so people can get more confidence moving away from the synchronous world. The talk aims to solve the problem of uncertainty when getting started with asynchronous programming in Python. After the talk the audience will be equipped with new tools they can look up at home to get started with asynchronous web development in Python, also, hopefully, they will have some extra confidence in the area.&lt;/p&gt;
</summary><category term="async"></category><category term="asyncio"></category></entry><entry><title>Artisanal Async Adventures</title><link href="https://pyvideo.org/pycon-italia-2019/artisanal-async-adventures.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/artisanal-async-adventures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write an efficient server, asynchronous networking is an
excellent strategy to do so. To build a production ready system, you
would use asyncio, tornado, twisted, trio or another popular
implementation. However, to fully understand how and why it works, I
will ignore these solutions and instead craft an artisanal asynchronous
implementation in front of your very eyes. Step by step we will turn a
blocking socket server, only capable of handling a single connection at
a time, into a beautiful non blocking server that has no trouble dealing
with many connections at once. By the end, you should see that
asynchronous code is not magical at all, but nevertheless incredibly
useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1742"&gt;https://python.it/feedback-1742&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 11:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="async"></category><category term="event-driven-architecture"></category><category term="python3"></category></entry><entry><title>Turn your Flask App into Async using Quart</title><link href="https://pyvideo.org/pycon-philippines-2019/turn-your-flask-app-into-async-using-quart.html" rel="alternate"></link><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><author><name>Doni Rubiagatra</name></author><id>tag:pyvideo.org,2019-02-23:pycon-philippines-2019/turn-your-flask-app-into-async-using-quart.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you already use our beloved micro-framework Flask but have a problem with the speed and scalability? We hear a lot of buzz with the new fancy asynchronous Python programming using async/await keyword to make our Python code run faster. But really how async works are still not spread well and the majority of Python programmer still not familiar using async/await keyword. In this talks, because Flask is not intended to support async (yet), we are will explore Quart, the Python ASGI web microframework. It is intended to provide the easiest way to use asyncio functionality in a web context, especially with existing Flask apps. This is possible as the Quart API is a superset of the Flask API. So you can instantly migrate your Flask app easily!&lt;/p&gt;
</summary><category term="quart"></category><category term="flask"></category><category term="async"></category></entry><entry><title>Using Asyncio in Python 3</title><link href="https://pyvideo.org/pycon-philippines-2019/using-asyncio-in-python-3.html" rel="alternate"></link><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><author><name>Marte Soliza</name></author><id>tag:pyvideo.org,2019-02-23:pycon-philippines-2019/using-asyncio-in-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio (together with async / await syntax) is one of the most exciting new features in Python 3. Marte will detail what it is and how it can be used, together with concepts surrounding it.&lt;/p&gt;
</summary><category term="async"></category><category term="asyncio"></category></entry><entry><title>Asynchronous programming in Python</title><link href="https://pyvideo.org/pycon-ireland-2018/asynchronous-programming-in-python.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mikhail Medvedev</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/asynchronous-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming can have many advantages, but may be awfully complicated. It also requires a developer to think differently. In this talk I will go through what async programming is, when you should or should not use it, and what we can do to avoid getting lost. I will also explore various approaches and tools available in Python.&lt;/p&gt;
</summary><category term="async"></category><category term="asynchronous"></category></entry><entry><title>Designing a Real Time Control System based on Django, ZMQ and WebSockets (wrong cover)</title><link href="https://pyvideo.org/europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Nahuel Defoss√©</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html</id><summary type="html"></summary><category term="web"></category><category term="async"></category><category term="twisted"></category><category term="embedding"></category><category term="django"></category></entry><entry><title>Taming greenlets using eventlet</title><link href="https://pyvideo.org/europython-2013/taming-greenlets-using-eventlet.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Floris Bruynooghe</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/taming-greenlets-using-eventlet.html</id><summary type="html"></summary><category term="async"></category><category term="eventlet"></category><category term="greenlet"></category><category term="socket"></category><category term="networking"></category></entry><entry><title>Uno sguardo agli internal di RestFS</title><link href="https://pyvideo.org/europython-2013/uno-sguardo-agli-internal-di-restfs.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Fabrizio Manfredi</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/uno-sguardo-agli-internal-di-restfs.html</id><summary type="html"></summary><category term="clustering"></category><category term="HTTP"></category><category term="parallelization"></category><category term="distributed"></category><category term="twisted"></category><category term="REST"></category><category term="optimization"></category><category term="Algorithms"></category><category term="scalability"></category><category term="async"></category><category term="hpc"></category><category term="performance"></category></entry><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-us-2018/taking-django-async.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.&lt;/p&gt;
&lt;p&gt;Doing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general.&lt;/p&gt;
</summary><category term="django"></category><category term="async"></category><category term="django channels"></category></entry><entry><title>Trio: Async concurrency for mere mortals</title><link href="https://pyvideo.org/pycon-us-2018/trio-async-concurrency-for-mere-mortals.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Nathaniel J. Smith</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/trio-async-concurrency-for-mere-mortals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrent programs are super useful: think of web apps juggling lots of
simultaneous downloads and websocket connections, chat bots tracking
multiple concurrent conversations, or web spiders fetching pages in
parallel. But &lt;em&gt;writing&lt;/em&gt; concurrent programs is complicated, intimidating
to newcomers, and often challenging even for experts.&lt;/p&gt;
&lt;p&gt;Does it have to be? Python is famous for being simple and
straightforward; can Python make concurrent programming simple and
straightforward too? I think so. By carefully analyzing usability
pitfalls in other libraries, and taking advantage of new Python 3
features, I‚Äôve come up with a new set of primitives that make it
dramatically easier to write correct concurrent programs, and
implemented them in a new library called &lt;a class="reference external" href="https://trio.readthedocs.io"&gt;Trio&lt;/a&gt;. In this talk, I‚Äôll
describe these primitives, and demonstrate how to use them to implement
a basic algorithm for speeding up TCP connections. Compared to the best
previous Python implementation, our version turns out to be easier to
understand, more correct, and dramatically shorter.&lt;/p&gt;
&lt;p&gt;This talk assumes basic familiarity with Python, but does &lt;em&gt;not&lt;/em&gt; require
any prior experience with concurrency, async/await, or networking.&lt;/p&gt;
</summary><category term="trio"></category><category term="async"></category><category term="concurrency"></category></entry><entry><title>Desenvolvendo APIs REST com Python 3 e Asyncio</title><link href="https://pyvideo.org/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html" rel="alternate"></link><published>2016-06-26T00:00:00+00:00</published><updated>2016-06-26T00:00:00+00:00</updated><author><name>Renato Garcia</name></author><id>tag:pyvideo.org,2016-06-26:caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Renato Garcia no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Desenvolvendo APIs REST com Python 3 e Asyncio&lt;/p&gt;
</summary><category term="api"></category><category term="apis"></category><category term="rest"></category><category term="rest api"></category><category term="asyncio"></category><category term="async"></category></entry><entry><title>Practical Python Async for Dummies</title><link href="https://pyvideo.org/kiwi-pycon-2016/practical-python-async-for-dummies.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Grant Paton-Simpson</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/practical-python-async-for-dummies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Grant Paton-Simpson
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/121/"&gt;https://kiwi.pycon.org/schedule/presentation/121/&lt;/a&gt;
What's the point of faster computers if our code spends most of its time waiting for slower processes to complete. Shouldn't we be using asynchronous code to make lots of things happen simultaneously? Probably, but isn't that really tricky to do? The goal of this talk is to work through some very simple snippets of Python code that make common tasks much, much faster with minimal fuss.&lt;/p&gt;
</summary><category term="async"></category><category term="for dummies"></category></entry><entry><title>Building real-world applications with `asyncio`</title><link href="https://pyvideo.org/pytexas-2015/building-real-world-applications-with-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/building-real-world-applications-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, Eloy Zu√±iga, Jr. and Joel Watts will work through the
process of building an event-driven application using
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__ and web
technologies. By the end, we hope you'll be able to answer the following
questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should I care about async programming at all?&lt;/li&gt;
&lt;li&gt;What is &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; and how is it used?&lt;/li&gt;
&lt;li&gt;How do I use this stuff to solve real-world problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll assume some familiarity with Python, but no prior experience with
async programming is required. Please come with Python 3.4+ installed.&lt;/p&gt;
&lt;p&gt;All the codez can be found in these 2 repos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/eloyz/aioui"&gt;https://github.com/eloyz/aioui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpwatts/aioserver"&gt;https://github.com/jpwatts/aioserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Why should I care about asyncio?</title><link href="https://pyvideo.org/pytexas-2015/why-should-i-care-about-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/why-should-i-care-about-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.3 added &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; and 3.4 added
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__. Python
3.5 adds &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; from &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP
492&lt;/a&gt;. What is all this
stuff? Why do we need new syntax? And why should I care?&lt;/p&gt;
&lt;p&gt;This talk is about why async programming is worth caring about and why
Python's approach has me so excited.&lt;/p&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry></feed>