<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Michael Sullivan</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michael-sullivan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-09T00:00:00+00:00</updated><subtitle></subtitle><entry><title>mypy: Getting to Four Million Lines of Typed Python</title><link href="https://pyvideo.org/pybay-2019/mypy-getting-to-four-million-lines-of-typed-python.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Michael Sullivan</name></author><id>tag:pyvideo.org,2019-08-16:/pybay-2019/mypy-getting-to-four-million-lines-of-typed-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Dropbox is a heavy user of the mypy type checker, recently passing four million lines of type-annotated …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Dropbox is a heavy user of the mypy type checker, recently passing four million lines of type-annotated Python code, with over half of that added in the last eighteen months. Type checking is helping find bugs, making code easier to under stand, enabling refactors, and is an important aid to our ongoing Python 3 migration.&lt;/p&gt;
&lt;p&gt;In this talk, we discuss how we got there. We’ll talk about what we tried in order to get our engineers to type annotate their code—what worked, what didn’t, and what our engineers had to say about it.&lt;/p&gt;
&lt;p&gt;Additionally, we’ll discuss the performance problems we faced as the size of our checked codebase grew, and the techniques we employed to allow mypy—which is implemented in Python—to efficiently check (faster than a second, for most incremental checks) millions of lines of code, which culminated in mypyc, a new ahead-of-time compiler for type-annotated Python!&lt;/p&gt;
&lt;p&gt;About the speaker
Michael is a recovering academic with an unfortunate fondness for indefensible hacks. He works at Dropbox on the mypy and mypyc projects.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Python Typing</title><link href="https://pyvideo.org/pybay-2021/python-typing.html" rel="alternate"></link><published>2021-10-09T00:00:00+00:00</published><updated>2021-10-09T00:00:00+00:00</updated><author><name>Michael Sullivan</name></author><id>tag:pyvideo.org,2021-10-09:/pybay-2021/python-typing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2021 Food Truck Edition - 6th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for information about this talk.&lt;/p&gt;
&lt;p&gt;DESCRIPTION
For several years, Python has had syntax for type annotations and more recently for classes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2021 Food Truck Edition - 6th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for information about this talk.&lt;/p&gt;
&lt;p&gt;DESCRIPTION
For several years, Python has had syntax for type annotations and more recently for classes and variables. Learn new typing developments in Python 3.9 and 3.10.&lt;/p&gt;
&lt;p&gt;SPEAKER BIO
A recovering academic and a core dev of the mypy type checker and mypyc compiler. Works at EdgeDB on the compiler for their next-generation query language.&lt;/p&gt;
&lt;p&gt;SPONSOR ACKNOWLEDGEMENT
The post production of this and other PyBay2020 videos are made possible by our sponsors:
- Carta &lt;a class="reference external" href="https://carta.com"&gt;https://carta.com&lt;/a&gt;
- Anyscale &lt;a class="reference external" href="https://anyscale.com"&gt;https://anyscale.com&lt;/a&gt;
- Goodrx &lt;a class="reference external" href="https://goodrx.com"&gt;https://goodrx.com&lt;/a&gt;
- Nginx &lt;a class="reference external" href="https://nginx.com"&gt;https://nginx.com&lt;/a&gt;
- Bit.io &lt;a class="reference external" href="https://bit.io"&gt;https://bit.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EVENT PRODUCER ACKNOWLEDGEMENT
This community conference is produced by organizers of SF Python meetup and volunteers from around the SF Bay Area and beyond. See upcoming events here: &lt;a class="reference external" href="https://sfpythonmeetup.com"&gt;https://sfpythonmeetup.com&lt;/a&gt;&lt;/p&gt;
</content><category term="PyBay 2021"></category></entry><entry><title>Sunday Morning Lightning Talks + Keynote</title><link href="https://pyvideo.org/pycon-us-2018/sunday-morning-lightning-talks-keynote.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2018-05-13:/pycon-us-2018/sunday-morning-lightning-talks-keynote.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote Speaker: Brett Cannon&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="keynote"></category><category term="lightning talks"></category></entry><entry><title>Getting to Three Million Lines of Type-Annotated Python</title><link href="https://pyvideo.org/pycon-us-2019/getting-to-three-million-lines-of-type-annotated-python.html" rel="alternate"></link><published>2019-05-04T16:15:00+00:00</published><updated>2019-05-04T16:15:00+00:00</updated><author><name>Michael Sullivan</name></author><id>tag:pyvideo.org,2019-05-04:/pycon-us-2019/getting-to-three-million-lines-of-type-annotated-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dropbox is a heavy user of the mypy type checker, recently passing three
million lines of type-annotated Python code, with over half of that
added in 2018. Type checking is helping find bugs, making code easier to
under stand, enabling refactors, and is an important aid to our ongoing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dropbox is a heavy user of the mypy type checker, recently passing three
million lines of type-annotated Python code, with over half of that
added in 2018. Type checking is helping find bugs, making code easier to
under stand, enabling refactors, and is an important aid to our ongoing
Python 3 migration.&lt;/p&gt;
&lt;p&gt;In this talk, we discuss how we got there. We’ll talk about what we
tried in order to get our engineers to type annotate their code—what
worked, what didn’t, and what our engineers had to say about it.&lt;/p&gt;
&lt;p&gt;Additionally, we’ll discuss the performance problems we faced as the
size of our checked codebase grew, and the techniques we employed to
allow mypy—which is implemented in Python—to efficiently check (faster
than a second, for most incremental checks) millions of lines of code,
which culminated in mypyc, a new ahead-of-time compiler for
type-annotated Python!&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="talk"></category></entry></feed>