<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Vladimir Losev</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 01 Oct 2021 00:00:00 +0000</lastBuildDate><item><title>How we dealt with poor code analysis support in our generator, metaclasses, and code generation heavy projects</title><link>https://pyvideo.org/pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Projects that heavily rely on such Python features as metaclasses,
decorators, or code-generation face a problem of poor support by static code
analysis tools. This results in little to no suggestions in IDE or broken
mypy tests.&lt;/p&gt;
&lt;p&gt;We'll talk about how we addressed this issue on our open-source
[&lt;a class="reference external" href="https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit"&gt;https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit&lt;/a&gt;)
and [&lt;a class="reference external" href="https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit"&gt;https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit&lt;/a&gt;)
projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vladimir Losev</dc:creator><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-01:/pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html</guid><category>PyGotham 2021</category></item></channel></rss>