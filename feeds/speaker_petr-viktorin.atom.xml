<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_petr-viktorin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Lightning talks on Thursday, July 11</title><link href="https://pyvideo.org/europython-2019/lightning-talks-on-thursday-july-11.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/lightning-talks-on-thursday-july-11.html</id><summary type="html"></summary></entry><entry><title>Terminals, command lines, and text interfaces</title><link href="https://pyvideo.org/europython-2013/terminals-command-lines-and-text-interfaces.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/terminals-command-lines-and-text-interfaces.html</id><summary type="html"></summary><category term="tui"></category><category term="urwid"></category><category term="ui"></category><category term="unix"></category></entry><entry><title>Bytecodes and stacks: A look at CPython’s compiler and its execution model</title><link href="https://pyvideo.org/europython-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So, you wrote some Python code. What needs to happen before it starts
running? And once it’s running, how does Python keep track of what it’s
doing?&lt;/p&gt;
&lt;p&gt;I’ll talk about CPython’s tokenization, parsing, bytecode and its
serialization and cache, the stack-based virtual machine, line number
tables, and code, frame and function objects.&lt;/p&gt;
&lt;p&gt;Don’t worry if you’ve never heard of these concepts. While even experts
should learn something new, the talk is aimed at anyone who’s worked on
a Python project or two.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks Saturday Evening 2018-05-12</title><link href="https://pyvideo.org/pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Caleb Collins-Parks</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=00m10s"&gt;00:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caleb Collins-Parks&lt;/td&gt;
&lt;td&gt;AREPL - A real-time python evaluator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=04m35s"&gt;04:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Michael Foord&lt;/td&gt;
&lt;td&gt;Abstractions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=10m27s"&gt;10:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Turicas (Álvaro) Justen&lt;/td&gt;
&lt;td&gt;Roasting Coffee with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=16m27s"&gt;16:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Viktorin&lt;/td&gt;
&lt;td&gt;Blinky's Async Adventure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=22m17s"&gt;22:17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Type Hint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=26m25s"&gt;26:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Scott Sanderson&lt;/td&gt;
&lt;td&gt;A Class is a Poor Man's...Loop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=31m25s"&gt;31:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Humrich&lt;/td&gt;
&lt;td&gt;RIP HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=36m08s"&gt;36:08&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Downey&lt;/td&gt;
&lt;td&gt;Modeling and Simulation in Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=40m00s"&gt;40:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Mitev&lt;/td&gt;
&lt;td&gt;Python in Arch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=44m53s"&gt;44:53&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steven C. Howell&lt;/td&gt;
&lt;td&gt;Bayesian Hacking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=50m47s"&gt;50:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;James Bennett Saxon&lt;/td&gt;
&lt;td&gt;Code Lives &amp;amp; Things can happen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=56m42s"&gt;56:42&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Andrés García García&lt;/td&gt;
&lt;td&gt;Why should we care about Processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=61:40"&gt;1:01:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Meredydd Luff&lt;/td&gt;
&lt;td&gt;Making the web more pythonic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=67:10"&gt;1:07:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kenneth Reitz&lt;/td&gt;
&lt;td&gt;Running for the board﻿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>How we started teaching Python</title><link href="https://pyvideo.org/pycon-cz-2017/how-we-started-teaching-python.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/how-we-started-teaching-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helping people feels great. As a volunteer firefighter, Lumir can
tell you all about that feeling. But there are also other ways to
help others, and some don't involve life-or-death situations. What
about changing a person's life by teaching them how to program?&lt;/p&gt;
&lt;p&gt;Teaching doesn't just give you a great feeling. It can also help you
make new friends, improve your presentation skills, and even make you
a better programmer.&lt;/p&gt;
&lt;p&gt;Join us for two stories of how we started teaching Python, what it
means for us, what it can mean for you – and how we're making it
easier for you to join us.&lt;/p&gt;
</summary></entry><entry><title>Bytecodes and stacks: A look at CPython’s compiler and its execution model</title><link href="https://pyvideo.org/pycon-cz-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/bytecodes-and-stacks-a-look-at-cpythons-compiler-and-its-execution-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So, you wrote some Python code. What needs to happen before it starts running? And once it's running, how does Python keep track of what it's doing?&lt;/p&gt;
&lt;p&gt;I'll talk about CPython's tokenization, parsing, bytecode and its serialization and cache, the stack-based virtual machine, line number tables, and code, frame and function objects.&lt;/p&gt;
&lt;p&gt;Don't worry if you've never heard of these concepts. While even experts should learn something new, the talk is aimed at anyone who's worked on a Python project or two.&lt;/p&gt;
</summary></entry><entry><title>How import works</title><link href="https://pyvideo.org/pycon-sk-2016/how-import-works.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/how-import-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every one of us has already used the &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statement. Do you know
what it actually does? How does it find the correct file using the
module name and how a text file becomes a module? Did you know that
Python can import from ZIP archives or run directories? Do you want to
find out how cyclic imports happen and how to avoid them?&lt;/p&gt;
&lt;p&gt;This talk will answer all of these questions.&lt;/p&gt;
</summary></entry><entry><title>The Balance of Python</title><link href="https://pyvideo.org/pycon-sk-2017/the-balance-of-python.html" rel="alternate"></link><published>2017-03-11T00:00:00+00:00</published><updated>2017-03-11T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2017-03-11:pycon-sk-2017/the-balance-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python successfully maintains a fine balance between being easy to learn and
useful for even large-scale projects.
This is achieved both through the design of the language, and through
the community.&lt;/p&gt;
&lt;p&gt;On the language design side, Python is built around a closely curated set
of mechanisms – iterators, attribute/item access, callables, context managers,
and so on.
I'll compare this set to languages like C, Lisp, Java, C++, and JavaScript,
and show why it works – and where it could be better.&lt;/p&gt;
&lt;p&gt;In design discussions around Python, the phrase &amp;quot;consenting adults&amp;quot; is
often repeated.
Python is designed to not prevent its users from doing anything.
You can fairly freely inspect classes or even monkeypatch as needed.
To balance this freedom, there is a vague, ever-changing notion of &amp;quot;Pythonic
code&amp;quot;, which is nevertheless quite successful in making the Python that
actual programmers use quite a strict language.
I'll share some insights about about how this balance works out, and how it
helped make Python the language – and community – that it is today.&lt;/p&gt;
</summary></entry><entry><title>Import Deep Dive</title><link href="https://pyvideo.org/europython-2015/import-deep-dive.html" rel="alternate"></link><published>2015-08-05T00:00:00+00:00</published><updated>2015-08-05T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2015-08-05:europython-2015/import-deep-dive.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Petr Viktorin - Import Deep Dive
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Whatever you need to do with Python, you can probably import a library
for it. But what exactly happens when you use that import statement?
How does a source file that you've installed or written become a
Python module
object, providing functions or classes for you to play with?&lt;/p&gt;
&lt;p&gt;While the import mechanism is relatively well-documented in the
reference and dozens of PEPs, sometimes even Python veterans are
caught by surprise. And some details are little-known: did you know
you can import from zip archives? Write CPython modules in C, or even
a dialect of Lisp? Or import from URLs (which might not be a good
idea)?&lt;/p&gt;
&lt;p&gt;This talk explains exactly what can happen when you use the import
statement – from the mundane machinery of searching PYTHONPATH through
subtle details of packages and import loops, to deep internals of
custom importers and C extension loading.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2016-07-20</title><link href="https://pyvideo.org/europython-2016/lightning-talks-2016-07-20.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Christopher Lozinski</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/lightning-talks-2016-07-20.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers - Lightning Talks
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Lightning talks, presented by Harald Massa and Harry Percival&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Christopher Lozinski - blogory.org&lt;/li&gt;
&lt;li&gt;David Naranja &amp;amp; Maria Coetero - Random.random() online&lt;/li&gt;
&lt;li&gt;Petr Viktorin - PEPs 487 &amp;amp; 520 (*descriptors in 5 min)&lt;/li&gt;
&lt;li&gt;Anselm Linsnau - tuxcademy - Great training material - for free!&lt;/li&gt;
&lt;li&gt;Miroslav Pojman - PyOO - Control Open Office from Python&lt;/li&gt;
&lt;li&gt;Fabio Pliger - Jupyterlab&lt;/li&gt;
&lt;li&gt;Plethora - Python meets Industry - Data Challenge&lt;/li&gt;
&lt;li&gt;Adam Castle - Ripe Forum&lt;/li&gt;
&lt;li&gt;Florian Brühen - Crowdfunding&lt;/li&gt;
&lt;li&gt;Charlie Beeson - Running a Coding Cometition&lt;/li&gt;
&lt;li&gt;Pavlo  Andriychenko - Jupiter Tricks&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>The Magic of Attribute Access</title><link href="https://pyvideo.org/europython-2014/the-magic-of-attribute-access.html" rel="alternate"></link><published>2014-07-22T00:00:00+00:00</published><updated>2014-07-22T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2014-07-22:europython-2014/the-magic-of-attribute-access.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you ever wondered how the &amp;quot;self&amp;quot; argument appears when you call a
method? Did you know there is a general mechanism behind it? Come learn
all about attributes and descriptors.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The first part of this talk will describe what exactly happens when you
read or write an attribute in Python.&lt;/p&gt;
&lt;p&gt;While this behavior is, of course, explained in the Python docs, more
precisely in the &lt;a class="reference external" href="http://docs.python.org/3/reference/datamodel.html"&gt;Data
model&lt;/a&gt; section and
&lt;a class="reference external" href="http://docs.python.org/3/howto/descriptor.html"&gt;related&lt;/a&gt;
&lt;a class="reference external" href="https://www.python.org/download/releases/2.3/mro/"&gt;writeups&lt;/a&gt;, the
documentation gives one a &amp;quot;bag of tools&amp;quot; and leaves combining them to
the reader.&lt;/p&gt;
&lt;p&gt;This talk, on the other hand, will present one chunk of functionality,
the attribute lookup, and show how its mechanisms and customization
options work together to provide the flexibility (and gotchas) Python
provides. The topics covered will be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;method resolution order, with a nod to the C3 algorithm&lt;/li&gt;
&lt;li&gt;instance-, class-, and metaclass-level variables&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__dict__&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;data/non-data descriptors&lt;/li&gt;
&lt;li&gt;special methods (&lt;tt class="docutils literal"&gt;__getattr__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__getattribute__&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;__setattr__&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;__dir__&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the second part of the talk, I will show how to use the customization
primitives explained before on several interesting and/or useful
examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A proxy object using &lt;tt class="docutils literal"&gt;__getattr__&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Generic desciptor - an ORM column sketch&lt;/li&gt;
&lt;li&gt;the rudimentary &lt;tt class="docutils literal"&gt;&amp;#64;property&lt;/tt&gt;, method, &lt;tt class="docutils literal"&gt;staticmethod&lt;/tt&gt; reimplemented
in pure Python (explained
&lt;a class="reference external" href="http://docs.python.org/3/howto/descriptor.html"&gt;here&lt;/a&gt; and
elsewhere), which lead to&lt;/li&gt;
&lt;li&gt;SQLAlchemy's
&lt;tt class="docutils literal"&gt;`&amp;#64;hybrid_proprerty&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/hybrid.html"&gt;http://docs.sqlalchemy.org/en/rel_0_9/orm/extensions/hybrid.html&lt;/a&gt;&amp;gt;`__&lt;/li&gt;
&lt;li&gt;Pyramid's deceptively simple memoizing decorator,
&lt;tt class="docutils literal"&gt;`&amp;#64;reify&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="http://docs.pylonsproject.org/projects/pyramid/en/latest/api/decorator.html"&gt;http://docs.pylonsproject.org/projects/pyramid/en/latest/api/decorator.html&lt;/a&gt;&amp;gt;`__&lt;/li&gt;
&lt;li&gt;An &lt;a class="reference external" href="https://gist.github.com/encukou/9789993"&gt;&amp;quot;Unpacked&amp;quot; tuple
properties&lt;/a&gt; example to
drive home the idea that descriptors can do more than provide
attribute access (and mention weak dicts as a way to non-intrusively
store data on an object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(These are subject to change as I compose the talk. Also some examples
may end up interleaved with the theory.)&lt;/p&gt;
&lt;p&gt;Hopefully I'll have time to conclude with a remark about how Python
manages to be a &amp;quot;simple language&amp;quot; despite having these relatively
complex mechanisms.&lt;/p&gt;
</summary></entry></feed>