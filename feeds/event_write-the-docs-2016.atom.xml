<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_write-the-docs-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-05-22T00:00:00+00:00</updated><entry><title>7 Values of Effective Tech Writing Teams</title><link href="https://pyvideo.org/write-the-docs-2016/7-values-of-effective-tech-writing-teams.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Joao Fernandes</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/7-values-of-effective-tech-writing-teams.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joao Fernandes
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztk/"&gt;http://lanyrd.com/2016/writethedocs/sfbztk/&lt;/a&gt;
Not so long ago, designers were not part of the product development cycle. They were only called at the last minute, with the hopes they could help salvage the project. But by then they couldn&amp;amp;#39;t do much, since it&amp;amp;#39;s hard to backtrack from bad design decisions made early on.
Fortunately this has changed. Both management and developers now see the value of including designers as part of the development cycle.
The same has to happen with tech writers!
In this talk I&amp;amp;#39;ll share with you the 7 core values my tech writing team used at OutSystems, where we changed the company culture and won our place in the development cycle.
These values are also being useful to me at Docker, where I&amp;amp;#39;m still learning about the product, the users, and the best way to ship documentation.&lt;/p&gt;
</summary></entry><entry><title>Accessible Math on the Web: A Server/Client Solution</title><link href="https://pyvideo.org/write-the-docs-2016/accessible-math-on-the-web-a-serverclient-solution.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Tim Arnold</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/accessible-math-on-the-web-a-serverclient-solution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim Arnold
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztx/"&gt;http://lanyrd.com/2016/writethedocs/sfbztx/&lt;/a&gt;
Math is a universal language but it is also primarily a visual language. People who are visually impaired or blind face far more challenges with mathematical communication than do sighted users.
This talk presents a method of creating documentation that helps to ameliorate some of those difficulties, offering readers a choice of renderings of the math in SVG, raw MathML, or MathML rendered by the MathJax Javascript Library.
If you create mathematical documentation and your math is in LaTeX or MathML form, you can use the same technologies described here. By leveraging today&amp;amp;#39;s technologies on the server-side (NodeJS, MathJax, MongoDB) as well as client side (MathJax), you can provide your all of your users, sighted as well as blind, with accessible mathematics.
Your readers will have the power to choose the format that works best for them. For visually impaired readers, that might be the ability to scale and zoom; for blind users it may be using a screen reader to speak math.
An overview of the problem is presented, a few of the challenges we found are discussed, and the final technical solution is described.&lt;/p&gt;
</summary></entry><entry><title>Atlassian: My Information Experience Adventure</title><link href="https://pyvideo.org/write-the-docs-2016/atlassian-my-information-experience-adventure.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Daniel Stevens</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/atlassian-my-information-experience-adventure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Stevens
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzwb/"&gt;http://lanyrd.com/2016/writethedocs/sfbzwb/&lt;/a&gt;
Come with me on a journey and learn how Atlassian went from the traditional &amp;amp;quot;Technical Writing&amp;amp;quot; team, to the Information Experience team. What began as a simple challenge to the Atlassian Technical Writing team, to make quality and success measurable and repeatable, grew into a journey to create a &amp;amp;quot;cradle to grave&amp;amp;quot; Information Experience. And we&amp;amp;#39;re just getting started. During the last two Write the Docs I&amp;amp;#39;ve given a lightning talk, Write Measure Repeat, which covers one very small part of the change we&amp;amp;#39;ve undergone. This year I&amp;amp;#39;d like to tell the rest of a story, which is some of the most exciting work I&amp;amp;#39;ve done in my career. I&amp;amp;#39;ll talk about the process of creating and growing a writing culture which is technically accurate, writes with a human voice, and connects to every other part of the information experience. While talking everyone through the journey I&amp;amp;#39;ll be sure to cover specific examples of using content strategy, user research, data analytics and a touch of team process. All this with a bit of humor and a passion which is obvious to anyone who&amp;amp;#39;s ever met me.
Main points I&amp;amp;#39;ll touch on:
How we worked through resistance to change.
What Information Experience means to us and why it&amp;amp;#39;s not just a fancy title.
Moving from the Quality Assistance team to the Design team win&amp;amp;#39;s, frustrations, hopes.
Building a better site with Confluence and considering/using other tools. Light on the tools part here, just covering the visual change and referencing how we did the actual tooling changes.
What this means to me and what I hope we&amp;amp;#39;re beginning to see in the tech comm world.&lt;/p&gt;
</summary></entry><entry><title>Code the Docs: Interactive Document Environments</title><link href="https://pyvideo.org/write-the-docs-2016/code-the-docs-interactive-document-environments.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Tim McJones</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/code-the-docs-interactive-document-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim McJones, Paris Buttfield-Addison
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztt/"&gt;http://lanyrd.com/2016/writethedocs/sfbztt/&lt;/a&gt;
Distributing example code and applications with documentation is now easy. There are a million different ways to get code to people: from zips, to GitHub, to gists, and beyond. Code is easy to distribute. But how do we create a better link between example code, and written documentation?
Luckily, clever boffins have come up with some solutions: interactive document environments. These let the live code and the documentation sit side-by-side with one another, the distributed example code is the documentation.
This talk will take a brief look at some of the different interactive document environments out there – mainly IPython Notebooks and Swift Playgrounds – and the various strengths, weaknesses, and caveats of these tools. We’ll also explore the future, and discuss where these tools are going, as well as the implications for technical documentation.&lt;/p&gt;
</summary></entry><entry><title>Continuous Annoyment: Bringing More Zen to a Hectic Writing Environment</title><link href="https://pyvideo.org/write-the-docs-2016/continuous-annoyment-bringing-more-zen-to-a-hectic-writing-environment.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Tana Franko</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/continuous-annoyment-bringing-more-zen-to-a-hectic-writing-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tana Franko
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztc/"&gt;http://lanyrd.com/2016/writethedocs/sfbztc/&lt;/a&gt;
The hectic pace of documentarian tasks is only accelerating these days, spurred on by things like continuous deployment and tools that enable a new, higher level of collaboration. These changes bring not only unprecedented opportunities but also unprecedented challenges.
Today&amp;amp;#39;s technical communicators need to adapt to cope with this change. In this talk, Tina the Tech Writer is back, now leading a team of writers. The team has been almost too successful at proving the value of documentation. Facing a mountain of urgent requests for documentation coverage, potential writer burnout, and attrition, she puts her hedgehog brain skills to practical application on a plan to bring the team to new levels of engagement, happiness, and value -- all while learning to say no when appropriate. It&amp;amp;#39;s all about balance. Tina will share results from her team&amp;amp;#39;s experiment, while outlining a way you can design your own plan to balance any set of challenges and opportunities you&amp;amp;#39;re facing.&lt;/p&gt;
</summary></entry><entry><title>Copy That: Helping your Users Succeed with Effective Product Copy</title><link href="https://pyvideo.org/write-the-docs-2016/copy-that-helping-your-users-succeed-with-effective-product-copy.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Sarah Day</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/copy-that-helping-your-users-succeed-with-effective-product-copy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarah Day
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzrz/"&gt;http://lanyrd.com/2016/writethedocs/sfbzrz/&lt;/a&gt;
In this talk, I’ll discuss my adventures learning to write effective product copy for web and mobile apps. I’m a passionate believer that app copy is a magical panacea for bad user experience. When presented effectively, good copy decreases nearly every problem your users face, including frustration, ignorance, and workflow obstruction.
I’ll cover the following points in more detail:
How unified naming conventions can decrease user stress and make engineers’ jobs easier.
How effective in-app help guides users through complex workflows.
How to present context-based education, rather than comprehensive education. * One tricky field needs a sensible name, or even one good tooltip, not a link to a help center article that only has two lines about that one tricky field.
How effective app copy is a free way to introduce and reaffirm your product’s brand and voice.
How effective app copy increases user retention in your app, and decreases frustration and fear.
App copy is documentation for people who don’t know your knowledge base exists.&lt;/p&gt;
</summary></entry><entry><title>Crossing the Streams: Enabling Collaboration Between Products and Upstreams</title><link href="https://pyvideo.org/write-the-docs-2016/crossing-the-streams-enabling-collaboration-between-products-and-upstreams.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Shaun McCance</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/crossing-the-streams-enabling-collaboration-between-products-and-upstreams.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shaun McCance
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzry/"&gt;http://lanyrd.com/2016/writethedocs/sfbzry/&lt;/a&gt;
Open source projects have documentation communities made up of volunteer enthusiasts and people from different companies. Good open source documentation is essential to the success of a project, and working within an open source community is entirely unlike working inside a single company.
At Red Hat, our products are based on dozens of open source projects and built on the hard work of hundreds more. Our documentation has to serve the needs of our customers and add value to our products. At the same time, we need our upstream projects to be healthy and vibrant, and that includes having excellent documentation and documentation communities.
Shaun McCance will talk about how to balance upstream and downstream documentation and how multiple teams can work together to create better documentation for everyone. He&amp;amp;#39;ll show examples from inside Red Hat, as well as from over a decade in working with open source documentation communities.&lt;/p&gt;
</summary></entry><entry><title>CSAT - What’s That?</title><link href="https://pyvideo.org/write-the-docs-2016/csat-whats-that.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Betsy Roseberg</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/csat-whats-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Betsy Roseberg
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztq/"&gt;http://lanyrd.com/2016/writethedocs/sfbztq/&lt;/a&gt;
As a tech writer, you care about two things: knowing your audience and delivering the most concise information possible to that audience. But how do you do that when your audience is incredibly specialized? What if the information you’re presenting is rapidly changing? How can you be certain that your documentation is always relevant for that audience?
To answer all those questions, at New Relic we use CSAT (Customer Satisfaction) data. Our Docs team monitors CSAT comments and data for every single public-facing doc we own. We use that data to make dynamic decisions that affect our site and our docs work, influencing everything from quick doc fixes, giant rewrites, and our own site’s functionality.
Every pertinent comment receives attention from at least one tech writer. Part of our code example is out of date? Fixed. There’s a glitch on our site? We’ll look into it. We list a version of Mongo that’s outdated? Updated. By focusing on these comments, your audience is working with you to keep your documentation updated.
What happens when a customer doesn’t leave a comment, and just says the document wasn’t helpful? We track that too. When docs have consistently negative feedback without constructive comments, we know that at least something in that doc needs work. When that happens, we work with SMEs to rewrite those docs and give them a little love. We polish ‘em up and publish them again, tracking their data afterwards to make sure that they’re indeed improved.
And this doesn’t just benefit the Docs team. We’ve forwarded UI complaints to design, and disgruntled customer comments to Support. That’s part of the beauty of CSAT: it’s a direct line to all the customers looking for help with our products. With CSAT, our audience is helping us to curate the best possible information for all their needs.
But we’re not stopping there. Soon, we’ll be implementing OAuth for our CSAT data. Once that’s enabled, we’ll be able to see what specific products customers are using, what region they’re in, what type of user permissions they have, and a ton of other stuff. We’ll be positively swimming in audience connectedness from our CSAT, and with it, we’ll know that our audience is understanding our concise information in the best way possible.&lt;/p&gt;
</summary></entry><entry><title>Documentation with Human Connection</title><link href="https://pyvideo.org/write-the-docs-2016/documentation-with-human-connection.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Hannah Gilberg</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/documentation-with-human-connection.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hannah Gilberg
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztz/"&gt;http://lanyrd.com/2016/writethedocs/sfbztz/&lt;/a&gt;
As technical writers, it’s easy to sacrifice human connection in the strenuous effort to present technically accurate information. Maybe you feel the human connection is marketing’s job, or if you’re in a highly technical field, maybe you think your users are smart enough to make the connections themselves. Maybe you have so much work, it’s all you can do to write something technically accurate before moving on to the next update. The result can be documentation that is airless, academic, and overly technical. In other words, not something that users would want to read! If the success of your company depends on your users actually using your documentation, you have to engage them and build understanding.
This presentation will discuss how to create documentation that engages readers and focuses them on what matters. Using the writing process developed by Peter Elbow, author of “Writing without Teachers,” I’ll show how to conduct peer reviews that elicit the reader’s subjective experience -- what Peter Elbow called “movies of the reader’s mind” -- to reveal the ambiguities that can plague our writing. We’ll look at how to use the &amp;amp;quot;summary and sayback&amp;amp;quot; and “center of gravity” techniques to help writers distill a technical passage down to its core. We’ll also look at how giving your documentation a more human voice can improve not only the reader’s experience, but your own experience as a writer as well!&lt;/p&gt;
</summary></entry><entry><title>Embed The Docs!</title><link href="https://pyvideo.org/write-the-docs-2016/embed-the-docs.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Kristof Van Tomme</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/embed-the-docs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kristof Van Tomme
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztd/"&gt;http://lanyrd.com/2016/writethedocs/sfbztd/&lt;/a&gt;
Documentation for most web applications today still follows the cognitive model of the good old fashioned documentation manual: While there might be some help content in the UI, the actual documentation manual in most cases lives as a separate object that is except for a few deep links on particularly troublesome areas, only accessible through a top domain.
But it doesn’t have to be this way, we should be perfectly able to predict what help resources a particular type of user might need on a given page, or functional state of a web application. Why do we force our users to leave our application, so that they can loose their context while searching for answers on Google?
In this talk I want to talk about a paradigm for embedded help that makes documentation content available right in the application, no matter if it’s a video tutorial, Walkthrough, or page in the manual. I will also introduce EmbedHelp, an open source embeddable widget that makes it easy for non-technical authors to implement this paradigm.&lt;/p&gt;
</summary></entry><entry><title>How to Publish Wild-Caught Articles</title><link href="https://pyvideo.org/write-the-docs-2016/how-to-publish-wild-caught-articles.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Sharon Campbell</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/how-to-publish-wild-caught-articles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sharon Campbell
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztw/"&gt;http://lanyrd.com/2016/writethedocs/sfbztw/&lt;/a&gt;
I&amp;amp;#39;m Sharon, Editorial Manager at DigitalOcean. I&amp;amp;#39;d like to talk about what my team does every day: publish technical content from the wild. We publish content from subject matter experts who not only aren&amp;amp;#39;t professional documentarians, but who don&amp;amp;#39;t even work for the company.
I&amp;amp;#39;ll go over how we solicit submissions, how we select content and authors, how we reject unsuitable applications, how we test and edit the work, and how we build relationships with community writers.
I&amp;amp;#39;ll also contextualize how this works well in the realm of open-source software, and what to consider if you adapt this model for your community.&lt;/p&gt;
</summary></entry><entry><title>Introduction &amp; State of the Docs</title><link href="https://pyvideo.org/write-the-docs-2016/introduction-state-of-the-docs.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Eric Holscher</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/introduction-state-of-the-docs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eric Holscher
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzrr/"&gt;http://lanyrd.com/2016/writethedocs/sfbzrr/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Just-In-Time Documentation: Employing Agile Methodology To Create Living Documentation</title><link href="https://pyvideo.org/write-the-docs-2016/just-in-time-documentation-employing-agile-methodology-to-create-living-documentation.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>brianne hillmer</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/just-in-time-documentation-employing-agile-methodology-to-create-living-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;brianne hillmer
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztr/"&gt;http://lanyrd.com/2016/writethedocs/sfbztr/&lt;/a&gt;
In 2014, as the new documentation coordinator my challenges were: 1. Create a living knowledge base that people want to use 2. Switch from just-in-case documentation to just-in-time documentation
In order to start churning out content, I designed a workflow process called Just-­In-­Time (JIT) documentation. Just In Time is actually a production strategy that is used primarily in manufacturing, to cost-­effectively manage inventory supply. Some say that the approach originated in Japan, others credit Henry Ford. As we applied it to documentation, just-­in-­time means that we create the just enough documentation, just in time. This presentation covers how we created this process, how we’ve refined it and its success.&lt;/p&gt;
</summary></entry><entry><title>Monday Lightning Talks (Write The Docs NA 2016)</title><link href="https://pyvideo.org/write-the-docs-2016/monday-lightning-talks-write-the-docs-na-2016.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Jon Manning</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/monday-lightning-talks-write-the-docs-na-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzwc/"&gt;http://lanyrd.com/2016/writethedocs/sfbzwc/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0:00:00 Jon Manning - Yarn Spinner&lt;/li&gt;
&lt;li&gt;0:04:41 David &amp;quot;DB&amp;quot; Baumgold - Lektor: a static-site CMS&lt;/li&gt;
&lt;li&gt;0:09:54 Matt Ness - Cats are Fun&lt;/li&gt;
&lt;li&gt;0:15:25 Rachel Whitton - Pantheon: Continuous Delivery Demo&lt;/li&gt;
&lt;li&gt;0:20:21 Colin Torretta - Managing Wikis&lt;/li&gt;
&lt;li&gt;0:26:37 Mo Nishiyama - Notes of Yesterday&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Move Fast and Document Things: Writing internal docs at fast-moving organizations</title><link href="https://pyvideo.org/write-the-docs-2016/move-fast-and-document-things-writing-internal-docs-at-fast-moving-organizations.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Ruthie BenDor</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/move-fast-and-document-things-writing-internal-docs-at-fast-moving-organizations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ruthie BenDor
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztm/"&gt;http://lanyrd.com/2016/writethedocs/sfbztm/&lt;/a&gt;
Your new engineer started on Tuesday; your internal docs should ramp them up. Your founding engineer&amp;amp;#39;s last day was yesterday; your internal docs keep their projects from falling through the cracks. Tomorrow you&amp;amp;#39;ll switch to a project that&amp;amp;#39;s already in progress; internal docs should help you catch up.
Too bad your internal docs are haphazard, out of date, and mostly nonexistent. Welcome to startup life, where speed is prized above almost all.
At startups and other fast-moving organizations, the imperative to ship provides a convenient excuse to skip writing the README.md. But should we accept this as the cost of moving fast? Or can we reframe how we communicate the value of documentation so that the message resonates in startupland? Can we adapt how we practice the art of documentation so that it happens even when nobody has time?
I&amp;amp;#39;d like to share my successes, failures, and hard-won lessons as an engineering lead and manager who has pushed to bring writing documentation into the internal culture and practices of a startup&amp;amp;#39;s engineering organization.&lt;/p&gt;
</summary></entry><entry><title>Oops, I Became an Engineer</title><link href="https://pyvideo.org/write-the-docs-2016/oops-i-became-an-engineer.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Tara Scherner de la Fuente</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/oops-i-became-an-engineer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tara Scherner de la Fuente
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzty/"&gt;http://lanyrd.com/2016/writethedocs/sfbzty/&lt;/a&gt;
From English professor and assistant dean to software engineer. How the heck did that happen? How hard was the transition? That seems…different. And what the heck are developers thinking when they say the code explains itself? These are some of the comments and questions folks ask me when they learn my background.
Included will be some commentary on learning to code, job prospects, and ways in which engineering is like grad school (for English). Also covered will be why development is an awesome career for folks who love words, grammar, and writing. Find out what’s up with developers, documentation, and denying the need for it (DID YOU SEE THAT ALLITERATION? My gawd, I’ve still got it).
Whether you’ve thought about moving into software engineering yourself, or maybe you want to hear how one can go about learning hard, new stuff, this may be the 15 minutes during which you’ll want to skip the hallway track.&lt;/p&gt;
</summary></entry><entry><title>So You Need to Document an API?</title><link href="https://pyvideo.org/write-the-docs-2016/so-you-need-to-document-an-api.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Allison Moore</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/so-you-need-to-document-an-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Allison Moore
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzrx/"&gt;http://lanyrd.com/2016/writethedocs/sfbzrx/&lt;/a&gt;
Documenting an API can be an intimidating process: How should you organize the documentation? How should you present the endpoint reference? What sorts of conceptual information are developers be looking for? Where to start?
This talk provides the answers to these questions! We’ll go through organizational strategies for API docs and discuss ways to handle the reference, tutorial, and conceptual material you might need to produce. Throughout, we’ll focus on thinking about what the end users need and building the docs to support those goals. We’ll also look at modern tools that can make your API documentation useful, usable, and snazzy-looking, and talk about strategies for documenting APIs when you’re stuck with a publishing tool that might not be ideal for the task (Madcap Flare, for example).&lt;/p&gt;
</summary></entry><entry><title>Technical writing as public service: working on open source in government</title><link href="https://pyvideo.org/write-the-docs-2016/technical-writing-as-public-service-working-on-open-source-in-government.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Britta Gustafson</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/technical-writing-as-public-service-working-on-open-source-in-government.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Britta Gustafson
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzrt/"&gt;http://lanyrd.com/2016/writethedocs/sfbzrt/&lt;/a&gt;
What if U.S. federal agencies decided to reuse and contribute to open source software projects built by other agencies, since agencies often have similar technology problems to solve? And what if they hired technical writers with open source community experience to write documentation for these projects? That would be pretty cool. Also, that’s my work. I&amp;amp;#39;m part of 18F, a digital services consulting team within and for the federal government, and all of our work is open source.
I’ll explain surprising and rewarding aspects of working on documentation in government, through the lens of the cross-agency eRegulations project I’ve been working on. The Consumer Financial Protection Bureau started it, our 18F team (in the General Services Administration) adapted it for the Bureau of Alcohol, Tobacco, Firearms, and Explosives, and we’re adapting it for use by two more agencies.
I believe open source software development with good documentation aligns with core values of our government: work by the government belongs to the people, so it should be as transparent as possible, open to input from the people, and reusable by the people. The implementation of those values is the complicated part, of course! I’ll explain how we get stuff done at both the big-picture level (how laws and government economics shape our work) and the day-to-day details (how we work across teams to get useful information online).&lt;/p&gt;
</summary></entry><entry><title>Transforming your Documentation Process</title><link href="https://pyvideo.org/write-the-docs-2016/transforming-your-documentation-process.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Jon Bulava</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/transforming-your-documentation-process.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jon Bulava, Ted Hudek, Zach Corleissen, Leon Barnard, Riona MacNamara
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztg/"&gt;http://lanyrd.com/2016/writethedocs/sfbztg/&lt;/a&gt;
We had a number of interesting presentations about companies transforming their documentation process. Instead of choosing just one, we asked the speakers to join us on a panel, so that folks can compare and contrast the different approaches.&lt;/p&gt;
</summary></entry><entry><title>Tuesday Lightning Talks (Write The Docs NA 2016)</title><link href="https://pyvideo.org/write-the-docs-2016/tuesday-lightning-talks-write-the-docs-na-2016.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Mike Jang</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/tuesday-lightning-talks-write-the-docs-na-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzwd/"&gt;http://lanyrd.com/2016/writethedocs/sfbzwd/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0:00:00 Mike Jang - State of the Write the Docs Meetups
0:04:11 Elisa Sawyer - Writing THE Story
0:09:35 Kenzie Woodbridge - You Can Do Policy!
0:14:09 Jack Twilley - Better Mead Through the Power of Science
0:19:09 Laurel Nicholes - What is trusted content?&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Two Great Teams: Bridging the Gap Between Documentation and Customer Support</title><link href="https://pyvideo.org/write-the-docs-2016/two-great-teams-bridging-the-gap-between-documentation-and-customer-support.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Neal Kaplan</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/two-great-teams-bridging-the-gap-between-documentation-and-customer-support.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neal Kaplan
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzrw/"&gt;http://lanyrd.com/2016/writethedocs/sfbzrw/&lt;/a&gt;
User assistance (documentation) is basically self-service customer support. Both documentation and customer support are critical to the success of any company, and they work better when they assist and improve each other. How can tap the knowledge of our support agents to improve the documentation, and how can we make the lives of support agents easier in return?
I’ve worked very closely with customer support and customer success teams for years, and I’ve gone from thinking of them as “the RTFM, turn if off an on again folks” to being their biggest advocate and fan.
Let me tell you how documentarians can work with customer support to turn the F in RTFM from F*** to FANTASTIC!
How does a documentarian work with customer support?
Review support tickets manually
Set up automated notifications
Review difficult cases and solutions with customer support agents
Learn about your customers
Review ticket metrics, and measure how they change as you add more documentation
Have them write!&lt;/p&gt;
</summary></entry><entry><title>We’re Not in Kansas Anymore: How to Find Courage while Following the Technical Doc Road</title><link href="https://pyvideo.org/write-the-docs-2016/were-not-in-kansas-anymore-how-to-find-courage-while-following-the-technical-doc-road.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Christy Lutz</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/were-not-in-kansas-anymore-how-to-find-courage-while-following-the-technical-doc-road.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christy Lutz
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztp/"&gt;http://lanyrd.com/2016/writethedocs/sfbztp/&lt;/a&gt;
In order to be an effective technical writer, you must carry an entire cast of characters in your head. So many, in fact, that you might feel like you need help from a great and powerful wizard just to keep up. You already have a Brain, full of technical knowledge and communication skills. You already have a Heart, open to forging alliances with your co-workers, teammates, and SMEs. If you only had the Nerve, so that you could carve out just the right place for you and your documentation and become the king of the how-to jungle.
From a new(er) writer to new (and experienced) writers, this presentation offers strategies for fostering courage in technical documentation. I will share the methods that fortified me while working on my first tech docs, some game plans for staying bold that I used as I gained more experience, and the secret I discovered about cultivating courage no matter where you are in your tech writing career.&lt;/p&gt;
</summary></entry><entry><title>What Writing Fiction Teaches You About Writing Documentation</title><link href="https://pyvideo.org/write-the-docs-2016/what-writing-fiction-teaches-you-about-writing-documentation.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Thursday Bram</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/what-writing-fiction-teaches-you-about-writing-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thursday Bram
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbzth/"&gt;http://lanyrd.com/2016/writethedocs/sfbzth/&lt;/a&gt;
Writing fiction and writing documentation have much more in common that typing out large blocks of text. This talk will talk about elements of fiction writing that improve the process of writing docs: Understanding audience: the tools fiction writers use to understand their audience (as well as to communicate with them) offer deeper looks at who reads what. The process of connecting with an audience is integral to fiction, but often overlooked in documentation — resulting in hard-to-use docs that don’t help users. Building story arcs: arguably, all fiction boils down to about seven different plots, retold in millions of different ways. Understanding underlying story structure makes the process of writing new tales much easier. Those story structures and plot elements can map directly to parts of documentation, as well as show options for creating standing elements for documentation. * Writing prose worth reading: documentation can be enjoyable to read, provided a writer is willing to invest time in crafting good reading material.
This talk will draw on examples from both popular fiction and documentation out in the world today.&lt;/p&gt;
</summary></entry><entry><title>Write the Readable README</title><link href="https://pyvideo.org/write-the-docs-2016/write-the-readable-readme.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Daniel D. Beck</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/write-the-readable-readme.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel D. Beck
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztb/"&gt;http://lanyrd.com/2016/writethedocs/sfbztb/&lt;/a&gt;
A README file often makes your software’s first impression. In this talk, you’ll learn to put together a README that makes a great impression, even if you have little time or writing skills.
At the top of your directory tree, your README is your software’s resume: it’s often the first and—if you’re not careful—the last thing anyone sees of your software. But you may not have time to craft a bespoke README. That’s OK! In this talk, you’ll learn:
why it’s important to have a great README, whether you’re working on a closed- or open-source project
how to choose what to write first to get the best README in the shortest time
how to use templates and Mad Libs to avoid common README pitfalls
From your project’s name to what’s in that LICENSE file, you’ll learn what to write first and what mistakes to avoid, so that your README wows new users, helps colleagues or contributors, and maybe even does your future self a favor.
Like Mike Jang’s Ignite OSCON 2015 talk “Ten Steps to a Better README”1, this talk will recommend style and content, but with a greater focus on the process of writing a README. While inspired by open-source approaches to READMEs—including readings of style guides such as 18F’s “Making READMEs Readable”2 and the READMEs of all projects that have 10,000 or more stars on GitHub—this talk will not be limited to the context of open source.
Whether you&amp;amp;#39;re new to the genre or a README connoisseur, you&amp;amp;#39;ll learn a process to write a README that works for you and your audience.&lt;/p&gt;
</summary></entry><entry><title>Writing So Your Words Are Read</title><link href="https://pyvideo.org/write-the-docs-2016/writing-so-your-words-are-read.html" rel="alternate"></link><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><author><name>Tracy Osborn</name></author><id>tag:pyvideo.org,2016-05-22:write-the-docs-2016/writing-so-your-words-are-read.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tracy Osborn
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztf/"&gt;http://lanyrd.com/2016/writethedocs/sfbztf/&lt;/a&gt;
You’re smart, educated, and you’ve been working in this industry for years. You’ve created amazing open-source packages and great documentation. But all that flies out the window if what you write about your project isn’t being read.
“But it’s comprehensive! It has all the info that I would need!” you may reply.
The problem is not writing for people like you; it’s writing and creating documentation that anyone can read, understand, and get excited about. This is true for projects aimed at beginners, but it goes double for projects and writing aimed at intermediate/expert programmers. Your projects will benefit when you write something that everyone can understand and would want to read. More readers = more users = perhaps more contributors!&lt;/p&gt;
</summary></entry></feed>