<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pluggable.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-10-31T00:00:00+00:00</updated><entry><title>Django, App-gehoben</title><link href="https://pyvideo.org/pycon-de-2012/django-app-gehoben.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Frank Becker</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/django-app-gehoben.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Das Webframework Django kommt ganz wie Python mit &amp;quot;Batteries included&amp;quot;.
Ähnlich wie sich in Python mit seiner umfangreichen Standardlib viele
Alltagsaufgaben mit wenigen Zeilen Code erledigen lassen, so vereinfacht
Django die Entwicklung von Webanwendungen. Und genau wie es im PyPI
unzählige Packages für so gut wie jede Aufgabe gibt, so umkreist auch
Django eine Fülle von sogenannten Pluggable Apps, also Zusatzmodulen für
fast jeden Anwendungsfall.&lt;/p&gt;
&lt;p&gt;Der Vortrag stellt einige Highlights solcher Django-Packages vor, welche
ohne viel Aufwand gewöhnlichen Djangoanwendungen erweiterte
Funktionalität mitgeben.&lt;/p&gt;
&lt;p&gt;Es werden aus den Bereichen RESTful API, Formulare, Sicherheit,
CSS/SCSS/JS Handling, Softwaretesting, Taskqueue, Ajax, Suche,
Datenbankschemamigration und Authentifizierung jeweils ein populäres
Beispielpackage kurz vorgestellt. Der Fokus liegt bewußt nicht auf
Details. Gezeigt wird grob die Funktionsweise, Installation und ein paar
Erfahrungen aus dem praktischen Einsatz.&lt;/p&gt;
&lt;p&gt;Der geneigte Zuhörer soll angeregt werden ähnliche Django-Packages in
seinen eigenen Projekten zu verwenden. Der Benefit für den Einzelnen
ist, schnell meist gut getestete Funktionalität für das eigene Projekt
einzubauen. Die Gemeinschaft profitiert von gemeinschaftlich
entwickelter Freier Software.&lt;/p&gt;
</summary><category term="app"></category><category term="django"></category><category term="module"></category><category term="package"></category><category term="pluggable"></category><category term="reuseable app"></category><category term="web"></category></entry><entry><title>Pluggable Django Patterns</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--pluggable-django-patterns.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Corey Oordt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--pluggable-django-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pluggable Django Patterns&lt;/p&gt;
&lt;p&gt;Presented by Corey Oordt&lt;/p&gt;
&lt;p&gt;Pluggable or reusable applications are a key feature of Django, but
there is little guidance on writing them well. We'll dig into the
different types of Django applications and coding patterns that make
writing a reusable application easier. The talk also covers ways to
avoid common implementation gotchas.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Reusable, or pluggable, applications are a powerful feature of Django.
Your code can do more if written with a few ideas and techniques in
mind. We'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The four qualities of a pluggable application&lt;/li&gt;
&lt;li&gt;The three types of Django applications&lt;/li&gt;
&lt;li&gt;Ten common situations in implementing reusable code and coding
patterns to handle them&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="patterns"></category><category term="pluggable"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>