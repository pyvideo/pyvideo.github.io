<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Dustin Ingram</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dustin-ingram.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-22T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/djangocon-us-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-09-24T00:00:00+00:00</published><updated>2019-09-24T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-09-24:/djangocon-us-2019/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Static Typing in Python by Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Static Typing in Python by Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/static-typing-in-python/"&gt;https://2019.djangocon.us/talks/static-typing-in-python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Dustin Ingram üëá
On Twitter: &lt;a class="reference external" href="https://twitter.com/di_codes"&gt;https://twitter.com/di_codes&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://di.codes"&gt;https://di.codes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US üëá
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA üëá
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</content><category term="DjangoCon US 2019"></category></entry><entry><title>Lightning Talks Day 1</title><link href="https://pyvideo.org/djangocon-us-2019/lightning-talks-day-1.html" rel="alternate"></link><published>2019-09-23T00:00:00+00:00</published><updated>2019-09-23T00:00:00+00:00</updated><author><name>Wayne Merry</name></author><id>tag:pyvideo.org,2019-09-23:/djangocon-us-2019/lightning-talks-day-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks Day 1 by Various Speakers&lt;/p&gt;
&lt;p&gt;Wayne Merry 00:00
Ayaz Amlani 5:24
Tyler Rudie 9:37
Pandy Knight 14:30
Dustin Ingram 18:32
Paul Stieber 22:23
Dawn Wages 26:16&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks Day 1 by Various Speakers&lt;/p&gt;
&lt;p&gt;Wayne Merry 00:00
Ayaz Amlani 5:24
Tyler Rudie 9:37
Pandy Knight 14:30
Dustin Ingram 18:32
Paul Stieber 22:23
Dawn Wages 26:16&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Kojo Idrissa üëá
On Twitter: &lt;a class="reference external" href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://kojoidrissa.com/"&gt;http://kojoidrissa.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US üëá
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA üëá
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</content><category term="DjangoCon US 2019"></category></entry><entry><title>Google Cloud for Pythonistas</title><link href="https://pyvideo.org/europython-2019/google-cloud-for-pythonistas.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/google-cloud-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for Python on Google Cloud has never been better. Join us for a
tour of Python runtimes, services and client libraries, including App
Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools
for monitoring and debugging your Python application, and best practices
for using Python on ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for Python on Google Cloud has never been better. Join us for a
tour of Python runtimes, services and client libraries, including App
Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools
for monitoring and debugging your Python application, and best practices
for using Python on Google Cloud.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="DevOps general"></category><category term="Development"></category><category term="Public Cloud (AWS/Google/...)"></category><category term="Web"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/europython-2020/static-typing-in-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This means that you don‚Äôt need to say what a given variable will hold, or whether your function will return a string or an integer (or sometimes one, and sometimes another!). This has historically made Python a very ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This means that you don‚Äôt need to say what a given variable will hold, or whether your function will return a string or an integer (or sometimes one, and sometimes another!). This has historically made Python a very flexible and beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional ‚Äútype hints‚Äù and various tools to aid in adding types to Python code. We‚Äôll see what this means for Python, for Python programmers, and what the future has in store for Python‚Äôs type system.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Python 3"></category><category term="Static Analysis"></category><category term="Tooling"></category><category term="Type-Hinting"></category><category term="python"></category></entry><entry><title>How Google Cloud uses Flask</title><link href="https://pyvideo.org/flaskcon-2020/how-google-cloud-uses-flask.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/how-google-cloud-uses-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how Google Cloud uses Flask, and how you can use Flask on Google Cloud. We'll talk about App Engine, Cloud Functions, and Cloud Run, as well as some new and interesting projects that combine Flask and Google Cloud together.
Dustin Ingram is a PSF ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how Google Cloud uses Flask, and how you can use Flask on Google Cloud. We'll talk about App Engine, Cloud Functions, and Cloud Run, as well as some new and interesting projects that combine Flask and Google Cloud together.
Dustin Ingram is a PSF director at the time of writing this.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Google Cloud"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Detecting Asteroids with Neural Networks</title><link href="https://pyvideo.org/florida-pycon-2017/detecting-asteroids-with-neural-networks.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-10-07:/florida-pycon-2017/detecting-asteroids-with-neural-networks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is an open-source software library for Machine Intelligence.
In this talk, we will learn how to use it to build and train a neural
network with the goal of correctly identifying asteroids in
astrophotography data. The dataset used will be from the Sloan Digital
Sky Survey, one of ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is an open-source software library for Machine Intelligence.
In this talk, we will learn how to use it to build and train a neural
network with the goal of correctly identifying asteroids in
astrophotography data. The dataset used will be from the Sloan Digital
Sky Survey, one of the most ambitious and influential surveys in the
history of astronomy.&lt;/p&gt;
&lt;p&gt;Using this data, we will learn how to create and featurize a training
dataset, build and fit a neural network, and train our model to
correctly identify asteroids visible from Earth.&lt;/p&gt;
&lt;p&gt;This talk is for a wide range of Python developers, from those who have
heard of machine learning, but have never experimented with it, to those
who have significant experience with neural networks, but have never
used TensorFlow before.&lt;/p&gt;
&lt;p&gt;The audience should have some basic Python knowledge, but no formal or
informal experience with machine intelligence is assumed.&lt;/p&gt;
&lt;p&gt;After watching this talk, the audience should know how to determine and
develop features, how and why to build a training dataset, how to build
and train a neural network, and some other approaches to supervised
learning.&lt;/p&gt;
</content><category term="Florida PyCon 2017"></category></entry><entry><title>Swiss Train Deployments</title><link href="https://pyvideo.org/florida-pycon-2017/swiss-train-deployments.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-10-07:/florida-pycon-2017/swiss-train-deployments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Swiss Train deployment is a general-purpose deployment philosophy
based on ideas from the Ember.js development process, modern browser
releases, and various open-source project releases, such as the Ubuntu
project.&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll explore the motivation for a Swiss Train style
deployment, the problems which it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Swiss Train deployment is a general-purpose deployment philosophy
based on ideas from the Ember.js development process, modern browser
releases, and various open-source project releases, such as the Ubuntu
project.&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll explore the motivation for a Swiss Train style
deployment, the problems which it seeks to solve in existing deployment
philosophies, and the core philosophy of a Swiss Train deployment.&lt;/p&gt;
&lt;p&gt;This talk is for developers who are responsible for deploying code (not
just Python!) to production in a timely manner, while still providing a
stable ecosystem for their users.&lt;/p&gt;
&lt;p&gt;The only background knowledge required is some amount of experience
‚Äúdeploying‚Äù code or releasing applications, whatever that may mean for
an individual developer (essentially, this will allow the audience
member to better empathize with the inefficiencies of current deployment
philosophies (or lack thereof) and highlight the advantage of the
proposed philosophy.&lt;/p&gt;
&lt;p&gt;After watching this talk, the audience should be able to: ‚Äì understand
why it is important to have a deployment philosophy ‚Äì see the
inefficiencies in current deployment philosophies ‚Äì present a strong
argument for adopting Swiss Train style deployments ‚Äì be able to
implement the deployment philosophy in their own workflow.&lt;/p&gt;
</content><category term="Florida PyCon 2017"></category></entry><entry><title>Python with Dustin Ingram: GCPPodcast 165</title><link href="https://pyvideo.org/google-cloud-platform/python-with-dustin-ingram-gcppodcast-165.html" rel="alternate"></link><published>2019-04-16T00:00:00+00:00</published><updated>2019-04-16T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-04-16:/google-cloud-platform/python-with-dustin-ingram-gcppodcast-165.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Original post ‚Üí &lt;a class="reference external" href="http://bit.ly/2UFhAi4"&gt;http://bit.ly/2UFhAi4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mark and Brian Dorsey spend today talking Python with Dustin Ingram. Python is an interpreted, dynamically typed language, which encourages very readable code. Python is popular for web applications, data science, and much more! Python works great on Google Cloud, especially with App ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Original post ‚Üí &lt;a class="reference external" href="http://bit.ly/2UFhAi4"&gt;http://bit.ly/2UFhAi4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mark and Brian Dorsey spend today talking Python with Dustin Ingram. Python is an interpreted, dynamically typed language, which encourages very readable code. Python is popular for web applications, data science, and much more! Python works great on Google Cloud, especially with App Engine, Compute Engine, and Cloud Functions. To learn more about best (and worst) use cases, listen in!&lt;/p&gt;
&lt;p&gt;For more GCP Podcasts ‚Üí &lt;a class="reference external" href="https://bit.ly/2rBQl6W"&gt;https://bit.ly/2rBQl6W&lt;/a&gt;
Subscribe to the Google Cloud Platform channel ‚Üí &lt;a class="reference external" href="https://bit.ly/GCloudPlatform"&gt;https://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</content><category term="Google Cloud Platform"></category></entry><entry><title>Getting Started with App Engine Python</title><link href="https://pyvideo.org/google-cloud-platform/getting-started-with-app-engine-python.html" rel="alternate"></link><published>2019-02-15T00:00:00+00:00</published><updated>2019-02-15T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-02-15:/google-cloud-platform/getting-started-with-app-engine-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This video walks you through how to deploy an App Engine standard app to Google Cloud Platform.&lt;/p&gt;
&lt;p&gt;Learn more about the Google App Engine ‚Üí &lt;a class="reference external" href="https://bit.ly/2IiA1Dl"&gt;https://bit.ly/2IiA1Dl&lt;/a&gt;
Python on Google App Engine ‚Üí &lt;a class="reference external" href="https://bit.ly/2ItSsFt"&gt;https://bit.ly/2ItSsFt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch the Getting Started with GCP Playlist ‚Üí &lt;a class="reference external" href="https://bit.ly/2TNymHm"&gt;https://bit.ly/2TNymHm&lt;/a&gt;
Subscribe ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This video walks you through how to deploy an App Engine standard app to Google Cloud Platform.&lt;/p&gt;
&lt;p&gt;Learn more about the Google App Engine ‚Üí &lt;a class="reference external" href="https://bit.ly/2IiA1Dl"&gt;https://bit.ly/2IiA1Dl&lt;/a&gt;
Python on Google App Engine ‚Üí &lt;a class="reference external" href="https://bit.ly/2ItSsFt"&gt;https://bit.ly/2ItSsFt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch the Getting Started with GCP Playlist ‚Üí &lt;a class="reference external" href="https://bit.ly/2TNymHm"&gt;https://bit.ly/2TNymHm&lt;/a&gt;
Subscribe to the GCP Channel for more content ‚Üí &lt;a class="reference external" href="https://bit.ly/GCloudPlatform"&gt;https://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</content><category term="Google Cloud Platform"></category></entry><entry><title>Deploying a Content Management System to App Engine with Python 3</title><link href="https://pyvideo.org/google-cloud-platform/deploying-a-content-management-system-to-app-engine-with-python-3.html" rel="alternate"></link><published>2018-12-28T00:00:00+00:00</published><updated>2018-12-28T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-12-28:/google-cloud-platform/deploying-a-content-management-system-to-app-engine-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy Wagtail, an open source content management system built on Django, to Google App Engine‚Äôs new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Setting Up a Python Development Environment ‚Üí  &lt;a class="reference external" href="http://bit.ly/2CDdn3N"&gt;http://bit.ly/2CDdn3N&lt;/a&gt;
Install the ‚Äògcloud‚Äô Google Cloud SDK ‚Üí &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Install ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy Wagtail, an open source content management system built on Django, to Google App Engine‚Äôs new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Setting Up a Python Development Environment ‚Üí  &lt;a class="reference external" href="http://bit.ly/2CDdn3N"&gt;http://bit.ly/2CDdn3N&lt;/a&gt;
Install the ‚Äògcloud‚Äô Google Cloud SDK ‚Üí &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Install the Cloud SQL Proxy ‚Üí &lt;a class="reference external" href="http://bit.ly/2SmPRNL"&gt;http://bit.ly/2SmPRNL&lt;/a&gt;
Storing secrets ‚Üí  &lt;a class="reference external" href="http://bit.ly/2AjwuON"&gt;http://bit.ly/2AjwuON&lt;/a&gt;
Google App Engine Python 3 Standard Environment Documentation ‚Üí &lt;a class="reference external" href="http://bit.ly/2PIql3t"&gt;http://bit.ly/2PIql3t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay up to date by subscribing to the Google Cloud Platform Channel ‚Üí &lt;a class="reference external" href="http://bit.ly/GCloudPlatform"&gt;http://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</content><category term="Google Cloud Platform"></category></entry><entry><title>Introduction App Engine‚Äôs new Python 3 Runtime</title><link href="https://pyvideo.org/google-cloud-platform/introduction-app-engines-new-python-3-runtime.html" rel="alternate"></link><published>2018-12-17T00:00:00+00:00</published><updated>2018-12-17T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-12-17:/google-cloud-platform/introduction-app-engines-new-python-3-runtime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy a Python 3 app to Google App Engine‚Äôs new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Install the ‚Äògcloud‚Äô Google Cloud SDK ‚Üí &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Google App Engine Python 3 Standard Environment Documentation ‚Üí &lt;a class="reference external" href="http://bit.ly/2PIql3t"&gt;http://bit.ly/2PIql3t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay up to date by ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, you will learn how to deploy a Python 3 app to Google App Engine‚Äôs new second-generation Python runtime.&lt;/p&gt;
&lt;p&gt;Install the ‚Äògcloud‚Äô Google Cloud SDK ‚Üí &lt;a class="reference external" href="http://bit.ly/2QAbYUn"&gt;http://bit.ly/2QAbYUn&lt;/a&gt;
Google App Engine Python 3 Standard Environment Documentation ‚Üí &lt;a class="reference external" href="http://bit.ly/2PIql3t"&gt;http://bit.ly/2PIql3t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay up to date by subscribing to the Google Cloud Platform Channel ‚Üí &lt;a class="reference external" href="http://bit.ly/GCloudPlatform"&gt;http://bit.ly/GCloudPlatform&lt;/a&gt;&lt;/p&gt;
</content><category term="Google Cloud Platform"></category></entry><entry><title>Python 2 to 3: Migration Patterns &amp; Motivators (Cloud Next '19)</title><link href="https://pyvideo.org/google-cloud-platform/python-2-to-3-migration-patterns-motivators-cloud-next-19.html" rel="alternate"></link><published>2018-04-12T00:00:00+00:00</published><updated>2018-04-12T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-04-12:/google-cloud-platform/python-2-to-3-migration-patterns-motivators-cloud-next-19.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As January 1, 2020 approaches, the world‚Äôs Python applications are moving to Python 3. While migrations never feel glamorous, there are plenty of reasons to be excited. Python 3 brings new features that can improve the day-to-day lives of a software development team. In this talk, we‚Äôll ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As January 1, 2020 approaches, the world‚Äôs Python applications are moving to Python 3. While migrations never feel glamorous, there are plenty of reasons to be excited. Python 3 brings new features that can improve the day-to-day lives of a software development team. In this talk, we‚Äôll discuss motivations, common migration patterns, common pitfalls, and how you can convince your team that there has never been a better time to embrace Python 3.&lt;/p&gt;
&lt;p&gt;Python on GCP ‚Üí &lt;a class="reference external" href="https://bit.ly/2TXoJF8"&gt;https://bit.ly/2TXoJF8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch more:
Next ‚Äò19 All Sessions playlist ‚Üí &lt;a class="reference external" href="https://bit.ly/Next19AllSessions"&gt;https://bit.ly/Next19AllSessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Subscribe to the Google Cloud Channel ‚Üí &lt;a class="reference external" href="https://bit.ly/GoogleCloud1"&gt;https://bit.ly/GoogleCloud1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker(s): Christopher Wilcox, Dustin Ingram&lt;/p&gt;
&lt;p&gt;Session ID: DEV308
product:App Engine,Cloud Functions,Cloud Run; fullname:Dustin Ingram,Christopher Wilcox;&lt;/p&gt;
</content><category term="Google Cloud Platform"></category></entry><entry><title>PEP 572: The Walrus Operator</title><link href="https://pyvideo.org/philadelphia-python-users-group/pep-572-the-walrus-operator.html" rel="alternate"></link><published>2019-05-20T00:00:00+00:00</published><updated>2019-05-20T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-05-20:/philadelphia-python-users-group/pep-572-the-walrus-operator.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
</content><category term="Philadelphia Python Users Group"></category></entry><entry><title>Python Tips, Tricks and Hidden Features</title><link href="https://pyvideo.org/philadelphia-python-users-group/python-tips-tricks-and-hidden-features.html" rel="alternate"></link><published>2015-11-19T00:00:00+00:00</published><updated>2015-11-19T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2015-11-19:/philadelphia-python-users-group/python-tips-tricks-and-hidden-features.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;Python Tips, Tricks and Hidden Features&lt;/dt&gt;
&lt;dd&gt;(using type, collections, metaclasses and more)&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="Philadelphia Python Users Group"></category></entry><entry><title>Lightning Talks Day 3 Round 2</title><link href="https://pyvideo.org/pybay-2018/lightning-talks-day-3-round-2.html" rel="alternate"></link><published>2018-08-18T00:00:00+00:00</published><updated>2018-08-18T00:00:00+00:00</updated><author><name>Amjith Ramanujam</name></author><id>tag:pyvideo.org,2018-08-18:/pybay-2018/lightning-talks-day-3-round-2.html</id><content type="html"></content><category term="PyBay 2018"></category></entry><entry><title>Building a Sustainable Python Package Index</title><link href="https://pyvideo.org/pybay-2019/building-a-sustainable-python-package-index.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-08-17:/pybay-2019/building-a-sustainable-python-package-index.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Most of us have installed a Python package, but do we know what it takes to make ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Abstract
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Unlike some other languages, Python has a centralized repository for third-party Python packages. Also unlike some other languages, this repository, the Python Package Index, is entirely supported by the community and operated by the non-profit Python Software Foundation.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss why we have the PyPI we all know and love, and why the current status quo is preferred. We'll go a bit into how PyPI works, both from a technical perspective, and from the perspective as an open-source and non-profit project.&lt;/p&gt;
&lt;p&gt;Finally, we'll have a call to action to help improve, and more importantly sustain, this critical piece of Python infrastructure.&lt;/p&gt;
&lt;p&gt;About the speaker
Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of the Python Package Index, and organizer for the PyTexas conference.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Ministry of Silly Runtimes: Vintage Python on Cloud Run</title><link href="https://pyvideo.org/pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-08-16:/pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www ‚Ä¶&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Data Protection for Developers: Past, Present, and Future</title><link href="https://pyvideo.org/pycascades-2019/data-protection-for-developers-past-present-and-future.html" rel="alternate"></link><published>2019-02-24T00:00:00+00:00</published><updated>2019-02-24T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-02-24:/pycascades-2019/data-protection-for-developers-past-present-and-future.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 1970, the German state of Hesse enacted what is widely considered the very first data protection laws. Nearly fifty years later, the European Union has implemented the strongest, most comprehensive data protection regulation ever. This talk gives a crash course on data protection and the GDPR.&lt;/p&gt;
&lt;p&gt;Talk page ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 1970, the German state of Hesse enacted what is widely considered the very first data protection laws. Nearly fifty years later, the European Union has implemented the strongest, most comprehensive data protection regulation ever. This talk gives a crash course on data protection and the GDPR.&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/data-protection-for-developers-past-present-and-future/"&gt;https://2019.pycascades.com/talks/data-protection-for-developers-past-present-and-future/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCascades 2019"></category></entry><entry><title>"Fireside chat about advanced Python development" - Dustin Ingram, ≈Åukasz Langa (PyCascades 2021)</title><link href="https://pyvideo.org/pycascades-2021/fireside-chat-about-advanced-python-development-dustin-ingram-lukasz-langa-pycascades-2021.html" rel="alternate"></link><published>2021-02-20T00:00:00+00:00</published><updated>2021-02-20T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-02-20:/pycascades-2021/fireside-chat-about-advanced-python-development-dustin-ingram-lukasz-langa-pycascades-2021.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Dustin Ingram, ≈Åukasz Langa) Join Python Core Developer and author of the popular Black formatting tool ≈Åukasz Langa, along with Python Software Foundation board member Dustin Ingram in a fireside chat on the tools, packages, and workflows that make them productive. They'll cover topics like annotation and type checking ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Dustin Ingram, ≈Åukasz Langa) Join Python Core Developer and author of the popular Black formatting tool ≈Åukasz Langa, along with Python Software Foundation board member Dustin Ingram in a fireside chat on the tools, packages, and workflows that make them productive. They'll cover topics like annotation and type checking, unit testing, and the value of &amp;quot;sloppy Python&amp;quot;. Whether you're just starting out or you've been programming Python for years, you'll definitely leave this talk with useful takeaways.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.com/pycascades-2021/talk/BTXYSY/"&gt;https://pretalx.com/pycascades-2021/talk/BTXYSY/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After three amazing in-person conferences, this time we're moving PyCascades online.&lt;/p&gt;
&lt;p&gt;PyCascades is a regional PyCon in the Pacific Northwest, celebrating the west coast Python developer and user community. Our organizing team includes members of the Vancouver, Seattle, and Portland Python user groups.&lt;/p&gt;
&lt;p&gt;Videos are released as CC BY-NC-SA 4.0.&lt;/p&gt;
&lt;p&gt;Produced by Next Day Video Australia: &lt;a class="reference external" href="https://nextdayvideo.com.au"&gt;https://nextdayvideo.com.au&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#pycascades #pycon #python #conference&lt;/p&gt;
&lt;p&gt;Sat Feb 20 11:25:00 2021 at Interactive Track&lt;/p&gt;
</content><category term="PyCascades 2021"></category><category term="#pycascades#pycon#python#conference"></category><category term="pycascades"></category><category term="pycascades2021"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pycolorado-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-09-08T00:00:00+00:00</published><updated>2019-09-08T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-09-08:/pycolorado-2019/static-typing-in-python.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we‚Äôll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional ‚Äútype hints‚Äù and various tools to aid in adding types to Python code.&lt;/p&gt;
</content><category term="PyColorado 2019"></category></entry><entry><title>Building a Sustainable Python Package Index</title><link href="https://pyvideo.org/pycon-au-2019/building-a-sustainable-python-package-index.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-08-03:/pycon-au-2019/building-a-sustainable-python-package-index.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/building-a-sustainable-python-package-index"&gt;https://2019.pycon-au.org/talks/building-a-sustainable-python-package-index&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 10:30:00 2019 at Cockle Bay&lt;/p&gt;
</content><category term="PyCon AU 2019"></category></entry><entry><title>PEP 572: The Walrus Operator</title><link href="https://pyvideo.org/pycon-ca-2018/pep-572-the-walrus-operator.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-11-10:/pycon-ca-2018/pep-572-the-walrus-operator.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Presentation page -- &lt;a class="reference external" href="https://2018.pycon.ca/talks/talk-PC-55520/"&gt;https://2018.pycon.ca/talks/talk-PC-55520/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon CA 2018"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pycon-de-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-10-10T00:00:00+00:00</published><updated>2019-10-10T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-10-10:/pycon-de-2019/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python code.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/NH9UEY"&gt;https://de.pycon.org/program/NH9UEY&lt;/a&gt;
Follow us on Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon DE 2019"></category></entry><entry><title>Modern development environments for Pythonistas</title><link href="https://pyvideo.org/pycon-jp-2019/modern-development-environments-for-pythonistas.html" rel="alternate"></link><published>2019-09-17T00:00:00+00:00</published><updated>2019-09-17T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-09-17:/pycon-jp-2019/modern-development-environments-for-pythonistas.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;02-201_Modern development environments for Pythonistas(Dustin Ingram)&lt;/p&gt;
</content><category term="PyCon JP 2019"></category></entry><entry><title>Modern development environments for Pythonistas</title><link href="https://pyvideo.org/pycon-latam-2019/modern-development-environments-for-pythonistas.html" rel="alternate"></link><published>2019-08-30T00:00:00+00:00</published><updated>2019-08-30T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-08-30:/pycon-latam-2019/modern-development-environments-for-pythonistas.html</id><content type="html"></content><category term="PyCon Latam 2019"></category></entry><entry><title>PEP 572: The Walrus Operator</title><link href="https://pyvideo.org/pycon-taiwan-2019/pep-572-the-walrus-operator.html" rel="alternate"></link><published>2019-09-20T00:00:00+00:00</published><updated>2019-09-20T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-09-20:/pycon-taiwan-2019/pep-572-the-walrus-operator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R0 13:55‚Äì14:25&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.&lt;/p&gt;
&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Dustin is a Developer Advocate at ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, R0 13:55‚Äì14:25&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll learn about a highly controversial proposed change to Python syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.&lt;/p&gt;
&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of PyPI, organizer for the PyTexas conference.&lt;/p&gt;
</content><category term="PyCon Taiwan 2019"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pycon-uk-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-09-13:/pycon-uk-2019/static-typing-in-python.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional 'type hints' and various tools to aid in adding types to Python code.&lt;/p&gt;
</content><category term="PyCon UK 2019"></category></entry><entry><title>Lightning Talks - 2016-06-01</title><link href="https://pyvideo.org/pycon-us-2016/lightning-talks-2016-06-01.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Hayley Denbraver</name></author><id>tag:pyvideo.org,2016-06-01:/pycon-us-2016/lightning-talks-2016-06-01.html</id><content type="html"></content><category term="PyCon US 2016"></category><category term="lightning talks"></category></entry><entry><title>What Is and What Can Be: An Exploration from `type` to Metaclasses</title><link href="https://pyvideo.org/pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2016-05-31:/pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Most of us use &lt;cite&gt;type&lt;/cite&gt; every day, but few can say they know it well. This talk explores &lt;cite&gt;type&lt;/cite&gt; and along the way, reveals how it relates to &lt;cite&gt;object&lt;/cite&gt;, &lt;cite&gt;class&lt;/cite&gt; and more, eventually arriving at deeper understanding of metaclasses in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Most of us use &lt;cite&gt;type&lt;/cite&gt; every day, but few can say they know it well. This talk explores &lt;cite&gt;type&lt;/cite&gt; and along the way, reveals how it relates to &lt;cite&gt;object&lt;/cite&gt;, &lt;cite&gt;class&lt;/cite&gt; and more, eventually arriving at deeper understanding of metaclasses in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2016"></category><category term="metaclasses"></category><category term="metaprogramming"></category><category term="types"></category></entry><entry><title>The Fastest FizzBuzz in the West: Make Your Own Language with RPLY and RPython</title><link href="https://pyvideo.org/pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-05-20:/pycon-us-2017/the-fastest-fizzbuzz-in-the-west-make-your-own-language-with-rply-and-rpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very
Special Programming Language), a tongue-in-cheek domain-specific
language, which is particularly good for implementing FizzBuzz -- as
quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY
(but with a &amp;quot;cooler&amp;quot; API) and make it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very
Special Programming Language), a tongue-in-cheek domain-specific
language, which is particularly good for implementing FizzBuzz -- as
quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY
(but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a
restricted subset of the Python programming language. Along the way,
you'll learn about lexers, parsers, and grammars, and in the end, you'll
know how to build your own language.&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Inside the Cheeseshop: How Python Packaging Works</title><link href="https://pyvideo.org/pycon-us-2018/inside-the-cheeseshop-how-python-packaging-works.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-05-12:/pycon-us-2018/inside-the-cheeseshop-how-python-packaging-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is this &lt;cite&gt;setup.py&lt;/cite&gt; file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is this &lt;cite&gt;setup.py&lt;/cite&gt; file? What's the difference between wheels and eggs? Do I use setuptools or distutils? Why should I use twine? Do I put my projects dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do I just get my module up on PyPI? Wait, what is Warehouse?&lt;/p&gt;
&lt;p&gt;This talk will identify the key tools one might encounter when trying to distribute Python software, what they are used for, why they exist, and their history (including where their weird names come from). In addition, we'll see how they all work together, what it takes to make them work, and what the future has in store for Python packaging.&lt;/p&gt;
</content><category term="PyCon US 2018"></category></entry><entry><title>PEP 572: The Walrus Operator</title><link href="https://pyvideo.org/pycon-us-2019/pep-572-the-walrus-operator.html" rel="alternate"></link><published>2019-05-04T13:55:00+00:00</published><updated>2019-05-04T13:55:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-05-04:/pycon-us-2019/pep-572-the-walrus-operator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial change to Python
syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Along the way we'll go in-depth on how new ideas about Python are
proposed, discussed, and become part of the language, what's unique
about ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll learn about a highly controversial change to Python
syntax, the rationale for it, and the fallout as the result of it.&lt;/p&gt;
&lt;p&gt;Along the way we'll go in-depth on how new ideas about Python are
proposed, discussed, and become part of the language, what's unique
about Python's process compared to other open source projects, and
recent developments and what they mean for the future of the wider
Python community.&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="talk"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pycon-us-2020/static-typing-in-python.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/static-typing-in-python.html</id><content type="html"></content><category term="PyCon US 2020"></category></entry><entry><title>Lightning Talks 1</title><link href="https://pyvideo.org/pycon-us-2021/lightning-talks-1.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/lightning-talks-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Andr√© Roberge - Friendlier tracebacks&lt;/p&gt;
&lt;p&gt;Bernat Gabor - tox 4 is happening!&lt;/p&gt;
&lt;p&gt;Brett Cannon - Introducing the Python Launcher for Unix&lt;/p&gt;
&lt;p&gt;Cheuk Ho - What happens when the developer decided that your name is too short&lt;/p&gt;
&lt;p&gt;Deepa - A tale of mutability and ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Andr√© Roberge - Friendlier tracebacks&lt;/p&gt;
&lt;p&gt;Bernat Gabor - tox 4 is happening!&lt;/p&gt;
&lt;p&gt;Brett Cannon - Introducing the Python Launcher for Unix&lt;/p&gt;
&lt;p&gt;Cheuk Ho - What happens when the developer decided that your name is too short&lt;/p&gt;
&lt;p&gt;Deepa - A tale of mutability and recursion&lt;/p&gt;
&lt;p&gt;Jason C. McDonald - Code Review For Great Good&lt;/p&gt;
&lt;p&gt;J√ºrgen Gmach - How to Maintain Many, Many, Many, Many... Many Git Repositories?&lt;/p&gt;
&lt;p&gt;Mfon Eti-mfon - Queer Struggles in Africa: Fighting Hate With Python&lt;/p&gt;
&lt;p&gt;Phil Jones - What‚Äôs new in Flask&lt;/p&gt;
&lt;p&gt;Clint Cameron - How to take ownership of security in your Python code&lt;/p&gt;
&lt;p&gt;Daniel J. Dufour - Load Django Settings from Environmental Variables with One Magical Line of Code&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Lightning Talks 2</title><link href="https://pyvideo.org/pycon-us-2021/lightning-talks-2.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/lightning-talks-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Aakanksha Chouhan - Moulding Data for ML&lt;/p&gt;
&lt;p&gt;Andres &amp;amp; Denny - PyCon Latam the conference you don't want to miss&lt;/p&gt;
&lt;p&gt;Cristi√°n Maureira-Fredes - Python Chile and its first PyCon!&lt;/p&gt;
&lt;p&gt;Dia-ning Yudono - Parametrizing tests with unittest and pytest&lt;/p&gt;
&lt;p&gt;Gregory M. Kapfhammer - Committing to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;Aakanksha Chouhan - Moulding Data for ML&lt;/p&gt;
&lt;p&gt;Andres &amp;amp; Denny - PyCon Latam the conference you don't want to miss&lt;/p&gt;
&lt;p&gt;Cristi√°n Maureira-Fredes - Python Chile and its first PyCon!&lt;/p&gt;
&lt;p&gt;Dia-ning Yudono - Parametrizing tests with unittest and pytest&lt;/p&gt;
&lt;p&gt;Gregory M. Kapfhammer - Committing to Writing Good Commit Messages: Supporting the   Creation of Human and Machine-Readable Commit Messages with Python&lt;/p&gt;
&lt;p&gt;Rumanu - Save Sheldon, in 5 minutes!&lt;/p&gt;
&lt;p&gt;Sebastian Witowski - 9 Jupyter notebook tricks for your next Advent of Code&lt;/p&gt;
&lt;p&gt;Dhananjay Jindal - f-Strings: How cool are they?&lt;/p&gt;
&lt;p&gt;Grey Li - FastAPI Seems Good, so Why Don't We Build Something Similar For Flask?&lt;/p&gt;
&lt;p&gt;Jeremy Gibson - direnv will change your life... maybe.&lt;/p&gt;
&lt;p&gt;J√ºrgen Gmach - How to Maintain Many, Many, Many, Many... Many Git Repositories?&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Secure Software Supply Chains for Python</title><link href="https://pyvideo.org/pycon-us-2021/secure-software-supply-chains-for-python.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/secure-software-supply-chains-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most powerful parts of Python lies not within the language itself, but within the robust ecosystem of open-source Python packages available to use along with it. The Python Package Index, the canonical repository for Python code, hosts nearly 300,000 different projects. However, integrating software from ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most powerful parts of Python lies not within the language itself, but within the robust ecosystem of open-source Python packages available to use along with it. The Python Package Index, the canonical repository for Python code, hosts nearly 300,000 different projects. However, integrating software from so many third-parties comes at a cost: how can we be sure it's secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore the common Python software supply chain, various ways in which such a supply chain can be attacked, as well as protected. We'll examine some tools and methodologies that help improve supply-chain security, and discuss the challenges and benefits these tools provide. Finally, we'll look at what fundamental improvements we can make to the overall ecosystem.&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Securing the Open Source Software Supply Chain</title><link href="https://pyvideo.org/pycon-us-2022/securing-the-open-source-software-supply-chain.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/securing-the-open-source-software-supply-chain.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supply Chain Security: so hot right now. With the recently increased focus on securing software systems, there has been a incredible explosion of tools, methodologies, standards, best practices, and more. Given the sheer quantity, it's hard to keep track and stay informed: how can you know what's right for ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supply Chain Security: so hot right now. With the recently increased focus on securing software systems, there has been a incredible explosion of tools, methodologies, standards, best practices, and more. Given the sheer quantity, it's hard to keep track and stay informed: how can you know what's right for you?&lt;/p&gt;
&lt;p&gt;The same attributes that make open source software desirable to use also make it challenging to secure. When anyone can publish an open-source library, how can you decide what's safe to use? If anyone can contribute, how can you trust the maintainers? If source code and development is in public, how can we identify and respond to vulnerabilities when attackers will know about them as soon as we do?&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore new tools and best practices that you can use today as open-source software user to improve the security of your software supply chain and trust in the ecosystem. We'll show how each of these serves a different purpose, and protects you from a unique way in which your software supply chain could be vulnerable. Finally, we'll discuss upcoming and potential improvements to the entire open-source ecosystem.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Software Security and Slippery Slopes: How to elevate an entire ecosystem at scale</title><link href="https://pyvideo.org/pycon-us-2023/software-security-and-slippery-slopes-how-to-elevate-an-entire-ecosystem-at-scale.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/software-security-and-slippery-slopes-how-to-elevate-an-entire-ecosystem-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software security is a critical aspect of developing and maintaining
reliable and safe systems. In the case of large and popular open source
ecosystems, such as Python, ensuring security across a wide and diverse
set of users and use cases can be a daunting task.&lt;/p&gt;
&lt;p&gt;In this talk, we ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software security is a critical aspect of developing and maintaining
reliable and safe systems. In the case of large and popular open source
ecosystems, such as Python, ensuring security across a wide and diverse
set of users and use cases can be a daunting task.&lt;/p&gt;
&lt;p&gt;In this talk, we will discuss the challenges of applying security
improvements to a widely used open source ecosystem like Python, and
explore strategies for addressing these challenges at scale. We will
discuss the importance of community involvement and collaboration, and
the role of automation and tools in facilitating the adoption of
security best practices.&lt;/p&gt;
&lt;p&gt;By the end of this talk, attendees will have a better understanding of
the challenges with and opportunities for improving software security in
the Python ecosystem, and will have some practical takeaways for
adopting and facilitating these changes in their own work.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>wat‚ÄΩ Mind-bending Edge Cases in Python</title><link href="https://pyvideo.org/pygotham-2016/wat-mind-bending-edge-cases-in-python.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2016-07-16:/pygotham-2016/wat-mind-bending-edge-cases-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore ten of the most paradoxical and mind-numbing &amp;quot;Python wats&amp;quot; -- unique edge cases in the language. We'll even go so far as to re-implement the stdlib functions which cause them to understand just why they actually make sense.&lt;/p&gt;
&lt;p&gt;This is a fun and entertaining talk ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore ten of the most paradoxical and mind-numbing &amp;quot;Python wats&amp;quot; -- unique edge cases in the language. We'll even go so far as to re-implement the stdlib functions which cause them to understand just why they actually make sense.&lt;/p&gt;
&lt;p&gt;This is a fun and entertaining talk. In the end, attendees will gain insight into functions they use every day, including &lt;cite&gt;zip&lt;/cite&gt;, &lt;cite&gt;max&lt;/cite&gt;, &lt;cite&gt;min&lt;/cite&gt;, &lt;cite&gt;any&lt;/cite&gt;,  &lt;cite&gt;all&lt;/cite&gt;,  and more. Even the simplest of tools, when combined, can produce really weird results!&lt;/p&gt;
</content><category term="PyGotham 2016"></category></entry><entry><title>The Fastest FizzBuzz in the West: How to Make Your Own Programming Language</title><link href="https://pyvideo.org/pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-10-06:/pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.'&lt;/p&gt;
&lt;p&gt;This talk is for anyone who has ever wondered how computers understand programming languages, or how to create your own programming language. It will be approachable for novices who have never studied programming language design, but will offer tools and concepts that will enable experienced users to actually build their own language, if they so desire.&lt;/p&gt;
&lt;p&gt;The audience should understand that a programming language consists of a set of symbols and patterns, and that an interpreter determines whether any given set of symbols and patterns is &amp;quot;valid&amp;quot; or &amp;quot;invalid&amp;quot;. The audience will NOT need prior experience or knowledge of advanced programming language concepts.&lt;/p&gt;
&lt;p&gt;After watching the talk, the novice users in the audience should gain an understanding of how a computer understands a programming language, including programming language concepts such as tokens, lexers, parsers and grammars.  Furthermore, experienced users should be able to implement a very simple DSL of their own using the tools discussed.&lt;/p&gt;
</content><category term="PyGotham 2017"></category></entry><entry><title>Inside the Cheeseshop: How Python Packaging Works</title><link href="https://pyvideo.org/pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-10-06:/pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is
this &lt;cite&gt;setup.py&lt;/cite&gt; file? What‚Äôs the difference between wheels and eggs? Do I use
setuptools or distutils? Why should I use twine? Do I put my projects
dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is
this &lt;cite&gt;setup.py&lt;/cite&gt; file? What‚Äôs the difference between wheels and eggs? Do I use
setuptools or distutils? Why should I use twine? Do I put my projects
dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do I just get my
module up on PyPI? Wait, what is Warehouse?&lt;/p&gt;
&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In addition,
we‚Äôll see how they all work together, what it takes to make them work, and
what the future has in store for Python packaging.&lt;/p&gt;
&lt;p&gt;## Who and Why&lt;/p&gt;
&lt;p&gt;This talk is for any Pythonista that has been confused by Python Packaging
(read: everyone).&lt;/p&gt;
&lt;p&gt;This talk requires that the audience has just the slightest familiarity with
how Python Packaging works ‚Äì that you need to upload your source code, that
there are a few popular and familiar tools, and that they are all a little
confusing. Attendees do not need to be publishers of Python Packages but
likely will be people interested in publishing someday.&lt;/p&gt;
&lt;p&gt;After watching this talk, attendees should have a significant amount of
their confusion about the Python packaging ecosystem resolved, and should be
able to make informed, reasonable decisions when they want to publish a
package (without having to be told step by step instructions, or given
extremely opinionated advice).&lt;/p&gt;
</content><category term="PyGotham 2018"></category></entry><entry><title>Python Grab Bag: A Set of Short Plays</title><link href="https://pyvideo.org/pygotham-2018/python-grab-bag-a-set-of-short-plays.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Jason Owen</name></author><id>tag:pyvideo.org,2018-10-06:/pygotham-2018/python-grab-bag-a-set-of-short-plays.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A frenetic combination of educational and entertaining segments, as chosen
by the audience! In between segments, audience members will shout out
numbers from a menu, and we‚Äôll perform the selected segment: it may be a
short monologue, it may be a play, it may be a physical demo ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A frenetic combination of educational and entertaining segments, as chosen
by the audience! In between segments, audience members will shout out
numbers from a menu, and we‚Äôll perform the selected segment: it may be a
short monologue, it may be a play, it may be a physical demo, or it may be a
tiny traditional conference talk.&lt;/p&gt;
&lt;p&gt;Audience members should walk away with some additional understanding of the
history of Python, knowledge of some tools and libraries available in the
Python ecosystem, and some Python-related amusement.&lt;/p&gt;
&lt;p&gt;This talk is inspired by [the Neo-Futurists‚Äô Infinite
Wrench](&lt;a class="reference external" href="http://www.nyneofuturists.org/"&gt;http://www.nyneofuturists.org/&lt;/a&gt;), a creative and energetic piece of
theater.&lt;/p&gt;
&lt;p&gt;The audience can select from these plays:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Unvarnished Truth&lt;/li&gt;
&lt;li&gt;&amp;lt;tt&amp;gt;from import import import&amp;lt;/tt&amp;gt;&lt;/li&gt;
&lt;li&gt;WHAT'S the DEAL with CLIENTS?&lt;/li&gt;
&lt;li&gt;A Play Entirely Full of Monty Python References&lt;/li&gt;
&lt;li&gt;A Proposal for Explaining PEPs&lt;/li&gt;
&lt;li&gt;GNU Mailman: A Pythonic Playlist&lt;/li&gt;
&lt;li&gt;Soup, Scrape, Sweep&lt;/li&gt;
&lt;li&gt;Generators: Taste the Freshness&lt;/li&gt;
&lt;li&gt;This Is How We Do It&lt;/li&gt;
&lt;li&gt;Cookie For Your Thoughts&lt;/li&gt;
&lt;li&gt;If Shakespeare Wrote Incident Reports&lt;/li&gt;
&lt;li&gt;Code Review: Fast Forward and Back&lt;/li&gt;
&lt;li&gt;When The Old Was New&lt;/li&gt;
&lt;li&gt;Things We Don't Say At The Daily Standup Meeting&lt;/li&gt;
&lt;li&gt;The Relief of Reuse (The Colorful &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Be A Better Bureaucrat (The Intellectual &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Speaking Python&lt;/li&gt;
&lt;li&gt;The End (Of 2.7) Is Near (feat. Jason as Guido van Rossum)&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyGotham 2018"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pygotham-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-10-04:/pygotham-2019/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This
means that you don't need to say what a given variable will hold, or whether
your function will return a string or an integer (or sometimes one, and
sometimes another!). This has historically made Python a very flexible ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This
means that you don't need to say what a given variable will hold, or whether
your function will return a string or an integer (or sometimes one, and
sometimes another!). This has historically made Python a very flexible and
beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static
type system, as well as recent efforts to introduce static typing to Python
via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python
code. We'll see what this means for Python, for Python programmers, and what
the future has in store for Python's type system.&lt;/p&gt;
</content><category term="PyGotham 2019"></category></entry><entry><title>The Ministry of Silly Talks</title><link href="https://pyvideo.org/pygotham-2019/the-ministry-of-silly-talks.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Aditya Sirish</name></author><id>tag:pyvideo.org,2019-10-04:/pygotham-2019/the-ministry-of-silly-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2019's Lightning Talks&lt;/p&gt;
</content><category term="PyGotham 2019"></category></entry><entry><title>Inside the Cheeseshop: How Python Packaging Works</title><link href="https://pyvideo.org/pyohio-2018/inside-the-cheeseshop-how-python-packaging-works.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-07-28:/pyohio-2018/inside-the-cheeseshop-how-python-packaging-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In
addition, we'll see how they all work together, what it takes to make
them ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In
addition, we'll see how they all work together, what it takes to make
them work, and what the future has in store for Python packaging.&lt;/p&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-07-28:/pyohio-2018/saturday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>Keeping Fun in Computing</title><link href="https://pyvideo.org/pyohio-2019/keeping-fun-in-computing.html" rel="alternate"></link><published>2019-07-28T14:30:00+00:00</published><updated>2019-07-28T14:30:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-07-28:/pyohio-2019/keeping-fun-in-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how maintaining a sense of fun and whimsy in
science has a profound effect on discovery, innovation and progress.&lt;/p&gt;
&lt;p&gt;We'll also talk about some modern examples of how folks are ensuring
technology remains not-so-serious, including some examples specific to
the Python community, and how ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how maintaining a sense of fun and whimsy in
science has a profound effect on discovery, innovation and progress.&lt;/p&gt;
&lt;p&gt;We'll also talk about some modern examples of how folks are ensuring
technology remains not-so-serious, including some examples specific to
the Python community, and how some famous thinkers followed their
natural curiosity to keep science fun, all to great success.&lt;/p&gt;
&lt;p&gt;And finally, we'll discuss how you and I can keep computing fun on a
day-to- day basis, maintain and nurture our natural curiosity, and just
be open to the unknown, all to the benefit of our field, those we work
with, and ourselves.&lt;/p&gt;
</content><category term="PyOhio 2019"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2019/sunday-lightning-talks.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Kat Passen</name></author><id>tag:pyvideo.org,2019-07-27:/pyohio-2019/sunday-lightning-talks.html</id><content type="html"></content><category term="PyOhio 2019"></category></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2017/lightning-talks.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2017-11-18:/pytexas-2017/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=00m00s"&gt;00:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Walker Hale&lt;/td&gt;
&lt;td&gt;Conda packages for bash scripts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=05m10s"&gt;05:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ricky Whitaker&lt;/td&gt;
&lt;td&gt;Becoming Comfortable in Discomfort: A few life lessons from quitting my job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=12m26s"&gt;12:26&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moshe Zadka&lt;/td&gt;
&lt;td&gt;Introducing NColony&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=17m05s"&gt;17:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Graham&lt;/td&gt;
&lt;td&gt;Safely using read replica with postgres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=24m12s"&gt;24:12&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;John ‚Ä¶&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=00m00s"&gt;00:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Walker Hale&lt;/td&gt;
&lt;td&gt;Conda packages for bash scripts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=05m10s"&gt;05:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ricky Whitaker&lt;/td&gt;
&lt;td&gt;Becoming Comfortable in Discomfort: A few life lessons from quitting my job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=12m26s"&gt;12:26&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moshe Zadka&lt;/td&gt;
&lt;td&gt;Introducing NColony&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=17m05s"&gt;17:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Graham&lt;/td&gt;
&lt;td&gt;Safely using read replica with postgres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=24m12s"&gt;24:12&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;John Arbelaez&lt;/td&gt;
&lt;td&gt;The pyslackers community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=30m52s"&gt;30:52&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caroline D Dikibo&lt;/td&gt;
&lt;td&gt;OSS Project Awareness: Zulip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=39m22s"&gt;39:22&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dustin Ingram&lt;/td&gt;
&lt;td&gt;Good Hacker; Bad Hacker&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="PyTexas 2017"></category><category term="lightning talks"></category></entry><entry><title>The Fastest FizzBuzz in the West</title><link href="https://pyvideo.org/pytexas-2017/the-fastest-fizzbuzz-in-the-west.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-11-18:/pytexas-2017/the-fastest-fizzbuzz-in-the-west.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.&lt;/p&gt;
</content><category term="PyTexas 2017"></category></entry><entry><title>Inside the Cheeseshop: How Python Packaging Works</title><link href="https://pyvideo.org/scipy-2018/inside-the-cheeseshop-how-python-packaging-works.html" rel="alternate"></link><published>2018-07-11T00:00:00+00:00</published><updated>2018-07-11T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2018-07-11:/scipy-2018/inside-the-cheeseshop-how-python-packaging-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound.
What is this &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file? What's the difference between wheels and
eggs? Do I use setuptools or distutils? Why should I use twine? Do I put
my projects dependencies in a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; or in &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;?
How do ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound.
What is this &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file? What's the difference between wheels and
eggs? Do I use setuptools or distutils? Why should I use twine? Do I put
my projects dependencies in a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; or in &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;?
How do I just get my module up on PyPI? Should I use &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt;? Wait, what is Warehouse? This talk will identify the key
tools one might encounter when trying to distribute Python software,
what they are used for, why they exist, and their history (including
where their weird names come from). In addition, we'll see how they all
work together, what it takes to make them work, and what the future has
in store for Python packaging.Presenter(s): Speaker: Dustin Ingram,
Python Packaging Authority&lt;/p&gt;
</content><category term="SciPy 2018"></category></entry></feed>