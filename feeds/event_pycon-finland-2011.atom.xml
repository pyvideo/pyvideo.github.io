<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-finland-2011.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-10-18T00:00:00+00:00</updated><entry><title>Replacing Spreadsheets with Django</title><link href="https://pyvideo.org/pycon-finland-2011/replacing-spreadsheets-with-django.html" rel="alternate"></link><published>2011-10-18T00:00:00+00:00</published><updated>2011-10-18T00:00:00+00:00</updated><author><name>Teemu Kurppa</name></author><id>tag:pyvideo.org,2011-10-18:pycon-finland-2011/replacing-spreadsheets-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/shfwx/"&gt;http://lanyrd.com/2011/pycon-finland/shfwx/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Building Your Own Cloud</title><link href="https://pyvideo.org/pycon-finland-2011/building-your-own-cloud.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Andy Smith</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/building-your-own-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/shrzg/"&gt;http://lanyrd.com/2011/pycon-finland/shrzg/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cloud is a huge buzzword nowadays, and for good reason, the paradigm lends itself very well to improved hardware utilization, leads to a development environment that closely mirrors your production environment and provides a great platform for resource sharing between teams.&lt;/p&gt;
&lt;p&gt;This talk will go over many of the interesting technologies and techniques used in the development of OpenStack, an all-Python open source project that provides the infrastructure for running your own private cloud, and will leave you feeling excited about the future of how we will all use computers.&lt;/p&gt;
</summary></entry><entry><title>from __magic__ import wtf</title><link href="https://pyvideo.org/pycon-finland-2011/from-__magic__-import-wtf.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Tommie Gannert</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/from-__magic__-import-wtf.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/shctk/"&gt;http://lanyrd.com/2011/pycon-finland/shctk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just because you can doesn't mean you should. Python provides facilities like __metaclass__, __getattr__, __call__, and others which allow programmers to do a lot of clever stuff. This magical code is fun to write, concise, and can be quite elegant. However, too much magic is dangerous, particularly in library code. You may think your code is clever and fun, but your colleague trying to maintain it or re-use it in another project later will probably be confused and annoyed by much thought is needed to understand what the heck your fancy code is doing. We will discuss finding the balance between fun magic and boring but clear with some examples of questionable magic we've encountered in Spotify's Python corpus.&lt;/p&gt;
</summary></entry><entry><title>High-Performance Computing with Python</title><link href="https://pyvideo.org/pycon-finland-2011/high-performance-computing-with-python.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Martti Louhivuori</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/high-performance-computing-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/sgybf/"&gt;http://lanyrd.com/2011/pycon-finland/sgybf/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Traditionally, compiled languages have been used to write the software for massively parallel high-performance computing. Even though dynamic, interpreted languages, such as Python, have gained popularity due to increased programming efficiency, they cannot compete directly with the raw performance of compiled languages. However, by using an interpreted language together with a compiled language, it is possible to have most of the productivity enhancing features together with a good numerical performance.&lt;/p&gt;
&lt;p&gt;External hardware-tuned numerical libraries offer excellent performance and in several cases these can be used directly from Python, e.g. through NumPy or petsc4py. Major improvements can be also achieved by re-writing performance critical routines and operations in a compiled language and accessing them through the Python extension mechanism. This approach has been used successfully to implement the software package GPAW for quantum-mechanical simulations of nanostructures. It uses a combination of Python and C programming languages, Python extensions, and external numerical libraries.&lt;/p&gt;
&lt;p&gt;While the chosen approach works well in standard workstations and Unix environments, massively parallel supercomputing systems can present some challenges in porting, debugging and profiling the software. We present some details of the implementation and discuss the advantages and challenges of the combined Python/C approach. We show that despite the challenges it is possible to obtain good numerical performance and good parallel scalability with Python based software.&lt;/p&gt;
</summary></entry><entry><title>Keynote</title><link href="https://pyvideo.org/pycon-finland-2011/keynote.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Mike Bradshaw</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/sgybc/"&gt;http://lanyrd.com/2011/pycon-finland/sgybc/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mike's greetings and some food for thought for new up and about Python communities.&lt;/p&gt;
</summary></entry><entry><title>Lightning Recruitments</title><link href="https://pyvideo.org/pycon-finland-2011/lightning-recruitments.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/lightning-recruitments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some companies who were present in Pycon Finland 2011 took a quick stab at doing lightning recruitments due to having extra time in the schedule just before the keynote.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycon-finland-2011/lightning-talks.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks from Pycon Finland 2011.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Python for Data Science</title><link href="https://pyvideo.org/pycon-finland-2011/python-for-data-science.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Harri H채m채l채inen</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/python-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/sgwwx/"&gt;http://lanyrd.com/2011/pycon-finland/sgwwx/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The amount of data available to us is growing rapidly, but what is required to make useful conclusions out of it? During this presentation we are going to learn how to use Python as your tool for data science. The presentation will go through the phases most often required when working with real-world data.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Different tactics to gather your data&lt;/li&gt;
&lt;li&gt;Cleansing, scrubbing, correcting your data&lt;/li&gt;
&lt;li&gt;Running analysis for your data&lt;/li&gt;
&lt;li&gt;Bring your data to live with visualizations&lt;/li&gt;
&lt;li&gt;Publishing your data for rest of us as linked open data&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The presentation is for those of us brave enough to enter the valley of wild data and face the horrors of uncertainty. It's an introductory presentation but people with experience of doing similar things with Python or some other tool such as R are also warmly welcome to participate the discussion.&lt;/p&gt;
</summary></entry><entry><title>Robot Framework</title><link href="https://pyvideo.org/pycon-finland-2011/robot-framework.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Pekka Kl채rck</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/robot-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An impromptu session about the Robot testing framework.&lt;/p&gt;
</summary></entry><entry><title>Understanding Encodings</title><link href="https://pyvideo.org/pycon-finland-2011/understanding-encodings.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/understanding-encodings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/sgybb/"&gt;http://lanyrd.com/2011/pycon-finland/sgybb/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Working with Unicode and encodings might be confusing, but every
developer must know how they work.
Even if the full Unicode standard is actually quite complex, only a
few basic concepts are really necessary to work with Python and
Unicode:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the differences between Unicode strings and bytes;&lt;/li&gt;
&lt;li&gt;how encodings are used to store characters;&lt;/li&gt;
&lt;li&gt;the differences between different encodings;&lt;/li&gt;
&lt;li&gt;how to understand Unicode-related errors;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk aims to explain these concept.
Best practices for using Unicode, the current status of Unicode in
Python 2 and 3, and the plans for the future (e.g. PEP393 - Flexible
string representation) will also be discussed.
The talk is suitable for both new developers that are not yet familiar
with Unicode and for experienced developers that want to understand
better what's going on under the hood.&lt;/p&gt;
</summary></entry></feed>