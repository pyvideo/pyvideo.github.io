<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-fr-2013.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-11-30T00:00:00+00:00</updated><entry><title>Ansible, de l'orchestration à la gestion de configuration</title><link href="https://pyvideo.org/pycon-fr-2013/ansible-de-lorchestration-a-la-gestion-de-confi.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Michael Scherer</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/ansible-de-lorchestration-a-la-gestion-de-confi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Administrateur systéme de profession, j'utilise puppet à mon travail
pour les serveurs. Mais nous n'avions pas d'outil d'orchestration pour
mon équipe, ce qui a vite été un leger désagrement. Et Ansible est
arrivé, avec le support de kerberos, me permettant d'agir rapidement
partout avec la rapidité d'un ninja.&lt;/p&gt;
&lt;p&gt;Ansible est un outil de gestion de machine trés souple. Sans avoir
besoin d'autre chose que ssh, ce dernier permet aussi bien d'orchester
un cluster de machines via des opérations ad-hoc que d'appliquer une
configuration décrite en yaml pour remettre un systéme dans le droit
chemin. Cet présentation va faire découvrir l'outil, pour des taches
simples jusqu'à la gestion compléte de la configuration, et comment
l'intégrer directement dans un script python.&lt;/p&gt;
</summary></entry><entry><title>Architecture en Webservices avec Django</title><link href="https://pyvideo.org/pycon-fr-2013/architecture-en-webservices-avec-django.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Xavier Ordoquy</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/architecture-en-webservices-avec-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;L'architecture d'une plateforme sous forme de webservices est de plus en
plus commune. Comment Django peut-il aider à mettre en place une telle
architecture ?&lt;/p&gt;
&lt;p&gt;L'architecture d'une plateforme sous forme de webservices est de plus en
plus commune. Quels sont les avantages et problèmes d'une telle
architecture ? Comment Django peut-il aider à mettre en place une telle
architecture, du coté du serveur comme du coté du client ? Qu'en est-il
des performances ?&lt;/p&gt;
</summary></entry><entry><title>Brewery : mettez un Python dans votre robot !</title><link href="https://pyvideo.org/pycon-fr-2013/brewery-mettez-un-python-dans-votre-robot.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Éric Alber</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/brewery-mettez-un-python-dans-votre-robot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;La BH Team participe depuis 7 ans à la Coupe de France de Robotique.&lt;/p&gt;
&lt;p&gt;Ce challenge consiste en la conception et la réalisation complète d'un
robot autonome en énergie et en commande. Les robots ainsi réalisés
s'affrontent dans des matchs d'une durée de 90 secondes, sans
intervention de leurs concepteurs. La principale difficulté de cette
compétition est que son règlement, diffusé 9 mois à l'avance seulement,
implique systématiquement un changement presque total des contraintes du
jeu.&lt;/p&gt;
&lt;p&gt;A un moment de notre parcours, nous avons eu le besoin de pouvoir
décrire dans un langage de haut niveau notre stratégie. Notre expérience
dans le développement logiciel nous a amené à choisir le langage Python.&lt;/p&gt;
&lt;p&gt;Trois ans après la première édition du framework &amp;quot;Brewery&amp;quot;, voici une
présentation de ses capacités et des avantages qu'il confère à l'équipe.&lt;/p&gt;
&lt;p&gt;Nous commencerons par une explication du contexte de la compétition, de
l'évolution des différents modules développés par l'équipe au fur et à
mesure des années, et enfin nous détaillerons les points remarquables du
framework.&lt;/p&gt;
</summary></entry><entry><title>Comment faire pousser des forets aleatoires dans les nuages</title><link href="https://pyvideo.org/pycon-fr-2013/comment-faire-pousser-des-forets-aleatoires-dans.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Olivier Grisel</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/comment-faire-pousser-des-forets-aleatoires-dans.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Présentation de l'implémentation d'une méthode d'apprentissage
statistique à la mode avec scikit-learn, IPython.parallel et des
machines dans le cloud.&lt;/p&gt;
&lt;p&gt;scikit-learn est une lib de Machine Learning écrite en Python. Son
implémentation de l'algorithme des forets aléatoires a beaucoup de
succès auprès des &amp;quot;Data Scientists&amp;quot; [1] qui participent aux compétitions
de Machine Learning sur le site kaggle.com. Cette présentation sera
l'occasion de présenter comment paralléliser la culture de telles forets
grâce à un cluster de calcul provisionné dans le cloud.&lt;/p&gt;
&lt;p&gt;Cette présentation sera l'occasion de rappeler les concepts de base du
Machine Learning et de présenter rapidement les projets scikit-learn et
IPython.&lt;/p&gt;
&lt;p&gt;Nous nous intéresseront ensuite plus particulièrement à l'algorithme des
random forests (ou plutôt de sa variante belge appelée Forests of
Extremely Randomized Trees) et comment accélérer l'apprentissage de
grandes forets grâce au module de calcul distribué du projet IPython et
à un cluster de machines monté dans un cloud public tel que Amazon,
Rackspace, Microsoft Azure ou Digital Ocean.&lt;/p&gt;
&lt;p&gt;Si vous êtes sage vous aurez peut être droit à une démo live.&lt;/p&gt;
&lt;p&gt;[1] un statisticien qui utilise un macbook air.&lt;/p&gt;
</summary></entry><entry><title>Deployment and Continuous integration of a Plone/Zope application</title><link href="https://pyvideo.org/pycon-fr-2013/deployment-and-continuous-integration-of-a-plone.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Julien Pivotto</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/deployment-and-continuous-integration-of-a-plone.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cette conférence vous montrera comme nous utilisons Jenkins, Puppet et
d'autres outils pour automatiser le déploiement et le test d'une
application python de type Zope/Plone sur plusieurs machines. Ce que
nous avons appris, les logiciels que nous utilisons, ce qui n'a pas
fonctionné...&lt;/p&gt;
&lt;p&gt;Le système de buildout de plone et virtualenv sont des outils largement
utilisés pour développer et déployer des applications plone. Mais une
fois qu'il y a plusieurs nodes à déployer et que vous souhaitez être sur
de la fiabilité de votre code avant vos déploiements, un buildout manuel
sur chaque serveur est à proscrire.&lt;/p&gt;
&lt;p&gt;Nous utilisons Jenkins, Puppet, mcollective et d'autres outils pour
packager et tester l'application, avant le déploiement sur nos serveurs.
Nous l'avons fait pour déployer plus vite avec moins de risques un code
de meilleure qualité.&lt;/p&gt;
&lt;p&gt;Nous avons énormément appris et souhaitons partager notre expérience.&lt;/p&gt;
&lt;p&gt;The Plone/Zope Buildout system and virtualenv are common tools to
develop and build your plone application. But once you have several
nodes to deploy and you want to trust your code before deploying it, and
a manual buildout is something you should avoid.&lt;/p&gt;
&lt;p&gt;We use Jenkins, Puppet, Mcollective and some other tools to package and
test the application, before deploying it to several nodes. We made it
happen to be confident with our code and to deploy faster with less
risks.&lt;/p&gt;
&lt;p&gt;We learned a lot and we want to share our experience about it.&lt;/p&gt;
</summary></entry><entry><title>Déprimé, au bord du burn-out et ...</title><link href="https://pyvideo.org/pycon-fr-2013/deprime-au-bord-du-burn-out-et.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Jean-Michel Armand</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/deprime-au-bord-du-burn-out-et.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Déprimé, au bord du burn-out, et pourtant il faut continuer à coder&lt;/p&gt;
&lt;p&gt;Que ce soit pendant ses heures de boulot ou le soir et les week-ends,
coder demande d'avoir un minimum de tranquillité et de sérénité. Comment
faire pour continuer à prendre du plaisir à coder lorsque stress, délais
infernaux, demandes utilisateurs ubuesques nous entraînent plutôt vers
le burn-out et la déprime.&lt;/p&gt;
&lt;p&gt;Cette conférence, basée sur mon expérience personnelle, a pour but de
donner quelques pistes pour détecter les problèmes d'épuisement
professionnel et tenter de les résoudre. Remèdes de 'grand-mère',
questions à se poser, organisation du travail, réflexion sur la façon de
développer, tout cela sera discuté pendant cette session.&lt;/p&gt;
</summary></entry><entry><title>Depsolver, une librairie pour la gestion de dépendences</title><link href="https://pyvideo.org/pycon-fr-2013/depsolver-une-librairie-pour-la-gestion-de-depen.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>David Cournapeau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/depsolver-une-librairie-pour-la-gestion-de-depen.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Les outils &amp;quot;easy_install/pip&amp;quot; sont devenus populaires en partie grâce à
l'incorporation d'un système de dépendances. Depsolver est une librairie
conçue pour résoudre les problèmes de dépendance plus complexes que pip
et easy_install ne peuvent pas résoudre. La librairie est pure python,
et conçue pour être réutilisable par de futures systèmes d'installations
(python ou autre).&lt;/p&gt;
</summary></entry><entry><title>du beau code Perl</title><link href="https://pyvideo.org/pycon-fr-2013/du-beau-code-perl.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Marc Chantreux</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/du-beau-code-perl.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Répondant à la demande qui m'avait été faite l'an dernier de montrer du
&amp;quot;beau code perl&amp;quot;, je montre les similarités conceptuelles entre les 2
langages , les différences syntaxiques et (SPOIL) conclus que tout ça
n'est qu'affaire de gout.&lt;/p&gt;
&lt;p&gt;Attention: cette présentation n'est pas pour ceux qui pensent que la
programmation peut être un job alimentaire!&lt;/p&gt;
&lt;p&gt;Lors de ma présentation à pycon 2011, je faisais l'éloge du
multiculturalisme et de la curiosité. A cette occasion, il m'avait été
demandé de montrer du beau code Perl (illustration que la subjectivité a
laquelle j'appellais l'auditeur ne va pas de soit)&lt;/p&gt;
&lt;p&gt;Il s'agit donc de montrer une forme de beauté, comme un guide de musée
tenterait de sensibiliser un photographe au cubisme.&lt;/p&gt;
&lt;p&gt;Je pars donc des &amp;quot;belles choses&amp;quot; de python (list comprehensions,
yield/send, magic **, operator overload, metaprogramming, application
partielle) et de ses rigueurs esthétiques pour en arriver aux concepts
sous-jacents et montrer comment ils s'expriment en Perl. 2 tableaux
montrant la même idée, le gout faisant le reste, sans jugement de
valeur.&lt;/p&gt;
</summary></entry><entry><title>élégants objets</title><link href="https://pyvideo.org/pycon-fr-2013/elegants-objets.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Sébastien Keim</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/elegants-objets.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Qu'est ce qui rend Python et sa bibliothèque standard si attrayants ? Et
comment créer des objets qui ont les mêmes qualités ?&lt;/p&gt;
&lt;p&gt;Un bref rappel des peps 8 et 20 pour évoquer la philosophie du langage;
notamment les éléments de son modèle conceptuel qu'il faut garder à
l'esprit quand on écrit une classe.&lt;/p&gt;
&lt;p&gt;Seront ensuite présentés divers protocoles du langages: constructeur et
destructeur, conversion de types, hachage et comparaison, opérateurs,
dérivation , gestion des ressources, énumération... et de la
bibliothèque standard: documentation et débogage, pickle et copy ...&lt;/p&gt;
&lt;p&gt;Ces protocoles documentés sont l'arbre qui cache la forêt : il existe
une foule d'archétypes plus implicites, que les programmeurs ont déjà
rencontré dans les modules qu'ils ont utilisé; et qu'ils s'attendront
implicitement à retrouver dans vos objets. Comment découvrir ces
archétypes et les reproduire ?&lt;/p&gt;
</summary></entry><entry><title>Evy</title><link href="https://pyvideo.org/pycon-fr-2013/evy.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/evy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Evy est un serveur d'intégration continu, distribué et modulaire. Basé
sur Redis, Evy donna la possibilité de distribuer des jobs à travers un
réseau de Workers.&lt;/p&gt;
&lt;p&gt;De plus, de par son aspect modulaire, Evy permet à tout développeur
d'ajouter facilement de nouveaux modules qui réaliseront diverses
taches.&lt;/p&gt;
&lt;p&gt;Le projet est en cours de développement.&lt;/p&gt;
</summary></entry><entry><title>Gestion des data centers et clusters à Facebook</title><link href="https://pyvideo.org/pycon-fr-2013/gestion-des-data-centers-et-clusters-a-facebook.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Stephan Gorget</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/gestion-des-data-centers-et-clusters-a-facebook.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Facebook est une entreprise où l'infrastructure grandit plus vite que le
nombre de personnes qui composent les équipes d'administration système.
Facebook a donc décidé d'automatiser les processus liés à
l'infrastructure. Cette présentation portera sur l'outil qui permet à
Facebook d'automatiser la mise en place de nouveaux datacenters et
clusters ainsi que leurs cycles de vie.&lt;/p&gt;
&lt;p&gt;Afin de gérer un nombre croissant d'utilisateurs et une activité qui
s'intensifie, Facebook a besoin de faire évoluer rapidement son
infrastructure. C'est pour cela que nous ajoutons, sortons, remettons en
production des data centers et des clusters de façon quasi quotidienne.
L'infrastructure de Facebook se développant très vite, il devient de
plus en plus complexe de gérer tous ces éléments individuellement.
Facebook a résolu le problème en écrivant un logiciel qui automatise
toutes les étapes qui composent le cycle de vie d'un cluster. Cette
conférence portera sur la façon dont Facebook a mis en place ce
processus d'automatisation et comment Python a permis de créer un
logiciel flexible qui fait interagir tous les éléments d'infrastructure.&lt;/p&gt;
</summary></entry><entry><title>How to manage over 1000contributors in a Python open source project</title><link href="https://pyvideo.org/pycon-fr-2013/how-to-manage-over-1000contributors-in-a-python-o.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Joe Hakim Rahme</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/how-to-manage-over-1000contributors-in-a-python-o.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Very large development: How to manage over 1000 contributors in a Python
open source project&lt;/p&gt;
&lt;p&gt;In this talk I want to present how the OpenStack project (one of the
largest Open Source projects in Python) deals with QA, Peer Review and
general quality control of the patch submissions. I will cover the
tools, guidelines and best practice put in place to manage the
complexity.&lt;/p&gt;
&lt;p&gt;OpenStack is a very large project with over 1.6 million lines of code,
over 1000 active contributors and approximately 4000 commits per month.
At least according to the latest stats from Ohloh.net. And this project
is written (almost) completely in Python. This makes OpenStack one of
the largest active open source projects written in this language.&lt;/p&gt;
&lt;p&gt;In this presentation I will to talk about the challenges of large scale
collaboration in Python projects and the solutions set up by the
OpenStack community to address them. By studying the typical life cycle
of a patch, I will present the tools involved in testing, peer review,
continuous integration, as well as the tools enforcing community
policies like style checking or maintaining compatibility across
different Python versions.&lt;/p&gt;
</summary></entry><entry><title>Hy, a Lisp on Python</title><link href="https://pyvideo.org/pycon-fr-2013/hy-a-lisp-on-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Julien Danjou</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/hy-a-lisp-on-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hy (&lt;a class="reference external" href="https://github.com/hylang/hy"&gt;https://github.com/hylang/hy&lt;/a&gt;) is an implementation of a Lisp
language on top of Python. It The project has been started this year,
and is making good progress, since a lot of code can already be
executed. Compatibility with Python is one of its core attribute, and in
this regard it follows the path that Clojure took with Java.&lt;/p&gt;
&lt;p&gt;This talk will present you what Hy is, how it works internally
(briefly), what you can accomplish with it, how to contribute, and
obviously how to write code with it!&lt;/p&gt;
</summary></entry><entry><title>Interfaces tactiles et mobiles avec Kivy</title><link href="https://pyvideo.org/pycon-fr-2013/interfaces-tactiles-et-mobiles-avec-kivy.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Gabriel Pettier</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/interfaces-tactiles-et-mobiles-avec-kivy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Kivy est un framework multitouch fonctionnant sur la plupart des
plateformes desktop et mobiles. Entièrement écrit en python, et basé sur
opengl ES, il est facilement extensible et offre de très bonnes
performances, et permet donc de développer rapidement des applications
mobiles (android et iOS).&lt;/p&gt;
&lt;p&gt;Cette présentation de kivy pour le développement mobile présentera:&lt;/p&gt;
&lt;p&gt;Le framework lui même, et son api, via des exemples simples. - le modele
d'évenements et de property - les principeaux widgets - le language KV&lt;/p&gt;
&lt;p&gt;Les outils d'interfaces avec les plateformes mobiles - Pyjnius - Pyobjus&lt;/p&gt;
&lt;p&gt;Les outils de packaging - déploiement sur android/ios -
Python-for-android - Kivy-ios - Buildozer/cloud builder&lt;/p&gt;
</summary><category term="kivy"></category></entry><entry><title>Introduction à Rust</title><link href="https://pyvideo.org/pycon-fr-2013/introduction-a-rust.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Simon Sapin</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/introduction-a-rust.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Rust est un langage de programmation « systèmes » qui se veux sûr,
concurrent, et pragmatique. Un de ses objectifs est de remplacer C/C++
dans les domaines où un langage plus « haut niveau » tel que Python
n'est pas adapté : noyau de système d'exploitation, système temps-réel,
moteur de navigateur web, etc.&lt;/p&gt;
&lt;p&gt;Servo, un projet de Mozilla Research, est un moteur de rendu pour le web
(tout comme Gecko est le moteur de Firefox) écrit en Rust et conçu pour
tirer parti autant que possible du matériel moderne (multi-cœur) grâce
aux fonctionnalités concurrentes de Rust.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Présentation du langage: typage statique, sûreté et justesse vérifiés
par le compilateur, pointeurs uniques, pointeurs empruntés, tranches
de vecteurs, etc.&lt;/li&gt;
&lt;li&gt;État du projet (pré-1.0)&lt;/li&gt;
&lt;li&gt;Comment Servo gère les changements dans le langage et la bibliothèque
standard.&lt;/li&gt;
&lt;li&gt;Mon ressenti après avoir travaillé sur Servo et WeasyPrint (Python),
deux implémentations des même spécifications CSS.&lt;/li&gt;
&lt;li&gt;Une suite de tests basées sur des données, et partagée entre
plusieurs implémentations.&lt;/li&gt;
&lt;li&gt;Comment utiliser Rust et Python dans le même programme, avec CFFI&lt;/li&gt;
&lt;li&gt;Courte introduction à la théorie des types, et aux types algébriques
de données.&lt;/li&gt;
&lt;li&gt;Les types « sommes » sont des « unions taggées » en C, et des enum en
Rust. (Plus général que Enum dans la PEP 435.) Pourrait-on avoir
quelque chose de similaire en Python ?&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>La domotique en Python et HTML5</title><link href="https://pyvideo.org/pycon-fr-2013/la-domotique-en-python-et-html5.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Jonathan Schemoul</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/la-domotique-en-python-et-html5.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;On verra comment architecturer une solution domotique simple en python
en utilisant des périphériques électroniques sur une carte avec linux
embarquée comme un Raspberry Pi ou une Beagle Bone Black.&lt;/p&gt;
&lt;p&gt;On verra également comment mettre en place un système d'évènements et un
moteur de règles en python pour la gestion domotique.&lt;/p&gt;
</summary></entry><entry><title>Le packaging : où est est-on ?</title><link href="https://pyvideo.org/pycon-fr-2013/le-packaging-ou-est-est-on.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Christophe de Vienne</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/le-packaging-ou-est-est-on.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Wheel, pypi, setuptools... l'actualité du packaging a été riche en 2013.
Petit état des lieux.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pourquoi utiliser le nouveau format wheel ?&lt;/li&gt;
&lt;li&gt;Que s'est-il passé cette année pour que l'installation de package
python soit plus simple, fiable et rapide ?&lt;/li&gt;
&lt;li&gt;Distribute ou setuptools ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le packaging s'est peut-être enfin simplifié cette année, nous verrons
pourquoi et comment en profiter.&lt;/p&gt;
</summary></entry><entry><title>Les effets de bord du Global Interpreter Lock</title><link href="https://pyvideo.org/pycon-fr-2013/les-effets-de-bord-du-global-interpreter-lock.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Adrien Guillo</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/les-effets-de-bord-du-global-interpreter-lock.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&amp;quot;C'est seulement dans le cas de programmes multi-threadés qui passent
beaucoup de temps au sein du GIL à interpréter du bytecode CPython que
le GIL devient un goulot d'étranglement&amp;quot;&lt;/p&gt;
&lt;p&gt;C'est ainsi que le GIL est présenté sur wiki.python.org jusqu'en 2009.
Suite aux travaux de David Beazley (&lt;a class="reference external" href="http://www.dabeaz.com"&gt;http://www.dabeaz.com&lt;/a&gt;) en 2009 et
2010, la communauté Python découvre que les effets du GIL vont au delà.&lt;/p&gt;
&lt;p&gt;En effet, l'implémentation du GIL met en oeuvre une mécanique complexe
qui ajoute un overhead important d'appels systèmes, particulièrement sur
les processeurs multi-coeurs. De plus, le GIL pertube la livraison des
signaux. Enfin, le GIL peut provoquer le scheduling de threads CPU bound
avant celui de threads I/O bound, provoquant une dégradation des
performances.&lt;/p&gt;
&lt;p&gt;Ce talk s'appuyant sur les travaux de David Beazley (avec son aimable
autorisation) tentera de donner une explication claire et détaillée aux
effets de bord du GIL mentionnés ci-dessus.&lt;/p&gt;
</summary></entry><entry><title>Les merveilles internes des objets du CPython</title><link href="https://pyvideo.org/pycon-fr-2013/les-merveilles-internes-des-objets-du-cpython.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Laurent Luce</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/les-merveilles-internes-des-objets-du-cpython.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;En connaître plus sur l'implémentation d'un langage aide à être plus
efficace quand on code. CPython est l'implémentation la plus utilisée et
ses objets contiennent plein de merveilles. On découvrira quelques
merveilles trouvées dans l'implémentation de la liste, du dictionnaire,
de la chaîne de caractères et de l'entier.&lt;/p&gt;
&lt;p&gt;On se posera les questions suivantes:&lt;/p&gt;
&lt;p&gt;Qu'est-ce qui rend rapide la méthode &amp;quot;append&amp;quot; de la liste ? Qu'est-ce
qui est fait en interne pour accélérer la recherche d'une clé dans un
dictionnaire ? Qu'est-ce qui permet d'optimiser la mémoire utilisée par
les entiers ? On répondra à ces questions et on découvrira d'autres
petites merveilles internes. Beaucoup de diagrammes seront utilisés pour
être le plus clair possible. On montrera les différences entre Python
2.x et Python 3.x.&lt;/p&gt;
&lt;p&gt;Sommaire:&lt;/p&gt;
&lt;p&gt;Quelques merveilles internes de la liste:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Le grand O de la méthode &amp;quot;append&amp;quot;.&lt;/li&gt;
&lt;li&gt;L'algorithme de tri &amp;quot;timsort&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quelques merveilles internes du dictionnaire:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Redimensionnement du dictionnaire.&lt;/li&gt;
&lt;li&gt;Résolution des collisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quelques merveilles internes de la chaîne de caractères:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Partage des petites chaînes.&lt;/li&gt;
&lt;li&gt;L'algorithme de la méthode &amp;quot;find&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quelques merveilles internes de l'entier:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Partage des petits entiers.&lt;/li&gt;
&lt;li&gt;Groupes d'entiers.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycon-fr-2013/lightning-talks-16.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/lightning-talks-16.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Mercurial, avec des vrais morceaux de python</title><link href="https://pyvideo.org/pycon-fr-2013/mercurial-avec-des-vrais-morceaux-de-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Alexis Métaireau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/mercurial-avec-des-vrais-morceaux-de-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mercurial, avec des vrais morceaux de python dedans&lt;/p&gt;
&lt;p&gt;En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de
version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python
? Voyons ensemble ce que python apporte aux developeurs mais aussi, à
travers son système d'extensions, aux utilisateurs.&lt;/p&gt;
&lt;p&gt;En 2005 Matt Mackall choisissait Python pour écrire un gestionnaire de
version. 8 ans plus tard Mercurial est un projet reussi. Grâce à Python
? Dans cette présentation, nous aborderons d'abord les atouts de Python
pour les developpeurs de Mercurial.&lt;/p&gt;
&lt;p&gt;Nous prendrons ensuite le point de vue de l'utilisateur en montrant
comment le systéme d'extensions tire parti du language. Certaines
limitations de l'interpréteur python posent parfois problème. Nous
presenterons comment celles-cis peuvent être contournées grace à des
extension écrites en C ou des algorithmes adaptés.&lt;/p&gt;
&lt;p&gt;Pour finir nous detaillerons des cas d'utilisation avancés que seul
python à rendu possible.&lt;/p&gt;
</summary></entry><entry><title>Numeter open source graphs system</title><link href="https://pyvideo.org/pycon-fr-2013/numeter-open-source-graphs-system.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Gaël Lambert</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/numeter-open-source-graphs-system.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Numeter est un projet open source visant à collecter et grapher des
données (cpu, ram, ...). Entièrement en python, pensé en brique de façon
à laisser le choix d'utiliser l'une ou l'ensemble. Le but est de
proposer une solution de graph avec une autre vision : celle d'un
hébergeur et acteur du cloud.&lt;/p&gt;
&lt;p&gt;Numeter est un projet open source visant à collecter et grapher des
données (cpu, ram, ...). Entièrement en python, pensé en brique de façon
à laisser le choix d'utiliser l'une ou l'ensemble. Le but est de
proposer une solution de graph avec une autre vision : celle d'un
hébergeur et acteur du cloud.&lt;/p&gt;
&lt;p&gt;En tant qu'hébergeur, nous faisons face à un grand nombre de machines à
grapher avec des données métier spécifiques à nos clients. Notre besoin
est de pouvoir deployer de façon rapide et automatique les graphs sur
des machines.&lt;/p&gt;
&lt;p&gt;La philosophie Numeter est de créer un système qui va permettre d'être
compatible avec l'existant pour profiter du meilleur de chaque solution.&lt;/p&gt;
&lt;p&gt;Numeter est une solution scalable, dynamique, solide et ouverte avec
pour objectifs :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Résister aux coupures réseau et aux crashs de services (Graph at
anytime).&lt;/li&gt;
&lt;li&gt;Etre entièrement scalable (Cloud compliant).&lt;/li&gt;
&lt;li&gt;Ouvert et standard (Graph everythings)&lt;/li&gt;
&lt;li&gt;Etre entiérement automatisé (No human actions)&lt;/li&gt;
&lt;li&gt;Gérer le multi utilisateurs (Access and control)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cette présentation vous permettra de comprendre l'architecture de
Numeter, les librairies Python utilisées pour l'implémenter et vous
expliquera comment y contribuer.&lt;/p&gt;
</summary></entry><entry><title>Porter le modèle de concurrence de GO en Python</title><link href="https://pyvideo.org/pycon-fr-2013/porter-le-modele-de-concurrence-de-go-en-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Benoit Chesneau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/porter-le-modele-de-concurrence-de-go-en-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Beaucoup de gens tentent de porter le modèle d'acteur en Python, mais ce
modèle n'est pas vraiment adapté à un tel langage. Au contraire le
modèle de concurrence de Go a quelques points attractifs qui permettent
de le porter facilement sous Python.&lt;/p&gt;
&lt;p&gt;Offset est une librairie compatible Python 2.7, 3.x et pypy. Cette
présentation présentera de façon détaillée la librairie Offset et
comment le modèle de concurrence de Go y est implementée. Je
présenterais aussi comment utiliser Offset pour créer des programmes
concurrents exploitant tous les CPUs de votre système.&lt;/p&gt;
</summary></entry><entry><title>PyPy : une implémentation rapide de Python</title><link href="https://pyvideo.org/pycon-fr-2013/pypy-une-implementation-rapide-de-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Romain Guillebert</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/pypy-une-implementation-rapide-de-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy est l'implémentation la plus rapide de Python, cette présentation
répondra à deux questions &amp;quot;Comment fonctionne PyPy ?&amp;quot; et &amp;quot;Qu'est-ce que
PyPy peut m'apporter ?&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;L'histoire de PyPy (un projet vieux de 10 ans)&lt;/li&gt;
&lt;li&gt;Comment fonctionne PyPy ?&lt;/li&gt;
&lt;li&gt;Qu'est-ce que PyPy peut m'apporter ?&lt;/li&gt;
&lt;li&gt;Le futur de PyPy&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Rendez votre code Python plus beau !</title><link href="https://pyvideo.org/pycon-fr-2013/rendez-votre-code-python-plus-beau.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Ronan Amicel</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/rendez-votre-code-python-plus-beau.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Apprenez à mieux utiliser les possibilités de Python pour rendre votre
code plus élégant, plus lisible, plus performant. Avec de nombreux
exemples que vous pourrez appliquer dès demain sur votre propre code.&lt;/p&gt;
</summary></entry><entry><title>Retour sur Daybed (Form validation as a service)</title><link href="https://pyvideo.org/pycon-fr-2013/retour-sur-daybed-form-validation-as-a-service.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Alexis Métaireau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/retour-sur-daybed-form-validation-as-a-service.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;L'an dernier, à PyconFR, nous avions présenté rapidement une preuve de
concept de Daybed, un système de validation de formulaires proposé &amp;quot;as a
service&amp;quot;.&lt;/p&gt;
&lt;p&gt;J'aurais aimé proposer un retour sur le produit, sur comment l'utiliser
mais aussi sur comment on l'à implémenté.&lt;/p&gt;
&lt;p&gt;Daybed est construit par dessus pyramid, qui nous à permis de faire des
choses vraiment interessantes de manière efficace.&lt;/p&gt;
&lt;p&gt;J'aimerais présenter certains aspects interessants, par exemple comment
nous avons impléménté les ACLs grace au système proposé par pyramid, ou
comment daybed réutilise Colander pour la validation de données.&lt;/p&gt;
&lt;p&gt;Cette présentation montrera aussi comment daybed peut vous aider à créér
des applications &amp;quot;full javascript&amp;quot; de manière rapide et efficace.&lt;/p&gt;
&lt;p&gt;Le projet est disponible à l'adresse
&lt;a class="reference external" href="https://github.com/spiral-project/daybed"&gt;https://github.com/spiral-project/daybed&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Retour sur les djangocongs 2013</title><link href="https://pyvideo.org/pycon-fr-2013/retour-sur-les-djangocongs-2013.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Jean-Michel Armand</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/retour-sur-les-djangocongs-2013.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Un retour sur les Djangocongs Belfort.&lt;/p&gt;
&lt;p&gt;Comment c'était, qu'est ce qu'on y a fait ? De quoi on a parlé ? Est ce
qu'il faisait beau, Qu'est ce qu'on y a mangé ? A quoi on a joué et est
ce qu'on a plongé dans l'étang ? Qu'est ce qu'on y a codé et qu'est ce
qu'on y a imaginé ?&lt;/p&gt;
&lt;p&gt;Si vous les avez raté, vous saurez tout sur les Djangocongs 2013&lt;/p&gt;
</summary></entry><entry><title>SaltStack, outil simple et efficace de gestion de configuration</title><link href="https://pyvideo.org/pycon-fr-2013/saltstack-outil-simple-et-efficace-de-gestion-de.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Sebastien Douche</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/saltstack-outil-simple-et-efficace-de-gestion-de.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SaltStack est à l'instar de Puppet, un outil de gestion de
configuration. Il permet de grandement simplifier le travail quotidien
des admistrateurs système, libérant du temps pour des tâches bien plus
intéressantes.&lt;/p&gt;
&lt;p&gt;Voulant utiliser un outil de gestion de configuration, je me suis
naturellement tourné vers Puppet, CFEngine et Chef. Mais aprés quelques
tests, j'ai trouvé ces outils trop compliqués. J'ai donc testé
SaltStack, fut tout de suite convaincu. Simple d'usage, puissant et
rapide, j'ai rapidement automatisé la configuration de mon
infratructure. Cette session couvre les les fonctionnalités majeures de
Salt en laissant une bonne partie à des démonstrations live.&lt;/p&gt;
</summary></entry><entry><title>Shit happens...</title><link href="https://pyvideo.org/pycon-fr-2013/shit-happens.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Olivier Hervieu</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/shit-happens.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Les erreurs sont le cauchemar des développeurs. En parler déclenche des
discussion passionnées (et avouons-le, souvent des trolls) et même si
les premiers langages de programmation ont désormais plus de 60 ans,
personne ne peut dire qu'elle est la meilleure manière de gérer ces
&amp;amp;#&amp;#64;!&amp;amp; d'erreurs. Codes de retour, exceptions, monads, ..., je donnerai
un aperçu des différents outils qu'ont des langages comme
C/Python/Ruby/Haskell/Go pour gérer les erreurs. La plupart des concepts
démontrés seront applicables à d'autres langages que Python (même si les
exemples de code seront majoritairement écrits en python).&lt;/p&gt;
&lt;p&gt;Ne rêvez pas, je n'aurai pas corrigé vos erreurs à l'issue de cette
présentation, mais vous aurez une meilleure idée de comment les dresser.&lt;/p&gt;
</summary></entry><entry><title>Traquer les fuites mémoire en Python</title><link href="https://pyvideo.org/pycon-fr-2013/traquer-les-fuites-memoire-en-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/traquer-les-fuites-memoire-en-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Les fuites mémoire en Python ne peuvent pas être analysées avec les
outils traditionnels car Python repose sur les compteurs de référence.
Je vais présenter des outils spécifiques à Python pour vous aider à
localiser vos fuites mémoires.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Consommation globale du processus (mémoire RSS)&lt;/li&gt;
&lt;li&gt;Comprendre les cycles de référence&lt;/li&gt;
&lt;li&gt;Générer une image représentant les liens entre les objets&lt;/li&gt;
&lt;li&gt;Utilisation de gc.get_objects() et calcul manuel de la taille des
objets&lt;/li&gt;
&lt;li&gt;Tracer les allocations mémoires à leur création&lt;/li&gt;
&lt;li&gt;PEP 445: Add new APIs to customize Python memory allocators
implementée dans Python 3.4&lt;/li&gt;
&lt;li&gt;Projet pytracemalloc&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Tu peux webtest</title><link href="https://pyvideo.org/pycon-fr-2013/tu-peux-webtest.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Gael Pasgrimaud</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/tu-peux-webtest.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;WebTest est une librairie framework agnostique permettant de tester
n'importe quelle application WSGI et plus encore.&lt;/p&gt;
&lt;p&gt;Après un bref rappel de ce qu'est la norme WSGI, cette présentation vous
permettra d'apprécier l'étendue des possibilités de la librairie.&lt;/p&gt;
</summary></entry><entry><title>Vagrant, packer et ruby pour automatiser des builds complexes</title><link href="https://pyvideo.org/pycon-fr-2013/vagrant-packer-et-ruby-pour-automatiser-des-buil.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>David Cournapeau</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/vagrant-packer-et-ruby-pour-automatiser-des-buil.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Vagrant, packer et un peu de ruby pour automatiser des builds complexes.&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Tout le monde n'a pas la chance de ne dépendre que de paquets 100 %
python. Python est devenu un outil de choix pour le calcul numérique,
mais des paquets tels que numpy, scipy ou scikit-learn dépendent de
librairies C, C++ et même Fortran qui dépendent fortement des
plateformes.&lt;/p&gt;
&lt;p&gt;J'aimerais présenter les outils packer et vagrant comme une solution
pour produire des builds 100 % reproductibles. S'appuyant sur la
virtualisation, ils permettent d'appliquer les principes de reproduction
non seulement pour unix, mais aussi os x et même windows.&lt;/p&gt;
&lt;p&gt;Le concept de provisionnement, et son application au problème de
&amp;quot;packaging&amp;quot;&lt;/p&gt;
&lt;p&gt;Cette section présentera tout d'abord la nécessité de reproduction pour
la compilation, et justifiera pourquoi les VM sont les outils les plus
adéquats aujourd'hui si l'on veut supporter toutes les plateformes
usuelles, en particulier windows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architectures &amp;quot;3-tier&amp;quot; pour le provisionnement&lt;/li&gt;
&lt;li&gt;outils disponibles pour chacune des 3 couches&lt;/li&gt;
&lt;li&gt;présentation de vagrant et packer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vagrant, un outil simple pour la réutilisation de VM&lt;/p&gt;
&lt;p&gt;Cette section commencera par illustrer les problèmes usuels du partage
des VM entre développeurs, et montrera comment vagrant peut résoudre ces
problèmes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;le provisionnement comme solution au manque de transparence usuel
avec les VMs&lt;/li&gt;
&lt;li&gt;flexibilité et traçabilité grâce à la combinaison chef/puppet/salt +
vagrant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;packer, un complément à vagrant&lt;/p&gt;
&lt;p&gt;Vagrant suppose l'existence de 'base box', qui sont des images d'OS avec
juste ce qu'il faut pour &amp;quot;bootstrapper&amp;quot; la suite du provisionnement.
Packer est un outil qui permet de créer ses propres images:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;illustration du fonctionnement de packer&lt;/li&gt;
&lt;li&gt;cibler plusieurs technologies de virtualisation à partir d' un même
template: virtualbox, vmware, mais aussi ec2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example pour la compilation de paquets 'wheel' pour numpy/scipy&lt;/p&gt;
&lt;p&gt;Cette partie sera plus didactique, et basé sur un exemple réel pour
compiler un wheel de numpy et scipy sur windows. L'exemple utilisera à
la fois vagrant, packer et chef.&lt;/p&gt;
</summary></entry><entry><title>ZeroServices</title><link href="https://pyvideo.org/pycon-fr-2013/zeroservices.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Boris Feld</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/zeroservices.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Qui n'a jamais eut besoin d'écrire des services réseau qui se découvrent
automatiquement, qui détectent la perte d'un des service, qui permet la
diffusion en unicast, en multicast ou broadcast ? ZeroServices vous
simplifie la vie. ZeroServices est construit autour de ZeroMQ et de
Tornado et vous permet d'écrire des services réseau sans efforts.&lt;/p&gt;
&lt;p&gt;Présentation de ZeroServices, une libraire python écrite grâce au couple
Tornado/ZeroMQ qui facilite l'écriture de services réseaux
décentralisés. Grâce à la découverte automatique des pairs, à l'émission
de message en unicast et/ou multicast et à la détection des services
morts, ZeroServices permet d'écrire des services réseaux facilement et
rapidement.&lt;/p&gt;
&lt;p&gt;Cette conférence présentera ZeroServices, détaillera le fonctionnement
et enfin présentera les capacités de la librairie avec une démo de
service de chat.&lt;/p&gt;
&lt;p&gt;ZeroServices est hébergé ici :
&lt;a class="reference external" href="https://github.com/Lothiraldan/ZeroServices"&gt;https://github.com/Lothiraldan/ZeroServices&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>