<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Justin Mayer</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Day 1 Lightning Talks</title><link>https://pyvideo.org/djangocon-europe-2018/day-1-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe Crew&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-23:/djangocon-europe-2018/day-1-lightning-talks.html</guid><category>DjangoCon Europe 2018</category></item><item><title>Replacing passwords with multiple factors: email, OTP, and hardware keys</title><link>https://pyvideo.org/europython-2017/replacing-passwords-with-multiple-factors-email-otp-and-hardware-keys.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Passwords have formed the cornerstone of I.T. system authentication
for decades, but recent high-profile breaches have underscored the
risks of password-based authentication systems.&lt;/p&gt;
&lt;p&gt;The good news is that we can replace passwords with other factors:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;email-based authentication&lt;/li&gt;
&lt;li&gt;one-time passwords (OTP)&lt;/li&gt;
&lt;li&gt;hardware keys (Yubikeys/U2F, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These factors can be used independently or in conjunction with one
another to provide vastly greater security than the traditional
username-plus-password combination.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will walk away with a detailed understanding of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;why the traditional username-plus-password combination is failing us&lt;/li&gt;
&lt;li&gt;why email-based authentication provides no less security&lt;/li&gt;
&lt;li&gt;overview of one-time passwords and TOTP&lt;/li&gt;
&lt;li&gt;how to store/retrieve OTP codes, including password manager support&lt;/li&gt;
&lt;li&gt;state of hardware keys in general, and FIDO U2F standard in particular&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees will learn how to implement these multi-factor
authentication methods in their own Python-based web applications,
with primary focus on methods for integrating email-based
authentication, one-time passwords, and U2F hardware keys into
Django-based projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-10:/europython-2017/replacing-passwords-with-multiple-factors-email-otp-and-hardware-keys.html</guid><category>EuroPython 2017</category></item><item><title>Zen of Python Dependency Management</title><link>https://pyvideo.org/europython-2019/zen-of-python-dependency-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring reliably repeatable dependency installation has long been an
unsolved problem for many Python projects. Pinning dependencies via
setup.py and requirements.txt has historically been met with extra work
and unexpected results, particularly when managing the dependencies of
dependencies.&lt;/p&gt;
&lt;p&gt;Thanks to PEP 518, Python projects can now more easily manage
dependencies via the new pyproject.toml file specification. In its wake,
a number of useful tools have arisen that use this file to provide
enhanced dependency resolution, including Poetry, Hatch, and Pipenv.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to replace three files (setup.py, requirements.txt, and
MANIFEST.ini) with just one: pyproject.toml&lt;/li&gt;
&lt;li&gt;why dependency resolution is hard and why it matters&lt;/li&gt;
&lt;li&gt;how Poetry, Hatch, and Pipenv differ and when to use each&lt;/li&gt;
&lt;li&gt;why one might use a less magical alternative: pip-tools&lt;/li&gt;
&lt;li&gt;how to use pipx to isolate system-wide Python tools&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/zen-of-python-dependency-management.html</guid><category>EuroPython 2019</category><category>Deployment/Continuous Integration and Delivery</category><category>Open-Source</category><category>Packaging</category><category>PyPi</category></item><item><title>Use Multi-Factor Authentica­tion Everywhere Because Passwords Are Terrible</title><link>https://pyvideo.org/pycon-cz-2018/use-multi-factor-authentication-everywhere-because-passwords-are-terrible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we deploy web applications, users entrust their data to us and expect that we will protect it. Meanwhile, recent high-profile breaches have underscored the risks of username+password authentication, which is the default in Django and other Python web frameworks. One of the best ways to mitigate this risk and protect our users’ data is to add multi-factor authentication (MFA) capability to our applications: one-time passwords (TOTP), hardware keys (Yubikeys, U2F, etc.), email-based authentication etc.&lt;/p&gt;
&lt;p&gt;You will learn how to implement U2F key and TOTP-based multi-factor authentication in your own Python-based web applications in just a few minutes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-03:/pycon-cz-2018/use-multi-factor-authentication-everywhere-because-passwords-are-terrible.html</guid><category>PyCon CZ 2018</category></item><item><title>Deploy your Python Application Without Getting Owned</title><link>https://pyvideo.org/pycon-ireland-2016/deploy-your-python-application-without-getting-owned.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With severe security vulnerabilities on the rise, it’s critical for
Python developers to understand how to protect their applications.
Unattended upgrades, automated TLS certificate provisioning, enhanced
web security, and other measures can significantly reduce the attack
surface of the systems upon which our applications run.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-05:/pycon-ireland-2016/deploy-your-python-application-without-getting-owned.html</guid><category>PyCon Ireland 2016</category></item><item><title>DevOps Security — Protect Your Application From Being Owned</title><link>https://pyvideo.org/pycon-italia-2015/devops-security-protect-your-application-from-b.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In addition to outlining strategies for proper configuration of
unattended security updates, this talk briefly covers how to maintain
the security of Docker container environments, where the above
strategies generally do not apply. In such environments, an entirely
different approach and workflow is usually required.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Heartbleed, Shellshock, POODLE, GHOST… With severe security
vulnerabilities on the rise, how can developers protect the systems used
to deploy their applications? Unattended package upgrades can help, but
only if they are properly set up and monitored. Some of the challenges
include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;many popular virtual private server (VPS) providers do not install or
enable automatic security updates in their OS images&lt;/li&gt;
&lt;li&gt;“unattended-upgrades” on Debian-based systems installs automatic
security updates but does not actually enable them, potentially
putting unsuspecting users at risk&lt;/li&gt;
&lt;li&gt;some security updates (e.g., kernel-level) require a server reboot to
take effect, and yet users often don’t realize this until the next
time they log in, resulting in a system that is vulnerable in the
interim&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-09:/pycon-italia-2015/devops-security-protect-your-application-from-b.html</guid><category>PyCon Italia 2015</category></item><item><title>Supercharge Your Shell — Command-Line Power-Ups and Dotfile Automation</title><link>https://pyvideo.org/pycon-italia-2022/supercharge-your-shell-command-line-power-ups-and-dotfile-automation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supercharge Your Shell — Command-Line Power-Ups and Dotfile Automation -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;We spend hours each day in a terminal console, so let’s make the most of
that time by enhancing our command-line productivity. We will automate
dotfile configuration, facilitate Python interpreter and virtual
environment management, and supercharge our terminals with powerful
command-line tools. We spend hours each day in a terminal console, so
let’s make the most of that time by enhancing our command-line
productivity. Together we will automate dotfile configuration,
facilitate Python interpreter and virtual environment management, and
supercharge our terminals with powerful command-line tools.&lt;/p&gt;
&lt;p&gt;Managing our shell configuration, commonly referred to collectively as
“dotfiles”, can be an onerous task. Thankfully there are tools like
Ansible and Chezmoi that we will use to more effectively automate
dotfile management in versioned repositories, which we can then easily
deploy to both personal workstations and remote servers.&lt;/p&gt;
&lt;p&gt;Given the pitfalls inherent in distro-packaged Python interpreters,
building and managing our own Python interpreters efficiently
has never been more important. Thankfully, we will use tools like ASDF
to make this incredibly easy, as well as examine its similar benefits
for Node.js/NPM and &lt;em&gt;hundreds&lt;/em&gt; of other languages and tools, all via
extensible plugins. For Fish shell users, we will see how VirtualFish
makes it easy to create, upgrade, and activate virtual environments in
ways that have never been available before.&lt;/p&gt;
&lt;p&gt;Finally, we will explore how powerful command-line tools like Zoxide,
Bat, RipGrep-All + fzf, and others can be used to dramatically increase
our terminal console productivity.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to automate dotfile configuration management and deployment&lt;/li&gt;
&lt;li&gt;how to build and manage multiple Python interpreter versions&lt;/li&gt;
&lt;li&gt;how to more efficiently manage Python virtual environments&lt;/li&gt;
&lt;li&gt;how to use powerful command-line tools to increase terminal console
productivity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: Justin Mayer&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/supercharge-your-shell-command-line-power-ups-and-dotfile-automation.html</guid><category>PyCon Italia 2022</category><category>best practice</category><category>development</category><category>open source</category></item><item><title>Protecting Privacy and Security — For Yourself and Your Community</title><link>https://pyvideo.org/pycon-sk-2018/protecting-privacy-and-security-for-yourself-and-your-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internet service providers, ad networks, governments… Many organizations
have increasing access to our personal information. Protecting privacy
in this environment is a non-trivial effort, and the threats posed by
malicious attackers further exacerbates this problem. We, as developers,
owe it to ourselves and to our communities to do the best we can to
improve our collective security and privacy.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will walk away with a thorough understanding of
the following topics and the problems they solve:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multi-factor authentication&lt;/li&gt;
&lt;li&gt;encrypted DNS&lt;/li&gt;
&lt;li&gt;SSH/VPN tunnels&lt;/li&gt;
&lt;li&gt;full disk encryption&lt;/li&gt;
&lt;li&gt;compartment isolation&lt;/li&gt;
&lt;li&gt;“onion-skin” routing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, digital interactions with other people increasingly occur
via hosted services, which while convenient can compromise the privacy,
integrity, and control of our data. With some open-source software and
inexpensive virtual servers, we can take back control and empower us all
to securely share our lives with one another.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-09:/pycon-sk-2018/protecting-privacy-and-security-for-yourself-and-your-community.html</guid><category>PyCon SK 2018</category><category>Privacy</category><category>PyCon SK</category><category>Python</category><category>Security</category></item></channel></rss>