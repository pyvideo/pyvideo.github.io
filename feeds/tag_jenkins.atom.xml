<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_jenkins.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-20T00:00:00+00:00</updated><entry><title>Python Packaging on the Enterprise</title><link href="https://pyvideo.org/europython-2013/python-packaging-on-the-enterprise.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Edward Easton</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/python-packaging-on-the-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to discuss problems and solutions when implementing an
end-to- end Python environment for a big company.&lt;/p&gt;
&lt;p&gt;The term ‘Enterprise’ often has negative connotations in much of the
open- source world, usually along the lines of ‘expensive and bloated’.
In this case I’d like to use it for describing a systems environment
where the freedoms of a developer working at home with her laptop are
not always available or practical. For example, coding on the holodeck
of the Starship Enterprise.&lt;/p&gt;
&lt;p&gt;Big teams and codebases need tools that make it very easy for new
developers to get up and running writing code with the minimum of fuss.
Large software platforms needs tools to manage complex package
dependency graphs and release workflows. Also, production environments
don’t always have compilers or direct internet access so many of
Python’s standard packaging tools make it a bit tricky to get things
going in these regards.&lt;/p&gt;
&lt;p&gt;I’d like to present how we managed to solve a number of these problems
for a recent client, a task which happily culminated in much of the
software being open-sourced at &lt;a class="reference external" href="https://github.com/eeaston/pkglib"&gt;https://github.com/eeaston/pkglib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Edit: The software also has numerous testing tools included which I’ll
demonstrate, including py.test fixtures for mongo, redis, pyramid and
generic servers, selenium webdriver and C/C++ code coverage and
profiling.&lt;/p&gt;
</summary><category term="packaging"></category><category term="jenkins"></category><category term="continuous-integration"></category><category term="systems-programming"></category><category term="sysadmin"></category></entry><entry><title>DevOps di applicazioni Python (e non solo) su OpenShift</title><link href="https://pyvideo.org/pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Francesco Fiore</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenShift Origin è la Platform-as-a-Service opensource di riferimento.
Basata su Kubernetes e Docker, contiene features aggiuntive e
integrazioni con altri componenti che semplificano le pratiche di
DevOps.&lt;/p&gt;
&lt;p&gt;Dopo una breve introduzione ad Openshift ed alla sua architettura,
vedremo come:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fare il setup di infrastrutture applicative microservice-based (es.
microservizi Python Flask/Django, single page application Angular,
ecc…)&lt;/li&gt;
&lt;li&gt;creare una piattaforma di Continuous Integration e Continuous
Delivery&lt;/li&gt;
&lt;li&gt;implementare e gestire la CI/CD di microservice-based application
sfruttando l’integrazione con Git e Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architettura di base di OpenShift&lt;/li&gt;
&lt;li&gt;come costruire un &lt;em&gt;project&lt;/em&gt; OpenShift: &lt;em&gt;builds&lt;/em&gt; e &lt;em&gt;deployments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;automatizzare il setup mediante &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;utilizzare Git, Jenkins e Openshift per creare una semplice pipeline
di CI/CD&lt;/li&gt;
&lt;li&gt;strategie di deployment avanzate: &lt;em&gt;blue-green deployment&lt;/em&gt; , &lt;em&gt;A/B
deployment&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisiti"&gt;
&lt;h4&gt;Prerequisiti&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Git e Jenkins&lt;/li&gt;
&lt;li&gt;conoscenza base dei concetti CI/CD e DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="microservices"></category><category term="continuous-integration"></category><category term="git"></category><category term="continuous-delivery"></category><category term="kubernetes"></category><category term="devops"></category><category term="jenkins"></category><category term="docker"></category><category term="OpenShift"></category></entry><entry><title>Testing: The Developer Strikes Back</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing: The Developer Strikes Back&lt;/p&gt;
&lt;p&gt;Sandy Strong&lt;/p&gt;
&lt;p&gt;“Code not tested is broken by design” - Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Every programming project has unique testing needs. It’s not always easy
to understand what those needs are, or how to write tests that satisfy
them. One of our goals as developers is to write tests that minimize
failures in production that can cost our companies time, money,
resources, and in many cases, hours of sleep!&lt;/p&gt;
</summary><category term="coverage.py"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="jenkins"></category><category term="testing"></category><category term="web"></category></entry></feed>