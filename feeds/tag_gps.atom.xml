<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_gps.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-12T00:00:00+00:00</updated><entry><title>GPS Tracking with Python</title><link href="https://pyvideo.org/pycon-au-2016/gps-tracking-with-python.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Caleb Hattingh</name></author><id>tag:pyvideo.org,2016-08-12:pycon-au-2016/gps-tracking-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is very well-suited to implement GPS tracking services. Devices need to report position data to servers, and Python handles this role well, especially with the new support for asynchronous event loops in Python 3 which can handle tens of thousands of simultaneous connections. In addition, the struct module in the Python standard library makes short work of processing binary data supplied by devices. In addition to basic interaction with tracking devices, this talk will also present methods of integration (server) testing using py.test, as well as considerations regarding support for both UDP and TCP protocols in the same stack, since different GPS tracking devices may prefer one or the other.&lt;/p&gt;
</summary><category term="Internet-of-Things"></category><category term="GPS"></category></entry><entry><title>A Simulation Framework for Studying the Code Acquisition and Tracking Functions of a Global Positioning System (GPS) Receiver</title><link href="https://pyvideo.org/scipy-2016/a-simulation-framework-for-studying-the-code-acquisition-and-tracking-functions-of-a-global-position.html" rel="alternate"></link><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><author><name>Mark Wickert</name></author><id>tag:pyvideo.org,2016-07-14:scipy-2016/a-simulation-framework-for-studying-the-code-acquisition-and-tracking-functions-of-a-global-position.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk a Python-based simulation framework is described that implements the waveform level signal processing needed to acquire and track the ranging signal of a global positioning system (GPS) satellite. This framework was developed Fall 2015 as an end-of-semester project for a digital signal processing course taken by electrical engineers. By design, GPS signals lie on top of one another, but are separable by virtue of a unique code and nearly orthogonal code assigned to each satellite. The key to position determination is the time difference of arrival (TDOA) of each of the satellite signals at the user receiver. A high precision clock maintains timing accuracy among the satellites. One of the most important tasks of the user receiver is to acquire and track the ranging code of three or more satellites in view at a given time. The framework allows the user to first explore a receiver for a single satellite signal. Object oriented Python then makes it easy to extend the receiver to processing multiple satellite signals in parallel. The source of signals used in the framework is either simulation or a low-cost (~$20) software defined radio dongle known as the RTL-SDR. With the RTL-SDR signals are captured from a GPS patch antenna, fed to the RTL-SDR, and then via USB captured into Python as a complex ndarray. The computer simulation project that utilizes the framework has the students performing a variety of simulation tasks, start from a single channel receiver building up to a four channel receiver with signal impairments present. As developed Fall 2015 the project utilizing this framework is entirely computer simulation based, but the ability to use real signals captured from the RTL-SDR, opens additional capability options. Making use of these signals is non-trival, as additional signal processing is needed to estimate the Doppler frequency error and if the data bits are to be recovered, the L1 signal carrier phase needs to be tracked. These aspects of the framework as currently under development (mid Spring 2016) for a communications theory course.&lt;/p&gt;
</summary><category term="gps"></category><category term="signal processing"></category></entry></feed>