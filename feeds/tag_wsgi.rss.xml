<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 12 May 2018 00:00:00 +0000</lastBuildDate><item><title>Web Applications on Python3 and Python2 with TurboGears - Part 1</title><link>https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</guid><category>web</category><category>WSGI</category><category>sqlalchemy</category><category>HTTP</category><category>turbogears</category><category>mongodb</category><category>html</category><category>python3</category></item><item><title>Web Applications on Python3 and Python2 with TurboGears - Part 2</title><link>https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</guid><category>web</category><category>WSGI</category><category>sqlalchemy</category><category>HTTP</category><category>turbogears</category><category>mongodb</category><category>html</category><category>python3</category></item><item><title>Marconi: Queuing and Notification service for OpenStack</title><link>https://pyvideo.org/europython-2013/marconi-queuing-and-notification-service-for-openstack.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Flavio Percoco</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/marconi-queuing-and-notification-service-for-openstack.html</guid><category>MessageQueues</category><category>WSGI</category><category>mongodb</category><category>REST</category><category>tdd</category><category>application-design</category><category>architecture</category><category>cloud</category></item><item><title>Secrets of a WSGI master.</title><link>https://pyvideo.org/pycon-us-2018/secrets-of-a-wsgi-master.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is over 10 years old.&lt;/p&gt;
&lt;p&gt;WSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.&lt;/p&gt;
&lt;p&gt;The real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.&lt;/p&gt;
&lt;p&gt;As one of the oldest WSGI server implementations, Apache and mod_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.&lt;/p&gt;
&lt;p&gt;In this talk you will learn about many features of mod_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.&lt;/p&gt;
&lt;p&gt;Topics which will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easy deployment of Python web applications using mod_wsgi-express.&lt;/li&gt;
&lt;li&gt;Integration of mod_wsgi-express with a Django web application.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express in a development environment.&lt;/li&gt;
&lt;li&gt;How to make use of mod_wsgi-express in a production environment.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express in a containerised runtime environment.&lt;/li&gt;
&lt;li&gt;Ensuring consistency between development and production environments using warpdrive.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications.&lt;/li&gt;
&lt;li&gt;Why you should be using daemon mode of mod_wsgi and not embedded mode.&lt;/li&gt;
&lt;li&gt;How to properly associate mod_wsgi with a Python virtual environment.&lt;/li&gt;
&lt;li&gt;Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading.&lt;/li&gt;
&lt;li&gt;Using hooks provided by mod_wsgi to monitor the performance of your Python web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a beginner, come learn why mod_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/secrets-of-a-wsgi-master.html</guid><category>wsgi</category></item><item><title>PyOhio 2011: HTSQL is a WSGI reporting toolkit for Relational Databases</title><link>https://pyvideo.org/pyohio-2011/pyohio-2011--htsql-is-a-wsgi-reporting-toolkit-fo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTSQL is a WSGI reporting toolkit for Relational Databases&lt;/p&gt;
&lt;p&gt;Presented by Clark C. Evans&lt;/p&gt;
&lt;p&gt;HTSQL is a URI-based high-level query language for relational databases;
it is written in the Python language. HTSQL is a wonderful complement
existing WSGI- based applications, making it trivial to create
interactive dashboards, complex reports. We use HTSQL as a REST query
interface for data integration and ad-hoc reporting by technical users
or &lt;tt class="docutils literal"&gt;accidental programmers&lt;/tt&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Clark C. Evans</dc:creator><pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--htsql-is-a-wsgi-reporting-toolkit-fo.html</guid><category>htsql</category><category>pyohio</category><category>pyohio2011</category><category>wsgi</category></item><item><title>GNU MediaGoblin for a federated media future</title><link>https://pyvideo.org/chipy/gnu-mediagoblin-for-a-federated-media-future.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Christopher Allan Webber talks about GNU MediaGoblin, a federated
(decentralized) media publishing system (images, and later other media
like video) written in python and under the AGPL. Infrastructure
discussion describes what it means that GNU MediaGoblin uses an
unframework / is &amp;quot;wsgi minimalist&amp;quot;, about the choice of MongoDB and
MongoKit, and how to impress an audience with ascii art mockups.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Allan Webber</dc:creator><pubDate>Thu, 09 Jun 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-06-09:chipy/gnu-mediagoblin-for-a-federated-media-future.html</guid><category>chipy</category><category>foss</category><category>gnu</category><category>media</category><category>mediagoblin</category><category>mongodb</category><category>mongokit</category><category>wsgi</category></item><item><title>Python/Django deployment</title><link>https://pyvideo.org/chipy/python-django-deployment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'll introduce the WSGI ecosystem. We'll then setup a Django app and
deploy it to a VM. I'll cover server setup/config and best practices and
cover software used like Fabric, nginx etc. Sample nginx, WSGI and
Apache configs will be provided. People can follow along and I'll
provide download links after so they can try it at home. This will be
the best meeting ever.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rohit Sankaran</dc:creator><pubDate>Thu, 10 Feb 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-02-10:chipy/python-django-deployment.html</guid><category>apache</category><category>chipy</category><category>fabric</category><category>nginx</category><category>wsgi</category></item><item><title>Web Apps with Jython</title><link>https://pyvideo.org/chipy/web-apps-with-jython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building apps with Jython&lt;/p&gt;
&lt;p&gt;Presented on May 15th, 2009 at ChiPy&lt;/p&gt;
&lt;p&gt;Talks about go_pylons and snakefight and other things that allow you to
build and run Python applications with Jython. WSGI to servlet adapter
in Jython 2.5.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 15 May 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-05-15:chipy/web-apps-with-jython.html</guid><category>chipy</category><category>go_pylons</category><category>jython</category><category>snakefight</category><category>wsgi</category></item><item><title>Web API Mashups in a Python Application</title><link>https://pyvideo.org/europython-2011/web-api-mashups-in-a-python-application.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Johan Euphrosine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover: - How to use OAuth into your webapp so users can
give permission to access their data stored in third party web
application. - How your webapp can interact with their Web API using
RESTful JSON protocols.&lt;/p&gt;
&lt;p&gt;This talk is suitable for beginners already familiar with any WSGI web
framework.&lt;/p&gt;
&lt;p&gt;This talk will be illustrated with code samples using Google App Engine
and Google APIs client library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johan Euphrosine</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/web-api-mashups-in-a-python-application.html</guid><category>api</category><category>google</category><category>json</category><category>oauth</category><category>web</category><category>wsgi</category></item><item><title>Lightning talks</title><link>https://pyvideo.org/kiwi-pycon-2009/lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Morris Jones (Simple robot using python on a wifi router)&lt;/li&gt;
&lt;li&gt;John Graves (Voice interaction)&lt;/li&gt;
&lt;li&gt;Charles Manning (A noob does ctypes)&lt;/li&gt;
&lt;li&gt;Raazesh Sainudiin (Computational Statistical Laboratories with SAGE
Notebook Server)&lt;/li&gt;
&lt;li&gt;Juergen Brendel (WSGI is easy)&lt;/li&gt;
&lt;li&gt;Michael Hoppe (Basic data acquisition and analysis)&lt;/li&gt;
&lt;li&gt;Carl Cerecke (A faster, cleaner goto statement)&lt;/li&gt;
&lt;li&gt;Douglas Bagnall (Booki, Objavi, Espri: the FLOSS Manuals publishing
suite)&lt;/li&gt;
&lt;li&gt;Peter Harrison (Introduction to Autonomous Systems)&lt;/li&gt;
&lt;li&gt;Jim Tittsler (Educational Content Packaging)&lt;/li&gt;
&lt;li&gt;David Hood (Little lies to tell when teaching Python Programming)&lt;/li&gt;
&lt;li&gt;Dylan Jay (How to host Python app for $20 in 20mins -
collective.hostout)&lt;/li&gt;
&lt;li&gt;Greg Hewgill (PSIL - Python S-expression Intermediate Language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morris Jones</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/lightning-talks.html</guid><category>lightning talks</category><category>ctypes</category><category>flossmanuals</category><category>goto</category><category>kiwipycon</category><category>kiwipycon2009</category><category>packaging</category><category>psil</category><category>robot</category><category>wsgi</category></item><item><title>PyConAU 2010: Getting started with Apache/mod_wsgi</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--getting-started-with-apache-mod-wsg.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting started with Apache/mod_wsgi&lt;/p&gt;
&lt;p&gt;Presented by Graham Dumpleton&lt;/p&gt;
&lt;p&gt;An introduction to using Apache/mod_wsgi to host Python web
applications supporting the Python Web Server Gateway Interface (WSGI).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--getting-started-with-apache-mod-wsg.html</guid><category>mod_wsgi</category><category>pyconau</category><category>pyconau2010</category><category>virtualenv</category><category>wsgi</category></item><item><title>PyConAU 2010: whoops I deployed again - new ways to get your app in the cloud</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;whoops I deployed again - new ways to get your app in the cloud&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;A overview of new tools for deploying python based applications to
servers including cloud inferstructure such as Amazon Ec2.&lt;/p&gt;
&lt;p&gt;The talk will cover Ian Bicking's Silver Lining, zc.buildout, Fabric and
hostout. This talk will focus on how to get your first web app hosted
easily.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</guid><category>deployment</category><category>hostout</category><category>pyconau</category><category>pyconau2010</category><category>silverlining</category><category>web</category><category>wsgi</category><category>zc.buildout</category></item><item><title>PyCon 2009: Introduction to TurboGears2 and WSGI (Part 2 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--introduction-to-turbogears2-and-wsgi-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: annoying noise starting at 1:17 (2nd half)] Are you
interested in building web applications with modern libraries and tools?
Do you want to build on top of the work that many others have done? Have
you done some basic web development, but want to be more productive. If
so this is the class for you. TurboGears 2 provides a well defined set
of the best libraries for web development python has to offer. But more
importantly it brings them together in a clean, well documented way that
allows for developing reusable TurboGears 2 components. The result is a
powerful, flexible, set of tools that helps make it easy to build
dynamic web applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--introduction-to-turbogears2-and-wsgi-.html</guid><category>pycon</category><category>pycon2009</category><category>turbogears</category><category>tutorial</category><category>wsgi</category></item><item><title>PyCon 2009: Introduction to TurboGears2 and WSGI (Part 1 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--introduction-to-turbogears2-and-wsgi0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: annoying noise starting at 1:17 (2nd half)] Are you
interested in building web applications with modern libraries and tools?
Do you want to build on top of the work that many others have done? Have
you done some basic web development, but want to be more productive. If
so this is the class for you. TurboGears 2 provides a well defined set
of the best libraries for web development python has to offer. But more
importantly it brings them together in a clean, well documented way that
allows for developing reusable TurboGears 2 components. The result is a
powerful, flexible, set of tools that helps make it easy to build
dynamic web applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--introduction-to-turbogears2-and-wsgi0.html</guid><category>pycon</category><category>pycon2009</category><category>turbogears</category><category>tutorial</category><category>wsgi</category></item><item><title>Actors: What, Why, and How (#161)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Actors: What, Why and How&lt;/p&gt;
&lt;p&gt;Presented by Donovan Preston&lt;/p&gt;
&lt;p&gt;Since the dawn of concurrency research, there have been two camps:
shared everything, and shared nothing. Most modern applications use
threads for concurrency, a shared everything architecture.&lt;/p&gt;
&lt;p&gt;Actors, however, use a shared nothing architecture where lightweight
processes communicate with each other using message passing. Actors can
change their state, create a new Actor, send a message to any Actor it
has the Address of, and wait for a specific kind of message to arrive in
it's mailbox.&lt;/p&gt;
&lt;p&gt;We will discuss the benefits of using the Actor architecture and
strategies for implementing an Actor system in Python.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bitbucket.org/fzzzy/python-%20actors/"&gt;http://bitbucket.org/fzzzy/python-actors/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</guid><category>concurrency</category><category>eventlet</category><category>infrastructure</category><category>pycon</category><category>pycon2010</category><category>rest</category><category>scaling</category><category>wsgi</category></item><item><title>Designing to Scale: The Story of ShootQ (#5)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing to Scale: The story of ShootQ&lt;/p&gt;
&lt;p&gt;Jonathan LaCour (ShootQ)&lt;/p&gt;
&lt;p&gt;ShootQ is a web-based studio management solution for professional
photography studios, designed to automate and simplify the task of
running a small business. In this talk, Jonathan LaCour, the CTO of
ShootQ, hopes to share his experience designing a web application that
can scale up to meet the demands of a rapidly growing customer base. The
talk will cover a variety of topics including TurboGears 2.0, WSGI,
horizontal and vertical scaling, database replication, load balancing,
deployment, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</guid><category>deployment</category><category>loadbalancing</category><category>pycon</category><category>pycon2010</category><category>replication</category><category>scaling</category><category>turbogears</category><category>wsgi</category></item><item><title>Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy (#174)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--pay-only-for-what-you-eat--a-tour-of-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pay only for what you eat: A tour of the Repoze.BFG repository and
philosophy&lt;/p&gt;
&lt;p&gt;Presented by Carlos de la Guardia&lt;/p&gt;
&lt;p&gt;BFG is a Python web application framework based on WSGI. It is a &amp;quot;pay
only for what you eat&amp;quot; framework. Meaning that you can get started
easily and learn new concepts as you go, and only if you need them. It's
simple, well tested, well documented, and fast. It also tries to make
development fun.&lt;/p&gt;
&lt;p&gt;This talk will introduce the framework and its philosophy, including
similarities and differences with other frameworks. I will then show
some of the software available in its repository and discuss the
inclusive, loose connection approach that the BFG community prefers for
creating a flexible web development platform.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos de la Guardia</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--pay-only-for-what-you-eat--a-tour-of-.html</guid><category>pycon</category><category>pycon2010</category><category>repoze.bfg</category><category>wsgi</category></item><item><title>Simple WSGI composition: story of one refactoring (#51)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simple WSGI composition: story of one refactoring&lt;/p&gt;
&lt;p&gt;Presented by Max Ischenko&lt;/p&gt;
&lt;p&gt;Story of a refactoring I did to split one big, monolithic Pylons app
into a bunch of smaller ones, using power of WSGI and nginx. The devil
is in the details: how to handle common auth, site-wide look and feel,
common utilities, database management. Pros and cons of the approach,
possible alternatives.&lt;/p&gt;
&lt;p&gt;The talk assumes listeners know what WSGI is and preferably have used
some WSGI-centered framework like Pylons, Werkzeug, Paste or other.&lt;/p&gt;
&lt;p&gt;The application this talk describes powers developers.org.ua.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Ischenko</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</guid><category>nginx</category><category>pycon</category><category>pycon2010</category><category>pylons</category><category>wsgi</category></item><item><title>Using Coroutines to Create Efficient, High-Concurrency Web Applications</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Coroutines to Create Efficient, High-Concurrency Web Applications&lt;/p&gt;
&lt;p&gt;Presented by Matt Spitz&lt;/p&gt;
&lt;p&gt;Creating high-concurrency python web applications is inherently
difficult for a variety of reasons. In this talk, I'll discuss the
various iterations of application server paradigms we've used at meebo,
the advantages/disadvantages of each approach, and why we've settled on
a coroutine-based WSGI setup to handle our high-concurrency web
applications going forward.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a number of ways in which to create a web application in
python. Some examples include a straight-up CGI scripts that run anew
with each request, preforked Apache workers that each handle multiple
requests, and using an asynchronous web framework like Twisted.&lt;/p&gt;
&lt;p&gt;At meebo, we've settled on using gunicorn, a lightweight WSGI server,
which supports gevent, a coroutine-based network library for python.
Gevent monkeypatches python's system modules to make network requests
asynchronous using an event loop based on libevent. This trick allows
the developer to use a simple blocking CGI as a non-blocking web
application that can handle many concurrent requests.&lt;/p&gt;
&lt;p&gt;I'll discuss our iteration process through these approaches to building
web applications, why we ended up choosing gunicorn+gevent, the
challenges this new framework presents, and how we've dealt with them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Spitz</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html</guid><category>coroutines</category><category>gevent</category><category>gunicorn</category><category>highconcurrency</category><category>libevent</category><category>pycon</category><category>pycon2011</category><category>wsgi</category></item></channel></rss>