<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_noam-elfanbaum.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-25T00:00:00+00:00</updated><entry><title>Let’s Build a Python Profiler in 25 LOC</title><link href="https://pyvideo.org/europython-2018/lets-build-a-python-profiler-in-25-loc.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Noam Elfanbaum</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/lets-build-a-python-profiler-in-25-loc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A profile is a set of statistics that describes how often and for how
long various parts of the program executed. Most profilers run inside
your Python process. If you’re inside a Python program you generally
have pretty easy access to its stack, hence we can gather information
about time spent in each level.&lt;/p&gt;
&lt;p&gt;In this talk we’ll build a Python profiler from scratch and so learn
about the dynamic nature of Python and how do well-known profilers such
as cProfile.&lt;/p&gt;
&lt;p&gt;We’ll also learn the difference between a tracing and a sampling
profiler and which one to use in what circumstance.&lt;/p&gt;
</summary></entry><entry><title>Let's build a Python profiler from scratch</title><link href="https://pyvideo.org/pycon-israel-2018/lets-build-a-python-profiler-from-scratch.html" rel="alternate"></link><published>2018-06-05T00:00:00+00:00</published><updated>2018-06-05T00:00:00+00:00</updated><author><name>Noam Elfanbaum</name></author><id>tag:pyvideo.org,2018-06-05:pycon-israel-2018/lets-build-a-python-profiler-from-scratch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll build a Python profiler from scratch and so learn about the dynamic nature of Python and how do well know profilers such as cProfile work. Also, we'll learn the difference between a tracing and a sampling profiler and which one to use in what circumstance.&lt;/p&gt;
</summary><category term="profiler"></category></entry><entry><title>Designing Pythonic APIs</title><link href="https://pyvideo.org/pycon-israel-2017/designing-pythonic-apis.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Noam Elfanbaum</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/designing-pythonic-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing a package (library) or even a simple module, providing it with a good API, is almost as important as its functionality itself (well, at least if you want some adoption), but what makes a good API? In this talk, I’ll provide some insights on that question by surveying the APIs that helped make projects such as Requests, Flask and Celery popular, while also reviewing technical implementations.&lt;/p&gt;
</summary></entry></feed>