<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_patricia-hanus.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Lights Camera Action! Scrape, Explore, and Model to Predict Oscar Winners</title><link href="https://pyvideo.org/scipy-2019/lights-camera-action-scrape-explore-and-model-to-predict-oscar-winners.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Deborah Hanus</name></author><id>tag:pyvideo.org,2019-07-11:scipy-2019/lights-camera-action-scrape-explore-and-model-to-predict-oscar-winners.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Jupyter notebooks, HTTP requests, BeautifulSoup, NumPy, Pandas,
scikit learn, and matplotlib, you’ll predict whether a movie is likely
to &lt;a class="reference external" href="http://oscarpredictor.github.io/"&gt;win an Oscar&lt;/a&gt; or be a box office hit. We’ll step through the
creation of an effective dataset: asking a question your data can
answer, writing a web scraper, and answering those questions using
nothing but Python libraries and data from the Internet.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>To Comment or Not to Comment? A Data Driven Look at Conflicting Attitudes Towards Commenting</title><link href="https://pyvideo.org/scipy-2019/to-comment-or-not-to-comment-a-data-driven-look-at-conflicting-attitudes-towards-commenting.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Patricia Hanus</name></author><id>tag:pyvideo.org,2019-07-11:scipy-2019/to-comment-or-not-to-comment-a-data-driven-look-at-conflicting-attitudes-towards-commenting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While many agree commenting is essential for maintainable code, it’s difficult for someone who hasn’t yet worked in a community-reviewed codebase to implement best practice. Commenting questions often bring conflicting answers: Code should be DRY, but well-placed comments save future devs. How can someone find the commenting style that is best for them as they learn, grow, &amp;amp; contribute? My survey of 130 developers, CS majors, bootcamp grads, &amp;amp; hobbyists confirms some expectations and brings others into question. Join me for a data-based chat about the experiences of growing developers and the steps we can take to encourage a growth mindset in developers at all levels.&lt;/p&gt;
</summary></entry><entry><title>Lights Camera Action! Scrape, explore, and model to predict Oscar winners &amp; box office hits</title><link href="https://pyvideo.org/pycon-us-2018/lights-camera-action-scrape-explore-and-model-to-predict-oscar-winners-box-office-hits.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Deborah Hanus</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/lights-camera-action-scrape-explore-and-model-to-predict-oscar-winners-box-office-hits.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Jupyter notebooks, HTTP requests, BeautifulSoup, NumPy, Pandas,
scikit learn, and matplotlib, you’ll predict whether a movie is likely
to &lt;a class="reference external" href="http://oscarpredictor.github.io/"&gt;win an Oscar&lt;/a&gt; or be a box office hit. We’ll step through the
creation of an effective dataset: asking a question your data can
answer, writing a web scraper, and answering those questions using
nothing but Python libraries and data from the Internet.&lt;/p&gt;
</summary></entry></feed>