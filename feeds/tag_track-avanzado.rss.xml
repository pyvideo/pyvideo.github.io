<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate><item><title>Amqp from Python, advanced design patterns</title><link>https://pyvideo.org/pycon-es-2015/amqp-from-python-advanced-design-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AMQP as standard application layer protocol is widely used to design backends where business logic is spread around different processes using a broker to link them, usually RabbitMQ. AMQP allows us to use different design patterns than the traditional monolithic backends, where part of your business logic is designed as entities of the AMQP topology. In this talk we will talk about the Python drivers such as Celery, Pika and others, and how they can be used to get the full power of the AMQP.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pau Freixes</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/amqp-from-python-advanced-design-patterns.html</guid><category>Track Avanzado</category></item><item><title>asyncIO: póngase a la cola por favor</title><link>https://pyvideo.org/pycon-es-2015/asyncio-pongase-a-la-cola-por-favor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla veremos como usar python3 con asyncio, websockets y redis para construir un servicio distribuido de colas virtuales con los que controlar de forma ordenada el acceso a un servicio con elevada carga pico.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Araujo</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/asyncio-pongase-a-la-cola-por-favor.html</guid><category>Track Avanzado</category></item><item><title>Comparing Python ORM</title><link>https://pyvideo.org/pycon-es-2015/comparing-python-orm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de la charla es mostrar algunos de los sistemas ORM que podemos encontrar dentro del ecosistema de Python como Sqlalchemy, Storm, Sqlobject, Django ORM,realizando una comparativa entre ellos,mostrando ventajas y desventajas de cada uno.
Algunas de las características a comparar son performance, eficiencia, tratamiento de caché, consultas.
Por ultimo, se comentarán las ventajas que aportan estos sistemas para la seguridad de la aplicaciones web con Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">José Manuel Ortega</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/comparing-python-orm.html</guid><category>Track Avanzado</category></item><item><title>Django request-response: Un viaje de ida y vuelta</title><link>https://pyvideo.org/pycon-es-2015/django-request-response-un-viaje-de-ida-y-vuelta.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Todos sabemos que cuando tenemos una aplicación hecha en Django ejecutándose en un servidor, y le llega una petición, tarde o temprano nuestro código se ejecutará y le devolveremos una respuesta al usuario, pero... ¿Qué ocurre antes y después de la ejecución de nuestro código?, ¿qué tareas hace Django por nosotros sin ni siquiera ser conscientes de ello?, ¿es posible modificar este comportamiento?, y lo más importante: ¿cómo?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Imanol Cea</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/django-request-response-un-viaje-de-ida-y-vuelta.html</guid><category>Track Avanzado</category></item><item><title>DSLs: Can't parse that!♫</title><link>https://pyvideo.org/pycon-es-2015/dsls-cant-parse-that.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se introducirá brevemente qué es un DSL, tipos y cuándo resultan interesantes, mostrando algunos ejemplos. Para pasar a describir un caso práctico, creando un DSL real desde cero para procesamiento de textos, viendo como parsearlo, interpretarlo y resolver un problema de una forma distinta a la que estamos acostumbrados, dándole una nueva perspectiva.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Araujo</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/dsls-cant-parse-that.html</guid><category>Track Avanzado</category></item><item><title>El módulo "tracemalloc"</title><link>https://pyvideo.org/pycon-es-2015/el-modulo-tracemalloc.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El módulo &amp;quot;tracemalloc&amp;quot;, añadido a la librería estándar en Python 3.4, permite monitorizar el uso de memoria y nos ayuda a diagnosticar y solucionar &amp;quot;Memory Leaks&amp;quot;. Su utilidad es indudable, pero su uso está poco difundido.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Cea</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/el-modulo-tracemalloc.html</guid><category>Track Avanzado</category></item><item><title>"Embedding" de Python en otras aplicaciones</title><link>https://pyvideo.org/pycon-es-2015/embedding-de-python-en-otras-aplicaciones.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Es común ampliar las funcionalidades de Python mediante extensiones y módulos externos. Tecnologías como Cython y todo el entorno numpy son posibles mediante la integración de código C compilado en un programa Python en ejecución. Pero es muy interesante, también, el poder incluir un intérprete Python en un programa independiente para poder ampliar sus funcionalidades escribiendo código Python en vez programando en C.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Cea</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/embedding-de-python-en-otras-aplicaciones.html</guid><category>Track Avanzado</category></item><item><title>Escalando una web con python</title><link>https://pyvideo.org/pycon-es-2015/escalando-una-web-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Construir una web y soportar su crecimiento en tráfico tiene su intríngulis. Una arquitectura sencilla se irá complicando poco a poco a medida que crece en funcionalidad y en número de usuarios. Veremos un proyecto simplón, como podría empezar cualquier web que hiciésemos nosotros mismos y la iremos evolucionando y ampliando, descubriendo y solucionando los problemas típicos que surgen a la hora de hacer escalar una web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Ignacio Galarza</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/escalando-una-web-con-python.html</guid><category>Track Avanzado</category></item><item><title>Hacking the Taiga</title><link>https://pyvideo.org/pycon-es-2015/hacking-the-taiga.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taiga es una herramienta de gestión ágil de proyectos donde prima ante todo la experiencia de usuario.
En esta charla trataré de mostrar cómo puedes desarrollar nuevas funcionalidades para ti, tu organización o comunidad, sin necesidad de modificar el core de Taiga.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Barragán Merino</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/hacking-the-taiga.html</guid><category>Track Avanzado</category><category>taiga</category></item><item><title>Integrando Apache Storm como servidor de aplicaciones Python</title><link>https://pyvideo.org/pycon-es-2015/integrando-apache-storm-como-servidor-de-aplicaciones-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apache Storm es un sistema de procesamiento en tiempo real diseñado para escalar horizontalmente de forma simple y rápida con garantía de procesamiento. Está basado en Java, no obstante, permite utilizar multiples lenguajes de programación, incluido Python, de forma que no necesites usar Java para nada. En esta charla explicaré el caso de uso de Server Density para el procesamiento de &amp;quot;payloads&amp;quot; para la monitorización de servidores.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos Perelló Marín</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/integrando-apache-storm-como-servidor-de-aplicaciones-python.html</guid><category>Track Avanzado</category></item><item><title>Learning by Trolling</title><link>https://pyvideo.org/pycon-es-2015/learning-by-trolling.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Explicación de diferentes conceptos y características de python a través de formas de trollear a compañeros. (monkeypatching, cache de enteros, excepciones...)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Espino</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/learning-by-trolling.html</guid><category>Track Avanzado</category></item><item><title>Metaprogramación en Python</title><link>https://pyvideo.org/pycon-es-2015/pycon-es-2015-metaprogramacion-en-python-raul-cumplido-track-avanzado.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Según wikipedia: “La metaprogramación consiste en escribir programas que escriben o manipulan otros programas (o a sí mismos) como datos, o que hacen en tiempo de compilación parte del trabajo que, de otra forma, se haría en tiempo de ejecución. Esto permite al programador ahorrar tiempo en la producción de código.”&lt;/p&gt;
&lt;p&gt;En esta charla veremos diferentes mecanismos que Python proporciona como:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decoradores.&lt;/li&gt;
&lt;li&gt;Metaclasses.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raúl Cumplido</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/pycon-es-2015-metaprogramacion-en-python-raul-cumplido-track-avanzado.html</guid><category>Track Avanzado</category><category>metaprograming</category><category>metaclass</category><category>decorator</category></item><item><title>Python tips, tricks and dark magic</title><link>https://pyvideo.org/pycon-es-2015/python-tips-tricks-and-dark-magic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python tiene una gran cantidad de funcionalidades ocultas, pero a la vez a la vista de todos. Esta charla descubrir algunas de ellas explicando como funcionan, cuando tiene sentido usarlas y dando casos prácticos de como usarlas con ejemplos de código que las usan.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordi Soucheiron Estruch</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/python-tips-tricks-and-dark-magic.html</guid><category>Track Avanzado</category></item><item><title>Sirviendo 1M de tickets en 50 idiomas y 35 divisas</title><link>https://pyvideo.org/pycon-es-2015/sirviendo-1m-de-tickets-en-50-idiomas-y-35-divisas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El crecimiento exponencial de Ticketbis nos exige una arquitectura que pueda escalar horizontalmente. Teniendo en cuenta que servimos casi 1M de tickets en 50 idiomas y 35 divisas diferentes, la desnormalización de los datos y su correspondiente cacheo eran necesarios. ¿Queréis saber cómo lo hacemos sin un solo hit a la base de datos? Os doy una pista: demonios pythónicos + Redis + Elasticsearch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Gargallo</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/sirviendo-1m-de-tickets-en-50-idiomas-y-35-divisas.html</guid><category>Track Avanzado</category></item><item><title>SQJobs: Sencillo sistema de tareas en segundo plano</title><link>https://pyvideo.org/pycon-es-2015/sqjobs-sencillo-sistema-de-tareas-en-segundo-plano.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Muchos son los sistemas de tareas en segundo plano en Python, como por ejemplo Celery.
Sí, en Ticketea hemos creado uno más, pero intentando hacerlo diferente.
Simple Queue Jobs intenta ser una cola de tareas sencilla y fiable que simplemente funcione y cuyo código no intimide a aquellos que busquen familiarizarse con él.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Mon</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/sqjobs-sencillo-sistema-de-tareas-en-segundo-plano.html</guid><category>Track Avanzado</category></item><item><title>Syntactic Macros in Python</title><link>https://pyvideo.org/pycon-es-2015/syntactic-macros-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Syntactic Macros enable the programmer to manipulate the shape of the program before executing it allowing to extend the features of the language. Inspired by macropy, in this talk I explain how to get syntactic macros working with Python 3 at import time giving a couple of interesting examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Salvador de la Puente González</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/syntactic-macros-in-python.html</guid><category>Track Avanzado</category></item><item><title>Un python nuevo para ti: decorators</title><link>https://pyvideo.org/pycon-es-2015/un-python-nuevo-para-ti-decorators.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python es un lenguaje de programación con muchas  funcionalidades interesantes. Sin embargo, existen ciertas features habituales en otros lenguajes de programación que no tienen cabida en este: sobrecarga de métodos, un operador para la composición de funciones, comprobación de tipos...&lt;/p&gt;
&lt;p&gt;En esta charla veremos cómo podemos conseguir estas funcionalidades utilizando decorators e inspeccionando los objetos que representan a las funciones.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Braulio Valdivielso</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/un-python-nuevo-para-ti-decorators.html</guid><category>Track Avanzado</category></item></channel></rss>