<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_todd-leonhardt.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-27T14:00:00+00:00</updated><entry><title>A Hands-On Guide to Building Interactive Command-Line Apps with cmd2</title><link href="https://pyvideo.org/pyohio-2019/a-hands-on-guide-to-building-interactive-command-line-apps-with-cmd2.html" rel="alternate"></link><published>2019-07-27T14:00:00+00:00</published><updated>2019-07-27T14:00:00+00:00</updated><author><name>Todd Leonhardt</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/a-hands-on-guide-to-building-interactive-command-line-apps-with-cmd2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line (CLI) applications are extremely popular in the
DevOps and Security communities as well as for internal tooling and
automation. Have you ever wanted to build an awesome CLI application
using Python but don't know where to get started? This talk will show
you how to use the cmd2 package to quickly and easily build feature-rich
and user-friendly CLI apps in Python.&lt;/p&gt;
&lt;p&gt;Interactive command-line applications (CLIs) are used extensively in
many real-world scenarios, particularly in the DevOps and Security
communities as well as for internal developer tooling and automation.
I'm sure many of you have used the wonderful
&lt;a class="reference external" href="https://ipython.org"&gt;ipython&lt;/a&gt; interactive Python shell which is a
good example of a CLI. Python has the built-in
&lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; library for
creating CLIs, but it is extremely bare-bones. The
&lt;a class="reference external" href="https://github.com/python-%20cmd2/cmd2"&gt;cmd2&lt;/a&gt; package is a
batteries-included extension of &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt; which makes it much quicker and
easier to create feature-rich and user-friendly CLIs.&lt;/p&gt;
&lt;p&gt;The presentation will first explain how to install &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;. The talk
will next show how to create a basic &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt; application. Then the talk
will progressively add features to this application while demonstrating
the capabilities built into &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;. In the end, the presentation will
show how to build a basic but feature-rich and user-friendly CLI
application from scratch. This application will include many features
which make it easy to use for customers, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Built-in help&lt;/li&gt;
&lt;li&gt;Top-notch tab-completion&lt;/li&gt;
&lt;li&gt;Shell-like functionality including ability to run shell commands,
pipe to shell commands, and redirect output to files&lt;/li&gt;
&lt;li&gt;Built-in application scripting&lt;/li&gt;
&lt;li&gt;Built-in Python scripting&lt;/li&gt;
&lt;li&gt;Built-in history&lt;/li&gt;
&lt;li&gt;Command aliases and macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately, people who attend this talk will learn how to use the Python
programming language with the &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt; package to quickly and
efficiently build their own interactive command-line applications.&lt;/p&gt;
</summary></entry><entry><title>How to Quickly Build Feature-Rich Interactive Command-Line Applications with cmd2</title><link href="https://pyvideo.org/florida-pycon-2017/how-to-quickly-build-feature-rich-interactive-command-line-applications-with-cmd2.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Todd Leonhardt</name></author><id>tag:pyvideo.org,2017-10-07:florida-pycon-2017/how-to-quickly-build-feature-rich-interactive-command-line-applications-with-cmd2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/python-cmd2/cmd2"&gt;cmd2&lt;/a&gt; is a tool for building
interactive command line applications in Python. Its goal is to make it
quick and easy for developers to build feature-rich and user-friendly
interactive command line applications. It provides a simple API which is
an extension of Python’s built-in
&lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; module. cmd2
provides a wealth of features on top of cmd to make your life easier and
eliminates much of the boilerplate code which would be necessary when
using cmd.&lt;/p&gt;
&lt;p&gt;Main Features&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Searchable command history (&lt;tt class="docutils literal"&gt;history&lt;/tt&gt; command and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;Ctrl&amp;gt;+r&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Text file scripting of your application with &lt;tt class="docutils literal"&gt;load&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt;) and
&lt;tt class="docutils literal"&gt;_relative_load&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;&amp;#64;&amp;#64;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Python scripting of your application with &lt;tt class="docutils literal"&gt;pyscript&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Run shell commands with &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Pipe command output to shell commands with &lt;tt class="docutils literal"&gt;|&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Redirect command output to file with &lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&lt;/tt&gt;; input from file
with &lt;tt class="docutils literal"&gt;&amp;lt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Bare &lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&amp;gt;&amp;gt;&lt;/tt&gt; with no filename send output to paste buffer
(clipboard)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;py&lt;/tt&gt; enters interactive Python console (opt-in &lt;tt class="docutils literal"&gt;ipy&lt;/tt&gt; for IPython
console)&lt;/li&gt;
&lt;li&gt;Multi-line, case-insensitive, and abbreviated commands&lt;/li&gt;
&lt;li&gt;Special-character command shortcuts (beyond cmd’s &lt;tt class="docutils literal"&gt;&amp;#64;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Settable environment parameters&lt;/li&gt;
&lt;li&gt;Parsing commands with flags&lt;/li&gt;
&lt;li&gt;Unicode character support ( &lt;em&gt;Python 3 only&lt;/em&gt; )&lt;/li&gt;
&lt;li&gt;Good tab-completion of commands, file system paths, and shell
commands&lt;/li&gt;
&lt;li&gt;Python 2.7 and 3.3+ support&lt;/li&gt;
&lt;li&gt;Linux, macOS and Windows support&lt;/li&gt;
&lt;li&gt;Trivial to provide built-in help for all commands&lt;/li&gt;
&lt;li&gt;Built-in regression testing framework for your applications
(transcript-based testing)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>