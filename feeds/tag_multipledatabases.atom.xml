<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_multipledatabases.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-09-09T00:00:00+00:00</updated><entry><title>Multi-database patterns</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--multi-database-patterns.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--multi-database-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A tour through four common &amp;quot;multiple database&amp;quot; usage patterns and how
they can be implemented and utilised with Django. We'll talk about the
strengths and weaknesses of each pattern and why you might not need any
of them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a few good reasons a system might want to interact regularly
with multiple databases. “Because it’s what cool people do” is not one
of those reasons. Most multi-database usages fall into one of four main
classes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Separation by function. All data of one type in one database, all
data of another type in some other database.&lt;/li&gt;
&lt;li&gt;Separation by sharding. Data of a particular type (e.g. user records)
is split across multiple databases, each database holding a shard of
the whole data.&lt;/li&gt;
&lt;li&gt;Data replication (separation by access). Some pieces of data are
synchronized to multiple machines. Writes might go into one or more
masters and reads normally come from the slaves.&lt;/li&gt;
&lt;li&gt;Data augmentation/shadowing. Data in one database is added to or
entirely replaced by data from another database. Can happen during
development when reading from a production snapshot whilst trying out
changes to some tables or data only against a local database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, combinations of these classes are possible, such as
replicated sharded data in a huge site. There are tricks and traps to
the way a developer talks to each of these sorts of setups. I'll spend a
few minutes showing credible examples of the usage of each as well as
when you might be over- engineering by going that way. All four access
patterns are possible in Django 1.2, with varying degrees of ease of use
and I'll show the type of code required in each case.&lt;/p&gt;
</summary><category term="database"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="multipledatabases"></category></entry></feed>