<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 May 2019 00:00:00 +0000</lastBuildDate><item><title>Building a Celery alternative in Django on Kubernetes</title><link>https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I’ve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn’t about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform’s hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alec Clowes</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</guid><category>celery</category><category>reactjs</category><category>postgresql</category><category>kubernetes</category><category>django</category></item><item><title>Celery and Social Networks. 5 Things I Have Learned During Earthquake Hackathon.</title><link>https://pyvideo.org/europython-2013/celery-and-social-networks-5-things-i-have-learned-during-earthquake-hackathon.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/celery-and-social-networks-5-things-i-have-learned-during-earthquake-hackathon.html</guid><category>celery</category><category>security</category><category>open-source</category><category>case-study</category><category>social</category></item><item><title>How DISQUS does "it" when "it" isn't Django</title><link>https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</guid><category>web</category><category>realtime</category><category>mongodb</category><category>zookeeper</category><category>scalability</category><category>django</category><category>celery</category><category>optimization</category><category>gevent</category><category>concurrency</category><category>performance</category></item><item><title>Campaign Automation &amp; Abusing Celery Properly</title><link>https://pyvideo.org/pycon-sk-2018/campaign-automation-abusing-celery-properly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an asynchronous task queue allowing easy distributed job
execution in Python. This talk will, after a short introduction to
Celery, share what we learned when we used it as the backbone for the
campaign automation module of Exponea experience cloud. Serving over a
hundred millions of our client's customers across the world with
incredibly diverse use cases, we have heavily used some of Celery's most
obscure functionality in often unintended ways. Join us for a bumpy ride
towards a stability and scalability and learn many insights useful if
you ever need to run some serious asynchronous jobs yourself. Barf bags
not included.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Dolák</dc:creator><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-10:pycon-sk-2018/campaign-automation-abusing-celery-properly.html</guid><category>Celery</category><category>PyCon SK</category><category>Python</category></item><item><title>Industrial Machine Learning: Building scalable distributed machine learning pipelines with Python</title><link>https://pyvideo.org/pycon-sk-2018/industrial-machine-learning-building-scalable-distributed-machine-learning-pipelines-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk would provide useful and practical understanding on how to
build industry-ready machine learning models in python through
distributed, horizontally-scalable architectures. I will include why and
when these architectures are required, best practices, caveats,
technologies to use them, and a practical implementation using celery +
rabbitmq.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alejandro Saucedo</dc:creator><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-10:pycon-sk-2018/industrial-machine-learning-building-scalable-distributed-machine-learning-pipelines-with-python.html</guid><category>Machine Learning</category><category>PyCon SK</category><category>Python</category><category>celery</category><category>rabbitmq</category></item><item><title>Django-Celeryで非同期処理</title><link>https://pyvideo.org/pycon-japan-2012/django-celerydefei-tong-qi-chu-li.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celeryを使ったリアルタイム処理について紹介。 事例を通した具体的な話も&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">奈良 英樹</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pycon-japan-2012/django-celerydefei-tong-qi-chu-li.html</guid><category>celery</category><category>django-celery</category></item><item><title>Advanced task management with Celery 1/2</title><link>https://pyvideo.org/pycon-india-2012/advanced-task-management-with-celery-12.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is a really good framework for doing background task processing in Python (and other languages). While it is ridiculously easy to use celery, doing complex task flow has been a challenge in celery. (w.r.t task trees/graphs/dependecies etc.)
This talk introduces the audience to these challenges in celery and also explains how these can be fixed programmatically and by using latest features in Celery (3+).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahendra M</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/advanced-task-management-with-celery-12.html</guid><category>celery</category></item><item><title>Advanced task management with Celery 2/2</title><link>https://pyvideo.org/pycon-india-2012/advanced-task-management-with-celery-22.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is a really good framework for doing background task processing in Python (and other languages). While it is ridiculously easy to use celery, doing complex task flow has been a challenge in celery. (w.r.t task trees/graphs/dependecies etc.)
This talk introduces the audience to these challenges in celery and also explains how these can be fixed programmatically and by using latest features in Celery (3+).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahendra M</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/advanced-task-management-with-celery-22.html</guid><category>celery</category></item><item><title>Advanced Celery Tricks</title><link>https://pyvideo.org/pycon-israel-2018/advanced-celery-tricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced Celery Tricks - How we adapted and extended Celery to fit our data pipeline&lt;/p&gt;
&lt;p&gt;In Singular, we have a data pipeline which consists of hundreds of thousands of daily tasks, in varying length (from less than a second to hours per task), and with complex dependencies between them. In addition, we integrate with hundreds of third-party providers, which means that tasks are not necessarily reliable / predictable, so we need to be robust to failures and delays and be able to monitor them easily. We found Celery to be highly suitable to our needs as a task infrastructure, especially due to its distributed nature, its support for various workflows and its modular design. In particular, the fact that it is compatible with multiple technologies for conveying messages (&amp;quot;brokers&amp;quot;) and storing results (&amp;quot;backends&amp;quot;) greatly appealed to us.&lt;/p&gt;
&lt;p&gt;It wasn't an immediate fit however. We needed to extend Celery so it will fit our use cases: (1) We implemented a custom backend and a custom serialization method. (2) We tweaked the behavior of Celery's workflows (chains, groups and chords). (3) We needed to be able to update code easily without restarting workers. (4) and more..&lt;/p&gt;
&lt;p&gt;In this session we will discuss how we adapted Celery to our needs, as well as tools we developed for working with it better, and various advanced tips &amp;amp; tricks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Itamar Hartstein</dc:creator><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-05:pycon-israel-2018/advanced-celery-tricks.html</guid><category>celery</category></item><item><title>The Hare Wins the Race: Getting the most out of RabbitMQ in distributed applications</title><link>https://pyvideo.org/pycon-us-2018/the-hare-wins-the-race-getting-the-most-out-of-rabbitmq-in-distributed-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As web apps grow increasingly complex, distributing asynchronous work
across multiple background workers is often a basic requirement of a
performant app. While there are a variety of tools that exist to solve
this issue, one common feature among them is the need for a robust
messaging platform.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; is a stable, full-featured, and mature solution that is
usually found in the Python ecosystem backing &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; implementations.
While Celery’s utilization of RabbitMQ works just fine out of the gate,
users with complex workflows, unique constraints, or tight budgets can
take advantage of the flexibility of RabbitMQ to streamline their data
pipelines and get the most out of their infrastructure.&lt;/p&gt;
&lt;p&gt;This talk will provide an overview of RabbitMQ, review its varied
message-routing capabilities, and demonstrate some of the ways in which
these features can be utilized in Python applications to solve common
yet difficult use-cases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Sklar</dc:creator><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-13:pycon-us-2018/the-hare-wins-the-race-getting-the-most-out-of-rabbitmq-in-distributed-applications.html</guid><category>celery</category><category>rabbitmq</category></item><item><title>Two approaches to scale your processing, Task Queues and Workflows</title><link>https://pyvideo.org/pycon-ireland-2017/two-approaches-to-scale-your-processing-task-queues-and-workflows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk covers two useful libraries/approaches to scaling your processing. Task Queues will be introduced, Celery will be covered and a specific example of a refactoring of a sequential crawler to highlight the ease and utility of this library. Workflows will then be covered, Airflow will be introduced, in the context of more complex tasks with requirements plus dependencies, building on how tasks as the atomic unit can be woven together to support complex business / app requirements as Workflows. The theme linking both aspects is the need to provide a reliable async fabric (Celery + Rabbitmq) only provides part of a solution for more complex problems, hence the need to use Airflow (with Celery executors) to provide the additional smarts / logic necessary to solve them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eoin Brazil</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-21:pycon-ireland-2017/two-approaches-to-scale-your-processing-task-queues-and-workflows.html</guid><category>airflow</category><category>celery</category></item><item><title>Scale like a pro</title><link>https://pyvideo.org/python-porto/scale-like-a-pro.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Task processing with multiprocessing and Celery&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roman Imankulov</dc:creator><pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-12-14:python-porto/scale-like-a-pro.html</guid><category>celery</category><category>multiprocessing</category><category>porto</category><category>portugal</category></item><item><title>Adding Celery to the Salad Mix</title><link>https://pyvideo.org/pydx-2016/adding-celery-to-the-salad-mix.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2016 talk by Hannes Hapke&lt;/p&gt;
&lt;p&gt;You have developed your first web app and you noticed that some requests take too much time for a good user experience? Celery is an option to provide a better user experience by &amp;quot;outsourcing&amp;quot; long running tasks from the initial web request.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannes Hapke</dc:creator><pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-12-30:pydx-2016/adding-celery-to-the-salad-mix.html</guid><category>celery</category></item><item><title>Massaging the Pony: Message Queues and You</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--massaging-the-pony--message-queue.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Message queues are a potential solution for any site that needs to
facilitate robust asynchronous operations on your website including
carrying out intensive or long-running actions or synchronizing off-site
services. We will look at how PBS has used Celery and RabbitMQ to
provide more reliable service and how to set up a robust message queue
solution in a cloud hosting environment.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In maintaining several different site projects written in Django over
the past four years, the PBS Education team repeatedly found the need
for the ability to create asynchronous processes that could handle
long-running actions and mission-critical synchronization. We needed a
way to handle tasks such as generating reports on large data sets and
executing remote processes on fussy third-party services. The clear
solution to the problems we encountered was to implement a robust
message queue solution.&lt;/p&gt;
&lt;p&gt;Message queues allow sites to execute processes outside the normal HTTP
request cycle and then deliver the results of those processes in a
variety of ways. After a survey of all available message queue solutions
we settled on a combination of Celery and RabbitMQ to create a reliable,
always-available system that can handle mission-critical tasks. We can
easily develop against a message queue in our development builds, and we
have an infrastucture based in a cloud hosting service that allows us to
rely on the message queue without reservation.&lt;/p&gt;
&lt;p&gt;In this talk will will look at what a message queue does for your site,
how to implement a message queue in your Django code, and how to set up
a reliable message queue infrastructure on your servers. We will show
examples from some of our sites at PBS so it is clear how message queues
work and to present some common use cases that warrant a message queue
solution. We will also discuss some of the design patterns that made it
easy to switch to message queue based processing for discreet tasks, as
well as some of the things we learned that have made the solution even
easier to implement for new tasks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shawn Rider</dc:creator><pubDate>Thu, 09 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--massaging-the-pony--message-queue.html</guid><category>celery</category><category>djangocon</category><category>djangocon2010</category><category>messagequeues</category><category>queues</category><category>rabbitmq</category></item><item><title>Using Celery with Social Networks</title><link>https://pyvideo.org/djangocon-us-2012/using-celery-with-social-networks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Many web applications need to interface with social networks, and
celery, a Python distributed task queue library, is a great tool for the
job. However, achieving speed and stability can be difficult. This talk
will cover task organization/distribution, rate limiting, failover, and
other practices to aid in working with social networks at scale.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twitter conditionally rate limits based on IP address rather than access
token even when one is provided for some of its API calls. Facebook has
at least 10 unique error messages to indicate a bad or expired access
token (that I've found so far). LinkedIn's pagination has an occasional
off-by-one bug resulting in an endless list of 1-user pages. Let's face
it: interfacing with social networks is tricky. Celery helps, but to
provide stable, reliable, and fast social features for your website,
you'll need an arsenal of strategies and tools to get you the rest of
the way there.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll understand how to set up tasks to
quickly serve users with massive networks by employing intelligent
distribution. You'll be able to design robust processes to handle
inconsistencies or instabilities in 3rd party APIs. And you'll know how
to have confidence that the work you intend to do gets done, regardless
of external rate limits, pagination design, or API call dependency
chains.&lt;/p&gt;
&lt;p&gt;This talk is intended for people who have basic familiarity with celery
and would like to learn more about how to take advantage of it for
large, distributed task loads.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Intro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;3rd party interfaces are hard&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speed&lt;ul&gt;
&lt;li&gt;Much slower than local data&lt;/li&gt;
&lt;li&gt;Users may still expect near-immediate results&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rate limits&lt;ul&gt;
&lt;li&gt;Different rules for every service&lt;/li&gt;
&lt;li&gt;Need to handle reactive &amp;amp; proactive as some don't publish
rates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instability&lt;ul&gt;
&lt;li&gt;Outages (yes, Facebook does go down)&lt;/li&gt;
&lt;li&gt;Random failures&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Why Celery?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Asynchronous&lt;/li&gt;
&lt;li&gt;Distributed&lt;/li&gt;
&lt;li&gt;Fault tolerant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Task Organization&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Small, atomic tasks (1 API call per task) B. Minimal message state&lt;ul&gt;
&lt;li&gt;Primitive types only (no model instances!)&lt;/li&gt;
&lt;li&gt;Defer as much data access to the task itself as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create Task subclasses for common patterns D. Whenever possible,make tasks idempotent&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Task Distribution&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Managing pagination&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For a known set size&lt;ul&gt;
&lt;li&gt;Where limit/offset is supported, launch all page tasks
simlutaneously&lt;/li&gt;
&lt;li&gt;Otherwise, 1 page launches the next as soon as the next
cursor is obtained&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For an unknown set size&lt;ul&gt;
&lt;li&gt;Set max simultaneous pages&lt;/li&gt;
&lt;li&gt;Task is terminal if blank, otherwise launches page w/
offset + max pages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Setting page size is an art, not a science&lt;ul&gt;
&lt;li&gt;Minimize the number of api calls when possible&lt;/li&gt;
&lt;li&gt;Avoid long-running tasks by setting a timeout ceiling&lt;/li&gt;
&lt;li&gt;Avoid the temptation to pass API data to dependent tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Tracking task dependencies (&amp;quot;Done?&amp;quot; is difficult for distributed systems)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use an external backend to store a dependency tree&lt;/li&gt;
&lt;li&gt;Subclass ResultSet to evaluate the task state of the tree&lt;/li&gt;
&lt;li&gt;Requires ignore_result=False&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Rate Limiting&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Problems&lt;ul&gt;
&lt;li&gt;Celery's rate limiting doesn't do what you think it does&lt;/li&gt;
&lt;li&gt;3rd party rate limits depend on many factors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution&lt;ul&gt;
&lt;li&gt;For services with known rate limits:&lt;ul&gt;
&lt;li&gt;Use an external backend to store rate limit counters&lt;/li&gt;
&lt;li&gt;Increment counters based on rate limit factors per api call&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For services with unknown rate limits:&lt;ul&gt;
&lt;li&gt;Use an external backend to store rate limit backoff counters&lt;/li&gt;
&lt;li&gt;Ramp up / ratchet down call rate by power law as api callsfail/succeed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Failover&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Problems&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Celery's countdown doesn't do what you think it does&lt;/li&gt;
&lt;li&gt;3rd parties can fail in lots of &amp;quot;interesting&amp;quot; ways&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Solution&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implement native RabbitMQ alternative to countdown&lt;/li&gt;
&lt;li&gt;Create task base classes per social network to handle error
conditions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Multiple queues&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Better control over task priority management &amp;amp; resource distribution&lt;/li&gt;
&lt;li&gt;Not all social accounts are created equal (handling whales &amp;amp; spikes)&lt;/li&gt;
&lt;li&gt;When you can't stream updates, use a trickle queue&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Celerybeat considered harmful&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Periodic task persistence gets out of sync with code&lt;/li&gt;
&lt;li&gt;Just 1 more process to manage&lt;/li&gt;
&lt;li&gt;Cron: it's just. not. that. hard.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Debugging&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Don't use &amp;quot;always eager&amp;quot;&lt;/li&gt;
&lt;li&gt;Logging, logging, logging&lt;/li&gt;
&lt;li&gt;Unit tests are good, but integration tests save lives&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Gotchas&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open socket prevents Celery soft timeout&lt;/li&gt;
&lt;li&gt;Celery soft timeout doesn't retry the task&lt;/li&gt;
&lt;li&gt;If result state is not known, Celery reports &amp;quot;PENDING&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Gouldin</dc:creator><pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-05:djangocon-us-2012/using-celery-with-social-networks.html</guid><category>celery</category><category>django</category></item><item><title>Playing tasks with Django-Celery</title><link>https://pyvideo.org/europython-2011/playing-tasks-with-django-celery.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mauro Rocco - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing.&lt;/p&gt;
&lt;p&gt;I will talk about the tools that Celery offers for task distribution and
how to monitor and manage the system using a Django web interface. This
talk will also focus on how we use Celery at Jamendo and our real
solutions to some common issues you may encounter when developing a
back-office based on Celery.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief overview of Celery and the AMPQ protocol AMPQ protocol
overview, Celery introduction: Celery, RabbitMQ code examples&lt;/li&gt;
&lt;li&gt;The impact of Celery on the Jamendo work-flow; examples with real
tasks. Here I will talk about the Jamendo back-office infrastructure
and some of our common tasks. I will discuss the improvements made by
introducing a new back-office system based on Celery. I will show
some code snippets and go over some real scenarios.&lt;/li&gt;
&lt;li&gt;Overview of the Django Celery admin interface and some Jamendo
extensions. Let's talk about the Django-Celery interface that allows
one to monitor or schedule tasks directly from the Django admin. I
will explain which common additional features are necessary and how
to add them.&lt;/li&gt;
&lt;li&gt;Common &amp;quot;gotchas&amp;quot; we encountered while working with Celery and how we
solved them.&lt;/li&gt;
&lt;li&gt;Global task locks&lt;/li&gt;
&lt;li&gt;Centralized logging: be able to read all the logs of all celery
workers on different servers and filter them for real-time debugging&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mauro Rocco</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/playing-tasks-with-django-celery.html</guid><category>celery</category><category>distributed</category><category>django</category><category>infrastructure</category><category>queueing</category><category>rabbitmq</category><category>real-time</category><category>web</category></item><item><title>Advanced Aspects of the Django Ecosystem: Haystack, Celery &amp; Fabric</title><link>https://pyvideo.org/europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django benefits from a thriving third-party ecosystem. This talk will
take a deep look at three of the components I have found most useful in
my own projects: Haystack for full-text search, Celery for offline
processing and Fabric for automated eployments. I'll discuss how we use
them for Lanyrd.com, and demonstrate why they deserve a permanent place
in your toolbox.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</guid><category>celery</category><category>django</category><category>fabric</category><category>processing</category></item><item><title>Indy Liu - Building web animation application with Python-Ogre</title><link>https://pyvideo.org/kiwi-pycon-2009/indy-liu---building-web-animation-application-wit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building web animation application with Python-ogre&lt;/p&gt;
&lt;p&gt;Presented by Indy Liu&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In building our online user-customisable animation system, we needed a
3D engine that is powerful, stable and flexible. We are lucky to have
made python-ogre our choice. Combined with FFMpeg and the boto library,
we were able to build the whole solution in python with as little hassle
as possible.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open source python game engines;&lt;/li&gt;
&lt;li&gt;What we need - Not just a game engine;&lt;/li&gt;
&lt;li&gt;What you can do with python-ogre;&lt;/li&gt;
&lt;li&gt;Combining with other libraries FFMpeg, boto;&lt;/li&gt;
&lt;li&gt;Interfacing with the web - celery;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Indy Liu</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/indy-liu---building-web-animation-application-wit.html</guid><category>boto</category><category>celery</category><category>ffmpeg</category><category>kiwipycon</category><category>kiwipycon2009</category><category>ogre</category></item><item><title>Komponenten einer komplexen Web-Applikation</title><link>https://pyvideo.org/pycon-de-2013/komponenten-einer-komplexen-web-applikation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Komplexe Web-Applikationen bestehen aus mehr als einem Webserver, einer
Datenbank und etwas Code. Dieser Vortrag gibt einen Überblick über die
typischen Bausteine wie Celery als Task Queue, Haystack für
Volltextsuche, Sentry als Log-Diensten und automatischem Deployment mit
Fabric und Salt. Die vorgestellte Komponenten werden anhand einer
Django-Applikation erläutert, sind jedoch zum Großteil auch mit anderen
Frameworks nutzbar.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Hepper</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/komponenten-einer-komplexen-web-applikation.html</guid><category>celery</category><category>deployment</category><category>django</category><category>elasticsearch</category><category>fabric</category><category>haystack</category><category>salt</category><category>search</category><category>sentry</category><category>solr</category></item><item><title>Sunday Afternoon Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(02:20) Steve Holden - Lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest
stuff, mock&lt;/p&gt;
&lt;p&gt;(08:00) Harald Armin Massa - The real harm of functional programming&lt;/p&gt;
&lt;p&gt;(11:41) Karl ? - FreeBSD certiciation&lt;/p&gt;
&lt;p&gt;(13:50) Peter Fein - Please Pirate&lt;/p&gt;
&lt;p&gt;(19;15) Chris McDonough - writing books with Sphinx
(&lt;a class="reference external" href="http://bfg.repoze.org/book"&gt;repoze.bfg&lt;/a&gt;);
&lt;a class="reference external" href="https://www.createspace.com/"&gt;createspace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(22:05) Chris Petrilli - celery, distributed task queue&lt;/p&gt;
&lt;p&gt;(26:30) Godefroid Chapelle - vim and pdb&lt;/p&gt;
&lt;p&gt;(29:20) ? - fork() vs. threads&lt;/p&gt;
&lt;p&gt;(33:40) - doing pyweek game with a large number of contributors&lt;/p&gt;
&lt;p&gt;(38:05) Jason Huggins - Orbison&lt;/p&gt;
&lt;p&gt;(43:20) Noufal Brahim - State of Python community in India&lt;/p&gt;
&lt;p&gt;(47:40) Mike Müller - EuroSciPy 2010&lt;/p&gt;
&lt;p&gt;(49:50) David gives away stuff, sprint intros, ...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</guid><category>lightning talks</category><category>celery</category><category>euroscipy</category><category>euroscipy2010</category><category>fork</category><category>freebsd</category><category>functionalprogramming</category><category>india</category><category>orbison</category><category>pdb</category><category>pycon</category><category>pycon2010</category><category>pyweek</category><category>sphinx</category><category>threads</category><category>unittest</category><category>vim</category></item><item><title>Distributed Tasks with Celery</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--distributed-tasks-with-celery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distributed Tasks with Celery&lt;/p&gt;
&lt;p&gt;Presented by Ryan Petrello&lt;/p&gt;
&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing, especially using the AMQP protocol. This talk will
focus on the need for task distribution, the tools celery provides to
meet those needs, and an in-depth discussion of how we've used celery at
ShootQ to improve the efficiency and reliability of our background
processes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk (including time for questions) will last approximately 30
minutes and will focus on the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The need for distributed tasks in real world systems, especially in a
web application environment. This portion of the talk will describe
examples where the traditional request-response model of the web can
be improved with background processing.&lt;/li&gt;
&lt;li&gt;A brief overview of traditional distributed message passing models
and the AMPQ protocol.&lt;/li&gt;
&lt;li&gt;An overview of Celery and the variety of tools it provides for task
distribution, scheduling, and execution. This portion of the talk
will also review production-oriented components of Celery, such as
monitoring, error detection/reporting, and error recovery.&lt;/li&gt;
&lt;li&gt;Real world discussion of several problems we solved at ShootQ using
Celery including before-and-after looks at our implementations.&lt;/li&gt;
&lt;li&gt;Common pitfalls and gotchas we encountered while working with Celery.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Petrello</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--distributed-tasks-with-celery.html</guid><category>amqp</category><category>celery</category><category>pycon</category><category>pycon2011</category><category>queueing</category></item></channel></rss>