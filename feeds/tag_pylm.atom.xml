<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pylm.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T12:00:00+02:00</updated><entry><title>How to manage complexity in distributed applications</title><link href="https://pyvideo.org/pydata-barcelona-2017/how-to-manage-complexity-in-distributed-applications.html" rel="alternate"></link><published>2017-05-20T12:00:00+02:00</published><updated>2017-05-20T12:00:00+02:00</updated><author><name>Guillem Borrell Nogueras</name></author><id>tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/how-to-manage-complexity-in-distributed-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Complexity is tricky. Some years ago we got how to scale the performance of distributed applications, and that's why everyone is talking about Big Data. But the challenge now is scaling the complexity within a fast-changing environment without penalizing the performance. These are the conclusions after one year developing a library trying to handle this issue, and using it in production.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The development of large-scale distributed applications is an engineering challenge by itself. Development has to be orthogonal to be scalable, as you may know if you have heard about the Mythical Man-Month and the Conway's law: trying to make your application faster may slow down your development. Managing complexity is a new technology trend, and NFQ and the Carlos III University of Madrid have developed a library to make large-scale distributed applications more sensible called pylm (&lt;a class="reference external" href="https://pylm.readthedocs.io"&gt;https://pylm.readthedocs.io&lt;/a&gt;). Since this library has been already used in production, it is time to summarize what are the challenges one faces when building something more intricate than a Spark cluster.&lt;/p&gt;
&lt;p&gt;This talk is about the value of developing in-house tools and obtaining deep technological insight opposed to the successive integration of trendy technologies. The latter is suitable to implement one-shot tools for isolated projects, but when facing a multi-year complex project, the former becomes a more solid ground for long-term maintenance. Complexity piles up nonlinearly, and the most popular tools nowadays cringe when they have to be tightly integrated, since in the long term it is impossible to isolate the technical and the human aspects of development.&lt;/p&gt;
&lt;p&gt;Complexity's weight is getting heavier in this scalability-obsessed world, and it's time to talk about it.&lt;/p&gt;
&lt;p&gt;This project has been funded by the Spanish Ministry of Economy and Competitivity under the grant IDI-20150936, cofinanced with FEDER funds&lt;/p&gt;
</summary><category term="pylm"></category></entry></feed>