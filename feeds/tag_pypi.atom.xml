<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pypi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Zen of Python Dependency Management</title><link href="https://pyvideo.org/europython-2019/zen-of-python-dependency-management.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Justin Mayer</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/zen-of-python-dependency-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring reliably repeatable dependency installation has long been an
unsolved problem for many Python projects. Pinning dependencies via
setup.py and requirements.txt has historically been met with extra work
and unexpected results, particularly when managing the dependencies of
dependencies.&lt;/p&gt;
&lt;p&gt;Thanks to PEP 518, Python projects can now more easily manage
dependencies via the new pyproject.toml file specification. In its wake,
a number of useful tools have arisen that use this file to provide
enhanced dependency resolution, including Poetry, Hatch, and Pipenv.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to replace three files (setup.py, requirements.txt, and
MANIFEST.ini) with just one: pyproject.toml&lt;/li&gt;
&lt;li&gt;why dependency resolution is hard and why it matters&lt;/li&gt;
&lt;li&gt;how Poetry, Hatch, and Pipenv differ and when to use each&lt;/li&gt;
&lt;li&gt;why one might use a less magical alternative: pip-tools&lt;/li&gt;
&lt;li&gt;how to use pipx to isolate system-wide Python tools&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Deployment/Continuous Integration and Delivery"></category><category term="Open-Source"></category><category term="Packaging"></category><category term="PyPi"></category></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://pyvideo.org/pycon-ireland-2018/publish-a-perfect-python-package-on-pypi.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/publish-a-perfect-python-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to start? This talk is for you! Starting with nothing, we'll build a package and publish it on PyPI using current best practices. By the end of this talk, you'll be so comfortable packaging projects you won't avoid writing &lt;cite&gt;setup.py&lt;/cite&gt; files any more! Maybe you'll even start writing new code just so you can publish it on PyPI!&lt;/p&gt;
</summary><category term="PyPi"></category></entry><entry><title>Python Tricks You Can't Live Without</title><link href="https://pyvideo.org/pycon-philippines-2012/python-tricks-you-cant-live-without.html" rel="alternate"></link><published>2012-06-30T00:00:00+00:00</published><updated>2012-06-30T00:00:00+00:00</updated><author><name>Audrey Roy</name></author><id>tag:pyvideo.org,2012-06-30:pycon-philippines-2012/python-tricks-you-cant-live-without.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Important things you need to know in Python but aren't part of an introductory talk like virtualenv, pip, using PyPi, and the importance documentation.&lt;/p&gt;
</summary><category term="tips"></category><category term="tricks"></category><category term="pip"></category><category term="virtualenv"></category><category term="pypi"></category><category term="documentation"></category></entry><entry><title>A Qualidade do Ecossistema Python ( e o que podemos fazer para mante-la)</title><link href="https://pyvideo.org/python-brasil-2017/a-qualidade-do-ecossistema-python-e-o-que-podemos-fazer-para-mante-la.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Bruno Rocha</name></author><id>tag:pyvideo.org,2017-10-06:python-brasil-2017/a-qualidade-do-ecossistema-python-e-o-que-podemos-fazer-para-mante-la.html</id><summary type="html"></summary><category term="pip"></category><category term="pypi"></category><category term="quality"></category><category term="test"></category></entry><entry><title>Python Packages</title><link href="https://pyvideo.org/pycon-de-2013/python-packages.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Daniel Hepper</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/python-packages.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;setup.py, PyPI, easy_install, pip, distutils, setuptools, virtualenv -
wer ein Paket nutzen oder den eigenen Code als Paket verteilen will muss
sich durch einen Dschungel von Modulen und Werkzeugen kämpfen. Dieser
Vortrag bringt Licht ins Dunkel und stellt aktuelle Best Practices für
die Verwendung und Erstellung von Python-Paketen vor.&lt;/p&gt;
</summary><category term="packaging"></category><category term="pip"></category><category term="pypi"></category><category term="setuptools"></category><category term="virtualenv"></category></entry><entry><title>The state of Packaging (#63)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Tarek Ziadé</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools and Pip added great features on the top of this
: the ability to fetch PyPI to install a project and its dependencies.
So you can &amp;quot;easy_install A-Program&amp;quot; and everything is done
automatically for you.&lt;/p&gt;
&lt;p&gt;But all these features have shown the flaws and limitations of the
current Distutils design, and the urgency to make it evolve with respect
to the existing OS-specific packaging systems.&lt;/p&gt;
&lt;p&gt;This talk will detail the biggest issues that need to be solved, and the
work that is being done. It will end up with a presentation of the
Distutils roadmap, and an overview of the Distribute project, the
Setuptools replacer.&lt;/p&gt;
</summary><category term="distribute"></category><category term="distutils"></category><category term="easy_install"></category><category term="packaging"></category><category term="pip"></category><category term="pycon"></category><category term="pycon2010"></category><category term="pypi"></category><category term="setuptools"></category></entry></feed>