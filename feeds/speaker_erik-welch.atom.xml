<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Erik Welch</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_erik-welch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>NetworkX is Fast Now: Graph Analytics Unleashed</title><link href="https://pyvideo.org/pycon-us-2024/networkx-is-fast-now-graph-analytics-unleashed.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Mridul Seth</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/networkx-is-fast-now-graph-analytics-unleashed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how to find connections in your data and to gain
insights from them? Come discover how NetworkX makes this easy (and
fast!).&lt;/p&gt;
&lt;p&gt;This talk is broadly divided into two parts. First we will talk about
the power of graph analytics and how you can use â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how to find connections in your data and to gain
insights from them? Come discover how NetworkX makes this easy (and
fast!).&lt;/p&gt;
&lt;p&gt;This talk is broadly divided into two parts. First we will talk about
the power of graph analytics and how you can use tools like NetworkX to
extract information from your data, and then we will talk about how we
made the machinery behind NetworkX work with heterogeneous backends like
GraphBLAS (CPU optimized) and cuGraph (GPU optimized).&lt;/p&gt;
&lt;div class="section" id="part-i"&gt;
&lt;h4&gt;Part I&lt;/h4&gt;
&lt;p&gt;NetworkX is the most popular library in Python for graph theory and
applied network science thanks to its extensive API and
beginner-friendly documentation. NetworkX is used &amp;quot;everywhere&amp;quot;, because
graphs are everywhere. Don't believe me? We surveyed more than 300
Python packages to understand how they use NetworkX in domains ranging
from geoscience, neuroscience, genomics, biology, chemistry, quantum
computing, text and language, machine learning, causal inference,
optimization, and more. We will summarize what we learned to help you
apply graph analytics to your data.&lt;/p&gt;
&lt;p&gt;Once you start using NetworkX you will soon realize that the pure-Python
implementation starts becoming a roadblock to scalable graph analytics.
This takes us to the second part of the talk...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="part-ii"&gt;
&lt;h4&gt;Part II&lt;/h4&gt;
&lt;p&gt;What should you do when your graph data becomes too large or NetworkX
becomes too slow? Simple: use an accelerated NetworkX backend!&lt;/p&gt;
&lt;p&gt;NetworkX 3.0 added the ability to dispatch to other implementations.
This means you can use other highly tuned libraries from NetworkX to
achieve up to 100 to 10_000+ times speedup! As &amp;quot;the API for graphs&amp;quot;,
NetworkX now makes it easy to accelerate your graph workflows on CPUs
with GraphBLAS and NVIDIA GPUs with nx-cugraph. Other backends are
welcome, and we plan to support distributed graphs soon for extreme
scalability ðŸš€&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Functional programming in Python with PyToolz</title><link href="https://pyvideo.org/pyohio-2014/functional-programming-in-python-with-pytoolz.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Erik Welch</name></author><id>tag:pyvideo.org,2014-07-26:/pyohio-2014/functional-programming-in-python-with-pytoolz.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the principles of functional programming from the comfort of
Python. I'll motivate the principles of standardization, composability,
laziness, and purity within a standard workflow. We'll go far beyond the
standard libraries &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;functools&lt;/tt&gt; by using a functional
standard library &lt;tt class="docutils literal"&gt;toolz&lt;/tt&gt; and its high-performance counterpart
&lt;tt class="docutils literal"&gt;cytoolz&lt;/tt&gt; written in â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the principles of functional programming from the comfort of
Python. I'll motivate the principles of standardization, composability,
laziness, and purity within a standard workflow. We'll go far beyond the
standard libraries &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;functools&lt;/tt&gt; by using a functional
standard library &lt;tt class="docutils literal"&gt;toolz&lt;/tt&gt; and its high-performance counterpart
&lt;tt class="docutils literal"&gt;cytoolz&lt;/tt&gt; written in Cython.&lt;/p&gt;
</content><category term="PyOhio 2014"></category><category term="talk"></category></entry><entry><title>Building a Faster NetworkX-Like Library Using GraphBLAS</title><link href="https://pyvideo.org/pyohio-2022/building-a-faster-networkx-like-library-using-graphblas.html" rel="alternate"></link><published>2022-07-30T00:00:00+00:00</published><updated>2022-07-30T00:00:00+00:00</updated><author><name>Erik Welch</name></author><id>tag:pyvideo.org,2022-07-30:/pyohio-2022/building-a-faster-networkx-like-library-using-graphblas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a call for engagement to help with
&lt;a class="reference external" href="https://github.com/python-graphblas/graphblas-algorithms"&gt;graphblas-algorithms&lt;/a&gt;!
We'll also have weird math and weird Python syntax,
so you can also come for the fun of getting your mind blown :)&lt;/p&gt;
&lt;p&gt;GraphBLAS is a mathematical abstraction layer designed to express many
graph algorithms in the language of linear â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a call for engagement to help with
&lt;a class="reference external" href="https://github.com/python-graphblas/graphblas-algorithms"&gt;graphblas-algorithms&lt;/a&gt;!
We'll also have weird math and weird Python syntax,
so you can also come for the fun of getting your mind blown :)&lt;/p&gt;
&lt;p&gt;GraphBLAS is a mathematical abstraction layer designed to express many
graph algorithms in the language of linear algebra. It's weird and
written in C.
It is also &lt;em&gt;incredibly&lt;/em&gt; fast and powerful.
Graph analytics has applications across industries and sciences--more
than you might expect--and we want to get the power of GraphBLAS into
the hands of Pythonistas and practitioners.&lt;/p&gt;
&lt;p&gt;Our package, &lt;a class="reference external" href="https://github.com/python-graphblas/python-graphblas"&gt;python-graphblas&lt;/a&gt;, allows us to write GraphBLAS in
the style of math, not the C API.
Counterintuitively, by introducing some unconventional notation, we
were able to make our library more Pythonic.
However, &lt;a class="reference external" href="https://github.com/python-graphblas/python-graphblas"&gt;python-graphblas&lt;/a&gt; is still low-level, and most users
probably won't use it directly.
Instead, most people will probably want to use
&lt;a class="reference external" href="https://github.com/python-graphblas/graphblas-algorithms"&gt;graphblas-algorithms&lt;/a&gt;,
a library that looks like &lt;a class="reference external" href="https://networkx.org/"&gt;NetworkX&lt;/a&gt;, the most popular graph library
in Python.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/python-graphblas/graphblas-algorithms"&gt;graphblas-algorithms&lt;/a&gt; is young.
It is growing and has great potential, but it could use more help.
Who can help? Anybody who is interested! We have a well-defined
target--the &lt;a class="reference external" href="https://networkx.org/"&gt;NetworkX&lt;/a&gt; API and its tests--so
it's very easy to find things to do.
We actually find it fun like solving puzzles, and there is still a lot
of low-lying fruit.
If you don't know much about graphs or how to contribute to
open-source, this could be a great way to learn!&lt;/p&gt;
</content><category term="PyOhio 2022"></category></entry><entry><title>GraphBLAS for Sparse Data and Graphs | SciPy 2023</title><link href="https://pyvideo.org/scipy-2023/graphblas-for-sparse-data-and-graphs-scipy-2023.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>Jim Kitchen</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/graphblas-for-sparse-data-and-graphs-scipy-2023.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GraphBLAS solves graph problems using sparse linear algebra. We are using it to build graphblas-algorithms, a fast backend to NetworkX. python-graphblas is faster and more capable than scipy.sparse for both graph algorithms and sparse operations. If you have sparse data or graph workloads that you want to scale â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GraphBLAS solves graph problems using sparse linear algebra. We are using it to build graphblas-algorithms, a fast backend to NetworkX. python-graphblas is faster and more capable than scipy.sparse for both graph algorithms and sparse operations. If you have sparse data or graph workloads that you want to scale and make faster, then this is for you. Come learn what makes GraphBLAS special--and fast!--and how to use it effectively.&lt;/p&gt;
</content><category term="SciPy 2023"></category></entry></feed>