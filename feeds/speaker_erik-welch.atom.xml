<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_erik-welch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-26T00:00:00+00:00</updated><entry><title>Functional programming in Python with PyToolz</title><link href="https://pyvideo.org/pyohio-2014/functional-programming-in-python-with-pytoolz.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Erik Welch</name></author><id>tag:pyvideo.org,2014-07-26:pyohio-2014/functional-programming-in-python-with-pytoolz.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the principles of functional programming from the comfort of
Python. I'll motivate the principles of standardization, composability,
laziness, and purity within a standard workflow. We'll go far beyond the
standard libraries &lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;functools&lt;/tt&gt; by using a functional
standard library &lt;tt class="docutils literal"&gt;toolz&lt;/tt&gt; and its high-performance counterpart
&lt;tt class="docutils literal"&gt;cytoolz&lt;/tt&gt; written in Cython.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>