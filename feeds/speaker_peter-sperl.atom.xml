<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_peter-sperl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Configuring uWSGI for Production: The defaults are all wrong</title><link href="https://pyvideo.org/europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Peter Sperl</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, we began migrating from a proprietary service framework
to a WSGI-compliant one. We chose uWSGI as our host because of its
performance and feature set. But, while powerful, uWSGI's defaults are
driven by backward compatibility and are not ideal for new deployments.
Powerful features can be overlooked due to the sheer magnitude of its
feature set and spotty documentation. As we've scaled up the number of
services hosted by uWSGI over the last year, we've had to tweak our
standard configuration.&lt;/p&gt;
&lt;p&gt;In this talk, we'll present the base uWSGI configuration we use as a
starting point for all services, as well as some tips to avoid known
gotchas and provide a base level of defensiveness and high reliability.
This base configuration makes use of several &amp;quot;no-cost&amp;quot; uWSGI features
that help protect services from common, yet difficult to prevent issues
-- some of which we discovered the hard way. We'll also talk about some
programmatic uWSGI features which can be leveraged to improve
reliability and improve outage response.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the topics we'll cover include:&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating memory leaks&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating stuck, hung, or infinitely looping processes&lt;/div&gt;
&lt;div class="line"&gt;- Preventing misconfigurations&lt;/div&gt;
&lt;div class="line"&gt;- Preventing wasted development effort&lt;/div&gt;
&lt;div class="line"&gt;- Improving outage response&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Best Practice"></category><category term="Distributed Systems"></category><category term="Microservices"></category><category term="Web Servers and MicroFWs"></category><category term="failures/mistakes"></category></entry><entry><title>High Performance Microservices</title><link href="https://pyvideo.org/pygotham-2017/high-performance-microservices.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Peter Sperl</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/high-performance-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architecture plays an important role in determining the ultimate performance of a system.  Caching effectiveness, for example, is largely determined by interface design and data storage policy, while IPC overhead is strongly influenced by service deployment strategy and the method of data exchange.&lt;/p&gt;
&lt;p&gt;The techniques and designs presented are general and not specific to any one service framework.   While many of the topics discussed apply to services and systems implemented in any language, the presented performance comparisons were run in Python and there are tips and tricks that are Python specific, such as taking liberties with the garbage collector.&lt;/p&gt;
</summary></entry></feed>