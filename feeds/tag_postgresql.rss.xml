<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 May 2019 00:00:00 +0000</lastBuildDate><item><title>Building a Celery alternative in Django on Kubernetes</title><link>https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I‚Äôve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn‚Äôt about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform‚Äôs hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alec Clowes</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</guid><category>celery</category><category>reactjs</category><category>postgresql</category><category>kubernetes</category><category>django</category></item><item><title>Mappe üó∫Ô∏è con GeoDjango üåé, PostGIS üêò e Leaflet üçÉ</title><link>https://pyvideo.org/pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una &lt;em&gt;mappa&lt;/em&gt; permette agli utenti di visualizzare e ricercare i dati in
maniera spaziale ed √® comune l‚Äôesigenza di aggiungerne una al proprio
progetto web.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo come abbiamo integrato una &lt;em&gt;mappa&lt;/em&gt; in un
progetto web gi√† in produzione usando &lt;strong&gt;GeoDjango&lt;/strong&gt; , &lt;strong&gt;PostGIS&lt;/strong&gt; e
&lt;strong&gt;Leaflet&lt;/strong&gt; ed eseguiremo una dimostrazione di integrazione da zero
di una mappa in un progetto &lt;strong&gt;Django&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GeoDjango&lt;/strong&gt; √® un modulo incluso in &lt;strong&gt;Django&lt;/strong&gt; che lo trasforma in un
&lt;em&gt;framework&lt;/em&gt; Web geografico di classe mondiale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostGIS&lt;/strong&gt; √® un estensione del &lt;em&gt;database&lt;/em&gt; &lt;strong&gt;PostgreSQL&lt;/strong&gt; che aggiunge
il supporto per gli oggetti geografici consentendo di eseguire query
spaziali.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaflet&lt;/strong&gt; √® la principale libreria &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;em&gt;open source&lt;/em&gt; per
mappe web interattive ottimizzate per dispositivi mobili.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Durante il primo meetup &lt;strong&gt;#PyRoma&lt;/strong&gt; del 2019 abbiamo presentato una
versione ridotta di questo talk limitandoci al solo &lt;strong&gt;caso d‚Äôuso&lt;/strong&gt;. Info
qui:
&lt;a class="reference external" href="https://www.paulox.net/2019/01/21/pyroma-2019/"&gt;www.paulox.net/2019/01/21/pyroma-2019/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1608"&gt;https://python.it/feedback-1608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html</guid><category>web</category><category>postgresql</category><category>javascript</category><category>postgis</category><category>django</category><category>leaflet</category><category>maps</category><category>geospatial</category><category>gis</category><category>geodjango</category><category>python3</category></item><item><title>PostgreSQL on the kube</title><link>https://pyvideo.org/pycon-italia-2019/postgresql-on-the-kube.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kubernetes √® un sistema di orchestrazione di container che permette di
gestire il deploy, lo scaling e l‚Äôaggiornamento di una applicazione e di
tutti i suoi componenti.&lt;/p&gt;
&lt;p&gt;In questo talk parleremo di quali strumenti sono a disposizione per
effettuare un deploy di un database PostgreSQL in un cluster Kubernetes.
Inoltre vedremo come sia implementabile l‚Äôalta disponibilit√† e la
disaster recovery, in maniera da avere i propri dati al sicuro e sempre
accessibili.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1784"&gt;https://python.it/feedback-1784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 10:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Nenciarini</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/postgresql-on-the-kube.html</guid><category>postgresql</category><category>postgres</category><category>kubernetes</category><category>storage</category><category>containers</category><category>docker</category><category>k8s</category><category>cloud</category></item><item><title>Extending Python into PostgreSQL</title><link>https://pyvideo.org/europython-2013/extending-python-into-postgresql.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe Pettus</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/extending-python-into-postgresql.html</guid><category>performance</category><category>postgresql</category><category>database</category></item><item><title>Python and PostgreSQL for Huge Data Warehouses</title><link>https://pyvideo.org/europython-2013/python-and-postgresql-for-huge-data-warehouses.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/python-and-postgresql-for-huge-data-warehouses.html</guid><category>postgresql</category><category>nosql</category><category>parallelization</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>architecture</category><category>sql</category><category>performance</category></item><item><title>Take Back Control Over Your Work. Agile Tips For Python Developers.</title><link>https://pyvideo.org/europython-2013/take-back-control-over-your-work-agile-tips-for-python-developers.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/take-back-control-over-your-work-agile-tips-for-python-developers.html</guid><category>web</category><category>pyramid</category><category>postgresql</category><category>open-source</category><category>trac</category><category>framework</category><category>teamwork</category></item><item><title>pl/python now as powerful as C</title><link>https://pyvideo.org/europython-2013/plpython-now-as-powerful-as-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/plpython-now-as-powerful-as-c.html</guid><category>postgresql</category><category>nosql</category><category>database</category><category>mongodb</category><category>bigdata</category><category>pl/python</category><category>optimization</category><category>sql</category><category>Full Text Search</category></item><item><title>PostgreSQL for Pythonistas.</title><link>https://pyvideo.org/europython-2013/postgresql-for-pythonistas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dougal Matthews</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/postgresql-for-pythonistas.html</guid><category>postgresql</category><category>database</category></item><item><title>Python in the cloud with PaaS - Part 1</title><link>https://pyvideo.org/europython-2013/python-in-the-cloud-with-paas-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Citron-Pousty</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-in-the-cloud-with-paas-part-1.html</guid><category>flask</category><category>mongodb</category><category>geospatial</category><category>postgresql</category><category>cloud</category></item><item><title>Python in the cloud with PaaS - Part 2</title><link>https://pyvideo.org/europython-2013/python-in-the-cloud-with-paas-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Citron-Pousty</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-in-the-cloud-with-paas-part-2.html</guid><category>flask</category><category>mongodb</category><category>geospatial</category><category>postgresql</category><category>cloud</category></item><item><title>Scalable SQL Patterns - Part 1</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-1.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>Scalable SQL Patterns - Part 2</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-2.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>Postgres Demystified</title><link>https://pyvideo.org/europython-2013/postgres-demystified.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgres-demystified.html</guid><category>postgresql</category><category>database</category></item><item><title>PostgreSQL is Web-Scale (Really :) )</title><link>https://pyvideo.org/europython-2013/postgresql-is-web-scale-really.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show you how to set up a python and PostgreSQL based
system which is easy to set up and easy to scale, provides ACID
guarantees where they are needed and delays time-consistency between
unrelated objects for scalability and availability where the latter are
deemed more important.&lt;/p&gt;
&lt;p&gt;The best thing is that this kind of scalability work for both OLTP and
OLAP workloads, so with some planning you can have just a single large
‚Äúdatabase‚Äù which can take almost any type of load.&lt;/p&gt;
&lt;p&gt;Also, if you hate SQL, you can do all the OLTP stuff in a pythonic way
using an automagically generated ORM layer inside the database, near the
data. If you are really masochistic, you can use the same ORM also for
map-reduce type distributed data processing, though on this side the
small effort of learning SQL usually pays off when queries get more
complex. But as I said, everything runs inside the databse, near the
data and thus even the ORM &amp;amp; map-reduce analytics works fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgresql-is-web-scale-really.html</guid><category>postgresql</category><category>nosql</category><category>datamining</category><category>parallelization</category><category>distributed</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>orm</category><category>sql</category><category>performance</category></item><item><title>Quando Django incontra PostgreSQL!</title><link>https://pyvideo.org/pycon-italia-2018/quando-django-incontra-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vi siete mai chiesti cosa succede quando due strumenti potenti si
completano?&lt;/p&gt;
&lt;p&gt;Vedremo come ottenere un ambiente di sviluppo molto veloce e come
analizzare i tempi delle query in produzione per isolare i colli di
bottiglia. Analizzeremo cosa ci offre Django per gestire i pool di
connessioni e l‚Äôuso di pgbouncer.&lt;/p&gt;
&lt;p&gt;Esploreremo le strade che si aprono utilizzando i campi JSON ed i campi
ARRAY, che sono i pi√π comunemente usati, ma anche di come utilizzare
PostgreSQL come un gestore di code.&lt;/p&gt;
&lt;p&gt;Requisiti: conoscenze basilari di Python, di Django ed uso di PostgreSQL&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Cecchi</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/quando-django-incontra-postgresql.html</guid><category>MessageQueues</category><category>django-orm</category><category>database</category><category>postgresql</category><category>django</category></item><item><title>DjangoProject.com - Ricerca Full-Text con PostgreSQL</title><link>https://pyvideo.org/pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il sito web ufficiale del progetto &lt;strong&gt;Django&lt;/strong&gt; (
&lt;a class="reference external" href="http://www.djangoproject.com"&gt;www.djangoproject.com&lt;/a&gt; ) √® basato
sull‚Äôultima versione stabile di Django, la &lt;strong&gt;documentazione&lt;/strong&gt; del
progetto √® generata con &lt;strong&gt;Sphinx&lt;/strong&gt; ed i documenti generati sono poi
memorizzati su &lt;strong&gt;PostgreSQL&lt;/strong&gt; per essere visualizzati sul sito.&lt;/p&gt;
&lt;p&gt;Il modulo per la &lt;strong&gt;ricerca&lt;/strong&gt; della documentazione nel sito del progetto
Django √® molto utilizzato e fino a poco tempo fa era &lt;strong&gt;basato&lt;/strong&gt; su
&lt;strong&gt;Elasticsearch&lt;/strong&gt;. L‚Äôutilizzo di Elasticsearch ha causato &lt;strong&gt;problemi&lt;/strong&gt;
nella sincronizzazione dei dati e nell‚Äôaggiornamento dei driver di
connessione.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo &lt;strong&gt;come&lt;/strong&gt; ho &lt;strong&gt;aggiornato&lt;/strong&gt; la funzione di
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/search/?q=full+text+search"&gt;ricerca&lt;/a&gt;
del &lt;strong&gt;sito del progetto Django&lt;/strong&gt; utilizzando il modulo di &lt;strong&gt;Ricerca
Full- Text&lt;/strong&gt; di Django basato direttamente su &lt;strong&gt;PostgreSQL&lt;/strong&gt;. Questo
ha &lt;strong&gt;semplificato&lt;/strong&gt; molto l‚Äôinfrastruttura e &lt;strong&gt;velocizzato&lt;/strong&gt; l‚Äô
&lt;strong&gt;aggiornamento&lt;/strong&gt; della documentazione, senza perdere nessuna delle
precedenti &lt;strong&gt;funzioni&lt;/strong&gt; di ricerca ma anzi migliorandole ed
aggiungendone altre da tempo richieste dagli &lt;strong&gt;utenti&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;Tramite questo talk potrai &lt;strong&gt;imparare&lt;/strong&gt; come &lt;strong&gt;aggiungere&lt;/strong&gt; una nuova
funzione di &lt;strong&gt;Ricerca Full-Text&lt;/strong&gt; nel &lt;strong&gt;tuo progetto&lt;/strong&gt; basato su Django
e PostgreSQL. In alternativa potreai imparare come &lt;strong&gt;aggiornare&lt;/strong&gt; la
ricerca esistente nel tuo sito se usi Elasticsearch o &lt;strong&gt;motori di
ricerca&lt;/strong&gt; simili .&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Per una **introduzione*&lt;/em&gt; ai temi del talk puoi leggere il mio articolo
sulla &lt;a class="reference external" href="http://www.paulox.net/2017/12/22/full-text-search-in-django-with-%20postgresql/"&gt;&amp;quot;Ricerca Full-Text in Django con
PostgreSQL&amp;quot;&lt;/a&gt;
basato sul mio talk presentato al &lt;a class="reference external" href="https://www.pycon.it/conference/talks/ricerca-full-text-in-django-con-%20postgresql"&gt;PyCon
Otto&lt;/a&gt;
nel 2017.*&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</guid><category>web</category><category>search</category><category>postgresql</category><category>postgres</category><category>database</category><category>Python</category><category>documentation</category><category>django</category><category>elasticsearch</category><category>sphinx</category><category>Full Text Search</category><category>python3</category></item><item><title>PostgreSQL &amp; Python: La coppia perfetta.</title><link>https://pyvideo.org/pycon-italia-2018/postgresql-python-la-coppia-perfetta.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questo talk parla di amore. Della combinazione perfetta fra PostgreSQL e
Python. PostgreSQL √© il database scelto di default da molti sviluppatori
Python, perch√© √© robusto, stabile e open source. Noi di 2ndQuadrant
viviamo con PostgreSQL e amiamo anche Python, usandolo il pi√∫ possibile
per progetti open source pubblici e per i progetti interni. Voglio
condividere con voi l‚Äôamore per PostgreSQL e Python mostrando come la
‚Äúcoppia perfetta‚Äù possa lavorare in perfetta simbiosi.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giulio Calacoci</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/postgresql-python-la-coppia-perfetta.html</guid><category>Python</category><category>Love</category><category>postgresql</category><category>postgres</category><category>elephant</category></item><item><title>Replica logica in PostgreSQL: il futuro √® adesso</title><link>https://pyvideo.org/pycon-italia-2018/replica-logica-in-postgresql-il-futuro-e-adesso.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A partire dalla versione 10, la replica logica entra nel core di
PostgreSQL, permettendo di replicare dati in maniera efficiente fra nodi
diversi. In questo talk vedremo come funziona questo metodo alternativo
alla replica fisica, quanto sia efficiente rispetto ad altri metodi di
replica e come, con qualche accorgimento, sia possibile avere lo stream
delle modifiche accessibile da Python. Naturalmente daremo anche uno
squardo al futuro, parlando dei miglioramenti che saranno inclusi in
PostgreSQL 11.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 15:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Nenciarini</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/replica-logica-in-postgresql-il-futuro-e-adesso.html</guid><category>postgresql</category><category>postgres</category><category>psycopg2</category><category>data-logging</category><category>replication</category><category>replica</category></item><item><title>Taking care of PostgreSQL with Ansible</title><link>https://pyvideo.org/pycon-italia-2018/taking-care-of-postgresql-with-ansible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a powerful automation tool written in Python. With its
modules already built for PostgreSQL, we can easily manage the most
advanced open source database, making sure the configuration is exact in
every detail and repeatable as many times as it is needed.&lt;/p&gt;
&lt;p&gt;In this talk we will understand how Ansible works, see some of its main
modules for system/cloud administration, and learn how it can be used to
orchestrate PostgreSQL deployments, managing all parts of the process at
ease.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rubens Souza</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/taking-care-of-postgresql-with-ansible.html</guid><category>ansible</category><category>postgresql</category></item><item><title>Usare Odoo come framework</title><link>https://pyvideo.org/pycon-italia-2018/usare-odoo-come-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il framework Odoo offre agli sviluppatori la possibilit√† di estendere
Odoo per raggiungere gli obiettivi di business e (si spera) rendere Odoo
pi√π adatto al flusso di lavoro aziendale. In questo talk tratteremo come
realizzare: La struttura di base di un modulo Odoo. Lo sviluppo di un
modulo Odoo base. Creazione e modifica di un Report Qweb in Odoo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eliumara L√≥pez</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/usare-odoo-come-framework.html</guid><category>github</category><category>postgresql</category><category>postgres</category><category>#Python</category><category>Python</category><category>#Odoo</category><category>Qweb</category><category>git</category><category>#OCA</category><category>#PostrgreSQL</category><category>#github</category></item><item><title>Crash test of Django ORM</title><link>https://pyvideo.org/pycon-italia-2017/crash-test-of-django-orm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is swimming in articles and books about Django and Django ORM
itself. All this sources cover only basic use cases of Django ORM
comparing to real world examples. This talk is dedicated to the
proposition to crash test Django ORM 80% of functionalities in 20% of
the time. Also I‚Äôm going to show the important features and capabilities
of Django ORM compare to most of SQL features. Traditionally, ORM is
presented in a ‚Äúbottom-up‚Äù fashion, but I would like to propose
approach, on the other hand, is ‚Äútop-down‚Äù. We begin by identifying a
rather short list of standard questions, or precisely types of
questions, that are often asked of relations databases. We then show how
these standard questions are posted in Django ORM, introducing and
motivating the use of its capabilities and features as they become
relevant.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Soldatenko</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/crash-test-of-django-orm.html</guid><category>django-orm</category><category>performance</category><category>postgresql</category><category>python3</category><category>django</category></item><item><title>PostgreSQL su NFS: miti e verit√†</title><link>https://pyvideo.org/pycon-italia-2017/postgresql-su-nfs-miti-e-verita.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abbiamo avuto l‚Äôoccasione di lavorare alla richiesta di un cliente, di
valutare in maniera obiettiva la possibilit√† di basare un database
PostgreSQL su Network File System. Sono stati scritti molti articoli a
riguardo, ma quando si ha l‚Äôopportunit√† di mettere in pratica questa
configurazione in prima persona, ci si rende conto che ancora molto non
√® stato documentato. Le prestazioni di NFS possono essere molto buone,
ma si abbassano notevolmente quando si inseriscono vincoli di
affidabilit√†. Una soluzione pu√≤ essere quella di basare PostreSQL su 2
partizioni NFS, una per i dati e una per gli xlog, in modo distinguere
una configurazione per un rapido accesso ai dati e una con maggiore
affidabilit√† per le scritture consistenti dei WAL. In questo talk vorrei
sottoporre la mia personale esperienza esponendo quali sono stati i test
effettuati per considerare PostgreSQL su NFS un‚Äôopzione molto
interessante, sfatando miti e constatando fatti.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Battiato</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/postgresql-su-nfs-miti-e-verita.html</guid><category>nfs</category><category>postgresql</category></item><item><title>Python e PostgreSQL, un connubio perfetto</title><link>https://pyvideo.org/pycon-italia-2017/python-e-postgresql-un-connubio-perfetto.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL ha come obiettivi primari l‚Äôintegrit√† dei dati,
l‚Äôaffidabilit√† e le caratteristiche integrate orientate agli
sviluppatori. Per questo molti progetti lo scelgono fin dall‚Äôinizio. In
questo talk vedremo come PostgreSQL e Python si integrano su pi√π
livelli, e come sia possibile sfruttare in Python le caratteristiche
avanzate di questo database.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://prezi.com/5kvmyfmqp1mt/"&gt;http://prezi.com/5kvmyfmqp1mt/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Nenciarini</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/python-e-postgresql-un-connubio-perfetto.html</guid><category>django-orm</category><category>psycopg2</category><category>pl/python</category><category>postgresql</category><category>database</category></item><item><title>Ricerca full text in Django con PostgreSQL</title><link>https://pyvideo.org/pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dalla versione 1.10 di &lt;strong&gt;Django&lt;/strong&gt; √® presente il modulo che facilita
l‚Äôutilizzo del motore di &lt;strong&gt;ricerca full text&lt;/strong&gt; di PostgreSQL. Dal
momento che &lt;strong&gt;PostgreSQL&lt;/strong&gt; √® utilizzato in molti progetti Django,
sfruttare il suo motore di ricerca full text permette di avere questa
funzionalit√† molto facilmente, senza dover configurare prodotti esterni
e senza doversi preoccupare di mantenere sincronizzati i dati tra
differenti sistemi. Vedremo come abbiamo sfruttato questa funzionalit√†
di ricerca full text in un &lt;strong&gt;progetto reale&lt;/strong&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html</guid><category>Full Text Search</category><category>search</category><category>postgresql</category><category>python3</category><category>django</category></item><item><title>Taking care of PostgreSQL with Ansible</title><link>https://pyvideo.org/pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; is a powerful automation tool written in &lt;strong&gt;Python&lt;/strong&gt;. With
its modules already built for &lt;strong&gt;PostgreSQL&lt;/strong&gt;, we can easily manage the
most advanced open source database, making sure the configuration is
exact in every detail and repeatable as many times as it is needed. In
this talk we will understand how &lt;strong&gt;Ansible&lt;/strong&gt; works, see some of its main
modules for system/cloud administration, and learn how it can be used to
orchestrate &lt;strong&gt;PostgreSQL&lt;/strong&gt; deployments, managing all parts of the
process at ease. A &lt;strong&gt;PostgreSQL&lt;/strong&gt; test environment configuration, using
&lt;strong&gt;Ansible&lt;/strong&gt; and &lt;strong&gt;Vagrant&lt;/strong&gt;, will be shown as an example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rubens Souza</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</guid><category>postgresql</category><category>database</category><category>devops</category><category>automation</category><category>ansible</category></item><item><title>A Non-coder's Journey with Python and Postgresql</title><link>https://pyvideo.org/pycon-jamaica-2016/a-non-coders-journey-with-python-and-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is sometimes thought of as the language for the casual coder. Rhys Stewart, self declared &amp;quot;non-coder&amp;quot; and SQL junkie (which means he can do crazy things with databases) will share his experiences of using Python with Postgresql for day to day tasks. He's not promising best practices but he says they are &amp;quot;pretty good&amp;quot; and work for him.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.pythonjam.org.jm/conference-2016"&gt;https://www.pythonjam.org.jm/conference-2016&lt;/a&gt; the PyCon Jamaica 2016 technology conference for Python software developers was held (November 17 - 18, 2016).  The conference was immediately followed by the Great Python Scavenger Hunt &lt;a class="reference external" href="https://www.pythonjam.org.jm/conference-2016/scavenger-race"&gt;https://www.pythonjam.org.jm/conference-2016/scavenger-race&lt;/a&gt;. Our conferences are open to beginners, experts and non-programmers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rhys Stewart</dc:creator><pubDate>Fri, 18 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-18:pycon-jamaica-2016/a-non-coders-journey-with-python-and-postgresql.html</guid><category>postgresql</category></item><item><title>Data Integration in the World of Microservices</title><link>https://pyvideo.org/pydata-berlin-2016/data-integration-in-the-world-of-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;Since its launch in 2008, Zalando has grown with tremendous speed. The road from startup to multinational corporation has been full of challenges, especially for Zalando's technology team. Distributed across Berlin, Helsinki, Dublin, Hamburg and Dortmund ‚Äî with nearly 1000 professionals strong ‚Äî Zalando Technology still plans to expand by adding 1,000 more developers through the end of 2016.&lt;/p&gt;
&lt;p&gt;This rapid growth has shown us that we need to remain flexible about developing processes and organizational structures, to allow us to continue scaling and experimenting. In March 2015, our team adopted Radical Agility: a tech management approach that emphasizes Autonomy, Purpose, and Mastery, with trust as the glue holding it all together.&lt;/p&gt;
&lt;p&gt;To make autonomy possible, teams can now choose their own technology stacks for the products they own. Microservices, speaking with each other using RESTful APIs, promise to minimize the costs of integration between autonomous teams. In addition, Isolated AWS accounts run on top of our own open-source Platform as a Service (called STUPS.io), give each autonomous team enough hardware to experiment and introduce new features without breaking our entire system.&lt;/p&gt;
&lt;p&gt;One small issue with having microservices isolated in their individual AWS accounts: Our teams keep local data for themselves. In this environment, building an ETL process for data analyses, or integrating data from different services becomes quite challenging.&lt;/p&gt;
&lt;p&gt;PostgreSQL's new logical replication features, however, now make it possible to stream all the data changes from the isolated databases to the data integration system so that it can collect this data, represent it in different forms, and prepare it for analysis.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss Zalando's open-source data collection prototype, which uses PostgreSQL's logical replication streaming capabilities to collect data from various PostgreSQL databases, and recreate it for different formats and systems (Data Lake, Operational Data Store, KPI calculation systems, automatic process monitoring). The audience will come away with new ideas for how to use Postgres streaming replication in a microservices environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentine Gogichashvili</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pydata-berlin-2016/data-integration-in-the-world-of-microservices.html</guid><category>stups.io</category><category>postgresql</category><category>replication</category><category>etl</category></item><item><title>Django Deployment for the Average Bloke</title><link>https://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Karsten</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</guid><category>apache</category><category>chipy</category><category>deployment</category><category>mod_wsgi</category><category>pinax</category><category>postgresql</category><category>web</category></item><item><title>Secrets of PostgreSQL Performance</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--secrets-of-postgresql-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Secrets of PostgreSQL Performance&lt;/p&gt;
&lt;p&gt;Presented by Frank Wiles&lt;/p&gt;
&lt;p&gt;PostgreSQL is effectively the default RDBMS for Django. Learn the dark
arts of optimizing this powerful database to be blazingly fast on your
own hardware or in the cloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Wiles</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--secrets-of-postgresql-performance.html</guid><category>djangocon</category><category>djangocon2011</category><category>optimize</category><category>optimizing</category><category>postgresql</category><category>rdbms</category></item><item><title>PostgreSQL when it's not your job</title><link>https://pyvideo.org/djangocon-us-2012/postgresql-when-its-not-your-job.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this DevOps world, Django developers are increasingly being asked to
manage the database as well. In 40 brisk minutes, we will talk about
(nearly) everything you need to know to bring up, tune, and keep a
PostgreSQL database health. We'll go over installation, basic tuning,
backups, disaster recovery, and helpful tools and techniques.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a very rare startup these days that has a full-time DBA on staff;
mostly, the developers are pressed into service to handle the database
as well. In this talk, we'll present the survival skills required to
manage your PostgreSQL database while trying to push the product out the
door.&lt;/p&gt;
&lt;p&gt;We'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Installation.&lt;/li&gt;
&lt;li&gt;Basic tuning (it's easier than you think).&lt;/li&gt;
&lt;li&gt;Performance, including things you must not do.&lt;/li&gt;
&lt;li&gt;Backups and disaster recovery.&lt;/li&gt;
&lt;li&gt;Helpful tools, tips and tricks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Django experience is helpful, but no PostgreSQL experience required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe Pettus</dc:creator><pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-04:djangocon-us-2012/postgresql-when-its-not-your-job.html</guid><category>django</category><category>postgresql</category></item><item><title>Building a hosting platform with Python</title><link>https://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</guid><category>ep.io</category><category>hosting</category><category>infrastructure</category><category>postgresql</category><category>redis</category><category>scalable</category><category>web</category></item><item><title>django-rdflib and postgresql - the best of both worlds</title><link>https://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</guid><category>architecture</category><category>database</category><category>django</category><category>orm</category><category>postgresql</category><category>reusing</category><category>search</category><category>serialization</category><category>university</category></item><item><title>django-rdflib e postgresql - il meglio dei due mondi</title><link>https://pyvideo.org/europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 24 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib √® una libreria python che fornisce una base di dati con vari
back-end per le triple, dei parser, serializzatori, SPARQL √®
un'interfaccia in python per estrarre/inserire le triple. L'abbiamo
integrata con Django tramite il riutilizzo della connessione alla base
di dati fornendo un'interfaccia ORM e la capacit√† di fare ricerca
full-text sui valori letterali. La presentazione contiene un studio di
caso per django-rdflib con un back-end postgresql in Brain Architecture
Management System (&lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;http://brancusi1.usc.edu&lt;/a&gt;) - un progetto
neuroscientifico per University of Southern California. Si vedranno i
benefici della struttura flessibile del RDF che permette ai ricercatori
di introdurre dati in formatto libero, rendere i dati pubblici con una
serializzazione personalizzata e usare la potente ricerca full-text
fornita da postgresql.&lt;/p&gt;
&lt;p&gt;Scopo: introdurre al pubblico una combinazione di RDF, la ricerca
full-text di postgresql e l'ORM di Django tramite django-rdflib.&lt;/p&gt;
&lt;p&gt;Requisiti: familiarit√† con Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-e-postgresql-il-meglio-dei-due-mo.html</guid><category>architecture</category><category>django</category><category>orm</category><category>postgresql</category><category>university</category></item><item><title>Getting ready for PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>Making use of OpenStreetMap data with Python</title><link>https://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Mishkovskyi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</guid><category>gis</category><category>google</category><category>importing</category><category>learning</category><category>maps</category><category>parsing</category><category>postgresql</category><category>web</category></item><item><title>PL/Python -- Python inside the PostgreSQL RDBMS</title><link>https://pyvideo.org/europython-2011/plpython-python-inside-the-postgresql-rdbms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Geoghegan - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/plpython-python-inside-the-postgresql-rdbms.html</guid><category>postgresql</category><category>rdbms</category></item><item><title>PostgreSQL - the database-sister of Python</title><link>https://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</guid><category>business</category><category>database</category><category>json</category><category>postgresql</category><category>replication</category><category>web</category></item><item><title>Aspettando PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/aspettando-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini - 22 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL √® un sistema open-source per la gestione di database molto
avanzato ed estremamente versatile che si integra perfettamente con
Python. E' sviluppato da una comunit√† internazionale molto attiva ed √®
distribuito secondo la licenza in stile BSD denominata &amp;quot;PostgreSQL
License&amp;quot;.&lt;/p&gt;
&lt;p&gt;Le funzionalit√† di classe enterprise (come la conformit√† con lo standard
SQL, le transazioni ACID, la disaster recovery, l'alta disponibilit√† o
HA, la replica, il partizionamento e in generale l'estensibilit√†)
rendono PostgreSQL particolarmente adatto per quegli ambienti
business-critical che intendono ridurre il costo di propriet√† totale
(TCO) delle loro soluzioni di database senza alterarne i requisiti
funzionali. PostgreSQL 9.0, rilasciato nel settembre del 2010, √® stata
la prima versione di PostgreSQL con Hot Standby, un meccanismo nativo
per la replica master/slave. Al consueto e collaudato meccanismo di
replica secondo la tecnica del log shipping (usata precedentemente per
scopi di HA con Warm Standby) √® stata aggiunta la replica in streaming.&lt;/p&gt;
&lt;p&gt;La versione 9.1, attesa per la seconda parte del 2011, aggiunger√† la
replica sincrona a PostgreSQL, rendendolo il primo DBMS in grado di
permettere a sviluppatori e utenti di controllare la strategia di
replica a livello di singola transazione. Partecipa al talk per scoprire
tutte le altre funzionalit√† principali che saranno incluse in PostgreSQL
9.1, fra le quali: gestione delle estensioni, writable common table
expression, ecc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/aspettando-postgresql-91.html</guid><category>database</category><category>postgresql</category></item></channel></rss>