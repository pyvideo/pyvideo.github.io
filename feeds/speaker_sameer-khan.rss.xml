<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 15 Sep 2012 00:00:00 +0000</lastBuildDate><item><title>Tracing and Profiling</title><link>https://pyvideo.org/pytexas-2012/tracing-and-profiling.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sameer Khan</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/tracing-and-profiling.html</guid></item><item><title>Simplify your (Python) Life</title><link>https://pyvideo.org/pytexas-2011/simplify-your--python--life.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll go over some intermediate to advanced topics and consider pros and
cons of choosing the simpler approach vs. the possibly more complicated
or redundant one. The aim is to reduce the number of language APIs and
constructs most programmers have to carry in their head to a smaller and
more coherent set. Along the way some best practices will also be
discussed that are at a higher level than things that can be flagged by
automated syntax checking tools such as pylint, pyflakes, etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Following are the topics we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Language/API design and how warts can creep into even well designed
products over time.&lt;/li&gt;
&lt;li&gt;&amp;quot;Worse is better&amp;quot; approach may be good enough (&amp;quot;satisficing&amp;quot;).&lt;/li&gt;
&lt;li&gt;An eclectic mix of language constructs that usually trip
newcomers--and sometimes even experienced programmers--which we'll
survey:&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;del&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;classmethod vs. staticmethod&lt;/li&gt;
&lt;li&gt;decorators (guidelines for writing your own)&lt;/li&gt;
&lt;li&gt;class decorators vs. metaclasses&lt;/li&gt;
&lt;li&gt;delegation via getattr&lt;/li&gt;
&lt;li&gt;Interfaces and getattr&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;We'll see how delegation and interfaces tie into the thinking behind
GoF Design Patterns.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sameer Khan</dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-10:pytexas-2011/simplify-your--python--life.html</guid></item></channel></rss>