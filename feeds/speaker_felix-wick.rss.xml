<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 23 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>How to Setup a new Python Project</title><link>https://pyvideo.org/europython-2014/how-to-setup-a-new-python-project.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Setting up a new Python project from scratch can be quite hard. How to
structure your files and directories. Where should my packages, modules,
documentation and unit tests go? How do I configure setup.py, Sphinx and
so on? We provide proven answers!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever a Python beginner starts with its own project he or she is
confronted with the same technical questions. Questions about a well
thought out directory structure to hold all the files. How setup.py
needs to be configured and even what it is capable of like specifying
entry_points and other goodies. We show from the experience of our
yearslong work with Python how to structure your Python project in terms
of folders, files, modules and packages. How to configure setup.py to
specify your requirements, to use it with nosetests, with Sphinx and so
on. We also elaborate on the usage of Git and Versioneer
(&lt;a class="reference external" href="https://github.com/warner/python-versioneer"&gt;https://github.com/warner/python-versioneer&lt;/a&gt;) to help you version your
package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felix Wick</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/how-to-setup-a-new-python-project.html</guid></item></channel></rss>