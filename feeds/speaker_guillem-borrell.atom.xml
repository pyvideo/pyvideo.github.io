<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_guillem-borrell.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-09T00:00:00+00:00</updated><entry><title>PALM. Big data, streaming y microservicios todo en uno</title><link href="https://pyvideo.org/pycon-es-2016/palm-big-data-streaming-y-microservicios-todo-en-uno.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Guillem Borrell</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/palm-big-data-streaming-y-microservicios-todo-en-uno.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PALM (y su implementación en Python, pylm) es una librería que proporciona las herramientas necesarias para crear servidores ligeros de altas prestaciones. Está separada en dos niveles de abstracción. El primero consta de componentes básicos que pueden utilizarse para crear cualquier tipo de servidor, mientras que en el segundo nivel se ofrecen servidores preparados para implementar topologías master-slave, clusters para map-reduce o microservicios, que se pueden extender fácilmente.&lt;/p&gt;
&lt;p&gt;En esta charla se tratarán las tecnologías y los algoritmos que permiten crear una librería como pylm en Python en menos de un año, se comentarán las dificultades superadas y los desafíos tecnológicos pendientes.&lt;/p&gt;
&lt;p&gt;PALM se está convirtiendo en la base las nuevas herramientas de NFQ solutions, como MASTR, una aplicación de nueva generación para la evaluación escalable de riesgos financieros o eCAP, que estima necesidades de capital.&lt;/p&gt;
&lt;p&gt;PALM, y por extensión pylm, aún no están terminados, pero ofrecen un acercamiento alternativo al ecosistema de Big Data, que está tendiendo a las herramientas de alto nivel. Los primeros resultados son prometedores. La misma versión de eCAP portada a PALM demostró ser ligeramente más rápida que la misma implementación con Spark.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Charlas Rapidas + #ThePymientoProject</title><link href="https://pyvideo.org/pycon-es-2016/charlas-rapidas-thepymientoproject.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Jesús Espino</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/charlas-rapidas-thepymientoproject.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="51%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Tiempo&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Título&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;02:54&lt;/td&gt;
&lt;td&gt;Jesús Espino&lt;/td&gt;
&lt;td&gt;Abriendo las clases de CPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;07:25&lt;/td&gt;
&lt;td&gt;J.L. Cercos-Pita&lt;/td&gt;
&lt;td&gt;¿Te han tongado en la selección de charlas de la PyConES?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;13:02&lt;/td&gt;
&lt;td&gt;Guillem Borrell&lt;/td&gt;
&lt;td&gt;No le abandones. Él nunca lo haría.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;18:24&lt;/td&gt;
&lt;td&gt;Pablo Galindo&lt;/td&gt;
&lt;td&gt;How to FIX Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24:21&lt;/td&gt;
&lt;td&gt;Manuel Kaufmann&lt;/td&gt;
&lt;td&gt;fades + pysenteishon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;30:28&lt;/td&gt;
&lt;td&gt;Johanna Sánchez&lt;/td&gt;
&lt;td&gt;Presentación PyConAR 2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;33:32&lt;/td&gt;
&lt;td&gt;Manuel Garrido&lt;/td&gt;
&lt;td&gt;Where can I park?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;37:52&lt;/td&gt;
&lt;td&gt;Pablo Lobariñas&lt;/td&gt;
&lt;td&gt;OpenBadges en Python Madrid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;39:56&lt;/td&gt;
&lt;td&gt;Adolfo Rosillo y Cristóbal Contreras&lt;/td&gt;
&lt;td&gt;Presentación de Pymiento Project&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>El problema C10K, la nube y la supercomputación</title><link href="https://pyvideo.org/pycon-es-2014/el-problema-c10k-la-nube-y-la-supercomputacion.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>Guillem Borrell</name></author><id>tag:pyvideo.org,2015-04-06:pycon-es-2014/el-problema-c10k-la-nube-y-la-supercomputacion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La nube, la infraestructura para servicios online del presente y del futuro, es enormemente similar a un superordenador. Muchas tecnologías que han hecho la nube posible fueron desarrolladas, ensayadas y escaladas en centros de supercomputación hace años. Python ha permitido por primera vez que científicos acostumbrados a utilizar superordenadores puedan hablar el mismo lenguaje que los expertos en servicios online, y que entiendan los problemas técnicos que surgen con el problema C10K, C100K o C1M. En esta charla, la experiencia utilizando superordenadores se intenta trasladar al desarrollo de un servidor de chat capaz de escalar de manera eficiente sobre un PAAS, identificando qué tecnologías y patrones que ya han demostrado su eficacia en supercomputación pueden ser aplicables. El chat, por cierto, funciona y escala bastante bien.&lt;/p&gt;
</summary></entry><entry><title>Es posible hacer una tesis doctoral en turbulencia con Python</title><link href="https://pyvideo.org/pycon-es-2015/es-posible-hacer-una-tesis-doctoral-en-turbulencia-con-python.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Guillem Borrell</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/es-posible-hacer-una-tesis-doctoral-en-turbulencia-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La simulación numérica directa de flujos turbulentos es una disciplina particularmente exigente en lo que respecta a manejo de datos a gran escala. Las simulaciones que llevamos a cabo en el grupo de investigación guardan del orden de centenares de terabytes de datos, y su proceso suele generar entre dos y tres veces esta cantidad. Después del primer año de tesis doctoral decidí ponerme de conejillo de indias para comprobar si Python es en la práctica tan bueno como se dice en teoría.&lt;/p&gt;
</summary><category term="Track Científico"></category></entry><entry><title>Python for Distributed Systems</title><link href="https://pyvideo.org/pydata-madrid-2016/python-for-distributed-systems.html" rel="alternate"></link><published>2016-04-08T00:00:00+00:00</published><updated>2016-04-08T00:00:00+00:00</updated><author><name>Guillem Borrell</name></author><id>tag:pyvideo.org,2016-04-08:pydata-madrid-2016/python-for-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Madrid 2016&lt;/p&gt;
&lt;p&gt;Most of the talks and workshop tutorials can be found here: &lt;a class="reference external" href="https://github.com/PyDataMadrid2016/Conference-Info"&gt;https://github.com/PyDataMadrid2016/Conference-Info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From big data to supercomputing, most modern high-performance tools are concurrent and parallel. This tutorial introduces some of the tools that are available in the Python ecosystem to develop, deploy and maintain modern and efficient distributed applications.&lt;/p&gt;
&lt;p&gt;This workshop will not cover trendy applications or bundled frameworks like Hadoop or Spark. It won't build recipies that you can reuse for any particular purpose. The goal is to buid a general comprehension about how to program distributed applications in a general way.&lt;/p&gt;
&lt;p&gt;The workshop will walk through the following topics.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Distributed hardware. A short introduction to clouds and supercomputers.&lt;/li&gt;
&lt;li&gt;Distributed software. Large distributed applications usually exploit task-based parallelism. Messaging is the way to make those tasks talk to each other. There are many different messaging strategies, protocols, transports, layers... Each one is suitable for a different case.&lt;/li&gt;
&lt;li&gt;Parallel algorithms. A short introduction about some algorithms that incorporate messaging.&lt;/li&gt;
&lt;li&gt;Threading and concurrency. If a task communicates and computes, it is doing two things at the same time, but it is not, since Python has a GIL...&lt;/li&gt;
&lt;li&gt;Management, service discovery, logging and availability. Managing tens, hundreds or thousands of tasks can be tricky. But Python has tools that may simplify the management of parallel applications.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry></feed>