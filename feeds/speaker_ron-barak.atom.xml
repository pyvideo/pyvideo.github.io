<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ron-barak.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-19T00:00:00+00:00</updated><entry><title>How to make Python perform like C</title><link href="https://pyvideo.org/pycon-israel-2016/how-to-make-python-perform-like-c.html" rel="alternate"></link><published>2016-09-19T00:00:00+00:00</published><updated>2016-09-19T00:00:00+00:00</updated><author><name>Ron Barak</name></author><id>tag:pyvideo.org,2016-09-19:pycon-israel-2016/how-to-make-python-perform-like-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will present several strategies and tools that will allow Python code to run as lower-level code. Will touch on JIT vs. AOT compilers, which are the task suitable to be compiled so as to perform faster than native Python? How can one annotate Python to speed up compiled Python code? Optionally (time permitting): writing Python modules in C or Fortran, and using libraries from C or Fortran in Python.&lt;/p&gt;
&lt;p&gt;Slides available here: How to make Python perform like C by Ron Barak&lt;/p&gt;
</summary></entry></feed>