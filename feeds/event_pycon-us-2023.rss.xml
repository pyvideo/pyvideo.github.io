<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyCon US 2023</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 23 Apr 2023 00:00:00 +0000</lastBuildDate><item><title>A pythonic full-text search</title><link>https://pyvideo.org/pycon-us-2023/a-pythonic-full-text-search.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;full-text search&lt;/strong&gt; on a website is the best way to make its
&lt;strong&gt;contents&lt;/strong&gt; easily accessible to &lt;strong&gt;users&lt;/strong&gt; because it returns better
results and is in fact used in &lt;em&gt;online search engines&lt;/em&gt; or &lt;em&gt;social
networks&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The implementation of full-text search can be complex and many adopt the
strategy of using &lt;strong&gt;dedicated search engines&lt;/strong&gt; in addition to the
&lt;strong&gt;database&lt;/strong&gt;, but in most cases this strategy turns out to be a big
problem of &lt;strong&gt;architecture&lt;/strong&gt; and &lt;strong&gt;performance&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this talk we'll see a &lt;strong&gt;pythonic&lt;/strong&gt; way to implement full-text search
on a website using only Django and PostgreSQL, taking advantage of all
the &lt;strong&gt;innovations&lt;/strong&gt; introduced in latest years, and we'll analyze the
&lt;strong&gt;problems&lt;/strong&gt; of using additional search engines with examples deriving
from my experience on &lt;em&gt;djangoproject.com&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Through this talk you can learn how to add a full-text search on your
&lt;strong&gt;website&lt;/strong&gt;, if it's based on &lt;strong&gt;Django&lt;/strong&gt; and &lt;strong&gt;PostgreSQL&lt;/strong&gt;, or you can
learn how to update the search function of your website if you use other
search engines.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/a-pythonic-full-text-search.html</guid><category>PyCon US 2023</category></item><item><title>An Overview of the Python Code Tool Landscape 2023</title><link>https://pyvideo.org/pycon-us-2023/an-overview-of-the-python-code-tool-landscape-2023.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linters, type checkers, style formatters, package linters, security
analysis, dead code removers, docstring formatters, code complexity
analyzers: There is a wealth of static code analysis tools in the Python
ecosystem. It's intimidating to start looking at them and easy to get
lost. What's the difference between Pyflakes, flake8, and autoflake? Or
between autopep8 and pep8-naming? This overview explains the different
kinds of static code analysis tools, what tools are out there (as of
2023), and how beginners can get started using these tools to write code
like pros. This talk also provides a beginner's introduction to type
hints in Python and the type checker tools available. There are too many
tools to describe in detail, but this talk does introduce the promising
newcomer Ruff, an extremely fast Python linter written in Rust.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Al Sweigart</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/an-overview-of-the-python-code-tool-landscape-2023.html</guid><category>PyCon US 2023</category></item><item><title>Carol Willing | Keynote</title><link>https://pyvideo.org/pycon-us-2023/carol-willing-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Carol Willing | Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carol Willing</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/carol-willing-keynote.html</guid><category>PyCon US 2023</category></item><item><title>Closing</title><link>https://pyvideo.org/pycon-us-2023/closing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Closing&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta Wijaya</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/closing.html</guid><category>PyCon US 2023</category></item><item><title>Community Service Awards &amp; Python Software Foundation Update</title><link>https://pyvideo.org/pycon-us-2023/community-service-awards-python-software-foundation-update.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Community Service Awards &amp;amp; Python Software Foundation Update&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deb Nicholson</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/community-service-awards-python-software-foundation-update.html</guid><category>PyCon US 2023</category></item><item><title>Cómo Python puede ayudar a monitorear gobiernos</title><link>https://pyvideo.org/pycon-us-2023/como-python-puede-ayudar-a-monitorear-gobiernos.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Con el riesgo inminente de la caída de las democracias y los constantes
ataques a los medios de comunicación, el acceso a la información se ha
vuelto cada vez más difícil. Como resultado, la sociedad civil y los
periodistas han estado buscando formas de garantizar que la sociedad no
se quede en la oscuridad y que el monitoreo del gobierno continúe.&lt;/p&gt;
&lt;p&gt;Con la popularización de Python en varias áreas profesionales, el
lenguaje se volvió cada vez más presente en la lucha por un gobierno más
abierto en Brasil, ya sea en la construcción de herramientas de
monitoreo o en el análisis de datos de una agencia gubernamental. Las
iniciativas provenientes de entidades gubernamentales también están
ayudando a hacer posible la transparencia.&lt;/p&gt;
&lt;p&gt;En esta charla, veremos ejemplos del uso de Python para monitorear al
gobierno brasileño y cómo el lenguaje fue fundamental para que la
sociedad brasileña no permaneciera en la oscuridad de la desinformación.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Judite Cypreste</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/como-python-puede-ayudar-a-monitorear-gobiernos.html</guid><category>PyCon US 2023</category></item><item><title>Getting Around the GIL: Parallelizing Python for Better Performance</title><link>https://pyvideo.org/pycon-us-2023/getting-around-the-gil-parallelizing-python-for-better-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the ever-present banes of a data scientist’s life is the constant
wait for the data processing code to finish executing. Slow code affects
almost every step of a typical data pipeline: data collection, data
pre-processing/parsing, feature engineering, etc. Many times, the
lengthy execution times force data scientists to work with only a subset
of data, depriving him/her of the insights and performance improvements
that could be obtained with a larger dataset. One of the tools that can
mitigate this problem and speed up data science pipelines (and CPU-bound
programs) is parallelization.&lt;/p&gt;
&lt;p&gt;Parallelization is a useful way to work around the limitations of the
Global Interpreter Lock (GIL), a key feature of Python that prevents
code from fully utilizing multiple processor cores and can impact
performance. In this session, we’ll walk through several ways to
parallelize Python code, depending on the specific needs of your program
and the type of parallelism you want to achieve.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alireza Farhidzadeh</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/getting-around-the-gil-parallelizing-python-for-better-performance.html</guid><category>PyCon US 2023</category></item><item><title>Guido van Rossum</title><link>https://pyvideo.org/pycon-us-2023/guido-van-rossum.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Guido van Rossum&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/guido-van-rossum.html</guid><category>PyCon US 2023</category></item><item><title>Margaret Mitchell | Keynote</title><link>https://pyvideo.org/pycon-us-2023/margaret-mitchell-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Margaret Mitchell | Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Margaret Mitchell</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/margaret-mitchell-keynote.html</guid><category>PyCon US 2023</category></item><item><title>MQTT: A Pythonic introduction to the protocol for connected devices</title><link>https://pyvideo.org/pycon-us-2023/mqtt-a-pythonic-introduction-to-the-protocol-for-connected-devices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MQTT is to connected devices what HTTP is to web applications. It is a
publish-subscribe protocol specifically designed for devices with
limited bandwidth and CPU. MQTT is widely used in home automation,
industrial automation, remote monitoring, and everywhere else where
machines talk to each other or to a server.&lt;/p&gt;
&lt;p&gt;This talk is an introduction to MQTT for Pythonistas. I’ll start with a
brief overview of basic concepts of the protocol. The rest of the
presentation will be a sequence of code examples in CPython and
Micropython/CircuitPython, building up to a demo with several devices
publishing data to each other. Along the way, you will see a few of the
most common tools for debugging MQTT communications.&lt;/p&gt;
&lt;p&gt;After attending this talk you will have a high level idea of Python use
cases in automation, seen some examples of coding Python for
microcontrollers, and know a whole lot more about four letters that look
like an acronym but aren’t actually one. No prior experience with
automation or microcontrollers is assumed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonas Neubert</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/mqtt-a-pythonic-introduction-to-the-protocol-for-connected-devices.html</guid><category>PyCon US 2023</category></item><item><title>Python on Android</title><link>https://pyvideo.org/pycon-us-2023/python-on-android.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By many measures, Android is the most widely-used operating system in
the world. But Python development on the platform remains quite rare.&lt;/p&gt;
&lt;p&gt;Fortunately there are several active projects working to improve this.
In this talk, you'll learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why Android support is important for the future of Python.&lt;/li&gt;
&lt;li&gt;How Android compares to other platforms, and the unique challenges it
presents.&lt;/li&gt;
&lt;li&gt;What's needed to make mobile Python development practical, including
build tools, GUI libraries, and binary package support.&lt;/li&gt;
&lt;li&gt;The available options for running Python on Android, and how to
choose which one is best for you.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Smith</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/python-on-android.html</guid><category>PyCon US 2023</category></item><item><title>Robyn: An async Python web framework with a Rust runtime</title><link>https://pyvideo.org/pycon-us-2023/robyn-an-async-python-web-framework-with-a-rust-runtime.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the rise of Rust bindings being used in the Python ecosystem, we
know that throughput efficiency is one of the top priority items in the
Python ecosystem.&lt;/p&gt;
&lt;p&gt;Inspired by the extensibility and ease of use of the Python Web
ecosystem and the increase of performance by using Rust as a core, Robyn
was created.&lt;/p&gt;
&lt;p&gt;Robyn is one of the fastest Python web frameworks in the current Python
web ecosystem. With a runtime written in Rust, Robyn achieves
near-native rust performance while still having the ease of writing
Python code.&lt;/p&gt;
&lt;p&gt;This talk will focus on the increased involvement of Rust in the Python
ecosystem. It will also demonstrate why Robyn was created, the technical
decisions behind Robyn, the increased performance by using the Rust
runtime, how to use Robyn to develop web apps, and most importantly, how
the community is helping Robyn grow!&lt;/p&gt;
&lt;p&gt;I will briefly demonstrate my experience and challenges of building a
community around the project and how it allowed Robyn to ensure a smooth
sail even in turbulent situations. I shall also share my future plans
for Robyn.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sanskar Jethi</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/robyn-an-async-python-web-framework-with-a-rust-runtime.html</guid><category>PyCon US 2023</category></item><item><title>Skynet 101 How to Keep Your Machine Learning Code From Getting Away From You</title><link>https://pyvideo.org/pycon-us-2023/skynet-101-how-to-keep-your-machine-learning-code-from-getting-away-from-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine&amp;nbsp;learning can feel pretty mysterious at times, but as python
developers you have so many of the tools you need to be a part of it!
With basic python experience you can use libraries like pandas and tools
like Jupyter Notebooks to analyze and manipulate data sets. By apply
Test-Driven Development practices to you analysis you can feel confident
about what your building.&lt;/p&gt;
&lt;p&gt;You can build well developed and well tested cleaning scripts and
functions using pytest and use these functions in your notebooks and
scripts.&lt;/p&gt;
&lt;p&gt;You can even build simple recommendation engines using libraries such as
Scikit Learn!&lt;/p&gt;
&lt;p&gt;As a part of this talk we will walk through the process of data
analysis, data cleaning, feature preparation, and building a simple
movie recommendation engine.&amp;nbsp; As we move through those steps, my main
focus is to teach engineers how they can incorporate Test-Driven
Development into the data cleaning process and the building of our
engine.&amp;nbsp; I will also walk through strategies for data analysis and
explain at a high level a couple ML concepts that we can use.&lt;/p&gt;
&lt;p&gt;As participants get the chance to see live examples of how to use Test
Driven Development in data analysis and machine learning they can get a
handle on some core concepts and learn how to ensure quality in the code
that they produce.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elizabeth Johnson</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/skynet-101-how-to-keep-your-machine-learning-code-from-getting-away-from-you.html</guid><category>PyCon US 2023</category></item><item><title>Supercharging Pipeline Efficiency with ML Performance Prediction</title><link>https://pyvideo.org/pycon-us-2023/supercharging-pipeline-efficiency-with-ml-performance-prediction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To process our customers' data, Singular's pipeline runs hundreds of
thousands of daily tasks, each with a different processing time and
resource requirements. We deal with this scale by using Celery and
Kubernetes as our tasks infrastructure, letting us allocate dedicated
workers and queues to each type of task based on its requirements.
Originally, this was configured manually.&lt;/p&gt;
&lt;p&gt;As our customer base grew, we noticed that heavier and longer tasks were
grabbing all the resources and causing unacceptable queues in our
pipeline. Moreover, some of the heavier tasks required significantly
more memory, leading to OOM kills and infrastructure issues.&lt;/p&gt;
&lt;p&gt;If we could classify tasks by their expected duration and memory
requirements, we could have segregated tasks in Celery based on these
properties and thus minimized interruptions to the rest of the pipeline.
However, the variance in the size and granularity of the fetched data
made it impossible to classify if a task was about to take one minute or
one hour.&lt;/p&gt;
&lt;p&gt;Our challenge was: how do we categorize these tasks, accurately and
automatically? To solve the issue we implemented a machine-learning
model that could predict the expected duration and memory usage of a
given task. Using Celery’s advanced task routing capabilities, we could
then dynamically configure different task queues based on the model's
prediction.&lt;/p&gt;
&lt;p&gt;This raised another challenge - how could we use the classified queues
in the best way? Configuring workers statically for each queue would be
inadequate at scale. We utilized Kubernetes’ vertical and horizontal
autoscaling capabilities to dynamically allocate workers for each
classified queue based on its length. This improved our ability to
respond to pipeline load automatically, increasing performance and
availability. Additionally, we were able to deploy shorter-lived workers
on AWS Spot instances, giving us higher performance while lowering cloud
costs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Boaz Wiesner</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/supercharging-pipeline-efficiency-with-ml-performance-prediction.html</guid><category>PyCon US 2023</category></item><item><title>The wheelhouse of horrors</title><link>https://pyvideo.org/pycon-us-2023/the-wheelhouse-of-horrors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might be surprised to learn that, besides naming and cache
invalidation problems, building a binary wheel for a Python extension is
one of the hardest problems in computer science. Or more precisely,
building that binary wheel correctly. Lucky for us, a few amazing
community-led projects hide all that complexity from us, so we can
instead focus on shipping and using Python code.&lt;/p&gt;
&lt;p&gt;One of Python's strong suits is its ability to use native C and C++
code, which is a big reason why it’s the number one language for date
science and machine learning applications. However, distributing native
code in Python libraries is far from trivial: subtle issues in the build
process can result in runtime issues that are extremely difficult to
track down.&lt;/p&gt;
&lt;p&gt;This talk will showcase some notable examples of how things can go
wrong, while also helping users and maintainers recognise these typical
error scenarios. We will learn how to avoid these issues and what users
can do when they encounter such issues when using a library.&lt;/p&gt;
&lt;p&gt;The audience will learn about the manylinux standard and its role in
standardizing Linux platform wheels. We will also take a look at the
cibuildwheel project, which offers library authors a simple solution to
automate the building and distribution of manylinux wheels.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laszlo Kiss Kollar</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/the-wheelhouse-of-horrors.html</guid><category>PyCon US 2023</category></item><item><title>Using Python to Help the Unhoused</title><link>https://pyvideo.org/pycon-us-2023/using-python-to-help-the-unhoused.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How a group of volunteers from around the globe use Python to help an
NGO in Victoria, BC, Canada to help the unhoused. By building a tool to
find social media activity on unhoused in the Capitol Region, the NGO
can use a dashboard of results to know where to move their limited
resources.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Weissbock</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/using-python-to-help-the-unhoused.html</guid><category>PyCon US 2023</category></item><item><title>What's old is new again: using Python's import machinery to handle API deprecations</title><link>https://pyvideo.org/pycon-us-2023/whats-old-is-new-again-using-pythons-import-machinery-to-handle-api-deprecations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For any software project with an established user base, introducing
breaking changes in its API can be daunting. To minimize disruptions for
users, projects are incentivized to plan these transitions carefully,
which may include &lt;em&gt;API deprecations&lt;/em&gt;, where messages warning users of
upcoming changes are added to the affected APIs while they’re still
functional. However, this imposes extra workload for the project’s
maintainers, as both old and new versions of the API must be kept
functional throughout the transition period.&lt;/p&gt;
&lt;p&gt;As a maintainer of a software project undergoing preparations for a
major version release, I recently found myself in a similar situation:
our goal was to provide backward compatibility with the previous version
for as long as possible, without impacting the development of new
features. Practically, this included dealing with a radical
restructuring of the Python codebase, resulting in hundreds of modules
being relocated, split, or removed. Was there any way to ensure that the
deprecated import paths could still be used without errors, without
having to maintain two separate versions of the package?&lt;/p&gt;
&lt;p&gt;Fortunately, the answer to “can you do that in Python?” is more often
than not “yes!”; for this particular case, the path to success turned
out to be through the &lt;tt class="docutils literal"&gt;importlib&lt;/tt&gt; package of the standard library. For
something so close to Python’s internals, &lt;tt class="docutils literal"&gt;importlib&lt;/tt&gt; is both
accessible and extensible, allowing ordinary code to customize almost
completely how and what modules can be imported---including modules that
are not there anymore!&lt;/p&gt;
&lt;p&gt;This intermediate-level talk will present a complete solution based on
Python’s importlib machinery that allows to redirect modules or module
attributes with deprecations in a simple, robust, and scalable way.
While the context of the solution is especially relevant for project
maintainers, the focus is on importlib techniques that are generally
applicable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ludovico Bianchi</dc:creator><pubDate>Sun, 23 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-23:/pycon-us-2023/whats-old-is-new-again-using-pythons-import-machinery-to-handle-api-deprecations.html</guid><category>PyCon US 2023</category></item><item><title>10 Ways To Shoot Yourself In The Foot With Tests</title><link>https://pyvideo.org/pycon-us-2023/10-ways-to-shoot-yourself-in-the-foot-with-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests are great.&lt;/p&gt;
&lt;p&gt;Except when they’re not.&lt;/p&gt;
&lt;p&gt;Almost every developer who’s worked with tests has encountered a test
suite that caused a lot of pain.&lt;/p&gt;
&lt;p&gt;Some of them just don’t protect us when we need them, some are flaky,
some keep breaking because of unrelated changes, some take hours to
debug whenever they fail.&lt;/p&gt;
&lt;p&gt;And while every company is different, there are definitely patterns. A
lot of these problems are the result of some common pitfalls that trap
many teams. These pitfalls might be common, but they're not easy to spot
- I’ve seen all of them happen in strong, capable, experienced teams.
Most of these I fell into myself at least once.&lt;/p&gt;
&lt;p&gt;In this session, we'll take a look at a selection of problematic testing
choices, with examples that show these in the context of common Python
frameworks and libraries. We'll discuss how to identify them, what
problems they might cause and what alternatives we have so we can save
ourselves the pain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shai Geva</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/10-ways-to-shoot-yourself-in-the-foot-with-tests.html</guid><category>PyCon US 2023</category></item><item><title>Approaches to Fairness and Bias Mitigation in Natural Language Processing</title><link>https://pyvideo.org/pycon-us-2023/approaches-to-fairness-and-bias-mitigation-in-natural-language-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the advent of large pre-trained language models like GPT, BERT,
etc., and their usage in almost all natural language understanding and
generation applications, it is important that we evaluate the fairness
and mitigate biases of these models. Since these models are fed with
human-generated data (mostly from the web), they are exposed to human
biases. Hence, they carry forward and also amplify these biases in their
results. In this talk, we will discuss the motivation for fairness and
bias research in NLP and discuss different approaches used to detect and
mitigate biases. We will also explore some available tools to include in
your models to ensure fairness.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Angana Borah</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/approaches-to-fairness-and-bias-mitigation-in-natural-language-processing.html</guid><category>PyCon US 2023</category></item><item><title>Biohacking con Python: cómo convertirse en el señor Burns fluorescente</title><link>https://pyvideo.org/pycon-us-2023/biohacking-con-python-como-convertirse-en-el-senor-burns-fluorescente.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La charla abrirá con una breve introducción al biohacking, seguida por
una mini clase (súper leve, lo prometo) de teoría genética con el
propósito de entender perfectamente la metodología del caso práctico.
Éste es el verdadero centro de la charla y consistirá en editar nuestro
propio ADN con CRISPR (una herramienta de corte y empalme biológico) y
un script de Python (que diseñará las secuencias genéticas necesarias
para el experimento) para biohackearnos ciertos genes y convertirnos en
el señor Burns fluorescente. Todo esto nos servirá para ver el tremendo
potencial de la sinergia entre la ingeniería genética y Python, no sólo
en ejemplos cómicos como el ya mencionado, sino también en el ámbito
sanitario como tratamiento de enfermedades.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina Moro López</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/biohacking-con-python-como-convertirse-en-el-senor-burns-fluorescente.html</guid><category>PyCon US 2023</category></item><item><title>Catching Tensor Shape Errors without Running Your Code</title><link>https://pyvideo.org/pycon-us-2023/catching-tensor-shape-errors-without-running-your-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML developers are often slowed down by errors because of long iteration
times and difficulty in debugging ML code. &lt;em&gt;Tensor shape mismatches&lt;/em&gt; are
some of the most common errors for both new and experienced ML
developers, occurring when an operation is fed a multi-dimensional array
(tensor) with the wrong dimensions (shape).&lt;/p&gt;
&lt;p&gt;In this talk, we will show that it is possible to catch Tensor shape
mismatches without running your code by (a) representing the symbolic
shape of a tensor (e.g., H x W x B) with explicit type annotations,
called &lt;em&gt;shape types&lt;/em&gt;, and (b) using a type checker to catch mismatches.
We will also show how shape types can help us understand code faster by
allowing us to see the shape of a tensor variable right in the IDE.
Finally, we will describe how shape types can be adopted gradually in an
existing ML project, talk about support for features such as
broadcasting (in NumPy, PyTorch, etc.), and walk through the limitations
of this new concept of shape types.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pradeep Kumar Srinivasan</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/catching-tensor-shape-errors-without-running-your-code.html</guid><category>PyCon US 2023</category></item><item><title>Cooperación internacional en la comunidad de Python</title><link>https://pyvideo.org/pycon-us-2023/cooperacion-internacional-en-la-comunidad-de-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Como dice la famosa frase de Brett Cannon, algunas personas “vienen por
el lenguage, pero se quedan por la comunidad”. Por lo general, empezamos
participando en meetups locales o grupos enfocados como PyLadies, y a
veces queremos ayudar, pero no estamos exactamente seguros de cómo
hacerlo. Y yendo aún existe la posibilidad de extender nuestro trabajo
no solo localmente sino también ayudando a las comunidades de todo el
mundo. En esta charla, discutiremos las formas en que podemos cooperar
dentro de la comunidad de Python en movimientos que se pueden realizar
tanto a nivel local como fuera de nuestro país de forma voluntaria. Para
empezar, discutiremos qué es contribuir a la comunidad y las diferentes
formas en que puede contribuir. Además, explicaremos un poco sobre
Python Software Foundation y sus grupos de trabajo, el papel de estos
grupos y cómo proceder si está interesado en ponerse en contacto y
ayudar. Destacaremos el trabajo del grupo de Diversidad e Inclusión y
también el grupo de trabajo de traducción y su importancia para la
comunidad en general. También se presentarán algunos trabajos que están
en proceso, como el trabajo masivo de nuestros colegas latinoamericanos
con Python en Español, que tiene un grupo de Discord y un grupo de
Telegram para estudiar y cooperar juntos. Otro caso de éxito que se
presentará es que el encuentro brasileño Python Python Brasil se esforzó
durante 2020 y 2021 debido a la cooperación internacional: una mujer
brasileña que coopera con EuroPython 2020 nos abrió el camino.
Hablaremos de lo importante que es ver a alguien como nosotros, que
habla el mismo idioma que nosotros, ocupando estos espacios y llevando
nuestras inquietudes a otras mesas de discusión. Y que si no hay alguien
que se parezca a nosotros, hay un lugar que podemos ocupar.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Débora Azevedo</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/cooperacion-internacional-en-la-comunidad-de-python.html</guid><category>PyCon US 2023</category></item><item><title>Creating USB gadgets with Python</title><link>https://pyvideo.org/pycon-us-2023/creating-usb-gadgets-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;USB is with us for 26 years. Connecting USB devices to our computers,
TVs, phones and many other devices became as natural as breathing.
Throughout these years several mechanism have been developed in Linux to
facilitate the process of creating USB devices.&lt;/p&gt;
&lt;p&gt;In this talk I'd like to take you to the other end of the USB plug and
show you how to &lt;strong&gt;create your own USB device with Python&lt;/strong&gt;. I'll take
you through the process of turning RaspberryPi Zero into a USB keyboard.
I'll show you how to use Python to interact with Linux system internals.
We'll find out how to use Python to facilitate and automate the process
of device creation and configuration. Finally, I'll present the
implementation of the logic of a Linux based USB keyboard-like device in
Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Gałka</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/creating-usb-gadgets-with-python.html</guid><category>PyCon US 2023</category></item><item><title>Diversity and Inclusion Panel</title><link>https://pyvideo.org/pycon-us-2023/diversity-and-inclusion-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity and Inclusion Panel&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Débora Azevedo</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/diversity-and-inclusion-panel.html</guid><category>PyCon US 2023</category></item><item><title>How memory profilers work</title><link>https://pyvideo.org/pycon-us-2023/how-memory-profilers-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;These days, it is very easy for applications to run out of memory due to
the vast amounts of data they need to process. While Python makes it
very easy to get something up and running, the highly dynamic nature of
the language abstracts memory management away from us and makes it very
difficult to understand what is going on when we run out of memory or
when we have memory leaks. This is where memory profilers come into
play.&lt;/p&gt;
&lt;p&gt;Memory profilers are tools that allow us to understand how our
applications are using memory. Not only can they help us diagnose why
our programs are using so much memory, but also they can also help us
optimize our code to be faster by using smarter allocation patterns.&lt;/p&gt;
&lt;p&gt;Being able to understand how to use memory profilers effectively is an
essential skill for any Python developer, especially those working on
programs that involve the transformation of large amounts of data,
large-scale applications, or long-running processes.&lt;/p&gt;
&lt;p&gt;This talk will cover the basics of memory profilers, how they work, and
how to use them effectively. We will cover the different types of memory
profilers, the different kinds of allocations a Python program can
perform, and how to use memory profilers effectively to understand what
is going on in our programs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-memory-profilers-work.html</guid><category>PyCon US 2023</category></item><item><title>How Pydantic V2 leverages Rust's Superpowers</title><link>https://pyvideo.org/pycon-us-2023/how-pydantic-v2-leverages-rusts-superpowers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt; is a data validation
library for Python that has seen massive adoption over the last few
years - it is estimated that Pydantic is now used by about 10% of
professional web developers!&lt;/p&gt;
&lt;p&gt;Over the last year I've been working full time to rebuild Pydantic from
the ground up, using Rust for virtually all the validation and
serialization logic. Pydantic V2, with these changes included, has
recently been released.&lt;/p&gt;
&lt;p&gt;In this talk I will give a brief introduction to Pydantic and the new
features in Pydantic V2 before diving into how the use of Rust has
allowed us to completely change the architecture of Pydantic to make it
easier to extend and maintain while also improving performance
significantly.&lt;/p&gt;
&lt;p&gt;The majority of the talk will be devoted to using examples from the
pydantic V2 code base to demonstrate the advantages (and disadvantages)
of writing libraries like Pydantic in Rust. I'll cover the real life
trade-offs and design decisions you might face while implementing logic
in Rust rather than Python.&lt;/p&gt;
&lt;p&gt;This talk should be interesting to any Python developer who's interested
in combining Python and Rust - no knowledge of Rust or Pydantic is
required. However if you'd like to get some context or learn more about
the topics discussed, here are some useful resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pydantic-docs.helpmanual.io/blog/pydantic-v2/"&gt;Pydantic V2
Plan&lt;/a&gt; -
blog post about the plan for Pydantic V2&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pydantic/pydantic-core"&gt;pydantic-core&lt;/a&gt; - the
python package that provides Rust logic in pydantic&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyo3.rs/"&gt;PyO3 docs&lt;/a&gt; - the amazing library that allows
Rust to be embedded in Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=FolV-xUD3Ko"&gt;Build your Python Extensions with Rust! by Paul
Ganssle&lt;/a&gt; - good intro
to building Python extensions in Rust&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Colvin</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-pydantic-v2-leverages-rusts-superpowers.html</guid><category>PyCon US 2023</category></item><item><title>How To Keep A Secret</title><link>https://pyvideo.org/pycon-us-2023/how-to-keep-a-secret.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API keys, passwords, auth tokens, cryptographic secrets… in the era of
cloud-based development, we've all got a bunch of them. But where do you
put them? How do you keep them safe? And how can you access them
conveniently from your Python code, both in development and production,
without putting them at risk?&lt;/p&gt;
&lt;p&gt;In this talk, I'll review information security best practices for
managing secrets as well as Python-specific tips and tricks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glyph</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-to-keep-a-secret.html</guid><category>PyCon US 2023</category></item><item><title>How we are making CPython faster. Past, present and future.</title><link>https://pyvideo.org/pycon-us-2023/how-we-are-making-cpython-faster-past-present-and-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of you will will have heard that Python 3.11 is considerably faster
than 3.10.&lt;/p&gt;
&lt;p&gt;How did we do that? How are we going to make 3.12 and following releases
even faster?&lt;/p&gt;
&lt;p&gt;In this talk, I will present a high level overview of the approach we
are taking to speeding up CPython.&lt;/p&gt;
&lt;p&gt;Starting with a simple overview of some basic principles, I will show
how we can apply those to streamline and speedup CPython.&lt;/p&gt;
&lt;p&gt;I will try to avoid computer science and software engineering
terminology, in favor of diagrams, a few simple examples, and some
high-school math.&lt;/p&gt;
&lt;p&gt;Finally, I make some estimates about how much faster the next few
releases of CPython will be, and how much faster Python could go.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shannon</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-we-are-making-cpython-faster-past-present-and-future.html</guid><category>PyCon US 2023</category></item><item><title>Inside your web framework: intro to the ASGI spec, middleware and apps</title><link>https://pyvideo.org/pycon-us-2023/inside-your-web-framework-intro-to-the-asgi-spec-middleware-and-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do FastAPI and Django have in common? They both use ASGI under the
hood. ASGI, which stands for Asynchronous Server Gateway Interface, is a
specification and API for asynchronous, event-driven web applications.
The goal of this talk is to peel back the curtain on the internals of
this specification and empower you to debug ASGI apps, write custom ASGI
middleware, and simplify application lifecycles and serving.&lt;/p&gt;
&lt;p&gt;We will begin by discussing the basics of the ASGI specification and how
it works. Then, we will move on to writing a simple ASGI app using pure,
hand-crafted Python, without any frameworks or libraries. After that, we
will cover ASGI middleware, which is a powerful tool that allows us to
modify the behavior of our ASGI apps without changing the underlying
code. We will show how to write custom middleware and how to use it to
add features such as authentication or request body processing. Finally,
we will discuss the serving of ASGI applications, focusing on how to use
Uvicorn programmatically and take control of your event loop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Garcia Badaracco</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/inside-your-web-framework-intro-to-the-asgi-spec-middleware-and-apps.html</guid><category>PyCon US 2023</category></item><item><title>Interfaces Low-code con QT y su integración con Python.</title><link>https://pyvideo.org/pycon-us-2023/interfaces-low-code-con-qt-y-su-integracion-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta charla tratara de como &lt;strong&gt;diseñar interfaces low-code del framework
QT&lt;/strong&gt; de manera visual, por medio de &lt;strong&gt;Qt Designer&lt;/strong&gt;, y como transformar
los archivos generados por este programa (.UI) a código Python (.py), sí
que existe necesidad de modificar algo a nivel de código, o simplemente
&lt;strong&gt;integrar estos archivos UI, con el código Python&lt;/strong&gt;, por medio de un
ejemplo de una aplicación control de desempeño empresarial, programada
100% en Python. La charla esta dedicadas a todas esas personas, que como
yo necesitamos &lt;strong&gt;tener el control de las interfaces totalmente visual&lt;/strong&gt;,
que le dificulta mucho programar a nivel de código dichas interfaces
(por tema de control de pixeles, botones, funcionalidades, etc). La
charla será, para &lt;strong&gt;todo tipo de público&lt;/strong&gt;, debido a la utilización de
poco código, para tener resultados satisfactorios, pero igual se
incluirá, modificaciones de esté para usuarios un poco mas avanzados.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Hernández Méndez</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/interfaces-low-code-con-qt-y-su-integracion-con-python.html</guid><category>PyCon US 2023</category></item><item><title>It might look normal but this distribution will ruin your stats</title><link>https://pyvideo.org/pycon-us-2023/it-might-look-normal-but-this-distribution-will-ruin-your-stats.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Some refer to the normal distribution as &amp;quot;God's curve&amp;quot; because of its
supposed presence in nature when enough observations are collected. But
what if I told you that there is a non-normal distribution that looks so
normal that even experts can't see the difference? And beyond looks,
it's a curve that is both prevalent in nature and likely to cause false
negatives when testing hypotheses.&lt;/p&gt;
&lt;p&gt;If you use Python for data analysis (e.g., summaries, explanations,
predictions) this talk will (1) introduce you to surprising results and
(2) provide you with the tools to overcome limitations with traditional
hypothesis testing approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;(5 min) This talk will begin with a short background on the normal
curve and how it compares visually to a contaminated normal curve.
This set's the stage for a &lt;em&gt;live and interactive&lt;/em&gt; demonstration.&lt;/li&gt;
&lt;li&gt;(10 min) During the live demo, I'll use simple terms and
easy-to-understand code to illustrate the effect of contamination on
common statistics (e.g., mean, traditional hypothesis tests).
Participants will be able to interact with the code by clicking a
link.&lt;/li&gt;
&lt;li&gt;(10min) I will conclude by introducing Hypothesize: a &lt;a class="reference external" href="https://joss.theoj.org/papers/10.21105/joss.02241"&gt;peer-reviewed,
open-source Python library for robust
statistics&lt;/a&gt;
based on Wilcox's package in R.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hypothesize is the only Python library dedicated solely to robust
statistics—and it is based on decades of curated research on statistics.
Using modern resampling techniques and robust measures of central
tendency, Hypothesize helps researchers minimize the effects of
contamination and skew in their populations. These methods &lt;em&gt;do not
assume normality&lt;/em&gt; and are important tools for data scientists to have in
their repertoire—they substantially improve power and accuracy when
making predictions and explaining effects.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allan Campopiano</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/it-might-look-normal-but-this-distribution-will-ruin-your-stats.html</guid><category>PyCon US 2023</category></item><item><title>Iteration toward Transformation of the Python Documentation</title><link>https://pyvideo.org/pycon-us-2023/iteration-toward-transformation-of-the-python-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the tremendous growth of the Python ecosystem, attracting an
ever-wider audience of users with a variety of backgrounds and
experience levels, it is more critical than ever that its documentation
better serve the needs of its diverse array of readers. We formally
introduce the Python Docs Community—the self-organized, Python Steering
Council-endorsed collective working toward this goal—and provide a look
at the major user-facing improvements implemented, underway and coming
soon for the core documentation, devguide, PEPs and more.&lt;/p&gt;
&lt;p&gt;Along the way, we'll share the key insights and lessons learned from our
ongoing projects, and how they can help &lt;em&gt;you&lt;/em&gt; improve the documentation
of your own projects. And if this sounds like something you might want
to be a part of, we'll share how you can engage with us and your fellow
documentarians through our community platforms and resources.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C.A.M. Gerlach</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/iteration-toward-transformation-of-the-python-documentation.html</guid><category>PyCon US 2023</category></item><item><title>Jaguares y serpientes</title><link>https://pyvideo.org/pycon-us-2023/jaguares-y-serpientes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¿Es posible juntar la necesidad de conservar al jaguar y usar Python
como herramienta para lograrlo?&lt;/p&gt;
&lt;p&gt;Sí, gracias a los procesos de telemetría, nos podemos permitir hacer el
seguimiento de individuos a distancia brindando información imposible de
recopilar en primera persona, tales como geoposición, velocidad,
frecuencia cardiaca, temperatura corporal y altitud, entre otras. Pero
te preguntarás en donde entra Python en todo esto, es por ello, que en
esta charla aprenderemos a como condensar, categorizar, y cuestionar los
diferentes datos del dominio ambiental a un modelo entendible para los
humanos y que sea capaz de ser procesado por Python.&lt;/p&gt;
&lt;p&gt;Usaremos ArcPy (Paquete de Python para ejecutar funciones de índole
geográfico dentro de ArcGis Pro) para procesar los datos obtenidos
mediante la telemetría y realizar análisis geográficos que nos
permitirán entender el comportamiento del jaguar y si es posible su
conservación.&lt;/p&gt;
&lt;p&gt;Si lo tuyo son los animales, Python y un poco de conservación, esta
charla es un buen punto de inicio.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicole Franco Leon</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/jaguares-y-serpientes.html</guid><category>PyCon US 2023</category></item><item><title>James Powell | Keynote</title><link>https://pyvideo.org/pycon-us-2023/james-powell-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell | Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/james-powell-keynote.html</guid><category>PyCon US 2023</category></item><item><title>Lightning Talks - April 22, 5pm</title><link>https://pyvideo.org/pycon-us-2023/lightning-talks-april-22-5pm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/lightning-talks-april-22-5pm.html</guid><category>PyCon US 2023</category></item><item><title>Lightning Talks - April 22, 8am</title><link>https://pyvideo.org/pycon-us-2023/lightning-talks-april-22-8am.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/lightning-talks-april-22-8am.html</guid><category>PyCon US 2023</category></item><item><title>Lightning Talks - April 23, 8am</title><link>https://pyvideo.org/pycon-us-2023/lightning-talks-april-23-8am.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/lightning-talks-april-23-8am.html</guid><category>PyCon US 2023</category></item><item><title>Manage your SCM security using Python Open Policy Agent (OPA) Client</title><link>https://pyvideo.org/pycon-us-2023/manage-your-scm-security-using-python-open-policy-agent-opa-client.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will explain using an Open Policy Agent (OPA) to ensure that
governance, compliance, and security controls are implemented in the
development process. The domain-agnostic nature of Open Policy Agent
makes it well-suited for policy management and evaluation for tasks like
that. The Implementation example will be developing a solution for
managing SCM (Source Control Management) security at any organization or
project's whole CI/CD pipeline. This part of the talk aims to
demonstrate how to use Python Open Policy Agent (OPA) Client and build
policies to verify the security of SCM (Gitlab or Github)
organization/repositories/user accounts. The good practices to automate
those Policies to Satisfy Common Concerns will be covered in the
presentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">natalie serebryakova</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/manage-your-scm-security-using-python-open-policy-agent-opa-client.html</guid><category>PyCon US 2023</category></item><item><title>Oh no! My regex is causing a Denial of Service! What can I do about it?</title><link>https://pyvideo.org/pycon-us-2023/oh-no-my-regex-is-causing-a-denial-of-service-what-can-i-do-about-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every modern programming language supports regular expressions. Python
uses a backtracking engine to match developer-defined expressions
against a wide range of input. Under certain circumstances, backtracking
can lead to performance issues, and in extreme cases a denial of service
(ReDoS).&lt;/p&gt;
&lt;p&gt;We will use descriptive examples to demonstrate the core issue, what to
look for to detect problematic expressions, as well as how static
analysis can help in this context. We will look at techniques to improve
regular expression performance and defend against malicious inputs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guillaume Dequenne</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/oh-no-my-regex-is-causing-a-denial-of-service-what-can-i-do-about-it.html</guid><category>PyCon US 2023</category></item><item><title>Orcha 🐳: Procesamiento Masivo Paralelo (MPP) y diseño de APIs</title><link>https://pyvideo.org/pycon-us-2023/orcha-procesamiento-masivo-paralelo-mpp-y-diseno-de-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El &lt;strong&gt;CI&lt;/strong&gt; es fundamental en el desarrollo de productos hoy en día y uno
de sus pilares básicos es la ejecución de tests. Sin embargo, a medida
que el producto madura la cantidad de tests aumenta y con ello el tiempo
que tardan en completarse. Para tener &lt;em&gt;feedback&lt;/em&gt; lo antes posible, ¿cómo
se maquetan las pruebas de forma eficiente?&lt;/p&gt;
&lt;p&gt;El problema es aún más acusado cuando se cuenta con multitud de
dispositivos y versiones en desarrollo. En particular, con dos
servidores distriubyéndose carga de tests, el tiempo total de ejecución
alcanzaba las &lt;strong&gt;15 horas&lt;/strong&gt; probando únicamente dos versiones.&lt;/p&gt;
&lt;p&gt;Es imperativo contar con una herramienta que permita paralelizar las
pruebas de forma masiva, aprovechando al máximo los recursos
disponibles. Además, es necesario que dicha herramienta sea lo
suficientemente flexible como para soportar la infraestructura actual y
permita expandir el tipo de infraestrucuras de tests.&lt;/p&gt;
&lt;p&gt;En esta charla vamos a explorar el diseño de &lt;strong&gt;Orcha&lt;/strong&gt; (la herramienta
de orquestración), la API para extender su funcionalidad y la necesidad
de tener un usuario dedicado.&lt;/p&gt;
&lt;p&gt;La charla está orientada a usuarios intermedio-avanzados con
familiaridad con el módulo
&lt;tt class="docutils literal"&gt;`multiprocessing&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/multiprocessing.html"&gt;https://docs.python.org/3/library/multiprocessing.html&lt;/a&gt;&amp;gt;`__.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Javier Alonso</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/orcha-procesamiento-masivo-paralelo-mpp-y-diseno-de-apis.html</guid><category>PyCon US 2023</category></item><item><title>Plug life into your codebase: Making an established Python codebase pluggable</title><link>https://pyvideo.org/pycon-us-2023/plug-life-into-your-codebase-making-an-established-python-codebase-pluggable.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You will learn about the
&lt;a class="reference external" href="https://pluggy.readthedocs.io/en/stable/index.html"&gt;pluggy&lt;/a&gt; Python
framework and how it can be used to make your codebase plugin-friendly.
As a real-life example, you will also learn about how the 10 year old
conda codebase has recently gotten new life injected into it via a
plugin API.&lt;/p&gt;
&lt;p&gt;DETAILED ABSTRACT&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What is a plugin?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A “plugin” is a customization or extra feature that is compatible with
and discoverable by a particular piece of software. It is not part of
the default codebase nor is it necessarily distributed as a default part
of the software itself.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What is pluggy and how can it be used?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://pluggy.readthedocs.io/en/stable/index.html"&gt;pluggy&lt;/a&gt;
Python framework (used by other projects such as
&lt;a class="reference external" href="https://docs.pytest.org/en/7.1.x/contents.html"&gt;pytest&lt;/a&gt;,
&lt;a class="reference external" href="https://tox.wiki/en/latest/"&gt;tox&lt;/a&gt;, and
&lt;a class="reference external" href="https://devpi.net/docs/devpi/devpi/latest/+d/userman/devpi_indices.html"&gt;devpi&lt;/a&gt;)
is a great tool for incorporating a new plugin system. It provides both
developers and software users with the ability to extend or modify the
behavior of a Python program by enabling function hooking so that you
can build pluggable systems with minimal fuss.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A real world example: Conda&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How did conda incorporate a new plugin system for new features and
refactors? Because of how pluggy works, the conda team’s developers
created plugins simply by defining “hooks” and registering the custom
plugins under the “conda” entry point namespace.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Conclusion: What other exciting things can be created with plugins?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Functionalities such as: - Authentication and authorization - Different
storage backends (e.g., S3 buckets, etc.) - Development environment
integrations (e.g., different shells) - Programming language support -
Code editor integrations …and more are all possible to implement via a
plugin system!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bianca Henderson</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/plug-life-into-your-codebase-making-an-established-python-codebase-pluggable.html</guid><category>PyCon US 2023</category></item><item><title>pyproject.toml, packaging, and you</title><link>https://pyvideo.org/pycon-us-2023/pyprojecttoml-packaging-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is pyproject.toml? What is it good for?&lt;/p&gt;
&lt;p&gt;The talk will cover the basic format and extensibility of
pyproject.toml. It will show how it is extensible by showing how a
couple of tools integrate with it. Then the talk will cover how to use
pyproject.toml as the source of truth for packaging your Python project
with setuptools. Special attention will be given to integration with
setuptools plugins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/pyprojecttoml-packaging-and-you.html</guid><category>PyCon US 2023</category></item><item><title>PyScript and the magic of Python in the browser</title><link>https://pyvideo.org/pycon-us-2023/pyscript-and-the-magic-of-python-in-the-browser.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A year after its announcement, PyScript is a very different project.
From major performance improvements to great plugins, PyScript
applications allow a new way to create fun and educational opportunities
that were not possible until now. This talk summarizes the work done
over the past year, and what you might expect in the future.&lt;/p&gt;
&lt;div class="section" id="in-this-talk-i-will"&gt;
&lt;h4&gt;In this talk I will:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Give a quick overview of what PyScript is&lt;/li&gt;
&lt;li&gt;Talk about features and changes introduced this year:&lt;/li&gt;
&lt;li&gt;Support for the blazing fast MicroPython interpreter&lt;/li&gt;
&lt;li&gt;Powerful Plugins System (support for Python and Javascript)&lt;/li&gt;
&lt;li&gt;Much improved Pythonic Dom interface&lt;/li&gt;
&lt;li&gt;Improved support for data&lt;/li&gt;
&lt;li&gt;Execution in web workers&lt;/li&gt;
&lt;li&gt;Many amazing plugins!&lt;/li&gt;
&lt;li&gt;Much more…&lt;/li&gt;
&lt;li&gt;Show how to create PyScript applications [running on the browser] and
leverage the new possibilities that the web and the browser provide
to the Python ecosystem&lt;/li&gt;
&lt;li&gt;Live demo amazing [PyScript] web applications running Python on the
browser&lt;/li&gt;
&lt;li&gt;Give you a sneak-preview of some upcoming features&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-you-expect"&gt;
&lt;h4&gt;What should you expect?&lt;/h4&gt;
&lt;p&gt;Fun! Yes, I promise we’ll make it fun :) To walk away with a good
understanding of how to write a PyScript application To have an
understanding of what parts of Python on the browser are different then
“regular Python” See snippets and examples that you can use to build
your own PyScript apps&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-should-you-care"&gt;
&lt;h4&gt;Why should you care?&lt;/h4&gt;
&lt;p&gt;Python on the browser is the new frontier of Python. You’ll have the
chance to learn more about it, how to create your own Python apps on the
browser, and see what’s coming.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Pliger</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/pyscript-and-the-magic-of-python-in-the-browser.html</guid><category>PyCon US 2023</category></item><item><title>Pyscript for Education</title><link>https://pyvideo.org/pycon-us-2023/pyscript-for-education.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is one of the more accessible programming languages and has been
adopted by a broad community of users. For educators of all levels,
Python has become a go-to programming language. However, while there are
ways to distribute creations in Python, they tend to be notoriously
complex, unreliable, or require additional services like web hosting.
With the creation of Pyscript, Python projects can be distributed with
little to no web hosting or even internet connectivity. This change can
potentially bring previously inaccessible topics or tools to a broader
community while increasing the popularity of Python. This talk will
describe and demonstrate Python and Pyscript's potential opportunities
in the education space. We will talk about what makes these tools
different than those previously available and how the future development
of Pyscript can drive additional education changes in the near future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Blake Rayfield</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/pyscript-for-education.html</guid><category>PyCon US 2023</category></item><item><title>Python Linters at Scale</title><link>https://pyvideo.org/pycon-us-2023/python-linters-at-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Black, Flake8, isort, and Mypy are useful Python linters but it’s
challenging to use them effectively at scale in the case of multiple
codebases, in a large codebase, or with many developers. Manually
managing consistent linter versions and configurations across codebases
requires endless effort. Linter analysis on large codebases is slow.
Linters may slow down developers by asking them to fix trivial issues.
Running linters in distributed CI jobs makes it hard to understand the
overall developer experience.&lt;/p&gt;
&lt;p&gt;To handle these scale challenges, we developed a reusable linter
framework that releases new linter updates automatically, reuses
consistent configurations, runs linters on only updated code to speedup
runtime, collects logs and metrics to provide observability, and builds
auto fixes for common linter issues. Our linter runs are fast and
scalable. Every week, they run 10k times on multiple millions of lines
of code in over 25 codebases, generating 25k suggestions for more than
200 developers. Its autofixes also save 20 hours of developer time every
week.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll walk you through popular Python linters and
configuration recommendations, and we will discuss common issues and
solutions when scaling them out. Using linters more effectively will
make it much easier for you to apply best practices and more quickly
write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jimmy Lai</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/python-linters-at-scale.html</guid><category>PyCon US 2023</category></item><item><title>Python Meets UX: Enhancing User Experience with Code</title><link>https://pyvideo.org/pycon-us-2023/python-meets-ux-enhancing-user-experience-with-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The intersection of UX and Python programming is a powerful combination
for building great products and enhancing user experience. Python is a
versatile and popular programming language that is widely used for a
variety of tasks, including web development, data analysis, and machine
learning. UX, or user experience, is the process of designing products
that provide a seamless and intuitive experience for users.&lt;/p&gt;
&lt;p&gt;Learn about this powerful intersection of UX design and Python
programming by understanding how Python can be used to enhance the user
experience and provide practical examples on how UX designers can
automate tasks, gather and analyze data, develop personalized
experiences, and continually improve their own skills and processes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neeraj Pandey</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/python-meets-ux-enhancing-user-experience-with-code.html</guid><category>PyCon US 2023</category></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2023/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Steering Council Panel&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/python-steering-council-panel.html</guid><category>PyCon US 2023</category></item><item><title>Python's syntactic sugar</title><link>https://pyvideo.org/pycon-us-2023/pythons-syntactic-sugar.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know that it only takes 11 pieces of syntax and some special
functions to implement all the rest of the syntax of Python 3.8? It
turns out you can take something like &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; and unravel it into Python
code, letting you implement what Python does for a certain piece of
syntax all on your own!&lt;/p&gt;
&lt;p&gt;This talk will cover what the minimum bits of Python syntax are needed
to implement all the other pieces of syntax that Python supports. We
will also cover how various pieces of syntax unravel into code to help
you have a better understanding of how Python actually works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/pythons-syntactic-sugar.html</guid><category>PyCon US 2023</category></item><item><title>Quicksort, Timsort, Powersort - Algorithmic ideas, engineering tricks, and trivia behind CPython's new sorting algorithm</title><link>https://pyvideo.org/pycon-us-2023/quicksort-timsort-powersort-algorithmic-ideas-engineering-tricks-and-trivia-behind-cpythons-new-sorting-algorithm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing a sorting function is easy - coding a fast and reliable
reference implementation less so. In this talk, I tell the story behind
CPython's &lt;a class="reference external" href="https://github.com/python/cpython/issues/78742"&gt;latest
updates&lt;/a&gt; of the list
sort function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aims:&lt;/strong&gt; entertain people with twists of history and algorithmic
puzzles, which tell a lovely story of how a seemingly useless piece of
theory lead to the fastest and most elegant solution of a practical
challenge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Target audience:&lt;/strong&gt; geeks believing in the power of solid algorithmic
thinking; programmers interested in engineering performance-critical
code; all Python enthusiast curious about what makes (sorting lists in)
Python fast.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;: After using Quicksort for a long while, Tim Peters invented
&lt;em&gt;Timsort&lt;/em&gt;, a clever Mergesort variant, for the CPython reference
implementation of Python. Timsort is both effective in Python and a
popular export product: it is used in many languages and frameworks,
notably OpenJDK, the Android runtime, and the V8 JavaScript engine.&lt;/p&gt;
&lt;p&gt;Despite this success, algorithms researchers eventually pinpointed two
flaws in Timsort's underlying algorithm: The first could lead to a
&lt;a class="reference external" href="http://www.envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/"&gt;stack overflow in
CPython&lt;/a&gt;
(and Java); although it has meanwhile been fixed, it is curious that 10
years of widespread use didn't bring it to surface. The second flaw is
related to &lt;em&gt;performance&lt;/em&gt;: the order in which detected sorted segments,
the “runs” in the input, are merged, can be &lt;a class="reference external" href="https://arxiv.org/abs/1801.04641"&gt;50% more
costly&lt;/a&gt; than necessary. Based on
ideas from the little known puzzle of optimal alphabetic trees, the
&lt;a class="reference external" href="https://arxiv.org/abs/1805.04154"&gt;Powersort merge policy&lt;/a&gt; finds
nearly optimal merging orders with negligible overhead, and is now
(Python 3.11.0) part of the CPython implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Wild</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/quicksort-timsort-powersort-algorithmic-ideas-engineering-tricks-and-trivia-behind-cpythons-new-sorting-algorithm.html</guid><category>PyCon US 2023</category></item><item><title>Reconciling Everything</title><link>https://pyvideo.org/pycon-us-2023/reconciling-everything.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Queues. The backbone of distributed systems, our old friends that we can
rely on, and the cause of a lot of grief and on-call worries as they
inevitably back up, overflow, replay, or duplicate items.&lt;/p&gt;
&lt;p&gt;There is a different (and sometimes better) way to build distributed
systems, though - the reconciliation loop, a system where stateless
programs talks to a central datastore and try to progress the state in
small, incremental actions.&lt;/p&gt;
&lt;p&gt;We'll take a look at what reconciliation loops are, exactly, how they
compare to both queues and other distributed system messaging options,
and then dive into their active use as part of the Takahē
ActivityPub/Fediverse server - and see the good, the bad, and the
strange behaviours that can result.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/reconciling-everything.html</guid><category>PyCon US 2023</category></item><item><title>Resolviendo crimenes con Python mediante el Procesamiento del Lenguaje Natural (NLP)</title><link>https://pyvideo.org/pycon-us-2023/resolviendo-crimenes-con-python-mediante-el-procesamiento-del-lenguaje-natural-nlp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En mi desempeño como Ingeniera en Sistemas de Información en el area de
Informatica Forense del Poder Judicial en Argentina, realizo pericias
informáticas referentes a todo tipo de delitos y crímenes: homicidios,
femicidios, robos, secuestros y muchos más. Uno de los delitos más
comúnmente denunciados es el delito de Grooming (en mi pais tiene una
pena de 6 meses a 4 años de prision), el cual consiste en una práctica
de ciberacoso por medio de telecomunicaciones electrónicas en la que un
adulto engaña a un menor de edad con una finalidad sexual, a travez de
redes sociales o la aplicación Whatsapp.&lt;/p&gt;
&lt;p&gt;Cuando una persona denuncia este delito y se ordena una pericia
informatica por parte de la Justicia, realizo una extracción forense del
dispositivo celular en cuestión, obteniendo así las conversaciones
realizadas entre el presunto autor del delito y el/la menor de edad. Las
conversaciones pueden contener pocas o cientos de oraciones y no siempre
tienen contenido explicito relacionado al delito, lo que es complicado
en tiempo y esfuerzo para los operadores de la Justicia analizar el
significado de cada una de ellas y contextualizarlo. Allí entra en
escena el modelo que desarrollé con Python que por medio del
procesamiento del lenguaje natural (NLP) y técnicas de machine learning
y Deep learning le dan una solución rapida a la confirmación del delito.
En el futuro este modelo podrá ser extensible a otros crímenes tal como
por ejemplo el femicidio, ya sea previamente al hecho: una mujer pueda
utilizarlo desde una aplicación web accesible desde cualquier punto
geográfico y pueda predecir en habla hispana una conducta en una
conversación realizada con su posible agresor referente al machismo o
misoginia, entre otras, o una vez sucedido para confirmar el hecho
objeto del crimen por parte de los administradores de la Justicia.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carolina Passarello</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/resolviendo-crimenes-con-python-mediante-el-procesamiento-del-lenguaje-natural-nlp.html</guid><category>PyCon US 2023</category></item><item><title>Rethinking Objects</title><link>https://pyvideo.org/pycon-us-2023/rethinking-objects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation revisits two core concepts of Object-Oriented
programming: encapsulation and code reuse. Using a series of examples,
we'll ask whether these concepts have satisfied their promises, and how
functional approaches can do a better job. We'll also see that objects
still have value in making library use easy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Eckel</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/rethinking-objects.html</guid><category>PyCon US 2023</category></item><item><title>Simulaciones moleculares reproducibles con la ayuda de Python</title><link>https://pyvideo.org/pycon-us-2023/simulaciones-moleculares-reproducibles-con-la-ayuda-de-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta charla introducirá a un público no experto rápidamente en el mundo
de las simulaciones de dinámica molecular y algunos de sus retos. Se
hará especial énfasis en cómo las características y funcionalidades de
Python y su ecosistema científico aceleran la investigación en el área,
especialmente en los tiempos actuales en donde la aplicación de técnicas
de &lt;em&gt;Machine Learning&lt;/em&gt; están revolucionando el campo. Lo anterior se
demostrará con ejemplos que hacen uso de la herramienta de simulación
&lt;a class="reference external" href="https://openmm.org/"&gt;OpenMM&lt;/a&gt; y su sistema de librerías y
herramientas
(&lt;a class="reference external" href="https://github.com/choderalab/openmmtools/"&gt;openmmtools&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/choderalab/perses"&gt;perses&lt;/a&gt;, entre otras).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iván Pulido</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/simulaciones-moleculares-reproducibles-con-la-ayuda-de-python.html</guid><category>PyCon US 2023</category></item><item><title>so much depends upon... your python app's dependencies</title><link>https://pyvideo.org/pycon-us-2023/so-much-depends-upon-your-python-apps-dependencies.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you keep track of your project's building blocks? Is it enough
just pinning your dependencies in a &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; file? Or is
there any reason to learn one (or any) in a myriad of dependency
management tools?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It depends.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Untangling the complexity of this topic &lt;em&gt;might not&lt;/em&gt; be worth it for
certain small projects. But there are a lot of reasons why learning
about (and using) a dependency management tool will help you in the
future.&lt;/p&gt;
&lt;p&gt;Find out why embracing proper dependency management can help your
project's predictability, sustainability, security, and yes, even
simplicity. Learn how you can use a tool like &lt;tt class="docutils literal"&gt;pdm&lt;/tt&gt; to help accomplish
these goals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mario Munoz</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/so-much-depends-upon-your-python-apps-dependencies.html</guid><category>PyCon US 2023</category></item><item><title>Software Security and Slippery Slopes: How to elevate an entire ecosystem at scale</title><link>https://pyvideo.org/pycon-us-2023/software-security-and-slippery-slopes-how-to-elevate-an-entire-ecosystem-at-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software security is a critical aspect of developing and maintaining
reliable and safe systems. In the case of large and popular open source
ecosystems, such as Python, ensuring security across a wide and diverse
set of users and use cases can be a daunting task.&lt;/p&gt;
&lt;p&gt;In this talk, we will discuss the challenges of applying security
improvements to a widely used open source ecosystem like Python, and
explore strategies for addressing these challenges at scale. We will
discuss the importance of community involvement and collaboration, and
the role of automation and tools in facilitating the adoption of
security best practices.&lt;/p&gt;
&lt;p&gt;By the end of this talk, attendees will have a better understanding of
the challenges with and opportunities for improving software security in
the Python ecosystem, and will have some practical takeaways for
adopting and facilitating these changes in their own work.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/software-security-and-slippery-slopes-how-to-elevate-an-entire-ecosystem-at-scale.html</guid><category>PyCon US 2023</category></item><item><title>Subclassing, Composition, Python, and You</title><link>https://pyvideo.org/pycon-us-2023/subclassing-composition-python-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever seen a code base where understanding a simple method meant jumping
through tangled class hierarchies? We all have! And while &amp;quot;Favor
composition over inheritance!&amp;quot; is almost as old as object-oriented
programming, strictly avoiding all types of subclassing leads to
verbose, un-Pythonic code. So, what to do?&lt;/p&gt;
&lt;p&gt;The discussion on composition vs. inheritance is so frustrating because
far-reaching design decisions like this can only be made with the
ecosystem in mind – and because there's more than one type of
subclassing!&lt;/p&gt;
&lt;p&gt;Let's take a dogma-free stroll through the types of subclassing through
a Pythonic lens and untangle some patterns and trade-offs together. By
the end, you'll be more confident in deciding when subclassing will make
your code more Pythonic and when composition will improve its clarity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hynek Schlawack</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/subclassing-composition-python-and-you.html</guid><category>PyCon US 2023</category></item><item><title>The CPU in your browser: WebAssembly demystified</title><link>https://pyvideo.org/pycon-us-2023/the-cpu-in-your-browser-webassembly-demystified.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the recent years we saw an explosion of usage of Python in the
browser: Pyodide, CPython on WASM, PyScript, etc. All of this is
possible thanks to the powerful functionalities of the underlying
platform, WebAssembly.&lt;/p&gt;
&lt;p&gt;In this talk we will examine what is exactly WebAssembly, what are the
strong and weak points, what are the limitations and what the future
will bring us. We will also see why and how WebAssembly is useful and
used outside the browser.&lt;/p&gt;
&lt;p&gt;This talk is targeted to an intermediate/advanced audience: no prior
knowledge of WebAssembly is required, but it is required to have a basic
understanding of what is a compiler, an interpreter and the concept of
bytecode.&lt;/p&gt;
&lt;p&gt;The introduction will cover the basics to make sure that the talk is
understandable also by people who are completely new to the WebAssembly
world, but after that we will dive into the low-level technical details,
with a special focus on those who are relevant to the Python world, such
WASI vs emscripten, dynamic linking, JIT compilation, interoperability
with other languages, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/the-cpu-in-your-browser-webassembly-demystified.html</guid><category>PyCon US 2023</category></item><item><title>The creative art of algorithmic embroidery</title><link>https://pyvideo.org/pycon-us-2023/the-creative-art-of-algorithmic-embroidery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For thousands of years, people have created beautiful patterns through
intricate needlework. Many of these patterns utilize algorithmic
concepts like repetition, recursion and variation to build complex
motives from simple rules. In this talk, we explore the art of
embroidery through Python programming and show how you can create your
own patterns with code.&lt;/p&gt;
&lt;p&gt;We will turn straightforward commands into elaborate and intricate
artworks with loops, randomness and recursive functions using only the
&lt;a class="reference external" href="https://docs.python.org/3/library/turtle.html"&gt;built-in turtle
library&lt;/a&gt; in Python.
Then, we will show how you can turn your art into embroidery patterns
that are readable by an embroidery machine using the &lt;a class="reference external" href="https://turtlethread.com"&gt;TurtleThread
library&lt;/a&gt; and how you can use Python to
&lt;a class="reference external" href="https://turtlethread.com/main/en/christmas/index.html"&gt;create decorative ornaments for your Christmas
tree&lt;/a&gt;. This
talk is for anyone interested in the intersection between Python
programming, creative coding and arts and crafts!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marie Roald</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/the-creative-art-of-algorithmic-embroidery.html</guid><category>PyCon US 2023</category></item><item><title>The Lost Art of Diagrams: Making Complex Ideas Easy to See with Python</title><link>https://pyvideo.org/pycon-us-2023/the-lost-art-of-diagrams-making-complex-ideas-easy-to-see-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about communicating with visuals to make complex ideas
simple to understand. Over the years I have produced diagrams, charts,
illustrations and other graphics to help people understand sophisticated
project concepts. This includes project architecture, standard operating
procedures, coding concepts, sprints and roadmaps.&lt;/p&gt;
&lt;p&gt;You will be guided through ways of how to make stylized examples of your
project code and workflows in easy to follow examples. By using common
software for illustrations along with some simple guidelines you too can
make easy to follow visual content for your next project.&lt;/p&gt;
&lt;p&gt;Key Takeaways:&lt;/p&gt;
&lt;p&gt;Learn methods to visually communicate with your team including with
color, shapes, images, gifs and even memes to help get a point across
Understand how to make your technical documentation into visual graphics
with diagram design style guides See examples of how to take technical
documentation and create an intuitive diagram of it to share Come away
with an ability to execute a simple (or sophisticated) graphic with
essential steps and key requirements&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tadeh Hakopian</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/the-lost-art-of-diagrams-making-complex-ideas-easy-to-see-with-python.html</guid><category>PyCon US 2023</category></item><item><title>Too Big for DAG Factories?</title><link>https://pyvideo.org/pycon-us-2023/too-big-for-dag-factories.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’re working on a project that needs to aggregate petabytes of data,
and it doesn’t make sense to manually hard-code thousands of tables,
DAGs (Directed Acyclic Graphs) and pipelines. How can you transform,
optimize and scale your data workflow? Developers around the world
(especially those who love Python) are using Apache Airflow — a platform
created by the community to programmatically author, schedule and
monitor workflows without limiting the scope of your pipelines.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll review use cases, and you’ll learn best practices
for how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;use Airflow to transfer data, manage your infrastructure and more;&lt;/li&gt;
&lt;li&gt;implement Airflow in practical use cases, including as a:&lt;ul&gt;
&lt;li&gt;workflow controller for ETL pipelines loading big data;&lt;/li&gt;
&lt;li&gt;scheduler for a manufacturing process; and/or&lt;/li&gt;
&lt;li&gt;batch process coordinator for any type of enterprise;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scale and dynamically generate thousands of DAGs that come from JSON
configuration files;&lt;/li&gt;
&lt;li&gt;automate the release of both the DAGs and infrastructure updates via
a CI/CD pipeline;&lt;/li&gt;
&lt;li&gt;run all tasks simultaneously using Airflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both beginner and intermediate developers will benefit from this talk,
and it is ideal for developers wanting to learn how to use Airflow for
managing big data. Beginners will learn about dynamic DAG factories, and
intermediate developers will learn how to scale DAG factories to
thousands of DAGS — which is something Airflow can’t do out of the box.&lt;/p&gt;
&lt;p&gt;After this talk and live demo, people will learn best practices
(including access to a code repo) that will allow them to scale to
thousands of DAGs and spend more time having fun with big data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Hendryx-Parker</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/too-big-for-dag-factories.html</guid><category>PyCon US 2023</category></item><item><title>Vectorize all the things! Using linear algebra and NumPy to make your Python code lightning fast.</title><link>https://pyvideo.org/pycon-us-2023/vectorize-all-the-things-using-linear-algebra-and-numpy-to-make-your-python-code-lightning-fast.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you found that your code works beautifully on a few dozen examples,
but leaves you wondering how to spend the next couple of hours after you
start looping through all of your data? Are you only familiar with
Python, and wish there was a way to speed things up without subjecting
yourself to learning C?&lt;/p&gt;
&lt;p&gt;In this talk, you'll see some simple tricks, borrowed from linear
algebra, which can give you significant performance gains in your Python
code, and how you can implement these in NumPy. We'll start exploring an
inefficient implementation of an algorithm that relies heavily on loops
and lists. Throughout the talk, we'll iteratively replace bottlenecks
with NumPy vectorized operations.&lt;/p&gt;
&lt;p&gt;At each stage, you'll learn the linear algebra behind why these
operations are more efficient so that you'll be able to utilize these
concepts in your own code. You'll see how straightforward it can be to
make your code many times faster, all without losing readability or
needing to understand complex coding concepts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jodie Burchell</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/vectorize-all-the-things-using-linear-algebra-and-numpy-to-make-your-python-code-lightning-fast.html</guid><category>PyCon US 2023</category></item><item><title>What framework should I use for web testing?</title><link>https://pyvideo.org/pycon-us-2023/what-framework-should-i-use-for-web-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web apps these days are bigger than ever! With added complexity comes
higher risk for bugs and poor user experience. One of the best ways to
improve quality during development is to build feedback loops with
automated test suites that run continuously. These days, there are three
major open source test frameworks for automating web UI tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Selenium, the old-school browser automation tool&lt;/li&gt;
&lt;li&gt;Cypress, the darling framework for frontend developers&lt;/li&gt;
&lt;li&gt;Playwright, the dark horse rising in popularity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These three can test any kind of web app, including ones developed in
Python, but which one is best? In this talk, I’ll give a brief overview
of each one, including example code for a basic search engine test. We
will compare and contrast their features head-to-head so that you can
make the right decision for your team.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pandy Knight</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/what-framework-should-i-use-for-web-testing.html</guid><category>PyCon US 2023</category></item><item><title>XGBoost para clasificación: construyendo modelos precisos y eficientes</title><link>https://pyvideo.org/pycon-us-2023/xgboost-para-clasificacion-construyendo-modelos-precisos-y-eficientes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, nos centraremos en el uso de XGBoost para problemas de
clasificación. Comenzaremos explicando los conceptos básicos de la
clasificación y cómo difiere de la regresión. Luego, demostraremos cómo
usar XGBoost para construir y evaluar modelos de clasificación, y
discutiremos algunas de las características y ventajas clave de XGBoost
para tareas de clasificación. Al final de la charla, los asistentes
tendrán una comprensión sólida de cómo usar XGBoost para construir
modelos de clasificación precisos y eficientes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laura Funderburk</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/xgboost-para-clasificacion-construyendo-modelos-precisos-y-eficientes.html</guid><category>PyCon US 2023</category></item><item><title>A Per-Interpreter GIL: Concurrency and Parallelism with Subinterpreters</title><link>https://pyvideo.org/pycon-us-2023/a-per-interpreter-gil-concurrency-and-parallelism-with-subinterpreters.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We live in a world of &lt;em&gt;concurrent&lt;/em&gt; code and &lt;em&gt;multi-core&lt;/em&gt; computing, so
come learn about a &lt;em&gt;new&lt;/em&gt; solution for both in Python 3.12. We'll quickly
explain the new feature (and an old one), and then show you how to take
advantage of it, for &lt;em&gt;simpler&lt;/em&gt; concurrency and &lt;em&gt;faster&lt;/em&gt; code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/a-per-interpreter-gil-concurrency-and-parallelism-with-subinterpreters.html</guid><category>PyCon US 2023</category></item><item><title>Argument Clinic: What Healthy Professional Conflict Looks Like</title><link>https://pyvideo.org/pycon-us-2023/argument-clinic-what-healthy-professional-conflict-looks-like.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What does healthy disagreement look like? Many of us have never
experienced healthy conflict at work, and so assume our only options are
to either avoid conflict or have a nasty fight. But it doesn't have to
be that way: professional disagreement can be direct without being
nasty. We want to show what that looks like.&lt;/p&gt;
&lt;p&gt;In this model argument, presented as a play, watch two engineering
managers disagree about something. How do they work through their
disagreement -- politely and effectively? Watch our the characters
figure out what they're really clashing about, learn about each other's
perspectives, and come to a better decision than either could alone.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sumana Harihareswara</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/argument-clinic-what-healthy-professional-conflict-looks-like.html</guid><category>PyCon US 2023</category></item><item><title>Async the Easy Way: scaling structured concurrency with static and dynamic analysis</title><link>https://pyvideo.org/pycon-us-2023/async-the-easy-way-scaling-structured-concurrency-with-static-and-dynamic-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async python is a relatively recent addition to Python’s longstanding
concurrency options of processes and threads - and offers a very
different programming experience. Where processes run independently and
threads switch at the whim of the kernel scheduler, async tasks take a
different tradeoff: managing shared state is as easy as in
single-threaded synchronous Python, but it’s on you to ensure that there
are enough &lt;tt class="docutils literal"&gt;await&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;async for&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;async with&lt;/tt&gt; statements where
tasks can switch to make steady progress.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll explore the advantages of structured concurrency -
especially error handling, timeouts, cancellation, and readable code -
and both convenient and reliable ways to mitigate the problems of
cooperative concurrency (when one &lt;em&gt;uncooperative&lt;/em&gt; slow task can bring
your whole program to a halt). I’ll introduce you to static analysis
with flake8-trio and explain how to write your own AST-based tools, and
show how dynamic analysis can help us catch anything that slips past
that quick and convenient check.&lt;/p&gt;
&lt;p&gt;With a system like this in place, you don’t have to be an experienced or
paranoid software engineer to write beautiful async code - to serve or
scrape a website, control a bundle of processes, or write a game - it
just reads like normal Python, and your tools will catch you if you
fall.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/async-the-easy-way-scaling-structured-concurrency-with-static-and-dynamic-analysis.html</guid><category>PyCon US 2023</category></item><item><title>Build Yourself a PyScript</title><link>https://pyvideo.org/pycon-us-2023/build-yourself-a-pyscript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyScript and Pyodide have gained a lot of attention, as Python in the
browser presents interesting opportunities. And architectural questions
as well. What does it mean to write an extensible, friendly web platform
targeting Python?&lt;/p&gt;
&lt;p&gt;In this talk, learn how PyScript works and watch a treatment of key
technical issues for writing web apps with the WebAssembly version of
Python. What does “file” mean? How do you install something? What are
web workers and how do they impact your architecture?&lt;/p&gt;
&lt;p&gt;PyScript itself is constantly evolving on these topics. Come for a
spirited discussion with a fast-paced format.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas H.Tollervey</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/build-yourself-a-pyscript.html</guid><category>PyCon US 2023</category></item><item><title>Building NumPy Arrays from CSV Files, Faster than Pandas</title><link>https://pyvideo.org/pycon-us-2023/building-numpy-arrays-from-csv-files-faster-than-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twenty years ago, in 2003, Python 2.3 was released with
&lt;tt class="docutils literal"&gt;csv.reader()&lt;/tt&gt;, a function that provided support for parsing CSV
files. The C implementation, proposed in PEP 305, defines a core
tokenizer that has been a reference for many subsequent projects. Two
commonly needed features, however, were not addressed in
&lt;tt class="docutils literal"&gt;csv.reader()&lt;/tt&gt;: determining type per column, and converting strings to
those types (or columns to arrays). Pandas &lt;tt class="docutils literal"&gt;read_csv()&lt;/tt&gt; implements
automatic type conversion and realization of columns as NumPy arrays
(delivered in a DataFrame), with performance good enough to be widely
regarded as a benchmark. Pandas implementation, however, does not
support all NumPy dtypes. While NumPy offers &lt;tt class="docutils literal"&gt;loadtxt()&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;genfromtxt()&lt;/tt&gt; for similar purposes, the former (recently
re-implemented in C) does not implement automatic type discovery, while
the latter (implemented in Python) suffers poor performance at scale.&lt;/p&gt;
&lt;p&gt;To support reading delimited files in StaticFrame (a DataFrame library
built on an immutable data model), I needed something different: the
full configuration options of Python's &lt;tt class="docutils literal"&gt;csv.reader()&lt;/tt&gt;; optional type
discovery for one or more columns; support for all NumPy dtypes; and
performance competitive with Pandas &lt;tt class="docutils literal"&gt;read_csv()&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Following the twenty-year tradition of extending &lt;tt class="docutils literal"&gt;csv.reader()&lt;/tt&gt;, I
implemented &lt;tt class="docutils literal"&gt;delimited_to_arrays()&lt;/tt&gt; as a C extension to meet these
needs. Using a family of C functions and structs, Unicode code points
are collected per column (with optional type discovery), converted to
C-types, and written into NumPy arrays, all with minimal &lt;tt class="docutils literal"&gt;PyObject&lt;/tt&gt;
creation or reference counting. Incorporated in StaticFrame, performance
tests across a range of DataFrame shapes and type heterogeneity show
significant performance advantages over Pandas. Independent of usage in
StaticFrame, &lt;tt class="docutils literal"&gt;delimited_to_arrays()&lt;/tt&gt; provides a powerful new resource
for converting CSV files to NumPy arrays. This presentation will review
the background, architecture, and performance characteristics of this
new implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Ariza</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/building-numpy-arrays-from-csv-files-faster-than-pandas.html</guid><category>PyCon US 2023</category></item><item><title>Consistency and isolation for Python programmers</title><link>https://pyvideo.org/pycon-us-2023/consistency-and-isolation-for-python-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you use a SQL database like Postgres, you have to understand the
subtleties of isolation levels from &amp;quot;read committed&amp;quot; to &amp;quot;serializable&amp;quot;.
And distributed databases like MongoDB offer a range of consistency
levels, from &amp;quot;eventually consistent&amp;quot; to &amp;quot;linearizable&amp;quot; and many options
in between. Plus, non-experts usually confuse &amp;quot;isolation&amp;quot; with
&amp;quot;consistency&amp;quot;! If we don't understand these concepts we risk losing
data, or money, or worse. So what's the bottom line?&lt;/p&gt;
&lt;p&gt;Isolation: in a simple world, your database runs on one machine and
executes each request one-at-a-time. In reality, databases execute
requests in parallel, leading to weird phenomena called &amp;quot;anomalies&amp;quot;. To
see why anomalies happen, we'll look at Python code that simulates how a
database executes operations. The various &lt;strong&gt;isolation&lt;/strong&gt; levels make
different tradeoffs between the anomalies they allow, versus the
parallelism they can achieve.&lt;/p&gt;
&lt;p&gt;Consistency: distributed databases keep copies of your data on several
machines, but these copies go out of sync. This leads to new anomalies:
weird phenomena that reveal the out-of-sync data, and make your
application feel like it's in a time warp. The various &lt;strong&gt;consistency&lt;/strong&gt;
levels make tradeoffs between anomalies versus latency. It depends how
long you're willing to wait for your data changes to be synced across
all the machines. Again, we'll look at a Python simulation to understand
these anomalies.&lt;/p&gt;
&lt;p&gt;You don't need to know all the names and details of every consistency
and isolation level. You can refer to this &lt;a class="reference external" href="https://jepsen.io/consistency"&gt;handy
chart&lt;/a&gt;. And you don't need to read all
the academic papers, but I'll name four or five that are worth your
time. Now, make informed decisions about consistency and isolation, and
use your database with confidence!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/consistency-and-isolation-for-python-programmers.html</guid><category>PyCon US 2023</category></item><item><title>Create interactive games using MicroPython and electronics</title><link>https://pyvideo.org/pycon-us-2023/create-interactive-games-using-micropython-and-electronics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to have fun and learn Python? Let's learn how to use
electronics and programming to create games using MicroPython and a
micro:bit board. In this talk you'll learn how the micro:bit board works
with MicroPython and how you can use push buttons, an accelerometer
sensor and a LED display to create interactive games. The game examples
will be Chase the Dot, Genius and Car Crash. For each game we'll see how
the game works, the source code and a demonstration.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juliana Karoline de Sousa</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/create-interactive-games-using-micropython-and-electronics.html</guid><category>PyCon US 2023</category></item><item><title>Cross-Server Data Joins on Slow Networks with Python</title><link>https://pyvideo.org/pycon-us-2023/cross-server-data-joins-on-slow-networks-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While working from home has its perks, you've found one thing missing in
your remote work life: speed of network data transfer. It doesn't matter
if you can write the most efficient Python data transformation code when
your jobs are bottlenecked by slow data movement happening between your
local laptop and remote servers.&lt;/p&gt;
&lt;p&gt;In this talk we will address techniques for querying and joining data
across distant machines efficiently with Python. We will also discuss
how to handle scenarios where you need to join datasets that won't fit
in your laptop's memory, including several techniques and packages for
making cross server joins.&lt;/p&gt;
&lt;p&gt;This session won't stop you from getting angry when your ISP throttles
your home internet connection, but it will teach you ways to work with
local and remote datasets as efficiently as possible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bert Wagner</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/cross-server-data-joins-on-slow-networks-with-python.html</guid><category>PyCon US 2023</category></item><item><title>Ergonomic codesigning for the Python ecosystem with Sigstore</title><link>https://pyvideo.org/pycon-us-2023/ergonomic-codesigning-for-the-python-ecosystem-with-sigstore.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code signing is coming to the Python packaging ecosystem, in the form of
&lt;a class="reference external" href="https://www.sigstore.dev/"&gt;Sigstore&lt;/a&gt;: individual package maintainers
and users will be able to sign for and verify the authenticity of their
Python packages, respectively, without the historical and technical
baggage of PGP.&lt;/p&gt;
&lt;p&gt;This talk will serve two purposes: (1) as a introduction to Sigstore,
and its security model, to Python developers, and (2) as a technical
overview of ongoing efforts to integrate Sigstore into Python packaging.&lt;/p&gt;
&lt;p&gt;Attendees will be introduced to the cryptographic fundamentals of
codesigning, how Sigstore accomplishes codesigning without long-term key
material (a critical downside to PGP), as well as the guarantees they
can derive from strong codesigning in the Python packaging ecosystem.
They'll also be introduced to the technical aspects of Sigstore's
integration into Python packaging, including a peek behind the scenes at
the standardization process and other foundational efforts required to
introduce a new codesigning format to one of the world's largest
packaging ecosystems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Woodruff</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/ergonomic-codesigning-for-the-python-ecosystem-with-sigstore.html</guid><category>PyCon US 2023</category></item><item><title>Generators, coroutines, and nanoservices</title><link>https://pyvideo.org/pycon-us-2023/generators-coroutines-and-nanoservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generator functions have been a part of Python for many years already,
and are a well known technique for creating iterators. But generators
have a few lesser-known aspects, including their “send” method and the
“yield from” syntax. Many Python developers shy away from using them,
unsure of what they would do, or how they would be useful — seeing
coroutines as a solution looking for a problem.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll tell you why coroutines can be useful, and how
thinking about them as in-process “nanoservices” puts us in the right
frame of mind to determine when they would and wouldn’t be appropriate.
Among the topics we’ll explore are:&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuven M. Lerner</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/generators-coroutines-and-nanoservices.html</guid><category>PyCon US 2023</category></item><item><title>How Python is Behind the Science of the James Webb Space Telescope</title><link>https://pyvideo.org/pycon-us-2023/how-python-is-behind-the-science-of-the-james-webb-space-telescope.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The James Webb Space Telescope (JWST) is one of the largest science
projects in history. Its aim is to blow the door open on infrared
astronomy: it has already found the earliest galaxies, will reveal the
birth of stars and planets, and look for planets that could harbor life
outside our solar system. Not to mention it has and will produce a lot
of spectacular pictures that help us all understand our place in the
cosmos in a way never before possible. And while there were many varied
programming languages used for development and operation of JWST, the
language used for most of the science is Python.&lt;/p&gt;
&lt;p&gt;In this talk I will walk through some of the early science of JWST and
how it has been made possible by Python and the broad and deep open
source Python scientific ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Tollerud</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/how-python-is-behind-the-science-of-the-james-webb-space-telescope.html</guid><category>PyCon US 2023</category></item><item><title>How To Monitor and Troubleshoot Applications in Production using OpenTelemetry</title><link>https://pyvideo.org/pycon-us-2023/how-to-monitor-and-troubleshoot-applications-in-production-using-opentelemetry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;OpenTelemetry is a free, open-source Observability Protocol.
OpenTelemetry sits at the application layer, and exports Traces,
Metrics, and Logs to a backend for observing. It is extremely helpful
and beneficial to developers in mean &amp;quot;time-to-detection&amp;quot; and
&amp;quot;time-to-resolution&amp;quot; of bugs and issues that occur at the application
layer; this ranges from detecting and alerting for errors raised (such
as TypeError), to finding that a specific microservice (such as AWS
Lambda) ran for twice as long as usual, all the way to seeing the
output of a service and comparing it to the expected output to find a
bug in the logic of the service.&lt;/div&gt;
&lt;div class="line"&gt;This talk is meant as a great eye-opening introduction into basic
Monitoring and Troubleshooting code that may be running in a galaxy
far, far away on a Cloud Provider’s computer. This talk is geared
towards complete beginners to the Monitoring and Observability world,
and to show them just how easy it is to get set up and running. No
OpenTelemetry or otherwise experience is needed, just a basic
understanding of Python syntax to read and understand the minimal code
changes required for OpenTelemetry.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ron Nathaniel</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/how-to-monitor-and-troubleshoot-applications-in-production-using-opentelemetry.html</guid><category>PyCon US 2023</category></item><item><title>Improving debuggability of complex asyncio applications</title><link>https://pyvideo.org/pycon-us-2023/improving-debuggability-of-complex-asyncio-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The key of debugging is observability and reproducibility. Despite a
series of the asyncio stdlib improvements for the last few years, it is
still challenging to see what’s happening in complex real-world asyncio
applications. Particularly, when multiple asyncio libraries and your
codes are composed together, it is hard to track down silently swallowed
cancellations and resource-hogging floods of tasks triggered by
internals of 3rd-party callbacks. Moreoever, such misbehaviors are often
observed only in production environments where the app faces the actual
workloads and I/O patterns, making it even harder to reproduce.&lt;/p&gt;
&lt;p&gt;In this talk, I present an improved version of aiomonitor, called
aiomonitor-ng (next generation). The original aiomonitor provides a live
access to a running asyncio process using a telnet socket and a basic
REPL to inspect the list of tasks and their current stacks. After
getting several times of assistance in production debugging with it, I
have added more features to help tracking the above issues of asyncio
apps running in production: task creation tracker and termination
tracker. These trackers keeps the stack traces whenever a new task is
created or terminated, and provides a holistic view of chained stack
traces when the tasks are nested with arbitrary depths.&lt;/p&gt;
&lt;p&gt;aiomonitor-ng also demonstrates a rich async TUI (terminal UI) based on
prompt toolkit and Click, with auto-completion of commands and
arguments, far enhancing the original version’s simple REPL.&lt;/p&gt;
&lt;p&gt;With the improved aiomonitor-ng, I could successfully debug several
production bugs. I hope this talk would help our fellow asyncio
developers to make more complex yet stable applications at scale.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joongi Kim</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/improving-debuggability-of-complex-asyncio-applications.html</guid><category>PyCon US 2023</category></item><item><title>Inside CPython 3.11's new specializing, adaptive interpreter.</title><link>https://pyvideo.org/pycon-us-2023/inside-cpython-311s-new-specializing-adaptive-interpreter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.11 was released on October 24th, bringing with it a new
&lt;a class="reference external" href="https://peps.python.org/pep-0659"&gt;&amp;quot;specializing, adaptive
interpreter&amp;quot;&lt;/a&gt;. As one of the
engineers who works on this ambitious project, my goal is to introduce
you to the fascinating way that your code now &lt;em&gt;optimizes itself&lt;/em&gt; as it's
running, and to explore the different techniques employed under-the-hood
to make your programs &lt;a class="reference external" href="https://docs.python.org/3/whatsnew/3.11.html#faster-cpython"&gt;25%
faster&lt;/a&gt;
on average. Along the way, we'll also cover many of the challenges faced
when optimizing dynamic programming languages, some of the
&lt;a class="reference external" href="https://github.com/brandtbucher/specialist"&gt;tools&lt;/a&gt; you can use to
observe the new interpreter in action, and what we're already doing to
further improve performance in &lt;a class="reference external" href="https://github.com/faster-cpython/ideas/tree/main/3.12"&gt;Python
3.12&lt;/a&gt; and
beyond.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandt Bucher</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/inside-cpython-311s-new-specializing-adaptive-interpreter.html</guid><category>PyCon US 2023</category></item><item><title>Instrumentation Nightmares: A review of some of our toughest cases</title><link>https://pyvideo.org/pycon-us-2023/instrumentation-nightmares-a-review-of-some-of-our-toughest-cases.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wonder how companies like New Relic, Data Dog, and Sentry
instrument your code? In this talk we will briefly review how to hook
into the Python import system in order to instrument code. We'll present
some useful design patterns and tricks of the trade. Then, we'll launch
straight into real world examples and challenging instrumentation we've
done over the years. Take a deep dive with us into some of the most
popular Python libraries in use today and learn how they work
underneath. We'll talk about proxies, wrapt, async, Python's web server
specifications, and more! You will walk away from this talk with an
understanding of how instrumentation works under the hood and how to
make your own code instrumentation friendly. You'll also learn about
various design patterns; some that are gotos for instrumentation and
some that make instrumentation nightmarishly difficult. We hope you will
join us on this instrumentation journey and come away with an
understanding of how it all works to make developer's lives easier.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannah Stepanek</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/instrumentation-nightmares-a-review-of-some-of-our-toughest-cases.html</guid><category>PyCon US 2023</category></item><item><title>Into the Logisticverse: Improving Efficiency in Transportation Networks using Python</title><link>https://pyvideo.org/pycon-us-2023/into-the-logisticverse-improving-efficiency-in-transportation-networks-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we think about what Python is for, we often think of things like
analytics, machine learning, and web apps but python is a workhorse that
plays a tremendous and often invisible role in our day-to-day lives,
from medicine to finance, and even the transportation of goods from
manufacturers to the shelves of our neighborhood stores.&lt;/p&gt;
&lt;p&gt;Transportation networks are highly dynamic, goods are always moving from
point A to point B and money every minute is being gained or lost.
Improving efficiency in a transportation network is critical to the
survival of a business that provides transportation and distribution
services as well as ensuring timely delivery of goods to customers.&lt;/p&gt;
&lt;p&gt;This talk examines 3 real-world examples of how Python is used to
improve the efficiency of transportation networks, particularly we will
explore:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finding the optimal match between a driver and a load at the lowest
possible cost using google's &lt;tt class="docutils literal"&gt;ortools&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Generating recommendations for macro level optimizations to a
transportation network using &lt;tt class="docutils literal"&gt;networkX&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Helping the descision making process by answering the question
&amp;quot;Should I accept this work?&amp;quot; using &lt;tt class="docutils literal"&gt;skfuzzy&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Key Takeaways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Graph analytics and data science concepts that facilitate getting
goods from manufacturers to stores more efficiently and at a lower
cost to businesses.&lt;/li&gt;
&lt;li&gt;An appreciation of the complexity of the logistics industry and the
role Python plays in making the life of drivers better.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Uzoma Nicholas Muoh</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/into-the-logisticverse-improving-efficiency-in-transportation-networks-using-python.html</guid><category>PyCon US 2023</category></item><item><title>Introducción a FastAPI</title><link>https://pyvideo.org/pycon-us-2023/introduccion-a-fastapi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(English version below)&lt;/p&gt;
&lt;p&gt;Aprende a hacer una API lista para producción en muy poco tiempo usando
FastAPI... explicado con memes.&lt;/p&gt;
&lt;p&gt;Con documentación y validación de datos automáticas, basada en
estándares, alto desempeño y otras ventajas.&lt;/p&gt;
&lt;p&gt;Además, puedes escribir todo el código con autocompletado y chequeos de
errores de tipos, incluso para tus propios datos.&lt;/p&gt;
&lt;p&gt;En esta charla verás de qué se trata FastAPI, qué beneficios te da y por
qué sería útil para ti.&lt;/p&gt;
&lt;p&gt;También verás cómo declarar datos para recibir en cada request (cada
mensaje HTTP), usando tipos de Python estándar. Incluyendo parámetros en
el path, en queries, y en cuerpos (body) de mensajes.&lt;/p&gt;
&lt;p&gt;También verás cómo declarar cuerpos de mensajes complejos con datos muy
anidados. Y así, aún con código muy simple, tener documentación para
todo tu API, serialización (conversión de datos) y validación, todo
siguiendo estándares, y todo automáticamente.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Learn how to create an API ready for production in very little time
using FastAPI... explained with memes.&lt;/p&gt;
&lt;p&gt;Your API will have automatic validation, documentation based on
standards, high performance, and several other features.&lt;/p&gt;
&lt;p&gt;All this, having editor support including autocompletion everywhere.&lt;/p&gt;
&lt;p&gt;In this talk you will learn what FastAPI can do, and how it could
benefit you.&lt;/p&gt;
&lt;p&gt;You will see how to declare the data you want to receive in each request
using standard Python type annotations. Including path parameters, query
parameters, body payloads with JSON, etc.&lt;/p&gt;
&lt;p&gt;You will also see how to use simple, standard, Python type annotations
to declare complex JSON body payloads with deeply nested structures, and
get automatic data validation, serialization, and documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastián Ramírez</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/introduccion-a-fastapi.html</guid><category>PyCon US 2023</category></item><item><title>Introducing incompatible changes in Python</title><link>https://pyvideo.org/pycon-us-2023/introducing-incompatible-changes-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the Python 2 era, it was decided to migrate at a D-Day: convert all
your code base to Python 3. It didn't go as well as expected. We learnt
lessons from this mistake. Incompatible changes are now introduced
differently in Python.&lt;/p&gt;
&lt;p&gt;Today, changes start with a deprecation warning for at least two Python
releases before removing old functions. We think about how to write a
single code base working on the old and new Python versions. More and
more often, instructions to migrate existing code are provided, or even
automated tools. Changes breaking too many projects are reverted when
there is not enough time to update enough projects. Code search helps
detecting affected projects, notify them, and maybe also propose changes
to prepare their code.&lt;/p&gt;
&lt;p&gt;In the future, Python is working on a stable ABI to be able to build C
extensions once and use them on many Python versions. The HPy project is
an interesting candidate for this goal. More and more projects are being
tested on the Python version currently under development (Python 3.12)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Stinner</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/introducing-incompatible-changes-in-python.html</guid><category>PyCon US 2023</category></item><item><title>Kill All Mutants! (Intro to Mutation Testing)</title><link>https://pyvideo.org/pycon-us-2023/kill-all-mutants-intro-to-mutation-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How good is your test suite? Would it all still pass if the tested code
was changed? If so, there may be problems with your code, your tests, or
both!&lt;/p&gt;
&lt;p&gt;Mutation Testing reveals these cases. It makes lots of slightly altered
versions of your code, called &amp;quot;mutants&amp;quot;. If any mutants let all of the
code's tests pass, you probably have gaps in your test suite,
ineffective code, or both.&lt;/p&gt;
&lt;p&gt;This talk will tell you what mutation testing is, how it works, how to
use it, and its benefits, drawbacks, inner workings, and history. There
will be several examples, and a list of tools for many popular
languages.&lt;/p&gt;
&lt;p&gt;You will come away equipped with a powerful new technique for making
sure your tests are strict and your code is meaningful!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Aronson</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/kill-all-mutants-intro-to-mutation-testing.html</guid><category>PyCon US 2023</category></item><item><title>Modernizando tu paquete Python con pyproject y hatch</title><link>https://pyvideo.org/pycon-us-2023/modernizando-tu-paquete-python-con-pyproject-y-hatch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python sigue evolucionando con forme pasan los años, y de igual manera
lo hacen las herramientas que giran entorno a nuestro lenguaje. En esta
charla veremos el pasado (distutils, setuptools), el presente (flit,
poetry, build, twine), y el futuro (pyproject.toml, hatch) del
empaquetamiento en Python, la parte mas crucial para el crecimiento de
todo un ecosistema.&lt;/p&gt;
&lt;p&gt;Vamos a usar una mirada holística para analizar el estado actual y como
podemos mejorar el flujo de trabajo para empaquetar y distribuir
aplicaciones en Python.&lt;/p&gt;
&lt;div class="section" id="esta-charla-es-para-mi"&gt;
&lt;h4&gt;Esta charla es para mi?&lt;/h4&gt;
&lt;p&gt;Esta charla esta pensada para cualquier persona con o sin experiencia en
Python que quiera aprender o mejorar la forma para empaquetar paquetes
en Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="esquema"&gt;
&lt;h4&gt;Esquema&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduccion (3 minutos)&lt;/li&gt;
&lt;li&gt;Quien soy&lt;/li&gt;
&lt;li&gt;Por qué esta charla&lt;/li&gt;
&lt;li&gt;Estado actual del empaquetado&lt;/li&gt;
&lt;li&gt;Historia (3 minutos)&lt;/li&gt;
&lt;li&gt;PEP's&lt;/li&gt;
&lt;li&gt;setuptools &amp;amp; disutils&lt;/li&gt;
&lt;li&gt;pyproject.toml&lt;/li&gt;
&lt;li&gt;Empaquetando (15 minutos)&lt;/li&gt;
&lt;li&gt;introducción a hatch&lt;/li&gt;
&lt;li&gt;hatch environments&lt;/li&gt;
&lt;li&gt;hatch scripts&lt;/li&gt;
&lt;li&gt;hatch matrix&lt;/li&gt;
&lt;li&gt;pyproject.toml &amp;amp; hatch&lt;/li&gt;
&lt;li&gt;como migrar de setuptools&lt;/li&gt;
&lt;li&gt;Nuevo vs Viejo (3 minutos)&lt;/li&gt;
&lt;li&gt;comandos&lt;/li&gt;
&lt;li&gt;Ejemplos (2 minutos)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Oscar Cortez</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/modernizando-tu-paquete-python-con-pyproject-y-hatch.html</guid><category>PyCon US 2023</category></item><item><title>Ned Batchelder | Keynote</title><link>https://pyvideo.org/pycon-us-2023/ned-batchelder-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ned Batchelder | Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/ned-batchelder-keynote.html</guid><category>PyCon US 2023</category></item><item><title>Neurodiversidad e inclusión: Mi viaje personal enseñando programación a alumnos neurodivergentes</title><link>https://pyvideo.org/pycon-us-2023/neurodiversidad-e-inclusion-mi-viaje-personal-ensenando-programacion-a-alumnos-neurodivergentes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta historia comienza cuando un niño de nueve años me dijo que quería
aprender python. También me dijo que la escuela era aburrida y que no
tenía amigos. ¿Te suena esta historia familiar? Pues a mí sí, es por ese
motivo que decidi enseñar programación a niños. A lo largo de los años
me he confrontado a alumnos neurodivergentes (puede incluir autismo,
TDAH, dislexia, dispraxia, etc.). En esta charla, voy a compartir mi
experiencia del uso de la tecnología para romper la barrera del
aislamiento y el estigma que pesa sobre las personas neurodivergentes.
Proporcionando una experiencia educativa inclusiva y adaptada a los
diferentes estilos de aprendizaje, es posible cambiar el paradigma de la
educación y el empleo para las personas neurodivergentes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marlene Marchena</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/neurodiversidad-e-inclusion-mi-viaje-personal-ensenando-programacion-a-alumnos-neurodivergentes.html</guid><category>PyCon US 2023</category></item><item><title>OCR, Reconocimiento y obtención de información a través de imágenes</title><link>https://pyvideo.org/pycon-us-2023/ocr-reconocimiento-y-obtencion-de-informacion-a-traves-de-imagenes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se verá el área de reconocimiento de patrones y texto en imágenes
diversas, el procesamiento que requiere capturar, decodificar y analizar
para finalmente obtener texto a partir de imágenes o archivos digitales.
A partir de estas premisas, se verá el uso de la librería OpenCV y su
complementación con Tesseract, (en conjunto con Python) ya que ambas
permiten obtener datos visuales con facilidad, para posteriormente
generar información textual que es de gran utilidad para funciones
complejas dentro de la industria automotriz, conducción autónoma,
registro de actividades, señalización y sensores, robótica entre otros
muchos campos de aplicación. La recuperación de texto a partir de
imágenes es un pilar fundamental para la ejecución de múltiples
categorías de tratamiento de datos, lo cual demuestra su gran
importancia como factor base para una gran variedad de aplicaciones. El
uso de librerías de Python permite contrastar la facilidad y manejo de
información gráfica, su complementación permitirá entender un poco mejor
las ramas de aplicación que posee el estudio de las imágenes y la visión
artificial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alison Orellana Rios</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/ocr-reconocimiento-y-obtencion-de-informacion-a-traves-de-imagenes.html</guid><category>PyCon US 2023</category></item><item><title>Pythonic `functional` (`iter`)tools for your data challenges</title><link>https://pyvideo.org/pycon-us-2023/pythonic-functional-itertools-for-your-data-challenges.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays Python is very likely to be the first choice for developing
machine learning or data science applications. Reasons for this are
manifold, but very likely to be found in the fact that the Python
language is amazing (⚠️ &lt;em&gt;opinionated&lt;/em&gt;), and the open source community in
the PyData ecosystem is absolutely fantastic (💙 &lt;em&gt;that's a fact&lt;/em&gt;
&lt;a class="reference external" href="https://youtu.be/d9Qm3PPoYNQ?t=800"&gt;1&lt;/a&gt;
&lt;a class="reference external" href="https://pydata.org/diversity-inclusion/"&gt;2&lt;/a&gt;
&lt;a class="reference external" href="https://numfocus.org/"&gt;3&lt;/a&gt;). In this context, one of the most
remarkable features of the Python language is its ability in supporting
multiple programming styles (from &lt;em&gt;imperative&lt;/em&gt; to &lt;em&gt;OOP&lt;/em&gt; and also
&lt;em&gt;functional programming&lt;/em&gt;). Thanks to this versatility, developers have
their freedom to choose whichever programming style they prefer.&lt;/p&gt;
&lt;p&gt;Functional programming is indeed very fascinating, and it is great for
in-demand tasks such as &lt;em&gt;data filtering&lt;/em&gt; or &lt;em&gt;data processing&lt;/em&gt;. Of
course, this doesn't say anything about other paradigms, but sometimes
the solution to a data problem could be more &lt;a class="reference external" href="https://gist.github.com/leriomaggio/aef46a144119544df37649e46b51d64c"&gt;naturally
expressed&lt;/a&gt;
using a functional approach.&lt;/p&gt;
&lt;p&gt;In this talk, we will discuss Python's support to functional
programming, understanding the meaning of &lt;em&gt;pure functions&lt;/em&gt; (also &lt;em&gt;why
mutable function parameters are&lt;/em&gt; &lt;strong&gt;always&lt;/strong&gt; &lt;em&gt;a bad idea&lt;/em&gt;), and Python
classes and modules that would help you in this style, namely
&lt;tt class="docutils literal"&gt;itertools&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;functools&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;map-reduce&lt;/span&gt;&lt;/tt&gt; data processing pattern. As
for reference data challenges, we will discuss &lt;em&gt;functional-style&lt;/em&gt;
solutions to &lt;a class="reference external" href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt; coding
puzzles, to make it fun, and interactive.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/pythonic-functional-itertools-for-your-data-challenges.html</guid><category>PyCon US 2023</category></item><item><title>Reproducible molecular simulations with Python</title><link>https://pyvideo.org/pycon-us-2023/reproducible-molecular-simulations-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk the audience will be briefly introduced to the field of
molecular dynamics simulations and its challenges. Special attention
will be given to how the features found in Python and its scientific
ecosystem are boosting the research in the area, especially in times
where Machine Learning and AI methods are revolutionizing the field.
Examples using the &lt;a class="reference external" href="https://openmm.org/"&gt;OpenMM&lt;/a&gt; and its ecosystem
(&lt;a class="reference external" href="https://github.com/choderalab/openmmtools/"&gt;openmmtools&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/choderalab/perses"&gt;perses&lt;/a&gt;, among others) will be
featured.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iván Pulido</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/reproducible-molecular-simulations-with-python.html</guid><category>PyCon US 2023</category></item><item><title>Salvemos los pingüinos con el green computing</title><link>https://pyvideo.org/pycon-us-2023/salvemos-los-pinguinos-con-el-green-computing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Green computing&amp;quot; es un término que nació en 1992 y que busca reducir el
impacto ambiental de las actividades digitales.&lt;/p&gt;
&lt;p&gt;En esta charla vamos a ver que es el green computing (también llamada
computación verde) y que estudia esta área de la informática, con
algunos ejemplos de mejoras de data centers.&lt;/p&gt;
&lt;p&gt;También vamos a ver algunas cosas que podemos hacer en nuestro día a día
y una introducción al el green programming con python (o codificación
ecológica)&lt;/p&gt;
&lt;p&gt;La tecnología tiene un potencial muy alto de ayudar al medio ambiente,
¡el objetivo de esta charla es que todos lo sepamos!&lt;/p&gt;
&lt;p&gt;Veremos también que podemos hacer con python para saber cuanto es green
nuestro código.&lt;/p&gt;
&lt;p&gt;(No hay prerequisites, esta charla es para todos los públicos)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elena Guidi</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/salvemos-los-pinguinos-con-el-green-computing.html</guid><category>PyCon US 2023</category></item><item><title>Start thinking small: Next level Machine Learning with TinyML and Python</title><link>https://pyvideo.org/pycon-us-2023/start-thinking-small-next-level-machine-learning-with-tinyml-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We usually associate the future of computing as large clusters being
able to perform tasks in a fraction of a second, but is it really the
only scenario on how computational hardware will evolve?&lt;/p&gt;
&lt;p&gt;Machine learning has become an important component in our societies, we
see how people, communities, and global companies are focusing their
resources into improving their technological stack, and being the leader
into the next generation of AI. At the same time that we see clusters
getting larger, GPUs more powerful, and our phones are practically
computers being capable of doing almost everything, we do see that some
of the smart devices are becoming smaller.&lt;/p&gt;
&lt;p&gt;The Internet of Things has been flourishing for many years, and Python
has been playing an important role on the “easy to automate” topic for
many devices, but can Python help us in all scenarios? One of the
challenges for the next generation ML is to think small, you read that
right “thinking small”.&lt;/p&gt;
&lt;p&gt;It’s time to start being able to have mechanisms with super well-trained
ML models in small-devices: ML on Microcontrollers.&lt;/p&gt;
&lt;p&gt;We are going to dive into TinyML and evaluate different setups to
interact with sensors on microcontrollers. We will discuss the different
hardware options and frameworks to start with, while checking different
use cases that TinyML can solve, like: agriculture, conservation, health
issues detection, ecology monitoring, autonomous vehicles, etc.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn about Tiny Machine Learning (TinyML), which
is an approach that explores machine learning to be deployed in embedded
systems that enable run ML on microcontrollers. Similarly, I will talk
about Micropython and CircuitPython, and how they have been conquering
the microcontroller scene. Lastly, we will discuss a real use-case,
predictive machine learning model to predict anomalies for predictive
maintenance problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maria Jose Molina Contreras</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/start-thinking-small-next-level-machine-learning-with-tinyml-and-python.html</guid><category>PyCon US 2023</category></item><item><title>Testing Spacecraft with Pytest</title><link>https://pyvideo.org/pycon-us-2023/testing-spacecraft-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Much of the industry discussion around software testing over the last
couple of decades has been focused on web services, but there are lots
of different types of software systems that have different testing
needs. This talk will first explore the differences and similarities
between testing web services and testing safety- and mission-critical
software systems, such as those used on spacecraft. We will then
consider a rubric for thinking about the verification needs of different
types of software based on attributes of the software and the
environments in which it runs. Finally, we will examine a real-world
example of using pytest to test Varda Space Industries' spacecraft
software, showcasing many of pytest's power features, such as its
fixtures and extensive hook system, as well as Python language features
such as generators, context managers, and threading, that enable
easy-to-use tools for testing against real-time telemetry streams and
generating rich test report output.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Craig</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/testing-spacecraft-with-pytest.html</guid><category>PyCon US 2023</category></item><item><title>Three Musketeers: Sherlock Holmes, Mathematics and Python</title><link>https://pyvideo.org/pycon-us-2023/three-musketeers-sherlock-holmes-mathematics-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mathematics is a science and one of the most important discoveries of
the human race on earth. Math is everywhere and around us. It is in
nature, music, sports, economics, engineering, and so on. In our daily
life, we use mathematics knowingly and unknowingly. Many of us are
unaware that forensic experts use mathematics to solve crime mysteries.
In this talk, we will explore how Sherlock Holmes, the famous fictional
detective character created by Sir Arthur Conan Doyle uses Mathematics
and Python programming language to solve crime mysteries. We will solve
simple crime puzzles using mathematics and python scripts. Finally, we
will solve a few complex hypothetical crime mysteries using advanced
python concepts. The participants will learn how to use the concepts of
mathematics such as statistics, probability, trigonometry, and graph
theory, and python and its packages such as SciPy, NumPy, and Matplotlib
to solve the crime puzzles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gajendra Deshpande</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/three-musketeers-sherlock-holmes-mathematics-and-python.html</guid><category>PyCon US 2023</category></item><item><title>Transforming a Jupyter Notebook into a reproducible pipeline for ML experiments</title><link>https://pyvideo.org/pycon-us-2023/transforming-a-jupyter-notebook-into-a-reproducible-pipeline-for-ml-experiments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter Notebooks are part of every data scientist's arsenal and for
good reason. But while they're great for prototyping in data science
projects, they are not ideal for experimenting with different
configurations. I have been guilty of running experiments with changing
parameters while keeping track on a notepad, and the result has always
been messy.&lt;/p&gt;
&lt;p&gt;In this session, we will explore how we can transform our notebook
prototype into a reproducible pipeline. We will discuss what goes wrong
without proper experiment tracking, why reproducibility is the key to
solving this, and how we can achieve that with Git and DVC.&lt;/p&gt;
&lt;p&gt;I will discuss this topic using a text2image project with Stable
Diffusion. I'll show how to break up a notebook into modules, create a
pipeline from them, run experiments through the pipeline, and compare
their results to find the best possible outcomes.&lt;/p&gt;
&lt;p&gt;The target audience will be data scientists that don't have a strong
engineering background but would like to move beyond messing about in
notebooks. Much like myself a year or two ago.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob de Wit</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/transforming-a-jupyter-notebook-into-a-reproducible-pipeline-for-ml-experiments.html</guid><category>PyCon US 2023</category></item><item><title>Trying No GIL on Scientific Programming</title><link>https://pyvideo.org/pycon-us-2023/trying-no-gil-on-scientific-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last year, Sam Gross, the author of nogil fork on Python 3.9,
demonstrates the GIL can be removed. For scientific programs which use
heavy CPU-bound processes, it could be a huge performance improvement.
In this talk, we will see if this is true and compare the nogil version
to the original.&lt;/p&gt;
&lt;p&gt;In this talk, we will have a look at what is no-gil Python and how it
may improve the performance of some scientific calculations. First of
all, we will touch upon the background knowledge of the Python GIL, what
is it and why it is needed. On the contrary, why it is stopping
multi-threaded CPU processes to take advantage of multi-core machines.&lt;/p&gt;
&lt;p&gt;After that, we will have a look at no-gil Python, a folk of CPython 3.9
by Same Gross. How it provides an alternative to using Python with no
GIL and demonstrates it could be the future of the newer versions of
Python. With that, we will try out this version of Python in some
popular yet calculation-heavy algorithms in scientific programming and
data sciences e.g. PCA, clustering, categorization and data manipulation
with Scikit-learn and Pandas. We will compare the performance of this
no-gil version with the original standard CPython distribution.&lt;/p&gt;
&lt;p&gt;This talk is for Pythonistas who have intermediate knowledge of Python
and are interested in using Python for scientific programming or data
science. It may shine some light on having a more efficient way of using
Python in their tasks and interest in trying the no-gil version of
Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cheuk Ting Ho</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/trying-no-gil-on-scientific-programming.html</guid><category>PyCon US 2023</category></item><item><title>Unit Testing con Pytest</title><link>https://pyvideo.org/pycon-us-2023/unit-testing-con-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Spanish:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;¿Y esto cómo lo testeo? Al momento de escribir tests, no siempre es
simple saber qué cosas hay que testear o cómo hacerlo. En esta charla
voy a hablar de mocks, de buenas prácticas, voy a dar algunos tips y voy
a mostrar ejemplos de todo esto usando pytest.&lt;/p&gt;
&lt;p&gt;La charla se va a dividir en tres partes: - ¿Por qué (y para quién)
testeamos? - ¿Cómo escribir tests? Ejemplos de tests y cómo escribir
código preparado para pruebas unitarias. - ¿Cómo le sacamos el jugo a
pytest?: Ejemplos de fixtures, parametrizaciones, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, how do I test this? When writing tests, is not always easy to know
what to test and how to do it. I’m going to talk about mocks, good
practices, a few tips, and I’m going to show some examples using pytest.&lt;/p&gt;
&lt;p&gt;The talk is splitted in three parts: - Why (and for whom) do we write
tests? - How to write unit tests? (Some test examples, and how to write
code ready to be tested). - How to take advantage of pytest main
features? (Examples of fixtures, parametrize, etc.).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sofía Denner</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/unit-testing-con-pytest.html</guid><category>PyCon US 2023</category></item><item><title>Using Python and PyQgis to make cool maps</title><link>https://pyvideo.org/pycon-us-2023/using-python-and-pyqgis-to-make-cool-maps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;QGIS is a freely downloadable open source GIS software suite that
contains a desktop option, mobile, and web component. QGIS is free to
download and use, it is released with a GPL v3 license which is a non
commercial license allowing users to download and use it without
concerns compared to other commercial GIS software.&lt;/p&gt;
&lt;p&gt;QGIS core support in creating different types of maps, thanks to the
recent features updates QGIS version 3.14 was released with a Temporal
Controller feature that is responsible for handling all the temporal
layers inside QGIS. Temporal support was added in the core part of QGIS
hence users can now easily create animation maps from temporal location
datasets inside QGIS without any additional plugin.&lt;/p&gt;
&lt;p&gt;QGIS has scripting support using Python language, it also allows
enhancement to its functionality through plugins that are written using
Python language. This usage of the Python language in QGIS (PyQgis) is
achieved by using SIP and PyQt. Through the bindings QGIS has exposed
its core functionality via PyQgis API that can be used to create
standalone python applications that can use QGIS features in making
maps.&lt;/p&gt;
&lt;p&gt;The aim of this talk will be to showcase how one could use Python and
QGIS to build map animations from temporal location data using the QGIS
Temporal Controller Python API. The session will also provide a guide on
PyQgis Temporal API, python scripting inside QGIS, how to build
standalone python applications and how to create QGIS python plugins
that can help in making maps.&lt;/p&gt;
&lt;p&gt;The talk is aimed at Python geospatial programmers and anyone looking to
learn how to use open source tools in analyzing location data. Expecting
to raise the participant's awareness and value about the work done and
on the open source tools used in the geospatial field.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samweli Mwakisambwe</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/using-python-and-pyqgis-to-make-cool-maps.html</guid><category>PyCon US 2023</category></item><item><title>Welcome</title><link>https://pyvideo.org/pycon-us-2023/welcome.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta Wijaya</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/welcome.html</guid><category>PyCon US 2023</category></item><item><title>Why You Should Care About Open Source Supply Chain Security</title><link>https://pyvideo.org/pycon-us-2023/why-you-should-care-about-open-source-supply-chain-security.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past several years, large-scale hacks triggered by compromised
software supply chains have dominated the news. The aftermath has
inspired the creation of new organizations, tools, and systems to help
prevent and respond to similar lines of attack in the future.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn about the insidious nature of supply chain
attacks, common points of intrusion, and why the open source ecosystem
is especially vulnerable. Next, you’ll learn about the basic concepts
and terms involved in supply chain security and learn about open source
projects and frameworks you can apply to protect the integrity of your
own software. Lastly, you’ll learn about ways that you can evaluate the
supply chain security practices of the dependencies you rely on. You’ll
leave the talk understanding how supply chain attacks happen, why
they’re so difficult to detect, and take away actionable solutions
allowing you to be better prepared for the next wave of supply chain
attacks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/why-you-should-care-about-open-source-supply-chain-security.html</guid><category>PyCon US 2023</category></item><item><title>Working Around the GIL with asyncio</title><link>https://pyvideo.org/pycon-us-2023/working-around-the-gil-with-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've heard it many times: the GIL is a problem for using all your CPU
cores in one program. Among the generally accepted solutions there's
multiprocessing, a way to orchestrate a group of worker processes to
spread CPU load over many cores. This solves the problem for many use
cases but if you have a lot of data to pass around there and back again,
it's much less efficient.&lt;/p&gt;
&lt;p&gt;In this short talk we'll go through two examples of data processing with
Python 3.11 and how asyncio with shared memory helps speed things up. To
cover all bases, one example will run on macOS, the other on Windows
Subsystem for Linux. You'll see how the built-in building blocks of
Python allow to compose scalable systems. Our focus is on the base
programming language. We won't be reimplementing data pipelines or
covering any MLops best practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/working-around-the-gil-with-asyncio.html</guid><category>PyCon US 2023</category></item><item><title>Working with Time Zones: Everything You Wish You Didn't Need to Know (zoneinfo edition)</title><link>https://pyvideo.org/pycon-us-2023/working-with-time-zones-everything-you-wish-you-didnt-need-to-know-zoneinfo-edition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Time zones are complicated, but they are a fact of engineering life.
Time zones have &lt;a class="reference external" href="http://www.bbc.com/news/world-asia-16351377"&gt;skipped entire
days&lt;/a&gt; and repeated
others. There are time zones that switch to &lt;a class="reference external" href="https://www.timeanddate.com/time/zone/morocco/casablanca"&gt;DST twice per
year&lt;/a&gt;. But
not necessarily every year. In Python it's even possible to create
datetimes with non-transitive equality (&lt;tt class="docutils literal"&gt;a == b&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;b == c&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;a != c&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;In this talk you'll learn about Python's time zone model and other
concepts critical to avoiding datetime troubles. Using the &lt;tt class="docutils literal"&gt;zoneinfo&lt;/tt&gt;
module introduced in Python 3.9 (&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0615/"&gt;PEP
615&lt;/a&gt;), this talk covers
how to deal with ambiguous and imaginary times, datetime arithmetic
around a Daylight Savings Time transition, and datetime's new &lt;tt class="docutils literal"&gt;fold&lt;/tt&gt;
attribute, introduced in Python 3.6 (&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0495/"&gt;PEP
495&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/working-with-time-zones-everything-you-wish-you-didnt-need-to-know-zoneinfo-edition.html</guid><category>PyCon US 2023</category></item></channel></rss>