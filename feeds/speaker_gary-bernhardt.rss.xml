<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 16 Mar 2013 00:00:00 +0000</lastBuildDate><item><title>Backup Is Hard; Let's Go Shopping</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Backup Is Hard; Let's Go Shopping&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;We'll fly through the most clever bits of BitBacker, an online backup
app developed as a startup for three years and eventually abandoned.
Highlights: a hacked-up httplib/asyncore HTTP client; a real-life,
HATEOAS-respecting RESTful API, and an encryption scheme that can
quickly diff a file system against the server while leaking no
information – not even file timestamps.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This is the story of a solution to a huge problem: fast, secure online
backup. A single client generates a hundred gigabytes, millions of data
chunks, and thousands of file system snapshots. To appreciate the
problem's scale, consider that a Python array holding content hashes for
1,000,000 files consumes 100 MB of memory. File hashes are only a
portion of the required per- file metadata, and that's only one for
snapshot of thousands.&lt;/p&gt;
&lt;p&gt;We'll tour the hard parts of this system with no apology for their
difficulty. The httplib/asyncore hybrid monster that served millions of
parallel requests, transparently retrying on failures and timeouts, with
only 300 lines of python. The RESTful API – fully respecting hypertext,
with every request safely repeatable, even POSTs, and not a single
hard-coded URL in the client. The encryption scheme that leaked nothing
– not even modification times – but could quickly diff local file
systems against the server. And, that one time that a client
accidentally requested a 4.76 megabyte URL in production.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Bernhardt</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html</guid><category>backup</category><category>bigdata</category><category>bitbacker</category><category>pycon</category><category>pycon2011</category></item><item><title>Units Need Testing Too</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--units-need-testing-too.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Units Need Testing Too&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;Python's long history of testing has focused primarily on integration-
and system-level tests: slow-running tests executing lots of code. These
are a great start, but many of them can be transformed into unit-level
tests. True unit tests are orders of magnitude faster (about 1ms each),
providing quicker feedback and better failure localization. We'll look
at why and how to write them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has a wonderful legacy in testing: PyUnit has been in the
standard library since March, 2001, and it was already a year old by
then. We adopted browser driving quickly, and we do it at huge scale
with great test parallelization infrastructure.&lt;/p&gt;
&lt;p&gt;Big tests aren't everything, though. In the Python world, true unit
tests are somewhat rare, and even most tests written with the unittest
library are integration tests. These tests are slow to execute and don't
localize failure as well as smaller, focused tests. They leave us with
two options: either run them rarely, sacrificing feedback, or run them
often, sacrificing speed.&lt;/p&gt;
&lt;p&gt;Writing true unit tests removes that particular trade-off. When your
tests execute in a millisecond each, you can afford to run a thousand of
them every time you save a source file. This talk will discuss what unit
tests really are, why they matter, and how to write them in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Bernhardt</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--units-need-testing-too.html</guid><category>pycon</category><category>pycon2011</category><category>pyunit</category><category>testing</category><category>unittests</category></item><item><title>Fast Test, Slow Test</title><link>https://pyvideo.org/pycon-us-2012/fast-test-slow-test.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Most unit tests aren't and their authors suffer for it. What is a unit
test, really? How can writing them prevent classic testing problems? If
you do write them, what trade-offs are you implicitly making?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Bernhardt</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/fast-test-slow-test.html</guid></item><item><title>Boundaries</title><link>https://pyvideo.org/pycon-us-2013/boundaries.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An exploration of the boundaries between pieces of code, including:
isolated testing, behavior vs. data, mutation vs. immutability, how data
shape affords parallelism, transforming interface dependencies into data
dependencies, and what it might look like to build systems using all of
these to guide the boundaries between objects and components.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Bernhardt</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/boundaries.html</guid><category>talk</category></item></channel></rss>