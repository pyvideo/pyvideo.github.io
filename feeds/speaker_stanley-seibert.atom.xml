<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stanley-seibert.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-13T00:00:00+00:00</updated><entry><title>How to Accelerate an Existing Codebase with Numba</title><link href="https://pyvideo.org/scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>Siu Kwan Lam</name></author><id>tag:pyvideo.org,2019-07-13:scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you have ever said to yourself &amp;quot;my code works, but it is too slow!&amp;quot; then this is the talk for you. We will describe best practices for applying the Numba just-in-time compiler to an existing project. This includes techniques for assessing whether Numba is appropriate for your use case, analyzing your program to identify where Numba can help, modifying your core algorithms to be Numba compatible, and understanding compiler errors. In addition, we'll discuss considerations for packaging and distribution of projects that depend on Numba.&lt;/p&gt;
</summary></entry><entry><title>Accelerating Python with the Numba JIT Compiler</title><link href="https://pyvideo.org/scipy-2015/accelerating-python-with-the-numba-jit-compiler.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Stanley Seibert</name></author><id>tag:pyvideo.org,2015-07-10:scipy-2015/accelerating-python-with-the-numba-jit-compiler.html</id><summary type="html"></summary></entry></feed>