<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Stanley Seibert</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stanley-seibert.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-07-08T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Accelerating Python with the Numba JIT Compiler</title><link href="https://pyvideo.org/scipy-2015/accelerating-python-with-the-numba-jit-compiler.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Stanley Seibert</name></author><id>tag:pyvideo.org,2015-07-10:/scipy-2015/accelerating-python-with-the-numba-jit-compiler.html</id><content type="html"></content><category term="SciPy 2015"></category></entry><entry><title>How to Accelerate an Existing Codebase with Numba</title><link href="https://pyvideo.org/scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>Siu Kwan Lam</name></author><id>tag:pyvideo.org,2019-07-13:/scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you have ever said to yourself &amp;quot;my code works, but it is too slow!&amp;quot; then this is the talk for you. We will describe best practices for applying the Numba just-in-time compiler to an existing project. This includes techniques for assessing whether Numba is appropriate for your use …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you have ever said to yourself &amp;quot;my code works, but it is too slow!&amp;quot; then this is the talk for you. We will describe best practices for applying the Numba just-in-time compiler to an existing project. This includes techniques for assessing whether Numba is appropriate for your use case, analyzing your program to identify where Numba can help, modifying your core algorithms to be Numba compatible, and understanding compiler errors. In addition, we'll discuss considerations for packaging and distribution of projects that depend on Numba.&lt;/p&gt;
</content><category term="SciPy 2019"></category></entry><entry><title>Continuous Integration for Scientific Python Projects</title><link href="https://pyvideo.org/scipy-2020/continuous-integration-for-scientific-python-projects.html" rel="alternate"></link><published>2020-07-06T00:00:00+00:00</published><updated>2020-07-06T00:00:00+00:00</updated><author><name>Stanley Seibert</name></author><id>tag:pyvideo.org,2020-07-06:/scipy-2020/continuous-integration-for-scientific-python-projects.html</id><content type="html"></content><category term="SciPy 2020"></category></entry><entry><title>PIXIE: Blending Just-in-time and Ahead-of-time compilation</title><link href="https://pyvideo.org/scipy-2024/pixie-blending-just-in-time-and-ahead-of-time-compilation.html" rel="alternate"></link><published>2024-07-08T00:00:00+00:00</published><updated>2024-07-08T00:00:00+00:00</updated><author><name>Stuart Archibald</name></author><id>tag:pyvideo.org,2024-07-08:/scipy-2024/pixie-blending-just-in-time-and-ahead-of-time-compilation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speeding up Python code traditionally involves the use of Just-In-Time (JIT) or Ahead-Of-Time (AOT) compilation. There are tradeoffs to both approaches, however. As part of the Numba project's aim to create a compiler toolkit, the PIXIE project is being developed. It offers a multiple-language consuming, extensible toolchain, that produces …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speeding up Python code traditionally involves the use of Just-In-Time (JIT) or Ahead-Of-Time (AOT) compilation. There are tradeoffs to both approaches, however. As part of the Numba project's aim to create a compiler toolkit, the PIXIE project is being developed. It offers a multiple-language consuming, extensible toolchain, that produces AOT compiled binary extension modules. These PIXIE based extension modules contain CPU-specific function dispatch for AOT use and also support something similar to Link-Time-Optimization (LTO) for use in situations such as JIT compilation and/or cross module optimization. PIXIE modules are easy to load and call from Python, and can be inlined into Numba JIT compilation, giving Python developers access to the benefits of both AOT and JIT.&lt;/p&gt;
</content><category term="SciPy 2024"></category></entry></feed>