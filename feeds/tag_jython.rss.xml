<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 03 Jul 2013 00:00:00 +0000</lastBuildDate><item><title>Speed up your Django apps with Jython and SPDY</title><link>https://pyvideo.org/europython-2013/speed-up-your-django-apps-with-jython-and-spdy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emanuele Palazzetti</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/speed-up-your-django-apps-with-jython-and-spdy.html</guid><category>spdy</category><category>jython</category><category>jetty</category><category>django</category></item><item><title>Web Apps with Jython</title><link>https://pyvideo.org/chipy/web-apps-with-jython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building apps with Jython&lt;/p&gt;
&lt;p&gt;Presented on May 15th, 2009 at ChiPy&lt;/p&gt;
&lt;p&gt;Talks about go_pylons and snakefight and other things that allow you to
build and run Python applications with Jython. WSGI to servlet adapter
in Jython 2.5.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 15 May 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-05-15:chipy/web-apps-with-jython.html</guid><category>chipy</category><category>go_pylons</category><category>jython</category><category>snakefight</category><category>wsgi</category></item><item><title>Django on Jython: Ready for Production</title><link>https://pyvideo.org/djangocon-us-2009/django-on-jython--ready-for-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django on Jython: Ready for Production&lt;/p&gt;
&lt;p&gt;Presented by Chris McAvoy&lt;/p&gt;
&lt;p&gt;Talks about runnin Django on Jython. Walks through technical issues with
getting Django running on Jython, but also talks about why you might
want to do this and what it enables.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris McAvoy</dc:creator><pubDate>Thu, 10 Sep 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-09-10:djangocon-us-2009/django-on-jython--ready-for-production.html</guid><category>djangocon</category><category>djangocon2009</category><category>jython</category></item><item><title>Interoperability: from Python to Clojure and the other way round</title><link>https://pyvideo.org/europython-2011/interoperability-from-python-to-clojure-and-the.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Enrico Franchi - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clojure is a modern Lisp dialect symbiotic with the Java Virtual Machine
and designed for concurrency. Clojure is compiled to byte-code and yet
is fully dynamic. It is very oriented towards functional programming and
manages state change in a controlled environment with software
transactional memory (STM). Since Clojure is a Lisp dialect, it retains
the code-as-data philosophy and has a powerful macro system&lt;/p&gt;
&lt;p&gt;Using the Jython, an implementation of the Python programming language
written in Java, it is possible to call Clojure from Python and call
Python from Clojure, using the JVM as an interoperability platform.&lt;/p&gt;
&lt;p&gt;After a brief introduction of the main Clojure features, the
presentation will show how Jython and Clojure can be used together.&lt;/p&gt;
&lt;p&gt;No previous knowledge of Clojure (or Lisp) is assumed nor required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/interoperability-from-python-to-clojure-and-the.html</guid><category>java</category><category>jvm</category><category>jython</category><category>memory</category></item><item><title>Programmazione MapReduce in Python con Pydoop</title><link>https://pyvideo.org/europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Leo - 23 June 2011 in &amp;quot;Track Italiana Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop è la principale implementazione open source di MapReduce, il
paradigma di calcolo distribuito su larga scala di Google. L'API nativa
di Hadoop è in Java e le opzioni built-in per la programmazione in
Python - Streaming e Jython - presentano diversi inconvenienti: la prima
consente di accedere solo a un piccolo sottoinsieme delle funzionalità
di Hadoop, mentre la seconda ha tutte le limitazioni di Jython rispetto
a CPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydoop.sourceforge.net"&gt;Pydoop&lt;/a&gt; è un'API per Hadoop che rende
disponibile buona parte delle funzionalità di Hadoop al programmatore
Python, consentendo lo sviluppo in CPython. I suoi moduli di base sono
wrapper Boost.Python per l'interfaccia C/C++ di Hadoop.&lt;/p&gt;
&lt;p&gt;Il talk consiste in un tutorial su MapReduce/Hadoop e in una
presentazione dell'API Pydoop, con l'obiettivo principale di avvicinare
le community di Hadoop e Python. Può essere utile, anche se non
strettamente necessaria, una conoscenza di base della programmazione
distribuita.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</guid><category>community</category><category>hadoop</category><category>java</category><category>jython</category><category>mapreduce</category><category>python,</category><category>tutorial</category></item><item><title>Python MapReduce Programming with Pydoop</title><link>https://pyvideo.org/europython-2011/python-mapreduce-programming-with-pydoop.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Leo - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop is the leading open source implementation of MapReduce, Google's
large scale distributed computing paradigm. Hadoop's native API is in
Java, and its built-in options for Python programming - Streaming and
Jython - have several drawbacks: the former allows to access only a
small subset of Hadoop's features, while the latter carries with it all
of the limitations of Jython with respect to CPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydoop.sourceforge.net"&gt;Pydoop&lt;/a&gt; is an API for Hadoop that
makes most of its features available to Python programmers while
allowing CPython development. Its core consists of Boost.Python wrappers
for Hadoop's C/C++ interface.&lt;/p&gt;
&lt;p&gt;The talk consists of a MapReduce/Hadoop tutorial and a presentation of
the Pydoop API, with the main goal of bridging the gap between the
Hadoop and Python communities. A basic knowledge of distributed
programming is helpful but not strictly required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-mapreduce-programming-with-pydoop.html</guid><category>api</category><category>cpython</category><category>distributed</category><category>hadoop</category><category>jython</category><category>mapreduce</category><category>tutorial</category></item><item><title>PyConAU 2010: Introducing Python to a Java shop</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--introducing-python-to-a-java-shop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing Python to a Java shop&lt;/p&gt;
&lt;p&gt;Presented by Juergen Brendel (MuleSoft)&lt;/p&gt;
&lt;p&gt;There is a time and place for everything: For some applications Python
is perfect, for others a language like Java and its entire ecosystem is
more ideal. In this talk we see how Python was introduced to a Java shop
as a vehicle for rapid and dynamic prototyping of a new project. The
talk then explains how Jython/Java integration was used to translate
this project step by step from Python to Java. Going beyond the advocacy
focus, the talk then shows the interfaces to call Java from Python and
vice versa and illustrates those with examples. Furthermore, unit
testing of Java classes via test cases written in Python is also touched
upon.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juergen Brendel</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--introducing-python-to-a-java-shop.html</guid><category>advocacy</category><category>jython</category><category>prototyping</category><category>pyconau</category><category>pyconau2010</category></item><item><title>PyConAU 2010: Lightning talks - Saturday</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--lightning-talks---saturday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks - Saturday&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Amy Maree: Talking about OLPC XO, Python and Pippy.&lt;/li&gt;
&lt;li&gt;05:55 - Jurgen Brendel: Jython and writing performance critical parts
in Java.&lt;/li&gt;
&lt;li&gt;09:50 - Dave Claridge: Embedding Python and robots that play soccer.&lt;/li&gt;
&lt;li&gt;15:10 - Paul Dyson: inflect.py&lt;/li&gt;
&lt;li&gt;20:20 - Richard Jones: cocos2d, a python game library&lt;/li&gt;
&lt;li&gt;25:40 - Brian Quinlan: Why you probably don't want to work for Google&lt;/li&gt;
&lt;li&gt;30:50 - Nick Coghlan: Running Python scripts.&lt;/li&gt;
&lt;li&gt;34:55 - Philip: How to introduce Python to a large organization&lt;/li&gt;
&lt;li&gt;38:55 - Ryan Kelly: with hacks: re-usable tools for with-statement
hackery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PMC curator notes: Paul Dyson's demo at 18:28 is great.&lt;/p&gt;
&lt;p&gt;If anyone know's Philip's last name (and/or if we spelled his first name
wrong, too), let us know in the comments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amy Maree</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--lightning-talks---saturday.html</guid><category>lightning talks</category><category>cocos2d</category><category>google</category><category>hacks</category><category>inflect.py</category><category>jython</category><category>olpc</category><category>pippy</category><category>pyconau</category><category>pyconau2010</category><category>robots</category><category>scripts</category><category>with</category></item><item><title>State of CPython and Python Ecosystem</title><link>https://pyvideo.org/pycon-au-2011/state-of-cpython-and-python-ecosystem.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This a high level overview of the State of CPython interpreter and other
python interpreters. The talk will mention about the
&amp;amp;nbsp_place_holder;changes in 3.2 release and changes coming up in 3.3
release and status of Python2.7. It will also give the details of
current state of PyPy Project, IronPython project and Jython Project..&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumaran</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/state-of-cpython-and-python-ecosystem.html</guid><category>cpython</category><category>ironpython</category><category>jython</category><category>pypy</category></item><item><title>PyCon 2009: A better Python for the JVM</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-better-python-for-the-jvm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A better Python for the JVM&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by Tobias Ivarsson&lt;/p&gt;
&lt;p&gt;At the last PyCon we announced that we were starting a project for
improving the Jython compiler. This year we will share the first fruits
of that work with the Python community!&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ambient mic left on; results in echoing audio]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-better-python-for-the-jvm.html</guid><category>jvm</category><category>jython</category><category>pycon</category><category>pycon2009</category></item><item><title>PyCon 2009: Django on Jython (#101)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--django-on-jython---101.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: house audio] Django is the most popular Python web
framework, and the final release of Jython 2.5 should be available a
couple of months before PyCon. This means we can now use a modern Python
web framework on top of Java infrastructure by running Django on Jython.
In this talk, we will show examples of how to use this combination,
engage a discussion about what can take the Python (and Django)
community from the Java world, especially the necessary infrastructure
bits, and how a Django/Jython stack compares with other JVM web stacks
like JRuby on Rails.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--django-on-jython---101.html</guid><category>jython</category><category>pycon</category><category>pycon2009</category></item><item><title>Extending Java Applications with Jython (#65)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--extending-java-applications-with-jyth.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extending Java Applications with Jython&lt;/p&gt;
&lt;p&gt;Presented by Frank J Wierzbicki (Jython)&lt;/p&gt;
&lt;p&gt;Jython is an implementation of Python for the JVM. This talk covers the
options available for integrating Jython and Java code, especially Java
calling into Jython, since this is the trickier case. This talk will
also cover some Java specific deployment options, such as deploying your
Jython application as a jar file. Jar files allow you to package
Java/Jython applications into a single archive. In many environments a
user can click on a jar file to launch the contained application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank J Wierzbicki</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--extending-java-applications-with-jyth.html</guid><category>jython</category><category>pycon</category><category>pycon2010</category></item><item><title>The Ring of Python (#189)</title><link>https://pyvideo.org/pycon-us-2010/the-ring-of-python-189.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Ring of Python&lt;/p&gt;
&lt;p&gt;Presented by holger krekel (merlinux gmbh)&lt;/p&gt;
&lt;p&gt;CPython 2.5/2.6/3.1, Jython, IronPython, PyPy, StacklessPython,
UnladenSwallow, Cython ... what do we make of all these cool interpreter
projects and versions? Where does competition help and where does it
hamper?&lt;/p&gt;
&lt;p&gt;In this interactive talk I'll highlight the main strengths of each of
the Python interpreters. Furthermore, I'll discuss ways to leverage
Python interpreters in a co-operative way, discuss challenges, projects
and issues ahead and also briefly highlight 'execnet', one my own
projects for bridging (Any) Python to (Any) Python. This is also the
first time i am going to try out a new and funvisual presentation
technique after several years of having done mostly text-based ones&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/the-ring-of-python-189.html</guid><category>cpython</category><category>cython</category><category>ironpython</category><category>jython</category><category>pycon</category><category>pycon2010</category><category>pypy</category><category>stackless</category><category>unladenswallow</category></item><item><title>Panel: Python VMs</title><link>https://pyvideo.org/pycon-us-2011/panel-python-vms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python VMs&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland&lt;/p&gt;
&lt;p&gt;Python is lucky enough to have a healthy ecosystem of virtual machines
(VMs) exist. CPython, Jython, IronPython, and PyPy are all used
extensively by people in real-world situations. This panel brings
together a representative from each of the major VMs to discuss where
they are now, going in the future, and to answer questions from the
community.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;All four major Python VMs will be represented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;: Brett Cannon&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;: Frank Wierzbicki&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;: Dino Viehland&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;: Maciej Fijalkowski Moderation will be
handled by Jacob Kaplan-Moss of Django.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/panel-python-vms.html</guid><category>cpython</category><category>ironpython</category><category>jython</category><category>pycon</category><category>pycon2011</category><category>pypy</category></item><item><title>Jython Concurrency</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--jython-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jython Concurrency&lt;/p&gt;
&lt;p&gt;Presented by Jim Baker&lt;/p&gt;
&lt;p&gt;Jython is arguably the best Python implementation to target concurrent
code. Jython has no GIL, it leverages the Java platform to provide
robust support for concurrency in its runtime, and it enables access to
a set of high-level abstractions from Java. This talk will walk through
at the extreme level pertinent Jython implementation details and a
series of examples, including Java integration.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Jython implements the Python language, but we leverage the underlying
Java platform to provide an opionated alternative to CPython in our
support of concurrency.&lt;/p&gt;
&lt;p&gt;Because of the GIL and related infrastructure, CPython cannot use a
model in which threads perform concurrent computation defined in Python
on shared objects in the same process. (Of course, there are
workarounds, such as multiprocessing or using C extensions.)&lt;/p&gt;
&lt;p&gt;In contrast, there's no GIL in Jython. Jython instead embraces threads,
provides extensive support for managing their execution and coordination
through standard Java platform functionality (java.util.concurrent), and
threaded code works well with Jython's implementation of standard
mutable collection types. Lastly, the underlying JVM provides extensive
instrumentation as well as the ability to set a variety of parameters,
including choice of GC. There are also the inevitable pitfalls that
might be seen in complex architectures, such as around the use of
ClassLoaders.&lt;/p&gt;
&lt;p&gt;This talk will go into a detailed discussion of some of the interesting
ramifications of these design points and how they can be effectively
applied to write concurrent code, as illustrated through a variety of
short examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Baker</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--jython-concurrency.html</guid><category>concurrency</category><category>java</category><category>jython</category><category>pycon</category><category>pycon2011</category></item></channel></rss>