<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Ron Nathaniel</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ron-nathaniel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-21T00:00:00+00:00</updated><subtitle></subtitle><entry><title>How To Monitor and Troubleshoot Applications in Production using OpenTelemetry</title><link href="https://pyvideo.org/pycon-us-2023/how-to-monitor-and-troubleshoot-applications-in-production-using-opentelemetry.html" rel="alternate"></link><published>2023-04-21T00:00:00+00:00</published><updated>2023-04-21T00:00:00+00:00</updated><author><name>Ron Nathaniel</name></author><id>tag:pyvideo.org,2023-04-21:/pycon-us-2023/how-to-monitor-and-troubleshoot-applications-in-production-using-opentelemetry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;OpenTelemetry is a free, open-source Observability Protocol.
OpenTelemetry sits at the application layer, and exports Traces,
Metrics, and Logs to a backend for observing. It is extremely helpful
and beneficial to developers in mean &amp;quot;time-to-detection&amp;quot; and
&amp;quot;time-to-resolution&amp;quot; of bugs and issues that occur at the application
layer; this ranges …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;OpenTelemetry is a free, open-source Observability Protocol.
OpenTelemetry sits at the application layer, and exports Traces,
Metrics, and Logs to a backend for observing. It is extremely helpful
and beneficial to developers in mean &amp;quot;time-to-detection&amp;quot; and
&amp;quot;time-to-resolution&amp;quot; of bugs and issues that occur at the application
layer; this ranges from detecting and alerting for errors raised (such
as TypeError), to finding that a specific microservice (such as AWS
Lambda) ran for twice as long as usual, all the way to seeing the
output of a service and comparing it to the expected output to find a
bug in the logic of the service.&lt;/div&gt;
&lt;div class="line"&gt;This talk is meant as a great eye-opening introduction into basic
Monitoring and Troubleshooting code that may be running in a galaxy
far, far away on a Cloud Provider’s computer. This talk is geared
towards complete beginners to the Monitoring and Observability world,
and to show them just how easy it is to get set up and running. No
OpenTelemetry or otherwise experience is needed, just a basic
understanding of Python syntax to read and understand the minimal code
changes required for OpenTelemetry.&lt;/div&gt;
&lt;/div&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>How To Troubleshoot and Monitor Production Applications using OpenTelemetry</title><link href="https://pyvideo.org/pycon-us-2023/how-to-troubleshoot-and-monitor-production-applications-using-opentelemetry.html" rel="alternate"></link><published>2023-04-20T00:00:00+00:00</published><updated>2023-04-20T00:00:00+00:00</updated><author><name>Ron Nathaniel</name></author><id>tag:pyvideo.org,2023-04-20:/pycon-us-2023/how-to-troubleshoot-and-monitor-production-applications-using-opentelemetry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt; is a free, open-source Observability Protocol.
OpenTelemetry sits at the application layer, and exports Traces,
Metrics, and Logs to a backend for observing. It is extremely helpful
and beneficial to developers in mean &amp;quot;time-to-detection&amp;quot; and
&amp;quot;time-to-resolution&amp;quot; of bugs and issues that occur at the application
layer; this ranges …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;OpenTelemetry&lt;/strong&gt; is a free, open-source Observability Protocol.
OpenTelemetry sits at the application layer, and exports Traces,
Metrics, and Logs to a backend for observing. It is extremely helpful
and beneficial to developers in mean &amp;quot;time-to-detection&amp;quot; and
&amp;quot;time-to-resolution&amp;quot; of bugs and issues that occur at the application
layer; this ranges from detecting and alerting for errors raised (such
as TypeError), to finding that a specific microservice (such as AWS
Lambda) ran for twice as long as usual, all the way to seeing the
output of a service and comparing it to the expected output to find a
bug in the logic of the service.&lt;/div&gt;
&lt;div class="line"&gt;This tutorial is geared towards beginner/intermediate Python
developers, who have some experience in Python, its syntax, and very
minimal experience in Requests and Flask is needed (extremely popular
libraries, with 50k and 60k stars on GitHub, respectively). No
OpenTelemetry experience is needed at all. This is a total and
complete introduction into OpenTelemetry, consisting instrumenting
your first application, viewing your first traces and metrics, and if
time-allows then deploying your first Jaeger instance locally (no
experience is needed, only Docker desktop), to allow students of this
workshop tutorial to build their own in-house observability platform,
be-it for their selves or employers.&lt;/div&gt;
&lt;div class="line"&gt;It is important that every developer have at least a solid
understanding of Traces, Metrics, and Logs, which we know today as the
three pillars of observability. These are the foundational building
blocks for monitoring Production environments at the application
layer. The &lt;a class="reference external" href="https://github.com/ronnathaniel/opentelemetry-workshop-local"&gt;extended base workshop is available
here&lt;/a&gt;
and the &lt;a class="reference external" href="https://docs.google.com/presentation/d/1gJVjzPfxSmTYIA6mdcMNVl4U7iZIVaT5/edit?usp=sharing&amp;amp;ouid=105518354611510365918&amp;amp;rtpof=true&amp;amp;sd=true"&gt;base slides are available
here&lt;/a&gt;.
Thank you.&lt;/div&gt;
&lt;/div&gt;
</content><category term="PyCon US 2023"></category></entry></feed>