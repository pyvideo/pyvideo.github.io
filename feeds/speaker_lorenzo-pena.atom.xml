<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Lorenzo Peña</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lorenzo-pena.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Day 2 Lightning Talks</title><link href="https://pyvideo.org/djangocon-europe-2018/day-2-lightning-talks.html" rel="alternate"></link><published>2018-05-24T00:00:00+00:00</published><updated>2018-05-24T00:00:00+00:00</updated><author><name>Peter Körner</name></author><id>tag:pyvideo.org,2018-05-24:/djangocon-europe-2018/day-2-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe Crew&lt;/p&gt;
</content><category term="DjangoCon Europe 2018"></category></entry><entry><title>The art of (not) redirecting</title><link href="https://pyvideo.org/djangocon-us-2024/the-art-of-not-redirecting.html" rel="alternate"></link><published>2024-09-23T00:00:00+00:00</published><updated>2024-09-23T00:00:00+00:00</updated><author><name>Lorenzo Peña</name></author><id>tag:pyvideo.org,2024-09-23:/djangocon-us-2024/the-art-of-not-redirecting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;URLs are meant to never change, but change is the only constant of thriving products. As web developers we have the duty to not only design our URLs in a way that they withstand the passage of time, but also to &amp;quot;never&amp;quot; break old URLs when, in the face …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;URLs are meant to never change, but change is the only constant of thriving products. As web developers we have the duty to not only design our URLs in a way that they withstand the passage of time, but also to &amp;quot;never&amp;quot; break old URLs when, in the face of inevitable change, we are forced to re-design them in order to keep a consistent experience in our evolving products. Join me in this practical journey to master URL design and evolution.&lt;/p&gt;
</content><category term="DjangoCon US 2024"></category></entry><entry><title>Yet another package for multi-tenancy in Django</title><link href="https://pyvideo.org/europython-2020/yet-another-package-for-multi-tenancy-in-django.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Lorenzo Peña</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/yet-another-package-for-multi-tenancy-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring the challenges of having multi-tenancy in the Django web framework&lt;/p&gt;
&lt;p&gt;Django is a popular, solid web framework for perfectionists with deadlines, with a wide ecosystem of packages that extend its powers in multiple directions. In the era of peaking popularity of Node/Deno, microservices, and heavyweight browser rendered …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring the challenges of having multi-tenancy in the Django web framework&lt;/p&gt;
&lt;p&gt;Django is a popular, solid web framework for perfectionists with deadlines, with a wide ecosystem of packages that extend its powers in multiple directions. In the era of peaking popularity of Node/Deno, microservices, and heavyweight browser rendered webapps, Django still remains a triumphant monolith maker, very capable of major undertakings in the web arena.&lt;/p&gt;
&lt;p&gt;For all you Django-lovers out there, it seems to me like a matter of time before you have to do some form of multi-tenancy in Django. Taking a solution that works well for one tenant and extending it to multiple tenants should still be a problem for perfectionists with deadlines. Interestingly, when it comes to covering all the many facets of multi-tenancy, Django can be not so batteries included, as one might end up working around or 'hacking' the framework in order to get things done.&lt;/p&gt;
&lt;p&gt;In this talk I will walk you through the challenges of bringing multi-tenancy to a Django project. We'll cover the fundamental plumbing required to make it work reliably, securely, and elegantly. You will be expected to have a basic knowledge of Django (models, settings, users, URL reversing), and you will learn the working logic behind popular multi-tenancy packages like [django-tenant-schemas](&lt;a class="reference external" href="https://github.com/bernardopires/django-tenant-schemas"&gt;https://github.com/bernardopires/django-tenant-schemas&lt;/a&gt;) and [django-tenants](&lt;a class="reference external" href="https://github.com/tomturner/django-tenants"&gt;https://github.com/tomturner/django-tenants&lt;/a&gt;).&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Databases"></category><category term="Django"></category><category term="Django Projects"></category></entry><entry><title>Of Django, PostgreSQL schemas, and your multi-million dollar idea</title><link href="https://pyvideo.org/pycon-au-2020/of-django-postgresql-schemas-and-your-multi-million-dollar-idea.html" rel="alternate"></link><published>2020-09-05T00:00:00+00:00</published><updated>2020-09-05T00:00:00+00:00</updated><author><name>Lorenzo Peña</name></author><id>tag:pyvideo.org,2020-09-05:/pycon-au-2020/of-django-postgresql-schemas-and-your-multi-million-dollar-idea.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lorenzo Peña&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/CRSJXF"&gt;https://2020.pycon.org.au/program/CRSJXF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although rough for the world, 2020 is proving a good year (and decade start) for Django. Boring batteries-included frameworks and established monolith makers are shining again, in a world where the hype-enchantment of JavaScript and micro-everything is starting to wear …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lorenzo Peña&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/CRSJXF"&gt;https://2020.pycon.org.au/program/CRSJXF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although rough for the world, 2020 is proving a good year (and decade start) for Django. Boring batteries-included frameworks and established monolith makers are shining again, in a world where the hype-enchantment of JavaScript and micro-everything is starting to wear off and fall into a more mature position of tradeoffs. After 15 years of life, Django continues to prove solid, battle tested, and very capable of major undertakings in the web arena.&lt;/p&gt;
&lt;p&gt;Over the last decade, the competence of the framework has extended to the SaaS world, through a number of packages that have emerged as viable options for making Django multi-tenant. PostgreSQL concept of _schemas_ has opened a new exploration space for multi-tenancy, by combining the power of RDBMS native isolation with the reduced costs of managing a single database.&lt;/p&gt;
&lt;p&gt;However, nothing comes for free. The ease of using PostgreSQL schemas for multi-tenancy in Django comes at the expense of some challenges that must be overcome in the short, medium, and long term, if the project seeks to survive while gracefully escaling to success.&lt;/p&gt;
&lt;p&gt;In this talk we will cover the major challenges of doing multi-tenancy in Django through PostgreSQL schemas. You will learn the pros and cons of the approach as you move from tutorial-grade projects to massive multi-tenant behemoths. By the end, you will be able to answer whether or not this is going to be a feasible approach for your next multi-million dollar idea.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Fri Sep  4 17:45:00 2020 at Python 2&lt;/p&gt;
</content><category term="PyCon AU 2020"></category><category term="LorenzoPeña"></category><category term="PyCon"></category><category term="PyConAU"></category><category term="PyConline"></category><category term="Python"></category><category term="pyconau"></category><category term="pyconau_2020"></category></entry><entry><title>A thousand Djangoes within (or Django multi-tenant)</title><link href="https://pyvideo.org/pycon-india-2020/a-thousand-djangoes-within-or-django-multi-tenant.html" rel="alternate"></link><published>2020-10-02T00:00:00+00:00</published><updated>2020-10-02T00:00:00+00:00</updated><author><name>Lorenzo Peña</name></author><id>tag:pyvideo.org,2020-10-02:/pycon-india-2020/a-thousand-djangoes-within-or-django-multi-tenant.html</id><content type="html"></content><category term="PyCon India 2020"></category></entry></feed>