<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 10 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Visualisation in Python</title><link>https://pyvideo.org/pycon-ireland-2018/visualisation-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ability to explore and grasp data structures through quick and intuitive visualisation is a key skill of any data scientist. Different tools in the Python ecosystem required varying levels of mental-gymnastics to manipulate and visualise information during a data exploration session. The array of Python libraries, each with their own idiosyncrasies, available can be daunting for newcomers and data scientists-in-training. In this talk, we will examine the core data visualisation libraries compatible with the popular Pandas data wrangling library. We'll look at the base-level Matplotlib library first, and then show the benefits of the higher-level Pandas visualisation toolkit and the popular Seaborne library. By the end of the talk, you'll be bar plotting, scatter plotting, and line plotting (never pie charting) your way to data visualisation bliss.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shane Lynn</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:pycon-ireland-2018/visualisation-in-python.html</guid><category>data visualization</category><category>seaborn</category><category>matplotlib</category><category>pandas</category></item><item><title>GPU-accelerated data analysis in Python: a study case in Material Sciences</title><link>https://pyvideo.org/pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Max Planck Computing and Data Facility is engaged in the development
and optimization of algorithms and applications for high performance
computing as well as for data-intensive projects. As programming
language in data science, Python is now used at MPCDF in the scientific
area of “atom probe crystallography” (APT): a Fourier analysis in 3D
space can be simulated in order to reveal composition and
crystallographic structure at the atomic scale of billions APT
experimental data sets.&lt;/p&gt;
&lt;p&gt;The Python data ecosystem has proved to be well suited to this, as it
has grown beyond the confines of single machines to embrace scalability.
The talk aims to describe our approach to scaling across multiple GPUs,
and the role of visualization methods too.&lt;/p&gt;
&lt;p&gt;Our data workflow analysis relies on the GPU-accelerated Python software
package PyNX, an open source library which provides fast parallel
computation scattering. The code takes advantage of the high throughput
of GPUs, using the pyCUDA library.&lt;/p&gt;
&lt;p&gt;Exploratory data analysis, high productivity and rapid prototyping with
high performance are enabled through Jupyter Notebooks and Python
packages e.g., pandas, matplotlib/plotly. In production stage,
interactive visualization is realized by using standard scientific tool,
e.g. Paraview, an open-source 3D visualization program which requires
Python modules to generate visualization components within VTK files.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giuseppe Di Bernardo</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html</guid><category>GPUComputing</category><category>visualization</category><category>mathematical-modelling</category><category>image-processing</category><category>bigdata</category><category>matplotlib</category><category>analytics</category><category>data-visualization</category><category>data-analysis</category><category>Data Mining</category><category>scientific-computing</category><category>physics</category><category>python3</category></item><item><title>Hacking Your Way Into Machine Learning</title><link>https://pyvideo.org/pycon-italia-2018/hacking-your-way-into-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have heard of Machine Learning from your co-worker or in a local meetup and are enticed to get started but not sure how to take that first step. Confused between different sources, where to start from or how to proceed given a particular problem statement or dataset, then this talk is for you. It is aimed at complete beginners ( maybe you? ) who are just starting in machine learning and are ready to commit.
The talk will go something like this - each of the following items will be explained how it’s useful and why we should use it. Then alongside showcase, that same step applied to the real example(dataset) of that particular item so that the audience will be able to grasp the idea. It will add to around 35 minutes leaving us with 10 minutes for Q&amp;amp;A.
1) Context ( 5 mins ):
Discuss why we need Machine Learning and how we can use Machine Learning in different domains.
2) Resources ( 3 mins):
Talks about the dataset availability, online competitions, and Open Source libraries such as Scikit-learn, Matplotlib, Keras.
3) Jupyter Notebook (25 mins):
This Jupyter notebook will be a great starting point for most Supervised Machine Learning projects that involve common tasks: a) Imports and data loading (2 mins )
b) Data Exploration (5 mins)
c) Data Cleaning (3 mins)
d) Feature Engineering (4 mins)
e) Model Exploration (6 mins)
f) Final Model Building and Prediction ( 5 mins)
4) Wrap up ( 2 mins ):
Finalizing my talk, sharing some tips etc.
5) Q&amp;amp;A ( 10 mins ):
Question and Answering with the Audience.
Hope to inspire the audience to get started with machine learning, explore different domains, to learn, to create and engage with the Machine Learning Community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laksh Arora</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/hacking-your-way-into-machine-learning.html</guid><category>data-analysis</category><category>data-visualization</category><category>Python</category><category>scikit-learn</category><category>matplotlib</category><category>analytics</category><category>scipy</category><category>machine-learning</category><category>data</category><category>Statistical Learning</category></item><item><title>ENVIFATE: plugin per QGIS per la valutazione del rischio di inquinamento ambientale</title><link>https://pyvideo.org/pycon-italia-2017/envifate-plugin-per-qgis-per-la-valutazione-del-rischio-di-inquinamento-ambientale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Negli ultimi anni è cresciuto in maniera considerevole l’interesse per i
fenomeni di inquinamento ambientale causati da sostanze tossiche e altre
fonti di disturbo. La pericolosità di ciascuna di tali sostanze si
manifesta laddove sia superata una certa soglia di concentrazione che la
rende tossica. Per proteggere la salute pubblica e gli ecosistemi
occorre mantenere le concentrazioni di tali inquinanti al di sotto di
una soglia di sicurezza e risulta di particolare importanza essere in
grado di prevedere in maniera sufficientemente attendibile le
concentrazioni che si vengono a stabilire nei diversi comparti
ambientali. In questo contesto, sia per le PA che per gli operatori
privati, sta diventando sempre più importante poter disporre di
strumenti semplici ma efficaci che consentano di effettuare analisi di
screening tali da individuare le possibili criticità in quest’ambito. Il
software ENVIFATE viene sviluppato nell’ambito di un progetto di ricerca
ancora in corso finanziato al DICAM (Università di Trento) dalla Regione
Veneto proprio per operare analisi di screening per valutare la
possibilità di rischi di inquinamento ambientale nelle aree protette a
seguito di pianificazione di potenziali sorgenti inquinanti. Il progetto
ha previsto lo sviluppo di un’applicazione con i seguenti requisiti: i)
open-source ii) multipiattaforma iii) user friendly iv) GIS oriented. Si
è scelto di sviluppare una famiglia di plugin di QGIS, utilizzando un
linguaggio python multipiattaforma e realizzando un modulo per ciascuna
matrice ambientale considerata: fiumi, laghi, dispersione atmosferica,
dispersione in falda, rumore. I plugin sono stati sviluppati a partire
da una libreria di moduli lanciabili da linea di comando o da
applicazioni di terze parti con un elevato livello di modularità e
scalabilità. E’ così anche possibile concatenare i diversi moduli in
flussi di dati personalizzati. Tutti i plugin forniscono risultati di
tipo numerico e cartografico. In particolare i tool da linea di comando
forniscono un risultato “statico”, ovvero collegato ad un particolare
stato spaziale e temporale, mentre all’interno dei plugin il modulo
viene reiterato nello spazio e nel tempo allo scopo di fornire mappe
georiferite e risultati relazionati temporalmente, propedeutici alle
diverse valutazioni ambientali. I futuri sviluppi del plugin ne
estenderanno le funzionalità affinché verifichi quando gli effetti
calcolati causino scostamenti significativi e misurabili dello status
delle matrici ambientali in relazione a ciò che è tutelato. Questo in
prima istanza rispetto agli habitat e alle specie della rete Natura 2000
all’interno di valutazioni di incidenza, ma anche con la prospettiva di
estendere tali analisi a VIA e VAS o ad una integrazione con i Life
Cycle Inventories (LCI).&lt;/p&gt;
&lt;p&gt;Autori: Francesco Geri, Oscar Cainelli, Paolo Zatelli, Gianluca Salogni,
Marco Ciolli&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Geri</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/envifate-plugin-per-qgis-per-la-valutazione-del-rischio-di-inquinamento-ambientale.html</guid><category>risk-management</category><category>open-source</category><category>Python</category><category>matplotlib</category><category>environment</category><category>Qgis</category><category>gis</category><category>impact-assessment</category><category>gdal</category><category>pollution</category></item><item><title>Svilluppare con python sull'iPad</title><link>https://pyvideo.org/pycon-italia-2017/svilluppare-con-python-sullipad.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Da quando è stato introdotto l’iPad, questo si è evoluto velocemente,
trasformandosi da un iPhone agli steroidi ad un surrogato di computer
ultraportatile. Questo mi ha spinto ad esplorare la piattaforma per
vedere fino a che punto ci si poteva spingere nell’utilizzo di un iPad
come sostituto di un ultra portatile: volevo poter sviluppare con python
anche su un iPad.&lt;/p&gt;
&lt;p&gt;Finalmente dopo molte ricerche scopro l’app Pythonista che consente di
sviluppare in python sull’iPad e senza alcun jailbreak, secondo le
regole della Apple!&lt;/p&gt;
&lt;p&gt;Vi voglio far conoscere questo strumento con il quale potrete sviluppare
script python per automatizzare il vostro lavoro sull’iPad, fare test al
volo di codici anche quando non avete un pc, utilizzare l’iPad per le
vostre ricerche scientifiche (grazie al supporto di numpy e matplotlib)
ad adirittura scrivere app con una gui che potrete pubblicare sull’app
store!!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lelio Campanile</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/svilluppare-con-python-sullipad.html</guid><category>Python</category><category>IDE</category><category>python3</category><category>matplotlib</category><category>pydata</category></item><item><title>Data Science &amp; Data Visualization in Python. How to harness power of Python for social good?</title><link>https://pyvideo.org/pydata-berlin-2017/data-science-data-visualization-in-python-how-to-harness-power-of-python-for-social-good.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python as an Open Data Science tool offers many libraries for data visualization and I will show you how to use and combine the best. I strongly believe that power of data is not only in the information &amp;amp; insight that data can provide us, Data is and can be really beautiful and can not only transform our perception but also the world that we all live in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my talk I will primarily focus on answering/offer the answer to these questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why we need data science and why more and more people should be really interested in analyzing data and data visualization? (motivation)&lt;/li&gt;
&lt;li&gt;What is data science and how to start doing it in Python? (introduction of procedures, tools, most popular IDE-s for Python, etc.)&lt;/li&gt;
&lt;li&gt;What tools for data analysis and data visualization Python offers? (in each stage of analysis the best libraries will be shown for the specific purpose; as for data visualization we will focus particularly on Bokeh, Seaborn, Plotly and use of Jupyter Notebook and Plotly)&lt;/li&gt;
&lt;li&gt;How to 'unlock' the insight hidden in data through Python and how to use it to transform not only public administration or business, but ultimately the transformation of the whole society and economy towards the insight &amp;amp; knowledge based? (potential of data science)&lt;/li&gt;
&lt;li&gt;Open Data, Open Government Partnership, Open Public Administration &amp;amp; all the advantages of Open Data Science &amp;amp; Python. Data-Driven Approach. Everywhere. Now. (the end of talk +vision)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radovan Kavicky</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/data-science-data-visualization-in-python-how-to-harness-power-of-python-for-social-good.html</guid><category>python</category><category>data-science</category><category>data-visualization</category><category>analytics</category><category>PyData</category><category>PyDataBLN</category><category>PyDataBerlin</category><category>PyDataBA</category><category>PyDataBratislava</category><category>talk</category><category>Data</category><category>Bokeh</category><category>Social Good</category><category>datascience</category><category>jupyter</category><category>open science</category><category>open data science</category><category>DataVisualization</category><category>data-analysis</category><category>analysis</category><category>matplotlib</category><category>numpy</category><category>data wrangling</category><category>jupyter notebook</category><category>pandas</category><category>machine learning</category><category>deep learning</category><category>Open Data</category><category>Citizen Data Science</category></item><item><title>Analyzing code contributions to the CPython project using NetworkX and Matplotlib</title><link>https://pyvideo.org/pydata-barcelona-2017/analyzing-code-contributions-to-the-cpython-project-using-networkx-and-matplotlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a well established fact that only a small fraction of developers account for most code contributions to FOSS projects. The CPython project is not an exception, but analyzing code contributions through time reveals that the people that contribute the most is not always the same. I model CPython's contribution dynamics as cooperation networks and analyze them using NetworkX and Matplotlib.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I analyze cooperation on the CPython project by analyzing the code contributions that each participant on the project has done through time. I model these contributions as a succession of bipartite networks where the bipartite node sets are contributors and source code files; each contributor is linked to the source files to which they have contributed, weighted by the number of lines of source code added. Analyzing the structure of these networks using NetworkX and Matplotlib I found an hierarchy of nested groups of developers that corresponds to the developers that do most of the code contributions in the CPython project. This hierarchy, on the one hand, reflects the empirically well established fact that in FOSS projects only a small fraction of the developers account for most of the contributions. And, on the other hand, refutes the naive views of early academic accounts that characterized FOSS projects as a flat hierarchy of peers in which every individual does more or less the same. I argue that the structure of CPython's cooperation network can be characterized as an open elite, where the top levels of this hierarchy are filled with new individuals at a high pace. This feature is key for understanding the mechanisms and dynamics that make FOSS communities able to develop long term projects, with high individual turnover, and yet achieve high impact and coherent results as a result of large scale cooperation.&lt;/p&gt;
&lt;p&gt;You can download the slides for this talk from &lt;a class="reference external" href="https://github.com/jtorrents/thesis/blob/master/presentations/pydata_bcn/cpython_code_contributions.pdf"&gt;https://github.com/jtorrents/thesis/blob/master/presentations/pydata_bcn/cpython_code_contributions.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordi Torrents</dc:creator><pubDate>Sat, 20 May 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/analyzing-code-contributions-to-the-cpython-project-using-networkx-and-matplotlib.html</guid><category>cpython</category><category>networkx</category><category>matplotlib</category></item><item><title>Matplotlib Plot Tutorial: Histograms, Scatter Plots &amp; Legend</title><link>https://pyvideo.org/datacamp/Matplotlib-Plot-Tutorial-For-Beginners.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matplotlib makes it easy to create meaningful and insightful plots. In this beginner video, you will learn how to build various types of data visualizations such as histograms, scatter plots and line plots. You will also see how to customize them to make them more visually appealing and interpretable.&lt;/p&gt;
&lt;p&gt;Want to do the corresponding exercises? Go to our &lt;cite&gt;Python For Data Science Tutorial &amp;lt;https://www.datacamp.com/courses/intro-to-python-for-data-science&amp;gt;&lt;/cite&gt; where you can do them for free.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filip Schouwenaars</dc:creator><pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-01:datacamp/Matplotlib-Plot-Tutorial-For-Beginners.html</guid><category>Matplotlib</category><category>data science</category><category>data visualization</category><category>tutorial</category><category>DataCamp</category></item><item><title>Interactive multi scale time series exploration with matplotlib</title><link>https://pyvideo.org/pydata-dc-2016/interactive-multi-scale-time-series-exploration-with-matplotlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;This tutorial is an introduction to how to matplotlib's event handling system to build an tool for interactively exploring multi-scale time series data.&lt;/p&gt;
&lt;p&gt;The primary example will be how to 'drill down' through summary data sets to view the underlying data using hourly weather data from NOAA.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Caswell</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/interactive-multi-scale-time-series-exploration-with-matplotlib.html</guid><category>matplotlib</category></item><item><title>¡Eureka! (Python y ciencia)</title><link>https://pyvideo.org/pyday-galicia-2016/eureka-python-y-ciencia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se plantea una pregunta de física básica que se resolverá científicamente con ingenio, mátemáticas y python, aprovechando para (de una manera amena) ver librerías habituales en el entorno científico como sympy, numpy, scipy, matplotlib, bokeh, numba, pandas y sklearn.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Sánchez de León Peque</dc:creator><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-17:pyday-galicia-2016/eureka-python-y-ciencia.html</guid><category>pyday</category><category>sympy</category><category>numpy</category><category>scipy</category><category>matplotlib</category><category>bokeh</category><category>numba</category><category>pandas</category><category>sklearn</category></item><item><title>Getting More Out of Matplotlib with GR</title><link>https://pyvideo.org/euroscipy-2015/getting-more-out-of-matplotlib-with-gr-euroscipy-2015-josef-heinen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matplotlib is the most popular graphics library for Python. It is the workhorse plotting utility of the scientific Python world. However, depending on the field of application, the software may be reaching its limits. This is the point where the GR framework will help. GR can be used as a backend for Matplotlib applications and significantly improve the performance and expand their capabilities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josef Heinen</dc:creator><pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-05:euroscipy-2015/getting-more-out-of-matplotlib-with-gr-euroscipy-2015-josef-heinen.html</guid><category>matplotlib</category></item><item><title>Advanced matplotlib tutorial with library author John Hunter</title><link>https://pyvideo.org/pydata/advanced-matplotlib-tutorial-library-author-john-h.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this video tutorial from the 2012 PyData Workshop, John Hunter,
author of matplotlib is going to give you some advanced insight into the
plotting library.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;John's tutorial will focus on broader topics concerning a wide set of
users, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;customization&lt;/li&gt;
&lt;li&gt;configuration&lt;/li&gt;
&lt;li&gt;event handling&lt;/li&gt;
&lt;li&gt;interacting with figures&lt;/li&gt;
&lt;li&gt;tips &amp;amp; tricks&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Hunter</dc:creator><pubDate>Fri, 30 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-30:pydata/advanced-matplotlib-tutorial-library-author-john-h.html</guid><category>matplotlib</category></item><item><title>Advanced Matplotlib</title><link>https://pyvideo.org/scipy-2012/advanced-matplotlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matplotlib is one of the main plotting libraries in use within the
scientific Python community. This tutorial covers advanced features of
the Matplotlib library, including many recent additions: laying out
axes, animation support, Basemap (for plotting on maps), and other
tweaks for creating aesthetic plots. The goal of this tutorial is to
expose attendees to several of the chief sub- packages within
Matplotlib, helping to ensure that users maximize the use of the full
capabilities of the library. Additionally, the attendees will be run
through a 'grab-bag' of tweaks for plots that help to increase the
aesthetic appeal of created figures. Attendees should be familiar with
creating basic plots in Matplotlib as well as basic use of NumPy for
manipulating data.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/dopplershift%20/Python-Tutorials"&gt;iPython notebooks used in the
tutorial&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan May</dc:creator><pubDate>Mon, 16 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-16:scipy-2012/advanced-matplotlib.html</guid><category>advanced</category><category>matplotlib</category><category>tutorial</category></item><item><title>Anatomy of Matplotlib - Part 1</title><link>https://pyvideo.org/scipy-2014/anatomy-of-matplotlib-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will be the introduction to matplotlib. Users will learn
the types of plots and experiment with them. Then the fundamental
concepts and terminologies of matplotlib are introduced. Next, we will
learn how to change the &amp;quot;look and feel&amp;quot; of their plots. Finally, users
will be introduced to other toolkits that extends matplotlib.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li&gt;Purpose of matplotlib&lt;/li&gt;
&lt;li&gt;Online Documentation&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mailing Lists and StackOverflow&lt;/li&gt;
&lt;li&gt;Github Repository&lt;/li&gt;
&lt;li&gt;Bug Reports &amp;amp; Feature Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is this &amp;quot;backend&amp;quot; thing I keep hearing about?&lt;ul&gt;
&lt;li&gt;Interactive versus non-interactive&lt;/li&gt;
&lt;li&gt;Agg&lt;/li&gt;
&lt;li&gt;Tk, Qt, GTK, MacOSX, Wx, Cairo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plotting Functions&lt;ul&gt;
&lt;li&gt;Graphs (plot, scatter, bar, stem, etc.)&lt;/li&gt;
&lt;li&gt;Images (imshow, pcolor, pcolormesh, contour[f], etc.)&lt;/li&gt;
&lt;li&gt;Lesser Knowns: (pie, acorr, hexbin, streamplot, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What goes in a Figure?&lt;ul&gt;
&lt;li&gt;Axes&lt;/li&gt;
&lt;li&gt;Axis&lt;/li&gt;
&lt;li&gt;ticks (and ticklines and ticklabels) (both major &amp;amp; minor)&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axes title&lt;/li&gt;
&lt;li&gt;figure subtitle&lt;/li&gt;
&lt;li&gt;axis spines&lt;/li&gt;
&lt;li&gt;colorbars (and the oddities thereof)&lt;/li&gt;
&lt;li&gt;axis scale&lt;/li&gt;
&lt;li&gt;axis gridlines&lt;/li&gt;
&lt;li&gt;legend&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manipulating the &amp;quot;Look-and-Feel&amp;quot;&lt;ul&gt;
&lt;li&gt;Introducing matplotlibrc&lt;/li&gt;
&lt;li&gt;Properties&lt;ul&gt;
&lt;li&gt;color (and edgecolor, linecolor, facecolor, etc...)&lt;/li&gt;
&lt;li&gt;linewidth and edgewidth and markeredgewidth (and the oddity that happens in errorbar())&lt;/li&gt;
&lt;li&gt;linestyle&lt;/li&gt;
&lt;li&gt;fonts&lt;/li&gt;
&lt;li&gt;zorder&lt;/li&gt;
&lt;li&gt;visible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What are toolkits?&lt;ul&gt;
&lt;li&gt;axes_grid1&lt;/li&gt;
&lt;li&gt;mplot3d&lt;/li&gt;
&lt;li&gt;basemap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Root</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/anatomy-of-matplotlib-part-1.html</guid><category>matplotlib</category></item><item><title>Anatomy of Matplotlib - Part 2</title><link>https://pyvideo.org/scipy-2014/anatomy-of-matplotlib-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will be the introduction to matplotlib. Users will learn
the types of plots and experiment with them. Then the fundamental
concepts and terminologies of matplotlib are introduced. Next, we will
learn how to change the &amp;quot;look and feel&amp;quot; of their plots. Finally, users
will be introduced to other toolkits that extends matplotlib.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li&gt;Purpose of matplotlib&lt;/li&gt;
&lt;li&gt;Online Documentation&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mailing Lists and StackOverflow&lt;/li&gt;
&lt;li&gt;Github Repository&lt;/li&gt;
&lt;li&gt;Bug Reports &amp;amp; Feature Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is this &amp;quot;backend&amp;quot; thing I keep hearing about?&lt;ul&gt;
&lt;li&gt;Interactive versus non-interactive&lt;/li&gt;
&lt;li&gt;Agg&lt;/li&gt;
&lt;li&gt;Tk, Qt, GTK, MacOSX, Wx, Cairo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plotting Functions&lt;ul&gt;
&lt;li&gt;Graphs (plot, scatter, bar, stem, etc.)&lt;/li&gt;
&lt;li&gt;Images (imshow, pcolor, pcolormesh, contour[f], etc.)&lt;/li&gt;
&lt;li&gt;Lesser Knowns: (pie, acorr, hexbin, streamplot, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What goes in a Figure?&lt;ul&gt;
&lt;li&gt;Axes&lt;/li&gt;
&lt;li&gt;Axis&lt;/li&gt;
&lt;li&gt;ticks (and ticklines and ticklabels) (both major &amp;amp; minor)&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axes title&lt;/li&gt;
&lt;li&gt;figure subtitle&lt;/li&gt;
&lt;li&gt;axis spines&lt;/li&gt;
&lt;li&gt;colorbars (and the oddities thereof)&lt;/li&gt;
&lt;li&gt;axis scale&lt;/li&gt;
&lt;li&gt;axis gridlines&lt;/li&gt;
&lt;li&gt;legend&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manipulating the &amp;quot;Look-and-Feel&amp;quot;&lt;ul&gt;
&lt;li&gt;Introducing matplotlibrc&lt;/li&gt;
&lt;li&gt;Properties&lt;ul&gt;
&lt;li&gt;color (and edgecolor, linecolor, facecolor, etc...)&lt;/li&gt;
&lt;li&gt;linewidth and edgewidth and markeredgewidth (and the oddity that happens in errorbar())&lt;/li&gt;
&lt;li&gt;linestyle&lt;/li&gt;
&lt;li&gt;fonts&lt;/li&gt;
&lt;li&gt;zorder&lt;/li&gt;
&lt;li&gt;visible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What are toolkits?&lt;ul&gt;
&lt;li&gt;axes_grid1&lt;/li&gt;
&lt;li&gt;mplot3d&lt;/li&gt;
&lt;li&gt;basemap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Root</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/anatomy-of-matplotlib-part-2.html</guid><category>matplotlib</category></item><item><title>Anatomy of Matplotlib - Part 3</title><link>https://pyvideo.org/scipy-2014/anatomy-of-matplotlib-part-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will be the introduction to matplotlib. Users will learn
the types of plots and experiment with them. Then the fundamental
concepts and terminologies of matplotlib are introduced. Next, we will
learn how to change the &amp;quot;look and feel&amp;quot; of their plots. Finally, users
will be introduced to other toolkits that extends matplotlib.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li&gt;Purpose of matplotlib&lt;/li&gt;
&lt;li&gt;Online Documentation&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://matplotlib.org"&gt;matplotlib.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mailing Lists and StackOverflow&lt;/li&gt;
&lt;li&gt;Github Repository&lt;/li&gt;
&lt;li&gt;Bug Reports &amp;amp; Feature Requests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is this &amp;quot;backend&amp;quot; thing I keep hearing about?&lt;ul&gt;
&lt;li&gt;Interactive versus non-interactive&lt;/li&gt;
&lt;li&gt;Agg&lt;/li&gt;
&lt;li&gt;Tk, Qt, GTK, MacOSX, Wx, Cairo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plotting Functions&lt;ul&gt;
&lt;li&gt;Graphs (plot, scatter, bar, stem, etc.)&lt;/li&gt;
&lt;li&gt;Images (imshow, pcolor, pcolormesh, contour[f], etc.)&lt;/li&gt;
&lt;li&gt;Lesser Knowns: (pie, acorr, hexbin, streamplot, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What goes in a Figure?&lt;ul&gt;
&lt;li&gt;Axes&lt;/li&gt;
&lt;li&gt;Axis&lt;/li&gt;
&lt;li&gt;ticks (and ticklines and ticklabels) (both major &amp;amp; minor)&lt;/li&gt;
&lt;li&gt;axis labels&lt;/li&gt;
&lt;li&gt;axes title&lt;/li&gt;
&lt;li&gt;figure subtitle&lt;/li&gt;
&lt;li&gt;axis spines&lt;/li&gt;
&lt;li&gt;colorbars (and the oddities thereof)&lt;/li&gt;
&lt;li&gt;axis scale&lt;/li&gt;
&lt;li&gt;axis gridlines&lt;/li&gt;
&lt;li&gt;legend&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Manipulating the &amp;quot;Look-and-Feel&amp;quot;&lt;ul&gt;
&lt;li&gt;Introducing matplotlibrc&lt;/li&gt;
&lt;li&gt;Properties&lt;ul&gt;
&lt;li&gt;color (and edgecolor, linecolor, facecolor, etc...)&lt;/li&gt;
&lt;li&gt;linewidth and edgewidth and markeredgewidth (and the oddity that happens in errorbar())&lt;/li&gt;
&lt;li&gt;linestyle&lt;/li&gt;
&lt;li&gt;fonts&lt;/li&gt;
&lt;li&gt;zorder&lt;/li&gt;
&lt;li&gt;visible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What are toolkits?&lt;ul&gt;
&lt;li&gt;axes_grid1&lt;/li&gt;
&lt;li&gt;mplot3d&lt;/li&gt;
&lt;li&gt;basemap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Root</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/anatomy-of-matplotlib-part-3.html</guid><category>matplotlib</category></item><item><title>RM204 BOF MatPlotLib Discussion</title><link>https://pyvideo.org/scipy-2014/rm204-bof-matplotlib-discussion.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will have an open discussion about current matplotlib enhancement
proposals and take calls for new ones. Anyone interested in matplotlib's
future development efforts is more than welcome to attend. There will be
no presentation. Current MEPs exist here:
&lt;a class="reference external" href="https://github.com/matplotlib/matplotlib/wiki#matplotlib-enhancement-proposals-meps"&gt;https://github.com/matplotlib/matplotlib/wiki#matplotlib-enhancement-proposals-meps&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damon McDougall</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/rm204-bof-matplotlib-discussion.html</guid><category>matplotlib</category></item><item><title>The Wonderful World of Scientific Computing with Python</title><link>https://pyvideo.org/scipy-2014/the-wonderful-world-of-scientific-computing-with.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will give an overview of the basics of the scientific computing
ecosystem with Python: what does each of the fundamental packages
(numpy, matplotlib, scipy, sympy and pandas) do, and how does it work?
We will use the IPython Notebook in our quest to enter this wonderful
world.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting out with scientific computing in Python can be daunting: Where
do I start? What are the basic packages, and what is the use case for
each of them? What are the fundamental ideas I need to understand each
package and how it works?&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use examples of scientific questions and
calculations which lead directly to the need for certain computational
tools as a gateway to understand the basic structure of the scientific
computing ecosystem. The specific packages we will touch on are
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, all
viewed through the wonderful lens of the IPython Notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David P. Sanders</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/the-wonderful-world-of-scientific-computing-with.html</guid><category>matplotlib</category><category>numpy</category><category>pandas</category><category>scipy</category><category>sympy</category></item><item><title>JSON data + RML template = PDF report</title><link>https://pyvideo.org/europython-2011/json-data-rml-template-pdf-report.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefano Cotta Ramusino - 23 June 2011 in &amp;quot;Track
Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The main problem with reports generated in Python is how to separate the
content from the style using ReportLab library, because all informations
should be saved in a single source file that, by example, is impossible
to understand for your graphic designer.&lt;/p&gt;
&lt;p&gt;So the solution: just modularizes all components you need and identify
simple container formats for your data input (JSON) and document
template (ReportLab RML).&lt;/p&gt;
&lt;p&gt;Now with the power of Genshi and XInclude we will create dynamic
templates that include specific snippets (e.g., to generate on the fly a
decent graph with matplotlib or cairoplot to fill some lacks of
ReportLab) and we will detach the stylesheet from the template
structure.&lt;/p&gt;
&lt;p&gt;And at the end you can also have the internationalization service in the
PDF report generation!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/json-data-rml-template-pdf-report.html</guid><category>internationalization</category><category>json</category><category>matplotlib</category></item><item><title>New beauty in Camelot</title><link>https://pyvideo.org/europython-2011/new-beauty-in-camelot.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in &amp;quot;Track
Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot is a Python framework that leverages SQLAlchemy and QT to build
rich desktop applications. The model - view definition used was inspired
by the Django Admin interface. Some see it as a replacement for MS
Access, but it's underlying libraries allow much more advanced features.&lt;/p&gt;
&lt;p&gt;In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and
new types of actions to displaying custom SQLAlchemy queries in a table
view.&lt;/p&gt;
&lt;p&gt;We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case
studies we will point out the mistakes we made and how they were
corrected.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/new-beauty-in-camelot.html</guid><category>deployment</category><category>django</category><category>framework</category><category>matplotlib</category><category>qt</category><category>sqlalchemy</category></item><item><title>Distributing Python programs through PyInstaller</title><link>https://pyvideo.org/europython-2011/distributing-python-programs-through-pyinstaller.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Giovanni Bajo - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on how to distribute multi-platform proprietary
Python applications, using &lt;a class="reference external" href="http://www.pyinstaller.org"&gt;PyInstaller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python
installation, nor third party library. The executable can then be packed
and shipped in many different ways (through installer wizards, deb/rpm
packages, etc.).&lt;/p&gt;
&lt;p&gt;PyInstaller is a good multi-platform alternative to tools like py2exe
and py2app, but it found troubles to gain acceptance in a market that
seems strongly tied to older tools. Instead, PyInstaller puts forward
important new features: for instance, it works on the most important
desktop platforms (Windows, Linux/UNIX, Mac), and it has got an
automatic and fully transparent support for all the workarounds needed
to make applications using complex libraries like Matplotlib or PyQt
work within a static executable.&lt;/p&gt;
&lt;p&gt;In detail, the following points will be discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Distribution of a priopriertary software: initial requests&lt;/li&gt;
&lt;li&gt;PyInstaller: how it works (basic tutorial)&lt;/li&gt;
&lt;li&gt;The secrets of PyInstaller: technical details&lt;/li&gt;
&lt;li&gt;Import hooks: effectively handling third party extensions&lt;/li&gt;
&lt;li&gt;Flexibility with PyInstaller: what goes in and what stays out&lt;/li&gt;
&lt;li&gt;Linux: static binaries for a single distribution or
cross-distributions&lt;/li&gt;
&lt;li&gt;Mac: creation of bundles for graphic applications&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/distributing-python-programs-through-pyinstaller.html</guid><category>matplotlib</category><category>py2exe</category><category>pyqt</category></item><item><title>Guy Kloss - Python Data Plotting and Visualisation Extravaganza</title><link>https://pyvideo.org/kiwi-pycon-2009/guy-kloss---python-data-plotting-and-visualisatio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Data Plotting and Visualization Extravaganza&lt;/p&gt;
&lt;p&gt;Presented by Guy Kloss&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In various fields data is accumulated or produced. This can be
observation data, statistical data, simulation data, ... Information
like that can in many cases be much more easily analysed through the
user's eyes employing data visualisation. This talk is trying to dive
briefly into various means and tools to visually analyse data of
different qualities: time series, simple 2D plots, surface plots, volume
plots, quiver plots, etc.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;I am planning on doing a &amp;quot;fly by&amp;quot; through the world of data
visualisation for different types of data using different tools. Types
of data:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1D data and simple functions&lt;/li&gt;
&lt;li&gt;2D data for surface plots&lt;/li&gt;
&lt;li&gt;3D data through quiver plots, iso surfaces, and cutting planes&lt;/li&gt;
&lt;li&gt;n-D data through different means&lt;/li&gt;
&lt;li&gt;continuous and non-continuously structured data&lt;/li&gt;
&lt;li&gt;time series&lt;/li&gt;
&lt;li&gt;real time data visualisation/analysis&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tools that will probably appear in the demos and discussions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GNUplot&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;li&gt;Mayavi2&lt;/li&gt;
&lt;li&gt;Visual Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guy Kloss</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/guy-kloss---python-data-plotting-and-visualisatio.html</guid><category>data</category><category>gnuplot</category><category>kiwipycon</category><category>kiwipycon2009</category><category>matplotlib</category><category>mayavi2</category><category>plotting</category><category>visualpython</category></item></channel></rss>