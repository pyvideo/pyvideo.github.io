<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-es-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-12-21T00:00:00+00:00</updated><entry><title>Resumen PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/resumen-pycones-2016.html" rel="alternate"></link><published>2016-12-21T00:00:00+00:00</published><updated>2016-12-21T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-12-21:pycon-es-2016/resumen-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vídeo resumen de la PyConES 2016 celebrada en Almería &lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Primer on Recommendation Systems - PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/a-primer-on-recommendation-systems-pycones-2016.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Manuel Garrido</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/a-primer-on-recommendation-systems-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los sistemas de recomendación son un tema bastante familiar para cualquier Data Scientist. Sin embargo, no existe ningún tutorial de perfil generalista, que empiece con la teoría básica y que acabe implementando sistemas de recomendación reales.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://github.com/manugarri/pycones_2016_talk_recommenders"&gt;https://github.com/manugarri/pycones_2016_talk_recommenders&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Aggregation framework con Pymongo</title><link href="https://pyvideo.org/pycon-es-2016/aggregation-framework-con-pymongo.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Javier Sujar</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/aggregation-framework-con-pymongo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se comenzará dando una breve descripción de MongoDB y su aggregation framework. Se seleccionará un ejemplo fácilmente entendible y se comenzará a trabajar con distintas operaciones en MongoDB. Se practicará con consultas de campos embebidos, jugando con distintas proyecciones y condiciones, para asi comprender los conocimientos básicos del pipeline. De esta manera se pretende mostrar las principales ideas y cómo hacer este tipo de consultas en una base de datos NoSQL. La audiencia podrá entender mejor esta charla si posee conocimientos previos de MongoDB.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/PyMongo_Aggregation_framework_cRjlzDq.pptx"&gt;http://2016.es.pycon.org/media/keynotes/PyMongo_Aggregation_framework_cRjlzDq.pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Análisis de colores: cómo analizar tendencias de moda automáticamente</title><link href="https://pyvideo.org/pycon-es-2016/analisis-de-colores-como-analizar-tendencias-de-moda-automaticamente.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Javier Abadía</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/analisis-de-colores-como-analizar-tendencias-de-moda-automaticamente.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla veremos cómo analizar los colores de un gran conjunto de imágenes y presentar los resultados de dicho análisis para observar las tendencias cromáticas de moda.&lt;/p&gt;
&lt;p&gt;Para hacer este análisis hay que resolver varios problemas: ¿cómo extraigo el color dominante de una imagen? ¿como comparo los colores? ¿cómo evalúo los resultados aplicando distintos espacios de color? ¿es mejor usar RGB, HSV, Lab...? ¿cómo ordeno los colores de forma visualmente agradable?&lt;/p&gt;
&lt;p&gt;Y todo para saber si el año que viene se va a llevar el rojo marsala o el rosa quarzo…&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Argentina en Python: comunidad, sueños, viajes y aprendizaje - PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/argentina-en-python-comunidad-suenos-viajes-y-aprendizaje-pycones-2016.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Manuel Kaufmann</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/argentina-en-python-comunidad-suenos-viajes-y-aprendizaje-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/aep-keynote.pdf"&gt;http://2016.es.pycon.org/media/keynotes/aep-keynote.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Beautiful Python (in Spanish)</title><link href="https://pyvideo.org/pycon-es-2016/beautiful-python-in-spanish.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Alicia Perez</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/beautiful-python-in-spanish.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cuando empecé a programar en Python me llamó la atención que uno de los valores del Zen de Python es escribir código bonito y expresivo... tanto que tiene su propio nombre: Código Pythónico.&lt;/p&gt;
&lt;p&gt;En esta charla veremos con detalle algunas de las construcciones más pythónicas y las posibilidades de expresar de forma clara, concisa y elegante cosas que en otros lenguajes nos obligarían a dar muchos rodeos.&lt;/p&gt;
&lt;p&gt;A veces es fácil olvidar algunos recursos como que una función puede devolver varios valores, cómo manipular listas de forma sencilla, programación funcional, contextos, decoradores...&lt;/p&gt;
&lt;p&gt;Una forma entretenida y práctica de mejorar tu nivel de Python «nativo».&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/aliciapj/beautifulpython#/"&gt;http://slides.com/aliciapj/beautifulpython#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Big Data Analytics low cost con Bcolz / Bquery</title><link href="https://pyvideo.org/pycon-es-2016/big-data-analytics-low-cost-con-bcolz-bquery.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>J. Diego Hueltes</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/big-data-analytics-low-cost-con-bcolz-bquery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cada año se incrementa la diferencia entre el tiempo de acceso a memoria y la velocidad de los procesadores. Esto está provocando que se formen cuellos de botella en en el uso de memoria, desaprovechando en muchas ocasiones la capacidad de los procesadores. En el análisis de datos, concretamente en el análisis numérico, es usual que ocurra éste desaprovechamiento, sobre todo si se trabaja con datos estructurados en columnas, lo cual es muy habitual en este tipo de análisis. Es el caso de Python Pandas por ejemplo.&lt;/p&gt;
&lt;p&gt;Bcolz aparece con la idea de utilizar la máxima capacidad posible del procesador, sin tener que depender de la memoria. Para ello bcolz establece un formato de archivos en el cual los datos se guardan en disco comprimidos, estructurados por columnas y en trozos del tamaño de la caché del procesador. Cuando se realiza una operación sobre archivos bcolz, la información es transportada de disco diréctamente a procesador. El procesador descomprime la información en su caché y opera con ella.&lt;/p&gt;
&lt;p&gt;Al eliminar la barrera de la memoria, conseguimos utilizar el máximo rendimiento del procesador/procesadores y además podremos hacer análisis que antes eran imposible de realizar sin una estrategia multinodo ya que la memoria es algo muy caro/limitado de conseguir en servidores pero el disco no. Además la compresión está hecha con Blosc, que es un compresor muy rápido, que entre otras cosas ha conseguido tiempos excepcionales en el tiempo de transmisión a la caché, incluso más rápido que un memcpy() Bcolz está obteniendo mejores tiempos de consulta en disco que Pandas en memoria. Tabién puede ser usado en memoria aumentando aún más su velocidad, ya que los datos se almacenan en memoria igualmente comprimidos, aunque no es la idea de su diseño.&lt;/p&gt;
&lt;p&gt;En la charla se examinarán las posibilidades de Bcolz y la revolución que supone en el análisis de datos numérico, especialmente para quien trabaje con Pandas. Se mostrará que para muchos casos en los cuales por considerarse “Big Data” se opta por una estrategia multinodo del tipo Hadoop, y podría ser mucho más fácil, rápido y menos costoso usando Bcolz. También se verá su aplicación a casos reales en producción y se hablarán de sus ventajas así como de sus limitaciones. Se proporcionará una breve demostración en directo de sus capacidades.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Clausura y entrega de premios Cajamar PythonHack 2016</title><link href="https://pyvideo.org/pycon-es-2016/clausura-y-entrega-de-premios-cajamar-pythonhack-2016.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/clausura-y-entrega-de-premios-cajamar-pythonhack-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clausura de PyConES 2016 y entrega de los premios Cajamar PythonHack 2016.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Codecombat: Aprendiendo Python mientras matas Orcos</title><link href="https://pyvideo.org/pycon-es-2016/codecombat-aprendiendo-python-mientras-matas-orcos.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>José María Álvarez</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/codecombat-aprendiendo-python-mientras-matas-orcos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Codecombat me parece una gran idea. Permite a profesores y padres el enseñar a sus hijos a programar de una manera adictiva y divertida.&lt;/p&gt;
&lt;p&gt;El objetivo de la charla es presentar la plataforma a nivel técnico, enseñar cómo funciona, ver algunos retos y analizar algunos casos de niños cuyo experiencia en programación es 0 y empiezan a programar usándola. Al final, haré un pequeño overview de otras plataformas similares.&lt;/p&gt;
&lt;p&gt;La charla quiero que sea 100% práctica. Viendo cómo funciona la plataforma y qué tipo de retos tienen que superar los niños y qué cosas van aprendiendo en cada uno de ellos.&lt;/p&gt;
&lt;p&gt;Al ser una plataforma orientada a gente sin ningún conocimiento en programación, no son necesarios ningún tipo de conocimiento previos.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/josemariaalvarezrey/pycones2016-codecombat#/"&gt;http://slides.com/josemariaalvarezrey/pycones2016-codecombat#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Cómo crear tu propio Shodan de casa</title><link href="https://pyvideo.org/pycon-es-2016/como-crear-tu-propio-shodan-de-casa.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Jorge Coronado</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/como-crear-tu-propio-shodan-de-casa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En su momento ya el buscador Google hizo un antes y un después en la navegación de los usuarios. En 2009 John Matherly creo Shodan que hizo un antes y un después en los expertos en seguridad y delincuentes que se aprovechan de esta tecnología para atacar infraestructuras y servidores informáticos.&lt;/p&gt;
&lt;p&gt;Mi objetivo de esta charla es enseñar lo fácil que es gestionar un ataque dirigido teniendo una base de datos llena de información sobre posibles servicios vulnerables.&lt;/p&gt;
&lt;p&gt;Por último explico como crear una lanzadera de exploits para automatizar los ataques masivos a esas posibles máquinas vulnerables.&lt;/p&gt;
&lt;p&gt;¿Cómo funciona Shodan? Al igual que Google dispone de un ejército de crawlers, sin embargo la diferencia es que no indexa webs sino la información de los puertos y servicios que disponen cada una de las direcciones IPv4.&lt;/p&gt;
&lt;p&gt;Sabiendo esta información de cómo funciona, ¿por qué no creamos nuestro propio Shodan? La charla de 30 minutos comprende en varias fases:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Explicación del funcionamiento de Shodan.&lt;/li&gt;
&lt;li&gt;¿Qué es Shodita? (Python, mongoDB)&lt;/li&gt;
&lt;li&gt;Cómo crear un Bot en Python.&lt;/li&gt;
&lt;li&gt;Datos y resultados de servidores vulnerables por zona.&lt;/li&gt;
&lt;li&gt;Crear lanzadera de exploits con Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://www.slideshare.net/quantikacatorce/cmo-crear-tu-propio-shodan-con-python"&gt;https://www.slideshare.net/quantikacatorce/cmo-crear-tu-propio-shodan-con-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Depurando como un pro: porque llenar un script con prints es cutre</title><link href="https://pyvideo.org/pycon-es-2016/depurando-como-un-pro-porque-llenar-un-script-con-prints-es-cutre.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Javi Romero</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/depurando-como-un-pro-porque-llenar-un-script-con-prints-es-cutre.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una introducción a la depuración, cómo se usa en Python y qué ventajas nos ofrece. Veremos qué herramientas podemos utilizar y las emplearemos para encontrar un error esquivo en nuestro código.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://slides.com/javiromero/depurando-como-un-pro-porque-llenar-un-script-con-prints-es-cutre/live#/"&gt;https://slides.com/javiromero/depurando-como-un-pro-porque-llenar-un-script-con-prints-es-cutre/live#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Distributed computing with Dask</title><link href="https://pyvideo.org/pycon-es-2016/distributed-computing-with-dask.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Israel Saeta</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/distributed-computing-with-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a modern parallel computing library completely written in Python. It is extremely flexible, being able to work well on a laptop, using all available cores in parallel, or scale up to a cluster of hundreds of nodes.&lt;/p&gt;
&lt;p&gt;Instead of forcing you to wrap your code to use the map-reduce paradigm, it mimics the numpy array and pandas dataframe interfaces, so you can continue doing everything the same way you always do.&lt;/p&gt;
&lt;p&gt;Dask main abstraction is a Directed Acyclic Graph called &amp;quot;dask&amp;quot; (distributed task) implemented as a simple dictionary. The different interfaces (bag, array, dataframe) create these dasks, that are later computed in a distributed fashion using a suitable scheduler.&lt;/p&gt;
&lt;p&gt;Forget about the JVM overhead. The future is now, the future is dask!&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="http://slides.com/israelsaetaperez/dask-pycones16/"&gt;http://slides.com/israelsaetaperez/dask-pycones16/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Haciendo matemáticas con Python</title><link href="https://pyvideo.org/pycon-es-2016/haciendo-matematicas-con-python.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Daniel Domene</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/haciendo-matematicas-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esta charla está basada en el libro &amp;quot;Doing Math With Python&amp;quot; de Amit Saha.&lt;/p&gt;
&lt;p&gt;En los 15 minutos de charla se hará una pequeña introducción al algebra y al cálculo:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;En un primer acercamiento se hará un repaso a cómo trabajar con los números y se expondrán diferentes maneras de utilizar python para escribir programas que trabajen por nosotros, y se mostrará por ejemplo como hacer un pequeño código para el cambio de unidades.&lt;/li&gt;
&lt;li&gt;En una segunda parte se introducirá el cálculo simbólico con SymPy y se navegará en las posibilidades que ofrece, como la resolución de pequeñas ecuaciones o incluso su representación.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notebook de Jupyter de la presentación en &lt;a class="reference external" href="https://github.com/planelles20/PyConES-HaciendoMates/blob/master/Mates_Python.ipynb"&gt;https://github.com/planelles20/PyConES-HaciendoMates/blob/master/Mates_Python.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introducción a PyQt - PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/introduccion-a-pyqt-pycones-2016.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Juan Rodríguez</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/introduccion-a-pyqt-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Es una charla que pretende resolver una cuestión que suele surgir en todos los nuevos programadores que se acercan a PyQt y que es la curva de aprendizaje, dado que no es simple comenzar a usar PyQt para quienes recién comienzan. A diferencia de otros proyectos Python o de Software Libre, PyQt tiene una documentación a veces un poco críptica o muy técnica que es prohibitiva para los usuarios novatos, y que aleja a mucha gente de este interesantísimo framework gráfico multiplataforma. La documentación de los bindings suele estar basada en los ejemplos de C++ de Qt que suelen ser difíciles de comprender para programadores Python novatos. Veremos cómo trabajar con los widgets básicos, algunos de sus métodos principales, y también desarrollaremos algunas aplicaciones simples pero representativas, tales como un visor de imágenes CLI, una aplicación para simplificar tareas en entornos comerciales y algunos otros ejemplos más que incluyan interacción con bases de datos SQL. Nos basaremos en la última versión del framework PyQt, que tiene sintaxis diferente, en algunas partes, respecto de versiones anteriores, que son las que - en general - son tratadas en los pocos libros que hay del tema. La charla pretenderá ser una buena introducción, que le dará al público los elementos necesarios para poder continuar, luego de esta completa introducción, a conceptos más complejos de PyQt.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>La bicha ahora también hace hardware</title><link href="https://pyvideo.org/pycon-es-2016/la-bicha-ahora-tambien-hace-hardware.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Cristóbal Contreras</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/la-bicha-ahora-tambien-hace-hardware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Si quisiéramos diseñar nuestros propios chips y poder testear nuestros prototipos, debemos usar unas herramientas llamadas FPGAs. La charla estará enfocada a conocer que son, que utilidades tienen y como podemos usarlas con Python. La librería usada para tal fin es MyHDL, la cual transforma Python en una lenguaje de síntesis hardware (HDL).&lt;/p&gt;
&lt;p&gt;Últimamente estos chips están en el candelero gracias al proyecto IceStorm, donde se ha conseguido a través de ingeniería inversa poder tener una pila Open Source-Hardware completa. Así pues veremos que placas permiten trabajar con estas Open-FPGA, y realizaremos un pequeño Hello World con una de ellas.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/crisconru/deck-1-2/"&gt;http://slides.com/crisconru/deck-1-2/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>La gran explosión de datos en astronomía</title><link href="https://pyvideo.org/pycon-es-2016/la-gran-explosion-de-datos-en-astronomia.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Jose Sabater</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/la-gran-explosion-de-datos-en-astronomia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El volumen de datos de las observaciones astronómicas se hay ido duplicando año tras año. Con la inminente llegada de nuevas infraestructuras astronómicas se espera que el crecimiento sea aún más acelerado. Por ejemplo, el Large Synoptic Survey Telescope (LSST) obtendrá 30 TB de datos y disparará 2 millones de eventos cada noche durante 10 años a partir de 2022. El radio-telescopio Square Kilometre Array (SKA) producirá 160 TB de datos en bruto o 100 GB de datos procesados por segundo y deberá almacenar un total de ~4.6 EB de datos cada año. La primera fase de SKA entrará en servicio en 2020. La llegada de este torrente de datos es inminente y su procesado y almacenamiento está lejos de ser trivial. Entre los muchos frentes necesarios para tratar estos datos se encuentran la Inteligencia Artificial, las tecnologías de &amp;quot;big data&amp;quot; o la ciencia ciudadana.&lt;/p&gt;
&lt;p&gt;LOFAR es uno de los radio-telescopios precursores de SKA y se encuentra actualmente operativo. Se trata de un radio-telescopio definido por software que observa el cielo en frecuencias entre los 10 y los 250 MHz. Los datos de una observación de 8 horas alcanzan los 20 TB y su calibración, además de ser completamente experimental, requiere unos 3 años de procesador. En la charla mostraré cómo se pueden manejar datos radio-astronómicos de LOFAR con la ayuda de infraestructuras en la nube y Python. Se presentará el resultado de una propuesta conjunta entre SKA y Amazon Web Services (AWS) para la implementación de nuevos métodos de calibración de grandes volúmenes de datos radio-astronómicos en la nube de Amazon. El papel de Python para el desarrollo rápido de este tipo de métodos es fundamental, permitiendo la creación y modificación rápida de flujos de procesado de datos. El objetivo final es mostrar como la astronomía, una de las ciencias más antiguas, empuja la frontera de la tecnología más moderna con la ayuda de Python.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/jsabater-PyConES2016.pdf"&gt;http://2016.es.pycon.org/media/keynotes/jsabater-PyConES2016.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="astronomy"></category></entry><entry><title>Los closures que emocionaron a Spielberg</title><link href="https://pyvideo.org/pycon-es-2016/los-closures-que-emocionaron-a-spielberg.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Pablo Galindo</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/los-closures-que-emocionaron-a-spielberg.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;De los creadores de «Los titulares sensacionalistas que emocionaron a Spielberg», esta charla tiene como objetivo que la audiencia se familiarice con el casi eternamente esquivo concepto de los «closures» (o «cierres»). Éste es un término con el que en ocasiones nos cruzamos en charlas o por Internet y ante el cual nuestro primer impulso es, aterrados, cerrar la pestaña de nuestro navegador. Pero, quizás muy a nuestro pesar, los «cierres» forman parte de nuestro día a día, y merece la pena aprender a desenvolvernos con ellos aunque sólo sea para —por fin— entender qué es exactamente ese error de UnboundLocalError que nos hemos encontrado a veces… aunque la variable existe.&lt;/p&gt;
&lt;p&gt;Para ello, seguiremos un itinerario que va progresivamente desde lo más fácil y familiar a lo más difícil y específico. Empezaremos por introducir algunos problemas sencillos que se suelen presentar en escenarios de programación comunes, entendiendo cuál es su relación con ese arcano y misterioso ente que son los closures . Una vez hayamos comprendido su definición, pasaremos a dar algunos ejemplos prácticos que nos ayuden a asentar el concepto permanente e irreversiblemente en nuestras mentes. También explicaremos su relación con otros componentes del ecosistema Python, incluyendo decoradores y el módulo functools. Por último, mostraremos algunos ejemplos ignotos en los que los primigenios usaron closures para optimizar parte del código de la librería estándar.&lt;/p&gt;
&lt;p&gt;Resumen esquemático de la charla:&lt;/p&gt;
&lt;p&gt;Scope de las variables vars() / locals() / globals() Qué es una closure Motivación: por qué se usan Ejemplos practicos Decoradores Closures y functools Optimizacion de codigo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Micropython</title><link href="https://pyvideo.org/pycon-es-2016/micropython.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Jesús Cea</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hoy en día podemos comprar un ESP8266 por apenas 2€. Este chip incluye 4 megas de memoria flash (los modelos más grandes) pero apenas 96kbytes de RAM. Poder instalar Python en un entorno así, capaz de conectarse a una red wifi y de emplear infinidad de sensores y actuadores abre unas posibilidades ilimitadas.&lt;/p&gt;
&lt;p&gt;Python permite realizar desarrollos muy complejos en un tiempo récord. Esto es igualmente válido en el mundo de los micro Controladores, donde el coste por unidad y el coste de desarrollo dominan el precio final.&lt;/p&gt;
&lt;p&gt;Esta ponencia está orientada a personas con inquietudes hardware y que puedan estar interesadas es domótica, estaciones meteorológicas, alarmas y, en general, en automatizar y monitorizar pequeñas actividades en casa: controlar el consumo eléctrico en el hogar, el nivel del agua en el pozo, conexión Bluetooth en el coche, etc.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Móntate tu propio bot por cuatro duros</title><link href="https://pyvideo.org/pycon-es-2016/montate-tu-propio-bot-por-cuatro-duros.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Alberto Fernández</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/montate-tu-propio-bot-por-cuatro-duros.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amazon Lambda y API Gateway para la infraestructura, Telepot para acceder a la API de Telegram, Amazon DynamoDB para guardar el estado.&lt;/p&gt;
&lt;p&gt;Pocos ingredientes pero cóctel explosivo. Gracias a la expresividad que nos proporciona Python, aunque anclados al pasado por la obligación de usar la versión 2.7, en muy pocas líneas de código podemos conseguir la suficiente funcionalidad en un bot.&lt;/p&gt;
&lt;p&gt;El resultado es un asistente para la PyConEs a la que podemos indicarle nuestros intereses para que nos recomiende charlas y talleres, crear nuestra propia agenda y que nos avise antes de que empiece cada evento a los que nos hayamos apuntado.&lt;/p&gt;
&lt;p&gt;Durante la charla introduciremos los puntos clave para que cualquiera entienda y pueda montar su propio bot. Todo el código se hará público en Github para que otros puedan hacer sus propias versiones.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://voodmania.github.io/pycones2016-presentacion/"&gt;https://voodmania.github.io/pycones2016-presentacion/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Optimización automática de modelos bioinspirados de visión</title><link href="https://pyvideo.org/pycon-es-2016/optimizacion-automatica-de-modelos-bioinspirados-de-vision.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Rubén Crespo</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/optimizacion-automatica-de-modelos-bioinspirados-de-vision.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una cuestión básica en el campo de la computación neurocientífica es saber cómo se comprime la información del mundo externo en la retina y cómo se codifica en trenes de impulsos para ser enviada al cerebro. En consecuencia, uno de los mayores retos es el desarrollo de una plataforma capaz de transformar el mundo visual externo en un conjunto de señales eléctricas que estimulen, en tiempo real, el córtex visual. Todo ello con Python más NumPy, SciPy, OpenCV, DEAP, y scikit-learn.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/pycones-2016_FhJk7AK.pdf"&gt;http://2016.es.pycon.org/media/keynotes/pycones-2016_FhJk7AK.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>OSINT Tools for security auditing</title><link href="https://pyvideo.org/pycon-es-2016/osint-tools-for-security-auditing.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/osint-tools-for-security-auditing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talking points could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction searching information from multiples sources with OSINT tools.&lt;/li&gt;
&lt;li&gt;OSINT tools developed with python for extracting public information from servers and domains.&lt;/li&gt;
&lt;li&gt;Advantages and limitations these tools from the user point of view.&lt;/li&gt;
&lt;li&gt;Comment how these tools are developed and the main modules used in their development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the tools to comment are:&lt;/p&gt;
&lt;p&gt;Shodan Python API as search engine server information. Tinfoleak and Tweepy as Python scripts for data extraction on twitter. SpiderFoot as a tool for extract information from multiple sources. the Harvester as Python script for extracting emails and hostnames in a particular domain.&lt;/p&gt;
&lt;p&gt;This talk's resources available at &lt;a class="reference external" href="https://github.com/jmortega/osint_tools_security_auditing"&gt;https://github.com/jmortega/osint_tools_security_auditing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PALM. Big data, streaming y microservicios todo en uno</title><link href="https://pyvideo.org/pycon-es-2016/palm-big-data-streaming-y-microservicios-todo-en-uno.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Guillem Borrell</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/palm-big-data-streaming-y-microservicios-todo-en-uno.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PALM (y su implementación en Python, pylm) es una librería que proporciona las herramientas necesarias para crear servidores ligeros de altas prestaciones. Está separada en dos niveles de abstracción. El primero consta de componentes básicos que pueden utilizarse para crear cualquier tipo de servidor, mientras que en el segundo nivel se ofrecen servidores preparados para implementar topologías master-slave, clusters para map-reduce o microservicios, que se pueden extender fácilmente.&lt;/p&gt;
&lt;p&gt;En esta charla se tratarán las tecnologías y los algoritmos que permiten crear una librería como pylm en Python en menos de un año, se comentarán las dificultades superadas y los desafíos tecnológicos pendientes.&lt;/p&gt;
&lt;p&gt;PALM se está convirtiendo en la base las nuevas herramientas de NFQ solutions, como MASTR, una aplicación de nueva generación para la evaluación escalable de riesgos financieros o eCAP, que estima necesidades de capital.&lt;/p&gt;
&lt;p&gt;PALM, y por extensión pylm, aún no están terminados, pero ofrecen un acercamiento alternativo al ecosistema de Big Data, que está tendiendo a las herramientas de alto nivel. Los primeros resultados son prometedores. La misma versión de eCAP portada a PALM demostró ser ligeramente más rápida que la misma implementación con Spark.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Per Shaolin ad Astra</title><link href="https://pyvideo.org/pycon-es-2016/per-shaolin-ad-astra.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Guillem Durán</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/per-shaolin-ad-astra.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will show how it is possible to build an interactive 3D model of the solar system using the python packages shaolin and poliastro.&lt;/p&gt;
&lt;p&gt;At EuroPython Juan Luis Cano asked for a 3D visualization module for poliastro, and now we are finally presenting the first version of the poliastro 3D models build using plotly and vpython.&lt;/p&gt;
&lt;p&gt;We will review the data presented at EuroPython 2016 with an interactive model of the solar system for representing planets and its orbits.&lt;/p&gt;
&lt;p&gt;Materials available at &lt;a class="reference external" href="https://github.com/Guillem-db/PyconEs-2016"&gt;https://github.com/Guillem-db/PyconEs-2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>¿Podemos predecir si Twitter hundirá un banco?</title><link href="https://pyvideo.org/pycon-es-2016/podemos-predecir-si-twitter-hundira-un-banco.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Carlos Perales</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/podemos-predecir-si-twitter-hundira-un-banco.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En el nuevo ámbito de regulación bancaria durante esta crisis financiera, las instituciones financieras empiezan a necesitar una métrica de cómo se ve afectada su liquidez debido a su reputación en la sociedad… ¿Les quita el sueño a los bancos lo que se publique en Twitter? ¿Debería? Sobre la base del análisis de sentimiento, se plantea una metodología para medir el riesgo para un banco ante la opinión de clientes descontentos expresada en Twitter y la estimación de las posibles pérdidas.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://es.slideshare.net/CarlosPerales/podemos-predecir-si-twitter-hundir-un-banco"&gt;http://es.slideshare.net/CarlosPerales/podemos-predecir-si-twitter-hundir-un-banco&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Por qué Python mola tanto - Capítulo 462: Requests</title><link href="https://pyvideo.org/pycon-es-2016/por-que-python-mola-tanto-capitulo-462-requests.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Cesar Garcia</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/por-que-python-mola-tanto-capitulo-462-requests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla daremos un repaso a las posibilidades de Requests, comparándolo con otros lenguajes o librerías cuando venga al caso. Haremos cosas tan habituales como las siguientes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Realizar peticiones sencillas.&lt;/li&gt;
&lt;li&gt;Realizar peticiones con autenticación&lt;/li&gt;
&lt;li&gt;Enviar cabeceras personalizadas.&lt;/li&gt;
&lt;li&gt;Enviar ficheros.&lt;/li&gt;
&lt;li&gt;Manejar los formatos más comunes, como json o stream binarios.&lt;/li&gt;
&lt;li&gt;Gestionar cookies y sesiones.&lt;/li&gt;
&lt;li&gt;Gestionar conexiones SSL.&lt;/li&gt;
&lt;li&gt;Manejar fácilmente códigos de error, redirecciones, timeouts, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En definitiva, veremos cómo hacer lo que uno esperaría poder hacer con una librería HTTP.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/requests.zip"&gt;http://2016.es.pycon.org/media/keynotes/requests.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>py - reglas de asociación</title><link href="https://pyvideo.org/pycon-es-2016/py-reglas-de-asociacion.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Claudia Guirao</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/py-reglas-de-asociacion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Con los grandes volúmenes de datos disponibles hoy en día, encontrar patrones en los datos es una tarea que tiene gran importancia. Con los nuevos dispositivos móviles disponibles poco a poco la recomendación se está imponiendo sobre la búsqueda. Y también hoy en día podemos encontrar un problema de predicción multiclase en cada esquina.&lt;/p&gt;
&lt;p&gt;Estos son sólo tres ejemplos para los cuales las reglas de asociación son muy válidas. Las reglas de asociación son un sistema de aprendizaje automático que tiene unas características que las hacen muy especiales: son muy intuitivas y sencillas de trabajar con ellas, y no son complicadas de programar. El resultado de esta técnica por lo general puede resumirse en “si pasa esto, entonces esto otro”, de ahí su fácil implementación. Además, en general ofrecen unos resultados que habitualmente son bastante buenos.&lt;/p&gt;
&lt;p&gt;En la charla revisaremos los conceptos básicos de las reglas de asociación: items, antecedentes, consecuentes, soporte, confianza y lift y cómo programar un sistema de reglas sencillo en Python.&lt;/p&gt;
&lt;p&gt;Finalmente se muestran ejemplos de aplicación de los sistemas basados en reglas: patrones, recomendación y predicción.&lt;/p&gt;
&lt;p&gt;Material de la charla disponible en &lt;a class="reference external" href="https://github.com/intiveda/pyreglasasociacion"&gt;https://github.com/intiveda/pyreglasasociacion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python y DTrace</title><link href="https://pyvideo.org/pycon-es-2016/python-y-dtrace.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Jesús Cea</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/python-y-dtrace.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DTrace es un framework de instrumentalización desarrollado por Sun Microsystems para ayudarle en el desarrollo de SOLARIS 10. Presentado en 2005, se ha portado a Mac OS X, freebsd y algunas versiones de Linux.&lt;/p&gt;
&lt;p&gt;La audiencia no requiere conocimientos especiales. Hay dos perfiles básicos: programadores que desean analizar el funcionamiento detallado de sus programas y administradores de sistemas que desean analizar con detalle el funcionamiento completo de su sistema y la interacción entre rendimiento y los elementos involucrados: la aplicación o aplicaciones que se ejecutan, el sistema operativo, el hardware implicado (discos duros, tarjetas de red, memorias caché).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Tryton: Un ERP que se adapta a tus necesidades sin ataduras</title><link href="https://pyvideo.org/pycon-es-2016/tryton-un-erp-que-se-adapta-a-tus-necesidades-sin-ataduras.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Sergi Almacellas</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/tryton-un-erp-que-se-adapta-a-tus-necesidades-sin-ataduras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tryton es un framework para diseñar aplicaciones para la gestión de recursos empresariales (ERP). Explicaremos el sistema de licencias de Tryton, su stack tecnológico y su ciclo de liberación y mantenimiento de versiones. Además durante la charla haremos un pequeño tour por la aplicación mostrando las funcionalidades que nos proporciona para ser usada cómo herramienta de gestión e incluso para poder desarrollar nuestras propias desarrollo de aplicaciones de gestión.&lt;/p&gt;
&lt;p&gt;Además veremos un repaso del área funcional que cubre el núcleo de Tryton y las extensiones que se han realizado en la comunidad Española para adaptarlo a los casos de uso de España. También explicaremos cómo se integra Tryton con el ecosistema de aplicaciones Python.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://pokoli.github.io/tryton-erp-adapted-to-your-needs/"&gt;https://pokoli.github.io/tryton-erp-adapted-to-your-needs/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Tu código apesta, pero puedes tomar medidas</title><link href="https://pyvideo.org/pycon-es-2016/tu-codigo-apesta-pero-puedes-tomar-medidas.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>Jesús Marín</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/tu-codigo-apesta-pero-puedes-tomar-medidas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ya en nuestras primeras líneas de código aprendemos un mal hábito: Pensar que, si el software funciona, no hay errores. Con frecuencia los errores de lógica (y en especial los fallos de seguridad) empiezan a aparecer incluso antes de programar una sola línea. No los vemos, pero estarán ahí, a la espera de una condición muy especial en el flujo de nuestro programa para hacer de las suyas.&lt;/p&gt;
&lt;p&gt;Dichos errores se irán acumulando si no son detectados a tiempo, y con la falta de herramientas adecuadas terminarán siendo un gasto inmenso de recursos (en dinero, tiempo y esfuerzo). Afortunadamente, existe un buen número de recursos públicos o de código libre que pueden ayudarnos a evitarlo.&lt;/p&gt;
&lt;p&gt;En esta charla se visitarán, a través de ejemplos prácticos, las herramientas y métodos que se pueden aplicar a lo largo del desarrollo de nuestro programa, logrando con un esfuerzo moderado reducir drásticamente las consecuencias de un error oculto.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://pycones16.jesusmg.org/"&gt;http://pycones16.jesusmg.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Adelgazando los modelos de Django</title><link href="https://pyvideo.org/pycon-es-2016/adelgazando-los-modelos-de-django.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Héctor Pablos López</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/adelgazando-los-modelos-de-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probablemente empezaste creando una aplicación de Django que podía presumir de &amp;quot;limpia&amp;quot;. Tus modelos tienen un par de métodos añadidos, con lógica sencilla. Tus vistas hacen consultas simples y devuelven templates con un contexto razonable.&lt;/p&gt;
&lt;p&gt;Con el tiempo, los modelos empiezan a cambiar, necesitas hacer vistas que devuelven contextos con datos más complejos, aumenta la cantidad de métodos en los modelos, las vistas empiezan a implementar lógica y, ahora que lo piensas, puedes reutilizar esa función, así que la sacas a un módulo de utilidades, quizá lo decides bautizar como controlador.&lt;/p&gt;
&lt;p&gt;Después de todas esas fantásticas nuevas features que has conseguido implementar, tienes modelos de cientos de líneas, lógica desparramada en varios ¨controladores&amp;quot; que importas en tantos módulos que, cada vez que creas uno nuevo, optas por copiar y pegar los import de siempre. Ah, y cada vista tienen más lógica que tu trabajo fin de carrera. ¿En cual de los &amp;quot;controladores&amp;quot; estaba esa función que te da una lista de ids y nombres de usuarios con datos sobres sus vehículos y sus casas? ¿En el controlador de usuarios, el de vehículos, el de casas o el controlador de controladores?&lt;/p&gt;
&lt;p&gt;No te preocupes, hay varias soluciones. Nosotros te proponemos la que utilizamos en StyleSage, basada en una clara división de responsabilidades entre modelos, proxy models, managers y vistas. Verás como lo encuentras todo a la primera, ¡Y sin dependencias circulares!&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/hectorpablos/adelgazando-modelos-django"&gt;http://slides.com/hectorpablos/adelgazando-modelos-django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Aplicaciones de escritorio con python3 y gtk+</title><link href="https://pyvideo.org/pycon-es-2016/aplicaciones-de-escritorio-con-python3-y-gtk.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Daniel García</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/aplicaciones-de-escritorio-con-python3-y-gtk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gtk+3 es un toolkit gráfico avanzado que permite crear aplicaciones gráficas con python de manera sencilla, que se integren completamente en entornos linux y sobretodo en el escritorio gnome.&lt;/p&gt;
&lt;p&gt;Gobject Introspection (gir) es una tecnología que vino de la mano de Gtk+-3, con esta tecnología se generan bindings &amp;quot;automáticos&amp;quot; para diferentes lenguajes, simplemente anotando las funciones en el código C, por lo que desde python tenemos acceso a todo el toolkit Gtk+3 además de a todas las bibliotecas C que implementen gir.&lt;/p&gt;
&lt;p&gt;Ejemplos de código y presentación en &lt;a class="reference external" href="https://github.com/danigm/python3-gtk"&gt;https://github.com/danigm/python3-gtk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Aprendiendo magia negra con Python</title><link href="https://pyvideo.org/pycon-es-2016/aprendiendo-magia-negra-con-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Juan Javaloyes</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/aprendiendo-magia-negra-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La simulación y optimización de procesos han experimentado un crecimiento considerable durante los últimos años. Con el avance, abaratamiento de arquitecturas y mejora de software para procesamiento en paralelo, muchas industrias apuestan por algoritmos estocásticos para mejorar la producción, reducir los costes o disminuir el impacto medioambiental.&lt;/p&gt;
&lt;p&gt;Debido a la complejidad de la multitud de procesos industriales, es habitual hacer uso de simuladores donde existe un flujo de datos con los que se opera en módulos o bloques de forma secuencial. Sin embargo, con respecto a la optimización, los simuladores no han alcanzado un grado de desarrollo o robustez deseada —no existe aún un botón mágico en los simuladores que “optimice”, por ejemplo, el número de equipos y/o las condiciones de operación.&lt;/p&gt;
&lt;p&gt;En esta charla, sin embargo, mostraremos con código Python como algoritmos del tipo PSO (Particle Swarm Optimization) pueden ser acoplados fácilmente con simuladores de procesos para resolver problemas de optimización. Recientemente en Python han aparecido librerías especializadas en algoritmos libres de derivadas (OpenMDAO-NASA, PyGMO-ESA o PySwarm, entre otras). Éstas, junto al uso de simuladores (propietarios o libres) pueden ser muy interesantes en un gran número de aplicaciones como herramientas de optimización de caja negra.&lt;/p&gt;
&lt;p&gt;Por ejemplo, en el ámbito de la ingeniería de procesos químicos, los simuladores secuenciales modulares (como Aspen Hysys, Aspen Plus, Pro/II, ChemCAD…) son ampliamente utilizados para el diseño refinerías, plantas químicas y/o tratamiento de aguas. Estos paquetes de software incluyen bibliotecas termodinámicas y modelos numéricos que conducen a predicciones precisas de los procesos implementados. Por ello y a modo de aplicación real, combinaremos finalmente estos simuladores con Python, lo que nos permitirá obtener un ahorro económico significativo en el diseño final de una planta de procesos químicos.&lt;/p&gt;
&lt;p&gt;Esta charla será impartida por investigadores de ingeniería química de la Universidad de Alicante miembros de CAChemE y su estructura será la siguiente:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducción a la problemática en la optimización matemática (5 min). Se realizará una introducción visual a conceptos de optimización determinista, así como a las ventajas e inconvenientes que presentan los algoritmos estocásticos.&lt;/li&gt;
&lt;li&gt;Implementación del algoritmo PSO (15 min). Se verán ejemplos sencillos de optimización con Python y se explicará de manera breve cómo acelerar su tiempo de ejecución.&lt;/li&gt;
&lt;li&gt;Serie de ejemplos de problemas de optimización en ingeniería (10 min), con especial hincapié en ejemplos reales en la industria e ingeniería química.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Material de la charla disponible en &lt;a class="reference external" href="https://github.com/CAChemE/stochastic-optimization"&gt;https://github.com/CAChemE/stochastic-optimization&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://github.com/CAChemE/stochastic-optimization/raw/master/Slides%20-%20PyconES%202016%20-%20Simulation-Based%20Optimization%20Using%20PSO.pdf"&gt;https://github.com/CAChemE/stochastic-optimization/raw/master/Slides%20-%20PyconES%202016%20-%20Simulation-Based%20Optimization%20Using%20PSO.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Breve introducción a los algoritmos genéticos</title><link href="https://pyvideo.org/pycon-es-2016/breve-introduccion-a-los-algoritmos-geneticos.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Siro Moreno</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/breve-introduccion-a-los-algoritmos-geneticos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Muchas veces oímos hablar sobre algoritmos genéticos usados en multitud de tareas y resolviendo problemas complicados de manera casi mágica. Pero, ¿qué son exactamente los algoritmos genéticos? ¿En qué se basan? La realidad es que se trata de un concepto muy sencillo, y sorprendentemente fácil de implementar en Python. Esta charla está enfocada en presentar los conceptos y tácticas que se usan en estos algoritmos, y no se verá apenas código, por lo que es adecuada para gente de cualquier nivel que tenga curiosidad por introducirse en este tema.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/Introducci%C3%B3n_a_los_algoritmos_gen%C3%A9ticos.pdf"&gt;http://2016.es.pycon.org/media/keynotes/Introducci%C3%B3n_a_los_algoritmos_gen%C3%A9ticos.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Channels is coming: real-time web in Django</title><link href="https://pyvideo.org/pycon-es-2016/channels-is-coming-real-time-web-in-django.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>José Manuel Rivas</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/channels-is-coming-real-time-web-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Desde el primer lanzamiento hace diez años, Django se ha construido en torno a un ciclo de request-response; llega una petición, su vista la procesa y devuelve una respuesta. No obstante a medida que avanzamos en la era de los WebSockets esto ya no parece una abstracción lo suficientemente completa.&lt;/p&gt;
&lt;p&gt;El proyecto Channels permitirá a Django dar soporte nativo para protocolos como WebSockets y HTTP2 manteniendo al mismo tiempo el modelo vista de Django.&lt;/p&gt;
&lt;p&gt;Otra de las novedades que traerá Channels son las tareas en segundo plano como por ejemplo, tratamiento de imágenes después de que hayan sido subidas y se haya recibido una respuesta satisfactoria.&lt;/p&gt;
&lt;p&gt;La charla cubrirá:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Situación actual y modelo de abstracción WSGI/view.&lt;/li&gt;
&lt;li&gt;WebSockets y protocolos similares.&lt;/li&gt;
&lt;li&gt;Cómo Channels absorbe estos conceptos de la forma más cercana al modelo vista de Django.&lt;/li&gt;
&lt;li&gt;Ejemplos del uso de los canales para hacer cosas como un chat o el procesamiento de una imagen en segundo plano.&lt;/li&gt;
&lt;li&gt;Preguntas frecuentes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://jmrivas86.github.io/pycones16-django-channels-slides/"&gt;https://jmrivas86.github.io/pycones16-django-channels-slides/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Charlas Rapidas + #ThePymientoProject</title><link href="https://pyvideo.org/pycon-es-2016/charlas-rapidas-thepymientoproject.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Jesús Espino</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/charlas-rapidas-thepymientoproject.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="51%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Tiempo&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Título&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;02:54&lt;/td&gt;
&lt;td&gt;Jesús Espino&lt;/td&gt;
&lt;td&gt;Abriendo las clases de CPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;07:25&lt;/td&gt;
&lt;td&gt;J.L. Cercos-Pita&lt;/td&gt;
&lt;td&gt;¿Te han tongado en la selección de charlas de la PyConES?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;13:02&lt;/td&gt;
&lt;td&gt;Guillem Borrell&lt;/td&gt;
&lt;td&gt;No le abandones. Él nunca lo haría.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;18:24&lt;/td&gt;
&lt;td&gt;Pablo Galindo&lt;/td&gt;
&lt;td&gt;How to FIX Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24:21&lt;/td&gt;
&lt;td&gt;Manuel Kaufmann&lt;/td&gt;
&lt;td&gt;fades + pysenteishon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;30:28&lt;/td&gt;
&lt;td&gt;Johanna Sánchez&lt;/td&gt;
&lt;td&gt;Presentación PyConAR 2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;33:32&lt;/td&gt;
&lt;td&gt;Manuel Garrido&lt;/td&gt;
&lt;td&gt;Where can I park?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;37:52&lt;/td&gt;
&lt;td&gt;Pablo Lobariñas&lt;/td&gt;
&lt;td&gt;OpenBadges en Python Madrid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;39:56&lt;/td&gt;
&lt;td&gt;Adolfo Rosillo y Cristóbal Contreras&lt;/td&gt;
&lt;td&gt;Presentación de Pymiento Project&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Cómo construir un API del que que tus padres se sientan orgullosos</title><link href="https://pyvideo.org/pycon-es-2016/como-construir-un-api-del-que-que-tus-padres-se-sientan-orgullosos.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Adrián Matellanes</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/como-construir-un-api-del-que-que-tus-padres-se-sientan-orgullosos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Necesitas construir una API, ¿pero conoces qué herramientas deberías usar? Cada día aparecen nuevas herramientas pensadas para crear, testear y desplegar APIs. En esta charla se presentará de manera resumida un caso real: el proceso de construcción de una API usando Python desde su diseño hasta su puesta en producción. Veremos los problemas encontrados por nuestro equipo y obviamente sus soluciones.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://speakerdeck.com/amatellanes/como-construir-un-api-del-que-tus-padres-se-sientan-orgullosos"&gt;https://speakerdeck.com/amatellanes/como-construir-un-api-del-que-tus-padres-se-sientan-orgullosos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Cordova, desarrolla apps multiplataformas sin morir en el intento</title><link href="https://pyvideo.org/pycon-es-2016/cordova-desarrolla-apps-multiplataformas-sin-morir-en-el-intento.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Andros Fenollosa Hurtado</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/cordova-desarrolla-apps-multiplataformas-sin-morir-en-el-intento.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Desarrollar Apps nativas puede ser un auténtico dolor de cabeza. Sobretodo si tienes que realizarla para más de una plataforma, al menos con Android y iOS. ¿Qué tengo que saber? ¿Java, Swift, C#, C++ y despegar con un avión a reacción desde un portaaviones? No es necesario. Con Apache Cordova solo tendrás que saber un lenguaje: Javascript. Deja entrar a tu vida a las Apps híbridas. Trabaja con Android, iOS, Ubuntu Phone, Windows Phone y Web. Observa sus beneficios, sus limitaciones y usos prácticos. Todo ello gracias a Apache Cordova. A través de la experiencia del conferenciante se contarán anecdotas y diferentes trabajos realizados. Siempre contando con un backend en Django y un frontend en Javascript. Además, y si el tiempo lo permite, realizará en directo un cliente de Twitter multiplataforma.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/Charla_pycones16.odp"&gt;http://2016.es.pycon.org/media/keynotes/Charla_pycones16.odp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Deeplearning Image Recognition with Python</title><link href="https://pyvideo.org/pycon-es-2016/deeplearning-image-recognition-with-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Robert Figiel</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/deeplearning-image-recognition-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An image says more than 1000 words&amp;quot;
At StyleSage we collect and analyze e-commerce data from 150 million fashion products across 100+ countries - updated daily! Analyzing the images and understanding them is a critical step in categorizing products, extracting attributes and detecting outliers.
Join us to understand how Convoluted Neural Network (CNN) algorithms can be used in Python for deeplearning image analysis.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org"&gt;http://2016.es.pycon.org&lt;/a&gt;/&amp;lt;/a&lt;/p&gt;
</summary></entry><entry><title>Desplegando Django</title><link href="https://pyvideo.org/pycon-es-2016/desplegando-django.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Roberto Majadas</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/desplegando-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hay vida más allá del &amp;quot;python manage.py runserver&amp;quot;. Siempre que hay charlas de Django uno termina pensando «muy bien, ¿ y ahora qué? ¿Cómo despliego esto?». Esta charla va precisamente de eso, de intentar poner el foco en las mejores maneras de desplegar Django en base al tipo de proyecto, tipo de cliente y tipo de tecnologías disponibles. Para ello revisaremos todo, desde lo más sencillo a lo más complicado. Daremos un breve repaso por las diferentes tecnologías que podemos usar para desplegar: bash, paramiko, fabric, ansible, salt, chef, rpm/deb, docker, PAAS (Platform as a Service), etc., sin dejar a un lado cosas como sistemas operativos, servidores web, wsgi, integración continua, servicios en la nube.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Efficient Django - PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/efficient-django-pycones-2016.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>David Arcos</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/efficient-django-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¿Es Django escalable? ¿Cómo sobrevivir a picos de tráfico? ¿Qué pasa cuando la base de datos crece demasiado? ¿Cómo encontrar los cuellos de botella?&lt;/p&gt;
&lt;p&gt;Repasaremos los conceptos básicos, utilizaremos métricas para detectar cuellos de botella, y finalmente veremos trucos y consejos para mejorar la escalabilidad y el rendimiento de un proyecto Django.&lt;/p&gt;
&lt;p&gt;Temas principales:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Arquitectura escalable&lt;/li&gt;
&lt;li&gt;Rendimiento de la base de datos&lt;/li&gt;
&lt;li&gt;Detección de cuellos de botella&lt;/li&gt;
&lt;li&gt;Monitorización, profiling, debugging&lt;/li&gt;
&lt;li&gt;Optimizacion de queries&lt;/li&gt;
&lt;li&gt;Rendimiento del admin&lt;/li&gt;
&lt;li&gt;Colas y workers&lt;/li&gt;
&lt;li&gt;Tests más rápidos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://www.slideshare.net/DZPM/efficient-django-64113328"&gt;http://www.slideshare.net/DZPM/efficient-django-64113328&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category></entry><entry><title>GitHubCity: una biblioteca para conocer tu comunidad</title><link href="https://pyvideo.org/pycon-es-2016/githubcity-una-biblioteca-para-conocer-tu-comunidad.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Israel Blancas</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/githubcity-una-biblioteca-para-conocer-tu-comunidad.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GitHubCity es una biblioteca escrita en Python creada para conocer cómo es tu comunidad de desarrolladores de software libre. Mediante peticiones a la API Rest de GitHub, se extraen datos de los usuarios, siendo filtrados por una ubicación. Podrás saber quienes son los usuarios que pertenecen a tu misma ciudad, clasificarlos según varios métodos... ¡Ven a ver cómo funciona y cómo sacarle partido para atraer a nuevos desarrolladores a tus eventos! Durante la charla se espera que se aporten nuevas ideas para mejorarla y algunas nuevas funcionalidades que puedan ser útiles.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Heydjbot: Spotify &amp; Telegram. Una historia de amor</title><link href="https://pyvideo.org/pycon-es-2016/heydjbot-spotify-telegram-una-historia-de-amor.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>José María Álvarez</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/heydjbot-spotify-telegram-una-historia-de-amor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La charla será 100% práctica. Veremos como crear un bot desde 0 y como configurarlo para que &amp;quot;hable&amp;quot; con la API de Spotify.&lt;/p&gt;
&lt;p&gt;Además, haremos una segunda versión con Flask que permitirá hacer el bot multiusuario, así como acceder a todos los datos privados del usuario en Spotify, lo que nos permitirá crear Playlists, añadir canciones, recibir sugerencias, hacer búsquedas más completas, etc.&lt;/p&gt;
&lt;p&gt;La charla requiere un mínimo de conocimientos de Python, Flask y de conceptos como APIs REST y OAuth.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/josemariaalvarezrey/pycones2016-telegram-spotify/"&gt;http://slides.com/josemariaalvarezrey/pycones2016-telegram-spotify/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Hola mundo, desde el fichero a la pantalla</title><link href="https://pyvideo.org/pycon-es-2016/hola-mundo-desde-el-fichero-a-la-pantalla.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Jesus Espino</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/hola-mundo-desde-el-fichero-a-la-pantalla.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python es un lenguaje interpretado, pero ¿Qué significa esto? ¿Qué pasa cuando yo ejecuto un programa? ¿Qué hace realmente el interprete por mí? Estas son las preguntas que trataré de responder durante la charla. Cómo el interprete convierte desde un fichero de texto plano, a la ejecución del mismo en nuestros ordenadores.&lt;/p&gt;
&lt;p&gt;Existen varias fases por las que pasa el intérprete y las recorreremos con un mínimo nivel de detalle para entender realmente qué está pasando, desde el parseo a la interpretación del bytecode generado.&lt;/p&gt;
&lt;p&gt;Material de la presentación en &lt;a class="reference external" href="https://github.com/jespino/hola-mundo"&gt;https://github.com/jespino/hola-mundo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How to Improve Your Diet and Save Money with Python</title><link href="https://pyvideo.org/pycon-es-2016/how-to-improve-your-diet-and-save-money-with-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Zuria Bauer</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/how-to-improve-your-diet-and-save-money-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimization (also known as mathematical programming) can be simplified to a selection of the best element/s (minimum or maximum) for a given circumstance (objective function), which may include some conditions (subject to restrictions).&lt;/p&gt;
&lt;p&gt;One of the classic problems in field optimization is the &lt;a class="reference external" href="http://www.neos-guide.org/content/diet-problem"&gt;diet problem&lt;/a&gt;. This problem came up during the Second World War when the Army wanted to minimize the cost of feeding their soldiers in the field (objective function) while maintaining a balanced diet.&lt;/p&gt;
&lt;p&gt;For this occasion, we will take as an example a set of foods from a well-know fast food restaurant and try to minimize the cost of the menu while being as healthy as possible.&lt;/p&gt;
&lt;p&gt;To solve this problem, there are plenty of commercial algebraic modeling languages —such as GAMS and AMPL—, which are used mainly in academia and professional environments. But as Python lovers, we can use several libraries for solving such optimization problems, —e.g. &lt;a class="reference external" href="http://cvxopt.org/"&gt;CVXOpt&lt;/a&gt;, &lt;a class="reference external" href="http://www.cvxpy.org/en/latest/"&gt;CVXPy&lt;/a&gt;, &lt;a class="reference external" href="https://pythonhosted.org/PuLP/"&gt;PULP&lt;/a&gt;, &lt;a class="reference external" href="http://openopt.org/Welcome"&gt;OpenOpt&lt;/a&gt; or &lt;a class="reference external" href="http://www.pyomo.org/"&gt;Pyomo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this talk we will use Pyomo because:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We can use it as an Algebraic Modeling Language, being similar to AMPL and GAMS.&lt;/li&gt;
&lt;li&gt;Solve these problems by means of a variety of solvers such as GLPK, Gurobi, CPLEX, CBC and PICO.&lt;/li&gt;
&lt;li&gt;It is a free, open source library (BSD license), being developed by Sandia National Laboratories, USA.&lt;/li&gt;
&lt;li&gt;Supports Python 3 and is easy to install.&lt;/li&gt;
&lt;li&gt;Moreover, it automatically connects with NEOS server (web platform that gives free access to commercial solvers).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will be divided in three parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to Mathematical Programming/Optimization (10 min): visual introduction to optimization concepts including restrictions and non linearties (linear Programming, Nonlinear Programming, ILP, MIP, MINLP).&lt;/li&gt;
&lt;li&gt;Introduction to the diet problem, Pyomo sintax and a quick note for the installation (15 min): showing how to improve your diet and save money when ordering food in fast food restaurants.&lt;/li&gt;
&lt;li&gt;Optimization problems in engineering (5 min): showing more advanced optimization examples in the area of process engineering&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don't miss this talk if are one of those &amp;quot;undecided pythonistas&amp;quot; that want to learn how to solve optimization problems with determination ;)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Manejo de static con bower y gulp para Django</title><link href="https://pyvideo.org/pycon-es-2016/manejo-de-static-con-bower-y-gulp-para-django.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Tomás Garzón</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/manejo-de-static-con-bower-y-gulp-para-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En Django normalmente tenemos que incluir librerías de JS así como nuestro código. Además, los estilos los podemos incluir de librerías externas, tanto less/sass/css y nuestros propios estilos. Como programadores necesitamos poder gestionar estos ficheros, tanto en la fase de desarrollo como en el posterior despliegue. Veremos como podemos utilizar Bower para gestionar las librerías que necesitamos en nuestro proyecto (como jquery, bootstrap, Backbone, Toastr…) y mediante Gulp las iremos minimizando e integrando en nuestro template base de Django. Para los estilos, utilizaremos también Bower y mediante el compilador de less, iremos generando los ficheros css necesarios para nuestra web. Finalmente, mediante bower y gulp veremos cómo somos capaces de generar un template base para Django, donde se incluyan todas las dependencias minimizadas y con una marca temporal para facilitar el cacheo en el navegador, sirviendo el mínimo número de ficheros posibles.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/tomasgarzon/django-gulp/"&gt;http://slides.com/tomasgarzon/django-gulp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Mi experiencia organizando eventos Python usando Python!</title><link href="https://pyvideo.org/pycon-es-2016/mi-experiencia-organizando-eventos-python-usando-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Juan Rodríguez</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/mi-experiencia-organizando-eventos-python-usando-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contaré cómo es organizar un evento de Python utilizando herramientas desarrolladas en Python. Voy a presentar herramientas conocidas aplicadas a la organización de eventos y también otras que son desarrollos, de Software Libre, propios, y de colegas con los que hemos organizado varios eventos en Argentina, que simplificarán las tareas de organizadores y oradores. Busco dar una mirada integral de cómo es comenzar a organizar un evento desde el momento cero hasta sus partes más complejas.&lt;/p&gt;
&lt;p&gt;Buscaré contar mi experiencia tras haber organizado 5 Jornadas de Software Libre, 2 Python Days, y PyConAr en el año 2011 en donde tuve la oportunidad de ser el Coordinador General del Evento.&lt;/p&gt;
&lt;p&gt;Presentaré mi experiencia, así como también las herramientas que me ayudaron a manejar muchos de los eventos. También mostraré aplicaciones propias, y de amigos que trabajaron conmigo en la organización de eventos, que serán de mucha ayuda para organizadores y oradores.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>osBrain: a general-purpose multi-agent system module</title><link href="https://pyvideo.org/pycon-es-2016/osbrain-a-general-purpose-multi-agent-system-module.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Miguel Sánchez de León Peque</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/osbrain-a-general-purpose-multi-agent-system-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;osBrain is a general-purpose multi-agent system module written in Python. Agents run independently as system processes and communicate with each other using message passing. osBrain uses ØMQ for efficient and flexible message passing between agents. It also uses Pyro4 to ease the configuration and deployment of complex systems. Multi-agents systems can be applied for transportation, logistics, defense and military applications, networking, load balancing, self-healing networks...&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="https://peque.github.io/PyConES-Spain-2016-osbrain/"&gt;https://peque.github.io/PyConES-Spain-2016-osbrain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Pandas - not just for data scientists - PyConES 2016</title><link href="https://pyvideo.org/pycon-es-2016/pandas-not-just-for-data-scientists-pycones-2016.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Uzi Halaby-Senerman</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/pandas-not-just-for-data-scientists-pycones-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides available at &lt;a class="reference external" href="http://2016.es.pycon.org/media/keynotes/Pandas_-_not_just_for_data_scientists.pdf"&gt;http://2016.es.pycon.org/media/keynotes/Pandas_-_not_just_for_data_scientists.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Presentación Cajamar PythonHack 2016 + TensorFlow y Space Apps Challenge</title><link href="https://pyvideo.org/pycon-es-2016/presentacion-cajamar-pythonhack-2016-tensorflow-y-space-apps-challenge.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Gema Parreño</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/presentacion-cajamar-pythonhack-2016-tensorflow-y-space-apps-challenge.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="19%" /&gt;
&lt;col width="81%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;00:00&lt;/td&gt;
&lt;td&gt;Inauguración de PyConES 2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;02:58&lt;/td&gt;
&lt;td&gt;Gema Parreño - TensorFlow&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>¿Puede la máquina aprender a programar?</title><link href="https://pyvideo.org/pycon-es-2016/puede-la-maquina-aprender-a-programar.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Federico Mon</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/puede-la-maquina-aprender-a-programar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¿Puede un ordenador quitarme el trabajo? ¿Podría el ordenador programar lo que yo le indique? En esta charla veremos cómo representar el código de manera que el ordenador pueda entenderlo (y viceversa) y aplicaremos diferentes técnicas de inteligencia artificial para tratar de que la máquina programe por su cuenta.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python for developing a real-time automated trading platform</title><link href="https://pyvideo.org/pycon-es-2016/python-for-developing-a-real-time-automated-trading-platform.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Miguel Sánchez de León Peque</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/python-for-developing-a-real-time-automated-trading-platform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays Python is the perfect environment for developing a real-time automated trading tool. In this talk we will discuss the development of: a general-purpose multiagent-system module using Pyro and ZeroMQ; a platform, based on it, for developing automated trading strategies using Numpy, Numba, Theano, etc.; and a GUI for visualizing real-time market data using PyQtGraph and Qt.&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="https://peque.github.io/PyConES-Spain-2016-trading/"&gt;https://peque.github.io/PyConES-Spain-2016-trading/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python o cómo mejorar la vida de un administrador de sistemas</title><link href="https://pyvideo.org/pycon-es-2016/python-o-como-mejorar-la-vida-de-un-administrador-de-sistemas.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Juan Diego Godoy Robles</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/python-o-como-mejorar-la-vida-de-un-administrador-de-sistemas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amig&amp;#64; Sysadmin, ¿tus bash se marchitan?... , ¿vives perdido en un mundo de PIPEs sin sentido?..., ¿te peleas con greps y awks demoniacos?..., ¿tus scripts pueden hacer sangrar los ojos?… tranquil&amp;#64; , no estas sol&amp;#64;… Python es la medicina que necesita tu código.&lt;/p&gt;
&lt;p&gt;Material de la charla disponible en &lt;a class="reference external" href="https://github.com/klashxx/PyConES"&gt;https://github.com/klashxx/PyConES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python: Vision Artificial</title><link href="https://pyvideo.org/pycon-es-2016/python-vision-artificial.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Víctor Suárez</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/python-vision-artificial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Charla de introducción a la visión artificial utilizando Raspberry Pi y dispositivos móviles. En este caso, vamos a utilizar librerías como OpenCV con Python y cómo utilizarla para obtener información de imágenes y cómo crear aplicaciones que nos permitan por ejemplo detectar objetos y seguirlos a través de un vídeo.&lt;/p&gt;
&lt;p&gt;Se tratará cómo obtener las imágenes, preprocesarlas y cómo analizarlas para obtener información y cómo crear algoritmos de reconocimiento de imágenes.&lt;/p&gt;
&lt;p&gt;Esta charla esta orientada a personas que quieran aprender a utilizar la visión artificial en dispositivos móviles o en otro tipo de dispositivos como Raspberry Pi.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python y empresa</title><link href="https://pyvideo.org/pycon-es-2016/python-y-empresa.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Daniel Domene</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/python-y-empresa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La optimización de procesos industriales ha experimentado un crecimiento considerable durante los últimos años. Las industrias modernas apuestan por ella para mejorar la producción, reducir los costes, disminuir el impacto ambiental e incrementar la seguridad. En este sentido, es sensata la introducción y formación de los nuevos ingenieros en esta rama de la ciencia. Resulta curioso pensar que en el ámbito de las ciencias de la computación, la optimización suele hacer referencia a la reducción en el tiempo de ejecución del programa. Pero la optimización matemática (también conocida como investigación de operaciones o programación matemática) no tiene nada que ver con este problema y, en muchos casos, la formación que se recibe en las universidades no pasa de explicar el algoritmo SIMPLEX para la resolución de problemas lineales con variables continuas.&lt;/p&gt;
&lt;p&gt;Un problema de optimización consiste, a grandes rasgos, en maximizar o minimizar una función real eligiendo sistemáticamente valores de entrada (tomados de un conjunto permitido) y calculando el valor de la función. Este problema se vuelve interesante cuando aparecen restricciones (lineales y no lineales) y variables enteras (para modelar la toma de decisiones discretas).&lt;/p&gt;
&lt;p&gt;Multitud de problemas de optimización en las empresas pueden llegar a expresarse a partir de un pequeño conjunto de problemas de optimización sencillos, como el problema de la mochila o el problema del viajante de comercio. Estos problemas se incrustan, a veces de manera indirecta, en problemas relacionados con la organización de la logística de la empresa. Por este motivo, el estudio y buen conocimiento de esta serie de problemas es básico para comprender y abordar problemas de una magnitud superior, además de ser un buen entrenamiento para introducirse en la sintaxis del modelado algebraico.&lt;/p&gt;
&lt;p&gt;Dos de los lenguajes de modelado comerciales más utilizados para resolver este tipo de problemas matemáticos son GAMS y AMPL. En Python existen varias bibliotecas que permiten resolver el mismo tipo de problemas como son CVXOpt, CVXPy, PulP, OpenOpt, o Pyomo. Este último, Pyomo.org, resulta interesante ya que: Permite la modelización matemática en Python tipo AMPL/GAMS Se comunica directamente los principales solvers como GLPK, Gurobi, CPLEX, CBC y PICO Es open source (licencia BSD) y está desarrollado por Sandia National Laboratories, USA. Pyomo (antiguamente conocido como Coopr) es 100% gratuito, maduro y bien documentado Soporta Python 3 y su instalación es sencilla Se comunica con NEOS server (plataforma web que da acceso a solvers comerciales de forma gratuita) * Se adapta al modelado de problemas de todo tipo al estar desarrollado en Python&lt;/p&gt;
&lt;p&gt;Por lo tanto, Pyomo proporciona una capacidad que se asocia comúnmente con lenguajes de modelado algebraico comerciales como AMPL, AIMMS y GAMS, pero los objetos de modelado de Pyomo están incrustados dentro de Python, un lenguaje de programación de alto nivel con todas las funciones con un rico conjunto bibliotecas científicas. Respecto a sus capacidades como lenguaje de modelado algebraico, Pyomo es compatible con una amplia gama de tipos de problemas de optimización, incluyendo entre otros: Programación lineal Programación cuadrática Programación no lineal Programación lineal entera mixta Programación cuadrática mixta entero Programación lineal entera mixta Programación estocástica entera mixta Programación disyuntiva generalizada * Ecuaciones algebraicas diferenciales&lt;/p&gt;
&lt;p&gt;La charla queda estructurada de la siguiente manera: Introducción a la optimización matemática (10 min). Se realizará una introducción a los conceptos de optimización con restricciones. Breves notas de instalación e introducción a la sintaxis de Pyomo (5 min): donde se explicará de manera breve como instalar Pyomo y como se trabaja con él. * Ejemplos (15 min): Resolución del problema de la mochila y el problema del viajante de comercio con Pyomo.&lt;/p&gt;
&lt;p&gt;¿Quiénes somos? CAChemE es una asociación sin ánimo de lucro formada por ingenieros químicos (profesionales, docentes y estudiantes) que pretende estimular las posibilidades de software en la ingeniería de procesos químicos. Nuestro objetivo es promover las ventajas de las nuevas herramientas de software libre disponibles y fomentar su uso tanto en la industria como en la universidad. La sede central de CAChemE se encuentra en el Instituto Universitario de Ingeniería de Procesos Químicos de la Universidad de Alicante.&lt;/p&gt;
&lt;p&gt;Material de la charla disponible en &lt;a class="reference external" href="https://github.com/planelles20/PyConES-PythonEmpresa/blob/master/PyConES16_Python.ipynb"&gt;https://github.com/planelles20/PyConES-PythonEmpresa/blob/master/PyConES16_Python.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>QA 4 Python</title><link href="https://pyvideo.org/pycon-es-2016/qa-4-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Alejandro Gómez</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/qa-4-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will cover how we apply QA in Emergya for Python projects, covering from the inception phase to the delivery phase.&lt;/p&gt;
&lt;p&gt;We will see a showcase of a real python project to learn by examples (code guidelines definition, Continuous Integration system, Continuous Unit and Functional testing, Performance testing and Continuous Delivery.&lt;/p&gt;
&lt;p&gt;We will focus the talk in how a team should manage a Python project from the QA side, showing how a team of developers and QA build a real team.&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="https://es.slideshare.net/bedjango/qa-4-python"&gt;https://es.slideshare.net/bedjango/qa-4-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Scaling Django - Running Django in Kubernetes</title><link href="https://pyvideo.org/pycon-es-2016/scaling-django-running-django-in-kubernetes.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Iván Pedrazas</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/scaling-django-running-django-in-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Running Django in a single machine is easy. Running Django in a few machines becomes a bit more difficult, so, you look at containers but running Django in Docker can be a bit frustrating. During this talk we will see how to define, build and run a distributed Django application using docker and kubernetes.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://docs.google.com/presentation/d/1_t0XGu6_4ZKsrLVIk6geQwaXGkWaBcLESdahPC2KWuo/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/1_t0XGu6_4ZKsrLVIk6geQwaXGkWaBcLESdahPC2KWuo/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>SOMOS LO PEOR</title><link href="https://pyvideo.org/pycon-es-2016/somos-lo-peor.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Antoni Aloy</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/somos-lo-peor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Basta entrar en un una lista de correo, trabajar en un sector técnico o tomar unas birras con los colegas para darnos cuentas que los informáticos en general somos muy particulares.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nuestra visión del tiempo: hay un tiempo informático: una hora, un día, una semana o un mes. Esto tiene un impacto brutal a la hora de hacer estimaciones.&lt;/li&gt;
&lt;li&gt;Cómo defendemos la tecnología que utilizamos.&lt;/li&gt;
&lt;li&gt;Cómo estimamos la complejidad&lt;/li&gt;
&lt;li&gt;Cómo comunicamos con clientes y proveedores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La charla tiene por objeto mostrar los vicios más comunes del sector en su relación con los colegas y el mundo y mostrar algunas posibles soluciones.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Test de infraestructura con pytest</title><link href="https://pyvideo.org/pycon-es-2016/test-de-infraestructura-con-pytest.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Agustín Herranz</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/test-de-infraestructura-con-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest es una fantástica librería de testing para Python. En esta charla veremos cómo ayudarnos de pytest para testear nuestra infraestructura. Para empezar, de forma breve, usaremos requests junto con pytest para comprobar nuestros servicios y despliegues web.&lt;/p&gt;
&lt;p&gt;Continuaremos después con test propios de infraestructura utilizando testinfra. Realizaremos un recorrido por las capacidades de testinfra y pytest, y qué tipo de tests podemos realizar para probar nuestros servidores.&lt;/p&gt;
&lt;p&gt;Para finalizar hablaremos de TDI, que no se refiere a un tipo de motor muy contaminante sino a Test Driven Infraestructure, y de como podemos utilizar un ciclo estilo TDD para configurar nuestras máquinas o contenedores.&lt;/p&gt;
&lt;p&gt;El material de la presentación está disponible en &lt;a class="reference external" href="https://github.com/tinproject/test_infraestructura_pycones16"&gt;https://github.com/tinproject/test_infraestructura_pycones16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Diapositivas disponibles en &lt;a class="reference external" href="https://speakerdeck.com/tinproject/test-de-infraestructura-con-pytest-pycones-2016"&gt;https://speakerdeck.com/tinproject/test-de-infraestructura-con-pytest-pycones-2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Traveling in datetime</title><link href="https://pyvideo.org/pycon-es-2016/traveling-in-datetime.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/traveling-in-datetime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tras un repaso rápido sobre el modulo time y datetime veremos los diferentes problemas que surgen al trabajar con zonas horarias y operaciones sobre fechas. La presentación incluirá un pequeño repaso sobre las diferentes formas de representar fechas.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://mariocj89.github.io/reveal.js/datetime-pycones2016.html"&gt;https://mariocj89.github.io/reveal.js/datetime-pycones2016.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Using social media geotagged data to estimate railway use</title><link href="https://pyvideo.org/pycon-es-2016/using-social-media-geotagged-data-to-estimate-railway-use.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Antònia Tugores</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/using-social-media-geotagged-data-to-estimate-railway-use.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On railway planning, linking demand and supply is a challenge to project, provide and validate better international services that are both reliable and of high quality. We present a Python tool to estimate railway traffic demand through the detection of a set of geotagged tweets overlapping railway lines in Europe.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>