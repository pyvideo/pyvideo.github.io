<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Beginners</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Shu Conhecendo os fundamentos da linguagem</title><link>https://pyvideo.org/caipyra-2016/shu-conhecendo-os-fundamentos-da-linguagem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://caipyra.python.org.br"&gt;http://caipyra.python.org.br&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armando Neto</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/shu-conhecendo-os-fundamentos-da-linguagem.html</guid><category>Caipyra 2016</category><category>beginners</category></item><item><title>Enhancing Angklung Music Rehearsals with Python</title><link>https://pyvideo.org/europython-2019/enhancing-angklung-music-rehearsals-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Angklung is a traditional musical instrument from Indonesia. This
instrument has a lot of variety in how it is performed; a common format
is the orchestral format in which 15-30 players gather to form a team.
Playing Angklung in this way is fun but also presents some challenges
that are hard to solve manually.&lt;/p&gt;
&lt;p&gt;First, I will introduce you to the instrument and how it works/how it is
played. Then, I will show you how Python-based algorithms can be used to
ease the pains of managing Angklung teams, by reading Angklung-specific
sheet music and calculating the most optimal distribution of Angklung
based on several important factors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trapsilo Bumi</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/enhancing-angklung-music-rehearsals-with-python.html</guid><category>EuroPython 2019</category><category>Algorithms</category><category>Analytics</category><category>Beginners</category><category>Case Study</category><category>Use Case</category></item><item><title>How to read (code)</title><link>https://pyvideo.org/europython-2019/how-to-read-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/how-to-read-code.html</guid><category>EuroPython 2019</category><category>Beginners</category><category>Clean Code</category><category>Documentation</category><category>Learning</category><category>Teaching</category></item><item><title>Using Python to Teach Computational Finance</title><link>https://pyvideo.org/europython-2019/using-python-to-teach-computational-finance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this demo-driven session, we will introduce the Probo package for
teaching Python programming and concepts from computational finance to
beginning programmers in the domain of finance. We'll show how Python is
the perfect tool for teaching computational thinking to develop deeper
quantitative reasoning. Jupyter notebooks, together with Python packages
such as NumPy and Pandas, provide the ideal learning environment.&lt;/p&gt;
&lt;p&gt;We will start by introducing the Probo package for derivative pricing
and hedging. We will demo the pricing of European and American options
via the famous Black-Scholes option pricing model. Other examples
include Monte Carlo simulation and binomial trees. Using Probo, the
answers to derivative pricing problems are right at the students'
fingertips. Students can operationalize their understanding by going
directly from the mathematics of derivative pricing theories to their
implementation in clean and simple code.&lt;/p&gt;
&lt;p&gt;We will end with a demonstration using Probo to teach the concept of
dynamic hedging. Dynamic hedging is perhaps &lt;em&gt;the&lt;/em&gt; crucial concept in
modern financial derivatives theory. It is also one of the most
difficult concepts to grasp. We'll show how developing deeper intuition
is possible with computational thinking via Monte Carlo simulation of
delta-hedging. By leveraging the power and simplicity of Python and
Jupyter notebooks, the Probo package provides the ideal learning
platform for students of computational finance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Brough</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:/europython-2019/using-python-to-teach-computational-finance.html</guid><category>EuroPython 2019</category><category>Beginners</category><category>Business</category><category>Business Cases</category><category>Education</category><category>Jupyter</category></item><item><title>Attractive GUIs with PySimpleGUI</title><link>https://pyvideo.org/europython-2020/attractive-guis-with-pysimplegui.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With PySimpleGUI everyone can build powerful GUI applications without a steep learning curve.&lt;/p&gt;
&lt;p&gt;In the Python landscape, there are several high-end GUI packages. Of course, there’s tkinter which is part of the standard library. And there is wxPython and several versions of Qt. What they share is that they are very flexible but not only have a steep learning curve but also take considerable development effort to realize even a simple user interface.
At the other of the spectrum, there are several design tools that either generate code of a layout structure. In many cases, the functionality is rather limited, though.
Relatively recent, an independent open-source developer (not me) has made a product that tries to bridge the gap between these two worlds: PySimpleGUI. This package runs on top of tkinter, QT for Windows, wxPython and Remi.
In this talk, I want to show the design methodology behind this fascinating product that might change the way people look at GUIs.
I will start with live coding a simple yet not evident program that shows the basic concepts. With this, I will demonstrate the design philosophy.
PySimpleGUI can also be used to implement a user-friendly interface as opposed to command-line interfaces.
From there, I will give an overview of some more elements present in this package.
Finally, I will show a full-featured GUI program with several bells and whistles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ruud van der Ham</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/attractive-guis-with-pysimplegui.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>General</category><category>Human-Machine-Interaction</category><category>python</category></item><item><title>Bringing your Python script to more users!</title><link>https://pyvideo.org/europython-2020/bringing-your-python-script-to-more-users.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick tour from CLI through GUI to Web app with image size reduction script&lt;/p&gt;
&lt;p&gt;It is wonderful to automate boring stuffs with Python.
In Japan, new introductory books are being published every month and more and more Pythonistas are working on automation.
A Python script that is useful to you may be useful to others.
So I talk about how to enable others to use your script.&lt;/p&gt;
&lt;p&gt;In this talk, I use a simple script which can reduce the width and the height of a specified image in your computer.
I assume someone who's read the introductory book can understand the script.&lt;/p&gt;
&lt;p&gt;First, I introduce Command Line Interface (CLI) to solve hardcoding in the sample script.
After implementing CLI, you don't need to edit the script.
Second, I introduce Grafical User Interface (GUI) to make the script more user-friendly.
Finally, I introduce web application so that users can the script without installation. All users have to do is connecting the Internet!&lt;/p&gt;
&lt;p&gt;The timeline is supposed to be the following:&lt;/p&gt;
&lt;p&gt;# Introduction (3min)
- self-introduction
- motivation of this talk
- sample script (pathlib, Pillow)&lt;/p&gt;
&lt;p&gt;# CLI (5min)
- problem: need to edit the script
- introduce argparse module (pass target file path from command line)
- about positional arguments and optional arguments
- check whether a path points an existing file (type parameter of add_argument())&lt;/p&gt;
&lt;p&gt;# GUI (9min)
- problem: CLI is not easy to handle than GUI
- introduce eel
- eel's elements: HTML, CSS, JavaScript
- hello world in eel
- file access in eel app
- convert sample script to eel app (user can see which image is specified as target😃)
- how to distribute&lt;/p&gt;
&lt;p&gt;# Web app (9min)
- problem: Users need to install
- introduce Web app
- server / client
- actually eel's elements are used in web app (we can recycle codes)
- introduce Flask
- hello world in flask
- static files in web app
- how to deploy (heroku)&lt;/p&gt;
&lt;p&gt;# wrap up (1min)
# Q&amp;amp;A (3min)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Takuya Futatsugi</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/bringing-your-python-script-to-more-users.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Command-Line</category><category>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</category></item><item><title>Deceptive Security using Python</title><link>https://pyvideo.org/europython-2020/deceptive-security-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deceiving hackers to protect your resources&lt;/p&gt;
&lt;p&gt;Imagine you are passing through an unknown street at midnight and you find that some anti-social elements are following you. To save yourself from them you start running and look for a safe place to hide. On the way, you will find a good person and requests him to help you. He hides you in his place to protect you. When these anti-social elements visit a good person’s place and enquire about you, the good person misguides them and redirects them to some other place in order to protect you. This is exactly how deception works. In this analogy, YOU are the resources to be protected, anti-social elements are the hackers who want to gain access to the resources, and a good person is a deception technique that protects the resources from hackers by making them fall in the trap.&lt;/p&gt;
&lt;p&gt;The talk begins with an introduction to deception technology, deception types, and methods, a deceptive security life cycle. In this talk, we will demonstrate the following deception tools implemented using python language:
•       WebTrap (&lt;a class="reference external" href="https://github.com/IllusiveNetworks-Labs/WebTrap"&gt;https://github.com/IllusiveNetworks-Labs/WebTrap&lt;/a&gt;): is designed to create deceptive webpages to deceive and redirect attackers away from real websites. The deceptive webpages are generated by cloning real websites, specifically their login pages.
•       DemonHunter (&lt;a class="reference external" href="https://github.com/RevengeComing/DemonHunter"&gt;https://github.com/RevengeComing/DemonHunter&lt;/a&gt;):  is a distributed low interaction honeypot with Agent/Master design
Finally, we will conclude the talk with how built a deception tool and demonstrate its working.&lt;/p&gt;
&lt;p&gt;How we implemented a deception tool in python using machine learning:
We designed a deception tool in python language using PyBRAIN package to model and mitigate XPath injection attacks for web services. It is known that XML can be used to store the data and this data can be queried using XPath query language. XPath is a query language, it has injection issues similar to SQL. To handle this issue, we proposed a solution, which uses a count-based validation technique and Long Short-Term Memory (LSTM) modular neural networks to identify and classify atypical behavior in user input. Once the atypical user input is identified, the attacker is redirected to fake resources to protect the critical data. Our experiment resulted in over 90% accuracy in the classification of input vectors.&lt;/p&gt;
&lt;p&gt;Outline
1. Introduction to deception, Deception types, Deception technology applicable methods and Deception Life cycle(08 Minutes)
2. Demonstration of WebTrap deception tool(04 Minutes)
3. Demonstration of DemonHunter deception tool(04 Minutes)
4. Discussion of our deception tool and demonstration(06 Minutes)
5. Conclusion and Questions(03 Minutes)&lt;/p&gt;
&lt;p&gt;Audience
No experience level of Python is needed. In general, anyone can attend this talk and learn about applying deception techniques and machine learning to application security.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gajendra Deshpande</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/deceptive-security-using-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Machine-Learning</category><category>Security</category><category>python</category></item><item><title>Difficulties of Python code development:packages,virtualenvs and package mangers</title><link>https://pyvideo.org/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Develop your code effectively with well chosen tools&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development.&lt;/dt&gt;
&lt;dd&gt;After that we will jump to the topic of virtualenvs and  popular tools that are used for managing them. I will explain what is purpose of the virtualenvs in Python and why we should use them.
Finally we will focus on the most important topic without which development is not possible – package mangers. Package managers it is wide topic in Python world. There is many package mangers and  currently we have tools like pip, pipenv or poetry but it is not obvious which of them we should use in first place. Which of them are recommended to use? What are prons and cons of certain package mangers? Is there any other not well known packages mangers? How package mangers are packaging Python code? Which of the package mangers are good for data scientists? Is your package manger is resolving dependencies?
This questions can appear especially when you are beginner and just to want start working with Python. Unfortunately form the beginning you must face the problem which of the package manger you should use. In this presentation I will answer all of this questions. I will list popular package mangers and some not known. I will show differences and which of them are best for which case. Also I will explain differences between packages that are used by different packages mangers. If you are interested in code development and package mangers or you are just confused which of them you should use this presentation is definitely for you. During this presentation I will answer all questions and I will wipe out all doubts about packages, package mangers and virtualenvs.&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Wodyński</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Conda / conda forge</category><category>Development</category><category>Packaging</category><category>Virtual Env</category></item><item><title>Machine Learning for Everyone</title><link>https://pyvideo.org/europython-2020/machine-learning-for-everyone.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine learning (ML) is becoming an essential technology for our day to day life. Stop taking ML as a threat and learn it today as not learning it is a HUGE LOSS! Get started today with ML in Aaron's remarkable 45-mins talk. We will begin by talking about the paradigm of ML, then taking a deep dive into Neural Networks and building a Neural Network from scratch with Keras and TensorFlow (the hottest machine learning framework). You'll master the magic of neural networks that are powering incredible advances both in AI, self-driving cars, and much more! Finally, we will finish off by talking about Reinforcement learning and how it is empowering YouTube suggestions along with tips-and-tricks from a specialist plus a grand finale mind-blowing demo. Ready to master the paradigm of ML? Let's get started.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Ma</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/machine-learning-for-everyone.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Deep Learning</category><category>General</category><category>Machine-Learning</category></item><item><title>Mastering a data pipeline with Python: 6 years of learned lessons from mistakes</title><link>https://pyvideo.org/europython-2020/mastering-a-data-pipeline-with-python-6-years-of-learned-lessons-from-mistakes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building data pipelines are a consolidated task, there are a vast number of tools that automate and help developers to create data pipelines with few clicks on the cloud. It might solve non-complex or well-defined standard problems. This presentation is a demystification of years of experience and painful mistakes using Python as a core to create reliable data pipelines and manage insanely amount of valuable data. Let's cover how each piece fits into this puzzle: data acquisition, ingestion, transformation, storage, workflow management and serving. Also, we'll walk through best practices and possible issues. We'll cover PySpark vs Dask and Pandas, Airflow, and Apache Arrow as a new approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robson Junior</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/mastering-a-data-pipeline-with-python-6-years-of-learned-lessons-from-mistakes.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Big Data</category><category>Case Study</category><category>Data Science</category><category>Open-Source</category></item><item><title>Python Emergency Remote Teaching</title><link>https://pyvideo.org/europython-2020/python-emergency-remote-teaching.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Online Python programming course offered in response to a COVID-19 pandemic lockdown&lt;/p&gt;
&lt;p&gt;During the pandemic lockdown of COVID-19, we found a very different context from the usual: a) students with much more time available for learning b) many students who did not have a personal computer and could only access classes by cell phone c) difficulty to realistically assess learning. In this lecture we will present the real experiences in a traditional programming course given during the Covid-19 pandemic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Masanori Ashikaga</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/python-emergency-remote-teaching.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Case Study</category><category>Community</category><category>Education</category></item><item><title>Reduce hardware costs in Internet of Things using Python</title><link>https://pyvideo.org/europython-2020/reduce-hardware-costs-in-internet-of-things-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An electronics teacher's perspective&lt;/p&gt;
&lt;p&gt;I guide students in developing systems which are real world and need less hardware. This is possible in 2 steps. One,reduce collecting data which is already available online. Two, compute on cloud instead on the hardware.&lt;/p&gt;
&lt;p&gt;Cloud computing and Web services have opened a plethora of ways which were science fiction for electronics academia. Python packages such as requests, beautifulsoup and pyserial automate electronics at the grassroot level pushing  all complexities to the cloud.&lt;/p&gt;
&lt;p&gt;This talk is about how I motivate students to use python for tasks which otherwise would require complex setup and costly hardware. I will present case studies of accessing websites (ethically per se!) of Indian Meteorological Department and Indian Railways for Internet of Things.
Ready to return to a classroom session? Login for More!!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vijay Sajjanar</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/reduce-hardware-costs-in-internet-of-things-using-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Case Study</category><category>Data</category><category>Internet of Things</category><category>Web Crawling</category></item><item><title>Roadmap to an Open Source Artificial Pancreas &amp; Diabetes monitoring with Flask</title><link>https://pyvideo.org/europython-2020/roadmap-to-an-open-source-artificial-pancreas-diabetes-monitoring-with-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nightscout + Python + Voice + SMS - Using tech for good!&lt;/p&gt;
&lt;p&gt;Open Source has crossed frontiers and is widely used to solve problems in the health &amp;amp; science fields. In this talk we’ll learn about the many moving parts of continuous glucose monitoring for type 1 Diabetes as part of the open-source artificial pancreas project and building a notifier for the most used OSS continuous glucose monitoring dashboard: Nightscout.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diana Rodriguez Manrique</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/roadmap-to-an-open-source-artificial-pancreas-diabetes-monitoring-with-flask.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Communication</category><category>DIY</category><category>Development</category><category>Open-Source</category></item><item><title>Top 15 Python Tips for Data Cleaning/ Understanding</title><link>https://pyvideo.org/europython-2020/top-15-python-tips-for-data-cleaning-understanding.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data cleaning is one of the most important tasks in data science but it is unglamorous, underappreciated and under-discussed. These are some common tasks involved in data cleaning but not limited to:
-       Merging/ appending
-       Checking completeness of data
-       Checking of valid values
-       De-duplication
-       Handling of missing values
-       Recoding&lt;/p&gt;
&lt;p&gt;Most, if not all, of the time, the datasets that we have to analyze are unclean. i.e. they are not necessarily complete/ accurate/ valid. This will impact the accuracy of our analysis if we do not clean them properly.&lt;/p&gt;
&lt;p&gt;This talk covers how to perform data cleaning and understanding using primarily Pandas and Numpy. If you’re new to data analytics/ data science and are interested how to use Python to perform analysis, or if you're an Excel user hoping to move to Python, this talk might be for you.&lt;/p&gt;
&lt;p&gt;Participants should be at least familiar with the basics of Python programming.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hui Xiang Chua</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/top-15-python-tips-for-data-cleaning-understanding.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Data</category><category>Data Science</category><category>Scientific Libraries (Numpy/Pandas/SciKit/...)</category><category>Use Case</category></item><item><title>Writing Zenlike Python</title><link>https://pyvideo.org/europython-2020/writing-zenlike-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are going on about?&lt;/p&gt;
&lt;p&gt;Most of us are familiar with the &amp;quot;Zen of Python&amp;quot;, Tim Peters's legendary, if tongue-in-cheek, set of guiding principles for the Python language. But can they actually inform Pythonic code?&lt;/p&gt;
&lt;p&gt;In this talk, Jason C. McDonald will unpack how the twenty principles (including the unwritten rule) of the Zen can guide you to write beautiful, maintainable code, by treating Python AS Python!&lt;/p&gt;
&lt;p&gt;This talk is intended primarily for developers who have come to Python from another language, no matter their experience level. McDonald will shed light on how to work WITH Python's type system, statements, and iterative tools, rather than against them. You'll walk away with a new appreciation of the language, and an understanding of what Pythonic really means; an understanding which will empower you to find the One Obvious Way to solve any problem in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason McDonald</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/writing-zenlike-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Beginners</category><category>Clean Code</category><category>Python 3</category><category>Python general</category><category>The Answer to Life the Universe and Everything Else</category></item><item><title>Learning Python (or Anything) Effectively</title><link>https://pyvideo.org/pycon-se-2019/learning-python-or-anything-effectively.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we're learning something new - even something as friendly as Python - it can be difficult to make details stick long-term. This talk will give you some tips to help you learn Python - or anything else - more effectively. Although Python beginners will benefit the most from applying these concepts to Python, this talk is for anyone who wants to hack into their potential to learn more efficiently.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica Shortz</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:/pycon-se-2019/learning-python-or-anything-effectively.html</guid><category>PyCon SE 2019</category><category>Learning</category><category>Beginners</category></item></channel></rss>