<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Bradley Dice</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bradley-dice.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Hacking `import` for speed: how we wrote a GPU accelerator for pandas</title><link href="https://pyvideo.org/pycon-us-2024/hacking-import-for-speed-how-we-wrote-a-gpu-accelerator-for-pandas.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Bradley Dice</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/hacking-import-for-speed-how-we-wrote-a-gpu-accelerator-for-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s import system is eminently hackable. Often, this is a tool of
last resort, but it can be extremely powerful. In this talk, we’ll
describe our ambitious effort to hack &lt;tt class="docutils literal"&gt;import pandas&lt;/tt&gt; to accelerate
large parts of it on the GPU using cuDF: a GPU DataFrame library …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s import system is eminently hackable. Often, this is a tool of
last resort, but it can be extremely powerful. In this talk, we’ll
describe our ambitious effort to hack &lt;tt class="docutils literal"&gt;import pandas&lt;/tt&gt; to accelerate
large parts of it on the GPU using cuDF: a GPU DataFrame library.&lt;/p&gt;
&lt;p&gt;We’ll cover the basics of import hacking and other tricks like Pythonic
proxy patterns. We’ll show how we use these more dynamic features of
Python to effectively accelerate any code that uses pandas, including
third-party libraries. We’ll also get into the technical and social
problems that currently necessitate these sophisticated solutions, and
share some thoughts on solving them. It will be a story of successes,
failures, wishes and tears, and excursions into exciting parts of Python
many developers may not have encountered before!&lt;/p&gt;
&lt;p&gt;This talk is for the Pythonista interested in the import system and how
to hack it for performance. It is also for developers interested in the
question of speeding up the vast ecosystem built on top of libraries
like numpy and pandas without code changes.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>freud: A Software Suite for High Throughput Analysis of Nanoscale Simulation Data</title><link href="https://pyvideo.org/scipy-2019/freud-a-software-suite-for-high-throughput-analysis-of-nanoscale-simulation-data.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Bradley Dice</name></author><id>tag:pyvideo.org,2019-07-11:/scipy-2019/freud-a-software-suite-for-high-throughput-analysis-of-nanoscale-simulation-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Improvements in high-performance particle-based computer simulations demand a commensurate increase in the performance of analysis codes. We address this need with freud, a Python library containing TBB-parallelized C++ routines for various analysis techniques. All inputs and outputs are NumPy arrays, enabling integration with the scientific Python ecosystem. In addition …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Improvements in high-performance particle-based computer simulations demand a commensurate increase in the performance of analysis codes. We address this need with freud, a Python library containing TBB-parallelized C++ routines for various analysis techniques. All inputs and outputs are NumPy arrays, enabling integration with the scientific Python ecosystem. In addition to standard analyses used in molecular simulation, freud implements novel methods for tasks such as characterizing local order. Used in conjunction with simulation software like HOOMD-blue, freud can dynamically analyze simulations on-the-fly, allowing users to study phase transition kinetics and other complex phenomena.&lt;/p&gt;
</content><category term="SciPy 2019"></category></entry><entry><title>signac: Data Management and Workflows for Computational Researchers</title><link href="https://pyvideo.org/scipy-2021/signac-data-management-and-workflows-for-computational-researchers.html" rel="alternate"></link><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><author><name>Bradley Dice</name></author><id>tag:pyvideo.org,2021-07-12:/scipy-2021/signac-data-management-and-workflows-for-computational-researchers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The signac data management framework (&lt;a class="reference external" href="https://signac.io"&gt;https://signac.io&lt;/a&gt;) helps researchers execute reproducible computational studies, scaling from laptops to supercomputers and emphasizing portability and fast prototyping. With signac, users can track, search, and archive data and metadata for file-based workflows and automate workflow submission on high performance computing (HPC) clusters …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The signac data management framework (&lt;a class="reference external" href="https://signac.io"&gt;https://signac.io&lt;/a&gt;) helps researchers execute reproducible computational studies, scaling from laptops to supercomputers and emphasizing portability and fast prototyping. With signac, users can track, search, and archive data and metadata for file-based workflows and automate workflow submission on high performance computing (HPC) clusters. We will discuss recent growth in the software's feature set, scalability, scientific applications, usability, and community. Newly implemented synced data structures, workflow subgraph execution, and performance optimizations will be covered, as well as recent research using the framework and the project's efforts on improving documentation, contributor onboarding, and governance.&lt;/p&gt;
</content><category term="SciPy 2021"></category></entry></feed>