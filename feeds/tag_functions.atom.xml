<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Functions</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_functions.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-12-04T00:00:00+00:00</updated><subtitle></subtitle><entry><title>More Than You Ever Wanted To Know About Python Functions</title><link href="https://pyvideo.org/pycon-ireland-2018/more-than-you-ever-wanted-to-know-about-python-functions.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/more-than-you-ever-wanted-to-know-about-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What exactly are functions? Let's talk about functions, methods, callables and closures - what they are, what you can give them, what they can give you, what you can do with them ... and what's inside. You probably think you already know everything about functions, but you probably don't! By the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What exactly are functions? Let's talk about functions, methods, callables and closures - what they are, what you can give them, what they can give you, what you can do with them ... and what's inside. You probably think you already know everything about functions, but you probably don't! By the end of this talk, I guarantee you'll know more about callables than when you walked in, along with techniques both practical and so extreme your colleagues will never let you merge them to master. (This guarantee is legally non-binding and cannot be redeemed in any way.)&lt;/p&gt;
</content><category term="PyCon Ireland 2018"></category><category term="functions"></category></entry><entry><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Matt Harrison</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you should use
them? This hands-on tutorial will cover these intermediate subjects in
detail, by explaining the theory behind them then walking through
examples. It will also cover how to test such programs. The session will
conclude with some basic problems to work through.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing (45 min)&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;doctest&lt;/li&gt;
&lt;li&gt;brief code coverage intro&lt;/li&gt;
&lt;li&gt;other testing tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Programming (15 min)&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;Substitutes for above constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions (20 min)&lt;ul&gt;
&lt;li&gt;callables&lt;/li&gt;
&lt;li&gt;arguments (args, kw)&lt;/li&gt;
&lt;li&gt;mutable parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoping (10 min)&lt;/li&gt;
&lt;li&gt;Closures (5 min)&lt;/li&gt;
&lt;li&gt;Decorators (20 min)&lt;ul&gt;
&lt;li&gt;Simple decorators&lt;/li&gt;
&lt;li&gt;parameterized decorators&lt;/li&gt;
&lt;li&gt;mangling&lt;/li&gt;
&lt;li&gt;templates for decorators&lt;/li&gt;
&lt;li&gt;classmethod staticmethod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties (5 min)&lt;/li&gt;
&lt;li&gt;List comprehensions (10 min)&lt;/li&gt;
&lt;li&gt;Iterator pattern (5 min)&lt;/li&gt;
&lt;li&gt;Generators (15 min )&lt;/li&gt;
&lt;li&gt;Hands-on application (50 min)&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2010"></category><category term="callables"></category><category term="closures"></category><category term="decorators"></category><category term="functionalprogramming"></category><category term="functions"></category><category term="generators"></category><category term="iterators"></category><category term="listcomprehensions"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-advanced"></category></entry><entry><title>The Five Kinds of Python Functions</title><link href="https://pyvideo.org/pydata-dc-2016/the-five-kinds-of-python-functions.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2016-10-07:/pydata-dc-2016/the-five-kinds-of-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is a function wraps a special method, like len().&lt;/p&gt;
</content><category term="PyData DC 2016"></category><category term="functions"></category></entry><entry><title>Accepting arbitrary keyword arguments in Python</title><link href="https://pyvideo.org/python-morsels/accepting-arbitrary-keyword-arguments.html" rel="alternate"></link><published>2020-12-04T00:00:00+00:00</published><updated>2020-12-04T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-12-04:/python-morsels/accepting-arbitrary-keyword-arguments.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever seen &lt;cite&gt;**kwargs&lt;/cite&gt; in a function definition? There's nothing special about the name &amp;quot;kwargs&amp;quot;: it's the &lt;cite&gt;**&lt;/cite&gt; that's special. You can use Python's &lt;cite&gt;**&lt;/cite&gt; operator to define a function that accepts arbitrary keyword arguments.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category><category term="Asterisks"></category></entry><entry><title>Keyword-only function arguments</title><link href="https://pyvideo.org/python-morsels/keyword-only-function-arguments.html" rel="alternate"></link><published>2020-11-30T00:00:00+00:00</published><updated>2020-11-30T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-11-30:/python-morsels/keyword-only-function-arguments.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you see a function that has an asterisk (&lt;cite&gt;*&lt;/cite&gt;) on its own with a comma after it, every argument after that point is a keyword-only argument (an argument which can only be specified by its name).&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category><category term="Asterisks"></category></entry><entry><title>Accepting any number of arguments to a function</title><link href="https://pyvideo.org/python-morsels/accepting-any-number-arguments-function.html" rel="alternate"></link><published>2020-11-18T00:00:00+00:00</published><updated>2020-11-18T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-11-18:/python-morsels/accepting-any-number-arguments-function.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To make a function that accepts any number of arguments, you can use the &lt;cite&gt;*&lt;/cite&gt; operator and then some variable name when defining your function. Some of Python's built-in functions work this way.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category><category term="Asterisks"></category></entry><entry><title>How to make a function</title><link href="https://pyvideo.org/python-morsels/making-a-function.html" rel="alternate"></link><published>2020-11-16T00:00:00+00:00</published><updated>2020-11-16T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-11-16:/python-morsels/making-a-function.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To define a function in Python, use the def keyword with the function name and any accepted arguments (in parentheses). Functions have inputs (arguments) and an optional output (the return value).&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category></entry><entry><title>Positional vs keyword arguments</title><link href="https://pyvideo.org/python-morsels/positional-vs-keyword-arguments.html" rel="alternate"></link><published>2020-11-12T00:00:00+00:00</published><updated>2020-11-12T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-11-12:/python-morsels/positional-vs-keyword-arguments.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you're working with named arguments (a.k.a. keyword arguments) it's the argument name that matters. When you're working with positional arguments, it's the position matters (but not the name).&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category></entry><entry><title>How to call a function in Python</title><link href="https://pyvideo.org/python-morsels/calling-a-function.html" rel="alternate"></link><published>2020-11-11T00:00:00+00:00</published><updated>2020-11-11T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-11-11:/python-morsels/calling-a-function.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To use a function in Python, write the function name followed by parentheses. If the function accepts arguments, pass the arguments inside the parentheses.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Functions"></category></entry></feed>