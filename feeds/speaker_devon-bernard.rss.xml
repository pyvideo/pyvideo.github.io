<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 18 Nov 2017 00:00:00 +0000</lastBuildDate><item><title>Effective Python package management</title><link>https://pyvideo.org/pycon-ca-2017/effective-python-package-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk showcases various example scenarios around the ins/outs of managing Python packages. Scenarios range from intra-package problems of how to build a package, inter-package problems of how to connect packages, to general usage/environment/setup problems that developers have a hard time debugging. For each of these scenarios, I'll highlight the pros/cons, best practices, and how to overcome the issues developers commonly face.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing packages from public, local file system, git (ssh + https), and how this affects deployment procedures&lt;/li&gt;
&lt;li&gt;handling systems with multiple Python versions or package managers&lt;/li&gt;
&lt;li&gt;how app structures and imports can affect testability&lt;/li&gt;
&lt;li&gt;relative vs absolute imports&lt;/li&gt;
&lt;li&gt;virtual environments&lt;/li&gt;
&lt;li&gt;setup scripts&lt;/li&gt;
&lt;li&gt;package versioning (why, when, how)&lt;/li&gt;
&lt;li&gt;how new code changes could not be taking effect (old .pyc files, or updated import not catching)&lt;/li&gt;
&lt;li&gt;handling sub-packages/dependencies that utilize parent configuration files&lt;/li&gt;
&lt;li&gt;working with &lt;cite&gt;PYTHONPATH&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;executing python as modules or scripts&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Devon Bernard</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/effective-python-package-management.html</guid></item></channel></rss>