<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - apis</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Desenvolvendo APIs REST com Python 3 e Asyncio</title><link>https://pyvideo.org/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Renato Garcia no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Desenvolvendo APIs REST com Python 3 e Asyncio&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Renato Garcia</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</guid><category>Caipyra 2016</category><category>api</category><category>apis</category><category>rest</category><category>rest api</category><category>asyncio</category><category>async</category></item><item><title>Don't start with a database</title><link>https://pyvideo.org/europython-2019/dont-start-with-a-database.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What you do when you start a new project? Usually, we begin with
database design, then we prepare a migration system, user registration,
and all different stuff that distracts us from doing what is most
important - business logic. With the clean architecture, we can learn
how to start a project in another way and this will be one of two main
topics of my talk. The second one will be about new features in Python.
You probably heard about typings, mypy, and dataclasses, but I will show
you how they can be used in real life project that can be developed over
many years in production lifecycle. There will be no &amp;quot;hello world&amp;quot; app,
no copy &amp;amp; paste of documentation, only practical knowledge learned
through many years of practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grzegorz Kocjan</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/dont-start-with-a-database.html</guid><category>EuroPython 2019</category><category>APIs</category><category>Abstractions</category><category>Architecture</category><category>Best Practice</category><category>Clean Code</category></item><item><title>How we run GraphQL APIs in production on our Kubernetes cluster</title><link>https://pyvideo.org/europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I would like to share the workflow and tools we use to
build, deploy and operate GraphQL APIs on our on-premise Kubernetes
cluster.&lt;/p&gt;
&lt;p&gt;I will share code and command examples explaining how we are operating
our applications since our recent transition from REST APIs on Web
servers to GraphQL APIs containers on Kubernetes.&lt;/p&gt;
&lt;p&gt;This talk will not be about the difference between REST and GraphQL but
focus on the workflow, tools and experience we gained in switching our
run time environments and API models.&lt;/p&gt;
&lt;p&gt;At Numberly, we have built and are operating our own on-premise
Kubernetes cluster so we will also be talking about its capabilities and
share some of the experience we gained in doing so.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Proposed agenda:&lt;/div&gt;
&lt;div class="line"&gt;- Our previous workflow and its limitations&lt;/div&gt;
&lt;div class="line"&gt;- How we designed our Kubernetes cluster, its capabilities and the
choices we made&lt;/div&gt;
&lt;div class="line"&gt;- Developer workflow, environments management and deployment&lt;/div&gt;
&lt;div class="line"&gt;- Our GraphQL stack, featuring a sample application&lt;/div&gt;
&lt;div class="line"&gt;- What we're still working on to improve&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexys Jacob</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html</guid><category>EuroPython 2019</category><category>APIs</category><category>Best Practice</category><category>Case Study</category><category>Docker</category><category>Infrastructure</category></item><item><title>Deploy Python to the cloud faster with Azure Serverless</title><link>https://pyvideo.org/europython-2019/deploy-python-to-the-cloud-faster-with-azure-serverless.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bringing your Python scripts or apps and running them in the cloud is
easier than ever with serverless computing. In this talk, we’ll show how
you can use Azure Functions to easily deploy and scale your Python
workloads without having to manage any servers or pay for unused compute
resources. We’ll also show how deep integration with Visual Studio Code
offers a great local development experience with full support for
debugging and testing your app, and allows you to seamlessly deploy your
serverless code to the cloud.&lt;/p&gt;
&lt;p&gt;We’ll start by giving a brief overview of the value of serverless
computing. Next, we'll create a brand new Python app in Visual Studio
Code, and start to add in business logic and ML capabilities. Once we
get the app running debugged locally, we’ll publish it to the cloud as a
serverless function, and demonstrate the serverless scalability.
Finally, we’ll walk you through the tools and capabilities you can
leverage around monitoring and management of your Python Azure
Functions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Hollan</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:/europython-2019/deploy-python-to-the-cloud-faster-with-azure-serverless.html</guid><category>EuroPython 2019</category><category>APIs</category><category>Development</category><category>Microservices</category><category>Scaling</category><category>Tooling</category></item><item><title>API-schema-based testing with schemathesis</title><link>https://pyvideo.org/europython-2020/api-schema-based-testing-with-schemathesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time.&lt;/p&gt;
&lt;p&gt;I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo.&lt;/p&gt;
&lt;p&gt;I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools.&lt;/p&gt;
&lt;p&gt;By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today.&lt;/p&gt;
&lt;p&gt;The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hultnér</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/api-schema-based-testing-with-schemathesis.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>RESTful</category><category>Test Libraries (pytest/nose/...)</category><category>Testing</category><category>Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</category></item><item><title>Developing GraphQL API in Django using Graphene</title><link>https://pyvideo.org/europython-2020/developing-graphql-api-in-django-using-graphene.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build GraphQL schema, queries, and mutations in Django using graphene library&lt;/p&gt;
&lt;p&gt;GraphQL technology has become popular nowadays. While developing REST APIs, there are many things that developers need to take into consideration. There are multiple endpoints and over-fetching is the main problem of REST. GraphQL offers a unique approach and architecture for developing APIs. How is that efficient?&lt;/p&gt;
&lt;p&gt;While using GraphQL, a client can request the data which is needed. It is an alternative for building APIs in place of REST. It’s a query language that can work as a medium between the frontend and backend.&lt;/p&gt;
&lt;p&gt;The journey to develop GraphQL APIs in python needs some requirements and knowledge. We will be building APIs in the Django framework using a graphene library which includes many features of GraphQL such as ObjectTypes, Queries, Mutations, etc. We will start by understanding these concepts followed by some code. This includes detailed information about the Query class, what are resolvers, and where to write business logic, how pagination can be incorporated with queries would be included. Also, it will include the information about the Mutation class, arguments needed for mutation, and what type of response can be returned on successful operations.&lt;/p&gt;
&lt;p&gt;Learning outcomes would be the understanding of code and building GraphQL APIs using graphene in a proper and structured way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nisarg Shah</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/developing-graphql-api-in-django-using-graphene.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Databases</category><category>Django</category><category>PostgreSQL</category><category>Python 3</category></item><item><title>Extending HTTP for fun and non-profit</title><link>https://pyvideo.org/europython-2020/extending-http-for-fun-and-non-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My journey into the IETF HTTP workgroup&lt;/p&gt;
&lt;p&gt;Writing API guidelines is a best practice for standardizing APIs produced by thousands of service provider, but what happens when those rules are not backed by internet standards?&lt;/p&gt;
&lt;p&gt;This talk proposes an iterative strategy for identify and standardize inside IETF key features of your API guidelines.
The steps includes feature landscaping, stakeholder identification and engagement, prototyping and writing an actual internet-draft.&lt;/p&gt;
&lt;p&gt;The strategy is shown using two examples:
- rewriting of &lt;cite&gt;Digest&lt;/cite&gt; header RFC3230 adding clarifications useful for implementors;
- proposing new &lt;cite&gt;RateLimit&lt;/cite&gt; headers and engage with implementors (Microsoft, Red Hat, Kong, ..).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/extending-http-for-fun-and-non-profit.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Best Practice</category><category>Case Study</category><category>Community</category><category>HTTP</category></item><item><title>Full Stack Type Safety</title><link>https://pyvideo.org/europython-2020/full-stack-type-safety.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Beyond PEP-484 – ensure type consistency between layers&lt;/p&gt;
&lt;p&gt;The introduction of PEP-484 gave us an option to enforce the internal type consistency of our Python applications. Our web projects, however, consist of multiple layers, with the Python app taking the role of an HTTP backend. What options do we have to ensure consistency across our stack?
In this talk, we will see some technologies that we can employ to enforce the contract between the layers of our stack. Especially between the frontend and backend. We will demo, how this can be achieved with REST/Swagger and with GraphQL. As both the Graphene library and the open API support for django-rest-framework are both a work-in-progress, we would check, what is possible, and what is still lacking. We will also discuss various approaches to the design: backend first, auto-generating backend from the spec, and TDD, with their advantages and disadvantages.
The topic would be discussed on a simple web application. We would try to play some realistic scenarios, where a careless developer breaks the contract to see how such a mistake can be spotted in the CI phase of the development cycle.
Basic knowledge of Django and JavaScript is required to understand the talk. Some familiarity with TypeScript and ReactJS would also be helpful. However, I plan to explain the code to the listeners that didn’t have prior exposure to these technologies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Pyżalski</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/full-stack-type-safety.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Django</category><category>JavaScript</category><category>Type-Hinting</category><category>Web Protocols</category></item><item><title>How to be Pythonic? Design a Query Language in Python</title><link>https://pyvideo.org/europython-2020/how-to-be-pythonic-design-a-query-language-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Query language is an important part of a database system, it is how people manage their data and how they can make the data useful to them. Starting from the 70s, the world is full of relational databases and SQL was the way to make queries. However, SQL is valuable to an injection attack. Lots of efforts are being used to stop those attacks and it made workflow become less efficient.&lt;/p&gt;
&lt;p&gt;We don’t want to make the same mistake. That’s why using a Python query language is good. Having the Python community in our mind, we created WOQLpy, an open-source query language that lets users build queries in Python, instead of JSON-LD which is the native query language for our TerminusDB database. Now users can store data with a knowledge graph and make graph data visualization with Python.&lt;/p&gt;
&lt;p&gt;In the first part of the talk, we will talk about what challenges we have when creating a query language in Python, the method we use, the idea and theory behind, and how WOQLpy work. This part will include a quick live demo of using WOQLpy so audiences can have an impression on how to make a query and get the task done, that is, getting a meaningful graph visualization form the source CSVs. The process of how to create a database and schema, loading the data form many CSVs, making a query and visualization, will be demonstrated using just one python script.&lt;/p&gt;
&lt;p&gt;In the second part of the talk, we want to stimulate a discussion of what is a good design in Python and what is not. This part will be more interactive with the audiences, as we want to hear from you all, what would be the best for Pythonistas. By first suggesting some possible design, we will use a live voting system to gather opinions. This part of the talk will extend to the Q &amp;amp; A sessions to allow further discussions.&lt;/p&gt;
&lt;p&gt;This talk is for Pythonista at all levels who are interested in starting to design a package in Python, no matter if the audience has published a python library or not. By attending this talk, audiences will learn about how to design a Python package that will be useful to Pythonistas and hopefully encourage more people to publish open-source packages online.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cheuk Ho</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/how-to-be-pythonic-design-a-query-language-in-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Databases</category><category>Graph Databases</category><category>Open-Source</category><category>Programming</category></item><item><title>Overcoming access control in web APIs</title><link>https://pyvideo.org/europython-2020/overcoming-access-control-in-web-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a modern single-page application. Not all APIs are the same, so we will explore different considerations to make when crafting a solution to handle token-based authentication, and scoping to define access levels.&lt;/p&gt;
&lt;p&gt;As one of the core developers of the async web framework Sanic, I will primarily focus on authentication and authorization tools inside Sanic to showcase how to address these issues. However, the concepts should be broadly applicable enough to take back and apply to any web API. The goal is to learn the hot spots, and identify strategies to overcome them.&lt;/p&gt;
&lt;p&gt;Core take aways will include:
- how to implement various JWT strategies;
- best practices for storing JWTs on a browser; and
- controlling access privileges using structured scopes.&lt;/p&gt;
&lt;p&gt;Time permitting, we will even discuss some tools to be used to help ease the anxiety and make security more approachable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hopkins</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/overcoming-access-control-in-web-apis.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Authentication</category><category>Best Practice</category><category>RESTful</category><category>Web</category></item><item><title>ScanAPI</title><link>https://pyvideo.org/europython-2020/scanapi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automated Integration Testing and Live Documentation for your API&lt;/p&gt;
&lt;p&gt;In the current IT scenario, the use of APIs is, without question, widely vast, popular, and significant. It seems at least prudent to ensure they are working properly, as expected. To guarantee the quality of the data that is being consumed or used. To ensure that communication between services is occurring as expected. To ensure the system does, in fact, what it should do.&lt;/p&gt;
&lt;p&gt;ScanAPI is an open-source library that was created to solve all these points. ScanAPI provides an easy way to create integration tests for REST APIs via configuration files.&lt;/p&gt;
&lt;p&gt;The three main reasons that led me to the creation of this library were:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To be a firefighter in a scenario where most of the reported bugs were directly related to some API contract being broken or some endpoint having a behavior different from that expected by the consumer.&lt;/li&gt;
&lt;li&gt;To need to deal with APIs with outdated or mistaken documentation.&lt;/li&gt;
&lt;li&gt;To need to debug an endpoint in the middle of a &amp;quot;chain&amp;quot; of other endpoints. Where I needed to recreate a state that depends on the action of other endpoints.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given a fictitious example: debug an endpoint to reserve seats on an airplane, which depends directly on the previous call of an endpoint for user registration.&lt;/p&gt;
&lt;p&gt;The ScanAPI is open-source and written in Python. However, it can be used in APIs created in any other programming language, since the tests provided by it are integration tests.&lt;/p&gt;
&lt;p&gt;With ScanAPI you can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use environment variables&lt;/li&gt;
&lt;li&gt;Create variables&lt;/li&gt;
&lt;li&gt;Chaining requests - making a request from a result of previous responses&lt;/li&gt;
&lt;li&gt;Hide sensitive information of the requests and responses in the generated report&lt;/li&gt;
&lt;li&gt;Write Python code - if you want, it's not necessary :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topics I intend to address in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Motivation to create the library&lt;/li&gt;
&lt;li&gt;What problems the library solves&lt;/li&gt;
&lt;li&gt;How to test an API using a ScanAPI&lt;/li&gt;
&lt;li&gt;Show the documentation generated by ScanAPI&lt;/li&gt;
&lt;li&gt;An overview of how it is implemented&lt;/li&gt;
&lt;li&gt;Where it is currently being used&lt;/li&gt;
&lt;li&gt;Next steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project Link: &lt;a class="reference external" href="https://github.com/scanapi/scanapi"&gt;https://github.com/scanapi/scanapi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prerequisites:
- Python
- REST APIs
- Integration tests&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Camila Maia</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/scanapi.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Open-Source</category><category>RESTful</category><category>Test Libraries (pytest/nose/...)</category><category>Testing</category></item><item><title>Using Python, Django, and ruthlessness to protect people from social media harassment.</title><link>https://pyvideo.org/kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I present 'secateur', a tool for Twitter users to protect themselves from some forms of online harassment. I discuss using Python and Django to create tools that integrate with Twitter, use its APIs, and block lots of people (LOTS of people).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:/kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</guid><category>Kiwi PyCon 2019</category><category>twitter</category><category>APIs</category><category>secateur</category><category>django</category></item><item><title>PyConAU 2010: Building the Wave Robots API: Behind the Scenes</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building the Wave Robots API: Behind the Scenes&lt;/p&gt;
&lt;p&gt;Presented by Pamela S Fox (Google)&lt;/p&gt;
&lt;p&gt;The Google Wave robots protocol involves JSON-RPC messages that are sent
between the Wave server and the robot, communicating events to process
and operations to perform. The Python Robots API abstracts on top of
that JSON-RPC service, allowing developers to interact with waves using
event callbacks, python classes, and chained functions. In this talk,
we'll explain the JSON- RPC protocol, talk about how we designed the API
to sit on top of that protocol, and show how developers can use the API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pamela S Fox</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:/pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html</guid><category>PyCon AU 2010</category><category>apis</category><category>json</category><category>jsonrpc</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item><item><title>Django APIs, Versioning and You</title><link>https://pyvideo.org/pycon-ireland-2018/django-apis-versioning-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will attempt to explain how to version an API within the Django framework. Say you need to change the data that your API returns to your users, but any major changes would result in breaking the API for users of any previous versions. This talk will explain how to avoid this problem, which as a developer who works on APIs with the Django framework every day is a constant problem that I would have to face. This talk will cover: 1.) Why do I even have to version my API in the first place? Surely I can just make changes? 2.) Okay, now I understand why to version my API in Django. What about the how? (this will mainly focus on the Django REST framework's library of versioning, but other methods will be considered) 3.) Live Demo of breaking changes (oh no!) and how we can apply our knowledge from the second part of the talk and avoid these.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rebecca Martin</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/django-apis-versioning-and-you.html</guid><category>PyCon Ireland 2018</category><category>django</category><category>APIs</category></item><item><title>Autenticazione e autorizzazione in salsa microservice</title><link>https://pyvideo.org/pycon-italia-2022/autenticazione-e-autorizzazione-in-salsa-microservice.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autenticazione e autorizzazione in salsa microservice - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Se partiamo da un monolite è tutto facile: verifichiamo le credenziali
sul database (e/o utilizziamo oauth) e il gioco è fatto. Ma cosa succede
in un mondo distribuito? Chi verifica le credenziali? Come ogni servizio
identifica in modo sicuro l’utente e gli assegna i giusti ruoli? Se
partiamo da un monolite è tutto facile: verifichiamo le credenziali sul
database (e/o utilizziamo oauth) e il gioco è fatto. I monoliti sono
semplici e utili in tantissimi casi, ma non sempre. A volte abbiamo
bisogno di una architettura a microservizi, magari con linguaggi e stack
tecnologici differenti. Chi verifica le credenziali? Come ogni servizio
è in grado di identificare in modo sicuro l’utente e assegnargli i
giusti ruoli per poter esaudire le richieste? Queste sono alcune domande
che un sistema distribuito ci impone di valutare. In questo talk
analizzeremo tramite demo e un caso reale e complesso, i diversi modi e
le tecniche per gestire l’autorizzazione e l’autenticazione in un mondo
a microservizi, illustrando pregi e difetti di ogni soluzione. slides:&lt;/p&gt;
&lt;p&gt;Speaker: Gianluca Carucci&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gianluca Carucci</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/autenticazione-e-autorizzazione-in-salsa-microservice.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>architecture</category><category>authentication</category><category>distributed systems</category><category>microservices</category></item><item><title>Come sfruttare le session auth di Django per un progetto multi tenant</title><link>https://pyvideo.org/pycon-italia-2022/come-sfruttare-le-session-auth-di-django-per-un-progetto-multi-tenant.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come sfruttare le potenzialità della session auth di Django in un
progetto multi tenant - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Descriverò l’approccio e il metodo di implementazione di un’app multi
tenant in Django, nella quale viene sfruttata la session auth di Django
per recuperare il tenant che domina ogni risorsa richiesta dietro
autenticazione. Una soluzione a cui la letteratura sul tema non fa
solitamente riferimento. La “letteratura” sull’argomento multi tenant è
abbastanza varia a approfondita e come del resto lo sono anche i metodi
e gli approcci alla gestione a tenant multipli. In questo talk verrà
descritto, attraverso alcuni esempi, il metodo adottato per la gestione
di un’app backend in Django, con gestione di tenant multipli e
interfacciabile, dietro autenticazione, tramite chiamate API RESTful.
Adottando la session authentication di Django, verrà mostrato come sia
possibile renderla depositaria del tenant che domina tutte le risorse
richieste, per poter filtrarle dinamicamente sulla base dei dati
depositati nella sessione di autenticazione di un utente.&lt;/p&gt;
&lt;p&gt;Speaker: Matteo Vitali&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Vitali</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/come-sfruttare-le-session-auth-di-django-per-un-progetto-multi-tenant.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>authentication</category><category>django</category><category>rest</category></item><item><title>Creare API REST su Odoo con OCA REST Framework</title><link>https://pyvideo.org/pycon-italia-2022/creare-api-rest-su-odoo-con-oca-rest-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creare API REST su Odoo con OCA REST Framework - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;La disponibilità di API è spesso un requisito fondamentale per
l’integrazione di Odoo con terze parti. Tuttavia la mancanza di una
piattaforma REST nativa su Odoo è un ostacolo, a cui è tuttavia semplice
porre rimedio in maniera sistematica e organizzata con il framework
messo a disposizione da OCA Odoo fornisce di default un’interfaccia RPC
per le integrazioni di terze parti, ma non un set di API REST. Per
ovviare a questa mancanza, OCA, la comunità open-source di Odoo, ha
sviluppato un insieme di moduli che aggiungono un framework molto solido
e robusto per la realizzazione di API REST, con una integrazione nativa
di Swagger, un sistema di validazione dei dati in ingresso e in uscita,
e meccanismi di versionamento delle API stesse. In questo talk vedremo
come utilizzare questo framework per realizzare API REST su Odoo.&lt;/p&gt;
&lt;p&gt;Speaker: Andrea Colangelo&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Colangelo</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/creare-api-rest-su-odoo-con-oca-rest-framework.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>architecture</category><category>cpython</category><category>development</category><category>odoo</category><category>open source</category><category>rest</category></item><item><title>HPy: the future of Python C extensions</title><link>https://pyvideo.org/pycon-italia-2022/hpy-the-future-of-python-c-extensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HPy: the future of Python C extensions - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;C extensions plays a big role in the Python ecosystem, but the existing
Python/C API has become a burden for alternative implementations and for
innovation of CPython itself. HPy is a joint project by PyPy, CPython,
Cython, Numpy and GraalPython developers to design a new future proof
API. HPy provides a new API for extending Python in C. In other words,
you use include hpy.h instead of include Python.h. The talk will
explain: 1. Why the current Python/C API is problematic for alternative
implementations such as PyPy and for CPython itself 2. How HPy plans to
solve the problem, and what is the migration path for existing
extensions 3. Why HPy is appealing for extension developers: in
particular, higher performance on PyPy and GraalPython, and the “debug
mode” which automatically catches many mistakes at runtime instead of
hitting painful segfaults and/or memory leaks.&lt;/p&gt;
&lt;p&gt;Speaker: Antonio Cuni&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/hpy-the-future-of-python-c-extensions.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>compiler and interpreters</category><category>cpython</category><category>pypy</category></item><item><title>Leaflet on steroids with Django</title><link>https://pyvideo.org/pycon-italia-2022/leaflet-on-steroids-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Leaflet on steroids with Django - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Django fornisce potenti strumenti per costruire applicazioni
geospaziali. Ma cosa succede quando i dati da visualizzare diventano
troppi, e gli strumenti di base non bastano più? Basato su un caso
reale, in questo talk vedremo come rendere fruibile una mappa
inizialmente lentissima da caricare. L’obiettivo del talk è quello di
fornire spunti e strumenti per affrontare ottimizzazioni lato backend e
frontend su Leaflet e Django, molto utili nel caso di grandi quantità di
dati geospaziali. In particolare vedremo nel dettaglio:&lt;/p&gt;
&lt;p&gt;Il problema, ovvero, una grande quantità di dati geospaziali da
visualizzare in mappa, che prima dell’ottimizzazione sono praticamente
inutilizzabili.&lt;/p&gt;
&lt;p&gt;La soluzione lato backend. Vedremo l’impiego di:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;filtri geospaziali intelligenti.&lt;/li&gt;
&lt;li&gt;stream per servire grandi quantità di dati.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La soluzione lato frontend. Vedremo l’impiego di:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tecniche di ottimizzazione per il caricamento dinamico dei livelli
Leaflet.&lt;/li&gt;
&lt;li&gt;stream per il rendering progressivo dei dati geospaziali.&lt;/li&gt;
&lt;li&gt;filtri intelligenti e relative librerie per ottimizzare le richieste
verso il backend.&lt;/li&gt;
&lt;li&gt;test unitari e funzionali per verificare tutte le feature della
mappa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: Valentino Gagliardi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentino Gagliardi</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/leaflet-on-steroids-with-django.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>django</category><category>GIS</category><category>javascript</category><category>rest</category></item><item><title>/metrics, a must have</title><link>https://pyvideo.org/pycon-italia-2022/metrics-a-must-have.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/metrics, a must have - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;With modern applications being distributed, only testing is enough to
ensure your apps are healthy? The web is wild and users are
unpredictable. Having a good strategy of observability in place is
essential. In this talk, I’ll demo how to setup extensible metrics in
your app using open-source tools With the advent of microservices and
all that jazz, the complexity of monitoring applications increased quite
a lot. How many instances of my app do I have running? Are they all
healthy? How is it performing under heavy load? Questions like that can
not be answered by guesses only, but you need data to be more assertive.&lt;/p&gt;
&lt;p&gt;In this talk, we will create a sample web application and instrument it
using Prometheus (and potentially other tools such as Grafana, Jaeger,
Alert Manager, etc) and see in practice how we can monitor web
applications in real-time.&lt;/p&gt;
&lt;p&gt;Speaker: Luiz Marques&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luiz Marques</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/metrics-a-must-have.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>asyncio</category><category>debugging</category><category>docker</category><category>open source</category><category>performance</category><category>tooling</category></item><item><title>MongoDB and Python, a Perfect Match</title><link>https://pyvideo.org/pycon-italia-2022/mongodb-and-python-a-perfect-match.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MongoDB and Python, a Perfect Match - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Any modern web application needs a database. Why hassle with an old
database when you can easily use modern technology? MongoDB works
perfectly well with Python. Learn how in this talk. Is your application
looking for a database to hang out with? Search no more! MongoDB and
Python are a perfect match. By leveraging the native Python driver,
accessing a MongoDB database is easier than ever. In this presentation,
the attendees will learn what a document database is and how to use it.&lt;/p&gt;
&lt;p&gt;Speaker: Joel Lord&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel Lord</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/mongodb-and-python-a-perfect-match.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>databases</category><category>mongodb</category></item><item><title>Patti chiari, amicizia lunga. Disaccoppiamo lo sviluppo con test di contratto</title><link>https://pyvideo.org/pycon-italia-2022/patti-chiari-amicizia-lunga-disaccoppiamo-lo-sviluppo-con-test-di-contratto.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Patti chiari amicizia lunga. Come disaccoppiamo lo sviluppo tramite i
test di contratto - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Front-end, vi è mai capitato che nonostante vi siate messi d’accordo con
il back-end l’endpoint non vi espone qualcosa? Noi abbiamo risolto
utilizzando il Contract testing, vi mostrerò i vantaggi e alcuni casi
reali di come scrivere un patto aiuta a rendere più semplice lo sviluppo
per tutti. Quando sono entrato in 20tab l’azienda seguiva già le
metodologie Lean e Agile ed era composta principalmente da sviluppatori
Python/Django. Quando abbiamo deciso di disaccoppiare i servizi
(back-end in Django e front-end in React JS) siamo andati incontro a
difficoltà dovute ai differenti tempi di sviluppo o limiti tecnici. Come
prima soluzione avevamo provato con alternare lo sviluppo dei due
servizi prima iniziava il back-end, una volta completato partiva lo
sviluppo front-end. Questo ci rendeva inefficienti a volte i dati che
arrivavano al front-end erano insufficienti o eccessivi rispetto
all’interfaccia che doveva costruire. Quindi abbiamo provato a
dettagliare con maggior rigore tutti i requisiti tecnici necessari per
partire in parallelo, ma lato front-end dovevamo sempre costruirci un
server finto per procedere con lo sviluppo. In questo ci è venuto
incontro il contract testing, entrambi i rappresentanti dei servizi si
riuniscono prendono il design lo analizzano insieme e il front-end
scrive un test di contratto dopo di che entrambi i servizi possono
procedere con i rispettivi sviluppi in maniera svincolata tra di loro.
Il front-end può sfruttare il pact-stub-server per scrivere test
funzionali con cypress e per lavorare senza neanche tirare su il
servizio back-end. Questo ha portato il front-end a riorganizzare il
proprio template, ora abbiamo 3 tipi di test diversi, quelli unitari sui
componenti, quelli funzionali con cypress e quelli di contratto con Pact
JS. Tutti questi test tramite Docker vengono eseguiti nelle nostre
pipeline e bloccano il nostro processo di deploy in caso di fallimento.&lt;/p&gt;
&lt;p&gt;Slide:&lt;/p&gt;
&lt;p&gt;Speaker: Daniele Pompa&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Pompa</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/patti-chiari-amicizia-lunga-disaccoppiamo-lo-sviluppo-con-test-di-contratto.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>django</category><category>docker</category><category>javascript</category><category>testing</category></item><item><title>Python 3.10: let's pattern match! 🔥</title><link>https://pyvideo.org/pycon-italia-2022/python-310-lets-pattern-match.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10: let’s pattern match! 🔥 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Python 3.10 is out there and with this comes Pattern Matching. With this
talk, you will be surprised how simple, yet powerful, Pattern Matching
really is.&lt;/p&gt;
&lt;p&gt;This talk and you, it is a match! 🔥 Python 3.10 is out there now. This
was a two-digit minor version change since the last release, and with
this release new ways of thinking about programming were brought to the
Python language - Pattern Matching.&lt;/p&gt;
&lt;p&gt;We will understand what was there before Python Pattern Matching and how
to use Pattern Matching in different scenarios. We will pattern match
from simple data types to more complex ones, such as dictionaries and
objects. We will also understand how to use guards, and how can build
composable patterns.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you will be surprised how simple, yet powerful,
Pattern Matching really is. This talk and you, it is a match!&lt;/p&gt;
&lt;p&gt;Speaker: Laysa Uchoa&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laysa Uchoa</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/python-310-lets-pattern-match.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>best practice</category><category>development</category></item><item><title>REST In Peace - producing REST services for Odoo by code or just backend</title><link>https://pyvideo.org/pycon-italia-2022/rest-in-peace-producing-rest-services-for-odoo-by-code-or-just-backend.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;REST In Peace - producing REST services for Odoo by code or just backend
- PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;REST In Peace (RIP) is an Odoo module to ease the
development/implementantion of REST services into Odoo using the RIP API
framework library or, without a single line of code, just thru the Odoo
RIP backend settings interface RIP has two easy approaches in producing
a REST server exposing Odoo models data structure and Odoo models method
as REST API services: you can do that by code (the RIP API framework
library) or using Odoo RIP backend configuration interface where you can
define access rules (which models are exposed, who users can access what
and how, which http methods, specific blocking rules, etc.), set models
schema IN and OUT being parsed and validated when invoking the request
or being rendered in the HTTP responses, write your own fuction and
expose that as a REST API service, choose custom HTTP responses data
layouts, requests and responses logs, auth token handlers, etc,
potentially whithout developing one single line of code.&lt;/p&gt;
&lt;p&gt;Speaker: FILIPPO IOVINE&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FILIPPO IOVINE</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/rest-in-peace-producing-rest-services-for-odoo-by-code-or-just-backend.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>odoo</category><category>rest</category></item><item><title>Self-explaining APIs</title><link>https://pyvideo.org/pycon-italia-2022/self-explaining-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Self-explaining APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;To mash up various APIs you need data to have a well defined meaning:
imagine meshing up healthcare APIs using different units for human
temperature, or financial APIs using different currencies.&lt;/p&gt;
&lt;p&gt;This talk describes strategies and python tools to overcome these
problems in large API ecosystems. This talk will present strategies and
python tools to create semantically interoperable REST APIs. After the
problem statement, various solutions will be presented, including: -
contract-first api development with OpenAPI 3, ontologies, controlled
vocabularies; - the rdflib and pyld python libraries; - the use of
centralized catalogs.&lt;/p&gt;
&lt;p&gt;[Very draft slides here](&lt;/p&gt;
&lt;p&gt;Speaker: Roberto Polli&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/self-explaining-apis.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>best practice</category><category>data structures</category><category>rest</category></item><item><title>Test sana in codice sano</title><link>https://pyvideo.org/pycon-italia-2022/test-sana-in-codice-sano.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test sana in codice sano - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Hai mai avuto voglia o necessità di scrivere test ma non conosci le best
practices? Hai difficoltà a trovare esempi pratici online? Vuoi capire
quanto i test migliorino la qualità del codice? Questo talk, partendo
dalle best practices, ti darà le risposte che cerchi tramite esempi
pratici. Le slide sono disponibili a questo link:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Ad oggi i software sono parte integrante della nostra vita, abbiamo un
software per tutto, come sviluppatori vogliamo renderli privi di bug.
“Se il tuo codice non è testabile non è stato ben progettato” e si
presenta agli occhi degli altri come un teorema senza dimostrazione,
ma scrivere test è diverso dallo scrivere codice ed è bene, quindi,
seguire delle best practices.&lt;/div&gt;
&lt;div class="line"&gt;Scrivere codice testato non è soltanto un modo per dormire sonni più
sereni, ma anche un atto etico, perché un bug, nei casi peggiori, può
anche portare ad eventi catastrofici.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hai mai avuto voglia di scrivere codice testato ma non conosci le best
practices? Scrivi già test ma ti chiedi come mai in fase di refactoring
ti ritrovi a perdere più tempo nel fixare i test piuttosto che il tuo
codice? Mentre scrivi i test ti sembra di perdere il focus rispetto ai
requisiti del cliente? Vuoi capire quanto i test migliorino la qualità
del codice? Hai difficoltà a trovare esempi pratici online?&lt;/p&gt;
&lt;p&gt;Nel caso tu abbia risposto sì almeno una volta, segui questo talk:
scoprirai, con esempi pratici, come meglio approcciarsi alla scrittura
di codice testabile e testato. Il talk, presentato da chi ne aveva
davvero bisogno, ti darà spunti di riflessione partendo dai suggerimenti
e dalle linee guida più condivise in letteratura, passando per lo
sviluppo di logiche di business tramite test unit e comportamentali,
fino ad arrivare ai tools e alle librerie disponibili in Django
mostrando esempi pratici di utilizzo.&lt;/p&gt;
&lt;p&gt;Speakers: Antonio Mustich, Davide Ria&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Mustich</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/test-sana-in-codice-sano.html</guid><category>PyCon Italia 2022</category><category>apis</category><category>django</category><category>TDD</category><category>testing</category></item><item><title>The Design of Everyday APIs</title><link>https://pyvideo.org/pycon-italia-2022/the-design-of-everyday-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Design of Everyday APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;What makes a good API for a library? Or more importantly, what makes it
bad? This talk will discuss the principles of what goes into
user-centered design, and how best to apply those principles when
writing a Python library for fellow developers. What makes a good API
for a library? Or more importantly, what makes it bad?&lt;/p&gt;
&lt;p&gt;Implementing an API is an art. It’s the connection between the user and
the library itself. How can we optimize that connection to make the
experience more pleasing? What makes a user reach for one library over
another? What goes into an ergonomic API?&lt;/p&gt;
&lt;p&gt;This talk will first discuss what makes an API good: documentation,
simplicity, consistency, completeness, and flexibility. We will apply
those elements by looking at developing and iterating on our own
library.&lt;/p&gt;
&lt;p&gt;Speaker: Lynn Root&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/the-design-of-everyday-apis.html</guid><category>PyCon Italia 2022</category><category>abstractions</category><category>apis</category><category>best practice</category></item><item><title>Machine Learning by Example</title><link>https://pyvideo.org/pytexas-2019/machine-learning-by-example.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine you could easily use ML without having a PhD or having to mess with models or interacting with TensorFlow? Imagine ML working for your application, not you working for ML. In this session learn how to use ML APIs through demos to power your application and focus on what matters!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriela D'Ávila Ferrara</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:/pytexas-2019/machine-learning-by-example.html</guid><category>PyTexas 2019</category><category>machine learning</category><category>APIs</category></item></channel></rss>