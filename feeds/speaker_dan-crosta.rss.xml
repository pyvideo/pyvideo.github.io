<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 04 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Let The Computer Write The Tests</title><link>https://pyvideo.org/north-bay-python-2018/let-the-computer-write-the-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We don't like to admit it, but our code is riddled with bugs. Even for
very experienced developers, even if we've seen it all before, even on
the fifth time we've written an essentially identical function, our code
still has bugs. In this talk we'll look at a library that can
automatically uncover these bugs, and learn how to apply it to
real-world codebases to find and mediate these problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Crosta</dc:creator><pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-04:north-bay-python-2018/let-the-computer-write-the-tests.html</guid></item><item><title>Exploring Python Code Objects</title><link>https://pyvideo.org/pyohio-2012/exploring-python-code-objects.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python is an interpreted language, right? Wrong! In this talk, dive deep
into Python bytecode, and learn what actually happens in everyone's
favorite Python program, 'print &amp;quot;Hello world&amp;quot;'. Learn to use the
compile() and exec statement, understand what your Python code is doing
with the dis and compiler modules, and discover new ways to explore and
enjoy Python at a low level.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Crosta</dc:creator><pubDate>Sun, 29 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-29:pyohio-2012/exploring-python-code-objects.html</guid></item><item><title>Performance Testing and Profiling: A Virtuous Cycle</title><link>https://pyvideo.org/pycon-us-2014/performance-testing-and-profiling-a-virtuous-cyc.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Donald Knuth famously said that we should avoid optimization 97% of the
time and focus on the &amp;quot;critical 3%&amp;quot;. How can we identify that 3%? How
can we best focus our optimization efforts, and avoid the &amp;quot;root of all
evil&amp;quot; that is premature optimization? This talk introduces key types of
performance testing, and demonstrates how they can be paired with
profiling techniques in a cycle of improvement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Crosta</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/performance-testing-and-profiling-a-virtuous-cyc.html</guid></item><item><title>Good Test, Bad Test</title><link>https://pyvideo.org/pycon-us-2015/good-test-bad-test.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a highly dynamic language like Python, testing is even more critical
than in compiled or more static languages. Like any other code we
produce, tests can be either good or bad. This talk explores three
fallacies of testing, and the mistakes and bad habits these fallacies
encourage; and shows how to write good tests which help assure proper
behavior without impeding development progress.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Crosta</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/good-test-bad-test.html</guid></item></channel></rss>