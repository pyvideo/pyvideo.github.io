<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Apr 2017 00:00:00 +0000</lastBuildDate><item><title>Rusty Python</title><link>https://pyvideo.org/pycon-italia-2017/rusty-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio “colla”, esistono librerie per creare estensioni
nei linguaggi più vari, da C/C++ a Fortran con poche righe di codice
abbiamo il nostro wrapper bello funzionante.&lt;/p&gt;
&lt;p&gt;Da qualche tempo un nuovo linguaggio di aggiunge alla lista: Rust!&lt;/p&gt;
&lt;p&gt;Ci sono due strade, la prima è quella di fare in modo che la libreria
Rust esponga una API C, e per poi usarla con &lt;tt class="docutils literal"&gt;ctypes&lt;/tt&gt; o &lt;tt class="docutils literal"&gt;cffi&lt;/tt&gt;.
L’altra strada passa per &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rust-cpython&lt;/span&gt;&lt;/tt&gt;, un wrapper Rust per le API C
di Python, con cui è possibile sia chiamare Python da Rust che estendere
Python con moduli in puro Rust.&lt;/p&gt;
&lt;p&gt;In questo talk vedremo come è possibile esporre delle strutture Rust in
modo da offrire una interfaccia Pythonica senza venire a compromessi con
le prestazioni.&lt;/p&gt;
&lt;p&gt;Prerequisiti:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Python&lt;/li&gt;
&lt;li&gt;conoscenza minima di Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take away:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“Si può fare!!” un modulo Python in Rust, con setup e test su Travis.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Bertini</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/rusty-python.html</guid><category>Python</category><category>extensions</category><category>Rust</category></item><item><title>PyPy hands-on</title><link>https://pyvideo.org/europython-2011/pypy-hands-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in &amp;quot;Training
Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The session is divided into two parts, of roughly 2 hours each. People
who are interested only in the first part, can leave the session after
it. However, the first part is a prerequisite for the second one, thus
people are not advised to join in the middle of the session.&lt;/p&gt;
&lt;p&gt;The session is meant to be highly interactive. People are invited to
bring their own laptop and try things by themselves.&lt;/p&gt;
&lt;div class="section" id="part-1-run-your-application-under-pypy"&gt;
&lt;h4&gt;Part 1: Run your application under PyPy&lt;/h4&gt;
&lt;p&gt;This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to fix/avoid CPython implementation details (e.g., refcounting)

- general overview of how the PyPy JIT works

- how to optimize your program for the PyPy JIT

- how to view and interpret the traces produced by the JIT

- how to tweak the parameters of the JIT and the GC

- how to use existing CPython C extensions on PyPy, and fix them if necessary
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-write-your-own-interpreter-with-pypy"&gt;
&lt;h4&gt;Part 2: Write your own interpreter with PyPy&lt;/h4&gt;
&lt;p&gt;PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to
implement their own programming languages, or who simply want to know
more about how the PyPy JIT works internally.&lt;/p&gt;
&lt;p&gt;The students will be given the source code for a toy language
implemented in RPython. They will learn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to translate it to C using the PyPy translation toolchain

- what are the &amp;quot;hints&amp;quot; needed by the JIT generator, and how to place them
&lt;/pre&gt;
&lt;p&gt;Then, they will be challenged to add the proper hints to the toy
interpreter, to get the best result with the JIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THINGS TO DO BEFORE THE TRAINING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are encouraged to bring your laptop to the training session.&lt;/p&gt;
&lt;p&gt;Make sure that the following prerequisites are met:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install PyPy 1.5:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/download.html"&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;http://doc.pypy.org/en/latest/getting-started.html#installing-pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure that &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; are installed (look
at the URL above for instructions)&lt;/li&gt;
&lt;li&gt;Clone the pypy repository, and update to the 1.5 version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/pypy"&gt;http://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd pypy&lt;/p&gt;
&lt;p&gt;$ hg up -r release-1.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone the jitviewer repository and install it on pypy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/jitviewer"&gt;http://bitbucket.org/pypy/jitviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd jitviewer&lt;/p&gt;
&lt;p&gt;$ /path/to/pypy-1.5/bin/pypy setup.py develop&lt;/p&gt;
&lt;p&gt;If you intend to follow also the second part (&amp;quot;Write your own
interpreter with PyPy&amp;quot;), you need to make sure you have a working
&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started-python.html%20#translating-the-pypy-python-interpreter"&gt;developing
environment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pypy-hands-on.html</guid><category>cd</category><category>cpython</category><category>extensions</category><category>hg</category><category>jit</category><category>optimize</category><category>pypy</category><category>setup.py</category><category>tutorial</category></item><item><title>Getting ready for PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>PyPy in production</title><link>https://pyvideo.org/europython-2011/pypy-in-production.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy project has recently gathered a lot of attention for its
progress in speeding up the Python language - it is the fastest Python
interpreter, and the most compatible and most stable 'alternative´ one.
No longer merely a research project, PyPy is now suitable for production
use. We are working on improvements on calling into C libraries and
generally integrating with the existing Python extensions ecosystem.&lt;/p&gt;
&lt;p&gt;We will give an overview on how the tracing Just-in-Time compiler works
in PyPy. From there, we will then focus on what the PyPy project has
achieved, particularly in the past two years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;most Python benchmarks run much faster than with CPython or Psyco&lt;/li&gt;
&lt;li&gt;the real-world PyPy compiler toolchain itself (200 KLocs) runs twice
as fast&lt;/li&gt;
&lt;li&gt;already supports 32 and 64bit x86 and is in the process of supporting
ARM&lt;/li&gt;
&lt;li&gt;full compatibility with CPython (more than Jython/IronPython)&lt;/li&gt;
&lt;li&gt;full (and JIT-ed) ctypes support to call C libraries from Python&lt;/li&gt;
&lt;li&gt;supports Stackless Python (in-progress)&lt;/li&gt;
&lt;li&gt;new &amp;quot;cpyext&amp;quot; layer which integrates existing CPython C extensions&lt;/li&gt;
&lt;li&gt;an experimental super-fast JIT-compilation of calls to C++ libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to reserve time for discussing potential future work like SWIG
and/or Cython compatibility and other areas brought up by the audience.
There are many interesting details that can be explored further; we will
focus on the points the audience is most interested in.&lt;/p&gt;
&lt;p&gt;For more info:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;http://pypy.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Our blog: &lt;a class="reference external" href="http://morepypy.blogspot.com/"&gt;http://morepypy.blogspot.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eureka program: &lt;a class="reference external" href="http://www.eurostars-eureka.eu/"&gt;http://www.eurostars-eureka.eu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Eurostars Eureka is our funding source since 2009. It is a
cross-European funding collaboration that targets small firms which
produce research.&lt;/em&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/pypy-in-production.html</guid><category>cpython</category><category>ctypes</category><category>cython</category><category>extensions</category><category>pypy</category><category>stackless</category></item><item><title>Douglas Bagnall - pyserf - a shortcut for writing C extensions in C</title><link>https://pyvideo.org/kiwi-pycon-2009/douglas-bagnall---pyserf---a-shortcut-for-writing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pyserf - a shortcut for writing C extensions in C&lt;/p&gt;
&lt;p&gt;Presented by Douglas Bagnall&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are many clever ways of connecting Python and C code together, and
pyserf is one of those. It is just a short script that parses a module
outline and produces an idiomatic template for a C extension providing
the same signatures, so all you need to do is write the bits that
actually do stuff.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Pyserf is a tiny project that I wrote for my own use years ago and never
released because it is so obvious that dozens of better versions must
exist. The idea is simple -- you write an outline of a module like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;&amp;quot;&amp;quot;module documentation&amp;quot;&amp;quot;&amp;quot;
def top_level_function(int_a, float_b):
   &amp;quot;function documentation&amp;quot;
   return float_c

class SomeModule:
   &amp;quot;&amp;quot;&amp;quot;class documentation&amp;quot;&amp;quot;&amp;quot;
   def foo(self, int_ants obj_zoo):
      &amp;quot;&amp;quot;&amp;quot;method documentation&amp;quot;&amp;quot;&amp;quot;
      return float_frogs
&lt;/pre&gt;
&lt;p&gt;and pyserf uses the parsing modules in the standard library to generate
a C file that will compile to an extension providing the interface it
describes, with the documentation appearing in the right place and the
type conversions all properly handled. The generated file is not a
hideous unreadable mess, rather it is within a few characters of best
practise according to the official tutorial. Once you have this
template, you abandon your outline and write the middles of each
function in C. In describing what pyserf does, this talk will
demonstrate what is required to write an extension in C by hand, and
show you some ways of using the standard libraries parsing modules.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Douglas Bagnall</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/douglas-bagnall---pyserf---a-shortcut-for-writing.html</guid><category>extensions</category><category>kiwipycon</category><category>kiwipycon2009</category><category>pyserf</category></item><item><title>PyCon 2009: A Whirlwind Excursion through Writing a C Extension (#68)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: Ambient mic used, some echoing] Everyone's heard of C
extensions to Python, but few have ventured into those murky depths.
This is a quick overview of how to write a C extension, complete with
highlights of the C API, memory management, error handling, and type
creation. Whether you want to speed up your Python, integrate with
legacy code, contribute to Python's core, or just learn a little about
how it all works under the covers, you will enjoy this trip through
unfamiliar territory. I guarantee you will return safely.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html</guid><category>extensions</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item></channel></rss>