<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_djangocon-europe-2014.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-05-15T00:00:00+00:00</updated><entry><title>Challenges when building High profile Editorial Sites</title><link href="https://pyvideo.org/djangocon-europe-2014/challenges-when-building-high-profile-editorial-sites.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Yann Malet</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/challenges-when-building-high-profile-editorial-sites.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be a walk through the challenges encountered when
building a high profile editorial sites. My goal is to present some of
the common pitfalls we have encountered at &lt;a class="reference external" href="http://lincolnloop.com"&gt;Lincoln
Loop&lt;/a&gt; and to explain how we solved:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Legacy migration always take longer&lt;/li&gt;
&lt;li&gt;devops&lt;/li&gt;
&lt;li&gt;Multiple environment&lt;/li&gt;
&lt;li&gt;Easy deployment&lt;/li&gt;
&lt;li&gt;Responsive design impacts the backend&lt;/li&gt;
&lt;li&gt;Journey of an image&lt;/li&gt;
&lt;li&gt;Picturefill.js&lt;/li&gt;
&lt;li&gt;Danger of reusing published django applications&lt;/li&gt;
&lt;li&gt;Caching strategy&lt;/li&gt;
&lt;li&gt;Html fragment&lt;/li&gt;
&lt;li&gt;Varnish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Audience _ Decision maker that are going to rebuild their magazine _
Developer bidding for this kind of projects for the first time&lt;/p&gt;
</summary></entry><entry><title>Don't be scared of the lava! Why purist unit tests are a waste of time.</title><link href="https://pyvideo.org/djangocon-europe-2014/dont-be-scared-of-the-lava-why-purist-unit-tests-are-a-waste-of-time.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/dont-be-scared-of-the-lava-why-purist-unit-tests-are-a-waste-of-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;purist&amp;quot; approach to unit tests says that your tests should be
perfectly isolated, that they should mock out any dependencies, and that
they should never, ever touch the database. The database is hot lava!&lt;/p&gt;
&lt;p&gt;In this talk I will outline a (controversial) thesis: that such tests
are just not very useful in the world of web application development,
and Django. Given that my opinion is so wrong-headed (or maybe just
plain wrong), I will endeavour to provide a balanced picture of the pros
and cons of different testing approaches, including the arguments for
purist unit tests, the options for integration testing and acceptance
testing, the &amp;quot;functional core imperative shell&amp;quot; pattern (AKA hexagon
architecture), all with a view to leaving the audience informed enough
to make their own decisions about testing strategy.&lt;/p&gt;
</summary></entry><entry><title>Good schema design - and why it matters!</title><link href="https://pyvideo.org/djangocon-europe-2014/good-schema-design-and-why-it-matters.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/good-schema-design-and-why-it-matters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pretty much every website is underpinned by a database or two - and how
you're storing data in there really matters. This talk will cover the
best ways to set up your schema to store your data, how to change your
schema without any downtime, and how to use the brand-new migration
features in Django 1.7 to your best advantage.&lt;/p&gt;
&lt;p&gt;We'll take a look at database normalisation (and why it's not always a
good idea), denormalisation, schemaless data, how to best set up your
tables and indexes for different load types (heavy read/heavy
write/balanced), and how to scale up your database and its schema as you
grow.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Docker</title><link href="https://pyvideo.org/djangocon-europe-2014/introduction-to-docker.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Amjith Ramanujam</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/introduction-to-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker is an open source tool that simplifies managing Linux containers.
A container is a sandbox environment that runs a collection of
processes. Containers are light-weight VMs that share the same kernel as
the host OS.&lt;/p&gt;
&lt;p&gt;Docker adds some niceties to Linux containers such as AUFS, version
control, docker registry (repository), versioning etc. This talk will
serve as an introduction to working with docker tools. I'll cover the
basic concepts behind docker and explain the difference between a docker
container and a VM. Show a demo of how easy it is to create a docker
image and launch a container from it. Briefly explain the idea behind
Dockerfile and show some examples.&lt;/p&gt;
&lt;p&gt;I'll cover how networking and filesystem changes are handled in Docker.
Show a demo of how to deploy a Django application in docker and explain
why it's useful to do so in production.&lt;/p&gt;
&lt;p&gt;I'll also cover some common use cases of docker in the industry such as
testing, deployment, PAAS etc.&lt;/p&gt;
</summary></entry><entry><title>Keynote: The programmer's body</title><link href="https://pyvideo.org/djangocon-europe-2014/keynote-the-programmers-body.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/keynote-the-programmers-body.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is the only thing that really matters?&lt;/p&gt;
&lt;p&gt;We are programmers, and everything in the ideology of our industry is
disembodied and virtualised. At the same time we are building the world
that the rest of the world, increasingly, will live in.&lt;/p&gt;
&lt;p&gt;We are, it seems, sexless selves and disembodied minds in a world that
doesn't need our bodies and isn't very interested in them.&lt;/p&gt;
&lt;p&gt;And yet: the body remains at the centre of the world, even this
supposedly bodiless world. Its disputes and politics, its hurts and
controversies, its pains and insults all belong to the body.&lt;/p&gt;
&lt;p&gt;Even the fiction and film of this new world of the unbodied are (and
always have been) bodily-fixated.&lt;/p&gt;
&lt;p&gt;In short, there's no escaping the body.&lt;/p&gt;
&lt;p&gt;In this talk, I take examples from history, literature, film, poetry and
other fields to show how our present state can be woven into a very
ancient pattern, and ask: what should we, as programmers, do about it?&lt;/p&gt;
&lt;p&gt;And finally, I make a modest attempt to answer that question.&lt;/p&gt;
</summary></entry><entry><title>Make AngularJS play nice together with Django</title><link href="https://pyvideo.org/djangocon-europe-2014/make-angularjs-play-nice-together-with-django.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Jacob Rief</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/make-angularjs-play-nice-together-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django intentionally has been designed as a pure server side framework,
thus being agnostic about client side programming, except for the Django
admin interface, which uses jQuery. Letting developers choose their
preferred client side framework has been a wise decision by Django
community. However, in most cases the de-facto standard, hence jQuery,
is used. In the past years, other Javascript frameworks have emerged,
namely Knockout, EmberJS, Backbone and AngularJS. They all attempt to
circumvent to shortcomings of jQuery. Since Django developers are
familiar with the concept of Model-View-Control, they might feel even
more comfortable with one of these frameworks, rather than with jQuery.&lt;/p&gt;
&lt;p&gt;In my proposed talk, I would like to give a short introduction into
AngularJS’s two-way data-binding, which can dramatically reduce
boilerplate code, otherwise required when using jQuery. Furthermore,
this talk will handle the following topics: - How to render model-bound
forms for AngularJS, using mixin classes to be added to the built in
Django form. - How Django’s form validation can be used to pre-validate
the form data on the client, using the AngularJS Model controller, but
without duplicating code. - How to securely call Django view’s methods
from inside an AngularJS controller, with a behaviour similar to remote
procedure calls. - How to use dependency injection to separate concern
for external data, either created by Django for production use, or by a
mocking class when writing unit tests for browsers code. - Three-way
data-binding build on top of AngularJS’s two-way data- binding using
websockets for bidirectional synchronization of the browsers view model
with server side data buckets.&lt;/p&gt;
&lt;p&gt;In-depth documentation on the topics of the proposed talk can be found
here: &lt;a class="reference external" href="http://django-angular.readthedocs.org/en/latest/"&gt;http://django-angular.readthedocs.org/en/latest/&lt;/a&gt;
&lt;a class="reference external" href="http://django-websocket"&gt;http://django-websocket&lt;/a&gt;- redis.readthedocs.org/en/latest/&lt;/p&gt;
</summary></entry><entry><title>Open data on the sea shore</title><link href="https://pyvideo.org/djangocon-europe-2014/open-data-on-the-sea-shore.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Richard Moch</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/open-data-on-the-sea-shore.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Although data mining for the weather forecast and the sea is well known
and organised, the availability to the general public or data mining by
volunteers is recent. Sources are varied and may be issued from free
software people or volunteer communities, public data or industry. This
presentation will aim to draw up a balance sheet of available data,
mainly in France and the Mediterranean sea and also what can be done
with this data and perspectives within the context of sailing
navigation.&lt;/p&gt;
</summary></entry><entry><title>pytest: helps you write better Django apps</title><link href="https://pyvideo.org/djangocon-europe-2014/pytest-helps-you-write-better-django-apps.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Andreas Pelme</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/pytest-helps-you-write-better-django-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a full featured testing tool that can make your testing
experience better. This talk will introduce you to pytest and show how
easy it is to get started with pytest in your own project.&lt;/p&gt;
&lt;p&gt;Good practices are crucial to effective testing. This talk will cover
Django testing best practices with a lot of concrete examples. It will
also discuss how to write faster tests and how to improve test run time
by running tests in parallel.&lt;/p&gt;
</summary></entry><entry><title>The Whys and Hows of using Django Formsets</title><link href="https://pyvideo.org/djangocon-europe-2014/the-whys-and-hows-of-using-django-formsets.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Sneha Priscilla Makini</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/the-whys-and-hows-of-using-django-formsets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you having trouble choosing the right design approach for handling
multiple forms on the same page? Do you end up writing large quantities
of code to deal with a dynamically changing set of forms? If so, Django
Formsets is the perfect life saver for you!&lt;/p&gt;
&lt;p&gt;Most new Django users are intimidated at the idea of Formsets and more
often than not, this flexible feature goes unnoticed! This talk will
cover the following topics: - Where exactly does one use Formsets and
how? - Dealing with dynamically changing forms. - Views &amp;amp; Formsets. -
What are the most common roadblocks and what to do about them?&lt;/p&gt;
&lt;p&gt;I will also cover how Formsets helped me code GNU Mailman's user
settings management feature to handle mailing list settings for a
multiple-users multiple-lists scenario.&lt;/p&gt;
</summary></entry><entry><title>Advanced Web Typography</title><link href="https://pyvideo.org/djangocon-europe-2014/advanced-web-typography.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Idan Gazit</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/advanced-web-typography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Oliver Reichenstein famously quipped that “The Web is 95% Typography.”
Most of the information we take in on the web is textual in nature. It
behooves us, as writers and curators of text, to know about the art and
science of presenting textual information.&lt;/p&gt;
&lt;p&gt;This talk isn’t about art, or science, but technique. Typesetting has a
rich history, dating back to Mr. Gutenberg and his printing press.
Although digital type is fairly mature by now, type on the web is still
very much in its infancy. We are only now gaining typographical controls
that the publishing industry has taken for granted these last 20 years.
I'll be taking you on tour of the current state of type on the web: what
we can do today, and what we will be able to do tomorrow.&lt;/p&gt;
&lt;p&gt;Some highlights: _ A reintroduction to font-face and the nitty-gritty
details of how it works _ Advanced typography with CSS3 font-features
(&lt;a class="reference external" href="http://caniuse.com/#feat=font-feature"&gt;http://caniuse.com/#feat=font-feature&lt;/a&gt;) _ Icon fonts, and semantic use
thereof _ JavaScript tools like fittext.js and lettering.js&lt;/p&gt;
</summary></entry><entry><title>Django minus Django</title><link href="https://pyvideo.org/djangocon-europe-2014/django-minus-django.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/django-minus-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a monolithic framework -- or is it? Django prides itself on
being &amp;quot;batteries-included,&amp;quot; but that doesn't mean you need an
appointment at the Genius Bar to replace them. This talk aims to show
the audience how to replace every facet of Django, from the template
engine to the ORM. The talk will also highlight the areas of Django that
still carry this difficulty, and offer direction where Django can go to
fix them.&lt;/p&gt;
</summary></entry><entry><title>From __icontains to search</title><link href="https://pyvideo.org/djangocon-europe-2014/from-__icontains-to-search.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/from-__icontains-to-search.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good search experience for your users is about more than just a more
efficient way to find models containing certain word or phrase. In this
talk we'll go through what are the relevant parts of search and how to
best implement them (we'll use Elasticsearch for actual examples).&lt;/p&gt;
&lt;p&gt;We will start discussing data modelling, moving on to simple search, add
facets for easier navigation and discoverability, spell checking (&amp;quot;did
you mean?&amp;quot;) and auto-complete. In the remaining time we'll see about
possibilities for further enhancing your search by tracking user
searches or providing stored search functionality.&lt;/p&gt;
</summary></entry><entry><title>Gamers do REST</title><link href="https://pyvideo.org/djangocon-europe-2014/gamers-do-rest.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Angel Ramboi</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/gamers-do-rest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The presentation is meant to give an overview (sprinkled with
implementation details and solutions to issues we encountered) of how we
use Django to build RESTful APIs in Demonware and how we manage to
reliably serve millions of gamers all over the world that play
Activision-Blizzard’s successful franchises Call of Duty and Skylanders.&lt;/p&gt;
&lt;p&gt;Topics the presentation will touch (some only briefly because of time
constraints): - tech stack overview - API design - configuration
handling - middleware usage for logging, metrics and error handling -
class based views and resource representation&lt;/p&gt;
</summary></entry><entry><title>Introduction to User Experience Design</title><link href="https://pyvideo.org/djangocon-europe-2014/introduction-to-user-experience-design.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Meghan Reilly</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/introduction-to-user-experience-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While User Experience Design (UXD) may seem like another buzzword, it
actually has deep roots in usability, visual design, information
architecture, and many other areas that developers and the like may
already be familiar with. UXD is not just another process, but instead a
way of thinking and collaborating that should not be overlooked for cost
or time reasons.&lt;/p&gt;
&lt;p&gt;As companies continue to put more pressure on their employees to do more
with less, decision makers, product managers and developers are looking
for ways to solve problems quickly, while still getting high value for
the company and their customers. With changing technologies, strategies
and markets, and a constant push for employees to wear multiple hats and
work more collaboratively, having an amazing user experience is becoming
a &amp;quot;must have&amp;quot; for companies that want to remain competitive.&lt;/p&gt;
&lt;p&gt;Developers, product managers and decision makers who are new to UXD and
curious to learn more will walk away with a clear definition of User
Experience Design, a knowledge of its goals and the basic components
that make up a UX project, such as: User Research, UI Design, Front End
Development, and Content Strategy. Attendees will also walk away with
examples of how UXD can add value to a project for both the business and
the users.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Your Product is more than the Application!</title><link href="https://pyvideo.org/djangocon-europe-2014/keynote-your-product-is-more-than-the-application.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Kevin Van Wilder</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/keynote-your-product-is-more-than-the-application.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All too often we see developers and system operators fail to
communicate. Both teams seems to have different requirements: developers
want new features and releases whilst operators want stable systems. But
the fact of the matter is that both teams have the same goals. When both
teams are brought together from the get-go, you notice the goals become
visible again and the requirements align.&lt;/p&gt;
&lt;p&gt;The Devops movement in IT is a critical mass of developers and IT
operations aligning their ideas. It is a collection of best practices,
tooling and a philophy that emphasizes on collaboration and automation.
But the most important best practice a developer and IT operator
requires is the art of clear and concise communication.&lt;/p&gt;
&lt;p&gt;In this talk, I'll finally remove the confusion of what Devops really is
and explain the best practices and toolsets. The talk revolves around
the CALMS acronym:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Culture: people and process first, if you dont have the correct
culture, all attempts will be fruitless.&lt;/li&gt;
&lt;li&gt;Automation: remove the human error from the equation.&lt;/li&gt;
&lt;li&gt;Lean: learn to adapt to situations, think outside the box and
identify processes that are a waste of time&lt;/li&gt;
&lt;li&gt;Measurements: If you can't measure, you can't identify and improve.
Performance metrics, process metrics and even people metrics!&lt;/li&gt;
&lt;li&gt;Sharing: This is the loopback in the CALMS cycle. Share your ideas
and solutions with the community. Learn from the advise of other
people and improve your own processes along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your product is more than the application, it is also the monitoring,
the infrastructure, the constant improvement, the sharing of knowledge
and the people developing it!&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Wednesday - 1</title><link href="https://pyvideo.org/djangocon-europe-2014/lightning-talks-wednesday-1.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/lightning-talks-wednesday-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2014 - île des Embiez - France&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Lightning Talks - Wednesday - 2</title><link href="https://pyvideo.org/djangocon-europe-2014/lightning-talks-wednesday-2.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/lightning-talks-wednesday-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2014 - île des Embiez - France&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Really, Really Fast Django</title><link href="https://pyvideo.org/djangocon-europe-2014/really-really-fast-django.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Christophe Pettus</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/really-really-fast-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django can handle extremely high levels of traffic… with appropriate
design and support. We’ll go over techniques to keep your Django site
from being crushed under high load.&lt;/p&gt;
&lt;p&gt;Topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Schema/model design&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Efficient view function design&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Template design for high performance&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Database tuning and sharding&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll also discuss caching.&lt;/p&gt;
</summary></entry><entry><title>Taming Complexity with Django</title><link href="https://pyvideo.org/djangocon-europe-2014/taming-complexity-with-django.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Ustun Ozgur</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/taming-complexity-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the influential paper &amp;quot;Out of the Tarpit&amp;quot;, Moseley and Marks argues
that &amp;quot;complexity is the single major difficulty in the successful
development of large scale software systems&amp;quot;. In this talk, we will
analyze the major sources of &amp;quot;accidental&amp;quot; complexity a Django project
faces over time, and what the major methods to deal with them are. The
major tools we have in reducing complexity are reducing state and
increasing abstraction skills.&lt;/p&gt;
&lt;p&gt;The talk will start with generally accepted methods in Django software
development and touch on separating a project into multiple apps,
relying on managers to implement collection level functionality, making
use of decorators for cross-cutting concerns and adding methods to
models (but bewaring the perils of fat models). We will discuss how to
separate the roles of models with mixins so that functionality can be
reused across models. We will discuss how functional programming
techniques can be employed in a Django project to reduce complexity.&lt;/p&gt;
&lt;p&gt;In the second part of the talk, we will continue with another major
source of complexity in Django applications: The JavaScript problem. No
longer can we ignore JavaScript when discussing web projects and that
covers Django too. We will briefly see how popular tools such as jQuery,
Backbone and Angular try to solve this with increasing degrees of
success, but do not attack the &amp;quot;state&amp;quot; problem as the major source of
complexity. We will introduce Facebook's React library as the solution
and how its functional programming inspired philosophy helps us to cope
with this problem. We will show how this library can be used within
Django in conjunction with a node.js renderer, whereby duplication of
templates on server and client-side, a major source of complexity is
reduced.&lt;/p&gt;
</summary></entry><entry><title>The Power of Natural Language - From ATDD to Lean Modeling</title><link href="https://pyvideo.org/djangocon-europe-2014/the-power-of-natural-language-from-atdd-to-lean-modeling.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Ilja Bauer</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/the-power-of-natural-language-from-atdd-to-lean-modeling.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delivering high quality software solutions that meet customer
expectations and requirements is the essential goal of any development
project. Therefore, development teams need to obtain the relevant domain
knowledge and information from their customers.&lt;/p&gt;
&lt;p&gt;As a result, initial system specifications are typically formulated
using natural language (e.g., within plain text documents). The main
challenge imposed by this process is to avoid misunderstandings,
misinterpretations and inconsistencies during the transformation of
informal requirements into formal specifications, models, and executable
code or tests.&lt;/p&gt;
&lt;p&gt;At first the talk will briefly introduce Acceptance Test-Driven
Development (ATDD) as a powerful method to bridge the gap between
requirements engineering and software testing. Following this, the
second part will push the original ATDD idea even further by introducing
the concept of “Lean Modeling”, a lightweight and pragmatic alternative
to classical software modeling and DSL tools.&lt;/p&gt;
&lt;p&gt;Examples will be presented that illustrate the usage of natural language
specifications for various django specific artifacts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;models&lt;/li&gt;
&lt;li&gt;REST Resources&lt;/li&gt;
&lt;li&gt;initial database data (fixtures)&lt;/li&gt;
&lt;li&gt;forms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This approach can also help to improve our debugging experience and IDE
smart completion support. In addition to these advantages during
development a demo will be shown, that illustrates how customers / users
can benefit from “Lean Modeling” by creating custom forms in their
django backend with natural language.&lt;/p&gt;
</summary></entry><entry><title>An introduction to django-oscar</title><link href="https://pyvideo.org/djangocon-europe-2014/an-introduction-to-django-oscar.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>David Winterbottom</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/an-introduction-to-django-oscar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Oscar is a Django e-commerce framework designed for flexibility. It
employs a range of techniques that allow developers to customise any
part of the core. In this way it can be used to capture a wide range of
e-commerce requirements.&lt;/p&gt;
&lt;p&gt;This talk will examine the key techniques used by Oscar that allow this
customisation, as well as the features Oscar offers and what it can be
used for.&lt;/p&gt;
</summary></entry><entry><title>Designing and maintaining distributed systems</title><link href="https://pyvideo.org/djangocon-europe-2014/designing-and-maintaining-distributed-systems.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Raphaël Barrois</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/designing-and-maintaining-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As projects grow, they tend to mutate into complex, monolithic
applications ; that's where the team splits them into loosely coupled
modules talking over the network (a.k.a a service-oriented
architecture).&lt;/p&gt;
&lt;p&gt;This talk will focus on a few key points for a successful &amp;quot;monolithic to
distributed&amp;quot; transition:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Setting clean and logical boundaries between services&lt;/li&gt;
&lt;li&gt;Providing a seamless integration to service users (SSO, merging
views, ...)&lt;/li&gt;
&lt;li&gt;Performing a smooth transition when a service turns remote&lt;/li&gt;
&lt;li&gt;Choosing suitable protocols for communications (spoiler alert: avoid
SOAP/XML :p)&lt;/li&gt;
&lt;li&gt;Stubbing versus integration testing, tips and tricks&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Django class-based views: survival guide for novices</title><link href="https://pyvideo.org/djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a Django novice, confused by words like class-based views, URL
dispatchers, HTTP requests? Are you still wondering how to use all those
things to build the pages of your Web site?&lt;/p&gt;
&lt;p&gt;Django programmers that started with versions prior to 1.3 are used to
deal with views as functions, and they learned how to process even
complex forms in a procedural way. From the release 1.3, Django
introduced class-based views (CBVs) and ported its powerful generic
views to this new paradigm (class-based generic views, or CBGVs).&lt;/p&gt;
&lt;p&gt;This change, however, has not been harmless for Django novices: the
django- users mailing list and StackOverflow are full of questions about
views and classes.&lt;/p&gt;
&lt;p&gt;This talk aims to lead Django novices to a good understanding of what
class- based functions are and how they can be effectively used.&lt;/p&gt;
&lt;p&gt;The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python classes: how OOP concepts improve the View part of Django MVT.
This part aims to introduce Python classes as data processors and
explains how OOP concepts like inheritance help the fast development
of customized solutions.&lt;/li&gt;
&lt;li&gt;URL dispatchers: how Django CBV process URL parameters. Here I
discuss how Django class-based views store arguments extracted from
URLs and how we can access them.&lt;/li&gt;
&lt;li&gt;HTTP verbs: how Django CBV deal with GET, POST and friends. This part
shows what happens to a class-based view when HTTP requests are
processed and how to leverage the mechanism to customize data
processing.&lt;/li&gt;
&lt;li&gt;CRUD operations through Django generic class-based views. Create,
Read, Update, Delete are the fundamentals operations you need on
data, so it is worth learning to use and customize the powerful
generic views of Django that implement them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target of this talk are Django novices who completed and understood
the Django tutorial. Previous knowledge of the basic Python OOP syntax
and concepts is preferred (classes, inheritance, method overriding,
function arguments processing).&lt;/p&gt;
</summary></entry><entry><title>Django powered ecological research</title><link href="https://pyvideo.org/djangocon-europe-2014/django-powered-ecological-research.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Jakub Witold Bubnicki</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/django-powered-ecological-research.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2014 - île des Embiez - France
&amp;quot;Django powered ecological research&amp;quot; by Jakub Witold Bubnicki&lt;/p&gt;
</summary></entry><entry><title>Frequently Missed Performance Gains</title><link href="https://pyvideo.org/djangocon-europe-2014/frequently-missed-performance-gains.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Frank Wiles</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/frequently-missed-performance-gains.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Premature optimization is bad, but there are several things people often
overlook that can easily speed up your Django sites that require little
to no work and don't overly complicate your development efforts. We'll
talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cached templates&lt;/li&gt;
&lt;li&gt;dealing with sessions&lt;/li&gt;
&lt;li&gt;ORM tips&lt;/li&gt;
&lt;li&gt;front end performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Small things can make a big difference!&lt;/p&gt;
</summary></entry><entry><title>Healthchecks for Django</title><link href="https://pyvideo.org/djangocon-europe-2014/healthchecks-for-django.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Benoît Bryon</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/healthchecks-for-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once you deployed your project, how do you validate everything is
running as expected? Then, at runtime, how do you check your site
status? Or when an error occurs, how do you examine system? How do you
distinguish between bugs in code, issues in configuration or failures in
third-party services? That is what healtchecks are made for.&lt;/p&gt;
&lt;p&gt;&amp;quot;Hospital&amp;quot; is a healthcheck framework for Python. Let's discover how
smoketests and diagnosis can secure your work. Let's see how easy it is
to integrate healthchecks with Django (or with any Python project), then
plug the results to supervision/monitoring tools.&lt;/p&gt;
&lt;p&gt;Note: did you notice Django 1.7 introduces a system check framework? Do
you know about django-health-check, django-doctor or django-smoketest
projects? We will also consider how authors are trying to make those
projects converge.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Where the Wild Things Are</title><link href="https://pyvideo.org/djangocon-europe-2014/keynote-where-the-wild-things-are.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Aymeric Augustin</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/keynote-where-the-wild-things-are.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The concept of pluggable applications has been instrumental in the
development of the Django ecosystem and the quality of Django websites.
But it's bare- bones: the INSTALLED_APPS setting simply contains a list
of Python packages.&lt;/p&gt;
&lt;p&gt;In February 2007, Joseph Kocherhans uploaded a patch to allow changing
an application's label and providing a verbose name for the admin. The
scope of this ticket quickly escalated. Eventually it became known — and
feared — as &amp;quot;app-loading&amp;quot;.&lt;/p&gt;
&lt;p&gt;With every ticket closed as a duplicate, the monster grew stronger and
hope faded. Valiant efforts by contributors and core devs cornered the
beast into a cave but hardly weakened it. It was finally slain in Django
1.7.&lt;/p&gt;
&lt;p&gt;Judging by the releases notes, the results are underwhelming. Worse,
they come with an annoying list of backwards-incompatibilites. What was
that all about?&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Tuesday</title><link href="https://pyvideo.org/djangocon-europe-2014/lightning-talks-tuesday.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/lightning-talks-tuesday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2014 - île des Embiez - France&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Team up Django and Web mapping</title><link href="https://pyvideo.org/djangocon-europe-2014/team-up-django-and-web-mapping.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Mathieu Leplatre</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/team-up-django-and-web-mapping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Team up Django and Web mapping&lt;/p&gt;
&lt;p&gt;A few steps from the Django universe towards the world of cartography!&lt;/p&gt;
&lt;p&gt;During this presentation, I will present the basic notions of
geographical data, throw light on the dedicated components available in
Django, and introduce a couple of frontend tools for Web mapping.&lt;/p&gt;
&lt;p&gt;If you wonder how to build maps with Django, how to get rid of Google
Inc., or how to draw geometries in Django forms, this talk will take you
to the next level!&lt;/p&gt;
</summary></entry><entry><title>The future of PostgreSQL in Django</title><link href="https://pyvideo.org/djangocon-europe-2014/the-future-of-postgresql-in-django.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Marc Tamlyn</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/the-future-of-postgresql-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Postgres is awesome, and has loads of lovely features which some other
databases do not. We're going to make the ORM better for them.&lt;/p&gt;
</summary></entry><entry><title>Visibility for web developers</title><link href="https://pyvideo.org/djangocon-europe-2014/visibility-for-web-developers.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Bruno Renié</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/visibility-for-web-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Understanding how a site behaves outside of the developer's machine is
extremely important. Gathering metrics and events in a production system
lead to a better knowledge of pain points and eases troubleshooting a
lot when issues arise. This talk will explain how to setup a rock-solid
visibility stack for your apps, how to feed data into it and how to
extract meaningful information from that data.&lt;/p&gt;
&lt;p&gt;We will start with the basics of exception handling and continue with
the meat of this talk consisting in two parts:&lt;/p&gt;
&lt;p&gt;1 - Events (i.e., mostly logging calls)&lt;/p&gt;
&lt;p&gt;An introduction to logging in large production deployments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;centralized logging with logstash and elasticsearch&lt;/li&gt;
&lt;li&gt;the case for structured logging&lt;/li&gt;
&lt;li&gt;rich dashboards with Kibana&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2 - Metrics&lt;/p&gt;
&lt;p&gt;An opinionated take on monitoring:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Riemann, the universal metrics hub&lt;/li&gt;
&lt;li&gt;simple thresholds and alerts&lt;/li&gt;
&lt;li&gt;persisting metrics data to Graphite&lt;/li&gt;
&lt;li&gt;Riemann and Graphite dashboards&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Web components in Django</title><link href="https://pyvideo.org/djangocon-europe-2014/web-components-in-django.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Xavier Dutreilh</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/web-components-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is by far one of the best frameworks to build web applications.
However, it suffers from the lack of efficient tools to create good
front- ends. So, we often end up writing a lot of ad-hoc codes without
any methodology, and using a ton of ready-to-use libraries. Alas, this
way of designing front-ends is a terrible idea and we need to engineer
these things properly.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce you to the core concepts of web
components and their suitability in modern web applications. Then, I
will show you the methodology to build them and the tools that you need
to use. Finally, I will describe you the process to integrate them into
a Django project.&lt;/p&gt;
</summary></entry></feed>