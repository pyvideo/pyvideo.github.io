<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Pablo Galindo Salgado</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 May 2025 00:00:00 +0000</lastBuildDate><item><title>Agujeros negros y optimización de código en python</title><link>https://pyvideo.org/pycon-es-2015/agujeros-negros-y-optimizacion-de-codigo-en-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla atenderemos a la construcción de un raytracer relativista en Python. Nuestro objetivo será conseguir imágenes similares a las observadas en la película Interestellar, mediante la creación de imágenes sintéticas en un entorno de gravedad extrema, como es un agujero negro. Utilizando esto como excusa, analizaremos distintos enfoques para optimizar nuestro código al máximo y conseguir programas eficientes y profesionales a la altura de cualquier otro lenguaje de programación.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:/pycon-es-2015/agujeros-negros-y-optimizacion-de-codigo-en-python.html</guid><category>PyCon ES 2015</category><category>Track Científico</category></item><item><title>Metaclases: exactamente qué y (sobre todo) por qué</title><link>https://pyvideo.org/pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de estar charla es abordar un problema que parece ser desafortunadamente común entre el material disponible sobre las metaclases: por más que nos lo expliquen nos sigue sin quedar claro qué son las metaclases… o lo olvidamos a los diez minutos. Los ejemplos que se usan para ilustrar esa cosa tan arcana son casi inevitablemente crípticos, solucionando de forma compleja problemas demasiado rebuscados y que no nos hemos encontrado jamás en nuestro día a día. ¿Tienen realmente alguna utilidad práctica, o son sólo una excusa usada por ponentes para parecer r/iamverysmart? ¿Por qué deberían importarme a mí, con mi nivel medio de Python?&lt;/p&gt;
&lt;p&gt;Lo que vamos a hacer en esta charla es empezar describiendo un problema: queremos implementar el mismo comportamiento (por ejemplo, logging) en todos los métodos de mi clase. Para ello tenemos varias opciones, en creciente orden de complejidad: (a) copiar y pegar la misma línea de código en todos los métodos, (b) usar un decorador en cada método y (c) usar un decorador de clase. Pero ninguna solución es ideal, y la falta de elegancia provoca lamentos y lágrimas. Es ante un problema así cuando las metaclases tienen una función, y agradeceremos que se encuentren en nuestro repertorio de habilidades de Python.&lt;/p&gt;
&lt;p&gt;Entendiendo por qué nos hacen falta, procedereremos a explicar cómo crear una: primero repasando brevemente la función de __new__() e __init__() para clases normales, y a continuación mostrando cómo hacer lo mismo con las metaclases. Ilustraremos esto con varios ejemplos, usando metaclases para añadir funcionalidad de auto-logging o compilación just-in-time, como hace Numba, a nuestro código. Por último, y a modo de curiosidad, continuaremos hacia mayores niveles de abstracción, aprendiendo qué son los hooks de metaclases y para qué son útiles los ficheros .pth.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 23 Sep 2017 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-23:/pycon-es-2017/metaclases-exactamente-que-y-sobre-todo-por-que.html</guid><category>PyCon ES 2017</category><category>metaclass</category></item><item><title>Parallel and non parallel stuff</title><link>https://pyvideo.org/pycon-es-2017/parallel-and-non-parallel-stuff.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¡Oh no: otro tutorial de programación paralela y asíncrona en Python! ¿Cúando dejarán de insistir en el mismo asunto una y otra vez? Si alguna vez te has preguntado esto, este NO es tu taller. En cambio, si quieres volver a oir lo mismo de siempre acerca de hilos, procesos, el GIL, asyncio y demás amigos...¡Este es el taller de tus sueños! En este tutorial haremos un viaje através de todos estos conceptos desde la base, entendiendo en detalle los conceptos, los problemas y las soluciones.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Fri, 22 Sep 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-22:/pycon-es-2017/parallel-and-non-parallel-stuff.html</guid><category>PyCon ES 2017</category><category>workshop</category></item><item><title>¡Oh vosotros los que entráis, abandonad toda esperanza!</title><link>https://pyvideo.org/pycon-es-2018/oh-vosotros-los-que-entrais-abandonad-toda-esperanza.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Como programadores de Python, estamos acostumbrados a usar nuestro
lenguaje favorito continuamente pero alguna vez que otra pasa por
nuestra cabeza la duda de cómo funciona todo esto. ¿Cómo está
implementado un lenguaje de programación? ¿Cómo sabe Python si lo que
escribo es correcto o no? ¿Cómo se transforma y ejecuta el código que
escribimos?&lt;/p&gt;
&lt;p&gt;El objetivo de esta charla es aprender todo lo posible acerca de
sintaxis, gramática, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;árboles sintácticos abstractos&lt;/a&gt;, como un lenguaje
como Python funciona y cómo &lt;a class="reference external" href="https://en.wikipedia.org/wiki/CPython"&gt;CPython&lt;/a&gt; (la implementación por defecto
del intérprete) en particular está implementado. Para que la sesión no
sea simplemente una serie de diatribas teóricas, utilizaremos la excusa
de modificar, retorcer y extender la gramática de Python como hilo
conductor para entender cómo todas las piezas encajan y para aprender
cómo funcionan todas las técnicas avanzadas de análisis y modificación
de código. Para ello empezaremos hablando de cómo modificar código de
Python modificando su árbol sintáctico abstracto y veremos algunos
ejemplos de librerías (pytest, 2to3…) que utilizan esta técnica. Después
veremos como extender la gramática de Python “informalmente” utilizando
un &lt;a class="reference external" href="https://docs.python.org/3/library/codecs.html"&gt;códec&lt;/a&gt; personalizado y qué aplicaciones podría tener esto.
Finalmente hablaremos de cómo modificar realmente la gramática de Python
creando nuestro propio intérprete modificado en caso de que algún día
queramos implementar nuestro propio lenguage o modificar el propio
Python.&lt;/p&gt;
&lt;p&gt;Tras terminar la charla (¡para aquellos que sobrevivan a los nueve
circulos!) ganaremos conocimiento de como funciona Python y, por
extensión, otros lenguajes de programación además de tener un montón de
malas ideas inmantenibles en mente para la próxima vez que queramos
asustar a nuestros compañeros programadores.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:/pycon-es-2018/oh-vosotros-los-que-entrais-abandonad-toda-esperanza.html</guid><category>PyCon ES 2018</category></item><item><title>Time to take out the rubbish: garbage collector</title><link>https://pyvideo.org/pycon-us-2019/time-to-take-out-the-rubbish-garbage-collector.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the reasons why programming in Python is very straightforward and
simple is that we do not have to worry about the lifetime of our
objects. That is, once it ceases to be necessary, a variable disappears
from the memory &amp;quot;magically&amp;quot;. The fact that this happens automatically
can erroneously lead us to believe that it is not required to worry
about what happens behind the scenes.&lt;/p&gt;
&lt;p&gt;Nothing is further from reality: knowing how Python manages memory is
fundamental in specific scenarios, and not knowing what is happening can
have consequences as significant as unpleasant. For example, if our
programs manage a large amount of data at the same time or launch
multiple processes in parallel, this ceases to be a theoretical issue
and becomes something that we, logical minds, also care.&lt;/p&gt;
&lt;p&gt;Although these concepts tend to be considered advanced and difficult to
understand, we will see that this is not the case. This topic is not a
purely theoretical matter nor is it difficult to find its practical
applications. In this talk, we will explain why it is something that
should matter to us, and we will talk about how to apply the knowledge
we have gained to specific problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 04 May 2019 13:40:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:/pycon-us-2019/time-to-take-out-the-rubbish-garbage-collector.html</guid><category>PyCon US 2019</category><category>talk</category></item><item><title>Making Python better one error message at a time</title><link>https://pyvideo.org/pycon-us-2022/making-python-better-one-error-message-at-a-time.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10 has been recently released and among many exciting new features, one of the biggest improvements is the inclusion of a whole new set of changes focused on improving the error messages across the interpreter and the general user experience when dealing with error messages. The new error messages have been one of the most welcomed features from very different sets of users ranging from Python teachers and educators, first-time learners, industry professionals and data scientists.&lt;/p&gt;
&lt;p&gt;In this talk, we will cover:&lt;/p&gt;
&lt;p&gt;What are the new improvements featured in Python 3.10.
Exciting new changes and improvements that will feature in Python 3.11.
How these improvements are useful to different sets of users from people learning Python to experienced programmers.
How the new PEG parser has unlocked adding new custom syntax errors.
How these improvements were implemented and what challenges the CPython core team faced to get them working reliably.
How users can contribute to adding new error messages: what is the workflow, how the errors are reviewed by the core team and where to find resources and help.
No matter who you are and what you do with Python, there is an improvement that will probably make you smile.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/making-python-better-one-error-message-at-a-time.html</guid><category>PyCon US 2022</category></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2022/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PYTHON STEERING COUNCIL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pablo Galindo Salgado&lt;/li&gt;
&lt;li&gt;Petr Viktorin *&lt;/li&gt;
&lt;li&gt;Thomas Wouters&lt;/li&gt;
&lt;li&gt;Gregory P. Smith&lt;/li&gt;
&lt;li&gt;Brett Cannon *&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This keynote will update the community on current and future initiatives. Additionally, the Steering Council will address community questions collected prior to the conference.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-steering-council-panel.html</guid><category>PyCon US 2022</category><category>Keynote</category></item><item><title>Typing Summit</title><link>https://pyvideo.org/pycon-us-2022/typing-summit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Schedule of presentations:&lt;/p&gt;
&lt;p&gt;0:00 - “New typing features in Python 3.10 and 3.11”, David Foster&lt;/p&gt;
&lt;p&gt;17:51 - “Typing of Tensor Shapes and Type Arithmetic”, Alfonso Castaño&lt;/p&gt;
&lt;p&gt;39:15 - “Too small for a PEP: minor new typing features in Python 3.11”, Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;1:00:43 - Extending PEP 647: User-Defined Type Guards”, Rebecca Chen&lt;/p&gt;
&lt;p&gt;1:19:07 - “The future of TypedDict&amp;quot; and &amp;quot;Runtime uses for type annotations: A survey of tools”, David Foster&lt;/p&gt;
&lt;p&gt;1:50:30 - “Runtime Annotations: PEP 563 &amp;amp; 649 Overview”, Carl Meyer&lt;/p&gt;
&lt;p&gt;2:21:05 - “Beyond Subtyping”, Kevin Millikin&lt;/p&gt;
&lt;p&gt;2:50:44 - “Panel: Typing-sig and Python Core Dev”, Guido van Rossum, Pablo Galindo Salgado, Thomas Wouters, Jelle Zijlstra, Pradeep Kumar Srinivasan, Matthew Rahtz&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Foster</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/typing-summit.html</guid><category>PyCon US 2022</category></item><item><title>How memory profilers work</title><link>https://pyvideo.org/pycon-us-2023/how-memory-profilers-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;These days, it is very easy for applications to run out of memory due to
the vast amounts of data they need to process. While Python makes it
very easy to get something up and running, the highly dynamic nature of
the language abstracts memory management away from us and makes it very
difficult to understand what is going on when we run out of memory or
when we have memory leaks. This is where memory profilers come into
play.&lt;/p&gt;
&lt;p&gt;Memory profilers are tools that allow us to understand how our
applications are using memory. Not only can they help us diagnose why
our programs are using so much memory, but also they can also help us
optimize our code to be faster by using smarter allocation patterns.&lt;/p&gt;
&lt;p&gt;Being able to understand how to use memory profilers effectively is an
essential skill for any Python developer, especially those working on
programs that involve the transformation of large amounts of data,
large-scale applications, or long-running processes.&lt;/p&gt;
&lt;p&gt;This talk will cover the basics of memory profilers, how they work, and
how to use them effectively. We will cover the different types of memory
profilers, the different kinds of allocations a Python program can
perform, and how to use memory profilers effectively to understand what
is going on in our programs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-memory-profilers-work.html</guid><category>PyCon US 2023</category></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2023/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Steering Council Panel&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 22 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-22:/pycon-us-2023/python-steering-council-panel.html</guid><category>PyCon US 2023</category></item><item><title>Python &amp; Bloomberg: An Open Source Duo (Sponsor: Bloomberg)</title><link>https://pyvideo.org/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join this talk where we will briefly introduce Bloomberg and have some
of our engineers discuss their engagement in the Python Open Source
ecosystem. We will also present some exciting troubleshooting tools that
are widely used at Bloomberg that we are publishing as open source. You
will leave this talk having learned about the technical details and new
features related to these open source tools, which you might use daily
in the future!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pradyun Gedam</dc:creator><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-20:/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html</guid><category>PyCon US 2023</category></item><item><title>Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2024/steering-council-panel.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Warsaw</dc:creator><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-19:/pycon-us-2024/steering-council-panel.html</guid><category>PyCon US 2024</category></item><item><title>Profiling at the speed of light</title><link>https://pyvideo.org/pycon-us-2024/profiling-at-the-speed-of-light.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know that Python 3.12 will include one of the world's smallest
just-in-time (JIT) compilers? Also, you will be surprised to learn it is
not what you probably think it is.&lt;/p&gt;
&lt;p&gt;Python 3.12 will include support for the Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler. The
Linux &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler is a very powerful tool that allows you to
profile and obtain information about the performance of your
application. &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; also has a very vibrant ecosystem of tools that
help with the analysis of the data that it produces.&lt;/p&gt;
&lt;p&gt;In this talk, we will talk about how this exciting feature was
implemented, how the support provided by the &lt;tt class="docutils literal"&gt;perf&lt;/tt&gt; profiler differs
from other performance-oriented profilers for Python, and how it can be
used effectively, including how to activate it dynamically to enable
production profiling. We will also cover some of the requirements that
are needed to obtain the best results, as well as some of the
limitations of the implementation and how those can affect your metrics.&lt;/p&gt;
&lt;p&gt;Being able to understand where our Python applications are expending
their time is crucial to being able to improve the performance
characteristics of our applications. Several tools already exist to help
with this task, but they all have their own limitations, especially when
native code written in C, C++, Rust, etc. is involved. Being able to
gather and cross-correlate performance information with other
performance-related markers, such as branch mispredictions, cache
misses, context switches, and other events, can be key in understanding
some of the most challenging profiling puzzles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-17:/pycon-us-2024/profiling-at-the-speed-of-light.html</guid><category>PyCon US 2024</category></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2025/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Steering Council is a 5-person elected committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;Presented by: Barry Warsaw, Donghee Na, Gregory P Smith, Pablo Galindo Salgado, (Steering Council member not present: Emily Morehouse)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Warsaw</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/python-steering-council-panel.html</guid><category>PyCon US 2025</category></item><item><title>A new safe external debugger interface for CPython</title><link>https://pyvideo.org/pycon-us-2025/a-new-safe-external-debugger-interface-for-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to debug a Python application in production without stopping it? While tools like GDB make this straightforward for C/C++, Python developers face unique challenges when attaching debuggers to live processes. This talk introduces PEP 768, a new proposal for Python 3.14 that adds a safe, zero-overhead debugging interface to CPython.&lt;/p&gt;
&lt;p&gt;We'll explore how the current landscape forces debugging tools to use unsafe methods that can crash interpreters and corrupt memory. Then, we'll detail how PEP 768 solves these problems by introducing a cooperative debugging protocol that works with the interpreter rather than against it.&lt;/p&gt;
&lt;p&gt;You'll learn why attaching debuggers to Python processes is uniquely challenging, how PEP 768 enables safe debugging through interpreter cooperation, the technical details of the zero-overhead implementation, real-world applications, including live process attachment for pdb and all about the security considerations and safeguards.&lt;/p&gt;
&lt;p&gt;This talk will be particularly valuable for tool developers, system administrators, and anyone interested in Python internals or debugging techniques. You'll walk away understanding the challenges of live process debugging and how PEP 768 elegantly solves them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/a-new-safe-external-debugger-interface-for-cpython.html</guid><category>PyCon US 2025</category></item><item><title>Zoom, Enhance: Asyncio's New Introspection Powers</title><link>https://pyvideo.org/pycon-us-2025/zoom-enhance-asyncios-new-introspection-powers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;asyncio in Python 3.14 introduces a new powerful feature: introspecting a running asyncio program from another OS process. This changes everything—now you can debug and profile your asyncio code in production with no performance penalty. Join us for a fun ride as we show how this magic works under the hood and how you can use it. Learn about technical design decisions, performance considerations, security implications, and trade-offs made. Along the way, you’ll gain both beautiful and horrible insights into how asyncio and operating systems interact, and we’ll wrap up with a flawless live demo!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/zoom-enhance-asyncios-new-introspection-powers.html</guid><category>PyCon US 2025</category></item></channel></rss>