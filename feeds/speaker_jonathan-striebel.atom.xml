<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jonathan Striebel</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-striebel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-08-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>From Implementation to Ecosystem: The Journey of Zarr</title><link href="https://pyvideo.org/euroscipy-2023/from-implementation-to-ecosystem-the-journey-of-zarr.html" rel="alternate"></link><published>2023-08-14T00:00:00+00:00</published><updated>2023-08-14T00:00:00+00:00</updated><author><name>Jonathan Striebel</name></author><id>tag:pyvideo.org,2023-08-14:/euroscipy-2023/from-implementation-to-ecosystem-the-journey-of-zarr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zarr is an API and cloud-optimized data storage format for large, N-dimensional, typed arrays, based on an open-source technical specification. In the last 4 years it grew from a Python implementation to a large ecosystem. In this talk, we want to share how this transformation happened and our lessons …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zarr is an API and cloud-optimized data storage format for large, N-dimensional, typed arrays, based on an open-source technical specification. In the last 4 years it grew from a Python implementation to a large ecosystem. In this talk, we want to share how this transformation happened and our lessons learned from this journey. Today, Zarr is driven by an active community, defined by an extensible specification, has implementations in C++, C, Java, Javascript, Julia, and Python, and is used across domains such as Geospatial, Bio-imaging, Genomics and other Data Science domains.&lt;/p&gt;
</content><category term="EuroSciPy 2023"></category></entry><entry><title>5 Steps to Speed Up Your Data-Analysis on a Single Core</title><link href="https://pyvideo.org/pycon-de-2022/5-steps-to-speed-up-your-data-analysis-on-a-single-core.html" rel="alternate"></link><published>2022-05-13T00:00:00+00:00</published><updated>2022-05-13T00:00:00+00:00</updated><author><name>Jonathan Striebel</name></author><id>tag:pyvideo.org,2022-05-13:/pycon-de-2022/5-steps-to-speed-up-your-data-analysis-on-a-single-core.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker:: Jonathan Striebel&lt;/p&gt;
&lt;p&gt;Track: PyData: PyData &amp;amp; Scientific Libraries Stack
Your data analysis pipeline works.
Could it be faster? Probably.
Do you need to parallelize? Not yet.&lt;/p&gt;
&lt;p&gt;We'll go through optimization steps that boost the performance of your data analysis pipeline on a single core, reducing time &amp;amp; costs.
This walkthrough …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker:: Jonathan Striebel&lt;/p&gt;
&lt;p&gt;Track: PyData: PyData &amp;amp; Scientific Libraries Stack
Your data analysis pipeline works.
Could it be faster? Probably.
Do you need to parallelize? Not yet.&lt;/p&gt;
&lt;p&gt;We'll go through optimization steps that boost the performance of your data analysis pipeline on a single core, reducing time &amp;amp; costs.
This walkthrough shows tools and strategies to identify and mitigate bottlenecks,
and demonstrate them in an example. The 5 steps cover profiling, memory optimizations, and various speedups such as jit-ing with numba.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2022 conference, April 11-13 2022.
&lt;a class="reference external" href="https://2022.pycon.de"&gt;https://2022.pycon.de&lt;/a&gt;
More details at the conference page: &lt;a class="reference external" href="https://2022.pycon.de/program/VYS8XY"&gt;https://2022.pycon.de/program/VYS8XY&lt;/a&gt;
Twitter: &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter: &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon DE 2022"></category><category term="PyCon"></category><category term="PyConDE"></category><category term="pyconde2022"></category><category term="pydata"></category><category term="PyDataBerlin"></category><category term="pydataberlin2022"></category></entry><entry><title>Using Declarative Configs for Maintainable Reproducible Code</title><link href="https://pyvideo.org/pycon-us-2021/using-declarative-configs-for-maintainable-reproducible-code.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Jonathan Striebel</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/using-declarative-configs-for-maintainable-reproducible-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wondering how to keep your application config from getting outdated? Looking for a way to future-proof it in a backwards-compatible manner, keeping previous versions reproducible? Join this talk, we’ll share how declarative configs can be leveraged to make your code maintainable and reproducible at the same time.&lt;/p&gt;
&lt;p&gt;Therefore …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wondering how to keep your application config from getting outdated? Looking for a way to future-proof it in a backwards-compatible manner, keeping previous versions reproducible? Join this talk, we’ll share how declarative configs can be leveraged to make your code maintainable and reproducible at the same time.&lt;/p&gt;
&lt;p&gt;Therefore, an overview across the application config landscape is given – from inputs as cli-args, env-vars, and config-files, to their representations in code, covering serialization &amp;amp; deserialization, type-safety with config-schemas and evolutions. We’ll recommend cherries to pick for a maintainable and expressive declarative config system.&lt;/p&gt;
&lt;p&gt;All code examples are available at
&lt;a class="reference external" href="https://github.com/jstriebel/declarative-configs"&gt;https://github.com/jstriebel/declarative-configs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;00:18 &lt;em&gt;Introduction &amp;amp; Problem Domain&lt;/em&gt;
&lt;a class="reference external" href="https://scalableminds.com"&gt;https://scalableminds.com&lt;/a&gt;
&lt;a class="reference external" href="https://webknossos.org"&gt;https://webknossos.org&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/jostriebel"&gt;https://twitter.com/jostriebel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;03:02 &lt;em&gt;Goals: Maintainability &amp;amp; Reproducability&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Declarative Configurations and their Pythonic Representations&lt;/em&gt;
04:16 Toy Experiment
05:07 Declarative Configuration Exctraction
06:08 Input Formats, Representations &amp;amp; Deserialization
&lt;a class="reference external" href="https://typer.tiangolo.com"&gt;https://typer.tiangolo.com&lt;/a&gt;
&lt;a class="reference external" href="https://www.attrs.org"&gt;https://www.attrs.org&lt;/a&gt;
&lt;a class="reference external" href="https://cattrs.readthedocs.io"&gt;https://cattrs.readthedocs.io&lt;/a&gt;
08:49 Landscape Overview
Blog Post comparing attrs, dataclasses &amp;amp; pydantic:
&lt;a class="reference external" href="https://stefan.sofa-rockers.org/2020/05/29/attrs-dataclasses-pydantic"&gt;https://stefan.sofa-rockers.org/2020/05/29/attrs-dataclasses-pydantic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Code Examples&lt;/em&gt;
10:10 Toy Example
11:08 Split Configuration
13:46 Type Checking
&lt;a class="reference external" href="https://mypy.readthedocs.io/"&gt;https://mypy.readthedocs.io/&lt;/a&gt;
&lt;a class="reference external" href="https://nbqa.readthedocs.io"&gt;https://nbqa.readthedocs.io&lt;/a&gt;
15:15 Complex Example with Nested Configurations
18:45 Evolution of Old Configurations&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Recap &amp;amp; Summary&lt;/em&gt;
20:15 Schema Versions &amp;amp; Evolutions
21:04 Experiment Tracking
21:34 Summary&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/jstriebel/declarative-configs-for-maintainable-reproducible-code"&gt;https://speakerdeck.com/jstriebel/declarative-configs-for-maintainable-reproducible-code&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry></feed>