<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 14 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Serverless Python</title><link>https://pyvideo.org/pyparis-2018/serverless-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Bright</dc:creator><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-14:pyparis-2018/serverless-python.html</guid></item><item><title>Design Patterns pour Python Micro-services</title><link>https://pyvideo.org/pycon-fr-2018/design-patterns-pour-python-micro-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cette présentation introduira les notions de &amp;quot;micro-service design
pattern&amp;quot; et comment ils peuvent etre exploites pour déployer les
services a base de Python (ou autre) sur Kubernetes ou Docker.&lt;/p&gt;
&lt;p&gt;Nous regarderons comment exposer et scaler le service, puis le faire
évoluer en nouvelle version via les &amp;quot;rolling upgrades&amp;quot; prenant en compte
des détails pratiques tel que le besoin d'haute disponibilite, capacity,
ingress controllers, monitoring et load balancing.&lt;/p&gt;
&lt;p&gt;Nous verrons comment les &amp;quot;health checks&amp;quot; permettent de valider l'état de
santé d'une nouvelle version d'un service pour pouvoir faire un
&amp;quot;rollback&amp;quot; en cas de besoin.&lt;/p&gt;
&lt;p&gt;Tous ces concepts seront démontrés visuellement avec un deploiement de
bout en bout sur un cluster Kubernetes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Bright</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pycon-fr-2018/design-patterns-pour-python-micro-services.html</guid></item><item><title>Serverless Python dans le cloud ou on-premise</title><link>https://pyvideo.org/pycon-fr-2018/serverless-python-dans-le-cloud-ou-on-premise.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depuis 20 ans l'informatique a été revolutionnée par des nouvelles
technologies de virtualisation, cloud, conteneurs et maintenant
serverless. Ces technologies aident à optimiser l'utilisation des
servers, de faciliter le déploiement, ainsi que d'augmenter l'agilité et
de faciliter l’innovation.&lt;/p&gt;
&lt;p&gt;Serverless existe depuis une décennie mais a été propulsé sur le devant
de la scène avec le lancement d’AWS Lambda en Nov 2014 - plutôt beta a
l'époque. Aujourd'hui il existe un choix de plateformes et d'outils
impressionants de services en ligne, d'outils Open Source pour faciliter
leur usage et des plateformes entièrement Open Source.&lt;/p&gt;
&lt;p&gt;Nous allons commencer par regarder le déploiement d'un service Python
sur AWS Lambda - car même si propriétaire il reste le leader
aujourd'hui. Puis on regardera des outils open source tel que Chalice et
Zappa spécifiquement pour déployer des fonctions Python sur Lambda et
l'outil Serverless(.com) qui facilite le déploiement de différents
langages vers differentes plateformes Serverless.&lt;/p&gt;
&lt;p&gt;Mais il existe aussi des plateformes entièrement Open Source telles que
OpenFaaS, OpenWhisk, Nuclio, Kubeless, Fission, Fn… vous avez l'idée...
il y a du choix !&lt;/p&gt;
&lt;p&gt;Nous regarderons comment déployer des fonctions Python sur OpenFaaS et
OpenWhisk.&lt;/p&gt;
&lt;p&gt;Bien sûr avec plein de démos a l'appui !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Bright</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pycon-fr-2018/serverless-python-dans-le-cloud-ou-on-premise.html</guid></item></channel></rss>