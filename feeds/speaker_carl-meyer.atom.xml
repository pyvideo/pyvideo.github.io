<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_carl-meyer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>Type-checked Python in the real world</title><link href="https://pyvideo.org/pycon-us-2018/type-checked-python-in-the-real-world.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/type-checked-python-in-the-real-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've heard about Python type annotations, but wondered if they're useful in the real world? Worried you've got too much code and can't afford to annotate it?  Type-checked Python is here, it's for real, and it can help you catch bugs and make your code easier to understand. Come learn from our experience gradually typing a million-LOC production Python application!&lt;/p&gt;
&lt;p&gt;Type checking solves real world problems in production Python systems. We'll cover the benefits, how type checking in Python works, how to introduce it gradually and sustainably in a production Python application, and how to measure success and avoid common pitfalls. We'll even demonstrate how modern Python typechecking goes hand-in-hand with duck-typing! Join us for a deep dive into type-checked Python in the real world.&lt;/p&gt;
</summary></entry><entry><title>Carl Meyer about Django @ Instagram at Django: Under The Hood 2016</title><link href="https://pyvideo.org/django-under-the-hood-2016/carl-meyer-about-django-instagram-at-django-under-the-hood-2016.html" rel="alternate"></link><published>2016-11-03T00:00:00+00:00</published><updated>2016-11-03T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2016-11-03:django-under-the-hood-2016/carl-meyer-about-django-instagram-at-django-under-the-hood-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/carljm/instagram-under-the-hood"&gt;https://speakerdeck.com/carljm/instagram-under-the-hood&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood: &lt;a class="reference external" href="http://djangounderthehood.com/"&gt;http://djangounderthehood.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood is an annual Django conference for experienced Django developers. Come and learn about the internals of Django, and help to shape its future.&lt;/p&gt;
</summary></entry><entry><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link href="https://pyvideo.org/chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html" rel="alternate"></link><published>2011-02-10T00:00:00+00:00</published><updated>2011-02-10T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-02-10:chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;1 &lt;a class="reference external" href="http://us.pycon.org/2011/schedule/sessions/198/"&gt;http://us.pycon.org/2011/schedule/sessions/198/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a class="reference external" href="http://pip.openplans.org/"&gt;http://pip.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a class="reference external" href="http://virtualenv.openplans.org/"&gt;http://virtualenv.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chipy"></category><category term="ianbicking"></category><category term="pip"></category><category term="virtualenv"></category></entry><entry><title>Taming dependencies with pip</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taming dependencies with pip&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Dependency management sucks. Pip provides some options for making it
suck a bit less, but not all of them are immediately obvious. This talk
will cover a number of strategies for making your deployments faster and
more reliable, and demonstrate how to implement them in practice.&lt;/p&gt;
</summary><category term="dependencies"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="pip"></category></entry><entry><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reverse-engineering Ian Bicking's brain: inside pip and virtualenv&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Pip and virtualenv are widely used in the Python world, but for the size
of their user base don't receive many code contributions, and many users
have misconceptions about how they actually work.&lt;/p&gt;
&lt;p&gt;This talk will cover a bit of advanced use of pip and virtualenv, but
mostly we'll dive into the source code, mapping it out with a high-level
view and diving into the guts of particularly interesting bits. By the
end of the talk, you'll have a good idea exactly how pip and virtualenv
do their magic, and where to go looking in the source for particular
behaviors or bug fixes. We'll walk through the creation of a virtualenv
step-by-step, and trace a typical &amp;quot;pip install -r requirements.txt&amp;quot; and
&amp;quot;pip uninstall&amp;quot; through the code paths they follow.&lt;/p&gt;
&lt;p&gt;I'll know the talk was a success when I see the pull requests!&lt;/p&gt;
</summary><category term="pip"></category><category term="pycon"></category><category term="pycon2011"></category><category term="virtualenv"></category></entry><entry><title>Testing and Django</title><link href="https://pyvideo.org/pycon-us-2012/testing-and-django.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/testing-and-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A deep dive into writing tests with Django, covering Django's custom
test- suite-runner and the testing utilities in Django, what all they
actually do, how you should and shouldn't use them (and some you
shouldn't use at all!). Also, guidelines for writing good tests (with or
without Django), and my least favorite things about testing in Django
(and how I'd like to fix them).&lt;/p&gt;
</summary></entry><entry><title>Getting started with automated testing</title><link href="https://pyvideo.org/pycon-us-2013/getting-started-with-automated-testing.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/getting-started-with-automated-testing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The hardest part of testing is getting the ball rolling. Once you've
picked your tools and started writing tests, the added confidence you
have in making changes to your code, and the time you save in repetitive
manual testing, can quickly become addictive! If you never got over that
initial speedbump, or you've tried testing but it hasn't yet clicked,
this talk is for you.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Set your code free: releasing and maintaining an open-source Python project</title><link href="https://pyvideo.org/pycon-us-2014/set-your-code-free-releasing-and-maintaining-an.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/set-your-code-free-releasing-and-maintaining-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Got some code that you've written that would be useful to others, but
actually releasing it feels like too much new stuff to figure out?
Releasing software does take some work, but this talk will take you
step-by-step through the process with specific recommendations and
tools. We'll cover preparing your code for release, packaging it,
releasing it, and maintaining it over time.&lt;/p&gt;
</summary></entry></feed>