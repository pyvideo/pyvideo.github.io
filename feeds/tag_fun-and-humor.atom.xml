<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_fun-and-humor.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Gamifying the study of algorithms</title><link href="https://pyvideo.org/europython-2019/gamifying-the-study-of-algorithms.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Iulia Avram</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/gamifying-the-study-of-algorithms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you remember when you used to learn algorithms? It was probably
either back when you were studying for your degree, or when you were
brushing up for a technical interview. If you're like most of the
developers I know, solving algorithms probably went from being a fun
past-time, to a bothersome necessity, to a thing of the past. Our life
has been greatly improved by our tools and there's little need to know
all sorting methods out there, or how to search through a tree. Or maybe
we're wrong, maybe knowing these things could make a difference in how
we write code.&lt;/p&gt;
&lt;p&gt;I am going to try to dispel some of the myths surrounding the study of
algorithms and competitive programming, and argue that sharpening this
skill is something that benefits us, as software developers, outside of
passing technical tests; that knowing many algorithms makes us better
and faster problem solvers.&lt;/p&gt;
&lt;p&gt;Lastly, this talk is about resources and ways in which to gamify the
study of algorithms. Going at it the same way as for exams or interviews
makes it very bothersome very quickly. It gets easy to lose sight of the
biggest picture and to start thinking of algorithms in abstract terms,
outside their applications. All these are factors that prompt the
question: why should I carry on with it?&lt;/p&gt;
&lt;p&gt;Therefore, something needs to be changed in the way we do this.
Algorithms are fun and they don't deserve the disdain we give them.
Knowing algorithms is not only for the geniuses and innovators.&lt;/p&gt;
</summary><category term="Algorithms"></category><category term="Best Practice"></category><category term="Education"></category><category term="Fun and Humor"></category></entry><entry><title>How to train an image classifier using PyTorch</title><link href="https://pyvideo.org/europython-2019/how-to-train-an-image-classifier-using-pytorch.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Rogier van der Geer</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/how-to-train-an-image-classifier-using-pytorch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks are everywhere nowadays. But while it seems everyone is
using them, training your first neural network can be quite a hurdle to
overcome.&lt;/p&gt;
&lt;p&gt;In this talk I will take you by the hand, and following an example image
classifier I trained, I will take you through the steps of making an
image classifier in PyTorch. I will show you code snippets and explain
the more intricate parts. Also, I will tell you about my experience, and
about what mistakes to prevent. After this all you need to start
training your first classifier is a data set!&lt;/p&gt;
&lt;p&gt;Of course I will provide a link to the full codebase at the end. The
talk will focus on the practical aspect of training a neural network,
and will only touch the theoretical side very briefly. Some basic prior
knowledge of neural networks is beneficial, but not required, to follow
this talk.&lt;/p&gt;
</summary><category term="Deep Learning"></category><category term="Fun and Humor"></category><category term="Image Processing"></category><category term="Machine-Learning"></category><category term="Scientific Libraries (Numpy/Pandas/SciKit/...)"></category></entry><entry><title>Solving the web most popular code shortening competition with Python 3</title><link href="https://pyvideo.org/pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Code shortening” is the “sport” where participants strive to achieve
the shortest possible source code that solves a programming problem by
exploiting all the tricks and quirks of the language.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON problem&lt;/a&gt; on SPOJ
is one of the oldest and most popular code shortening problems on the
web with a bizarre twist, only character above ASCII value 32 are
counted for the penalty. During the talk we will take a journey into
some frightening depths of the Python language in order to write shorter
and shorter solutions to SIZECON until, exploiting a number of
mind-blowing tricks, we will reach the current record solution for
Python 3 of 31 characters.&lt;/p&gt;
&lt;p&gt;I promise I’ll show you the most obfuscated, contrived and sick python
code you have ever seen and (hopefully!) will ever see. I invite
participants to give &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON&lt;/a&gt;
a try and check their score against the &lt;a class="reference external" href="http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3"&gt;Python3
rankings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an updated version of a talk I presented during Europython 2015
and that had an unexpected success both on-site and on social media. The
talk is now centred on Python 3 shorting tricks and is has been reworked
to be much more easy to follow.&lt;/p&gt;
</summary><category term="coding-competitions"></category><category term="fun-and-humor"></category><category term="python3"></category></entry></feed>