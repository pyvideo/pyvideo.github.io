<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-caldwell.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-14T00:00:00+00:00</updated><entry><title>Going Rogue: How Code.org Created a Curriculum Development Platform Without their Engineers</title><link href="https://pyvideo.org/djangocon-us-2017/going-rogue-how-codeorg-created-a-curriculum-development-platform-without-their-engineers.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Josh Caldwell</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/going-rogue-how-codeorg-created-a-curriculum-development-platform-without-their-engineers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Going Rogue: How Code.org Created a Curriculum Development Platform Without their Engineers All by Josh Caldwell&lt;/p&gt;
&lt;p&gt;As a Middle School computer science teacher, I know enough to be dangerous, but not enough to consider myself a “real” developer. As a member of the curriculum team at Code.org (a nonprofit dedicated to providing all students with access to CS education), I knew that our combination of rendered markdown files and Google docs was far from the most effective way to write and deliver curriculum. If only we could schematize our curriculum writing, I thought, we’d be able to write more consistent lessons with better support for teachers to see which lessons are aligned to which standards, or where a given concept was first taught.&lt;/p&gt;
&lt;p&gt;When I brought this proposal to our engineering team everyone was excited about the idea, but there was no way we had the bandwidth to actually create it. Our small team of engineers are booked solid building tools for students to learn programming and for teachers to manage their classes. When it comes to the needs of our curriculum writers, we obviously need to come after the students and teachers. But wait, I know how to program. I did the “Two Scoops” tutorial. Why couldn’t I make the tool I had dreamed of?&lt;/p&gt;
&lt;p&gt;Using Django and Mezzanine as a base, I gradually built a system that allows Code.org curriculum writers to write faster, more consistent, and better supported lessons at a massive scale. Along the way, I also dealt with the very real concerns of my engineering team. How can we be sure this will scale to our 10’s of thousands of teachers? What about our millions of students? How can we be certain that this doesn’t introduce new security vulnerabilities to our site? Are you sure you know what you’re doing here?&lt;/p&gt;
&lt;p&gt;The answer to all of these problems was surprising simple, and has allowed me to address the needs of our curriculum team without taking the engineering team’s focus away from the customers that really matter - teachers and students.&lt;/p&gt;
&lt;p&gt;After many months of development, CurriculumBuilder has become an essential internal tool for curriculum writing at Code.org, and continues to find new ways to solve problems that would otherwise go unaddressed. Not bad for a Middle School CS teacher who had never before written software used by others.&lt;/p&gt;
</summary></entry></feed>