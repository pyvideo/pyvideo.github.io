<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 04 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Memoizing recursive functions: How decorators are more elegant than I imagined</title><link>https://pyvideo.org/pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Calculating the Fibonacci series is a classic example of writing a recursive
function. However, calculating even &lt;cite&gt;fib(50)&lt;/cite&gt; will tie up a modern computer
for a couple of minutes. The solution to this problem is memoization, which
decorators make particularly easy.&lt;/p&gt;
&lt;p&gt;But how does a top-level decorator access the recursive call within the
function itself?&lt;/p&gt;
&lt;p&gt;The answer is both delightfully simple and extremely insightful, exposing
how seemingly simple language design choices can have profound effects on
its usage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abid H. Mujtaba</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html</guid></item></channel></rss>