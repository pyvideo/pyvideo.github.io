<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_paradigma.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-10-30T00:00:00+00:00</updated><entry><title>Funktionale Programmierung mit Python</title><link href="https://pyvideo.org/pycon-de-2012/funktionale-programmierung-mit-python.html" rel="alternate"></link><published>2012-10-30T00:00:00+00:00</published><updated>2012-10-30T00:00:00+00:00</updated><author><name>Mike Müller</name></author><id>tag:pyvideo.org,2012-10-30:pycon-de-2012/funktionale-programmierung-mit-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In den letzten Jahren hat die funktionale Programmierung wieder mehr
Aufmerksamkeit erhalten. Das Vorurteil nur für akademische Nutzer
interessant zu sein hat sich stark abgeschwächt. Haskell, Erlang und F#
sind funktionale Programmiersprachen, die verstärkt für praktische
Zwecke zum Einsatz kommen.&lt;/p&gt;
&lt;p&gt;Python unterstütz mehrere Programmierparadigmen. Neben der prozeduralen
und objektorientierten unterstütz es auch wichtige Konzepte der
funktionalen Programmierung. Der Vortrag zeigt wie sich diese Merkmale
wie Funktionen als Objekte erster Klasse, Funktionsabschlüsse
(Closures), Funktionen ohne Seiteneffekte, Currying, verzögerte
Auswertung, Vermeidung veränderlicher Datenstrukturen und Einsatz von
Iteratoren, Generator und Comprehensions anstatt von Schleifen nutzen
lassen. Beispiele verdeutlichen die Vor- und Nachteile des funktionellem
Ansatzes für verschiedene Aufgaben.&lt;/p&gt;
&lt;p&gt;Der Aufbau eines Programms mit funktionalen Ansatz kann sich stark von
dem eines objektorientierten unterscheiden. Beispiele zeigen wie mit
Python Teile eines Programms die Vorteile der funktionalen
Programmierung nutzen können und sich schrittweise funktionale
Prinzipien in objektorientierte Programme einbeziehen lassen.&lt;/p&gt;
&lt;p&gt;Der Vortrag verdeutlicht wie das Modul itertools die verzögerte
Auswertung unterstützt. Mit den Funktionen dieses Moduls lassen sich
Algorithmen oft kurz, gut lesbar und effizient umsetzen. Auch hier ist
eine Integration in sonst nicht-funktional geschriebene Programme
einfach möglich.&lt;/p&gt;
</summary><category term="closure"></category><category term="funktional"></category><category term="generator"></category><category term="iterator"></category><category term="itertools"></category><category term="paradigma"></category><category term="verzögerte auswertung"></category></entry></feed>