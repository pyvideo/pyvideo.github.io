<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_multiprocessing.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Sharing is Caring! - how to free the CPU from message passing hell - shared memory saved the day</title><link href="https://pyvideo.org/pycon-italia-2019/sharing-is-caring-how-to-free-the-cpu-from-message-passing-hell-shared-memory-saved-the-day.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Andrei Neagu</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/sharing-is-caring-how-to-free-the-cpu-from-message-passing-hell-shared-memory-saved-the-day.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When dealing with a real time application in which you are required to
process a lot of data from multiple sources in parallel, system
resources disappear quickly. Add some CPU intensive processing and you
are set to fail.&lt;/p&gt;
&lt;p&gt;This talk will illustrate a solution to solve a CPU bound problem with a
data stream of tens of megabytes. I will talk about how easy it is to
fail and how to obtain a working solution.&lt;/p&gt;
&lt;p&gt;The following arguments will be discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;threading and its limitations&lt;/li&gt;
&lt;li&gt;multiprocessing and its limitations&lt;/li&gt;
&lt;li&gt;serialization&lt;/li&gt;
&lt;li&gt;shared memory&lt;/li&gt;
&lt;li&gt;a solution: multiprocessing + shared memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code will be provided and shown during the talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1656"&gt;https://python.it/feedback-1656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="threading"></category><category term="SharedMemory"></category><category term="#Python"></category><category term="python3"></category><category term="multiprocessing"></category></entry><entry><title>Thinking Outside the GIL with AsyncIO and Multiprocessing</title><link href="https://pyvideo.org/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>John Reese</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required.&lt;/p&gt;
</summary><category term="asyncio"></category><category term="multiprocessing"></category></entry><entry><title>Concurrent Computations on Multicore Processors</title><link href="https://pyvideo.org/pycon-singapore-2015/concurrent-computations-on-multicore-processors.html" rel="alternate"></link><published>2015-06-18T00:00:00+00:00</published><updated>2015-06-18T00:00:00+00:00</updated><author><name>Christian Zielinski</name></author><id>tag:pyvideo.org,2015-06-18:pycon-singapore-2015/concurrent-computations-on-multicore-processors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will discuss the 'multiprocessing' module, which allows parallel programming on multicore processors. We will do a comparison with the 'threading' module, then cover the core functionality and finally discuss applications and limitations.&lt;/p&gt;
</summary><category term="multiprocessing"></category></entry><entry><title>Scale like a pro</title><link href="https://pyvideo.org/python-porto/scale-like-a-pro.html" rel="alternate"></link><published>2017-12-14T00:00:00+00:00</published><updated>2017-12-14T00:00:00+00:00</updated><author><name>Roman Imankulov</name></author><id>tag:pyvideo.org,2017-12-14:python-porto/scale-like-a-pro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Task processing with multiprocessing and Celery&lt;/p&gt;
</summary><category term="celery"></category><category term="multiprocessing"></category><category term="porto"></category><category term="portugal"></category></entry><entry><title>Experiences making CPU-bound tasks run much faster</title><link href="https://pyvideo.org/europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Ian Ozsvald</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ian Ozsvald - 22 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;UPDATE - post-event I've created a &lt;a class="reference external" href="http://ianozsvald.com/2011/06/29/high-performance-python-tutorial-v0-1%20-from-my-4-hour-tutorial-at-europython-2011/"&gt;49 page PDF write-
up&lt;/a&gt;
which summarises the 4 hour tutorial&lt;/p&gt;
&lt;p&gt;As a long-time R&amp;amp;D consultant I'm often working to make slow,
experimental code run faster for tasks like physics simulation, flood
modeling and natural language processing. Python allows a smooth
progression from rough-and-ready (but slow) algorithms through to finely
tuned tasks that efficiently use as much CPU power as you can bring to
bear. Speed-ups of 10-500* can be expected for the Mandelbrot code
we'll use.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover a set of libraries that make CPU-bound tasks run
much faster. We'll begin with a look at profiling using RunSnakeRun and
line_profiler to identify our bottleneck. We'll take a look at slow
algorithms in Python and how they can run faster using numpy and
numexpr.&lt;/p&gt;
&lt;p&gt;Next we'll cover the use of multiprocessing to utilise multiple CPU
cores along with Cython or ShedSkin to easily use C code in a friendly
Python wrapper. Multiprocessing on a quad-core system can often provide
a 4* speed-up for the right tasks. Next parallelpython will let us run
our code on a network of machines.&lt;/p&gt;
&lt;p&gt;Finally we'll look at pyCUDA to utilise an NVIDIA GPU. CUDA can give the
best improvements for mathematical problems (over 100* on the right
tasks) but works on a narrower set of problems.&lt;/p&gt;
&lt;p&gt;How it'll work: The tutorial will be hands on, you'll be converting
example files from normal Python to faster variants using the tools
below. All of it is optional, you'll get the most benefit by having
everything installed. We'll work in groups and open discussion is
encouraged.&lt;/p&gt;
&lt;p&gt;NOTE - you are expected to have all these tools installed &lt;em&gt;before&lt;/em&gt; the
tutorial (if you don't, you might find it hard to follow what's going
on!).&lt;/p&gt;
&lt;p&gt;I'll be using Python 2.7.1 on a Macbook (Snow Leopard). All of these
tools run on Windows and Linux, as long as your versions are fairly
recent everything should run just fine.&lt;/p&gt;
&lt;p&gt;My versions (roughly ordered by importance):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7.1&lt;/li&gt;
&lt;li&gt;RunSnakeRun 2.0.1b6 (with wxPython 2.8.12.0 Unicode)&lt;/li&gt;
&lt;li&gt;line_profiler (1.0b2)&lt;/li&gt;
&lt;li&gt;Cython 0.14.1&lt;/li&gt;
&lt;li&gt;ShedSkin 0.7.1&lt;/li&gt;
&lt;li&gt;numpy 1.5.1&lt;/li&gt;
&lt;li&gt;numexpr 1.4.2&lt;/li&gt;
&lt;li&gt;ParallelPython 1.6.1&lt;/li&gt;
&lt;li&gt;pyCUDA HEAD from git as of 14th June 2011 (with CUDA 4.0 drivers)&lt;/li&gt;
&lt;li&gt;PyPy 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some background reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/"&gt;http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/"&gt;http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cython"></category><category term="git"></category><category term="multiprocessing"></category><category term="network"></category><category term="numpy"></category><category term="nvidia"></category><category term="profiling"></category><category term="pycuda"></category><category term="runsnakerun"></category><category term="tutorial"></category><category term="windows"></category><category term="wxpython"></category></entry><entry><title>Nebenläufige Programme mit Python</title><link href="https://pyvideo.org/pycon-de-2012/nebenlaufige-programme-mit-python.html" rel="alternate"></link><published>2012-10-30T00:00:00+00:00</published><updated>2012-10-30T00:00:00+00:00</updated><author><name>Stefan Schwarzer</name></author><id>tag:pyvideo.org,2012-10-30:pycon-de-2012/nebenlaufige-programme-mit-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In diesem Vortrag soll es um Grundlagen nebenläufiger Programme gehen,
wie sie mit den Modulen threading und multiprocessing möglich sind.&lt;/p&gt;
&lt;p&gt;Zuerst wird erklärt, in welchen Fällen Nebenläufigkeit sinnvoll ist.
Danach wird auf die grundsätzlichen Probleme nebenläufiger Programme
eingegangen, insbesondere Änderungen an gemeinsam genutzten Ressourcen
(zum Beispiel Dateien oder auch &amp;quot;nur&amp;quot; Objekte im Speicher) durch mehrere
Threads oder Prozesse. Schließlich wird gezeigt, wie man solche
Ressourcen-Zugriffe durch Locks oder Queues entschärfen kann.&lt;/p&gt;
</summary><category term="deadlock"></category><category term="gil"></category><category term="multiprocessing"></category><category term="nebenläufigkeit"></category><category term="queue"></category><category term="threading"></category></entry><entry><title>Threading is not a model (#187)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--threading-is-not-a-model---187.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Joe Gregorio</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--threading-is-not-a-model---187.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Threading is not a model&lt;/p&gt;
&lt;p&gt;Presented by Joe Gregorio&lt;/p&gt;
&lt;p&gt;We have many concurrency/multiprocessing capabilities at our finger
tips, such as threads, processes, locks, mutexes, select, epoll,
transactional memory, etc. But none of them are a model for
multiprocessing, they are only tools on which you would build an
implementation of such a model. So what are the models we can choose
from? How would they be implemented in Python? And why may the GIL
actually be a good thing?&lt;/p&gt;
</summary><category term="multiprocessing"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>