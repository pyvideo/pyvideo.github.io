<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_greg-ward.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-04-11T00:00:00+00:00</updated><entry><title>Blocked on I/O: The Pitfalls of Event-Driven Programming</title><link href="https://pyvideo.org/montreal-python/blocked-on-io-the-pitfalls-of-event-driven-programming.html" rel="alternate"></link><published>2017-04-11T00:00:00+00:00</published><updated>2017-04-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2017-04-11:montreal-python/blocked-on-io-the-pitfalls-of-event-driven-programming.html</id><summary type="html"></summary></entry><entry><title>How to Write Reusable Code</title><link href="https://pyvideo.org/montreal-python/how-to-write-reusable-code.html" rel="alternate"></link><published>2015-03-16T00:00:00+00:00</published><updated>2015-03-16T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2015-03-16:montreal-python/how-to-write-reusable-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, March 16th, 2015, by Greg Ward - Learning to write high-quality, reusable code takes years of dedicated work. Or you can take a shortcut: attend this talk and learn some of the tricks I've figured out over a couple of decades of programming.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Contact Greg: &lt;a class="reference external" href="https://twitter.com/gergdotca"&gt;https://twitter.com/gergdotca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP52: &lt;a class="reference external" href="http://sflx.ca/mp52"&gt;http://sflx.ca/mp52&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://sflx.ca/jobs"&gt;http://sflx.ca/jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As seen at PyCon 2015:
/&lt;a class="reference external" href="https://us.pycon.org/2015/schedule/presentation/338/"&gt;https://us.pycon.org/2015/schedule/presentation/338/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Unit Testing Makes Your Code Better</title><link href="https://pyvideo.org/montreal-python/unit-testing-makes-your-code-better.html" rel="alternate"></link><published>2014-03-10T00:00:00+00:00</published><updated>2014-03-10T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2014-03-10:montreal-python/unit-testing-makes-your-code-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, March 10, 2014 - Python contributor Greg Ward explains how  using automated testing in a rigorous, disciplined way will not merely help you to write more correct code, but will also make you a better programmer.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PyCon Replay: &lt;a class="reference external" href="http://youtu.be/ArLf03-RLwU"&gt;http://youtu.be/ArLf03-RLwU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Greg: &lt;a class="reference external" href="http://sflx.ca/gward"&gt;http://sflx.ca/gward&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP44: &lt;a class="reference external" href="http://sflx.ca/mp44e"&gt;http://sflx.ca/mp44e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Go for Python Hackers</title><link href="https://pyvideo.org/montreal-python/go-for-python-hackers.html" rel="alternate"></link><published>2013-09-09T00:00:00+00:00</published><updated>2013-09-09T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2013-09-09:montreal-python/go-for-python-hackers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A live presentation by Greg Ward.&lt;/p&gt;
&lt;p&gt;Read more: &lt;a class="reference external" href="http://sflx.ca/mp39"&gt;http://sflx.ca/mp39&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Version control worst practices</title><link href="https://pyvideo.org/pycon-ca-2016/version-control-worst-practices.html" rel="alternate"></link><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2016-11-12:pycon-ca-2016/version-control-worst-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays, everybody uses version control. But until you learn to
&lt;em&gt;misuse&lt;/em&gt; your version control system, you're missing out on ways to
minimize developer productivity and pessimize your workflow. I'll show
you 12 time-tested worst practices that will set you down the wrong path
from Day One.&lt;/p&gt;
&lt;div class="section" id="greg-ward-bio"&gt;
&lt;h4&gt;Greg Ward Bio&lt;/h4&gt;
&lt;p&gt;I've been using and creating open source software since before the term
&amp;quot;open source&amp;quot; was coined, and involved with the Python community since
the late nineties. I've written or contributed to several modules in the
standard library. And I've been working as a programmer for over 20
years. I don't think I've made every mistake in the book, but I've made
a lot of them, and I hope to share some of the things I have learned the
hard way and save you the trouble.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Lightning Talks - 2016-05-31 AM</title><link href="https://pyvideo.org/pycon-us-2016/lightning-talks-2016-05-31-am.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Christine Spang</name></author><id>tag:pyvideo.org,2016-06-01:pycon-us-2016/lightning-talks-2016-05-31-am.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Go for Python Hackers</title><link href="https://pyvideo.org/pycon-ca-2013/go-for-python-hackers-0.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/go-for-python-hackers-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There is a resurgence of native-compiled programming languages going on.
Some of this work is in response to Python; we're now part of The
Establishment against which newcomers are measured. I'll give an
overview of Go, a recent native-compiled language, and how it relates to
Python.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Unit Testing Makes Your Code Better</title><link href="https://pyvideo.org/pycon-us-2014/unit-testing-makes-your-code-better.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/unit-testing-makes-your-code-better.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Unit testing is like public transit: everyone agrees it's a good thing
for other people to do. It's easier to swallow when you see how unit
testing improves not only the correctness of your code, but the design
as well. I'll walk through a real-life case study where adding unit
tests turned a pretty good module into an even better one: easier to
understand, extend, and reuse.&lt;/p&gt;
</summary></entry><entry><title>How to Write Reusable Code</title><link href="https://pyvideo.org/pycon-us-2015/how-to-write-reusable-code.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-write-reusable-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning to write high-quality, reusable code takes years of dedicated
work. Or you can take a shortcut: attend this talk and learn some of the
tricks I've figured out over a couple of decades of programming.&lt;/p&gt;
</summary></entry></feed>