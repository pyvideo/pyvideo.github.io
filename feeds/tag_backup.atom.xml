<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_backup.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>The BorgBackup Project</title><link href="https://pyvideo.org/pycon-de-2017/the-borgbackup-project.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Thomas Waldmann</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/the-borgbackup-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Thomas Waldmann&lt;/strong&gt; (&amp;#64;ThomasJWaldmann)&lt;/p&gt;
&lt;p&gt;Doing Python since 2001, Linux, FOSS.&lt;/p&gt;
&lt;p&gt;Projects: MoinMoin Wiki, nsupdate.info, bepasty, BorgBackup&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BorgBackup is a modern, deduplicating backup software written in Python 3.4+, Cython and C.&lt;/p&gt;
&lt;p&gt;The talk will start with a quick presentation about the software and why you may want to use it for your backups.&lt;/p&gt;
&lt;p&gt;Then, I will show how we run the software project: Tools, Services, Best Practices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Homepage: &lt;a class="reference external" href="https://www.borgbackup.org/"&gt;https://www.borgbackup.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the software:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Feature set&lt;/li&gt;
&lt;li&gt;Code&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Safety&lt;/li&gt;
&lt;li&gt;Crypto&lt;/li&gt;
&lt;li&gt;Compression&lt;/li&gt;
&lt;li&gt;Deduplication&lt;/li&gt;
&lt;li&gt;The Fork from attic-backup project (and what happened afterwards)&lt;/li&gt;
&lt;li&gt;Now and Future&lt;/li&gt;
&lt;li&gt;How you can help&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;About the project:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Github&lt;/li&gt;
&lt;li&gt;Sphinx and ReadTheDocs&lt;/li&gt;
&lt;li&gt;Asciinema&lt;/li&gt;
&lt;li&gt;Mailing list on python.org, IRC on freenode&lt;/li&gt;
&lt;li&gt;Testing: pytest, tox, travis-ci, vagrant, pyenv&lt;/li&gt;
&lt;li&gt;&amp;quot;binary&amp;quot; Releases with PyInstaller&lt;/li&gt;
&lt;li&gt;Automatic versioning: setuptools_scm&lt;/li&gt;
&lt;li&gt;Secure releasing with gpg signature&lt;/li&gt;
&lt;li&gt;Python / Cython / C - when to use what&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="bestpractices"></category><category term="crypto"></category><category term="backup"></category><category term="c"></category><category term="cython"></category><category term="python"></category><category term="borgbackup"></category></entry><entry><title>Remote execution of Python scripts using Viri</title><link href="https://pyvideo.org/europython-2011/remote-execution-of-python-scripts-using-viri.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Marc Garcia</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/remote-execution-of-python-scripts-using-viri.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc Garcia - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Viri is a system for automatic distribution and execution of Python code
on remote machines. This is especially useful when dealing with a large
group of hosts.&lt;/p&gt;
&lt;p&gt;With Viri, Sysadmins can write their own scripts, and easily distribute
and execute them on any number of remote machines. Depending on the
number of computers to administrate, Viri can save thousands of hours,
that Sysadmins would spend transferring files, logging into remote
hosts, and waiting for the scripts to finish. Viri automates the whole
process.&lt;/p&gt;
&lt;p&gt;Viri can also be useful for remotely managing host settings. It should
work together with an application where the information about hosts
would be maintained. This information can include cron tasks, firewall
rules, backup settings,etc. After a simple Integration of this
application with your Viri infrastructure, you can change any settings
in the application, and see how it gets applied on the target host
automatically.&lt;/p&gt;
&lt;p&gt;The talk will cover next topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Viri&lt;/li&gt;
&lt;li&gt;Live demo on how to install Viri, write a Viri task, and execute it
in a remote host&lt;/li&gt;
&lt;li&gt;Security concerns using Viri&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a class="reference external" href="http://www.viriproject.com"&gt;Viri project page&lt;/a&gt;&lt;/p&gt;
</summary><category term="backup"></category><category term="logging"></category><category term="scripts"></category></entry><entry><title>Scrivere un tool parallelo e distribuito per backup multi-terabyte</title><link href="https://pyvideo.org/europython-2011/scrivere-un-tool-parallelo-e-distribuito-per-back.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Marco Nenciarini</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/scrivere-un-tool-parallelo-e-distribuito-per-back.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marco Nenciarini - 23 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una trattazione sull'uso di Python per implementare un tool per il
backup giornaliero di un data warehouse di oltre 50 terabyte, basato
sulla tecnologia Greenplum Database.&lt;/p&gt;
&lt;p&gt;Questo intervento racconta la nostra esperienza, dalla raccolta dei
requisiti utente alla prima release del tool, descrivendo i principali
problemi incontrati e i moduli Python usati per risolverli, usando
metodologie agili per lo sviluppo.&lt;/p&gt;
&lt;p&gt;Sebbene l'applicazione non sia disponibile come progetto open-source,
questo intervento fornisce degli spunti di valore a proposito dello
sviluppo di applicazioni distribuite e parallele usando Python.&lt;/p&gt;
</summary><category term="backup"></category></entry><entry><title>Backup Is Hard; Let's Go Shopping</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Gary Bernhardt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Backup Is Hard; Let's Go Shopping&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;We'll fly through the most clever bits of BitBacker, an online backup
app developed as a startup for three years and eventually abandoned.
Highlights: a hacked-up httplib/asyncore HTTP client; a real-life,
HATEOAS-respecting RESTful API, and an encryption scheme that can
quickly diff a file system against the server while leaking no
information – not even file timestamps.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This is the story of a solution to a huge problem: fast, secure online
backup. A single client generates a hundred gigabytes, millions of data
chunks, and thousands of file system snapshots. To appreciate the
problem's scale, consider that a Python array holding content hashes for
1,000,000 files consumes 100 MB of memory. File hashes are only a
portion of the required per- file metadata, and that's only one for
snapshot of thousands.&lt;/p&gt;
&lt;p&gt;We'll tour the hard parts of this system with no apology for their
difficulty. The httplib/asyncore hybrid monster that served millions of
parallel requests, transparently retrying on failures and timeouts, with
only 300 lines of python. The RESTful API – fully respecting hypertext,
with every request safely repeatable, even POSTs, and not a single
hard-coded URL in the client. The encryption scheme that leaked nothing
– not even modification times – but could quickly diff local file
systems against the server. And, that one time that a client
accidentally requested a 4.76 megabyte URL in production.&lt;/p&gt;
</summary><category term="backup"></category><category term="bigdata"></category><category term="bitbacker"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>