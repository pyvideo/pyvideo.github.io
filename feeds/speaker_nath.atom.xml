<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nath.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-15T00:00:00+00:00</updated><entry><title>Reinventing the whl: New Developments in the Upstream Python Packaging Ecosystem</title><link href="https://pyvideo.org/scipy-2016/reinventing-the-whl-new-developments-in-the-upstream-python-packaging-ecosystem-scipy-2016-nath.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Nath</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/reinventing-the-whl-new-developments-in-the-upstream-python-packaging-ecosystem-scipy-2016-nath.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pip, wheels, and setuptools are the standard tools for installing, distributing, and building Python packages -- which means that if you're a user or package author then you're probably using them at least some of the time, even though when it comes to handling scientific packages, they've traditionally been a major source of pain. Fortunately, things have been getting better! In this talk, I'll describe how members of the scientific Python community have been working with upstream Python to solve some of the worst issues, and show you how to build and distribute binary wheels for Linux users, build Windows packages without MSVC, use wheels to handle dependencies on non-Python libraries like BLAS or libhdf5, plus give the latest updates on our effort to drive a stake through the heart of setup.py files and replace them with something better.&lt;/p&gt;
</summary><category term="SciPy 2016"></category></entry></feed>