<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Itamar Turner-Trauring</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_itamar-turner-trauring.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Zero to production-ready: a best-practices process for Docker packaging</title><link href="https://pyvideo.org/djangocon-us-2021/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 70 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?&lt;/p&gt;
&lt;p&gt;To help you quickly package your application in a production-ready way, this talk will give you a process to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimizing build time and image size.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Best practices for production-ready Docker packaging</title><link href="https://pyvideo.org/europython-2020/best-practices-for-production-ready-docker-packaging.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/best-practices-for-production-ready-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An iterative packaging plan for your Python application&lt;/p&gt;
&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An iterative packaging plan for your Python application&lt;/p&gt;
&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 60 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?&lt;/p&gt;
&lt;p&gt;To help you quickly package your application in a production-ready way, this talk will give you a plan to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimization.&lt;/p&gt;
&lt;p&gt;To make this process more concrete, along the way you'll also learn some of the techniques needed to build production-ready images:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Running as a non-root, for increased security.&lt;/li&gt;
&lt;li&gt;Debugging C crashes with faulthandler.&lt;/li&gt;
&lt;li&gt;Faster startup with pre-compiled .pycs.&lt;/li&gt;
&lt;li&gt;Smaller images by disabling pip caching.&lt;/li&gt;
&lt;li&gt;Avoiding Alpine Linux.&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the talk you'll also get some resources to teach you even more best practices that can't be fit in a 30-minute talk.&lt;/p&gt;
&lt;p&gt;This talk is for Python programmers who know the basics of Docker packaging, and need to run the resulting images in a production environment.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="DevOps general"></category><category term="Docker"></category><category term="Packaging"></category><category term="Security"></category></entry><entry><title>Intermediate Twisted: Test-Driven Networking Software</title><link href="https://pyvideo.org/pycon-us-2013/intermediate-twisted-test-driven-networking-soft.html" rel="alternate"></link><published>2013-03-14T00:00:00+00:00</published><updated>2013-03-14T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2013-03-14:/pycon-us-2013/intermediate-twisted-test-driven-networking-soft.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing tests for networking code presents special challenges, which
Twisted tries to address. In this tutorial you will implement a toy HTTP
server using test-first methodology: first the tests are written, and
then the code. You will learn how to write well-tested network
applications using Twisted, and the general …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing tests for networking code presents special challenges, which
Twisted tries to address. In this tutorial you will implement a toy HTTP
server using test-first methodology: first the tests are written, and
then the code. You will learn how to write well-tested network
applications using Twisted, and the general virtues of doing test-driven
development.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="tutorial"></category></entry><entry><title>A Beginner's Guide to Test-driven Development</title><link href="https://pyvideo.org/pycon-us-2015/a-beginners-guide-to-test-driven-development.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2015-04-11:/pycon-us-2015/a-beginners-guide-to-test-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software is maintained by humans with limited memory and an unfortunate
tendency to make mistakes. Test-driven development (TDD) can help you
work around these design flaws by providing a permanent, automated
specification for your code. Learn how to implement TDD when bug fixing
and implementing new features and how …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software is maintained by humans with limited memory and an unfortunate
tendency to make mistakes. Test-driven development (TDD) can help you
work around these design flaws by providing a permanent, automated
specification for your code. Learn how to implement TDD when bug fixing
and implementing new features and how this process will ensure your code
is correct both now and in the future.&lt;/p&gt;
</content><category term="PyCon US 2015"></category></entry><entry><title>Big picture software testing: unit testing, Lean Startup, and everything in-between</title><link href="https://pyvideo.org/pycon-us-2017/big-picture-software-testing-unit-testing-lean-startup-and-everything-in-between.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2017-05-19:/pycon-us-2017/big-picture-software-testing-unit-testing-lean-startup-and-everything-in-between.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many ways you can test your software: unit testing, manual
testing, end-to-end testing, and so forth. Take a step back and you'll
discover even more form of testing, many of them very different in their
goals: A/B testing, say, where you see which of two versions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many ways you can test your software: unit testing, manual
testing, end-to-end testing, and so forth. Take a step back and you'll
discover even more form of testing, many of them very different in their
goals: A/B testing, say, where you see which of two versions of your
website results in more signups or ad clicks.&lt;/p&gt;
&lt;p&gt;How do these forms of testing differ, how do they relate to each other?
How do you choose which kind of testing to pursue, given limited time
and resources? How do you deal with strongly held yet opposite views
arguing either that a particular kind of testing is essential or that
it's a waste time?&lt;/p&gt;
&lt;p&gt;This talk will provide you with a model, a way to organize all forms of
testing and understand what exactly they provide, and why. Once you
understand the model you will be able to choose the right form of
testing for &lt;em&gt;your&lt;/em&gt; situation and goals.&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Logging for Scientific Computing: Reproducibility, Debugging, Optimization</title><link href="https://pyvideo.org/pycon-us-2019/logging-for-scientific-computing-reproducibility-debugging-optimization.html" rel="alternate"></link><published>2019-05-05T13:10:00+00:00</published><updated>2019-05-05T13:10:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2019-05-05:/pycon-us-2019/logging-for-scientific-computing-reproducibility-debugging-optimization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it takes hours or days to run your computation, it can take a long
time before you notice something has gone wrong, so your feedback cycle
for fixes can be very slow. If you want to solve problems
quickly—whether it's inconsistent results, crashes, or slowness—you need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it takes hours or days to run your computation, it can take a long
time before you notice something has gone wrong, so your feedback cycle
for fixes can be very slow. If you want to solve problems
quickly—whether it's inconsistent results, crashes, or slowness—you need
to understand what was going on in your process as it was running: you
need logging.&lt;/p&gt;
&lt;p&gt;In this talk you'll learn how to use the Eliot logging library to create
causal traces of your computation, including intermediate inputs and
outputs. You'll then see how these traces can help you:&lt;/p&gt;
&lt;p&gt;Ensure the computation ran as expected. Debug problems that may have
occurred far along within your computation. Identify and localize
performance problems: which parts of your computation were slow, and
what arguments were involved.&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="talk"></category></entry><entry><title>Small Big Data: using NumPy and Pandas when your data doesn't fit in memory</title><link href="https://pyvideo.org/pycon-us-2020/small-big-data-using-numpy-and-pandas-when-your-data-doesnt-fit-in-memory.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/small-big-data-using-numpy-and-pandas-when-your-data-doesnt-fit-in-memory.html</id><content type="html"></content><category term="PyCon US 2020"></category></entry><entry><title>0 to production-ready: a best-practices process for Docker packaging</title><link href="https://pyvideo.org/pycon-us-2021/0-to-production-ready-a-best-practices-process-for-docker-packaging.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/0-to-production-ready-a-best-practices-process-for-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 60 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?&lt;/p&gt;
&lt;p&gt;To help you quickly package your application in a production-ready way, this talk will give you a process to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimization.&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Processing large JSON files without running out of memory</title><link href="https://pyvideo.org/pycon-us-2025/processing-large-json-files-without-running-out-of-memory.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/processing-large-json-files-without-running-out-of-memory.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to process a large JSON file in Python, it’s very easy to run out of memory while loading the data, leading to a super-slow run time or out-of-memory crashes. If you're running in the cloud, you can get a machine with more memory, but that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to process a large JSON file in Python, it’s very easy to run out of memory while loading the data, leading to a super-slow run time or out-of-memory crashes. If you're running in the cloud, you can get a machine with more memory, but that means higher costs. How can you process these large files without running out of memory?&lt;/p&gt;
&lt;p&gt;In this talk you'll learn:&lt;/p&gt;
&lt;p&gt;How to measure memory usage.
Some of the reasons why loading JSON uses so much memory.&lt;/p&gt;
&lt;p&gt;Then, you'll learn some of the solutions to this problem:&lt;/p&gt;
&lt;p&gt;Using a more efficient in-memory representation.
Only loading the subset of the data you need.
Streaming parsing, which can parse arbitrarily-large files with a fixed amount of memory.
Using a different file format, like JSON Lines.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Small Big Data: using NumPy and Pandas when your data doesn't fit in memory</title><link href="https://pyvideo.org/pydata-new-york-city-2019/small-big-data-using-numpy-and-pandas-when-your-data-doesnt-fit-in-memory.html" rel="alternate"></link><published>2019-11-04T00:00:00+00:00</published><updated>2019-11-04T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2019-11-04:/pydata-new-york-city-2019/small-big-data-using-numpy-and-pandas-when-your-data-doesnt-fit-in-memory.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your data is too big to fit in memory—loading it crashes your program—but it's also too small for a complex Big Data cluster. How to process your data simply and quickly?  In this talk you'll learn the basic techniques for dealing with Small Big Data: money, compression …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your data is too big to fit in memory—loading it crashes your program—but it's also too small for a complex Big Data cluster. How to process your data simply and quickly?  In this talk you'll learn the basic techniques for dealing with Small Big Data: money, compression, batching and parallelization, and indexing. In particular, you'll learn how to apply these techniques to NumPy and Pandas.&lt;/p&gt;
</content><category term="PyData New York City 2019"></category></entry><entry><title>Beyond cProfile: performance optimization with sampling profilers and logging</title><link href="https://pyvideo.org/pygotham-2019/beyond-cprofile-performance-optimization-with-sampling-profilers-and-logging.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2019-10-05:/pygotham-2019/beyond-cprofile-performance-optimization-with-sampling-profilers-and-logging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your software is too slow, and you need to figure out why. It's natural to
reach for the cProfile profiler that's built-in to Python, but as a
deterministic profiler it suffers from a number of limitations.&lt;/p&gt;
&lt;p&gt;In this talk you'll learn about better tools for performance optimization:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sampling profilers …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your software is too slow, and you need to figure out why. It's natural to
reach for the cProfile profiler that's built-in to Python, but as a
deterministic profiler it suffers from a number of limitations.&lt;/p&gt;
&lt;p&gt;In this talk you'll learn about better tools for performance optimization:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sampling profilers, which distort the results less and give you a calltree
overview of your running application.&lt;/li&gt;
&lt;li&gt;Trace-based logging, which can help you figure out not only which
functions are slow, but also which particular inputs are causing the
slowness.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyGotham 2019"></category></entry><entry><title>Zero to Production-Ready: A Best-Practices Process for Docker Packaging</title><link href="https://pyvideo.org/python-web-conf-2022/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html" rel="alternate"></link><published>2022-03-22T00:00:00+00:00</published><updated>2022-03-22T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2022-03-22:/python-web-conf-2022/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it’s time to package your Python application for Docker, there are a whole lot of best practices to follow: my personal list has 70 best practices and it keeps growing. As a result, it can be unclear what’s important, what’s not, where to start, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it’s time to package your Python application for Docker, there are a whole lot of best practices to follow: my personal list has 70 best practices and it keeps growing. As a result, it can be unclear what’s important, what’s not, where to start, and what to put off until later. If you’re not careful, you can get distracted by optimizing your Docker image size, and neglect to make your image secure.&lt;/p&gt;
&lt;p&gt;The underlying problem is that Docker packaging is complicated: it’s at the intersection of multiple organizational processes, from development, to deployment, to debugging, to upgrades. Add on 50 years of technology development going back to early Unix design decisions, and the result is a huge number of details to get right, many of which interact with each other in unexpected ways.&lt;/p&gt;
&lt;p&gt;But, once you understand how Docker packaging fits in with all the development and operational processes you’re already doing, those details become a lot less daunting. In particular, by following a structured iterative process for creating your Docker packaging artifacts (Dockerfile etc.), you can think through the decisions you’ll need to make, figure out which new processes you need to start implementing, and make sure you’ve implemented the important details first.&lt;/p&gt;
&lt;p&gt;To help you take control of your packaging, this talk will cover an iterative six-step process for packaging an application with Docker, starting with security and ending up with optimizations like build time and image size, along with a few examples of some of the relevant best practices.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</content><category term="Python Web Conf 2022"></category><category term="PythonWebConf"></category><category term="PythonWebConf2022"></category></entry><entry><title>Lightning Talk: Sciagraph: always-on profiling for production batch jobs</title><link href="https://pyvideo.org/python-web-conf-2022/lightning-talk-sciagraph-always-on-profiling-for-production-batch-jobs.html" rel="alternate"></link><published>2022-03-21T00:00:00+00:00</published><updated>2022-03-21T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2022-03-21:/python-web-conf-2022/lightning-talk-sciagraph-always-on-profiling-for-production-batch-jobs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;blockquote&gt;
More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/blockquote&gt;
</content><category term="Python Web Conf 2022"></category><category term="PythonWebConf"></category><category term="PythonWebConf2022"></category></entry></feed>