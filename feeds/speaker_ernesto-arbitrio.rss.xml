<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 21 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Bokeh: Using python for interactive data visualization</title><link>https://pyvideo.org/pycon-italia-2018/bokeh-using-python-for-interactive-data-visualization.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bokeh is an interactive visualization library that targets modern web
browsers for presentation. Its goal is to provide elegant, concise
construction of novel graphics in the style of D3.js, and to extend this
capability with high- performance interactivity over very large or
streaming datasets. In this talk, you will learn to use Bokeh to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create simple interactive plots&lt;/li&gt;
&lt;li&gt;annotate and styling the plots&lt;/li&gt;
&lt;li&gt;using bokeh plots in web pages&lt;/li&gt;
&lt;li&gt;link interactive visualizations to a running python instance&lt;/li&gt;
&lt;li&gt;stream data to plots&lt;/li&gt;
&lt;li&gt;using Datashader to view and interact with large datasets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data visualization is key to understanding the information contained in
data. The interactivity provide a valuable means for engineers, data
journalist, and scientist to explore their data. This talk will
introduce ( &lt;em&gt;using also some code example&lt;/em&gt; ) the audience to the basics
of using Bokeh, demonstrate different aspects of the library, and teach
how to deal with data formats ( &lt;em&gt;pandas&lt;/em&gt; , &lt;em&gt;numpy&lt;/em&gt; , &lt;em&gt;bokeh Column Data
Source&lt;/em&gt; )&lt;/p&gt;
&lt;p&gt;Knowledge required: &lt;tt class="docutils literal"&gt;python3&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;pandas basics&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numpy bascis&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;data mining&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;jupyter notebook&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;For some visualization examples refers
&lt;a class="reference external" href="https://bokeh.pydata.org/en/latest/docs/gallery.html#gallery"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ernesto Arbitrio</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/bokeh-using-python-for-interactive-data-visualization.html</guid><category>plot</category><category>Jupyter</category><category>pydata</category><category>bokeh</category><category>DataVisualization</category><category>dataminig</category></item><item><title>Indicizzare e cercare tonnellate di dati con ElasticSearch e Django</title><link>https://pyvideo.org/pycon-italia-2017/indicizzare-e-cercare-tonnellate-di-dati-con-elasticsearch-e-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cercare in maniera efficente e veloce in grandi quantità di dati risulta
essere, almeno nel mio campo e nelle mie esperienze, un problema
abbastanza diffuso. In questo talk sarà affrontato da un punto di vista
tecnico/sistemistico la parte di indicizzazione di grandi volumi di
dati, le accortenze da avere quando si indicizzano dati in un engine di
search e anlaytics e la parte di monitoring del cluster ELK. Nella
seconda parte invece verrà mostrata l’interazione di una web interface
(Django based) con elasticsearch. Conoscenze necessarie per il talk:
concetti base di serializzazione, restful web services, django&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ernesto Arbitrio</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/indicizzare-e-cercare-tonnellate-di-dati-con-elasticsearch-e-django.html</guid><category>elasticsearch</category><category>json</category><category>Full Text Search</category><category>REST</category><category>django</category></item><item><title>ReNette: a web-service for network reproducibility analysis</title><link>https://pyvideo.org/pycon-italia-2014/renette-a-web-service-for-network-reproducibility-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here we introduce a novel Django based web-service for differential network analysis. In order to manage extensive scientific computation tasks we design a distributed system where the computation part is independent from the front-end. In particular the complex heterogeneous system is based on the integration of python, R for scientific computing and Django, Celery and RabbitMQ for web- interface and asynchronous tasks management. The algorithms are written in R and integrated as python class through Rpy2 module. Each algorithm is mapped on a celery task which handles the communication between the web-interface and the computing server. Jobs are submitted from the web front-end to the middleware using standard HTML forms and class based Django views. Celery daemon manages the communication between the running process on the server and the web interface. In particular it provides a queue which prioritize the submission of new jobs according to the load average of the machine. Thanks to the distributed task queue system provided by the Celery daemon, the application is easily scalable in order to meet the need of more power in case a high number of processes are asked to be computed by the server. Once the process has finished the user is automatically redirected on the results web-page which returns the status of the process and a synthetic view of the submitted task.&lt;/p&gt;
&lt;p&gt;Methods &amp;amp; Implementation: The service is based on the Django Model View Controller (MVC) framework with Python version 2.7 which interacts with the core process through the celery distributed task queue. The application server was built with Apache2 web server integrated with uWSGI which allows configuration on high performance computing. The core of the service is based on the Rpy2 interface which interacts with the R package nettools. The double layer architecture is distributed on two machines: one is the web front-end which manages data communication between clients and the computing system. Front-end: Red Hat Enterprise Linux Workstation release 6.5 with kernel 2.6.32, virtual machine with 1 core, 2GB of RAM running on vmware sphere. The environment is based on Python 2.7 and Django 1.6.1.&lt;/p&gt;
&lt;p&gt;Back-end: Red Hat Enterprise Linux Workstation release 6.5 with kernel 2.6.32, phisical machine based on a 24 cores, 72 GB of RAM and 1TB of storage machine (georun). The current version 1.8 needs Python 2.7, Rpy2 2.30, Celery 3.1.7, R 3.0.2, nettools 0.9.5, igraph 0.6.6 to run correctly. The web-site is available at &lt;a class="reference external" href="https://renette.fbk.eu"&gt;https://renette.fbk.eu&lt;/a&gt;; to install the system, a complete list of the dependencies can be found on the github page &lt;a class="reference external" href="https://github.com/MPBA/renette"&gt;https://github.com/MPBA/renette&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ernesto Arbitrio</dc:creator><pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-24:pycon-italia-2014/renette-a-web-service-for-network-reproducibility-analysis.html</guid></item><item><title>Grafici interattivi con Django e Highcharts JS (senza conoscere JS)</title><link>https://pyvideo.org/pycon-italia-2016/grafici-interattivi-con-django-e-highcharts-js-senza-conoscere-js.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ernesto Arbitrio</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:pycon-italia-2016/grafici-interattivi-con-django-e-highcharts-js-senza-conoscere-js.html</guid></item></channel></rss>