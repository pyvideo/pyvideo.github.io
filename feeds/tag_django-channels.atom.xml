<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_django-channels.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-11T00:00:00+00:00</updated><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-us-2018/taking-django-async.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.&lt;/p&gt;
&lt;p&gt;Doing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general.&lt;/p&gt;
</summary><category term="django"></category><category term="async"></category><category term="django channels"></category></entry><entry><title>Django Channels Teaching a mature framework new tricks</title><link href="https://pyvideo.org/pycon-israel-2017/django-channels-teaching-a-mature-framework-new-tricks.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Ronnie Sheer</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/django-channels-teaching-a-mature-framework-new-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This example-heavy talk, might give you everything you need to start having fun with Django Channels. Channels allow us to add features such as real time communication to our apps; without giving up the framework we love. Now we can use websockets and stay pythonic. Perhaps more importantly they provide opportunities for fun. We may answer client’s demands for features such as messaging while maintaining a consistent stack. Further, no longer do we have to consider expensive SASS style solutions, which lack flexibility. From realtime-chat to collaborative drawing canvases, Ronnie demonstrates how simple and playful you may find channels. Finally, we will talk about the nut’s and bolts that make up this powerful tool.&lt;/p&gt;
</summary><category term="django channels"></category></entry></feed>