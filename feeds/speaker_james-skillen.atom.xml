<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_james-skillen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-27T15:00:00+01:00</updated><entry><title>Declarative Business Process Management and Async Generators</title><link href="https://pyvideo.org/pycon-uk-2017/declarative-business-process-management-and-async-generators.html" rel="alternate"></link><published>2017-10-27T15:00:00+01:00</published><updated>2017-10-27T15:00:00+01:00</updated><author><name>James Skillen</name></author><id>tag:pyvideo.org,2017-10-27:pycon-uk-2017/declarative-business-process-management-and-async-generators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BPM engines typically execute BPMN diagrams produced by a process engineer using a GUI. WorkScheme instead defines and interprets a functional domain-specific language based on a subset of Scheme. It also provides BPMN output via compilation to graphviz's dot and inclusion within Sphinx documentation of the process.&lt;/p&gt;
&lt;p&gt;Defining features of BPM are supported: concurrency of independent tasks (using asyncio); and persistence of state (pickling a stackless interpreter). Business tasks are provided by imported Python modules.&lt;/p&gt;
&lt;p&gt;A novel use for async generators is found as elegantly allowing for complex interaction between process and task. An example is two-phase commit for user interaction, improving robustness versus existing solutions.&lt;/p&gt;
</summary></entry></feed>