<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_emanuil-tolev.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-13T00:00:00+00:00</updated><entry><title>Awesome live API docs for under resourced teams</title><link href="https://pyvideo.org/pycon-uk-2019/awesome-live-api-docs-for-under-resourced-teams.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>Emanuil Tolev</name></author><id>tag:pyvideo.org,2019-09-13:pycon-uk-2019/awesome-live-api-docs-for-under-resourced-teams.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since all software dev teams are under-resourced, let's see how to get pretty good 'living' docs with as little effort as possible. These allow the API to be used directly from the docs. We'll look at a real open source app built with Flask, Swagger and SwaggerUI.&lt;/p&gt;
</summary></entry><entry><title>Advanced, free, open-source application performance monitoring for your Python apps</title><link href="https://pyvideo.org/djangocon-europe-2019/advanced-free-open-source-application-performance-monitoring-for-your-python-apps.html" rel="alternate"></link><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><author><name>Emanuil Tolev</name></author><id>tag:pyvideo.org,2019-04-21:djangocon-europe-2019/advanced-free-open-source-application-performance-monitoring-for-your-python-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk and technical demo we’re going to walk through a minimal example Django web app, simulate traffic of varied intensity, and monitor the entire system as well as peek deeper in the app.
It is 3am. Your phone rings with a special tone - the systems propping up your employer’s or client’s website are down. You open your eyes and groan, fumbling for your laptop. You’re used to the system’s worst problems, you have an idea what it might be. It’s slow going while you manually check if every component is working. You go back to bed in an hour, having written up a few of the most important details and brought the website back up. Hooray!
However, at 6am you get another call. You sigh and fix it. Then another at 7am, and at 11am. A few days later the outages repeat. What is going on?!
There are types of problems that can’t be solved purely through experience and knowledge of a system. You need deeper monitoring data than “% CPU” and “RAM free” to resolve them. Worse still, there are multiple components involved with failures in one masking a true underlying cause in another, like a slow loading page masking a slow database, which in turn makes you wonder what queries it’s really answering. In this talk we’re going to have a look at how you can monitor small to medium projects to really understand deeper problems at a glance.
The talk will pick specific solutions from various vendors as well as open source for different parts of the problem.&lt;/p&gt;
</summary></entry></feed>