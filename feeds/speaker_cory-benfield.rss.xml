<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 May 2017 00:00:00 +0000</lastBuildDate><item><title>Requests Under The Hood</title><link>https://pyvideo.org/pycon-us-2017/requests-under-the-hood.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Requests is widely acknowledged as a library that saves users an
enormous amount of time, effort, and pain through its intuitive and
clear API. For this reason, most people who have never looked at the
code assume that its code is as intuitive, well-structured, and clear as
the API.&lt;/p&gt;
&lt;p&gt;Of course, the truth is more complex than that. Real software that deals
with real problems is rarely ideal: there are edge cases, terrible
hacks, and awkward workarounds for problems.&lt;/p&gt;
&lt;p&gt;Often in the software industry we pretend that these imperfections in
our software don’t exist, or we try to hide them. These imperfections
frequently cause people to reinvent wheels in order to simplify the
code, which has benefits for understandability but frequently has
downsides for resilience. When people talk about “battle-tested” code,
they mean code that has been dirtied up over time from its original
Platonic ideal implementation to something that is just as complex and
warty as real life.&lt;/p&gt;
&lt;p&gt;In this talk, one of the Requests and urllib3 core maintainers lays bare
all of the worst and hackiest corners of the codebases of these two
libraries. The goal is to help expose all of the invisible work done in
mature codebases to tolerate edge cases and misbehaviour, as well as to
try to remind us all that the perfect is the enemy of the good.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-19:pycon-us-2017/requests-under-the-hood.html</guid></item><item><title>Building Protocol Libraries The Right Way</title><link>https://pyvideo.org/pycon-sk-2016/building-protocol-libraries-the-right-way.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the great strengths of Python is the incredible richness of its
libraries. The standard library is already fairly good, and when you
take into account the third-party ecosystem, Python’s is up there with
the best in the world. Despite that, however, a great deal of effort has
been wasted to get to this place. Consider Python’s HTTP ecosystem,
which has many fantastic libraries. Unfortunately, there’s a stunning
lack of code re-use across them: different HTTP libraries often have
essentially no common code at all, despite doing extremely similar jobs.
Sometimes this occurs in projects that are intended to be almost
identical, such as requests and treq.&lt;/p&gt;
&lt;p&gt;This talk proposes that the primary reason this occurs is because each
library contains its own I/O layer. It explores exactly how this problem
comes about, and discusses an alternative approach to library design
that vastly has many benefits over the standard approach. It uses as its
core examples many projects the author has worked on, including the only
library he has written that he believes gets this right. It also talks
about where this approach is used outside of Python to great effect to
provide extra weight for the example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-12:pycon-sk-2016/building-protocol-libraries-the-right-way.html</guid></item><item><title>HTTP/2: Because The Web Was Too Easy</title><link>https://pyvideo.org/pycon-uk-2014/http2-because-the-web-was-too-easy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Cory Benfield.&lt;/p&gt;
&lt;p&gt;The internet has spoken, HTTP is to get its first serious update in 15 years. In this talk we'll discuss what HTTP/2 is, why it's happening, and how it's going to affect you and everyone you love.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Mon, 13 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-13:pycon-uk-2014/http2-because-the-web-was-too-easy.html</guid></item><item><title>Simplicity Is A Feature</title><link>https://pyvideo.org/pycon-uk-2015/simplicity-is-a-feature.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you talk to software professionals, you come away with the idea
that we have a case of feature-itis. An enormous number of people
evaluate software in terms of the length of feature lists and
functionality. People dismiss software with fewer features as
“underpowered”. And how many times have you heard software devalued
because “I could build that”?&lt;/p&gt;
&lt;p&gt;And yet, intuitively we know that’s not always true. urllib3 has more
features than requests, but people overwhelmingly prefer to use
requests. Android has more features than iOS, but Android hasn’t
demolished iOS.&lt;/p&gt;
&lt;p&gt;The reason for this is that simplicity is a powerful advantage. This
talk will explain what is meant by simplicity, how to judge software
simplicity, and how to approach building simple tools. It’ll also talk
about how to structure your code to give the optimum balance of
simplicity and flexibility, to keep yourself and your users happy down
the line.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/simplicity-is-a-feature.html</guid></item><item><title>If Only Everything Was Radioactive: Randomness and Computing</title><link>https://pyvideo.org/pycon-uk-2016/if-only-everything-was-radioactive-randomness-and-computing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cory Benfield&lt;/p&gt;
&lt;p&gt;Having access to randomness turns out to be remarkably important in computing. Whether you’re a scientist working on a simulation, someone trying to send secret messages, or just a person who wants to play a randomly generated video game level, having access to some kind of non-determinism is vital. But computers, as we all know, are thoroughly deterministic entities. So how can we get randomness?&lt;/p&gt;
&lt;p&gt;This talk will investigate how randomness works on computers. We’ll introduce you to random number generators, talk about the different kinds that are available and when to use them, and then talk about how to get access to random numbers from your Python code.&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-20:pycon-uk-2016/if-only-everything-was-radioactive-randomness-and-computing.html</guid></item><item><title>Building Protocol Libraries The Right Way</title><link>https://pyvideo.org/pycon-us-2016/cory-benfield-building-protocol-libraries-the-right-way-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Cory Benfield&lt;/p&gt;
&lt;p&gt;One of the great strengths of the Python ecosystem is the enormous collection of powerful, flexible libraries. However, these libraries tend to suffer from one extremely common design flaw that mean that the work done is not easily re-usable or transferable. In this talk, we talk about how to build libraries that can be used as widely as possible, through the lens of the Python Hyper HTTP project.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/cory-benfield-building-protocol-libraries-the-right-way-pycon-2016.html</guid></item><item><title>The Hitchhiker's Guide to TLS &amp; SSL</title><link>https://pyvideo.org/pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer&lt;/p&gt;
&lt;p&gt;Since the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there’s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS stacks that’s hard to come by.  Join the makers of PyOpenSSL, the standard library’s ssl module, requests/urllib3, Twisted, the former maintainer of a CA, and&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lvh</dc:creator><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-29:pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html</guid></item><item><title>Security Vulnerabilities - A Story About Panic</title><link>https://pyvideo.org/djangocon-europe-2015/cory-benfield-security-vulnerabilities-a-story-at.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-08:djangocon-europe-2015/cory-benfield-security-vulnerabilities-a-story-at.html</guid></item><item><title>You Don’t Care About Efficiency: Synchronous Code Is Dying</title><link>https://pyvideo.org/kiwi-pycon-2015/you-dont-care-about-efficiency-synchronous-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you write blocking code, you don’t care about efficiency.&lt;/p&gt;
&lt;p&gt;There, I said it.&lt;/p&gt;
&lt;p&gt;It’s 2015, and still the vast majority of Python programmers write
essentially synchronous code that blocks on network I/O. This approach,
while simple to reason about, struggles mightily with scaling up and out
into software that does a lot of network I/O. Worse, it makes it
difficult to write code that reacts rapidly to changing conditions.&lt;/p&gt;
&lt;p&gt;The writing is on the wall for this kind of software, as the community
shifts towards writing software that embraces asynchronicity. In this
talk we’ll discuss why synchronous software is a problem, what your
options are to move away from it, and what challenges are being faced by
the Python ecosystem as we try to move towards a brave new asynchronous
world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/you-dont-care-about-efficiency-synchronous-code.html</guid></item><item><title>Hyperactive: HTTP/2 and Python</title><link>https://pyvideo.org/pycon-us-2015/hyperactive-http2-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The internet has spoken, HTTP is to get its first serious update in 15
years. In this talk we'll discuss what HTTP/2 is, why it's happening,
and how it's going to affect you and everyone you love. We'll briefly
talk about how you can get started with HTTP/2, and some interesting
projects associated with it, including Hyper, the first Python HTTP/2
library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/hyperactive-http2-and-python.html</guid></item></channel></rss>