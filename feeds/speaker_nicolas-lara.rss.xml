<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 28 Jul 2016 00:00:00 +0000</lastBuildDate><item><title>Python and Async programming</title><link>https://pyvideo.org/europython-2016/python-and-async-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nicolas Lara - Python and Async programming
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/python-and-async-programming"&gt;https://ep2016.europython.eu//conference/talks/python-and-async-programming&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;How does the experienced python programmer fair when faced with
python's &amp;quot;new&amp;quot; way of doing async programming for the first time?&lt;/p&gt;
&lt;p&gt;This talk details the different ways python provides for attacking the
problem of asynchronous programming and focuses on the best practices
for the future (as of python 3.4 and 3.5)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;How does the experienced python programmer fair when faced with
python's &amp;quot;new&amp;quot; way of doing async programing in for the first time?
Do we all know how and when to use Futures, yield from, asyncio,
coroutines, the async and await keywords, eventloops, and others?&lt;/p&gt;
&lt;p&gt;A lot has changed in recent versions of Python when it comes to async
programming, concurrency, and parallelism. We still have very
different ways of approaching the problem in each version, but they
are finally (as of python 3.4/3.5) converging to a standard.&lt;/p&gt;
&lt;p&gt;This talk explores, from the perspective of an experienced python
programmer with little to no experience in async programming, what the
&amp;quot;one obvious way&amp;quot; to do async programming in Python is supposed to be.
It does so but analysing examples of different categories of async
problems we may want to solve and what the correct way to solve them
with the latest versions of Python would be (along with the trade offs
of different approaches).&lt;/p&gt;
&lt;p&gt;The examples include generic CPU-bound problems, IO-bound problems,
and &amp;quot;both-bound&amp;quot; problems; along with common tasks as building a
simple server, scraping, deferring a web response, and traversing
graphs.&lt;/p&gt;
&lt;p&gt;When useful, I compare the solutions with the approach we would take
in languages that have been design for- and are known to be good at
async programming like Javascript and Go.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Lara</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-28:europython-2016/python-and-async-programming.html</guid></item><item><title>Python Metaprogramming (#64)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-metaprogramming---64.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Metaprogramming&lt;/p&gt;
&lt;p&gt;Presented by Nicolas Lara&lt;/p&gt;
&lt;p&gt;Python makes a great metaprogramming languages. Metaprogramming is great
for solving problems faster, in a more generic way and providing rich
APIs. This talk explores the different options provided in python to do
metaprogramming and the right way to use them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Lara</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-metaprogramming---64.html</guid><category>metaprogramming</category><category>pycon</category><category>pycon2010</category></item></channel></rss>