<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 01 Jul 2013 00:00:00 +0000</lastBuildDate><item><title>Astropy, growing a community-based software system for astronomy</title><link>https://pyvideo.org/scipy-2013/astropy-growing-a-community-based-software-syste-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Astropy is a community-based software project to coordinate the
development of libraries and applications for astronomy. We will report
on progress that has been made with astropy since the last scipy
conference.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Droettboom, Michael, STScI; Robitaille, Thomas, Max Planck
Institute; Tollerud, Erik, Yale Universit&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;Astropy is a community-based software project to coordinate the
development of libraries and applications for astronomy. We will report
on progress that has been made with astropy since the last scipy
conference. The past year has seen much growth in the number and quality
of the core libraries in astropy and a public release. We will highlight
the new capabilities available, and outline the development plans for
the upcoming year. Finally we discuss the strategies for advertising its
capabilities and growing the documentation and tutorials available for
users and developers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Tollerud</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:scipy-2013/astropy-growing-a-community-based-software-syste-0.html</guid><category>astronomy</category><category>astrophysics</category><category>astropy</category></item><item><title>Combining C++ and Python in the LSST Software Stack</title><link>https://pyvideo.org/scipy-2013/combining-c-and-python-in-the-lsst-software-sta-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The software system for the Large Synoptic Survey Telescope is
completely open-source, and at every stage we've focused on making it
usable not just with LSST, but with generic astronomical image data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Bosch, Jim, Princeton University&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;The Large Synoptic Survey Telescope is a 8.4-meter survey telescope that
will image the entire visible sky twice a week with a 3.2 Gigapixel
camera, expected to come online early in the next decade. That means a
lot of data: approximately 30 TB each night, and over 60 PB at the end
of the 10-year survey, all of which will be made available to the
public. The software system for LSST is completely open-source, and at
every stage we've focused on making it usable not just with LSST, but
with generic astronomical image data (in fact, it has been used to
reduce data from several other telescopes already). We're building the
software system for LSST using a combination of C++ and Python, making
use of third-party software such as NumPy, Swig, and Eigen, along with a
lot of custom code (much of which may be of broader use). In this talk
I'll go over some of the advantages and disadvantages of the C++/Python
combination, and some of the tricks and tools we've developed (and
trials and tribulations we've encountered) in making them play well
together in the context of astronomical data analysis. While LSST is
still years away, and our software pipeline is still in many ways a
prototype, in many respects it is already at the cutting edge of
astronomical data analysis, and the lessons we have already learned will
be of value not just to astronomers, but to scientists in other &amp;quot;big
data&amp;quot; fields and general-purpose scientific software developers as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Bosch</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:scipy-2013/combining-c-and-python-in-the-lsst-software-sta-0.html</guid><category>astronomy</category><category>astrophysics</category><category>eigen</category><category>swig</category></item><item><title>Ginga: an open-source astronomical image viewer and toolkit</title><link>https://pyvideo.org/scipy-2013/ginga-an-open-source-astronomical-image-viewer-a-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ginga is a new astronomical image viewer written in python. It uses and
inter-operates with several key scientific python packages: numpy,
pyfits, and scipy.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Jeschke, Eric, Subaru Telescope, National Astronomical
Observatory of Japan&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;Ginga is a new astronomical image viewer written in python. It uses and
inter-operates with several key scientific python packages: numpy,
pyfits, and scipy. A key differentiator for this image viewer, compared
to older-generation FITS viewers, is that all the key components are
written as python classes, allowing for the first time a powerful FITS
image display widget to be directly embedded in, and tightly coupled
with, python code.&lt;/p&gt;
&lt;p&gt;We call Ginga a toolkit for programming FITS viewers because it includes
a choice of base classes for programming custom viewers for two
different modern widget sets: Gtk and Qt, available on the three common
desktop platforms. In addition, a reference viewer is included with the
source code based on a plugin architecture in which the viewer can be
extended with plugins scripted in python. The code is released under a
BSD license similar to other major python packages and is available on
github.&lt;/p&gt;
&lt;p&gt;Ginga has been introduced only recently as a tool to the astronomical
community, but since SciPy has a developer focus this talk concentrates
on programming with the Ginga toolkit. We cover two cases: using the
bare image widget to build custom viewers and writing plugins for the
existing full-featured Ginga viewer. The talk may be of interest to
anyone developing code in python needing to display scientific image
(CCD or CMOS) data and astronomers interested in python-based quick look
and analysis tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Jeschke</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:scipy-2013/ginga-an-open-source-astronomical-image-viewer-a-0.html</guid><category>astronomy</category><category>astrophysics</category><category>ginga</category></item><item><title>Python and the SKA</title><link>https://pyvideo.org/scipy-2013/python-and-the-ska-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will discuss some of the challenges specific to the radio astronomy
environment and how we believe Python can contribute, particularly when
it comes to the trade off between development time and performance.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Simon Ratcliffe SKA South Africa, Ludwig Schwardt SKA South
Africa&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;The Square Kilometer Array will be one of the prime scientific data
generates in the next few decades.&lt;/p&gt;
&lt;p&gt;Construction is scheduled to commence in late 2016 and last for the best
part of a decade. Current estimates put data volume generation near 1
Exabyte per day with 2-3 ExaFLOPs of processing required to handle this
data.&lt;/p&gt;
&lt;p&gt;As a host country, South Africa is constructing a large precursor
telescope known as MeerKAT. Once complete this will be the most
sensitive telescope of it's kind in the world - until dwarfed by the
SKA.&lt;/p&gt;
&lt;p&gt;We make extensive use of Python from the entire Monitor and Control
system through to data handling and processing.&lt;/p&gt;
&lt;p&gt;This talk looks at our current usage of Python, and our desire to see
the entire high performance processing chain being able to call itself
Pythonic.&lt;/p&gt;
&lt;p&gt;We will discuss some of the challenges specific to the radio astronomy
environment and how we believe Python can contribute, particularly when
it comes to the trade off between development time and performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ludwig Schwardt</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:scipy-2013/python-and-the-ska-0.html</guid><category>astronomy</category><category>astrophysics</category></item><item><title>SunPy - Python for Solar Physicists</title><link>https://pyvideo.org/scipy-2013/sunpy-python-for-solar-physicists-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SunPy is a project designed to provide a free, open and easy-to-use
Python alternative to IDL and SolarSoft. SunPy provides unified,
coordinate-aware data objects for many common solar data types and
integrates into these plotting and analysis tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Mumford, Stuart, University of Sheffield / SunPy&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;Modern solar physicists have, at their disposal, an abundance of space
and ground based instruments providing a large amount of data to analyse
the complex Sun every day. The NASA Solar Dynamics Observatory
satellite, for example, collects around 1.2 TB of data every 24 hours
which requires extensive reconstruction before it is ready for
scientific use. Currently most data processing and analysis for all
solar data is done using IDL and the 'SolarSoft' library. SunPy is a
project designed to provide a free, open and easy-to-use Python
alternative to IDL and SolarSoft.&lt;/p&gt;
&lt;p&gt;SunPy provides unified, coordinate-aware data objects for many common
solar data types and integrates into these plotting and analysis tools.
Providing this base will give the global solar physics community the
opportunity to use Python for future data processing and analysis
routines. The astronomy and astrophysics community, through the
implementation and adoption of AstroPy and pyRAF, have already
demonstrated that Python is well suited for the analysis and processing
of space science data.&lt;/p&gt;
&lt;p&gt;In this presentation, we give key examples of SunPy's structure and
scope, as well as the major improvements that have taken place to
provide a stable base for future expansion. We discuss recent
improvements to file I/O and visualisation, as well as improvements to
the structure and interface of the map objects.&lt;/p&gt;
&lt;p&gt;We discuss the many challenges which SunPy faces if it is to achieve its
goal of becoming a key package for solar physics. The SunPy developers
hope to increase the the visibility and uptake of SunPy, and encourage
people to contribute to the project, while maintaining a high quality
code base, which is facilitated by the use of a social version control
system (git and GitHub).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Mumford</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:scipy-2013/sunpy-python-for-solar-physicists-0.html</guid><category>astronomy</category><category>astrophysics</category><category>SunPy</category></item></channel></rss>