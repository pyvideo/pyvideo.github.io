<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 29 May 2016 00:00:00 +0000</lastBuildDate><item><title>Creating, building, testing, and documenting a Python project - a hands-on HOWTO</title><link>https://pyvideo.org/pycon-us-2016/creating-building-testing-and-documenting-a-python-project-a-hands-on-howto-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Titus Brown, Luiz Irber&lt;/p&gt;
&lt;p&gt;We will do a hands-on walkthrough of creating a new Python project, showing how to make use of git and GitHub, PyPI, distutils, nosetests, continuous integration, Sphinx, and other resources to support the development, distribution, and documentation of the project in a completely free and open manner.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-29:pycon-us-2016/creating-building-testing-and-documenting-a-python-project-a-hands-on-howto-pycon-2016.html</guid></item><item><title>Why not run all your tests all the time? A study of continuous integration systems (#160)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why not run all your tests at all the time? A study of continuous
integration systems&lt;/p&gt;
&lt;p&gt;Presented by Dr. C. Titus Brown (Michigan State University)&lt;/p&gt;
&lt;p&gt;There are an increasing number of continuous integration (CI) systems
available for use by Pythonistas, but no clear guide to how to choose a
CI system for your project. I will examine the architecture choices made
by buildbot, bitten, Hudson, continuum, CruiseControl, DART, and
pony-build, and discuss the configuration and customization of several
of these systems for Pythonic needs, as well as give short demos (for
buildbot, bitten, Hudson, and pony-build).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html</guid><category>bitten</category><category>buildbot</category><category>ci</category><category>cruisecontrol</category><category>dart</category><category>hudson</category><category>pony-build</category><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>Handling ridiculous amounts of data with probabilistic data structures</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Handling ridiculous amounts of data with probabilistic data structures&lt;/p&gt;
&lt;p&gt;Presented by C. Titus Brown&lt;/p&gt;
&lt;p&gt;Part of my job as a scientist involves playing with rather large amounts
of data (200 gb+). In doing so we stumbled across some neat CS
techniques that scale well, and are easy to understand and trivial to
implement. These techniques allow us to make some or many types of data
analysis map-reducable. I'll talk about interesting implementation
details, fun science, and neat computer science.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;If an extreme talk, I will talk about interesting details/issues in:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python as the backbone for a non-SciPy scientific software package:
using Python as a frontend to C++ code, esp for parallelization and
testing purposes.&lt;/li&gt;
&lt;li&gt;Implementing probabilistic data structures with one-sided error as
pre-filters for data retrieval and analysis, in ways that are
generally useful.&lt;/li&gt;
&lt;li&gt;Efficiently breaking down certain types of sparse graph problems
using these probabilistic data structures, so that large graphs can
be analyzed straightforwardly. This will be applied to plagiarism
detection and/or duplicate code detection.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html</guid><category>bigdata</category><category>parallelization</category><category>pycon</category><category>pycon2011</category><category>testing</category></item><item><title>How to sell Python</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-sell-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to sell Python&lt;/p&gt;
&lt;p&gt;Presented by Daniel Greenfeld , C. Titus Brown , Dan Mesh , Chris
Shenton , Rich Leland , Frank Wiles&lt;/p&gt;
&lt;p&gt;A lot of people want to use Python, but their customer, management,
school, government, or organization won't let them. Python is a great
tool, but it can be challenging to get in the door. This panel will
explore how companies and individuals have successfully introduced
Python, what tools are available to sell Python, and what pitfalls there
are to avoid.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;A lot of people want to use Python, but their customer, management,
school, government, or organization won't let them. Python is a great
tool, but it can be challenging to get in the door. This panel will
explore how companies and individuals have successfully introduced
Python, what tools are available to sell Python, and what pitfalls there
are to avoid.&lt;/p&gt;
&lt;p&gt;Possible questions will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a good example success story you can share?&lt;/li&gt;
&lt;li&gt;What pitfalls should you avoid?&lt;/li&gt;
&lt;li&gt;How do you deal with organizations that have already spent
bucketloads of money on a piss-poor technology stack, are hurting for
it, but can't seem to let go?&lt;/li&gt;
&lt;li&gt;How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who
stand to lose from introducing Python?&lt;/li&gt;
&lt;li&gt;What tools are available to help sell Python?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Five panelists will be chosen from a broad spectrum of individuals
including academic, government, for-profit organizations, and non-profit
organizations.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Academia: C. Titus Brown&lt;/li&gt;
&lt;li&gt;Goverment: Chris Shenton of Koansys/NASA&lt;/li&gt;
&lt;li&gt;Large Commercial Organization: Dan Mesh of Evite&lt;/li&gt;
&lt;li&gt;Small Commercial Organization: Frank Wiles of RevSys&lt;/li&gt;
&lt;li&gt;Non-Profit Organization: Rich Leland of National Geographic&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Shenton</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-sell-python.html</guid><category>panel</category><category>pycon</category><category>pycon2011</category><category>sellingpython</category></item><item><title>Awesome Big Data Algorithms</title><link>https://pyvideo.org/pycon-us-2013/awesome-big-data-algorithms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Random algorithms and probabilistic data structures are algorithmically
efficient and can provide shockingly good practical results. I will give
a practical introduction, with live demos and bad jokes, to this
fascinating algorithmic niche. I will conclude with some discussions of
how our group has applied this to large sequencing data sets (although
this will not be the focus of the talk).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/awesome-big-data-algorithms.html</guid><category>talk</category></item><item><title>Data intensive biology in the cloud: instrumenting ALL the things</title><link>https://pyvideo.org/pycon-us-2014/data-intensive-biology-in-the-cloud-instrumentin.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud computing offers some great opportunities for science, but most
cloud computing platforms are I/O and memory limited, and hence are poor
matches for data-intensive computing. After 4 years of research software
development we are now instrumenting and benchmarking our analysis
pipelines; numbers, lessons learned, and future plans will be discussed.
Everything is open source.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/data-intensive-biology-in-the-cloud-instrumentin.html</guid></item><item><title>How to interpret your own genome using (mostly) Python.</title><link>https://pyvideo.org/pycon-us-2015/how-to-interpret-your-own-genome-using-mostly-p.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Weâ€™ve entered the era of the $1000 human genome, and soon it will be
straightforward to get your own genome sequenced by a commercial
company. But what does the data mean? What information can you get out
of your genomic sequence? And what are the barriers to deeper analysis?
What kinds of algorithms and databases are used in genomic analysis? All
this, and more, will be revealed in this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-interpret-your-own-genome-using-mostly-p.html</guid></item></channel></rss>