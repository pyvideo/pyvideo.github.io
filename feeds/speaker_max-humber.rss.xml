<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>How to read (code)</title><link>https://pyvideo.org/europython-2019/how-to-read-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/how-to-read-code.html</guid><category>Beginners</category><category>Clean Code</category><category>Documentation</category><category>Learning</category><category>Teaching</category></item><item><title>Amusing Algorithms</title><link>https://pyvideo.org/pybay-2018/amusing-algorithms.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-18:pybay-2018/amusing-algorithms.html</guid></item><item><title>Patsy: The Lingua Franca to and from R</title><link>https://pyvideo.org/pydata-berlin-2017/patsy-the-lingua-franca-to-and-from-r.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to build R-like statistical models in Python with Patsy and scikit-learn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating linear and logistic models in R is dead simple. If your numpy/panda-fu isn’t all that great than it’s a lot harder to do in Python. In R, for instance, you can declare a model with a formula as simple as y ~ x1 + x2. But in Python, you have to split out your target and input variables and make sure that the matrices work within the scikit-learn API.&lt;/p&gt;
&lt;p&gt;In this talk I will introduce the Patsy package for describing and creating statistical models in Python. I’ll walk through how to implement a logistic regression with Patsy and scikit-learn and I’ll emphasize Patsy as a bridge for those who want to better understand Python and/or R.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/patsy-the-lingua-franca-to-and-from-r.html</guid></item></channel></rss>