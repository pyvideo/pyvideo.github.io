<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_kirill-borisov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-02-16T00:00:00+00:00</updated><entry><title>Taming the beast: tests, legacy and You</title><link href="https://pyvideo.org/pycon-belarus-2019/taming-the-beast-tests-legacy-and-you.html" rel="alternate"></link><published>2019-02-16T00:00:00+00:00</published><updated>2019-02-16T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2019-02-16:pycon-belarus-2019/taming-the-beast-tests-legacy-and-you.html</id><summary type="html"></summary></entry><entry><title>Python of Things</title><link href="https://pyvideo.org/pycon-russia-2017/python-of-things.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/python-of-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Look at our desperate times, where toothbrushes have obligatory Bluetooth features, trashcans collect data about your habits, and cameras track your every move. And what exactly can you contribute to this IoT mayhem, our dearest Python developer? Imagine yourself building new things, connecting existing ones into something exciting and (maybe) having a good time.&lt;/p&gt;
&lt;p&gt;In this talk we will look at Python's place in a IoT world, how to use it for interaction with various peripherals and what hardware platforms are best suited for this purpose.&lt;/p&gt;
&lt;p&gt;Intended auditory: middle-level (and higher) software developers, makers and IoT enthusiasts.&lt;/p&gt;
&lt;p&gt;Main points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Abundance of computation resources are getting us lazy&lt;/li&gt;
&lt;li&gt;You can't win against IoT, so all that left is to join the fray.&lt;/li&gt;
&lt;li&gt;Python can be used for low-level interaction with various hardware.&lt;/li&gt;
&lt;li&gt;MicroPython - stripped-down version of Python 3 for use on various microcontrollers.&lt;/li&gt;
&lt;li&gt;Python ecosystem has various libraries for working with industry-proven communication protocols (e.g. ZigBee).&lt;/li&gt;
&lt;li&gt;Safety first!&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Контроль за стилем кода</title><link href="https://pyvideo.org/pycon-belarus-2015/kontrol-za-stilem-koda.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Кирилл Борисов</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/kontrol-za-stilem-koda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Стремление каждого разработчика ПО — писать код. Всё, что от этого кода
требуется — работать без ошибок и соответствовать задумке. Не секрет,
что для более-менее сложного продукта требуется объединить несколько
программистов в одну команду и заставить их работать вместе... И вот тут
начинаются проблемы: каждый пишет по-своему и затрудняется понять код
коллеги. Что в итоге? Падает эффективность, снижается качество продукта,
увеличивается время вхождения для новых разработчиков. Решить эти
проблемы помогает контроль за стилем кода. В этом докладе я расскажу про
то, какие практики вам могут пригодиться на выбранном пути и какие
средства для этого есть в экосистеме Python.&lt;/p&gt;
</summary></entry><entry><title>Python + Raspberry Pi GPIO</title><link href="https://pyvideo.org/pycon-belarus-2017/python-raspberry-pi-gpio.html" rel="alternate"></link><published>2017-02-04T00:00:00+00:00</published><updated>2017-02-04T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2017-02-04:pycon-belarus-2017/python-raspberry-pi-gpio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Несколько лет тому назад Интернет лихорадила тяга к Raspberry Pi,
одноплатному компьютеру от одноименного фонда. Многие покупали себе
&amp;quot;малинку&amp;quot; или её многочисленные клоны, вертели в руках и в лучшем случае
делали из неё домашний сервер. Но мало кто догадывался, что загадочный
разъем на этой плате хранит в себе потенциал для чего-то большего: от
моргания светодиодами до управления сервомоторами, подключения внешних
дисплеев и многого другого. Имя ему - GPIO, и в своем докладе я расскажу
про существующие библиотеки на Python, покажу примеры работы и
постараюсь ответить на ваши вопросы.&lt;/p&gt;
</summary></entry><entry><title>Behavior Driven Development in Python</title><link href="https://pyvideo.org/pycon-russia-2014/behavior-driven-development-in-python.html" rel="alternate"></link><published>2014-06-03T00:00:00+00:00</published><updated>2014-06-03T00:00:00+00:00</updated><author><name>Кирилл Борисов</name></author><id>tag:pyvideo.org,2014-06-03:pycon-russia-2014/behavior-driven-development-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;В докладе будет раскрыта суть behavior-driven подхода к разработке ПО: история возникновения, основы методологии, примеры сценариев, отличия от существующих подходов, имеющиеся инструменты для применения в Python-проектах. А так же опыт его внедрения, возникавшие проблемы и решения.&lt;/p&gt;
</summary></entry><entry><title>Автоматизированные рефакторинги: AST, FST и все-все-все</title><link href="https://pyvideo.org/pycon-russia-2015/avtomatizirovannye-refaktoringi-ast-fst-i-vse-vse-vse.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2015-09-19:pycon-russia-2015/avtomatizirovannye-refaktoringi-ast-fst-i-vse-vse-vse.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Одна из самых неприятных вещей в работе программиста — рутина. К сожалению, её не избежать — работы по поддержке существующего кода заставляют нас вносить одинаковые изменения в несколько файлов разом. По мере роста проекта эта задача вырастает до десятков правок в сотнях файлов, заставляя даже самого терпеливого программиста задуматься о смысли бытия. Но что делать? Автоматизируйте это! В этом докладе мы расскажем о разных способах работать с исходным кодом из Python, и почему это весело.
В докладе:
- Всякую рутинную работу можно превратить в интересную задачу по автоматизации рутины;
- В «батарейках» Python можно найти достаточно средств для самостоятельного анализа исходного кода;
- Топорный подход с «find/replace» часто не подходит из-за необходимости учитывать контекст каждой конкретной правки, равно как и сохранять по возможности оформление исходного файла;
- Регулярные выражения _не_ подходят для разбора исходного кода на сложных языках программирования;
- Любая достаточно продвинутая программа неотличима от магии.&lt;/p&gt;
</summary></entry><entry><title>Flame graph: новый взгляд на привычное профилирование</title><link href="https://pyvideo.org/pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Все хотят знать, как выполняется их код. Многие догадываются, чем это можно измерить. И лишь немногие находят в себе силы продраться через результаты измерений. Проблема ещё более усложняется, если приложение исполняется в нескольких процессах, потоках или на разных серверах. Вал измерений захлестывает разработчика, и уже не видно конца...&lt;/p&gt;
&lt;p&gt;В этом докладе мы попытаемся упростить все это с помощью визуализации, а именно — flame graph'ов, красивых и наглядных . Также вместе рассмотрим процесс сбора данных, их подготовку и на примерах поучимся читать получившиеся графики.&lt;/p&gt;
</summary></entry></feed>