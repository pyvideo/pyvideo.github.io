<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_julien-danjou.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-09-23T00:00:00+00:00</updated><entry><title>Scalable and distributed applications in Python</title><link href="https://pyvideo.org/pycon-fr-2017/scalable-and-distributed-applications-in-python.html" rel="alternate"></link><published>2017-09-23T00:00:00+00:00</published><updated>2017-09-23T00:00:00+00:00</updated><author><name>Julien Danjou</name></author><id>tag:pyvideo.org,2017-09-23:pycon-fr-2017/scalable-and-distributed-applications-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a good language to write highly distributed applications, such as ones you can run on cloud computing platform. In this talk, I'll introduce different mechanisms, tools, and libraries that can be leveraged by Python to run code across multiple nodes and to spread workloads and handle high availability.
We'll see the traps that developers should not fall into and what are the good practice and design to distribute applications.&lt;/p&gt;
</summary></entry><entry><title>Storing metrics at scale with GnocchiThe Python based time series database</title><link href="https://pyvideo.org/fosdem-2017/storing-metrics-at-scale-with-gnocchithe-python-based-time-series-database.html" rel="alternate"></link><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><author><name>Julien Danjou</name></author><id>tag:pyvideo.org,2017-02-05:fosdem-2017/storing-metrics-at-scale-with-gnocchithe-python-based-time-series-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gnocchi is a time series database written in Python, that has been created in the context of the OpenStack cloud computing project. It offers highly-scalable data storage for measurements and provides access to its data via a REST API.In this lecture, we'll discuss the features the project is offering to its users, and how they can easily be leveraged in any application. In a second part, we'll see how the project has been built to scale, how Python was leveraged and made scalable.&lt;/p&gt;
</summary></entry><entry><title>Hy, a Lisp on Python</title><link href="https://pyvideo.org/pycon-fr-2013/hy-a-lisp-on-python.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Julien Danjou</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/hy-a-lisp-on-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hy (&lt;a class="reference external" href="https://github.com/hylang/hy"&gt;https://github.com/hylang/hy&lt;/a&gt;) is an implementation of a Lisp
language on top of Python. It The project has been started this year,
and is making good progress, since a lot of code can already be
executed. Compatibility with Python is one of its core attribute, and in
this regard it follows the path that Clojure took with Java.&lt;/p&gt;
&lt;p&gt;This talk will present you what Hy is, how it works internally
(briefly), what you can accomplish with it, how to contribute, and
obviously how to write code with it!&lt;/p&gt;
</summary></entry></feed>