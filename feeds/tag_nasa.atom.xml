<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_nasa.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-13T00:00:00+00:00</updated><entry><title>Meteorology, Climate and Python: desperately trying to forget technical details</title><link href="https://pyvideo.org/europython-2011/meteorology-climate-and-python-desperately-tryi.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Claude Gibert</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/meteorology-climate-and-python-desperately-tryi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Claude Gibert - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="contents"&gt;
&lt;h4&gt;Contents&lt;/h4&gt;
&lt;p&gt;Python is a great language for writing programming frameworks. Python
frameworks are normally addressed to software developers who are Python
professionals. I developed a software package in a scientific
institution, designed to be used by non-programmers, but also designed
to enable customisation through programming by some users. I finally
designed a three level package:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Python programming framework, addressed whoever wanted to invest in
Python and had plans to develop applications;&lt;/li&gt;
&lt;li&gt;An application built on that framework with an interface designed for
non-programmers;&lt;/li&gt;
&lt;li&gt;Ways of customising the behaviour of the application by providing
some basic Python functions or more elaborated code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the challenges was to offer an application with an easy to use
interface, not graphical, not web-based and not requiring Python
programming. This interface was necessary for batch processing.&lt;/p&gt;
&lt;p&gt;This talk addresses how this project was carried out, the technical
solutions adopted and how Python was introduced in an operational
scientific institution (&lt;a class="reference external" href="http://www.ecmwf.int"&gt;http://www.ecmwf.int&lt;/a&gt;) where most users were
Fortran programmers. Python was introduced as early as 2004 and it was a
challenge to gain acceptance. I will also make a parallel with a project
I am currently working on for NASA (&lt;a class="reference external" href="http://gmao.gsfc.nasa.gov/"&gt;http://gmao.gsfc.nasa.gov/&lt;/a&gt;).
&lt;em&gt;Desperately trying to forget technical details&lt;/em&gt; summarises how I tried,
using Python, to help Meteorology scientists to focus on their domain of
expertise instead of constantly solving technical problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h4&gt;Background:&lt;/h4&gt;
&lt;p&gt;The disciplines of Meteorology and Climate involve numerical modelling
of physical phenomena. The amount of data going in and out of the model
is considerable. The organisation and the storage of data is
complicated, their post-processing is a challenge. Scientists need to
access and process input and output data to monitor the trends of the
input data and to evaluate the performance of their models. Those
statistics, diagnostics, plots and verifications are crucial to the
improvement of the quality of the models. Finding the right data,
decoding it, transforming it to be ready for use are necessary steps to
initiate the pre-processing. All these actions are fundamentally the
same between different prediction centres, but the data organisation and
file formats can differ.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="framework"></category><category term="nasa"></category><category term="parallel"></category><category term="performance"></category><category term="python,"></category><category term="scientific"></category></entry><entry><title>PyCon 2009: Plenary: Morning Lightning Talks (Saturday)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--morning-lightning-talks--sat.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--morning-lightning-talks--sat.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Morning Lightning Talks&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: missing a bit at the beginning]&lt;/p&gt;
&lt;p&gt;(00:00) Building Appliances with Python - Moshe Zadka&lt;/p&gt;
&lt;p&gt;(05:40) Proposed Python License V3 and ... VAN LINDBERG'D - Jesse Noller&lt;/p&gt;
&lt;p&gt;(08: 20) The Status is Not Quo - Mike Pirnat&lt;/p&gt;
&lt;p&gt;(12:55) Cork, building tiny apps - Alex Morega&lt;/p&gt;
&lt;p&gt;(19:10) NASA uses Python? - Katie Cunningham&lt;/p&gt;
&lt;p&gt;(23:35) SQLPython, command line interface to Oracle - Catherine Devlin
(half done)&lt;/p&gt;
&lt;p&gt;(25:20) Gitosis - Tommi Virtanen&lt;/p&gt;
&lt;p&gt;(29:05) SQLPython, command line interface to Oracle (reprised) -
Catherine Devlin&lt;/p&gt;
&lt;p&gt;(35:00) Player Piano - Peter Fein&lt;/p&gt;
&lt;p&gt;(40:10) Why DVCS - James Bennett&lt;/p&gt;
&lt;p&gt;(45:15) PyMite - Dean Hall&lt;/p&gt;
&lt;p&gt;(49:50) web2py - ?&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="cork"></category><category term="gitosis"></category><category term="lindberg"></category><category term="nasa"></category><category term="playerpiano"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pymite"></category><category term="sqlpython"></category><category term="web2py"></category></entry><entry><title>Using Python to Create Robotic Simulations for Planetary Exploration (#159)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--using-python-to-create-robotic-simula.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Dr. Jonathan M Cameron</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--using-python-to-create-robotic-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to Create Robotic Simulations for Planetary Exploration
(#159)&lt;/p&gt;
&lt;p&gt;Presented by Dr. Jonathan M Cameron (Jet Propulsion Laboratory (NASA))&lt;/p&gt;
&lt;p&gt;The primary activity of the Dartslab (&lt;a class="reference external" href="http://dartslab.jpl.nasa.gov"&gt;http://dartslab.jpl.nasa.gov&lt;/a&gt;) at
Jet Propulsion Laboratory (JPL) is to create simulations of robotic
vehicles for planetary exploration. We have created simulations of a
wide variety of robotic vehicles such as spacecraft, rovers, and
airships. We have been using Python in a variety of ways to build our
simulations. In this talk we will outline how we use Python to set up a
runtime environment for our simulations and to tie together
computationally intense C++ code modules at runtime. We will also
discuss how we have been using Python to help prototype and design C++
code.&lt;/p&gt;
</summary><category term="nasa"></category><category term="pycon"></category><category term="pycon2010"></category><category term="robotics"></category><category term="simulation"></category></entry></feed>