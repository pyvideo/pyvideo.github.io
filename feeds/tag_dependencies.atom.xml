<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_dependencies.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-09-05T00:00:00+00:00</updated><entry><title>Taming dependencies with pip</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taming dependencies with pip&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Dependency management sucks. Pip provides some options for making it
suck a bit less, but not all of them are immediately obvious. This talk
will cover a number of strategies for making your deployments faster and
more reliable, and demonstrate how to implement them in practice.&lt;/p&gt;
</summary><category term="dependencies"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="pip"></category></entry><entry><title>Precompiling and deploying Python to any Linux, Mac OS X or FreeBSD system</title><link href="https://pyvideo.org/europython-2011/precompiling-and-deploying-python-to-any-linux-m.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Péter Szabó</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/precompiling-and-deploying-python-to-any-linux-m.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If a Python application has lots of dependencies and requires specific
versions of some of its dependencies, then users can easily get bored or
frustrated installing the application. To make the installation faster
and have less side effects, application authors can create bundles which
contain the application, all its dependencies and possibly the Python
interpreter. This talk presents a way of creating bundles using
StaticPython, and compares it to bb-freeze. StaticPython is a
single-file statically linked version of Python for 32-bit Linux (i386),
containing all standard and some extra Python modules and C extensions.&lt;/p&gt;
&lt;p&gt;Link to
&lt;a class="reference external" href="http://pts-mini-gpl.googlecode.com/svn/trunk/staticpython/doc%20/slides_2011-06-23/pts_staticpython_2011-06-23.html"&gt;slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="dependencies"></category></entry><entry><title>Dependency management with Puppet</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--dependency-management-with-puppet.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Richard Crowley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--dependency-management-with-puppet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dependency management with Puppet&lt;/p&gt;
&lt;p&gt;Presented by Richard Crowley&lt;/p&gt;
&lt;p&gt;Puppet is a configuration management tool that we'll learn to use the
easy way. We'll introduce the Puppet language and the concept of
resources like packages, files, shell commands, and more. We'll use
Puppet to build our dev environment and deploy it to production servers.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We've all been there: religiously following the steps in some blog post
for the 47th time trying to setup a shiny new server. We thought we'd
improved the situation when we copied our Bash history into doit.sh and
committed it. Then along came Pip and requirements.txt files.&lt;/p&gt;
&lt;p&gt;That's where most of us are today. Pip can only manage Python packages
so much of our servers' behavior is left to Lady Luck. Puppet gives us
the power to efficiently and confidently specify everything our program
needs.&lt;/p&gt;
&lt;p&gt;We'll start at square one and the concept of resources, the basic unit
of configuration management. We'll learn the Puppet language's resource
syntax. We'll talk about obvious resource types like packages and files
plus less obvious types like shell commands, users, groups, and daemons.
We'll compose resources into larger ones, declare dependencies between
resources, and accommodate differences between OS X and Linux.&lt;/p&gt;
&lt;p&gt;These Puppet manifests can satisfy our program's dependencies on demand,
making them ideal parts of the deploy process. We'll walk through how
Puppet is used to build production environments both through tools such
as Fabric and Puppet's traditional client-server mode.&lt;/p&gt;
&lt;p&gt;Dependency hell doesn't have to be your reality. Consistent, reliable
environments can be had with Puppet.&lt;/p&gt;
</summary><category term="dependencies"></category><category term="puppet"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>