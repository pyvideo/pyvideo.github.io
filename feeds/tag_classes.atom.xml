<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Classes</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_classes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-03-04T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Inheriting one class from another</title><link href="https://pyvideo.org/python-morsels/inheriting-one-class-another.html" rel="alternate"></link><published>2021-03-04T00:00:00+00:00</published><updated>2021-03-04T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2021-03-04:/python-morsels/inheriting-one-class-another.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To inherit your class from another class, put parentheses after the class name and list parent classes. We allow multiple inheritance in Python, but we usually prefer single class inheritance.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Classes"></category><category term="Inheritance"></category></entry><entry><title>__init__ in Python</title><link href="https://pyvideo.org/python-morsels/what-is-init.html" rel="alternate"></link><published>2021-02-11T00:00:00+00:00</published><updated>2021-02-11T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2021-02-11:/python-morsels/what-is-init.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &lt;cite&gt;__init__&lt;/cite&gt; method is used to initialize a class. The initializer method accepts self (the class instance) along with any arguments the class accepts and then performs initialization steps.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Classes"></category></entry><entry><title>Python's self</title><link href="https://pyvideo.org/python-morsels/what-is-self.html" rel="alternate"></link><published>2020-12-28T00:00:00+00:00</published><updated>2020-12-28T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-12-28:/python-morsels/what-is-self.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's &lt;cite&gt;self&lt;/cite&gt; is really just a variable that points to the current instance of our class. Every method you define must accept &lt;cite&gt;self&lt;/cite&gt; as its first argument.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Classes"></category></entry><entry><title>Classes are everywhere</title><link href="https://pyvideo.org/python-morsels/classes-are-everywhere.html" rel="alternate"></link><published>2020-12-22T00:00:00+00:00</published><updated>2020-12-22T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-12-22:/python-morsels/classes-are-everywhere.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even if you never make your class, you will certainly use classes. A lot of the built-in functions in Python are classes too. Anything that has a type has a class.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Classes"></category></entry><entry><title>What is a class?</title><link href="https://pyvideo.org/python-morsels/what-is-a-class.html" rel="alternate"></link><published>2020-12-09T00:00:00+00:00</published><updated>2020-12-09T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2020-12-09:/python-morsels/what-is-a-class.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Classes are for coupling state (attributes) and functionality (methods). Calling a class returns an instance of that class. Class and &amp;quot;type&amp;quot; are synonyms in Python.&lt;/p&gt;
</content><category term="Python Morsels"></category><category term="Classes"></category></entry></feed>