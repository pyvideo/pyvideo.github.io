<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Glyph</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_glyph.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Keynote - Glyph Lefkowitz</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--keynote---glyph-lefkowitz.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2011-09-05:/djangocon-us-2011/djangocon-2011--keynote---glyph-lefkowitz.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote&lt;/p&gt;
&lt;p&gt;Presented by Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;Talks about using Python for everything in a project and the
difficulties of using different non-Python-based things in your
deployment.&lt;/p&gt;
</content><category term="DjangoCon US 2011"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="keynote"></category></entry><entry><title>The Perfect Python Project</title><link href="https://pyvideo.org/north-bay-python-2024/the-perfect-python-project.html" rel="alternate"></link><published>2024-05-29T00:00:00+00:00</published><updated>2024-05-29T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2024-05-29:/north-bay-python-2024/the-perfect-python-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to create a Python project?&lt;/p&gt;
&lt;p&gt;Do you want it to be good?&lt;/p&gt;
&lt;p&gt;There have been lots of talks and posts and books about how to improve your project by adopting this or that tool or technology, by adopting a best practice.  We all want to improve …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you want to create a Python project?&lt;/p&gt;
&lt;p&gt;Do you want it to be good?&lt;/p&gt;
&lt;p&gt;There have been lots of talks and posts and books about how to improve your project by adopting this or that tool or technology, by adopting a best practice.  We all want to improve.  We all want our code to be more correct. Faster. Friendlier. Easier to use. Better documented. Better tested. To have better coverage. Easier to contribute to. Easier to work on. More welcoming as a community. More repeatable. Less flaky. More secure. More sustainable. Easier to install. Easier to deploy. Easier to manage. Easier to discover. Easier to discuss, to report issues, to investigate issues, to triage issues.&lt;/p&gt;
&lt;p&gt;What if we did all the things though?  How could we make our project perfect?&lt;/p&gt;
&lt;p&gt;In this talk, I will explore a comprehensive review of all of the best practices available to Python projects; a few specific to open source, but most applicable to just about anything written in Python.  In addition to learning about many, many best practices, their importance, and the tools available to facilitate them, I will also propose some solutions to the overwhelming sense of existential dread that one might feel when confronted with all of them at once.&lt;/p&gt;
</content><category term="North Bay Python 2024"></category></entry><entry><title>Python In The Small</title><link href="https://pyvideo.org/north-bay-python-2025/python-in-the-small.html" rel="alternate"></link><published>2025-04-27T00:00:00+00:00</published><updated>2025-04-27T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2025-04-27:/north-bay-python-2025/python-in-the-small.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Glyph&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2025/talk/CE9PMU"&gt;https://pretalx.northbaypython.org/nbpy-2025/talk/CE9PMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python is the biggest programming language in the world. According to the TIOBE index, it is more than 10% ahead of its closest competitor (C++). It is the 800 pound gorilla in the programming language world, used in some of the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Glyph&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2025/talk/CE9PMU"&gt;https://pretalx.northbaypython.org/nbpy-2025/talk/CE9PMU&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python is the biggest programming language in the world. According to the TIOBE index, it is more than 10% ahead of its closest competitor (C++). It is the 800 pound gorilla in the programming language world, used in some of the largest systems on the biggest networks in tech.&lt;/p&gt;
&lt;p&gt;But all that success comes along with … overhead. In this talk I will discuss the ways that Python can scale back &lt;em&gt;down&lt;/em&gt; to a smaller size along various axes, and the reasons why it needs to, if we want it to continue to survive.&lt;/p&gt;
&lt;p&gt;Sun Apr 27 10:50:00 2025 at Reis River Ranch&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
</content><category term="North Bay Python 2025"></category></entry><entry><title>Programming Your Computer With Python</title><link href="https://pyvideo.org/pybay-2023/Programming_Your_Computer_With_Python.html" rel="alternate"></link><published>2023-10-08T12:15:00+00:00</published><updated>2023-10-08T12:15:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2023-10-08:/pybay-2023/Programming_Your_Computer_With_Python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to write code for web applications, scientific applications, and data analysis is extremely popular. If you're here at PyBay, you're probably doing it.  And while there are desktop applications in Python, it's far less popular for that.&lt;/p&gt;
&lt;p&gt;Those of us who write that back-end code are typically …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to write code for web applications, scientific applications, and data analysis is extremely popular. If you're here at PyBay, you're probably doing it.  And while there are desktop applications in Python, it's far less popular for that.&lt;/p&gt;
&lt;p&gt;Those of us who write that back-end code are typically sitting in front of desktop or laptop computers for 6-10 hours a day.  And yet, while we may want those machines to do certain tasks for us, for some reason it rarely occurs to many of us to use Python to solve problems on &lt;em&gt;those&lt;/em&gt; computers rather than the ones in the cloud.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore some of the capabilities that local computation can give you which cloud and web applications can't, and look at some of the ways that Python can help you leverage that power.&lt;/p&gt;
</content><category term="PyBay 2023"></category></entry><entry><title>When "Arbitrary Code Execution" is "Working As Intended": What Code is Python *Supposed* To Execute</title><link href="https://pyvideo.org/pybay-2024/when-arbitrary-code-execution-is-working-as-intended-what-code-is-python-supposed-to-execute.html" rel="alternate"></link><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2024-09-21:/pybay-2024/when-arbitrary-code-execution-is-working-as-intended-what-code-is-python-supposed-to-execute.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When somebody can trick your program into running arbitrary code, that is the worst kind of security bug. But of course, your program has to run &lt;em&gt;some&lt;/em&gt; code or it's not much of a program.  So how do we tell the difference between the two?&lt;/p&gt;
</content><category term="PyBay 2024"></category></entry><entry><title>Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turtles all the way down: Demystifying deferreds, decorators and
declarations&lt;/p&gt;
&lt;p&gt;Presented by Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;Python's flexible object model allows library and framework authors to
add very flexible declarations. Metaclasses, decorators, callable
objects, and operator overloading practically allow libraries to
re-define the language in order to provide a more concise …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turtles all the way down: Demystifying deferreds, decorators and
declarations&lt;/p&gt;
&lt;p&gt;Presented by Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;Python's flexible object model allows library and framework authors to
add very flexible declarations. Metaclasses, decorators, callable
objects, and operator overloading practically allow libraries to
re-define the language in order to provide a more concise, natural style
for that library. Unfortunately, the library user's first experience of
such conveniences is often confusing, because it's not clear what's
going on.&lt;/p&gt;
&lt;p&gt;In this talk, I will try to convince you that all of this wonderful
magic isn't all that weird. This is not a typical how-to session on how
to use a particular feature, either of Python or of Twisted, but will
rather draw examples from Python, Twisted, and Zope to illustrate
techniques you can use to read and understand &amp;quot;magical&amp;quot; Python code.&lt;/p&gt;
</content><category term="PyCon US 2010"></category><category term="decorators"></category><category term="deferreds"></category><category term="delcarations"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Ten Years of Twisted</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--ten-years-of-twisted.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2011-03-11:/pycon-us-2011/pycon-2011--ten-years-of-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten Years of Twisted&lt;/p&gt;
&lt;p&gt;Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;The Twisted event-driven networking engine is well-known in the Python
community. However, only a few of its features are widely understood.
This talk will be a brief conceptual introduction to Twisted, followed
by a survey of its features, their status, and how development …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten Years of Twisted&lt;/p&gt;
&lt;p&gt;Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;The Twisted event-driven networking engine is well-known in the Python
community. However, only a few of its features are widely understood.
This talk will be a brief conceptual introduction to Twisted, followed
by a survey of its features, their status, and how development has been
proceeding over the years, with a special focus on the last two years of
sponsored development.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will begin with a brief introduction to Twisted architectural
concepts; a description of the event loop, connections, and timers. It
will then segue into the many different features that Twisted offers,
including command-line tools for running an out-of-the-box
zero-configuration HTTP server, DNS server, IRC server, and SMTP server.
This will also present the relative maturity and stability of each of
these areas of the code, with a special emphasis on what level of
expertise a developer should have before attempting to use them.
Finally, I will describe some of the features that have been added to
Twisted along the way, including some new and exciting developments that
have been happening recently.&lt;/p&gt;
</content><category term="PyCon US 2011"></category><category term="pycon"></category><category term="pycon2011"></category><category term="twisted"></category></entry><entry><title>Through The Ether And Back Again: What Happens To A Packet When You Send It</title><link href="https://pyvideo.org/pycon-us-2012/through-the-ether-and-back-again-what-happens-to.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2012-03-09:/pycon-us-2012/through-the-ether-and-back-again-what-happens-to.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Many - perhaps even most - Python software involves a network, at least
a little bit. You've probably written some yourself. But do you really
know what happens - to your kernel, to your ethernet card, to Python -
when you call socket.send()? Come to this talk and find out: if you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Many - perhaps even most - Python software involves a network, at least
a little bit. You've probably written some yourself. But do you really
know what happens - to your kernel, to your ethernet card, to Python -
when you call socket.send()? Come to this talk and find out: if you
dare.&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>So Easy You Can Even Do It in JavaScript: Event-Driven Architecture for Regular Programmers</title><link href="https://pyvideo.org/pycon-us-2013/so-easy-you-can-even-do-it-in-javascript-event-d.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/so-easy-you-can-even-do-it-in-javascript-event-d.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this era of rich browser applications, everybody needs to know at
least enough about events to write an 'onclick' handler. But events have
a reputation for being confusing. In this talk I'll explain why events
can be quite easy to understand if you think about them the right …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this era of rich browser applications, everybody needs to know at
least enough about events to write an 'onclick' handler. But events have
a reputation for being confusing. In this talk I'll explain why events
can be quite easy to understand if you think about them the right way,
and how to scale your understanding from trivial browser JavaScript to
distributed systems in Python.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>The Ethical Consequences Of Our Collective Activities</title><link href="https://pyvideo.org/pycon-us-2015/the-ethical-consequences-of-our-collective-activi.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2015-04-12:/pycon-us-2015/the-ethical-consequences-of-our-collective-activi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more of the world is controlled by software, software developers have
an increasing obligation to serve that world well. Yet, we don't yet
have a sense of what makes a good ethical standard. The fast pace,
success, and youth (in both historical and demographic terms) of our
industry …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more of the world is controlled by software, software developers have
an increasing obligation to serve that world well. Yet, we don't yet
have a sense of what makes a good ethical standard. The fast pace,
success, and youth (in both historical and demographic terms) of our
industry have given us the sense that such a standard might not be
required. This talk will correct that misconception.&lt;/p&gt;
</content><category term="PyCon US 2015"></category></entry><entry><title>Shipping Software To Users With Python</title><link href="https://pyvideo.org/pycon-us-2016/glyph-shipping-software-to-users-with-python-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2016-05-31:/pycon-us-2016/glyph-shipping-software-to-users-with-python-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Glyph&lt;/p&gt;
&lt;p&gt;Python is a versatile language, available on a wide variety of platforms. However, when it comes to shipping code to users on those platforms, Python violates Zen Rule 13: “There should be one—and preferably only one—obvious way to do it.”: there are a lot of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Glyph&lt;/p&gt;
&lt;p&gt;Python is a versatile language, available on a wide variety of platforms. However, when it comes to shipping code to users on those platforms, Python violates Zen Rule 13: “There should be one—and preferably only one—obvious way to do it.”: there are a lot of ways to do it, and many of them are far from obvious.  In this talk I'll show you how to build Python code into something a user can use.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2016"></category></entry><entry><title>The Hitchhiker's Guide to TLS &amp; SSL</title><link href="https://pyvideo.org/pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>lvh</name></author><id>tag:pyvideo.org,2016-05-29:/pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer&lt;/p&gt;
&lt;p&gt;Since the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there’s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer&lt;/p&gt;
&lt;p&gt;Since the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there’s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS stacks that’s hard to come by.  Join the makers of PyOpenSSL, the standard library’s ssl module, requests/urllib3, Twisted, the former maintainer of a CA, and&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2016"></category></entry><entry><title>In-Memory Event Resequencing: Realistic Testing For Impossible Bugs</title><link href="https://pyvideo.org/pycon-us-2017/in-memory-event-resequencing-realistic-testing-for-impossible-bugs.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2017-05-19:/pycon-us-2017/in-memory-event-resequencing-realistic-testing-for-impossible-bugs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we all know, we should write testable code, and automated tests. But
as we also know, no test plan survives contact with the real world.
Complex, distributed systems fail in complex, distributed ways, and even
the simplest web app today is a complex distributed system. So, as our …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we all know, we should write testable code, and automated tests. But
as we also know, no test plan survives contact with the real world.
Complex, distributed systems fail in complex, distributed ways, and even
the simplest web app today is a complex distributed system. So, as our
code accrues little fixes to bugs that only show up in production, our
test suites eventually either become slow integration testing
monstrosities that are &amp;quot;realistic&amp;quot; but flaky and unreliable, or useless
piles of mocks which are fast and deterministic but don't give you
confidence.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore how to leverage event-driven programming, or
&amp;quot;async I/O&amp;quot;, to structure code in such a way that its tests are fast,
realistic, and reliable, even in the face of horrible race-conditions
you only discover in production.&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Creating And Consuming Modern Web Services with Twisted</title><link href="https://pyvideo.org/pycon-us-2017/creating-and-consuming-modern-web-services-with-twisted.html" rel="alternate"></link><published>2017-05-18T00:00:00+00:00</published><updated>2017-05-18T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-05-18:/pycon-us-2017/creating-and-consuming-modern-web-services-with-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will show students how to write applications and services
which efficiently publish and consume services and APIs.&lt;/p&gt;
&lt;p&gt;To do so, we will combine 4 Python-based technologies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jupyter is a real-time development environment.&lt;/li&gt;
&lt;li&gt;Twisted is a powerful platform for network programming that supports
many protocols, including HTTP.&lt;/li&gt;
&lt;li&gt;Klein …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will show students how to write applications and services
which efficiently publish and consume services and APIs.&lt;/p&gt;
&lt;p&gt;To do so, we will combine 4 Python-based technologies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jupyter is a real-time development environment.&lt;/li&gt;
&lt;li&gt;Twisted is a powerful platform for network programming that supports
many protocols, including HTTP.&lt;/li&gt;
&lt;li&gt;Klein is a Twisted-based web application framework.&lt;/li&gt;
&lt;li&gt;Treq is a Requests-style HTTP client based on Twisted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By combining all of these we will guide students through &lt;em&gt;interactively
prototyping&lt;/em&gt; a production quality web application that &lt;em&gt;publishes&lt;/em&gt; both
&lt;em&gt;service APIs&lt;/em&gt; and web resources such as HTML, and that can &lt;em&gt;efficiently
consume many back-end services&lt;/em&gt; such as 3rd-party APIs.&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>How To Keep A Secret</title><link href="https://pyvideo.org/pycon-us-2023/how-to-keep-a-secret.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-to-keep-a-secret.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API keys, passwords, auth tokens, cryptographic secrets… in the era of
cloud-based development, we've all got a bunch of them. But where do you
put them? How do you keep them safe? And how can you access them
conveniently from your Python code, both in development and production,
without …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API keys, passwords, auth tokens, cryptographic secrets… in the era of
cloud-based development, we've all got a bunch of them. But where do you
put them? How do you keep them safe? And how can you access them
conveniently from your Python code, both in development and production,
without putting them at risk?&lt;/p&gt;
&lt;p&gt;In this talk, I'll review information security best practices for
managing secrets as well as Python-specific tips and tricks.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Program Your Own Computer in Python</title><link href="https://pyvideo.org/pycon-us-2025/program-your-own-computer-in-python.html" rel="alternate"></link><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2025-05-17:/pycon-us-2025/program-your-own-computer-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to write code for web applications, scientific applications, and data analysis is extremely popular. Those of us who write that sort of code are typically sitting in front of desktop or laptop computers for 6-10 hours a day. And yet, while we may want those machines to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to write code for web applications, scientific applications, and data analysis is extremely popular. Those of us who write that sort of code are typically sitting in front of desktop or laptop computers for 6-10 hours a day. And yet, while we may want those machines to do certain tasks for us, for some reason it rarely occurs to many of us to use Python to solve problems on those computers rather than the ones in the cloud.&lt;/p&gt;
&lt;p&gt;Perhaps it's just because the APIs for controlling them are so different, and it seems difficult to get started.&lt;/p&gt;
&lt;p&gt;In this talk I will explain how to use Python to integrate with your desktop environment; how to schedule tasks, schedule notifications, and script the applications you already use. We'll have a focus on macOS for demonstration purposes, but will also including pointers to similar tools for desktop Linux and Windows.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>The Automatic Computer and You: A Meditation Upon The History And Future Of Software Development</title><link href="https://pyvideo.org/pygotham-2018/the-automatic-computer-and-you-a-meditation-upon-the-history-and-future-of-software-development.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2018-10-06:/pygotham-2018/the-automatic-computer-and-you-a-meditation-upon-the-history-and-future-of-software-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As members of the Python community, we all believe that computers have the
_potential_ to do great things.&lt;/p&gt;
&lt;p&gt;But are the things we're doing with computers, overall, _actually_ great?
What is the _purpose_ of computers?  Why do we build software for them?  How
can we do it better?  And …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As members of the Python community, we all believe that computers have the
_potential_ to do great things.&lt;/p&gt;
&lt;p&gt;But are the things we're doing with computers, overall, _actually_ great?
What is the _purpose_ of computers?  Why do we build software for them?  How
can we do it better?  And: should we be making anything other than video
games?&lt;/p&gt;
&lt;p&gt;In this talk, Glyph will answer those questions, and more; some of his
proposed answers might surprise you.  He will present extensive digressions
on the history of the craft and industry of software development, the impact
that recent events have had on the course of that history, and he will
contemplate new directions which might lead toward a brighter tomorrow.
Along the way, he will consider what lessons we might learn from the
progression of other, similar fields, such as medieval church architecture
and nuclear power generation.&lt;/p&gt;
</content><category term="PyGotham 2018"></category></entry><entry><title>Automat</title><link href="https://pyvideo.org/pyninsula-2017/automat.html" rel="alternate"></link><published>2017-02-22T00:00:00+00:00</published><updated>2017-02-22T00:00:00+00:00</updated><author><name>glyph</name></author><id>tag:pyvideo.org,2017-02-22:/pyninsula-2017/automat.html</id><content type="html"></content><category term="Pyninsula 2017"></category></entry></feed>