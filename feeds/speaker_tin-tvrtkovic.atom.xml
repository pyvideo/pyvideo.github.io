<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Tin Tvrtkovic</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tin-tvrtkovic.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python has a macro language: it's Python</title><link href="https://pyvideo.org/pycon-italia-2022/python-has-a-macro-language-its-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Tin Tvrtkovic</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/python-has-a-macro-language-its-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a macro language: it’s Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;A small but growing number of Python projects, including &lt;tt class="docutils literal"&gt;attrs&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;cattrs&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;incant&lt;/tt&gt;, use Python to generate Python.&lt;/p&gt;
&lt;p&gt;We will example concrete cases of code generation in these libraries and
go over the ‘how’ and the ‘why’. Macros …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a macro language: it’s Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;A small but growing number of Python projects, including &lt;tt class="docutils literal"&gt;attrs&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;cattrs&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;incant&lt;/tt&gt;, use Python to generate Python.&lt;/p&gt;
&lt;p&gt;We will example concrete cases of code generation in these libraries and
go over the ‘how’ and the ‘why’. Macros in mainstream languages are
generally a tool for metaprogramming, probably the most famous examples
being preprocessor directives in C and C++, and Rust macros.&lt;/p&gt;
&lt;p&gt;Python has rich metaprogramming capabilities baked in through the
compile and eval built-in functions, although a little care needs to be
taken for the generated code to be debuggable and properly shown in
track staces.&lt;/p&gt;
&lt;p&gt;We will examine one concrete example of metaprogramming in each of the
attrs, cattrs and incant libraries.&lt;/p&gt;
&lt;p&gt;Speaker: Tin Tvrtkovic&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="compiler and interpreters"></category><category term="performance"></category></entry></feed>