<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_christopher-ball.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-12T00:00:00+00:00</updated><entry><title>PyViz: Easy Visualization and Exploration for all your Data</title><link href="https://pyvideo.org/scipy-2018/pyviz-easy-visualization-and-exploration-for-all-your-data.html" rel="alternate"></link><published>2018-07-12T00:00:00+00:00</published><updated>2018-07-12T00:00:00+00:00</updated><author><name>James A. Bednar</name></author><id>tag:pyvideo.org,2018-07-12:scipy-2018/pyviz-easy-visualization-and-exploration-for-all-your-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, you will learn how to use the PyViz suite of tools to quickly build simple or complex visualizations that reveal and give insight into your data. You'll start by using the HoloViews library to annotate your numpy, pandas, or xarray data and make it have an instantly available visual representation. These declarative objects make it easy to visualize how different sets of data relate to each other, by flexibly overlaying and laying out data in any combination. Once you have these objects, you can select, slice, or sample your data as needed, quickly making new types of plots so that you can fully understand your data. You'll be able to choose between Matplotlib plots suitable for publications, or Bokeh plots that support interactive exploration in Jupyter Notebooks or as separate dashboard apps. You'll then see how to use HoloViews and related tools to transform your data for viewing in different ways, defining complex analysis pipelines if needed that preserve the raw data while making each step visible for analysis. When your datasets are too large for web browsers, we'll show how to use Datashader to reveal &lt;em&gt;all&lt;/em&gt; of the data faithfully, rendering it into an image that can be displayed safely even for billions of datapoints. When it is time to share your results with non-developer colleagues, we'll show how to use Param to add interactive widgets to let them explore parameter spaces, how to link plots to respond to user selections and events, and how to put plots and widgets together into a separately launchable dashboard. Throughout, we will demonstrate how to customize plots as needed, how to follow up on specific topics to get more information, and how and when to use each of the libraries described. The aim is to give users the tools and know-how to effectively explore, analyze and visualize even large and complex datasets easily, concisely, and reproducibly. You can see a detailed breakdown of the topics included, including the full training materials as Jupyter notebooks, at &lt;a class="reference external" href="https://pyviz.github.io/pyviz/tutorial/00_Welcome.html"&gt;https://pyviz.github.io/pyviz/tutorial/00_Welcome.html&lt;/a&gt; .&lt;/p&gt;
</summary><category term="tutorial"></category></entry></feed>