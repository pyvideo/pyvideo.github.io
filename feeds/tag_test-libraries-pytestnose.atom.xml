<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Test Libraries (pytest/nose/...)</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_test-libraries-pytestnose.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Advanced pytest</title><link href="https://pyvideo.org/europython-2019/advanced-pytest.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Raphael Pierzina</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/advanced-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many reasons why I think pytest is a fantastic test framework:
assertion introspection, setup and teardown with fixtures, parametrized
tests. But plugins are the real game changer!&lt;/p&gt;
&lt;p&gt;We'll dive right into customizing a test suite by developing a series of
pytest plugins based on a few neat …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many reasons why I think pytest is a fantastic test framework:
assertion introspection, setup and teardown with fixtures, parametrized
tests. But plugins are the real game changer!&lt;/p&gt;
&lt;p&gt;We'll dive right into customizing a test suite by developing a series of
pytest plugins based on a few neat hacks. We'll learn how to
automatically add markers to slow running tests, run only tests that use
a fixture which can be specified on the CLI, generate test reports in a
custom format, and automatically create GitHub issues for test
regressions. We'll wrap up this talk by using Cookiecutter to create
Python packages from our plugins that are ready to be published on PyPI.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="python"></category></entry><entry><title>API-schema-based testing with schemathesis</title><link href="https://pyvideo.org/europython-2020/api-schema-based-testing-with-schemathesis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/api-schema-based-testing-with-schemathesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time.&lt;/p&gt;
&lt;p&gt;I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo.&lt;/p&gt;
&lt;p&gt;I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools.&lt;/p&gt;
&lt;p&gt;By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today.&lt;/p&gt;
&lt;p&gt;The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="RESTful"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Django Testing on Steroid: pytest + Hypothesis</title><link href="https://pyvideo.org/europython-2020/django-testing-on-steroid-pytest-hypothesis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bojan Miletic</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/django-testing-on-steroid-pytest-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generate hundred of test with few lines of code&lt;/p&gt;
&lt;p&gt;The talk should hopefully provided value to all listeners, regardless of their knowledge level, but preferably you have some knowledge of pytest test parametrization&lt;/p&gt;
&lt;p&gt;We'll use a simple Django project, setup initial tests using pytest with some parallelization in the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generate hundred of test with few lines of code&lt;/p&gt;
&lt;p&gt;The talk should hopefully provided value to all listeners, regardless of their knowledge level, but preferably you have some knowledge of pytest test parametrization&lt;/p&gt;
&lt;p&gt;We'll use a simple Django project, setup initial tests using pytest with some parallelization in the opening part and afterwards start extending them with Hypothesis. We'll go over the details, how you can use them to detect edge cases, extend test coverage and if time allows it how you can use them to test django models.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Django"></category><category term="TDD"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry><entry><title>Running Unit Test on Top of Serverless Service</title><link href="https://pyvideo.org/europython-2020/running-unit-test-on-top-of-serverless-service.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Adinata Thayib</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/running-unit-test-on-top-of-serverless-service.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increase your parallelization by 50x&lt;/p&gt;
&lt;p&gt;I will share on how to utilize serverless architecture for a less common scenario - unit testing.
As part of the talk, we will also discuss different approaches to parallelizing unit test suite execution.
Attendees will also learns on cost-benefit analysis related to increasing developer …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increase your parallelization by 50x&lt;/p&gt;
&lt;p&gt;I will share on how to utilize serverless architecture for a less common scenario - unit testing.
As part of the talk, we will also discuss different approaches to parallelizing unit test suite execution.
Attendees will also learns on cost-benefit analysis related to increasing developer productivity.&lt;/p&gt;
&lt;p&gt;Outline:
- Introduction
- Different approaches to parallelizing unit test execution with pro &amp;amp; cons
- What we learned (gotcha) when implementing serverless as a unit test runner
- Cost-Benefit Analysis and usage report,
- Q&amp;amp;A&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Case Study"></category><category term="Multi-Processing"></category><category term="Public Cloud (AWS/Google/...)"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Tooling"></category></entry><entry><title>ScanAPI</title><link href="https://pyvideo.org/europython-2020/scanapi.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Camila Maia</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/scanapi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automated Integration Testing and Live Documentation for your API&lt;/p&gt;
&lt;p&gt;In the current IT scenario, the use of APIs is, without question, widely vast, popular, and significant. It seems at least prudent to ensure they are working properly, as expected. To guarantee the quality of the data that is being …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automated Integration Testing and Live Documentation for your API&lt;/p&gt;
&lt;p&gt;In the current IT scenario, the use of APIs is, without question, widely vast, popular, and significant. It seems at least prudent to ensure they are working properly, as expected. To guarantee the quality of the data that is being consumed or used. To ensure that communication between services is occurring as expected. To ensure the system does, in fact, what it should do.&lt;/p&gt;
&lt;p&gt;ScanAPI is an open-source library that was created to solve all these points. ScanAPI provides an easy way to create integration tests for REST APIs via configuration files.&lt;/p&gt;
&lt;p&gt;The three main reasons that led me to the creation of this library were:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;To be a firefighter in a scenario where most of the reported bugs were directly related to some API contract being broken or some endpoint having a behavior different from that expected by the consumer.&lt;/li&gt;
&lt;li&gt;To need to deal with APIs with outdated or mistaken documentation.&lt;/li&gt;
&lt;li&gt;To need to debug an endpoint in the middle of a &amp;quot;chain&amp;quot; of other endpoints. Where I needed to recreate a state that depends on the action of other endpoints.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given a fictitious example: debug an endpoint to reserve seats on an airplane, which depends directly on the previous call of an endpoint for user registration.&lt;/p&gt;
&lt;p&gt;The ScanAPI is open-source and written in Python. However, it can be used in APIs created in any other programming language, since the tests provided by it are integration tests.&lt;/p&gt;
&lt;p&gt;With ScanAPI you can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use environment variables&lt;/li&gt;
&lt;li&gt;Create variables&lt;/li&gt;
&lt;li&gt;Chaining requests - making a request from a result of previous responses&lt;/li&gt;
&lt;li&gt;Hide sensitive information of the requests and responses in the generated report&lt;/li&gt;
&lt;li&gt;Write Python code - if you want, it's not necessary :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Topics I intend to address in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Motivation to create the library&lt;/li&gt;
&lt;li&gt;What problems the library solves&lt;/li&gt;
&lt;li&gt;How to test an API using a ScanAPI&lt;/li&gt;
&lt;li&gt;Show the documentation generated by ScanAPI&lt;/li&gt;
&lt;li&gt;An overview of how it is implemented&lt;/li&gt;
&lt;li&gt;Where it is currently being used&lt;/li&gt;
&lt;li&gt;Next steps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Project Link: &lt;a class="reference external" href="https://github.com/scanapi/scanapi"&gt;https://github.com/scanapi/scanapi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Prerequisites:
- Python
- REST APIs
- Integration tests&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Open-Source"></category><category term="RESTful"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry><entry><title>Social distancing from your system’s dependencies: An API’s Story</title><link href="https://pyvideo.org/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Olga Matoula</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot of ugly tests.&lt;/p&gt;
&lt;p&gt;We soon realized our tests required more care and they invoked some difficult questions. Is it possible that the limitations of the testing framework add or give away flaws on your design? Should your architecture be affected by your efforts to test the system? What did we learn in the process?&lt;/p&gt;
&lt;p&gt;This presentation will introduce some testing isolation concepts and discuss how the choice of each can affect your architecture design. We will go through the basics of the unittest.mock library and the pytest framework and explore their potential. By diving into scenarios, attendees will learn where these features can be applied more effectively, and more importantly, how an API design can and should be driven by the value of testability, allowing the tests to be structured around clarity, readability and a happy Continuous Integration platform.&lt;/p&gt;
&lt;p&gt;The target audience includes beginner Pythonistas, who are looking for ways to structure and test their code cleanly, while intermediate developers will enjoy a fun refreshment on dependency isolation and leave the session with practical examples on how to use it more effectively.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Clean Code"></category><category term="System Architecture"></category><category term="TDD"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry><entry><title>Tests that (Almost) Write Themselves</title><link href="https://pyvideo.org/europython-2020/tests-that-almost-write-themselves.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Stefan Baerisch</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/tests-that-almost-write-themselves.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hints for Golden Master Testing in Python&lt;/p&gt;
&lt;p&gt;What do we do when the only test requirements we have are &amp;quot;the new system should have the exact same results as the old system&amp;quot;? Golden Master Testing may help.
The idea behind golden master testing, also called characterization testing, is quite …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hints for Golden Master Testing in Python&lt;/p&gt;
&lt;p&gt;What do we do when the only test requirements we have are &amp;quot;the new system should have the exact same results as the old system&amp;quot;? Golden Master Testing may help.
The idea behind golden master testing, also called characterization testing, is quite simple: We don't write test cases that specify what the expected result is. Instead, we take the output from a prior, working version of a program (the golden master) and compare it to the result of the current version. If there is a difference between the output of the current system and the golden master, we may have found a bug.&lt;/p&gt;
&lt;p&gt;If implemented right, Golden Master testing can be very useful to test legacy systems or data processing programs with complex input and outputs. Golden Master Testing is also a good addition to our regression testing processes.&lt;/p&gt;
&lt;p&gt;In practice, implementing Golden Master testing is not quite that easy.  Just checking if the outputs are equal will often not work: If the output includes times and dates or random elements, a simple comparison will not be enough. Luckily for use, with Python, we have the perfect tool to process all kinds of outputs and only look at the parts of the output that are important for the outcome of the test.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at best practices for Golden Master Testing with Python. We will see techniques to identify and quantify the relevant differences between our golden master and the current output.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="Tooling"></category></entry><entry><title>Tools for maintaining an open source Python project</title><link href="https://pyvideo.org/europython-2020/tools-for-maintaining-an-open-source-python-project.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/tools-for-maintaining-an-open-source-python-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walkthrough of some great tools I use for developing, testing, maintaining and managing projects&lt;/p&gt;
&lt;p&gt;There is a wealth of amazing tools freely available to open source software developers to use to maintain their projects. Practically every problem we face or are likely to face in software development has …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walkthrough of some great tools I use for developing, testing, maintaining and managing projects&lt;/p&gt;
&lt;p&gt;There is a wealth of amazing tools freely available to open source software developers to use to maintain their projects. Practically every problem we face or are likely to face in software development has been lived through and solved many times over. Patterns emerge for dealing with development practises and we build our software using the tools made by the previous generation of developers.&lt;/p&gt;
&lt;p&gt;We're very fortunate to operate in an amazing open source ecosystem where we've learned we're stronger when we build on each other's foundations. We're constantly laying new foundations for ourselves and we share our ways of working with the world. We now have a very sophisticated set of tools for developing, managing, testing and documenting our new projects without reinventing the wheel.&lt;/p&gt;
&lt;p&gt;But we don't discover all the tools at once - we pick them up as we go along, as we find uses for them and we hear about them. I'm going to share a range of great tools I use to maintain some popular open source Python projects, and explain how the difference they've made.&lt;/p&gt;
&lt;p&gt;The talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Software packaging and distribution&lt;/li&gt;
&lt;li&gt;Licensing&lt;/li&gt;
&lt;li&gt;Virtual environments&lt;/li&gt;
&lt;li&gt;Software testing&lt;/li&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Git &amp;amp; GitHub&lt;/li&gt;
&lt;li&gt;Contributor community&lt;/li&gt;
&lt;li&gt;Project management tools&lt;/li&gt;
&lt;li&gt;Documentation tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk demonstrates examples for development of Python projects on Linux, but the tools can be used cross-language and cross-platform.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Community"></category><category term="Documentation"></category><category term="Git"></category><category term="Open-Source"></category><category term="Test Libraries (pytest/nose/...)"></category></entry></feed>