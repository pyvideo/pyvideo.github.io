<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pytexas-2011.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-09-10T00:00:00+00:00</updated><entry><title>About Python Namespaces (and Code Objects)</title><link href="https://pyvideo.org/pytexas-2011/about-python-namespaces--and-code-objects.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/about-python-namespaces--and-code-objects.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An explanation of some of the underlying concepts of Python, come learn
about names and values placed in namespaces, modified by code objects
and collected into modules.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll explore namespaces using the Python interactive prompt, with
graphical display of object trees using Graphviz. Also explained will be
the namespace concepts of closures and early binding; how to define new
objects without subclassing via use of default/curried arguments and
closures.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous Web Development with Tornado</title><link href="https://pyvideo.org/pytexas-2011/asynchronous-web-development-with-tornado.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Josh Marshall</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/asynchronous-web-development-with-tornado.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to non-blocking web development with Tornado, an
open-source server and simple framework from Facebook/FriendFeed.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web frameworks like Django, Flask, etc. are great for most traditional
web sites. However, there is a growing need to produce web applications
that are responsive to external &amp;quot;events&amp;quot;, whether a response from
Twitter's API or a new message in an online chat room. Newer,
non-blocking frameworks like Tornado seek to address this in a scalable
manner.&lt;/p&gt;
&lt;p&gt;This talk will briefly introduce non-blocking principles and patterns,
and move quickly into an overview of the library, as well as use cases
and anti- use cases. A portion of the time will also be spent pointing
out community libraries that are building on Tornado's foundation.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction&lt;ol class="arabic"&gt;
&lt;li&gt;Why another framework?&lt;/li&gt;
&lt;li&gt;Intro to Asynchronous Design&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Overview of a Tornado project&lt;ol class="arabic"&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Basic (blocking) Request Handlers&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Asynchronous Handlers&lt;/li&gt;
&lt;li&gt;To block or not to block&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Batteries included&lt;ol class="arabic"&gt;
&lt;li&gt;Auth module&lt;/li&gt;
&lt;li&gt;Options module&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;UIModules&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Community&lt;ol class="arabic"&gt;
&lt;li&gt;Tornad.io&lt;/li&gt;
&lt;li&gt;No-SQL libraries&lt;/li&gt;
&lt;li&gt;Twisted integration&lt;/li&gt;
&lt;li&gt;Torn Admin&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Cassandra for Python Developers</title><link href="https://pyvideo.org/pytexas-2011/cassandra-for-python-developers.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Tyler Hobbs</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/cassandra-for-python-developers.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Apache Cassandra is an open source, distributed (NoSQL) database. This
will give a high level introduction to Cassandra and its data model; it
will detail the features of pycassa, the Python client library for
Cassandra, and how to interact with Cassandra through it.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Being non-relational, Cassandra's data model is fundamentally different
from that of a relational database. In addition, it uses an RPC based
API rather than a query language. On top of that, Cassandra is a
distributed database, so the client must be aware of and interact with
multiple nodes in the cluster. All of these attributes of Cassandra make
the client libraries a different experience. Fortunately, the Python
client library is the easiest way to use Cassandra. This talk will start
with a high level overview of the clustering model of Cassandra then its
data model. A large portion of the talk will cover the pycassa methods
that interact with the data model of Cassandra, i.e. inserting,
fetching, and removing data. A small amount of time will be dedicated to
describing connection pooling in pycassa -- how it handles node
failures, distributes requests, etc. The final 10 minutes will be
devoted to Q&amp;amp;A.&lt;/p&gt;
</summary><category term="fetching"></category></entry><entry><title>Custom Decorators for Authentication and Authorization</title><link href="https://pyvideo.org/pytexas-2011/custom-decorators-for-authentication-and-authoriz.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/custom-decorators-for-authentication-and-authoriz.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to writing decorators, with an example of how they can
be used to handle common authentication and authorization actions for a
set of web services.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To provide access to enterprise directory data and services to
developers at Texas A&amp;amp;M; University, we have implemented a set of
RESTful web services, using Django as our framework. Because these
services include access to protected data, all web service clients must
authenticate and be authorized to access a particular service. In order
to implement the logic for making authentication and authorization
decisions in one place, and cleanly apply it to any view, we wrote a
custom decorator. This talk will cover the basic concepts behind
decorators, how to write a decorator, and walk through our
implementation of a decorator for authN/authZ.&lt;/p&gt;
</summary></entry><entry><title>Daemon Slaying! Or, Unix Daemons in Python for fun and profit!</title><link href="https://pyvideo.org/pytexas-2011/daemon-slaying--or--unix-daemons-in-python-for-fu.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/daemon-slaying--or--unix-daemons-in-python-for-fu.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the in's and out's of creating Unix Daemons in Python. Walker Hale
will walk you through several examples, gotchas, and tips and tricks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daemons are those pieces of software in Unix (including Linux and Mac OS
X) that run in the background and typically start automatically during
system boot. Times when you might want a daemon include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Monitoring an &amp;quot;inbox&amp;quot; directory in situations where a cron job is not
appropriate&lt;/li&gt;
&lt;li&gt;Managing (possibly multiple) instances of software according to
business rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although most daemons are written in C, Python is a great alternative.&lt;/p&gt;
</summary><category term="gotchas"></category></entry><entry><title>Getting Started with PyMongo</title><link href="https://pyvideo.org/pytexas-2011/getting-started-with-pymongo.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/getting-started-with-pymongo.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A look at how to get started with MongoDB using Python. The talk will
cover basic concepts, a brief walkthrough of some more advanced
features, and how Texas A&amp;amp;M is using MongoDB and Python to solve some
large data problems.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last month, we've started an effort to aggregate our logs so we
can do some real-time, holistic log analysis. Among other things, we are
tracking failed logins across all points of entry, identifying possibly
compromised accounts (simultaneous logins from multiple IPs,
geographically disparate logins), and identifying high-volume mailers
across multiple mail relays. The talk will include an introduction to
MongoDB (NoSQL, data structures, querying, indexing, differences from
relational databases, etc); some important performance and reliability
features like its support for replica sets, sharding, and map/reduce;
and some very cool features like GridFS and geospatial indexing. All of
this, with the exception of database configuration, will be demoed with
MongoDB's python client.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2011/lightning-talk1.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/lightning-talk1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Comprised of five minute presentations crammed together back to back,
this event is frequently one of the most popular and entertaining events
at PyCon and PyTexas.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Logging De-Mystified! Basics to Advanced!</title><link href="https://pyvideo.org/pytexas-2011/logging-de-mystified--basics-to-advanced.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/logging-de-mystified--basics-to-advanced.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk covers the Python Logging Module!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Walker Hale will explore the standard Python Logging Module and provide
a tour from the basics through intermediate examples, and touch on
advanced logging strategies.&lt;/p&gt;
&lt;p&gt;Do you write programs that run longer than 5 minutes? Would you like to
leverage Python's excellent logging system more fully? Even if you don't
use Python for your long-running processes, you will learn valuable and
widely- applicable logging techniques.&lt;/p&gt;
</summary></entry><entry><title>Packaging</title><link href="https://pyvideo.org/pytexas-2011/packaging.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/packaging.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Voted on by the PyTexas community, this talk is guaranteed to be
insightful and informative. We just don't know what it is yet.&lt;/p&gt;
</summary></entry><entry><title>Programming a Simple Game in Python</title><link href="https://pyvideo.org/pytexas-2011/programming-a-simple-game-in-python.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Greg Lindstrom</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/programming-a-simple-game-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you missed Greg Lindstrom's first talk on programming a simple game
in Python, check out this one. This time, you'll be building a &amp;quot;Wheel of
Fortune&amp;quot;-style game.&lt;/p&gt;
</summary></entry><entry><title>Simplify your (Python) Life</title><link href="https://pyvideo.org/pytexas-2011/simplify-your--python--life.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Sameer Khan</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/simplify-your--python--life.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll go over some intermediate to advanced topics and consider pros and
cons of choosing the simpler approach vs. the possibly more complicated
or redundant one. The aim is to reduce the number of language APIs and
constructs most programmers have to carry in their head to a smaller and
more coherent set. Along the way some best practices will also be
discussed that are at a higher level than things that can be flagged by
automated syntax checking tools such as pylint, pyflakes, etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Following are the topics we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Language/API design and how warts can creep into even well designed
products over time.&lt;/li&gt;
&lt;li&gt;&amp;quot;Worse is better&amp;quot; approach may be good enough (&amp;quot;satisficing&amp;quot;).&lt;/li&gt;
&lt;li&gt;An eclectic mix of language constructs that usually trip
newcomers--and sometimes even experienced programmers--which we'll
survey:&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;strong&gt;new&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;del&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;call&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;slots&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;classmethod vs. staticmethod&lt;/li&gt;
&lt;li&gt;decorators (guidelines for writing your own)&lt;/li&gt;
&lt;li&gt;class decorators vs. metaclasses&lt;/li&gt;
&lt;li&gt;delegation via getattr&lt;/li&gt;
&lt;li&gt;Interfaces and getattr&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;We'll see how delegation and interfaces tie into the thinking behind
GoF Design Patterns.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>The Magic of Metaprogramming</title><link href="https://pyvideo.org/pytexas-2011/the-magic-of-metaprogramming.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Jeff Rush</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/the-magic-of-metaprogramming.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the magic of writing programs that monitor, alter and react to the
execution of program code by responding to imports, changes to
variables, calls to functions and invocations of the builtins. This talk
goes beyond the static world of metaclasses and class decorators into
the dynamics of tracepoints.&lt;/p&gt;
</summary></entry><entry><title>Using Message Queues for Distributed Processing</title><link href="https://pyvideo.org/pytexas-2011/using-message-queues-for-distributed-processing.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Jason Zylks</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/using-message-queues-for-distributed-processing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Message queues provide a reliable, language agnostic method for sharing
data between processes for distributed processing, and to manage work
flows. This talk will examine the role of message queues in a redesign
of the provisioning process for Texas A&amp;amp;M; University's enterprise
directory.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About six months ago we moved our account provisioning process from a
monolithic Perl script to a set of distributed, interconnected python
scripts. By using message queues (specifically beanstalkd) to pass
messages between the processes, we were able to build a system that was
much faster, more reliable and more flexible.&lt;/p&gt;
&lt;p&gt;I will walk through the process that led us to choose beanstalkd, look
at some alternatives that are available, and describe some use cases for
message queues.&lt;/p&gt;
</summary></entry><entry><title>virtualenv, pip, and virtualenvwrapper</title><link href="https://pyvideo.org/pytexas-2011/virtualenv--pip--and-virtualenvwrapper.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Jon Nials</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/virtualenv--pip--and-virtualenvwrapper.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;virtualenv, pip, and virtualenvwrapper are vital tools for any Python
developer. This beginner-level presentation will introduce each of
these.&lt;/p&gt;
</summary></entry></feed>