<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrew-walker.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-04T00:00:00+00:00</updated><entry><title>Python Powered Computational Geometry</title><link href="https://pyvideo.org/pycon-au-2012/python-powered-computational-geometry.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Andrew Walker</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/python-powered-computational-geometry.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of
science, engineering and mathematics including: Computation Fluid
Dynamics (CFD), Finite Element Model&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of
science, engineering and mathematics including: Computation Fluid
Dynamics (CFD), Finite Element Modelling (FEM), Computer Aided Design /
Modelling (CAD/CAM), Robotics, Computer Graphics and Collision
Detection.&lt;/p&gt;
&lt;p&gt;While it is possible to quickly implement naive versions of
computational geometry algorithms in any language, such algorithms can
be expensive and time consuming to write, debug and maintain. The advent
of a number of tools, including new bindings for the Computational
Geometry Algorithms Library (CGAL) and the ipython notebook make Python
an ideal tool for experimentation with fast and numerically robust
algorithms.&lt;/p&gt;
&lt;p&gt;The presentation will include demonstrations of a number of common two-
and three-dimensional computational geometry algorithms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Triangulations (and Voronoi diagrams)&lt;/li&gt;
&lt;li&gt;Mesh refinement&lt;/li&gt;
&lt;li&gt;Intersection testing&lt;/li&gt;
&lt;li&gt;Alpha shapes&lt;/li&gt;
&lt;li&gt;Convex hulls&lt;/li&gt;
&lt;li&gt;Constructive Solid Geometry&lt;/li&gt;
&lt;li&gt;Minkowski Sums&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="geometry"></category></entry><entry><title>Managing scientific simulations with Python with RQ (Redis Queue)</title><link href="https://pyvideo.org/pycon-au-2013/managing-scientific-simulations-with-python-with.html" rel="alternate"></link><published>2013-07-07T00:00:00+00:00</published><updated>2013-07-07T00:00:00+00:00</updated><author><name>Andrew Walker</name></author><id>tag:pyvideo.org,2013-07-07:pycon-au-2013/managing-scientific-simulations-with-python-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing scientific software in support of experimentation and simulation
is a challenging task. It is even more challenging in cases where such
software must be distributed across multiple machines. Existing methods
for addressing this problem can require either significant effort to
maintain and extend. Alternative approaches such as message queues can
be incredibly difficult to install for novices.&lt;/p&gt;
&lt;p&gt;This presentation will demonstrate a quick and easy approach to solving
this problem using the redis-queue module. This approach makes it easy
to make efficient use of multiple cores and multiple machines, with only
minimal dependence on external packages.&lt;/p&gt;
</summary></entry><entry><title>Not Invented Here: Porting Scientific Software to Python</title><link href="https://pyvideo.org/pycon-au-2015/not-invented-here-porting-scientific-software-to.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Andrew Walker</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/not-invented-here-porting-scientific-software-to.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a scientist who's can't get work done because you the tools you
need aren't available? Do your collaborators use a different computing
platform to you? Are you struggling to find anyone who can help you
solve your software integration problems?&lt;/p&gt;
&lt;p&gt;These challenges occur because scientists face some of the most
difficult challenges in computing - dealing new and diverse problems;
working with prototypes and legacy systems; collaborating with domain
experts, rather than software experts; all while delivering on time with
minimal resources.&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a language that excels at &amp;quot;glueing&amp;quot;
different systems together in a style that is both easy to understand,
test and maintain. More importantly using Python is one way to make sure
that you spend your time working on research, rather than coding and
debugging.&lt;/p&gt;
&lt;p&gt;This presentation will demonstrate some of the skills needed to
integrate software from other languages into the Python Scientific
computing ecosystem using subprocesses, ctypes, cython the Jupyter
project - and what do do when none of these approaches are the right.&lt;/p&gt;
</summary></entry></feed>