<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_georges-bossert.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-15T00:00:00+00:00</updated><entry><title>Python for SecOps: recherche de vulnérabilités dans les implémentations d'un protocole</title><link href="https://pyvideo.org/pycon-fr-2016/python-for-secops-recherche-de-vulnerabilites-dans-les-implementations-dun-protocole.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Georges Bossert</name></author><id>tag:pyvideo.org,2016-10-15:pycon-fr-2016/python-for-secops-recherche-de-vulnerabilites-dans-les-implementations-dun-protocole.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Les protocoles de communication jouent un rôle majeur dans l'établissement d'une communication entre les différents composants des systèmes informatiques. Malheureusement, il est bien connu que les protocoles de communication peuvent être vulnérables aux attaques. Certaines de ces attaques dépendant de faiblesses introduites (in)volontairements dans leurs implémentations. Ces travaux proposent une solution pratique permettant d'identifier ces faiblesses en utilisant le language Python.
Cette présentation s'attachera à illustrer l'emploi de bibliothèques Python dédiées à la rétro-conception de protocoles tels que Netzob et Pylstar. Il sera notamment présenté comment les utiliser pour 1) extraire la machine à états d'une implémentation en boite noire et 2) comparer les machines à états de plusieurs implémentations d'un même protocole pour rechercher des vulnérabilités. Le protocole HTTP2 servira d'exemple.&lt;/p&gt;
</summary></entry></feed>