<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - John Belmonte</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_john-belmonte.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-05-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Inside a companion robot: Productive concurrency with Trio async-await ❤</title><link href="https://pyvideo.org/pycon-jp-2019/inside-a-companion-robot-productive-concurrency-with-trio-async-await.html" rel="alternate"></link><published>2019-09-17T00:00:00+00:00</published><updated>2019-09-17T00:00:00+00:00</updated><author><name>John Belmonte</name></author><id>tag:pyvideo.org,2019-09-17:/pycon-jp-2019/inside-a-companion-robot-productive-concurrency-with-trio-async-await.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;02-301_Inside a companion robot: Productive concurrency with Trio async-await ❤(John Belmonte)&lt;/p&gt;
</content><category term="PyCon JP 2019"></category></entry><entry><title>Your app is async so take advantage of it for development!</title><link href="https://pyvideo.org/pycon-us-2021/your-app-is-async-so-take-advantage-of-it-for-development.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>John Belmonte</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/your-app-is-async-so-take-advantage-of-it-for-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So your Python application is running under asyncio or similar framework-- congratulations! But what does that mean to you? More efficient use of compute resources? Simpler program structure and avoiding callbacks? It should mean even more. Cooperative multitasking opens new doors for inspecting the state of a program at …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So your Python application is running under asyncio or similar framework-- congratulations! But what does that mean to you? More efficient use of compute resources? Simpler program structure and avoiding callbacks? It should mean even more. Cooperative multitasking opens new doors for inspecting the state of a program at runtime, which has valuable development uses.&lt;/p&gt;
&lt;p&gt;This talk covers how Python's async is useful for &amp;quot;development views&amp;quot;-- visualizing and interacting with the state of your running app-- and gives some working examples that run concurrently and don't require intrusive changes to program structure:&lt;/p&gt;
&lt;p&gt;remote REPL - open one or more interpreter sessions over HTTP to
inspect and modify internal state of your app while it's running
graphical visualizations - view custom graphical representations of
state remotely from a web browser. These are written alongside the
code being visualized, and have zero overhead when not observed.
Keyboard and mouse input is possible too.
What kind of visualizations? For a Python app embedded in a home robot, these might include a local map of obstacles; display of orientation, speed, power usage; low res. camera or depth camera feeds; representations of internal state machines deciding behavior; etc.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://docs.google.com/presentation/d/e/2PACX-1vQqzFgzYqKinBkIBMpe20Jv_6pyYN1iTkKrDrOQRlqoMSBg4SyWQRnkGc0hBgTxQN_UteHdDe_Cge5h/pub"&gt;https://docs.google.com/presentation/d/e/2PACX-1vQqzFgzYqKinBkIBMpe20Jv_6pyYN1iTkKrDrOQRlqoMSBg4SyWQRnkGc0hBgTxQN_UteHdDe_Cge5h/pub&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry></feed>