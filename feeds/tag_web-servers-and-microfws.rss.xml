<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Better WebSockets - Server-Sent Events, a carefree alternative</title><link>https://pyvideo.org/europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever found yourself in a situation where you:&lt;/div&gt;
&lt;div class="line"&gt;- had to use WbSockets?&lt;/div&gt;
&lt;div class="line"&gt;- had to to create a separate project and had the issue of interfacing
both?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle disconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle reconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle all the above and scale WebSockets?&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If your experience was horrible (like mine was), we shall take a look at
Server-Sent Events, an alternative to WebSockets.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The following arguments will be discussed:&lt;/div&gt;
&lt;div class="line"&gt;- intro to the subject&lt;/div&gt;
&lt;div class="line"&gt;- inner workings&lt;/div&gt;
&lt;div class="line"&gt;- differences from WebSockets&lt;/div&gt;
&lt;div class="line"&gt;- implementation explanation for a generic HTTP server in Python&lt;/div&gt;
&lt;div class="line"&gt;- use cases&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrei Neagu</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</guid><category>Mobile</category><category>System Architecture</category><category>Web</category><category>Web Protocols</category><category>Web Servers and MicroFWs</category></item><item><title>Configuring uWSGI for Production: The defaults are all wrong</title><link>https://pyvideo.org/europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, we began migrating from a proprietary service framework
to a WSGI-compliant one. We chose uWSGI as our host because of its
performance and feature set. But, while powerful, uWSGI's defaults are
driven by backward compatibility and are not ideal for new deployments.
Powerful features can be overlooked due to the sheer magnitude of its
feature set and spotty documentation. As we've scaled up the number of
services hosted by uWSGI over the last year, we've had to tweak our
standard configuration.&lt;/p&gt;
&lt;p&gt;In this talk, we'll present the base uWSGI configuration we use as a
starting point for all services, as well as some tips to avoid known
gotchas and provide a base level of defensiveness and high reliability.
This base configuration makes use of several &amp;quot;no-cost&amp;quot; uWSGI features
that help protect services from common, yet difficult to prevent issues
-- some of which we discovered the hard way. We'll also talk about some
programmatic uWSGI features which can be leveraged to improve
reliability and improve outage response.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the topics we'll cover include:&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating memory leaks&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating stuck, hung, or infinitely looping processes&lt;/div&gt;
&lt;div class="line"&gt;- Preventing misconfigurations&lt;/div&gt;
&lt;div class="line"&gt;- Preventing wasted development effort&lt;/div&gt;
&lt;div class="line"&gt;- Improving outage response&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Sperl</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</guid><category>Best Practice</category><category>Distributed Systems</category><category>Microservices</category><category>Web Servers and MicroFWs</category><category>failures/mistakes</category></item><item><title>Look Ma, No HTTP!</title><link>https://pyvideo.org/europython-2019/look-ma-no-http.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'm going to live code a web application that is built
exclusively on top of WebSocket, without using HTTP at all!&lt;/p&gt;
&lt;p&gt;What's the benefit of using WebSocket over HTTP, you may ask? With
WebSocket each client establishes a permanent connection to the server,
so there is no request/response cycle and no need for the client to poll
the server for data. Each side can freely send data to the other side at
any time, so this is an ideal stack for building highly dynamic,
event-driven applications.&lt;/p&gt;
&lt;p&gt;For this live coding exercise I'm going to use the Socket.IO server for
Python, and the Socket.IO client for JavaScript. No Flask, no Django, no
HTTP!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Grinberg</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/look-ma-no-http.html</guid><category>ASYNC / Concurrency</category><category>Web Protocols</category><category>Web Servers and MicroFWs</category></item><item><title>useFlask() - or how to use a React frontend for your Flask app</title><link>https://pyvideo.org/europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and
just a bit of AJAX. All the JavaScript is usually included straight from
.js files or just minified with Python tools like webassets.&lt;/p&gt;
&lt;p&gt;But the JavaScript ecosystem has evolved a lot - one can now use tools
like Babel to write modern JS even when targeting older browsers and a
Webpack+Babel build is very straightforward and allows for advanced
preprocessing of JavaScript code.&lt;/p&gt;
&lt;p&gt;In this talk we'll even go one step further and not only use Webpack to
build the assets, but also integrate a small demo Flask app with a React
frontend where the Flask app only serves the static HTML page and uses a
RESTful API to communicate with the React app.&lt;/p&gt;
&lt;p&gt;We'll also look into how to keep convenient Flask features such as URL
building in client-side code (using the js-flask-urls package) and of
course React hooks will be used!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian M√∂nnich</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</guid><category>JavaScript Web Frameworks</category><category>Web Servers and MicroFWs</category></item><item><title>GraphQL in Python üçì</title><link>https://pyvideo.org/europython-2019/graphql-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years GraphQL has gained much traction, but what‚Äôs the
state of GraphQL in Python. This talk describes what GraphQL is, why it
has been created and the current state of GraphQL libraries in Python.&lt;/p&gt;
&lt;p&gt;There will be a short history of GraphQL, some examples of what makes it
shine and why it can be preferred to REST.&lt;/p&gt;
&lt;p&gt;We will also analyse the current state of GraphQL in Python, having a
brief overview of the current libraries and then having an in-depth look
at Strawberry a new library based on dataclasses that makes it easy to
create GraphQl APIs in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Arminio</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/graphql-in-python.html</guid><category>Django</category><category>RESTful</category><category>Web</category><category>Web General</category><category>Web Servers and MicroFWs</category></item><item><title>Dash: Interactive Data Visualization Web Apps with no Javascript</title><link>https://pyvideo.org/europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your data science or machine learning project probably won't just
produce a written report. Instead, projects are increasingly expected to
produce interactive tools to allow end-users to explore data and results
with rich, interactive visualizations. Inevitably, this will be done in
a web browser, meaning you'll need to add a quantitatively trained web
developer to your team, or have your data scientists spend time learning
HTML, Javascript and CSS. Dash, a project by the team that makes Plotly,
solves some of these problems by allowing data scientists to build rich
and interactive websites in pure python, with minimal knowledge of HTML
and absolutely no Javascript.&lt;/p&gt;
&lt;p&gt;At decisionLab, a London-based data science consultancy producing
decision tools, we've embraced Dash to produce proof-of-concept models
for our projects in alpha. Although we're not officially connected to
the plotly/Dash project, by using the library daily across many
projects, we've learned many lessons and what we feel are best practises
we'd like to share, and hear feedback on!&lt;/p&gt;
&lt;p&gt;This talk will give an overview of Dash, how it works and what it can be
used for, before outlining some of the common problems that emerge when
data scientists are let loose to produce web applications, and web
developers have to work with the pydata ecosystem. The talk also covers
effective working practises to start producing cool interactive
statistical web applications, fast. We'll also identify some of the
pitfalls of Dash, and how and when to make the decision to stop using
Dash and start building a proper web application.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://domweldon-europython-2019-dash.s3.eu"&gt;http://domweldon-europython-2019-dash.s3.eu&lt;/a&gt;-
west-2.amazonaws.com/index.html&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dom Weldon</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</guid><category>Data Science</category><category>JavaScript</category><category>Visualization</category><category>Web</category><category>Web Servers and MicroFWs</category></item></channel></rss>