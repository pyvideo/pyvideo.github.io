<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - FlaskCon 2020</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_flaskcon-2020.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-05T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Async Flask, an introduction to Quart</title><link href="https://pyvideo.org/flaskcon-2020/async-flask-an-introduction-to-quart.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/async-flask-an-introduction-to-quart.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quart is the Flask API re-implemented in async/await. This talk will introduce Quart and explain how it relates to Flask. Then I'll talk about potential async support in Flask and discuss the future relationship between the Quart and Flask.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Automatically generate test-cases – Schema-based API testing</title><link href="https://pyvideo.org/flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster. The talk will focus on a subset of the field of property-based testing where we focus on testing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster. The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time. I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo. I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools. By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today. The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="flask context"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Dynamic static sites - Implementing an oxymoron</title><link href="https://pyvideo.org/flaskcon-2020/dynamic-static-sites-implementing-an-oxymoron.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Shy Ruparel</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/dynamic-static-sites-implementing-an-oxymoron.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static websites have been around since the start of the internet. They’re fast, secure and easy to maintain. Combining your static sites with 3rd party APIs enables you at make your website feel and function like a traditional dynamic website with all the upsides of a static site …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static websites have been around since the start of the internet. They’re fast, secure and easy to maintain. Combining your static sites with 3rd party APIs enables you at make your website feel and function like a traditional dynamic website with all the upsides of a static site. In this talk Shy Ruparel, developer evangelist at Contentful, examines the history of static sites, their benefits, how to make them dynamic all while using Flask!&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Flask-Appbuilder new REST API, and Superset MVC to SPA revamp</title><link href="https://pyvideo.org/flaskcon-2020/flask-appbuilder-new-rest-api-and-superset-mvc-to-spa-revamp.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Daniel Gaspar</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/flask-appbuilder-new-rest-api-and-superset-mvc-to-spa-revamp.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick presentation around Flask-AppBuilder new REST API - Automatic and configurable OpenAPI specs - Apache Superset MVC to SPA revamp (challenges, direction) - Security, monitoring metrics (statsd, datadog) Edit from ARJ: FlaskAppBuilder is the project Apache Airflow was built on&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask-appbuilder"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Flask's flexibility for the win (when building applications that don't follow the normal patterns)</title><link href="https://pyvideo.org/flaskcon-2020/flasks-flexibility-for-the-win-when-building-applications-that-dont-follow-the-normal-patterns.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Brett Kromkamp</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/flasks-flexibility-for-the-win-when-building-applications-that-dont-follow-the-normal-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask's flexibility made it the ideal choice of web framework to develop a semantic graph-based application. Specifically, being able to &amp;quot;hook up&amp;quot; a custom data back-end without breaking a sweat clinched the deal. The application in question that I would like to talk about is Contextualise (&lt;a class="reference external" href="https://www.contextualise.dev/"&gt;https://www.contextualise …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask's flexibility made it the ideal choice of web framework to develop a semantic graph-based application. Specifically, being able to &amp;quot;hook up&amp;quot; a custom data back-end without breaking a sweat clinched the deal. The application in question that I would like to talk about is Contextualise (&lt;a class="reference external" href="https://www.contextualise.dev/"&gt;https://www.contextualise.dev/&lt;/a&gt;), a (personal) knowledge management application. Contextualise is an open source project: &lt;a class="reference external" href="https://github.com/brettkromkamp/contextualise"&gt;https://github.com/brettkromkamp/contextualise&lt;/a&gt;&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="flask context"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Taming OAuth with Flask-Dance</title><link href="https://pyvideo.org/flaskcon-2020/taming-oauth-with-flask-dance.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>David Baumgold</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/taming-oauth-with-flask-dance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many well-known APIs use OAuth for authentication, including Google, Facebook, Twitter, and GitHub. OAuth is a notoriously complicated protocol, but you can't use any of these APIs without it. In this talk, we'll learn how OAuth works and why it's so complicated. We'll also use the Flask-Dance library to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many well-known APIs use OAuth for authentication, including Google, Facebook, Twitter, and GitHub. OAuth is a notoriously complicated protocol, but you can't use any of these APIs without it. In this talk, we'll learn how OAuth works and why it's so complicated. We'll also use the Flask-Dance library to write a demo application that can authenticate with an API via OAuth. By the end, you'll be ready to tackle any OAuth API you want!&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="flask-dance"></category><category term="O-Auth"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>useFlask() - or how to use a React frontend for your Flask app</title><link href="https://pyvideo.org/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Adrian Mönnich</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel to write modern JS even when targeting older browsers and a Webpack+Babel build is very straightforward and allows for advanced preprocessing of JavaScript code. In this talk we'll even go one step further and not only use Webpack to build the assets, but also integrate a small demo Flask app with a React frontend where the Flask app only serves the static HTML page and uses a RESTful API to communicate with the React app. We'll also look into how to keep convenient Flask features such as URL building in client-side code (using the js-flask-urls package) and of course React hooks will be used!&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="ReactJs"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Demystifying Flask's Application and Request Contexts with pytest</title><link href="https://pyvideo.org/flaskcon-2020/demystifying-flasks-application-and-request-contexts-with-pytest.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Patrick Kennedy</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/demystifying-flasks-application-and-request-contexts-with-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The application and request contexts are key parts of any Flask application, as they control which variables are and are not globally accessible. Understanding how each context works is important when developing Flask applications, and yet they are often misunderstood. This talk dives into how the application and request …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The application and request contexts are key parts of any Flask application, as they control which variables are and are not globally accessible. Understanding how each context works is important when developing Flask applications, and yet they are often misunderstood. This talk dives into how the application and request contexts work when handling a request. The concept of proxies is discussed for providing thread-local access to the application and request contexts. To really illustrate how the application context works, pytest will be utilized to show how the application context works outside of a request. This example shows a common error ('Working outside of application context') during testing and how it should be solved by pushing to the application context stack.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="flask context"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>How Google Cloud uses Flask</title><link href="https://pyvideo.org/flaskcon-2020/how-google-cloud-uses-flask.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/how-google-cloud-uses-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how Google Cloud uses Flask, and how you can use Flask on Google Cloud. We'll talk about App Engine, Cloud Functions, and Cloud Run, as well as some new and interesting projects that combine Flask and Google Cloud together.
Dustin Ingram is a PSF …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how Google Cloud uses Flask, and how you can use Flask on Google Cloud. We'll talk about App Engine, Cloud Functions, and Cloud Run, as well as some new and interesting projects that combine Flask and Google Cloud together.
Dustin Ingram is a PSF director at the time of writing this.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Google Cloud"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>How I built and maintained the first live online Python linter using Flask</title><link href="https://pyvideo.org/flaskcon-2020/how-i-built-and-maintained-the-first-live-online-python-linter-using-flask.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Ethan Chiu</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/how-i-built-and-maintained-the-first-live-online-python-linter-using-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the beginning of high school, I was lucky enough to stumble upon my first programming course which was in Python. Within a few weeks, I fell in love with the simplicity and power of using Python. After finishing the course, I wondered, “What else can I do with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the beginning of high school, I was lucky enough to stumble upon my first programming course which was in Python. Within a few weeks, I fell in love with the simplicity and power of using Python. After finishing the course, I wondered, “What else can I do with Python?” A few months later, I started programming my first web application in Python called PythonBuddy (&lt;a class="reference external" href="https://pythonbuddy.com"&gt;https://pythonbuddy.com&lt;/a&gt;/​) while doing research with Professor Eni Mustafaraj of Wellesley College. We were motivated to create this web app to help students jump right into programming without the burden of setting up a programming IDE. The first technology to create PythonBuddy was Flask. I was amazed at how simple and easy it was to set up basic web functionalities such as AJAX requests, templating, and testing. To this day, I still use Flask to set up web applications due to its simplicity and robustness. In this talk, I’ll walk through how I developed PythonBuddy using Flask and other places I’ve used Flask with.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Python Buddy"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>How the FEC uses Flask to increase transparency in US elections</title><link href="https://pyvideo.org/flaskcon-2020/how-the-fec-uses-flask-to-increase-transparency-in-us-elections.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Laura Beaufort</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/how-the-fec-uses-flask-to-increase-transparency-in-us-elections.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How the US Federal Election Commission (FEC) uses Flask and other open source technology to power its campaign finance data API. The FEC collects and publishes data on federal candidates: who is running, how much they have raised, where that money is coming from, and how it's spent. This …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How the US Federal Election Commission (FEC) uses Flask and other open source technology to power its campaign finance data API. The FEC collects and publishes data on federal candidates: who is running, how much they have raised, where that money is coming from, and how it's spent. This presentation will cover how we use Flask, Flask-SQLAlchemy, and Postgres to respond to nearly a million requests per day to query our four terabyte campaign finance database.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Posgres"></category><category term="FEC"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Just a bit more?</title><link href="https://pyvideo.org/flaskcon-2020/just-a-bit-more.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Michael Bukachi</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/just-a-bit-more.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Flask is just awesome! It does what it does best&amp;quot; I heard these words from a colleague of mine a while ago. And I couldn't agree more. Flask is great. It's my to go to web framework when developing web applications. It doesn't pack too much but it's easily …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Flask is just awesome! It does what it does best&amp;quot; I heard these words from a colleague of mine a while ago. And I couldn't agree more. Flask is great. It's my to go to web framework when developing web applications. It doesn't pack too much but it's easily scalable. Let's be honest though, aren't there times where you just thought &amp;quot;if only it could do this..&amp;quot; or &amp;quot;I wish it supported ...&amp;quot;? For this session, we are going to go through Flask's testing support feature. We are going to see what it offers out of the box. We are going to cover some of it's downsides. Finally, we are going to cover a couple of enhancements one can add to make testing smoother and more fun :)&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Lessons Learned Building Microservices with Flask</title><link href="https://pyvideo.org/flaskcon-2020/lessons-learned-building-microservices-with-flask.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Joe Coburn</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/lessons-learned-building-microservices-with-flask.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn why we choose Flask at ScholarPack to handle millions of requests per day across dozens of microservices. I'll share my experiences building Flask microservices, and how the vast array of Pallets tools available can help you get up and running fast.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Microservices"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>OpenPatch an Example for Building Microservices with Flask</title><link href="https://pyvideo.org/flaskcon-2020/openpatch-an-example-for-building-microservices-with-flask.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Mike Barkmin</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/openpatch-an-example-for-building-microservices-with-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenPatch is an open platform for assessment and training of programming skills. It is currently driven by twelve microservices. The frontend microservice is implemented in React. Most backend microservices are implemented in Flask. In this session the challenges and solutions of building a microservice architecture for OpenPatch with Flask …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenPatch is an open platform for assessment and training of programming skills. It is currently driven by twelve microservices. The frontend microservice is implemented in React. Most backend microservices are implemented in Flask. In this session the challenges and solutions of building a microservice architecture for OpenPatch with Flask will be presented. It will be shown how authentication with JWT via a centralized authentification service is implemented, how communication between the microservices with RabbitMQ is integrated, how versioning of microservices (api-endpoints and database-schemas) is used to keep backward-compatibility and what means are set up to ease the development of new microservices. This session should provide insights in the development of a microservice architecture with Flask, which could help others developers to implement their own or to spark the discussion of best practices.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="OpenPatch"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Securing Flask Web Applications with JWT and CSRF tokens</title><link href="https://pyvideo.org/flaskcon-2020/securing-flask-web-applications-with-jwt-and-csrf-tokens.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Solomon Esenyi</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/securing-flask-web-applications-with-jwt-and-csrf-tokens.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build secure web applications using the flask framework. At the end of the talk, the audience should know what CSRF tokens and Cross-site request forgery attacks are and how to prevent them in their next web application, and should be educated on how to use Json …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build secure web applications using the flask framework. At the end of the talk, the audience should know what CSRF tokens and Cross-site request forgery attacks are and how to prevent them in their next web application, and should be educated on how to use Json Web Tokens (JWT) to securely transfer data over API requests and the consequences of not doing this well. Web security is not a thing taught by default in tutorials, and this ends up raising a generation of web developers building applications that are vulnerable to attacks taught to cyber security personnel in HACKER 101 courses. A lot of vulnerabilities exist in web apps we use and build everyday and when triggered can lead to destruction of businesses and loss of tons of money. Trust me, I’ve had experience with this and it’s not funny. The talk is aimed at the intermediate python developer who has experience using the flask framework to build web applications.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="JWT"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>The Application Factory Architecture</title><link href="https://pyvideo.org/flaskcon-2020/the-application-factory-architecture.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Bruno Rocha</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/the-application-factory-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruno Rocha (&amp;#64;rochacbruno) talks about how Flask encourages Application Factory Pattern for creating new application instances. Years ago I decided to leverage this pattern and use a wide application factory to build the whole Flask project. Using this approach we get rid of Circular import and app-out-of-context problems and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruno Rocha (&amp;#64;rochacbruno) talks about how Flask encourages Application Factory Pattern for creating new application instances. Years ago I decided to leverage this pattern and use a wide application factory to build the whole Flask project. Using this approach we get rid of Circular import and app-out-of-context problems and also we have a better organization for our folder structure.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Application Factory"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Using Flask-RESTy to build flexible REST APIs, fast!</title><link href="https://pyvideo.org/flaskcon-2020/using-flask-resty-to-build-flexible-rest-apis-fast.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Jimmy Jia</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/using-flask-resty-to-build-flexible-rest-apis-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk presents Flask-RESTy, a modular library for building REST APIs using Flask along with SQLAlchemy and marshmallow. Flask-RESTy provides a flexible API with multiple levels of abstraction, ranging from high-level helpers that allow building CRUD APIs in just a few lines of code, to lower-level helpers that allow …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk presents Flask-RESTy, a modular library for building REST APIs using Flask along with SQLAlchemy and marshmallow. Flask-RESTy provides a flexible API with multiple levels of abstraction, ranging from high-level helpers that allow building CRUD APIs in just a few lines of code, to lower-level helpers that allow implementing highly customized business logic while preserving consistent authorization and validation logic. Through the use of these different elements of the library built on top of each other, developers can both implement complex endpoints in a consistent way and quickly spin up more conventional endpoints.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask-resty"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Creatorlist Presentation With Abishek Kaushik</title><link href="https://pyvideo.org/flaskcon-2020/creatorlist-presentation-with-abishek-kaushik.html" rel="alternate"></link><published>2020-07-03T00:00:00+00:00</published><updated>2020-07-03T00:00:00+00:00</updated><author><name>Abishek Kaushik</name></author><id>tag:pyvideo.org,2020-07-03:/flaskcon-2020/creatorlist-presentation-with-abishek-kaushik.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abishek discovered Flask on a summer internship, and then Creatorlist (&lt;a class="reference external" href="https://creatorlist"&gt;https://creatorlist&lt;/a&gt;.tech​) was born. He shares his journey of how he learnt Flask from scratch and the resources used. While building the platform, how he set up his implementation criteria, server setup and the use of Miguel’s …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abishek discovered Flask on a summer internship, and then Creatorlist (&lt;a class="reference external" href="https://creatorlist"&gt;https://creatorlist&lt;/a&gt;.tech​) was born. He shares his journey of how he learnt Flask from scratch and the resources used. While building the platform, how he set up his implementation criteria, server setup and the use of Miguel’s built SocketIO to make the website.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="SocketIO"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>D-Tale presentation with Andrew Schonfeld</title><link href="https://pyvideo.org/flaskcon-2020/d-tale-presentation-with-andrew-schonfeld.html" rel="alternate"></link><published>2020-07-03T00:00:00+00:00</published><updated>2020-07-03T00:00:00+00:00</updated><author><name>Andrew Schonfeld</name></author><id>tag:pyvideo.org,2020-07-03:/flaskcon-2020/d-tale-presentation-with-andrew-schonfeld.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Full-stack web developer for the last 15 years (of which 7 using Flask), Andrew talks about D-Tale (&lt;a class="reference external" href="https://github.com/man-group"&gt;https://github.com/man-group&lt;/a&gt;/dtale​) an OS project which gives users the ability to visualise most Pandas data structures from python console, Jupyter notebook or CLI. It does so by spinning up …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Full-stack web developer for the last 15 years (of which 7 using Flask), Andrew talks about D-Tale (&lt;a class="reference external" href="https://github.com/man-group"&gt;https://github.com/man-group&lt;/a&gt;/dtale​) an OS project which gives users the ability to visualise most Pandas data structures from python console, Jupyter notebook or CLI. It does so by spinning up a small Flask process with minimal jinja templating, Plotly Dash, and a custom React front-end. It can demo the vast functionality available, all the different ways you can access it and dive deeper into how Flask really anchors the whole thing.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="D-Tale"></category><category term="Flask"></category><category term="FlaskCon"></category></entry></feed>