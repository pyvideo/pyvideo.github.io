<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_api.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Sviluppare per Alexa in Python</title><link href="https://pyvideo.org/pycon-italia-2019/sviluppare-per-alexa-in-python.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Alberto Anceschi</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/sviluppare-per-alexa-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk verrà mostrato come sviluppare una Skill per Amazon Alexa
in italiano. Verranno presentati i concetti e le metodologie utili allo
sviluppo di un’interfaccia vocale, le risorse e gli strumenti a
disposizione dello sviluppatore ed infine i requisiti qualitativi da
rispettare affinché la Skill sviluppata venga pubblicata sullo store. La
Skill fornirà insight sul traffico del sito web, interfacciandosi con
Google Analytics attraverso autenticazione dell’utente. Requisiti:
serverless (AWS Lambda), Oauth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1676"&gt;https://python.it/feedback-1676&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 11:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="#assistant"></category><category term="#Python"></category><category term="#google"></category><category term="#api"></category><category term="#voice"></category><category term="#alexa"></category><category term="#analytics"></category></entry><entry><title>Using Python to create political acts</title><link href="https://pyvideo.org/pycon-italia-2019/using-python-to-create-political-acts.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Felipe Cabral</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/using-python-to-create-political-acts.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last Pycon Italia I showed how my team has using Python and Data Science
to fight corruption - &lt;a class="reference external" href="https://www.youtube.com/watch?v=JiJ5a4CXRF8&amp;amp;t=8s"&gt;https://www.youtube.com/watch?v=JiJ5a4CXRF8&amp;amp;t=8s&lt;/a&gt;
This time I want to show something that can be replicated in Italy right
after we finish the presentation.&lt;/p&gt;
&lt;p&gt;As &amp;#64;participatory (World Bank Internet impact researcher) says, every
country has a good response for public pressure across the internet, and
this response is even better within autocratic governments because they
want to keep healthy international relations. But how we can keep a
record of all the drafts of legislation that are happening right now?
How we can use this information and create an action for the public to
show their agreement or not for every change that happens.&lt;/p&gt;
&lt;p&gt;With Scrapy, Python, Django, and Open source! Let me show you how has
been done in Brazil and the Pipeline that makes possible to replicated
here in Italy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1702"&gt;https://python.it/feedback-1702&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 10:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="web-scraping"></category><category term="Python"></category><category term="programming"></category><category term="scrapy"></category><category term="api"></category><category term="open-data"></category><category term="opendata"></category><category term="hacking"></category></entry><entry><title>Fast, documented and reliable JSON based webservices with Python</title><link href="https://pyvideo.org/europython-2013/fast-documented-and-reliable-json-based-webservices-with-python.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/fast-documented-and-reliable-json-based-webservices-with-python.html</id><summary type="html"></summary><category term="web"></category><category term="turbogears"></category><category term="mongodb"></category><category term="json"></category><category term="api"></category><category term="gevent"></category></entry><entry><title>Magical attributes</title><link href="https://pyvideo.org/europython-2013/magical-attributes.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Radomir Dopieralski</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/magical-attributes.html</id><summary type="html"></summary><category term="best-practices"></category><category term="hacking"></category><category term="api"></category><category term="design"></category></entry><entry><title>Essere agili? Metodi, strumenti e integrazioni: Python “to rule them all”</title><link href="https://pyvideo.org/europython-2013/essere-agili-metodi-strumenti-e-integrazioni-python-to-rule-them-all.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Massimo Azzolini</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/essere-agili-metodi-strumenti-e-integrazioni-python-to-rule-them-all.html</id><summary type="html"></summary><category term="application-design"></category><category term="api"></category><category term="pyramid"></category><category term="integration"></category><category term="trac"></category></entry><entry><title>Integration tests ready to use with pytest-play</title><link href="https://pyvideo.org/pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Serena Martinetti</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I will introduce a new pytest plugin with which it is very
easy (even for non-technical) go to create and run new integration
testing at any level of IOT complex systems.&lt;/p&gt;
&lt;p&gt;pytest-play is a pytest plugin that allows you to play a JSON file that
describes some actions and assertions. We can use actions like: -
Selenium, driving the browser for the UI test - MQTT messages,
simulating a device - API calls - queries to Cassandra or PostgresSQL
(in the future) - custom commands, thanks to the pluggable architecture
Other advantages: - UI tests more reliable with implicit waits before
interacting with the elements - BDD support to make the scenario more
legible - reusability of steps&lt;/p&gt;
&lt;p&gt;I will show you how easy it is to create a json and execute it on the
fly on a Continuous Integration system. So let’s start having fun in
testing with pytest-play.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="continuous-integration"></category><category term="open source"></category><category term="Python"></category><category term="testing"></category><category term="selenium"></category><category term="integration"></category><category term="api"></category><category term="pytest"></category><category term="Functional Testing"></category></entry><entry><title>Google loves Python 2.0</title><link href="https://pyvideo.org/pycon-italia-2018/google-loves-python-20.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Simone Dalla</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/google-loves-python-20.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il talk vuole illustrare gli strumenti e le Api Python che Google mette
a disposizione liberamente agli sviluppatori per interagire con alcune
delle sue applicazioni più diffuse come Google Calendar, Google Docs,
Google Drive, Google Gmail. Verrà illustrato quindi l’uso delle Google
API Client Libraries e verranno mostrati esempi pratici per creare e
popolare un Foglio di Google, creare appuntamenti su un Google Calendar,
fare l’upload di un file su Google Drive ed analizzare la propria
casella Gmail. Per seguire il talk è sufficiente una discreta conoscenza
del linguaggio Python.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category><category term="api"></category><category term="google"></category><category term="integration"></category><category term="REST"></category></entry><entry><title>APIs: Gateway to world's data</title><link href="https://pyvideo.org/pycon-sk-2018/apis-gateway-to-worlds-data.html" rel="alternate"></link><published>2018-03-11T00:00:00+00:00</published><updated>2018-03-11T00:00:00+00:00</updated><author><name>Martin Strapko</name></author><id>tag:pyvideo.org,2018-03-11:pycon-sk-2018/apis-gateway-to-worlds-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today, APIs all around the web provide access to big volumes of valuable
information. Combining multiple 3rd party sources with your own
company's data can often help paint a bigger picture. Come and find out
how we used Python to integrate various APIs such as Steam, Facebook and
Appsflyer, and learn the tricks we used to do it.&lt;/p&gt;
</summary><category term="API"></category><category term="PyCon SK"></category><category term="Python"></category></entry><entry><title>API Flask com front-end em Vue.js</title><link href="https://pyvideo.org/flask-conf-2018/api-flask-com-front-end-em-vuejs.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>João Lugão</name></author><id>tag:pyvideo.org,2018-08-25:flask-conf-2018/api-flask-com-front-end-em-vuejs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API Flask com front-end em Vue.js - Palestra de João Lugão na Flask Conf 2018.&lt;/p&gt;
</summary><category term="flask"></category><category term="api"></category><category term="vue.js"></category></entry><entry><title>API REST o Começo - Introdução a REST para iniciantes</title><link href="https://pyvideo.org/flask-conf-2018/api-rest-o-comeco-introducao-a-rest-para-iniciantes.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>Talita Rossari</name></author><id>tag:pyvideo.org,2018-08-25:flask-conf-2018/api-rest-o-comeco-introducao-a-rest-para-iniciantes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API REST o Começo - Introdução a REST para iniciantes - Palestra de Talita Rossari na Flask Conf 2018.&lt;/p&gt;
</summary><category term="api"></category><category term="rest"></category></entry><entry><title>Desenvolvendo APIs REST com Python 3 e Asyncio</title><link href="https://pyvideo.org/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html" rel="alternate"></link><published>2016-06-26T00:00:00+00:00</published><updated>2016-06-26T00:00:00+00:00</updated><author><name>Renato Garcia</name></author><id>tag:pyvideo.org,2016-06-26:caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Renato Garcia no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Desenvolvendo APIs REST com Python 3 e Asyncio&lt;/p&gt;
</summary><category term="api"></category><category term="apis"></category><category term="rest"></category><category term="rest api"></category><category term="asyncio"></category><category term="async"></category></entry><entry><title>Getting started with requests HTTP library</title><link href="https://pyvideo.org/pycon-italia-2017/getting-started-with-requests-http-library.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Andrea Grandi</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/getting-started-with-requests-http-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;requests is one of the most advanced and simple to use HTTP libraries.&lt;/p&gt;
&lt;p&gt;The presentations is going to show how to get started with it, how to
consume REST APIs and last but not least how to properly mock and test
our code.&lt;/p&gt;
</summary><category term="requests"></category><category term="api"></category><category term="networking"></category><category term="REST"></category></entry><entry><title>PyOhio 2011: Creating Web APIs that are a joy to use</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Issac Kelly</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating Web APIs that are a joy to use&lt;/p&gt;
&lt;p&gt;Presented by Issac Kelly&lt;/p&gt;
&lt;p&gt;Issac is an avid API consumer. He&amp;amp;aposll cover how to make an API that
is not terrible. This is apparently very difficult to do, and many
anti-patterns will be shown. No care will be taken to protect the
guilty. This talk is not as focused on Python, as it is on creating Web
APIs, and an understanding of HTTP is assumed.&lt;/p&gt;
</summary><category term="api"></category><category term="http"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="webapi"></category></entry><entry><title>Large Problems in Django, Mostly Solved</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--large-problems-in-django--mostly-.html" rel="alternate"></link><published>2010-09-08T00:00:00+00:00</published><updated>2010-09-08T00:00:00+00:00</updated><author><name>Eric Holscher</name></author><id>tag:pyvideo.org,2010-09-08:djangocon-us-2010/djangocon-2010--large-problems-in-django--mostly-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is based on my popular series of blog posts highlighting
applications from the community. I will highlight some of the best
applications that the Django/Python community has put together, talk
about places that are lacking, and talk about what these popular
applications have in common.&lt;/p&gt;
&lt;p&gt;Part 1&lt;/p&gt;
&lt;p&gt;I have written a series of blog posts about &amp;quot;Large problems&amp;quot; in the
community, and how they have been solved by members of our community
with reusable apps. Previously I have covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Delayed Execution&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;APIs&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Database Migrations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will update my thoughts on these issues, as well as talking about a
couple of other new issues that I think that have been solved in a
decent way. These include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remote Command Execution&lt;/li&gt;
&lt;li&gt;Debugging in Development&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2&lt;/p&gt;
&lt;p&gt;In this part I will highlight issues that are still headaches for the
Community. These are places where there is a good chance for growth for
third party apps, and places where I have personally found some friction
in my development. A couple examples of this are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Class Based Views / Thread Safety&lt;/li&gt;
&lt;li&gt;Debugging Production Environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3&lt;/p&gt;
&lt;p&gt;From the above applications that are well done, what makes a popular
reusable app? This won't be my thoughts, but more looking at apps that
have been successful and trying to see what they have in common. A good
app and a good reusable app are necessarily different, and I think it
will be interesting to look at what traits make reusable apps popular.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ericholscher.com/tag/largeproblems/"&gt;Large problems posts&lt;/a&gt;&lt;/p&gt;
</summary><category term="api"></category><category term="ci"></category><category term="continuousintegration"></category><category term="databasemigrations"></category><category term="debugging"></category><category term="delayedexecutions"></category><category term="deployment"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="documentation"></category><category term="migrations"></category><category term="safety"></category><category term="search"></category></entry><entry><title>RESTful APIs: Promises and Lies</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--restful-apis--promises--amp--lies.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Tareque Hossain</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--restful-apis--promises--amp--lies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;RESTful APIs: Promises &amp;amp; Lies&lt;/p&gt;
&lt;p&gt;Presented by Tareque Hossain&lt;/p&gt;
&lt;p&gt;Over the last few years RESTful APIs have become an integral part of
many django projects. But some of the fundamental questions still remain
unanswered. How do you decouple resources from models, formatting from
definitions, authorization from authentication? How should you define
resources? How do you handle pagination? Deliver facets? Prevent abuse?
Implement versioning? Let's have a look.&lt;/p&gt;
</summary><category term="api"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="rest"></category></entry><entry><title>API Design Tips</title><link href="https://pyvideo.org/djangocon-us-2012/api-design-tips.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-us-2012/api-design-tips.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The focus of this talk will be on some pragmatic tips on how to design
programmatic (non-web-based) APIs for use by other developers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're a developer of any sort (Django, Python, Javascript, etc),
chances are that someone, at some point, will have to take the code
you've written &amp;amp; use it in a different context. This is even more
amplified if you work on OSS, where people &lt;em&gt;will&lt;/em&gt; use it in ways you've
never dreamed about.&lt;/p&gt;
&lt;p&gt;This talk is a reflection on my experience building libraries for other
people's consumption &amp;amp; thoughts on how to design/make (non-HTTP) APIs in
a way that will make others love you (or at least not hunt you down &amp;amp;
strangle you).&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category></entry><entry><title>Combining Embedded and Interactive Python in a Debugger: A Case Study</title><link href="https://pyvideo.org/europython-2011/combining-embedded-and-interactive-python-in-a-de.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Caroline Tice</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/combining-embedded-and-interactive-python-in-a-de.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Caroline Tice - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;LLDB is an open source compiler currently under development. LLDB
incorporates Python in several different ways: From the command line,
one can drop into an interactive Python script interpreter, entering
normal Python interactive commands and having them interpreted and
executed. In addition, the LLDB debugger has a programming API that
allows users to call actual debugger functions and access real debugger
objects. This API is run through SWIG and converted into a Python module
that gets automatically imported into the interactive interpreter inside
LLDB. The upshot of this is that, in the Python mode, users can call the
API functions as if they were regular Python functions. This is turn
means that users can do things like hit a breakpoint, call the
appropriate API functions to get the actual current frame object, check
to see if the caller function several frames up the stack is a
particular function, and if so, perform some other interesting action.
LLDB also allows for breakpoint commands to be written in Python (which
therefore allows them to call the API functions), as well as having a
command that interprets and executes a single line of Python.&lt;/p&gt;
&lt;p&gt;Because the API and all of the debugger functionality is available in a
Python module, it is also possible to write a debugger front end
completely in Python and have it import the LLDB module and call the
LLDB API functions (which calls into the LLDB shared library), to create
a new debugger front end. Our test suite takes advantage of this to run
tests on the LLDB library without having to start up an interactive LLDB
debubgger session.&lt;/p&gt;
&lt;p&gt;There were many interesting problems encountered and overcome in getting
all of this to work. LLDB combines both interactive Python and embedded
Python. There were some interesting things worked out so that a single
Python environment dictionary is used for the entire debugger session: A
user can pop into and out of the interactive interpreter and have access
at any time to anything defined in any previous visit to the interactive
interpreter (within the same debug session); breakpoint commands have
access to everything defined in the interactive session; so do embedded
script commands. It gets even more complicated, because LLDB can have
multiple debugger sessions alive at once, and each debugger session has
its own Python interpreter with its own dictionary and must not be
allowed to interfere with another session's state. In this talk I will
discuss how we implemented many of these features in LLDB, pointing out
some of the more interesting problems we encountered and how we overcame
them, and demonstrate it all working in LLDB.&lt;/p&gt;
</summary><category term="api"></category><category term="embedded"></category></entry><entry><title>Good API design</title><link href="https://pyvideo.org/europython-2011/good-api-design.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/good-api-design.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alex Martelli - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing interfaces so that other code can interact with ours (whether
our code is a library, framework, application, website…) is a very
common and clearly crucial activity, but it's fraught with dangers -
there's a lot stuff we all keep doing wrong time after time. This talk
shows some common categories of API design errors encountered in the
wild, with tips on how to avoid them when you design your next API.&lt;/p&gt;
&lt;p&gt;Goals: to show you how to focus resources and attention to help avoid
mistakes in API design. Prereqs: experience designing and developing
software, esp. software which needs to interact w/other existing
software.&lt;/p&gt;
</summary><category term="api"></category><category term="design"></category><category term="interfaces"></category></entry><entry><title>Managing the cloud with libcloud</title><link href="https://pyvideo.org/europython-2011/managing-the-cloud-with-libcloud.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Tomaž Muraus</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/managing-the-cloud-with-libcloud.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tomaž Muraus - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;libcloud is an open-source client library for interacting with different
cloud providers.&lt;/p&gt;
&lt;p&gt;The primary goal of the library is to abstract all the provider
differences away and expose common functionality in a nice, clean and
concise API.&lt;/p&gt;
&lt;p&gt;This talk will address the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why a library like this was built in the first place&lt;/li&gt;
&lt;li&gt;Different problems we have encountered while building it (not all the
providers always play nice)&lt;/li&gt;
&lt;li&gt;An introduction to the library API (compute, storage and
load-balancer part)&lt;/li&gt;
&lt;li&gt;How to use it to build something useful and fun&lt;/li&gt;
&lt;li&gt;How to participate and contribute&lt;/li&gt;
&lt;li&gt;Roadmap and plans for the future&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="api"></category><category term="cloud"></category></entry><entry><title>5 Years of Bad Ideas</title><link href="https://pyvideo.org/europython-2011/5-years-of-bad-ideas.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/5-years-of-bad-ideas.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Armin Ronacher - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What was my motivation for working with Python after two years of PHP?
There is so much you can do. Functions are objects you can pass around,
you can decompile functions to see how they work internally, you can
alias a bound method to a global function and it will just work. You can
change import semantics, override the method resolution order, you can
write metaclasses, you can hook into the CPython interpreter API and
much more.&lt;/p&gt;
&lt;p&gt;Five years later I came to the conclusion that this is really not what
Python is about and that a lot of what I did was interesting but not
necessarily a good idea. This talk is a 45 minute recompilation of
things I really shouldn't have done in the first place. Expect a bunch
of neat and interesting hacks that showcase the possibilities of the
language.&lt;/p&gt;
</summary><category term="api"></category><category term="cpython"></category></entry><entry><title>Latest advances in the Google APIs platform</title><link href="https://pyvideo.org/europython-2011/latest-advances-in-the-google-apis-platform.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Ali Afshar</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/latest-advances-in-the-google-apis-platform.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ali Afshar - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give an outline of the advances that Google have made in
API delivery over the last year, and how it is relevant to you as a
Python developer. The talk is suitable for beginners and advanced
developers.&lt;/p&gt;
&lt;p&gt;We will describe the underlying platform, and the built-in features that
all Google APIs inherit.&lt;/p&gt;
&lt;p&gt;We will focus on how the Python libraries for this API platform are
generated and can be used as a single library that doesn't require
updating with API updates, as Python lends itself perfectly to the
nature of this platform.&lt;/p&gt;
</summary><category term="api"></category><category term="google"></category><category term="updating"></category></entry><entry><title>Web API Mashups in a Python Application</title><link href="https://pyvideo.org/europython-2011/web-api-mashups-in-a-python-application.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Johan Euphrosine</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/web-api-mashups-in-a-python-application.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Johan Euphrosine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover: - How to use OAuth into your webapp so users can
give permission to access their data stored in third party web
application. - How your webapp can interact with their Web API using
RESTful JSON protocols.&lt;/p&gt;
&lt;p&gt;This talk is suitable for beginners already familiar with any WSGI web
framework.&lt;/p&gt;
&lt;p&gt;This talk will be illustrated with code samples using Google App Engine
and Google APIs client library.&lt;/p&gt;
</summary><category term="api"></category><category term="google"></category><category term="json"></category><category term="oauth"></category><category term="web"></category><category term="wsgi"></category></entry><entry><title>Introduction to Python Database Programming</title><link href="https://pyvideo.org/europython-2011/introduction-to-python-database-programming.html" rel="alternate"></link><published>2011-07-14T00:00:00+00:00</published><updated>2011-07-14T00:00:00+00:00</updated><author><name>Marc-André Lemburg</name></author><id>tag:pyvideo.org,2011-07-14:europython-2011/introduction-to-python-database-programming.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc-Andre Lemburg - 21 June 2011 in &amp;quot;Track
Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will give an introduction to the concepts used in the Python
Database API and relational databases in general. Connection, cursors
and transactions are discussed, and their use in a typical Python
database application are demonstrated. The talk will also touch upon
some advanced database programming techniques and discuss best
practices.&lt;/p&gt;
</summary><category term="api"></category><category term="database"></category><category term="transactions"></category></entry><entry><title>Generazione di codice in Python : dal documento al codice C++ passando per la modellizzazione UML.</title><link href="https://pyvideo.org/europython-2011/generazione-di-codice-in-python-dal-documento-a.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Francesco Bochicchio</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/generazione-di-codice-in-python-dal-documento-a.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Francesco Bochicchio - 24 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intendo presentare un programma di utilità che ho sviluppato per aiutare
me e i miei colleghi nel nostro attuale progetto.Space Software Italia
Questo programma esegue le seguenti attività: - Analizza un documento
Microsoft Word - generato automaticamente - allo scopo di estrarne le
informazioni relative alle strutture dati da usare per comunicare con
dispositivi e/o programmi software. Tali informazioni sono memorizzate
in un modello UML, generato interfacciandosi con il CASE tool usato in
azienda (Rational Rose). - Utilizza i dati in un modello UML - di solito
una versione migliorata a mano di quello generato automaticamente - per
generare un set di classi C++, una per messaggio, che forniscono i
metodi per serializzare/deserializzare i messaggi usando le API
specifiche del progetto. Il programma è stato scritto in Python 2.x ed
utilizza i seguenti moduli esterni: - pywin32: per interfacciare sia MS
Word che il tool CASE usando lo standard COM. - ply : per analizzare il
file in cui il tool CASE memorizza il modello,&lt;/p&gt;
</summary><category term="api"></category><category term="ply"></category></entry><entry><title>plac: more than just another command-line arguments parser</title><link href="https://pyvideo.org/europython-2011/plac-more-than-just-another-command-line-argumen.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Michele Simionato</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/plac-more-than-just-another-command-line-argumen.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Michele Simionato - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;plac is general purpose tool than can be used to define command-oriented
domain specific languages (DSLs). In its simplest form it can be used as
a command-line arguments parser with an easier-to-use API than argparse.
It can also be used to replace the cmd module in the standard library.
Moreover it can be used to automatize functional tests and for much
more. The talk will touch upon many use cases where plac can make your
life as a developer simpler and better. Technically Plac is a wrapper
over argparse and works in all versions of Python starting from Python
2.3 up to Python 3.2. In Python 3.X it takes advantage of function
annotations to define the parser in a declarative way, instead of the
imperative way of argparse. In Python 2.X it uses decorators instead, to
reach the same goal. The talk is a hands-on interactive demonstration of
plac capabilities.&lt;/p&gt;
</summary><category term="api"></category><category term="argparse"></category><category term="cmd"></category><category term="decorators"></category><category term="parser"></category></entry><entry><title>Python MapReduce Programming with Pydoop</title><link href="https://pyvideo.org/europython-2011/python-mapreduce-programming-with-pydoop.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Simone Leo</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/python-mapreduce-programming-with-pydoop.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Leo - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop is the leading open source implementation of MapReduce, Google's
large scale distributed computing paradigm. Hadoop's native API is in
Java, and its built-in options for Python programming - Streaming and
Jython - have several drawbacks: the former allows to access only a
small subset of Hadoop's features, while the latter carries with it all
of the limitations of Jython with respect to CPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydoop.sourceforge.net"&gt;Pydoop&lt;/a&gt; is an API for Hadoop that
makes most of its features available to Python programmers while
allowing CPython development. Its core consists of Boost.Python wrappers
for Hadoop's C/C++ interface.&lt;/p&gt;
&lt;p&gt;The talk consists of a MapReduce/Hadoop tutorial and a presentation of
the Pydoop API, with the main goal of bridging the gap between the
Hadoop and Python communities. A basic knowledge of distributed
programming is helpful but not strictly required.&lt;/p&gt;
</summary><category term="api"></category><category term="cpython"></category><category term="distributed"></category><category term="hadoop"></category><category term="jython"></category><category term="mapreduce"></category><category term="tutorial"></category></entry><entry><title>An iPhone-Python love affair: Building APIs for mobile</title><link href="https://pyvideo.org/europython-2011/an-iphone-python-love-affair-building-apis-for-m.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>Anna Callahan</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mobile apps are the hot item of the day - and the best mobile apps are
backed by a great website. Python web developer Nate Aune and iPhone
developer Anna Callahan will show you how we built a simple music web
app in Django with a native iPhone app that communicates with it.
Attendees of this talk will see a concrete case study of building an
application that exposes an API for mobile devices.&lt;/p&gt;
&lt;p&gt;Our web app exposes a JSON API for sending and receiving data from the
mobile device. We’ll talk about why we chose Django and the TastyPie API
package, and discuss other Python-based frameworks that could be used to
build the API such as Pyramid, Flask and Bottle. We’ll also compare REST
and custom APIs to understand best practices for building APIs designed
for mobile devices.&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category><category term="flask"></category><category term="json"></category><category term="mobile"></category><category term="rest"></category><category term="tastypie"></category><category term="web"></category></entry><entry><title>API design: Lessons Learned</title><link href="https://pyvideo.org/europython-2011/api-design-lessons-learned.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/api-design-lessons-learned.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking
behind some of Python's successful APIs and ones that leave something to
be desired. Learn general principles for designing a good API for public
consumption.&lt;/p&gt;
</summary><category term="api"></category></entry><entry><title>Robert Coup - /me wants it. Scraping sites to get data.</title><link href="https://pyvideo.org/kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Robert Coup</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/me wants it. Scraping sites to get data.&lt;/p&gt;
&lt;p&gt;Presented by Robert Coup&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Building scrapers for grabbing data from websites. Tools, techniques,
and tips.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Life would be so much easier if the data contained in websites was
available raw via APIs. Alas, until that mythical day comes we either
need to deal with unhelpful people via email and phone, or just get it
ourselves. Python has some great tools available to help with building
scrapers and for parsing and formatting the data we get. Starting off
with the basics - tracking what needs to be done, making web requests,
parsing HTML, following links, and extricating data from Excel and PDF
documents. Our scraper needs to be resilient against too-clever content
management systems, Frontpage-era HTML, and plain dodgy data. We may
need to pass through logins and other messiness. There are some
techniques and tips for approaching the problems and keeping your
solution flexible and as simple as possible. We'll discuss some scrapers
built for New Zealand data, and introduce a new project from the NZ open
government data group to provide a RESTful interface to scrapers -
effectively creating a nice API where there isn't one.&lt;/p&gt;
&lt;p&gt;Slides:
&lt;a class="reference external" href="http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-data"&gt;http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-
data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="api"></category><category term="html"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="rest"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Pants - Network Programming Made Easy</title><link href="https://pyvideo.org/pycon-au-2011/pants-network-programming-made-easy.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Christopher Davis</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/pants-network-programming-made-easy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pants (pantsweb.org) is an open source library that aims to make network
programming in Python a breeze. This talk will outline challenges in
network programming and how Pants approaches them. The audience will be
briefly introduced to Pants' API through example code, and to its
capabilities through benchmarks and comparisons with alternate
frameworks..&lt;/p&gt;
</summary><category term="api"></category><category term="network"></category><category term="pants"></category></entry><entry><title>Say What You Mean: Meta-Programming a Declarative API</title><link href="https://pyvideo.org/pycon-au-2011/say-what-you-mean-meta-programming-a-declarative.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Ryan F Kelly</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/say-what-you-mean-meta-programming-a-declarative.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explore the use of python's meta-programming facilities
to create a simple declarative API so that you can &lt;em&gt;say what you mean&lt;/em&gt; -
write code that focuses on the what and the why without being cluttered
by the how. If you've ever wondered how the Django ORM or SQLObject work
their magic, this is the talk for you.&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category><category term="orm"></category></entry><entry><title>Keynote: Python for Humans</title><link href="https://pyvideo.org/pycon-au-2012/keynote-python-for-humans.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Kenneth Reitz</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/keynote-python-for-humans.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python's ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We'll go over where these APIs went wrong and learn about strong
and elegant API desig&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We’ll go over where these APIs went wrong and learn about strong
and elegant API design. The high barriers to entry in Python will be
discussed. Potential solutions will be proposed.&lt;/p&gt;
</summary><category term="api"></category></entry><entry><title>Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Ivan Beschastnikh</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python-based Platform for Easy Development and Deployment of Networked
Systems and Applications&lt;/p&gt;
&lt;p&gt;Presented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos&lt;/p&gt;
&lt;p&gt;Seattle is an open-source platform for developing and deploying
networked applications. Core feature of Seattle is that it allows safe
execution of untrusted code on end-user systems. In our talk we look at
how we used Python to build a safe, restricted code execution
environment for Seattle that not only provides execution safety but also
enforces strict resource consumption limits. In addition, Seattle
includes a high-level API to hide inconsistent OS-specific behaviors
from developers. What results is a platform that welcomes the
participation of end-user machines for general-purpose distributed
programming and creates new possibilities for developers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://seattle.cs.washington.edu/"&gt;http://seattle.cs.washington.edu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Beginning of talk missing, due to technical
problems.]&lt;/p&gt;
</summary><category term="api"></category><category term="language"></category><category term="mobile"></category><category term="network"></category><category term="p2p"></category><category term="pycon"></category><category term="pycon2010"></category><category term="seattle"></category><category term="security"></category><category term="university"></category></entry><entry><title>API Design: Lessons Learned</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--api-design--lessons-learned.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--api-design--lessons-learned.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;API lessons learned from a decade of core Python development.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking
behind some of Python's successful APIs and ones that leave something to
be desired. Learn general principles for designing a good API for public
consumption.&lt;/p&gt;
&lt;p&gt;Hear the story and principles behind the design of Python's &amp;quot;in&amp;quot;
operator, the development of deques, and the evolution of the set API.&lt;/p&gt;
&lt;p&gt;Examine the principles and story behind the development of the named
tuple API. Learn about unforeseen use cases and a bug that made it to
production.&lt;/p&gt;
&lt;p&gt;Discuss the decimal module's API challenge -- adhering to a published
standard. Talk about the Queue module's framework style and how the API
was refactored.&lt;/p&gt;
&lt;p&gt;Discuss what we've learned about naming functions and methods. Look at
the i-naming convention in itertools, camelcase oddities, the proposed
Italian name for enumerate, and vaguely named methods like
assertItemsEqual.&lt;/p&gt;
&lt;p&gt;Learn about Guido's ideas on when to add flags to method signatures.
Recap his thoughts on the problems with the percent formatting operator.
Then hear Raymond's advice on packaging, hierarchies, and nested name
spaces.&lt;/p&gt;
&lt;p&gt;See how to use documentation to mitigate API problems using examples
from regular expressions, decimal, tokenize, sorting.&lt;/p&gt;
</summary><category term="api"></category><category term="apidesign"></category><category term="cpython"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>API Design anti-patterns</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--api-design-anti-patterns.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--api-design-anti-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API Design Anti-Patterns&lt;/p&gt;
&lt;p&gt;Presented by Alex Martelli&lt;/p&gt;
&lt;p&gt;Designing interfaces so that other code can interact with ours (whether
our code is a library, framework, application, website...) is a very
common and clearly crucial activity, but fraught with dangers -- stuff
we all keep doing wrong time after time. This talks shows some common
cases of API design errors encountered in the wild, with tips on how to
avoid them when you design your next API.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Whenever we write code we should always be thinking about how other code
(whether our own, or other people's) will interact with ours (an &amp;quot;API&amp;quot;,
in common parlance). Indeed, the most common and terrible mistake in API
design is... not doing any! -- i.e., not providing any designed,
architected way for other code to interact with ours. That's fortunately
less common when &amp;quot;our code&amp;quot; is a library or framework;-), but, alas!,
sadly widespread when &amp;quot;our code&amp;quot; is an application or website -- that's
why questions about screen- scraping the web and simulating keystrokes
and mouse gestures need be so tragically frequent all over the web.&lt;/p&gt;
&lt;p&gt;Once past the obvious hurdle of not having any API at all, there's still
plenty of ways we can go badly wrong in the process of designing one --
and many of those ways fall into recognizable categories, i.e.,
patterns. Specifically, since they're frequently observed categories of
defective design, they're anti-patterns -- and that's what this talk is
in fact about (as the smartest among you could tell from the title...).&lt;/p&gt;
&lt;p&gt;I'm eminently qualified to present on this subject, since, in a lifetime
spent mostly stumbling into software (after actually qualifying to
design hardware in college, but only doing that for a few years), I've
been responsible for more of my shares of API design fumbles (plus, of
course, just like every other programmer, I've done my share of swearing
at the design fumbles of other API designers). And, as novelist Richard
Bach reminds us, &amp;quot;You teach best what you most need to learn&amp;quot;!-)&lt;/p&gt;
</summary><category term="api"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>