<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nathan-cheever.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>1000x faster data manipulation: vectorizing with Pandas and Numpy</title><link href="https://pyvideo.org/pygotham-2019/1000x-faster-data-manipulation-vectorizing-with-pandas-and-numpy.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Nathan Cheever</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/1000x-faster-data-manipulation-vectorizing-with-pandas-and-numpy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The data transformation code you're writing is correct, but potentially
1000x slower than it needs to be! In this talk, we will go over multiple
ways to enhance a data transformation workflow with Pandas and Numpy by
showing how to replace slower, perhaps more familiar, ways of operating on
Pandas data frames with faster-vectorized solutions to common use cases
like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;if-else logic in applied row-wise functions&lt;/li&gt;
&lt;li&gt;dictionary lookups with conditional logic&lt;/li&gt;
&lt;li&gt;Date comparisons and calculations&lt;/li&gt;
&lt;li&gt;Regex and string column manipulation&lt;/li&gt;
&lt;li&gt;and others! ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;without needing a beefier computer, writing Cython, or other libraries
outside the Pandas ecosystem.&lt;/p&gt;
</summary></entry></feed>