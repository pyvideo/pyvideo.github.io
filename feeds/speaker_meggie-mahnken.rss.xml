<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 13 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Getting Started with Django's Class-Based Views</title><link>https://pyvideo.org/pybay-2017/getting-started-with-djangos-class-based-views.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Object orientation affords elegance and readability for back-end view logic for Python web applications. Come learn about how to not only start using Django’s Class-Based Views, but also how they work and how to break them down for your use case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When first learning the beloved web framework Django, it’s not uncommon to utilize function-based views for the back-end view logic of an application. This pattern rhymes with other popular web frameworks such as Flask and Pyramid. However, class-based views unlock an important set of capabilities: they help DRY up view logic, encourage consistency in form validation, and “plug&amp;quot; right into database model classes. While it’s easy to appreciate this from an objective standpoint (who wouldn’t want all of those things?), after an initial attempt at incorporating a class-based view, it can be hard to know if you’re making full use of them.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll start by replacing a basic function-based view for a homepage with a CBV using of Django’s base generic classes: TemplateView. Next, we’ll continue by looking at the purpose, descendants, and exciting possibilities of one of Django’s more generic views— the ListView class. Lastly, I’ll attempt to debunk the myth that CBVs are only appropriate for straightforward, model-oriented pages, but aren’t as customizable or elegant as function-based views for pages with multiple database components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meggie is currently the Director of the Software Engineering Fellowship at Hackbright Academy, where women learn to code in Python, build dynamic web applications, and study computer science in order to start careers in tech. She started coding in Python as a hobby after graduating from UC Berkeley in 2012 with a degree in Gender and Women's Studies. In 2013, Meggie completed Hackbright's Fellowship, and began working at Hackbright as a Software Engineer on internal tools. When not coding or hanging out in the Hackbright classroom, Meggie enjoys taking dance classes at various Bay Area dance schools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Meggie Mahnken</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/getting-started-with-djangos-class-based-views.html</guid></item><item><title>Lightning talks May 20th, 2017 Evening session session</title><link>https://pyvideo.org/pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks 2017-05-20 Evening&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;0:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Meredydd Luff&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Compiling blocking Python to non-blocking JS&lt;/strong&gt;
- Wrote client side JS in Python before yield or await
statements, using Skulpt transpiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;5:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Efron Licht&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Elements of Style&lt;/strong&gt;
- Write understandable code; write a story. Shorter
functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;11:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Maria Mckinley&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Refactoring Lengthy Bits of Code&lt;/strong&gt;
- Towards understanding the steps to refactoring: a
test, prose, outline, make functions and tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;15:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Erik Rose&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Getting Things Unguilty&lt;/strong&gt;
- Using &amp;quot;getting things done&amp;quot; as a one slide
flowchart.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;21:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Meggie Mahnken&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Using _slots_ for More Opinionated Objects&lt;/strong&gt;
- __slots__ when you don't want to allow attributes;
sometimes efficient.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;26:00&lt;/td&gt;
&lt;td rowspan="3"&gt;Travis&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;Crowd Computing&lt;/strong&gt;
- fun controlling crowds with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;29:15&lt;/td&gt;
&lt;td rowspan="5"&gt;Allen Downey&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Physical Modeling in Python&lt;/strong&gt;
- Making an interactive book to improve the undergrad
engineering student retention by putting in real world
early.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;33:00&lt;/td&gt;
&lt;td rowspan="4"&gt;Luceneo&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Time is Money&lt;/strong&gt;
- Communicating Professor Antonio Candido's
alternative view to this aphorism.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;35:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Cynthia Lynn&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;PyCon, a High Schooler's Perspective&lt;/strong&gt;
- A 15 year-old programmer.  Didn't come for a job;
felt accepted and welcome.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;41:45&lt;/td&gt;
&lt;td rowspan="4"&gt;David Bieber&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Python Fire, comand line interfaces&lt;/strong&gt;
- A single line or decorators added to functions or
classes to make CLIs; great workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;47:15&lt;/td&gt;
&lt;td rowspan="4"&gt;&amp;nbsp;&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Pitches for different conferences&lt;/strong&gt;
- One minute each for Python conferences around the
world.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Merdydd Luff</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</guid><category>lightning talks</category></item></channel></rss>