<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 10 Sep 2018 00:00:00 +0000</lastBuildDate><item><title>Lightning Talk: Searchable Documentation</title><link>https://pyvideo.org/write-the-docs-prague-2018/lightning-talk-searchable-documentation.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-10:write-the-docs-prague-2018/lightning-talk-searchable-documentation.html</guid></item><item><title>Getting started with Plone CMS development - Part 1</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-1.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Getting started with Plone CMS development - Part 2</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-2.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Nixos Operating System: Declarative Configuration Distribution</title><link>https://pyvideo.org/europython-2013/nixos-operating-system-declarative-configuration-distribution.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/nixos-operating-system-declarative-configuration-distribution.html</guid></item><item><title>Tools for successful project development</title><link>https://pyvideo.org/europython-2013/tools-for-successful-project-development.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/tools-for-successful-project-development.html</guid><category>project-management</category><category>testing</category><category>pyramid</category></item><item><title>What Python can learn from Haskell packaging</title><link>https://pyvideo.org/europython-2016/what-python-can-learn-from-haskell-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domen Kožar - What Python can learn from Haskell packaging
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/what-python-can-learn-from-haskell-packaging"&gt;https://ep2016.europython.eu//conference/talks/what-python-can-learn-from-haskell-packaging&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Haskell community has made lots of small important improvements to
packaging in 2015. What can Python community learn from it and how are
we different?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Haskell community has been living in &amp;quot;Cabal hell&amp;quot; for decades, but
Stack tool and Nix language have been a great game changer for Haskell
in 2015.&lt;/p&gt;
&lt;p&gt;Python packaging has evolved since they very beginning of distutils in
1999. We'll take a look what Haskell community has been doing in their
playground and what they've done better or worse.&lt;/p&gt;
&lt;p&gt;The talk is inspired by Peter Simons talk given at Nix conference:
[Peter Simons: Inside of the Nixpkgs Haskell Infrastructure][1]&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://www.youtube.com/watch?v=TDnZsBxqeBM&amp;amp;list=PL_IxoDz1Nq2Y7mIxMZ28mVtjRbbnlVdmy&amp;amp;index=4"&gt;https://www.youtube.com/watch?v=TDnZsBxqeBM&amp;amp;list=PL_IxoDz1Nq2Y7mIxMZ28mVtjRbbnlVdmy&amp;amp;index=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cabal (packaging) interesting features overview&lt;/li&gt;
&lt;li&gt;Cabal file specification overview&lt;/li&gt;
&lt;li&gt;Interesting Cabal features not seen in Python packaging&lt;/li&gt;
&lt;li&gt;Lack of features (introduction into next section)&lt;/li&gt;
&lt;li&gt;Cabal hell&lt;/li&gt;
&lt;li&gt;Quick overview of Haskell community frustration over Cabal tooling&lt;/li&gt;
&lt;li&gt;Stack tool overview&lt;/li&gt;
&lt;li&gt;What problem Stack solves&lt;/li&gt;
&lt;li&gt;How Stack works&lt;/li&gt;
&lt;li&gt;Comparing Stack to pip requirements&lt;/li&gt;
&lt;li&gt;Using Nix language to automate packaging&lt;/li&gt;
&lt;li&gt;how packaging is automated for Haskell&lt;/li&gt;
&lt;li&gt;how it could be done for Python&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/what-python-can-learn-from-haskell-packaging.html</guid></item><item><title>Rethinking packaging, development and deployment</title><link>https://pyvideo.org/europython-2014/rethinking-packaging-development-and-deployment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In Python, we're trying to solve packaging problems in our own domain,
but maybe someone else already solved most our problems. In the talk
I'll show how I develop and deploy Python projects that can be easily
mixed with non-Python dependencies. &lt;a class="reference external" href="http://nixos.org/nix/"&gt;http://nixos.org/nix/&lt;/a&gt; will be
demonstrated to replace technologies in our stack: pip, virtualenv,
buildout, ansible, jenkins.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is often mixed with other languages in development stack,
nowadays it's hard to escape any JavaScript dependencies. If you add
some C dependencies such as GStreamer to the stack, packaging becomes a
burden.&lt;/p&gt;
&lt;p&gt;While tweaking our packaging infrastructure will make things better,
it's hard to fix fundamental problem of packaging with current ad-hoc
solutions in Python domain.&lt;/p&gt;
&lt;p&gt;Using Nix (&lt;a class="reference external" href="http://nixos.org/nix/"&gt;http://nixos.org/nix/&lt;/a&gt;) for about a year gave me an insight
that solving packaging problem at operating system level (bottom-up) is
a better approach.&lt;/p&gt;
&lt;p&gt;For example, wouldn't it be cool to have &amp;quot;virtualenv&amp;quot; implemented inside
your package manager, so you could isolate also non-Python dependencies
and not just Python packages for your project and not worry if system
was updated?&lt;/p&gt;
&lt;p&gt;We'll also show what benefits do we get by using the same tool for
development and deployment and how little we have to do to deploy our
application.&lt;/p&gt;
&lt;p&gt;To see how Haskell community is touching the same subject, see blog post
&lt;a class="reference external" href="http://ocharles.org.uk/blog/posts/2014-02-04-how-i-develop-with-nixos.html"&gt;http://ocharles.org.uk/blog/posts/2014-02-04-how-i-develop-with-nixos.html&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/rethinking-packaging-development-and-deployment.html</guid></item><item><title>Rethinking packaging, development and deployment</title><link>https://pyvideo.org/pycon-ukraine-2014/rethinking-packaging-development-and-deployment-0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, we're trying to solve packaging problems in our own domain,
but maybe someone else already solved most our problems.&lt;/p&gt;
&lt;p&gt;In the talk I'll show how I develop and deploy Python projects that can
be easily mixed with non-Python dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nixos.org/nix/"&gt;http://nixos.org/nix/&lt;/a&gt; will be demonstrated to replace technologies in
our stack: pip, virtualenv, buildout, ansible, jenkins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Tue, 18 Nov 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-11-18:pycon-ukraine-2014/rethinking-packaging-development-and-deployment-0.html</guid></item><item><title>Rethinking packaging, development and deployment</title><link>https://pyvideo.org/pycon-us-2015/rethinking-packaging-development-and-deployment-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Applying functional programming ideas to solve the problem of packaging
software and configuration of systems in a stateless and deterministic
way. Nix project addresses those problems in unique way based on
academic research that has been applied to real world software
collections in last 10 years.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/rethinking-packaging-development-and-deployment-1.html</guid></item></channel></rss>