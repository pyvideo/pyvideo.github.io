<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_art.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T00:00:00+00:00</updated><entry><title>AI and algorithmic art</title><link href="https://pyvideo.org/pycon-italia-2019/ai-and-algorithmic-art.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Cheuk Ho</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/ai-and-algorithmic-art.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Many people think of neural networks as magic boxes, using them as such
is similar to allowing the computer or the machine to have a mind of
their own. Classification and prediction are the best-known applications
of these algorithms. But it has been demonstrated that they can also be
used in multiple creative or artistic ways such as generating pictures,
musical pieces, humour based dialogues or jokes and plays or literary
pieces. Leading to the following question: can these black boxes express
true creativity? A trait commonly associated with humans.&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Algorithmic Art (or computer generated art) refers to the use of
computer algorithms to create artistic pieces. Algorithmic art has been
around from the early 1960s, when artists used a plotter controlled by a
computer to create some visual artwork pieces. In the 80s when computer
graphics became more accessible, digital fractal artworks dominated to
become the mainstream of algorithmic art. By the end of the 80s, genetic
algorithms had matured enough to have a major influence in the
algorithmic composition of music. At the same time, the artificial
neural networks were used to explore the creation of musical
compositions. Most recently, thanks to the blooming of neural network
frameworks (e.g. tensorflow), availability of GPUs and development in
sophisticated neural network architecture, they play an important part
in academic research and data science business applications. Besides
that, these enhanced resources and frameworks have enabled the neural
networks to make significant contributions in the area of Algorithmic
Arts. Examples of this are the Deep Dream and artistic style transfer
and GANs (generative adversarial network) which can generate highly
deceptive pictures. A specially trained neural network is also capable
of composing music mimicking the style of Beethoven or generating a
modern music piece. In the same way, a neural network can be used to
generate poems or literary pieces in the true style of Shakespeare or
Hamilton. In this talk, we will go through a gallery of art and music
created by algorithms, showcasing what roles computers took in different
algorithmic art forms. From the earliest fractal art to the music and
pictures generated by the state of the art neural networks and GANs.
This talk is suitable for everyone, from the curious general public to
experts in the field of neural networks, both will find this talk
inspiring and amusing.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Slide for this talk:
&lt;a class="reference external" href="https://slides.com/cheukting_ho/ai-and-algorithmic-art/live#/"&gt;https://slides.com/cheukting_ho/ai-and-algorithmic-art/live#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1778"&gt;https://python.it/feedback-1778&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="art"></category><category term="pydata"></category><category term="AI"></category><category term="Algorithms"></category><category term="algorithmicart"></category><category term="neural network"></category></entry><entry><title>Deep Learning with PyTorch for Fun and Profit (Part III / Italian Edition: Divina Commedia)</title><link href="https://pyvideo.org/pycon-italia-2019/deep-learning-with-pytorch-for-fun-and-profit-part-iii-italian-edition-divina-commedia.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/deep-learning-with-pytorch-for-fun-and-profit-part-iii-italian-edition-divina-commedia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are all these great articles and blog posts about Deep Learning
describing all that awesome stuff. - Is it all that easy? Let’s check!&lt;/p&gt;
&lt;p&gt;We’ll look into: style transfer (making a picture look like painting),
speech generation (like Siri or Alexa) and text generation (writing a
story). In this talk I’ll describe the whole journey: A fun ride from
the idea to the very end including all the struggles, failures and
successes.&lt;/p&gt;
&lt;p&gt;This is an ongoing talk on how far we can get creating a full &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Radio_drama"&gt;radio
drama (Hörspiel)&lt;/a&gt; with
deep learning and the resources required.&lt;/p&gt;
&lt;p&gt;Steps, we’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The data challenge: get the data ready&lt;/li&gt;
&lt;li&gt;Creating a character-level language models with an Recurrent Neural
Network&lt;/li&gt;
&lt;li&gt;Creating a text generator&lt;/li&gt;
&lt;li&gt;Creating artwork&lt;/li&gt;
&lt;li&gt;Synthesising speech&lt;/li&gt;
&lt;li&gt;Making it sound like a real person&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this special PyCon X edition we will also try to recreate text in the
style of Dante’ Divina Commedia.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1687"&gt;https://python.it/feedback-1687&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="deep learning"></category><category term="Pytorch"></category><category term="art"></category><category term="Artificial Intelligence"></category><category term="nlp"></category></entry><entry><title>Artistic Python: Mixing Python Programming with Fashion</title><link href="https://pyvideo.org/pycon-italia-2017/artistic-python-mixing-python-programming-with-fashion.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Ria Baldevia</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/artistic-python-mixing-python-programming-with-fashion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are numerous ways to learn and introduce the world of programming
to new coders. One way is to embrace the world of art. Python offers an
ecosystem that can take any curious programmer to merge the world of art
and technology. Artistic Python: Mixing Programming with Fashion aims to
show how Python, some hardware, and numerous libraries can inspire
anyone to incorporate coding into their artistic endeavors and vice
versa.&lt;/p&gt;
&lt;p&gt;When one thinks of fashion, several things come to mind: fabric, sewing,
and fashion shows. Rarely does one think about leveraging programming
and available hardware as components in creating a final product.
Artistic Python will present the ideation, design, coding, and creation
process of an outfit that incorporated Python programming, lighting, and
small programmable computers.&lt;/p&gt;
</summary><category term="fashion"></category><category term="art"></category><category term="multimedia"></category><category term="music"></category><category term="social"></category><category term="Math"></category></entry><entry><title>Evolutionary Algorithms Perfecting the Art of "Good Enough"</title><link href="https://pyvideo.org/pydata-chicago-2016/evolutionary-algorithms-perfecting-the-art-of-good-enough.html" rel="alternate"></link><published>2016-09-23T00:00:00+00:00</published><updated>2016-09-23T00:00:00+00:00</updated><author><name>Liz Sander</name></author><id>tag:pyvideo.org,2016-09-23:pydata-chicago-2016/evolutionary-algorithms-perfecting-the-art-of-good-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/secret/dvt9zZBUVz7b7X"&gt;http://www.slideshare.net/secret/dvt9zZBUVz7b7X&lt;/a&gt;
Github: &lt;a class="reference external" href="https://github.com/esander91"&gt;https://github.com/esander91&lt;/a&gt;
Code: &lt;a class="reference external" href="https://github.com/esander91/GoodEnoughAlgs"&gt;https://github.com/esander91/GoodEnoughAlgs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Evolutionary algorithms let us tackle all kinds of impossible problems. Want to design a short delivery route, but there are more possible solutions than atoms in the universe? Well, evolutionary algorithms can't promise to find the optimal solution, but can guarantee finding a pretty great one. I'll give an overview of these algorithms, and how you can use them for your own impossible problems.&lt;/p&gt;
</summary><category term="art"></category></entry><entry><title>PyGotham 2011: Art, Cultural Concern, and Computer Code</title><link href="https://pyvideo.org/pygotham-2011/pygotham-2011--art--cultural-concern--and-compute.html" rel="alternate"></link><published>2011-09-16T00:00:00+00:00</published><updated>2011-09-16T00:00:00+00:00</updated><author><name>Annina Rüst</name></author><id>tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--art--cultural-concern--and-compute.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I will talk about software as art and software and politics using some
of my own art+tech projects. This will be followed by an audience
participation segment.&lt;/p&gt;
</summary><category term="art"></category><category term="pygotham"></category><category term="pygotham2011"></category><category term="software"></category></entry><entry><title>PyHP and the art of dating girls</title><link href="https://pyvideo.org/europython-2011/pyhp-and-the-art-of-dating-girls.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Fabio Rotondo</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/pyhp-and-the-art-of-dating-girls.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Fabio Rotondo - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be both technical and light talk, introducing these important
subjects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the new scripting language PyHP, a solution to create dynamic web
pages using the Python scripting language server side, a-la PHP, but
smarter.&lt;/li&gt;
&lt;li&gt;the LiWE (Lightweight Web Environment) Web Framework, a new and
robust web framework written in both JavaScript and Python that will
help you creating amazing websites.&lt;/li&gt;
&lt;li&gt;how this new amazing technologies can help you date girls (this will
be the light and funny part of the talk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Very basic knowledge of PHP&lt;/li&gt;
&lt;li&gt;Basic Python&lt;/li&gt;
&lt;li&gt;Basic / None JavaScript&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="art"></category><category term="framework"></category><category term="javascript"></category><category term="web"></category></entry><entry><title>The Art of Subclassing</title><link href="https://pyvideo.org/europython-2011/the-art-of-subclassing-0.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/the-art-of-subclassing-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All problems have simple, easy-to-understand, logical wrong answers.
Subclassing in Python is no exception. Avoid the common pitfalls and
learn everything you need to know about how subclass in Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overriding and extending&lt;/li&gt;
&lt;li&gt;Calling your parents&lt;/li&gt;
&lt;li&gt;The ellipse / circle problem - what does a subclass mean?&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Open Closed Principle&lt;/li&gt;
&lt;li&gt;The facts of life when subclassing builtin types&lt;/li&gt;
&lt;li&gt;How to Implement Cooperative Multiple Inheritance&lt;/li&gt;
&lt;li&gt;A example of perfect and simple python diamond&lt;/li&gt;
&lt;li&gt;Beware the Concrete C API&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="art"></category></entry></feed>