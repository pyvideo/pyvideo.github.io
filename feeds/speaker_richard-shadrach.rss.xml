<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Richard Shadrach</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 16 Dec 2023 00:00:00 +0000</lastBuildDate><item><title>Lightning Talk Day 2</title><link>https://pyvideo.org/euroscipy-2023/lightning-talk-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks of the second conference day at EuroSciPy 2023.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cheuk Ting Ho</dc:creator><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-08-14:/euroscipy-2023/lightning-talk-day-2.html</guid><category>EuroSciPy 2023</category></item><item><title>Pandas 2.0 and beyond</title><link>https://pyvideo.org/euroscipy-2023/pandas-20-and-beyond.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas has reached a 2.0 milestone in 2023. But what does that mean? And what is coming after 2.0? This talk will give an overview of what happened in the latest releases of pandas and highlight some topics and major new features the pandas project is working on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joris Van den Bossche</dc:creator><pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-08-14:/euroscipy-2023/pandas-20-and-beyond.html</guid><category>EuroSciPy 2023</category></item><item><title>Debugging Failing Pytest Tests in a Notebook</title><link>https://pyvideo.org/pyohio-2023/debugging-failing-pytest-tests-in-a-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes how to use the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-ndb&lt;/span&gt;&lt;/tt&gt; package for debugging
failed pytest tests using a notebook.&lt;/p&gt;
&lt;p&gt;In our opinion, developers should often prefer to debug failing tests
using a debugger such as pdb. However for certain applications, such as
those that occur in data science with large complex data sets or long
running models, this is can be quite difficult. Debugging a failing test
can mean having to analyze data, for which there is little support in a
debugger and where notebooks truly shine.&lt;/p&gt;
&lt;p&gt;Traditionally to debug in a notebook, all of the code from the test,
including fixtures and parametrizations, must be copied. For simple
tests this might not be an issue, but for a complex test it can be quite
time consuming. Instead, you can use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pytest-ndb&lt;/span&gt;&lt;/tt&gt;!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Shadrach</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/debugging-failing-pytest-tests-in-a-notebook.html</guid><category>PyOhio 2023</category></item></channel></rss>