<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastian-benthall.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-15T00:00:00+00:00</updated><entry><title>Exploring Open Source Community Dynamics with BigBang</title><link href="https://pyvideo.org/scipy-2015/exploring-open-source-community-dynamics-with-bigbang.html" rel="alternate"></link><published>2015-07-09T00:00:00+00:00</published><updated>2015-07-09T00:00:00+00:00</updated><author><name>Sebastian Benthall</name></author><id>tag:pyvideo.org,2015-07-09:scipy-2015/exploring-open-source-community-dynamics-with-bigbang.html</id><summary type="html"></summary></entry><entry><title>Computational Supply Chain Risk Management for Open Source Software</title><link href="https://pyvideo.org/scipy-2016/computational-supply-chain-risk-management-for-open-source-software-scipy-2016-sebastian-benthall.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Sebastian Benthall</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/computational-supply-chain-risk-management-for-open-source-software-scipy-2016-sebastian-benthall.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We address the cybersecurity problems of supply chain risk management in open source software. How does one detect high-risk components in a deployed software system that includes many open source components? As a complement to software assurance approaches based on static source code analysis, we propose a technique based on an analysis of the entire open source ecosystem, inclusive of its technical products and contributor activity. we show how dependency topology, community activity, and exogenous vulnerability and exposure information can be integrated to detect high risk &amp;quot;hot spots&amp;quot; requiring additional investment. We demonstrate this technique using the Python dependency topology extracted from PyPi and data from GitHub. We will dicuss how our analysis prototype has been implemented with SciPy tools.&lt;/p&gt;
</summary><category term="SciPy 2016"></category></entry><entry><title>Reflexive Data Science on SciPy Communities</title><link href="https://pyvideo.org/scipy-2014/reflexive-data-science-on-scipy-communities.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>Sebastian Benthall</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/reflexive-data-science-on-scipy-communities.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I present tools for collecting data generated by Scientific Python
community development infrastructure (mailing list archives, pull
requests, issue trackers) and analyzing it with Pandas and NetworkX.
Showing preliminery results using social network analysis and complex
systems modeling, I demonstrate using reflexive data science to enrich
our understanding of open source development.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="background-motivation"&gt;
&lt;h4&gt;Background/Motivation&lt;/h4&gt;
&lt;p&gt;The Scientific Python community's contributions to greater scientific
understanding have been underappreciated by academic institutions. One
reason for this is that software engineering is widely misunderstood and
not recognized as research work in its own right, as opposed to paper
publication and patents. A better understanding of the open source
software development process itself will help academic institutions
recognize the contributions of open source developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="methods"&gt;
&lt;h4&gt;Methods&lt;/h4&gt;
&lt;p&gt;I collect historical data from development of Scientific Python projects
and render these into formats suitable for analysis using SciPy tools.
To demonstrate the potential of this work, I will show two ways of
analyzing this data scientifically: as a self-excited Hawkes process
exibiting shock behavior, and as information diffusion over a social
network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h4&gt;Results&lt;/h4&gt;
&lt;p&gt;The purpose of this talk is twofold.&lt;/p&gt;
&lt;p&gt;First, to introduce tools and techniques for turning data from open
source software production into scientific data suitable for analysis.
This talk proposes that there's an opportunity for SciPy to engage in
&lt;em&gt;reflexive data science&lt;/em&gt;, using its own data to learn more about how it
functions and how to operate more efficiently.&lt;/p&gt;
&lt;p&gt;Second, this talk will present visualizations of the data based on
complex systems research and social network analysis. Building on prior
work, these results will focus on the role of productive bursts in
communications. Drawing on social network analysis and prior work on
roles in Usenet communities and open source communities, this talk will
provide historical insight into the interaction between SciPy
communities.&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>