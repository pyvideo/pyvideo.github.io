<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_chris-cabral.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-09-17T00:00:00+00:00</updated><entry><title>From Legacy to Admin</title><link href="https://pyvideo.org/djangocon-us-2014/from-legacy-to-admin.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Chris Cabral</name></author><id>tag:pyvideo.org,2014-09-17:djangocon-us-2014/from-legacy-to-admin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;For those who have not had the pleasure of seeing django's inspectdb
command in action, I will create a demonstration of it's power. Django's
inspectdb command can reverse engineer a set of models from a postgres
or mysql database. I will demonstrate how to take a legacy database and
create a quick and dirty admin tool along with a simple rest interface.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FOP1/"&gt;http://amara.org/v/FOP1/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>