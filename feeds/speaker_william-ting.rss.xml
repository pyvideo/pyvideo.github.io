<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 21 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Self-Healing Systems: The Road to 99.99% Uptime</title><link>https://pyvideo.org/pybay-2016/self-healing-systems-the-road-to-9999-uptime.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stop firefighting and start fireproofing! There are many tools that make oncall easier and increase availability, but we'll be mostly focusing on a few principles and design patterns that help make your systems more robust.
â€‹
Abstract
Feature velocity is typically a higher priority early in a software's lifecycle, but as the system matures there is an effort to start fireproofing the system. On the Yelp Transactions Platform team we've used a combination of circuit breakers, queues, and idempotent operations to minimize downtime and waking up in the middle of the night.&lt;/p&gt;
&lt;p&gt;We'll take a look at how these design patterns help us in a distributed system, when they should be used, and common pitfalls associated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
William Ting is a longtime FOSS advocate with contributions in various projects (Pelican, autojump, pyramid_swagger, Rust, GNOME). He's currently an infrastructure engineer at Reddit, and previously on the Yelp Transaction Platform team.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/william-ting-self-healing-systems-the-road-to-99-dot-99-percent-uptime"&gt;https://speakerdeck.com/pybay2016/william-ting-self-healing-systems-the-road-to-99-dot-99-percent-uptime&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Ting</dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-21:pybay-2016/self-healing-systems-the-road-to-9999-uptime.html</guid></item></channel></rss>