<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Classes</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><item><title>Inheriting one class from another</title><link>https://pyvideo.org/python-morsels/inheriting-one-class-another.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To inherit your class from another class, put parentheses after the class name and list parent classes. We allow multiple inheritance in Python, but we usually prefer single class inheritance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-04:/python-morsels/inheriting-one-class-another.html</guid><category>Python Morsels</category><category>Classes</category><category>Inheritance</category></item><item><title>__init__ in Python</title><link>https://pyvideo.org/python-morsels/what-is-init.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &lt;cite&gt;__init__&lt;/cite&gt; method is used to initialize a class. The initializer method accepts self (the class instance) along with any arguments the class accepts and then performs initialization steps.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-02-11:/python-morsels/what-is-init.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>Python's self</title><link>https://pyvideo.org/python-morsels/what-is-self.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's &lt;cite&gt;self&lt;/cite&gt; is really just a variable that points to the current instance of our class. Every method you define must accept &lt;cite&gt;self&lt;/cite&gt; as its first argument.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-28:/python-morsels/what-is-self.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>Classes are everywhere</title><link>https://pyvideo.org/python-morsels/classes-are-everywhere.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even if you never make your class, you will certainly use classes. A lot of the built-in functions in Python are classes too. Anything that has a type has a class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-22:/python-morsels/classes-are-everywhere.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>What is a class?</title><link>https://pyvideo.org/python-morsels/what-is-a-class.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Classes are for coupling state (attributes) and functionality (methods). Calling a class returns an instance of that class. Class and &amp;quot;type&amp;quot; are synonyms in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-09:/python-morsels/what-is-a-class.html</guid><category>Python Morsels</category><category>Classes</category></item></channel></rss>