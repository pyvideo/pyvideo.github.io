<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_serialization.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-20T00:00:00+00:00</updated><entry><title>The failure of python object serialization: why HPC in python is broken</title><link href="https://pyvideo.org/pycon-uk-2014/the-failure-of-python-object-serialization-why-hpc-in-python-is-broken.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Mike McKerns</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/the-failure-of-python-object-serialization-why-hpc-in-python-is-broken.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Mike McKerns&lt;/p&gt;
&lt;p&gt;Parallel and asynchronous computing in python is crippled by pickle's poor object serialization. However, a more robust serialization package would drastically improve the situation. To leverage the cores found in modern processors we need to communicate functions between different processes -- and that means callables must be serialized without pickle barfing. Similarly, parallel and distributed computing with MPI, GPUs, sockets, and across other process boundaries all need serialized functions (or other callables). So why is pickling in python so broken? Python's ability to leverage these awesome communication technologies is limited by python's own inability to be a fully serializable language. In actuality, serialization in python is quite limited, and for really no good reason.&lt;/p&gt;
&lt;p&gt;Many raise security concerns for full object serialization, however it can be argued that it is not pickle's responsibility to do proper authentication. In fact, one could apply rather insecure serialization of all objects the objects were all sent across RSA-encrypted ssh-tunnels, for example.&lt;/p&gt;
&lt;p&gt;Dill is a serialization package that strives to serialize all of python. We have forked python's multiprocessing to use dill. Dill can also be leveraged by mpi4py, ipython, and other parallel or distributed python packages. Dill serves as the backbone for a distributed parallel computing framework that is being used to design the next generation of large-scale heterogeneous computing platforms, and has been leveraged in large-scale calculations of risk and uncertainty. Dill has been used to enable state persistence and recovery, global caching, and the coordination of distributed parallel calculations across a network of the world's largest computers.     &lt;a class="reference external" href="http://pythonhosted.org/dill"&gt;http://pythonhosted.org/dill&lt;/a&gt;     &lt;a class="reference external" href="https://github.com/uqfoundation"&gt;https://github.com/uqfoundation&lt;/a&gt;     &lt;a class="reference external" href="http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/"&gt;http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/&lt;/a&gt;     &lt;a class="reference external" href="http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1"&gt;http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1&lt;/a&gt;     &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY"&gt;https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY&lt;/a&gt;     &lt;a class="reference external" href="http://nbviewer.ipython.org/gist/anonymous/5241793"&gt;http://nbviewer.ipython.org/gist/anonymous/5241793&lt;/a&gt;&lt;/p&gt;
</summary><category term="dill"></category><category term="serialization"></category><category term="pickle"></category></entry><entry><title>django-rdflib and postgresql - the best of both worlds</title><link href="https://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Stefan Talpalaru</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</summary><category term="architecture"></category><category term="database"></category><category term="django"></category><category term="orm"></category><category term="postgresql"></category><category term="reusing"></category><category term="search"></category><category term="serialization"></category><category term="university"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview-.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry><entry><title>Everything You Wanted To Know About Pickling, But Were Afraid To Ask!</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--everything-you-wanted-to-know-about-p.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Richard T. Saunders</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--everything-you-wanted-to-know-about-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Wanted To Know About Pickling, But Were Afraid To Ask!&lt;/p&gt;
&lt;p&gt;Presented by Richard T. Saunders&lt;/p&gt;
&lt;p&gt;Serializing data structures (in Python-speak &amp;quot;pickling&amp;quot;) to save to
disk/socket is an important tool for the programmer: We will discuss how
the pickling protocols (0,1,2, and 3) work as well as real-world issues
(gotchas, backwards-compatibility, etc). We will concentrate on the
basics of this stack-based protocol: what it looks like, how to
encode/decode, speeds of different implementations.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The Pickling Protocols are a fundamental tool for saving state.&lt;/p&gt;
&lt;p&gt;We will discuss the differences between text serialization and Python
pickling (as well as marshalling, and simple bit-blitting).&lt;/p&gt;
&lt;p&gt;We will spend a little time discussing history: why there is a cPickle
and pickle module in 2.x and only pickle in 3.x., and why there are 4
different protocols: 0,1,2 and 3.&lt;/p&gt;
&lt;p&gt;We will then dive right in and look at how the stack-based protocol
works. We will concentrate on the basics (the stack-based machine), as
all the protocols adhere to this basic model, but tend to discuss the
more recent protocols and their differences. We will also discuss how
the memoization scheme works.&lt;/p&gt;
&lt;p&gt;We will show some simple examples and then build to more complex
examples.&lt;/p&gt;
&lt;p&gt;We will also discuss the relative speeds: the different protocols (text,
0,1,2,3) and the different implementations (Python, Boost,
PicklingTools, IronPython?, PyPy? Unladen Swallow?).&lt;/p&gt;
&lt;p&gt;We will end with some real-world advice and some gotchas to watch out
for (32-bit vs. 64-bit, different versions of Python serialize
differently, etc.).&lt;/p&gt;
</summary><category term="pickling"></category><category term="pycon"></category><category term="pycon2011"></category><category term="serialization"></category></entry></feed>