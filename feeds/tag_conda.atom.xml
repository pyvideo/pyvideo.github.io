<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_conda.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>From 0 to Continuous Delivery in 30 minutes.</title><link href="https://pyvideo.org/pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>David WÃ¶lfe</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you wrote this neat software, which uses one or two cool 3rd party packages and now you have to get it running on your test or prod servers. Now you could check out your code and install the dependencies manually but that seems like a lot of wasted time, right? Shouldn't there be a more convenient way of doing this?&lt;/p&gt;
&lt;p&gt;Yes! And it's easier than you think! In this talk you'll learn how to build a Continuous Delivery pipeline for your python (or whatever) projects in 30 Minutes.&lt;/p&gt;
&lt;p&gt;In the beginning you'll get a quick introduction into the topic and the used tools, which are open source and free to use. For those who know a little about the subject: We will use conda (&lt;a class="reference external" href="https://conda.io"&gt;https://conda.io&lt;/a&gt;) to build the software package and for the dependency handling. GitLab.com will process the actual pipeline for us and Anaconda.com serves us with a package distribution channel.&lt;/p&gt;
&lt;p&gt;After that it's &amp;quot;hands on&amp;quot; time. We will go step by step trough the process. Starting with the creation of a little dummy program. Then extending the dummy in such manner that it can be build into a package. Afterwards we will create the pipeline and finally do a demo deploy. And if the gods of conference internet are merciful, you see all this as a live demonstration.&lt;/p&gt;
</summary><category term="hands on"></category><category term="continuous delivery"></category><category term="devops"></category><category term="python"></category><category term="gitlab"></category><category term="conda"></category></entry><entry><title>CondaForge and the Future of Scientific Python packaging</title><link href="https://pyvideo.org/scipyla-2016/condaforge-and-the-future-of-scientific-python-packaging.html" rel="alternate"></link><published>2016-06-23T00:00:00+00:00</published><updated>2016-06-23T00:00:00+00:00</updated><author><name>Filipe Fernandes</name></author><id>tag:pyvideo.org,2016-06-23:scipyla-2016/condaforge-and-the-future-of-scientific-python-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestrante: Filipe Fernandes&lt;/p&gt;
&lt;p&gt;Resumo:&lt;/p&gt;
&lt;p&gt;Conda is an open-source packaging system developed for, and used by, the scientific software community.&lt;/p&gt;
&lt;p&gt;The conda-forge project aims to bring a community supported collection of packages to end users using conda.&lt;/p&gt;
&lt;p&gt;While developed to meet the unique needs of scientific software developers, it is a system that brings features and utilities for the broader developer community.&lt;/p&gt;
</summary><category term="conda"></category></entry><entry><title>Using conda for development, continuous integration, and package distribution</title><link href="https://pyvideo.org/pycaribbean-2016/conda.html" rel="alternate"></link><published>2016-02-20T00:00:00+00:00</published><updated>2016-02-20T00:00:00+00:00</updated><author><name>Blake Griffith</name></author><id>tag:pyvideo.org,2016-02-20:pycaribbean-2016/conda.html</id><summary type="html"></summary><category term="conda"></category></entry><entry><title>Community-Powered Packaging with conda-forge (BoF Session)</title><link href="https://pyvideo.org/scipy-2016/community-powered-packaging-with-conda-forge-bof-session-scipy-2016-phillip-elson.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Phillip Elson</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/community-powered-packaging-with-conda-forge-bof-session-scipy-2016-phillip-elson.html</id><summary type="html"></summary><category term="SciPy 2016"></category><category term="conda"></category><category term="conda-forge"></category></entry><entry><title>Conda: A Cross Platform Package Manager for any Binary Distribution</title><link href="https://pyvideo.org/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the problems that have plagued Python packaging in the past, followed by
a demonstration of its features.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the issues that have plagued packaging in the Python
ecosystem in the past, and discuss how Conda solves these problems. We
will show how to use conda to manage multiple environments. Finally, we
will look at how to build your own conda packages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the packaging problem? We will briefly look at the history of
the problem and the various solutions to it. There are two sides to
the packaging problem: the problem of installing existing packages
and the problem of building packages to be installed. We look at the
history of distutils, setuptools, distribute, and pip, the some of
the problems they solved, and issues that arose, particularly for the
scientific Python community.&lt;/li&gt;
&lt;li&gt;We will look at the conda package format, the design decisions that
guided the format, and the implications of those decisions. A conda
package is a bz2 compressed tarfile of all the files installed in a
prefix, along with a metadata directory for the package. A conda
package is typically installed by hard linking these files into the
install prefix. Conda packages should be relocatable, so that they
can be installed into any prefix. This allows conda packages to be
installed into many virtual environments at once. A conda package is
not Python specific.&lt;/li&gt;
&lt;li&gt;We will look at how basic commands for installation and environment
management. Conda uses a SAT solver to solve package dependency
constraints, which is a simple, rigorous, and modern way to ensure
that the set of packages that are installed are consistent with one
another.&lt;/li&gt;
&lt;li&gt;Conda has an extensive build framework which allows anybody to build
their own conda packages. We will show how to use these tools and how
to upload them to Binstar, a free packaging hosting service.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="conda"></category><category term="packaging"></category></entry></feed>