<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ausmarton-zarino-fernandes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-08-31T00:00:00+00:00</updated><entry><title>Ansible: Configuration Management Simplified</title><link href="https://pyvideo.org/pycon-india-2013/ansible-configuration-management-simplified.html" rel="alternate"></link><published>2013-08-31T00:00:00+00:00</published><updated>2013-08-31T00:00:00+00:00</updated><author><name>Ausmarton Zarino Fernandes</name></author><id>tag:pyvideo.org,2013-08-31:pycon-india-2013/ansible-configuration-management-simplified.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is unlike mainstream configuration management tools as in, it
does not require a centralised server for management. It's very
lightweight and doesn't require any kind of client daemon to be running
on every managed instance. This along with it's ease of configuration in
yaml, make it a very good candidate for managing small to medium sized
infrastructures where the overhead of having a constantly polling client
daemon would be quite visible.&lt;/p&gt;
&lt;p&gt;A benefit over the more popular tools like Chef and Puppet includes the
fact that for the most part, one does not need to write code for setting
up common infrastructures, machine configurations are done in yaml.
Python knowledge would be required when writing plugins to add more
functionality to ansible.&lt;/p&gt;
&lt;p&gt;I will cover the architecture of ansible and yaml configurations.
Finally, I'll demonstrate the use of it to set up a small infrastructure
by writing playbooks for it.&lt;/p&gt;
</summary></entry></feed>