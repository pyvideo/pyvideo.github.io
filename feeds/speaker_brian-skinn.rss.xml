<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 28 Jul 2019 13:45:00 +0000</lastBuildDate><item><title>The Riddle of the Intersphinx: Configuration and Cross-Reference Composition</title><link>https://pyvideo.org/pyohio-2019/the-riddle-of-the-intersphinx-configuration-and-cross-reference-composition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sphinx is a documentation generator used by the core Python
documentation and numerous other projects in the Python ecosystem.
Sphinx supports cross- references between documentation sets via its
‘intersphinx’ extension; however, proper configuration is not always
straightforward, and cross- references can be finicky to craft
correctly. This talk aims to demystify these riddles of intersphinx
usage.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sphinx-doc.org"&gt;Sphinx&lt;/a&gt; is a documentation generator used
by the &lt;a class="reference external" href="https://docs.python.org/3/library/index.html"&gt;core Python
documentation&lt;/a&gt; and
numerous other packages such as
&lt;a class="reference external" href="https://docs.scipy.org/doc/scipy/reference/"&gt;SciPy&lt;/a&gt;,
&lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django&lt;/a&gt;, and
&lt;a class="reference external" href="https://docs.blender.org/api/current/"&gt;Blender&lt;/a&gt;. Sphinx supports
cross- references across project boundaries via its &lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#module-%20sphinx.ext.intersphinx"&gt;'intersphinx'
extension&lt;/a&gt;,
which uses data from an objects inventory file generated by Sphinx when
building HTML docs. However, configuration of the intersphinx mappings
to external documentation and correct composition of the
cross-references to specific external objects can both be challenging to
achieve, as the necessary reference syntax can vary in a non-obvious
way. Related messages/warnings issued during the Sphinx build process,
if enabled, are useful for identifying that a problem exists, but are
typically of minimal help in fixing the broken references. The &lt;a class="reference external" href="http://www.sphinx-%20doc.org/en/stable/markup/inline.html#role-any"&gt;:any:
role&lt;/a&gt;
is convenient for some cases, but is unhelpful when a given object name
is ambiguous (e.g., with the Python &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#max"&gt;max()
builtin&lt;/a&gt; versus
&lt;a class="reference external" href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.max.html"&gt;numpy.ndarray.max&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In this talk, I will describe a (mostly) systematic approach to
intersphinx configuration and usage, including locating the inventory
for an external docset; decoding and parsing the inventory to obtain the
information needed for a functional intersphinx reference; and
constructing the cross-reference from this information. As I hope to
demonstrate, using intersphinx is quite easy, as long as you know where
to look for key information, and what to do with it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Skinn</dc:creator><pubDate>Sun, 28 Jul 2019 13:45:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-28:pyohio-2019/the-riddle-of-the-intersphinx-configuration-and-cross-reference-composition.html</guid></item></channel></rss>