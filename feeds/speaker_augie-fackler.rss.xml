<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 09 Jun 2016 00:00:00 +0000</lastBuildDate><item><title>Code Unto Others</title><link>https://pyvideo.org/pycon-us-2016/nathaniel-manista-augie-fackler-code-unto-others-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Nathaniel Manista, Augie Fackler&lt;/p&gt;
&lt;p&gt;Large codebases written by many authors over long periods of time too often become tragedies of the commons riddled with complexity and technical debt. Weâ€™ll cover the pathologies that specifically encumber collaborative software development (drawing on examples from the Mercurial codebase) and describe alternative practices, their efficacy, and the costs of adopting them.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel Manista</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:pycon-us-2016/nathaniel-manista-augie-fackler-code-unto-others-pycon-2016.html</guid></item><item><title>HTTP in Python: which library for what task?</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--http-in-python--which-library-for-wha.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTTP in Python: which library for what task?&lt;/p&gt;
&lt;p&gt;Presented by Augie Fackler&lt;/p&gt;
&lt;p&gt;HTTP is the lingua franca of the web, and many things done in Python
depend on it, yet HTTP in Python isn't always as good as one would
expect. It's well worth knowing the options and tradeoffs available.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;HTTP in Python is very much a mixed bag of available technology. What's
implemented mostly works well, but there are some frustrating gaps in
different libraries that are poorly documented. I've gone wading through
every HTTP library I can find for Python while trying to fix an obscure
bug in Mercurial and decided to write my own. I'll cover what's
available today and why I'm starting from scratch with a completely new
implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--http-in-python--which-library-for-wha.html</guid><category>httplib</category><category>pycon</category><category>pycon2011</category><category>pycurl</category><category>urllib</category></item><item><title>Stop Mocking, Start Testing</title><link>https://pyvideo.org/pycon-us-2012/stop-mocking-start-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Project Hosting at Google Code is a large, well-established system
written mostly in Python. We'll share our battle-born convictions about
creating tests for test-unfriendly code and the larger topic of testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/stop-mocking-start-testing.html</guid></item><item><title>The End Of Object Inheritance &amp; The Beginning Of A New Modularity</title><link>https://pyvideo.org/pycon-us-2013/the-end-of-object-inheritance-the-beginning-of.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;After 15 years' combined experience developing software of all types we
are done with object inheritance. Come learn about elegant, superior
solutions to the problems inheritance claims to adequately solve.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/the-end-of-object-inheritance-the-beginning-of.html</guid><category>talk</category></item><item><title>Deliver Your Software In An Envelope</title><link>https://pyvideo.org/pycon-us-2014/deliver-your-software-in-an-envelope.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Guaranteed behavior makes software modules useful. Software guarantees
are commonly incomplete with good reason: promises that are narrow and
few are most easily kept across wide ranges of platforms and long times.
We define the space of a module's allowed behavior to be its &amp;quot;behavioral
envelope&amp;quot; and show that thinking and speaking in terms of envelopes
eases maintenance and makes APIs delightful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/deliver-your-software-in-an-envelope.html</guid></item></channel></rss>