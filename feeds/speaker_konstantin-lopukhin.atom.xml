<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_konstantin-lopukhin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-06-02T00:00:00+00:00</updated><entry><title>An approach to versioning in relational database</title><link href="https://pyvideo.org/pycon-russia-2013/an-approach-to-versioning-in-relational-database.html" rel="alternate"></link><published>2013-02-24T00:00:00+00:00</published><updated>2013-02-24T00:00:00+00:00</updated><author><name>Konstantin Lopukhin</name></author><id>tag:pyvideo.org,2013-02-24:pycon-russia-2013/an-approach-to-versioning-in-relational-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I want to tell about data versioning  in relational database – where this problem comes from, possible ways of statement and solution. Particularly I will tell about interval based approach which allows working with the system at any moment in the past, do the whole system back-off or back-off of its separate parts. This approach realized in a small library “documents” for Django, but the concept is easy movable. I will take the usage of this approach for traditional applications and for versioned EAV database building, showing data like a graph.&lt;/p&gt;
</summary></entry><entry><title>На что уходит память?</title><link href="https://pyvideo.org/pycon-russia-2014/na-chto-ukhodit-pamiat.html" rel="alternate"></link><published>2014-06-02T00:00:00+00:00</published><updated>2014-06-02T00:00:00+00:00</updated><author><name>Константин Лопухин</name></author><id>tag:pyvideo.org,2014-06-02:pycon-russia-2014/na-chto-ukhodit-pamiat.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Я хочу поговорить о проблеме потребления памяти приложений на Python - как понять что происходит, и что делать, когда оно больше чем нам хотелось бы.
Сначала мы посмотрим, как вообще Python работает с памятью внутри, как он взаимодействует с ОС, может ли он отдавать память.
Затем рассмотрим инструменты для анализа потребления памяти, и научимся интерпретировать их результат.
Разберем типичные ошибки, которые приводят к излишнему потреблению памяти, рассмотрим некоторые приемы, которые могут позволить его уменьшить даже при отсутствии явных ляпов.
В отличие от темы анализа производительности, на тему анализа потребления памяти на удивление мало материала, в основном только ответы на stackoverflow, поэтому хочется попробовать систематизировать то, что удалось узнать.&lt;/p&gt;
</summary></entry></feed>