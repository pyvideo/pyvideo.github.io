<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate><item><title>RedisAI</title><link>https://pyvideo.org/pycon-italia-2019/redisai.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking deep learning models to production and doing so reliably is one
of the next frontiers of DevOps. With the advent of Redis modules and
the availability of C APIs for the major deep learning frameworks, it is
now possible to turn Redis into a reliable runtime for deep learning
workloads, providing a simple solution for a model serving microservice.
In this talk we will introduce RedisAI, a joint effort by Orobix and
RedisLabs that introduces tensors and graphs as new Redis data types and
allows to execute graphs over tensors using multiple backends (PyTorch,
TensorFlow, and ONNXRuntime), both on the CPU and GPU. The module also
supports scripting with TorchScript, which provides a Python-like tensor
language that can be used to facilitate pre- and post-processing
operations, like input shaping or output ensambling. In addition, thanks
to its support for the ONNX standard, including ONNX-ML, RedisAI is not
strictly limited to deep learning, but it offers support for general
machine learning algorithms. In this talk, we will demonstrate a full,
Python-powered journey from fine tuning a model to a scalable Flask +
RedisAI deployment. Last, we will lay down the roadmap for the future,
like automated batching, sharding, integration with Redis data types
(e.g. streams) and advanced monitoring. The talk will include sample
code, best practices and a live demo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1756"&gt;https://python.it/feedback-1756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luca Antiga</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/redisai.html</guid><category>database</category><category>redis</category><category>devops</category><category>Machine Learning</category><category>deployment</category><category>neural network</category></item><item><title>Python e MySQL 8.0 Document Store</title><link>https://pyvideo.org/pycon-italia-2019/python-e-mysql-80-document-store.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MySQL Document Store è l’implementazione di MySQL di un Document Store
JSON. Permette di memorizzare dati non strutturati sfruttando le
proprietà transazionali già disponibili in MySQL. Per poter usare
pienamente il MySQL Document Store, il nuovo X DevAPI è stato sviluppato
ed è disponibile per diversi linguaggi di programmazione, anche in
Python attraverso MySQL Connector/Python 8.0. Questa presentazione vi
guida attraverso le basi del MySQL Document Store e come utilizzare l’X
DevAPI in MySQL Connector/Python 8.0 per gestire le raccolte di
documenti e utilizzare i metodi CRUD per lavorare con questi documenti.
Partecipate a questa sessione se siete interessati a MySQL Document
Store e MySQL Connector/Python.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1544"&gt;https://python.it/feedback-1544&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frédéric Descamps</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/python-e-mysql-80-document-store.html</guid><category>database</category><category>json</category><category>DocumentStore</category><category>mysql</category></item><item><title>Extending Python into PostgreSQL</title><link>https://pyvideo.org/europython-2013/extending-python-into-postgresql.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe Pettus</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/extending-python-into-postgresql.html</guid><category>performance</category><category>postgresql</category><category>database</category></item><item><title>Going beyond the Django ORM limitations with Postgres</title><link>https://pyvideo.org/europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html</guid><category>django</category><category>database</category></item><item><title>Designing Large-Scale Applications in Python</title><link>https://pyvideo.org/europython-2013/designing-large-scale-applications-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/designing-large-scale-applications-in-python.html</guid><category>business</category><category>database</category><category>integration</category><category>scalability</category><category>servers</category><category>refactoring</category><category>application-design</category><category>design</category><category>software-engineering</category><category>framework</category><category>sql</category><category>best-practices</category><category>architecture</category></item><item><title>Data model patterns with SQLAlchemy</title><link>https://pyvideo.org/europython-2013/data-model-patterns-with-sqlalchemy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/data-model-patterns-with-sqlalchemy.html</guid><category>sql</category><category>sqlalchemy</category><category>metaprogramming</category><category>orm</category><category>database</category></item><item><title>pl/python now as powerful as C</title><link>https://pyvideo.org/europython-2013/plpython-now-as-powerful-as-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/plpython-now-as-powerful-as-c.html</guid><category>postgresql</category><category>nosql</category><category>database</category><category>mongodb</category><category>bigdata</category><category>pl/python</category><category>optimization</category><category>sql</category><category>Full Text Search</category></item><item><title>PostgreSQL for Pythonistas.</title><link>https://pyvideo.org/europython-2013/postgresql-for-pythonistas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dougal Matthews</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/postgresql-for-pythonistas.html</guid><category>postgresql</category><category>database</category></item><item><title>ElasticSearch: Introduction and lessons learned</title><link>https://pyvideo.org/europython-2013/elasticsearch-introduction-and-lessons-learned.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dougal Matthews</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/elasticsearch-introduction-and-lessons-learned.html</guid><category>Full Text Search</category><category>search</category><category>elasticsearch</category><category>database</category></item><item><title>Postgres Demystified</title><link>https://pyvideo.org/europython-2013/postgres-demystified.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgres-demystified.html</guid><category>postgresql</category><category>database</category></item><item><title>Databases for Data Science</title><link>https://pyvideo.org/pycon-italia-2018/databases-for-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I’ll present the usefulness of databases for data science
projects.&lt;/p&gt;
&lt;p&gt;Databases have been around for decades and were highly optimised for
data aggregations during that time. Not only &lt;em&gt;Big data&lt;/em&gt; has changed the
landscape of databases massively in the past years - we nowadays can
find many &lt;em&gt;Open Source&lt;/em&gt; projects among the most popular dbs.&lt;/p&gt;
&lt;p&gt;After this talk you will be enabled to decide if a database can make
your work more efficient and which direction to look to.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A quick recap on database history, &lt;em&gt;it all starts in Florence - where
else…&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;What is a database? What’s a data store? data lake?…&lt;/li&gt;
&lt;li&gt;Relational SQL systems and their benefits for DS&lt;/li&gt;
&lt;li&gt;NoSQL systems and their benefits for DS&lt;/li&gt;
&lt;li&gt;How to chose the db fitting your needs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hendorf</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/databases-for-data-science.html</guid><category>data-structures</category><category>Deep-Learning</category><category>data-science</category><category>database</category></item><item><title>Quando Django incontra PostgreSQL!</title><link>https://pyvideo.org/pycon-italia-2018/quando-django-incontra-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vi siete mai chiesti cosa succede quando due strumenti potenti si
completano?&lt;/p&gt;
&lt;p&gt;Vedremo come ottenere un ambiente di sviluppo molto veloce e come
analizzare i tempi delle query in produzione per isolare i colli di
bottiglia. Analizzeremo cosa ci offre Django per gestire i pool di
connessioni e l’uso di pgbouncer.&lt;/p&gt;
&lt;p&gt;Esploreremo le strade che si aprono utilizzando i campi JSON ed i campi
ARRAY, che sono i più comunemente usati, ma anche di come utilizzare
PostgreSQL come un gestore di code.&lt;/p&gt;
&lt;p&gt;Requisiti: conoscenze basilari di Python, di Django ed uso di PostgreSQL&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Cecchi</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/quando-django-incontra-postgresql.html</guid><category>MessageQueues</category><category>django-orm</category><category>database</category><category>postgresql</category><category>django</category></item><item><title>DjangoProject.com - Ricerca Full-Text con PostgreSQL</title><link>https://pyvideo.org/pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il sito web ufficiale del progetto &lt;strong&gt;Django&lt;/strong&gt; (
&lt;a class="reference external" href="http://www.djangoproject.com"&gt;www.djangoproject.com&lt;/a&gt; ) è basato
sull’ultima versione stabile di Django, la &lt;strong&gt;documentazione&lt;/strong&gt; del
progetto è generata con &lt;strong&gt;Sphinx&lt;/strong&gt; ed i documenti generati sono poi
memorizzati su &lt;strong&gt;PostgreSQL&lt;/strong&gt; per essere visualizzati sul sito.&lt;/p&gt;
&lt;p&gt;Il modulo per la &lt;strong&gt;ricerca&lt;/strong&gt; della documentazione nel sito del progetto
Django è molto utilizzato e fino a poco tempo fa era &lt;strong&gt;basato&lt;/strong&gt; su
&lt;strong&gt;Elasticsearch&lt;/strong&gt;. L’utilizzo di Elasticsearch ha causato &lt;strong&gt;problemi&lt;/strong&gt;
nella sincronizzazione dei dati e nell’aggiornamento dei driver di
connessione.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo &lt;strong&gt;come&lt;/strong&gt; ho &lt;strong&gt;aggiornato&lt;/strong&gt; la funzione di
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/search/?q=full+text+search"&gt;ricerca&lt;/a&gt;
del &lt;strong&gt;sito del progetto Django&lt;/strong&gt; utilizzando il modulo di &lt;strong&gt;Ricerca
Full- Text&lt;/strong&gt; di Django basato direttamente su &lt;strong&gt;PostgreSQL&lt;/strong&gt;. Questo
ha &lt;strong&gt;semplificato&lt;/strong&gt; molto l’infrastruttura e &lt;strong&gt;velocizzato&lt;/strong&gt; l’
&lt;strong&gt;aggiornamento&lt;/strong&gt; della documentazione, senza perdere nessuna delle
precedenti &lt;strong&gt;funzioni&lt;/strong&gt; di ricerca ma anzi migliorandole ed
aggiungendone altre da tempo richieste dagli &lt;strong&gt;utenti&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;Tramite questo talk potrai &lt;strong&gt;imparare&lt;/strong&gt; come &lt;strong&gt;aggiungere&lt;/strong&gt; una nuova
funzione di &lt;strong&gt;Ricerca Full-Text&lt;/strong&gt; nel &lt;strong&gt;tuo progetto&lt;/strong&gt; basato su Django
e PostgreSQL. In alternativa potreai imparare come &lt;strong&gt;aggiornare&lt;/strong&gt; la
ricerca esistente nel tuo sito se usi Elasticsearch o &lt;strong&gt;motori di
ricerca&lt;/strong&gt; simili .&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Per una **introduzione*&lt;/em&gt; ai temi del talk puoi leggere il mio articolo
sulla &lt;a class="reference external" href="http://www.paulox.net/2017/12/22/full-text-search-in-django-with-%20postgresql/"&gt;&amp;quot;Ricerca Full-Text in Django con
PostgreSQL&amp;quot;&lt;/a&gt;
basato sul mio talk presentato al &lt;a class="reference external" href="https://www.pycon.it/conference/talks/ricerca-full-text-in-django-con-%20postgresql"&gt;PyCon
Otto&lt;/a&gt;
nel 2017.*&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</guid><category>web</category><category>search</category><category>postgresql</category><category>postgres</category><category>database</category><category>Python</category><category>documentation</category><category>django</category><category>elasticsearch</category><category>sphinx</category><category>Full Text Search</category><category>python3</category></item><item><title>Unveiling the potential of graph databases with Python and Neo4j</title><link>https://pyvideo.org/pycon-italia-2018/unveiling-the-potential-of-graph-databases-with-python-and-neo4j.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every time we are dealing with data coming from the real world, big and
not so big, you know that usually 80% of the time is needed to clean,
prepare and arrange them. We can then spend the other 20% of the time
enjoying our beloved data analysis.&lt;/p&gt;
&lt;p&gt;The thing that you may know less is that in the last years, the Neo4j
graph database went into the light of being the “right” place to store
data, thanks to its capacity of direct modelling relations among data,
its high availability and its easy, fast and clean query language
Cypher.&lt;/p&gt;
&lt;p&gt;In this talk I’m going to show you some tips to set up in the right way
your data using Pandas, in order to proper model and import them into
Neo4j. A Neo4j Python driver is available to easily import Cypher
queries embedded in Python code. Still, the py2neo package allows
building and querying your database right within your favourite snake
command line.&lt;/p&gt;
&lt;p&gt;Forget about “tall as teen” SQL queries here; thanks to Pandas, Python
and Cypher modelling, loading and query your database is going to be
really straightforward. After this talk, you’ll can’t wait to give Neo4j
a try!&lt;/p&gt;
&lt;p&gt;Prerequisite: a little knowledge of Pandas.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Lamanna</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/unveiling-the-potential-of-graph-databases-with-python-and-neo4j.html</guid><category>database</category><category>graph</category><category>storage</category><category>neo4j</category><category>data</category><category>pandas</category></item><item><title>Turbodbc: Turbocharged database access for data scientists</title><link>https://pyvideo.org/pycon-de-2017/turbodbc-turbocharged-database-access-for-data-scientists.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Michael König&lt;/strong&gt; (&amp;#64;turbodbc)&lt;/p&gt;
&lt;p&gt;Michael is a senior software engineer at Blue Yonder GmbH. He holds a PhD in physics, practices test-driven development, and digs Clean Code in C++ and Python. In the last five years, he invested more money in table tennis gear than in smartphones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python's database API 2.0 is well suited for transactional database workflows, but not so much for column-heavy data science. This talk explains how the ODBC-based turbodbc database module extends this API with first-class, efficient support for familiar NumPy and Apache Arrow data structures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk introduces the open source Python database module turbodbc. It uses standard ODBC drivers to connect with virtually any database and is a viable (and often faster) alternative to &amp;quot;native&amp;quot; Python drivers.&lt;/p&gt;
&lt;p&gt;Briefly recounting the painful story of how data scientists previously used our analytics database, I explain why turbodbc was created and what distinguishes it from other ODBC modules. Sketching the flow of data from databases via drivers and Python modules to consumable Python objects, I motivate a few extensions to the standard database API 2.0 that turbodbc has made. These extensions heavily use NumPy arrays and Apache Arrow tables to provide data scientists with both familiar and efficient binary data structures they can further work on. I conclude my talk with benchmark results for a few databases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael König</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/turbodbc-turbocharged-database-access-for-data-scientists.html</guid><category>numpy</category><category>database</category><category>python</category><category>data-science</category><category>analytics</category></item><item><title>Machine Learning con Python: previsione in real-time della richiesta di energia elettrica</title><link>https://pyvideo.org/pycon-italia-2017/machine-learning-con-python-previsione-in-real-time-della-richiesta-di-energia-elettrica.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nel talk si parlerà di come attraverso il linguaggio Python sia
possibile risolvere un problema reale e complesso relativamente alla
trasmissione di energia elettrica. Verrà spiegato il progetto
&lt;strong&gt;RealtimeLoadForecast&lt;/strong&gt; che è stato sviluppato per un importante TSO
(Transmission System Operator). Si tratta di sistema predittivo che
permette di fornire in tempo reale ogni 15 minuti ed entro 5 minuti, le
previsioni delle serie storiche dei consumi di energia elettrica
relativi a circa 500 nodi elettrici.&lt;/p&gt;
&lt;p&gt;Si parlerà dei passi che occorre seguire per ottenere da un semplice
prototipo, un sistema &lt;em&gt;ingegnerizzato&lt;/em&gt; che lavori in tempo reale e di
come sono state utilizzate le librerie di Python per l’acquisizione,
manipolazione e processamento dei dati elettrici ed ambientali.&lt;/p&gt;
&lt;p&gt;Saranno descritte alcune tecniche algoritmiche e di Machine Learning per
ottenere dei modelli predittivi capaci di fornire previsioni accurate ma
con tempi di risposta sfidanti.&lt;/p&gt;
&lt;p&gt;Verrà mostrato un &lt;em&gt;esempio concreto&lt;/em&gt; di implementazione di un algoritmo
predittivo basato sulla libreria Deep Learning &lt;strong&gt;Keras&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Per la comprensione del talk non sono necessari particolari requisiti se
non una conoscenza di base di programmazione in Python e di Machine
Learning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felice Tuosto</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/machine-learning-con-python-previsione-in-real-time-della-richiesta-di-energia-elettrica.html</guid><category>Forecasting</category><category>Genetic Algorithms</category><category>Keras</category><category>Data Mining</category><category>programming-paradigms</category><category>scikit-learn</category><category>bigdata</category><category>scalability</category><category>Deep-Learning</category><category>threading</category><category>realtime</category><category>Data-Scientist</category><category>database</category><category>machine-learning</category><category>mysql</category><category>signal-processing</category><category>LoadForecasting</category><category>cassandra</category></item><item><title>Python e PostgreSQL, un connubio perfetto</title><link>https://pyvideo.org/pycon-italia-2017/python-e-postgresql-un-connubio-perfetto.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL ha come obiettivi primari l’integrità dei dati,
l’affidabilità e le caratteristiche integrate orientate agli
sviluppatori. Per questo molti progetti lo scelgono fin dall’inizio. In
questo talk vedremo come PostgreSQL e Python si integrano su più
livelli, e come sia possibile sfruttare in Python le caratteristiche
avanzate di questo database.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://prezi.com/5kvmyfmqp1mt/"&gt;http://prezi.com/5kvmyfmqp1mt/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Nenciarini</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/python-e-postgresql-un-connubio-perfetto.html</guid><category>django-orm</category><category>psycopg2</category><category>pl/python</category><category>postgresql</category><category>database</category></item><item><title>Taking care of PostgreSQL with Ansible</title><link>https://pyvideo.org/pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ansible&lt;/strong&gt; is a powerful automation tool written in &lt;strong&gt;Python&lt;/strong&gt;. With
its modules already built for &lt;strong&gt;PostgreSQL&lt;/strong&gt;, we can easily manage the
most advanced open source database, making sure the configuration is
exact in every detail and repeatable as many times as it is needed. In
this talk we will understand how &lt;strong&gt;Ansible&lt;/strong&gt; works, see some of its main
modules for system/cloud administration, and learn how it can be used to
orchestrate &lt;strong&gt;PostgreSQL&lt;/strong&gt; deployments, managing all parts of the
process at ease. A &lt;strong&gt;PostgreSQL&lt;/strong&gt; test environment configuration, using
&lt;strong&gt;Ansible&lt;/strong&gt; and &lt;strong&gt;Vagrant&lt;/strong&gt;, will be shown as an example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rubens Souza</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/taking-care-of-postgresql-with-ansible.html</guid><category>postgresql</category><category>database</category><category>devops</category><category>automation</category><category>ansible</category></item><item><title>An Introduction to web scraping using Python</title><link>https://pyvideo.org/pycon-italia-2017/an-introduction-to-web-scraping-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web scraping is a technique for gathering data or information on web
pages. You could revisit your favorite web site every time it updates
for new information. Or you could write a web scraper to have it do it
for you!&lt;/p&gt;
&lt;p&gt;Want to learn how to scrape the web (and / or organized data sets and
APIs) for content? This talk will give you the building blocks (and
code) to begin your own scraping adventures. We will review basic data
scraping, API usage, form submission as well as how to scrape pesky bits
like Javascript-usage for DOM manipulation.&lt;/p&gt;
&lt;p&gt;Besides looking at how websites are put together, we will also discuss
the ethics of scraping. What is legal? How can you be a friendly
scraper, so that the administrator of the website you are scraping won’t
try to shut you down?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manoj Pandey</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/an-introduction-to-web-scraping-using-python.html</guid><category>information-retrieval</category><category>regex</category><category>web-scraping</category><category>lxml</category><category>database</category><category>Python</category><category>beautifulsoup</category></item><item><title>We're All Database Engineers (WADE)</title><link>https://pyvideo.org/pygotham-2016/were-all-database-engineers-wade.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;WADE is a distributed database framework providing strong consistency and high throughput using chain replication, in lieu of the traditional primary/backup model. Quite unlike traditional databases, WADE is a framework. Programmers implement the storage interface themselves and write custom query or update functions in Python that are executed by the database avoiding the dreaded read-write update cycle that degrades performance. Since the storage layer is implemented by the programmer it can be hand customized to the use case at hand using tools such as LevelDB, RocksDB, or whatever the programmer desires. However, WADE takes control at the networking layer handling replication, message forwarding amongst nodes, and fault tolerance in the event of failure so long as a few simple functions are implemented by the end user.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Kramer</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/were-all-database-engineers-wade.html</guid><category>database</category></item><item><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey Armstrong</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</guid><category>database</category><category>networking</category><category>numpy</category><category>optimization</category><category>pyohio</category><category>pyohio2010</category><category>scipy</category><category>simulation</category></item><item><title>Multi-database patterns</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--multi-database-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A tour through four common &amp;quot;multiple database&amp;quot; usage patterns and how
they can be implemented and utilised with Django. We'll talk about the
strengths and weaknesses of each pattern and why you might not need any
of them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a few good reasons a system might want to interact regularly
with multiple databases. “Because it’s what cool people do” is not one
of those reasons. Most multi-database usages fall into one of four main
classes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Separation by function. All data of one type in one database, all
data of another type in some other database.&lt;/li&gt;
&lt;li&gt;Separation by sharding. Data of a particular type (e.g. user records)
is split across multiple databases, each database holding a shard of
the whole data.&lt;/li&gt;
&lt;li&gt;Data replication (separation by access). Some pieces of data are
synchronized to multiple machines. Writes might go into one or more
masters and reads normally come from the slaves.&lt;/li&gt;
&lt;li&gt;Data augmentation/shadowing. Data in one database is added to or
entirely replaced by data from another database. Can happen during
development when reading from a production snapshot whilst trying out
changes to some tables or data only against a local database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, combinations of these classes are possible, such as
replicated sharded data in a huge site. There are tricks and traps to
the way a developer talks to each of these sorts of setups. I'll spend a
few minutes showing credible examples of the usage of each as well as
when you might be over- engineering by going that way. All four access
patterns are possible in Django 1.2, with varying degrees of ease of use
and I'll show the type of code required in each case.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Thu, 09 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--multi-database-patterns.html</guid><category>database</category><category>djangocon</category><category>djangocon2010</category><category>multipledatabases</category></item><item><title>Data Driven Cache Invalidation</title><link>https://pyvideo.org/europython-2011/data-driven-cache-invalidation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Magnus Hagander - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In todays world, nobody (should) deploy a web application facing the
internet without having a proper caching system in place. There are many
different solutions to choose from, from manual use of memcached through
framework integrated caching to external caches like Squid or Varnish.
Most modern frameworks come with integrated functionality for at least
one of these methods, and often more than one.&lt;/p&gt;
&lt;p&gt;However, they often relies on all traffic going through the same
framework to work properly - a caching layer in Rails is hard to share
with one in Django. This talk will show a way to break the design rules
of these frameworks just a little, and have the database help solve this
problem.&lt;/p&gt;
&lt;p&gt;This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magnus Hagander</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/data-driven-cache-invalidation.html</guid><category>cache</category><category>database</category><category>deploy</category><category>design</category><category>django</category><category>framework</category><category>web</category></item><item><title>Sqlkit: empowering database access</title><link>https://pyvideo.org/europython-2011/sqlkit-empowering-database-access.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 23 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's very easy to access databases with Python, and there are many ORMs
allowing a high level of abstraction. Still, it's a long road from there
to interactive handling of data, even for very simple tasks.&lt;/p&gt;
&lt;p&gt;Sqlkit tries to act as a bridge, offering some mega-widgets that allow
you to build GUI applications or directly access data using the
'sqledit' application, shipped with sqlkit; sqlkit is built with PyGTK
and SQLAlchemy.&lt;/p&gt;
&lt;p&gt;This presentation covers some of the most powerful features of sqlkit,
and shows how easy it is to build small programs for personal use, as
well as rich and complex applications. It primarily focuses on two
points: how easy it is to create data forms (eventually with one2many or
many2many, thanks to a original definition of layouts), and the template
system based on OpenOffice which allows easy report creation.&lt;/p&gt;
&lt;p&gt;This presentation shows how sqlkit can be used both as application
development framework and as a tool to help us while developing other
applications (e.g.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;To deliver a gradual presentation, we'll use the configuration system of
sqledit, starting from a minimal configuration (a single URL) we'll add
elements to that until we'll have a full application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/sqlkit-empowering-database-access.html</guid><category>database</category><category>forms</category><category>framework</category><category>gui</category><category>openoffice</category><category>python,</category></item><item><title>Python + Oracle = Prosperity &amp; Performance</title><link>https://pyvideo.org/europython-2011/python-oracle-prosperity-performance.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Todd Trichler - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted or perhaps needed to access data stored in a
corporate Oracle database from within your Python environment?&lt;/p&gt;
&lt;p&gt;This session will help developers get up and running using Python with
Oracle:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn the basics of working with cx_Oracle&lt;/li&gt;
&lt;li&gt;Learn how to use VirtualBox to set up a Python &amp;amp; Oracle test and developement environment.&lt;/li&gt;
&lt;li&gt;Discover features within Oracle that you can use to build more performant python based applications.&lt;/li&gt;
&lt;li&gt;Leave with all the resources you need to certify your python app to run against a production Oracle11gR2 database, or hone those skills for the next job.&lt;/li&gt;
&lt;li&gt;Get a quick intro to Oracle Linux along the way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No prior experience with Oracle is required, some basic understanding of
databases would be helpful.&lt;/p&gt;
&lt;p&gt;Look forward to meeting you &amp;#64; EuroPython 2011 - Todd&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Trichler</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/python-oracle-prosperity-performance.html</guid><category>database</category><category>performance</category><category>virtualbox</category></item><item><title>Sqlkit: database ad accesso immediato</title><link>https://pyvideo.org/europython-2011/sqlkit-database-ad-accesso-immediato.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alessandro Dentella - 21 June 2011 in &amp;quot;Track Italiana
Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;È molto facile accedere ad un database con Python e ci sono molti ORM
che permettono un alto livello di astrazione. Da qui c'é ancora una
lunga strada per arrivare a manipolare interattivamente i dati anche per
semplici compiti.&lt;/p&gt;
&lt;p&gt;Sqlkit cerca di coprire questa distanza fornendo alcuni mega-widgets che
permettono di costruire ogni applicazione GUI o accedere direttamente ai
dati con l'applicazione 'sqledit', che viene distribuita con sqlkit.
Sqlkit è costruita con PyGTK e SQLAlchemy.&lt;/p&gt;
&lt;p&gt;Questa presentazione esplora alcune fra le più potenti caratteristiche
di sqlkit e mostra quanto sia semplice costruire piccoli programmini ad
uso personale o applicazioni ricche ed articolate. Si focalizza
principalmente su due punti: quanto sia facile creare maschere per
editare dati (anche relazioni on2many o many2many, grazie al modo
originale di definire i layout) e al sistema di template basato su
OpenOffice che rende incredibilmente semplice creare report.&lt;/p&gt;
&lt;p&gt;Questa presentazione vuole mostrare come sqlkit può essere usato sia
come framework di sviluppo di applicazioni, sia come strumento che ci
aiuta mentre sviluppiamo altre applicazioni (es.: Django, OpenERP,… ).&lt;/p&gt;
&lt;p&gt;Per rendere la presentazione più graduale, sfrutteremo il sistema di
configurazione di sqledit Partendo da una configurazione minima -un URL-
aggiungeremo elementi fino ad ottenere una vera applicazione.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Dentella</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/sqlkit-database-ad-accesso-immediato.html</guid><category>ci</category><category>database</category><category>framework</category><category>gui</category><category>openoffice</category><category>orm</category></item><item><title>Introduction to Python Database Programming</title><link>https://pyvideo.org/europython-2011/introduction-to-python-database-programming.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc-Andre Lemburg - 21 June 2011 in &amp;quot;Track
Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will give an introduction to the concepts used in the Python
Database API and relational databases in general. Connection, cursors
and transactions are discussed, and their use in a typical Python
database application are demonstrated. The talk will also touch upon
some advanced database programming techniques and discuss best
practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-14:europython-2011/introduction-to-python-database-programming.html</guid><category>api</category><category>database</category><category>transactions</category></item><item><title>django-rdflib and postgresql - the best of both worlds</title><link>https://pyvideo.org/europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Stefan Talpalaru - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;rdflib is a python library implementing a database with various triples
back- end, parser, data serializers, SPARQL is a Python interface to
extract/insert triples. We integrated it in Django reusing the database
connection and exposing an ORM interface, along with full-text search on
literals. This presentation shows a django-rdflib case study with a
PostgreSQL backend in &lt;a class="reference external" href="http://brancusi1.usc.edu"&gt;Brain Architecture Management
System&lt;/a&gt; - a neuroscientific project for the
University of Southern California. Benefits of the flexible RDF
structure will be shown, allowing researchers to insert free format
data, making data public with a customizable serialization and use the
powerful full-text search integrated in PostgreSQL.&lt;/p&gt;
&lt;p&gt;Objective: show attendees an effective combination of RDF, PostgreSQL
full- text search and Django ORM via django-rdflib.&lt;/p&gt;
&lt;p&gt;Requirements: Django familiarity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Talpalaru</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/django-rdflib-and-postgresql-the-best-of-both-w.html</guid><category>architecture</category><category>database</category><category>django</category><category>orm</category><category>postgresql</category><category>reusing</category><category>search</category><category>serialization</category><category>university</category></item><item><title>Getting ready for PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>PostgreSQL - the database-sister of Python</title><link>https://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</guid><category>business</category><category>database</category><category>json</category><category>postgresql</category><category>replication</category><category>web</category></item><item><title>Relate or !Relate</title><link>https://pyvideo.org/europython-2011/relate-or-relate.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 21 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To Relate or Not to Relate, that is the question raised by the NoSQL
movement. There is a lot of buzz about Couch, Casandra, MongoDB, and
other non relational databases, and at the same time there are decades
of hard work that's gone into optimizing databases built around the
relational model.&lt;/p&gt;
&lt;p&gt;I would actually argue that there is no such thing as a NoSQL database -
there are a variety of compelling options to relational database - each
of which have different features and different performance
characteristics. So no one- sized fits all comparison will do. So, I'll
try to outline a general taxonomy for persistence mechanisms, and then
proceed to comparing relational DB's to their new friends in practice.&lt;/p&gt;
&lt;p&gt;The talk will contain quite a few stories from the trenches with
CouchDB, MongoDB, MySQL, Postgres, Tokyo Cabinet, ZODB, and other
databases, and will help you think about the data storage needs of your
applications in new ways.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/relate-or-relate.html</guid><category>database</category><category>nosql</category><category>optimizing</category><category>performance</category></item><item><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link>https://pyvideo.org/europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Calvin Cheng - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We had the privilege of working on a mobile web application for ETH
Zurich, funded by ETH North-South Centre, using Django/Postgis, jQuery
mobile and Openlayers technology.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share what we have learnt technically and
the experiences and fun we had with polygon creation on a map and saving
polygon vertices and related data into our spatial database via
geodjango.&lt;/p&gt;
&lt;p&gt;This mobile web app is developed based on research by Dr Koh of ETH
Zurich, specializing on Matrix-calibrated and edge-corrected
species-area models that allow users to evaluate the biodiversity
consequence and trade-offs of land- use decisions. The development and
description of these models were published in Conserv. Biol. 24, 994 and
J. Appl. Ecol. 47, 1063.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Cheng</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</guid><category>database</category><category>geodjango</category><category>jquery</category><category>mobile</category><category>spatial</category><category>web</category></item><item><title>Using Storm to work with SQL databases</title><link>https://pyvideo.org/europython-2011/using-storm-to-work-with-sql-databases.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jamu Kakar - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Storm is an object relational mapper for SQL databases, with builtin
support for PostgreSQL, MySQL and SQLite. It was designed and
implemented as part of the Landscape project at Canonical in mid-2006
and was open sourced in mid-2007. Since then it's been used in a variety
of projects, in production for many years, and has received numerous
enhancements and bug fixes. The features of Storm will be explained with
a series of examples and with discussion about what's happening in each
one. In addition to describing the concepts and features that a
developer needs to understand, a variety of best practices will be
shared, to help developers make the best use of Storm.&lt;/p&gt;
&lt;p&gt;The examples in this talk assume that participants have a good
understanding of SQL, transactions, relationships between tables and
other common database concepts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jamu Kakar</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/using-storm-to-work-with-sql-databases.html</guid><category>database</category></item><item><title>Aspettando PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/aspettando-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini - 22 June 2011 in &amp;quot;Track Italiana
Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL è un sistema open-source per la gestione di database molto
avanzato ed estremamente versatile che si integra perfettamente con
Python. E' sviluppato da una comunità internazionale molto attiva ed è
distribuito secondo la licenza in stile BSD denominata &amp;quot;PostgreSQL
License&amp;quot;.&lt;/p&gt;
&lt;p&gt;Le funzionalità di classe enterprise (come la conformità con lo standard
SQL, le transazioni ACID, la disaster recovery, l'alta disponibilità o
HA, la replica, il partizionamento e in generale l'estensibilità)
rendono PostgreSQL particolarmente adatto per quegli ambienti
business-critical che intendono ridurre il costo di proprietà totale
(TCO) delle loro soluzioni di database senza alterarne i requisiti
funzionali. PostgreSQL 9.0, rilasciato nel settembre del 2010, è stata
la prima versione di PostgreSQL con Hot Standby, un meccanismo nativo
per la replica master/slave. Al consueto e collaudato meccanismo di
replica secondo la tecnica del log shipping (usata precedentemente per
scopi di HA con Warm Standby) è stata aggiunta la replica in streaming.&lt;/p&gt;
&lt;p&gt;La versione 9.1, attesa per la seconda parte del 2011, aggiungerà la
replica sincrona a PostgreSQL, rendendolo il primo DBMS in grado di
permettere a sviluppatori e utenti di controllare la strategia di
replica a livello di singola transazione. Partecipa al talk per scoprire
tutte le altre funzionalità principali che saranno incluse in PostgreSQL
9.1, fra le quali: gestione delle estensioni, writable common table
expression, ecc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/aspettando-postgresql-91.html</guid><category>database</category><category>postgresql</category></item><item><title>A Python on the Couch</title><link>https://pyvideo.org/pycon-au-2011/a-python-on-the-couch.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;CouchDB &amp;amp;nbsp_place_holder;(&lt;a class="reference external" href="http://couchdb.apache.org/"&gt;http://couchdb.apache.org/&lt;/a&gt;) is an open
source, document-oriented NoSQL Database Management Server.It supports
queries via views using MapReduce, and replication. The talk will give
an overview of CouchDB followed by how to access and manipulate using
Python. There are a number of python libraries for accessing couchdb and
these will be quickly discussed followed by &amp;amp;nbsp_place_holder;how to
use one of these libs with a Python web framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark J Rees</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/a-python-on-the-couch.html</guid><category>couchdb</category><category>database</category><category>nosql</category><category>web</category></item><item><title>Table Partitioning with Django</title><link>https://pyvideo.org/pycon-de-2013/table-partitioning-with-django.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Table partitioning can be thought of as a division of one large table
into several smaller tables which represent that original table. Table
partitioning is &amp;quot;transparent&amp;quot;, that means that in theory you don't need
to change any code to work with partitioned tables.&lt;/p&gt;
&lt;p&gt;We will talk about table partitioning theory in general and
implementations in different database servers. Why and when we need to
do table partitioning. What problems we can face and how we can solve
them.&lt;/p&gt;
&lt;p&gt;Django provides us with great database abstraction and ORM, but how can
we use it with table partitioning ? We will talk about existing
libraries for Django to work with table partitioning, their differences,
which is the best (if any) and why.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Tepkeev</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/table-partitioning-with-django.html</guid><category>database</category><category>django</category><category>partition</category><category>partitioning</category></item><item><title>Relational Database Applications</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--relational-database-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turbogears Database Applications (Relational Database Applications)&lt;/p&gt;
&lt;p&gt;Presented by Chris Perkins&lt;/p&gt;
&lt;p&gt;TurboGears2 provides a rich toolset to provide developers with a
platform for developing web applications with existing databases. This
â€œun-tutorialâ€ has a simple goal. The participants may bring in their
own databases, and we will explore how TurboGears can use this database
to create a working web application. If the student does not want to use
her own database, one will be provided. This tutorial will focus on the
TurboGears Admin system, along with relational databases.&lt;/p&gt;
&lt;p&gt;This tutorial is intended to be an un-tutorial. The idea is simple.
Bring a public database, (or 4) and share with the class as we explore
the new admin- level RESTful features that TurboGears2 employs.&lt;/p&gt;
&lt;p&gt;At the end of the class, the goal is for everyone to have a working TG2
application, with a working admin, at least one customized form or
table, based on a database they, or another student brought to class.&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Laptop with Python 2.5 or 2.6 installed. Database system of your choice
(Postgres, Sqlite, MySQL) Python drivers for your desired database
system installed. (psychopg2, pg8000, pysqlite, mysql-python)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Perkins</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--relational-database-applications.html</guid><category>database</category><category>pycon</category><category>pycon2010</category><category>turbogears</category><category>tutorial</category></item><item><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python webapps from zero to 50 million users - A top-down
approach&lt;/p&gt;
&lt;p&gt;Presented by Jinal Jhaveri&lt;/p&gt;
&lt;p&gt;LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and
Bebo. This session will focus on the top-down approach we took to scale
our webapps for millions of users. Here are the 6 topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is performance a big issue for Social Media&lt;/li&gt;
&lt;li&gt;How we profiled our apps and found bottlenecks using custom developed
and existing middleware&lt;/li&gt;
&lt;li&gt;The web application best practices we applied and results obtained&lt;/li&gt;
&lt;li&gt;How we traced database connection leaks&lt;/li&gt;
&lt;li&gt;Our caching strategies and the changes we made to speed up the
memcache client&lt;/li&gt;
&lt;li&gt;Results of our experiment using Paster and Tornado as our web
servers.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jinal Jhaveri</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</guid><category>casestudy</category><category>database</category><category>memcache</category><category>paster</category><category>profiling</category><category>pycon</category><category>pycon2010</category><category>tornado</category></item><item><title>To relate or not to relate, that is the question (#99)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To relate or not to relate, that is the question&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;There is a lot of buzz about Couch, Casandra, MongoDB, and other non
relational databases, and at the same time there are decades of hard
work that's gone into optimizing databases built around the relational
model. This talk will focus on comparing relational DB's to their new
friends in practice, and on providing practical tools for deciding
what's right for your project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--to-relate-or-not-to-relate--that-is-t.html</guid><category>database</category><category>nosql</category><category>pycon</category><category>pycon2010</category></item></channel></rss>