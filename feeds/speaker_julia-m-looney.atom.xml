<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_julia-m-looney.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-14T00:00:00+00:00</updated><entry><title>Getting the most out of Django’s User Model</title><link href="https://pyvideo.org/djangocon-us-2017/getting-the-most-out-of-djangos-user-model.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Julia M Looney</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/getting-the-most-out-of-djangos-user-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Getting the most out of Django’s User Model by Julia M. Looney&lt;/p&gt;
&lt;p&gt;Django’s User model is nice, but the fields it provides out of the box are minimal. We frequently need to associate our own custom data with a user, and luckily Django provides ways for us to add to its built-in User model. This talk will help novice Django developers understand which options are best when it comes to getting the most out of the Django User model.&lt;/p&gt;
&lt;p&gt;I’ll start by talking about the built-in Django User model and what it has to offer.&lt;/p&gt;
&lt;p&gt;Then I will identify scenarios when the User model might not be enough for a project, and why someone might want something with more flexibility. Then we’ll look at the different ways to get the most out of the Django User model. There are two main methods I’ll cover:&lt;/p&gt;
&lt;p&gt;Extending the User model
Creating a custom User model&lt;/p&gt;
&lt;p&gt;Extending the User model:&lt;/p&gt;
&lt;p&gt;Extending the User model is handy when you only need to add a few extra fields. There are two main ways to do this: using a proxy model, and using a OneToOneField. I will cover the pros and cons of each, and give examples for implementing each.&lt;/p&gt;
&lt;p&gt;Creating a custom User model:&lt;/p&gt;
&lt;p&gt;With this method, you can substitute Django’s default User model with your own. Though more complex, a custom User model is particularly useful when you need to uniquely identify users by email address instead of by username. I’ll go into a couple more scenarios where a custom User model would be helpful, and show examples of implementation.&lt;/p&gt;
&lt;p&gt;Lastly, I will show how each method works with the default Django admin, and how they can be managed there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2017.djangocon.us/talks/getting-the-most-out-of-djangos-user-model/"&gt;https://2017.djangocon.us/talks/getting-the-most-out-of-djangos-user-model/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>