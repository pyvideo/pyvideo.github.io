<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 27 Nov 2017 00:00:00 +0000</lastBuildDate><item><title>JuliaDB A data system for Julia</title><link>https://pyvideo.org/pydata-new-york-city-2017/juliadb-a-data-system-for-julia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern data analysis pipelines routinely involve gluing together multiple systems and languages: SQL, Python, R, C++, unix tools, and more. This leads to unnecessary complexity and inefficiency. JuliaDB is a fast, productivity-focused, distributed database that, together with the Julia language, forms a single coherent system for everything from data preparation to machine learning with no glue.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Bezanson</dc:creator><pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/juliadb-a-data-system-for-julia.html</guid></item><item><title>Julia: A Fast Dynamic Language for Technical Computing</title><link>https://pyvideo.org/scipy-2012/julia-a-fast-dynamic-language-for-technical-comp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Julia is a dynamic language designed for technical applications and high
performance. Its design is based on a sophisticated but unobtrusive type
system, type inference, multiple dispatch instead of class-based OO, and
a code generator based on LLVM. These features work together to run
high-level code efficiently even without type declarations. At the same
time, the type system provides useful expressiveness for designing
libraries, enables forms of metaprogramming not traditionally found in
dynamic languages, and creates the possibility of statically compiling
whole programs and libraries. This combination of high performance and
expressiveness makes it possible for most of Julia's standard library to
be written in Julia itself, with an interface to call existing C and
Fortran libraries.&lt;/p&gt;
&lt;p&gt;We will discuss some ways that Python and Julia can interoperate, and
compare Julia's current capabilities to Python and NumPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Bezanson</dc:creator><pubDate>Wed, 18 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-18:scipy-2012/julia-a-fast-dynamic-language-for-technical-comp.html</guid><category>General</category></item></channel></rss>