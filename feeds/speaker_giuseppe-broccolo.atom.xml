<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_giuseppe-broccolo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-06-15T00:00:00+00:00</updated><entry><title>Data science with Python</title><link href="https://pyvideo.org/pylondinium-2019/data-science-with-python.html" rel="alternate"></link><published>2019-06-15T00:00:00+00:00</published><updated>2019-06-15T00:00:00+00:00</updated><author><name>Giuseppe Broccolo</name></author><id>tag:pyvideo.org,2019-06-15:pylondinium-2019/data-science-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is a scenario that is quite common when doing data science at scale.
The Data Science team have developed a good algorithm that suits our purpose and the prototype works well on a test dataset. But how to transform it into a reliable, responsive service ready for production payload? We will got through the steps involved in the evolution of a Jupyter notebook into an auto-scaling service. These steps involve changes in data ingestion, asynchronous processing, dockerisation, kubernetes and cloud technologies.&lt;/p&gt;
</summary></entry><entry><title>Big Data con PostgreSQL</title><link href="https://pyvideo.org/pycon-italia-2016/big-data-con-postgresql.html" rel="alternate"></link><published>2016-06-20T00:00:00+00:00</published><updated>2016-06-20T00:00:00+00:00</updated><author><name>Francesco Canovai</name></author><id>tag:pyvideo.org,2016-06-20:pycon-italia-2016/big-data-con-postgresql.html</id><summary type="html"></summary></entry></feed>