<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 06 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Messaging for the Internet of Things</title><link>https://pyvideo.org/europython-2013/messaging-for-the-internet-of-things.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/messaging-for-the-internet-of-things.html</guid><category>MessageQueues</category><category>networking</category><category>arduino</category><category>raspberrypi</category><category>sensor networks</category><category>healthcare</category><category>android</category></item><item><title>Provenance for Reproducible Data Science</title><link>https://pyvideo.org/pydata-seattle-2017/provenance-for-reproducible-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In science, results that are not reproducible by peer scientists are valueless and of no significance. Good practices for reproducible science are to publish used codes under Open Source licenses, perform code reviews, save the computational environments with containers (e.g., Docker), use open data formats, use a data management system, and record the provenance of all actions.&lt;/p&gt;
&lt;p&gt;The provenance of data provides detailed information about the origin of that data. That includes information about ownership and both actions and modifications performed on the data. With provenance information, data will be traceable and users can be confident in quality of the data. To specify and store provenance information, W3C has standardized the provenance model PROV. Using PROV and associated implementations, users can record provenance of data analytics processes. The provenance information are directed acyclic graphs that can be analysed to get insight into the data analytics processes.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;The talk covers&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Introduction to provenance and PROV&lt;/li&gt;
&lt;li&gt;Modelling provenance for data processing&lt;/li&gt;
&lt;li&gt;Python APIs for provenance recording&lt;/li&gt;
&lt;li&gt;Provenance recording for Jupyter notebooks&lt;/li&gt;
&lt;li&gt;Storing provenance in graph databases&lt;/li&gt;
&lt;li&gt;Analysis of provenance information&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-06:pydata-seattle-2017/provenance-for-reproducible-data-science.html</guid></item><item><title>High Throughput Processing of Space Debris Data</title><link>https://pyvideo.org/pydata-seattle-2015/high-throughput-processing-of-space-debris-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Space Debris are defunct objects in space, including old space vehicles (such as satellites or rocket stages) or fragments from collisions. Space debris can cause great damage to functional space ships and satellites. Thus detection of space debris and prediction of their orbital paths are essential for today's operation of space missions. The talk shows the Python based infrastructures BACARDI for gathering and storing space debris data from sensors and Skynet for high-throughput data processing and orbital collision detection.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-26:pydata-seattle-2015/high-throughput-processing-of-space-debris-data.html</guid></item><item><title>Python at Warp Speed</title><link>https://pyvideo.org/pycon-de-2016/python-at-warp-speed.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Schreiber talks about making Python run faster.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-30:pycon-de-2016/python-at-warp-speed.html</guid></item><item><title>Reproducible Science with Python</title><link>https://pyvideo.org/pycon-de-2016/reproducible-science-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In science, results that are not reproducible by peer scientists are valueless and of no significance. Good practices for reproducible science are to publish used codes under Open Source licenses, perform code reviews, save the computational environments with containers (e.g., Docker), use open data formats, use a data management system, and record the provenance of all actions.This talk shows how to record the provenance of code development, code execution, and data management using a standard format for provenance and accompanying Python libraries. In particular, how to gather the provenance of an development process based on Git, how to gather provenance of any Python script and of any IPython/Jupyter notebook, and how to gather provenance of a paper written in LaTeX. Finally, the talk shows how use Python to analyze and explore the provenance, which is stored in a graph database (Neo4J).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-29:pycon-de-2016/reproducible-science-with-python.html</guid></item><item><title>Quantified Self: Analyzing the Big Data of our Daily Life</title><link>https://pyvideo.org/pydata-berlin-2014/quantified-self-analyzing-the-big-data-of-our-da.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Applications for self tracking that collect, analyze, or publish
personal and medical data are getting more popular. This includes either
a broad variety of medical and healthcare apps in the fields of
telemedicine, remote care, treatment, or interaction with patients, and
a huge increasing number of self tracking apps that aims to acquire data
form from people’s daily life. The Quantified Self movement goes far
beyond collecting or generating medical data. It aims in gathering data
of all kinds of activities, habits, or relations that could help to
understand and improve one’s behavior, health, or well-being. Both,
health apps as well as Quantified Self apps use either just the
smartphone as data source (e.g., questionnaires, manual data input,
smartphone sensors) or external devices and sensors such as ‘classical’
medical devices (e.g,. blood pressure meters) or wearable devices (e.g.,
wristbands or eye glasses). The data can be used to get insights into
the medical condition or one’s personal life and behavior. This talk
will provide an overview of the various data sources and data formats
that are relevant for self tracking as well as strategies and examples
for analyzing that data with Python. The talk will cover:&lt;/p&gt;
&lt;p&gt;Accessing local and distributed sources for the heterogeneous Quantified
Self data. That includes local data files generated by smartphone apps
and web applications as well as data stored on cloud resources via APIs
(e.g., data that is stored by vendors of self tracking hardware or data
of social media channels, weather data, traffic data etc.)&lt;/p&gt;
&lt;p&gt;Homogenizing the data. Especially, covering typical problems of
heterogeneous Quantified Self data, such as missing data or different
and non-standard data formatting.&lt;/p&gt;
&lt;p&gt;Analyzing and visualizing the data. Depending on the questions one has,
the data can be analyzed with statistical methods or correlations. For
example, to get insight into one's personal physical activities, steps
data form activity trackers can be correlated to location data and
weather information. The talk covers how to conduct this and other data
analysis tasks with tools such as pandas and how to visualize the
results.&lt;/p&gt;
&lt;p&gt;The examples in this talk will be shown as interactive IPython sessions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-26:pydata-berlin-2014/quantified-self-analyzing-the-big-data-of-our-da.html</guid></item><item><title>Python for High Performance and Scientific Computing</title><link>https://pyvideo.org/europython-2011/python-for-high-performance-and-scientific-comput.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andreas Schreiber - 23 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an accepted high-level scripting language with a growing
community in academia and industry. It is used in a lot of scientific
applications in many different scientific fields and in more and more
industries, for example, in engineering or life science). In all fields,
the use of Python for high- performance and parallel computing is
increasing. Several organizations and companies are providing tools or
support for Python development. This includes libraries for scientific
computing, parallel computing, and MPI. Python is also used on many core
architectures and GPUs, for which specific Python interpreters are being
developed. A related topic is the performance of the various interpreter
and compiler implementations for Python. The talk gives an overview of
Python’s use in HPC and Scientific Computing and gives information on
many topics, such as Python on massively parallel systems, GPU
programming with Python, scientific libraries in Python, and Python
interpreter performance issues. The talk will include examples for
scientific codes and applications from many domains.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bit.ly/k94rC4"&gt;Slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-for-high-performance-and-scientific-comput.html</guid><category>community</category><category>engineering</category><category>gpu</category><category>hpc</category><category>interpreters</category><category>parallel</category><category>performance</category><category>python,</category><category>scientific</category></item><item><title>Programming mobile apps with python</title><link>https://pyvideo.org/europython-2012/programming-mobile-apps-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Andreas Schreiber - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apps for smartphones and tablet PCs are getting the most relevant kind
of software. The numbers of apps in app markets for Android, iOS and
Windows Phone simply explodes. Unfortunately, almost none of them are
developed with Python which is a bit of shame. This talk covers the
various mobile platforms and explains current solutions for programming
apps with Python. It shows todays problems as well as possibilities, so
that every listener can decide whether Python is already ready for his
mobile app project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/programming-mobile-apps-with-python.html</guid></item><item><title>Ein eigener "SourceForge" mit Allura</title><link>https://pyvideo.org/pycon-de-2011/ein-eigener-sourceforge-mit-allura.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Allura ist die Implementierung eines Software-Forge, d.h. einer
Web-Plattform zum gemeinschaftlichen Entwickeln von Software. Im Vortrag
wird die Architektur von Allura vorgestellt und die Installation zum
Betrieb eigener Software-Forges beschrieben. Anhand eines Beispiels wird
erläutert, wie Allura an die eigene Firma oder Organisation angepasst
werden kann.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Fri, 07 Oct 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-10-07:pycon-de-2011/ein-eigener-sourceforge-mit-allura.html</guid></item><item><title>Keynote - Informatik für die Welt von Morgen</title><link>https://pyvideo.org/pycon-de-2011/keynote-informatik-fur-die-welt-von-morgen.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In ingenieurwissenschaftlichen Forschungseinrichtungen werden in vielen
Bereichen Technologien für unsere Welt von Morgen entwickelt.
Beispielsweise im DLR für Mobilität auf der Erde, in der Luft und im
Weltraum und für den Erhalt unserer Umwelt. Informatik spielt dabei eine
wichtige Rolle. Dabei ist wichtig, dass Informatik und spezielle
Softwaretechnologie die Arbeit der Ingenieure effektiv unterstützen und
voranbringen, ohne sie in ihrer wissenschaftlichen Freiheit und
Kreativität zu behindern. Dies erreicht man durch benutzbare, einfach
zugängliche und nahtlos in die existierende Arbeitsumgebung
integrierbare Softwaretechnologien. Beispielsweise problem-spezifische
Benutzeroberflächen, leicht zu erlernende Programmiersprachen oder
übersichtliche High-Level-APIs für Anwendungen und Bibliotheken. Als
eine Standardsprache im wissenschaftlichen Bereich findet insbesondere
Python immer größere Verbreitung. Zusammen mit leistungsfähigen
Bibliotheken wie NumPy, wird Python zunehmend ein Ersatz für etablierte
ingenieurwissenschaftliche Standardtools wie MATLAB. Damit kann man
bereits viele Aufgaben bewältigen. Im Vortrag werden dazu Beispiele für
einen erfolgreichen Einsatz von Python gezeigt, zum Beispiel
High-Perfomance-Computing-Anwendugen. Zusätzlich aber auch die
existierenden Lücken und Schwächen angesprochen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Fri, 07 Oct 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-10-07:pycon-de-2011/keynote-informatik-fur-die-welt-von-morgen.html</guid></item><item><title>Grundlagen des Open-Source-Lizenzrechts</title><link>https://pyvideo.org/pycon-de-2012/grundlagen-des-open-source-lizenzrechts.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ein kompakter Überblick über die rechtlichen Aspekte von
Open-Source-Software. Neben den rechtlichen Grundlagen werden die
wesentlichen Eigenschaften von Open-Source-Lizenzen vorgestellt.
Außerdem werden einige verbreitete Lizenzen detaillierter erläutert.&lt;/p&gt;
&lt;p&gt;Inhalt:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Rechtliche Grundlagen: Urheberrecht und Lizenzrecht&lt;/li&gt;
&lt;li&gt;Open-Source-Software: Lizenzarten von Software, Definition
Open-Source-Software, Open-Source-Lizenzmodelle, Copyleft vs.
Non-Copyleft&lt;/li&gt;
&lt;li&gt;Ausgewählte Open-Source-Lizenzen: Apache License, GPL, AGPL, LGPL,
BSD License, Eclipse Public License, ...&lt;/li&gt;
&lt;li&gt;Praktische Nutzung von Open-Source-Software: Lizenzkompatibilität,
Nutzung von Open-Source-Software in eigenen Programmen, Auswahl einer
Open-Source-Lizenz für eigene Programme&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Tue, 30 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-30:pycon-de-2012/grundlagen-des-open-source-lizenzrechts.html</guid><category>open-source</category><category>recht</category></item><item><title>Die Dinge im Internet der Dinge mit Python verbinden...</title><link>https://pyvideo.org/pycon-de-2013/die-dinge-im-internet-der-dinge-mit-python-verbin.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Das Internet der Dinge besteht aus kleinen, manchmal intelligenten,
Geräten und Sensoren, die über das Internet verbunden sind. Typische
Sensoren sind Wettermessgeräte oder medizinische Geräte. Das Internet
der Dinge wird nun bald real da sein, was durch günstige kleine
Einplatinencomputer wie Raspberry Pi oder Arduino mit beeinflusst wird.
Allerdings haben diese Geräte nicht viel Rechenleistung. Außerdem sind
sie in machen Umgebungen auch nur mit eingeschränkter Netzwerkbandbreite
angebunden. Um nun (viele) solche Geräte zu verbinden und Daten
austauschen zu lassen sind sehr leichtgewichtige Protokolle und
Implementierungen notwendig.&lt;/p&gt;
&lt;p&gt;Der Vortrag ist über das Protokoll &lt;a class="reference external" href="http://mqtt.org/"&gt;Message Queuing Telemetry
Transport&lt;/a&gt; (MQTT), ein sehr geeignetes Protokoll
zum Verbinden kleiner Geräte und Sensoren. MQTT basiert auf einer
Publish/Subscribe-Architektur. Es eignet sich gut zum Schicken von Daten
von Sensoren zu anderen Geräten. Zum Beispiel lassen sich
Temperaturmesswerte von einem Temperaturfühler ohne viel Overhead zu
einem Server schicken oder zu einem Smartphone als Push-Nachricht
übermitteln. Ein andere Anwendung von MQTT sind Chat-Systeme, z.B. ist
das &lt;a class="reference external" href="https://www.facebook.com/messages/"&gt;Facebook-Messaging&lt;/a&gt; auf
Basis von MQTT implementiert.&lt;/p&gt;
&lt;p&gt;In dem Vortrag geht es vor allem um Open-Source-Implementierungen von
MQTT. Speziell wird der freie MQTT-Broker
&lt;a class="reference external" href="http://mosquitto.org/"&gt;Mosquitto&lt;/a&gt; und dessen
Python-Client-Bibliothek vorgestellt. Mosquitto ist eine
leichtgewichtige Implementierung die effizient auf günstigen
Einplatinenrechnern oder Smartphones läuft. An ein paar Bespielen in
Python wird im Vortrag verdeutlicht wie leicht sich Anwendungen auf
Basis von MQTT realisieren lassen: Die Übertragung von
Temperaturmesswerten per Raspberry Pi zu einem Server, das Senden von
Push-Nachrichten zu Android-Smartphones und das Senden von Smartphones
aus einer Kivy-App heraus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schreiber</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/die-dinge-im-internet-der-dinge-mit-python-verbin.html</guid><category>internet of things</category><category>mqtt</category><category>quantified self</category><category>raspberry pi</category><category>temperaturmessung</category></item></channel></rss>