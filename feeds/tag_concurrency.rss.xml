<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Concurrent asyncio and sanity</title><link>https://pyvideo.org/pycon-uk-2019/concurrent-asyncio-and-sanity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you find programming with asyncio daunting? Are you wondering how you'd build a real-world network-connected service with this and not die trying? In this talk I want to share some best practices and tips to help you create reliable, maintainable applications using concurrency.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martijn Pieters</dc:creator><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-16:pycon-uk-2019/concurrent-asyncio-and-sanity.html</guid><category>asyncio</category><category>concurrency</category><category>scalability</category></item><item><title>Greenlet-based concurrency</title><link>https://pyvideo.org/europython-2013/greenlet-based-concurrency.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Goran Peretin</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/greenlet-based-concurrency.html</guid><category>parallelization</category><category>optimization</category><category>gevent</category><category>greenlet</category><category>concurrency</category><category>performance</category></item><item><title>How DISQUS does "it" when "it" isn't Django</title><link>https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</guid><category>web</category><category>realtime</category><category>mongodb</category><category>zookeeper</category><category>scalability</category><category>django</category><category>celery</category><category>optimization</category><category>gevent</category><category>concurrency</category><category>performance</category></item><item><title>Trio: Async concurrency for mere mortals</title><link>https://pyvideo.org/pycon-us-2018/trio-async-concurrency-for-mere-mortals.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrent programs are super useful: think of web apps juggling lots of
simultaneous downloads and websocket connections, chat bots tracking
multiple concurrent conversations, or web spiders fetching pages in
parallel. But &lt;em&gt;writing&lt;/em&gt; concurrent programs is complicated, intimidating
to newcomers, and often challenging even for experts.&lt;/p&gt;
&lt;p&gt;Does it have to be? Python is famous for being simple and
straightforward; can Python make concurrent programming simple and
straightforward too? I think so. By carefully analyzing usability
pitfalls in other libraries, and taking advantage of new Python 3
features, I’ve come up with a new set of primitives that make it
dramatically easier to write correct concurrent programs, and
implemented them in a new library called &lt;a class="reference external" href="https://trio.readthedocs.io"&gt;Trio&lt;/a&gt;. In this talk, I’ll
describe these primitives, and demonstrate how to use them to implement
a basic algorithm for speeding up TCP connections. Compared to the best
previous Python implementation, our version turns out to be easier to
understand, more correct, and dramatically shorter.&lt;/p&gt;
&lt;p&gt;This talk assumes basic familiarity with Python, but does &lt;em&gt;not&lt;/em&gt; require
any prior experience with concurrency, async/await, or networking.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel J. Smith</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/trio-async-concurrency-for-mere-mortals.html</guid><category>trio</category><category>async</category><category>concurrency</category></item><item><title>PyGotham 2011: A Practical Guide to Non-blocking IO, Coroutines, and Concurrency</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011--a-practical-guide-to-non-blocking-.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;From the OS on up how coroutines and threads affect the performance of
your Python programs and who to deal with them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Hancock</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--a-practical-guide-to-non-blocking-.html</guid><category>concurrency</category><category>coroutines</category><category>nonblockingio</category><category>pygotham</category><category>pygotham2011</category></item><item><title>PyOhio 2010: Lightning Talks</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Floehr</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lightning-talks.html</guid><category>lightning talks</category><category>concurrency</category><category>gil</category><category>lxml</category><category>mercurial</category><category>plone</category><category>plone4</category><category>pyohio</category><category>pyohio2010</category><category>suds</category></item><item><title>PyConAU 2010: The future is soon!</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--the-future-is-soon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The future is soon!&lt;/p&gt;
&lt;p&gt;Presented by Brian K Quinlan (Google)&lt;/p&gt;
&lt;p&gt;This talk introduces PEP 3148, a proposed library that makes it easier
to build concurrent applications or modify existing application to
exploit opportunities for parallelism.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian K Quinlan</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--the-future-is-soon.html</guid><category>concurrency</category><category>pyconau</category><category>pyconau2010</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: Easy Concurrency with Kamaelia (Part 2 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--easy-concurrency-with-kamaelia--part-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] Writing concurrent applications in Python is now
becoming not only easier, but quite elegant and simple, thanks to
Kamaelia. Kamaelia is an interesting component based framework
originating from BBC research. It accomplishes concurrent processing of
data from and to many protocols. Components easily connect and pass data
from and to each other. We are going to explore Kamaelia's strengths and
possibilities, by running simple examples, then trying nested protocol
support, and maybe some other fun examples if time permits.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--easy-concurrency-with-kamaelia--part-.html</guid><category>concurrency</category><category>kamaelia</category><category>pycon</category><category>pycon2009</category></item><item><title>PyCon 2009: Easy Concurrency with Kamaelia (Part 1 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--easy-concurrency-with-kamaelia--part0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] Writing concurrent applications in Python is now
becoming not only easier, but quite elegant and simple, thanks to
Kamaelia. Kamaelia is an interesting component based framework
originating from BBC research. It accomplishes concurrent processing of
data from and to many protocols. Components easily connect and pass data
from and to each other. We are going to explore Kamaelia's strengths and
possibilities, by running simple examples, then trying nested protocol
support, and maybe some other fun examples if time permits.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--easy-concurrency-with-kamaelia--part0.html</guid><category>concurrency</category><category>kamaelia</category><category>pycon</category><category>pycon2009</category></item><item><title>Actors: What, Why, and How (#161)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Actors: What, Why and How&lt;/p&gt;
&lt;p&gt;Presented by Donovan Preston&lt;/p&gt;
&lt;p&gt;Since the dawn of concurrency research, there have been two camps:
shared everything, and shared nothing. Most modern applications use
threads for concurrency, a shared everything architecture.&lt;/p&gt;
&lt;p&gt;Actors, however, use a shared nothing architecture where lightweight
processes communicate with each other using message passing. Actors can
change their state, create a new Actor, send a message to any Actor it
has the Address of, and wait for a specific kind of message to arrive in
it's mailbox.&lt;/p&gt;
&lt;p&gt;We will discuss the benefits of using the Actor architecture and
strategies for implementing an Actor system in Python.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bitbucket.org/fzzzy/python-%20actors/"&gt;http://bitbucket.org/fzzzy/python-actors/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</guid><category>concurrency</category><category>eventlet</category><category>infrastructure</category><category>pycon</category><category>pycon2010</category><category>rest</category><category>scaling</category><category>wsgi</category></item><item><title>Python for Large Astronomical Data Reduction and Analysis Systems (#107)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Large Astronomical Data Reduction and Analysis Systems&lt;/p&gt;
&lt;p&gt;Presented by Francesco Pierfederici (Harvard-Smithsonian Center for
Astrophysics)&lt;/p&gt;
&lt;p&gt;We describe how Python is used in a large astronomy project to
automatically process data from several telescopes in both the
hemispheres. We introduce the general problem and discuss challenges and
lessons learned.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Pierfederici</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html</guid><category>astronomy</category><category>casestudy</category><category>concurrency</category><category>pycon</category><category>pycon2010</category></item><item><title>Understanding the Python GIL (#82)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--understanding-the-python-gil---82.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Understanding the Python GIL&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;The Python Global Interpreter Lock (GIL) is a frequent source of debate
and concern for programmers working with threads and concurrency.
Although most Python programmers generally know that the GIL restricts
Python's ability to utilize multiple CPUs, few know the inner details of
how it actually works and how it impacts applications. This talk will
dive into the inner workings of the GIL like you've never seen before.
Topics include details about the execution of the Python interpreter,
thread implementation, the GILs surprising behavior on multicore CPUs,
and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--understanding-the-python-gil---82.html</guid><category>concurrency</category><category>gil</category><category>pycon</category><category>pycon2010</category><category>threads</category></item><item><title>Jython Concurrency</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--jython-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jython Concurrency&lt;/p&gt;
&lt;p&gt;Presented by Jim Baker&lt;/p&gt;
&lt;p&gt;Jython is arguably the best Python implementation to target concurrent
code. Jython has no GIL, it leverages the Java platform to provide
robust support for concurrency in its runtime, and it enables access to
a set of high-level abstractions from Java. This talk will walk through
at the extreme level pertinent Jython implementation details and a
series of examples, including Java integration.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Jython implements the Python language, but we leverage the underlying
Java platform to provide an opionated alternative to CPython in our
support of concurrency.&lt;/p&gt;
&lt;p&gt;Because of the GIL and related infrastructure, CPython cannot use a
model in which threads perform concurrent computation defined in Python
on shared objects in the same process. (Of course, there are
workarounds, such as multiprocessing or using C extensions.)&lt;/p&gt;
&lt;p&gt;In contrast, there's no GIL in Jython. Jython instead embraces threads,
provides extensive support for managing their execution and coordination
through standard Java platform functionality (java.util.concurrent), and
threaded code works well with Jython's implementation of standard
mutable collection types. Lastly, the underlying JVM provides extensive
instrumentation as well as the ability to set a variety of parameters,
including choice of GC. There are also the inevitable pitfalls that
might be seen in complex architectures, such as around the use of
ClassLoaders.&lt;/p&gt;
&lt;p&gt;This talk will go into a detailed discussion of some of the interesting
ramifications of these design points and how they can be effectively
applied to write concurrent code, as illustrated through a variety of
short examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Baker</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--jython-concurrency.html</guid><category>concurrency</category><category>java</category><category>jython</category><category>pycon</category><category>pycon2011</category></item></channel></rss>