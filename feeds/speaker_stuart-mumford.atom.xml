<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stuart-mumford.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-30T00:00:00+00:00</updated><entry><title>Developing End User Tools for DKIST Data Analysis</title><link href="https://pyvideo.org/pyastro-2018/developing-end-user-tools-for-dkist-data-analysis.html" rel="alternate"></link><published>2018-04-30T00:00:00+00:00</published><updated>2018-04-30T00:00:00+00:00</updated><author><name>Stuart Mumford</name></author><id>tag:pyvideo.org,2018-04-30:pyastro-2018/developing-end-user-tools-for-dkist-data-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Daniel K. Inouye Solar Telescope (DKIST) is a 4m solar telescope currently under construction on HaleakalƒÅ in Hawaii. In this talk I will give an overview of the software under development to enable users to perform scientific analysis on the data collected by the DKIST. This software is being developed in Python using SunPy and Astropy to provide the core tools. The DKIST data centre is expected to generate approximately 3 Pb of calibrated science quality data a year once telescope operations are at full capacity. The data centre will provide no pre-processing of the data before download, which is an extra challenge to the user software. The tools that will be written for these data will include, search and retrieval from the data centre, cataloguing and searching data local to the user and then reading of this data and metadata in a way which is compatible with existing tooling. This talk will describe these stages and the new and existing tools used in implementing them, as well as the challenges faced while doing so.&lt;/p&gt;
</summary></entry><entry><title>SunPy - Python for Solar Physicists</title><link href="https://pyvideo.org/scipy-2013/sunpy-python-for-solar-physicists-0.html" rel="alternate"></link><published>2013-07-01T00:00:00+00:00</published><updated>2013-07-01T00:00:00+00:00</updated><author><name>Stuart Mumford</name></author><id>tag:pyvideo.org,2013-07-01:scipy-2013/sunpy-python-for-solar-physicists-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SunPy is a project designed to provide a free, open and easy-to-use
Python alternative to IDL and SolarSoft. SunPy provides unified,
coordinate-aware data objects for many common solar data types and
integrates into these plotting and analysis tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Mumford, Stuart, University of Sheffield / SunPy&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;Modern solar physicists have, at their disposal, an abundance of space
and ground based instruments providing a large amount of data to analyse
the complex Sun every day. The NASA Solar Dynamics Observatory
satellite, for example, collects around 1.2 TB of data every 24 hours
which requires extensive reconstruction before it is ready for
scientific use. Currently most data processing and analysis for all
solar data is done using IDL and the 'SolarSoft' library. SunPy is a
project designed to provide a free, open and easy-to-use Python
alternative to IDL and SolarSoft.&lt;/p&gt;
&lt;p&gt;SunPy provides unified, coordinate-aware data objects for many common
solar data types and integrates into these plotting and analysis tools.
Providing this base will give the global solar physics community the
opportunity to use Python for future data processing and analysis
routines. The astronomy and astrophysics community, through the
implementation and adoption of AstroPy and pyRAF, have already
demonstrated that Python is well suited for the analysis and processing
of space science data.&lt;/p&gt;
&lt;p&gt;In this presentation, we give key examples of SunPy's structure and
scope, as well as the major improvements that have taken place to
provide a stable base for future expansion. We discuss recent
improvements to file I/O and visualisation, as well as improvements to
the structure and interface of the map objects.&lt;/p&gt;
&lt;p&gt;We discuss the many challenges which SunPy faces if it is to achieve its
goal of becoming a key package for solar physics. The SunPy developers
hope to increase the the visibility and uptake of SunPy, and encourage
people to contribute to the project, while maintaining a high quality
code base, which is facilitated by the use of a social version control
system (git and GitHub).&lt;/p&gt;
</summary><category term="astronomy"></category><category term="astrophysics"></category><category term="SunPy"></category></entry><entry><title>SunPy for Solar Physics</title><link href="https://pyvideo.org/euroscipy-2014/sunpy-for-solar-physics.html" rel="alternate"></link><published>2014-10-22T00:00:00+00:00</published><updated>2014-10-22T00:00:00+00:00</updated><author><name>Stuart Mumford</name></author><id>tag:pyvideo.org,2014-10-22:euroscipy-2014/sunpy-for-solar-physics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SunPy is a data-analysis library specialising in providing the software
necessary to analyse solar and heliospheric datasets in Python. SunPy is
open-source software (BSD licence) and has an open and transparent
development workflow that anyone can contribute to. SunPy provides
access to solar data through use of the Virtual Solar Observatory (VSO),
the Heliophysics Event Knowledgebase (HEK), and the HELiophysics
Integrated Observatory (HELIO) webservice APIs. It currently supports
image data from major solar missions (e.g., SDO, SOHO, STEREO, and
IRIS), time-series data from missions such as GOES, SDO/EVE, and
PROBA2/LYRA, and radio spectra from ground-based e-Callisto and
STEREO/SWAVES. This talk describes SunPy's core functionality, provides
examples of solar data analysis in SunPy and layouts the roadmap for
SunPy's future.&lt;/p&gt;
</summary></entry></feed>