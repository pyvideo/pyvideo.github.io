<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Julia Tutorial</title><link>https://pyvideo.org/pydata-dc-2016/julia-tutorial.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/cc7768/PyDataDC_julia"&gt;https://github.com/cc7768/PyDataDC_julia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Julia is a programming language oriented around the just in time (JIT) compiler technology. This tutorial will be an introduction to Julia and the core concepts that make it a good choice for certain types of problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chase Coleman</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/julia-tutorial.html</guid><category>julia</category><category>tutorial</category></item><item><title>Intro to Julia</title><link>https://pyvideo.org/pydata-chicago-2016/intro-to-julia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;The Julia language has been increasingly used in the research community specially in areas related to data science. This tutorial aims at introducing attendees to Julia in the context of data science. This includes familiarizing the audience with the basics of Julia and illustrating the major differences with Python; also, going over writing Julia wrappers for other programming languages including&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Huda Nassar</dc:creator><pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-26:pydata-chicago-2016/intro-to-julia.html</guid><category>julia</category></item><item><title>Introduction to Julia for Python Developers</title><link>https://pyvideo.org/pydata-berlin-2016/introduction-to-julia-for-python-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;Julia is a performance oriented language written from the ground-up to support numerical processing and parallelisation. The basic syntax of Julia resembles a cross between Matlab and Python, but offers performance which is comparable to compiled C-code. I will present an overview of the language with particular emphasis on where Python users may benefit in using it in their daily work.&lt;/p&gt;
&lt;p&gt;Python users have long benefitted from the less verbose nature of Python, when compared with C and Fortran. However, Python was originally designed for scripting tasks, using dynamic types and widescale object orientation, neither of which features are necessarily beneficial when it comes to numerical computing. Thus, we have seen the widespread use of Python libraries for numerical computation (scipy, numpy, etc.).&lt;/p&gt;
&lt;p&gt;Julia is a new language, developed at MIT, which attempts to learn from the experience of development of Python and similar languages. The main goals are to provide a non-verbose, performance oriented language written from the ground-up to support numerical processing and parallelisation. In its most basic syntax Julia resembles a cross between Matlab and Python, but via compilation through an intermediate level representation (llvm) it offers performance which is comparable to compiled C-code.&lt;/p&gt;
&lt;p&gt;I am not going to argue that Julia is ready for primetime yet. However, it is definitely worth consideration by anyone currently resorting to cython or needing distributed access to large datasets.&lt;/p&gt;
&lt;p&gt;I will present an outline/introduction to the language, including the main benefits and current weaknesses. Of particular interest to the audience may be the fact that Python libraries are importable and callable from within Julia, allowing a continuity of existing workflow but from a Julia-based host environment. My main focus will be for a numerically literate audience who are already contending with the technical limitations of Python and are curious about the new language in town.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/daveh19/pydataberlin2016"&gt;https://github.com/daveh19/pydataberlin2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Higgins</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pydata-berlin-2016/introduction-to-julia-for-python-developers.html</guid><category>julia</category></item><item><title>Introduction to Julia - Part 2</title><link>https://pyvideo.org/scipy-2014/introduction-to-julia-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to the new Julia language from scratch, emphasising
similarities and differences with scientific Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Julia is a new, up-and-coming language that has many similarities to
Python, but some differences. One of its main advantages is the speed
gain obtained by automatically compiling all code (in a somewhat similar
way to &lt;tt class="docutils literal"&gt;PyPy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Cython&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt;, etc.), despite having an
interactive interface very similar to that of Python.&lt;/p&gt;
&lt;p&gt;This will be a tutorial on the basic features of Julia from scratch,
given by a user (rather than a developer) of the language, emphasising
those features which are similar to Python (and hence do not require
much explanation) and those features which are rather different.&lt;/p&gt;
&lt;p&gt;The idea of the tutorial is to give an idea of why there is suddenly
such a buzz around Julia and why it can be useful for certain projects.&lt;/p&gt;
&lt;p&gt;This tutorial is aimed at people who are already familiar with the basic
scientific Python packages; it is not aimed at beginners in scientific
programming.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David P. Sanders</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/introduction-to-julia-part-2.html</guid><category>julia</category></item></channel></rss>