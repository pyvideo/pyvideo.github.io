<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 20 Oct 2014 00:00:00 +0000</lastBuildDate><item><title>Repeatable automated deployments with Juju</title><link>https://pyvideo.org/pycon-uk-2014/repeatable-automated-deployments-with-juju.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Michael Foord &amp;amp; Simon Davy&lt;/p&gt;
&lt;p&gt;Do you deploy your Python services to Amazon EC2, or to Openstack, or even to HP cloud, joyent or Azure? Do you want to - without being tied into any one of them?&lt;/p&gt;
&lt;p&gt;What about local deployments with lxc or kvm containers. How about managing your bare metal servers through Metal As A Service and deploying to OpenStack on top? ISP grade technology for your data centre!&lt;/p&gt;
&lt;p&gt;How about managing your service deployment and infrastructure with Python code? (Devops distilled.)&lt;/p&gt;
&lt;p&gt;If any of this sounds interesting then Juju maybe for you! Treat your servers as cattle not as pets, for service oriented repeatable deployments on your choice of back-end. Orchestrate and relate your services with charms written in Python.&lt;/p&gt;
&lt;p&gt;In this talk we'll demo service deployment for a Django application and related infrastructure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Mon, 20 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-20:pycon-uk-2014/repeatable-automated-deployments-with-juju.html</guid><category>juju</category></item><item><title>Deploying a Django application using Juju</title><link>https://pyvideo.org/kiwi-pycon-2014/deploying-a-django-application-using-juju.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. I will talk about how I deployed my Django
application using Juju.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. The services that Juju deploys are described in
Charms. A Charm should use the &amp;quot;best practice&amp;quot; for deploying the
service. In the case of Django, this would be using gunicorn and nginx.
I explain how the postgresql charm communicates with the django charm,
and how I had to change my application's settings and urls to work with
the django charm. The application that is deployed is a &amp;quot;proprietary&amp;quot;
app, and as such, the deployment of the application itself is done with
another charm. The interaction between the subordinate charms and the
principal django charm are explained, and how the data is exchanged
between the charms. As well as the deployment story, I also explain how
application updates are deployed very simply.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Penhey</dc:creator><pubDate>Sun, 14 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/deploying-a-django-application-using-juju.html</guid><category>deploying</category><category>deployment</category><category>django</category><category>juju</category></item></channel></rss>