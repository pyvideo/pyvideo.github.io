<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ustun-ozgur.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-05-14T00:00:00+00:00</updated><entry><title>Taming Complexity with Django</title><link href="https://pyvideo.org/djangocon-europe-2014/taming-complexity-with-django.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Ustun Ozgur</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/taming-complexity-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the influential paper &amp;quot;Out of the Tarpit&amp;quot;, Moseley and Marks argues
that &amp;quot;complexity is the single major difficulty in the successful
development of large scale software systems&amp;quot;. In this talk, we will
analyze the major sources of &amp;quot;accidental&amp;quot; complexity a Django project
faces over time, and what the major methods to deal with them are. The
major tools we have in reducing complexity are reducing state and
increasing abstraction skills.&lt;/p&gt;
&lt;p&gt;The talk will start with generally accepted methods in Django software
development and touch on separating a project into multiple apps,
relying on managers to implement collection level functionality, making
use of decorators for cross-cutting concerns and adding methods to
models (but bewaring the perils of fat models). We will discuss how to
separate the roles of models with mixins so that functionality can be
reused across models. We will discuss how functional programming
techniques can be employed in a Django project to reduce complexity.&lt;/p&gt;
&lt;p&gt;In the second part of the talk, we will continue with another major
source of complexity in Django applications: The JavaScript problem. No
longer can we ignore JavaScript when discussing web projects and that
covers Django too. We will briefly see how popular tools such as jQuery,
Backbone and Angular try to solve this with increasing degrees of
success, but do not attack the &amp;quot;state&amp;quot; problem as the major source of
complexity. We will introduce Facebook's React library as the solution
and how its functional programming inspired philosophy helps us to cope
with this problem. We will show how this library can be used within
Django in conjunction with a node.js renderer, whereby duplication of
templates on server and client-side, a major source of complexity is
reduced.&lt;/p&gt;
</summary></entry></feed>