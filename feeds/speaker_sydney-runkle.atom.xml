<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Sydney Runkle</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sydney-runkle.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Pydantic Power-up: Performance Tips for Lightning-Fast Python Applications</title><link href="https://pyvideo.org/pycon-us-2024/pydantic-power-up-performance-tips-for-lightning-fast-python-applications.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Sydney Runkle</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/pydantic-power-up-performance-tips-for-lightning-fast-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pydantic is the most widely used data validation library for Python.
With the V2 release, the library shifted to using Rust for core
validation logic, which resulted in 5-50x speedups compared to V1.
Though Pydantic is already quite efficient, there are some little-known
performance tips and tricks you can …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pydantic is the most widely used data validation library for Python.
With the V2 release, the library shifted to using Rust for core
validation logic, which resulted in 5-50x speedups compared to V1.
Though Pydantic is already quite efficient, there are some little-known
performance tips and tricks you can use to ensure optimal performance.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll delve into a spectrum of optimizations, ranging from
one line fixes to larger scale design modifications that can help you
squeeze the best performance out of Pydantic. In terms of one line
fixes, I’ll suggest changes ranging from opinionated JSON loading syntax
to &lt;tt class="docutils literal"&gt;TypeAdapter&lt;/tt&gt; usage tips. The focal point of the talk will be
tagged (also called discriminated) unions, a Pydantic tool used to
efficiently validate union types, while also taming related validation
errors.&lt;/p&gt;
&lt;p&gt;Listeners will walk away from this talk with a more nuanced
understanding of performance with Pydantic, an abundance of examples
that they can apply to their own code, and insights into upcoming
performance enhancing features coming to Pydantic.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry></feed>