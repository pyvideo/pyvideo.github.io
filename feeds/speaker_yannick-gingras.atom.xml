<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_yannick-gingras.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-04-14T00:00:00+00:00</updated><entry><title>Scaling the Facebook Cache Infrastructure with Python</title><link href="https://pyvideo.org/montreal-python/scaling-the-facebook-cache-infrastructure-with-python.html" rel="alternate"></link><published>2014-04-14T00:00:00+00:00</published><updated>2014-04-14T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2014-04-14:montreal-python/scaling-the-facebook-cache-infrastructure-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - Yannick Gingras gives an overview of the problems that Facebook faces deploying cache services that answer over a billion queries per second while maintaining sub-millisecond response time. He describes the strategies that he uses to mitigate them and since Python is a critical piece of the puzzle, he highlights some of the areas of this usage. I tells war stories and the sense of scale can feel crushing at times, but he does his best to keep it entertaining.¸&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Memecache: &lt;a class="reference external" href="https://www.facebook.com/MemcacheAtFacebook"&gt;https://www.facebook.com/MemcacheAtFacebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Yannick: &lt;a class="reference external" href="https://twitter.com/ygingras"&gt;https://twitter.com/ygingras&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP45: &lt;a class="reference external" href="http://sflx.ca/mp45e"&gt;http://sflx.ca/mp45e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Founder Fuel</title><link href="https://pyvideo.org/montreal-python/founder-fuel.html" rel="alternate"></link><published>2011-10-07T00:00:00+00:00</published><updated>2011-10-07T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2011-10-07:montreal-python/founder-fuel.html</id><summary type="html"></summary></entry><entry><title>Montreal Python 2 Yannick Gingras PyQt PyOpenGL</title><link href="https://pyvideo.org/montreal-python/montreal-python-2-yannick-gingras-pyqt-pyopengl.html" rel="alternate"></link><published>2008-03-19T00:00:00+00:00</published><updated>2008-03-19T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2008-03-19:montreal-python/montreal-python-2-yannick-gingras-pyqt-pyopengl.html</id><summary type="html"></summary></entry><entry><title>An Overview of the Facebook cache</title><link href="https://pyvideo.org/pycon-ca-2013/an-overview-of-the-facebook-cache.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/an-overview-of-the-facebook-cache.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Facebook leverages in-memory data stores extensively. Even though
caching is a conceptually simple service, several problems inherent to
our scales make the deployment of our in-memory data store particularly
interesting and challenging.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Montreal-Python -- Lessons Learned from Bootstraping a Python Community</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--montreal-python----lessons-learned-fr.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--montreal-python----lessons-learned-fr.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Montréal-Python is a user-group formed in 2007. It has since then grown
into a thriving community with code sprint and regular meetings
attracting over 50 attendees. This talk will present history of the
group and will highlight the key factors behind its success with the
hope to inspire others to replicate that accomplishment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will first walk the audience through the factors inherent to
Montréal itself and how it affected other user groups before
Montréal-Python. These groups inspired us to get a group of Python
hackers started the presentation will show how we were able to leverage
on the success of other user groups to bring our young community
forward.&lt;/p&gt;
&lt;p&gt;The various stages of our growth will be presented along with insights
on how we managed to find speakers and venues at each point. The
presentation will then go through an overview of our current activities,
sharing in the process how effective they are in engaging the community.
Our plans for the next few years will be presented then a summary will
provide advice to anyone who would like to get started organizing a
local Python user group.&lt;/p&gt;
</summary><category term="community"></category><category term="growth"></category><category term="pycon"></category><category term="pycon2011"></category><category term="usergroups"></category></entry></feed>