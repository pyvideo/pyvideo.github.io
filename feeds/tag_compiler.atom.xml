<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_compiler.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-04-08T00:00:00+00:00</updated><entry><title>ByteCode al supporto dei test per protocolli ed enforcing di best practices</title><link href="https://pyvideo.org/pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio interpretato con efficaci strumenti di
introspezione, fino a permetterci di accedere al suo bytecode e vedere
cosa la virtual machine sta per eseguire. Per quanto questa esigenza sia
solitamente molto limitata in ambito di produzione ed uso del software
può venirci utile all’interno delle test suite per verificare che il
codice scritto da terzi o dal noi stessi del domani rispetti ancora dei
protocolli o delle best practices che avevamo presupposto.&lt;/p&gt;
&lt;p&gt;La maggior parte di queste esigenze possono essere soddisfatte anche
tramite l’uso di metaclassi o monkeypatching, ma in alcuni casi è
possibile saltare i check preposti involontariamente (ad esempio
ereditando dalla classe sbagliata nel caso delle metaclassi), mentre la
verifica del byte code ci consente di controllare cosa effettivamente
sarà eseguito, non cosa ci aspettiamo sia eseguito.&lt;/p&gt;
</summary><category term="quality-assurance"></category><category term="CPython"></category><category term="testing"></category><category term="robustness"></category><category term="static-typing"></category><category term="bytecode"></category><category term="hacking"></category><category term="compiler"></category></entry><entry><title>Cython für schnelleren Python-Code</title><link href="https://pyvideo.org/pycon-de-2013/cython-fur-schnelleren-python-code.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Stefan Behnel</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/cython-fur-schnelleren-python-code.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Der &lt;a class="reference external" href="http://cython.org"&gt;Cython-Compiler&lt;/a&gt; ist mehr als nur ein Weg,
Erweiterungsmodule for CPython zu schreiben. Durch die statische
Übersetzung von reinem Python-Code öffnen sich neue Möglichkeiten, den
Code vielfach zu beschleunigen. Anhand einiger Beispiele wird gezeigt,
wie durch Profiling und gezielte manuelle Optimierung auch reiner
Python-Code von statischer Kompilierung profitieren kann, ohne dabei das
Ökosystem der CPython-Laufzeitumgebung verlassen zu müssen.&lt;/p&gt;
</summary><category term="compiler"></category><category term="cython"></category><category term="optimierung"></category></entry></feed>