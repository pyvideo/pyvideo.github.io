<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Loren Arthur</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_loren-arthur.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Rethinking How We're Linking: What to do when speeding things up slows them down (Sponsor: Meta)</title><link href="https://pyvideo.org/pycon-us-2024/rethinking-how-were-linking-what-to-do-when-speeding-things-up-slows-them-down-sponsor-meta.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Loren Arthur</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/rethinking-how-were-linking-what-to-do-when-speeding-things-up-slows-them-down-sponsor-meta.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The common belief that re-writing Modules as CExtensions will improve
performance only works to a point. At Meta, we operate at a massive
scale with applications that can include over 20,000 shared libraries.
When loading that many files, import performance slows down
significantly. In this session, I will â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The common belief that re-writing Modules as CExtensions will improve
performance only works to a point. At Meta, we operate at a massive
scale with applications that can include over 20,000 shared libraries.
When loading that many files, import performance slows down
significantly. In this session, I will share how we greatly improved
performance by statically linking native extensions into the runtime.
Get ready for a quick overview of linkers and loaders, a brief foray
into binary layout, and a deep dive into how Native extensions work in
Python.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry></feed>