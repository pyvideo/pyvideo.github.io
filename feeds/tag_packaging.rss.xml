<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 25 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>The Packaging Lifecycle with Poetry</title><link>https://pyvideo.org/kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Right now is an interesting time in the land of Python packaging; there are a lot of ideas flying around about the correct way to package, develop and publish your code. Poetry is one thread in this conversation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Clinton Roy</dc:creator><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-25:kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html</guid><category>poetry</category><category>Packaging</category></item><item><title>Tools of the Trade: The Making of a Code Editor.</title><link>https://pyvideo.org/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project. We have had to address:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cross platform GUI development.&lt;/li&gt;
&lt;li&gt;Cross platform packaging solutions for Python.&lt;/li&gt;
&lt;li&gt;Creating an interactive visual debugger.&lt;/li&gt;
&lt;li&gt;Integrating with iPython notebook.&lt;/li&gt;
&lt;li&gt;Integrating with various IoT MicroPython devices.&lt;/li&gt;
&lt;li&gt;Integrating with frameworks such as PyGame/PyGameZero and Flask.&lt;/li&gt;
&lt;li&gt;Automating cross platform testing.&lt;/li&gt;
&lt;li&gt;Researching and testing UX with a challenging user base.&lt;/li&gt;
&lt;li&gt;Accessibility for all.&lt;/li&gt;
&lt;li&gt;Internationalisation.&lt;/li&gt;
&lt;li&gt;Creating an inclusive, welcoming and supportive community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will explain why Mu was created, how Mu was created and, most
importantly, shares the decision making, technical research and
implementation details of Mu in the hope others can learn from our
mistakes, mis-steps and muck-ups.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</guid><category>Cross-Platform-Development</category><category>Development</category><category>Education</category><category>Packaging</category><category>failures/mistakes</category></item><item><title>Zen of Python Dependency Management</title><link>https://pyvideo.org/europython-2019/zen-of-python-dependency-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring reliably repeatable dependency installation has long been an
unsolved problem for many Python projects. Pinning dependencies via
setup.py and requirements.txt has historically been met with extra work
and unexpected results, particularly when managing the dependencies of
dependencies.&lt;/p&gt;
&lt;p&gt;Thanks to PEP 518, Python projects can now more easily manage
dependencies via the new pyproject.toml file specification. In its wake,
a number of useful tools have arisen that use this file to provide
enhanced dependency resolution, including Poetry, Hatch, and Pipenv.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to replace three files (setup.py, requirements.txt, and
MANIFEST.ini) with just one: pyproject.toml&lt;/li&gt;
&lt;li&gt;why dependency resolution is hard and why it matters&lt;/li&gt;
&lt;li&gt;how Poetry, Hatch, and Pipenv differ and when to use each&lt;/li&gt;
&lt;li&gt;why one might use a less magical alternative: pip-tools&lt;/li&gt;
&lt;li&gt;how to use pipx to isolate system-wide Python tools&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Mayer</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/zen-of-python-dependency-management.html</guid><category>Deployment/Continuous Integration and Delivery</category><category>Open-Source</category><category>Packaging</category><category>PyPi</category></item><item><title>Publish a (Perfect) Python Package on PyPI</title><link>https://pyvideo.org/europython-2019/publish-a-perfect-python-package-on-pypi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;. Ensure your code will
work in different on different platforms! Document your code so people
won't ask you loads of questions! Finally, learn how avoid doing any of
this yourself.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should you package your code for PyPI?&lt;/li&gt;
&lt;li&gt;How to structure your project and your code, including why you need a
&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder!&lt;/li&gt;
&lt;li&gt;Discover what goes in your &lt;tt class="docutils literal"&gt;Pipfile&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and
why. Learn the difference between installing your library to use it,
and installing it to develop on it.&lt;/li&gt;
&lt;li&gt;Write tests for your project, and run them using Tox.&lt;/li&gt;
&lt;li&gt;Ensure your code will work in different on different platforms with
Continuous Integration!&lt;/li&gt;
&lt;li&gt;Document your code so people won't ask you loads of questions!&lt;/li&gt;
&lt;li&gt;How to actually get your code on PyPI using Twine.&lt;/li&gt;
&lt;li&gt;Finally, learn how avoid doing any of this yourself (or avoid doing
it twice) using CookieCutter templates.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/publish-a-perfect-python-package-on-pypi.html</guid><category>Best Practice</category><category>Packaging</category><category>Python 3</category></item><item><title>Python Packaging on the Enterprise</title><link>https://pyvideo.org/europython-2013/python-packaging-on-the-enterprise.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to discuss problems and solutions when implementing an
end-to- end Python environment for a big company.&lt;/p&gt;
&lt;p&gt;The term ‘Enterprise’ often has negative connotations in much of the
open- source world, usually along the lines of ‘expensive and bloated’.
In this case I’d like to use it for describing a systems environment
where the freedoms of a developer working at home with her laptop are
not always available or practical. For example, coding on the holodeck
of the Starship Enterprise.&lt;/p&gt;
&lt;p&gt;Big teams and codebases need tools that make it very easy for new
developers to get up and running writing code with the minimum of fuss.
Large software platforms needs tools to manage complex package
dependency graphs and release workflows. Also, production environments
don’t always have compilers or direct internet access so many of
Python’s standard packaging tools make it a bit tricky to get things
going in these regards.&lt;/p&gt;
&lt;p&gt;I’d like to present how we managed to solve a number of these problems
for a recent client, a task which happily culminated in much of the
software being open-sourced at &lt;a class="reference external" href="https://github.com/eeaston/pkglib"&gt;https://github.com/eeaston/pkglib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Edit: The software also has numerous testing tools included which I’ll
demonstrate, including py.test fixtures for mongo, redis, pyramid and
generic servers, selenium webdriver and C/C++ code coverage and
profiling.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Easton</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-packaging-on-the-enterprise.html</guid><category>packaging</category><category>jenkins</category><category>continuous-integration</category><category>systems-programming</category><category>sysadmin</category></item><item><title>devpi: driving your packaging and testing needs</title><link>https://pyvideo.org/europython-2013/devpi-driving-your-packaging-and-testing-needs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/devpi-driving-your-packaging-and-testing-needs.html</guid><category>packaging</category><category>quality-assurance</category><category>testing</category></item><item><title>Conda: A Cross Platform Package Manager for any Binary Distribution</title><link>https://pyvideo.org/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the problems that have plagued Python packaging in the past, followed by
a demonstration of its features.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the issues that have plagued packaging in the Python
ecosystem in the past, and discuss how Conda solves these problems. We
will show how to use conda to manage multiple environments. Finally, we
will look at how to build your own conda packages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the packaging problem? We will briefly look at the history of
the problem and the various solutions to it. There are two sides to
the packaging problem: the problem of installing existing packages
and the problem of building packages to be installed. We look at the
history of distutils, setuptools, distribute, and pip, the some of
the problems they solved, and issues that arose, particularly for the
scientific Python community.&lt;/li&gt;
&lt;li&gt;We will look at the conda package format, the design decisions that
guided the format, and the implications of those decisions. A conda
package is a bz2 compressed tarfile of all the files installed in a
prefix, along with a metadata directory for the package. A conda
package is typically installed by hard linking these files into the
install prefix. Conda packages should be relocatable, so that they
can be installed into any prefix. This allows conda packages to be
installed into many virtual environments at once. A conda package is
not Python specific.&lt;/li&gt;
&lt;li&gt;We will look at how basic commands for installation and environment
management. Conda uses a SAT solver to solve package dependency
constraints, which is a simple, rigorous, and modern way to ensure
that the set of packages that are installed are consistent with one
another.&lt;/li&gt;
&lt;li&gt;Conda has an extensive build framework which allows anybody to build
their own conda packages. We will show how to use these tools and how
to upload them to Binstar, a free packaging hosting service.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</guid><category>conda</category><category>packaging</category></item><item><title>Reproducible, Relocatable, Customizable Builds and Packaging with HashDist Part1</title><link>https://pyvideo.org/scipy-2014/reproducible-relocatable-customizable-builds-an.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk introduces HashDist, a critical component of the scientific
software development workflow. HashDist enables highly customizable,
source-driven, and reproducible builds for scientific software stacks.
HashDist builds can be made relocatable, allowing the easy
redistribution of binaries on all three major operating systems as well
as cloud and supercomputing platforms.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing scientific software is a continuous balance between not
reinventing the wheel and getting fragile codes to interoperate with one
another. Binary software distributions such as Anaconda provide a robust
starting point for many scientific software packages, but this solution
alone is insufficient for many scientific software developers. HashDist
provides a critical component of the development workflow, enabling
highly customizable, source-driven, and reproducible builds for
scientific software stacks, available from both the IPython Notebook and
the command line.&lt;/p&gt;
&lt;p&gt;To address these issues, the Coastal and Hydraulics Laboratory at the US
Army Engineer Research and Development Center has funded the development
of HashDist in collaboration with Simula Research Laboratories and the
University of Texas at Austin. HashDist is motivated by a functional
approach to package build management, and features intelligent caching
of sources and builds, parametrized build specifications, and the
ability to interoperate with system compilers and packages. HashDist
enables the easy specification of &amp;quot;software stacks&amp;quot;, which allow both
the novice user to install a default environment and the advanced user
to configure every aspect of their build in a modular fashion. As an
advanced feature, HashDist builds can be made relocatable, allowing the
easy redistribution of binaries on all three major operating systems as
well as cloud, and supercomputing platforms. As a final benefit, all
HashDist builds are reproducible, with a build hash specifying exactly
how each component of the software stack was installed.&lt;/p&gt;
&lt;p&gt;This talk will feature an introduction to the problem of packaging
Python-based scientific software, a discussion of the basic tools
available to scientific Python developers, and a detailed discussion and
demonstration of the HashDist package build manager.&lt;/p&gt;
&lt;p&gt;The HashDist documentation is available from:
&lt;a class="reference external" href="http://hashdist.readthedocs.org/en/latest/"&gt;http://hashdist.readthedocs.org/en/latest/&lt;/a&gt; HashDist is currently hosted
at: &lt;a class="reference external" href="https://github.com/hashdist/hashdist"&gt;https://github.com/hashdist/hashdist&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Terrel</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/reproducible-relocatable-customizable-builds-an.html</guid><category>packaging</category><category>reproducible research</category></item><item><title>Django Package Thunderdome: Is Your Package Worthy?</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--django-package-thunderdome--is-yo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Package Thunderdome: Is Your Package Worthy&lt;/p&gt;
&lt;p&gt;Audrey Roy, Daniel Greenfeld&lt;/p&gt;
&lt;p&gt;What makes a package useful? What is it about certain packages that
makes them must-haves for any project? I’ll go over topics like:
purpose, structure, docs, tests, availability on PyPI and
Github/Bitbucket, activity, and more. I will visit some of the most
useful grids on djangopackages.com and highlight my top package picks,
showing examples of what makes these top packages so great.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--django-package-thunderdome--is-yo.html</guid><category>djangocon</category><category>djangocon2011</category><category>packaging</category></item><item><title>Lightning talks</title><link>https://pyvideo.org/kiwi-pycon-2009/lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Morris Jones (Simple robot using python on a wifi router)&lt;/li&gt;
&lt;li&gt;John Graves (Voice interaction)&lt;/li&gt;
&lt;li&gt;Charles Manning (A noob does ctypes)&lt;/li&gt;
&lt;li&gt;Raazesh Sainudiin (Computational Statistical Laboratories with SAGE
Notebook Server)&lt;/li&gt;
&lt;li&gt;Juergen Brendel (WSGI is easy)&lt;/li&gt;
&lt;li&gt;Michael Hoppe (Basic data acquisition and analysis)&lt;/li&gt;
&lt;li&gt;Carl Cerecke (A faster, cleaner goto statement)&lt;/li&gt;
&lt;li&gt;Douglas Bagnall (Booki, Objavi, Espri: the FLOSS Manuals publishing
suite)&lt;/li&gt;
&lt;li&gt;Peter Harrison (Introduction to Autonomous Systems)&lt;/li&gt;
&lt;li&gt;Jim Tittsler (Educational Content Packaging)&lt;/li&gt;
&lt;li&gt;David Hood (Little lies to tell when teaching Python Programming)&lt;/li&gt;
&lt;li&gt;Dylan Jay (How to host Python app for $20 in 20mins -
collective.hostout)&lt;/li&gt;
&lt;li&gt;Greg Hewgill (PSIL - Python S-expression Intermediate Language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Morris Jones</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/lightning-talks.html</guid><category>lightning talks</category><category>ctypes</category><category>flossmanuals</category><category>goto</category><category>kiwipycon</category><category>kiwipycon2009</category><category>packaging</category><category>psil</category><category>robot</category><category>wsgi</category></item><item><title>PyConAU 2010: Don't Break It: Continuous Integration &amp; Deployment</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don't Break It: Continuous Integration &amp;amp; Deployment&lt;/p&gt;
&lt;p&gt;Presented by Benno Rice&lt;/p&gt;
&lt;p&gt;So you've developed your application, it appears to work and you may
even have some tests to back that up. Now what?&lt;/p&gt;
&lt;p&gt;One part of software development that tends to receive not nearly enough
attention is the process of deploying, supporting and maintaining your
code in production. This demonstration will give an overview of using
tools such as Hudson, nose, stdeb and freshen to automate the testing,
packaging, deployment and verification of production software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Rice</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html</guid><category>agile</category><category>architecture</category><category>packaging</category><category>pyconau</category><category>pyconau2010</category><category>testing</category></item><item><title>PyConAU 2010: Esky: keep your frozen apps fresh</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esky: keep your frozen apps fresh&lt;/p&gt;
&lt;p&gt;Presented by Ryan F Kelly&lt;/p&gt;
&lt;p&gt;Esky (&lt;a class="reference external" href="http://pypi.python.org/pypi/esky/"&gt;http://pypi.python.org/pypi/esky/&lt;/a&gt;) is an auto-update framework for
frozen Python applications, designed to be simple to use while
guaranteeing the safety of your app in case of failed or partial
updates. It provides easy support for differential updates and is
compatible with py2exe, py2app, cx-freeze and bbfreeze.&lt;/p&gt;
&lt;p&gt;This talk will give an overview of esky's features, and show how to
extend an existing frozen application with auto-update support.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan F Kelly</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html</guid><category>esky</category><category>packaging</category><category>pyconau</category><category>pyconau2010</category></item><item><title>Python Packages</title><link>https://pyvideo.org/pycon-de-2013/python-packages.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;setup.py, PyPI, easy_install, pip, distutils, setuptools, virtualenv -
wer ein Paket nutzen oder den eigenen Code als Paket verteilen will muss
sich durch einen Dschungel von Modulen und Werkzeugen kämpfen. Dieser
Vortrag bringt Licht ins Dunkel und stellt aktuelle Best Practices für
die Verwendung und Erstellung von Python-Paketen vor.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Hepper</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/python-packages.html</guid><category>packaging</category><category>pip</category><category>pypi</category><category>setuptools</category><category>virtualenv</category></item><item><title>devpi: driving packaging and testing needs</title><link>https://pyvideo.org/pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;devpi provides both a private pypi server, a self-updating
pypi.python.org package cache, and work flow commands for uploading,
testing and installing packages. This talk shows some example scenarios
and discusses the unique feature of seemlessly &amp;quot;inheriting&amp;quot; the
pypi.python.org packages into your private index. We'll also look into
how you can perform testing of a package before you push a release to
the public index or your company-specific private index.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</guid><category>packaging</category><category>qa</category><category>testing</category></item><item><title>PyCon 2009: How to Build Applications Linux Distributions will Package (#78)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty
application that makes people's lives easier you know the truly hard
part is convincing others to use it. One way to increase the number of
people installing your software is to convince Linux distributions to
package your software so that their end users can install by using the
system tools they're used to. One way of convincing them is by making
your application easy to package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html</guid><category>linux</category><category>packaging</category><category>pycon</category><category>pycon2009</category></item><item><title>Cross platform application development and distribution (#116)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cross platform application development and distribution&lt;/p&gt;
&lt;p&gt;Presented by Stani Michiels and Nadia Alramli&lt;/p&gt;
&lt;p&gt;You think Python gives you native cross platform applications for free?
Think twice. Are you interested in distributing your application to
other platforms but not sure how?&lt;/p&gt;
&lt;p&gt;We will give tips and examples on how to enhance the native feel of your
application: notifications, registration of file types and more. The
talk will also help you to avoid common pitfalls and provides solutions
for designing cross platform user interfaces. (Although we use wxPython
as an example, the principles are valid for other toolkits as well.)
We'll show you where to start if you want to distribute your application
to different platforms, briefly discussing tools like py2exe, py2app and
Debian/Ubuntu packaging ecosystem. This talk is based on our experience
from developing Phatch (Photo Batch Processor) and SPE (Python Editor).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nadia Alramli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</guid><category>crossplatform</category><category>packaging</category><category>py2app</category><category>py2exe</category><category>pycon</category><category>pycon2010</category><category>wxpython</category></item><item><title>The state of Packaging (#63)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools and Pip added great features on the top of this
: the ability to fetch PyPI to install a project and its dependencies.
So you can &amp;quot;easy_install A-Program&amp;quot; and everything is done
automatically for you.&lt;/p&gt;
&lt;p&gt;But all these features have shown the flaws and limitations of the
current Distutils design, and the urgency to make it evolve with respect
to the existing OS-specific packaging systems.&lt;/p&gt;
&lt;p&gt;This talk will detail the biggest issues that need to be solved, and the
work that is being done. It will end up with a presentation of the
Distutils roadmap, and an overview of the Distribute project, the
Setuptools replacer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</guid><category>distribute</category><category>distutils</category><category>easy_install</category><category>packaging</category><category>pip</category><category>pycon</category><category>pycon2010</category><category>pypi</category><category>setuptools</category></item></channel></rss>