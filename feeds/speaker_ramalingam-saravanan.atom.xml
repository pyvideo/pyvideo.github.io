<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ramalingam-saravanan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-19T00:00:00+00:00</updated><entry><title>Slidoc: A Pythonic Learning Management System</title><link href="https://pyvideo.org/pytexas-2017/slidoc-a-pythonic-learning-management-system.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Ramalingam Saravanan</name></author><id>tag:pyvideo.org,2017-11-19:pytexas-2017/slidoc-a-pythonic-learning-management-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slidoc is an unconventional framework for a learning management system that combines slides and documents for courses, especially to teach Python. Markdown is used as the universal format for exams and interactive lectures. Google Sheets serves as back-end database and Tornado as the web server.&lt;/p&gt;
</summary></entry><entry><title>Creating a browser-based virtual computer lab for teaching and collaboration</title><link href="https://pyvideo.org/pytexas-2014/creating-a-browser-based-virtual-computer-lab-fo.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Ramalingam Saravanan</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/creating-a-browser-based-virtual-computer-lab-fo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With laptops and tablets becoming more powerful and more ubiquitous in
the classroom, traditional computer labs with rows of expensive desktop
computers are slowly beginning to lose their relevance. An alternative
approach for computer-assisted instruction is to use a browser-based
virtual computer lab. The different approaches to providing a virtual
computing environment for Python, and the associated challenges, will be
discussed. Options for providing a multi-user environment include
running a public IPython Notebook server, or using alternative
free/commercial solutions that incorporate the notebook interface, such
as JiffyLab, Sage Math Cloud, GraphTerm, and Wakari. A virtual computer
lab implemented using the GraphTerm server will be described. The
advantages of physical computer labs, such as face-to-face interaction,
and the challenge of replicating them in a virtual environment will be
discussed as well.&lt;/p&gt;
</summary></entry><entry><title>Creating a browser based virtual computer lab for classroom instruction</title><link href="https://pyvideo.org/scipy-2014/creating-a-browser-based-virtual-computer-lab-for.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Ramalingam Saravanan</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/creating-a-browser-based-virtual-computer-lab-for.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With laptops and tablets becoming more powerful and more ubiquitous in
the classroom, traditional computer labs with rows of expensive desktops
are beginning to lose their relevance. This presentation will discuss
browser-based virtual computer labs for teaching Python, using a
notebook interface, as an alternative approach to classroom instruction.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the difficulties in using Python for scientific applications is
that one needs a fairly complete set of Python data processing and
visualization packages to be installed, beyond the standard Python
distribution. Freely available scientific Python distributions like
Enthought Canopy and Anaconda address this problem. A typical approach
to teaching Python is to use a dedicated computer lab, where one of
these distributions is installed on a set of machines with identical
computing environments for use by students. With laptop computers
becoming cheap and ubiquitous, an alternative approach is to allow
students to use their own computers, where they install one of the
scientific Python distributions by themselves. This approach requires
more set-up time, because the software often requires some minor
tweaking for each software platform, but requires no dedicated hardware
and has the advantage of allowing students to easily run programs after
class on their own computers. This presentation discusses a third
approach that involves creating a software environment for Python using
“cloud computing”. There are already commercial products available that
provide well-supported Python computing environments in the cloud. This
presentation focuses on alternative “roll your own” solutions using
open-source software that are specifically targeted for use in an
interactive classroom instruction setting.&lt;/p&gt;
&lt;p&gt;Creating a virtual computing lab usually involves instantiating a server
using a cloud infrastructure provider, such as Amazon Web Services. A
new server can be set-up within minutes, with a scientific Python
distribution automatically installed during set-up. Students can then
login to their own accounts on the server using a browser-based
interface to execute Python programs and visualize graphical output.
Typically, each student would use a notebook interface to work on
lessons.&lt;/p&gt;
&lt;p&gt;Different approaches can be used to create separate accounts for
multiple users. The simplest would be to create different user accounts
on a Linux virtual machine. If greater isolation is required,
lightweight linux containers can be created on-demand for each user.
Although IPython Notebook can currently be run as a public server to
work with multiple notebooks simultaneously, true multi-user support is
expected to be implemented further down the road. However, there are a
few open-source projects, such as JiffyLab, that already support a
multi-user IPython Notebook environment. Another option is to use the
open-source GraphTerm server, which supports a multi-user “graphical
terminal” environment with a notebook interface. The pros and cons of
these different approaches to building a virtual computer lab will be
discussed.&lt;/p&gt;
&lt;p&gt;Also discussed will be additional features that could be useful in a
virtual computing lab such as the capability for the instructor to chat
with the students and monitor their individual progress using a
“dashboard”. Allowing students to collaborate in groups, with ability to
view and edit each others’ code, can help promote classroom interaction.
Enhancements to the notebook interface, such as “fill in the blanks”
notebooks, can facilitate more structured instruction. The
implementation of some of these features in the GraphTerm server will be
discussed.&lt;/p&gt;
&lt;p&gt;LINKS:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/ptone/jiffylab"&gt;JiffyLab source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mitotic/graphterm"&gt;GraphTerm source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://conference.scipy.org/proceedings/scipy2013/pdfs/saravanan.pdf"&gt;GraphTerm talk from SciPy
2013&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>