<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tom-forbes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-10T00:00:00+00:00</updated><entry><title>Writing a Python autoreloader</title><link href="https://pyvideo.org/europython-2019/writing-a-python-autoreloader.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Tom Forbes</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/writing-a-python-autoreloader.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reloading your code changes quickly is an integral part of the
development experience in frameworks like Django and Flask that
developers have come to rely on. But how do they work under the hood and
what challenges do you face while writing one?&lt;/p&gt;
&lt;p&gt;In this talk I will explore how I refactored the autoreload
implementation in Django 2.2 and the lessons I learned along the way
(hint: it's surprisingly complex!). I will also be introducing a library
I've developed to simplify this if you ever find yourself writing your
own.&lt;/p&gt;
</summary><category term="Architecture"></category><category term="Development"></category><category term="Django"></category><category term="Python 3"></category><category term="Software Design"></category></entry></feed>