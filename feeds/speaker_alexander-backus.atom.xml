<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alexander-backus.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-30T00:00:00+00:00</updated><entry><title>Categorizing financial transactions for personal finance management at Yolt</title><link href="https://pyvideo.org/pydata-eindhoven-2019/categorizing-financial-transactions-for-personal-finance-management-at-yolt.html" rel="alternate"></link><published>2019-11-30T00:00:00+00:00</published><updated>2019-11-30T00:00:00+00:00</updated><author><name>Alexander Backus</name></author><id>tag:pyvideo.org,2019-11-30:pydata-eindhoven-2019/categorizing-financial-transactions-for-personal-finance-management-at-yolt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Yolt (ING), we continuously work on our transaction categorization
engine to provide app users with a practical financial overview. But how
to approach this seemingly clear-cut classification task and what are
the key considerations? In this talk, I discuss all aspects, from
business requirements to algorithms, starting with a simple model and
moving on to label embedding neural networks.&lt;/p&gt;
&lt;p&gt;At the advent of the second &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Payment_Services_Directive"&gt;Payment Services
Directive&lt;/a&gt;
(PSD2) and growing assortment of Personal Finance Management apps,
todayâ€™s consumers are more than ever expecting accurate categorization
of their transactions to get a comprehensive overview of their income
and spendings. At &lt;a class="reference external" href="https://www.yolt.com/"&gt;Yolt&lt;/a&gt;, a fintech venture of
ING Bank, we are continuously working to create the best financial
transaction categorization engine in the world in order to deliver this
customer promise. Interestingly, from a data science perspective, this
seemingly straightforward classification task comes with its own
intricacies. In this talk, I discuss the ins and outs of this real-life
use case, including how evolving business requirements and product
design influence modeling decisions. In particular, I highlight the
trade-off between personalization and generalization, and both the
complications and opportunities of feedback loops. I cover several
modeling approaches, ranging from vanilla multiclass classification, to
a hyper- personalized learning system and label embedding deep neural
network architectures. For the latter, I will explain the &lt;a class="reference external" href="https://arxiv.org/abs/1709.03856"&gt;Facebook
StarSpace&lt;/a&gt; architecture and
possible extensions, including how to create transaction embeddings from
mixed feature types, metric learning concepts, triplet loss functions
and potential for one- shot learning. Conceptual machine learning model
designs are interspersed with snippets of Python code to provide
practical handles. In conclusion, I briefly discuss open challenges and
provide key take-aways. After this talk, the audience will be familiar
with all aspects of the industry use case of transaction categorization,
from problem statement and data, to metrics and modeling approaches.&lt;/p&gt;
</summary></entry><entry><title>Forecasting airline passengers using designer machine learning</title><link href="https://pyvideo.org/pydata-amsterdam-2018/forecasting-airline-passengers-using-designer-machine-learning.html" rel="alternate"></link><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><author><name>Alexander Backus</name></author><id>tag:pyvideo.org,2018-05-26:pydata-amsterdam-2018/forecasting-airline-passengers-using-designer-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ability to accurately forecast the amount of passengers that will board a particular flight is crucial for airline operations. But how do we design a machine learning algorithm for this use case and in what ways can we improve it? In this talk, we start with a simple linear model, evolving to increasingly complex deep learning neural network architectures.&lt;/p&gt;
</summary></entry></feed>