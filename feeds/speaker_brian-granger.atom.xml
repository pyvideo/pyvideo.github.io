<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brian-granger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-06T00:00:00+00:00</updated><entry><title>JupyterLab+Real Time Collaboration</title><link href="https://pyvideo.org/pydata-seattle-2017/jupyterlabreal-time-collaboration.html" rel="alternate"></link><published>2017-07-06T00:00:00+00:00</published><updated>2017-07-06T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2017-07-06:pydata-seattle-2017/jupyterlabreal-time-collaboration.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;www.pydata.org&lt;/p&gt;
&lt;p&gt;PyData is an educational program of NumFOCUS, a 501(c)3 non-profit organization in the United States. PyData provides a forum for the international community of users and developers of data analysis tools to share ideas and learn from each other. The global PyData network promotes discussion of best practices, new approaches, and emerging technologies for data management, processing, analytics, and visualization. PyData communities approach data science using many languages, including (but not limited to) Python, Julia, and R.&lt;/p&gt;
&lt;p&gt;PyData conferences aim to be accessible and community-driven, with novice to advanced level presentations. PyData tutorials and talks bring attendees the latest project features along with cutting-edge use cases.&lt;/p&gt;
</summary></entry><entry><title>Panel: Using, contributing to, and integrating open source in large corporate environments</title><link href="https://pyvideo.org/pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html" rel="alternate"></link><published>2015-07-25T00:00:00+00:00</published><updated>2015-07-25T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-07-25:pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData is a gathering of users and developers of data analysis tools in Python. The goals are to provide Python enthusiasts a place to share ideas and learn from each other about how best to apply our language and tools to ever-evolving challenges in the vast realm of data management, processing, analytics, and visualization.&lt;/p&gt;
&lt;p&gt;We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.&lt;/p&gt;
</summary></entry><entry><title>Altair Declarative, Statistical Visualization for Python</title><link href="https://pyvideo.org/pydata-san-francisco-2016/altair-declarative-statistical-visualization-for-python.html" rel="alternate"></link><published>2016-08-24T00:00:00+00:00</published><updated>2016-08-24T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/altair-declarative-statistical-visualization-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;Altair is a declarative statistical visualization library for Python. Altair provides a user-centric Python API on top of the declarative visualization stack of Vega-Lite, Vega and D3.js. A wide range of statistical visualizations can be created with only a few carefully design abstractions.
Altair provides a Python API for building statistical visualizations in a declarative manner. By statistical visualization we mean:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The data source is a DataFrame that consists of columns of different data types (quantitative, ordinal, nominal and date/time).&lt;/li&gt;
&lt;li&gt;The DataFrame is in a tidy format where the rows correspond to samples and the columns correspond the observed variables.&lt;/li&gt;
&lt;li&gt;The data is mapped to the visual properties (position, color, size, shape, faceting, etc.) using the group-by operation of Pandas and SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Altair API contains no actual visualization rendering code but instead emits JSON data structures following the Vega-Lite specification. For convenience, Altair can optionally use ipyvega to display client-side renderings seamlessly in the Jupyter notebook.
Altair has the following features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Carefully-designed, declarative Python API based on traitlets.&lt;/li&gt;
&lt;li&gt;Auto-generated internal Python API that guarantees visualizations are type-checked and in full conformance with the Vega-Lite specification.&lt;/li&gt;
&lt;li&gt;Auto-generate Altair Python code from a Vega-Lite JSON spec.&lt;/li&gt;
&lt;li&gt;Display visualizations in the live Jupyter Notebook, on GitHub and nbviewer.&lt;/li&gt;
&lt;li&gt;Export visualizations to PNG images, stand-alone HTML pages and the Online Vega-Lite Editor.&lt;/li&gt;
&lt;li&gt;Serialize visualizations as JSON files.&lt;/li&gt;
&lt;li&gt;Explore Altair with 40 example datasets and over 70 examples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Altair is developed by Brian Granger and Jake Vanderplas in close collaboration with the UW Interactive Data Lab.&lt;/p&gt;
</summary></entry><entry><title>JupyterLab</title><link href="https://pyvideo.org/pydata-san-francisco-2016/jupyterlab.html" rel="alternate"></link><published>2016-08-24T00:00:00+00:00</published><updated>2016-08-24T00:00:00+00:00</updated><author><name>Jamie Whitacre</name></author><id>tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/jupyterlab.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;This talk provides an early view of JupyterLab, an evolution of the Jupyter Notebook that provides a modular and extensible user interface within the context of a powerful workspace.&lt;/p&gt;
&lt;p&gt;Project Jupyter provides building blocks for interactive and exploratory computing. These building blocks make science and data science reproducible across over 40 programming language (Python, Julia, R, etc.). Central to the project is the Jupyter Notebook, a web-based interactive computing platform that allows users to author data- and code-driven narratives - computational narratives - that combine live code, equations, narrative text, visualizations, interactive dashboards and other media.&lt;/p&gt;
&lt;p&gt;The fundamental idea of JupyterLab is to offer a user interface that supports interactive workflows that include, but go far beyond, Jupyter Notebooks. In JupyterLab, users can arrange multiple notebooks, text editors, terminals, output areas, etc. on a single page with multiple panels, tabs, splitters, and collapsible sidebars with a file browser, command palette and integrated help system. The codebase and UI of JupyterLab is based on a flexible plugin system that makes it easy to extend with new components.&lt;/p&gt;
</summary></entry><entry><title>JupyterLab: Building Blocks for Interactive Computing</title><link href="https://pyvideo.org/scipy-2016/jupyterlab-building-blocks-for-interactive-computing-scipy-2016-brian-granger.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/jupyterlab-building-blocks-for-interactive-computing-scipy-2016-brian-granger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Project Jupyter provides building blocks for interactive and exploratory computing. These building blocks make science and data science reproducible across over 40 programming language (Python, Julia, R, etc.). Central to the project is the Jupyter Notebook, a web-based interactive computing platform that allows users to author data- and code-driven narratives - computational narratives - that combine live code, equations, narrative text, visualizations, interactive dashboards and other media.&lt;/p&gt;
&lt;p&gt;While the Jupyter Notebook has proved to be an incredibly productive way of working with code and data interactively, it is helpful to decompose notebooks into more primitive building blocks: kernels for code execution, input areas for typing code, markdown cells for composing narrative content, output areas for showing results, terminals, etc. The fundamental idea of JupyterLab is to offer a user interface that allows users to assemble these building blocks in different ways to support interactive workflows that include, but go far beyond, Jupyter Notebooks.&lt;/p&gt;
&lt;p&gt;JupyterLab accomplishes this by providing a modular and extensible user interface that exposes these building blocks in the context of a powerful work space. Users can arrange multiple notebooks, text editors, terminals, output areas, etc. on a single page with multiple panels, tabs, splitters, and collapsible sidebars with a file browser, command palette and integrated help system. The codebase and UI of JupyterLab is based on a flexible plugin system that makes it easy to extend with new components.&lt;/p&gt;
&lt;p&gt;In this talk, we will demonstrate the JupyterLab interface, its codebase, and describe how it fits within the overall roadmap of the project.&lt;/p&gt;
</summary><category term="SciPy 2016"></category><category term="jupyter"></category><category term="jupyterlab"></category><category term="jupyter notebook"></category></entry><entry><title>Keynote: Project Jupyter</title><link href="https://pyvideo.org/scipy-2016/keynote-project-jupyter-scipy-2016-brian-granger.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/keynote-project-jupyter-scipy-2016-brian-granger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brian Granger is an Associate Professor of Physics at Cal Poly State University in San Luis Obispo, CA. He has a background in theoretical physics, with a Ph.D from the University of Colorado. His current research interests include quantum computing, parallel and distributed computing and interactive computing environments for scientific computing and data science. He is a leader of the IPython project, co-founder of Project Jupyter and is an active contributor to a number of other open source projects focused on data science in Python. He is a board member of the NumFocus Foundation and a fellow at Cal Poly’s Center for Innovation and Entrepreneurship. He is &amp;#64;ellisonbg on Twitter and GitHub.&lt;/p&gt;
&lt;p&gt;Announcement of Altair, Altair is a declarative statistical visualization library for Python. Altair is developed by Brian Granger and Jake Vanderplas in close collaboration with the UW Interactive Data Lab.&lt;/p&gt;
&lt;p&gt;With Altair, you can spend more time understanding your data and its meaning. Altair's API is simple, friendly and consistent and built on top of the powerful Vega-Lite JSON specification. This elegant simplicity produces beautiful and effective visualizations with a minimal amount of code.&lt;/p&gt;
</summary><category term="SciPy 2016"></category><category term="altair"></category><category term="jupyter"></category><category term="jupyter notebook"></category></entry><entry><title>IPython: tools for the entire lifecycle of research computing</title><link href="https://pyvideo.org/scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html" rel="alternate"></link><published>2012-07-19T00:00:00+00:00</published><updated>2012-07-19T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2012-07-19:scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython started as a better interactive Python interpreter in 2001, but
over the last decade it has grown into a rich and powerful set of
interlocking tools aimed at enabling an efficient, fluid and productive
workflow in the typical use cases encountered by scientists in everyday
research.&lt;/p&gt;
&lt;p&gt;Today, IPython consists of a kernel executing user code and capable of
communicating with a variety of clients, using ZeroMQ for networking via
a well-documented protocol. This enables IPython to support, from a
single codebase, a rich variety of usage scenarios through user-facing
applications and an API for embedding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An interactive, terminal-based shell with many capabilities far
beyond the default Python interactive interpreter (this is the
default application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that most users
are familiar with).&lt;/li&gt;
&lt;li&gt;A Qt console that provides the look and feel of a terminal, but adds
support for inline figures, graphical calltips, a persistent session
that can survive crashes of the kernel process, and more.&lt;/li&gt;
&lt;li&gt;A web-based notebook that can execute code and also contain rich text
and figures, mathematical equations and arbitrary HTML. This notebook
presents a document-like view with cells where code is executed but
that can be edited in-place, reordered, mixed with explanatory text
and figures, etc.&lt;/li&gt;
&lt;li&gt;A high-performance, low-latency system for parallel computing that
supports the control of a cluster of IPython engines communicating
over ZeroMQ, with optimizations that minimize unnecessary copying of
large objects (especially numpy arrays).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk we will show how IPython supports all stages in the
lifecycle of a scientific idea: individual exploration, collaborative
development, large- scale production using parallel resources,
publication and education. In particular, the IPython Notebook supports
multiuser collaboration and allows scientists to share their work in an
open document format that is a true &amp;quot;executable paper&amp;quot;: notebooks can be
version controlled, exported to HTML or PDF for publication, and used
for teaching. We will demonstrate the key features of the system,&lt;/p&gt;
</summary><category term="General"></category></entry><entry><title>Fundamentals of the IPython Display Architecture+Interactive Widgets</title><link href="https://pyvideo.org/scipy-2014/fundamentals-of-the-ipython-display-architecture.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/fundamentals-of-the-ipython-display-architecture.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to use the IPython Notebook’s
display architecture and interactive widgets. As we cover these topics,
attendees will learn about the underlying architecture, how to use
IPython’s existing APIs, and how to extend them for their own purposes.
This tutorial will not cover the basics of the IPython Notebook.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides an architecture for interactive computing. The IPython
Notebook is a web-based interactive computing environment for
exploratory and reproducible computing. With the IPython Notebook, users
create documents, called notebooks, that contain formatted text,
figures, equations, programming code, and code output.&lt;/p&gt;
&lt;p&gt;The IPython Notebook generalizes the notion of output to include images,
LaTeX, video, HTML, JavaScript, PDF, etc. These output formats are
displayed in the Notebook using IPython’s display architecture, embedded
in notebook documents and rendered on the IPython Notebook Viewer. By
taking advantage of these rich output formats users can build notebooks
that include rich representations and visualizations of data and other
content. In this tutorial, we will describe the display architecture,
existing Python APIs and libraries that already use it (mpld3, vincent,
polotly, etc.), and how users can define custom display logic for their
own Python objects.&lt;/p&gt;
&lt;p&gt;As of version 2.0, the IPython Notebook also includes interactive
JavaScript widgets. These widgets provide a way for users to interact
with UI controls in the browser that are tied to Python code in running
in the kernel. We will begin by covering the highest-level API for these
widgets, “interact,” which automatically builds a user interface for
exploring a Python function. Next we will describe the lower-level
widget objects that are included with IPython: sliders, text boxes,
buttons, etc. However, the full potential of the widget framework lies
with its extensibility. Users can create their own custom widgets using
Python, JavaScript, HTML and CSS. We will conclude with a detailed look
at custom widget creation.&lt;/p&gt;
</summary><category term="ipython"></category></entry><entry><title>IPython in-depth: high-productivity interactive and parallel python</title><link href="https://pyvideo.org/pycon-us-2013/ipython-in-depth-high-productivity-interactive-a-0.html" rel="alternate"></link><published>2013-03-13T00:00:00+00:00</published><updated>2013-03-13T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2013-03-13:pycon-us-2013/ipython-in-depth-high-productivity-interactive-a-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive and parallel computing that are
widely used in scientific computing, but can benefit any Python
developer.&lt;/p&gt;
&lt;p&gt;We will show how to use IPython in different ways, as: an interactive
shell, an embedded shell, a graphical console, a network-aware VM in
GUIs, a web-based notebook with code, graphics and rich HTML, and a
high-level framework for parallel computing.&lt;/p&gt;
&lt;p&gt;All materials for this tutorial can be found on our &lt;a class="reference external" href="https://github.com/ipython/ipython-in-depth"&gt;github
repository&lt;/a&gt;&lt;/p&gt;
</summary><category term="tutorial"></category></entry></feed>