<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 16 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Au secours, on n'a pas de projet Python dans ma boîte</title><link>https://pyvideo.org/pycon-fr-2016/au-secours-on-na-pas-de-projet-python-dans-ma-boite.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pourquoi apprendrais-je le Python alors qu'on ne developpe pas avec dans ma boîte ?
Un programme n'est pas forcément destiné à être livré à un client. L'essence de la programmation est de permettre à ceux qui la maîtrise d'automatiser des tâches pénibles.
Cette présentation donnera quelques exemples d'utilisation de Python pour simplifier notre vie de bureau. Nous verrons également ce que l'automatisation peut révéler sur nos organisations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Touzé</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/au-secours-on-na-pas-de-projet-python-dans-ma-boite.html</guid></item><item><title>Autentification et autorisation avec Django REST framework</title><link>https://pyvideo.org/pycon-fr-2016/autentification-et-autorisation-avec-django-rest-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST framework est une librairie populaire permettant de mettre en place des APIs rapidement.
Construite au dessus de Django et en reprenant de nombreux concepts.
Cette présentation se concentre sur les mécanismes d'autentification et d'autorisation avec Django REST framework.
Nous aborderons les spécificités par rapport aux applications web &amp;quot;classiques&amp;quot;, en particulier les échanges entre systèmes d'informations.
Nous verrons également comment intégrer son propre système d'autentification et de permissions au sein de Django REST framework.
Enfin, nous ferons un tour des solutions existantes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Xavier Ordoquy</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/autentification-et-autorisation-avec-django-rest-framework.html</guid></item><item><title>Créer son API avec Django REST framework</title><link>https://pyvideo.org/pycon-fr-2016/creer-son-api-avec-django-rest-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L'atelier a pour but la construction d'API avec Django REST framework.
Il s'agit de découvrir Django REST framework.
Lors de l'atelier, différentes parties seront présentées:
- sérialisation des données
- présentation humaine des données
- pagination
- autentification / permissions
- filtrage
- gestion des relations entre les données
La connaissance de base de Django est un pré-requis.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Xavier Ordoquy</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/creer-son-api-avec-django-rest-framework.html</guid></item><item><title>Des nouvelles du Front !</title><link>https://pyvideo.org/pycon-fr-2016/des-nouvelles-du-front.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pouvons-nous imaginer un monde sans Javascript dans notre navigateur ? Allons plus loin, pouvons-nous imaginer un monde avec la puissance et la facilité de Python dans notre navigateur ?
Après s'être imposé sur la partie Backend avec des technologies comme Flask et Django, est-ce que Python peut désormais devenir le langage du Frontend ?
Dans cette conférence, nous allons faire le point sur les solutions actuelles pour coder les applications et les sites web en Python (Brython, Rapydscript, Pyjs, PyPy.js, Web Assembly...).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gaël Durand</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/des-nouvelles-du-front.html</guid></item><item><title>Développeur durable</title><link>https://pyvideo.org/pycon-fr-2016/developpeur-durable.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Où vous voyez-vous dans 10 ans&amp;nbsp;? Vivrez-vous le rêve américain&amp;nbsp;? Élèverez-vous plutôt des chèvres en Lozère&amp;nbsp;? Récupèrerez-vous de votre 3e burnout&amp;nbsp;? Serez-vous (enfin) chef de projet&amp;nbsp;? Ou plutôt lead developer dans une entreprise libérée&amp;nbsp;?
Quoi qu'il en soit, serez-vous heureux&amp;nbsp;?
Cette conférence interroge notre métier, son impact social et environnemental ainsi que notre recherche personnelle de sérénité. Puis elle invite à échanger des pistes, individuelles ou collectives, pour aider chacun à choisir son propre chemin.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benoît Bryon</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/developpeur-durable.html</guid></item><item><title>Faut-il être masochiste pour utiliser IPv6 (dans son code Python) ?</title><link>https://pyvideo.org/pycon-fr-2016/faut-il-etre-masochiste-pour-utiliser-ipv6-dans-son-code-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tout le monde sait qu'IPv6 c'est l'avenir du réseau, mais peu le déploient et l'utilisent si bien que les réseaux IPv6 ne sont toujours pas aujourd'hui une réalité. Or IPv6 est une opportunité pour changer notre façon de penser le réseau en revenant à des principes simples (et stupides) qui ont fait le succès d'Internet. Cette conférence a pour objectif de démontrer cette simplicité, notamment dans la gestion du réseau au sein du code d'une application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno STEVANT</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/faut-il-etre-masochiste-pour-utiliser-ipv6-dans-son-code-python.html</guid></item><item><title>Hypothesis: testez moins mais tester mieux en vous concentrant sur les propriétés</title><link>https://pyvideo.org/pycon-fr-2016/hypothesis-testez-moins-mais-tester-mieux-en-vous-concentrant-sur-les-proprietes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nous voudrions tous avoir à notre disposition les ressources pour tester notre code en profondeur, mais l'écriture des tests n'est souvent pas une tâche aisée et obtenir une bonne couverture est un processus chronophage. Les tests basés sur les propriétés ont pour objectif de proposer une solution à ce problème. Popularisé par la bibliothèque la Quickcheck (Haskell), ce concept est aujourd'hui adapté en Python à l'aide de Hypothesis.
Avec Hypothesis, au lieu de vous concentrer sur l'écriture de tests individuels, vous décrivez des propriétés garanties par votre code et Hypothesis générera à votre place les tests correspondants à ces spécifications. Par conséquent, l'utilisation de cette bibliothèque permet dans une certaine mesure d'automatiser l'écriture de tests répétitifs et élimine de nombreuses erreurs potentielles. Hypothesis générera plus de tests que ceux que vous auriez générés manuellement, ce qui doit permettre de démasquer plus d'erreurs.
Cette présentation a pour objectif de vous introduire au concept des tests basés sur les propriétés ainsi qu'à l'utilisation de la bibliothèque Hypothesis et de ses plugins pour Numpy ou Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Chappuis</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/hypothesis-testez-moins-mais-tester-mieux-en-vous-concentrant-sur-les-proprietes.html</guid></item><item><title>Informatique musicale : créer un séquenceur pas-à-pas avec Python</title><link>https://pyvideo.org/pycon-fr-2016/informatique-musicale-creer-un-sequenceur-pas-a-pas-avec-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aujourd’hui, que ce soit via «&amp;nbsp;Maschine&amp;nbsp;» de Native Instruments, «&amp;nbsp;Push&amp;nbsp;» de Ableton, ou encore via des machines à l’esprit plus vintage comme le «&amp;nbsp;Dark Time&amp;nbsp;» de Doepfer ou des émulations de vieilles boites à rythmes, les musiciens retrouvent le goût du séquencement pas à pas ou «&amp;nbsp;Step Sequencing&amp;nbsp;».
Le bidouilleur que je suis avait envie de détourner son matériel pour reproduire ce type d’outil de création…
Après une introduction au MIDI et aux principes d’un séquenceur, nous verrons comment nous pouvons, avec Python et la librairie mido, «&amp;nbsp;hacker&amp;nbsp;» un certain synthétiseur hardware pour en faire un séquenceur pas à pas, à l’aide d’une boucle d’événements. Nous essaierons même de l’interfacer avec Ableton Live pour contrôler non plus les sons du synthétiseur, mais des samples !
Disclaimer : bien que pratiquant la M.A.O depuis longtemps, je ne suis pas expert en séquenceurs mais plutôt bidouilleur et pythoniste… Ainsi je laisserai une bonne place aux échanges avec vous pendant l’intervention !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yann Gravrand</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/informatique-musicale-creer-un-sequenceur-pas-a-pas-avec-python.html</guid></item><item><title>Infrastucture moderne pour le développement en équipes</title><link>https://pyvideo.org/pycon-fr-2016/infrastucture-moderne-pour-le-developpement-en-equipes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Présentation de l'environnement projets (&amp;quot;forge logicielle&amp;quot;) mis en place à Net-ng pour le développement de nos projets Python. Cet environnement, entièrement revu en 2015, est exclusivement constitué de projets open-source et hébergé en local. Il est utilisé au quotidien par une vingtaine de développeurs.
Il intègre les outils de gestion de la relation clients en méthodologie Agile, le référentiel des sources, une intégration continue basée sur Docker, un PAAS Docker dédié pour le déploiement continu, un référentiel privé de packages Python et d'hébergement de la documentation. Il assure aussi la collaboration dans et entre nos équipes au travers d'une messagerie instantanée en mode &amp;quot;ChatOps&amp;quot; et de dashboards interactifs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alain Poirier</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/infrastucture-moderne-pour-le-developpement-en-equipes.html</guid></item><item><title>Jolies Métriques : Coordonner Python et Zabbix</title><link>https://pyvideo.org/pycon-fr-2016/jolies-metriques-coordonner-python-et-zabbix.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Retour d’expérience sur l'utilisation de l'application open source de supervision Zabbix couplée avec Python.
Zabbix (made in latvia) nous permet grâce à son agent multi-plateforme de monitorer un grand nombre d'équipements et de services, d’exécuter du code, de faire des calins.
Le but est de relever les métriques rapidement et avec une emprunte système la plus légère possible. C'est ici que Python nous aide à atteindre cet objectif en s'interfaçant avec l'agent Zabbix.
Une fois les métriques collectées, insérons les dans un outils de graph sexy et construisons des dashboards pour les décideurs pressés.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alain Devarieux</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/jolies-metriques-coordonner-python-et-zabbix.html</guid></item><item><title>Libération du calculateur des impôts</title><link>https://pyvideo.org/pycon-fr-2016/liberation-du-calculateur-des-impots.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le code source du calculateur des impôts français [disponible ici](&lt;a class="reference external" href="https://forum.openfisca.fr/t/acceder-au-code-source-de-la-calculette-impots/37"&gt;https://forum.openfisca.fr/t/acceder-au-code-source-de-la-calculette-impots/37&lt;/a&gt;) depuis le 1er avril 2016, est utilisé par la Direction générale des Finances publiques (DGFiP) pour simuler le calcul de l'impôt, pré-remplir les déclarations et produire les avis d'imposition de 37 millions de foyers fiscaux.
Développé dans un langage spécifique, le [langage M](&lt;a class="reference external" href="https://forum.openfisca.fr/t/presentation-du-code-source-en-langage-m/52"&gt;https://forum.openfisca.fr/t/presentation-du-code-source-en-langage-m/52&lt;/a&gt;), le calculateur a été converti en arbre syntaxique abstrait (AST) puis compilé en Python.
Des travaux en cours visent à le fusionner avec le projet [OpenFisca](&lt;a class="reference external" href="http://www.openfisca.fr/en"&gt;http://www.openfisca.fr/en&lt;/a&gt;).
OpenFisca est un moteur ouvert de micro-simulation du système socio-fiscal. Il a été créé en 2011 sous forme de logiciel libre en langage Python. Il permet entre autres de calculer un grand nombre de prestations sociales et d'impôts payés par les ménages, et de simuler l'impact de réformes sur leur budget.
Il s'agit d'un outil à vocation pédagogique pour aider les citoyens à mieux comprendre le système socio-fiscal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christophe Benz</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/liberation-du-calculateur-des-impots.html</guid></item><item><title>Memory Safety with Rust</title><link>https://pyvideo.org/pycon-fr-2016/memory-safety-with-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Regarder &amp;quot;Memory Safety with Rust&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leo Testard</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/memory-safety-with-rust.html</guid></item><item><title>Monkey-Patcher Python en production</title><link>https://pyvideo.org/pycon-fr-2016/monkey-patcher-python-en-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monkey-Patching est difficile, le faire en production l’est encore plus ! Il faut trouver comment entrer dans Python et faire attention aux pièges tendus en ces eaux souvent peu explorées. Nous vous présenterons les solutions que nous avons trouvées et ce qu’il faut éviter de faire quand on monkey-patch du code en production.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Boris FELD</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/monkey-patcher-python-en-production.html</guid></item><item><title>Pyduino : portage du langage Arduino en Python</title><link>https://pyvideo.org/pycon-fr-2016/pyduino-portage-du-langage-arduino-en-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Présentation de la librairie Pyduino que j'ai écrite en Python qui permet le portage du langage Arduino sur mini-PC.
En clair, avec Pyduino, coder un mini-pc aussi facilement qu'une carte Arduino et dans un même code, combiner entrées/sortie, réseau, fichiers, capture audio, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Xavier HINAULT</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/pyduino-portage-du-langage-arduino-en-python.html</guid></item><item><title>Python, un langage à la noix pour la programation fonctionelle ? Essayez coconut !</title><link>https://pyvideo.org/pycon-fr-2016/python-un-langage-a-la-noix-pour-la-programation-fonctionelle-essayez-coconut.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Présentation du langage de programmation Coconut pour une utilisation orientée scripting/sysadmin/ops.
Coconut est une variante de Python conçue pour faire de la programmation
fonctionnelle Pythonique simple et élégante.
Certaines fonctionnalités du langage, comme les unix pipes et l'évaluation paresseuse son très intuitives pour ceux qui ont fait du shell avant, ce qui permets de s'adapter rapidement au langage.
C'est un langage qui est rapide à prendre en main pour ceux qui ont déjà fait du scripting, pour les administrateurs de système et les équipes opérations sur des plateformes unix.
Plusieurs idiomes issus de la programmation fonctionnelle sont intégrés directement dans le langage en ayant gardé une forme de compatibilité avec Python, ce qui permet de continuer à utiliser tout l'écosystème Python  pour une bonne facilité d'utilisation et intégration simple avec des projets existants.
Coconut s'installe comme un paquet python normal, ce qui rend son déploiement très commode.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">François Varas</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/python-un-langage-a-la-noix-pour-la-programation-fonctionelle-essayez-coconut.html</guid></item><item><title>Test Tout Terrain (Python edition)</title><link>https://pyvideo.org/pycon-fr-2016/test-tout-terrain-python-edition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;# Tests Tout Terrain
Je fais des tests, mais:
- Stubs, mock, fake je suis un peu paumé...
- les tests unitaire, fonctionnels, techniques, de perfs, d'intégration c'est cher.
- ca met 40 plombes!
- Je débute, et franchement je ne sais pas par ou commencer.
- legacy!
def test_la_conf_TTT():
#Arrange
participants = genere_des_participants(2,100) #au moins 2 orgas!
#Act
participants.viens_a_la_conf_TTT()
#Assert
for participant in participants:
assert participant.a_appris_un_truc_sur_les_tests&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pierre Bousquié</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/test-tout-terrain-python-edition.html</guid></item><item><title>Traduction de la doc de Python et l'internationalisation</title><link>https://pyvideo.org/pycon-fr-2016/traduction-de-la-doc-de-python-et-linternationalisation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La traduction en français de la documentation officielle de Python est, au sein de l'AFPy, un projet qui date mais qui ne s'est jamais porté mieux !
Nous vous proposons de découvrir son histoire, son état actuel et où nous voulons l'emmener.
Nous vous apprendrons aussi comment nous aider à porter ce projet à son terme.
Traduire de la doc c'est bien, mais traduire une application, ce serait pas utile aussi ?
Laissez vous guider : nous allons vous montrer comment appliquer les mêmes méthodes sur un code pour permettre à vos utilisateurs et contributeurs de fournir votre application dans plusieurs langues.
Nous vous présenterons les outils de base et comment les appliquer à Python, de la modification de votre code aux outils des traducteurs.&lt;/p&gt;
&lt;p&gt;...avec le retour d'expérience fait sur la traduction de la doc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julien Palard</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/traduction-de-la-doc-de-python-et-linternationalisation.html</guid></item><item><title>Une chaine de production de 3D temps-réel en Python</title><link>https://pyvideo.org/pycon-fr-2016/une-chaine-de-production-de-3d-temps-reel-en-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A travers +15 ans d'expérience dans la réalisation de jeux vidéos pour consoles et PC et de simulateurs 3D nous avons progressivement développé une compétence et un savoir faire que nous souhaitons aujourd'hui partager. Si la 3D temps-réel nécessite un socle C++ performant, nous considérons que le Python est parfaitement adapté au développement itératif d'applications métier utilisant la 3D.
Notre proposition de conférence porte sur deux thèmes complémentaires :
1/ Les avantages du Python dans le développement rapide d'applications métiers utilisant la 3D temps réel (simulateur, application VR et jeu vidéo)
2/ les défis rencontrés et solutions développées dans la création d'un framework complet de 3D temps réel (OpenGL, physique, VR, audio, vidéo, Windows, OS X et Linux) accessible depuis Python 3 sous la forme d'un simple module. Le framework ainsi développé étant la pierre angulaire des applications métiers mentionnées au dessus.
Items techniques pouvant être abordés : Python, PyQt, Bullet Physics, binding C++/Python, workflow de production 3D, visualisation scientifique.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuel Julien</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/une-chaine-de-production-de-3d-temps-reel-en-python.html</guid></item><item><title>WebPush notifications What? Why? How?</title><link>https://pyvideo.org/pycon-fr-2016/webpush-notifications-what-why-how.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all might know what push notifications are, having been a popular feature of mobile platforms for years. However, it is a recent adoption in the web platform and the features are constantly evolving. By the end of this talk, we’ll have an understanding of what real-time web push notifications are, how do they work, and how can we make the best use of it, including news features like payload encryption and ttl headers.
Web push is a permission based technology that notifies a user of new messages or events even when they’re not actively using the application. Push notifications are a hit among all the social media websites, like Facebook, Instagram, Twitter, and it’s not hard to see why. Besides that, they are also very popular in cloud based data management, e-commerce websites, e-mail services, sports and auctions, and the list could go on. In this talk, we’ll see a little behind-the-scences working of this technology, starting from the handling the user’s subscription by the Push API, generating a push message when some action is triggered, to handling of the message by the Service Worker API, and finally dealing with the notification display using the Notification API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ipsha Bhidonia</dc:creator><pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-16:pycon-fr-2016/webpush-notifications-what-why-how.html</guid></item><item><title>À la découverte du bytecode CPython !</title><link>https://pyvideo.org/pycon-fr-2016/a-la-decouverte-du-bytecode-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le bytecode est au cœur de l'interpréteur CPython. Toutefois du point du vu de l'utilisateur il se limite à l'apparition (horripilante ?) de fichiers &amp;quot;.pyc&amp;quot; une fois un code exécuté.
Dans cette présentation, nous partirons à l'aventure au cœur de la machine virtuelle CPython
pour découvrir ce qui l'anime tout en répondant à des questions existentielles comme&amp;nbsp;:
- d'où viennent et à quoi servent les fameux fichiers .pyc
- à quoi ressemble le bytecode et quels sont ses instructions les plus courantes
- comment le désassembler grâce au module &lt;cite&gt;dis&lt;/cite&gt;
- comment tout cela fonctionne-t-il au sein du système de piles et de frames de la machine virtuelle CPython
- et bien sûr à quoi tout cela peut-il bien servir dans la vrai vie ;-)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emmanuel Leblond</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/a-la-decouverte-du-bytecode-cpython.html</guid></item><item><title>asynctest: testez plus facilement votre code asyncio</title><link>https://pyvideo.org/pycon-fr-2016/asynctest-testez-plus-facilement-votre-code-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;asynctest est une bibliothèque qui étend les fonctionnalités du module standard de python unittest pour supporter asyncio. Cette conférence a pour objectif de présenter asynctest et de discuter de pratiques autour de l'écriture de tests.
On discutera de l'art de tester en partant de zéro : comment écrire et exécuter des cas de tests, les organiser (fichiers, classes et méthodes) dans un dépôt de sources. On verra quelques fonctionnalités peu connues mais pratiques du module unittest, puis on verra comment asynctest simplifie l'écriture des tests pour asyncio en permettant le mocking automatique de coroutines, la simulation d'une boucle ou de son horloge.
Les développeurs qui n'utilisent pas asyncio sont bienvenus, car de nombreux conseils peuvent s'appliquer au module unittest.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Richard</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/asynctest-testez-plus-facilement-votre-code-asyncio.html</guid></item><item><title>Communiquer avec ØMQ: patterns d'utilisation, API asynchrone et sécurité</title><link>https://pyvideo.org/pycon-fr-2016/communiquer-avec-omq-patterns-dutilisation-api-asynchrone-et-securite.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ØMQ ou zeromq est une une boite à outils réseau extrêmement légère, flexible et performante permettant à des acteurs distribués d'échanger un grand nombre de messages en utilisant des mécanismes de transport variés (in-process, inter-process, TCP, multicast). A la base conçue et optimisée pour le backend d'un système de trading en ligne, cette bibliothèque est aujourd'hui une solution générique et multi-langage et elle est utilisée par un large spectre d'applications: ipyparallel utilise zeromq pour la communication entre ses composants, les notebooks Jupyter l'utilisent pour s'entretenir avec les différents kernels, et de nombreux (micro)services web l'utilisent pour l'échange de messages et du RPC au sein de leur backend, comme entre autres chez Spotify (python, Zeromq, protobuf et gevent). A l'institut ChemTech (Haute Ecole d'Ingénierie et d'Architecture de Fribourg), on utilise cette technologie pour la communication en temps réel entre microservices qui monitorent, analysent, optimisent et contrôlent une halle de production chimique. Cette présentation propose de vous introduire aux patterns d'utilisation pythoniques de zeromq qui ont beaucoup évolués depuis Python 3.4 et l'arrivée de asyncio, aux possibilités de cette bibliothèque en terme d'architectures de communication et de sécurité, et de faire un état des lieux des forces, faiblesses et alternatives.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Chappuis</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/communiquer-avec-omq-patterns-dutilisation-api-asynchrone-et-securite.html</guid></item><item><title>Deep learning : votre propre cerveau artificiel avec Python</title><link>https://pyvideo.org/pycon-fr-2016/deep-learning-votre-propre-cerveau-artificiel-avec-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le deep learning (ou &amp;quot;apprentissage profond&amp;quot;) est une méthode d'apprentissage automatique dont la popularité a explosé en quelques années. Reposant sur les réseaux de neurones artificiels, le deep learning est dorénavant utilisé une quantité invraisemblable de systèmes intelligents : AlphaGo, mais aussi la reconnaissance vocale, les voitures autonomes, le sous-titrage automatique, les outils de détection d'objets, ...
Dans cette présentation, on présentera brièvement le minimum requis de théorie derrière les réseaux de neurones pour comprendre comment tout fonctionne, mais s'intéressera surtout aux outils existants en Python pour travailler avec le deep learning. Au travers plusieurs exemples, on apprendra ensemble à construire ses propres outils intelligents en quelques lignes de code pour classer des images et générer du texte.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Audebert</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/deep-learning-votre-propre-cerveau-artificiel-avec-python.html</guid></item><item><title>Enseignement d'informatique en classes préparatoires scientifiques</title><link>https://pyvideo.org/pycon-fr-2016/enseignement-dinformatique-en-classes-preparatoires-scientifiques.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L'enseignement de l'informatique a été profondément modifié il y a 3 ans dans les classes préparatoires, et les nouveaux programmes prévoient un enseignement utilisant le langage python. Ce court exposé présentera ce programme, les modalités d'enseignement, les attendus de ces enseignements.
Le partage d’expérience et les problématiques d’enseignement de Python dans les Grandes Écoles spécialisées. Comment convaincre d’intégrer Python dans les projets pédagogiques&amp;nbsp;? Utilisation des logiciels phares (type Blender ) dans l’enseignement 3D des filières des jeux vidéos et leur efficacité. Les astuces pour rendre Python attractif pour les étudiants. Des projets en Python en direction des entreprises et des étudiants (type Elicthus). La création d’une passerelle entre le monde de l’enseignement spécialisé et les futurs employeurs. Les problématiques et les difficultés d’enseignement de Python dans le cadre d’un enseignement par alternance. Un appel aux idées pour rendre Python plus étudiés dans les Grandes Écoles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emeric Tourniaire</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/enseignement-dinformatique-en-classes-preparatoires-scientifiques.html</guid></item><item><title>Et si on réécrivait Google en Python ?</title><link>https://pyvideo.org/pycon-fr-2016/et-si-on-reecrivait-google-en-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cette année, le premier crawler de Google (écrit en Python 1.2 !) fête ses 20 ans ... Il a depuis longtemps été remplacé par des versions en C++, mais comment s'y prendrait-on, en 2016, s'il fallait tout recommencer de zéro ?
Je présenterai dans en premier temps l'architecture classique des moteurs de recherche (du crawler au frontend) et son évolution depuis le fameux papier de recherche présentant Google en 1998.
Je ferai ensuite un tour d'horizon des langages et projets open source les plus adaptés aujourd'hui pour chacun des composants, ainsi que les choix faits pour Common Search, un nouveau moteur de recherche open source écrit principalement en Python.
Le but de cette présentation est d'apprendre comment fonctionne un moteur de recherche de l'intérieur, ainsi que de réfléchir aux problèmes pour lesquels Python est ou n'est pas une bonne solution.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sylvain Zimmer</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/et-si-on-reecrivait-google-en-python.html</guid></item><item><title>GAST, daou naer - AST pour Python 2 et 3</title><link>https://pyvideo.org/pycon-fr-2016/gast-daou-naer-ast-pour-python-2-et-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Va doué, qui veut construire un code qui va avec le module ast, et compatible
Python2 et Python3, il est bien dans le lagen. Et c'est pas les module 2to3 ou
six qui vont lui envoyer de l'aide.
D'où le module gast, Generic Abstract Syntax Tree, qui regroupe en une
abstraction l'AST de Python2 et celui de Python3. Après une présentation de
cette abstraction, on fera un tour dans son implémentation, une petite
lichouserie pythonesque, où introspection, tox, meta-programmation et évaluation
retardée se retrouvent pour une petite chouille de moins de 500 lignes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serge Guelton</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/gast-daou-naer-ast-pour-python-2-et-3.html</guid></item><item><title>Import et Compagnie</title><link>https://pyvideo.org/pycon-fr-2016/import-et-compagnie.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;et hop, &amp;quot;import antigravity&amp;quot;, la magie de Python résumée en deux mots. mais au fait, comment ça marche ? non, pas l'anti-gravité -ça tout le monde l'apprend à l'école. Comment fonctionnent les imports en Python&amp;nbsp;?
Plongeons ensemble dans les entrailles de la bête pour découvrir les bases de cette mécanique indispensable. Une fois que nous serons un peu plus familliers avec les forces et les faiblesses du système, nous verrons comment nous usons et abusons de sa flexibilité dans le gestionnaire de version Mercurial. Qui n'a jamais rêvé d'importer son code Python 2 directement avec Python 3 ?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pierre-Yves David</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/import-et-compagnie.html</guid></item><item><title>Introduction au notebook Jupyter</title><link>https://pyvideo.org/pycon-fr-2016/introduction-au-notebook-jupyter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Présentation du spectre fonctionnel couvert par IPython et le notebook Jupyter. Du shell Python évolué au visualiseur de données scientifiques, en passant par l'outil exploratoire intéractif, de collaboration et de partage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romuald Texier-Marcadé</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/introduction-au-notebook-jupyter.html</guid></item><item><title>La programmation asynchrone avec Python.</title><link>https://pyvideo.org/pycon-fr-2016/la-programmation-asynchrone-avec-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Coroutine, boucle d'événement, entrés sorties non-blocantes ...
Besoin de faire le tri ?
Depuis plusieurs années de plus en plus d'outils facilitent la programmation asynchrone. Un monde qui peut paraitre étrange dans lequel des serveurs gèrent des millier de connections simultanément sans utiliser de threads.
Cette présentation explique les différents concepts de la programmation asynchrone et l'évolution de celle-ci avec l'arrivée des nouveaux mots clé async et await dans python 3.5.
Nous verrons comment utiliser la librairie Asyncio, qui est à python ce que NodeJS est à JavaScript, puis nous découvrirons comment faire du web asynchrone grâce au framework Tornado et comment faire un pont entre Asyncio et Tornado.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vincent Maillol</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/la-programmation-asynchrone-avec-python.html</guid></item><item><title>L'Enfer du packaging Python</title><link>https://pyvideo.org/pycon-fr-2016/lenfer-du-packaging-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaleway est un fournisseur de cloud computing qui expose plusieurs APIs pour permette aux clients de gérer leurs infrastructures.
La plupart de la stack de Scaleway est en Python : APIs, workers qui managent le hardware, gestion de la facturation, divers scripts, ...
Tous ces projets ont besoin d'être développés, testés et déployés. Le packaging Python fait donc partie intégrante du quotidien de la team Scaleway. Et pourtant, de nombreux problèmes ont été rencontrés :
* dépendances cycliques mal gérées par setuptools
* easy_install qui ne fonctionne pas (et ne devrait pas être utilisé)
* pip install -e : ne fonctionne pas (toujours) avec les namespace packages
* dependency links : supprimé puis réintroduit bien que deprecated, et pourtant souvent bien pratique
* pyshop : permet d'avoir un repository local. Ne respecte pas la PEP 503, ne permet pas de gérer les permissions, backend sqlite bancal
* devpi : fonctionne très bien, mais usine à gaz (documentation austère et complexe)
* virtualenv : --relocatable qui ne fonctionne pas, rendant plus complexe les déploiements&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julien Castets</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/lenfer-du-packaging-python.html</guid></item><item><title>Lire &amp; Écrire la Doc</title><link>https://pyvideo.org/pycon-fr-2016/lire-ecrire-la-doc.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La documentation est un domaine très vaste, qui couvre autant les fichiers README.txt que les spécifications techniques, en passant par les schémas, les plans, les livres, les commentaires, et bien d'autres formats - qu'il soit sous notre contrôle ou mis en commun.
Je souhaite aborder la question de la lecture de la documentation, de notre façon d'aborder les problèmes dans notre métier, et des sources d'informations à notre disposition. C'est un tour autant chez les lecteurs de documentation, que chez les auteurs.
Ce sera l'occasion de parler de man, de StackOverflow, de la doc de Python, et de ce que nous pouvons, au quotidien, faire pour améliorer la situation - pour améliorer notre propre situation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Strzelecki</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/lire-ecrire-la-doc.html</guid></item><item><title>Modélisation, inférence et apprentissage de Réseaux Bayésien avec pyAgrum</title><link>https://pyvideo.org/pycon-fr-2016/modelisation-inference-et-apprentissage-de-reseaux-bayesien-avec-pyagrum.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pyAgrum est un module de gestion et de calcul de modèles graphiques, en
particulier probabilistes. Lors de cette présentation, nous ferons le tour des
fonctionnalités proposées par pyAgrum pour l'utilisation de réseaux bayésiens.
À l’aide de Python Notebooks, nous monterons en live comment exploiter pyAgrum
et les réseaux bayésiens pour l’aide à la décision, la maîtrise du risque ou
encore pour l’enseignement. La modélisation sera abordée avec un accent sur
les différentes structures de données utilisées pour représenter les tables
multidimensionnelle. À l’aide des algorithmes d’inférence probabiliste, nous
montrerons comment réaliser de l’analyse de sensibilité. Finalement, nous
montrerons comment utiliser pyAgrum pour de l’apprentissage de structure et de
paramètres de réseaux bayésiens. pyAgrum est essentiellement un wrapper de la
librairie C++ aGrUM, qui implémente des modèles graphiques pour l’aide à la
décision; ce qui offre à pyAgrum des performances élevées pour tous ses
algorithmes d’inférence et d'apprentissage.
&lt;a class="reference external" href="http://pyagrum.lip6.fr"&gt;http://pyagrum.lip6.fr&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lionel Torti</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/modelisation-inference-et-apprentissage-de-reseaux-bayesien-avec-pyagrum.html</guid></item><item><title>Packaging Python Wheel et Devpi</title><link>https://pyvideo.org/pycon-fr-2016/packaging-python-wheel-et-devpi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Afin d'aider la communauté à gérer proprement ses packages, la PSF, à travers la PEP427, à instauré en 2012/2013 le format de packaging Wheel.
La particularité de ce format tient dans le fait qu'il s'agit, en résumant sommairement, de dézipper directement dans le dossier &amp;quot;site-package&amp;quot; la version du package correspondant à la distribution utilisée. Ainsi plus de soucis de compilation possible.
Cette présentation vise à présenter ce nouveau format, et par extension, à introduire l'installation et l'utilisation basique de Devpi.
Cet outil permet de disposer en interne d'un serveur similaire à Pypi. Il permet ainsi de gérer ses propres paquets Python correctement et d'y avoir accès aisément via pip.
L'association du format wheel et de Devpi permet ainsi de standardiser la gestion de paquets Python, quels qu'ils soient.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">GALODE Alexandre</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/packaging-python-wheel-et-devpi.html</guid></item><item><title>Pourquoi, mais pourquoi, async et await ont été inclu dans Python 3.5 ?</title><link>https://pyvideo.org/pycon-fr-2016/pourquoi-mais-pourquoi-async-et-await-ont-ete-inclu-dans-python-35.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avec quelques exemples du monde réel, je vais vous expliquer l'intérêt du modèle asynchrone et quand il est intéressant de l'utiliser. De plus, je vais vous montrer pourquoi l'inclusion de async / await + AsyncIO dans le cœur de Python est un choix judicieux, d'un point de vue technique et politique. Enfin, je vais vous présenter quelques bibliothèques dans la boîte à outils d'AsyncIO.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ludovic Gasc</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/pourquoi-mais-pourquoi-async-et-await-ont-ete-inclu-dans-python-35.html</guid></item><item><title>PyPy: Python faster than Python</title><link>https://pyvideo.org/pycon-fr-2016/pypy-python-faster-than-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is a fast and highly-compatible alternative implementation of Python. Its just-in-time compiler, backed by a state-of-the art garbage collector, allow it to run pure-Python(2) code on average 7 times faster than CPython 2.7, the reference implementation.&lt;/p&gt;
&lt;p&gt;This presentation will give a tour of PyPy's goals, history and features with special emphasis on recent developments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cpyext, PyPy's emulation layer for CPython's C API, has been overhauled in order to soon allow full compatibility with all C extensions.&lt;/li&gt;
&lt;li&gt;Python 3 support is steadily improving with a recent 3.3-compatible release and development being started on a 3.5 version.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ronan Lamy</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/pypy-python-faster-than-python.html</guid></item><item><title>PyRat - Un jeu pour l'apprentissage de l'informatique en Python</title><link>https://pyvideo.org/pycon-fr-2016/pyrat-un-jeu-pour-lapprentissage-de-linformatique-en-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyRat est un cours de programmation/algorithmique/théorie des graphes donné à Télécom Bretagne Brest depuis l'an dernier. Le cours se base sur un jeu vidéo, sous  la forme d'un labyrinthe dans lequel des bouts de fromage sont disposés. Dans ce labyrinthe, il y a aussi deux pions (un par joueur). Ces pions sont contrôlés par des programmes Python simples écrits par les étudiants.
Un des intérêts du logiciel est qu'il permet d'étudier d'une part la théorie des graphes et les algorithmes associés (notions de graphe, de parcours, de plus court chemin, voyageur de commerce...) mais aussi de directement mettre en application les concepts vus en cours, en programmant en Python des petits programmes pour atteindre divers objectifs de difficulté croissante :
* Aller chercher un unique bout de fromage via le plus court chemin ou non;
* Ajout de boue dans le labyrinthe pour étudier les graphes pondérés;
* Algorithmes NP-complets pour aller chercher plusieurs bouts de fromage;
* Algorithmes approchés pour atteindre le même objectif;
* etc.
L'an dernier, nous avons terminé le cours par un tournoi dans lequel les diverses IAs des étudiants se sont affrontées, l'objectif étant de ramasser plus de bouts de fromage que l'adversaire.
L'objectif de cette présentation est de vous présenter le logiciel PyRat, pour donner des idées à des enseignants désireux d'enseigner Python et la théorie des graphes de manière ludique !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bastien Pasdeloup</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/pyrat-un-jeu-pour-lapprentissage-de-linformatique-en-python.html</guid></item><item><title>Python 3.6: utilisation des f-strings (PEP 498)</title><link>https://pyvideo.org/pycon-fr-2016/python-36-utilisation-des-f-strings-pep-498.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il est prévu que la version stable de Python 3.6 inclue les f-strings définies dans PEP 498 (elles sont présentes dans les versions non-définitives de Python 3.6 depuis alpha 1). Les f-strings sont la quatrième forme de &amp;quot;mise en forme composite&amp;quot; (string interpolation) après %-format, str.format(), et string.Template.
Cette nouvelle façon de construire des chaînes améliore souvent la lisibilité du code. Je propose de passer en revue ce que sont les f-strings, leurs particularités et certains détails de leur implémentation dans CPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ludovic VAUGEOIS</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/python-36-utilisation-des-f-strings-pep-498.html</guid></item><item><title>Python dans les Grandes Écoles</title><link>https://pyvideo.org/pycon-fr-2016/python-dans-les-grandes-ecoles.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L'enseignement de l'informatique a été profondément modifié il y a 3 ans dans les classes préparatoires, et les nouveaux programmes prévoient un enseignement utilisant le langage python. Ce court exposé présentera ce programme, les modalités d'enseignement, les attendus de ces enseignements.
Le partage d’expérience et les problématiques d’enseignement de Python dans les Grandes Écoles spécialisées. Comment convaincre d’intégrer Python dans les projets pédagogiques&amp;nbsp;? Utilisation des logiciels phares (type Blender ) dans l’enseignement 3D des filières des jeux vidéos et leur efficacité. Les astuces pour rendre Python attractif pour les étudiants. Des projets en Python en direction des entreprises et des étudiants (type Elicthus). La création d’une passerelle entre le monde de l’enseignement spécialisé et les futurs employeurs. Les problématiques et les difficultés d’enseignement de Python dans le cadre d’un enseignement par alternance. Un appel aux idées pour rendre Python plus étudiés dans les Grandes Écoles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ange de Saint Mont</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/python-dans-les-grandes-ecoles.html</guid></item><item><title>Python for SecOps: recherche de vulnérabilités dans les implémentations d'un protocole</title><link>https://pyvideo.org/pycon-fr-2016/python-for-secops-recherche-de-vulnerabilites-dans-les-implementations-dun-protocole.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Les protocoles de communication jouent un rôle majeur dans l'établissement d'une communication entre les différents composants des systèmes informatiques. Malheureusement, il est bien connu que les protocoles de communication peuvent être vulnérables aux attaques. Certaines de ces attaques dépendant de faiblesses introduites (in)volontairements dans leurs implémentations. Ces travaux proposent une solution pratique permettant d'identifier ces faiblesses en utilisant le language Python.
Cette présentation s'attachera à illustrer l'emploi de bibliothèques Python dédiées à la rétro-conception de protocoles tels que Netzob et Pylstar. Il sera notamment présenté comment les utiliser pour 1) extraire la machine à états d'une implémentation en boite noire et 2) comparer les machines à états de plusieurs implémentations d'un même protocole pour rechercher des vulnérabilités. Le protocole HTTP2 servira d'exemple.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Georges Bossert</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/python-for-secops-recherche-de-vulnerabilites-dans-les-implementations-dun-protocole.html</guid></item><item><title>Qt et Asyncio avec Quamash</title><link>https://pyvideo.org/pycon-fr-2016/qt-et-asyncio-avec-quamash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio est un modèle asynchrone générique basé sur des event-loop. Il permet de s’interfacer avec n’importe quelle autre librairie proposant un mécanisme d’event-loop.
Dans cette présentation, on découvrira le potentiel de asyncio via la librairie Quamash (&lt;a class="reference external" href="https://github.com/harvimt/quamash"&gt;https://github.com/harvimt/quamash&lt;/a&gt;).
Quamash est une petite librairie développée par Mark Harviston et Arve Knudsen. Elle permet d'utiliser les mots clés &amp;quot;async&amp;quot; et &amp;quot;await&amp;quot; dans des applications Qt, mettant alors fin au Callback Hell des signaux/slots ! L’intégration de la boucle d’évènement Qt dans asyncio permet aussi d’utiliser toutes les autres librairies Asyncio dans Qt, telle que aiohttp.
On découvrira ensemble les possibilités de cette librairie. On commencera par une utilisation basique, puis  on analysera quelques décorateurs utiles pour se simplifier la vie dans l'usage de Quamash. On mélangera ensuite Qt, asyncio, et aiohttp. Enfin, on regardera comment développer des tests fonctionnels basés sur QTest et Asyncio. Le tout agrémenté de questions/réponses...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">inso</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/qt-et-asyncio-avec-quamash.html</guid></item><item><title>Scalable decentralised communication with Matrix.org and Twisted</title><link>https://pyvideo.org/pycon-fr-2016/scalable-decentralised-communication-with-matrixorg-and-twisted.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matrix.org is an open source project that creates a new ecosystem for interoperable decentralised communication.  Matrix publishes open standard HTTP APIs for synchronising arbitrary real-time data (chat messages, VoIP calls, IoT data etc) with no central point of control, maintaining cryptographic integrity by storing conversation history in Merkle DAGs and using state-of-the-art end-to-end encryption via the Olm cryptographic ratchet.  The aim of Matrix is to defragment online communication and make interoperable messaging/VoIP/IoT as simple and ubiquitous as sending an email. As well as the standard itself, Matrix.org releases Apache-licensed reference implementations of Matrix servers, bridges, bots, clients etc.
Our primary reference server implementation of Matrix is Synapse (&lt;a class="reference external" href="https://github.com/matrix-org/synapse"&gt;https://github.com/matrix-org/synapse&lt;/a&gt;), which is built entirely in Python/Twisted.  Since our initial release in September 2014, Synapse has grown to ~50KLOC and scales to ~300K users on the matrix.org server deployment and has hundreds of active deployments on the public internet.  In this talk we’ll introduce Matrix and dig into both the good and bad sides of working with Twisted, the scalability challenges we’ve faced, how we fixed them and what we learned along the way!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Hodgson</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/scalable-decentralised-communication-with-matrixorg-and-twisted.html</guid></item><item><title>Topic Modelling with Python and Gensim</title><link>https://pyvideo.org/pycon-fr-2016/topic-modelling-with-python-and-gensim.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Topic Modelling is an information retrieval technique to identify key topics in a large corpus of text documents. It is a very handy technique to model unstructured textual data, and is used heavily in both industry and in research to both understand trends in textual data and analyse new documents via their topics.
Gensim is an open-source python NLP framework which provides an API to do robust, industry-grade Topic Modelling which is memory independent and super fast, while being very simple to use.
The best part of gensim and python for Topic Modelling is it’s ease of usage and effectiveness. I would propose a small talk to explain how to effectively do topic modelling in python using Gensim framework- especially - after identifying topics from a large dataset, and then leveraging to perform un-supervised clustering, colouring topic-words in a document, and better understanding textual data for subsequent usage. All of this will be supported with examples from research and industry.
[ My relationship with Gensim is through the Google Summer of Code 2016 program, where I am implementing Dynamic Topic Models for them ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bhargav SRINIVASA DESIKAN</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/topic-modelling-with-python-and-gensim.html</guid></item><item><title>Voyage au centre du monde CPython</title><link>https://pyvideo.org/pycon-fr-2016/voyage-au-centre-du-monde-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vous desirez contribuer a CPython et vous ne savez pas comment ? Alors ce talk est fait pour vous!
En 2014, lors du PyCon US 2014 a Montreal, j'ai commence a contribuer a CPython via un sprint,
c'est ainsi que j'ai pu decouvrir les joies du dev de notre interpreteur favori.
A partir d'un exemple de code Python, nous allons decomposer l'interpreteur et voir ce
qu'il se passe dans ses entrailles.
De la simple expression &amp;quot;x = 2 + 2&amp;quot; executee sur la ligne de commande, nous voyagerons a travers le parser, et l'interpreteur.
Nous aurons le plaisir de rencontrer notre ami le compilateur qui transforme le code Python en ByteCode,
et ensuite la machine virtuelle qui execute le bytecode pour execute votre expression Python.
De plus, une section specifique sera presentee pour vous expliquer comment discuter et proposer
vos idees sur les contributions futures que vous pourrez apporter a CPython, tout en suivant
le workflow des Core Dev CPython.
Ce voyage interessant, permettra a toute personne de demarrer comme contributeur CPython
et d'apporter enfin une reponse a l'expression x = 2 + 2
Venez me rejoindre dans CPython.
Presente a EuroPython, PyCon IE, PyCon UK, PythonFOSDEM&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephane Wirtel</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/voyage-au-centre-du-monde-cpython.html</guid></item><item><title>Warehouse - the future of PyPI</title><link>https://pyvideo.org/pycon-fr-2016/warehouse-the-future-of-pypi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Warehouse is the next generation Python Package Repository, designed to replace the legacy code base that currently powers PyPI.
In this presentation Nicole will explore:
- The overall problems facing Python packaging and what is being done to solve them.
- The goals of the Warehouse project, from a technical, design and community building perspective.
- The progress that has been made so far and the challenges the team is facing.
- How the wider Python community can help move Warehouse (and Python packaging) forward.
This talk will be presented in English.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicole Harris</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:pycon-fr-2016/warehouse-the-future-of-pypi.html</guid></item></channel></rss>