<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Syed Muhammad Dawoud Sheraz Ali</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_syed-muhammad-dawoud-sheraz-ali.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-12-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Looping Mechanisms with Python Lists</title><link href="https://pyvideo.org/pycascades-2023/looping-mechanisms-with-python-lists.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Syed Ansab Waqar Gillani</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/looping-mechanisms-with-python-lists.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a variety of looping mechanisms for iterables engineered using functions and language keywords. Is it possible that two loops with same complexity have different runtimes? Which mechanism is the fastest and the slowest, Which one should you use to optimize your application?&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>(Not-so) Precise Float Arithmetic in Python</title><link href="https://pyvideo.org/pyohio-2023/not-so-precise-float-arithmetic-in-python.html" rel="alternate"></link><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><author><name>Syed Muhammad Dawoud Sheraz Ali</name></author><id>tag:pyvideo.org,2023-12-16:/pyohio-2023/not-so-precise-float-arithmetic-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just like in other programming languages, floating number arithmetics is
not very precise in Python. What makes floats so special and weird that
a simple arithmetic operation might not yield the expected result? Why
is it so? For instance, what happens when you run the following line on
the â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just like in other programming languages, floating number arithmetics is
not very precise in Python. What makes floats so special and weird that
a simple arithmetic operation might not yield the expected result? Why
is it so? For instance, what happens when you run the following line on
the Python terminal: 0.1+0.1+0.1==0.3? What will be the output? True or
False?&lt;/p&gt;
&lt;p&gt;This small talk will focus on the underlying behavior of floating
arithmetics precision and then discuss a few potential solutions to the
problem in Python.&lt;/p&gt;
</content><category term="PyOhio 2023"></category></entry></feed>