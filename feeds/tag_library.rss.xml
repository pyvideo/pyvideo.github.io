<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - library</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 26 Oct 2024 00:00:00 +0000</lastBuildDate><item><title>Gathering Related Functionality: Patterns for Clean API Design</title><link>https://pyvideo.org/pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will arm you with some tools to design a library that 'just works', but also has obvious escape hatches to handle corner cases. It covers several patterns for cleanly organizing related and overlapping functionality in a way that statisfies both humans and static analysis tools.&lt;/p&gt;
&lt;p&gt;---&lt;/p&gt;
&lt;p&gt;What do you do when you have to choose between designing your function for one of two common use cases?&lt;/p&gt;
&lt;p&gt;How about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?&lt;/p&gt;
&lt;p&gt;These kinds of questions can be vexing when trying to design a clean, well-scoped API.&lt;/p&gt;
&lt;p&gt;This talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alternate constructors with &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Inheritance with &amp;#64;staticmethod and &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Dispatch by type&lt;/li&gt;
&lt;li&gt;A new convention for namespacing functions: variants&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-11:/pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html</guid><category>PyCon CA 2018</category><category>library</category><category>api design</category></item><item><title>Monorepo with Rye</title><link>https://pyvideo.org/pycon-korea-2024/monorepo-with-rye.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk introduces the approach of operating a monorepo for various libraries and services in a Python project.
In the process, the team adopted Rye as their package manager, and the presentation will also cover the features of Rye.&lt;/p&gt;
&lt;p&gt;Simply approaching a monorepo might unnecessarily increase complexity, so the speaker will share methods the team considered and implemented to prevent this while maximizing the benefits. The speaker will also introduce their personal experience in building and operating monorepos.&lt;/p&gt;
&lt;p&gt;This talk is recommended for those who need to build shared libraries using Python or operate multiple services in an MSA environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kim Soo-bin</dc:creator><pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-10-26:/pycon-korea-2024/monorepo-with-rye.html</guid><category>PyCon Korea 2024</category><category>library</category><category>core</category></item><item><title>print("Hello, python!")</title><link>https://pyvideo.org/pycon-korea-2024/printhello-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring the Structure of Functions in CPython and I/O Modules through the print Function&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Byun Do-jin</dc:creator><pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-10-26:/pycon-korea-2024/printhello-python.html</guid><category>PyCon Korea 2024</category><category>library</category><category>core</category></item></channel></rss>