<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 02 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>Solving Python Cold Start Issues in Cloud Infrastructure</title><link>https://pyvideo.org/pycon-fr-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all do cloud applications, no matter if they were built with the cloud (an app that consumes cloud services) or for the cloud (an app that was designed to run within cloud/container). The only thing that we, as Python community, haven’t talked out loud is imports performance that is so critical for business especially when you run your own business and cloud provider charges your own credit card.&lt;/p&gt;
&lt;p&gt;Until Python 3.7 it was quite challenging to profile application code dependencies and imports specifically. With a new imports profiler, Python developers can measure how much time each import takes at the startup. The interesting thing, a new profiler opened the whole new Python problem - cold start issue. In this talk, we will go through one very challenging case: Python in serverless and why most of the Python libraries were never been designed to start fast.&lt;/p&gt;
&lt;p&gt;If you’re going to attend this talk you’d get the following key takeaways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python coding strategy (placement, efficient and delayed imports)&lt;/li&gt;
&lt;li&gt;New things in Python 3.7 related to imports&lt;/li&gt;
&lt;li&gt;Module coding strategy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and my favourite ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why you should be careful with python code in serverless.&lt;/li&gt;
&lt;li&gt;How to profile cold start and measure overall startup time.&lt;/li&gt;
&lt;li&gt;The best CPU/RAM configuration for performing cold startup time measures.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denys Makogon</dc:creator><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-02:pycon-fr-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</guid></item><item><title>Solving Python cold start issues in cloud infrastructure</title><link>https://pyvideo.org/pylondinium-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all do cloud applications, no matter if they were built with the cloud (an app that consumes cloud services) or for cloud (an app that was designed to run within cloud/container). The only thing that we, as Python community, haven’t talked out loud is imports performance that is so critical for business especially when you run your own business and cloud provider charges your own credit card. Until Python 3.7 it was quite challenging to profile application code dependencies and imports specifically. With a new imports profiler, Python developers can measure how much time each import takes at the startup. The interesting thing, a new profiler opened the whole new Python problem - cold start issue. In this talk, we will go through one very challenging case: Python in serverless and why most of the Python libraries were never been designed to start fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denys Makogon</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</guid></item><item><title>Applying serverless architecture pattern to distributed data processing</title><link>https://pyvideo.org/pycon-apac-2018/applying-serverless-architecture-pattern-to-distributed-data-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will go through the whole serverless thing: from
decomposing app and its logic to microservices and further to smaller
bits, i.e. functions to defining data flow through functions and
building their fault-tolerant pipeline.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denys Makogon</dc:creator><pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-02:pycon-apac-2018/applying-serverless-architecture-pattern-to-distributed-data-processing.html</guid></item></channel></rss>