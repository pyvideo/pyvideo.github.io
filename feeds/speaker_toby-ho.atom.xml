<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Toby Ho</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_toby-ho.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Rewind: Python Time-Travel Debugger</title><link href="https://pyvideo.org/pycon-us-2024/rewind-python-time-travel-debugger.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Toby Ho</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/rewind-python-time-travel-debugger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging is one of the hardest parts of our jobs. Experienced
developers shrug it off as an inevitability of life, but it's one of the
biggest obstacles standing in the way of newcomers. While working as a
mentor, the pain of this fact became ever so vivid for me â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging is one of the hardest parts of our jobs. Experienced
developers shrug it off as an inevitability of life, but it's one of the
biggest obstacles standing in the way of newcomers. While working as a
mentor, the pain of this fact became ever so vivid for me. Inspired by
Bret Victor's &amp;quot;Inventing on Principle&amp;quot; and Redux, I went on a quest to
find out if time-travel debugging was possible.&lt;/p&gt;
&lt;p&gt;In my journey, I created a time-travel debugger for Python: Rewind.
Rewind is a fork of CPython. It works by logging each state change to a
file as the Python interpreter runs. Then, another program reads back
the log file, recreates all historical states of the program and saves
them to a database. A debugger GUI allows the user to step through the
program line by line both forward and backward.&lt;/p&gt;
&lt;p&gt;Developing software using a time-travel debugger is a uniquely pleasant
experience. It removes the anxiety of using a regular step debugger by
allowing you to &amp;quot;undo&amp;quot;. It's often more productive to start at the end
where an error occurred, then step in reverse to go towards its cause.
Moreover, omniscience - knowing all historical states of the program
before hand - allows us to rethink what a debugger user interface can
be.&lt;/p&gt;
&lt;p&gt;The talk will be fast paced. In addition to slides, I'll be voicing over
some pre-recorded animations / videos in the style of YouTube
documentaries. Demos are pre-recorded so there will be no risk of things
going wrong live.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry></feed>