<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Better WebSockets - Server-Sent Events, a carefree alternative</title><link>https://pyvideo.org/europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever found yourself in a situation where you:&lt;/div&gt;
&lt;div class="line"&gt;- had to use WbSockets?&lt;/div&gt;
&lt;div class="line"&gt;- had to to create a separate project and had the issue of interfacing
both?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle disconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle reconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle all the above and scale WebSockets?&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If your experience was horrible (like mine was), we shall take a look at
Server-Sent Events, an alternative to WebSockets.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The following arguments will be discussed:&lt;/div&gt;
&lt;div class="line"&gt;- intro to the subject&lt;/div&gt;
&lt;div class="line"&gt;- inner workings&lt;/div&gt;
&lt;div class="line"&gt;- differences from WebSockets&lt;/div&gt;
&lt;div class="line"&gt;- implementation explanation for a generic HTTP server in Python&lt;/div&gt;
&lt;div class="line"&gt;- use cases&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrei Neagu</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</guid><category>Mobile</category><category>System Architecture</category><category>Web</category><category>Web Protocols</category><category>Web Servers and MicroFWs</category></item><item><title>Google Cloud for Pythonistas</title><link>https://pyvideo.org/europython-2019/google-cloud-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for Python on Google Cloud has never been better. Join us for a
tour of Python runtimes, services and client libraries, including App
Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools
for monitoring and debugging your Python application, and best practices
for using Python on Google Cloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/google-cloud-for-pythonistas.html</guid><category>Deployment/Continuous Integration and Delivery</category><category>DevOps general</category><category>Development</category><category>Public Cloud (AWS/Google/...)</category><category>Web</category></item><item><title>GraphQL in Python üçì</title><link>https://pyvideo.org/europython-2019/graphql-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years GraphQL has gained much traction, but what‚Äôs the
state of GraphQL in Python. This talk describes what GraphQL is, why it
has been created and the current state of GraphQL libraries in Python.&lt;/p&gt;
&lt;p&gt;There will be a short history of GraphQL, some examples of what makes it
shine and why it can be preferred to REST.&lt;/p&gt;
&lt;p&gt;We will also analyse the current state of GraphQL in Python, having a
brief overview of the current libraries and then having an in-depth look
at Strawberry a new library based on dataclasses that makes it easy to
create GraphQl APIs in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Arminio</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/graphql-in-python.html</guid><category>Django</category><category>RESTful</category><category>Web</category><category>Web General</category><category>Web Servers and MicroFWs</category></item><item><title>Dash: Interactive Data Visualization Web Apps with no Javascript</title><link>https://pyvideo.org/europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your data science or machine learning project probably won't just
produce a written report. Instead, projects are increasingly expected to
produce interactive tools to allow end-users to explore data and results
with rich, interactive visualizations. Inevitably, this will be done in
a web browser, meaning you'll need to add a quantitatively trained web
developer to your team, or have your data scientists spend time learning
HTML, Javascript and CSS. Dash, a project by the team that makes Plotly,
solves some of these problems by allowing data scientists to build rich
and interactive websites in pure python, with minimal knowledge of HTML
and absolutely no Javascript.&lt;/p&gt;
&lt;p&gt;At decisionLab, a London-based data science consultancy producing
decision tools, we've embraced Dash to produce proof-of-concept models
for our projects in alpha. Although we're not officially connected to
the plotly/Dash project, by using the library daily across many
projects, we've learned many lessons and what we feel are best practises
we'd like to share, and hear feedback on!&lt;/p&gt;
&lt;p&gt;This talk will give an overview of Dash, how it works and what it can be
used for, before outlining some of the common problems that emerge when
data scientists are let loose to produce web applications, and web
developers have to work with the pydata ecosystem. The talk also covers
effective working practises to start producing cool interactive
statistical web applications, fast. We'll also identify some of the
pitfalls of Dash, and how and when to make the decision to stop using
Dash and start building a proper web application.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://domweldon-europython-2019-dash.s3.eu"&gt;http://domweldon-europython-2019-dash.s3.eu&lt;/a&gt;-
west-2.amazonaws.com/index.html&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dom Weldon</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</guid><category>Data Science</category><category>JavaScript</category><category>Visualization</category><category>Web</category><category>Web Servers and MicroFWs</category></item><item><title>Opt Out of Online Sexism ‚Äì Open Source Activism</title><link>https://pyvideo.org/europython-2019/opt-out-of-online-sexism-open-source-activism.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Although people of all genders can experience violence and abuse
online, the abuse experienced by women is often sexist or misogynistic
in nature, and online threats of violence against women are often
sexualized and include specific references to women‚Äôs bodies. &amp;quot; -
Amnesty International. This abuse pushes women offline, affecting their
social well-being, representation and economic potential.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how we plan to help resolve this with our
browser extension, Opt Out. I will discuss the online global tragedy
that is online sexual harassment, our idea and where we‚Äôre at with
current implementation. I will also talk about what it‚Äôs like to build
an open source activism project, one which aims to be lead by the
community it‚Äôs trying to protect.&lt;/p&gt;
&lt;p&gt;We will cover current research and results from our own engagement with
the community, where the idea came from and challenges we have faced and
plan to face in the future. I will also dive into the intricate world of
natural language processing (NLP) for online harassment and talk about
balancing state-of-the-art data science with web development in an open
source community, one being managed by someone relatively new to tech.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Teresa Ingram</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/opt-out-of-online-sexism-open-source-activism.html</guid><category>Communication</category><category>Data Science</category><category>Open-Source</category><category>TDD</category><category>Web</category></item><item><title>Python Website is Slow? Think Again!</title><link>https://pyvideo.org/pycon-italia-2019/python-website-is-slow-think-again.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a Python avid user, we read a lot of articles that describe Python as
a slow, interpreted language. At a certain point, some people start to
blame the language itself for performance problems and consider to
migrate their codebase to other languages. However, the success story of
Instagram in handling four hundred million users has shown us that
Python is not the bottleneck, but our codebase is.&lt;/p&gt;
&lt;p&gt;In this talk, the speaker will share a tale of improving Python website
performances in medium-sized enterprise (serving million users) that I‚Äôm
currently working at. In a year, we finally achieved speed improvement
from the average response time of 400 ms to 150 ms per request and we
could save around $100k per year in AWS EC2 instance provisioning, which
is around 60% of total cost.&lt;/p&gt;
&lt;p&gt;Several key points that we have learned from our development process
includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tracking database queries with Python decorator will reduce number of
unnecessary queries&lt;/li&gt;
&lt;li&gt;Using an async framework does not guarantee your codebase is
implementing it correctly&lt;/li&gt;
&lt;li&gt;Default configured third-party library is not always suitable for all
use cases&lt;/li&gt;
&lt;li&gt;Utilizing memory profiler and pdb properly will help you in
pinpointing application bottleneck&lt;/li&gt;
&lt;li&gt;Python for-loops vs generators&lt;/li&gt;
&lt;li&gt;And several other common pitfalls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expected level of audience: This talk is mainly targeted for beginner to
intermediate web developer who are interested in improving the cost-
performance of their web applications. After listening to this talk, the
audiences are expected to understand that good coding practices (e.g.:
implement asyncio correctly, track number of DB queries with decorators,
etc) will make their web application a lot faster and cut down
operational costs by a large margin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1592"&gt;https://python.it/feedback-1592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iskandar Setiadi</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/python-website-is-slow-think-again.html</guid><category>tornado</category><category>best-practices</category><category>aws</category><category>web-development</category><category>web</category></item><item><title>Using OpenAPI (and Python) to standardize a Country's API Ecosystem</title><link>https://pyvideo.org/pycon-italia-2019/using-openapi-and-python-to-standardize-a-countrys-api-ecosystem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating an &lt;a class="reference external" href="https://teamdigitale.governo.it/en/projects/api.htm"&gt;API
Ecosystem&lt;/a&gt; is
one of the goal of the &lt;a class="reference external" href="https://teamdigitale.governo.it/en/"&gt;Italian Government Digital Transformation
Team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This talk shows how OpenAPI (formerly known as Swagger) is a cornerstone
for standardizing the behavior of the APIs created by thousands of
Public Administrations.&lt;/p&gt;
&lt;p&gt;After a brief introduction to OpenAPI, we‚Äôll show the current work on
documenting service management semantics (eg. circuit breaker) and
standardizing API elements and schemas.&lt;/p&gt;
&lt;p&gt;Code samples are based on
&lt;tt class="docutils literal"&gt;`connexion&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://connexion.readthedocs.io/en/latest/quickstart.html#running-%20it"&gt;https://connexion.readthedocs.io/en/latest/quickstart.html#running-%20it&lt;/a&gt;&amp;gt;`__:
a python framework based on flask which makes trivial creating REST APIs
and sandboxes useful for testing and interoperability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1681"&gt;https://python.it/feedback-1681&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 10:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/using-openapi-and-python-to-standardize-a-countrys-api-ecosystem.html</guid><category>web</category><category>REST API Frameworks</category><category>openapi</category></item><item><title>Mappe üó∫Ô∏è con GeoDjango üåé, PostGIS üêò e Leaflet üçÉ</title><link>https://pyvideo.org/pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una &lt;em&gt;mappa&lt;/em&gt; permette agli utenti di visualizzare e ricercare i dati in
maniera spaziale ed √® comune l‚Äôesigenza di aggiungerne una al proprio
progetto web.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo come abbiamo integrato una &lt;em&gt;mappa&lt;/em&gt; in un
progetto web gi√† in produzione usando &lt;strong&gt;GeoDjango&lt;/strong&gt; , &lt;strong&gt;PostGIS&lt;/strong&gt; e
&lt;strong&gt;Leaflet&lt;/strong&gt; ed eseguiremo una dimostrazione di integrazione da zero
di una mappa in un progetto &lt;strong&gt;Django&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GeoDjango&lt;/strong&gt; √® un modulo incluso in &lt;strong&gt;Django&lt;/strong&gt; che lo trasforma in un
&lt;em&gt;framework&lt;/em&gt; Web geografico di classe mondiale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostGIS&lt;/strong&gt; √® un estensione del &lt;em&gt;database&lt;/em&gt; &lt;strong&gt;PostgreSQL&lt;/strong&gt; che aggiunge
il supporto per gli oggetti geografici consentendo di eseguire query
spaziali.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaflet&lt;/strong&gt; √® la principale libreria &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;em&gt;open source&lt;/em&gt; per
mappe web interattive ottimizzate per dispositivi mobili.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Durante il primo meetup &lt;strong&gt;#PyRoma&lt;/strong&gt; del 2019 abbiamo presentato una
versione ridotta di questo talk limitandoci al solo &lt;strong&gt;caso d‚Äôuso&lt;/strong&gt;. Info
qui:
&lt;a class="reference external" href="https://www.paulox.net/2019/01/21/pyroma-2019/"&gt;www.paulox.net/2019/01/21/pyroma-2019/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1608"&gt;https://python.it/feedback-1608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html</guid><category>web</category><category>postgresql</category><category>javascript</category><category>postgis</category><category>django</category><category>leaflet</category><category>maps</category><category>geospatial</category><category>gis</category><category>geodjango</category><category>python3</category></item><item><title>Porting your Python web app to serverless in 30 minutes</title><link>https://pyvideo.org/pycon-italia-2019/porting-your-python-web-app-to-serverless-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This live-coding session will guide you through the process of migrating
an existing Flask application to AWS Lambda.&lt;/p&gt;
&lt;p&gt;We will analyze the existing application, decompose it into individual
microservices, adapt authentication, frontend, tests, and data model,
and finally deploy it to the Cloud.&lt;/p&gt;
&lt;p&gt;Throughout this step-by-step process, you will learn the benefits of
serverless and how it will change the way you think of scalability,
availability, security, infrastructure management, and cost
optimization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1620"&gt;https://python.it/feedback-1620&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 10:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Casalboni</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/porting-your-python-web-app-to-serverless-in-30-minutes.html</guid><category>serverless</category><category>web</category><category>flask</category><category>aws</category><category>live-coding</category><category>cloud</category></item><item><title>Fast, documented and reliable JSON based webservices with Python</title><link>https://pyvideo.org/europython-2013/fast-documented-and-reliable-json-based-webservices-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/fast-documented-and-reliable-json-based-webservices-with-python.html</guid><category>web</category><category>turbogears</category><category>mongodb</category><category>json</category><category>api</category><category>gevent</category></item><item><title>Getting started with Plone CMS development - Part 1</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-1.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Getting started with Plone CMS development - Part 2</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-2.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Pyramid advanced configuration tactics for nice apps and libs</title><link>https://pyvideo.org/europython-2013/pyramid-advanced-configuration-tactics-for-nice-apps-and-libs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Georges Dubus</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/pyramid-advanced-configuration-tactics-for-nice-apps-and-libs.html</guid><category>web</category><category>pyramid</category><category>case-study</category></item><item><title>Python for hackers and Penetration testing</title><link>https://pyvideo.org/europython-2013/python-for-hackers-and-penetration-testing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Oltjano Terpollari</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-for-hackers-and-penetration-testing.html</guid><category>sqlmap</category><category>subnet</category><category>set</category><category>networking</category><category>zip</category><category>whitehat</category><category>web</category><category>windows</category><category>sysadmin</category><category>ssh</category><category>linux</category><category>hacking</category><category>pythonscripts</category><category>security</category><category>socket</category></item><item><title>Designing a Real Time Control System based on Django, ZMQ and WebSockets (wrong cover)</title><link>https://pyvideo.org/europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nahuel Defoss√©</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html</guid><category>web</category><category>async</category><category>twisted</category><category>embedding</category><category>django</category></item><item><title>Take Back Control Over Your Work. Agile Tips For Python Developers.</title><link>https://pyvideo.org/europython-2013/take-back-control-over-your-work-agile-tips-for-python-developers.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/take-back-control-over-your-work-agile-tips-for-python-developers.html</guid><category>web</category><category>pyramid</category><category>postgresql</category><category>open-source</category><category>trac</category><category>framework</category><category>teamwork</category></item><item><title>Vaurien The Chaos TCP Proxy</title><link>https://pyvideo.org/europython-2013/vaurien-the-chaos-tcp-proxy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziad√©</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/vaurien-the-chaos-tcp-proxy.html</guid><category>sysadmin</category><category>web</category><category>quality-assurance</category><category>testing</category></item><item><title>Web Applications on Python3 and Python2 with TurboGears - Part 1</title><link>https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</guid><category>web</category><category>WSGI</category><category>sqlalchemy</category><category>HTTP</category><category>turbogears</category><category>mongodb</category><category>html</category><category>python3</category></item><item><title>Web Applications on Python3 and Python2 with TurboGears - Part 2</title><link>https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</guid><category>web</category><category>WSGI</category><category>sqlalchemy</category><category>HTTP</category><category>turbogears</category><category>mongodb</category><category>html</category><category>python3</category></item><item><title>Circus, process and socket manager</title><link>https://pyvideo.org/europython-2013/circus-process-and-socket-manager.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziad√©</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/circus-process-and-socket-manager.html</guid><category>sysadmin</category><category>web</category><category>service-orchestration</category><category>servers</category></item><item><title>Lost in OAuth? Learn Velruse And Get Your Life Back!</title><link>https://pyvideo.org/europython-2013/lost-in-oauth-learn-velruse-and-get-your-life-back.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/lost-in-oauth-learn-velruse-and-get-your-life-back.html</guid><category>web</category><category>pyramid</category><category>HTTP</category><category>open-source</category><category>case-study</category></item><item><title>Scalable SQL Patterns - Part 1</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-1.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>Scalable SQL Patterns - Part 2</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-2.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>How DISQUS does "it" when "it" isn't Django</title><link>https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</guid><category>web</category><category>realtime</category><category>mongodb</category><category>zookeeper</category><category>scalability</category><category>django</category><category>celery</category><category>optimization</category><category>gevent</category><category>concurrency</category><category>performance</category></item><item><title>Bonobo, Airflow and Grafana to visualize your business</title><link>https://pyvideo.org/pycon-de-2018/bonobo-airflow-and-grafana-to-visualize-your-business.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zero-to-one hands-on introduction to building a business dashboard using
Bonobo ETL, Airflow, and a bit of Grafana (because graphs are cool).
Although the opposite is better, there is no need of prior knowledge
about any of those tools.&lt;/p&gt;
&lt;p&gt;After a short introduction about the tools, we'll go through the
following topics, using the real data of a small SaaS software:&lt;/p&gt;
&lt;p&gt;One can expect to be able to build a similar system at the end of the
talk in a few days (of course, the implementation is only a small part
of this process, data is what really matters).&lt;/p&gt;
&lt;p&gt;¬´Metrics you watch tend to improve over time¬ª&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Dorgueil</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/bonobo-airflow-and-grafana-to-visualize-your-business.html</guid><category>Business &amp; Start-Ups</category><category>Data Science</category><category>Visualisation</category><category>Web</category></item><item><title>Interactive Visualization of Traffic Data using Bokeh</title><link>https://pyvideo.org/pycon-de-2018/interactive-visualization-of-traffic-data-using-bokeh.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk covers the creation of highly interactive and dynamic
visualization (as HTML) using Python, that can still be opened with any
modern browser. Using real-world examples we will show our usual
workflow for processing and creating visualizations using Bokeh. The
following topics will be covered:&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Patrik Hlobil</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/interactive-visualization-of-traffic-data-using-bokeh.html</guid><category>Data Science</category><category>Visualisation</category><category>Web</category></item><item><title>Machine Learning as a Service: How to deploy ML Models as APIs without going nuts</title><link>https://pyvideo.org/pycon-de-2018/machine-learning-as-a-service-how-to-deploy-ml-models-as-apis-without-going-nuts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Often, the most convenient way to deploy a machine model is an API. It
allows accessing it from various programming environments and also
decouples the development and deployment of the models from its use.&lt;/p&gt;
&lt;p&gt;However, building an good API is hard. It involves many nitty-gritties
and many of them need to repeated everytime an API is built. Also, it is
very important to have a client library so that the API can be easily
accessed. If you every plan to use it from Javascript directly, then you
need to worry about cross-origin-resource-sharing etc. All things add up
and building APIs for machine very tedious.&lt;/p&gt;
&lt;p&gt;In this talk demonstrates how deploying machine learning models an APIs
can be made fun by using right programming abstractions. This presents
couple of opensource libraries
&lt;a class="reference external" href="https://firefly-%20python.readthedocs.io/en/latest/"&gt;firefly&lt;/a&gt; and
&lt;a class="reference external" href="https://rorodata.github.io/rorolite/"&gt;rorolite&lt;/a&gt; which are built for
this very purpose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/machine-learning-as-a-service-how-to-deploy-ml-models-as-apis-without-going-nuts.html</guid><category>Machine Learning</category><category>Python</category><category>Web</category></item><item><title>Stretchy - NoSQL Database behind REST API</title><link>https://pyvideo.org/pycon-de-2018/stretchy-nosql-database-behind-rest-api.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stretchy is built as a microservice that provides a simple and intuitive
REST API with a NoSQL database as backend. No need for database
migrations or upfront schema design. The basic CRUD (create, read,
update, delete) operations are available for getting data in and out
from the database.&lt;/p&gt;
&lt;p&gt;Stretchy is free and open source software built with Python 3, using
Flask web framework. It currently uses MongoDB as its backend database.
Since it is interfaced through the REST API however, Stretchy is
technology agnostic and developers can create bindings to other
databases, including SQL databases.&lt;/p&gt;
&lt;p&gt;This presentation reviews the reasons for creating Stretchy, its current
applications, an short tutorial on how to use it, and tips on how to
deploy it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Artur Scholz</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/stretchy-nosql-database-behind-rest-api.html</guid><category>Big Data</category><category>Data Science</category><category>Web</category></item><item><title>ZODB: The Graph Database for PythonDevelopers</title><link>https://pyvideo.org/pycon-de-2018/zodb-the-graph-database-for-pythondevelopers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can see the current version of the slides at
&lt;a class="reference external" href="https://pythonlinks.info/presentations/zodbtalk.pdf"&gt;https://pythonlinks.info/presentations/zodbtalk.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I invite you to first watch the full but slightly earlier version of the
talk at PythonLinks.info/zodb&lt;/p&gt;
&lt;p&gt;And then read the following summary to see what else is being added to
the talk.&lt;/p&gt;
&lt;p&gt;The ZODB is a mature graph database written in Python and optimized in
C. Just subclass off of class Persistent Object and Persistent
Container, and your objects, graphs and applications become persistent.&lt;/p&gt;
&lt;p&gt;The market for Graph Databases has recently exploded, as evidenced by
over $200 Million invested in graph database companies. Most of the
graph databases are written in Java.&lt;/p&gt;
&lt;p&gt;If you are a Python developer, you will find much greater productivity
using a graph database written in Python, than one written in statically
bound Java. You cannot add or remove an attribute to an object at
run-time in a statically typed language. Furthermore, the major Java
databases constrain you to one of several persistent data types.
Persistent Python, supported by the ZODB allows you to make any Python
data structure persistent. Publishing JSON, YAML and Pickles are well
supported. GraphQL is conceptually very close to the ZODB schema
approach.&lt;/p&gt;
&lt;p&gt;Okay, the ZODB is interesting, but is it risky? The ZODB is mature, rock
solid and well supported. The ZODB is quite heavily used in the Plone
world. Just the government of Brazil has over 100 websites using the
ZODB. That includes the President's office, parliament and many other
governmet offices. Recently the ZODB has been reengineered. It now
supports thousands of write transactions per second.&lt;/p&gt;
&lt;p&gt;The major applications of graph databases are fraud detection, social
networks and computer networks. NLP is an interesting application area.&lt;/p&gt;
&lt;p&gt;The talk reviews the basic concepts of traversal and views on objects.&lt;/p&gt;
&lt;p&gt;It is important to understand the basics of how objects are stored on
disk. Objects are pickled. There are multiple ways to store those
pickles. When using File Storage, the objects in a transaction are
appended to he end of the database files. When using relstorage, a
record is created with the object id, the version number, and the
pickle. The talk reviews how objects are distributed across multiple
Python processes. With ZEO the pickles are served across the network.
Connections are encrypted. The talk also discusses how to build
real-time (chat and iOT) applications using the MQTT message broker with
the ZODB.&lt;/p&gt;
&lt;p&gt;Performance, scalability, and number of objects, are all discussed.
Comparisons are made to traditional relational databases.&lt;/p&gt;
&lt;p&gt;The ZODB Demo makes it very easy to start building your own applications
on top of the ZODB. You can start by customizing the TreeLeaf,
TreeBranch and TreeRoot classes and their templates. You get CRUD for
free.&lt;/p&gt;
&lt;p&gt;The demo includes traditional relational CRUD, Create, Read, Update, and
Delete. But it also includes the extended graph CRUD. Rename a Leaf or
Branch. Cut and paste leaves or branches, copy and paste leaves or
branches. View and restore historic versions are demonstrated.&lt;/p&gt;
&lt;p&gt;Of course the real reason to use a graph database is to improve the user
experience. A basic concept in human factors is to limit lists to 7
items. That is why librarians use hierarchy. The Panama Papers
journalists said a graph database was more intuitive. Have you ever
selected your country from a list of 150 countries. Much better to use a
hierarchical list. Have you ever used a Google map with thousands of
pins. Much better to have one page for each city.&lt;/p&gt;
&lt;p&gt;And of course the most important reason for using a graph database is
not what the software does, but how it changes how we humans think about
our problems, and how we make decisions. Graph databases enable a
different approach to distributing applications across the network. They
encourage a different approach to managing the git development process.
They enable a different set of decisions to be made.&lt;/p&gt;
&lt;p&gt;By the end of this talk, readers should have a much better appreciation
for the rich but little known and under appreciated ZODB ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Lozinski</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/zodb-the-graph-database-for-pythondevelopers.html</guid><category>Web</category></item><item><title>Binder - lowering the bar to sharing interactive software</title><link>https://pyvideo.org/pycon-de-2018/binder-lowering-the-bar-to-sharing-interactive-software.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Binder project drastically lowers the bar to sharing and re-using
software. As a user wanting to try out someone else‚Äôs work I only have
to click a single link. As the author preparing a binder-ready project
is much easier than having to support many different platforms and for
many projects involves little additional work.&lt;/p&gt;
&lt;p&gt;In this talk I will introduce the audience to the concepts and ideas
behind the Binder project. I will showcase examples from the community
to illustrate use-cases and show off the power of Binder.&lt;/p&gt;
&lt;p&gt;Three pieces of software power Binder:
&lt;a class="reference external" href="http://repo2docker.readthedocs.io/en/latest/"&gt;repo2docker&lt;/a&gt;,
&lt;a class="reference external" href="https://binderhub.readthedocs.io/en/latest/"&gt;BinderHub&lt;/a&gt; and
&lt;a class="reference external" href="http://jupyterhub.readthedocs.io/en/stable/"&gt;JupyterHub&lt;/a&gt;. Using an
example repository I will go through the steps required to make a
repository binder- ready and what happens when a user launches it. At
each step I will illustrate the role that each of the three software
components play and how they interact.&lt;/p&gt;
&lt;p&gt;Binder is a project created by its community. I will present pathways
for getting involved with the community.&lt;/p&gt;
&lt;p&gt;To wrap up I will highlight plans for future developments and features
of Binder.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Head</dc:creator><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-24:pycon-de-2018/binder-lowering-the-bar-to-sharing-interactive-software.html</guid><category>Community</category><category>Data Science</category><category>DevOps</category><category>Jupyter</category><category>Science</category><category>Web</category></item><item><title>How type annotations make your code better</title><link>https://pyvideo.org/pycon-de-2018/how-type-annotations-make-your-code-better.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type annotations still not received that amount of popularity, that
should. People still finding them hard and sometimes ambiguous to use.
But if you start new project in Python in 2018 you should consider using
type annotations in your code and this short talk describes why.&lt;/p&gt;
&lt;p&gt;I'll go over examples, where type annotations helped my team to create
less complex code, and how using type annotations changing your mind for
projecting &amp;amp; implementing features for your project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Igor Davydenko</dc:creator><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-24:pycon-de-2018/how-type-annotations-make-your-code-better.html</guid><category>Infrastructure</category><category>Web</category></item><item><title>Django-freeradius</title><link>https://pyvideo.org/pycon-italia-2018/django-freeradius.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://freeradius.org/"&gt;Freeradius&lt;/a&gt; √® il server Radius open source
pi√π popolare e diffuso al mondo e supporta tutti i protocolli di
autenticazione pi√π comuni. Per renderne pi√π agevole l‚Äôutilizzo,
all‚Äôinterno della comunit√† OpenWISP √® stato deciso di sviluppare
django-freeradius. Si tratta di un‚Äôinterfaccia web per gestire i
database Freeradius basata su Django che si avvale delle RESTful API per
gestire l‚Äôautorizzazione, la post autenticazione e l‚Äôaccounting di
freeradius. Django-freeradius √® un‚Äô app riutilizzabile ed estensibile.
In questo talk vi parler√≤ di come ho implementato questo primo nucleo di
django-freeradius durante il Google Summer of Code 2017.&lt;/p&gt;
&lt;p&gt;Lo scopo di questo talk √® di presentare le potenzialit√† di
django-freeradius, inoltre verr√† mostrato un caso d‚Äôuso e le
informazioni necessarie per poterlo installare e utilizzare nella vostra
infrastruttura.&lt;/p&gt;
&lt;p&gt;Il talk √® rivolto a sviluppatori web con esperienza in django e/o a
programmatori con conoscenze di freeradius.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fiorella De Luca</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/django-freeradius.html</guid><category>Python</category><category>web</category><category>radius</category><category>django-rest-framework</category><category>django</category></item><item><title>GraphQL in Python</title><link>https://pyvideo.org/pycon-italia-2018/graphql-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk si parler√† di GraphQL, un ‚Äúdata query language‚Äù creato da
Facebook come alternativa al famoso REST. Verrano elencate la varie
differenze e i vantaggi/svantaggi rispetto ad una tradizionale API REST.&lt;/p&gt;
&lt;p&gt;Verr√† inoltre mostrato come utilizzare GraphQL con Python con un piccolo
approfondimento su come utilizzarlo con Django. In caso ci sia
abbastanza tempo, verrano elencate anche alcune informazioni avanzate,
come Authentication, Caching, Security e Realtime.&lt;/p&gt;
&lt;p&gt;Takeaway: l‚Äôobiettivo del talk √® di dare una prima occhiata a GraphQL,
dando alcuni input su perch√© usarlo e sopratutto come iniziare ad usarlo
in Python con e senza Django.&lt;/p&gt;
&lt;p&gt;Audience: il talk √® rivolto a sviluppatori web con un po‚Äô di esperienza
di API web.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Guido Arminio</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/graphql-in-python.html</guid><category>flask</category><category>web</category><category>graphql</category><category>REST</category><category>django</category></item><item><title>Building real time applications with Django</title><link>https://pyvideo.org/pycon-italia-2018/building-real-time-applications-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the introduction of Channels, real time web has become much easier
to work with in Django. It‚Äôs now possible to build real time
applications with much less effort in managing the idiosyncrasies of the
async programming and a lot of batteries are included. Starting with a
brief introduction to Channels, we will see how to build a real time
application, both on the Django and the frontend side and how easy it‚Äôs
to start experimenting with it. The talk has a very hands-on approach,
to allow the attendees to experiment with the proposed solution and
approach and starting immediately building their own real time
applications with Django.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iacopo Spalletti</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/building-real-time-applications-with-django.html</guid><category>web</category><category>javascript</category><category>websockets</category><category>django</category></item><item><title>DjangoProject.com - Ricerca Full-Text con PostgreSQL</title><link>https://pyvideo.org/pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il sito web ufficiale del progetto &lt;strong&gt;Django&lt;/strong&gt; (
&lt;a class="reference external" href="http://www.djangoproject.com"&gt;www.djangoproject.com&lt;/a&gt; ) √® basato
sull‚Äôultima versione stabile di Django, la &lt;strong&gt;documentazione&lt;/strong&gt; del
progetto √® generata con &lt;strong&gt;Sphinx&lt;/strong&gt; ed i documenti generati sono poi
memorizzati su &lt;strong&gt;PostgreSQL&lt;/strong&gt; per essere visualizzati sul sito.&lt;/p&gt;
&lt;p&gt;Il modulo per la &lt;strong&gt;ricerca&lt;/strong&gt; della documentazione nel sito del progetto
Django √® molto utilizzato e fino a poco tempo fa era &lt;strong&gt;basato&lt;/strong&gt; su
&lt;strong&gt;Elasticsearch&lt;/strong&gt;. L‚Äôutilizzo di Elasticsearch ha causato &lt;strong&gt;problemi&lt;/strong&gt;
nella sincronizzazione dei dati e nell‚Äôaggiornamento dei driver di
connessione.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo &lt;strong&gt;come&lt;/strong&gt; ho &lt;strong&gt;aggiornato&lt;/strong&gt; la funzione di
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/search/?q=full+text+search"&gt;ricerca&lt;/a&gt;
del &lt;strong&gt;sito del progetto Django&lt;/strong&gt; utilizzando il modulo di &lt;strong&gt;Ricerca
Full- Text&lt;/strong&gt; di Django basato direttamente su &lt;strong&gt;PostgreSQL&lt;/strong&gt;. Questo
ha &lt;strong&gt;semplificato&lt;/strong&gt; molto l‚Äôinfrastruttura e &lt;strong&gt;velocizzato&lt;/strong&gt; l‚Äô
&lt;strong&gt;aggiornamento&lt;/strong&gt; della documentazione, senza perdere nessuna delle
precedenti &lt;strong&gt;funzioni&lt;/strong&gt; di ricerca ma anzi migliorandole ed
aggiungendone altre da tempo richieste dagli &lt;strong&gt;utenti&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;Tramite questo talk potrai &lt;strong&gt;imparare&lt;/strong&gt; come &lt;strong&gt;aggiungere&lt;/strong&gt; una nuova
funzione di &lt;strong&gt;Ricerca Full-Text&lt;/strong&gt; nel &lt;strong&gt;tuo progetto&lt;/strong&gt; basato su Django
e PostgreSQL. In alternativa potreai imparare come &lt;strong&gt;aggiornare&lt;/strong&gt; la
ricerca esistente nel tuo sito se usi Elasticsearch o &lt;strong&gt;motori di
ricerca&lt;/strong&gt; simili .&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Per una **introduzione*&lt;/em&gt; ai temi del talk puoi leggere il mio articolo
sulla &lt;a class="reference external" href="http://www.paulox.net/2017/12/22/full-text-search-in-django-with-%20postgresql/"&gt;&amp;quot;Ricerca Full-Text in Django con
PostgreSQL&amp;quot;&lt;/a&gt;
basato sul mio talk presentato al &lt;a class="reference external" href="https://www.pycon.it/conference/talks/ricerca-full-text-in-django-con-%20postgresql"&gt;PyCon
Otto&lt;/a&gt;
nel 2017.*&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</guid><category>web</category><category>search</category><category>postgresql</category><category>postgres</category><category>database</category><category>Python</category><category>documentation</category><category>django</category><category>elasticsearch</category><category>sphinx</category><category>Full Text Search</category><category>python3</category></item><item><title>Pelican e perch√® generare siti statici</title><link>https://pyvideo.org/pycon-italia-2018/pelican-e-perche-generare-siti-statici.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Oggi nel web tutti hanno un sito o un blog che aggiornano e mantengono
con articoli e informazioni di vario genere ed esistono svariate
piattaforme per siti web dinamici.&lt;/p&gt;
&lt;p&gt;Qui invece si parla del contrario, di come mantenere un sito statico,
pi√π performante e che risulta anche pi√π economico e rilassante da
mantenere, integrandolo con tecnologie come i Jupyter Notebook e Git per
ottenere una completa interazione con le tecnologie pi√π moderne e usate.
Verranno anche presentati un paio di casi d‚Äôuso di Pelican in situazioni
reali.&lt;/p&gt;
&lt;p&gt;Come prerequisiti si assume che l‚Äôascoltatore sappia cosa sia un CMS e
(a grandi linee) come funziona e cosa sia un Jupyter Notebook (non √®
necessario che sappia usarne uno)-&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Scarpa</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/pelican-e-perche-generare-siti-statici.html</guid><category>web</category><category>jinja2</category><category>blogging</category><category>Pelican</category></item><item><title>Observing your applications with Sentry and Prometheus</title><link>https://pyvideo.org/pycon-de-2017/observing-your-applications-with-sentry-and-prometheus.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Patrick M√ºhlbauer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Patrick's a Software Engineer from Karlsruhe, working in Blue Yonder's Platform team. He likes this devops thing and enjoys instrumenting code to collect metrics and create nice and shiny Grafana Dashboards. To look at them. For hours. He also likes beer. A lot. Let's have some at the Social Event!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you have services running in production, something will fail sooner or later. We cannot avoid this completely, but we can prepare for it. In this talk we will have a look at how Sentry and Prometheus can help to get better insight into our systems to quickly track down the cause of failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When your services start to behave in a strange way, for example due to bugs introduced in the newly deployed release, you want get informed about that as fast as possible. Preferably by your own monitoring and not by one of your customers. We will have a look at how Sentry and Prometheus can help with that.&lt;/p&gt;
&lt;p&gt;Sentry is a real-time error tracking system, which can notify you when exceptions in your application occur. Additionally, it provides lots of context so that crashes can be reproduced and fixed very quickly.&lt;/p&gt;
&lt;p&gt;Prometheus is a systems and service monitoring system, collecting metrics from all kinds of targets. The collected metrics can help to get insight in what's actually going on in your services.&lt;/p&gt;
&lt;p&gt;Rough outline for the talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What's observability and why should I care?&lt;/li&gt;
&lt;li&gt;Errors and Exceptions in Python&lt;/li&gt;
&lt;li&gt;How to track errors with Sentry&lt;/li&gt;
&lt;li&gt;Introduction to Metrics and Prometheus&lt;/li&gt;
&lt;li&gt;Instrumenting Python applications&lt;/li&gt;
&lt;li&gt;Summary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick M√ºhlbauer</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/observing-your-applications-with-sentry-and-prometheus.html</guid><category>web</category><category>monitoring</category><category>observability</category></item><item><title>Plugin ecosystems for Python web-applications</title><link>https://pyvideo.org/pycon-de-2017/plugin-ecosystems-for-python-web-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Raphael Michel&lt;/strong&gt; (&amp;#64;rami)&lt;/p&gt;
&lt;p&gt;I‚Äòm a software developer working with the web for more than ten years and with Python and Django for over four years. I work as a freelancer and maintain multiple open source projects. The most notable Django-based one is pretix, a full-featured and free conference ticketing software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Python web applications including real-world examples. I'll give examples with Django, but the important bits aren't Django-specific.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is probably common sense by now that modular architectures win over monolithic architectures in a number of ways. Django gives us reusable apps, but just because they are reusable doesn‚Äôt mean they automatically integrate nicely with each other and a Python programmer is still required to glue them together. In this talk I will show how to build a rich Django application that provides a well-defined plugin API. The API will allow plugins to seamlessly integrate with the main application. The talk will show various patterns around URL routing, Django‚Äòs signal system and the use of setuptools to provide auto-detection of installed plugins. Installing a plugin should not be much more complicated than a simple pip install.&lt;/p&gt;
&lt;p&gt;Django is only used as an example, most parts could be easily transferred to other web frameworks as well. The explained architecture has been in use for some years in the pretix open source project and made it possible to us to grow a rich plugin ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Michel</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/plugin-ecosystems-for-python-web-applications.html</guid><category>django</category><category>python</category><category>web</category></item><item><title>Python with Apache OpenWhisk</title><link>https://pyvideo.org/pycon-de-2017/python-with-apache-openwhisk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ansgar Schmidt&lt;/strong&gt; (&amp;#64;ansi)&lt;/p&gt;
&lt;p&gt;I am a full time nerd. Really thrilled by technology and love to make and hack. From PCB design, soldering, embedded development to server- backend hacking. Beside way to many small projects I work on a mobile robot based on ROS and try to add human interaction to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenWhisk is an opensource implementation of a so called serverless computing platform. At a live presentation I will show how to write an serverless application and how to deal with libraries and events. OpenWhisk is an open source alternative to AWS lambda or MS functions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi, I am a developer advocate working for IBM. Meaning I am a technician and geek not a salesman. In my talk I will give a live demo on how to use the open source implementation of a serverless compute platform called OpenWhisk and help python developers on how to use it and write serverless applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ansgar Schmidt</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/python-with-apache-openwhisk.html</guid><category>devops</category><category>use-case</category><category>python</category><category>web</category><category>business</category></item><item><title>Verified fakes with OpenAPI</title><link>https://pyvideo.org/pycon-de-2017/verified-fakes-with-openapi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Lauris Jullien&lt;/strong&gt; (&amp;#64;herrbot_DE)&lt;/p&gt;
&lt;p&gt;I am a backend engineer &amp;#64;Yelp in Hamburg for 3 years. Before that I was working with robots &amp;#64;Aldebaran Robotics. And before that I was doing my own startup :) I like clean APIs, all you can do with data, and as a good French, wine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It can be hard to test code that depends on external services. Often such services are mocked, but with time, it can be challenging to keep these mocks up to date. Verified fakes can solve this problem, and we will see how to set them up using OpenAPI and python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When your code depends on an external (third-party) service, testing it can be challenging. It may be expensive, slow or unreliable to call that service in tests. A classic approach is to mock such service or its network calls. But then the challenge becomes keeping the mocks up to date with the third-party services. Using verified fakes allows us to replace a service while guaranteeing that it stays up to date. This can be achieved in different ways: using recent network recordings (e.g. vcrpy), running a test suite against the mock and the real service to compare the results, or relying on an API contract like OpenAPI, or avro.&lt;/p&gt;
&lt;p&gt;OpenAPI* is a specification that documents how a service API works and enforces it by validating requests and responses for the service. We can then check the mocks against the OpenAPI specification to make sure they are up to date.&lt;/p&gt;
&lt;p&gt;In this talk, I will explain how to set up such verified fakes with OpenAPI, and present a new open-source library, pyramid_mock_server. Here are the 3 main focuses:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick introduction on OpenAPI and how to use it with bravado, the python OpenAPI client&lt;/li&gt;
&lt;li&gt;How to set up Verified Fakes: using pyramid_mock_server&lt;/li&gt;
&lt;li&gt;Usage &amp;#64;Yelp: usage of fakes and OpenAPI for unit tests, acceptance tests, and documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk focuses on OpenAPI, but the learnings and methodology can be extended to any other API specification languages (or python web frameworks).&lt;/p&gt;
&lt;p&gt;The OpenAPI initiative is a cross-vendor consortium focused on creating, evolving and promoting a vendor neutral description format for APIs. As an open governance structure under the Linux Foundation, its members include Google, IBM, Atlassian and PayPal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lauris Jullien</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/verified-fakes-with-openapi.html</guid><category>use-case</category><category>python</category><category>web</category></item><item><title>Why I still develop synchronous web in the asyncIO era</title><link>https://pyvideo.org/pycon-italia-2017/why-i-still-develop-synchronous-web-in-the-asyncio-era.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since python 3.4 the introduction of the asyncIO module produced a new
way of building web applications and tons of new frameworks. With
asyncIO we take advantage of large throughput over the network, but is
it really everything about web development?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Barillari</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/why-i-still-develop-synchronous-web-in-the-asyncio-era.html</guid><category>web</category><category>asyncio</category><category>web-development</category><category>backend</category></item><item><title>A year of Genropy</title><link>https://pyvideo.org/pycon-italia-2017/a-year-of-genropy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The presentation focuses on the use of Genropy in a year,from the first
difficulties to first successes, analyzing the pros and cons of its use.&lt;/p&gt;
&lt;p&gt;During the talk there will be a small presentation of two projects made
with Genropy. The first project is the one I have worked on in the last
year, a platform that analyzes energy data. The second one is Genrello,
a Trello made with Genropy, developed in spare time as a hobby.&lt;/p&gt;
&lt;p&gt;The talk does not require any preconditions for the comprehension.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Muhammad Hassan Khurshid</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/a-year-of-genropy.html</guid><category>Python</category><category>web</category><category>genropy</category><category>framework</category></item><item><title>weppy: the web framework for humans</title><link>https://pyvideo.org/pycon-italia-2017/weppy-the-web-framework-for-humans.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why another python web framework? Do we really need to innovate the
Django and Flask scene? Could we? This talk will address all these
questions, introducing weppy: the full stack python web framework
designed with simplicity in mind.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Barillari</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/weppy-the-web-framework-for-humans.html</guid><category>web</category><category>orm</category><category>webservices</category><category>sql</category><category>webapp</category><category>web-development</category></item><item><title>Joyful Python Web App development with Appier</title><link>https://pyvideo.org/python-porto/Appier-Framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jo√£o Magalh√£es, VP of Engineering at Platforme and the author of the web framework Appier shares his insights on joyful development for the web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jo√£o Magalh√£es</dc:creator><pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-03:python-porto/Appier-Framework.html</guid><category>Appier</category><category>framework</category><category>web</category><category>porto</category><category>portugal</category></item><item><title>Open Data Dashboards &amp; Python Web Scraping</title><link>https://pyvideo.org/pydata-dc-2016/open-data-dashboards-python-web-scraping.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Distilling a world of data down to a few key indicators can be an effective way of keeping an audience informed, and this concept is at the heart of a good dashboard. This talk will cover a few methods of scraping and reshaping open data for dashboard visualization, to automate the boring stuff so you have more time and energy to focus on the analysis and content.&lt;/p&gt;
&lt;p&gt;This talk will cover a basic scenario of curating open data into visualizations for an audience. The main goal is to automate data scraping/downloading and reshaping. I use python to automate data gathering, and Tableau and D3 as visualization tools -- but the process can be applied to numerous analytical/visualization suites.&lt;/p&gt;
&lt;p&gt;I'll discuss situations where a dashboard makes sense (and when one doesn't). I will make a case also that automation makes for a more seamless data gathering and updating process, but not always for smarter data analysis.&lt;/p&gt;
&lt;p&gt;Some python packages I'll cover for web scraping and downloading/reshaping open data include: openpyxl, pandas, xlsxwriter, and BeautifulSoup. I'll also touch on APIs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marie Whittaker</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/open-data-dashboards-python-web-scraping.html</guid><category>Data</category><category>scraping</category><category>web</category></item><item><title>PyGotham 2011: Building scalable websites and API's with Brubeck</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011--building-scalable-websites-and-api.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I intend to teach people who know nothing about Brubeck how
to build and deploy an entire site, providing all the commonly needed
functionality we expect from other Python web frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Dennis</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--building-scalable-websites-and-api.html</guid><category>brubeck</category><category>pygotham</category><category>pygotham2011</category><category>web</category></item><item><title>PyGotham 2011: Machine Learning for Web Developers</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011--machine-learning-for-web-developer.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Machine learning deals with a class of algorithms which improve and
evolve as they process more data. It has wide-ranging applications in
recommendations, search, spam/fraud detection, facial recognition and
other areas. The algorithms themselves will be covered but the real
focus of this class is on how to use said algorithms in the web
applications we work on every day. I&amp;amp;aposll try to keep the math and
notation relatively light. Most of the algorithms you&amp;amp;aposll need to get
started with machine learning are implemented for you in the various
libraries. They comprise the &amp;quot;science&amp;quot; of machine learning and I hope
you will decide to learn it, but mastering that material is a
significant commitment of your time and mental energy (and has some
additional prerequisites including a strong understanding of linear
algebra). This class will focus on the &amp;quot;art&amp;quot; of machine learning, how to
think about machine learning algorithms and integrate them into your web
application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Al Barrentine</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--machine-learning-for-web-developer.html</guid><category>machine learning</category><category>pygotham</category><category>pygotham2011</category><category>web</category></item><item><title>PyGotham 2011: Real-time Web: Gevent and Socket.io</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011-real-time-web-gevent-and-socketi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There has been a lot of talk lately about how Node.js enables the
real-time web, but did you know you can do the same thing with Python?
This talk will show you how to use Gevent, ZeroMQ, and Socket.io to
build portable Python- powered real-time web applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard D. Copeland, Jr.</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011-real-time-web-gevent-and-socketi.html</guid><category>gevent</category><category>pygotham</category><category>pygotham2011</category><category>real-time</category><category>socket.io</category><category>web</category><category>zeromq</category></item><item><title>Django Deployment for the Average Bloke</title><link>https://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Karsten</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</guid><category>apache</category><category>chipy</category><category>deployment</category><category>mod_wsgi</category><category>pinax</category><category>postgresql</category><category>web</category></item><item><title>A Summer in the Wild</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--a-summer-in-the-wild.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A summer in the wild&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;I've spent this past summer away from Django, working for Quora,
venturing into the depths of a foreign codebase, and making it faster by
running on PyPy. This talk will feature the lessons I've learned about
Django, PyPy, and web development in general.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--a-summer-in-the-wild.html</guid><category>djangocon</category><category>djangocon2011</category><category>pypy</category><category>web</category></item><item><title>Advanced Django Form Usage</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--advanced-django-form-usage.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced Django Form Usage&lt;/p&gt;
&lt;p&gt;Presented by Daniel Greenfeld, Miguel Araujo&lt;/p&gt;
&lt;p&gt;Django forms are really powerful but there are edge cases that can cause
a bit of anguish. This talk will go over how to handle many common
solutions not currently described in the core documentation. It will
also cover some useful third-party libraries and will end with
clarifications about what the state of form features will be in Django
1.4.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Greenfeld</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--advanced-django-form-usage.html</guid><category>djangocon</category><category>djangocon2011</category><category>forms</category><category>web</category></item><item><title>Advanced security topics</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--advanced-security-topics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced security topics&lt;/p&gt;
&lt;p&gt;Presented by Paul McMillan&lt;/p&gt;
&lt;p&gt;An in-depth look (with demonstrations) at the how and why of several
advanced security topics. Discussion of ways to improve security of the
framework moving forward.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul McMillan</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--advanced-security-topics.html</guid><category>djangocon</category><category>djangocon2011</category><category>security</category><category>web</category></item><item><title>Best Practices for Front-End Django Developers</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--best-practices-for-front-end-djan.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Best Practices for Front-End Django Developers&lt;/p&gt;
&lt;p&gt;Christine Cheung&lt;/p&gt;
&lt;p&gt;Considerations, best practices, tools, and more for front-end
development in Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Cheung</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--best-practices-for-front-end-djan.html</guid><category>best practices</category><category>djangocon</category><category>djangocon2011</category><category>web</category></item><item><title>Cache rules everything around me</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--cache-rules-everything-around-me.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cache rules everything around me&lt;/p&gt;
&lt;p&gt;Presented by Jacob Burch, Noah Silas&lt;/p&gt;
&lt;p&gt;This talk aims to briefly introduce the core concepts of caching and
covers the best practices of using Django‚Äôs cache backend.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Burch</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--cache-rules-everything-around-me.html</guid><category>cache</category><category>caching</category><category>djangocon</category><category>djangocon2011</category><category>memcache</category><category>web</category></item><item><title>RTFM -- wRite The Friendly Manual</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--rtfm----write-the-friendly-manual.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;RTFM - wRite The Friendly Manual&lt;/p&gt;
&lt;p&gt;Presented by James Bennett&lt;/p&gt;
&lt;p&gt;An introduction to writing great documentation. Not just in the &amp;quot;here's
some tools and how to use them&amp;quot; sense, but in the &amp;quot;here's why you should
care about documentation&amp;quot; sense and the &amp;quot;how to write things people will
read&amp;quot; sense.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--rtfm----write-the-friendly-manual.html</guid><category>djangocon</category><category>djangocon2011</category><category>docs</category><category>web</category></item><item><title>Safely deploying on the cutting edge</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--safely-deploying-on-the-cutting-e.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Safely deploying on the cutting edge&lt;/p&gt;
&lt;p&gt;Eric Holscher&lt;/p&gt;
&lt;p&gt;This talk will go through the deployment system that we have built at
Urban Airship. It will cover the process that allows us to automate our
deployments, making it safe to deploy at any time. It's built on Fabric,
Gunicorn, Virtualenv, Rsync, Supervisord, and Python. We end up with
fully isolated environments for our services that are easy to manage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--safely-deploying-on-the-cutting-e.html</guid><category>deploying</category><category>djangocon</category><category>djangocon2011</category><category>fabric</category><category>gunicorn</category><category>virtualenv</category><category>web</category></item><item><title>Testing: The Developer Strikes Back</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing: The Developer Strikes Back&lt;/p&gt;
&lt;p&gt;Sandy Strong&lt;/p&gt;
&lt;p&gt;‚ÄúCode not tested is broken by design‚Äù - Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Every programming project has unique testing needs. It‚Äôs not always easy
to understand what those needs are, or how to write tests that satisfy
them. One of our goals as developers is to write tests that minimize
failures in production that can cost our companies time, money,
resources, and in many cases, hours of sleep!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html</guid><category>coverage.py</category><category>djangocon</category><category>djangocon2011</category><category>jenkins</category><category>testing</category><category>web</category></item><item><title>Y'all Wanna Scrape with Us? Content Ain't a Thing : Web Scraping With Our Favorite Python Libraries</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--y--39-all-wanna-scrape-with-us--c.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Y'all Wanna Scrape with Us? Content Ain't a Thing: Web Scraping With Our
Favorite Python Libraries&lt;/p&gt;
&lt;p&gt;Presented by Katharine Jarmul&lt;/p&gt;
&lt;p&gt;Love or hate them, the top python scraping libraries have some hidden
gems and tricks that you can use to enhance, update and diversify your
Django models. This talk will teach you more advanced techniques to
aggregate content from RSS feeds, Twitter, Tumblr and normal old web
sites for your Django projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katharine Jarmul</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--y--39-all-wanna-scrape-with-us--c.html</guid><category>djangocon</category><category>djangocon2011</category><category>lxml</category><category>scraping</category><category>web</category></item><item><title>Browse and print problems and solutions</title><link>https://pyvideo.org/europython-2011/browse-and-print-problems-and-solutions.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of the web, how we publish is changing. Paper alone is
not enough, web pages are also required. And for many web pages it is
not enough to rely on the browser‚Äôs print capabilities. Sphinx, used
since 2008 for Python‚Äôs documentation, is a creative response to this
tension.&lt;/p&gt;
&lt;p&gt;This talk will take a broader view of the problem. For example, many
browsers support web fonts for display but not for printing. Mathematics
on web pages is still difficult, but SVG holds out much promise not only
for mathematics but for tables and other complex typeset material.
Achieving accessibility remains difficult.&lt;/p&gt;
&lt;p&gt;Based on over 15 year‚Äôs experience in print and electronic publishing,
this talk will survey problems and emerging solutions. Software and
sites covered include LaTeX, PDF, SVG, MathJax, web-fonts, PediaPress,
Sphinx and arXiv.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Mon, 27 Feb 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-02-27:europython-2011/browse-and-print-problems-and-solutions.html</guid><category>accessibility</category><category>sphinx</category><category>web</category></item><item><title>A Python Takeover</title><link>https://pyvideo.org/europython-2011/a-python-takeover.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in &amp;quot;Track
Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago I started working on SourceForge with a couple of python
developers. Back then the site was written in PHP and was in some ways
buried in technical debt. Everything is different today, we have a
complete set of tools for Ticket tracking, Wiki documents, Git,
Mercurial, Subversion, and IRC - all written in Python, and now released
as open source software.&lt;/p&gt;
&lt;p&gt;This is the story of how the amazing libraries, tools, and talent in the
Python web community has radically changed an established company, and
allowed us to reinvent sourceforge.net.&lt;/p&gt;
&lt;p&gt;This talk will go over our tech stack, talk about the libraries we used,
the way we solved scalability, internationalization, and performance
issues issues. Ultimately we know that without python, we could not have
built a flexible plugin based system, and gotten permission from
management to open source it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm-Christensen</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/a-python-takeover.html</guid><category>community</category><category>performance</category><category>python,</category><category>sourceforge</category><category>web</category></item><item><title>Data Driven Cache Invalidation</title><link>https://pyvideo.org/europython-2011/data-driven-cache-invalidation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Magnus Hagander - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In todays world, nobody (should) deploy a web application facing the
internet without having a proper caching system in place. There are many
different solutions to choose from, from manual use of memcached through
framework integrated caching to external caches like Squid or Varnish.
Most modern frameworks come with integrated functionality for at least
one of these methods, and often more than one.&lt;/p&gt;
&lt;p&gt;However, they often relies on all traffic going through the same
framework to work properly - a caching layer in Rails is hard to share
with one in Django. This talk will show a way to break the design rules
of these frameworks just a little, and have the database help solve this
problem.&lt;/p&gt;
&lt;p&gt;This talk will use a small application written in Python using Django to
illustrate the examples, but the method is language independent.
Unsurprisingly, the database used is PostgreSQL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magnus Hagander</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/data-driven-cache-invalidation.html</guid><category>cache</category><category>database</category><category>deploy</category><category>design</category><category>django</category><category>framework</category><category>web</category></item><item><title>Deploying web applications to the cloud with Python</title><link>https://pyvideo.org/europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nate Aune - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is
a Python library for interfacing with Amazon web services. By using
Fabric and Boto, you can easily create repeatable deployments and
provision new resources as needed with minimal effort.&lt;/p&gt;
&lt;p&gt;This talk will introduce Amazon Web Services and how to launch new
machines using simple Boto scripts, and how to get started making your
own repeatable deployments using Fabric scripts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nate Aune</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</guid><category>boto</category><category>cloud</category><category>deploy</category><category>ec2</category><category>fabric</category><category>web</category></item><item><title>Healthcare process management in Python: a use case</title><link>https://pyvideo.org/europython-2011/healthcare-process-management-in-python-a-use-ca.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'll describe our successful experience in introducing
Python into a system for blood collection tube labeling in laboratory
and hospital environments, based on IHE Technical Frameworks ‚Äìthe
industry standard for modeling and streamlining healthcare processes‚Äì
and designed to avoid human errors and ensure process traceability.&lt;/p&gt;
&lt;p&gt;During the talk I will explain why we chose Python in the first place,
how we've been able to leverage the language's features and
characteristics for our specific field and what problems and limitations
we faced.&lt;/p&gt;
&lt;p&gt;I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation
machinery, an asynchronous messaging module, the implementation of
IHE-compliant actors and the inevitable end-user web application,
implemented with Django.&lt;/p&gt;
&lt;p&gt;Using Python greatly helped us in building our system, allowing very
rapid prototyping cycles for both hardware and software, but during the
talk I'll also point out what we found was missing, and what would be
nice to have to ensure Python has its proper place as a viable platform
for designing streamlined healthcare workflows based on established
international standards.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/healthcare-process-management-in-python-a-use-ca.html</guid><category>asynchronous</category><category>prototyping</category><category>web</category></item><item><title>Scraping Techniques to Extract Advertisements from Web Pages</title><link>https://pyvideo.org/europython-2011/scraping-techniques-to-extract-advertisements-fro.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mirko Urru,Stefano Cotta Ramusino - 24 June 2011 in
&amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Online Advertising is an emerging research field, at the intersection of
Information Retrieval, Machine Learning, Optimization, and
Microeconomics. Its main goal is to choose the right ads to present to a
user engaged in a given task, such as Sponsored Search Advertising or
Contextual Advertising. The former puts ads on the page returned from a
Web search engine following a query. The latter puts ads within the
content of a generic, third party, Web page. The ads themselves are
selected and served by automated systems based on the content displayed
to the user.&lt;/p&gt;
&lt;p&gt;Web scraping is the set of techniques used to automatically get some
information from a website instead of manually copying it. In
particular, we're interested in studying and adopting scraping
techniques for: i. accessing tags as object members ii. finding out tags
whose name, contents or attributes match selection criteria iii.
accessing tag attributes by using a dictionary-like syntax.&lt;/p&gt;
&lt;p&gt;In this talk, we focus on the adoption of scraping techniques in the
contextual advertising field. In particular, we present a system aimed
at finding the most relevant ads for a generic web page p. Starting from
p, the system selects a set of its inlinks (i.e., the pages that link p)
and extracts the ads contained into them. Selection is performed
querying the Google search engine, whereas extraction is made by using
suitable scraping techniques.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mirko Urru</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/scraping-techniques-to-extract-advertisements-fro.html</guid><category>google</category><category>scraping</category><category>search</category><category>web</category></item><item><title>What is Google App Engine?</title><link>https://pyvideo.org/europython-2011/what-is-google-app-engine.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google App Engine is a unique hosting platform that lets you build
applications and run them in Google's data centers using the massive
global infrastructure built to run the Internet's most powerful company.
App Engine offers a development environment that uses familiar
technologies (Java and Python) and provides a powerful and robust set of
APIs to users while maintaining security and independence from other
apps running in the cloud. It is always free to get started so you can
try it out with no risk, and if you need additional computing resources,
you can purchase additional computing resources beyond the free quota
limits. (If you enable billing and trust us with your credit card, we
will extend your free quotas even further; you won't get charged until
you exceed those &lt;em&gt;extended&lt;/em&gt; quotas.) Scale your application to millions
of users and pay only for what you use at competitive market pricing.&lt;/p&gt;
&lt;p&gt;In this session, we provide an update of the newest features found in
the most recent releases of the App Engine platform. We also share some
suggestions for best practices to existing App Engine developers.&lt;/p&gt;
&lt;p&gt;Beginners to the App Engine platform will be interested in the
introductory workshop which may be offered (see description below).&lt;/p&gt;
&lt;p&gt;Google App Engine workshop&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll give you a comprehensive introduction to the
platform in two/three components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1-hour Introduction to Cloud computing and Google App Engine seminar&lt;/li&gt;
&lt;li&gt;3-hour App Engine hands-on workshop/codelab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first hour, we review Cloud Computing as an industry and where
Google App Engine fits into the picture. Specifically, we discuss App
Engine as a PaaS solution because of the inherent challenges of building
web and other applications. We'll outline the architecture of App
Engine, what it's major components are, introduce its features and APIs,
discuss the service and how it works (including information on the free
quotas), present some information about current users and usage,
including integration with Google Apps, and finally, give an overview of
its enterprise edition called Google App Engine for Business.&lt;/p&gt;
&lt;p&gt;After the approximately one-hour lecture, we'll show you how to create
applications that run on App Engine by building a simple but real web
application from the ground up via a hands-on coding laboratory.
Although based on the online tutorial, this codelab goes up and beyond
what's in the documentation: you will get a more detailed step-by-step
instructions to replicate that example as well as have the opportunity
to extend your application with some of the newer APIs that come with
App Engine. The codelab will cover the Users service, non-relational
Datastore, and Memcache APIs. Time-permitting, we'll also discuss some
of the newest features found in recent App Engine releases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/what-is-google-app-engine.html</guid><category>architecture</category><category>cloud</category><category>google</category><category>hosting</category><category>infrastructure</category><category>memcache</category><category>security</category><category>web</category></item><item><title>How to build complex web applications having fun?</title><link>https://pyvideo.org/europython-2011/how-to-build-complex-web-applications-having-fun.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Mleczko - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web development is a complexity challenge nowadays. Growing number of
functionalities results in customer expectations increase which makes
project design more difficult. Using proper tools that suite your
customer needs is essential.&lt;/p&gt;
&lt;p&gt;In this talk I would like to present two successful stories using
closely together Pyramid and Plone. Basing on these examples I wished to
highlight the main reasons for using Plone as a CMS only and letting
Pyramid do the rest (vertical application). Moreover, I will underscore
good and bad practices during integration process and how to make
farsighted architectural decisions in a right moment.&lt;/p&gt;
&lt;p&gt;Prerequisites: be familiarized with common python web framework
concepts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Mleczko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/how-to-build-complex-web-applications-having-fun.html</guid><category>cms</category><category>design</category><category>framework</category><category>plone</category><category>pyramid</category><category>rest</category><category>web</category></item><item><title>How to make intelligent web-apps</title><link>https://pyvideo.org/europython-2011/how-to-make-intelligent-web-apps.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Deepak Thukral - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The primary goal of this talk is twofold: to evaluate the need of data
mining and introduce some very cool, simple yet powerful machine
learning techniques to audience such as classification, clustering,
collaborative filtering, recommendation etc in your Python web
applications. This talk will conclude with some explanation and
limitations of machine learning algorithms.&lt;/p&gt;
&lt;p&gt;Basic knowledge of Python is sufficient. However some experience with
Django, meshups, machine learning or data hunger is encouraged. All talk
material and django apps will be available after talk under MIT license.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deepak Thukral</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/how-to-make-intelligent-web-apps.html</guid><category>django</category><category>learning</category><category>web</category></item><item><title>Introduction to Gevent</title><link>https://pyvideo.org/europython-2011/introduction-to-gevent.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Denis Bilenko - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://gevent.org"&gt;Gevent&lt;/a&gt; is a coroutine-based library that enables
you to write highly-concurrent network and web applications. learn in
detail what Gevent is, what it does and how it does it.&lt;/p&gt;
&lt;p&gt;I will introduce a coroutine-based approach to network programming,
explain it benefits and pitfalls. We will walk through the Gevent API,
including the most recent additions, and understand how it is
implemented. I will make a quick overview of the most interesting 3rd
party add-on and applications after that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denis Bilenko</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/introduction-to-gevent.html</guid><category>gevent</category><category>network</category><category>web</category></item><item><title>Playing tasks with Django-Celery</title><link>https://pyvideo.org/europython-2011/playing-tasks-with-django-celery.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mauro Rocco - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing.&lt;/p&gt;
&lt;p&gt;I will talk about the tools that Celery offers for task distribution and
how to monitor and manage the system using a Django web interface. This
talk will also focus on how we use Celery at Jamendo and our real
solutions to some common issues you may encounter when developing a
back-office based on Celery.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief overview of Celery and the AMPQ protocol AMPQ protocol
overview, Celery introduction: Celery, RabbitMQ code examples&lt;/li&gt;
&lt;li&gt;The impact of Celery on the Jamendo work-flow; examples with real
tasks. Here I will talk about the Jamendo back-office infrastructure
and some of our common tasks. I will discuss the improvements made by
introducing a new back-office system based on Celery. I will show
some code snippets and go over some real scenarios.&lt;/li&gt;
&lt;li&gt;Overview of the Django Celery admin interface and some Jamendo
extensions. Let's talk about the Django-Celery interface that allows
one to monitor or schedule tasks directly from the Django admin. I
will explain which common additional features are necessary and how
to add them.&lt;/li&gt;
&lt;li&gt;Common &amp;quot;gotchas&amp;quot; we encountered while working with Celery and how we
solved them.&lt;/li&gt;
&lt;li&gt;Global task locks&lt;/li&gt;
&lt;li&gt;Centralized logging: be able to read all the logs of all celery
workers on different servers and filter them for real-time debugging&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mauro Rocco</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/playing-tasks-with-django-celery.html</guid><category>celery</category><category>distributed</category><category>django</category><category>infrastructure</category><category>queueing</category><category>rabbitmq</category><category>real-time</category><category>web</category></item><item><title>Python at Cloudkick</title><link>https://pyvideo.org/europython-2011/python-at-cloudkick.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Toma≈æ Muraus - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloudkick is a server management and monitoring software as a service
used by thousands of different companies all across the globe.&lt;/p&gt;
&lt;p&gt;The service is built in and powered by many different programming
languages and technologies, but the web application and majority of the
backend services are written in Python.&lt;/p&gt;
&lt;p&gt;In this talk I will present how and where we use Python (Django,
Twisted, txamqp, Piston, ‚Ä¶), different problems we have encountered
while building our service and how we worked around them, good practices
and real-world advices on building effective Twisted services and much
more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Toma≈æ Muraus</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/python-at-cloudkick.html</guid><category>monitoring</category><category>twisted</category><category>web</category></item><item><title>Building a hosting platform with Python</title><link>https://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</guid><category>ep.io</category><category>hosting</category><category>infrastructure</category><category>postgresql</category><category>redis</category><category>scalable</category><category>web</category></item><item><title>Challenges in developing a large Django site</title><link>https://pyvideo.org/europython-2011/challenges-in-developing-a-large-django-site.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django makes it easy to build web sites and applications on tight
deadlines - but how does it deal with sites that scale up in both
traffic and complexity? Using Lanyrd.com as a case study, this talk will
explore tricks and techniques for taking advantage of what Django has to
offer while coping with the unexpected challenges raised by a highly
dynamic social web application.&lt;/p&gt;
&lt;p&gt;Topics covered will include performance monitoring and optimisation,
advanced caching tricks, denormalisation with Solr and Redis and finding
the right balance between technical elegance and pragmatism.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/challenges-in-developing-a-large-django-site.html</guid><category>django</category><category>monitoring</category><category>performance</category><category>redis</category><category>web</category></item><item><title>Best Practices for Python in the Cloud</title><link>https://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you‚Äôre an independent developer or development manager
in a large company, ‚Äúthe cloud‚Äù is on everyone‚Äôs mind. But just because
it‚Äôs in the cloud, doesn‚Äôt mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState‚Äôs experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisle Aas</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</guid><category>cloud</category><category>deploy</category><category>deployment</category><category>django</category><category>gpu</category><category>hpc</category><category>infrastructure</category><category>lamp</category><category>packages</category><category>scaling</category><category>web</category></item><item><title>Gestione di processi clinici in Python: un caso d'uso</title><link>https://pyvideo.org/europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 23 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo seminario descriver√≤ la nostra esperienza positiva d'uso di
Python per lo sviluppo di un sistema di etichettatura di provette per il
prelievo sanguigno in ambito di laboratorio e corsia ospedaliera. Il
sistema √® basato sui Technical Framework di IHE ‚Äìstandard industriale
per la modellazione di processi clinici‚Äì ed √® progettato per ridurre gli
errori umani e assicurare la tracciabilit√† del processo.&lt;/p&gt;
&lt;p&gt;Durante il seminario spiegher√≤ perch√© abbiamo scelto Python in primo
luogo, e descriver√≤ come siamo stati in grado di sfruttarne le
caratteristiche peculiari nello specifico del nostro dominio, esaminando
le limitazioni e i problemi affrontati.&lt;/p&gt;
&lt;p&gt;Mostrer√≤ specifici casi d'uso di Python in parti differenti del
progetto, come un driver di basso livello per la gestione della robotica
di laboratorio, un modulo di comunicazione asincrona, l'implementazione
di attori IHE, e l'inevitabile applicazione web sviluppata in Django.&lt;/p&gt;
&lt;p&gt;Usare Python ha contribuito enormemente alla progettazione del sistema,
e ci ha consentito di adottare cicli di prototipizzazione estremamente
rapidi, sia per l'hardware che per il software. Durante il seminario
parler√≤ anche di ci√≤ che, secondo noi, ancora manca perch√© Python possa
guadagnarsi il posto che gli spetta come piattaforma credibile per
l'implementazione di processi clinici basati sui pi√π diffusi standard
internazionali.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/gestione-di-processi-clinici-in-python-un-caso-d.html</guid><category>ci</category><category>framework</category><category>web</category></item><item><title>PyHP and the art of dating girls</title><link>https://pyvideo.org/europython-2011/pyhp-and-the-art-of-dating-girls.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Fabio Rotondo - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be both technical and light talk, introducing these important
subjects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the new scripting language PyHP, a solution to create dynamic web
pages using the Python scripting language server side, a-la PHP, but
smarter.&lt;/li&gt;
&lt;li&gt;the LiWE (Lightweight Web Environment) Web Framework, a new and
robust web framework written in both JavaScript and Python that will
help you creating amazing websites.&lt;/li&gt;
&lt;li&gt;how this new amazing technologies can help you date girls (this will
be the light and funny part of the talk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Very basic knowledge of PHP&lt;/li&gt;
&lt;li&gt;Basic Python&lt;/li&gt;
&lt;li&gt;Basic / None JavaScript&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Rotondo</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/pyhp-and-the-art-of-dating-girls.html</guid><category>art</category><category>framework</category><category>javascript</category><category>web</category></item><item><title>Using Python in Software for the Medical Industry</title><link>https://pyvideo.org/europython-2011/using-python-in-software-for-the-medical-industry.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The medical industry has long been dominated by custom software written
by manufacturers of medical equipment. With the widespread use of
lower-cost computing power and abundance of software developers using
cost-beneficial open source development tools, it is no surprise that
this is a rapidly- growing field in software engineering. In this talk,
I will describe some of my experiences using Python and other open
source tools, temporarily transitioning from the world of the web and
Internet development, jumping into the medical industry, an experience
much like being a fish out of water. The experiences of working in this
field, specifically developing software for use in clinical trials. We
describe the use of open source tools for such software development, the
required integration with closed-source software, and the documentation
rigor that is necessary in a field under the jurisdiction of the US Food
and Drug Administration (FDA). In particular, I'll describe direct
experience in building an application for the use of analyzing spinal
fractures and the various tools that make up the application suite,
whose primary development language was Python. We will also discuss the
particular role of the my employer at the time in the clinical trials
process and elaborate on the data flow that was necessary for all
medical applications developed at the firm, not just the one in
particular.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/using-python-in-software-for-the-medical-industry.html</guid><category>documentation</category><category>web</category></item><item><title>Web API Mashups in a Python Application</title><link>https://pyvideo.org/europython-2011/web-api-mashups-in-a-python-application.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Johan Euphrosine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover: - How to use OAuth into your webapp so users can
give permission to access their data stored in third party web
application. - How your webapp can interact with their Web API using
RESTful JSON protocols.&lt;/p&gt;
&lt;p&gt;This talk is suitable for beginners already familiar with any WSGI web
framework.&lt;/p&gt;
&lt;p&gt;This talk will be illustrated with code samples using Google App Engine
and Google APIs client library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johan Euphrosine</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/web-api-mashups-in-a-python-application.html</guid><category>api</category><category>google</category><category>json</category><category>oauth</category><category>web</category><category>wsgi</category></item><item><title>Flow-based programming made easy with PyF 2.0</title><link>https://pyvideo.org/europython-2011/flow-based-programming-made-easy-with-pyf-20.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in &amp;quot;Training Pizza
Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyF is a python framework to ease flow based programming and allow
massive data crunching on multiple CPUs. We boast an optional web-based
interface to visually design processing tubes, batch scheduling, report
generation and email alerts.&lt;/p&gt;
&lt;p&gt;The Framework is easily extensible by writing plugins, a lot of features
like data persistence, reporting and web scrapping are already part of
the ecosystem.&lt;/p&gt;
&lt;p&gt;This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.&lt;/p&gt;
&lt;p&gt;If available, an additional training session will focus on working with
the framework to create your own flow-based processes and plugins.&lt;/p&gt;
&lt;p&gt;For more information: &lt;a class="reference external" href="http://www.pyfproject.org/"&gt;http://www.pyfproject.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/flow-based-programming-made-easy-with-pyf-20.html</guid><category>architecture</category><category>design</category><category>framework</category><category>processing</category><category>ui</category><category>web</category></item><item><title>Introducing Django REST framework</title><link>https://pyvideo.org/europython-2011/introducing-django-rest-framework.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Tom Christie - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST framework is a new project that aims to make it easy to
build RESTful Web APIs.&lt;/p&gt;
&lt;p&gt;The APIs it creates are fully Web browse-able, using an awesome Django
admin style interface, allowing them to be truly self-describing,
well-connected systems.&lt;/p&gt;
&lt;p&gt;The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RESTful Web APIs and Django - what batteries aren't in the box&lt;/li&gt;
&lt;li&gt;An introduction to the framework - What it is, what problems it tries
to solve&lt;/li&gt;
&lt;li&gt;Why it's so important that Web APIs should be Web browse-able&lt;/li&gt;
&lt;li&gt;A live coding demonstration&lt;/li&gt;
&lt;li&gt;Audience discussion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sign up for the &lt;a class="reference external" href="http://ep2011.europython.eu/p3/sprints/"&gt;sprint&lt;/a&gt;
More &lt;a class="reference external" href="http://django-rest-framework.org"&gt;info&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Christie</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/introducing-django-rest-framework.html</guid><category>django</category><category>framework</category><category>rest</category><category>web</category></item><item><title>Making use of OpenStreetMap data with Python</title><link>https://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrii Mishkovskyi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</guid><category>gis</category><category>google</category><category>importing</category><category>learning</category><category>maps</category><category>parsing</category><category>postgresql</category><category>web</category></item><item><title>Merengue: the new surprising and refreshing Django based CMS.</title><link>https://pyvideo.org/europython-2011/merengue-the-new-surprising-and-refreshing-djang.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Manuel Saelices - 20 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is an excellent web development platform with an extensive
developers community. It may be the most popular Python web framework
nowadays. However, the exisiting django based CMS products are not as
feature complete as other comparable solutions (Drupal, Plone, Alfresco,
ModX, etc.).&lt;/p&gt;
&lt;p&gt;The Merengue project tries to fill this gap. It is financed by the
University of M√°laga (Spain) and takes advantage of existing code and
knowledge from other projects (Plone, Drupal, Pinax, django-cms,
feincms, LFC, etc.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manuel Saelices</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/merengue-the-new-surprising-and-refreshing-djang.html</guid><category>cms</category><category>django</category><category>framework</category><category>university</category><category>web</category></item><item><title>Paver: the build tool you missed</title><link>https://pyvideo.org/europython-2011/paver-the-build-tool-you-missed.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Luka≈° Linhart - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build tools are not very popular in Python environment. In this talk,
I'd like to show how useful it is to have one, even if you do just
simple web applications. A nice, single point of entry instead of hairy
shell scripts, fabric fabfiles and django admin commands all over the
place.&lt;/p&gt;
&lt;p&gt;Written in the neat, friendly Python instead of some Anty XML jumbo, you
are about to have a refreshing cleanup.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luk√°≈° Linhart</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/paver-the-build-tool-you-missed.html</guid><category>django</category><category>fabric</category><category>web</category><category>xml</category></item><item><title>PostgreSQL - the database-sister of Python</title><link>https://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harald Armin Massa</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</guid><category>business</category><category>database</category><category>json</category><category>postgresql</category><category>replication</category><category>web</category></item><item><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link>https://pyvideo.org/europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Calvin Cheng - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We had the privilege of working on a mobile web application for ETH
Zurich, funded by ETH North-South Centre, using Django/Postgis, jQuery
mobile and Openlayers technology.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share what we have learnt technically and
the experiences and fun we had with polygon creation on a map and saving
polygon vertices and related data into our spatial database via
geodjango.&lt;/p&gt;
&lt;p&gt;This mobile web app is developed based on research by Dr Koh of ETH
Zurich, specializing on Matrix-calibrated and edge-corrected
species-area models that allow users to evaluate the biodiversity
consequence and trade-offs of land- use decisions. The development and
description of these models were published in Conserv. Biol. 24, 994 and
J. Appl. Ecol. 47, 1063.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Calvin Cheng</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</guid><category>database</category><category>geodjango</category><category>jquery</category><category>mobile</category><category>spatial</category><category>web</category></item><item><title>Spatial data and GeoDjango</title><link>https://pyvideo.org/europython-2011/spatial-data-and-geodjango.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Bruno Renie - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GeoDjango is the &amp;quot;world-class geographic web framework&amp;quot; everyone has
probably heard of. The purpose of this talk, targeted at people familiar
with Django itself, is to introduce in more details the capabilities of
this framework.&lt;/p&gt;
&lt;p&gt;After learning the basics of Geographic Information Systems, we will
see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to get started with a GeoDjango installation,&lt;/li&gt;
&lt;li&gt;how to import, store and query spatial data,&lt;/li&gt;
&lt;li&gt;how to geo-enable your forms to allow user-generated spatial data,&lt;/li&gt;
&lt;li&gt;how to serialize and display your data using the different formats
and mapping frameworks such as OpenLayers and Polymaps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During this talk we will be building a simple GeoDjango application to
illustrate the different concepts introduced.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Reni√©</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/spatial-data-and-geodjango.html</guid><category>django</category><category>forms</category><category>geodjango</category><category>learning</category><category>mapping</category><category>spatial</category><category>web</category></item><item><title>uWSGI, il coltellino svizzero (di MacGyver) del deploy</title><link>https://pyvideo.org/europython-2011/uwsgi-il-coltellino-svizzero-di-macgyver-del-d.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Roberto De Ioris - 21 June 2011 in &amp;quot;Track Italiana Big
Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La prima parte del talk introdurra' la storia di uWSGI, dall'idea
iniziale alla messa in produzione dei primi lavori, fino alla sua
inclusione nei progetti Cherokee e Nginx.&lt;/p&gt;
&lt;p&gt;Seguira' una serie di esempi di deploy in ambienti ostili (a livello di
sicurezza, non faremo deploy nella jungla) o con risorse fortemente
limitate fino all'utilizzo delle funzionalita' integrate per il
clustering.&lt;/p&gt;
&lt;p&gt;Il talk si rivolge a tutti gli sviluppatori di applicazioni web che sono
alla ricerca di un ambiente robusto e veloce per i propri lavori, o a
chi gia' utilizza uWSGI e vuole conoscere qualcuna delle nuove
funzionalita' introdotte nel ramo di sviluppo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto De Ioris</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/uwsgi-il-coltellino-svizzero-di-macgyver-del-d.html</guid><category>deploy</category><category>web</category></item><item><title>Writing Books using Python &amp; Open Source Software</title><link>https://pyvideo.org/europython-2011/writing-books-using-python-open-source-software.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All of us are familiar with using open source tools to develop software
applications with, but instead of writing code, it is also possible to
create the manuscript of a book in very much the same way. These days,
authors have many choices in terms of the tools which are available to
aid them in writing a book. Gone are the times when the only option is
using a proprietary word processor, so why not try it using open source
tools? It's especially attractive to those who develop software using
open source tools as well those who are writing books about open source
tools. Both code and the written word are created in plain text files.
These files are easily archived using some version control system. They
can be shared easily via e-mail and can also be backed up in the same
manner. In the end, the final product is shipped to the customer: in the
case of software, it's distribution via CD or DVD, or perhaps a release
for installation on a server, and for a book, it's delivering a
manuscript to the publisher, perhaps in a format such as HTML or PDF¬Æ.&lt;/p&gt;
&lt;p&gt;Upon some reflection, writing a book is, in many ways, similar to
writing an application: you create text or code which is saved to a file
(or files- typically one but could be more) file in some format,
proprietary or otherwise. Additions, changes, or deletions are made to
the file(s), which is then updated when the file is (re)saved. Backups
need to be made, some versioning may be required to keep track of
multiple files during the course of development, and finally, the
resulting file(s) have to be delivered, as described above. Because of
all the similarities described, we assert that it is possible to use a
development environment utilizing Python and other open source tools to
not only write application with, but also be able to create the entire
manuscript for a book as well! While this entire concept should not
really be mind-blowing, it does represent a trend seemingly growing in
popularity in the open source world.&lt;/p&gt;
&lt;p&gt;In particular, we highlight the following requirements that are
necessary when creating a manuscript, especially with co-authors:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Text Formatting&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;li&gt;Versioning and Backups&lt;/li&gt;
&lt;li&gt;Automated Testing of Code&lt;/li&gt;
&lt;li&gt;HTML/PDF¬Æ Generation&lt;/li&gt;
&lt;li&gt;Author Communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we highlight one particular case study, the development of
Addison Wesley's 2009 publication, &amp;quot;Python Web Development with Django&amp;quot;,
as well as provide some insight into other projects created using
similar tools. Open source software has radically affected how
applications are built today, and this phenomenon has the ability to
affect the book publishing world in the same way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/writing-books-using-python-open-source-software.html</guid><category>cd</category><category>html</category><category>testing</category><category>web</category></item><item><title>An iPhone-Python love affair: Building APIs for mobile</title><link>https://pyvideo.org/europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mobile apps are the hot item of the day - and the best mobile apps are
backed by a great website. Python web developer Nate Aune and iPhone
developer Anna Callahan will show you how we built a simple music web
app in Django with a native iPhone app that communicates with it.
Attendees of this talk will see a concrete case study of building an
application that exposes an API for mobile devices.&lt;/p&gt;
&lt;p&gt;Our web app exposes a JSON API for sending and receiving data from the
mobile device. We‚Äôll talk about why we chose Django and the TastyPie API
package, and discuss other Python-based frameworks that could be used to
build the API such as Pyramid, Flask and Bottle. We‚Äôll also compare REST
and custom APIs to understand best practices for building APIs designed
for mobile devices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Callahan</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</guid><category>api</category><category>django</category><category>flask</category><category>json</category><category>mobile</category><category>rest</category><category>tastypie</category><category>web</category></item><item><title>Building Scalable Web Apps</title><link>https://pyvideo.org/europython-2011/building-scalable-web-apps.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building scalable web applications may seem like a distant problem, but
the problem is not thinking about it before it's too late. This talk
will focus on designing a scalable web application before it needs to be
(and avoiding the premature optimization dilemma). It will cover topics
such as efficient usage of your database, appropriate caching (and
invalidation!), and what the speaker considers as best practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/building-scalable-web-apps.html</guid><category>optimization</category><category>scalable</category><category>web</category></item><item><title>Joel Burton - Why Python Web Frameworks are Changing the Web</title><link>https://pyvideo.org/kiwi-pycon-2009/joel-burton---why-python-web-frameworks-are-chang.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why Python web frameworks are changing the web&lt;/p&gt;
&lt;p&gt;Presented by Joel Burton&lt;/p&gt;
&lt;p&gt;Keynote.&lt;/p&gt;
&lt;p&gt;Slides from the keynote:
&lt;a class="reference external" href="http://www.slideshare.net/joelburton/why-python-web"&gt;http://www.slideshare.net/joelburton/why-python-web&lt;/a&gt;-
frameworks-are-changing-the-web&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel Burton</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/joel-burton---why-python-web-frameworks-are-chang.html</guid><category>kiwipycon</category><category>kiwipycon2009</category><category>plone</category><category>pylons</category><category>turbogears</category><category>web</category><category>zope</category></item><item><title>Robert Coup - /me wants it. Scraping sites to get data.</title><link>https://pyvideo.org/kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/me wants it. Scraping sites to get data.&lt;/p&gt;
&lt;p&gt;Presented by Robert Coup&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Building scrapers for grabbing data from websites. Tools, techniques,
and tips.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Life would be so much easier if the data contained in websites was
available raw via APIs. Alas, until that mythical day comes we either
need to deal with unhelpful people via email and phone, or just get it
ourselves. Python has some great tools available to help with building
scrapers and for parsing and formatting the data we get. Starting off
with the basics - tracking what needs to be done, making web requests,
parsing HTML, following links, and extricating data from Excel and PDF
documents. Our scraper needs to be resilient against too-clever content
management systems, Frontpage-era HTML, and plain dodgy data. We may
need to pass through logins and other messiness. There are some
techniques and tips for approaching the problems and keeping your
solution flexible and as simple as possible. We'll discuss some scrapers
built for New Zealand data, and introduce a new project from the NZ open
government data group to provide a RESTful interface to scrapers -
effectively creating a nice API where there isn't one.&lt;/p&gt;
&lt;p&gt;Slides:
&lt;a class="reference external" href="http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-data"&gt;http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-
data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Coup</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html</guid><category>api</category><category>html</category><category>kiwipycon</category><category>kiwipycon2009</category><category>rest</category><category>scraping</category><category>web</category></item><item><title>Roman Joost - Get started with Zope3</title><link>https://pyvideo.org/kiwi-pycon-2009/roman-joost---get-started-with-zope3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get started with Zope3&lt;/p&gt;
&lt;p&gt;Presented by Roman Joost&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk introduces Zope 3, the main differences to Zope (2) and how to
get started.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;The Zope application server exist for nearly a decade now. One of the
biggest changes to the Zope architecture was the rewrite of the
framework and an introduction of a component architecture. Zope 3 was
born. The talk covers how developers can bootstrap a Zope 3 project
using buildout, what the differences between Zope (2) and Zope 3 is, how
views and models are created and registered, how third party
applications are used and how common pitfalls can be avoided.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roman Joost</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/roman-joost---get-started-with-zope3.html</guid><category>kiwipycon</category><category>kiwipycon2009</category><category>web</category><category>zope</category><category>zope3</category></item><item><title>Roman Joost - Grok or how Zope3 reinvented itself</title><link>https://pyvideo.org/kiwi-pycon-2009/roman-joost---grok-or-how-zope3-reinvented-itself.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Grok or how Zope3 reinvented itself&lt;/p&gt;
&lt;p&gt;Presented by Roman Joost&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk introduces how to quickly and easily create web applications
with Grok, a web framework based on Zope3 (&lt;a class="reference external" href="http://grok.zope.org/"&gt;http://grok.zope.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Grok is a web application framework based on Zope 3 - the popular
application server. One of the main aspects of Grok is the rapid
development of web applications without losing the flexibility Zope 3
provides. The talk covers a quick introduction to Zope 3 and Grok. Based
on an example, I will provide a quick walk through on how easy it is to
create sophisticated web applications with Grok. Additionally, the talk
outlines pitfalls for newcomers and how to avoid them.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roman Joost</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/roman-joost---grok-or-how-zope3-reinvented-itself.html</guid><category>grok</category><category>kiwipycon</category><category>kiwipycon2009</category><category>web</category><category>zope3</category></item><item><title>PyConAU 2010: App Engine 101</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--app-engine-101.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;App Engine 101&lt;/p&gt;
&lt;p&gt;Presented by Brian K Quinlan (Google)&lt;/p&gt;
&lt;p&gt;App Engine lets you run your Python web applications on Google's
infrastructure.&lt;/p&gt;
&lt;p&gt;This tutorial will provide an overview on how to create, configure and
deploy applications on App Engine using a simple (but useful!) example
application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian K Quinlan</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--app-engine-101.html</guid><category>appengine</category><category>gae</category><category>pyconau</category><category>pyconau2010</category><category>tutorial</category><category>web</category></item><item><title>PyConAU 2010: Building the Wave Robots API: Behind the Scenes</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building the Wave Robots API: Behind the Scenes&lt;/p&gt;
&lt;p&gt;Presented by Pamela S Fox (Google)&lt;/p&gt;
&lt;p&gt;The Google Wave robots protocol involves JSON-RPC messages that are sent
between the Wave server and the robot, communicating events to process
and operations to perform. The Python Robots API abstracts on top of
that JSON-RPC service, allowing developers to interact with waves using
event callbacks, python classes, and chained functions. In this talk,
we'll explain the JSON- RPC protocol, talk about how we designed the API
to sit on top of that protocol, and show how developers can use the API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pamela S Fox</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--building-the-wave-robots-api--behin.html</guid><category>apis</category><category>json</category><category>jsonrpc</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item><item><title>PyConAU 2010: Genropy - a framework for creating complex applications deployed on the web</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genropy - A framework for creating complex applications deployed on the
web&lt;/p&gt;
&lt;p&gt;Presented by Jeff B Edwards (Goodsoftware)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blog.genropy.org/"&gt;Genropy&lt;/a&gt; is the python implementation of
Genro, and is an application framework quite different from the standard
(django, cherrypy, turbogears), for building powerful database
applications deployed from the browser. Many differences and advantages
between this framework and traditional python application frameworks are
explained. Genropy is a suitable for creating complex 'applications' as
opposed to 'sites'. The differentiation is that an application is
something an operator uses all day, has trained users, that have to
'squeeze' all the power from it available. Conversely, a 'site' is
basically public and not necessarily powerful as a user spends a
relatively small amount of time on it. Genropy is the framework for
creation applications. It is used for attendee registration and sales in
pycon italy, the larger national conference in Europe (Florence, Italy).&lt;/p&gt;
&lt;p&gt;This session will demonstrate how to create a simple application (3
tables) and demonstrate the ease and power of using python for the model
view and controller on the client. It demonstrates how one api- being
the genro Bag - is used to create the model, to map the sql to objects,
to create the GUI and communicate all data. So all of it can be done in
python instead of having to use many different technologies and
languages.&lt;/p&gt;
&lt;p&gt;Jeff Edwards from Goodsoftware is strategic partner of Sofwell who is
the author of Genropy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff B Edwards</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--genropy---a-framework-for-creating-.html</guid><category>databases</category><category>gui</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item><item><title>PyConAU 2010: GLAMkit: a harder, better, faster, stronger way to write reusable Django code</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GLAMkit: a harder, better, faster, stronger way to write reusable Django
code&lt;/p&gt;
&lt;p&gt;Presented by Dr. Greg Turner (the Interaction Consortium)&lt;/p&gt;
&lt;p&gt;As part of our web development work for Galleries, Libraries, Archives
and Museums (the so-called GLAM sector), we have open-sourced the common
tools and design patterns that we have developed as a web framework
called GLAMkit (&lt;a class="reference external" href="http://glamkit.org/"&gt;http://glamkit.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;GLAMkit is based on Django, and is inspired by its design philosophy of
several apps which implement specific features. However, by looking at
the successes and challenges faced by other CMSes and collections of
apps such as Pinax, we have taken the philosophy a stage futher.&lt;/p&gt;
&lt;p&gt;Rather than being a collection of Django apps, we have constructed
GLAMkit as a collection of optional and reusable Django 'toolkits' for
implementing common features. We leave the implementation details - the
things that Django already does brilliantly - to the application
developers themselves.&lt;/p&gt;
&lt;p&gt;In this talk, we will present the history of GLAMkit's development, with
particular focus on how our approach to reusability came about, and some
examples of that approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Greg Turner</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html</guid><category>advocacy</category><category>architecture</category><category>community</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item><item><title>PyConAU 2010: Plone for Python Developers</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--plone-for-python-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plone for Python Developers&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;Plone is one of the top four open source CMSes in the world and is pure
python. Plone is in demand for security, simple UI and extreme
flexibility. This talk will concentrate on helping web programers with
several common customisations of Plone, including content type creation,
themeing and template customizations and how the re-architecture using
ZTK makes this easy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--plone-for-python-developers.html</guid><category>cms</category><category>plone</category><category>pyconau</category><category>pyconau2010</category><category>web</category><category>zope</category></item><item><title>PyConAU 2010: Python in Video Games and Multimedia Projects</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--python-in-video-games-and-multimedi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python in Video Games and Multimedia Projects&lt;/p&gt;
&lt;p&gt;Presented by Mr. Chris McCormick&lt;/p&gt;
&lt;p&gt;This talk will cover several real-world uses of Python in cross platform
video game and multimedia projects, and the tips, tricks, and techniques
I learned along the way whilst working on those projects. I'll speak
about the issues involved in cross platform desktop dev with wxPython,
interfacing with multimedia programs using subprocess, spreading load
with multiprocessing, developing for the web on small devices with
Django, and when and how to write custom network servers using asyncore.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris McCormick</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--python-in-video-games-and-multimedi.html</guid><category>games</category><category>handheld</category><category>multimedia</category><category>network</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item><item><title>PyConAU 2010: What's new in Django 1.2</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--what--39-s-new-in-django-1-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's new in Django 1.2&lt;/p&gt;
&lt;p&gt;Presented by Dr. Russell Keith-Magee (Django Project)&lt;/p&gt;
&lt;p&gt;Django 1.2 added a number of major, long anticipated features to Django.
This talk will give an overview of these new features (both large and
small), as well as giving a look into what the future may hold for
Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--what--39-s-new-in-django-1-2.html</guid><category>pyconau</category><category>pyconau2010</category><category>web</category></item></channel></rss>