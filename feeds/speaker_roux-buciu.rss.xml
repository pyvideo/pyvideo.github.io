<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 08 Nov 2015 00:00:00 +0000</lastBuildDate><item><title>Learning to code... better!</title><link>https://pyvideo.org/pycon-ca-2015/learning-to-code-better-roux-buciu.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I came to coding by a circuitous route that started with studying logic within philosophy. Along the way, I've tackled a number of subjects related to learning and skill development - from a philosophical, practical, sociological and educational standpoint - and I thought, what better way to test the things I've come away with in action than to put them to work for me as I start to learn how to code.&lt;/p&gt;
&lt;p&gt;Iâ€™ll be providing a brief summary of the what and why of things that worked and things that didn't work to help me learn and become a better coder as I started teaching myself, and continue leaning, Python. Rather than focusing on issues that are aimed at beginners, I want to zero in on a few points that I want to take into my late coding career and so will be helpful to a broader audience as they are picking up newer technologies. I'll quickly move through things like mapping out code before writing it, being efficient and descriptive, how to deal with failure when it inevitably happens, contrarianism in the coding community, how to &amp;quot;&amp;quot;stick to it&amp;quot;&amp;quot;, Googling, dealing with the peaks and valleys of daily coding, ego and code, pacing yourself, taking 'productive' breaks, and how to gauge improvement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roux Buciu</dc:creator><pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-08:pycon-ca-2015/learning-to-code-better-roux-buciu.html</guid></item></channel></rss>