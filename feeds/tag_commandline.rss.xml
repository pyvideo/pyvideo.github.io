<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 16 Jul 2016 00:00:00 +0000</lastBuildDate><item><title>Building Command Line Tools in Python</title><link>https://pyvideo.org/pygotham-2016/building-command-line-tools-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you often catch yourself opening a Python script, changing a couple variables at the top, and then running &lt;cite&gt;python myscript.py&lt;/cite&gt;? Turn that script into a Command Line Tool! Learn how to use docopt to easily build a Command Line Tool, how to use pip to make your tool directly callable, and how this strategy can improve your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Taubeneck</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/building-command-line-tools-in-python.html</guid><category>Commandline</category></item><item><title>PyOhio 2010: Log Analysis with Python</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--log-analysis-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Log Analysis with Python&lt;/p&gt;
&lt;p&gt;Presented by Scott McCarty&lt;/p&gt;
&lt;p&gt;Log analysis is something that every programmer and systems adminstrator
must do sometimes. This talk will be an introduction to the concepts of
pattern recognition, artificial ignorance, word counting, stopword
lists, and command line graphing. It is based on a pythonic
implementation of these techniques called petit and will delve into
several use cases and show how using these techniques can help you save
time when analyzing logs with python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott McCarty</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--log-analysis-with-python.html</guid><category>artificialignorance</category><category>commandline</category><category>graphing</category><category>patternrecognition</category><category>petit</category><category>pyohio</category><category>pyohio2010</category><category>stopwordlists</category><category>wordcounting</category></item><item><title>PyOhio 2011: Interactive command-line interpreters with cmd and cmd2</title><link>https://pyvideo.org/pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line interpreters with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;How should your Python program receive commands and deliver results? If
an interactive command-line interpreter is right for you, you're in luck
- Python's got some great batteries included for you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Devlin</dc:creator><pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html</guid><category>cmd</category><category>cmd2</category><category>commandline</category><category>interpreters</category><category>pyohio</category><category>pyohio2011</category></item><item><title>Command line interfaces are easy, use them</title><link>https://pyvideo.org/pytexas-2014/the-command-line-interface-because-why-not.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a useful and pleasant command line experience is easy. If
you've never really tried adding a command line interface (CLI) to your
python scripts or maybe you still have a bitter taste in your mouth from
the days of sys.argv, getopt, optparse, and argparse.&lt;/p&gt;
&lt;p&gt;I invite you to take another look ... or your first look at command line
interfaces and how easy and useful it is for your progress and sanity.&lt;/p&gt;
&lt;p&gt;Comparing &lt;tt class="docutils literal"&gt;Begins&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DocOpt&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Click&lt;/tt&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eloy Zuniga Jr.</dc:creator><pubDate>Sat, 04 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-04:pytexas-2014/the-command-line-interface-because-why-not.html</guid><category>click</category><category>Commandline</category></item><item><title>Writing Command-Line Tools using IronPython and Visual Studios</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--writing-command-line-tools-using-iron.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn how cool it is to write command-line tools using IronPython and
Visual Studios. In this talk we cover why command-lines tools are
important for .NET shops, how to write one, and finally, how to
distribute it as a standalone .exe.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how cool it is to write command-line tools using IronPython and
Visual Studios. In this talk we cover why command-lines tools are
important for .NET shops, how to write one, and finally, how to
distribute it as a standalone .exe.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Noah Gift</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--writing-command-line-tools-using-iron.html</guid><category>commandline</category><category>ironpython</category><category>.net</category><category>pycon</category><category>pycon2011</category><category>visualstudio</category></item></channel></rss>