<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_darko-ronic.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-22T00:00:00+00:00</updated><entry><title>Mobile Games to the Cloud With Python</title><link href="https://pyvideo.org/europython-2014/mobile-games-to-the-cloud-with-python.html" rel="alternate"></link><published>2014-07-22T00:00:00+00:00</published><updated>2014-07-22T00:00:00+00:00</updated><author><name>Darko Ronić</name></author><id>tag:pyvideo.org,2014-07-22:europython-2014/mobile-games-to-the-cloud-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;When a mobile game development company decides to switch to a more cloud
based development it is faced with obstacles different from those it's
used to on mobile devices. This talk explains how Python provided us
with most of the infrastructure for this task and how a Python game
backend was built as a result.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="the-talk"&gt;
&lt;h4&gt;The Talk&lt;/h4&gt;
&lt;p&gt;This talk has two goals. Showing the audience the lessons we learned
during a project which moved a simple mobile game to a server backend is
our first intention. In addition to that we want to describe how such a
system works in a real life example, to show which problems and which
requirements arise in its creation. When the audience leaves the talk
they will know how a real-life mobile game uses Python for powering the
backend servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h4&gt;The Problem&lt;/h4&gt;
&lt;p&gt;Most of the game development for mobile devices is focused on running
the game on the device. The game designers and game developers play a
primary role in creating the product. The server backend plays a
supporting role providing a multiplayer or social experience to the
users. Indeed, at Nanobit Ltd., things were also done that way. We had a
small Python infrastructure built around Django which provided a small
portion of multiplayer experience for the players. The majority of
development was still focused on playing the game on the device. That
way of thinking was put to test when we decided to center our future
games around the multiplayer experience. Due to the fact that our
infrastructure at the time was not enough for what we had in mind, we
had to start from scratch. The decision was made to use Python as the
center of our new infrastructure.&lt;/p&gt;
&lt;p&gt;In order to achieve it, a server backend was needed that would allow the
game to be played “in the cloud” with the device only being a terminal
to the player. Most of the game logic would have to be processed in the
cloud which meant that each player required a constant connection to the
backend and with over 100.000 players in our previous games that
presented a challenge. How to build an infrastructure which can support
that? Since every user action had to be sent to the backend how to
process thousands of them quick enough? Those problems were big and were
just the start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;The design of the backend lasted for a couple of months and produced a
scalable infrastructure based on “workers” developed in Python, “web
servers” that use Tornado and a custom message queue which connected the
two. The storage part is a combination of Riak and Redis. Since the
backend is scalable new workers and new web servers had to be deployed
easily so an orchestration module was build using Fabric. The
scalability and launching of new workers and web servers was achieved
using Docker for creation and deployment of containers. Each container
presents one module of the system (worker, web server, queue). The end
result can now support all of our future games and only requires the
game logic of each game to be added to the workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-technologies"&gt;
&lt;h4&gt;The Technologies&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python for coding the game logic, web servers. More than 90% of the
system was written in Python.&lt;/li&gt;
&lt;li&gt;Fabric&lt;/li&gt;
&lt;li&gt;SQLAlchemy&lt;/li&gt;
&lt;li&gt;Riak&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;ZeroMQ&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-lessons-learned"&gt;
&lt;h4&gt;The Lessons Learned&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to tune the backend to handle the increasing number of active
players.&lt;/li&gt;
&lt;li&gt;How to tackle the problem of frequent connection dropping and
reachability issues of poor mobile device Internet connection in
Tornado with a little help of Redis.&lt;/li&gt;
&lt;li&gt;How to prevent users from trying to outsmart the system by denying
illegal moves.&lt;/li&gt;
&lt;li&gt;How to enable game profile syncing and live updating.&lt;/li&gt;
&lt;li&gt;Improving the performance of workers by prioritizing data being
stored to databases (Riak, SQL).&lt;/li&gt;
&lt;li&gt;New issues and lessons show up all the time so there will definitely
be more of them by the time of the conference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-outline"&gt;
&lt;h4&gt;Basic Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Intro (5 min)&lt;ol class="arabic"&gt;
&lt;li&gt;Who are we?&lt;/li&gt;
&lt;li&gt;How was Python used in our previous games&lt;/li&gt;
&lt;li&gt;Why we decided to change it all&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Requirements (6 min)&lt;ol class="arabic"&gt;
&lt;li&gt;What was the goal of creating the game backend&lt;/li&gt;
&lt;li&gt;Why was Python our first choice&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python backend (14 min)&lt;ol class="arabic"&gt;
&lt;li&gt;The architecture of the backend&lt;/li&gt;
&lt;li&gt;Which technologies did we use and how were they connected together&lt;/li&gt;
&lt;li&gt;How the backend handles the game logic&lt;/li&gt;
&lt;li&gt;Lessons learned&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Questions &amp;amp; Answers (5 min)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary></entry></feed>