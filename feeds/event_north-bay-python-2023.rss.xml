<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - North Bay Python 2023</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 30 Jul 2023 00:00:00 +0000</lastBuildDate><item><title>Automate Your City Data with Python</title><link>https://pyvideo.org/north-bay-python-2023/automate-your-city-data-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every week, in every city, hundreds if not thousands of decisions, big and small, are being made about the places where we all live. Most of the time, these decisions are hidden behind old systems, arcane websites, or poorly formatted PDFs. With the power of Datasette, Python data tooling, and Github actions, you can quickly set up a low-or-no-cost city data pipeline, and help us all better understand the decisions being made where we live.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip James</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/automate-your-city-data-with-python.html</guid><category>North Bay Python 2023</category></item><item><title>Automated accessibility audits</title><link>https://pyvideo.org/north-bay-python-2023/automated-accessibility-audits.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's 2023, so we all know the importance of website accessibility. Thanks to open source tools, we can now automatically check our Python Web Apps for accessibility issues. In this talk, I'll show how to use the open-source Axe-core accessibility checking engine with Python tools like Pytest and Playwright, plus tips for setting up CI/CD workflows to ensure that accessibility issues don't get introduced.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pamela Fox</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/automated-accessibility-audits.html</guid><category>North Bay Python 2023</category></item><item><title>Back to the Future of Hypermedia in Python</title><link>https://pyvideo.org/north-bay-python-2023/back-to-the-future-of-hypermedia-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Hypermedia is your friend,&amp;quot; they said. &amp;quot;You don't need JavaScript anymore,&amp;quot; they said. &amp;quot;You'll be _fine_...&amp;quot;&lt;/p&gt;
&lt;p&gt;It's no secret that hypermedia has been making a quiet resurgence in the web development landscape. One of the most popular toolkits in the Python space is htmx, offering a simple, declarative approach to AJAX, CSS Transitions, and Server Sent Events directly from your HTML.&lt;/p&gt;
&lt;p&gt;Additionally, tools like TailwindCSS are making it easier to design your application simply by adding preconfigured CSS classes to your HTML elements. There's no need to meddle around with a CSS file or fear that completely changing your design will increase bloat or introduce clashing code.&lt;/p&gt;
&lt;p&gt;You can now build a beautiful and responsive application with nothing more than Python and HTML!&lt;/p&gt;
&lt;p&gt;Let's take a look at some of the tools that exist to enable the PyHAT (Python htmx ASGI Tailwind) stack and discuss where we can go from here.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mario Munoz</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/back-to-the-future-of-hypermedia-in-python.html</guid><category>North Bay Python 2023</category></item><item><title>Beyond Programming Paradigms (with Python examples)</title><link>https://pyvideo.org/north-bay-python-2023/beyond-programming-paradigms-with-python-examples.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Java is object oriented and Haskell is functional. How about Python?
Is it really OO with free-standing functions and porous encapsulation?
Python has lambdas and closures, but is it functional? Are these
useful questions?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/beyond-programming-paradigms-with-python-examples.html</guid><category>North Bay Python 2023</category></item><item><title>Catching up on the weird world of LLMs</title><link>https://pyvideo.org/north-bay-python-2023/catching-up-on-the-weird-world-of-llms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large Language Models are the engines that power AI tools like ChatGPT, Bing and Bard.&lt;/p&gt;
&lt;p&gt;They are deeply weird, often frustrating and undeniably fascinating pieces of technology.&lt;/p&gt;
&lt;p&gt;This talk will attempt to summarize everything I've learned about them over the past year: how they are built, what they can do, what they can't do and how we can best tame them and use them to solve interesting problems.&lt;/p&gt;
&lt;p&gt;LLMs don't have to be large: I'll talk through the latest developments in openly licensed models you can run on your own devices, including on your phone and even in your web browser.&lt;/p&gt;
&lt;p&gt;I'll also discuss their as-yet unconquered security flaws, and the bewildering ethical implications of how they are trained and what they can damage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/catching-up-on-the-weird-world-of-llms.html</guid><category>North Bay Python 2023</category></item><item><title>Celebrating 25 years of Open Source &amp; our friend Betsy</title><link>https://pyvideo.org/north-bay-python-2023/celebrating-25-years-of-open-source-our-friend-betsy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Simmons</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/celebrating-25-years-of-open-source-our-friend-betsy.html</guid><category>North Bay Python 2023</category></item><item><title>Developing Labs for Teaching Kids Webdev</title><link>https://pyvideo.org/north-bay-python-2023/developing-labs-for-teaching-kids-webdev.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come listen to the tale of how I and a small team of Scout Leaders developed and delivered a weekend course that took 11-15-year-old young adults from knowing almost nothing about networking or code, to being able to follow along and build their own website, complete with static HTML, CSS, and then transitioning to a simple Python Flask app, requiring nothing more than a web browser and Visual Studio Code on the student computers.&lt;/p&gt;
&lt;p&gt;I'll cover how we gave each student full root access to their own &amp;quot;server&amp;quot;, through to how we built the course material to be a manageable learning curve over such a tight timeline, the challenges we faced with content delivery, and ideas for improvements before we run our next course.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Cengia</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/developing-labs-for-teaching-kids-webdev.html</guid><category>North Bay Python 2023</category></item><item><title>Have you tried...</title><link>https://pyvideo.org/north-bay-python-2023/have-you-tried.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you tried turning it off again?&lt;/p&gt;
&lt;p&gt;These words are the most useful and most annoying tech support. Yes, I know that it will probably fix it, but why??&lt;/p&gt;
&lt;p&gt;This talk is about failure analysis and also robots and maybe there will be a story about my mattress exploding? Whatever the example, failure analysis is incredibly important and I will go over at least 2 case studies for deep root cause analysis and replication of failure states.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paloma Fautley</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/have-you-tried.html</guid><category>North Bay Python 2023</category></item><item><title>I Take Exception to Your Exceptions: Using Custom Errors to Get Your Point Across</title><link>https://pyvideo.org/north-bay-python-2023/i-take-exception-to-your-exceptions-using-custom-errors-to-get-your-point-across.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever used a library, ran into a generic AttributeError, and then had to go chase down what the problem _actually_ was? Wouldn't it be great to help others from running into that same issue on _your_ code? In this talk, we take a look at custom exceptions in Python and ways to structure your code to use them effectively to communicate issues back to the end user (or end developer). We'll also cover a few cool lesser-used things you can do with exceptions to make your code really stand out!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Kaufeld</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/i-take-exception-to-your-exceptions-using-custom-errors-to-get-your-point-across.html</guid><category>North Bay Python 2023</category></item><item><title>Make Your Engineering Team A Fabulous Place for Programmers with ADHD and Autism</title><link>https://pyvideo.org/north-bay-python-2023/make-your-engineering-team-a-fabulous-place-for-programmers-with-adhd-and-autism.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In StackOverflow's 2022 annual survey of 16,000 developers worldwide, 10.6% of respondents reported being affected by concentration or memory challenges, such as having Attention Deficit Hyperactivity disorder (ADHD), and 4.3% of respondents self-identified as having an Autism Spectrum Disorder (ASD). These results indicate that on a team of 20 engineers, up to 3 people on the team may have what are called &amp;quot;neurodivergent&amp;quot; brains.&lt;/p&gt;
&lt;p&gt;What are the symptoms of ADHD and ASD? What are the so-called neurodivergent &amp;quot;superpowers&amp;quot; you may have seen on social media? How can we create work environments that foster ease and success for neurodivergent software engineers? Join this session to find out!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erin 'August' Allard</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/make-your-engineering-team-a-fabulous-place-for-programmers-with-adhd-and-autism.html</guid><category>North Bay Python 2023</category></item><item><title>Observability For You and Me with OpenTelemetry</title><link>https://pyvideo.org/north-bay-python-2023/observability-for-you-and-me-with-opentelemetry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you interested in dipping your toes in the cloud native observability waters, but as an engineer you are not sure where to get started with tracing problems through your microservices and application landscapes? Then this is the session for you, where we take you on your first steps in an active open-source project that offers a buffet of languages (err, Python), challenges, and opportunities for getting started with telemetry data. The project is called OpenTelemetry, but before diving into the specifics, we’ll start with de-mystifying key concepts and terms such as observability, telemetry, instrumentation, cardinality, percentile to lay a foundation. After understanding the nuts and bolts of observability and distributed traces, we’ll explore the openTelemetry community; its Special Interest Groups (SIGs), repositories, and how to become not only an end-user,  but possibly a contributor.We will wrap up with an overview of the components in this project, such as the Collector, the OpenTelemetry protocol (OTLP), its APIs, and its SDKs. Python in particular has lovely documentation and auto-instrumentation for the most popular frameworks! Attendees will leave with an understanding of key observability concepts, become grounded in distributed tracing terminology, be aware of the components of openTelemetry, and know how to take their first steps to an open-source contribution!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Hudspeth</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/observability-for-you-and-me-with-opentelemetry.html</guid><category>North Bay Python 2023</category></item><item><title>Oh the (Methods) You Can (Make): By Dunder Seuss</title><link>https://pyvideo.org/north-bay-python-2023/oh-the-methods-you-can-make-by-dunder-seuss.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can make many methods
Over 100 to be exact
That start with two underscores
What do you think of that?&lt;/p&gt;
&lt;p&gt;The runtime, it calls these
At points A or B
To do special magic
At runtime, you see.&lt;/p&gt;
&lt;p&gt;You may have seen &lt;cite&gt;__getattr__&lt;/cite&gt; or &lt;cite&gt;__init__&lt;/cite&gt;
But &lt;cite&gt;__rfloordiv__&lt;/cite&gt;? What’s the point of it?&lt;/p&gt;
&lt;p&gt;Come take a quick tour, your mother won’t mind
And hear a talk that’s one-of-a-kind
About how Python uses them under-the-hood
And how _you_ can use them to write code that's real good&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Cannon</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/oh-the-methods-you-can-make-by-dunder-seuss.html</guid><category>North Bay Python 2023</category></item><item><title>PEP talk</title><link>https://pyvideo.org/north-bay-python-2023/pep-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you use Python, chances are you've heard of PEP 8, the Python style guide.&lt;/p&gt;
&lt;p&gt;But do you know what PEPs really are? PEPs are more than just a style guide. A PEP stands for Python Enhancement Proposal. It's a proposal documentation for when you want to change the Python programming language in a big way, for example when you want to change the syntax of Python. Think of the addition of f-strings, the walrus operator, or the ExceptionGroup, those changes all started with a PEP.&lt;/p&gt;
&lt;p&gt;Let's have a PEP talk, where you can learn about the PEP process, what needs a PEP and what doesn't, and how you as community members can take part.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/pep-talk.html</guid><category>North Bay Python 2023</category></item><item><title>Ship your Python code faster with PEX</title><link>https://pyvideo.org/north-bay-python-2023/ship-your-python-code-faster-with-pex.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lot of Python code is shipped around in Docker images. But did you know there is another way to ship Python code to production that is... &lt;em&gt;better&lt;/em&gt; in some situations? This talk covers our exploration into making code deployment faster for our users (our product runs user code in our cloud). We will cover the limits we faced with Docker builds and container provisioning, various options we explored, and why we settled on PEX.&lt;/p&gt;
&lt;p&gt;[PEX](&lt;a class="reference external" href="https://pex.readthedocs.io"&gt;https://pex.readthedocs.io&lt;/a&gt;) is a tool that packages Python code and dependencies into a single file. It provides various features such as determinism (given the same input files, you get a bit-for-bit identical output file), isolation (a PEX file runs in the bundled environment, isolated from the system’s site-packages), composition (multiple PEX files can be combined to form new environments), and more. We used a number of these feature to great effect in our solution. By using PEX in addition to Docker we were able to reduce the time a developer waits for code to deploy from 3-4 minutes to about 30 seconds.&lt;/p&gt;
&lt;p&gt;Shipping code isn't the only use for PEX. Once we see how PEX files work, we will also go over a few fun tips and tricks that are handy for everyday Python development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shalabh Chaturvedi</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/ship-your-python-code-faster-with-pex.html</guid><category>North Bay Python 2023</category></item><item><title>SVGs, Lasers, Reality, and You</title><link>https://pyvideo.org/north-bay-python-2023/svgs-lasers-reality-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Evan Kohilas is a Software Engineer down from Sydney, Australia, whose passions lie in improving the developer experience by reducing human error, enhancing code health, and optimising workflows.&lt;/p&gt;
&lt;p&gt;When he's not thinking about security, informatics, or giving talks about his many projects, you'll find him either nomming on subway cookies, or chasing bunny rabbits.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2023/talk/XB7UTZ/"&gt;https://pretalx.northbaypython.org/nbpy-2023/talk/XB7UTZ/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently, I embarked on an adventure to design and laser cut a card for my wallet.&lt;/p&gt;
&lt;p&gt;Little did I know that I'd face a Hydra called Reality. For every challenge that I solved, two new ones emerged...&lt;/p&gt;
&lt;p&gt;In the software world, we often have the privilege of quick feedback loops, be it running code or tests.&lt;/p&gt;
&lt;p&gt;But as we slowly broaden our scope and venture into the real world, navigating unpredictable variables from complex software, proprietary hardware, and a little thing called &amp;quot;physics&amp;quot;, we quickly lose this privilege.&lt;/p&gt;
&lt;p&gt;How can we use Python and SVGs to speed up and fortify this process, and what can the real world of fabrication with laser cutting teach us regarding software design?&lt;/p&gt;
&lt;p&gt;By the end of the talk, you'll have a basic understanding of how to cleanly design SVGs and SVG paths with the assistance of Python. You'll also understand (more than want to know about) laser cutting, and some suggested learnings regarding software design.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Kohilas</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/svgs-lasers-reality-and-you.html</guid><category>North Bay Python 2023</category></item><item><title>Teaching with Jupyter</title><link>https://pyvideo.org/north-bay-python-2023/teaching-with-jupyter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter has a well-deserved reputation for being a research tool. The same properties that make it well suited for research make it a powerful tool for hands-on teaching. Whether it is abstract math, computer science, software development, physics, or many other subjects, Jupyter can be a powerful tool for teaching with integrated hands-on exercises.&lt;/p&gt;
&lt;p&gt;The talk will show how JupyterLab can be used both for assigning independent work as well as to help follow along with traditional frontal teaching. It will cover concrete examples from math, software development, and physics, to show how to put it into practice.&lt;/p&gt;
&lt;p&gt;The talk will also cover how to export Jupyter notebooks in a way suitable for students to download them and how to use Jupyter to grade work assigned as notebooks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/teaching-with-jupyter.html</guid><category>North Bay Python 2023</category></item><item><title>Two Kinds of Scripting: What Writing Plays Has Taught Me About Writing Python Programs</title><link>https://pyvideo.org/north-bay-python-2023/two-kinds-of-scripting-what-writing-plays-has-taught-me-about-writing-python-programs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s a set of instructions, describing a series of actions to be taken or events that should happen. It’s written with specialized syntax and formatting. You want it to be efficient; you don’t want it to bog down. It doesn’t reach its full potential until you run through it, start to finish, without error.&lt;/p&gt;
&lt;p&gt;Am I talking about a play script, or a Python program?&lt;/p&gt;
&lt;p&gt;&amp;quot;Two Kinds of Scripting&amp;quot; explores the surprising and thought-provoking connections between writing code and writing plays, from the perspective of a Bay Area software engineer with a degree in drama from a liberal arts college and two decades of playwriting experience. It will discuss how structuring and plotting a play is like structuring a computer program; the way that a knowledge of Method Acting can help you figure out to name your Python methods; and how stage directions are just as controversial among theater folks as code comments are among engineers. Finally, the talk will discuss some things that playwrights could learn from the engineering world, including version control and better feedback/&amp;quot;debugging&amp;quot; techniques.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marissa Skudlarek</dc:creator><pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-30:/north-bay-python-2023/two-kinds-of-scripting-what-writing-plays-has-taught-me-about-writing-python-programs.html</guid><category>North Bay Python 2023</category></item></channel></rss>