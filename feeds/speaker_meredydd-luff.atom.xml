<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Meredydd Luff</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_meredydd-luff.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Anvil Full Stack Web with Nothing but Python</title><link href="https://pyvideo.org/djangocon-europe-2021/anvil-full-stack-web-with-nothing-but-python.html" rel="alternate"></link><published>2021-06-03T00:00:00+00:00</published><updated>2021-06-03T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2021-06-03:/djangocon-europe-2021/anvil-full-stack-web-with-nothing-but-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a modern web app requires &lt;em&gt;so much&lt;/em&gt;: HTML, CSS, JS, Python, SQL, React, Bootstrap, Webpack...and Django, of course ;). What if we could build a better abstraction?&lt;/p&gt;
&lt;p&gt;Our answer is Anvil: a full-stack Python environment where everything is a Python object, from your UI components to your database …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a modern web app requires &lt;em&gt;so much&lt;/em&gt;: HTML, CSS, JS, Python, SQL, React, Bootstrap, Webpack...and Django, of course ;). What if we could build a better abstraction?&lt;/p&gt;
&lt;p&gt;Our answer is Anvil: a full-stack Python environment where everything is a Python object, from your UI components to your database rows. In this talk, I'll walk you through how and why we constructed this new approach to the web.&lt;/p&gt;
&lt;p&gt;We'll start with a question: Why is web programming hard? It's because your data takes so many forms: database rows, Python objects, JSON on REST, JS objects, HTML DOM, and finally pixels. Most of a web developer's job is translating between these awkwardly different  representations. Frameworks like Django help, but now you have a stack of leaky abstractions: web frameworks, ORMs, JS frameworks, CSS frameworks, build tools... These frameworks help you go faster, but they double the amount you need to know!&lt;/p&gt;
&lt;p&gt;So I'll show our stab at an answer: A framework where everything is a Python object, requests to the server are function calls, and Python is a browser-side language. I'll talk about running Python in the browser. I'll talk about full-stack autocompletion. There will even be live coding.&lt;/p&gt;
&lt;p&gt;And then I'll talk about how it breaks. Because every abstraction breaks, and this abstraction is bigger than most. So I'll touch on what it means to go down with the ship, to use an ejector seat, or to open an escape hatch.&lt;/p&gt;
&lt;p&gt;Join me for a rollicking tour of a new way to approach the web!&lt;/p&gt;
</content><category term="DjangoCon Europe 2021"></category><category term="Django"></category><category term="DjangoConEU"></category><category term="djangoconeu2021"></category></entry><entry><title>Full Stack Web with Nothing but Python: How Anvil Works</title><link href="https://pyvideo.org/pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-08-17:/pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Programming for the Web requires 5 languages and 5+ frameworks. Wouldn’t it be easier if we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Programming for the Web requires 5 languages and 5+ frameworks. Wouldn’t it be easier if we could do it all in Python?&lt;/p&gt;
&lt;p&gt;Meredydd will discuss how he built Anvil, a tool for building full-stack web apps with nothing but Python. Topics include compiling Python to JS, how autocompletion works, capability-based security, and why true accessibility means more than “usable by beginners”.&lt;/p&gt;
&lt;p&gt;Abstract
Modern Web programming is a usability nightmare. A typical web app translates every action, and every piece of data, into six different representations (Database, server-side model, JSON, client-side model, HTML DOM, and pixels). To navigate this complexity requires five different programming languages and five or more separate frameworks, just to get to “Hello, World”. And that’s before you fire up Webpack and friends! Is this complexity really necessary?&lt;/p&gt;
&lt;p&gt;In this talk, Meredydd will discuss how he built Anvil, a system for web programming in which one language (Python) and one representation (Python objects) can express the entirety of a web app. This allows us to bring back lost luxuries from the 1990s, like drag-and-drop component design and end-to-end autocompletion.&lt;/p&gt;
&lt;p&gt;He will discuss in detail why and how Anvil was built, including:&lt;/p&gt;
&lt;p&gt;Why the modern Web is so hard to program for
How we compile Python to Javascript for front-end code
How capability-based access control lets you avoid plumbing every action through five layers of your stack
How Anvil’s end-to-end Python autocompleter works
Why code is good, and why true accessibility means more than just “usable by beginners”&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/Yrkj5"&gt;https://t.ly/Yrkj5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Meredydd has been programming since the halcyon days of Visual Basic. He holds a PhD in the usability of programming systems from the University of Cambridge, and has a few years’ frustration with the Web platform to get off his chest. This led him to co-create Anvil.&lt;/p&gt;
&lt;p&gt;He has contributed to open source since high school, and is currently a core maintainer of the Skulpt Python-to-Javascript compiler. In his spare time, he dances (he has competed for England) and flies light aircraft.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Writing Better Documentation for Developers</title><link href="https://pyvideo.org/pycon-india-2021/writing-better-documentation-for-developers.html" rel="alternate"></link><published>2021-09-18T00:00:00+00:00</published><updated>2021-09-18T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2021-09-18:/pycon-india-2021/writing-better-documentation-for-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Writing Better Documentation for Developers - Meredydd Luff&lt;/p&gt;
&lt;p&gt;This talk was presented at PyCon India 2021 Online.&lt;/p&gt;
&lt;p&gt;PyCon India is the largest gathering of Pythonistas in India for the Python programming language.
The 13th edition of PyCon India took place online from 17th Sept to 20th Sept 2021.&lt;/p&gt;
&lt;p&gt;Talk …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Writing Better Documentation for Developers - Meredydd Luff&lt;/p&gt;
&lt;p&gt;This talk was presented at PyCon India 2021 Online.&lt;/p&gt;
&lt;p&gt;PyCon India is the largest gathering of Pythonistas in India for the Python programming language.
The 13th edition of PyCon India took place online from 17th Sept to 20th Sept 2021.&lt;/p&gt;
&lt;p&gt;Talk Detail: &lt;a class="reference external" href="https://in.pycon.org/cfp/2021/proposals/writing-better-documentation-for-developers~epY8N/"&gt;https://in.pycon.org/cfp/2021/proposals/writing-better-documentation-for-developers~epY8N/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click here to subscribe to the PyCon India channel: &lt;a class="reference external" href="https://www.youtube.com/user/inpycon?sub_confirmation=1"&gt;https://www.youtube.com/user/inpycon?sub_confirmation=1&lt;/a&gt;
Follow PyCon India on Twitter: &lt;a class="reference external" href="https://twitter.com/pyconindia"&gt;https://twitter.com/pyconindia&lt;/a&gt;
Follow PyCon India on Facebook: &lt;a class="reference external" href="https://www.facebook.com/PyConIndia/"&gt;https://www.facebook.com/PyConIndia/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon India 2021"></category><category term="PyConIndia"></category><category term="PyConIndia2021"></category></entry><entry><title>Anvil: Full-stack Web Apps with Nothing but Python</title><link href="https://pyvideo.org/pycon-sk-2019/anvil-full-stack-web-apps-with-nothing-but-python.html" rel="alternate"></link><published>2019-03-22T00:00:00+00:00</published><updated>2019-03-22T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-03-22:/pycon-sk-2019/anvil-full-stack-web-apps-with-nothing-but-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building for the modern web is complicated and error-prone: a typical
web app requires five different languages and four or five frameworks
just to get started. Wouldn't it be nicer if we could do it all in
Python? With Anvil, you can design your page visually, write your
browser-side …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building for the modern web is complicated and error-prone: a typical
web app requires five different languages and four or five frameworks
just to get started. Wouldn't it be nicer if we could do it all in
Python? With Anvil, you can design your page visually, write your
browser-side and server-side code in pure Python, and even set up a
built-in database in seconds. In this talk, Meredydd will walk us
through how Anvil works under the bonnet, and the challenges of building
a programming system that's easy to use without sacrificing power.&lt;/p&gt;
</content><category term="PyCon SK 2019"></category></entry><entry><title>Lightning Talks Saturday Evening 2018-05-12</title><link href="https://pyvideo.org/pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Caleb Collins-Parks</name></author><id>tag:pyvideo.org,2018-05-12:/pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=00m10s"&gt;00:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caleb Collins-Parks&lt;/td&gt;
&lt;td&gt;AREPL - A real-time python evaluator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=04m35s"&gt;04:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Michael Foord&lt;/td&gt;
&lt;td&gt;Abstractions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=10m27s"&gt;10:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Turicas (Álvaro) Justen&lt;/td&gt;
&lt;td&gt;Roasting Coffee with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=16m27s"&gt;16:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Viktorin&lt;/td&gt;
&lt;td&gt;Blinky's Async Adventure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=22m17s"&gt;22:17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Type Hint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=26m25s"&gt;26:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Scott Sanderson&lt;/td&gt;
&lt;td&gt;A Class is a Poor Man's …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=00m10s"&gt;00:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caleb Collins-Parks&lt;/td&gt;
&lt;td&gt;AREPL - A real-time python evaluator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=04m35s"&gt;04:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Michael Foord&lt;/td&gt;
&lt;td&gt;Abstractions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=10m27s"&gt;10:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Turicas (Álvaro) Justen&lt;/td&gt;
&lt;td&gt;Roasting Coffee with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=16m27s"&gt;16:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Viktorin&lt;/td&gt;
&lt;td&gt;Blinky's Async Adventure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=22m17s"&gt;22:17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Type Hint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=26m25s"&gt;26:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Scott Sanderson&lt;/td&gt;
&lt;td&gt;A Class is a Poor Man's...Loop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=31m25s"&gt;31:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Humrich&lt;/td&gt;
&lt;td&gt;RIP HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=36m08s"&gt;36:08&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Downey&lt;/td&gt;
&lt;td&gt;Modeling and Simulation in Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=40m00s"&gt;40:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Mitev&lt;/td&gt;
&lt;td&gt;Python in Arch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=44m53s"&gt;44:53&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steven C. Howell&lt;/td&gt;
&lt;td&gt;Bayesian Hacking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=50m47s"&gt;50:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;James Bennett Saxon&lt;/td&gt;
&lt;td&gt;Code Lives &amp;amp; Things can happen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=56m42s"&gt;56:42&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Andrés García García&lt;/td&gt;
&lt;td&gt;Why should we care about Processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=61:40"&gt;1:01:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Meredydd Luff&lt;/td&gt;
&lt;td&gt;Making the web more pythonic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=67:10"&gt;1:07:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kenneth Reitz&lt;/td&gt;
&lt;td&gt;Running for the board﻿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="PyCon US 2018"></category><category term="lightning talks"></category></entry><entry><title>Writing Good Documentation for Developers</title><link href="https://pyvideo.org/pycon-us-2021/writing-good-documentation-for-developers.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/writing-good-documentation-for-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're building something for developers, you want it to get used. This means your potential users need to find your library, framework, or API. They need to work out whether it's useful for them, learn how to use it, and solve problems they encounter along the way. All …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're building something for developers, you want it to get used. This means your potential users need to find your library, framework, or API. They need to work out whether it's useful for them, learn how to use it, and solve problems they encounter along the way. All these things depend on your developer docs!&lt;/p&gt;
&lt;p&gt;Docs aren't just docs: They're your UI, your marketing, and they - not your code - define what your product is.&lt;/p&gt;
&lt;p&gt;This talk talk about important functions of your docs that you might not think about, and then some particular pitfalls of documenting things for developers.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://drive.google.com/file/d/1K93TsQ4s39X70vvzckPpdke7srzMTXZ6/view"&gt;https://drive.google.com/file/d/1K93TsQ4s39X70vvzckPpdke7srzMTXZ6/view&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Building a Python Code Completer</title><link href="https://pyvideo.org/pycon-us-2022/building-a-python-code-completer.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/building-a-python-code-completer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code completion is almost magic, and it makes writing code feel so good. But how does it actually work? I built a code completion engine from scratch - and in this talk, I'll tell you its secrets.&lt;/p&gt;
&lt;p&gt;We'll learn how Python parses and compiles code, what an AST is, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code completion is almost magic, and it makes writing code feel so good. But how does it actually work? I built a code completion engine from scratch - and in this talk, I'll tell you its secrets.&lt;/p&gt;
&lt;p&gt;We'll learn how Python parses and compiles code, what an AST is, and how we can use this knowledge to work out what a programmer might type next. And to prove it's not that complicated, I'll build a little code completer, live on stage, in about five minutes.&lt;/p&gt;
&lt;p&gt;I'll also talk about how code completion is like games programming, how we should broaden our thinking about &amp;quot;types&amp;quot; in Python, and how we can use information that isn't in your code to make coding even more satisfying.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Anvil</title><link href="https://pyvideo.org/python-frederick/anvil.html" rel="alternate"></link><published>2019-01-09T00:00:00+00:00</published><updated>2019-01-09T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-01-09:/python-frederick/anvil.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Meredydd gave a talk about Anvil to Python Frederick, a Python user group in Frederick, MD. Thanks for joining us!&lt;/p&gt;
</content><category term="Python Frederick"></category><category term="anvil"></category><category term="webapp"></category></entry><entry><title>Full-Stack Web with Nothing But Python: A Deep Dive into Anvil</title><link href="https://pyvideo.org/python-web-conf-2020/full-stack-web-with-nothing-but-python-a-deep-dive-into-anvil.html" rel="alternate"></link><published>2020-06-18T00:00:00+00:00</published><updated>2020-06-18T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2020-06-18:/python-web-conf-2020/full-stack-web-with-nothing-but-python-a-deep-dive-into-anvil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Full-Stack Web with Nothing But Python: A Deep Dive into Anvil&amp;quot; by: Meredydd Luff&lt;/p&gt;
&lt;p&gt;The Web stack is famously complicated, with a huge number of languages and libraries for even a simple app. What if, instead, we could do it all in Python?
I'll be taking a deep dive …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Full-Stack Web with Nothing But Python: A Deep Dive into Anvil&amp;quot; by: Meredydd Luff&lt;/p&gt;
&lt;p&gt;The Web stack is famously complicated, with a huge number of languages and libraries for even a simple app. What if, instead, we could do it all in Python?
I'll be taking a deep dive into Anvil, an open-source framework for building full-stack web-apps with nothing but Python. That means Python in the browser, Python on the server, Python for the database - even a Python UI toolkit! I'll be digging into how Anvil works, but &lt;em&gt;why&lt;/em&gt; it's so important to bring Pythonic values to the full web stack.&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry><entry><title>Ejector Seats and Escape Hatches: Designing Your API to Fail</title><link href="https://pyvideo.org/python-web-conf-2021/ejector-seats-and-escape-hatches-designing-your-api-to-fail.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/ejector-seats-and-escape-hatches-designing-your-api-to-fail.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Ejector Seats and Escape Hatches: Designing Your API to Fail&amp;quot; by: Meredydd Luff
I hate to break it to you: Your API design isn't perfect. Whatever abstraction you create, it will leak, and it will fail. I don't mean throwing errors; I mean something worse: building an API that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Ejector Seats and Escape Hatches: Designing Your API to Fail&amp;quot; by: Meredydd Luff
I hate to break it to you: Your API design isn't perfect. Whatever abstraction you create, it will leak, and it will fail. I don't mean throwing errors; I mean something worse: building an API that doesn't allow what your users need to do.
We've got this problem big-style at Anvil, where we're simplifying web development by letting you build &lt;em&gt;everything&lt;/em&gt;  in Python - including the UI and browser-side code. It's a challenge: the existing HTML/JS/CSS/framework ecosystem is fiendishly complex, and so huge that we can't possibly cover everything in a nice, Pythonic API - however carefully we design it.
So we need to design our APIs to fail - and to fail well. In this talk, I'll be asking:
- How do abstractions fail?
- What happens when your abstraction prevents a user from doing what they need?
- What are common strategies &amp;quot;in the wild&amp;quot;? Do you go down with the ship? Do you eject? Or can you build a real escape hatch?&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry><entry><title>Writing Better Documentation for Developers</title><link href="https://pyvideo.org/python-web-conf-2022/writing-better-documentation-for-developers.html" rel="alternate"></link><published>2022-03-24T00:00:00+00:00</published><updated>2022-03-24T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2022-03-24:/python-web-conf-2022/writing-better-documentation-for-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’re building something for developers, you want it to get used. This means your potential users need to find your library, framework, or API. They need to work out whether it’s useful for them, learn how to use it, and solve problems they encounter along the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’re building something for developers, you want it to get used. This means your potential users need to find your library, framework, or API. They need to work out whether it’s useful for them, learn how to use it, and solve problems they encounter along the way. All these things depend on your developer docs!&lt;/p&gt;
&lt;p&gt;This talk is about important functions of your developer docs that you might not think about, some particular pitfalls of documenting things for developers, and how we can make things better.&lt;/p&gt;
&lt;p&gt;Did you know that:
* Your docs are content marketing? Your prospective users are out there, Googling “how to [what your project does]”, and your docs are the answer.
* Your docs define your product? When a developer is evaluating your project, this is what they’re reading, not your glossy website.
* Your docs are your user interface? Developers using your API aren’t looking at your website - they’re looking at your docs, and their code.&lt;/p&gt;
&lt;p&gt;So let’s look at some “dos and don’ts”:
* Do know what type of doc you’re writing. Tutorials are not the same thing as reference docs. I’ll walk you through a useful framework for thinking about types of documentation.
* Don’t confuse reference docs and API docs. Merely enumerating the classes, methods and functions of your API isn’t enough to describe its behaviour. I’ll explain why it’s tempting, and why it’s a bad idea!
* Do make it easy to navigate between types of documentation. Your user is on a journey, from “what should I use?” to “how do I use it?” to “what arguments does this function take?”. Make it easy for them.
* Do talk to your users. They will tell you where the weaknesses in your docs are. Even better: have a public Q&amp;amp;A forum, where deficiencies in your documentation get found and filled in, and the long tail takes care of itself.&lt;/p&gt;
&lt;p&gt;I hope to convince you that your docs are your UI, your marketing and the definition of your product - and that it’s worth acting like it!&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</content><category term="Python Web Conf 2022"></category><category term="PythonWebConf"></category><category term="PythonWebConf2022"></category></entry></feed>