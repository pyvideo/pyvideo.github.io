<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_meredydd-luff.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-17T00:00:00+00:00</updated><entry><title>Full Stack Web with Nothing but Python: How Anvil Works</title><link href="https://pyvideo.org/pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-08-17:pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Programming for the Web requires 5 languages and 5+ frameworks. Wouldn’t it be easier if we could do it all in Python?&lt;/p&gt;
&lt;p&gt;Meredydd will discuss how he built Anvil, a tool for building full-stack web apps with nothing but Python. Topics include compiling Python to JS, how autocompletion works, capability-based security, and why true accessibility means more than “usable by beginners”.&lt;/p&gt;
&lt;p&gt;Abstract
Modern Web programming is a usability nightmare. A typical web app translates every action, and every piece of data, into six different representations (Database, server-side model, JSON, client-side model, HTML DOM, and pixels). To navigate this complexity requires five different programming languages and five or more separate frameworks, just to get to “Hello, World”. And that’s before you fire up Webpack and friends! Is this complexity really necessary?&lt;/p&gt;
&lt;p&gt;In this talk, Meredydd will discuss how he built Anvil, a system for web programming in which one language (Python) and one representation (Python objects) can express the entirety of a web app. This allows us to bring back lost luxuries from the 1990s, like drag-and-drop component design and end-to-end autocompletion.&lt;/p&gt;
&lt;p&gt;He will discuss in detail why and how Anvil was built, including:&lt;/p&gt;
&lt;p&gt;Why the modern Web is so hard to program for
How we compile Python to Javascript for front-end code
How capability-based access control lets you avoid plumbing every action through five layers of your stack
How Anvil’s end-to-end Python autocompleter works
Why code is good, and why true accessibility means more than just “usable by beginners”&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/Yrkj5"&gt;https://t.ly/Yrkj5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Meredydd has been programming since the halcyon days of Visual Basic. He holds a PhD in the usability of programming systems from the University of Cambridge, and has a few years’ frustration with the Web platform to get off his chest. This led him to co-create Anvil.&lt;/p&gt;
&lt;p&gt;He has contributed to open source since high school, and is currently a core maintainer of the Skulpt Python-to-Javascript compiler. In his spare time, he dances (he has competed for England) and flies light aircraft.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</summary></entry><entry><title>Anvil</title><link href="https://pyvideo.org/python-frederick/anvil.html" rel="alternate"></link><published>2019-01-09T00:00:00+00:00</published><updated>2019-01-09T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-01-09:python-frederick/anvil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Meredydd gave a talk about Anvil to Python Frederick, a Python user group in Frederick, MD. Thanks for joining us!&lt;/p&gt;
</summary><category term="anvil"></category><category term="webapp"></category></entry><entry><title>Anvil: Full-stack Web Apps with Nothing but Python</title><link href="https://pyvideo.org/pycon-sk-2019/anvil-full-stack-web-apps-with-nothing-but-python.html" rel="alternate"></link><published>2019-03-22T00:00:00+00:00</published><updated>2019-03-22T00:00:00+00:00</updated><author><name>Meredydd Luff</name></author><id>tag:pyvideo.org,2019-03-22:pycon-sk-2019/anvil-full-stack-web-apps-with-nothing-but-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building for the modern web is complicated and error-prone: a typical
web app requires five different languages and four or five frameworks
just to get started. Wouldn't it be nicer if we could do it all in
Python? With Anvil, you can design your page visually, write your
browser-side and server-side code in pure Python, and even set up a
built-in database in seconds. In this talk, Meredydd will walk us
through how Anvil works under the bonnet, and the challenges of building
a programming system that's easy to use without sacrificing power.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks Saturday Evening 2018-05-12</title><link href="https://pyvideo.org/pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Caleb Collins-Parks</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/lightning-talks-saturday-evening-2018-05-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=00m10s"&gt;00:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caleb Collins-Parks&lt;/td&gt;
&lt;td&gt;AREPL - A real-time python evaluator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=04m35s"&gt;04:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Michael Foord&lt;/td&gt;
&lt;td&gt;Abstractions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=10m27s"&gt;10:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Turicas (Álvaro) Justen&lt;/td&gt;
&lt;td&gt;Roasting Coffee with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=16m27s"&gt;16:27&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Viktorin&lt;/td&gt;
&lt;td&gt;Blinky's Async Adventure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=22m17s"&gt;22:17&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;Type Hint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=26m25s"&gt;26:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Scott Sanderson&lt;/td&gt;
&lt;td&gt;A Class is a Poor Man's...Loop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=31m25s"&gt;31:25&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Humrich&lt;/td&gt;
&lt;td&gt;RIP HTTP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=36m08s"&gt;36:08&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Downey&lt;/td&gt;
&lt;td&gt;Modeling and Simulation in Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=40m00s"&gt;40:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Petr Mitev&lt;/td&gt;
&lt;td&gt;Python in Arch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=44m53s"&gt;44:53&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Steven C. Howell&lt;/td&gt;
&lt;td&gt;Bayesian Hacking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=50m47s"&gt;50:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;James Bennett Saxon&lt;/td&gt;
&lt;td&gt;Code Lives &amp;amp; Things can happen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=56m42s"&gt;56:42&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Andrés García García&lt;/td&gt;
&lt;td&gt;Why should we care about Processing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=61:40"&gt;1:01:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Meredydd Luff&lt;/td&gt;
&lt;td&gt;Making the web more pythonic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=c-I0md_3fbQ&amp;amp;t=67:10"&gt;1:07:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Kenneth Reitz&lt;/td&gt;
&lt;td&gt;Running for the board﻿&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry></feed>