<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 30 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Managing dependencies of Python projects</title><link>https://pyvideo.org/pycon-de-2016/managing-dependencies-of-python-projects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python package distribution ecosystem has improved a lot in recent years. Different methodologies and tooling have emerged to help deal with defining and installing the dependencies of a Python project, be it a library, a framework or a final product.The tools, techniques and approaches available scale up with varying levels of efficiency and success. In the Aldryn infrastructure, we deal with huge numbers of deployments, that need to be fast and repeatable. I'll discuss how we dealt with dependency management challenges, the lessons learnt and tools developed. These lessons are valuable and applicable even if you only need to deal with a few - rather than a few thousand - Python deployments. Getting dependency management right will help ensure your projects work now and in the future, across multiple installs or deployments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Stoppani</dc:creator><pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-30:pycon-de-2016/managing-dependencies-of-python-projects.html</guid></item></channel></rss>