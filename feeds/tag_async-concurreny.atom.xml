<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - ASYNC / Concurreny</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_async-concurreny.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>An ASGI Server from scratch</title><link href="https://pyvideo.org/europython-2020/an-asgi-server-from-scratch.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/an-asgi-server-from-scratch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people who've read about asyncio, coroutines, etc and want to see them used in practice.&lt;/p&gt;
&lt;p&gt;This is a tutorial on how to build a HTTP/1 ASGI server using asyncio. I plan to start by building a TCP echo server and then add HTTP parsing and ASGI compliance.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Web"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Ensuring data integrity with asynchronous programming in a cloud IoT core</title><link href="https://pyvideo.org/europython-2020/ensuring-data-integrity-with-asynchronous-programming-in-a-cloud-iot-core.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Theofanis Petkos</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/ensuring-data-integrity-with-asynchronous-programming-in-a-cloud-iot-core.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python3.6, AsyncIO, Flask, RabbitMQ. A simple and powerful combination for IoT data integrity.&lt;/p&gt;
&lt;p&gt;Undoubtedly this will be the decade of low-cost and high-performance cloud IoT core development.
All cloud IoT solutions will have to meet the same two fundamental requirements: Performance and Data Integrity. Having said that,  AsyncIO …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python3.6, AsyncIO, Flask, RabbitMQ. A simple and powerful combination for IoT data integrity.&lt;/p&gt;
&lt;p&gt;Undoubtedly this will be the decade of low-cost and high-performance cloud IoT core development.
All cloud IoT solutions will have to meet the same two fundamental requirements: Performance and Data Integrity. Having said that,  AsyncIO comes to mind.
While researching similar topics on cloud IoT solutions, we noticed that the vast majority of such solutions primarily includes performance. In this discussion we would like to demonstrate how you can ensure that a low-cost, fast developed cloud IoT core can ensure that its data is not corrupted and is accurate  for the user.
Technically speaking, it is very interesting to analyze how a bucket of async/await tasks can handle (consume or even produce) messages from or to message queues, interact with other (even non pythonic) modules inside the core, manage socket connections and many other functionalities that make Python3.6+ the heart of any IoT core. Note that it is equally important to check imported data with periodic tasks, acquire statistics from devices and sanitize database data in order to ensure data integrity.
Our goal: Firstly, to encourage new developers to get involved with cloud IoT cores and use Python and AsyncIO as the heart of their core. Secondly, as new developers we would like to show our logic and our prefered python libraries and techniques in order to receive feedback from more experienced developers.
We are a team of software engineers located in Athens, Greece working for a fast growing startup in San Francisco (&lt;a class="reference external" href="https://www.veturilo.io"&gt;https://www.veturilo.io&lt;/a&gt;). We have developed our own cloud IoT core for a vehicle fleet management SaaS.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Internet of Things (IoT)"></category><category term="Python 3"></category><category term="Software Design"></category><category term="Use Case"></category></entry><entry><title>Flasync Await</title><link href="https://pyvideo.org/europython-2020/flasync-await.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>David Bordeynik</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/flasync-await.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is all the rage, mostly because it simplifies waiting for an operation that takes some time to finish. Python went all in on asyncio by changing the language to support it (async/await) iIn this microservices era where many of the applications we develop consume several 3rd party …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is all the rage, mostly because it simplifies waiting for an operation that takes some time to finish. Python went all in on asyncio by changing the language to support it (async/await) iIn this microservices era where many of the applications we develop consume several 3rd party API services, async is the fast track to success. In this talk, I’ll demonstrate the benefits of going async for a web application, justify choosing Sanic over other web frameworks like aiohttp. I’ll do so by transforming a Flask backed application to a Sanic backed application. Finally, I’ll provide tips &amp;amp; tricks from my experience on measuring, monitoring and testing async code.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Abstractions"></category><category term="Best Practice"></category><category term="Web"></category></entry><entry><title>gRPC Python, C Extensions, and AsyncIO</title><link href="https://pyvideo.org/europython-2020/grpc-python-c-extensions-and-asyncio.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Lidi Zheng</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/grpc-python-c-extensions-and-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make AsyncIO work with the gRPC Core&lt;/p&gt;
&lt;p&gt;Goal - Encourage Python developers to understand C extensions by sharing gRPC Python’s practice, and advocate the adoption of AsyncIO.&lt;/p&gt;
&lt;p&gt;Prerequisite
- Understand thread vs. process;
- Interested in asynchronous programming.&lt;/p&gt;
&lt;p&gt;gRPC Brief
- What’s gRPC Core? And what is gRPC Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make AsyncIO work with the gRPC Core&lt;/p&gt;
&lt;p&gt;Goal - Encourage Python developers to understand C extensions by sharing gRPC Python’s practice, and advocate the adoption of AsyncIO.&lt;/p&gt;
&lt;p&gt;Prerequisite
- Understand thread vs. process;
- Interested in asynchronous programming.&lt;/p&gt;
&lt;p&gt;gRPC Brief
- What’s gRPC Core? And what is gRPC Python?&lt;/p&gt;
&lt;p&gt;Cython To The Rescue
- Why we picked Cython among all other available tools (e.g., pybind11, ctypes)
- Debuggability: pdb &amp;amp; gdb&lt;/p&gt;
&lt;p&gt;The GIL Friction
- How to delegate work to C extension
- How to make multithreading work&lt;/p&gt;
&lt;p&gt;AsyncIO Topic
- Not blocking the loop, the main headache.
- Non-blocking I/O solution 1: replacing C libraries’ I/O operations
- Non-blocking I/O solution 2: dedicated background poller thread
- Performance improvement (10k -&amp;gt; 20k for client, 4k -&amp;gt; 16k for server)&lt;/p&gt;
&lt;p&gt;Migration to AsyncIO
- Tolerate multithreading and AsyncIO in the same application
- Make both API co-existable in the same application&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="CPython"></category><category term="Cython"></category><category term="Performance"></category></entry><entry><title>Real Time Stream Processing for Machine Learning at Massive Scale</title><link href="https://pyvideo.org/europython-2020/real-time-stream-processing-for-machine-learning-at-massive-scale.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alejandro Saucedo</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/real-time-stream-processing-for-machine-learning-at-massive-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Massively Parallel Stream of Data with Python (+ Kafka, SKlearn, SpaCy and Seldon)&lt;/p&gt;
&lt;p&gt;This talk will provide a practical insight on how to build scalable data streaming machine learning pipelines to process large datasets in real time using Python and popular frameworks such as Kafka, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Massively Parallel Stream of Data with Python (+ Kafka, SKlearn, SpaCy and Seldon)&lt;/p&gt;
&lt;p&gt;This talk will provide a practical insight on how to build scalable data streaming machine learning pipelines to process large datasets in real time using Python and popular frameworks such as Kafka, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We will be covering a case study performing automated content moderation on Reddit comments in real time. Our dataset will consist of 200k reddit comments from /r/science, 50,000 of which have been removed by moderators. We will be handling the stream data in a Kubernetes cluster, and the stream processing will be handled using the stream processing library Kafka. We will be running the end-to-end pipeline in Kubernetes with various components legeraging SKLearn, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We will then dive into fundamental concepts on stream processing such as windows, watermarking and checkponting, and we will show how to use each of these frameworks to build complex data streaming pipelines that can perform real time processing at scale by building, deploying and monitoring a machine learning model which will process production incoming data..&lt;/p&gt;
&lt;p&gt;Finally we will show best practices when using these frameworks, as well as a high level overview of tools that can be used for monitoring in-depth.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Best Practice"></category><category term="Big Data"></category><category term="Distributed Systems"></category><category term="Scientific Libraries (Numpy/Pandas/SciKit/...)"></category></entry><entry><title>Speed Up Your Data Processing</title><link href="https://pyvideo.org/europython-2020/speed-up-your-data-processing.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Chin Hwee Ong</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/speed-up-your-data-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parallel and Asynchronous Programming in Data Science&lt;/p&gt;
&lt;p&gt;In a data science project, one of the biggest bottlenecks (in terms of time) is the constant wait for the data processing code to finish executing. Slow code, as well as connectivity issues, affect every step of a typical data science workflow …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parallel and Asynchronous Programming in Data Science&lt;/p&gt;
&lt;p&gt;In a data science project, one of the biggest bottlenecks (in terms of time) is the constant wait for the data processing code to finish executing. Slow code, as well as connectivity issues, affect every step of a typical data science workflow — be it for network I/O operations or computation-driven workloads. In this talk, I will be sharing about common bottlenecks in data processing within a typical data science workflow, and exploring the use of parallel and asynchronous programming using concurrent.futures module in Python to speed up your data processing pipelines so that you could focus more on getting value out of your data. Through real-life analogies, you will learn about:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sequential vs parallel processing,&lt;/li&gt;
&lt;li&gt;Synchronous vs asynchronous execution,&lt;/li&gt;
&lt;li&gt;Network I/O operations vs computation-driven workloads in a data science workflow,&lt;/li&gt;
&lt;li&gt;When is parallelism and asynchronous programming a good idea,&lt;/li&gt;
&lt;li&gt;How to implement parallel and asynchronous programming using concurrent.futures module to speed up your data processing pipelines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This talk assumes basic understanding of data pipelines and data science workflows. While the main target audience are data scientists and engineers building data pipelines, the talk is designed such that anyone with a basic understanding of the Python language would be able to understand the illustrated concepts and use cases.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Data"></category><category term="Data Science"></category><category term="Multi-Processing"></category><category term="Multi-Threading"></category></entry></feed>