<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ramesh-sampath.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-24T00:00:00+00:00</updated><entry><title>Building a Tic-Tac-Toe Two-Player Game using Tornado over Websockets</title><link href="https://pyvideo.org/pybay-2016/building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Ramesh Sampath</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build a Two-player game using Python Tornado web framework. We will be using websockets to make the app realtime.
â€‹
Abstract
We will live code and learn how to build a real-time game app using Tornado web framework and websockets. Through this app, we will learn how to write an web app using Tornado web framework (&lt;a class="reference external" href="http://www.tornadoweb.org/"&gt;http://www.tornadoweb.org/&lt;/a&gt;), and how to communicate over websockets. We will be building a Tic-Tac-Toe two-player game to learn about these concepts. A player can start a new game or accept a challenge from another player.&lt;/p&gt;
&lt;p&gt;When a player starts a new game, the app would create a new game channel, provide a handle to the channel that the player can send to his friend to join in and play. We will not be dealing with any authentication or logins to start a new game or to join an existing one. The goal is to show how easy it's to build an realtime app with Tornado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Ramesh loves building data products that blend visualization and machine learning. He mostly uses Flask / Tornado to create web apps, Pandas / Scikit-learn for build machine learning models and D3 for visualizations&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/ramesh-sampath-building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets"&gt;https://speakerdeck.com/pybay2016/ramesh-sampath-building-a-tic-tac-toe-two-player-game-using-tornado-over-websockets&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Build Data Apps by Deploying ML Models as API Services</title><link href="https://pyvideo.org/pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html" rel="alternate"></link><published>2016-08-24T00:00:00+00:00</published><updated>2016-08-24T00:00:00+00:00</updated><author><name>Ramesh Sampath</name></author><id>tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016
Ramesh Sampath | Build Data Apps by Deploying ML Models as API Services&lt;/p&gt;
&lt;p&gt;As data scientists, we love building models using IPython Notebooks / Scikit-Learn / Pandas eco-system. But integrating these models with an web app can be a challenge. In this tutorial, we will take our machine learning models and make them available as APIs for use by Web and Mobile Apps. We will also build a simple webapp that uses our prediction service.&lt;/p&gt;
&lt;p&gt;Deploy your ML Models as a Service&lt;/p&gt;
&lt;p&gt;In this talk, we will learn one way to take our Machine Learning models and make them available as a Prediction Service. We will work through the following steps.&lt;/p&gt;
&lt;p&gt;Create a Simple Machine learning Model using Scikit-Learn / Pandas
Pickle the model
Using Tornado Web App, Make this model available as an API Service
Build an Web App that uses this deployed Model
Add Authentication to our Prediction API
Optionally, add Redis to Cache Prediction Results
Deploy the model in the Cloud (AWS)
Please have Anaconda or Miniconda installed on your local machine. I will mostly be using Python 3.5, but Python 2.7 should be fine as well.&lt;/p&gt;
</summary><category term="tutorial"></category><category term="machine learning"></category><category term="scikit-learn"></category><category term="pandas"></category><category term="tornado"></category></entry></feed>