<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ross-kippenbrock.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-30T00:00:00+00:00</updated><entry><title>Finding Lane Lines for Self Driving Cars</title><link href="https://pyvideo.org/pydata-berlin-2017/finding-lane-lines-for-self-driving-cars.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>Ross Kippenbrock</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/finding-lane-lines-for-self-driving-cars.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Self-driving cars might not be in our everyday lives yet, but they are coming! Analyzing images and figuring out where the lane lines are on a given roadway is one of the core competencies of any respectable self-driving car. Humans do this with ease and this talk will show you how to find these lines using Python and OpenCV.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to the OpenCV library (loading images, plotting with matplotlib, etcâ€¦)&lt;/li&gt;
&lt;li&gt;Starting with single images, introduce Gaussian blur, region of interest filtering, canny edge detection, Hough transform and draw the lane lines.&lt;/li&gt;
&lt;li&gt;Create a lane line detection pipeline with those functions; extrapolating the lines to represent the boundaries of the lane.&lt;/li&gt;
&lt;li&gt;Process dash cam video using the single image techniques with the pipeline.&lt;/li&gt;
&lt;li&gt;Stitch together images from the processing pipeline to create a sweet video!&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>