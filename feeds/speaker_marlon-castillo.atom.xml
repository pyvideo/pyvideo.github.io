<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_marlon-castillo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-03T00:00:00+00:00</updated><entry><title>Why Most New Projects Should Implement a Custom User Model</title><link href="https://pyvideo.org/chicago-djangonauts/why-most-new-projects-should-implement-a-custom-u.html" rel="alternate"></link><published>2015-09-03T00:00:00+00:00</published><updated>2015-09-03T00:00:00+00:00</updated><author><name>Marlon Castillo</name></author><id>tag:pyvideo.org,2015-09-03:chicago-djangonauts/why-most-new-projects-should-implement-a-custom-u.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All the Gain with Little of the Pain: Why Most New Projects Should
Implement a Custom User Model -&lt;/p&gt;
&lt;p&gt;Substituting a custom User model for Django's default User model can
seem intimidating. I'll show you a simple 3 step method of implementing
a custom User model for a new project that's actually quite easy to do
and can provide tremendous benefits in flexibility and customization.&lt;/p&gt;
</summary></entry></feed>