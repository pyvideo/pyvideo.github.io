<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_calen-pennington.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-19T00:00:00+00:00</updated><entry><title>Immutable Programming - Writing Functional Python</title><link href="https://pyvideo.org/pycon-us-2017/immutable-programming-writing-functional-python.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Calen Pennington</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/immutable-programming-writing-functional-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world of Haskell and functional programming may seem like a distant
place to many working Python developers, but some of the techniques used
there are remarkably useful when developing in Python.&lt;/p&gt;
&lt;p&gt;In this talk, I will cover some of the pitfalls of mutability that you
may run into while writing Python programs, and some tools and
techniques that Python has built in that will let you avoid them. You'll
see namedtuples, enums and properties, and also some patterns for
structuring immutable programs that will make them easier to build,
extend, and test.&lt;/p&gt;
</summary></entry></feed>