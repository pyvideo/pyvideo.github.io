<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_hugues-lerebours.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-13T00:00:00+00:00</updated><entry><title>Inspect (Or Gadget)</title><link href="https://pyvideo.org/europython-2017/inspect-or-gadget.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Hugues Lerebours</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/inspect-or-gadget.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introspection is often seen as a bad coding practice and as
such a gadget.&lt;/p&gt;
&lt;p&gt;Nevertheless, the Python Standard Library provides different tools
(among them the 'inspect' library) to easily identify a generator,
recover the source code of a function or get a function signature.&lt;/p&gt;
&lt;p&gt;We propose to spend 1/2 hour to dig into what introspection has to offer
to developers, to see what tools are available, what you can get out of
them and some useful use cases that we met in our practice at Criteo.&lt;/p&gt;
</summary></entry></feed>