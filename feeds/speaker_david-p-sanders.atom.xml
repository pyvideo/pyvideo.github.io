<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-p-sanders.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-09T00:00:00+00:00</updated><entry><title>Introduction to Julia - Part 1</title><link href="https://pyvideo.org/scipy-2014/introduction-to-julia-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>David P. Sanders</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/introduction-to-julia-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to the new Julia language from scratch, emphasising
similarities and differences with scientific Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Julia is a new, up-and-coming language that has many similarities to
Python, but some differences. One of its main advantages is the speed
gain obtained by automatically compiling all code (in a somewhat similar
way to &lt;tt class="docutils literal"&gt;PyPy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Cython&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt;, etc.), despite having an
interactive interface very similar to that of Python.&lt;/p&gt;
&lt;p&gt;This will be a tutorial on the basic features of Julia from scratch,
given by a user (rather than a developer) of the language, emphasising
those features which are similar to Python (and hence do not require
much explanation) and those features which are rather different.&lt;/p&gt;
&lt;p&gt;The idea of the tutorial is to give an idea of why there is suddenly
such a buzz around Julia and why it can be useful for certain projects.&lt;/p&gt;
&lt;p&gt;This tutorial is aimed at people who are already familiar with the basic
scientific Python packages; it is not aimed at beginners in scientific
programming.&lt;/p&gt;
</summary><category term="Tech"></category></entry><entry><title>Introduction to Julia - Part 2</title><link href="https://pyvideo.org/scipy-2014/introduction-to-julia-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>David P. Sanders</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/introduction-to-julia-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to the new Julia language from scratch, emphasising
similarities and differences with scientific Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Julia is a new, up-and-coming language that has many similarities to
Python, but some differences. One of its main advantages is the speed
gain obtained by automatically compiling all code (in a somewhat similar
way to &lt;tt class="docutils literal"&gt;PyPy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Cython&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;numba&lt;/tt&gt;, etc.), despite having an
interactive interface very similar to that of Python.&lt;/p&gt;
&lt;p&gt;This will be a tutorial on the basic features of Julia from scratch,
given by a user (rather than a developer) of the language, emphasising
those features which are similar to Python (and hence do not require
much explanation) and those features which are rather different.&lt;/p&gt;
&lt;p&gt;The idea of the tutorial is to give an idea of why there is suddenly
such a buzz around Julia and why it can be useful for certain projects.&lt;/p&gt;
&lt;p&gt;This tutorial is aimed at people who are already familiar with the basic
scientific Python packages; it is not aimed at beginners in scientific
programming.&lt;/p&gt;
</summary><category term="julia"></category></entry><entry><title>The Wonderful World of Scientific Computing with Python</title><link href="https://pyvideo.org/scipy-2014/the-wonderful-world-of-scientific-computing-with.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>David P. Sanders</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/the-wonderful-world-of-scientific-computing-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will give an overview of the basics of the scientific computing
ecosystem with Python: what does each of the fundamental packages
(numpy, matplotlib, scipy, sympy and pandas) do, and how does it work?
We will use the IPython Notebook in our quest to enter this wonderful
world.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting out with scientific computing in Python can be daunting: Where
do I start? What are the basic packages, and what is the use case for
each of them? What are the fundamental ideas I need to understand each
package and how it works?&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use examples of scientific questions and
calculations which lead directly to the need for certain computational
tools as a gateway to understand the basic structure of the scientific
computing ecosystem. The specific packages we will touch on are
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, all
viewed through the wonderful lens of the IPython Notebook.&lt;/p&gt;
</summary><category term="matplotlib"></category><category term="numpy"></category><category term="pandas"></category><category term="scipy"></category><category term="sympy"></category></entry></feed>