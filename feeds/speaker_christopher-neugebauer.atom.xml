<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_christopher-neugebauer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-03T00:00:00+00:00</updated><entry><title>Fantastic Blocks And Where To Hide Them</title><link href="https://pyvideo.org/pycon-au-2019/fantastic-blocks-and-where-to-hide-them.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2019-08-03:pycon-au-2019/fantastic-blocks-and-where-to-hide-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ruby has blocks. JavaScript has blocks. Swift has blocks. Python doesn’t have blocks.In this talk, we'll look at &lt;em&gt;why&lt;/em&gt; Python doesn't have blocks, and recent programming techniques that have developed in languages that &lt;em&gt;do&lt;/em&gt; have blocks. Then we'll look at what we – or Python – can do about it!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/fantastic-blocks-and-where-to-hide-them"&gt;https://2019.pycon-au.org/talks/fantastic-blocks-and-where-to-hide-them&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 14:10:00 2019 at Cockle Bay&lt;/p&gt;
</summary></entry><entry><title>You Don't Need That!</title><link href="https://pyvideo.org/pycon-au-2018/you-dont-need-that.html" rel="alternate"></link><published>2018-08-26T00:00:00+00:00</published><updated>2018-08-26T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2018-08-26:pycon-au-2018/you-dont-need-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Not every design pattern makes sense in Python. This talk builds up design patterns commonly used in enterprise languages, and shows the features in Python that make these approaches unnecessary.&lt;/p&gt;
</summary></entry><entry><title>You Don't Need That!</title><link href="https://pyvideo.org/pyohio-2018/you-dont-need-that.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2018-07-28:pyohio-2018/you-dont-need-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Not every design pattern makes sense in Python. This talk builds up
design patterns commonly used in enterprise languages, and shows the
features in Python that make these approaches unnecessary.&lt;/p&gt;
</summary></entry><entry><title>How we designed an inclusivity-first conference on a shoestring budget and short timeline</title><link href="https://pyvideo.org/pycon-us-2018/how-we-designed-an-inclusivity-first-conference-on-a-shoestring-budget-and-short-timeline.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/how-we-designed-an-inclusivity-first-conference-on-a-shoestring-budget-and-short-timeline.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Christopher Neugebauer, Josh Simmons, Sam Kitajima-Kimbrel&lt;/p&gt;
&lt;p&gt;New conferences rarely have resources to run the sort of outreach and inclusion programs that big conferences have. It’s hard to guess how much money you’ll have to spend, how many attendees you’ll have, and what your new community will look like. With so many things to worry about, it’s no surprise that most events don’t prioritise outreach until they’ve got a few years under their belt, if at all.&lt;/p&gt;
&lt;p&gt;It doesn’t have to be this way, and it can even be easier to build a new event around outreach and inclusion than it is to build it in later on!&lt;/p&gt;
&lt;p&gt;This talk shares the story of North Bay Python’s inaugural conference, which we planned in under 6 months, ran on a $40,000 budget, and built a welcoming community to make it real. We made inclusivity a founding principle and did so without compromising our speaker lineup while still attracting great sponsorship and hosted an event that almost every attendee wants to return to.&lt;/p&gt;
&lt;p&gt;In this talk, we’re going to share with you how we built a conference, from the ground up, to be as inclusive as we could make it. We’ll touch on early organisation, marketing, and on-the ground logistics. Throughout the talk, you’ll learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How we designed a budget that let us prioritise outreach and inclusion activities&lt;/li&gt;
&lt;li&gt;How we built the community that we wanted before the conference even started&lt;/li&gt;
&lt;li&gt;How we ran an event that proved that we meant everything we said&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You too can host a new conference with a great lineup on a shoestring budget and short timeline, and you can do it while being inclusive, welcoming, and putting attendee safety first. Find out how you can have your cake, eat it, and still have lots to share with your new community.&lt;/p&gt;
</summary></entry><entry><title>Python 3 for People Who Haven't Been Paying Attention</title><link href="https://pyvideo.org/pycon-au-2017/python-3-for-people-who-havent-been-paying-attention.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/python-3-for-people-who-havent-been-paying-attention.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2008 — after years of threatening to do so — the Python programming language was forked. Python 3 promised to improve a lot of inconsistency and difficulty in the language, and pave the way for performance improvements and new language features. It also broke backwards compatibility with Python 2.&lt;/p&gt;
&lt;p&gt;For years, Python 3 was a difficult language to adopt: bad porting advice meant that transitioning from Python 2 to Python 3 was difficult. Many key Python libraries also took an awfully long time to be ported to Python 3, which kept projects that depended upon them stuck using Python 2.&lt;/p&gt;
&lt;p&gt;In the last few years, however, Python 3 has finally reached the point where it’s the language that you should be using. Big projects like Django have made the switch and are now stable, which means it’s not only possible, but actually a good idea to start writing new code in Python 3.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at some early missteps in the transition process for Python 3 — we’ll look at language changes that got in the way of making porting to Python 3 an easy process. We’ll look at why the original advice for how to adopt Python 3 was bad, and what the correct way to adopt Python 3 now looks like.&lt;/p&gt;
&lt;p&gt;We’ll also look at the last 8 years of language features that have been added to Python 3, many of which make writing asynchronous code super-easy.&lt;/p&gt;
&lt;p&gt;Python 3 is new, shiny, and ready for you to use. Come and learn why now is the time to make the switch!&lt;/p&gt;
</summary></entry><entry><title>How Django helped us make a better conference website</title><link href="https://pyvideo.org/pycon-au-2017/how-django-helped-us-make-a-better-conference-website.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/how-django-helped-us-make-a-better-conference-website.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last year, PyCon Australia and linux.conf.au have moved away from a monolithic conference management software package – developed in-house over the course of several conferences – to a suite of open source Django apps.&lt;/p&gt;
&lt;p&gt;Making the move to Django allowed linux.conf.au 2017 to pick existing apps that were a best fit for our conference’s needs, and let us focus on building up bespoke apps for the few remaining tasks that hadn’t been solved yet.&lt;/p&gt;
&lt;p&gt;We’ll look at how the move went for linux.conf.au 2017, what went wrong, what went well, and how moving to Django helped us make a conference website that was easier for team members to contribute to, and solved long-standing problems that we couldn’t solve before.&lt;/p&gt;
&lt;p&gt;We’ll also look at the open source projects that we’ve launched and adopted, and show you where you can contribute to making next year’s PyCon AU website even better, or how to use our suite to help run your own conference.&lt;/p&gt;
</summary></entry><entry><title>Deciding between Continuity and Change in Open Source</title><link href="https://pyvideo.org/vancouver-python-developers/deciding-between-continuity-and-change-in-open-source.html" rel="alternate"></link><published>2016-06-04T00:00:00+00:00</published><updated>2016-06-04T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2016-06-04:vancouver-python-developers/deciding-between-continuity-and-change-in-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you’re a big, for-profit project, it can be easy to justify a change from outdated software to the new hotness: figure out why the old software isn’t working for you, do a cost-benefit analysis, and – if it still seems like a good idea – make the change.&lt;/p&gt;
&lt;p&gt;When you’re a community of volunteers, that justification can be less clear: cost-benefit analyses will rarely be about money. Worse still, the human costs can be difficult to justify: It’s difficult to get volunteers to do more unpaid work than they’re already doing. If your community depends on Open Source software, you get the added political difficulty of needing to navigate the divide between large-scale change and making small improvements to systems your community actively contributes to.&lt;/p&gt;
&lt;p&gt;Whilst the motivation might be different, the process isn’t: leading a community towards change means understanding why existing systems aren’t suitable, making your community enthusiastic about the need for change, and then actually making that change.&lt;/p&gt;
&lt;p&gt;To help make this point more concretely, we’ll look at how and why linux.conf.au – a long-running Open Source conference in Australia – effected a move away away from a bespoke legacy conference management software to one based on Symposion, the popular Django-based software created for the Python Software Foundation. We’ll also look at how that’s led to the PSF funding Registrasion, a Django-based conference sales platform.&lt;/p&gt;
&lt;p&gt;With this case study as a guide, we’ll talk about how to make a decision to replace the software that your community runs on. In particular, we’ll cover how to identify and engage with stakeholders within a community; the value of prototypes in maintaining interest; and what a cost-benefit analysis might look like when your currencies are human joy, and burnout prevention.&lt;/p&gt;
</summary></entry><entry><title>Deciding between continuity and change in your Open Source communtiy</title><link href="https://pyvideo.org/kiwi-pycon-2016/deciding-between-continuity-and-change-in-your-open-source-communtiy.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/deciding-between-continuity-and-change-in-your-open-source-communtiy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Neugebauer
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/131/"&gt;https://kiwi.pycon.org/schedule/presentation/131/&lt;/a&gt;
When you’re a community of volunteers, it can be difficult to justify a change from outdated software to something newer. In this talk, we’ll cover how to make that decision: how to identify and engage with stakeholders within a community; the value of prototypes in maintaining interest; and what a cost-benefit analysis might look like when your currencies are human joy, and burnout prevention.&lt;/p&gt;
</summary></entry><entry><title>Deciding between continuity and change in your Open Source community</title><link href="https://pyvideo.org/pycon-au-2016/deciding-between-continuity-and-change-in-your-open-source-community.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/deciding-between-continuity-and-change-in-your-open-source-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Neugebauer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/153/view_talk"&gt;https://2016.pycon-au.org/schedule/153/view_talk&lt;/a&gt;
When you’re a big, for-profit project, it can be easy to justify a change from outdated software to the new hotness: figure out why the old software isn’t working for you, do a cost-benefit analysis, and – if it still seems like a good idea – make the change.
When you’re a community of volunteers, that justification can be less clear: cost-benefit analyses will rarely be about money. Worse still, the human costs can be difficult to justify: It’s difficult to get volunteers to do more unpaid work than they’re already doing. If your community depends on Open Source software, you get the added political difficulty of needing to navigate the divide between large-scale change and making small improvements to systems your community actively contributes to.
Whilst the motivation might be different, the process isn’t: leading a community towards change means understanding why existing systems aren’t suitable, making your community enthusiastic about the need for change, and then actually making that change.
To help make this point more concretely, we’ll look at how and why linux.conf.au – a long-running Open Source conference in Australia – effected a move away away from a bespoke legacy conference management software to one based on Symposion, the popular Django-based software created for the Python Software Foundation. We’ll also look at how that’s led to the PSF funding Registrasion, a Django-based conference sales platform.
With this case study as a guide, we’ll talk about how to make a decision to replace the software that your community runs on. In particular, we’ll cover how to identify and engage with stakeholders within a community; the value of prototypes in maintaining interest; and what a cost-benefit analysis might look like when your currencies are human joy, and burnout prevention.&lt;/p&gt;
</summary></entry><entry><title>Python's new type hints in action... in JavaScript</title><link href="https://pyvideo.org/pycon-ca-2015/pythons-new-type-hints-in-action-in-javascript.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/pythons-new-type-hints-in-action-in-javascript.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big thing in Python, or the harbinger of doom upon our entire community. Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some benefits that other languages have had for years: IDEs will be able to do code completion better; a whole class of boring tests will fall out automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you have to substantially change your code style? Will Python's simple expressiveness suddenly become unattainable thanks to clumsy Java-style type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look at TypeScript, a minimal implementation of Gradual Typing over JavaScript. We'll see how the type system works, and how it fits into the already thriving JavaScript developer community, where most people aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work, and see what Python can learn from a language that has successfully made the jump to a type-hinted world.&lt;/p&gt;
</summary></entry><entry><title>The Quest for the Pocket-Sized Python</title><link href="https://pyvideo.org/pyohio-2014/the-quest-for-the-pocket-sized-python.html" rel="alternate"></link><published>2014-07-27T00:00:00+00:00</published><updated>2014-07-27T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2014-07-27:pyohio-2014/the-quest-for-the-pocket-sized-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk surveys the current landscape of Python on the major Mobile
platforms, and ways you can start targeting Mobile platforms with your
Python code. We'll look at considerations for Mobile web development,
the state of Python-based mobile toolkits, and progress towards
Python-coded native UIs.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Java for Python Developers</title><link href="https://pyvideo.org/kiwi-pycon-2014/java-for-python-developers.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/java-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious.&lt;/p&gt;
&lt;p&gt;Calling Java APIs from CPython is one of the more interesting challenges
facing developers who want to get Python working as a first-class
language for developing apps for Android.&lt;/p&gt;
&lt;p&gt;This talk looks at solutions, past and present, for making the world of
Java accessible from Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious. Why are you looking so confused?&lt;/p&gt;
&lt;p&gt;Yes. I'm talking about Java at a Python conference. What of it?&lt;/p&gt;
&lt;p&gt;OK, well, I'm actually talking about avoiding having to code in Java,
when circumstances almost certainly require you to code in Java… or at
least require your applications to run in a Java environment.&lt;/p&gt;
&lt;p&gt;One of the more interesting challenges for Python developers targetting
Android is being able to call Java APIs from CPython. Environments like
Android require developers to use Java to get access to Android's user
interface libraries. Perhaps more importantly, Android has APIs for
accessing hardware features like accelerometers and geolocation, and
software features like notifications, but all of these have a Java
interface.&lt;/p&gt;
&lt;p&gt;This talk looks at how these problems have been solved, and where they
haven't, approaches to solutions that might exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers"&gt;https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Python's New Type Hints in Action… In JavaScript</title><link href="https://pyvideo.org/kiwi-pycon-2015/kiwi-pycon-2015-pythons-new-type-hints-in-action-in-javascript.html" rel="alternate"></link><published>2015-09-06T00:00:00+00:00</published><updated>2015-09-06T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/kiwi-pycon-2015-pythons-new-type-hints-in-action-in-javascript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big
thing in Python, or the harbinger of doom upon our entire community.
Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some
benefits that other languages have had for years: IDEs will be able to
do code completion better; a whole class of boring tests will fall out
automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you
have to substantially change your code style? Will Python's simple
expressiveness suddenly become unattainable thanks to clumsy Java-style
type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look
at TypeScript, a minimal implementation of Gradual Typing over
JavaScript. We'll see how the type system works, and how it fits into
the already thriving JavaScript developer community, where most people
aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work,
and see what Python can learn from a language that has successfully made
the jump to a type-hinted world.&lt;/p&gt;
</summary></entry><entry><title>The Quest for the Pocket-Sized Python by Christopher Neugebauer</title><link href="https://pyvideo.org/pycon-au-2014/the-quest-for-the-pocket-sized-python-by-christop.html" rel="alternate"></link><published>2014-08-07T00:00:00+00:00</published><updated>2014-08-07T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2014-08-07:pycon-au-2014/the-quest-for-the-pocket-sized-python-by-christop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's already a language of choice for developers on the web, in
science, and on the desktop. In the meantime, the world of Mobile
computing has exploded in the last couple of years, and developers
targetting Android, iOS, and other Mobile platforms are writing their
apps in Java, Objective-C, JavaScript... but definitely not Python.&lt;/p&gt;
&lt;p&gt;But Python's a great language for solving the sort of problems that are
posed in Mobile development time -- speedy development cycles, 20 years
worth of libraries for solving many tasks that you throw at it, and a
ready-made community to help developers. So why aren't we using Python?&lt;/p&gt;
&lt;p&gt;This talk surveys the current landscape of Python on the major Mobile
platforms, and ways you can start targeting Mobile platforms with your
Python code. We'll look at considerations for Mobile web development,
the state of Python-based mobile toolkits, and progress towards
Python-coded native UIs.&lt;/p&gt;
</summary></entry><entry><title>Python's New Type Hints in Action… In JavaScript</title><link href="https://pyvideo.org/pycon-au-2015/pythons-new-type-hints-in-action-in-javascript-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/pythons-new-type-hints-in-action-in-javascript-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big
thing in Python, or the harbinger of doom upon our entire community.
Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some
benefits that other languages have had for years: IDEs will be able to
do code completion better; a whole class of boring tests will fall out
automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you
have to substantially change your code style? Will Python's simple
expressiveness suddenly become unattainable thanks to clumsy Java-style
type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look
at TypeScript, a minimal implementation of Gradual Typing over
JavaScript. We'll see how the type system works, and how it fits into
the already thriving JavaScript developer community, where most people
aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work,
and see what Python can learn from a language that has successfully made
the jump to a type-hinted world.&lt;/p&gt;
</summary></entry><entry><title>Test-Driven Repair</title><link href="https://pyvideo.org/pycon-au-2015/test-driven-repair.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/test-driven-repair.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“it is impossible BY DEFINITION to do Test-Driven Development after the
code is written.” — Tim Ottinger, author of ‘Clean Code’, on Twitter
[1].&lt;/p&gt;
&lt;p&gt;Automated testing is one of the most important tools in the modern
programming toolbox: good tests help you find regressions early, and
help you make sure your code is right before it ships. Test-driven
development is a great way to make sure your software is up to
specification before you start work. Even better, it makes sure your
software’s architecture is amenable to writing tests from day 1.&lt;/p&gt;
&lt;p&gt;So what happens when you find yourself working on code where automated
testing took a back seat to being shipped? Chances are you’ll have a sea
of bugs, strung together in a structure where writing simple unit tests
just isn’t going to happen.&lt;/p&gt;
&lt;p&gt;Broken code is a support burden, and if it’s in production, you’ve got
no choice but to make things work. Luckily, automated testing isn’t a
lost cause here!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at how to approach automated testing on
late-stage, or even production code… or in any situation when you don’t
have the luxury of starting with a test-driven structure. We’ll look at
techniques that I’ve used to analyse faults in existing code, and how to
translate those into tests, and how to use that to fix bugs.&lt;/p&gt;
&lt;p&gt;In particular, we’ll look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tooling and metrics to help you decide what code to test, and how to
measure progress when you’re writing tests&lt;/li&gt;
&lt;li&gt;Approaches to constructing test cases for old code, including using
data-driven approaches, and approaches based on requirements
specifications&lt;/li&gt;
&lt;li&gt;Granularity — making tests on old code granular enough is difficult,
so we’ll look at the trade-offs between unit and integration tests on
old code, and ways to make integration-level tests granular enough to
make results reliable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll see that testing old code is both achievable, and actually a
worthwhile exercise. You’ll find bugs. You’ll increase quality. You’ll
make your code more maintainable! Do try it!&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://twitter.com/tottinge/status/544632253205475329"&gt;https://twitter.com/tottinge/status/544632253205475329&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Job Security (in Python)</title><link href="https://pyvideo.org/pycon-ca-2013/job-security-in-python.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/job-security-in-python.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Android: The Land that Python Forgot?</title><link href="https://pyvideo.org/pycon-ca-2013/android-the-land-that-python-forgot.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2013-08-10:pycon-ca-2013/android-the-land-that-python-forgot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A fast-paced overview of mobile development for Python programmers. Is
Android the land that Python forgot, and if so, what can we do about it?&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Lightning Talks - Sunday evening</title><link href="https://pyvideo.org/pycon-us-2013/sunday-evening-lightning-talks.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/sunday-evening-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sunday evening lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=0m"&gt;00:00&lt;/a&gt; - Python 3 on your Atari Desktop - Jeffrey
Armstrong&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=4m58s"&gt;04:58&lt;/a&gt; - Armstrong, Open Source News Platform - Joshua
Bonnett&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=9m34s"&gt;09:34&lt;/a&gt; - Metrics should be basic: xUnit for metrics -
Jeremy Dunck&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=15m14s"&gt;15:14&lt;/a&gt; - The Answers - Luke Gotszling&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=20m20s"&gt;20:20&lt;/a&gt; - Core Python: the next generation - Wesley
Chun&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=25m15s"&gt;25:15&lt;/a&gt; - q.q - Ka-Ping Yee&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=31m13s"&gt;31:10&lt;/a&gt; - Neckbeard: Because cloud deployment sucks -
Wes Winham&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=36m54s"&gt;36:54&lt;/a&gt; - Abolishing the Traditional 9th to 12th Grade
Structure of High Schools - Eric Matthes&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=41m43s"&gt;41:43&lt;/a&gt; - Python Anywhere - Henry Percival&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=46m35s"&gt;46:35&lt;/a&gt; - RapydScript: Translating Python to JavaScript
- Charles Law&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=52m47s"&gt;52:47&lt;/a&gt; - PyCon Australia 2013 - Christopher Neugebauer&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=53m44s"&gt;53:44&lt;/a&gt; - (py) Fore! - Christopher Neugebauer&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="sprints"></category></entry><entry><title>Lightning Talks - Saturday morning</title><link href="https://pyvideo.org/pycon-us-2013/saturday-morning-lightning-talks-0.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Jesse Jiryu Davis</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/saturday-morning-lightning-talks-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning talks from Saturday morning.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=0s"&gt;00:00&lt;/a&gt; - ToRo (Tornado Coroutines) - Jesse Jiryu Davis&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=4m45s"&gt;04:45&lt;/a&gt; - Retask: Queue for Humans - Kushal Das&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=9m15s"&gt;09:15&lt;/a&gt; - Pythonic Andragogy: Python for Adults - Kirby
Urner&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=16m"&gt;16:00&lt;/a&gt; - How and why a Java expert switched to Python -
Ron Cox&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=22m10s"&gt;22:10&lt;/a&gt; - Coding across America - Andrew&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=25m9s"&gt;25:05&lt;/a&gt; - gitstreams.com - Justin Abrahms&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=26m58s"&gt;26:58&lt;/a&gt; - Jesse Noller interlude&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=30m30s"&gt;30:30&lt;/a&gt; - PyCharm - Dmitry Jemerov&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=36m10s"&gt;36:10&lt;/a&gt; - NASperry Pi - Mark Ransom&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=41m30s"&gt;41:30&lt;/a&gt; - NES, JavaScript and a Browser - Guto Maia&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=46m5s"&gt;46:05&lt;/a&gt; - EuroSciPy 2013: Come to our conference! - Mike
Müller&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=48m7s"&gt;48:07&lt;/a&gt; - PyWeek: Join our week and write a game! -
Richard Jones&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=51m13s"&gt;51:13&lt;/a&gt; - Don't make people watch what you type -
Stuart Williams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=54m"&gt;54:00&lt;/a&gt; - Job Security (in Python) - Christopher
Neugebauer&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=59m9s"&gt;59:09&lt;/a&gt; - Using Python to make universal education truly
universal: KA Lite - Jamie Alexandre&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry></feed>