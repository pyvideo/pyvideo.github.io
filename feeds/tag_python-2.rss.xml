<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Python 2</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Migrating codebases with millions of modules from Python 2 to Python 3</title><link>https://pyvideo.org/europython-2020/migrating-codebases-with-millions-of-modules-from-python-2-to-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This has been mitigated with tooling and education, but for the most part it requires human action and decision. While most codebases have somewhere between tens and thousands of Python modules, some companies may maintain a codebase with millions of modules. This presentation covers techniques and tooling that Google created to enable the developers to scope their migration needs, plan the work required, execute effectively at scale and collaborate across teams/dependencies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Passos</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/migrating-codebases-with-millions-of-modules-from-python-2-to-python-3.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Best Practice</category><category>Python 2</category><category>Python 3</category></item><item><title>We have nearly one million lines of Python 2 code in production – and now?</title><link>https://pyvideo.org/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Porting a rather large code base to Python 3 – lessons learned usable for projects of any size&lt;/p&gt;
&lt;p&gt;In this talk I am going to present possible approaches for a Python 3 migration of existing Python code running on Python 2.7. I'll evaluate which of these approaches seems suitable for a large code base and which principles should be paid attention to to increase the probability of a successful migration project.&lt;/p&gt;
&lt;p&gt;I'll use union.cms (a content management system used by German trade unions) to show the story of a successful migration project involving nearly one million lines of Python code. The story will include the obstacles we encountered and what we learned on the way.&lt;/p&gt;
&lt;p&gt;I believe that most of the discussed ideas and experience can also be used unchanged in smaller projects as the presented principles are very much the same.&lt;/p&gt;
&lt;p&gt;Goal of the presentation: You should be able to come up with a plan for migrating your Python 2 based projects to Python 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Howitz</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Best Practice</category><category>Development</category><category>Python 2</category><category>Python 3</category><category>legacy-code</category></item></channel></rss>