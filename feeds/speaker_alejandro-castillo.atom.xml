<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alejandro-castillo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-10T00:00:00+00:00</updated><entry><title>Django Rest Framework, one year after: tips, tools, tricks and pitfalls.</title><link href="https://pyvideo.org/europython-2017/django-rest-framework-one-year-after-tips-tools-tricks-and-pitfalls.html" rel="alternate"></link><published>2017-07-10T00:00:00+00:00</published><updated>2017-07-10T00:00:00+00:00</updated><author><name>Alejandro Castillo</name></author><id>tag:pyvideo.org,2017-07-10:europython-2017/django-rest-framework-one-year-after-tips-tools-tricks-and-pitfalls.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One year ago we started OnTruck. Our CTO had previously had some success
with DRF so after discussing it, we decided to give it a try.
After a year building a quickly iterating startup on top of Django Rest Framework,
we have reflected a lot on it. Even now, with a full year of development
on top of it, we still periodically discuss going forward or dropping it.
For the time being it still wins. So we think we have learned a lot about it.&lt;/p&gt;
&lt;p&gt;This talk is a walkthrough of the discoveries &amp;amp; learnings we have made
at OnTruck during that year.
We will cover different aspects of the framework, what advantages
it has given us and also what tradeoffs it has forced.&lt;/p&gt;
&lt;p&gt;We will discuss both how it relates to Django on the inside and how it
relates with other systems outside. We will approach it both from
a purely user perspective and also discuss some of its internals
and the way we tweaked them to make it work for us.&lt;/p&gt;
&lt;p&gt;We will cover the pitfalls we have both avoided and fallen into.
The tricks that have helped us keep our speed and sanity.
The tools we have both used and discarded on the way.&lt;/p&gt;
&lt;p&gt;And finally the tips we would give ourselves if we were starting all
over again after this year.&lt;/p&gt;
</summary></entry><entry><title>Deja de pegarte con tus servicios; import lymph</title><link href="https://pyvideo.org/europython-2015/deja-de-pegarte-con-tus-servicios-import-lymph.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Alejandro Castillo</name></author><id>tag:pyvideo.org,2015-08-06:europython-2015/deja-de-pegarte-con-tus-servicios-import-lymph.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alejandro Castillo - Deja de pegarte con tus servicios; import lymph
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]
[En Español]&lt;/p&gt;
&lt;p&gt;¿Y si pudieras centrarte en la funcionalidad de tus
servicios en lugar de programar la integración entre ellos?&lt;/p&gt;
&lt;p&gt;lymph es un framework con personalidad propia para escribir
servicios en Python que te permite hacer justo eso. Incluye
descubrimiento de servicios extensible,  comunicación vía
petición-respuesta, comunicación vía publicación-subscripción
extensible y gestión de procesos.&lt;/p&gt;
&lt;p&gt;A medida que crecen nuestros equipos de desarrollo, nos alejamos
cada vez más de una arquitectura monolítica. Queremos empezar a
escribir servicios sin tener que preocuparnos de los requisitos de
infraestructura. Queremos desarrollar de forma rápida, centrándonos
en nuestro trabajo.&lt;/p&gt;
&lt;p&gt;En esta charla os enseñaremos lo fácil que es desarrollar y
ejecutar servicios con lymph.&lt;/p&gt;
&lt;p&gt;Echad un ojo a &lt;a class="reference external" href="http://lymph.io"&gt;http://lymph.io&lt;/a&gt;. Esperamos vuestros pull requests.&lt;/p&gt;
</summary></entry></feed>