<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>status quo of virtual environments</title><link>https://pyvideo.org/europython-2019/status-quo-of-virtual-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the project maintainers); also, to find out if
the good old virtualenv project has any place left, now that Python 3.4+
contains venv.&lt;/p&gt;
&lt;p&gt;This talk is aimed to be a bit more technical in its first parts,
presenting in technical details what a virtualenv is. The target
audience is anyone who used virtual environments and wants to understand
how they tick from within. Iâ€™ll also emphasise diversity and inclusion
at Python interpreter level by highlighting other interpreters than
CPython: Jython, PyPy or Iron Python. A concise outline goes as follows:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;What is a virtual environment?&lt;/div&gt;
&lt;div class="line"&gt;- why we need it&lt;/div&gt;
&lt;div class="line"&gt;- what we use it for&lt;/div&gt;
&lt;div class="line"&gt;- demo - virtualenv vs system env&lt;/div&gt;
&lt;div class="line"&gt;How do we build a virtual environment (CPython)&lt;/div&gt;
&lt;div class="line"&gt;- technical workflow of venv creation&lt;/div&gt;
&lt;div class="line"&gt;- activation&lt;/div&gt;
&lt;div class="line"&gt;-- bash&lt;/div&gt;
&lt;div class="line"&gt;-- powershell&lt;/div&gt;
&lt;div class="line"&gt;-- cmd.bat&lt;/div&gt;
&lt;div class="line"&gt;Other interpreters&lt;/div&gt;
&lt;div class="line"&gt;- why other than CPython?&lt;/div&gt;
&lt;div class="line"&gt;- PyPy&lt;/div&gt;
&lt;div class="line"&gt;- Jython&lt;/div&gt;
&lt;div class="line"&gt;- virtualenv&lt;/div&gt;
&lt;div class="line"&gt;- all Python support&lt;/div&gt;
&lt;div class="line"&gt;- extra activation -&amp;gt; xonosh&lt;/div&gt;
&lt;div class="line"&gt;Summary and q/a&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bernat Gabor</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/status-quo-of-virtual-environments.html</guid><category>Virtual Env</category></item><item><title>Type hinting (and mypy)</title><link>https://pyvideo.org/pycon-us-2019/type-hinting-and-mypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type hinting for Python (as a linter tool) came out in September 2015 as
part of Python 3.5 (and was championed by Guido himself). Since then,
variable annotations (plus, more recently, protocols) improved its
capabilities even further. Over the last two years, tools, such as mypy,
could build on top of it. Slowly, these annotations have emerged from a
proof of concept state (e.g., mypy API planning) to becoming a stable
feature.&lt;/p&gt;
&lt;p&gt;In this presentation, I'll tell my story of using type hints for both
adding type hinting and checking type correctness for a library
supporting both Python 2 and 3 and reusing this information to insert
type data into the generated Sphinx documentation automatically.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bernat Gabor</dc:creator><pubDate>Sat, 04 May 2019 14:35:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-us-2019/type-hinting-and-mypy.html</guid><category>talk</category></item><item><title>Type hints inside the snake pit</title><link>https://pyvideo.org/pylondinium-2018/type-hints-inside-the-snake-pit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to re-use type hints for much more than just type checking.&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bernat Gabor</dc:creator><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-09:pylondinium-2018/type-hints-inside-the-snake-pit.html</guid></item><item><title>Standardize Testing in Python</title><link>https://pyvideo.org/europython-2018/standardize-testing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, Bernat will introduce tox, an open source tool with the
bold vision of standardizing testing. From a CIs point of view, testing
contains much more than just unit and/or integration tests; other things
like code style checks, packaging, testing under various versions of
Python, and checking that documentation still generates, are just as
important. Things quickly start to spiral out of control once you add
into the mix that there are many tools and ways to accomplish each of
these tasks. In this talk, we will learn how tox tries to abstract away
all this complexity, how to easily run CI tests on your local machine,
and how one can use this tool inside your CI frameworks to ensure high
quality and easily maintainable packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bernat Gabor</dc:creator><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-26:europython-2018/standardize-testing-in-python.html</guid></item></channel></rss>