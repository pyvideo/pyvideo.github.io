<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - FlaskCon 2021</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 07 Dec 2021 00:00:00 +0000</lastBuildDate><item><title>Podcast: Building And Shipping Flask Side Projects Fast With Abhishek Kaushik</title><link>https://pyvideo.org/flaskcon-2021/podcast-building-and-shipping-flask-side-projects-fast-with-abhishek-kaushik.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abhishek built creatorlist and ficate.xyz with Flask. In this session we chat with him about the passion and challenges of side projects!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various</dc:creator><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-07:/flaskcon-2021/podcast-building-and-shipping-flask-side-projects-fast-with-abhishek-kaushik.html</guid><category>FlaskCon 2021</category><category>flask</category><category>podcast</category><category>side projects</category></item><item><title>Podcast: Experience Learning Flask With David Carmichael</title><link>https://pyvideo.org/flaskcon-2021/podcast-experience-learning-flask-with-david-carmichael.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;David talks about his experience learning Flask and about what he currently does with Flask. He's come a long way!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various</dc:creator><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-07:/flaskcon-2021/podcast-experience-learning-flask-with-david-carmichael.html</guid><category>FlaskCon 2021</category><category>flask</category><category>podcast</category><category>learning</category></item><item><title>Podcast: How To Leverage Flask To Win Hackathons by Anush Krishna V</title><link>https://pyvideo.org/flaskcon-2021/podcast-how-to-leverage-flask-to-win-hackathons-by-anush-krishna-v.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anush won many hackathons. His university team came out in the top 5 for IBM's call of code. His wins includes those organised by Microsot and Stanford x Yale. In this session we ask him about his journey and the secret to crack hackthons.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various</dc:creator><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-07:/flaskcon-2021/podcast-how-to-leverage-flask-to-win-hackathons-by-anush-krishna-v.html</guid><category>FlaskCon 2021</category><category>flask</category><category>podcast</category><category>hackathons</category></item><item><title>HTMX + Flask: Modern Python Web Apps, Hold the JavaScript</title><link>https://pyvideo.org/flaskcon-2021/htmx-flask-modern-python-web-apps-hold-the-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;See how to combine htmx for building dynamic, interactive web apps in 100% Flask and Python without the need for frontend frameworks like Vue.js and others.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Kennedy</dc:creator><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-04:/flaskcon-2021/htmx-flask-modern-python-web-apps-hold-the-javascript.html</guid><category>FlaskCon 2021</category><category>flask</category><category>htmx</category><category>javascript</category></item><item><title>Making Location-Searchable Sites Using Geocoding and Elasticsearch</title><link>https://pyvideo.org/flaskcon-2021/making-location-searchable-sites-using-geocoding-and-elasticsearch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When searching for things on the internet, there are 2 factors that determine the quality of a search result, Accuracy and Relevance. While searching for things &amp;quot;In Your Area&amp;quot; may be a solution, some topics (like where you want to go to college) can be a little more nuanced. In this talk shows how I use Elasticsearch's accuracy and Google Places API to show college options in a requested area. The example project is a college search app that gives you the ability to look for schools based on an area and indicators like acceptance rates and expected student load debt. I'll show how to perform Places autocorrect query and then use the returned information to curate search results within Elasticsearch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Miller</dc:creator><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-04:/flaskcon-2021/making-location-searchable-sites-using-geocoding-and-elasticsearch.html</guid><category>FlaskCon 2021</category><category>flask</category><category>geocoding</category><category>elasticsearch</category></item><item><title>Testing Flask Applications with pytest</title><link>https://pyvideo.org/flaskcon-2021/testing-flask-applications-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing a Flask application helps ensure that your app will work as expected for your end users. This talk provides an introduction to using pytest for testing Flask applications. Before diving into how to use pytest, this talk explains what should be tested in a Flask application. Next, detailed examples are covered on how to write unit and functional test functions with pytest that are specific to Flask applications. Documentation of the tests is also highlighted using the GIVEN-WHEN-THEN approach. After writing tests, running the tests using pytest (with different options) is presented to demonstrate how easy and powerful pytest is. Examples include verbose mode, running only the last failed tests, and running specific test cases. Next, the concept of fixtures in pytest is presented and detailed examples of how to initialize the state of a Flask application are covered. This section includes properly initializing a Flask application to avoid not having the application context created. Finally, the idea of code coverage is introduced and an example of running coverage.py on a Flask application is demonstrated.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Kennedy</dc:creator><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-04:/flaskcon-2021/testing-flask-applications-with-pytest.html</guid><category>FlaskCon 2021</category><category>flask</category><category>testing</category><category>pytest</category></item><item><title>Workshop: Building SAAS Products With Flask</title><link>https://pyvideo.org/flaskcon-2021/workshop-building-saas-products-with-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hands-on building a SAAS app with Flask.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sumukh Sridhara</dc:creator><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-04:/flaskcon-2021/workshop-building-saas-products-with-flask.html</guid><category>FlaskCon 2021</category><category>flask</category><category>saas</category><category>workshop</category></item><item><title>Workshop: Deep Dive into the Wheels of Packaging Using a Flask App</title><link>https://pyvideo.org/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexander has contributed much Flask content over the years and is a consultant at Hultn√©r Technologies&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hultner</dc:creator><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-04:/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html</guid><category>FlaskCon 2021</category><category>flask</category><category>packaging</category><category>workshop</category></item><item><title>Application config management: Lightweight but enterprise-ready</title><link>https://pyvideo.org/flaskcon-2021/application-config-management-lightweight-but-enterprise-ready.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to leverage dynaconf + flask to handle web-application configs in an elegant way. And be nimble for lightweight application deployment, but easily rise to enterprise grade management with secret management, configuration web interfaces, user specific configurations, validators, and more!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abdeali Kothari</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/application-config-management-lightweight-but-enterprise-ready.html</guid><category>FlaskCon 2021</category><category>flask</category><category>configuration</category><category>dynaconf</category></item><item><title>Building Scalable APIs With Flask and Docker</title><link>https://pyvideo.org/flaskcon-2021/building-scalable-apis-with-flask-and-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many backend software engineers can build rest APIs but very few can build scalable APIs, which accommodate changes and growth.During this talk wewill learn how to build scalable APIs that doesn't often need to be re-written in case of growth using Python Flask micro-framework and Docker.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Donery</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/building-scalable-apis-with-flask-and-docker.html</guid><category>FlaskCon 2021</category><category>flask</category><category>authentication</category><category>security</category></item><item><title>Debugging flask application within a docker container using VSCode</title><link>https://pyvideo.org/flaskcon-2021/debugging-flask-application-within-a-docker-container-using-vscode.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all love Docker which helps us a lot in deploying our applications without worrying about what OS we are using and what software versions we have. As a developer you come across a bug every now and then. To solve a bug debug comes very handy. In this talk, I would love to show you one of the ways to debug your flask application within a docker container using VSCode. To do that first, we will build a small flask application and write a Dockerfile for that and run the application. When we want to debug that application we need debugpy package which I don't want to put it in my final docker image so instead of building a different Dockerfile for each purpose we will get to know a bit about Docker multistage build concept and update the current Dockerfile and debug our flask application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ashok Tankala</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/debugging-flask-application-within-a-docker-container-using-vscode.html</guid><category>FlaskCon 2021</category><category>flask</category><category>docker</category><category>debugging</category></item><item><title>Enabling multi-tenancy with werkzeug</title><link>https://pyvideo.org/flaskcon-2021/enabling-multi-tenancy-with-werkzeug.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to convert your existing application into a multi-tenant application within a day. This is a case study on how our simple flask web-application was changed to a multi-tenant architecture and simplified our client onboarding experience and reduced our infrastructure burden.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abdeali Kothari</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/enabling-multi-tenancy-with-werkzeug.html</guid><category>FlaskCon 2021</category><category>flask</category><category>multi-tenancy</category><category>werkzeug</category></item><item><title>Flask-Multipass - A pluggable authentication framework for Flask</title><link>https://pyvideo.org/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authentication using username and password may be easy, but if you prefer letting some third party handle it, that may be tricky: You are now dealing with protocols like OAuth, OIDC or SAML - and all of them have their own pitfalls. And depending on what you use, you may even have to change because the provider you are using is changing their APIs. Flask-Multipass provides an easy-to-use wrapper around this complexity. This talk will go into details on why the extension was created, which cases it covers (and which it doesn't - it's not another Flask-Login!), and how its flexibility allows easy implementation of new authentication methods.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian M√∂nnich</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html</guid><category>FlaskCon 2021</category><category>flask</category><category>authentication</category><category>security</category></item><item><title>Hassle Free Desktop Apps with Flask</title><link>https://pyvideo.org/flaskcon-2021/hassle-free-desktop-apps-with-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flaskwebgui is a Python package which helps you quickly create electron like desktop applications. That way, you can convert a web app into a desktop app with just two extra lines of code.
Flaskwebgui just uses threading underneath to start a flask server and the browser in app mode (for chrome). It has some advantages over flask-desktop because it doesn't use PyQt5, so you won't have any issues regarding licensing and over Eel because you don't need to learn any logic other than Flask. Github link: &lt;a class="reference external" href="https://github.com/ClimenteA/flaskwebgui"&gt;https://github.com/ClimenteA/flaskwebgui&lt;/a&gt; Motivation: At first console apps were enough to solve what I needed, but in time more complex problems appeared that needed a user interface which does a lot of stuff. For something small (some inputs, buttons..) Tkinter does the job even though it looks uglyish. Other alternatives for more complex stuff are PyQT, PySide, wxPython, Kivy, which are good options and you can make nice GUIs with them, but.. I still found it pretty hard to get started. I like Flask - it was very easy to learn and I wanted to use it everywhere. Learning new libraries takes time and time is something we can't buy (yet). I looked for a solution to make the user interface in html/css/javascript with a backend in Flask. I found pywebview which was close of what I needed, but for whatever reason some javascript code didn‚Äôt got executed as it should have(js worked in a normal browser, but not in pywebview window). I also had issues when I tried to freeze it with Pyinstaller ‚Äî all of them probably having a solution somewhere, but I just wanted to ship it and leave it. That's how flaskwebgui was &lt;cite&gt;born&lt;/cite&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alin Climente</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/hassle-free-desktop-apps-with-flask.html</guid><category>FlaskCon 2021</category><category>flask</category><category>desktop apps</category><category>gui</category></item></channel></rss>