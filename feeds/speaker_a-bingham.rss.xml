<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 05 Jul 2012 00:00:00 +0000</lastBuildDate><item><title>Building C++ APIs on Python</title><link>https://pyvideo.org/europython-2012/building-c-apis-on-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] A Bingham - 4 JULY 2012 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has great support for interfacing with C/C++ code, and this has
been used to great advantage by exposing many C/C++ libraries as Python
modules. In this talk, I will reverse the equation. I will show you how
you can - and why you might want to - build C++ APIs on top of Python
modules and use them directly from your C++ programs. The topics will
include: Conversion of types across the language boundary.
Implementation of C++ idioms (e.g. the begin()/end() iterator API) on
top of Python idioms. Python runtime management: initialization, module
loading, etc. Working with the “impedance mismatches” between the
languages (e.g. duck-typing vs. static typing) I will also discuss the
reasons why C++ APIs on Python code represent a very useful and often
powerful technique. The reasons range from simple pragmatism (you want
to use an existing Python module in an existing C++ program) to
productivity (writing Python code plus a C++ wrapper can be easier and
faster than writing pure C++.) link -
&lt;a class="reference external" href="https://docs.google.com/presentation/d%20/1hx_59DMQm6ZlI3Jz-LX-DZ4m5LVLpGcSlk1Dq1PiELI/edit"&gt;https://docs.google.com/presentation/d /1hx_59DMQm6ZlI3Jz-LX-
DZ4m5LVLpGcSlk1Dq1PiELI/edit&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A Bingham</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/building-c-apis-on-python.html</guid></item></channel></rss>