<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_c-languages.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Get up to speed with Cython 3.0</title><link href="https://pyvideo.org/europython-2019/get-up-to-speed-with-cython-30.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Stefan Behnel</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/get-up-to-speed-with-cython-30.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing lots of data, in need of more speed, or struggling to make
use of native code? The Cython compiler for Python solves all of these
problems in a pythonic way, by compiling Python code to optimised C
code.&lt;/p&gt;
&lt;p&gt;Cython [1] has a very long history of faithfully helping users to solve
their Python performance problems and integrating native code into
Python in production critical settings, while stimulating somewhat less
confidence with its 0.x versioning scheme. For the next Cython version,
a stable 3.0 release, we are planning to clean up several historically
grown issues in the language to make the Cython compiler more friendly
for modern Python users to work with.&lt;/p&gt;
&lt;p&gt;In this talk, I will show how Cython can be used for compiling and
speeding up Python code, using fast native data structures and
libraries. I will then give an overview of the changes that are on their
way for the 3.0 release and how they will affect the user experience.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://cython.org"&gt;https://cython.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="C-Languages"></category><category term="Compiler and Interpreters"></category><category term="Cython"></category><category term="Performance"></category><category term="Programming"></category></entry><entry><title>Bioinformatics pipeline for revealing tumour heterogeneity</title><link href="https://pyvideo.org/europython-2019/bioinformatics-pipeline-for-revealing-tumour-heterogeneity.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Mustafa Anil Tuncel</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/bioinformatics-pipeline-for-revealing-tumour-heterogeneity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Reproducibility of research is a common issue in science, especially
in computationally expensive research fields e.g. cancer research.&lt;/div&gt;
&lt;div class="line"&gt;A comprehensive picture of the genomic aberrations that occur during
tumour progression and the resulting intra-tumour heterogeneity, is
essential for personalised and precise cancer therapies. With the
change in the tumour environment under treatment, heterogeneity allows
the tumour additional ways to evolve resistance, such that
intra-tumour genomic diversity is a cause of relapse and treatment
failure. Earlier bulk sequencing technologies were incapable of
determining the diversity in the tumour.&lt;/div&gt;
&lt;div class="line"&gt;Single-cell DNA sequencing - a recent sequencing technology - offers
resolution down to the level of individual cells and is playing an
increasingly important role in this field.&lt;/div&gt;
&lt;div class="line"&gt;We present a reproducible and scalable Python data analysis pipeline
that employs a statistical model and an MCMC algorithm to infer the
evolutionary history of copy number alterations of a tumour from
single cells. The pipeline is built using Python, Conda environment
management system and the Snakemake workflow management system. The
pipeline starts from the raw sequencing files and a settings file for
parameter configurations. After running the data analysis, pipeline
produces report and figures to inform the treatment decision of the
cancer patient.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Algorithms"></category><category term="Analytics"></category><category term="C-Languages"></category><category term="Command-Line"></category><category term="Data Science"></category></entry><entry><title>Unleash the power of C++ in Python</title><link href="https://pyvideo.org/europython-2019/unleash-the-power-of-c-in-python.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Cristi√°n Maureira-Fredes</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/unleash-the-power-of-c-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;One of the main Python aspects is to have a clear syntax and be an&lt;/div&gt;
&lt;div class="line"&gt;easy-to-understand language, which compared to others like C++&lt;/div&gt;
&lt;div class="line"&gt;(depending of the kindness of the developer) can make a huge
difference.&lt;/div&gt;
&lt;div class="line"&gt;Not only the readability is in play, having a dynamically typed&lt;/div&gt;
&lt;div class="line"&gt;and interpreted language improves the development workflow.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This improvement comes with a cost, performance.&lt;/div&gt;
&lt;div class="line"&gt;In most of the cases, a raw comparison of simple routines will leave&lt;/div&gt;
&lt;div class="line"&gt;Python behind, but there is a partial solution to this problem,
connecting&lt;/div&gt;
&lt;div class="line"&gt;a powerful performant C++ library with the simplicity of Python.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this talk, we will go through the process of generating language
bindings&lt;/div&gt;
&lt;div class="line"&gt;to allow you to take any amazing C or C++ project and bring it to
Python&lt;/div&gt;
&lt;div class="line"&gt;land. We will briefly discuss one of the many success stories, and we
will&lt;/div&gt;
&lt;div class="line"&gt;analyze how the Qt project managed to expose its whole framework to
Python,&lt;/div&gt;
&lt;div class="line"&gt;with the help of a self-made binding generator called Shiboken.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;After the talk, you will be able to decide which option is better for
the&lt;/div&gt;
&lt;div class="line"&gt;projects you have in mind, and with a bit of luck you will be
responsible&lt;/div&gt;
&lt;div class="line"&gt;of exposing the next popular C++ library that makes the life of us all
Pythonistas easier.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="C-Languages"></category><category term="CPython"></category></entry></feed>