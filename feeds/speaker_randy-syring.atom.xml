<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Randy Syring</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_randy-syring.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-06-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Testing the Database Layer: typical problems &amp; best practices</title><link href="https://pyvideo.org/pyohio-2015/testing-the-database-layer-typical-problems-be.html" rel="alternate"></link><published>2015-08-02T00:00:00+00:00</published><updated>2015-08-02T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2015-08-02:/pyohio-2015/testing-the-database-layer-typical-problems-be.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will cover typical problems and best practices for testing the
database layer of Python applications. We will also cover using
factories vs fixtures for loading test data.&lt;/p&gt;
</content><category term="PyOhio 2015"></category><category term="talk"></category></entry><entry><title>Continuous Integration For The Win!</title><link href="https://pyvideo.org/pyohio-2016/continuous-integration-for-the-win.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2016-07-30:/pyohio-2016/continuous-integration-for-the-win.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to increase the quality of your code and improve team productivity by leveraging a CI pipeline to run tests, lint, and measure code coverage. Then, integrate all that knowledge right into a GitHub pull request for easy team review &amp;amp; verification before deployment.&lt;/p&gt;
</content><category term="PyOhio 2016"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/saturday-lightning-talks.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Behrens</name></author><id>tag:pyvideo.org,2016-07-30:/pyohio-2016/saturday-lightning-talks.html</id><content type="html"></content><category term="PyOhio 2016"></category><category term="lightning talks"></category></entry><entry><title>Reliable Testing &amp; Deployments with pip and Wheels</title><link href="https://pyvideo.org/pytexas-2014/reliable-testing-deployments-with-pip-and-wheel.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2014-10-05:/pytexas-2014/reliable-testing-deployments-with-pip-and-wheel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I plan to briefly introduce pip requirements files and the wheel format.
I will then demonstrate an approach for structuring requirements files,
using &amp;quot;snapshot&amp;quot; requirement files, and building &amp;quot;wheelhouses&amp;quot; that get
committed to your VCS. This approach has the following benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;known working &amp;amp; tested dependencies are clearly communicated between …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I plan to briefly introduce pip requirements files and the wheel format.
I will then demonstrate an approach for structuring requirements files,
using &amp;quot;snapshot&amp;quot; requirement files, and building &amp;quot;wheelhouses&amp;quot; that get
committed to your VCS. This approach has the following benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;known working &amp;amp; tested dependencies are clearly communicated between
developers&lt;/li&gt;
&lt;li&gt;project setup for new developers is simplified&lt;/li&gt;
&lt;li&gt;build servers no longer throw erroneous errors if PyPI is down&lt;/li&gt;
&lt;li&gt;production environments no longer need build tools installed on them&lt;/li&gt;
&lt;li&gt;production environments are guaranteed to be running on the same
version of dependencies that were developed on and tested&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyTexas 2014"></category></entry><entry><title>Dates &amp; Time: pain points, useful libraries, and testing considerations</title><link href="https://pyvideo.org/pytexas-2014/dates-time-pain-points-useful-libraries-and.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2014-10-04:/pytexas-2014/dates-time-pain-points-useful-libraries-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Date &amp;amp; Time handling in Python has it's ups &amp;amp; downs. In this talk, we
will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some of the pain points and weaknesses in the Python standard library&lt;/li&gt;
&lt;li&gt;two libraries I have found helpful: dateutils and arrow&lt;/li&gt;
&lt;li&gt;best practices for working with timezones&lt;/li&gt;
&lt;li&gt;best practices for testing code that deals …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Date &amp;amp; Time handling in Python has it's ups &amp;amp; downs. In this talk, we
will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some of the pain points and weaknesses in the Python standard library&lt;/li&gt;
&lt;li&gt;two libraries I have found helpful: dateutils and arrow&lt;/li&gt;
&lt;li&gt;best practices for working with timezones&lt;/li&gt;
&lt;li&gt;best practices for testing code that deals with dates and time&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyTexas 2014"></category></entry><entry><title>Flask: Beyond Hello World</title><link href="https://pyvideo.org/python-web-conf-2020/flask-beyond-hello-world.html" rel="alternate"></link><published>2020-06-19T00:00:00+00:00</published><updated>2020-06-19T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2020-06-19:/python-web-conf-2020/flask-beyond-hello-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Flask: Beyond Hello World&amp;quot; by: Randy Syring&lt;/p&gt;
&lt;p&gt;Getting started in Flask is super easy. But what happens when your application needs more than just the basics? Flask's simplicity makes it easy to get started but also means you have to do more legwork as your application's needs grow.&lt;/p&gt;
&lt;p&gt;We …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Flask: Beyond Hello World&amp;quot; by: Randy Syring&lt;/p&gt;
&lt;p&gt;Getting started in Flask is super easy. But what happens when your application needs more than just the basics? Flask's simplicity makes it easy to get started but also means you have to do more legwork as your application's needs grow.&lt;/p&gt;
&lt;p&gt;We will start with a typical &amp;quot;Hello World&amp;quot; Flask app and then integrate common features needed for most modern web applications, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Utilizing application factory pattern &amp;amp; blue prints&lt;/li&gt;
&lt;li&gt;Automated testing with pytest&lt;/li&gt;
&lt;li&gt;CLI integration with external packages and global options&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Database integration with Flask-SQLAlchemy&lt;/li&gt;
&lt;li&gt;Distributed task queues for background tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preparation:
A familiarity with Flask will be helpful, but not required. The presentation will mostly be focused on concepts, not on the fine details of implementation. A companion GitHub repository will be available after the talk so attendees can dig deeper into implementation if desired.&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry><entry><title>Testing Best Practices (Tutorial)</title><link href="https://pyvideo.org/python-web-conf-2020/testing-best-practices-tutorial.html" rel="alternate"></link><published>2020-06-17T00:00:00+00:00</published><updated>2020-06-17T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2020-06-17:/python-web-conf-2020/testing-best-practices-tutorial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Testing Best Practices (Tutorial)&amp;quot; by: Randy Syring
We'll use a non-trivial Flask application to review general best practices when testing. In addition, we'll examine methods for testing an application when it must interact with services outside itself. In particular, we will review how to test:&lt;/p&gt;
&lt;p&gt;Database
Celery tasks
3rd …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Testing Best Practices (Tutorial)&amp;quot; by: Randy Syring
We'll use a non-trivial Flask application to review general best practices when testing. In addition, we'll examine methods for testing an application when it must interact with services outside itself. In particular, we will review how to test:&lt;/p&gt;
&lt;p&gt;Database
Celery tasks
3rd party external APIs (REST/JSON)
CLI commands
Emails
Using Continuous Integration (CI) services
We will discuss both principles and implementation so that even if you don't use Flask, the principles learned can be applied to other frameworks (Django, etc.).&lt;/p&gt;
&lt;p&gt;This is an intermediate to advanced talk so attendees should feel comfortable:&lt;/p&gt;
&lt;p&gt;working in Python
cloning repos from GitHub
using pip and friends to create virtualenvs and install dependencies
running applications from the command line
using Docker and docker-compose to spin up external services (database, email, RabbitMQ) or having those services installed &amp;amp; available at the OS level
familiarity with using pytest will be helpful&lt;/p&gt;
&lt;p&gt;RESOURCES: &lt;a class="reference external" href="https://2020.pythonwebconf.com/tutorials/testing-done-right"&gt;https://2020.pythonwebconf.com/tutorials/testing-done-right&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry></feed>