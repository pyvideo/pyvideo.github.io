<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - teaching</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Refactoring PyChart</title><link>https://pyvideo.org/europython-2011/refactoring-pychart.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jacob Hallen - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyChart is a very nice program for producing print quality graphs.
However, it came equipped with a rather strange API, where every class
was called T. It was also using the global namespace in strange and
disturbing ways. Furthermore, it mixed multiple distinct tasks in some
classes.&lt;/p&gt;
&lt;p&gt;I will show how I went about refactoring the package in order to make a
nice and clean API. This talk is focused on teaching refactoring
methodology to beginner and intermediate level programmers. It will also
give a brief introduction to how to make beautiful graphs with PyChart.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:/europython-2011/refactoring-pychart.html</guid><category>EuroPython 2011</category><category>graphs</category><category>teaching</category></item><item><title>How to read (code)</title><link>https://pyvideo.org/europython-2019/how-to-read-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/how-to-read-code.html</guid><category>EuroPython 2019</category><category>Beginners</category><category>Clean Code</category><category>Documentation</category><category>Learning</category><category>Teaching</category></item><item><title>Teaching Programming to the Next Generation</title><link>https://pyvideo.org/europython-2019/teaching-programming-to-the-next-generation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our generation of young people in school (aged 5-18) have noticed the
connection between Computer pRogramming, Technology &amp;amp; Success and
Billionaires.On mass they are clamoring to master the skill of Computer
pRogramming. We describe a successful working model for the teaching of
Computer pRogamming.&lt;/p&gt;
&lt;p&gt;Computer Science is now regarded as one of the leading disciplines in
the 21st century. Computers are ubiquitous and prevalent in most, if not
all, sectors of our modern society – applications include using them in
weather forecasting, robotic surgery, space exploration, e-commerce,
smart cities, driverless cars, etc.&lt;/p&gt;
&lt;p&gt;Therefore, coding or computer programming is now regarded by many as an
essential skill for the young person, and it has been dubbed the ‘4th’
R’ (computer pRogramming) along with Reading, wRiting and aRithmetic.&lt;/p&gt;
&lt;p&gt;In recognition of the new status of computer programming, governments
worldwide have launched initiatives to have it taught in schools from
Kindergarten through to junior school and all the way through secondary
school.&lt;/p&gt;
&lt;p&gt;So, the question emerges is how do we best teach and motivate the next
generation in acquiring this skill? Given the fact that this field is
very much in its infancy, there are insufficient number of skilled
Computer Science teachers and very little pedagogy to guide the
educator. Therefore, the whole world is learning how best to teach this
subject by trial and error.&lt;/p&gt;
&lt;p&gt;The talk will describe a case study whereby coding/computer programming,
in the form of Python programming, was introduced to a group of 110
young people from the ages of 11 to 18 (Years 7-13 in a U.K secondary
school). The talk will include descriptions of the various teaching
methodologies introduced to the young people for this purpose and the
outcomes; the talk will also address various challenges and questions
about how to teach coding to young people. The talk will conclude with
helpful suggestions, based on the findings of the case study, on how to
proceed with the teaching of computer programming to these people.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lilian Nandi anonymous</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:/europython-2019/teaching-programming-to-the-next-generation.html</guid><category>EuroPython 2019</category><category>All Other Programming Languages</category><category>Education</category><category>Programming</category><category>Python 3</category><category>Teaching</category></item><item><title>Creating the Next Generations of Billionaires - Part 2</title><link>https://pyvideo.org/europython-2020/creating-the-next-generations-of-billionaires-part-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teaching the Next Generation of Computer Trillionaires&lt;/p&gt;
&lt;p&gt;Our generation of young people in school (aged 5-18) have noticed the connection between Computer pRogramming, Technology, Success and Billionaires. On mass they are clamouring to master the skill of Computer pRogramming. It  has been dubbed the ‘4th’ R’ (computer pRogramming) along with Reading, wRiting and aRithmetic. So, governments worldwide have launched initiatives to have it taught in schools from Kindergarten to all the way to high school.&lt;/p&gt;
&lt;p&gt;So, how do we best teach and motivate the next generation in acquiring this skill?&lt;/p&gt;
&lt;p&gt;We describe a successful working model for the teaching of Computer pRogamming. We have been building upon this model for a couple of years now.  Last year at EuroPython 2019 in Basel, we spoke about this subject and this year we would like to share more findings with the Python community about what we are learning about the teaching of Computer Programming to children and young people.&lt;/p&gt;
&lt;p&gt;The talk will describe a case study whereby computer programming (Python) was introduced to a group of 110 young people from the ages of 11 to 18, in a U.K secondary school. The talk will include descriptions of the various teaching methodologies &amp;amp; the outcomes; &amp;amp; the challenges involved. The talk will conclude with helpful suggestions, on how to proceed in this area.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">lil anonymous</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/creating-the-next-generations-of-billionaires-part-2.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Education</category><category>General</category><category>Python 3</category><category>Science</category><category>Teaching</category></item><item><title>pyRT - Computer Graphics in Jupyter Notebooks for Fun and Teaching</title><link>https://pyvideo.org/europython-2020/pyrt-computer-graphics-in-jupyter-notebooks-for-fun-and-teaching.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Image Generation using Pure Python&lt;/p&gt;
&lt;p&gt;PyRT (pronounced pirate) is a raytracer/image generator for Python 3.5 and higher. This project is mainly done with the following in mind:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ray tracing in the Jupyter notebook&lt;/li&gt;
&lt;li&gt;Teaching computer graphics and ray tracing&lt;/li&gt;
&lt;li&gt;Exploring ray tracing concepts for geo data using Python.&lt;/li&gt;
&lt;li&gt;Rendering geo data, including large point clouds.&lt;/li&gt;
&lt;li&gt;Implementing new algorithms for rendering large 3D city models.&lt;/li&gt;
&lt;li&gt;Creating 3D-Maps from OpenStreetMap data&lt;/li&gt;
&lt;li&gt;Server-side rendering / cloud based rendering&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk I will present the project and show some examples. I will show how useful it is to create quick 2D animations, such as visualization of different sorting algorithms and I how to create fractals and other graphics. A certain focus is also on geodata therefore I will show how to create a live EarthQuake map using pyRT.
In the last part I will show to use pyRT to create 3D renderings.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Christen</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/pyrt-computer-graphics-in-jupyter-notebooks-for-fun-and-teaching.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>3D</category><category>Education</category><category>GEO and GIS</category><category>Teaching</category><category>Virtualization</category></item><item><title>Python in Prison: how open source can change a criminal justice system</title><link>https://pyvideo.org/europython-2020/python-in-prison-how-open-source-can-change-a-criminal-justice-system.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The United States has the highest incarceration rate in the world, with over 2.2 million people behind bars in our prisons, jails, juvenile facilities, and detention centers.&lt;/p&gt;
&lt;p&gt;The system is racist and ineffective, but how do we change something so big and so economically entrenched, especially as software engineers?&lt;/p&gt;
&lt;p&gt;Let’s look at how Python classes in US prisons are transforming rehabilitation and re-entry, and talk about what we can do as individuals and as an open source community to dismantle an unjust system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica McKellar</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/python-in-prison-how-open-source-can-change-a-criminal-justice-system.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Python 3</category><category>Teaching</category></item><item><title>The Phantom of Radon</title><link>https://pyvideo.org/europython-2020/the-phantom-of-radon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A story of analytical sinograms&lt;/p&gt;
&lt;p&gt;This project contains an open source Python library for image reconstruction in Axial Computed Tomography (TAC), based on the analytical Radon transforms of some classes of phantoms.
The package is available on GitHub at the following address: &lt;a class="reference external" href="https://github.com/francescat93/Exact_sinogram"&gt;https://github.com/francescat93/Exact_sinogram&lt;/a&gt;.
The mathematical phantoms are fictitious images, composed of very simple geometric figures (ellipses, squares and rectangles) that, sampled with the Radon transform allows to build a fictitious signal, called (exact) sinogram.  Using a phantom gives the advantage to test the reconstruction algorithm on a zero-noise data so the error we get is only due to numerical inaccuracies in the algorithm itself. We want to calculate two reconstructed images from the approximated and exact sinograms, obtained applying the iradon function of the Python library scikit-image on both of them. We expect a smaller error on the exact reconstructed image. This turns to be true on continuous regions, but near the discontinuities of the phantom the Gibbs phenomenon prevents us to obtain the same enhancement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesca Tedeschi</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/the-phantom-of-radon.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Education</category><category>Image Processing</category><category>Open-Source</category><category>Science</category><category>Teaching</category></item><item><title>From Pascal to Python</title><link>https://pyvideo.org/kiwi-pycon-2019/from-pascal-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A look at the journey schools (specifically Burnside High) have taken from no computers to students being able to take courses in computer science, software engineering, game development and microelectronics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Dunford</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:/kiwi-pycon-2019/from-pascal-to-python.html</guid><category>Kiwi PyCon 2019</category><category>Teaching</category></item><item><title>Teaching Python to the young and impressionable</title><link>https://pyvideo.org/pycon-au-2011/teaching-python-to-the-young-and-impressionable.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We present two outreach programmes run by Sydney University for high
school students: the National Computer Science School
(&lt;a class="reference external" href="http://www.ncss.edu.au"&gt;http://www.ncss.edu.au&lt;/a&gt;) and the Girls' Programming Network
(&lt;a class="reference external" href="http://sydney.edu.au/it/gpn"&gt;http://sydney.edu.au/it/gpn&lt;/a&gt;). For the past four years we have been
teaching Python to students in grades 9-12, and based on this experience
we will discuss why Python is a good first language and the parts of it
which are still difficult for students to grasp.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Georgina Wilcox</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:/pycon-au-2011/teaching-python-to-the-young-and-impressionable.html</guid><category>PyCon AU 2011</category><category>network</category><category>outreach</category><category>science</category><category>teaching</category></item><item><title>The NCSS Challenge: teaching programming via automated testing</title><link>https://pyvideo.org/pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The NCSS Challenge (&lt;a class="reference external" href="http://challenge.ncss.edu.au/"&gt;http://challenge.ncss.edu.au/&lt;/a&gt;) is an online
programming competition for Australian high school students. There are
four different courses being run during 2011: Introductory Python,
Intermediate Python, Advanced Python, and Embedded Systems (using the
Arduino). In 2010 we had over 1700 students participate in the
Challenge. There are a number of interesting technical challenges which
had to be overcome in order to facilitate such a system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Dawborn</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:/pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</guid><category>PyCon AU 2011</category><category>embedded</category><category>teaching</category><category>testing</category></item><item><title>Insegnare la matematica con Python: percorsi suggeriti per le Scuole Superiori</title><link>https://pyvideo.org/pycon-italia-2018/insegnare-la-matematica-con-python-percorsi-suggeriti-per-le-scuole-superiori.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il linguaggio Python, versatile e ordinato, ha una curva di
apprendimento relativamente poco ripida e può essere utilizzato come
supporto alla didattica della matematica nelle scuole superiori. In
questa presentazione proporrò lo sviluppo di laboratori per alcune unità
didattiche, in particolare:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Insiemi e logica&lt;/li&gt;
&lt;li&gt;Monomi e polinomi&lt;/li&gt;
&lt;li&gt;Frazioni algebriche&lt;/li&gt;
&lt;li&gt;Geometria cartesiana (punti, rette, circonferenze)&lt;/li&gt;
&lt;li&gt;Coniche&lt;/li&gt;
&lt;li&gt;Sistemi di equazioni lineari&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per ciascun argomento presenterò degli esempi di codice.&lt;/p&gt;
&lt;p&gt;Il talk è rivolto a tutti i docenti (o aspiranti docenti) e studenti
delle Scuole Superiori.&lt;/p&gt;
&lt;p&gt;Non è richiesta una conoscenza approfondita del linguaggio Python come
prerequisito.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://slides.com/davidepoggiali/deck"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Poggiali</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:/pycon-italia-2018/insegnare-la-matematica-con-python-percorsi-suggeriti-per-le-scuole-superiori.html</guid><category>PyCon Italia 2018</category><category>mathematics</category><category>high-school</category><category>teaching</category></item><item><title>Exploring Patterns to Debug your Life</title><link>https://pyvideo.org/pycon-italia-2022/exploring-patterns-to-debug-your-life.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring Patterns to Debug your Life - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Just as in code, in our daily life we have patterns that can be
returning patterns. Can we debug our life, via debugging skills we
learned in coding? Come to experience this talk to learn how to debug
your life! In daily life we have patterns and even returning patterns,
at least if you take time to recognize some parts happening in your
life. This can be in your career, customer relations, and even in
personal and family relations. Nice patterns lead to success and
inspiration. Bad pattens leads to bore-out, burn-out or even worse… In
this talk Dennie and special guest speaker Miriam – a well-known Belgian
speaker and experience expert in Autism – will take you on a journey
where they explain life patterns via metaphors in the tech/ developer
world. You will learn how to recognize life patterns exactly as in code,
engineering, and business patterns. When you recognize the patterns it’s
finally time to learn to debug those patterns! Just as you debug code
patterns with changing the source code, you learn to debug life patterns
via changing lifestyle, and in specific thoughts. As you see, those are
just the same. Slides:&lt;/p&gt;
&lt;p&gt;Speakers: Miriam Perrone, Dennie Declercq&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miriam Perrone</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/exploring-patterns-to-debug-your-life.html</guid><category>PyCon Italia 2022</category><category>communication</category><category>community</category><category>teaching</category></item><item><title>Stupid Things I've Done With Python</title><link>https://pyvideo.org/pycon-italia-2022/stupid-things-ive-done-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stupid Things I’ve Done With Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;On every computer I’ve had for the past 20 years, I’ve created a folder
called “stupid python tricks”. It’s where I put code that should never
see the light of day. Code that abuses features like decorators,
metaclasses, and dynamic typing to do terrible things.&lt;/p&gt;
&lt;p&gt;Code I’m going to teach you. I have a GitHub repository that contains a
compilation of all the awful code I’ve written over the years, abusing
features like metaclasses, decorators, various &lt;strong&gt;dunder&lt;/strong&gt; methods, and
the mutable nature of Python’s underlying data structures.&lt;/p&gt;
&lt;p&gt;It’s a funny way to see how Python works under the hood, but it’s also
educational.&lt;/p&gt;
&lt;p&gt;Really!&lt;/p&gt;
&lt;p&gt;Each of the tricks is entertainingly terrible. But they’re also mostly
self-contained ways to see what happens when you override certain
behaviours of the Python language. Anyone with an intermediate level of
Python understanding should be able to follow along and learn something.&lt;/p&gt;
&lt;p&gt;I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replacing an imported module with a class, so attribute lookups can
be &amp;#64;properties, with &lt;em&gt;hilarious&lt;/em&gt; results.&lt;/li&gt;
&lt;li&gt;Overriding the &lt;tt class="docutils literal"&gt;__sub__&lt;/tt&gt; magic method to create a hyphenated,
fuzzy-matching version of a boolean.&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;__getattr__&lt;/tt&gt; to save time implementing all the functions in
the &lt;tt class="docutils literal"&gt;math&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;__eq__&lt;/tt&gt; to make things that aren’t really the same look the
same.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is an entertaining tour of the Python Data Model, and the
things you can do - if you’re so inclined.&lt;/p&gt;
&lt;p&gt;Speaker: Mark Smith&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/stupid-things-ive-done-with-python.html</guid><category>PyCon Italia 2022</category><category>abstractions</category><category>best practice</category><category>teaching</category></item><item><title>Teaching Python: who, how and what</title><link>https://pyvideo.org/pycon-italia-2022/teaching-python-who-how-and-what.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teaching Python: who, how and what - PyCon Italia 2022&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;People consider Python the easiest languange to learn, and they are
right, likely. Many students in (non-scientific) Universities think
that learning Python is a nightmare, expecially if is mandatory.&lt;/div&gt;
&lt;div class="line"&gt;So, do we have the right strategies to bring our language to all? (I
do not, but I am learning) After a few years of courses I realized I
(we?) need a strategy to teach Python properly. While it is really
exiting to teach PhD students how to make use of a script language in
their own projects, it is really hard to show its beauty and
opportunities to second year students when they hardly have the
concept of a folder, a variable, and if they have them, they are
usually quite confused. I would like to share my (little) experience,
the good and the bad, so to make a few suggestions for a general and
shared approach to teaching: should we introduce levels (A, B, C?),
what are the best books to use, how to make exams?&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Speaker: GIANFRANCO DURIN&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">GIANFRANCO DURIN</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/teaching-python-who-how-and-what.html</guid><category>PyCon Italia 2022</category><category>education</category><category>teaching</category></item><item><title>What do you want to be known for?</title><link>https://pyvideo.org/pycon-italia-2022/what-do-you-want-to-be-known-for.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you want to be known for? - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;If you feel professionally unsatisfied, struggle to make decisions, or
have a burning desire to leave behind an epic legacy – this session is
for you!&lt;/p&gt;
&lt;p&gt;In this fun + interactive session you’ll discover your Top 2 Personal
Values that are the secret to creating impact through your work. You
work hard. You are great at your job.&lt;/p&gt;
&lt;p&gt;But hard work is not what creates FULFILLMENT.&lt;/p&gt;
&lt;p&gt;If you feel professionally unsatisfied, struggle to make decisions, want
to feel more creative, or desire to leave behind an epic legacy – this
session is for you!&lt;/p&gt;
&lt;p&gt;In this fun + interactive session you’ll discover the secret to creating
impact through your work.&lt;/p&gt;
&lt;p&gt;When you get clear about what you value – finding your purpose, choosing
a direction, and making important career decisions becomes easy.&lt;/p&gt;
&lt;p&gt;In this session you’ll discover: - Your top two personal values - How to
quickly make career decisions that feel right - How to use creativity to
get clarity - Who you are now by modernizing your value system&lt;/p&gt;
&lt;p&gt;Join certified coach, master workshop facilitator, community creator,
and international entrepreneur Angela Parker for this unique session
that will help you get clear and inspire you to take action.&lt;/p&gt;
&lt;p&gt;Although Angela is American she lives half the year in Trentino Italy
and is a big supporter of the Python Community.&lt;/p&gt;
&lt;p&gt;Official Bio: Angela Parker is an international entrepreneur, CPCC
Certified Coach, ICF Coach Member, and AJ&amp;amp;Smart Master Workshop
Facilitator who teaches deep-feeling leaders &amp;amp; entrepreneurs how to use
creativity, values, self-compassion, and radical self-care – to create
deeply fulfilling work.&lt;/p&gt;
&lt;p&gt;Angela designs and facilitates impactful in-person and on-line
workshops, masterminds, and experiences for leaders and teams.&lt;/p&gt;
&lt;p&gt;Angela founded the largest and longest running outdoor fitness program
in Santa Monica CA. After her exit in 2018 she began coaching and
offering workshop facilitation. She’s known for her empathy, intuition,
directness, humor, and ability to thread the most impactful details into
all her sessions.&lt;/p&gt;
&lt;p&gt;Angela and her work has been featured on CBS, The LA Times, ESPN, MTV,
ABC, The Hallmark Channel, Carson Magazine, and Self Magazine.&lt;/p&gt;
&lt;p&gt;When Covid possible, Angela splits her time between the Italian Alps,
Los Angeles, Chicago, and Japan.&lt;/p&gt;
&lt;p&gt;Speaker: Angela Parker&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Angela Parker</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/what-do-you-want-to-be-known-for.html</guid><category>PyCon Italia 2022</category><category>communication</category><category>community</category><category>education</category><category>scaling</category><category>teaching</category></item><item><title>PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 1 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a geek with Python kung fu, you have fun skills to share with others,
including those still in high school and seeking to master mathematical
concepts that will serve them for a life time. In taking this tutorial,
you're opening a communications channel between yourself, and other
eager learners hoping to partake more deeply of open source culture and
the opportunities it offers. We know from last year that many PyCon
delegates are broadly interested in education track. This proposal
attempts to support this demand by developing some publicly-accessible
Python-related material that demonstrates how object-oriented
programming be learned by using them to implement concepts from the
mathematical domain. Learning can take place at multiple levels: Python
and object-oriented concepts. Mathematical concepts, which will be
demonstrated in ways readily accessible to anyone who understands
Python. Presentation of programming topics in the educational
environment. From this latter point of view the pair teaching format can
be considered experimental. Its success or otherwise will be determined
largely by group dynamics, and our goal is to make the outcome in and of
itself provide useful empirical data helpful to others planning
workshops.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of-.html</guid><category>PyCon US 2009</category><category>pycon</category><category>pycon2009</category><category>teaching</category></item><item><title>PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 2 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a geek with Python kung fu, you have fun skills to share with others,
including those still in high school and seeking to master mathematical
concepts that will serve them for a life time. In taking this tutorial,
you're opening a communications channel between yourself, and other
eager learners hoping to partake more deeply of open source culture and
the opportunities it offers. We know from last year that many PyCon
delegates are broadly interested in education track. This proposal
attempts to support this demand by developing some publicly-accessible
Python-related material that demonstrates how object-oriented
programming be learned by using them to implement concepts from the
mathematical domain. Learning can take place at multiple levels: Python
and object-oriented concepts. Mathematical concepts, which will be
demonstrated in ways readily accessible to anyone who understands
Python. Presentation of programming topics in the educational
environment. From this latter point of view the pair teaching format can
be considered experimental. Its success or otherwise will be determined
largely by group dynamics, and our goal is to make the outcome in and of
itself provide useful empirical data helpful to others planning
workshops.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of0.html</guid><category>PyCon US 2009</category><category>pycon</category><category>pycon2009</category><category>teaching</category></item><item><title>Think Globally, Hack Locally - Teaching Python in Your Community (#122)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--think-globally--hack-locally---teachi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Think Globally, Hack Locally - Teaching Python in Your Community&lt;/p&gt;
&lt;p&gt;Presented by Leigh Honeywell (HackLab.TO)&lt;/p&gt;
&lt;p&gt;For over a year, HackLabTO (&lt;a class="reference external" href="http://hacklab.to/"&gt;http://hacklab.to&lt;/a&gt;),
a hackerspace in Toronto, has been the home of an informal Python class
/ hack night every Thursday evening. Our participants represent a
diverse cross- section of the lab's community, and include everyone from
complete beginners who hadn't written code since BASIC in high school,
to seasoned veterans. Come hear about our successes and failures, and
learn how to start such an event in your local community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leigh Honeywell</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--think-globally--hack-locally---teachi.html</guid><category>PyCon US 2010</category><category>community</category><category>pycon</category><category>pycon2010</category><category>teaching</category></item><item><title>Panel: Python in Schools: Teaching It and Teaching With It.</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python in Schools: Teaching It and Teaching With It.&lt;/p&gt;
&lt;p&gt;Panel with Joel Zachary Miller, Jeffrey Elkner, Vern Ceder, Brian C.
Brumley, Maria Litvin&lt;/p&gt;
&lt;p&gt;Educators discuss Python as both a subject and a tool in primary and
secondary (K12) education. Topics addressed include the distinction
between teaching Python and teaching with Python, the benefits of Python
in K12 and ways to demonstrate the value of Python to administrators.
Panel includes private and public K12 educators and university faculty
involved in instruction in the K12 setting.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Zac Miller will act as panel moderator.&lt;/p&gt;
&lt;p&gt;Panel will open with a brief introduction of the origins of the panel
and self introductions of panel members before addressing the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The distinction between teaching Python and teaching with Python.&lt;ul&gt;
&lt;li&gt;Teaching Python&lt;/li&gt;
&lt;li&gt;Teaching Math with Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How does Teaching with Python complement Teaching Python?&lt;ul&gt;
&lt;li&gt;Do tensions between the two exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What keeps Python out of schools? What can be done to encourage more
schools to teach tools like Python?&lt;/li&gt;
&lt;li&gt;What is the biggest benefit teaching Python brings to your school and
students? What is the biggest benefit in general, beyond your school?&lt;/li&gt;
&lt;li&gt;Can teaching Python help spark creativity in those students who have
trouble exercising it?&lt;ul&gt;
&lt;li&gt;When teaching Python a creativity divide becomes readily apparent
among students. Students with a high level of curiosity and
creativity constantly try new things on their own, while other
students are focused solely on completing the assignments for
grades. How can an instructor handle this?&lt;/li&gt;
&lt;li&gt;What tangible steps can an instructor take to encourage
creativity?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does the future look like for Python in K12 education, both at
our own schools and in general?&lt;/li&gt;
&lt;li&gt;Audience Questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Panel Biographies:&lt;/p&gt;
&lt;p&gt;Vern Ceder, Director of Technology, Canterbury School, Ft Wayne,
Indiana. The Canterbury School has been teaching at least a little
Python to every single 8th and 9th grader in the school since 2001, as
well as offering electives in Python, Java, C, etc. Vern also teaches
Python through Northwestern's Gifted Learning Links program
(&lt;a class="reference external" href="http://www.ctd.northwestern.edu/gll/"&gt;http://www.ctd.northwestern.edu/gll/&lt;/a&gt;) and is the author of The Quick
Python Book, 2nd ed (&lt;a class="reference external" href="http://www.manning.com/ceder"&gt;http://www.manning.com/ceder&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Maria Litvin. Maria teaches Math and Computer Science at Phillips
Academy in Andover, MA, including &amp;quot;Introduction to Discrete Mathematics
and Programming in Python.&amp;quot; She also taught Python to Boston-area high
school teachers and to middle schoolers in Google's CAPE program. She's
co-author of several Computer Science textbooks, most recently
Mathematics for the Digital Age and Programming in Python
(&lt;a class="reference external" href="http://www.skylit.c%20om/mathandpython.html"&gt;www.skylit.com/mathandpython.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Jeffrey Elkner, teaches computer programming and information technology
at the Governor's Career and Technical Academy in Arlington, Virginia.
He has been teaching with Python since 1999, and is co-author of a free
on-line textbook: How to Think Like a Computer Scientist: Learning with
Python. He also maintains the Open Book Project
(&lt;a class="reference external" href="http://openbookproject.net/"&gt;http://openbookproject.net&lt;/a&gt;), which
contains several Python resources. Jeff has attended each PyCon held
thus far, often bringing students along with him.&lt;/p&gt;
&lt;p&gt;Brian Brumley teaches Python (and lots of other stuff) to grades 6-8 at
Porter-Gaud school in Charleston, SC. Brian is a regular presenter at
state and regional conferences on technology and programming in schools.&lt;/p&gt;
&lt;p&gt;Zac Miller is adjunct instructor in the STEM school at Gainesville State
College and a faculty member at the Da Vinci Academy at South Hall
Middle School in Gainesville, Georgia. Zac is currently teaching Python
programming and Python programming for Geographic Information Systems to
K12 and college- level students.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:/pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html</guid><category>PyCon US 2011</category><category>pycon</category><category>pycon2011</category><category>teaching</category></item><item><title>Python and Robots: Teaching Programming in High School</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Robots: Teaching Programming in High School&lt;/p&gt;
&lt;p&gt;Presented by Vern Ceder&lt;/p&gt;
&lt;p&gt;Combining Python with inexpensive robots is a very effective way of
teaching programming at the middle and high school levels. Since Python
is easy to understand a constructivist approach is possible - students
learn by creating and running simple programs, observing the results,
and then modifying their code to fix bugs and add functionality.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The approach suggested in this talk is partly based upon that developed
at the Institute for Personal Robots in Education
(&lt;a class="reference external" href="http://wiki.roboteducation.org/"&gt;http://wiki.roboteducation.org&lt;/a&gt;)
by staff from Georgia Tech and Bryn Mawr, combined with my own
experiences teaching programming with Python as described in my talk
&amp;quot;Goodbye, Hello World: Rethinking Teaching with Python&amp;quot;, PyCon 2007, and
my subsequent talks at NECC.&lt;/p&gt;
&lt;p&gt;Because students are able to see what their code is doing and because
Python is easy to understand, students can explore simple programming
concepts, learning features as they need them. This approach increases
both student engagement and retention. It also seems that this approach
is more appealing to girls than a more traditional programming class.&lt;/p&gt;
&lt;p&gt;I'll illustrate my talk with samples of code created by students and
video of the students/robots in action.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Introduction - school background, course structure, origin of approach&lt;/p&gt;
&lt;p&gt;Hardware and computer setup used&lt;/p&gt;
&lt;p&gt;Initial exercises and first projects&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Control of robot&lt;/li&gt;
&lt;li&gt;Program as sequence of commands&lt;/li&gt;
&lt;li&gt;Basic programming concepts - looping, branching, functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced projects&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* obstacle detection
* image processing
* simple AI approaches
&lt;/pre&gt;
&lt;p&gt;Pitfalls and strategies for using robots&lt;/p&gt;
&lt;p&gt;Questions and Suggestions&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vern Ceder</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:/pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</guid><category>PyCon US 2011</category><category>highschool</category><category>pycon</category><category>pycon2011</category><category>robots</category><category>teaching</category></item></channel></rss>