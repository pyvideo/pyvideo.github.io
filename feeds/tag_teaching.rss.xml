<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>From Pascal to Python</title><link>https://pyvideo.org/kiwi-pycon-2019/from-pascal-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A look at the journey schools (specifically Burnside High) have taken from no computers to students being able to take courses in computer science, software engineering, game development and microelectronics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Dunford</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/from-pascal-to-python.html</guid><category>Teaching</category></item><item><title>How to read (code)</title><link>https://pyvideo.org/europython-2019/how-to-read-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Humber</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/how-to-read-code.html</guid><category>Beginners</category><category>Clean Code</category><category>Documentation</category><category>Learning</category><category>Teaching</category></item><item><title>Teaching Programming to the Next Generation</title><link>https://pyvideo.org/europython-2019/teaching-programming-to-the-next-generation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our generation of young people in school (aged 5-18) have noticed the
connection between Computer pRogramming, Technology &amp;amp; Success and
Billionaires.On mass they are clamoring to master the skill of Computer
pRogramming. We describe a successful working model for the teaching of
Computer pRogamming.&lt;/p&gt;
&lt;p&gt;Computer Science is now regarded as one of the leading disciplines in
the 21st century. Computers are ubiquitous and prevalent in most, if not
all, sectors of our modern society – applications include using them in
weather forecasting, robotic surgery, space exploration, e-commerce,
smart cities, driverless cars, etc.&lt;/p&gt;
&lt;p&gt;Therefore, coding or computer programming is now regarded by many as an
essential skill for the young person, and it has been dubbed the ‘4th’
R’ (computer pRogramming) along with Reading, wRiting and aRithmetic.&lt;/p&gt;
&lt;p&gt;In recognition of the new status of computer programming, governments
worldwide have launched initiatives to have it taught in schools from
Kindergarten through to junior school and all the way through secondary
school.&lt;/p&gt;
&lt;p&gt;So, the question emerges is how do we best teach and motivate the next
generation in acquiring this skill? Given the fact that this field is
very much in its infancy, there are insufficient number of skilled
Computer Science teachers and very little pedagogy to guide the
educator. Therefore, the whole world is learning how best to teach this
subject by trial and error.&lt;/p&gt;
&lt;p&gt;The talk will describe a case study whereby coding/computer programming,
in the form of Python programming, was introduced to a group of 110
young people from the ages of 11 to 18 (Years 7-13 in a U.K secondary
school). The talk will include descriptions of the various teaching
methodologies introduced to the young people for this purpose and the
outcomes; the talk will also address various challenges and questions
about how to teach coding to young people. The talk will conclude with
helpful suggestions, based on the findings of the case study, on how to
proceed with the teaching of computer programming to these people.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lilian Nandi anonymous</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/teaching-programming-to-the-next-generation.html</guid><category>All Other Programming Languages</category><category>Education</category><category>Programming</category><category>Python 3</category><category>Teaching</category></item><item><title>Insegnare la matematica con Python: percorsi suggeriti per le Scuole Superiori</title><link>https://pyvideo.org/pycon-italia-2018/insegnare-la-matematica-con-python-percorsi-suggeriti-per-le-scuole-superiori.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il linguaggio Python, versatile e ordinato, ha una curva di
apprendimento relativamente poco ripida e può essere utilizzato come
supporto alla didattica della matematica nelle scuole superiori. In
questa presentazione proporrò lo sviluppo di laboratori per alcune unità
didattiche, in particolare:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Insiemi e logica&lt;/li&gt;
&lt;li&gt;Monomi e polinomi&lt;/li&gt;
&lt;li&gt;Frazioni algebriche&lt;/li&gt;
&lt;li&gt;Geometria cartesiana (punti, rette, circonferenze)&lt;/li&gt;
&lt;li&gt;Coniche&lt;/li&gt;
&lt;li&gt;Sistemi di equazioni lineari&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per ciascun argomento presenterò degli esempi di codice.&lt;/p&gt;
&lt;p&gt;Il talk è rivolto a tutti i docenti (o aspiranti docenti) e studenti
delle Scuole Superiori.&lt;/p&gt;
&lt;p&gt;Non è richiesta una conoscenza approfondita del linguaggio Python come
prerequisito.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://slides.com/davidepoggiali/deck"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Poggiali</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/insegnare-la-matematica-con-python-percorsi-suggeriti-per-le-scuole-superiori.html</guid><category>mathematics</category><category>high-school</category><category>teaching</category></item><item><title>Refactoring PyChart</title><link>https://pyvideo.org/europython-2011/refactoring-pychart.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jacob Hallen - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyChart is a very nice program for producing print quality graphs.
However, it came equipped with a rather strange API, where every class
was called T. It was also using the global namespace in strange and
disturbing ways. Furthermore, it mixed multiple distinct tasks in some
classes.&lt;/p&gt;
&lt;p&gt;I will show how I went about refactoring the package in order to make a
nice and clean API. This talk is focused on teaching refactoring
methodology to beginner and intermediate level programmers. It will also
give a brief introduction to how to make beautiful graphs with PyChart.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/refactoring-pychart.html</guid><category>graphs</category><category>teaching</category></item><item><title>Teaching Python to the young and impressionable</title><link>https://pyvideo.org/pycon-au-2011/teaching-python-to-the-young-and-impressionable.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We present two outreach programmes run by Sydney University for high
school students: the National Computer Science School
(&lt;a class="reference external" href="http://www.ncss.edu.au"&gt;http://www.ncss.edu.au&lt;/a&gt;) and the Girls' Programming Network
(&lt;a class="reference external" href="http://sydney.edu.au/it/gpn"&gt;http://sydney.edu.au/it/gpn&lt;/a&gt;). For the past four years we have been
teaching Python to students in grades 9-12, and based on this experience
we will discuss why Python is a good first language and the parts of it
which are still difficult for students to grasp.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Georgina Wilcox</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/teaching-python-to-the-young-and-impressionable.html</guid><category>network</category><category>outreach</category><category>science</category><category>teaching</category></item><item><title>The NCSS Challenge: teaching programming via automated testing</title><link>https://pyvideo.org/pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The NCSS Challenge (&lt;a class="reference external" href="http://challenge.ncss.edu.au/"&gt;http://challenge.ncss.edu.au/&lt;/a&gt;) is an online
programming competition for Australian high school students. There are
four different courses being run during 2011: Introductory Python,
Intermediate Python, Advanced Python, and Embedded Systems (using the
Arduino). In 2010 we had over 1700 students participate in the
Challenge. There are a number of interesting technical challenges which
had to be overcome in order to facilitate such a system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Dawborn</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</guid><category>embedded</category><category>teaching</category><category>testing</category></item><item><title>PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 1 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a geek with Python kung fu, you have fun skills to share with others,
including those still in high school and seeking to master mathematical
concepts that will serve them for a life time. In taking this tutorial,
you're opening a communications channel between yourself, and other
eager learners hoping to partake more deeply of open source culture and
the opportunities it offers. We know from last year that many PyCon
delegates are broadly interested in education track. This proposal
attempts to support this demand by developing some publicly-accessible
Python-related material that demonstrates how object-oriented
programming be learned by using them to implement concepts from the
mathematical domain. Learning can take place at multiple levels: Python
and object-oriented concepts. Mathematical concepts, which will be
demonstrated in ways readily accessible to anyone who understands
Python. Presentation of programming topics in the educational
environment. From this latter point of view the pair teaching format can
be considered experimental. Its success or otherwise will be determined
largely by group dynamics, and our goal is to make the outcome in and of
itself provide useful empirical data helpful to others planning
workshops.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of-.html</guid><category>pycon</category><category>pycon2009</category><category>teaching</category></item><item><title>PyCon 2009: Python for Teachers (and Teachers of Teachers) (Part 2 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a geek with Python kung fu, you have fun skills to share with others,
including those still in high school and seeking to master mathematical
concepts that will serve them for a life time. In taking this tutorial,
you're opening a communications channel between yourself, and other
eager learners hoping to partake more deeply of open source culture and
the opportunities it offers. We know from last year that many PyCon
delegates are broadly interested in education track. This proposal
attempts to support this demand by developing some publicly-accessible
Python-related material that demonstrates how object-oriented
programming be learned by using them to implement concepts from the
mathematical domain. Learning can take place at multiple levels: Python
and object-oriented concepts. Mathematical concepts, which will be
demonstrated in ways readily accessible to anyone who understands
Python. Presentation of programming topics in the educational
environment. From this latter point of view the pair teaching format can
be considered experimental. Its success or otherwise will be determined
largely by group dynamics, and our goal is to make the outcome in and of
itself provide useful empirical data helpful to others planning
workshops.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--python-for-teachers--and-teachers-of0.html</guid><category>pycon</category><category>pycon2009</category><category>teaching</category></item><item><title>Think Globally, Hack Locally - Teaching Python in Your Community (#122)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--think-globally--hack-locally---teachi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Think Globally, Hack Locally - Teaching Python in Your Community&lt;/p&gt;
&lt;p&gt;Presented by Leigh Honeywell (HackLab.TO)&lt;/p&gt;
&lt;p&gt;For over a year, HackLabTO (&lt;a class="reference external" href="http://hacklab.to/"&gt;http://hacklab.to&lt;/a&gt;),
a hackerspace in Toronto, has been the home of an informal Python class
/ hack night every Thursday evening. Our participants represent a
diverse cross- section of the lab's community, and include everyone from
complete beginners who hadn't written code since BASIC in high school,
to seasoned veterans. Come hear about our successes and failures, and
learn how to start such an event in your local community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leigh Honeywell</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--think-globally--hack-locally---teachi.html</guid><category>community</category><category>pycon</category><category>pycon2010</category><category>teaching</category></item><item><title>Panel: Python in Schools: Teaching It and Teaching With It.</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python in Schools: Teaching It and Teaching With It.&lt;/p&gt;
&lt;p&gt;Panel with Joel Zachary Miller, Jeffrey Elkner, Vern Ceder, Brian C.
Brumley, Maria Litvin&lt;/p&gt;
&lt;p&gt;Educators discuss Python as both a subject and a tool in primary and
secondary (K12) education. Topics addressed include the distinction
between teaching Python and teaching with Python, the benefits of Python
in K12 and ways to demonstrate the value of Python to administrators.
Panel includes private and public K12 educators and university faculty
involved in instruction in the K12 setting.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Zac Miller will act as panel moderator.&lt;/p&gt;
&lt;p&gt;Panel will open with a brief introduction of the origins of the panel
and self introductions of panel members before addressing the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The distinction between teaching Python and teaching with Python.&lt;ul&gt;
&lt;li&gt;Teaching Python&lt;/li&gt;
&lt;li&gt;Teaching Math with Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How does Teaching with Python complement Teaching Python?&lt;ul&gt;
&lt;li&gt;Do tensions between the two exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What keeps Python out of schools? What can be done to encourage more
schools to teach tools like Python?&lt;/li&gt;
&lt;li&gt;What is the biggest benefit teaching Python brings to your school and
students? What is the biggest benefit in general, beyond your school?&lt;/li&gt;
&lt;li&gt;Can teaching Python help spark creativity in those students who have
trouble exercising it?&lt;ul&gt;
&lt;li&gt;When teaching Python a creativity divide becomes readily apparent
among students. Students with a high level of curiosity and
creativity constantly try new things on their own, while other
students are focused solely on completing the assignments for
grades. How can an instructor handle this?&lt;/li&gt;
&lt;li&gt;What tangible steps can an instructor take to encourage
creativity?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does the future look like for Python in K12 education, both at
our own schools and in general?&lt;/li&gt;
&lt;li&gt;Audience Questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Panel Biographies:&lt;/p&gt;
&lt;p&gt;Vern Ceder, Director of Technology, Canterbury School, Ft Wayne,
Indiana. The Canterbury School has been teaching at least a little
Python to every single 8th and 9th grader in the school since 2001, as
well as offering electives in Python, Java, C, etc. Vern also teaches
Python through Northwestern's Gifted Learning Links program
(&lt;a class="reference external" href="http://www.ctd.northwestern.edu/gll/"&gt;http://www.ctd.northwestern.edu/gll/&lt;/a&gt;) and is the author of The Quick
Python Book, 2nd ed (&lt;a class="reference external" href="http://www.manning.com/ceder"&gt;http://www.manning.com/ceder&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Maria Litvin. Maria teaches Math and Computer Science at Phillips
Academy in Andover, MA, including &amp;quot;Introduction to Discrete Mathematics
and Programming in Python.&amp;quot; She also taught Python to Boston-area high
school teachers and to middle schoolers in Google's CAPE program. She's
co-author of several Computer Science textbooks, most recently
Mathematics for the Digital Age and Programming in Python
(&lt;a class="reference external" href="http://www.skylit.c%20om/mathandpython.html"&gt;www.skylit.com/mathandpython.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Jeffrey Elkner, teaches computer programming and information technology
at the Governor's Career and Technical Academy in Arlington, Virginia.
He has been teaching with Python since 1999, and is co-author of a free
on-line textbook: How to Think Like a Computer Scientist: Learning with
Python. He also maintains the Open Book Project
(&lt;a class="reference external" href="http://openbookproject.net/"&gt;http://openbookproject.net&lt;/a&gt;), which
contains several Python resources. Jeff has attended each PyCon held
thus far, often bringing students along with him.&lt;/p&gt;
&lt;p&gt;Brian Brumley teaches Python (and lots of other stuff) to grades 6-8 at
Porter-Gaud school in Charleston, SC. Brian is a regular presenter at
state and regional conferences on technology and programming in schools.&lt;/p&gt;
&lt;p&gt;Zac Miller is adjunct instructor in the STEM school at Gainesville State
College and a faculty member at the Da Vinci Academy at South Hall
Middle School in Gainesville, Georgia. Zac is currently teaching Python
programming and Python programming for Geographic Information Systems to
K12 and college- level students.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html</guid><category>pycon</category><category>pycon2011</category><category>teaching</category></item><item><title>Python and Robots: Teaching Programming in High School</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Robots: Teaching Programming in High School&lt;/p&gt;
&lt;p&gt;Presented by Vern Ceder&lt;/p&gt;
&lt;p&gt;Combining Python with inexpensive robots is a very effective way of
teaching programming at the middle and high school levels. Since Python
is easy to understand a constructivist approach is possible - students
learn by creating and running simple programs, observing the results,
and then modifying their code to fix bugs and add functionality.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The approach suggested in this talk is partly based upon that developed
at the Institute for Personal Robots in Education
(&lt;a class="reference external" href="http://wiki.roboteducation.org/"&gt;http://wiki.roboteducation.org&lt;/a&gt;)
by staff from Georgia Tech and Bryn Mawr, combined with my own
experiences teaching programming with Python as described in my talk
&amp;quot;Goodbye, Hello World: Rethinking Teaching with Python&amp;quot;, PyCon 2007, and
my subsequent talks at NECC.&lt;/p&gt;
&lt;p&gt;Because students are able to see what their code is doing and because
Python is easy to understand, students can explore simple programming
concepts, learning features as they need them. This approach increases
both student engagement and retention. It also seems that this approach
is more appealing to girls than a more traditional programming class.&lt;/p&gt;
&lt;p&gt;I'll illustrate my talk with samples of code created by students and
video of the students/robots in action.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Introduction - school background, course structure, origin of approach&lt;/p&gt;
&lt;p&gt;Hardware and computer setup used&lt;/p&gt;
&lt;p&gt;Initial exercises and first projects&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Control of robot&lt;/li&gt;
&lt;li&gt;Program as sequence of commands&lt;/li&gt;
&lt;li&gt;Basic programming concepts - looping, branching, functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced projects&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* obstacle detection
* image processing
* simple AI approaches
&lt;/pre&gt;
&lt;p&gt;Pitfalls and strategies for using robots&lt;/p&gt;
&lt;p&gt;Questions and Suggestions&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vern Ceder</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</guid><category>highschool</category><category>pycon</category><category>pycon2011</category><category>robots</category><category>teaching</category></item></channel></rss>