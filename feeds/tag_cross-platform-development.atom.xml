<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Cross-Platform-Development</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_cross-platform-development.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Tools of the Trade: The Making of a Code Editor.</title><link href="https://pyvideo.org/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project. We have had to address:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cross platform GUI development.&lt;/li&gt;
&lt;li&gt;Cross platform packaging solutions for Python.&lt;/li&gt;
&lt;li&gt;Creating an interactive visual debugger.&lt;/li&gt;
&lt;li&gt;Integrating with iPython notebook.&lt;/li&gt;
&lt;li&gt;Integrating with various IoT MicroPython devices.&lt;/li&gt;
&lt;li&gt;Integrating with frameworks such as PyGame/PyGameZero and Flask.&lt;/li&gt;
&lt;li&gt;Automating cross platform testing.&lt;/li&gt;
&lt;li&gt;Researching and testing UX with a challenging user base.&lt;/li&gt;
&lt;li&gt;Accessibility for all.&lt;/li&gt;
&lt;li&gt;Internationalisation.&lt;/li&gt;
&lt;li&gt;Creating an inclusive, welcoming and supportive community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will explain why Mu was created, how Mu was created and, most
importantly, shares the decision making, technical research and
implementation details of Mu in the hope others can learn from our
mistakes, mis-steps and muck-ups.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Cross-Platform-Development"></category><category term="Development"></category><category term="Education"></category><category term="Packaging"></category><category term="failures/mistakes"></category></entry><entry><title>Building Industry 4.0 logistics applications with MicroPython and ESP32 MCUs</title><link href="https://pyvideo.org/europython-2019/building-industry-40-logistics-applications-with-micropython-and-esp32-mcus.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Florian Wahl</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/building-industry-40-logistics-applications-with-micropython-and-esp32-mcus.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this session, we will report about a forklift hailing application
we built using MicroPython and the ESP32-based prototyping hardware
M5Stack.&lt;/div&gt;
&lt;div class="line"&gt;In a production facility, machine operators can hail a forklift using
an ESP32 device running MicroPython. The device sends a request to a
forklift dispatcher software, written in …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this session, we will report about a forklift hailing application
we built using MicroPython and the ESP32-based prototyping hardware
M5Stack.&lt;/div&gt;
&lt;div class="line"&gt;In a production facility, machine operators can hail a forklift using
an ESP32 device running MicroPython. The device sends a request to a
forklift dispatcher software, written in Python. The request is queued
and subsequently, the next available forklift is notified and sent to
the machine. Each forklift is also fitted with an ESP32 device. In
this project, the prototyping hardware M5Stack was used. It features
an ESP32 micro controller with Bluetooth, WIFI, GPIO, three buttons,
and a display.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Attendees will learn how MicroPython and prototyping hardware can be
used to scale from an idea on the developers desk to a working system in
a rough Industry 4.0 production environment. The talk will recap our
journey with MicroPython, the lessons learned, and the pitfalls to
avoid. Furthermore, the tooling setup will be introduced, including our
M5Stack GUI-simulator to mock the M5Stack display.&lt;/p&gt;
&lt;p&gt;The central dispatch server is built using Python and deployed in a
Docker container. Messages are exchanged using MQTT, a popular IoT
message protocol. The talk will conclude with a live demonstration of
the forklift hailing system. Attendees should be comfortable with the
Python syntax but are not expected to have any MicroPython, MQTT, Docker
or domain knowledge.&lt;/p&gt;
&lt;p&gt;Materials can be found at &lt;a class="reference external" href="https://gitlab.com/fwahl/europython2019"&gt;https://gitlab.com/fwahl/europython2019&lt;/a&gt;.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Cross-Platform-Development"></category><category term="DIY"></category><category term="Hardware/IoT"></category><category term="Internet of Things (IoT)"></category><category term="MicroPython"></category></entry><entry><title>How to ship a Python app to a hundred million desktops</title><link href="https://pyvideo.org/europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Max Bélanger</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is widely used to write scripts and tools, but did you know that
it can also be used to build client-side end-user applications? Crossing
the gap from script to app can be challenging: Join us to learn how to
write modern, high quality desktop apps in Python!&lt;/p&gt;
&lt;p&gt;At …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is widely used to write scripts and tools, but did you know that
it can also be used to build client-side end-user applications? Crossing
the gap from script to app can be challenging: Join us to learn how to
write modern, high quality desktop apps in Python!&lt;/p&gt;
&lt;p&gt;At Dropbox, we’ve been fans of Python from the very beginning: we’ll
take you on a tour of our app for Windows/macOS/Linux and share our
“lessons learned” from over 10 years of development.&lt;/p&gt;
&lt;p&gt;We’ll share best practices and techniques for shipping Python code to
hundreds of millions of devices: discover how to maximize security,
improve performance and guarantee stability.&lt;/p&gt;
&lt;p&gt;We’ll explore the key choices we made and why: learn how we migrated to
Python 3 by simultaneously shipping both versions, or how we use HTML to
power our GUI (a la Electron).&lt;/p&gt;
&lt;p&gt;We’ll reveal our favorite tools and libraries: learn how we scaled from
a few engineers to over 100 and added support for other programming
languages (like Rust).&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The goal of this talk is to share our learnings from using Python on
Windows, macOS and Linux to encourage the use of Python when building
Desktop apps.&lt;/div&gt;
&lt;div class="line"&gt;- We also want to recognize the third-party libraries we’ve used (and
their authors) to raise their profile with the overall community.&lt;/div&gt;
&lt;div class="line"&gt;- We hope this will inspire attendees to write more desktop Python
code, and raise awareness for this use case with the community as a
whole.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We intend to speak to any Python developer/engineer or enthusiast who
makes use of Python in a Desktop environment (or wants to), whether
it’s to make scripts, tools or apps.&lt;/div&gt;
&lt;div class="line"&gt;We do not expect knowledge of any specific third-party Python
libraries; in fact, we hope to draw attention to and recognize many
libraries we’ve found useful.&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Cross-Platform-Development"></category><category term="Mac OS X"></category><category term="Windows"></category></entry><entry><title>Serverless 2.0 with Cloudstate.io-stateful functions with Python</title><link href="https://pyvideo.org/europython-2020/serverless-20-with-cloudstateio-stateful-functions-with-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Sean Walsh</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/serverless-20-with-cloudstateio-stateful-functions-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine billions of functions, with in-memory state, distributed across a Kubernetes cluster!&lt;/p&gt;
&lt;p&gt;Serverless is revolutionary and will dominate the future of Cloud. Function-as-a-Service (FaaS) however—with its stateless and short-lived functions is only the first step.&lt;/p&gt;
&lt;p&gt;What’s needed is a next-generation Serverless platform and programming model for general-purpose …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine billions of functions, with in-memory state, distributed across a Kubernetes cluster!&lt;/p&gt;
&lt;p&gt;Serverless is revolutionary and will dominate the future of Cloud. Function-as-a-Service (FaaS) however—with its stateless and short-lived functions is only the first step.&lt;/p&gt;
&lt;p&gt;What’s needed is a next-generation Serverless platform and programming model for general-purpose application development in the new world of real-time data and event-driven systems. What is missing is ways to manage distributed state in a scalable and available fashion, support for long-lived virtual stateful services, ways to physically co-locate data and processing, and options for choosing the right data consistency model for the job.&lt;/p&gt;
&lt;p&gt;This talk will discuss the challenges, requirements, and introduce you to our proposed solution: Cloudstate—an Open Source project building the next generation Stateful Serverless, running on Kubernetes, Akka, gRPC, Knative, and GraalVM, with polyglot support for Python, Java, Go, JavaScript, Swift, Scala, Python, Kotlin, and more.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Cross-Platform-Development"></category><category term="Development"></category><category term="Distributed Systems"></category><category term="Public Cloud (AWS/Google/...)"></category></entry></feed>