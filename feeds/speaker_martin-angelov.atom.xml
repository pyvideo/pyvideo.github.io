<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_martin-angelov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-26T00:00:00+00:00</updated><entry><title>Proper Django Testing</title><link href="https://pyvideo.org/europython-2018/proper-django-testing.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Martin Angelov</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/proper-django-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I’m currently working in a Django project, We have a lot of tests (~
2000) and a fair amount of code coverage currently. The system and the
requirements of the client grows everyday (like in every other project
these days). I’ve convinced that the effort we put in making each of
these tests pays off daily.&lt;/p&gt;
&lt;p&gt;Speaking with other Django and Python developers I’ve noticed that
people often “overengineer” their unit tests and they usually tend to
break their principles.&lt;/p&gt;
&lt;p&gt;In this presentation I will talk mainly about unit tests. - what
packages we use and how and when to use them (properly). We will take a
look on how we structure our projects and how this structure actually
helps us write proper unit tests. I will start with the very basic tests
and continue with the mocking technique. In the end I’m going to refer
to other testing methods (integration, E2E, validation testing, visual
regression, etc.).&lt;/p&gt;
&lt;p&gt;The goal of this talk is to make people better in testing and to show
them how these skills will fasten the development process and help them
maintain their project and it’s quality.&lt;/p&gt;
</summary></entry></feed>