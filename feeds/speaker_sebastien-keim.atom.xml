<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastien-keim.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-11-30T00:00:00+00:00</updated><entry><title>élégants objets</title><link href="https://pyvideo.org/pycon-fr-2013/elegants-objets.html" rel="alternate"></link><published>2013-11-30T00:00:00+00:00</published><updated>2013-11-30T00:00:00+00:00</updated><author><name>Sébastien Keim</name></author><id>tag:pyvideo.org,2013-11-30:pycon-fr-2013/elegants-objets.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Qu'est ce qui rend Python et sa bibliothèque standard si attrayants ? Et
comment créer des objets qui ont les mêmes qualités ?&lt;/p&gt;
&lt;p&gt;Un bref rappel des peps 8 et 20 pour évoquer la philosophie du langage;
notamment les éléments de son modèle conceptuel qu'il faut garder à
l'esprit quand on écrit une classe.&lt;/p&gt;
&lt;p&gt;Seront ensuite présentés divers protocoles du langages: constructeur et
destructeur, conversion de types, hachage et comparaison, opérateurs,
dérivation , gestion des ressources, énumération... et de la
bibliothèque standard: documentation et débogage, pickle et copy ...&lt;/p&gt;
&lt;p&gt;Ces protocoles documentés sont l'arbre qui cache la forêt : il existe
une foule d'archétypes plus implicites, que les programmeurs ont déjà
rencontré dans les modules qu'ils ont utilisé; et qu'ils s'attendront
implicitement à retrouver dans vos objets. Comment découvrir ces
archétypes et les reproduire ?&lt;/p&gt;
</summary></entry></feed>