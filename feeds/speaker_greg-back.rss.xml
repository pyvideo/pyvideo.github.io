<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 30 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>U is for Unicode: Solving the Mystery</title><link>https://pyvideo.org/pyohio-2017/u-is-for-unicode-solving-the-mystery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will attempt to resolve some of the mystery and confusing behavior about Unicode (and other text encoding issues) in Python. It will cover Python handles text in general, the differences in Unicode text between Python 2 and Python 3, how various standard library APIs handle Unicode text, and a bit about detecting the encoding of unknown text.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Back</dc:creator><pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-30:pyohio-2017/u-is-for-unicode-solving-the-mystery.html</guid></item><item><title>Best Practices for Python Scripting</title><link>https://pyvideo.org/pyohio-2015/best-practices-for-python-scripting.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python REPL is an amazing tool for exploring a problem and quickly
finding an answer. But how do you turn that &amp;quot;quick and dirty&amp;quot; snippet
into an elegant, reusable module? In this talk, you'll learn how to
isolate input, output, configuration options and more from your core
logic to transform that block of code into a package and script that
behave well in command line environments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Back</dc:creator><pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-01:pyohio-2015/best-practices-for-python-scripting.html</guid><category>talk</category></item></channel></rss>