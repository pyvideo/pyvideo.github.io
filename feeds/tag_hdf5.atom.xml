<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_hdf5.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-03-11T00:00:00+00:00</updated><entry><title>Getting started with HDF5 and PyTables</title><link href="https://pyvideo.org/pycon-sk-2018/getting-started-with-hdf5-and-pytables.html" rel="alternate"></link><published>2018-03-11T00:00:00+00:00</published><updated>2018-03-11T00:00:00+00:00</updated><author><name>Giacomo Debidda</name></author><id>tag:pyvideo.org,2018-03-11:pycon-sk-2018/getting-started-with-hdf5-and-pytables.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HDF5 is a data model, a library, a file format for storing and managing
big and complex data. PyTables is a Python package built on top of the
HDF5 library and NumPy. It provides a high-level interface with advanced
indexing and database-like query capabilities. PyTables is both easy to
use and extremely fast, so it might be an invaluable tool if you need to
work with large, hierarchical datasets. At the end of this talk you will
learn what HDF5 is, why it might be the right file format for you, and
where PyTables fits in the Python data ecosystem.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Outline:&lt;/div&gt;
&lt;div class="line"&gt;- What is HDF5 and who uses it?&lt;/div&gt;
&lt;div class="line"&gt;- Brief overview of the HDF5 data model&lt;/div&gt;
&lt;div class="line"&gt;- First steps with PyTables&lt;/div&gt;
&lt;div class="line"&gt;- PyTables tools&lt;/div&gt;
&lt;div class="line"&gt;- Search big data with PyTables and NumExpr&lt;/div&gt;
&lt;div class="line"&gt;- Additional resources to learn more&lt;/div&gt;
&lt;div class="line"&gt;- Q&amp;amp;A&lt;/div&gt;
&lt;/div&gt;
</summary><category term="HDF5"></category><category term="PyCon SK"></category><category term="PyTables"></category><category term="Python"></category></entry><entry><title>pypet: A Python Toolkit for Simulations and Numerical Experiments</title><link href="https://pyvideo.org/pydata-berlin-2016/pypet-a-python-toolkit-for-simulations-and-numerical-experiments.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Robert Meyer</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/pypet-a-python-toolkit-for-simulations-and-numerical-experiments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;pypet manages exploration of the parameter space of any numerical simulation in Python, thereby storing your data into HDF5 files for you. The toolkit offers a new data container which lets you access all your parameters and results from a single source. Data I/O of your simulations and analyses become a piece of cake!&lt;/p&gt;
&lt;p&gt;pypet &lt;a class="reference external" href="http://pypet.readthedocs.org/"&gt;python parameter exploration toolkit&lt;/a&gt; is a new multi-platform Python toolkit for management of simulations and storage of numerical data. Exploring or sampling the space of model parameters is one key aspect of simulations and numerical experiments. pypet was especially designed to allow easy and arbitrary sampling of trajectories through a parameter space beyond simple grid searches.&lt;/p&gt;
&lt;p&gt;Simulation parameters as well as the obtained results are collected by pypet and stored in the widely used &lt;a class="reference external" href="http://www.hdfgroup.org/HDF5/"&gt;HDF5 file format&lt;/a&gt;. This allows fast and convenient loading of data for further analyses. Furthermore, pypet provides an environment with various features. For example, among these are multiprocessing for fast parallel simulations, dynamic loading of data, integration of Git version control, and supervision of experiments via the electronic lab notebook &lt;a class="reference external" href="https://pythonhosted.org/Sumatra/"&gt;Sumatra&lt;/a&gt;. A rich set of data formats is supported encompassing native Python types, Numpy and Scipy data, and &lt;a class="reference external" href="http://pandas.pydata.org/"&gt;pandas DataFrames&lt;/a&gt;. Moreover, the toolkit is easily extendable to allow the user to add customized data formats. pypet is a very flexible tool and suited for short Python scripts as well as large scale projects that involve simulations and numerical experiments.&lt;/p&gt;
</summary><category term="pypet"></category><category term="HDF5"></category></entry><entry><title>Store and manage data effortlessly with HDF5</title><link href="https://pyvideo.org/pydata-amsterdam-2016/store-and-manage-data-effortlessly-with-hdf5.html" rel="alternate"></link><published>2016-03-26T00:00:00+00:00</published><updated>2016-03-26T00:00:00+00:00</updated><author><name>Margaret Mahan</name></author><id>tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/store-and-manage-data-effortlessly-with-hdf5.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Are you looking for accessible, compressed, organized data? HDF5 might be the solution you’re looking for. HDF5 works like a file system within a file, designed for flexible and efficient storage and I/O for high volume, complex data. Come learn from a Pyentist how to leverage HDF5, get started with h5py, and see a real-world example of a processing pipeline utilizing HDF5.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Are you&lt;/p&gt;
&lt;p&gt;a Pyentist1?
frequently ‘grep’-ing?
drowning in ASCII files?
extending filenames for each processing step?
looking for accessible, compressed, organized data?
If you answered yes to any of these questions, then HDF5 might be the solution you’re looking for. HDF5 is entirely open source and supported by a variety of programming languages and tools, including Python (h5py). HDF5 not only supports large, complex, heterogeneous data but is self-describing and supports data slicing. In this talk, you’ll learn about embracing HDF5 from a Pyentist.&lt;/p&gt;
&lt;p&gt;This talk is aimed at data scientists who have large, numerical datasets that need to be managed and stored but also accessed and processed efficiently. Basic knowledge of NumPy and UNIX will be useful for attendees but not required. Attendees will learn how to get started with h5py, as well as how to leverage HDF5 in order to attain accessible, compressed, and organized data.&lt;/p&gt;
&lt;p&gt;HDF5 stands for Hierarchical Data Format, version 5. It is a file format, library, and data model for storing and managing data. More simply, HDF5 can be described as a file system within a file. An HDF5 file contains two kinds of objects, namely, datasets and groups. Datasets work like NumPy arrays while groups work like dictionaries that hold datasets and other groups. In addition, objects can have attributes, or metadata. HDF5 is designed for flexible and efficient storage and I/O for high volume, complex data. Data scientists will find HDF5 to be invaluable for managing, manipulating, and storing their data.&lt;/p&gt;
&lt;p&gt;Part of this talk will demonstrate how to get started with HDF5. In this demo, attendees will learn how to: create and handle HDF5 files using h5py, manage and manipulate datasets, work with groups, and make use of attributes. A real-world example of a processing pipeline of brain recordings, utilizing HDF5 for storing and managing data at each processing step, will be presented. Attendees will have access to an IPython notebook to follow along during the demo and explore examples. After this talk, attendees will be able to begin using HDF5 to effortlessly store and manage their data.&lt;/p&gt;
</summary><category term="hdf5"></category><category term="h5py"></category><category term="jupyter notebook"></category></entry><entry><title>HDF5 is for Lovers part 2</title><link href="https://pyvideo.org/scipy-2014/hdf5-is-for-lovers-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Anthony Scopatz</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/hdf5-is-for-lovers-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;HDF5 is a hierarchical, binary database format that has become the de
facto standard for scientific computing. While the spec may be used in a
relatively simple way it also supports several high-level features that
prove invaluable. HDF5 bindings exist for almost every language -
including two Python libraries (PyTables and h5py). This tutorial will
cover HDF5 through the lens of PyTables.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;HDF5 is a hierarchical, binary database format that has become the de
facto standard for scientific computing. While the specification may be
used in a relatively simple way (persistence of static arrays) it also
supports several high-level features that prove invaluable. These
include chunking, ragged data, extensible data, parallel I/O,
compression, complex selection, and in-core calculations. Moreover, HDF5
bindings exist for almost every language - including two Python
libraries (PyTables and h5py). This tutorial will cover HDF5 itself
through the lens of PyTables.&lt;/p&gt;
&lt;p&gt;This tutorial will discuss tools, strategies, and hacks for really
squeezing every ounce of performance out of HDF5 in new or existing
projects. It will also go over fundamental limitations in the
specification and provide creative and subtle strategies for getting
around them. Overall, this tutorial will show how HDF5 plays nicely with
all parts of an application making the code and data both faster and
smaller. With such powerful features at the developer's disposal, what
is not to love?!&lt;/p&gt;
&lt;p&gt;Knowledge of Python, NumPy, C or C++, and basic HDF5 is recommended but
not required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Meaning in layout (20 min)&lt;ul&gt;
&lt;li&gt;Tips for choosing your hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced datatypes (20 min)&lt;ul&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Nested types&lt;/li&gt;
&lt;li&gt;Tricks with malloc() and byte-counting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exercise on above topics&lt;/strong&gt; (20 min)&lt;/li&gt;
&lt;li&gt;Chunking (20 min)&lt;ul&gt;
&lt;li&gt;How it works&lt;/li&gt;
&lt;li&gt;How to properly select your chunksize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queries and Selections (20 min)&lt;ul&gt;
&lt;li&gt;In-core vs Out-of-core calculations&lt;/li&gt;
&lt;li&gt;PyTables.where()&lt;/li&gt;
&lt;li&gt;Datasets vs Dataspaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exercise on above topics&lt;/strong&gt; (20 min)&lt;/li&gt;
&lt;li&gt;The Starving CPU Problem (1 hr)&lt;ul&gt;
&lt;li&gt;Why you should always use compression&lt;/li&gt;
&lt;li&gt;Compression algorithms available&lt;/li&gt;
&lt;li&gt;Choosing the correct one&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration with other databases (1 hr)&lt;ul&gt;
&lt;li&gt;Migrating to/from SQL&lt;/li&gt;
&lt;li&gt;HDF5 in other databases (JSON example)&lt;/li&gt;
&lt;li&gt;Other Databases in HDF5 (JSON example)&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="HDF5"></category><category term="PyTables"></category><category term="tutorial"></category></entry><entry><title>HDF5 is for Lovers, Tutorial part 1</title><link href="https://pyvideo.org/scipy-2014/hdf5-is-for-lovers-tutorial-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Anthony Scopatz</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/hdf5-is-for-lovers-tutorial-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;HDF5 is a hierarchical, binary database format that has become the de
facto standard for scientific computing. While the spec may be used in a
relatively simple way it also supports several high-level features that
prove invaluable. HDF5 bindings exist for almost every language -
including two Python libraries (PyTables and h5py). This tutorial will
cover HDF5 through the lens of PyTables.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;HDF5 is a hierarchical, binary database format that has become the de
facto standard for scientific computing. While the specification may be
used in a relatively simple way (persistence of static arrays) it also
supports several high-level features that prove invaluable. These
include chunking, ragged data, extensible data, parallel I/O,
compression, complex selection, and in-core calculations. Moreover, HDF5
bindings exist for almost every language - including two Python
libraries (PyTables and h5py). This tutorial will cover HDF5 itself
through the lens of PyTables.&lt;/p&gt;
&lt;p&gt;This tutorial will discuss tools, strategies, and hacks for really
squeezing every ounce of performance out of HDF5 in new or existing
projects. It will also go over fundamental limitations in the
specification and provide creative and subtle strategies for getting
around them. Overall, this tutorial will show how HDF5 plays nicely with
all parts of an application making the code and data both faster and
smaller. With such powerful features at the developer's disposal, what
is not to love?!&lt;/p&gt;
&lt;p&gt;Knowledge of Python, NumPy, C or C++, and basic HDF5 is recommended but
not required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Meaning in layout (20 min)&lt;ul&gt;
&lt;li&gt;Tips for choosing your hierarchy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advanced datatypes (20 min)&lt;ul&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Nested types&lt;/li&gt;
&lt;li&gt;Tricks with malloc() and byte-counting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exercise on above topics&lt;/strong&gt; (20 min)&lt;/li&gt;
&lt;li&gt;Chunking (20 min)&lt;ul&gt;
&lt;li&gt;How it works&lt;/li&gt;
&lt;li&gt;How to properly select your chunksize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Queries and Selections (20 min)&lt;ul&gt;
&lt;li&gt;In-core vs Out-of-core calculations&lt;/li&gt;
&lt;li&gt;PyTables.where()&lt;/li&gt;
&lt;li&gt;Datasets vs Dataspaces&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exercise on above topics&lt;/strong&gt; (20 min)&lt;/li&gt;
&lt;li&gt;The Starving CPU Problem (1 hr)&lt;ul&gt;
&lt;li&gt;Why you should always use compression&lt;/li&gt;
&lt;li&gt;Compression algorithms available&lt;/li&gt;
&lt;li&gt;Choosing the correct one&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Integration with other databases (1 hr)&lt;ul&gt;
&lt;li&gt;Migrating to/from SQL&lt;/li&gt;
&lt;li&gt;HDF5 in other databases (JSON example)&lt;/li&gt;
&lt;li&gt;Other Databases in HDF5 (JSON example)&lt;/li&gt;
&lt;li&gt;Exercise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="HDF5"></category><category term="PyTables"></category><category term="tutorial"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview-.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry><entry><title>PyCon 2009: Data Storage in Python - An Overview of Options (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--data-storage-in-python---an-overview1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--data-storage-in-python---an-overview1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many possibilities in Python to store data. This tutorials
explores some of them: flat file, Excel files, NetCDF and HDF5,
serialization with pickle and friends, relational databases, bsddb and
ZODB. The objective of this course is to give the participants an
overview over available options as well as there advantages and
disadvantages for different purposes. Participants are strongly
recommended to bring laptops because all topics are introduced with
examples and exercises.&lt;/p&gt;
</summary><category term="bsddb"></category><category term="databases"></category><category term="excel"></category><category term="flatfile"></category><category term="hdf5"></category><category term="netcdf"></category><category term="pickle"></category><category term="pycon"></category><category term="pycon2009"></category><category term="serialization"></category><category term="zodb"></category></entry></feed>