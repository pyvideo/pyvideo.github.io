<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Matt Land</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matt-land.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-07-30T00:00:00+00:00</updated><subtitle></subtitle><entry><title>AWS Lambda: From Curiosity to Production</title><link href="https://pyvideo.org/pyohio-2016/aws-lambda-from-curiosity-to-production.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Land</name></author><id>tag:pyvideo.org,2016-07-30:/pyohio-2016/aws-lambda-from-curiosity-to-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To make Amazon Lambda production ready, it needs processes like Continuous Integration (testing) and Continuous Delivery. To achieve that, we will investigate how AWS lambda is powered. Next, we will cover creating a testing environment that can interact with AWS while allowing for inspection and exploration. Finally, lambda versions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To make Amazon Lambda production ready, it needs processes like Continuous Integration (testing) and Continuous Delivery. To achieve that, we will investigate how AWS lambda is powered. Next, we will cover creating a testing environment that can interact with AWS while allowing for inspection and exploration. Finally, lambda versions and aliases will be leveraged to accomplish ‘deployments’.&lt;/p&gt;
</content><category term="PyOhio 2016"></category></entry><entry><title>Another Look at Python Types</title><link href="https://pyvideo.org/pyohio-2022/another-look-at-python-types.html" rel="alternate"></link><published>2022-07-30T00:00:00+00:00</published><updated>2022-07-30T00:00:00+00:00</updated><author><name>Matt Land</name></author><id>tag:pyvideo.org,2022-07-30:/pyohio-2022/another-look-at-python-types.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write expressive and accessible Python for the people you
collaborate with, Python Types should definitely be in your arsenal.
There has been a significant evolution to Python’s support for types:
Newer, more elegant syntax is available to help your code better
communicate what its …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write expressive and accessible Python for the people you
collaborate with, Python Types should definitely be in your arsenal.
There has been a significant evolution to Python’s support for types:
Newer, more elegant syntax is available to help your code better
communicate what its doing, and what your functions are returning. There
has never been a better time to try out typing, or take a deeper look at
newly available patterns.&lt;/p&gt;
</content><category term="PyOhio 2022"></category></entry></feed>