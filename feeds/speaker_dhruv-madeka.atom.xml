<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dhruv-madeka.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-27T00:00:00+00:00</updated><entry><title>bqplot Interactive Visualization in Jupyter</title><link href="https://pyvideo.org/pydata-new-york-city-2017/bqplot-interactive-visualization-in-jupyter.html" rel="alternate"></link><published>2017-11-27T00:00:00+00:00</published><updated>2017-11-27T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/bqplot-interactive-visualization-in-jupyter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;bqplot is an interactive plotting library for the Jupyter notebook in which every attribute of the plot is an interactive widget. bqplot can be linked with Jupyter widgets to create rich visualizations with just a few lines of Python code. These visualizations, which are based on D3.js and SVG, provide an unparalleled level of interactivity without a single line of JavaScript code.&lt;/p&gt;
</summary></entry><entry><title>bqplot - Seamless Interactive Visualizations in the Jupyter Notebook</title><link href="https://pyvideo.org/pygotham-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;bqplot is a Python plotting library based on d3.js that offers its functionality directly in the Jupyter Notebook, including selections, interactions, and arbitrary css customizations. In bqplot, every element of a chart is an interactive ipython widget that can be bound to a python function, which serves as the callback when an interaction takes place. The bidirectional communication between Python and JavaScript is a feature of bqplot that makes the python code aware of any interactions the user has with the visualization. This allows the rapid generation of full fledged web applications directly in the Notebook with just a few lines of Python code. We will also review some of bqplot's many new and innovative visualizations and interactions - including the MarketMap and the FastIntervalSelector and demonstrate concrete applications that leverage them to enhance a Data Science or Machine Learning workflow.&lt;/p&gt;
&lt;p&gt;The talk will also cover bqplot's seamless integration with the native Jupyter widgets - including layout and styling of web applications, as well as the integration with other widget libraries such as ipyleaflet or ipyvolume. We will also demonstrate the simple way to export bqplot charts as stand alone web applications through the embedding mechanism of the ipywidgets library.&lt;/p&gt;
&lt;p&gt;Finally, we will highlight bqplot as the first plotting library to have complete integration with the new JupyterLab IDE by demonstrating dashboarding, resizing and custom integrations.&lt;/p&gt;
</summary></entry><entry><title>Interactive Data Visualization in Jupyter Notebook Using bqplot</title><link href="https://pyvideo.org/pydata-meetups/interactive-data-visualization-in-jupyter-notebook-using-bqplot.html" rel="alternate"></link><published>2017-04-13T00:00:00+00:00</published><updated>2017-04-13T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-04-13:pydata-meetups/interactive-data-visualization-in-jupyter-notebook-using-bqplot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bqplot is a Python plotting library based on d3.js that offers its functionality directly in the Jupyter Notebook, including selections, interactions, and arbitrary css customization. In bqplot, every element of a chart is an interactive widget that can be bound to a python function, which serves as the callback when an interaction takes place. This allows the user to generate full fledged interactive applications directly in the Notebook with just a few lines of Python code. In the second part of the talk, drawing examples from fields like Data Science and Finance, we show examples of building interactive charts and dashboards using bqplot and the ipywidgets framework.&lt;/p&gt;
&lt;p&gt;The talk will also cover bqplot's interaction with the new JupyterLab IDE and what we plan for the future.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Dhruv Madeka is a Quantitative Researcher at Bloomberg LP. His current research interests focus on Machine Learning, Quantitative Finance, Data Visualization and Applied Mathematics. Having graduated from the University of Michigan with a BS in Operations Research and from Boston University with an MS in Mathematical Finance, Dhruv is part of one of the leading research teams in Finance, developing models, software and tools for users to make their data analysis experience richer.&lt;/p&gt;
</summary><category term="bqplot"></category><category term="jupyter lab"></category></entry><entry><title>bqplot Interactive Data Visualization in Jupyter</title><link href="https://pyvideo.org/pydata-seattle-2017/bqplot-interactive-data-visualization-in-jupyter.html" rel="alternate"></link><published>2017-07-06T00:00:00+00:00</published><updated>2017-07-06T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-07-06:pydata-seattle-2017/bqplot-interactive-data-visualization-in-jupyter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;bqplot is an interactive plotting library for the Jupyter notebook in which every attribute of the plot is an interactive widget. bqplot can be linked with Jupyter widgets to create rich visualizations with just a few lines of Python code. These visualizations, which are based on D3.js and SVG, provide an unparalleled level of interactivity without a single line of JavaScript code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;bqplot is an interactive 2D plotting library for the Jupyter notebook in which every attribute of the plot is an interactive widget. bqplot can be linked with other Jupyter widgets to create rich visualizations from just a few lines of Python code. Since bqplot is built on top of the widgets framework of the notebook it leverages the widget infrastructure to provide the first plotting library that communicates between Python and JavaScript code. The visualizations are based on D3.js and SVG, enabling fast interactions and beautiful animations. In this talk, attendees will learn how to build interactive charts, dashboards and rich GUI applications using bqplot and ipywidgets.&lt;/p&gt;
&lt;p&gt;In the first part of the talk, we will walk the user through the bqplot API:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Grammar of Graphics based object model (axes, scales, marks etc) which lets users build custom visualizations&lt;/li&gt;
&lt;li&gt;Simple API similar to Matplotlib's pyplot, which provides sensible default choices for most parameters&lt;/li&gt;
&lt;li&gt;Interaction API which lets the user interact with the charts (selecting subset of data, panzoom etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review how bqplot ties into the new JupyterLab IDE, by demonstrating how the charts leverage the dashboarding, resizing and output mirroring tools of JupyterLab.&lt;/p&gt;
&lt;p&gt;In the second part of the talk, drawing examples from fields like Data Science and Finance we will show examples of building interactive charts and dashboards using bqplot and ipywidgets. We will work through examples of using bqplot with popular deep learning libraries to build custom visual dashboards directly in the notebook, including network visualizations and other novel interactive ways to control your training. We will visit the use of the novel selections offered by bqplot to show how they can be used to create advanced applications for time series data. Finally, we will visit the notion of templates - reusable interactive objects that enhance not only end user workflow, but provide developers and researchers seamless ways to incorporate interactivity into their development workflows.&lt;/p&gt;
</summary></entry><entry><title>bqplot Seamless Interactive Visualizations in the Jupyter Notebook</title><link href="https://pyvideo.org/scipy-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-07-17:scipy-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;bqplot is a Python plotting library based on d3.js that offers its functionality directly in the Jupyter Notebook, including selections, interactions, and arbitrary css customizations. In bqplot, every element of a chart is an interactive ipython widget that can be bound to a python function, which serves as the callback when an interaction takes place. The bidirectional communication between Python and JavaScript is a feature of bqplot that makes the python code aware of any interactions the user has with the visualization. This allows the rapid generation of full fledged web applications directly in the Notebook with just a few lines of Python code. We will also review some of bqplot's many new and innovative visualizations and interactions - including the MarketMap and the FastIntervalSelector and demonstrate concrete applications that leverage them to enhance a Data Science or Machine Learning workflow.     The talk will also cover bqplot's seamless integration with the native Jupyter widgets - including layout and styling of web applications, as well as the integration with other widget libraries such as ipyleaflet or ipyvolume. We will also demonstrate the simple way to export bqplot charts as stand alone web applications through the embedding mechanism of the ipywidgets library.&lt;/p&gt;
&lt;p&gt;Finally, we will highlight bqplot as the first plotting library to have complete integration with the new JupyterLab IDE by demonstrating dashboarding, resizing and custom integrations.&lt;/p&gt;
</summary><category term="bqplot"></category><category term="jupyter notebook"></category></entry></feed>