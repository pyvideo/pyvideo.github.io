<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jukka-lehtosalo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-26T00:00:00+00:00</updated><entry><title>Getting Started with Mypy and Type Checking</title><link href="https://pyvideo.org/europython-2018/getting-started-with-mypy-and-type-checking.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Jukka Lehtosalo</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/getting-started-with-mypy-and-type-checking.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered if you should try type checking in your Python project, or
what it takes to get started with mypy? I will show how to introduce
type checking the easy way, one step at a time.&lt;/p&gt;
&lt;p&gt;Dropbox was an early adopter of type checking and mypy, and we’ve been
gradually adding type annotations to our large production codebases
since 2016. Engineers love how type annotations improve the clarity of
code, and how mypy can surface hard-to-find bugs. We’ve learned a lot in
the process of annotating millions of lines of code, and in this talk
you’ll learn battle- tested approaches for adding type checking to an
existing codebase.&lt;/p&gt;
&lt;p&gt;I expect no previous experience with mypy. You’ll benefit the most if
you’ve worked on a project with multiple developers.&lt;/p&gt;
</summary></entry><entry><title>Dec 2016 BayPiggies Talk at LinkedIn: Introducing Type Annotations for Python</title><link href="https://pyvideo.org/bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html" rel="alternate"></link><published>2016-12-15T00:00:00+00:00</published><updated>2016-12-15T00:00:00+00:00</updated><author><name>Guido van Rossum</name></author><id>tag:pyvideo.org,2016-12-15:bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Guido Van Rossum, Greg Price, and David Fisher&lt;/p&gt;
&lt;p&gt;Dropbox has several million lines of production code written in Python 2.7. As a first step towards migrating to Python 3, as well as to generally make our code more navigable, we are annotating our code with type annotations using the PEP 484 standard and type-checking the annotated code with mypy. In this talk we will discuss lessons learned and show how you too can start type-checking your legacy Python 2.7 code, one file at a time. We will also describe some of the many improvements we’ve made to mypy in the process, as well as some other tools that come in handy.&lt;/p&gt;
&lt;p&gt;Mypy is an open-source type-checker for Python. It was originally created by one of the speakers, Jukka Lehtosalo, in support of his PhD thesis, before he joined Dropbox. Mypy supports the PEP 484 standard for gradual typing in Python. It supports Python 3.2 and higher, as well as Python 2.7 (using function signatures in type comments, per a recent update to PEP 484).&lt;/p&gt;
</summary></entry><entry><title>Static Types for Python</title><link href="https://pyvideo.org/pycon-us-2017/static-types-for-python.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Jukka Lehtosalo</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/static-types-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past year and a half, Dropbox has been investing in the
development of mypy, a static type checker for Python, as a way to make
our multimillion-line Python codebase easier to understand, navigate,
and maintain. In this talk, we will discuss the benefits of type
annotations, explain how to use them, and give a peak into how mypy
works behind the scenes.&lt;/p&gt;
&lt;p&gt;Mypy is an open-source type-checker for Python which supports the PEP
484 standard for gradual typing. Originally created by Jukka Lehtosalo
as part of his PhD thesis in 2013, it is now under active development by
a small team at Dropbox which includes David Fisher, Greg Price, and
Guido van Rossum. It supports Python 3.2 and higher, as well as Python
2.7 (via type comments).&lt;/p&gt;
</summary></entry></feed>