<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 13:50:00 +0000</lastBuildDate><item><title>Lowering the Stakes of Failure with Pre-mortems and Post-mortems</title><link>https://pyvideo.org/pycon-us-2019/lowering-the-stakes-of-failure-with-pre-mortems-and-post-mortems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Failure can be scary. There are real costs to a company and its users
when software crashes, models are inaccurate, or when systems go down.
The emotional stakes feel high-- no one wants to be responsible for a
failure. We can lower the stakes by creating spaces to learn from
failures, and minimize their impact. This talk introduces two ways to
address failure: blameless post-mortems, to learn from an incident; and
pre-mortems, to identify modes of failure upfront.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liz Sander</dc:creator><pubDate>Sun, 05 May 2019 13:50:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-us-2019/lowering-the-stakes-of-failure-with-pre-mortems-and-post-mortems.html</guid><category>talk</category></item><item><title>Software Library APIs: Lessons Learned from scikit-learn</title><link>https://pyvideo.org/pycon-us-2018/software-library-apis-lessons-learned-from-scikit-learn.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you think of an API, you’re probably thinking about a web service. But it’s important to think about your developer interface when designing a software library as well! I’ll talk about the scikit-learn package, and how its API makes it easy to construct complex models from simple building blocks, using three basic pieces: transformers, estimators, and meta-estimators. Then I’ll show how this interface enabled us to construct our own meta-estimator for model stacking. This will demonstrate how to implement new modeling techniques in a scikit-learn style, and more generally, the value of writing libraries with the developer interface in mind.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liz Sander</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/software-library-apis-lessons-learned-from-scikit-learn.html</guid></item><item><title>Evolutionary Algorithms Perfecting the Art of "Good Enough"</title><link>https://pyvideo.org/pydata-chicago-2016/evolutionary-algorithms-perfecting-the-art-of-good-enough.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/secret/dvt9zZBUVz7b7X"&gt;http://www.slideshare.net/secret/dvt9zZBUVz7b7X&lt;/a&gt;
Github: &lt;a class="reference external" href="https://github.com/esander91"&gt;https://github.com/esander91&lt;/a&gt;
Code: &lt;a class="reference external" href="https://github.com/esander91/GoodEnoughAlgs"&gt;https://github.com/esander91/GoodEnoughAlgs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Evolutionary algorithms let us tackle all kinds of impossible problems. Want to design a short delivery route, but there are more possible solutions than atoms in the universe? Well, evolutionary algorithms can't promise to find the optimal solution, but can guarantee finding a pretty great one. I'll give an overview of these algorithms, and how you can use them for your own impossible problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liz Sander</dc:creator><pubDate>Fri, 23 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-23:pydata-chicago-2016/evolutionary-algorithms-perfecting-the-art-of-good-enough.html</guid><category>art</category></item></channel></rss>