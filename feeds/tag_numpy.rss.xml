<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate><item><title>uarray: Separating interface from implementation</title><link>https://pyvideo.org/pydata-austin-2019/uarray-separating-interface-from-implementation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NumPy is an array implementation that is slowly also becoming an interface/API. This leaves users with no way to express their intent; increasing technical debt and making fundamental improvements difficult. Separating interface from implementation is beneficial for the community. We talk about efforts in NumPy itself, why they are insufficient, and how uarray proposes to solve the problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-12-07:pydata-austin-2019/uarray-separating-interface-from-implementation.html</guid><category>numpy</category><category>uarray</category></item><item><title>You don't need n dimensions when you have pandas</title><link>https://pyvideo.org/pycon-italia-2019/you-dont-need-n-dimensions-when-you-have-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://pietrobattiston.it/wiki/python:pycon#talk_you_don_t_need_n_dimensions_when_you_have_pandas"&gt;Click here for slides and material
used&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After a (very) quick general introduction to &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, and in
particular to pandas &lt;strong&gt;indexes&lt;/strong&gt; , this talk will focus on particular
types of indexes, &lt;tt class="docutils literal"&gt;MultiIndex&lt;/tt&gt;es, and on the many &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;
features allowing us to use them to store and analyze multidimensional
data.&lt;/p&gt;
&lt;p&gt;We will discover together &lt;em&gt;why&lt;/em&gt; &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt; does not have (any more) data
structures with more than 2 dimensions, and why we should not regret
them. We will then look at further ways to “restructure” data, including
&lt;tt class="docutils literal"&gt;groupby&lt;/tt&gt; e &lt;tt class="docutils literal"&gt;window&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1771"&gt;https://python.it/feedback-1771&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pietro Battiston</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/you-dont-need-n-dimensions-when-you-have-pandas.html</guid><category>data-structures</category><category>numpy</category><category>pandas</category><category>data-analysis</category><category>pydata</category></item><item><title>High Performance Data Processing in Python</title><link>https://pyvideo.org/pycon-ireland-2018/high-performance-data-processing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;numpy and numba are popular Python libraries for processing large quantities of data. When running complex transformations on large datasets, many developers fall into common pitfalls that kill the performance of these libraries. This talk explains how numpy/numba work under the hood and how they use vectorisation to process large amounts of data extremely quickly. We use these tools to reduce the processing time of a dataset from 3 years to 12 hours, even when the code is run on a single Macbook Pro.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donald Whyte</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:pycon-ireland-2018/high-performance-data-processing-in-python.html</guid><category>numpy</category><category>numba</category></item><item><title>Never get in a battle of bits without ammunition.</title><link>https://pyvideo.org/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</guid><category>cython</category><category>C/C++</category><category>nosql</category><category>mongodb</category><category>numeric</category><category>iPython</category><category>optimization</category><category>Algorithms</category><category>data-analysis</category><category>hpc</category><category>performance</category><category>scientific-computing</category><category>numpy</category></item><item><title>Solving Google Code Jam problems with PyPy - Part 1</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Solving Google Code Jam problems with PyPy - Part 2</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Coding competitions with PyPy aka "Python for the win!"</title><link>https://pyvideo.org/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Programmazione competitiva con PyPy: "Vincere con Python!"</title><link>https://pyvideo.org/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>CuPy: A NumPy-compatible Library for GPU</title><link>https://pyvideo.org/pycon-us-2018/cupy-a-numpy-compatible-library-for-gpu.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="header figure"&gt;
&lt;img alt="Logo" src="https://cupy.chainer.org/images/cupy.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;CuPy : NumPy-like API accelerated with CUDA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://cupy.chainer.org/"&gt;Website&lt;/a&gt; | &lt;a class="reference external" href="https://docs-cupy.chainer.org/en/stable/"&gt;Docs&lt;/a&gt; | &lt;a class="reference external" href="https://docs-cupy.chainer.org/en/stable/install.html"&gt;Install Guide&lt;/a&gt; | &lt;a class="reference external" href="https://docs-cupy.chainer.org/en/stable/tutorial/"&gt;Tutorial&lt;/a&gt; | &lt;strong&gt;Examples&lt;/strong&gt;
(&lt;a class="reference external" href="https://github.com/cupy/cupy/blob/master/examples"&gt;Official&lt;/a&gt;) | &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/cupy"&gt;Forum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CuPy is an open-source library with NumPy syntax that increases speed by
doing matrix operations on NVIDIA GPUs. It is accelerated with the CUDA
platform from NVIDIA and also uses CUDA-related libraries, including
cuBLAS, cuDNN, cuRAND, cuSOLVER, cuSPARSE, and NCCL, to make full use of
the GPU architecture. CuPy’s interface is highly compatible with NumPy;
in most cases it can be used as a drop-in replacement. CuPy supports
various methods, data types, indexing, broadcasting, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shohei Hido</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/cupy-a-numpy-compatible-library-for-gpu.html</guid><category>cupy</category><category>numpy</category></item><item><title>Complexity Science</title><link>https://pyvideo.org/pycon-us-2018/complexity-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Complexity Science is an approach to modeling systems using tools from discrete mathematics and computer science, including networks, cellular automata, and agent-based models.  It has applications in many areas of natural and social science.&lt;/p&gt;
&lt;p&gt;Python is a particularly good language for exploring and implementing models of complex systems.  In this tutorial, we present material from the draft second edition of &lt;em&gt;Think Complexity&lt;/em&gt;, and from a class we teach at Olin College.  We will work with random networks using NetworkX, with cellular automata using NumPy, and we will implement simple agent-based models.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allen Downey</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-10:pycon-us-2018/complexity-science.html</guid><category>networkx</category><category>numpy</category></item><item><title>Foundations of Numerical Computing in Python</title><link>https://pyvideo.org/pycon-us-2018/foundations-of-numerical-computing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is one of the world's most popular programming languages for numerical
computing. In areas of application like physical simulation, signal processing,
predictive analytics, and more, engineers and data scientists increasingly use
Python as their primary tool for working with numerical large-scale data.&lt;/p&gt;
&lt;p&gt;Despite this diversity of application domains, almost all numerical programming
in Python builds upon a small foundation of libraries. In particular, the
&lt;cite&gt;numpy.ndarray&lt;/cite&gt; is the core data structure for the entire PyData ecosystem, and
the &lt;cite&gt;numpy&lt;/cite&gt; library provides many of the foundational algorithms used to power
more domain-specific libraries.&lt;/p&gt;
&lt;p&gt;The goal of this tutorial is to provide an introduction to numpy -- how it
works, how it's used, and what problems it aims to solve. In particular, we
will focus on building up students' mental model of how numpy works and how
&lt;strong&gt;idiomatic&lt;/strong&gt; usage of numpy allows us to implement algorithms much more
efficiently than is possible in pure Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Sanderson</dc:creator><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-09:pycon-us-2018/foundations-of-numerical-computing-in-python.html</guid><category>numpy</category></item><item><title>The Mustache Movement</title><link>https://pyvideo.org/pycon-de-2017/the-mustache-movement.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Heidi Thorpe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heidi graduated with Honors in Chemistry from the University of Leeds before taking up a position as an Industrial Chemist with ICI (ORICA). This led to a career in software development working in UK, Aus and USA. In 2000 she became an author by the publication by Addison Wesley of Oracle8i tuning and administration: the essential reference ASIN: B007EIZGOG this was a sales success and translated into German. In her spare time she uses python to write software that allows her to train object classifiers to steal mens' mustaches and put them on the face of Taylor Swift. For this talk she will give a simple introduction to Generative Adversarial Networks using learned &amp;quot;mustache-ness&amp;quot; as an example, implemented with existing python modules&lt;/p&gt;
&lt;p&gt;PyconAu 2016 and PyconHK 2016 is her speaking experience &lt;a class="reference external" href="https://www.youtube.com/watch?v=70JAm03IBFI"&gt;https://www.youtube.com/watch?v=70JAm03IBFI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generative Adversarial Networks (GANs) are a class of neural networks which are powerful and flexible tools. A common application is image generation. I would like to give a simple introduction to GANs using existing python modules and an example of how &amp;quot;mustache-ness&amp;quot; can be learned and applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The objective is to showcase the power and flexibility of combining preexisting python modules and applying them to the field of image processing and machine learning. Learning what constitutes &amp;quot;Mustache-ness&amp;quot; in a straight forward and fun example of applying the technology in a 30 min presentation&lt;/p&gt;
&lt;p&gt;Attendees will learn tips on image processing, as well as training their own neural network.&lt;/p&gt;
&lt;p&gt;An analogy can be considered as a relation between forger and detective. The task of the forger is to create fake examples of original paintings by famous artists. If the fake can pass as an original the the forger can exchange the fake for money. The task of the detective is to catch the forgers. He does this by knowing what are the properties that set the original artist apart and what sort of picture he would create. The detective uses this knowledge to determine whether or not the image is real or fake. From an introduction of what a Generative Adversarial Network is, how they work and how they can be used to generate fake images of mustaches by determining what constitutes &amp;quot;mustache-ness&amp;quot;&lt;/p&gt;
&lt;p&gt;You will learn that there are two main components of a GAN – Generator Neural Network and Discriminator Neural Network.&lt;/p&gt;
&lt;p&gt;The Generator Network takes an random input and tries to generate a sample of data.&lt;/p&gt;
&lt;p&gt;It then generates data which is subsequently fed into a discriminator network D(x). The task of Discriminator Network is to take input either from the real data or from the generator and try to predict whether the input is real or generated.&lt;/p&gt;
&lt;p&gt;D(x) solves a binary classification problem using sigmoid function giving output in the range 0 to 1.&lt;/p&gt;
&lt;p&gt;You will learn how to define the problem. Do you want to generate fake images or fake text. Having defined the problem you can then collect data for it. You will define how your GAN should look. In our example of &amp;quot;mustache-ness&amp;quot; you will choose a convolutional neural network.&lt;/p&gt;
&lt;p&gt;You will see the effect of training the Discriminator on real data for n epochs. Using examples of real mustaches we will generate fake ones. We will see generated fake inputs for the generator and the effect of training the discriminator on fake data. The discriminator will correctly predict them as fake. Subsequently we will see how to train the generator with the output of discriminator. Now we can see a trained generator that can fool the discriminator. Generating fake mustaches that are indistinguishable from real.&lt;/p&gt;
&lt;p&gt;Attendees will learn tips on image processing, as well as training your own convolutional neural network.&lt;/p&gt;
&lt;p&gt;Showcasing the power of python in a fun, lighthearted way. Hopefully, being informative and entertaining&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heidi Thorpe</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/the-mustache-movement.html</guid><category>python</category><category>machine learning</category><category>torch</category><category>scikit-learn</category><category>numpy</category><category>neural networks</category></item><item><title>Turbodbc: Turbocharged database access for data scientists</title><link>https://pyvideo.org/pycon-de-2017/turbodbc-turbocharged-database-access-for-data-scientists.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Michael König&lt;/strong&gt; (&amp;#64;turbodbc)&lt;/p&gt;
&lt;p&gt;Michael is a senior software engineer at Blue Yonder GmbH. He holds a PhD in physics, practices test-driven development, and digs Clean Code in C++ and Python. In the last five years, he invested more money in table tennis gear than in smartphones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python's database API 2.0 is well suited for transactional database workflows, but not so much for column-heavy data science. This talk explains how the ODBC-based turbodbc database module extends this API with first-class, efficient support for familiar NumPy and Apache Arrow data structures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk introduces the open source Python database module turbodbc. It uses standard ODBC drivers to connect with virtually any database and is a viable (and often faster) alternative to &amp;quot;native&amp;quot; Python drivers.&lt;/p&gt;
&lt;p&gt;Briefly recounting the painful story of how data scientists previously used our analytics database, I explain why turbodbc was created and what distinguishes it from other ODBC modules. Sketching the flow of data from databases via drivers and Python modules to consumable Python objects, I motivate a few extensions to the standard database API 2.0 that turbodbc has made. These extensions heavily use NumPy arrays and Apache Arrow tables to provide data scientists with both familiar and efficient binary data structures they can further work on. I conclude my talk with benchmark results for a few databases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael König</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/turbodbc-turbocharged-database-access-for-data-scientists.html</guid><category>numpy</category><category>database</category><category>python</category><category>data-science</category><category>analytics</category></item><item><title>A Gentle Introduction to Neural Networks (with Python)</title><link>https://pyvideo.org/pycon-italia-2017/a-gentle-introduction-to-neural-networks-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A gentle introduction to neural networks, and making your own with
Python.&lt;/p&gt;
&lt;p&gt;This session is especially designed to be accessible to everyone,
including anyone with no expertise in mathematics, computer science or
Python.&lt;/p&gt;
&lt;p&gt;From this session you will have an intuitive understanding of what
neural networks are and how they work. If you are more technically
capable, you will see how you could make your own with Python and numpy.&lt;/p&gt;
&lt;p&gt;Part 1 - Ideas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the search for AI, hard problems for computers easy for humans&lt;/li&gt;
&lt;li&gt;learning from examples (simple classifier)&lt;/li&gt;
&lt;li&gt;biologically inspired neurons and networks&lt;/li&gt;
&lt;li&gt;training a neural network&lt;/li&gt;
&lt;li&gt;the back propagation breakthrough&lt;/li&gt;
&lt;li&gt;matrix ways of working (good for computers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2 - Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python is easy, and everywhere&lt;/li&gt;
&lt;li&gt;Python notebooks&lt;/li&gt;
&lt;li&gt;the MNIST data set&lt;/li&gt;
&lt;li&gt;a very simple neural network class&lt;/li&gt;
&lt;li&gt;focus on concise and efficient matrix calculations with numpy&lt;/li&gt;
&lt;li&gt;97.5% accuracy recognising handwritten numbers - with just a few lines of code!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3 - Live Demo! … and Q&amp;amp;A&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tariq Rashid</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/a-gentle-introduction-to-neural-networks-with-python.html</guid><category>image-processing</category><category>numpy</category><category>neural network</category><category>Artificial Intelligence</category><category>Machine Learning</category></item><item><title>PyPy Status Update</title><link>https://pyvideo.org/pycon-italia-2017/pypy-status-update.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this talk is to present the latest news in the PyPy world.
In particular, I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the current status of PyPy, including performance and compatibility
w.r.t CPython&lt;/li&gt;
&lt;li&gt;the status of NumPy and in general of the scientific stack: what
works, what doesn’t, the speed and compatibility tradeoffs, etc.&lt;/li&gt;
&lt;li&gt;the status Python 3 on PyPy&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/pypy-status-update.html</guid><category>performance</category><category>JIT</category><category>pypy</category><category>python3</category><category>numpy</category></item><item><title>Data Science &amp; Data Visualization in Python. How to harness power of Python for social good?</title><link>https://pyvideo.org/pydata-berlin-2017/data-science-data-visualization-in-python-how-to-harness-power-of-python-for-social-good.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python as an Open Data Science tool offers many libraries for data visualization and I will show you how to use and combine the best. I strongly believe that power of data is not only in the information &amp;amp; insight that data can provide us, Data is and can be really beautiful and can not only transform our perception but also the world that we all live in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my talk I will primarily focus on answering/offer the answer to these questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why we need data science and why more and more people should be really interested in analyzing data and data visualization? (motivation)&lt;/li&gt;
&lt;li&gt;What is data science and how to start doing it in Python? (introduction of procedures, tools, most popular IDE-s for Python, etc.)&lt;/li&gt;
&lt;li&gt;What tools for data analysis and data visualization Python offers? (in each stage of analysis the best libraries will be shown for the specific purpose; as for data visualization we will focus particularly on Bokeh, Seaborn, Plotly and use of Jupyter Notebook and Plotly)&lt;/li&gt;
&lt;li&gt;How to 'unlock' the insight hidden in data through Python and how to use it to transform not only public administration or business, but ultimately the transformation of the whole society and economy towards the insight &amp;amp; knowledge based? (potential of data science)&lt;/li&gt;
&lt;li&gt;Open Data, Open Government Partnership, Open Public Administration &amp;amp; all the advantages of Open Data Science &amp;amp; Python. Data-Driven Approach. Everywhere. Now. (the end of talk +vision)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radovan Kavicky</dc:creator><pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-30:pydata-berlin-2017/data-science-data-visualization-in-python-how-to-harness-power-of-python-for-social-good.html</guid><category>python</category><category>data-science</category><category>data-visualization</category><category>analytics</category><category>PyData</category><category>PyDataBLN</category><category>PyDataBerlin</category><category>PyDataBA</category><category>PyDataBratislava</category><category>talk</category><category>Data</category><category>Bokeh</category><category>Social Good</category><category>datascience</category><category>jupyter</category><category>open science</category><category>open data science</category><category>DataVisualization</category><category>data-analysis</category><category>analysis</category><category>matplotlib</category><category>numpy</category><category>data wrangling</category><category>jupyter notebook</category><category>pandas</category><category>machine learning</category><category>deep learning</category><category>Open Data</category><category>Citizen Data Science</category></item><item><title>How do I apply a function to a pandas Series or DataFrame?</title><link>https://pyvideo.org/data-school/pandas-30-apply-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever struggled to figure out the differences between apply, map, and applymap? In this video, I'll explain when you should use each of these methods and demonstrate a few common use cases. Watch the end of the video for three important announcements!&lt;/p&gt;
&lt;p&gt;This is video 30 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-23:data-school/pandas-30-apply-function.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>How do I create a pandas DataFrame from another object?</title><link>https://pyvideo.org/data-school/pandas-29-dummy-dataframe.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to create a DataFrame of &amp;quot;dummy&amp;quot; data, but without reading from a file? In this video, I'll demonstrate how to create a DataFrame from a dictionary, a list, and a NumPy array. I'll also show you how to create a new Series and attach it to the DataFrame.&lt;/p&gt;
&lt;p&gt;This is video 29 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-16:data-school/pandas-29-dummy-dataframe.html</guid><category>data science</category><category>data analysis</category><category>data wrangling</category><category>data processing</category><category>pandas</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>Getting started in scikit-learn with the famous iris dataset</title><link>https://pyvideo.org/data-school/scikit-learn-03-getting-started-with-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Now that we've set up Python for machine learning, let's get started by loading an example dataset into scikit-learn! We'll explore the famous &amp;quot;iris&amp;quot; dataset, learn some important machine learning terminology, and discuss the four key requirements for working with data in scikit-learn.&lt;/p&gt;
&lt;p&gt;This is the third video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-21:data-school/scikit-learn-03-getting-started-with-machine-learning.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>NumPy</category></item><item><title>¡Eureka! (Python y ciencia)</title><link>https://pyvideo.org/pyday-galicia-2016/eureka-python-y-ciencia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se plantea una pregunta de física básica que se resolverá científicamente con ingenio, mátemáticas y python, aprovechando para (de una manera amena) ver librerías habituales en el entorno científico como sympy, numpy, scipy, matplotlib, bokeh, numba, pandas y sklearn.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Sánchez de León Peque</dc:creator><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-17:pyday-galicia-2016/eureka-python-y-ciencia.html</guid><category>pyday</category><category>sympy</category><category>numpy</category><category>scipy</category><category>matplotlib</category><category>bokeh</category><category>numba</category><category>pandas</category><category>sklearn</category></item><item><title>Speed without drag</title><link>https://pyvideo.org/pycon-es-2014/speed-without-drag.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recorrido práctico a través de las opciones que Python ofrece para la optimización de código númerico de baja fricción (esto es, sin dejar de escribir Python), incluyendo: agotando CPython, NumPy, Numba, Parakeet, Cython, Theano, PyPy/NumPyPy, Pyston y Blaze.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saul Díez Guerra</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:pycon-es-2014/speed-without-drag.html</guid><category>NumPy</category><category>Numba</category><category>Parakeet</category><category>Cython</category><category>Theano</category><category>PyPy</category><category>NumPyPy</category><category>Pyston</category><category>Blaze</category></item><item><title>Usando contenedores para Big Data</title><link>https://pyvideo.org/pycon-es-2015/usando-contenedores-para-big-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En la actualidad existe una variedad bastante grande de contenedores de datos para almacenar grandes cantidades de datos en Python, tanto en memoria como en disco. En mi taller pasaremos revista a unos cuantos de los más útiles, empezando por los más básicos y generales (listas, diccionarios, NumPy/ndarray, pandas/DataFrames) a los más especializados (RDBMS, PyTables/Table/HDF5, bcolz/carray/ctable). Durante el camino se darán pistas de cuando usar unos u otros dependiendo del caso de uso.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/usando-contenedores-para-big-data.html</guid><category>workshop</category><category>big data</category><category>numpy</category><category>pandas</category><category>pytables</category><category>bcolz</category></item><item><title>Teaching programming in undergraduate psychology</title><link>https://pyvideo.org/pycon-au-2016/teaching-programming-in-undergraduate-psychology.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damien Mannion&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/79/view_talk"&gt;https://2016.pycon-au.org/schedule/79/view_talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Psychology is a diverse discipline that involves the scientific study of behaviour and cognition. As part of undergraduate training in psychology, students are required to develop substantial skills in research methods and critical thinking. Here, I will discuss our recent efforts to use computer programming to aid in the student achievement of such outcomes. We have introduced a programming component in two third-year undergraduate psychology courses. As part of 'Vision &amp;amp; Brain', students learn to use Python (particularly the package 'PsychoPy') to implement their own vision science experiments. As part of 'Research Internship', students learn to use Python (particularly the 'numpy' and 'veusz' packages) to perform data analyses and to produce visualisations. The aim of these new course components is to provide students with a set of skills that will increase their ability to conduct research, but also to increase their problem solving and critical thinking skills through the process of coding. I will discuss our educational and practical implementation of such material and will use the results of student surveys and feedback to evaluate their effectiveness. Finally, I will discuss some of the challenges we encountered and give some indications of potential future developments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damien Mannion</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-programming-in-undergraduate-psychology.html</guid><category>psychopy</category><category>numpy</category><category>veusz</category></item><item><title>Python at the Intersection of Data Science, Machine Learning &amp; Cyber Anomaly Detection</title><link>https://pyvideo.org/scipy-2016/python-at-the-intersection-of-data-science-machine-learning-cyber-anomaly-detection-scipy-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will focus on the use of Python, scikit-learn, NumPy, SciPy, and pandas in Data Science and machine learning with a focus on cyber anomaly detection. The presentation will focus on how Python facilitates all stages of such analysis including data gathering, analytics, and scaling to large data sets.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Randy Paffenroth</dc:creator><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-14:scipy-2016/python-at-the-intersection-of-data-science-machine-learning-cyber-anomaly-detection-scipy-2016.html</guid><category>scikit-learn</category><category>numpy</category><category>scipy</category><category>pandas</category></item><item><title>PyData: Data Analysis in Python with Pandas</title><link>https://pyvideo.org/pydata/pydata-data-analysis-in-python-with-pandas.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Coming from the 2012 PyData Workshop, Wes McKinney, CTO and cofounder of
Lambda Foundry, gives us a tour of Pandas, a rich data manipulation tool
built on top of NumPy. Frustrated with working in R, Wes started
building Pandas in 2008 with a focus on fast, intuitive data structures
and data manipulation capabilities. The Pandas project has seen huge
growth in the last few years, and aims to be the ultimate data tool for
Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes McKinney</dc:creator><pubDate>Fri, 30 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-30:pydata/pydata-data-analysis-in-python-with-pandas.html</guid><category>numpy</category><category>pandas</category></item><item><title>Boosting NumPy with Numexpr and Cython</title><link>https://pyvideo.org/pydata/boosting-numpy-with-numexpr-and-cython.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this video from the 2012 PyData Workshop Francesc Alted from
Continuum Analytics is going to show you how you can boost NumPy with
Numexpr and Cython.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Topics covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The era of Big Data&lt;/li&gt;
&lt;li&gt;NumPy and its ecosystem&lt;/li&gt;
&lt;li&gt;Numexpr&lt;/li&gt;
&lt;li&gt;Cython&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Fri, 02 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-02:pydata/boosting-numpy-with-numexpr-and-cython.html</guid><category>cython</category><category>numexpr</category><category>numpy</category></item><item><title>Python in Big Data with an overview of NumPy &amp; SciPy</title><link>https://pyvideo.org/pydata/python-in-big-data-with-an-overview-of-numpy-sc.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Travis Oliphant, CEO of Continuum Analytics, kicks off the PyData
Workshop with a talk on Python in Big Data. Topics addressed include
what Python has to offer the world of Big Data, specific use-cases, as
well asking why Hadoop is considered the de-facto standard.&lt;/p&gt;
&lt;p&gt;Additionally, Travis gives an overview of NumPy and SciPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Fri, 02 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-02:pydata/python-in-big-data-with-an-overview-of-numpy-sc.html</guid><category>hadoop</category><category>numpy</category><category>scipy</category></item><item><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey Armstrong</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</guid><category>database</category><category>networking</category><category>numpy</category><category>optimization</category><category>pyohio</category><category>pyohio2010</category><category>scipy</category><category>simulation</category></item><item><title>The Wonderful World of Scientific Computing with Python</title><link>https://pyvideo.org/scipy-2014/the-wonderful-world-of-scientific-computing-with.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will give an overview of the basics of the scientific computing
ecosystem with Python: what does each of the fundamental packages
(numpy, matplotlib, scipy, sympy and pandas) do, and how does it work?
We will use the IPython Notebook in our quest to enter this wonderful
world.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting out with scientific computing in Python can be daunting: Where
do I start? What are the basic packages, and what is the use case for
each of them? What are the fundamental ideas I need to understand each
package and how it works?&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use examples of scientific questions and
calculations which lead directly to the need for certain computational
tools as a gateway to understand the basic structure of the scientific
computing ecosystem. The specific packages we will touch on are
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, all
viewed through the wonderful lens of the IPython Notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David P. Sanders</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/the-wonderful-world-of-scientific-computing-with.html</guid><category>matplotlib</category><category>numpy</category><category>pandas</category><category>scipy</category><category>sympy</category></item><item><title>Python for Scientific and High Performance Computing (3 of 4)</title><link>https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 3 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu0.html</guid><category>chipy</category><category>numpy</category><category>scipy</category></item><item><title>Python for Scientific and High Performance Computing (2 of 4)</title><link>https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 2 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu1.html</guid><category>chipy</category><category>numpy</category><category>scipy</category></item><item><title>Python for Scientific and High Performance Computing (1 of 4)</title><link>https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu2.html</guid><category>chipy</category><category>numpy</category><category>scipy</category></item><item><title>Python for Scientific and High Performance Computing (4 of 4)</title><link>https://pyvideo.org/chipy/python-for-scientific-and-high-performance-comput.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 4 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 12 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-comput.html</guid><category>chipy</category><category>numpy</category><category>scipy</category></item><item><title>Building a Scientific Software Application with the Enthought Tool Suite</title><link>https://pyvideo.org/europython-2011/building-a-scientific-software-application-with-t.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Dickinson - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Enthought Tool Suite (ETS) is a collection of Python-based open
source components that form a foundation for nearly every application
that we deliver to our customers. In this talk I'll demonstrate how to
use ETS to rapidly develop an example scientific software application.
We'll concentrate particularly on introducing Traits, Traits UI, and the
Chaco and Mayavi visualisation tools.&lt;/p&gt;
&lt;p&gt;Prerequisites: some previous experience of working with Python and NumPy
/ SciPy is recommended.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Dickinson</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/building-a-scientific-software-application-with-t.html</guid><category>enthought</category><category>numpy</category><category>scientific</category><category>scipy</category><category>traits</category></item><item><title>Derivatives Analytics with Python &amp; Numpy</title><link>https://pyvideo.org/europython-2011/derivatives-analytics-with-python-numpy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Yves Hilpisch - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In financial engineering and derivatives analytics, C/C++/Java/VBA and
other languages are still dominating. Visixion has developed with
&lt;a class="reference external" href="http://www.dexision.com"&gt;DEXISION&lt;/a&gt; the first full fledged
derivatives analytics suite with Python as core language.&lt;/p&gt;
&lt;p&gt;DEXISION is an On Demand application that is completely Open Source
based (LAMP). For derivatives valuation, it uses Monte Carlo simulation
- an approach known to be computationally demanding. However, Numpy
provides the performance and functionality needed to implement financial
simulation algorithms in a fast and compact manner.&lt;/p&gt;
&lt;p&gt;The talk illustrates the architecture of our analytics suite and
demonstrates how to implement fast and compact simulation algorithms
with Python and Numpy. The talk shows that the Python/Numpy combination
reaches sufficient speed for productive financial applications -
something still widely doubted.&lt;/p&gt;
&lt;p&gt;[No prerequisites.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Yves J. Hilpisch</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/derivatives-analytics-with-python-numpy.html</guid><category>architecture</category><category>engineering</category><category>numpy</category><category>performance</category><category>simulation</category></item><item><title>Experiences making CPU-bound tasks run much faster</title><link>https://pyvideo.org/europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ian Ozsvald - 22 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;UPDATE - post-event I've created a &lt;a class="reference external" href="http://ianozsvald.com/2011/06/29/high-performance-python-tutorial-v0-1%20-from-my-4-hour-tutorial-at-europython-2011/"&gt;49 page PDF write-
up&lt;/a&gt;
which summarises the 4 hour tutorial&lt;/p&gt;
&lt;p&gt;As a long-time R&amp;amp;D consultant I'm often working to make slow,
experimental code run faster for tasks like physics simulation, flood
modeling and natural language processing. Python allows a smooth
progression from rough-and-ready (but slow) algorithms through to finely
tuned tasks that efficiently use as much CPU power as you can bring to
bear. Speed-ups of 10-500* can be expected for the Mandelbrot code
we'll use.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover a set of libraries that make CPU-bound tasks run
much faster. We'll begin with a look at profiling using RunSnakeRun and
line_profiler to identify our bottleneck. We'll take a look at slow
algorithms in Python and how they can run faster using numpy and
numexpr.&lt;/p&gt;
&lt;p&gt;Next we'll cover the use of multiprocessing to utilise multiple CPU
cores along with Cython or ShedSkin to easily use C code in a friendly
Python wrapper. Multiprocessing on a quad-core system can often provide
a 4* speed-up for the right tasks. Next parallelpython will let us run
our code on a network of machines.&lt;/p&gt;
&lt;p&gt;Finally we'll look at pyCUDA to utilise an NVIDIA GPU. CUDA can give the
best improvements for mathematical problems (over 100* on the right
tasks) but works on a narrower set of problems.&lt;/p&gt;
&lt;p&gt;How it'll work: The tutorial will be hands on, you'll be converting
example files from normal Python to faster variants using the tools
below. All of it is optional, you'll get the most benefit by having
everything installed. We'll work in groups and open discussion is
encouraged.&lt;/p&gt;
&lt;p&gt;NOTE - you are expected to have all these tools installed &lt;em&gt;before&lt;/em&gt; the
tutorial (if you don't, you might find it hard to follow what's going
on!).&lt;/p&gt;
&lt;p&gt;I'll be using Python 2.7.1 on a Macbook (Snow Leopard). All of these
tools run on Windows and Linux, as long as your versions are fairly
recent everything should run just fine.&lt;/p&gt;
&lt;p&gt;My versions (roughly ordered by importance):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7.1&lt;/li&gt;
&lt;li&gt;RunSnakeRun 2.0.1b6 (with wxPython 2.8.12.0 Unicode)&lt;/li&gt;
&lt;li&gt;line_profiler (1.0b2)&lt;/li&gt;
&lt;li&gt;Cython 0.14.1&lt;/li&gt;
&lt;li&gt;ShedSkin 0.7.1&lt;/li&gt;
&lt;li&gt;numpy 1.5.1&lt;/li&gt;
&lt;li&gt;numexpr 1.4.2&lt;/li&gt;
&lt;li&gt;ParallelPython 1.6.1&lt;/li&gt;
&lt;li&gt;pyCUDA HEAD from git as of 14th June 2011 (with CUDA 4.0 drivers)&lt;/li&gt;
&lt;li&gt;PyPy 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some background reading:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/"&gt;http://ianozsvald.com/2010/07/14/22937-faster-python-math-using-pycuda/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/"&gt;http://ianozsvald.com/2008/11/17/making-python-math-196-faster-with-shedskin/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Ozsvald</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/experiences-making-cpu-bound-tasks-run-much-faste.html</guid><category>cython</category><category>git</category><category>multiprocessing</category><category>network</category><category>numpy</category><category>nvidia</category><category>profiling</category><category>pycuda</category><category>runsnakerun</category><category>tutorial</category><category>windows</category><category>wxpython</category></item><item><title>Python(x,y): diving into scientific Python</title><link>https://pyvideo.org/europython-2011/pythonxy-diving-into-scientific-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Vincent Noel - 22 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This training session will introduce the Python scientific stack to
beginner or intermediate-level Python programmers. The basics of
scientific programming with Python will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;creation of arrays and structured arrays using numpy&lt;/li&gt;
&lt;li&gt;fast, loopless manipulation of numpy arrays through fancy indexing
and vectorized functions&lt;/li&gt;
&lt;li&gt;convenient saving/loading of array variables using numpy&lt;/li&gt;
&lt;li&gt;improved interactive use through ipython&lt;/li&gt;
&lt;li&gt;data analysis using various scipy modules (signal analysis, image
classification, etc)&lt;/li&gt;
&lt;li&gt;plotting large time series, histograms, scatterplots, images etc.
using matplotlib&lt;/li&gt;
&lt;li&gt;saving/loading large datasets in structured scientific formats such
as netCDF, HDF (depending on interest)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These concepts will be used in coding exercises, in the programming
environnement provided by the Python(x,y) distribution, which is freely
downloadable and includes recent versions of Python, numpy and
matplotlib. The Python(x,y) distribution runs on Windows, which will be
the OS of choice for this session. You should still be able to follow
the examples in other Python distributions, e.g. EPD.&lt;/p&gt;
&lt;p&gt;The entire talk (PDF), code samples and data files can be downloaded
from the following
&lt;a class="reference external" href="http://www.lmd.polytechnique.fr/~noel/EP2011/DivingIntoSci%20entificPython.zip"&gt;archive&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vincent Noel</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/pythonxy-diving-into-scientific-python.html</guid><category>analysis</category><category>datasets</category><category>image</category><category>numpy</category><category>python,</category><category>scientific</category><category>scipy</category></item><item><title>Weather field warping using Python</title><link>https://pyvideo.org/pycon-au-2011/weather-field-warping-using-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python is a great language for prototyping computer vision algorithms,
the availability of libraries such as Numpy and Scipy make for rapid
development similar to that of Matlab, R and IDL. At the Bureau of
Meteorology (BoM) we are solving the interesting problem of weather
field warping. Warping (aka non-linear image registration) is used, for
example, to determine what the predicted temperature will be hourly if
we only have predictions every three hours&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Faggian</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/weather-field-warping-using-python.html</guid><category>numpy</category><category>prototyping</category></item><item><title>Was Sie schon immer über „Visualisierung mit Python“ wissen wollten</title><link>https://pyvideo.org/pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Schon lange hat sich Python in den Software-Entwicklungsabteilungen von
Forschung und Industrie etabliert, nicht zuletzt wegen der Verbreitung
von Bibliotheken wie SciPy oder Matplotlib. Bei der Verarbeitung großer
Datenmengen oder im Zusammenspiel mit GUI-Toolkits stößt man aber leicht
an die Grenzen der interpretativen Programmierung.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt auf, wie solche Anforderung auf der Basis des &lt;em&gt;GR
Frameworks&lt;/em&gt;, einer &amp;quot;Lightweight&amp;quot;-Alternative zu Matplotlib, umgesetzt
werden können. Im Einzelnen wird beschrieben wie man mit aktuellen
Software-Technologien Echtzeit-Anwendungen oder rechenintensive
Simulationen in Python realisieren kann. So lässt sich zum Beispiel
durch die Verwendung von Just-In-Time Kompilierung mit Numba(Pro) eine
enorme Performance-Steigerung erzielen. An konkreten Beispielen werden
die Vorzüge des &lt;em&gt;GR Frameworks&lt;/em&gt; im Zusammenspiel mit JIT-Compilern,
graphischen Benutzeroberflächen (GUIs) sowie OpenGL, aber auch vor dem
Hintergrund einer stetig ansteigenden Paketflut beschrieben.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josef Heinen</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</guid><category>accelerate</category><category>anaconda</category><category>numba</category><category>numpy</category><category>opengl</category><category>pyqt</category><category>python</category><category>visualisierung</category></item><item><title>Entwicklung wissenschaftlicher Applikationen mit Python</title><link>https://pyvideo.org/pycon-de-2013/entwicklung-wissenschaftlicher-applikationen-mit.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Durch Experimente und Simulationen werden im wissenschaftlichen Bereich
große Mengen an Daten erzeugt. Diese müssen geeignet aufbereitet werden,
um sie in eine für die Wissenschaftler verständliche Form zu überführen.
Ein Beispiel dafür ist die Untersuchung von Phasenwechselmaterialien,
welche in wiederbeschreibbaren optischen Medien eingesetzt werden. Der
beim Löschen und Beschreiben eintretende Wechsel zwischen kristallinem
und amorphen Zustand wird auf Großrechnern simuliert und die
resultierende molekulare Struktur auf Hohlstellen hin untersucht, da
diese Rückschlüsse auf das Verhalten des Materials zulassen. Den Kern
der Präsentation nimmt die Entwicklung der Anwendung &lt;em&gt;pyMolDyn&lt;/em&gt; ein,
welche die Analyse und Visualisierung der Moleküle und Hohlstellen
übernimmt.&lt;/p&gt;
&lt;p&gt;Dieser Vortrag gibt einen Einblick in die Erfahrungen, die während der
mehrjährigen Entwicklung dieser Software gesammelt wurden. Zum einen
wird dabei die rechenintensive Analyse der Daten betrachtet und wie
diese durch Verwendung von NumPy und (py)OpenCL vereinfacht und
beschleunigt werden kann. Zum anderen werden die grafischen
Anwendungskomponenten beschrieben, welche mithilfe von wxPython,
(py)OpenGL und einem gezielten Zusammenspiel dieser beiden Pakete
umgesetzt werden konnten. Neben Performance und Einfachheit der
Programmierung werden auch die gewonnenen Eindrücke zu
Plattformunabhängigkeit und Interversionskompatibilität vorgestellt.
Weiterhin werden Eigenheiten der Anwendungsentwicklung im Bereich der
Forschung erläutert und es wird darauf eingegangen, welche Stärken und
Schwächen Python in diesem Zusammenhang bietet. Abschließend folgt ein
Überblick darüber, wie sich die weitere Entwicklung von &lt;em&gt;pyMolDyn&lt;/em&gt;
gestalten wird und welche Konsequenzen die gesammelten Erfahrungen in
Zukunft für das Projekt haben werden.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Rhiem</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/entwicklung-wissenschaftlicher-applikationen-mit.html</guid><category>anwendungsentwicklung</category><category>numpy</category><category>opencl</category><category>opengl</category><category>python</category><category>visualisierung</category><category>wxpython</category></item><item><title>Über die Verwendung von Python zur Strukturanalyse von Schiffen</title><link>https://pyvideo.org/pycon-de-2013/uber-die-verwendung-von-python-zur-strukturanalys.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Der Germanische Lloyd ist ein international tätiges technisches
Dienstleistungsunternehmen, das sich mit u.a. mit der
sicherheitsrelevanten Bewertung von Schiffsstrukturen befasst.&lt;/p&gt;
&lt;p&gt;Für die Festigkeits- und Schwingungsberechnung von neuen Konstruktionen
wurden und werden beim Germanischen Lloyd Python Tools eingesetzt. Diese
dienen zur Manipulation von Berechnungsmodellen, zur Bereitstellung von
Simulationsmodellen in unterschiedlichste Berechnungsformate, zur
Kopplung unterschiedlicher (kommerzieller und nicht kommerzieller)
Berechnungsprogramme, zur Implementierung eigener Berechnungsverfahren
sowie zur Ergebnisdarstellung. Für die unterschiedlichen Aufgaben werden
verschiedene frei verfügbare Bibliotheken wie numpy oder scipy sowie
eigene in C, C++ und FORTRAN geschriebene Extensions und Module
eingesetzt. Für die Anbindung der Extensions an Python werden sowohl
Interface Generatoren (f2py, Cython) als auch handgeschriebener Code
unter Verwendung der Python C API verwendet.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Berthold Höllmann</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/uber-die-verwendung-von-python-zur-strukturanalys.html</guid><category>extension</category><category>fem</category><category>numpy</category></item><item><title>Python in quantitative finance (#158)</title><link>https://pyvideo.org/pycon-us-2010/python-in-quantitative-finance-158.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python in quantitative finance&lt;/p&gt;
&lt;p&gt;Presented by Wes McKinney (AQR Capital Management, LLC)&lt;/p&gt;
&lt;p&gt;This talk will show how Python and libraries such as NumPy were
instrumental at AQR for building a robust research platform for
prototyping and implementing quantitative trading models. We will
discuss many different tools, including pandas, a new open source
library designed for analyzing common financial and economic data sets.&lt;/p&gt;
&lt;p&gt;A variety of examples will be presented to explore Python's current
status as a replacement for other statistical computing environments (as
compared with R, MATLAB, or other commercial and open-source statistical
products).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes McKinney</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/python-in-quantitative-finance-158.html</guid><category>numpy</category><category>pandas</category><category>pycon</category><category>pycon2010</category></item></channel></rss>