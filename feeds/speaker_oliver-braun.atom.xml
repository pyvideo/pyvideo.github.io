<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_oliver-braun.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>Python and Angular, a perfect match?</title><link href="https://pyvideo.org/europython-2017/python-and-angular-a-perfect-match.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Oliver Braun</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/python-and-angular-a-perfect-match.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python on mobile devices is still negligible mostly because of the
GUI problems which arise. But Python on android devices is considered
to be a solved problem since the module Python for Android is
available. We have nowadays at least the possibility to develop for
mobile devices with the GUI engine Kivy which is maybe the first
choice for rapid prototyping on that platform. But as it comes to
design work and mobile device look alike Kivy is still far behind the
web development tools HTML/CSS.&lt;/p&gt;
&lt;p&gt;In our talk we present a conceptual work where we used Ionic - this
is an mobile development framework based on Angular - to build the
GUI part of an app and connected that to a Python back end. In our
point of view our proposal is very general and will give Python a
boost towards modern UX development and makes HTML/CSS/JavaScript a
real option especially in combination with Angular.&lt;/p&gt;
&lt;p&gt;The main part of our solution that we show is the interoperation
between JavaScript and Python such that asynchronous calls in both
direction are possible.&lt;/p&gt;
&lt;p&gt;The advantage is to develop UX and back end code only once and use it
literally on every platform where a Python interpreter and a browser
runs.&lt;/p&gt;
</summary></entry><entry><title>Multibody Simulation using sympy, scipy and vpython</title><link href="https://pyvideo.org/europython-2015/multibody-simulation-using-sympy-scipy-and-vpython.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Oliver Braun</name></author><id>tag:pyvideo.org,2015-08-07:europython-2015/multibody-simulation-using-sympy-scipy-and-vpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Oliver Braun - Multibody Simulation using sympy, scipy and vpython
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;The talk is about the implementation of multibody simulation in the
scientific python world on the way to a stage usefull for engineering
and educational purposes.
Multibody simulation (MBS) requires two major steps: first the
formulation of the specific mechanical problem. Second step is the
integration of the resulting equations.
For the first step we use the package sympy which is on a very
advanced level to perform symbolic calculation and which supports
already Lagrange's and Kane's formalism. The extensions we made are
such that a complex mechanical setup can be formulated easily with
several lines of python code. The functionality is analogous to well
known MBS-tools, with that you can assemble bodies, joints, forces and
constraints. Also external forces even in a cosimulation model can be
added on top. The second step, the integration is done via ode-
integrators implemented in scipy.
Finally for visual validation the results are visualized with the
vpython package and for further analytics with matplotlib.&lt;/p&gt;
&lt;p&gt;Conclusion: not only highly constrained pendulums with many rods and
springs but also driving simulation of passenger cars an be performed
with our new extension using python packages off the shelf.&lt;/p&gt;
</summary></entry></feed>