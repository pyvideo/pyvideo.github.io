<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_artyom-skrobov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-12T00:00:00+00:00</updated><entry><title>How CPython parser works, and how to make it work better</title><link href="https://pyvideo.org/europython-2017/how-cpython-parser-works-and-how-to-make-it-work-better.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Artyom Skrobov</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/how-cpython-parser-works-and-how-to-make-it-work-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The part of CPython core that parses the Python source code is some
very old and convoluted code: the time has proven its reliability,
but few CPython hackers understand (or care) how it works, or even
what exactly it does. There is, however, a good reason to care: for
short-running scripts, the performance of CPython may easily be
dominated by that of parsing the source code.&lt;/p&gt;
&lt;p&gt;The talk will describe the two parsers that are involved, it will
explain how these two parsers build two different kinds of syntax
trees, and then show how the structure of one of the trees can be
amended to reduce its memory footprint threefold, with only minor
changes necessary in its consumers. It will also suggest other, more
invasive improvements, which can yield even better savings.&lt;/p&gt;
&lt;p&gt;The talk will assume fluency in C and a basic acquaintance with
CPython core internals, and will give the attendees an introduction
into hacking the parser, guiding their way through to the very
tangible end result of reducing Python overall memory consumption by
up to 30%, measured at standard micro-benchmarks.&lt;/p&gt;
</summary></entry></feed>