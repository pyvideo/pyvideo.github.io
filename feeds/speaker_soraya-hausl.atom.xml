<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_soraya-hausl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-07T00:00:00+00:00</updated><entry><title>Leveraging recommender systems to personalise search results</title><link href="https://pyvideo.org/pydata-london-2017/leveraging-recommender-systems-to-personalise-search-results.html" rel="alternate"></link><published>2017-05-07T00:00:00+00:00</published><updated>2017-05-07T00:00:00+00:00</updated><author><name>Soraya Hausl</name></author><id>tag:pyvideo.org,2017-05-07:pydata-london-2017/leveraging-recommender-systems-to-personalise-search-results.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData London 2017
www.pydata.org&lt;/p&gt;
&lt;p&gt;Description
This talk discuses an approach to personalise search results by leveraging techniques of recommender systems .We use Pyspark to set up the data and calculate recommendation and preference elements and Elasticsearch as a search engine&lt;/p&gt;
&lt;p&gt;Abstract
These days a lot of companies are building recommendations engines. The techniques for doing so are widely known and open source technology is accessible. We were experimenting to investigate how we can leverage our recommendations engine to extend personalisation to search results. Besides surfacing items that are relevant based on the search term our approach aims to increase relevancy for each user by considering their personal preferences. We use Pyspark to set up the data and calculate recommendation and preference elements and Elasticsearch as a search engine where we integrate our recommendations approach. We are looking into various ways of how to incorporate customer preferences such as item similarities, matrix factorisation output and preference inference&lt;/p&gt;
</summary></entry></feed>