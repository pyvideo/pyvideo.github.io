<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 05 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>Little things that PyPy makes possible</title><link>https://pyvideo.org/pycon-ar-2011/little-things-that-pypy-makes-possible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About the lecture: PyPy is just a python interpreter. One of the original goals of the project were to make existing python programs run faster, and PyPy succeeded in that. However, the even more exciting part is that optimizations implemented in PyPy let people do things in Python that were not possible before, like real-time video processing, numeric array manipulation faster than in C etc. etc. During the talk I'll present some demos and talk what things are possible having a decent optimizing just-in-time compiler and briefly discuss strategies that we used for achieving this. I'll also discuss how faster-than-C, pypy's original goal from years ago, is after all not that far off.The Conference was in Junín ( Buenos Aires, Argentina ) September 2011. The event was managed by PyAr ( Argentinian Python Group ).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 23 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-23:pycon-ar-2011/little-things-that-pypy-makes-possible.html</guid></item><item><title>Why is Python slow?</title><link>https://pyvideo.org/pycon-russia-2017/why-is-python-slow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will cover one of the usual topics of discussions of deficiencies of the Python language, notably it's speed.
We've spent last decade improving on the performance of the language (but not the default implementation). What we've learned so far is not the common interpretation of that question - things like dynamic dispatch, dynamic typing and interpreter can all be worked around.
What we've learned are the places in the Python language which make unnecessary string copies, but are easier to write, a lot of &amp;quot;pythonic&amp;quot; constructs that cannot be implemented efficiently and a lot of quirks that make some constructs slow for no good reason. Additionally we're overwhelmed by the sheer size of the &amp;quot;simple&amp;quot; language and the necessity of supporting C extensions.
This talk will cover detailed view of those problems and some potential remedies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-17:pycon-russia-2017/why-is-python-slow.html</guid></item><item><title>GlyphScript - a tutorial from the future</title><link>https://pyvideo.org/pycon-ukraine-2016/glyphscript-a-tutorial-from-the-future.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-24:pycon-ukraine-2016/glyphscript-a-tutorial-from-the-future.html</guid></item><item><title>How to benchmark code</title><link>https://pyvideo.org/pycon-pl-2014/how-to-benchmark-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: How to benchmark code
Prelegent/Speaker: Maciej Fijałkowski, Armin Rigo&lt;/p&gt;
&lt;p&gt;In this talk, we would like to present basics of how the Python virtual machines like CPython or PyPy work and how to use that knowledge to write meaningful benchmarks for your programs. We'll show what's wrong with microbenchmarks and how to improve the situation.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-19:pycon-pl-2014/how-to-benchmark-code.html</guid></item><item><title>PyPy, an alternative Python implementation</title><link>https://pyvideo.org/pycon-pl-2014/pypy-an-alternative-python-implementation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: PyPy, an alternative Python implementation
Prelegenci/Speakers: Maciej Fijałkowski, Armin Rigo&lt;/p&gt;
&lt;p&gt;The current status of PyPy, with a particular focus on what happened in the last two years. We will give a brief overview of the current speed and the on-going development efforts on the JIT, the GC, NumPy, Python 3 compatibility, CFFI, STM...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-17:pycon-pl-2014/pypy-an-alternative-python-implementation.html</guid></item><item><title>PyCon 2009: PyPy status talk (#72)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009-pypy-status-talk-72.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy Status Talk&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel and Maciej Fijalkowski&lt;/p&gt;
&lt;p&gt;PyPy has come a long way. It's gone from being purely a research project
to providing a flexible and reasonably fast Python Interpreter, itself
implemented in Python. Although PyPy is not yet a viable CPython
replacement, PyPy is able to run sophisticated python applications like
Django and Twisted. In this talk, we'll focus on improvements that
happened during the last year in PyPy. This talk will also explain the
motivations driving current PyPy development and its targets for the
future.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio humming, other misc audio issues]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009-pypy-status-talk-72.html</guid><category>pycon</category><category>pycon2009</category><category>pypy</category></item><item><title>How to write cross-interpreter Python programs (#101)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-to-write-cross-interpreter-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to write cross-interpreter Python programs&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski (merlinux GmbH, pypy)&lt;/p&gt;
&lt;p&gt;This talk will cover basics about writing cross-interpreter python
programs. What to do and most of all what not to do. This will help you
if you want at some point in time to run program on for example Java
platform or faster python interpreter, but also if you want to keep it
running between CPython releases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-to-write-cross-interpreter-python.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Keynote: State of PyPy</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--state-of-pypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: State of PyPy&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski&lt;/p&gt;
&lt;p&gt;Talks about the current state of PyPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--state-of-pypy.html</guid><category>pycon</category><category>pycon2010</category><category>pypy</category></item><item><title>The speed of PyPy (#83)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-speed-of-pypy---83.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Speed of PyPy&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski (merlinux GmbH, pypy)&lt;/p&gt;
&lt;p&gt;The first part of the talk will cover PyPy's speed achievements
resulting from the last year's work on the Just-In-Time Compiler. I'll
present and discuss a number of benchmarks and compare against other
Python-speed projects. I'll also cover the basics of how the JIT works
and what sort of programs it can greatly speedup (and which ones it
can't).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-speed-of-pypy---83.html</guid><category>pycon</category><category>pycon2010</category><category>pypy</category></item><item><title>Panel: Python VMs</title><link>https://pyvideo.org/pycon-us-2011/panel-python-vms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python VMs&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland&lt;/p&gt;
&lt;p&gt;Python is lucky enough to have a healthy ecosystem of virtual machines
(VMs) exist. CPython, Jython, IronPython, and PyPy are all used
extensively by people in real-world situations. This panel brings
together a representative from each of the major VMs to discuss where
they are now, going in the future, and to answer questions from the
community.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;All four major Python VMs will be represented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;: Brett Cannon&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;: Frank Wierzbicki&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;: Dino Viehland&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;: Maciej Fijalkowski Moderation will be
handled by Jacob Kaplan-Moss of Django.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/panel-python-vms.html</guid><category>cpython</category><category>ironpython</category><category>jython</category><category>pycon</category><category>pycon2011</category><category>pypy</category></item><item><title>Why is Python slow and how PyPy can help?</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is Python slow and how PyPy can help?&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski and Alex Gaynor&lt;/p&gt;
&lt;p&gt;PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance. This talk is going
to be a deep dive into what exactly makes Python such a hard language to
optimize, how PyPy is organized, and what optimizations our JIT can do
(and what it can't do) for your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will detail how a python interpreter works internally and why
some operations are costly. We'll go through several python features,
how they work, why they're slow in CPython and how we're fixing it.&lt;/p&gt;
&lt;p&gt;The list of mentioned features is not exhaustive, however we will try to
focus at least on the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dynamic language - In Python code we have no known types, like a
statically typed language. Even operations like &amp;quot;a + b&amp;quot; can do
anything, unless we know more about the code, and the types it is
operating on.&lt;/li&gt;
&lt;li&gt;Frame introspection - Frame objects need to be allocated for every
function call, and all local variables are stored on the frame, and
must be accessible from further down the call stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy uses a novel approach called &amp;quot;virtualizables&amp;quot; which makes it
possible to avoid frame allocation in most common cases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Object model - All user defined Python objects have a dictionary
which stores their attributes, as does every type. When Python does
an attribute lookup this requires at least two dictionary lookups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In PyPy we use an approach similar to the one used by V8 with hidden
classes (except more PyPy specific) called map dictionaries and other
optimizations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FFI calls - Calling C from Python is costly and hard to optimize. In
PyPy we expose C APIs to Python code via ctypes. This part explains
how we can optimize ctypes calls.&lt;/li&gt;
&lt;li&gt;array module - Users of CPython's array module probably know it can
save them quite a bit of memory, however it's also slower than using
a list, due to the overhead of boxing and unboxing on every
operations. Here we will tie everything together and describe how the
array module is much faster with PyPy's JIT, combining our
optimizations to: unbox values, remove the dynamicism within traces,
and deliver great performance.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</guid><category>jit</category><category>pycon</category><category>pycon2011</category><category>pypy</category><category>vm</category></item><item><title>Why PyPy by example</title><link>https://pyvideo.org/pycon-us-2012/why-pypy-by-example.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the goals of PyPy is to make existing Python code faster, however
an even broader goal was to make it possible to write things in Python
that previous would needed to be written in C or other low-level
language. This talk will show examples of this, and describe how they
represent the tremendous progress PyPy has made, and what it means for
people looking to use PyPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:pycon-us-2012/why-pypy-by-example.html</guid></item><item><title>How to get the most out of your PyPy</title><link>https://pyvideo.org/pycon-us-2012/how-to-get-the-most-out-of-your-pypy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;For many applications PyPy can provide performance benefits right out of
the box. However, little details can push your application to perform
much better. In this tutorial we'll give you insights on how to push
pypy to it's limites. We'll focus on understanding the performance
characteristics of PyPy, and learning the analysis tools in order to
maximize your applications performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-07:pycon-us-2012/how-to-get-the-most-out-of-your-pypy.html</guid></item><item><title>PyConZA 2012: Details of Python performance</title><link>https://pyvideo.org/pycon-za-2012/pyconza-2012-details-of-python-performance.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Details of Python performance: Maciej Fijałkowski's talk at PyConZA 2012&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Thu, 04 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-04:pycon-za-2012/pyconza-2012-details-of-python-performance.html</guid><category>pyconza</category><category>pyconza2012</category></item><item><title>PHP interpreter using PyPy technology</title><link>https://pyvideo.org/pycon-za-2013/php-interpreter-using-pypy-technology.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-03:pycon-za-2013/php-interpreter-using-pypy-technology.html</guid><category>pyconza</category><category>pyconza2013</category></item><item><title>How PyPy runs your program</title><link>https://pyvideo.org/pycon-za-2015/how-pypy-runs-your-program.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we would like to have a short introduction on how Python
programs are compiled and executed, with special attention towards
just-in-time compilation done by PyPy. PyPy is the most advanced Python
interpreter around, and while it should generally just speed up your
programs, there is a wide range of performance that you can get out of
PyPy, ranging from slightly faster than CPython to C speeds, depending
on how you write your programs.&lt;/p&gt;
&lt;p&gt;We will split the talk in two parts. In the first part we will explain
how things work, and what can and cannot be optimized, as well as
describe the basic heuristics of the JIT compiler and optimizer. In the
next part we will do a brief survey of existing tools for looking at
performance of Python programs, with a specific focus on PyPy. We'll
mostly focus on vmprof with a brief mention of others.&lt;/p&gt;
&lt;p&gt;As a result of this talk, an audience member should be better equipped
with the tools to write new software and improve existing software with
performance in mind.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-02:pycon-za-2015/how-pypy-runs-your-program.html</guid><category>Room 215</category></item><item><title>How development models affect the team</title><link>https://pyvideo.org/pycon-za-2016/how-development-models-affect-the-team.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There has been a lot said about how to ensure correct quality control
using tests, continuous integration, peer review etc. In this talk I
would like to focus exclusively on my experience as an open source
contributor with various projects. I've contributed extensively to
projects I don't manage (like twisted, mercurial, cpython) and I've
overseen contributions by others to projects like vmprof or PyPy. I
would like to share my experience on how various methods (tests, reviews
etc.) make me feel as a contributor and how easy it is to integrate
changes based on that. I think the human factor of contributions is
often too omitted from the process.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijałkowski</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/how-development-models-affect-the-team.html</guid></item><item><title>PyPy3, Numpy, and maybe a GIL-less future</title><link>https://pyvideo.org/pycon-za-2017/pypy3-numpy-and-maybe-a-gil-less-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is a Python implementation, alternative to the standard CPython.
PyPy comes with a JIT (Just-in-Time compiler). We'll see the recent
developments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PyPy now supports either Python 2.7 or (in beta) Python 3.5.&lt;/li&gt;
&lt;li&gt;Numpy and the scientific stack are getting ever closer to fully
working.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also mention a potential future direction: getting rid of the
GIL (Global Interpreter Lock). The Python community has been discussing
removing the GIL for a long time, with no success so far. Targeting PyPy
instead of CPython would still be quite involved, but more doable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Thu, 05 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-05:pycon-za-2017/pypy3-numpy-and-maybe-a-gil-less-future.html</guid></item></channel></rss>