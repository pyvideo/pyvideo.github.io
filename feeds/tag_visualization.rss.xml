<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate><item><title>Building a User Maintainable Visualization Dashboard for the Large Synoptic Survey Telescope (LSST)</title><link>https://pyvideo.org/pydata-austin-2019/building-a-user-maintainable-visualization-dashboard-for-the-large-synoptic-survey-telescope-lsst.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting in 2023, the Large Synoptic Survey Telescope (LSST) project will image the entire visible sky every few days for ten years. When in production the LSST will generate 15 Terabytes of data per night. Critical to the success of this project is ensuring the quality of the data processing pipeline. We will demonstrate the complex multi page data visualization dashboard used by scientists.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dharhas Pothina</dc:creator><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-12-07:pydata-austin-2019/building-a-user-maintainable-visualization-dashboard-for-the-large-synoptic-survey-telescope-lsst.html</guid><category>data-visualization</category><category>Visualization</category><category>dashboard</category></item><item><title>Visualizing Machine Learning of Units of Measure using PyViz</title><link>https://pyvideo.org/pydata-austin-2019/visualizing-machine-learning-of-units-of-measure-using-pyviz.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will discuss how PyViz tools were used to visualize Machine Learning employed to learn clinical units of measure from ClinicalTrials.Gov and multiple standards&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Barhak</dc:creator><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-12-07:pydata-austin-2019/visualizing-machine-learning-of-units-of-measure-using-pyviz.html</guid><category>pyviz</category><category>Machine-Learning</category><category>visualization</category></item><item><title>PlotVR - walk through your data</title><link>https://pyvideo.org/europython-2019/plotvr-walk-through-your-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you bored by 3D-plots that only give you a simple rotatable
2d-projection? plotVR is an open source package that provides a simple
way for data scientists to plot data, pick up a phone, get a real 3d
impression - either by VR or by AR - and use the computer's keyboard to
walk through the scatter plot:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.github.com/thomann/plotVR"&gt;https://www.github.com/thomann/plotVR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing and plotting your dataframe open your phone's browser
and use your GoogleVR Cardboard. Furthermore performant Android- and
iOS-apps are available - both support VR-Cardboard and the iOS-Version
also AR.&lt;/p&gt;
&lt;p&gt;Once you are immersed in your Cardboard how do you navigate through the
scatter? plotVR lets you use the computer's keyboard to walk as you
would in any first person game.&lt;/p&gt;
&lt;p&gt;You want to share your impression? Just save the HTML and publish it.&lt;/p&gt;
&lt;p&gt;The technologies beneath this project are: a web server that handles the
communication between the DataScience-session and the phone, WebSockets
to quickly proxy the keyboard events, QR-codes facilitate the simple
pairing of both, and an HTML-Page on the computer to grab the keyboard
events. And the translation of these keyboard events into 3D terms is a
nice exercise in three.js, OpenGL, and SceneKit for HTML, Android, and
iOS resp.&lt;/p&gt;
&lt;p&gt;Ready to see your data as you have never seen before? Join the talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philipp Thomann</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/plotvr-walk-through-your-data.html</guid><category>3D</category><category>Augmented Reality</category><category>Data Science</category><category>Open-Source</category><category>Visualization</category></item><item><title>Dash: Interactive Data Visualization Web Apps with no Javascript</title><link>https://pyvideo.org/europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your data science or machine learning project probably won't just
produce a written report. Instead, projects are increasingly expected to
produce interactive tools to allow end-users to explore data and results
with rich, interactive visualizations. Inevitably, this will be done in
a web browser, meaning you'll need to add a quantitatively trained web
developer to your team, or have your data scientists spend time learning
HTML, Javascript and CSS. Dash, a project by the team that makes Plotly,
solves some of these problems by allowing data scientists to build rich
and interactive websites in pure python, with minimal knowledge of HTML
and absolutely no Javascript.&lt;/p&gt;
&lt;p&gt;At decisionLab, a London-based data science consultancy producing
decision tools, we've embraced Dash to produce proof-of-concept models
for our projects in alpha. Although we're not officially connected to
the plotly/Dash project, by using the library daily across many
projects, we've learned many lessons and what we feel are best practises
we'd like to share, and hear feedback on!&lt;/p&gt;
&lt;p&gt;This talk will give an overview of Dash, how it works and what it can be
used for, before outlining some of the common problems that emerge when
data scientists are let loose to produce web applications, and web
developers have to work with the pydata ecosystem. The talk also covers
effective working practises to start producing cool interactive
statistical web applications, fast. We'll also identify some of the
pitfalls of Dash, and how and when to make the decision to stop using
Dash and start building a proper web application.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://domweldon-europython-2019-dash.s3.eu"&gt;http://domweldon-europython-2019-dash.s3.eu&lt;/a&gt;-
west-2.amazonaws.com/index.html&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dom Weldon</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/dash-interactive-data-visualization-web-apps-with-no-javascript.html</guid><category>Data Science</category><category>JavaScript</category><category>Visualization</category><category>Web</category><category>Web Servers and MicroFWs</category></item><item><title>Geospatial Analysis using Python and JupyterHub</title><link>https://pyvideo.org/europython-2019/geospatial-analysis-using-python-and-jupyterhub.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geospatial data is data containing a spatial component – describing
objects with a reference to the planet's surface. This data usually
consists of a spatial component, of various attributes, and sometimes of
a time reference (where, what, and when). Efficient processing and
visualization of small to large-scale spatial data is a challenging
task.&lt;/p&gt;
&lt;p&gt;This talk describes how to process and visualize geospatial vector and
raster data using Python and the Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;To process the data a high performance computer with 4 GPUS (NVidia
Tesla V100), 192 GB RAM, 44 CPU Cores is used to run JupyterHub.&lt;/p&gt;
&lt;p&gt;There are numerous modules available which help using geospatial data in
using low- and high-level interfaces, which are shown in this
presentation. In addition, it is shown how to use deep learning for
raster analysis using the high performance GPUs and several deep
learning frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Christen</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/geospatial-analysis-using-python-and-jupyterhub.html</guid><category>Analytics</category><category>Big Data</category><category>Deep Learning</category><category>GPU</category><category>Visualization</category></item><item><title>Getting Your Data Joie De Vivre Back!</title><link>https://pyvideo.org/europython-2019/getting-your-data-joie-de-vivre-back.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us work too much and play too little. When was the last time you
smiled at something you made? Playing with fun datasets, especially big
data sets, opens up weird new forms of technical recreation. Why not
train an amusing model in a browser tab while you're waiting for that
day-job Spark query to finish? I'll show you some data toys I've built
using AI and interesting data sets: Most of them involve both backend
data science and front-end visualization tricks. They range from
poetry-composition helpers to game log analysis to image deconstruction
and reconstruction. All of them taught me something, often about myself
and what I like artistically, and sometimes about what &amp;quot;big data&amp;quot;
actually means.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Cherny</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/getting-your-data-joie-de-vivre-back.html</guid><category>Big Data</category><category>Deep Learning</category><category>Visualization</category></item><item><title>Algoritmo di Routing Multi-Obiettivo di Veicoli Elettrici con vincoli di ricarica lungo il percorso</title><link>https://pyvideo.org/pycon-italia-2019/algoritmo-di-routing-multi-obiettivo-di-veicoli-elettrici-con-vincoli-di-ricarica-lungo-il-percorso.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questa presentazione affronteremo alcune delle fasi più importanti, e
le problematiche ad esse correlate, per lo sviluppo di un modello di
routing multi-obiettivo di un veicolo elettrico con vincoli di ricarica
lungo il percorso. In particolare analizzeremo le principali sorgenti
Open di dati geografici della rete stradale e relativi a stazioni di
ricarica (Open Street Map, Open Charge Map, etc.), nonchè alcune delle
principali librerie Python che espongono API utili alla costruzione di
una rete per scenari urbani ed extra-urbani (Pandana, OSMnx, etc). Nella
presentazione si descriveranno inoltre brevemente algoritmi quali
Dijkstra e A* utili come punto di partenza per il design di un tale
modello e lo speed-up del tempo di processamento. Infine si mostreranno
alcuni casi studio legati al tema mobilità elettrica, mostrando alcune
mappe interattive realizzate con la potente libreria Folium.&lt;/p&gt;
&lt;p&gt;Esperienza consigliata del pubblico: Beginner/Intermediate&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1552"&gt;https://python.it/feedback-1552&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Betti</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/algoritmo-di-routing-multi-obiettivo-di-veicoli-elettrici-con-vincoli-di-ricarica-lungo-il-percorso.html</guid><category>OpenStreetMap</category><category>visualization</category><category>Network</category><category>maps</category><category>Dijkstra</category><category>performance</category></item><item><title>GPU-accelerated data analysis in Python: a study case in Material Sciences</title><link>https://pyvideo.org/pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Max Planck Computing and Data Facility is engaged in the development
and optimization of algorithms and applications for high performance
computing as well as for data-intensive projects. As programming
language in data science, Python is now used at MPCDF in the scientific
area of “atom probe crystallography” (APT): a Fourier analysis in 3D
space can be simulated in order to reveal composition and
crystallographic structure at the atomic scale of billions APT
experimental data sets.&lt;/p&gt;
&lt;p&gt;The Python data ecosystem has proved to be well suited to this, as it
has grown beyond the confines of single machines to embrace scalability.
The talk aims to describe our approach to scaling across multiple GPUs,
and the role of visualization methods too.&lt;/p&gt;
&lt;p&gt;Our data workflow analysis relies on the GPU-accelerated Python software
package PyNX, an open source library which provides fast parallel
computation scattering. The code takes advantage of the high throughput
of GPUs, using the pyCUDA library.&lt;/p&gt;
&lt;p&gt;Exploratory data analysis, high productivity and rapid prototyping with
high performance are enabled through Jupyter Notebooks and Python
packages e.g., pandas, matplotlib/plotly. In production stage,
interactive visualization is realized by using standard scientific tool,
e.g. Paraview, an open-source 3D visualization program which requires
Python modules to generate visualization components within VTK files.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giuseppe Di Bernardo</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/gpu-accelerated-data-analysis-in-python-a-study-case-in-material-sciences.html</guid><category>GPUComputing</category><category>visualization</category><category>mathematical-modelling</category><category>image-processing</category><category>bigdata</category><category>matplotlib</category><category>analytics</category><category>data-visualization</category><category>data-analysis</category><category>Data Mining</category><category>scientific-computing</category><category>physics</category><category>python3</category></item><item><title>Master 2.5 GB of unstructured specification documents with ease</title><link>https://pyvideo.org/pycon-de-2017/master-25-gb-of-unstructured-specification-documents-with-ease.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Dr. Andreas Schilling&lt;/strong&gt; is Senior Software Engineer at eXXcellent solutions. In his job, he helps customers to develop software solutions from the early stage of defining the particular requirements to developing information systems which meet their needs.&lt;/p&gt;
&lt;p&gt;Before working at eXXcellent solutions Andreas Schilling studied Information Systems at the University of Bamberg focusing on distributed systems and information management. Thereafter, he pursued his PhD and studied collaboration dynamics in open source projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How Do you kick start a project which is based on 2.5 GB files of unstructured specification documents? To answer this question, we present our lessons learned from developing a Python based knowledge management tool which provides a lightweight and intuitive browser frontend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk, we present lessons learned from and practical advice on how to deal with a large body of specification documents in your next project. We introduce our approach as well as code excerpts from our powerful toolset to transform a large set of unstructured and partially corrupt specification documents into structured JSON Files. Finally, we showcase a simple, yet powerful Javascript frontend which requires no additional infrastructure to present the compiled artefacts in an intuitive and responsive user interface.&lt;/p&gt;
&lt;p&gt;In particular this talk covers the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to make use of pywin32 to access layout and content information from partially corrupt .doc and .docx files and create simple JSON files with UTF-8 encoding.&lt;/li&gt;
&lt;li&gt;Identify and categorize signal words in your specification.&lt;/li&gt;
&lt;li&gt;Use pandas to compile content based recommender functionality&lt;/li&gt;
&lt;li&gt;Use networkx and py2cytoscape to visualize call sequences and semantic relationships in your specification.&lt;/li&gt;
&lt;li&gt;Present the compiled artefacts and identified relationships in an easy-to-use and lightweight Javascript browser interface without any additional infrastructure (i.e. no webserver and no database server).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schilling</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/master-25-gb-of-unstructured-specification-documents-with-ease.html</guid><category>networkx</category><category>pandas</category><category>visualization</category><category>knowledge-management</category><category>analytics</category><category>use-case</category><category>python</category><category>business</category></item><item><title>Data science in Python: pandas, seaborn, scikit-learn</title><link>https://pyvideo.org/data-school/scikit-learn-06-data-science-pipeline.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this video, we'll cover the data science pipeline from data ingestion (with pandas) to data visualization (with seaborn) to machine learning (with scikit-learn). We'll learn how to train and interpret a linear regression model, and then compare three possible evaluation metrics for regression problems. Finally, we'll apply the train/test split procedure to decide which features to include in our model.&lt;/p&gt;
&lt;p&gt;This is the sixth video in the series, &lt;a class="reference external" href="http://www.dataschool.io/machine-learning-with-scikit-learn/"&gt;Introduction to machine learning with scikit-learn&lt;/a&gt;. The notebook and resources shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/scikit-learn-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Markham</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-28:data-school/scikit-learn-06-data-science-pipeline.html</guid><category>machine learning</category><category>data science</category><category>scikit-learn</category><category>tutorial</category><category>Data School</category><category>pandas</category><category>seaborn</category><category>linear regression</category><category>model evaluation</category><category>feature selection</category><category>visualization</category></item><item><title>PyGotham 2011: Intro to Data Visualization</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011--intro-to-data-visualization.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have lots of data? Want to turn it into pictures to help you better
understand it or explain it to others? This session will address best
practices for encoding information through design, and will look at a
few ways of doing this in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julie Steele</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--intro-to-data-visualization.html</guid><category>data</category><category>pygotham</category><category>pygotham2011</category><category>visualization</category></item><item><title>Bokeh: An Extensible Implementation of the Grammar of Graphics for Python</title><link>https://pyvideo.org/scipy-2012/bokeh-an-extensible-implementation-of-the-gramma.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bokeh is a new plotting framework for Python that natively understands
the relationships in multidimensional datasets, uses a Protovis-like
expression syntax scheme for creating novel visualizations, and is
designed from the ground up to be used on the web.&lt;/p&gt;
&lt;p&gt;Although it can be thought of as &amp;quot;ggplot for Python&amp;quot;, the goals of Bokeh
are much more ambitious. The Grammar of Graphics primarily addresses the
mapping of pre-built aeshetics and layouts to a particular data schema
and tuples of measure variables. It has limited facility for expressing
data interactivity, and its small set of graph types (aka &amp;quot;geoms&amp;quot; or
glyphs) are somewhat limited in both their number and in the number of
ways they can be combined with one another.&lt;/p&gt;
&lt;p&gt;On the flip side, most existing Python plotting frameworks adopt a &amp;quot;tell
me how&amp;quot; instead of a &amp;quot;tell me what&amp;quot; approach. Thus, user plotting code
canfrequently become mired down in what amounts to details of the
rendering system.&lt;/p&gt;
&lt;p&gt;In our talk, we will show various features of Bokeh, and talk about
future development. We will also go into some detail about how Bokeh
unifies the tasks of describing data mapping, building data-driven
layout, and composing novel visualizations using a single, multi-purpose
scene and data graph.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hugo Shi</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/bokeh-an-extensible-implementation-of-the-gramma.html</guid><category>visualization</category></item><item><title>Enaml - A Framework for Building Declarative User Interfaces</title><link>https://pyvideo.org/scipy-2012/enaml-a-framework-for-building-declarative-user.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Enaml is a new domain specific declarative language for specifying user
interfaces in Python applications. Its syntax, a strict superset of the
Python language, provides a clean and compact representation of UI
layout and styling, and uses dynamic expressions to bind a view's logic
with an application's underlying computational model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-goals"&gt;
&lt;h4&gt;Design Goals&lt;/h4&gt;
&lt;p&gt;A number of considerations were given during the design of Enaml with
the ultimate goal being the creation of a dynamic UI framework that has
a low barrier of entry and can scale in complexity and capability
according to the needs of the developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Influence&lt;/strong&gt; Enaml improves upon existing technologies and ideas for
specifying user interfaces. Much of Enaml's inspiration comes from Qt's
QML, a declarative UI language derived from ECMAScript and designed
specifically for developing mobile applications with the Qt toolkit. In
contrast, Enaml is designed for the development of scientific and
enterprise level applications, and makes use of a Python derived syntax
and standard desktop-style widget elements. For layout, Enaml raises the
bar by providing a system based on symbolic constraints. The underyling
technology is the same which powers the Cocoa Auto-Layout system in OSX
10.7, however in Enaml, the constraints are exposed in a friendly
Pythonic fashion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toolkit Independence&lt;/strong&gt; In large projects, the costs of changing
infrastructure can be extremely high. Instead of forcing an application
to be tied to a single underlying toolkit, Enaml is designed to be
completely toolkit agnostic. This decoupling provides the benefit of
being able to migrate an entire project from one gui library to another
by changing only a single line of code or setting an environment
variable. Enaml currently supports both Qt (via Pyside or PyQt4) and
WxPython backends with plans for HTML 5 in the future. The authoring of
new toolkit backends has been designed to be a simple affair. Adding new
or custom widgets to an existing toolkit is trivial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extensibility&lt;/strong&gt; A good framework should be useable by a wide variety
of audiences and should be able to adapt to work with technologies not
yet invented. Enaml can provide the UI layer for any Python application,
with few limitations placed on the architecture of the underlying
computational model. While Enaml understands Enthought's Traits based
models by default, it provides simple hooks that the developer can use
to extend its functionality to any model architecture that provides some
form of notification mechanism. Possibilities include, but are not
limited to, models built upon databases, sockets, and pub-sub
mechanisms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuity&lt;/strong&gt; No matter how easy it is to get started with a new
framework, it will not be adopted if the cost of switching is
exceedingly high. Enaml is positioned to become the next generation of
TraitsUI, the user interface layer of the Traits library. Enaml can both
include existing TraitsUI views in an application as well as itself be
embedded within a TraitsUI. Enaml also interacts seamlessly with the
Chaco plotting library, allowing easy integration of interactive
graphics. Enaml cleanly exposes the toolkit specific objects that it
manages, allowing a user with a large amount of toolkit specific code to
continue to use that code with little or no changes. This provides a
path forward for both TraitsUI and non-TraitsUI applications.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S. Chris Colbert</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/enaml-a-framework-for-building-declarative-user.html</guid><category>visualization</category></item><item><title>Interactive Visualization Widgets Using Chaco and Enable</title><link>https://pyvideo.org/scipy-2012/interactive-visualization-widgets-using-chaco-and.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactivity is an important part of computer visualization of data,
but all too often the user interfaces to control the visualization are
far from optimal. This talk will show how you can use the Enable and the
Chaco to build interactive visualization widgets which give much better
user feedback than sliders or text fields.&lt;/p&gt;
&lt;p&gt;Chaco is an open-source interactive 2D plotting library that is part of
the Enthought tool-suite, which is in turn built upon the Enable
interactive 2D drawing library that are compatible with PyQt, WxPython,
Pyglet and VTK. These libraries are written in Python and are key tools
that Enthought uses to deliver scientific applications to our clients.&lt;/p&gt;
&lt;p&gt;This talk will show how to use these tools to build UI widgets that can
be used to control visualizations interactively. Rather than building a
complex, monolithic control, the approach that we will demonstrate
builds the control our of many smaller interactions, each controlling a
small piece of the overall state of a visualization, with a high level
of reusability.&lt;/p&gt;
&lt;p&gt;As a simple but useful case-study, we'll show how we built an
interactive histogram widget that can be use to adjust the brightness,
contrast, gamma and other attributes of an image in real-time. We'll
also discuss some of the tricks we used to keep the user interactions
responsive in the face of having to visualize larger images.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Corran Webster</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/interactive-visualization-widgets-using-chaco-and.html</guid><category>visualization</category></item><item><title>luban: a minimalist UI 'language'</title><link>https://pyvideo.org/scipy-2012/luban-a-minimalist-ui-language.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Luban (&lt;a class="reference external" href="http://lubanui.org"&gt;http://lubanui.org&lt;/a&gt;) is a python package for building user
interface. With luban, one can easily create dynamic, ajax-based web
interfaces behaving like desktop UI using pure python: no knowledge of
html and javascript is required.&lt;/p&gt;
&lt;p&gt;Luban is different from any existing web frameworks in philosophy: it
provides a generic specification &amp;quot;language&amp;quot; for describing user
interface, and a luban specification of user interface can be
automatically rendered into web or native user interfaces using
media-specific languages.&lt;/p&gt;
&lt;p&gt;Luban is focused on providing a simple, easy-to-understand syntax to
describe user interfaces, and hence allows users to focus more on the
business logic needed behind user interfaces.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss recent developments of luban and some of its
applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jiao Lin</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/luban-a-minimalist-ui-language.html</guid><category>visualization</category></item><item><title>Python's role in VisIt</title><link>https://pyvideo.org/scipy-2012/pythons-role-in-visit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;VisIt is an open source, turnkey application for scientific data
analysis and visualization that runs on a wide variety of platforms from
desktops to petascale class supercomputers. This talk will provide an
overview of Python’s role in VisIt with a focus on use cases of scripted
rendering, data analysis, and custom application development.&lt;/p&gt;
&lt;p&gt;Python is the foundation of VisIt’s primary scripting interface, which
is available from both a standard python interpreter and a custom
command line client. The interface provides access to all features
available through VisIt’s GUI. It also includes support for macro
recording of GUI actions to python snippets and full control of
windowless batch processing.&lt;/p&gt;
&lt;p&gt;While Python has always played an important scripting role in VisIt, two
recent development efforts have greatly expanded VisIt’s python
capabilities:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We recently enhanced VisIt by embedding python interpreters into our
data flow network pipelines. This provides fine grained access,
allowing users to write custom algorithms in python that manipulate
mesh data via VTK’s python wrappers and leverage packages such as
numpy and scipy. Current support includes the ability to create
derived mesh quantities and execute data summarization operations.&lt;/li&gt;
&lt;li&gt;We now support custom GUI development using Qt via PySide. This
allows users to embed VisIt’s visualization windows into their own
python applications. This provides a path to extend VisIt’s existing
GUI and for rapid development of streamlined GUIs for specific use
cases.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ultimate goal of this work is to evolve Python into a true peer to
our core C++ plugin infrastructure.&lt;/p&gt;
&lt;p&gt;This work performed under the auspices of the U.S. Department of Energy
by Lawrence Livermore National Laboratory under Contract
DE-AC52-07NA27344 (LLNL- ABS-552316).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cyrus Harrison</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/pythons-role-in-visit.html</guid><category>visualization</category></item><item><title>Surface Subdivision Schemes for Python</title><link>https://pyvideo.org/scipy-2012/surface-subdivision-schemes-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There exist two very powerful geometric surface subdivision schemes that
do not yet exist for python users: Catmul-Clark subdivision surfaces,
and Nira Dyn's Butterfly subdivision surface scheme. These schemes are
useful in creating C2-continuous (under ideal conditions) surfaces from
a control mesh of points. The later scheme interpolates the control mesh
points, which makes it useful for scientific applications.&lt;/p&gt;
&lt;p&gt;We plan on providing some background on the schemes detailing usecases
and visualizing the results. We also plan on discussing the various
techniques we use to overcome performance bottlenecks
(numpy/cython/etc.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen McQuay</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/surface-subdivision-schemes-for-python.html</guid><category>visualization</category></item><item><title>Visualization and Analysis of Large Scale Datasets with Python</title><link>https://pyvideo.org/europython-2011/visualization-and-analysis-of-large-scale-dataset.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Christine Moran - 23 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will introduce ParaView, an open source application
developed by researchers around the world for parallel visualization and
analysis of large scale datasets, which in can be used to visualize and
analyze terabytes of data in real time. ParaView’s core algorithms are
implemented in C/C++ but all its major functionality can be scripted
from python with ease. I’ll give a short introduction to AstroViz, a
parallel visualization tool for astrophysical simulations implemented as
an opensource plugin to ParaView, which I have been lead developer on
since 2009. The focus of the talk will be on driving ParaView from
within python however, both general out of the box use and customized
extensions.&lt;/p&gt;
&lt;p&gt;I also have access to several parallel supercomputers so if there’s a
huge dataset we as a crowd would like to tackle visualizing during the
course of the week that would be fun project. The end of the talk will
be a short brainstorm of cool applications of analysis and visualization
of large scale datasets.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.paraview.org/"&gt;http://www.paraview.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Moran</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/visualization-and-analysis-of-large-scale-dataset.html</guid><category>analysis</category><category>datasets</category><category>opensource</category><category>parallel</category><category>simulations</category><category>visualization</category></item><item><title>Continuum Data Analytics Stack</title><link>https://pyvideo.org/pycon-de-2013/continuum-data-analytics-stack.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Continuum Analytics bietet mit Anaconda Accelerate eine kommerzielle,
skalierbare und unternehmenstaugliche Python-Distribution. Diese basiert
auf der beliebten Open Source Distribution Anaconda.&lt;/p&gt;
&lt;p&gt;Gegenüber der freien Distribution verfügt Accelerate über Bibliotheken
wie NumbaPro oder IOPro, die eine nachhaltige Beschleunigung von
typischen Data Analytics Aufgaben mit Python erlauben.&lt;/p&gt;
&lt;p&gt;Bokeh, eine Open Source Bibliothek, etabliert einen neuen Standard für
die interaktive, Web-basierte Visualisierung von großen Datenmengen.&lt;/p&gt;
&lt;p&gt;Der Talk illustriert die Leistungsfähigkeit des &amp;quot;Continuum Data
Analytics Stack&amp;quot; an Hand einer Reihe von praxisnahen Beispielen, z.B.
aus dem Finanzumfeld, und gewährt auch einen Einblick in aktuelle sowie
geplante Entwicklungen und Erweiterungen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Yves J. Hilpisch</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/continuum-data-analytics-stack.html</guid><category>data analytics</category><category>financial analytics</category><category>python</category><category>visualization</category></item></channel></rss>