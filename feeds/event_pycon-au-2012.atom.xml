<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-au-2012.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-08-23T00:00:00+00:00</updated><entry><title>Lightning Talks Sunday and Conference Close</title><link href="https://pyvideo.org/pycon-au-2012/lightning-talks-sunday-and-conference-close-0.html" rel="alternate"></link><published>2012-08-23T00:00:00+00:00</published><updated>2012-08-23T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2012-08-23:pycon-au-2012/lightning-talks-sunday-and-conference-close-0.html</id><summary type="html"></summary><category term="lightning talks"></category><category term="education"></category></entry><entry><title>Big data with python</title><link href="https://pyvideo.org/pycon-au-2012/big-data-with-python.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Alex Sharp</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/big-data-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dealing with big data isn't a particularly new problem. There are all
sorts of new solutions, each with their own niche, their own hype. It's
important to remember that python is not &amp;quot;too slow&amp;quot; for big data, and
that with projects such as&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dealing with big data isn't a particularly new problem. There are all
sorts of new solutions, each with their own niche, their own hype. It's
important to remember that python is not &amp;quot;too slow&amp;quot; for big data, and
that with projects such as scipy, numpy, cython and rpy, python is
becoming a better tool then ever for data processing. In this talk we'll
be explaining some of the theory behind big data problems, where python
fits in and some of the more interesting things you can do.&lt;/p&gt;
</summary><category term="bigdata"></category></entry><entry><title>Building a Cloud Service with Python</title><link href="https://pyvideo.org/pycon-au-2012/building-a-cloud-service-with-python.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>John Barham</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/building-a-cloud-service-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Presentation will go in-depth on the architecture of a web application
service built on Amazon Web Services (AWS) cloud infrastructure,
including: - developing a responsive, high-performance web application
in Django - implementing&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentation will go in-depth on the architecture of a web application
service built on Amazon Web Services (AWS) cloud infrastructure,
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;developing a responsive, high-performance web application in Django&lt;/li&gt;
&lt;li&gt;implementing a REST API for automating the web application&lt;/li&gt;
&lt;li&gt;using Python's networking capabilities to monitor and aggregate log
files from multiple remote servers in real time&lt;/li&gt;
&lt;li&gt;automating deployment in Python using fabric&lt;/li&gt;
&lt;li&gt;interacting with AWS using the boto library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a business point of view I will also talk about the opportunities
that modern cloud computing platforms present to developers and how to
best exploit them.&lt;/p&gt;
</summary></entry><entry><title>Django Testing Tips</title><link href="https://pyvideo.org/pycon-au-2012/django-testing-tips.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Simon Meers</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/django-testing-tips.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build
and maintain a comprehensive test suite. Here we will discuss a number
of tips and tricks to reduce the overheads involved.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build
and maintain a comprehensive test suite. Here we will discuss a number
of tips and tricks to reduce the overheads involved and have you writing
reusable tests almost as fast as you can test in the browser itself.&lt;/p&gt;
</summary><category term="django"></category><category term="testing"></category></entry><entry><title>Funcargs and other fun with pytest</title><link href="https://pyvideo.org/pycon-au-2012/funcargs-and-other-fun-with-pytest.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Brianna Laugher</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/funcargs-and-other-fun-with-pytest.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;p&gt;Pytest lives by &amp;quot;convention over configuration&amp;quot; - which is great once
you know what the conventions are. This talk will look at real examples
of pytest in use, emphasising the features that differentiate it from
nose.&lt;/p&gt;
</summary><category term="pytest"></category><category term="testing"></category></entry><entry><title>Keynote: Python for Humans</title><link href="https://pyvideo.org/pycon-au-2012/keynote-python-for-humans.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Kenneth Reitz</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/keynote-python-for-humans.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python's ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We'll go over where these APIs went wrong and learn about strong
and elegant API desig&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We’ll go over where these APIs went wrong and learn about strong
and elegant API design. The high barriers to entry in Python will be
discussed. Potential solutions will be proposed.&lt;/p&gt;
</summary><category term="api"></category></entry><entry><title>Lightning Talks Saturday</title><link href="https://pyvideo.org/pycon-au-2012/lightning-talks-saturday-0.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/lightning-talks-saturday-0.html</id><summary type="html"></summary><category term="lightning talks"></category><category term="education"></category></entry><entry><title>Making Your Application Behave</title><link href="https://pyvideo.org/pycon-au-2012/making-your-application-behave.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Benno Rice</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/making-your-application-behave.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Behave is a tool for behaviour-driven development inspired by the
Cucumber tool for Ruby. It allows developers and stakeholders to agree
on how a particular piece of software should behave using an
English-like Given-When- Then syntax and f&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Behave is a tool for behaviour-driven development inspired by the
Cucumber tool for Ruby. It allows developers and stakeholders to agree
on how a particular piece of software should behave using an
English-like Given-When- Then syntax and for that behaviour for then to
be easily tested in whatever manner is appropriate.&lt;/p&gt;
&lt;p&gt;This presentation will provide an introduction to behaviour-driven
development, behaviour testing in general and the behave tool along with
its advantages over alternatives such as lettuce and freshen.&lt;/p&gt;
</summary><category term="bdd"></category><category term="behave"></category></entry><entry><title>Neatly Twisted</title><link href="https://pyvideo.org/pycon-au-2012/neatly-twisted.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Josh Bartlett</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/neatly-twisted.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In many Python circles, Twisted is the recommended framework for all
networking and multitasking applications. Twisted provides a powerful,
extensible event-driven framework with built-in support for many network
protocols.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In many Python circles, Twisted is the recommended framework for all
networking and multitasking applications. Twisted provides a powerful,
extensible event-driven framework with built-in support for many network
protocols. But without due care, Twisted’s event-driven features can
result in code that’s a nightmare to read and maintain. In this
presentation, I will review the basics of Twisted, and show some of the
features which make Twisted such a popular framework. I’ll share my
experiences debugging and maintaining mission-critical Twisted
applications, discuss some of the pitfalls to avoid when coding with
Twisted, and present tips and tricks for debugging Twisted code and
writing Twisted code that’s a pleasure to read and maintain.&lt;/p&gt;
</summary><category term="twisted"></category></entry><entry><title>No! Bad Pony!</title><link href="https://pyvideo.org/pycon-au-2012/no-bad-pony.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/no-bad-pony.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Django community is not short of ideas that could be added to the
core repository. Some of these ideas are great, and are just waiting for
the right implementation or the attention of a core developer. Other
ideas are just not going to happen. However, it's not always obvious why
an idea will be rejected. This talk will attempt explain the reasoning
behind a couple of specific decisions. More broadly, this talk will aims
to provide general guidance on the decision making process of the Django
core. It will also address how you can get started contributing to
Django.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Node Schmode: Pythonic Real-Time Web</title><link href="https://pyvideo.org/pycon-au-2012/node-schmode-pythonic-real-time-web.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/node-schmode-pythonic-real-time-web.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using gevent, pyramid and socket-io for a micro framework approach to
creating real-time web apps without the braces. Why is gevent so cool
and how it can let you write fast scalable apps with asynchronous IO
without twisting your mind.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using gevent, pyramid and socket-io for a micro framework approach to
creating real-time web apps without the braces. Why is gevent so cool
and how it can let you write fast scalable apps with asynchronous IO
without twisting your mind.&lt;/p&gt;
</summary><category term="gevent"></category><category term="pyramid"></category><category term="socket-io"></category></entry><entry><title>Path Dependent Development: Why on Earth are you using SQL Alchemy as a JSON validator?</title><link href="https://pyvideo.org/pycon-au-2012/path-dependent-development-why-on-earth-are-you.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/path-dependent-development-why-on-earth-are-you.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The PulpDist project uses SQL Alchemy as part of a custom JSON
validator. This could be seen as an unusual choice, so it's worth
exploring the way this approach came to be adopted. Practicing iterative
development means coping with the tension between &amp;quot;doing the simplest
thing that could possibly work&amp;quot; to meet immediate project requirements
and avoiding &amp;quot;reinventing the wheel&amp;quot;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PulpDist project uses SQL Alchemy as part of a custom JSON
validator. This could be seen as an unusual choice, so it's worth
exploring the way this approach came to be adopted.&lt;/p&gt;
&lt;p&gt;Practicing iterative development means coping with the inevitable
tension between &amp;quot;doing the simplest thing that could possibly work&amp;quot; to
meet immediate project requirements and avoiding &amp;quot;reinventing the wheel&amp;quot;
in order to take full advantage of existing software components.&lt;/p&gt;
&lt;p&gt;This means that iterative software designs are inevitably path
dependent: decisions made in early iterations can shape later aspects of
a project in unexpected ways. These early influences may even predate
the project itself, instead being a consequence of wider organisational
policies and the personal preferences and abilities of key developers.&lt;/p&gt;
&lt;p&gt;Understanding some of these factors can help with understanding why:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;good enough&amp;quot; is usually a better target than &amp;quot;perfect&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Not Invented Here&amp;quot; syndrome is not always the villain it is
frequently made out to be&lt;/li&gt;
&lt;li&gt;the need to extensively rewrite existing components is not always a
sign of past failure&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pulpdist"></category></entry><entry><title>PyPy - is it ready for production?</title><link href="https://pyvideo.org/pycon-au-2012/pypy-is-it-ready-for-production.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Mark Rees</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/pypy-is-it-ready-for-production.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I have followed the development of PyPy since 2004 and played with
various releases to see what the PyPy team had achieved. It wasn't until
the release of PyPy 1.18 that I actually ran some existing production
python code under it. The perc&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I have followed the development of PyPy since 2004 and played with
various releases to see what the PyPy team had achieved. It wasn't until
the release of PyPy 1.18 that I actually ran some existing production
python code under it. The perceived performance improvement of this
exercise inspired me to implement a more scientific method for comparing
the runtime performance of CPython and PyPy running various Python
production code sets that we use in the company I work for. This
presentation will discuss the results of this comparison and the
positives and negatives with utilising PyPy in production.&lt;/p&gt;
</summary><category term="pypy"></category></entry><entry><title>Python Lifesavers</title><link href="https://pyvideo.org/pycon-au-2012/python-lifesavers.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Duncan Macneil</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/python-lifesavers.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Every now and then you'll find yourself with one of life's tricky
situations. OK, so maybe not a literally life-threatening one. But when
you remember Python is a batteries-included, script-like programming
language found pretty much e&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every now and then you'll find yourself with one of life's tricky
situations. OK, so maybe not a literally life-threatening one. But when
you remember Python is a batteries-included, script-like programming
language found pretty much everywhere, it really will feel like a
lifesaver. A one-line web server? A super-simple GUI test automation
suite? Come and hear about all those handy tips and tricks that will get
you out of a bind. One day, somewhere you'll be glad you did!&lt;/p&gt;
</summary></entry><entry><title>Python Powered Computational Geometry</title><link href="https://pyvideo.org/pycon-au-2012/python-powered-computational-geometry.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Andrew Walker</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/python-powered-computational-geometry.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of
science, engineering and mathematics including: Computation Fluid
Dynamics (CFD), Finite Element Model&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computational Geometry is the study of geometry with the support of
appropriate algorithms, and influences a broad range of fields of
science, engineering and mathematics including: Computation Fluid
Dynamics (CFD), Finite Element Modelling (FEM), Computer Aided Design /
Modelling (CAD/CAM), Robotics, Computer Graphics and Collision
Detection.&lt;/p&gt;
&lt;p&gt;While it is possible to quickly implement naive versions of
computational geometry algorithms in any language, such algorithms can
be expensive and time consuming to write, debug and maintain. The advent
of a number of tools, including new bindings for the Computational
Geometry Algorithms Library (CGAL) and the ipython notebook make Python
an ideal tool for experimentation with fast and numerically robust
algorithms.&lt;/p&gt;
&lt;p&gt;The presentation will include demonstrations of a number of common two-
and three-dimensional computational geometry algorithms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Triangulations (and Voronoi diagrams)&lt;/li&gt;
&lt;li&gt;Mesh refinement&lt;/li&gt;
&lt;li&gt;Intersection testing&lt;/li&gt;
&lt;li&gt;Alpha shapes&lt;/li&gt;
&lt;li&gt;Convex hulls&lt;/li&gt;
&lt;li&gt;Constructive Solid Geometry&lt;/li&gt;
&lt;li&gt;Minkowski Sums&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="geometry"></category></entry><entry><title>RPy: Powerful Analytics within python</title><link href="https://pyvideo.org/pycon-au-2012/rpy-powerful-analytics-within-python.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Rhydwyn Mcguire</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/rpy-powerful-analytics-within-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;R is an incredibly powerful statistical programming language. It is the
choice for powerful set and forgets analytics. However it is a
specialist language without strong functionality in other areas. In
areas where significant preproc&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;R is an incredibly powerful statistical programming language. It is the
choice for powerful set and forgets analytics. However it is a
specialist language without strong functionality in other areas. In
areas where significant preprocessing of data, or where the statistics
produced are part of a larger system such as looking for patterns in the
load behaviour of a web server, a match with a strong general language
is an obvious solution. Because of its wide use and potential
integration with R, python is that language.&lt;/p&gt;
&lt;p&gt;This talk will be targeted at python programmers who wish to integrate
statistical and data analysis into their work, providing options for
real time data monitoring and analysis. This talk is accessible for
anyone with a basic understanding of python.&lt;/p&gt;
</summary><category term="rpy"></category></entry><entry><title>Techniques for improving Python performance</title><link href="https://pyvideo.org/pycon-au-2012/techniques-for-improving-python-performance.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Andrew Rowe</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/techniques-for-improving-python-performance.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Andrew Rowe will detail and demonstrate a number of proven techniques
for improving the performance of large Python programs.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Using multiprocessing.&lt;/li&gt;
&lt;li&gt;Using custom extensions.&lt;/li&gt;
&lt;li&gt;Refactoring code.&lt;/li&gt;
&lt;li&gt;using comprehensions.&lt;/li&gt;
&lt;li&gt;Dictionaries v. Lists.&lt;/li&gt;
&lt;li&gt;Range v. xrange.&lt;/li&gt;
&lt;li&gt;Profiling.&lt;/li&gt;
&lt;li&gt;Detecting choke points.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="optimizing"></category></entry><entry><title>Towards continuous deployment with Django</title><link href="https://pyvideo.org/pycon-au-2012/towards-continuous-deployment-with-django.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Roger Barnes</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/towards-continuous-deployment-with-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's no secret that python is fantastic when it comes to rapid
prototyping and development. This talk covers continuous deployment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's no secret that python is fantastic when it comes to rapid
prototyping and development. When it comes to deploying a web
application, the road to glory isn't as well paved and navigating the
array of techniques and tools can be daunting.&lt;/p&gt;
&lt;p&gt;This talk will address the advantages of continuous deployment, the
success factors involved and the tools available, mainly focusing on
experiences with Django web development.&lt;/p&gt;
</summary><category term="deployment"></category><category term="django"></category></entry><entry><title>Triage: real-world error logging for web applications</title><link href="https://pyvideo.org/pycon-au-2012/triage-real-world-error-logging-for-web-applicat.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Lars Yencken</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/triage-real-world-error-logging-for-web-applicat.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Modern web applications can quickly develop many moving parts. As they
grow in traffic, infrastructure, services and features, keeping track of
errors and communicating about them becomes more challenging.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we present Triage, a homegrown tool at 99designs for
aggregating and managing errors in a live production system. Although
written in Python, Triage is designed to ingest errors in a language
agnostic way. We describe our path from simpler logging techniques which
we outgrew, the new workflows around error management which it allows,
and some challenges we faced along the way.&lt;/p&gt;
</summary><category term="error-logging"></category><category term="triage"></category></entry><entry><title>Virtual robotic car racing with Python and TORCS</title><link href="https://pyvideo.org/pycon-au-2012/virtual-robotic-car-racing-with-python-and-torcs.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/virtual-robotic-car-racing-with-python-and-torcs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a
covering of the basic AI algorithms required to make the wheels go
round. AI, math, Python an&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A highly visual (racing videos) presentation showing the TORCS racing
simulator, a Python implementation of a virtual robot car, and a
covering of the basic AI algorithms required to make the wheels go
round. AI, math, Python and eye candy. What could possibly go wrong...
what indeed.&lt;/p&gt;
</summary><category term="torcs"></category></entry><entry><title>Web Server Bottlenecks And Performance Tuning</title><link href="https://pyvideo.org/pycon-au-2012/web-server-bottlenecks-and-performance-tuning-0.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Graham Dumpleton</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/web-server-bottlenecks-and-performance-tuning-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A benchmark of a hello world application is often what developers use to
make the all important decision of what web hosting infrastructure they
use. Worse is that in many cases this is the only sort of performance
testing or monitor&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A benchmark of a hello world application is often what developers use to
make the all important decision of what web hosting infrastructure they
use. Worse is that in many cases this is the only sort of performance
testing or monitoring they will ever do. When it comes to their
production applications they are usually flying blind and have no idea
of how it is performing and what they need to do to tune their web
application stack.&lt;/p&gt;
&lt;p&gt;This talk will provide an overview as to where in your overall request
handling pipeline the main overheads are going to arise. It will then
zoom in and discuss different limiting factors or bottlenecks which can
arise within your WSGI server stack and system that can directly affect
the performance of your Python web application.&lt;/p&gt;
&lt;p&gt;Such factors that will be discussed will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use of threads vs processes.&lt;/li&gt;
&lt;li&gt;Number of processors available.&lt;/li&gt;
&lt;li&gt;Python global interpreter lock (GIL)&lt;/li&gt;
&lt;li&gt;Amount of memory available.&lt;/li&gt;
&lt;li&gt;Slow HTTP browsers/clients.&lt;/li&gt;
&lt;li&gt;Browser keep alive connections.&lt;/li&gt;
&lt;li&gt;Need to handle static assets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From this will be provided some general guidelines of what is a good
configuration/architecture to use for different types of Python web
applications.&lt;/p&gt;
&lt;p&gt;The importance of continuous production monitoring will also be covered,
ensuring that you know when the performance of your system is dropping
off due to changing traffic patterns as well as code changes you have
made in your actual web application.&lt;/p&gt;
</summary><category term="bottlenecks"></category><category term="performance"></category></entry><entry><title>Debugging Live Python Web Applications</title><link href="https://pyvideo.org/pycon-au-2012/debugging-live-python-web-applications-0.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Graham Dumpleton</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/debugging-live-python-web-applications-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of
problem are of limited help in working out what happened, except through
inference or by way of&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monitoring tools will record the result of what happened to your web
application or system when a problem arises, but for some classes of
problem are of limited help in working out what happened, except through
inference or by way of anecdotal evidence.&lt;/p&gt;
&lt;p&gt;This talk will describe the limitations on what monitoring tools can
help you with. It will then move onto look at a range of debugging tools
and techniques which can be applied to web applications, but also
separate them into what can and cannot be used on live production web
applications.&lt;/p&gt;
&lt;p&gt;Topics which will be discussed will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Browser viewable error pages.&lt;/li&gt;
&lt;li&gt;Browser based debuggers.&lt;/li&gt;
&lt;li&gt;Python interactive debuggers.&lt;/li&gt;
&lt;li&gt;Post-mortem exception analysis.&lt;/li&gt;
&lt;li&gt;Methods for dumping Python stack traces&lt;/li&gt;
&lt;li&gt;Methods for dumping C stack traces.&lt;/li&gt;
&lt;li&gt;Methods for analysing thread utilisation.&lt;/li&gt;
&lt;li&gt;Interactive process introspection tools.&lt;/li&gt;
&lt;li&gt;Error reporting and logging services.&lt;/li&gt;
&lt;li&gt;Performance monitoring services.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Human as a Second Language: Succeeding with the Natural Language Toolkit</title><link href="https://pyvideo.org/pycon-au-2012/human-as-a-second-language-succeeding-with-the-n.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Elyse Maria Glina</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/human-as-a-second-language-succeeding-with-the-n.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Natural Language Toolkit (NLTK) suite offers powerful tools for
natural language processing and analysis. Like many other code
libraries, it enables programmers to achieve results when working with
data they may not be an expert&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Natural Language Toolkit (NLTK) suite offers powerful tools for
natural language processing and analysis. Like many other code
libraries, it enables programmers to achieve results when working with
data they may not be an expert in the handling of - in this case, human
language. The NLTK is particularly valuable as human language skills are
in general something programmers can get along without, and therefore
they are likely to be ill- equipped with the tools to most effectively
work with language data. However, while NLTK provides programmers with a
way to work with all the relevant parts of language without needing to
rely on their own grammar skills, there are many concepts in the field
of natural language processing that require basic comprehension of
natural language operation, which may make knowing where to start
working with the NLTK difficult for the average programmer.&lt;/p&gt;
&lt;p&gt;This presentation will demonstrate some of the NLTK's powerful and
impressive features, while covering the concepts that will enable any
programmer to work cool tricks on natural language. The application of
the NLTK to a very basic artificial intelligence will be shown.&lt;/p&gt;
</summary><category term="nltk"></category></entry><entry><title>Keynote: What to build. How to build it. Python can help!</title><link href="https://pyvideo.org/pycon-au-2012/keynote-what-to-build-how-to-build-it-python.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/keynote-what-to-build-how-to-build-it-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There's been a lot of buzz about &amp;quot;Lean Startups,&amp;quot; &amp;quot;Customer
Development,&amp;quot; &amp;quot;Business Model Generation&amp;quot; and related topics lately. And
there is a real transformation in the way we design and build products
at work behind all that buzz.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There’s been a lot of buzz about “Lean Startups,” “Customer
Development,” “Business Model Generation” and related topics lately. And
there is a real transformation in the way we design and build products
at work behind all that buzz.&lt;/p&gt;
&lt;p&gt;But the fundamental principle behind all of them is applying scientific
and experimental methodologies to product design decision making. The
tools of Lean Startups are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data collection and analysis&lt;/li&gt;
&lt;li&gt;Writing hypothesis and models&lt;/li&gt;
&lt;li&gt;Creating experiments to test those models&lt;/li&gt;
&lt;li&gt;Learning from those experiments, and refining/redesigning the model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately Python is a great tool for those looking to apply data
science to product design.&lt;/p&gt;
&lt;p&gt;Python can help with everything from statistical analysis, to rapid
development of viable products, to the creation of complex models that
can be used to tweak the levers of growth, and it’s easy to combine
these with off the shelf tools that help you analyze traffic patterns
and figure out what product changes actually make a difference.&lt;/p&gt;
</summary></entry><entry><title>Python Dark Corners Revisited</title><link href="https://pyvideo.org/pycon-au-2012/python-dark-corners-revisited.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Peter Lovett</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/python-dark-corners-revisited.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python can be deceptive - it looks so simple.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python can be deceptive - it looks so simple. Surely it will take only 5
to 10 minutes to learn.&lt;/p&gt;
&lt;p&gt;Self taught programmers often miss important fundamentals in Python -
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Everything is an Object. Yes everything. Integers, 'real' objects,
functions, classes. Ooooh template metaprogramming.&lt;/li&gt;
&lt;li&gt;It's only a name. Whoops. True, False, no longer None.&lt;/li&gt;
&lt;li&gt;'Objects can change their type'. Not.&lt;/li&gt;
&lt;li&gt;How the heck to a actually make a copy&lt;/li&gt;
&lt;li&gt;Which parts of tuples are constant?&lt;/li&gt;
&lt;li&gt;Deep and Shallow - weren't not talking philosophy here&lt;/li&gt;
&lt;li&gt;Accidental name creation - there's no easy solution&lt;/li&gt;
&lt;li&gt;Argument passing, Mutable arguments, default arguments, Mutable
default arguments&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python Web Templating Battle</title><link href="https://pyvideo.org/pycon-au-2012/python-web-templating-battle.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Ivan Teoh</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/python-web-templating-battle.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Head to head - popular templating engines using in the Python world will
be compared and contrasted. Increasingly, frameworks allow many
different choices in templating engines. In this talk I’ll discuss the
different approaches, demo and pros and cons to help you decide if there
is a better templating engine for you.&lt;/p&gt;
</summary></entry><entry><title>The Lazy Dev's Guide to Testing Your Web API</title><link href="https://pyvideo.org/pycon-au-2012/the-lazy-devs-guide-to-testing-your-web-api.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Ryan Kelly</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/the-lazy-devs-guide-to-testing-your-web-api.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Do you enjoy writing test cases for your web application? If so then
this may not be the talk for you. I'm going to show you how to make a
single test suite perform triple testing duty, so you can get on with
writing the fun stuff.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you enjoy writing test cases for your web application? If so then
this may not be the talk for you. I'm going to show you how to make a
single test suite perform triple testing duty, so you can get on with
writing the fun stuff.&lt;/p&gt;
&lt;p&gt;First, I'll show you how to use WebTest to construct a simple functional
testsuite for your application. By running in-process against a WSGI
callable, the tests can be fast and light enough to form part of your
regularly-executed suite.&lt;/p&gt;
&lt;p&gt;Second, we'll use WSGIProxy to turn this into a deployment/acceptance
test script that you can point at a real live server to verify its
behaviour. Run this after every deployment to make sure you haven't
broken something in the wild.&lt;/p&gt;
&lt;p&gt;Finally, we'll connect the suite to FunkLoad and pummel the server with
a distributed barrage of tests, to see how it copes under pressure.&lt;/p&gt;
</summary><category term="WebTest"></category></entry><entry><title>The web beyond usernames and passwords</title><link href="https://pyvideo.org/pycon-au-2012/the-web-beyond-usernames-and-passwords.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Francois Marier</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/the-web-beyond-usernames-and-passwords.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Persona is a new cross-browser login and identity system for the web
that is pragmatic, federated, and serves the user.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Persona is a new cross-browser login and identity system for the web
that is pragmatic, federated, and serves the user.&lt;/p&gt;
&lt;p&gt;Unlike other popular solutions, it puts a strong emphasis on privacy
protection and makes your browser the trusted intermediary. Developed by
Mozilla, it is based on the simple idea of users demonstrating ownership
of their email address (with a generous serving of crypto magic under
the hood).&lt;/p&gt;
&lt;p&gt;This talk will give a high-level overview of the system and then show
how simple it is to add support for it in a Python webapp. If you want
to make it easy for users to log into your site but don't want the risks
and hassle of storing passwords, or if you cannot quite get your head
around complicated authentication systems, then this talk is for you!&lt;/p&gt;
</summary></entry><entry><title>Visualising architecture</title><link href="https://pyvideo.org/pycon-au-2012/visualising-architecture.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/visualising-architecture.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Architecture. It's an oxymoron all by itself, and using Python is no
silver bullet to the perennial problem of code rot and design
complexity. How does complexity bite us in practise? What tools exist to
simplify and explain arc&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architecture. It's an oxymoron all by itself, and using Python is no
silver bullet to the perennial problem of code rot and design
complexity. How does complexity bite us in practise? What tools exist to
simplify and explain architecture? Is anybody doing this right? This
talk will cover some tools that exist for visualising Python codebases,
examining architectures and how to deal with things in practise.&lt;/p&gt;
</summary></entry><entry><title>What's New in Python for Science and Engineering</title><link href="https://pyvideo.org/pycon-au-2012/whats-new-in-python-for-science-and-engineering.html" rel="alternate"></link><published>2012-08-21T00:00:00+00:00</published><updated>2012-08-21T00:00:00+00:00</updated><author><name>Edward Schofield</name></author><id>tag:pyvideo.org,2012-08-21:pycon-au-2012/whats-new-in-python-for-science-and-engineering.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a tutorial about using Python for scientific and engineering
purposes, focusing on the latest and best tools available in 2012. It
will walk you through exploring a variety of interesting domains and
problems using the latest&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a presentation about the latest and most exciting tools in
Python for scientific and engineering applications in 2012. It will walk
you through what's now possible with tools like the IPython Notebook,
the Pandas toolkit for data analysis, and IPython integration with
SymPy, R, and Cython. It will then give you an update on the status of
Python 3 ports of major packages. It will show why Python is an
outstanding tool for science and engineering work, and getting better.&lt;/p&gt;
</summary><category term="science"></category></entry></feed>