<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_gleb-pushkov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-04-21T00:00:00+00:00</updated><entry><title>How (and why!) to build a Django based project with SQLAlchemy Core</title><link href="https://pyvideo.org/djangocon-europe-2019/how-and-why-to-build-a-django-based-project-with-sqlalchemy-core.html" rel="alternate"></link><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><author><name>Gleb Pushkov</name></author><id>tag:pyvideo.org,2019-04-21:djangocon-europe-2019/how-and-why-to-build-a-django-based-project-with-sqlalchemy-core.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I believe that Django ORM can fit almost 95% of the projects, however, it doesn’t perform well for some tasks. You can switch to raw SQL, but again: if you need an additional level of abstraction to build a flexible and better-maintained product, it won’t be enough. Here is when SQLAlchemy Core comes to fill the gap.&lt;/p&gt;
</summary></entry></feed>