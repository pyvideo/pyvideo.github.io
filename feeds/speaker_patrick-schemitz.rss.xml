<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 26 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Suggestions from Python and Solr</title><link>https://pyvideo.org/pycon-de-2018/suggestions-from-python-and-solr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a user types a query into the search box of our price comparison
website, we try to figure out what they search, and provide suggestions
as they type along. What product, what brand, from which categories?
Solr provides a SuggestComponent that is a good start, but in a lot of
situations we need fallback strategies: what should we show to a user
searching for just a brand name? Or for a singular offer we can't
actually show them? What alternatives can we dig up? And behind all this
backfill logic lurks that dreaded question: what amount of irrelevant
garbage is worse than the horror vacui of an empty result set?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Oberl√§nder</dc:creator><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-26:pycon-de-2018/suggestions-from-python-and-solr.html</guid><category>Algorithms</category></item><item><title>From Java to Python: Migrating Search Functionality at billiger.de</title><link>https://pyvideo.org/pycon-de-2017/from-java-to-python-migrating-search-functionality-at-billigerde.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Patrick Schemitz&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Patrick is a Senior Scientist at solute GmbH. An avid Pythonista since 2003, his main responsibility is the billiger.de search functionality, which he (co-) wrote using first Lucene, later Solr and now SolrCloud. Besides that, he wrote the SVM-based offer categorization at billiger.de and has a keen interest in machine learning. Patrick holds a Ph.D. in particle physics from Karlsruhe university.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;billiger.de is a German price comparison site. Search is handled by a heavily customized Solr setup. When switching to SolrCloud earlier this year, instead of porting our custom SolrComponents to SolrCloud, we ended up re-implementing them in a Python service layer. Here we show how, and why.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The search on our price comparison site billiger.de is implemented using Solr and half a dozen custom SolrComponents. When switching from Solr to SolrCloud earlier this year, we had to go over all our custom components in order to make them cluster-ready. What we ended up doing instead was re-implementing the custom functionality in a Python service layer that in turn uses stock SolrCloud. This talk describes our journey, shows some code and advocates hiding implementation details like Solr v. SolrCloud behind a service layer. Ported functionality includes boosting more successful documents, identifying brands and categories in queries, &amp;quot;minimum match&amp;quot; search and facet ranking and alternatives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Schemitz</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/from-java-to-python-migrating-search-functionality-at-billigerde.html</guid><category>solrcloud</category><category>solr</category><category>search</category><category>python</category></item></channel></rss>