<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Michael Greminger</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michael-greminger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-07-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Build and Distribute Data Science Apps with Pyodide</title><link href="https://pyvideo.org/scipy-2021/build-and-distribute-data-science-apps-with-pyodide.html" rel="alternate"></link><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><author><name>Michael Greminger</name></author><id>tag:pyvideo.org,2021-07-12:/scipy-2021/build-and-distribute-data-science-apps-with-pyodide.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyodide is a project that compiles the CPython Python interpreter and much of the Python scientific stack (including NumPy, Pandas, and parts of SciPy) to WebAssembly. Pyodide runs in all modern web browsers at near native speeds and provides a means to allow users to run Python code without …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyodide is a project that compiles the CPython Python interpreter and much of the Python scientific stack (including NumPy, Pandas, and parts of SciPy) to WebAssembly. Pyodide runs in all modern web browsers at near native speeds and provides a means to allow users to run Python code without having to install anything. This Talk will go over a case study of porting a design optimization tool that I use in my university class to Pyodide. I’ll cover some of the implementation details and how the JavaScript user interface code interfaces with the data science code written in Python.&lt;/p&gt;
</content><category term="SciPy 2021"></category></entry></feed>