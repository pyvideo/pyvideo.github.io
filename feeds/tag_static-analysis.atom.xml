<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - static analysis</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_static-analysis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Static analysis of Python</title><link href="https://pyvideo.org/europython-2013/static-analysis-of-python.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/static-analysis-of-python.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="text-editors"></category><category term="static-analysis"></category><category term="productivity"></category></entry><entry><title>From Python script to Open Source Project</title><link href="https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/from-python-script-to-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Static Analysis"></category><category term="Tooling"></category></entry><entry><title>Do we have a diversity problem in Python community?</title><link href="https://pyvideo.org/europython-2019/do-we-have-a-diversity-problem-in-python-community.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Cheuk Ho</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/do-we-have-a-diversity-problem-in-python-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The diversity statement quoted as follows: “The Python Software
Foundation and the global Python community welcome and encourage
participation by everyone. Our community is based on mutual respect,
tolerance, and encouragement, and we are working to help each other live
up to these principles. We want our community to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The diversity statement quoted as follows: “The Python Software
Foundation and the global Python community welcome and encourage
participation by everyone. Our community is based on mutual respect,
tolerance, and encouragement, and we are working to help each other live
up to these principles. We want our community to be more diverse:
whoever you are, and whatever your background, we welcome you.”&lt;/p&gt;
&lt;p&gt;Diversity, big deal! As an active members and event organisers (and also
on the minority side of the gender) in the Python community, we have
alway been concern by the question of: Do we truly have a problem in
diversity? Especially, gender diversity. We would like to find out the
truth, by data science, and see if we can find a clue why and how we can
fix it.&lt;/p&gt;
&lt;p&gt;First, we will show the research others did regarding the representation
of women in the R and Python communities [1]. Then, we will show the
research that we did based on our experience and statistic. Including
static analysis of the speakers diversity (regarding gender) at major
PyCon and PyData conferences. Finally, as we all care about diversity
and want improvements, we would like to find out the reason and what we
can do about it. We would propose what we, the minorities and allies,
could do against this seemingly unbalance situation and make the
community better.&lt;/p&gt;
&lt;p&gt;This talk is for all that who cares about diversity in our community.&lt;/p&gt;
&lt;p&gt;[1]
&lt;a class="reference external" href="https://reshamas.github.io/why-women-are-flourishing-in-r-community-but"&gt;https://reshamas.github.io/why-women-are-flourishing-in-r-community-but&lt;/a&gt;-
lagging-in-python/&lt;/p&gt;
&lt;p&gt;Update: slides at
&lt;a class="reference external" href="https://slides.com/cheukting_ho/do-we-have-a-diversity"&gt;https://slides.com/cheukting_ho/do-we-have-a-diversity&lt;/a&gt;-
problem-in-python-community&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Community"></category><category term="Conferences and Meet-Ups"></category><category term="Data Science"></category><category term="Static Analysis"></category></entry><entry><title>Static typing: beyond the basics of def foo(x: int) -&gt; str:</title><link href="https://pyvideo.org/europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been warming up to static typing for a few
years now. You may have seen talks that did a great job of introducing
the basic concepts, mypy, and high-level strategies to cover existing
code bases.&lt;/p&gt;
&lt;p&gt;We need to go deeper.&lt;/p&gt;
&lt;p&gt;Let’s talk about the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been warming up to static typing for a few
years now. You may have seen talks that did a great job of introducing
the basic concepts, mypy, and high-level strategies to cover existing
code bases.&lt;/p&gt;
&lt;p&gt;We need to go deeper.&lt;/p&gt;
&lt;p&gt;Let’s talk about the challenges you inevitably encounter when you try to
type- check a large code base. One full of many moving parts, complex
architectures, metaprogramming tricks, and interfaces with a dozen other
packages.&lt;/p&gt;
&lt;p&gt;Static type checking is very powerful – when you use it to maximum
advantage and explain your code to the typechecker accurately. We will
cover a few tools at your disposal: generics, signature overloads,
protocols, custom mypy plug- ins, and more.&lt;/p&gt;
&lt;p&gt;There is more than just tools, though. Behind them all are universal
concepts valid in any language. I hope to convince you that thinking in
terms of the type system helps you write better code…&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry><entry><title>So, You Want to Build an Anti-Virus Engine?</title><link href="https://pyvideo.org/europython-2020/so-you-want-to-build-an-anti-virus-engine.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>JunWei Song</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/so-you-want-to-build-an-anti-virus-engine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/quark-engine/quark-engine"&gt;https://github.com/quark-engine/quark-engine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android malware analysis engine is not a new story. Every antivirus company has their own secrets to build it. With python and curiosity, we develop a malware scoring system from the perspective of Taiwan Criminal Law in an easy but solid way.&lt;/p&gt;
&lt;p&gt;We have …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/quark-engine/quark-engine"&gt;https://github.com/quark-engine/quark-engine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Android malware analysis engine is not a new story. Every antivirus company has their own secrets to build it. With python and curiosity, we develop a malware scoring system from the perspective of Taiwan Criminal Law in an easy but solid way.&lt;/p&gt;
&lt;p&gt;We have an order theory of criminal which explains stages of committing a crime. For example, crime of murder consists of five stages, they are determined, conspiracy, preparation, start and practice. The latter the stage the more we’re sure that the crime is practiced.&lt;/p&gt;
&lt;p&gt;According to the above principle, we developed our order theory of android malware. We develop five stages to see if the malicious activity is being practiced. They are&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Permission requested.&lt;/li&gt;
&lt;li&gt;Native API call.&lt;/li&gt;
&lt;li&gt;Certain combination of native API.&lt;/li&gt;
&lt;li&gt;Calling sequence of native API.&lt;/li&gt;
&lt;li&gt;APIs that handle the same register.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We not only define malicious activities and their stages but also develop weights and thresholds for calculating the threat level of a malware.&lt;/p&gt;
&lt;p&gt;Malware evolved with new techniques to gain difficulties for reverse engineering. Obfuscation is one of the most commonly used techniques. In this talk, we present a Dalvik bytecode loader with the order theory of android malware to neglect certain cases of obfuscation.&lt;/p&gt;
&lt;p&gt;Inspired by the design principles of the CPython interpreter, our Dalvik bytecode loader consists of functionalities such as 1. Finding cross-reference and calling sequence of the native API. 2. Tracing the bytecode register. The combination of these functionalities (yes, the order theory) not only can neglect obfuscation but also match perfectly to the design of our malware scoring system.&lt;/p&gt;
&lt;p&gt;Further, we will also show a case study of Android malware and demonstrate how the obfuscation technique is useless to our engine. Last but not least, we will be open-sourcing everything (Malware Scoring System, Dalvik Bytecode Loader) during our presentation.&lt;/p&gt;
&lt;p&gt;Audience
1. Who is this talk for?
- Anyone who's interested in cyber security or anyone that wants to know how to build an anti-virus engine with Python.&lt;/p&gt;
&lt;p&gt;2. What background knowledge or experience do you expect the audience to have?
- A little of Android application development and malware analysis.&lt;/p&gt;
&lt;p&gt;3. What do you expect the audience to learn or do after watching the talk?
- The Dalvik bytecode loader is written as a python module, the audiences can use this module to boost up their malware analysis.
- The malware scoring system can be applied not only to Android malware but also can be applied for PE files or ELF files in other OS. The audience can copy our ideas to extend their work.
- Everything’s open-sourced.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;1. Introduction of Malware Scoring System.
First, we will detail how we decode Criminal Law to simple principles. For example, principles to define crime, penalty and the order theory of criminal, etc. And then we will detail how do we develop the order theory of android malware and other developed theories that construct the malware scoring.&lt;/p&gt;
&lt;p&gt;2. Design Logic of the Dalvik Bytecode Loader.
Once the malware scoring system were built, this will discuss the design logic of our Dalvik bytecode loader which includes our obfuscation-neglect module and bytecode register tracing module. We will also detail why the order theory of android malware succeeds at neglecting the obfuscation.&lt;/p&gt;
&lt;p&gt;3. Quark Engine Practice - Case Study of Android Malware
Next, we will practice our engine and case study through an android malware. Moreover, we will also demonstrate our obfuscation-neglect technique against obfuscation malware.&lt;/p&gt;
&lt;p&gt;4. Future works
Here, we will discuss the limitations of our engine. For example, the challenge of our Dalvik bytecode loader. Also, we will share our plans of implementing more detection techniques conquering the escape detection of malware.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Mobile"></category><category term="Open-Source"></category><category term="Security"></category><category term="Static Analysis"></category></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/europython-2020/static-typing-in-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This means that you don’t need to say what a given variable will hold, or whether your function will return a string or an integer (or sometimes one, and sometimes another!). This has historically made Python a very …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This means that you don’t need to say what a given variable will hold, or whether your function will return a string or an integer (or sometimes one, and sometimes another!). This has historically made Python a very flexible and beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll discuss the advantages and disadvantages to a static type system, as well as recent efforts to introduce static typing to Python via optional “type hints” and various tools to aid in adding types to Python code. We’ll see what this means for Python, for Python programmers, and what the future has in store for Python’s type system.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Python 3"></category><category term="Static Analysis"></category><category term="Tooling"></category><category term="Type-Hinting"></category><category term="python"></category></entry><entry><title>Writing Good Python</title><link href="https://pyvideo.org/europython-2020/writing-good-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Prashant Chaubey</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-good-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like other programming languages, it is easy to write cryptic, unmaintainable, and rigid Python code. Moreover, in teams, this problem escalates due to varied coding styles of developers. How to ensure code quality and consistency? My goal with this talk is to educate my audience about some tools and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like other programming languages, it is easy to write cryptic, unmaintainable, and rigid Python code. Moreover, in teams, this problem escalates due to varied coding styles of developers. How to ensure code quality and consistency? My goal with this talk is to educate my audience about some tools and libraries that can help us in making our code more consistent.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Code Analysis"></category><category term="Documentation"></category><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry><entry><title>Don't rely on discipline</title><link href="https://pyvideo.org/pycon-italia-2022/dont-rely-on-discipline.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Nejc Zupan</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/dont-rely-on-discipline.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don’t rely on discipline - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In the programming field we often rely on discipline. We expect from
ourselves and from others that we will not introduce bugs and cause
problems. That we will use the libraries and APIs as they are intended.
That we will not …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don’t rely on discipline - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In the programming field we often rely on discipline. We expect from
ourselves and from others that we will not introduce bugs and cause
problems. That we will use the libraries and APIs as they are intended.
That we will not cut corners.&lt;/p&gt;
&lt;p&gt;Sadly, tales from the industry tell us otherwise. This talk explores why
we should not rely on discipline as a bouncer against bugs, and what to
rely on instead.&lt;/p&gt;
&lt;p&gt;Slides:&lt;/p&gt;
&lt;p&gt;Speaker: Nejc Zupan&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="clean code"></category><category term="static analysis"></category><category term="testing"></category></entry><entry><title>Python Robo-Advisor: Come uso Python per gestire i mie risparmi</title><link href="https://pyvideo.org/pycon-italia-2022/python-robo-advisor-come-uso-python-per-gestire-i-mie-risparmi.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Damiano Dotto</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/python-robo-advisor-come-uso-python-per-gestire-i-mie-risparmi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Robo-Advisor: Come uso Python per gestire i mie risparmi - PyCon
Italia 2022&lt;/p&gt;
&lt;p&gt;Si parla tanto di libertà finanzia e di non lasciare marcire i risparmi
in banca e allora perché non usare le nostre competenze da developer e
le librerie di Python per creare un portafoglio basato su …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Robo-Advisor: Come uso Python per gestire i mie risparmi - PyCon
Italia 2022&lt;/p&gt;
&lt;p&gt;Si parla tanto di libertà finanzia e di non lasciare marcire i risparmi
in banca e allora perché non usare le nostre competenze da developer e
le librerie di Python per creare un portafoglio basato su algoritmi e
dati quantitativi? Oggi giorno si sente sempre di più parlare di libertà
finanziaria, concetto un po’ utopico a mio avviso. Sono un programmatore
“comune” e tendo spesso ad essere pratico più che teorico (so che anche
tu non leggi la documentazione prima di scrivere codice ;) )! Ti
mostrerò in maniera concreta come è possibile sfruttare le nostre
conoscenze di programmazione per poter assumere un “consulente
finanziario fedele” (così mi piace definirlo) che prenda decisioni
obiettive per gestire al meglio i nostri risparmi sui mercati
finanziari. In 30 minuti, vedremo assieme come costruirci un robot
automatico che ci permetta di testare, validare, ottimizzare una
strategia di trading automatico con un esempio REALE, statistico e
basato sui dati.&lt;/p&gt;
&lt;p&gt;Speaker: Damiano Dotto&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="data structures"></category><category term="education"></category><category term="static analysis"></category></entry><entry><title>Vulture eats some Python</title><link href="https://pyvideo.org/pycon-italia-2022/vulture-eats-some-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Rahul Jha</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/vulture-eats-some-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vulture eats some Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Maintaining a high level of code quality is important for any serious
project. One aspect of this is ensuring that all code is actually used.
Finding and removing dead code allows to keep the code base clean and
reduces bugs. This is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vulture eats some Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Maintaining a high level of code quality is important for any serious
project. One aspect of this is ensuring that all code is actually used.
Finding and removing dead code allows to keep the code base clean and
reduces bugs. This is a practical guide on using and configuring Vulture
to do so. This talk is focused on how we can use Vulture to find dead
code. There are many reasons for dead code ending up in a project. The
most common is refactoring, but another is misspellings, which are only
detected at runtime for dynamic languages. Vulture helps you find unused
code in Python programs, and it is useful for cleaning up and finding
errors in large codebases. If you run Vulture on both your library and
test suite, you can find untested code.&lt;/p&gt;
&lt;p&gt;Due to Python’s dynamic nature, static code analyzers like Vulture are
likely to miss some dead code. Also, code that is only called implicitly
(e.g., using getattr) may be reported as unused. Nonetheless, Vulture
can be a very helpful tool for higher code quality.&lt;/p&gt;
&lt;p&gt;The second part of this talk investigates ways to improve Vulture’s
reporting such that the results are actionable and optimized for a low
number of false positives. It also discusses how to automate testing for
dead code with Vulture – there are quite a few options available: 1. Add
a step in your continuous integration testing. 2. As a pre-commit hook.
3. Run a script using Vulture API for more fine-grained control.&lt;/p&gt;
&lt;p&gt;The third and last part of this talk discusses a brief overview of the
internal workings of the tool, along with the scope of future
improvements. After all, the motive of this talk is not only to
encourage developers to prioritize code hygiene but also to inspire them
to come up with ideas to &lt;em&gt;enable&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;Speaker: Rahul Jha&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="clean code"></category><category term="code analysis"></category><category term="static analysis"></category><category term="tooling"></category></entry></feed>