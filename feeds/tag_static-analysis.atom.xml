<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_static-analysis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>From Python script to Open Source Project</title><link href="https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/from-python-script-to-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Static Analysis"></category><category term="Tooling"></category></entry><entry><title>Do we have a diversity problem in Python community?</title><link href="https://pyvideo.org/europython-2019/do-we-have-a-diversity-problem-in-python-community.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Cheuk Ho</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/do-we-have-a-diversity-problem-in-python-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The diversity statement quoted as follows: “The Python Software
Foundation and the global Python community welcome and encourage
participation by everyone. Our community is based on mutual respect,
tolerance, and encouragement, and we are working to help each other live
up to these principles. We want our community to be more diverse:
whoever you are, and whatever your background, we welcome you.”&lt;/p&gt;
&lt;p&gt;Diversity, big deal! As an active members and event organisers (and also
on the minority side of the gender) in the Python community, we have
alway been concern by the question of: Do we truly have a problem in
diversity? Especially, gender diversity. We would like to find out the
truth, by data science, and see if we can find a clue why and how we can
fix it.&lt;/p&gt;
&lt;p&gt;First, we will show the research others did regarding the representation
of women in the R and Python communities [1]. Then, we will show the
research that we did based on our experience and statistic. Including
static analysis of the speakers diversity (regarding gender) at major
PyCon and PyData conferences. Finally, as we all care about diversity
and want improvements, we would like to find out the reason and what we
can do about it. We would propose what we, the minorities and allies,
could do against this seemingly unbalance situation and make the
community better.&lt;/p&gt;
&lt;p&gt;This talk is for all that who cares about diversity in our community.&lt;/p&gt;
&lt;p&gt;[1]
&lt;a class="reference external" href="https://reshamas.github.io/why-women-are-flourishing-in-r-community-but"&gt;https://reshamas.github.io/why-women-are-flourishing-in-r-community-but&lt;/a&gt;-
lagging-in-python/&lt;/p&gt;
&lt;p&gt;Update: slides at
&lt;a class="reference external" href="https://slides.com/cheukting_ho/do-we-have-a-diversity"&gt;https://slides.com/cheukting_ho/do-we-have-a-diversity&lt;/a&gt;-
problem-in-python-community&lt;/p&gt;
</summary><category term="Community"></category><category term="Conferences and Meet-Ups"></category><category term="Data Science"></category><category term="Static Analysis"></category></entry><entry><title>Static typing: beyond the basics of def foo(x: int) -&gt; str:</title><link href="https://pyvideo.org/europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/static-typing-beyond-the-basics-of-def-foox-int-str.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community has been warming up to static typing for a few
years now. You may have seen talks that did a great job of introducing
the basic concepts, mypy, and high-level strategies to cover existing
code bases.&lt;/p&gt;
&lt;p&gt;We need to go deeper.&lt;/p&gt;
&lt;p&gt;Let’s talk about the challenges you inevitably encounter when you try to
type- check a large code base. One full of many moving parts, complex
architectures, metaprogramming tricks, and interfaces with a dozen other
packages.&lt;/p&gt;
&lt;p&gt;Static type checking is very powerful – when you use it to maximum
advantage and explain your code to the typechecker accurately. We will
cover a few tools at your disposal: generics, signature overloads,
protocols, custom mypy plug- ins, and more.&lt;/p&gt;
&lt;p&gt;There is more than just tools, though. Behind them all are universal
concepts valid in any language. I hope to convince you that thinking in
terms of the type system helps you write better code…&lt;/p&gt;
</summary><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry><entry><title>Static analysis of Python</title><link href="https://pyvideo.org/europython-2013/static-analysis-of-python.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/static-analysis-of-python.html</id><summary type="html"></summary><category term="text-editors"></category><category term="static-analysis"></category><category term="productivity"></category></entry></feed>