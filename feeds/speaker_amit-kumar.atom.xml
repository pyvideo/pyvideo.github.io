<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_amit-kumar.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-02-16T00:00:00+00:00</updated><entry><title>Let's Talk About GIL!</title><link href="https://pyvideo.org/swiss-python-summit-2018/lets-talk-about-gil.html" rel="alternate"></link><published>2018-02-16T00:00:00+00:00</published><updated>2018-02-16T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2018-02-16:swiss-python-summit-2018/lets-talk-about-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is lot of misconception in majority of Python Programmers regarding Global Interpreter Lock. Most of them think it's the worst part of Python. I will try to demonstrate how it actually works and how we can leverage multiple CPU cores for multithreading for I/O and CPU Bound tasks. I will also show some comparisons with different implementations of Python and the presence or absence of GIL in those, to answer questions like, why we can't just remove it from CPython and solve all our problems or why Jython performs better in Multithreading for CPU Bound tasks.&lt;/p&gt;
</summary></entry><entry><title>Let's talk about GIL!</title><link href="https://pyvideo.org/pycon-cz-2017/lets-talk-about-gil.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/lets-talk-about-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will be talking about Global-Interpreter-Lock (GIL) in Python. It's
a mutex that prevents multiple native threads from running in
parallel. In essence, this says that a python program cannot do more
than one thing at once via threading. There is a lot of misconception
in a lot of Python Programmers regarding Global Interpreter Lock.
Most of them think its the worst part of Python.&lt;/p&gt;
&lt;p&gt;I will try to demonstrate how it actually works and how we can
leverage multiple CPU cores for multithreading for I/O and CPU Bound
task using C-Extensions. I will also show some comparisons with
different implementations of Python and the presence or absence of
GIL in those, to answer questions like, why we can't just remove it
from CPython and solve all our problems or why Jython performs better
in Multithreading for CPU Bound task.&lt;/p&gt;
</summary></entry><entry><title>Python 3 dot 6 by Amit Kumar 4:46</title><link href="https://pyvideo.org/pycon-india-2016/python-3-dot-6-by-amit-kumar-446.html" rel="alternate"></link><published>2016-09-23T00:00:00+00:00</published><updated>2016-09-23T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2016-09-23:pycon-india-2016/python-3-dot-6-by-amit-kumar-446.html</id><summary type="html"></summary></entry><entry><title>Demystifying Python Method Resolution Order</title><link href="https://pyvideo.org/pycon-apac-2016/demystifying-python-method-resolution-order.html" rel="alternate"></link><published>2016-08-25T00:00:00+00:00</published><updated>2016-08-25T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2016-08-25:pycon-apac-2016/demystifying-python-method-resolution-order.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: Amit Kumar
슬라이드: &lt;a class="reference external" href="https://slides.com/aktech/python-mro"&gt;https://slides.com/aktech/python-mro&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introducing MetaClasses</title><link href="https://pyvideo.org/pycon-uk-2016/introducing-metaclasses.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/introducing-metaclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is based on the metaclasses in Python. The secret sauce which create classes.&lt;/p&gt;
</summary></entry><entry><title>Symbolic Computation with Python using SymPy (Beginner)</title><link href="https://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html" rel="alternate"></link><published>2016-07-11T00:00:00+00:00</published><updated>2016-07-11T00:00:00+00:00</updated><author><name>Ondřej Čertík</name></author><id>tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</summary><category term="SciPy 2016"></category><category term="tutorial"></category><category term="SymPy"></category></entry></feed>