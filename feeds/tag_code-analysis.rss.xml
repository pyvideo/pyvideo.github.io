<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Code quality in Python</title><link>https://pyvideo.org/europython-2019/code-quality-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Four years ago I talked about code quality during EuroPython in
Bilbao. A lot of things changed from that time. Firstly, most tools I
presented were still developed and gained new features, but also new
ones appeared I wanted to discuss with you. Secondly, Python changed,
Python 3 has type hints on board and there is a new tool dedicated to
checking the types. Thirdly - I changed. I'm more distanced form my
zealous approach from four years ago. I got real and reasonable.
That's why I wanted to talk about code quality tools in Python again.&lt;/div&gt;
&lt;div class="line"&gt;I'll talk about all the software that can make code review a bit
simpler by pointing out possible errors, duplicates or unused code.
I'll talk again about formatters and how can they be used in
modern-time projects. And I'll talk about hobgoblins, if you know what
I mean :)&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radosław Ganczarek</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/code-quality-in-python.html</guid><category>Best Practice</category><category>Code Analysis</category><category>Python 3</category><category>Tooling</category><category>Type-Hinting</category></item><item><title>Code review for Beginners and Experts: Tips &amp; Tricks</title><link>https://pyvideo.org/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much easier to debug, and it's much harder to introduce
a bug in such code.&lt;/div&gt;
&lt;div class="line"&gt;When you think about code review, you probably think about verifying
and examining the code. Reviewing the expert's code may look like a
waste of time because he knows what he's doing. Reviewing the code by
a beginner may look like a waste of time because he's not able to find
as many defects as an experienced developer. Code review is a code
quality tool in the first place, but it's also much beyond that. You
can teach or help someone, learn from somebody and much more both from
the position of reviewer and reviewee.&lt;/div&gt;
&lt;div class="line"&gt;There is much more about the real power of code review which I want to
share with you.&lt;/div&gt;
&lt;div class="line"&gt;This talk is also about how to do it the right way and how to not do
it based on lessons learned and my experience within the diverse teams
of people with a variety of knowledge and experience. I was reviewing
the code but, on the other hand, I was also being reviewed. I'd like
to pass my observations to people who are reviewing the code both in
commercial and open source projects for a while. This talk is also for
those who want to start to review the code, but they do not know how
to do it.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Kąkol</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</guid><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Development</category><category>Programming</category></item><item><title>From Python script to Open Source Project</title><link>https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Karzyński</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/from-python-script-to-open-source-project.html</guid><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Static Analysis</category><category>Tooling</category></item><item><title>Python vs Rust for Simulation</title><link>https://pyvideo.org/europython-2019/python-vs-rust-for-simulation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Both Python and Rust are getting more and more popularity. Although it
is unfair to compare them directly, this talk aims to provide a clear
comparison with a pre-defined criteria applied to a specific use-case.&lt;/div&gt;
&lt;div class="line"&gt;Writing a simulation engine is very similar to writing a game engine
and requires certain features from a language or framework.&lt;/div&gt;
&lt;div class="line"&gt;Possible comparison criteria:&lt;/div&gt;
&lt;div class="line"&gt;1. Performance&lt;/div&gt;
&lt;div class="line"&gt;2. Simplicity&lt;/div&gt;
&lt;div class="line"&gt;3. Amount of code necessary for a MVP&lt;/div&gt;
&lt;div class="line"&gt;4. Utilities: docs, tests, profile&lt;/div&gt;
&lt;div class="line"&gt;5. Compatibility&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tl;dr&lt;/div&gt;
&lt;div class="line"&gt;Do I want to go back to Python after Rust? Maybe+)&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alisa Dammer</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/python-vs-rust-for-simulation.html</guid><category>Code Analysis</category><category>Development</category><category>Rust</category><category>python</category></item></channel></rss>