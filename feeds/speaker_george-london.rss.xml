<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 03 Dec 2017 00:00:00 +0000</lastBuildDate><item><title>import madness # how to implement mergesort from scratch using only import statements</title><link>https://pyvideo.org/north-bay-python-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently I had trouble importing a module. So I started actually reading the documentation of the Python import system and realized that I had been writing Python for years without understanding basics like “a module is a file” or “importing a module executes it”.&lt;/p&gt;
&lt;p&gt;A few days later I had a terrible realization – it’s possible to implement a mergesort algorithm in Python using only the import statement.&lt;/p&gt;
&lt;p&gt;Actually making it work requires learning (and subverting) almost all of the import system’s underlying machinery. So walking through how it’s done creates an excellent (and entertaining) opportunity to shine some light on the darker corners of a system that Python programmers use nearly every day but can work for years without ever really understanding.&lt;/p&gt;
&lt;p&gt;This talk starts off with an explanation of the basic fundamentals of the import system, i.e.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What does the word “module” actually mean?&lt;/li&gt;
&lt;li&gt;How does Python find the source code I’m importing?&lt;/li&gt;
&lt;li&gt;What is Python actually doing when I import code? How is it different from compiled languages?&lt;/li&gt;
&lt;li&gt;How Python uses namespaces to manage scope and keep our and variables organized!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, things get pretty weird.&lt;/p&gt;
&lt;p&gt;The rest of the talk explains how the import system alone gives us the tools to emulate function evaluation and how that means that we can (but shouldn’t!) write algorithms using import statements instead of.&lt;/p&gt;
&lt;p&gt;I describe the classic mergesort algorithm and then I show how to actually implement it using imports (under the theory that nothing helps retain knowledge like watching it applied to a trainwreck.)&lt;/p&gt;
&lt;p&gt;I briefly discuss how “computation” is an abstract process that can be accomplished in more ways that we might intuitively realize. And then I wrap up with some practical advice on how users can avoid ImportErrors and a warning about the serious but non-obvious security risks of importing Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George London</dc:creator><pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-12-03:north-bay-python-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html</guid></item><item><title>import madness # how to implement mergesort from scratch using only import statements</title><link>https://pyvideo.org/pygotham-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently I had trouble importing a module. So I started actually reading the documentation of the Python import
system and realized that I had been writing Python for years without understanding basics like &amp;quot;a module is a file&amp;quot;
or &amp;quot;importing a module executes it&amp;quot;.&lt;/p&gt;
&lt;p&gt;A few days later I had a terrible realization -- it's possible to implement a mergesort algorithm in Python using
only the &lt;cite&gt;import&lt;/cite&gt; statement.&lt;/p&gt;
&lt;p&gt;Actually making it work requires learning (and subverting) almost all of the import system's underlying machinery.
So walking through how it's done creates an excellent (and entertaining) opportunity to shine some light on the
darker corners of a system that Python programmers use nearly every day but can work for years without ever really understanding.&lt;/p&gt;
&lt;p&gt;This talk starts off with an explanation of the basic fundamentals of the import system, i.e.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What does the word &amp;quot;module&amp;quot; actually mean?&lt;/li&gt;
&lt;li&gt;How does Python find the source code I'm importing?&lt;/li&gt;
&lt;li&gt;What is Python actually doing when I import code?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, things get pretty weird.&lt;/p&gt;
&lt;p&gt;The rest of the talk explains how the import system alone gives us the tools to emulate function evaluation
and how that means that we can (but shouldn't!) write algorithms using import statements instead of functions.&lt;/p&gt;
&lt;p&gt;I describe the classic mergesort algorithm and then I show how to actually implement it using imports
(under the theory that nothing helps retain knowledge like watching it applied to a trainwreck.)&lt;/p&gt;
&lt;p&gt;I briefly discuss how &amp;quot;computation&amp;quot; is an abstract process that can be accomplished in more ways
that we might intuitively realize. And then I wrap up with some practical advice on how users can avoid ImportErrors
and a warning about the serious but non-obvious security risks of importing Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George London</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:pygotham-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html</guid></item></channel></rss>