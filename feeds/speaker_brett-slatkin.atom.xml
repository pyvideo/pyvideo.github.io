<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brett-slatkin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-06-09T00:00:00+00:00</updated><entry><title>Refactoring Python: Why and how to restructure your code</title><link href="https://pyvideo.org/pycon-us-2016/brett-slatkin-refactoring-python-why-and-how-to-restructure-your-code-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Brett Slatkin</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/brett-slatkin-refactoring-python-why-and-how-to-restructure-your-code-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Brett Slatkin&lt;/p&gt;
&lt;p&gt;As programs gain complexity, it becomes harder to add features and fix bugs. Reorganizing code is an effective way to make programs more manageable. This talk will show you Pythonic ways to do the most imporant &amp;quot;&amp;quot;refactorings&amp;quot;&amp;quot;: Extract variables with __nonzero__; Change signatures with *args and **kwargs; Extract fields and classes with &amp;#64;property; Create stateful closures with __call__; and more!&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Powering the real-time web with Python: PubSubHubbub on App Engine (#173)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Brett Slatkin</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powering the real-time web with Python: PubSubHubbub on App Engine&lt;/p&gt;
&lt;p&gt;Presented by Brett Slatkin&lt;/p&gt;
&lt;p&gt;PubSubHubbub is an open protocol that turns Atom and RSS feeds into
real-time streams. I built the reference Hub run by Google using Python
and App Engine. In this talk you will learn how I made the real-time
system work: An intro to the protocol, asynchronous processing on App
Engine, fault-tolerance, and scalability.&lt;/p&gt;
&lt;p&gt;For details on PubSubHubbub and the Hub's source code, see
&lt;a class="reference external" href="http://code.google.com/p/pubsubhubbub/"&gt;http://code.google
.com/p/pubsubhubbub/&lt;/a&gt;.&lt;/p&gt;
</summary><category term="pubsubhubbub"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Fan-in and Fan-out: The crucial components of concurrency</title><link href="https://pyvideo.org/pycon-us-2014/fan-in-and-fan-out-the-crucial-components-of-con.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Brett Slatkin</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/fan-in-and-fan-out-the-crucial-components-of-con.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The most important yet underappreciated parts of concurrent APIs are
good constructs for fan-out (one thread spawns others) and fan-in (many
threads join together). This talk will show examples of fan-in and
fan-out. It will cover the successes and shortcomings of APIs that
provide concurrency. Finally, we'll discuss how the async model of
Tulip/PEP3156 is the ultimate API. The future is bright!&lt;/p&gt;
</summary></entry><entry><title>How to Be More Effective with Functions</title><link href="https://pyvideo.org/pycon-us-2015/how-to-be-more-effective-with-functions.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Brett Slatkin</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-be-more-effective-with-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Functions improve readability, encourage reuse, and facilitate
refactoring. Python has many unique features that make functions
significantly more powerful. This talk will show you the best ways to
use functions in Python: when *args is helpful and when it'll crash
your programs; how to use generators for arguments and return values;
the value of keyword vs. keyword-only arguments; and more!&lt;/p&gt;
</summary></entry></feed>