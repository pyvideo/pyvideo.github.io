<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Andrew Knight</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 18 Oct 2023 00:00:00 +0000</lastBuildDate><item><title>Managing the Test Data Nightmare</title><link>https://pyvideo.org/djangocon-us-2021/managing-the-test-data-nightmare.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good data for testing can be a &lt;strong&gt;nightmare&lt;/strong&gt; to manage. Sometimes, teams don't have much control over the data in their systems under test—it's just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing. Inaccurate data can leave test gaps. Incorrect or stale data can break tests. Large data can consume too much time. Ugh!&lt;/p&gt;
&lt;p&gt;In this talk, we'll cover strategies for defeating many types of test data nightmares:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;recognizing the difference between &lt;em&gt;product&lt;/em&gt; data and &lt;em&gt;test case&lt;/em&gt; data&lt;/li&gt;
&lt;li&gt;deciding when to prepare data statically beforehand or dynamically during testing&lt;/li&gt;
&lt;li&gt;using data to control how tests run or reflect product state&lt;/li&gt;
&lt;li&gt;hard-coding values versus discovering data in the system&lt;/li&gt;
&lt;li&gt;avoiding collisions on shared data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strategies we cover can be applied to any project in any language, especially Django. After this talk, you will wake up from the nightmare and handle test data cleanly and efficiently like a pro!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-23:/djangocon-us-2021/managing-the-test-data-nightmare.html</guid><category>DjangoCon US 2021</category></item><item><title>Keynote: Testing Modern Web Apps Like a Champion</title><link>https://pyvideo.org/djangocon-us-2023/keynote-testing-modern-web-apps-like-a-champion.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's 2023, and web apps are usually more complicated than just a bunch of HTML pages hosted on somebody's server. The Web is an incredible platform for building and sharing applications that bring people value, from work to social media to banking and pretty much every aspect of life. With rich features, though, comes complexity: modern web apps are more complicated than ever. It's a serious challenge to make sure web apps both look right and work right.&lt;/p&gt;
&lt;p&gt;Let's learn how to thoroughly test modern web apps like a CHAMPION!&lt;/p&gt;
&lt;p&gt;In this session, we will deep dive into proper testing techniques for all layers of a web app:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Unit testing, including Django's test client&lt;/li&gt;
&lt;li&gt;Component testing as applicable&lt;/li&gt;
&lt;li&gt;API testing for integrations&lt;/li&gt;
&lt;li&gt;End-to-end testing through a browser&lt;/li&gt;
&lt;li&gt;Performance and load testing&lt;/li&gt;
&lt;li&gt;Continuous testing as part of DevOps pipelines&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Come ready to learn! We will focus on Django apps in Python, but the concepts we learn are transferable to any web development stack. By the end of this session, you will know how to build a rigorous testing strategy together with the test cases you need to make sure your modern web apps have high quality.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-10-18:/djangocon-us-2023/keynote-testing-modern-web-apps-like-a-champion.html</guid><category>DjangoCon US 2023</category></item><item><title>Managing the Test Data Nightmare</title><link>https://pyvideo.org/pybay-2021/managing-the-test-data-nightmare.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2021 Food Truck Edition - 6th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;DESCRIPTION
Good data for testing can be a nightmare to manage. Sometimes, teams don’t have much control over the data in their systems under test—it’s just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing. Inaccurate data can leave test gaps. Incorrect or stale data can break tests. Large data can consume too much time. Ugh!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll cover strategies for defeating many types of test data nightmares:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;recognizing the difference between product data and test case data&lt;/li&gt;
&lt;li&gt;deciding when to prepare data statically beforehand or dynamically during testing&lt;/li&gt;
&lt;li&gt;using data to control how tests run or reflect product state&lt;/li&gt;
&lt;li&gt;hard-coding values versus discovering data in the system&lt;/li&gt;
&lt;li&gt;avoiding collisions on shared data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strategies we cover can be applied to any project in any language. After this talk, you will wake up from the nightmare and handle test data cleanly and efficiently like a pro!&lt;/p&gt;
&lt;p&gt;ABOUT THE SPEAKER
Andy Knight is an engineer and consultant who loves all things software. He specializes in building robust test automation solutions from the ground up using the latest technologies and best practices. He currently works at PrecisionLender in Cary, NC. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
&lt;p&gt;SPONSOR ACKNOWLEDGEMENT
This and other PyBay2021 videos are made possible by our sponsors:
- Carta &lt;a class="reference external" href="https://carta.com"&gt;https://carta.com&lt;/a&gt;
- Anyscale &lt;a class="reference external" href="https://anyscale.com"&gt;https://anyscale.com&lt;/a&gt;
- Goodrx &lt;a class="reference external" href="https://goodrx.com"&gt;https://goodrx.com&lt;/a&gt;
- Nginx &lt;a class="reference external" href="https://nginx.com"&gt;https://nginx.com&lt;/a&gt;
- Bit.io &lt;a class="reference external" href="https://bit.io"&gt;https://bit.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EVENT PRODUCER ACKNOWLEDGEMENT
This community conference is produced by organizers of SF Python meetup and volunteers from around the SF Bay Area. See upcoming events here: &lt;a class="reference external" href="https://sfpythonmeetup.com"&gt;https://sfpythonmeetup.com&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-09:/pybay-2021/managing-the-test-data-nightmare.html</guid><category>PyBay 2021</category></item><item><title>How Decorators Function</title><link>https://pyvideo.org/pycon-india-2020/how-decorators-function.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-02:/pycon-india-2020/how-decorators-function.html</guid><category>PyCon India 2020</category></item><item><title>Beyond Unit Tests End to End Web UI Testing – Andrew Knight (PyCon Taiwan 2021)</title><link>https://pyvideo.org/pycon-taiwan-2021/beyond-unit-tests-end-to-end-web-ui-testing-andrew-knight-pycon-taiwan-2021.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, 11:35-12:05&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Unit tests are great, but they don’t catch all bugs because they don’t test features like a user. However, Web UI tests are complicated and notoriously unreliable. So, how can we write tests well? Never fear! Let’s learn how to write robust, scalable Web UI tests using Python, pytest, and Selenium WebDriver that cover the full stack for any Web app. In this talk, we will write one simple test together that covers DuckDuckGo searching. You’ll learn how to write battle-hardened Web UI tests for any Web app, including Django and Flask apps. I’ll also provide plenty of hands-on tutorials and resources to continue learning after this talk.&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Web UI testing is difficult because many folks don't know how to do it, or they aren't experienced in how to handle fine details like locators or race conditions. In this talk, you will learn how to automate tests in Python using pytest and Selenium WebDriver. We will cover:&lt;/p&gt;
&lt;p&gt;Using Selenium WebDriver like a pro
Modeling Web UI interactions with page objects
Writing “good” feature tests that are efficient, robust, and readable
Deciding what should and should not be tested with automation
Considering Playwright as a Selenium alternative
The example code is here:
&lt;a class="reference external" href="https://github.com/AndyLPK247/tau-intro-selenium-py"&gt;https://github.com/AndyLPK247/tau-intro-selenium-py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also developed courses for Test Automation University on this topic:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://testautomationu.applitools.com/pytest-tutorial/"&gt;https://testautomationu.applitools.com/pytest-tutorial/&lt;/a&gt;
&lt;a class="reference external" href="https://testautomationu.applitools.com/selenium-webdriver-python-tutorial/"&gt;https://testautomationu.applitools.com/selenium-webdriver-python-tutorial/&lt;/a&gt;
&lt;a class="reference external" href="https://testautomationu.applitools.com/web-element-locator-strategies/"&gt;https://testautomationu.applitools.com/web-element-locator-strategies/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.
HackMD: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fry4OQeYMt"&gt;https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2Fry4OQeYMt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: Andrew Knight&lt;/p&gt;
&lt;p&gt;Pandy Knight is the “Automation Panda” - an engineer, consultant, and international speaker who builds solutions for software testing problems. He has designed and built robust test automation projects for web apps, service APIs, and operating systems with thousands of tests running continuously. He is the lead developer for Boa Constrictor, the .NET Screenplay Pattern. He also mentors others in good development, testing, and BDD practices. Andy currently works full-time as the Lead Software Engineer in Test for PrecisionLender at Q2. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-02:/pycon-taiwan-2021/beyond-unit-tests-end-to-end-web-ui-testing-andrew-knight-pycon-taiwan-2021.html</guid><category>PyCon Taiwan 2021</category></item><item><title>Behavior-Driven Python</title><link>https://pyvideo.org/pycon-us-2018/behavior-driven-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Behavior-Driven Development (BDD) is gaining popularity as an improved way to collaborate over product features and tests. In Python, &lt;strong&gt;behave&lt;/strong&gt; is one of the leading BDD test frameworks. Using &lt;strong&gt;behave&lt;/strong&gt;, teams write Gherkin behavior scenarios (e.g., tests) in plain language, and then programmers write Python code to automate the steps. BDD testing is great because tests are self-documenting and steps abide by the DRY principle. An example test could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Given the DuckDuckGo home page is displayed&lt;/li&gt;
&lt;li&gt;When the user searches the phrase &amp;quot;Python&amp;quot;&lt;/li&gt;
&lt;li&gt;Then search results for &amp;quot;Python&amp;quot; are shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will teach how to use &lt;strong&gt;behave&lt;/strong&gt; to develop well-designed test scenarios and a robust automation framework. It will focus on the layers of the behave framework: feature files, step definitions, support classes, and config files. A full example project will be hosted on GitHub for audience members to reference after the talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:/pycon-us-2018/behavior-driven-python.html</guid><category>PyCon US 2018</category><category>behavior driven development</category><category>bdd</category><category>behave</category></item><item><title>Hands-On Web App Test Automation</title><link>https://pyvideo.org/pycon-us-2020/hands-on-web-app-test-automation.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-04-17:/pycon-us-2020/hands-on-web-app-test-automation.html</guid><category>PyCon US 2020</category><category>tutorial</category></item><item><title>East Meets West When Translating Django Apps</title><link>https://pyvideo.org/pycon-us-2020/east-meets-west-when-translating-django-apps.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-04-15:/pycon-us-2020/east-meets-west-when-translating-django-apps.html</guid><category>PyCon US 2020</category></item><item><title>Testing is Fun in Python!</title><link>https://pyvideo.org/pydata-carolinas-2016/testing-is-fun-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing software is just as important in Python as it is in any other
programming language. Rather than treat testing as a “necessary evil,”
Python offers a number of versatile test frameworks to make it fun and
easy. This talk will cover basic testing best practices and introduce
a few of the popular frameworks, including unittest, doctest, py.test,
Nose, and Avocado.&lt;/p&gt;
&lt;p&gt;Testing is vital to the success of any software, including big data
and analytics code. Unfortunately, it is often regarded as a
“necessary evil” – extra work that slows down progress. In this
session, I will highlight how testing in Python can be fun, easy,
fast, and helpful.&lt;/p&gt;
&lt;p&gt;First, I will give a brief overview of basic best practices for
testing. We will talk about the difference between debugging and
testing, different types of tests, how to write good test cases, and
basic testing fixtures like assertions and results. I will focus on
unit testing, but the concepts can be applied to higher levels of
testing as well.&lt;/p&gt;
&lt;p&gt;Then, for the majority of the session, I will introduce different
Python test frameworks: - unittest as the standard module for unit
test classes. - doctest as a lightweight way to write short, self-
documenting assertions in docstrings. - py.test as a way to write very
concise test cases. - Nose as an extension of unittest with added
features. - Avocado as a comprehensive framework with parameters,
replay, and test discovery.&lt;/p&gt;
&lt;p&gt;This talk is designed to be useful to Python programmers of any skill
level. Only a basic understanding of Python is required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-15:/pydata-carolinas-2016/testing-is-fun-in-python.html</guid><category>PyData Carolinas 2016</category></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>https://pyvideo.org/pygotham-2018/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. To show how to get it done, we will follow the story of “Amanda the Panda” (representing the everyday Pythoneer) as she jumps into testing and automation with Python.&lt;/p&gt;
&lt;p&gt;Her journey includes:
1. How do I play “buzzword bingo” for testing?
2. Why do I need feature tests and not just unit tests?
3. What skills do I need?
4. What framework should I use?
5. How do I avoid duplicating test code?
6. How do I handle test data?
7. There are too many tests! Which ones should I automate?
8. How do I run tests in continuous integration?
9. How do I make tests reliable so they stop failing again and again?
10. How do I hire Software Engineers in Test?&lt;/p&gt;
&lt;p&gt;All examples will be given in Python (of course).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:/pygotham-2018/egad-how-do-we-start-writing-better-tests.html</guid><category>PyGotham 2018</category></item><item><title>Beyond Unit Tests: End-to-End Web UI Testing</title><link>https://pyvideo.org/pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit tests are great, but they don’t catch all bugs because they don’t test
features like a user. However, Web UI tests are complicated and notoriously
unreliable. So, how can we write tests well? Never fear!&lt;/p&gt;
&lt;p&gt;Let’s learn how to write robust, scalable Web UI tests using Python, pytest,
and Selenium WebDriver that cover the full stack for any Web app. In this talk,
we will write one simple test together that covers DuckDuckGo searching.
We’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using Selenium WebDriver like a pro&lt;/li&gt;
&lt;li&gt;Modeling Web UI interactions in Python code&lt;/li&gt;
&lt;li&gt;Writing “good” feature tests that are efficient, robust, and readable&lt;/li&gt;
&lt;li&gt;Deciding what should and should not be tested with automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this talk, you’ll know how to write battle-hardened Web UI tests for
anyWeb app, including Django and Flask apps. I’ll provide the example code on
GitHub, as well as plenty of hands-on tutorials and resources to continue
learning after this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:/pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html</guid><category>PyGotham 2019</category></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>https://pyvideo.org/pyohio-2018/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they
wreck themselves. Others have 1000s of tests that are flaky,
duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not
impossible. Start with proven advice from this talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-28:/pyohio-2018/egad-how-do-we-start-writing-better-tests.html</guid><category>PyOhio 2018</category></item><item><title>Surviving Without Python</title><link>https://pyvideo.org/pyohio-2019/surviving-without-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is such a popular language for good reason: Its principles are
strong. However, if Python is “the second-best language for everything”…
that means the &lt;em&gt;first-best&lt;/em&gt; is often chosen instead. Oh no! How can
Pythonistas survive a project or workplace without our favorite
language? Take a deep breath, because I’ll show you how to apply things
that make Python great to other software spaces.&lt;/p&gt;
&lt;p&gt;Python is not the only “fish in the sea” - there are several good
languages and frameworks out there that are awesome in their own right.
And as software people, whether we are web developers, data scientists,
or some other role, we probably won’t spend 100% of our work using
Python. It’s inevitable. Web dev relies on JavaScript. Data scientists
often use R and Scala. Backends frequently use C# and Java. Success as a
modern software engineer requires inter-domain proficiency.&lt;/p&gt;
&lt;p&gt;Personally, even though I love Python, I don’t use it daily at my full
time job. Nevertheless, Pythonic thinking guides my whole approach to
software. I will talk about how the things that make Python great can be
applied to non- Python places in three primary ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Principles from the Zen of Python&lt;/li&gt;
&lt;li&gt;Projects that partially use Python&lt;/li&gt;
&lt;li&gt;People who build strong, healthy community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will provide stories, statistics, examples, projects, side-by-side
code comparisons, and pictures to explain these points well. Python’s
values can make the software world a better place!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sun, 28 Jul 2019 12:45:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-28:/pyohio-2019/surviving-without-python.html</guid><category>PyOhio 2019</category></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>https://pyvideo.org/pytexas-2019/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. Start with proven advice from this talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:/pytexas-2019/egad-how-do-we-start-writing-better-tests.html</guid><category>PyTexas 2019</category><category>testing</category></item><item><title>How Decorators Function</title><link>https://pyvideo.org/pytexas-2020/how-decorators-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever seen those “&amp;#64;” tags on top of Python functions and classes? Those are decorators - functions that wrap around other functions. Confusing? At first, but they’re easy with practice. Useful? Very! We’ll learn how they work, how to write our own, and how and when to use them.&lt;/p&gt;
&lt;p&gt;Speaker: Andrew Knight
Andy Knight is the “Automation Panda” - an engineer, consultant, and international speaker who loves all things about software. His main passion is building solutions for software testing problems. He has designed and built robust test automation solutions for operating systems, service APIs, and Web apps with thousands of tests running continuously. He also mentors others in good development, testing, and BDD practices. Andy currently works full-time as the Lead Software Engineer in Test at PrecisionLender, a Q2 company. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-25:/pytexas-2020/how-decorators-function.html</guid><category>PyTexas 2020</category></item><item><title>Awesome Web Testing with Playwright</title><link>https://pyvideo.org/pytexas-2022/awesome-web-testing-with-playwright.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody gets frustrated when web apps are broken, but testing them thoroughly doesn't need to be a chore. Playwright, a new open-source browser automation tool from Microsoft, makes testing web apps fun! Playwright offers a slew of nifty features like automatic waiting, mobile emulation, and network interception. Plus, with isolated browser contexts, Playwright tests can set up &lt;em&gt;much&lt;/em&gt; faster than traditional Web UI tests.&lt;/p&gt;
&lt;p&gt;Speaker: Andrew Knight
Andrew Knight is the Automation Panda and also a Developer Advocate at Applitools. He strives to help others in solving problems in software development, testing, and quality. Over the past decade, he has designed and built robust test automation projects from the ground up that can run thousands of tests continuously. He is the author of the upcoming book “The Way To Test Software” from Manning Publications, and he is also the lead developer for Boa Constrictor, the .NET Screenplay Pattern. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-21:/pytexas-2022/awesome-web-testing-with-playwright.html</guid><category>PyTexas 2022</category></item><item><title>Managing the Test Data Nightmare</title><link>https://pyvideo.org/pytexas-2022/managing-the-test-data-nightmare.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good test data can be a nightmare to manage! It can make-or-break testing efforts. Should we preload our databases? Should we use dynamically-generated dummy data? What about collisions? Let’s cover practical strategies for handling data both in our products and in our test cases.&lt;/p&gt;
&lt;p&gt;Speaker: Andrew Knight
Andrew Knight is the Automation Panda and also a Developer Advocate at Applitools. He strives to help others in solving problems in software development, testing, and quality. Over the past decade, he has designed and built robust test automation projects from the ground up that can run thousands of tests continuously. He is the author of the upcoming book “The Way To Test Software” from Manning Publications, and he is also the lead developer for Boa Constrictor, the .NET Screenplay Pattern. Read his tech blog at AutomationPanda.com, and follow him on Twitter at &amp;#64;AutomationPanda.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-21:/pytexas-2022/managing-the-test-data-nightmare.html</guid><category>PyTexas 2022</category></item><item><title>East Meets West When Translating Django Apps</title><link>https://pyvideo.org/python-web-conf-2022/east-meets-west-when-translating-django-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Translating a web app can seem like a daunting challenge. Thankfully, though, Django provides a bunch of features out of the box that handle the mechanics of picking languages and substituting strings. In this talk, we’ll show how easy it is to provide translations for both new apps and existing ones. For example code, I’ll show Django apps I developed for small businesses operating both in the USA and in China.&lt;/p&gt;
&lt;p&gt;We’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Settings and structure for languages&lt;/li&gt;
&lt;li&gt;URL routing and language detection&lt;/li&gt;
&lt;li&gt;Providing translations in message files&lt;/li&gt;
&lt;li&gt;Areas in the app to insert translation strings (particularly overlooked areas)&lt;/li&gt;
&lt;li&gt;As a bonus, we’ll also look at translating the Django admin site!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this talk, audience members will be able to translate their Django apps without hitting common snags, helping to bring the world together just a bit more.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-03-24:/python-web-conf-2022/east-meets-west-when-translating-django-apps.html</guid><category>Python Web Conf 2022</category><category>PythonWebConf</category><category>PythonWebConf2022</category></item><item><title>Tutorial: End-to-End Testing with Playwright</title><link>https://pyvideo.org/python-web-conf-2022/tutorial-end-to-end-testing-with-playwright.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody gets frustrated when web apps are broken, but testing them thoroughly doesn't need to be a chore. Playwright, a new open-source browser automation tool from Microsoft, makes testing web apps fun! Playwright outperforms other tools like Selenium WebDriver with a slew of nifty features like automatic waiting, mobile emulation, and network interception. Plus, with isolated browser contexts, Playwright tests can set up * much* faster than traditional Web UI tests.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will build a Python test automation project from the ground up. We will automate web search engine tests together step-by-step using Playwright for interactions and pytest for execution. We'll also explore Playwright tricks like cross-browser testing, capturing videos, and even running tests in parallel! By the end of this tutorial, you'll be empowered to test modern web apps with modern web test tools. You'll also have an example project to be the foundation for your future tests.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-03-22:/python-web-conf-2022/tutorial-end-to-end-testing-with-playwright.html</guid><category>Python Web Conf 2022</category><category>PythonWebConf</category><category>PythonWebConf2022</category></item></channel></rss>