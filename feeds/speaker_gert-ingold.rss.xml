<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Git</title><link>https://pyvideo.org/euroscipy-2017/git.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial prerequisites.&lt;/p&gt;
&lt;p&gt;Everybody developing code can profit from a version control system, no
matter whether it is code written in Python or any other programming
language or even a paper written, e.g., in LaTeX. A very popular version
control system, particularly in the development of open source software,
is Git which this tutorial will be devoted to. We will explore the basic
workflow of code development with Git and also take a look at how code
can be developed collaboratively with the help of Github.&lt;/p&gt;
&lt;p&gt;While the example used to gain experience with the Git workflow will be
based on Python code, a knowledge of Python is not strictly required for
the purpose of this tutorial.&lt;/p&gt;
&lt;p&gt;Apart from Python, which is only needed if you want to run the script
used in the example, you will need the Git software to follow the Git
workflow on your computer. See
&lt;a class="reference external" href="https://git-scm.com/downloads"&gt;git-scm.com/downloads&lt;/a&gt; for binaries
for Mac OS X and Windows as well as installation instructions for Linux
and Solaris. There is no need to install a Git GUI as all examples will
be demonstrated on the command line.&lt;/p&gt;
&lt;p&gt;If you want to follow along the Github workflow at the end of the
tutorial, you might want to sign up for Github at
&lt;a class="reference external" href="https://github.com"&gt;github.com&lt;/a&gt;. This will require you to choose a
user name and a password and to provide your email address. Even if you
do not sign up for Github, you will still be able to do most of the
examples on your computer.&lt;/p&gt;
&lt;p&gt;The tutorial can be obtained from
&lt;a class="reference external" href="https://github.com/gertingold/euroscipy-git-tutorial"&gt;Github&lt;/a&gt;. You
can get the LaTeX source and the images by downloading a zip file from
&lt;a class="reference external" href="https://github.com/gertingold/euroscipy-git-tutorial"&gt;Github&lt;/a&gt; or by
cloning the repository once you have Git installed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/gertingold/euroscipy-git-tutorial.git
&lt;/pre&gt;
&lt;p&gt;A PDF file of the presentation is available from
&lt;a class="reference external" href="https://github.com/gertingold/euroscipy-git-tutorial/blob/master/presentation.pdf"&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gert Ingold</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/git.html</guid></item><item><title>NumPy (1/2)</title><link>https://pyvideo.org/euroscipy-2017/numpy-12.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NumPy forms the basis of the scientific ecosystem of Python by providing
a new data type, the &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;. This type allows to represent
multi-dimensional homogeneous data as they appear in many scientific
applications in the form of vectors and matrices or, for example,
images. The use of NumPy arrays allows to significantly speed up
numerical calculations in Python and, in addition, permits to write more
succinct and readable code.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will discuss the basic concepts of &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;s
and, in particular, how they can be indexed to efficiently work with
multi-dimensional data. We will learn how to manipulate &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;s
with NumPy and explore how typical numerical tasks can be solved either
with NumPy or other packages from the Python scientific ecosystem like
SciPy (which will be covered in more detail in a subsequent tutorial).&lt;/p&gt;
&lt;p&gt;A basic knowledge of Python, at least on the level of the introductory
tutorial on Python, is expected. Some familiarity with the slicing
syntax of Python lists will be useful.&lt;/p&gt;
&lt;p&gt;For the NumPy tutorial, it will be sufficient to have installed the
packages mentioned on the top of this page.&lt;/p&gt;
&lt;p&gt;Teaching material is available from
&lt;a class="reference external" href="https://github.com/gertingold/euroscipy-numpy-tutorial/"&gt;Github&lt;/a&gt;.
Make sure that you download the &lt;a class="reference external" href="https://raw.githubusercontent.com/gertingold/euroscipy-numpy-tutorial/master/numpy-tutorial-exercises.ipynb"&gt;Jupyter
notebook&lt;/a&gt;
containing the exercises.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gert Ingold</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/numpy-12.html</guid></item><item><title>NumPy (2/2)</title><link>https://pyvideo.org/euroscipy-2017/numpy-22.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NumPy forms the basis of the scientific ecosystem of Python by providing
a new data type, the &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;. This type allows to represent
multi-dimensional homogeneous data as they appear in many scientific
applications in the form of vectors and matrices or, for example,
images. The use of NumPy arrays allows to significantly speed up
numerical calculations in Python and, in addition, permits to write more
succinct and readable code.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will discuss the basic concepts of &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;s
and, in particular, how they can be indexed to efficiently work with
multi-dimensional data. We will learn how to manipulate &lt;tt class="docutils literal"&gt;ndarray&lt;/tt&gt;s
with NumPy and explore how typical numerical tasks can be solved either
with NumPy or other packages from the Python scientific ecosystem like
SciPy (which will be covered in more detail in a subsequent tutorial).&lt;/p&gt;
&lt;p&gt;A basic knowledge of Python, at least on the level of the introductory
tutorial on Python, is expected. Some familiarity with the slicing
syntax of Python lists will be useful.&lt;/p&gt;
&lt;p&gt;For the NumPy tutorial, it will be sufficient to have installed the
packages mentioned on the top of this page.&lt;/p&gt;
&lt;p&gt;Teaching material is available from
&lt;a class="reference external" href="https://github.com/gertingold/euroscipy-numpy-tutorial/"&gt;Github&lt;/a&gt;.
Make sure that you download the &lt;a class="reference external" href="https://raw.githubusercontent.com/gertingold/euroscipy-numpy-tutorial/master/numpy-tutorial-exercises.ipynb"&gt;Jupyter
notebook&lt;/a&gt;
containing the exercises.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gert Ingold</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/numpy-22.html</guid></item></channel></rss>