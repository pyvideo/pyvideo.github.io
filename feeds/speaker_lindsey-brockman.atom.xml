<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lindsey-brockman.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-29T00:00:00+00:00</updated><entry><title>Multimethods? In MY Python?</title><link href="https://pyvideo.org/pyohio-2017/multimethods-in-my-python.html" rel="alternate"></link><published>2017-07-29T00:00:00+00:00</published><updated>2017-07-29T00:00:00+00:00</updated><author><name>Lindsey Brockman</name></author><id>tag:pyvideo.org,2017-07-29:pyohio-2017/multimethods-in-my-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A benefit of using a dynamically typed language like Python is the ability to create a function that can operate on arguments of unknown types. Unfortunately, this freedom can lead to a common antipattern where the function is responsible for type-cheaking each argument before operating accordingly. This talk will explore avoiding this antipattern with multimethods.&lt;/p&gt;
</summary></entry><entry><title>Make API Calls Wicked Fast with Redis</title><link href="https://pyvideo.org/pyohio-2014/make-api-calls-wicked-fast-with-redis.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Lindsey Brockman</name></author><id>tag:pyvideo.org,2014-07-26:pyohio-2014/make-api-calls-wicked-fast-with-redis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sure, your API calls may be fast. But could they be faster? Redis is a
wonderful tool that can be used as a cache API responses. By
implementing API caching, you can avoid hitting rate limits and/or
reduce the load on your database, resulting in better performance for
your web app.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>