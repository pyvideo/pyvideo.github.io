<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ryan-anguiano.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-19T00:00:00+00:00</updated><entry><title>Dr. Microservices, Or How I Learned to Stop Worrying and Love the API</title><link href="https://pyvideo.org/pycon-us-2017/dr-microservices-or-how-i-learned-to-stop-worrying-and-love-the-api.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Ryan Anguiano</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/dr-microservices-or-how-i-learned-to-stop-worrying-and-love-the-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Assuming that you already know how to build a monolithic app, you must
be wondering how you can use all this &amp;quot;microservice&amp;quot; stuff that you keep
hearing about. Well, a good word of advice is that you probably don't
need it. If designed properly, a monolithic app should be able to scale
and fit the needs of most businesses. Even so, you should keep your
development as simple as possible until you have proven and solidified
your business concepts. But if you do need to grow to Internet scale,
then you have a long road ahead of you.&lt;/p&gt;
&lt;p&gt;Moving from a monolithic application to microservices is a natural
evolution that is often of necessity. There are several competing
schools of thought that are still being battle-tested in these early
days of microservice architecture. Among all the competing paradigms,
most of the requirements can be agreed upon, but are mostly
differentiated by the tools used to fulfill the requirements.&lt;/p&gt;
&lt;p&gt;This talk will cover setting up the required infrastructure, and
demonstrate how to migrate a sample monolithic Django application into a
microservices platform.&lt;/p&gt;
&lt;p&gt;The demo application will use the following technologies: Django, Flask,
Fabric, Terraform, Ansible, CentOS, Docker, Mesos, Consul, Nginx,
Pgbouncer, Kafka&lt;/p&gt;
</summary></entry></feed>