<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 17 Jul 2016 00:00:00 +0000</lastBuildDate><item><title>An Introduction to Reinforcement Learning</title><link>https://pyvideo.org/pygotham-2016/an-introduction-to-reinforcement-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reinforcement learning is a subfield of machine learning focused on discovering ‘optimal policies’: robust strategies to achieve a desired objective under varying states of the world. In this talk, we will provide an overview of terminology in reinforcement learning and sample Python programs for basic algorithms to learn policies.  We will also discuss the state of the art in reinforcement learning and the ways in which reinforcement learning can be applied to real world problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica Forde</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/an-introduction-to-reinforcement-learning.html</guid></item><item><title>Anomaly Detection Algorithms and Techniques for Real-World Detection Systems</title><link>https://pyvideo.org/pygotham-2016/anomaly-detection-algorithms-and-techniques-for-real-world-detection-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Finding outliers in a dataset is a challenging problem in which traditional analytical methods often perform poorly. As a result, researchers have developed special algorithms for detecting anomalies. In this talk, I will take about three different families of anomaly detection algorithms: Density-based methods, data streaming methods, and time series methods. I will cover both the mathematical and statistical theory behind these algorithms and provide code implementations. Afterwards, I will discuss useful tips I have learned  while implementing threat detection systems in practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manojit Nandi</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/anomaly-detection-algorithms-and-techniques-for-real-world-detection-systems.html</guid></item><item><title>Build your own python pet!</title><link>https://pyvideo.org/pygotham-2016/build-your-own-python-pet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build your own tamagotchi style py-pet with this beginner friendly workshop. You will learn basic python skillz by spawning and feeding your adorable creation in the terminal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tatiana Tylosky</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/build-your-own-python-pet.html</guid></item><item><title>Cryptography in Python</title><link>https://pyvideo.org/pygotham-2016/cryptography-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today we use cryptography in almost everywhere. From surfing the web over https, to working remotely over ssh. However, many of us do not appreciate the subtleties of crypto primitives, and the lack of correct and updated resources leads to design and development of vulnerable applications. In this talk, we cover the building block of modern crypto, and how to develop secure applications in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amirali Sanatinia</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/cryptography-in-python.html</guid><category>Cryptography</category></item><item><title>Exploring Cryptography</title><link>https://pyvideo.org/pygotham-2016/exploring-cryptography.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A hacker's introduction to cryptography&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Downs</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/exploring-cryptography.html</guid><category>Cryptography</category></item><item><title>Introduction to Web Scraping using Scrapy</title><link>https://pyvideo.org/pygotham-2016/introduction-to-web-scraping-using-scrapy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you wanted to grab data from websites and automatically categorize it into a formatted list? Or maybe you want to opt out of registering for API keys and want data straight out of a web page? This is an introduction to web scraping and we will cover building bots through Scrapy to crawl a few sample web pages and have it extract information that we want. Prior knowledge not required; we’ll break down the steps in creating your own bot, and before you know it you'll be scraping the web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kaira Villanueva</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/introduction-to-web-scraping-using-scrapy.html</guid><category>scraping</category><category>scrapy</category></item><item><title>Probabilistic Graphical Models in Python</title><link>https://pyvideo.org/pygotham-2016/probabilistic-graphical-models-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give a high level overview of the theories of graphical models and a practical introduction to and illustration of several available options for implementing graphical models in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aileen Nielsen</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/probabilistic-graphical-models-in-python.html</guid></item><item><title>python-dateutil: A delightful romp in the never-confusing world of dates and times</title><link>https://pyvideo.org/pygotham-2016/python-dateutil-a-delightful-romp-in-the-never-confusing-world-of-dates-and-times.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The dateutil library provides a number of extensions to Python's standard datetime handling libraries. This talk will provide an overview of how to use (and not use!) dateutil to improve your datetime-handling experience, and also cover some of the recent changes to the library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/python-dateutil-a-delightful-romp-in-the-never-confusing-world-of-dates-and-times.html</guid><category>dateutil</category></item><item><title>Python Gone Bananas: Monkey Patching Isn't Monkey Business</title><link>https://pyvideo.org/pygotham-2016/python-gone-bananas-monkey-patching-isnt-monkey-business.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an extremely dynamic language with a very &amp;quot;rich runtime.&amp;quot; Unlike in a compiled language like C or go, symbols (functions and data objects) can be bound and rebound at runtime; swapped out without the need for complicated syntax and without the risk of unsafe complications.
In the Python community, this is called &amp;quot;monkey-patching.&amp;quot; But it's not as bananas as it sounds!
In fact, it can be a very useful mechanism for extending functionality or for making robust, surgical fixes to a code-base!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/python-gone-bananas-monkey-patching-isnt-monkey-business.html</guid></item><item><title>RESTful Service Design: Patterns and Anti-Patterns</title><link>https://pyvideo.org/pygotham-2016/restful-service-design-patterns-and-anti-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Drawing on more than a decade of combined experience in RESTful service design, your speakers will discuss many of the key architectural questions that every API developer needs to answer. The goal of this talk is to move quickly beyond the basics, and explore larger questions of how to build a sane and scalable service that your users will love. We will draw on our own experience of implementing bad (and later, less-bad) answers to these questions in multiple real-world situations, with specific examples demonstrated using Django REST Framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Revesz</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/restful-service-design-patterns-and-anti-patterns.html</guid><category>REST</category></item><item><title>Sensely: Office Automation with the Internet of Things and Python</title><link>https://pyvideo.org/pygotham-2016/sensely-office-automation-with-the-internet-of-things-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us have heard the hype surrounding the Internet of Things (IoT). Leveraging a network of wireless sensors to facilitate decision making with real-time data does sound awesome, but how do I get started? In this talk we’ll examine the wireless sensor network my team created for office automation in a 24 hour company sponsored hackathon. Along the way you’ll learn how to connect real sensors to the NodeMCU IoT platform, transmit information over a network using the MQTT messaging protocol, aggregate data with a Dockerized Python microservice, and display it in real-time with various Python packages. By the end of the talk you’ll be ready to set up a sensor network of your own for some home or office automation!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luigi Patruno</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/sensely-office-automation-with-the-internet-of-things-and-python.html</guid></item><item><title>The Colors, Duke! Steganography using the Python Imaging Library (PIL)</title><link>https://pyvideo.org/pygotham-2016/the-colors-duke-steganography-using-the-python-imaging-library-pil.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Steganography is the practice, though some might say artform, of concealing messages within other types of media. The aim of my talk is to show how to write plaintext messages into images and then retrieve them. To do this I'll be using the Python Imaging Library, or PIL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Prakash Venkat</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/the-colors-duke-steganography-using-the-python-imaging-library-pil.html</guid><category>Steganography</category><category>PIL</category></item><item><title>The Sound of Data: Using Python to transform data streams into music.</title><link>https://pyvideo.org/pygotham-2016/the-sound-of-data-using-python-to-transform-data-streams-into-music.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We visualize complex data in order to understand it, find patterns in it, and gain perspective on it. But what happens when we transform data streams into sounds and music, and how can we do this with Python? Sound crazy? Probably, but as a musician turned Developer, I find the intersection of music and code to be fascinating. And I think others will too. This talk will go over the technologies and python libraries used to translate data streams (weather, financial data, anything) into MIDI that then is fed into synthesizers and virtual instruments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Levine</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/the-sound-of-data-using-python-to-transform-data-streams-into-music.html</guid></item><item><title>Wrapping Go in Python</title><link>https://pyvideo.org/pygotham-2016/wrapping-go-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I love python, and I am interested in Go. Recently, Go has gain the ability to create shared object files, which allows you to dynamically link Go code with other languages. This talk goes over the how, why, pros and cons of wrapping Go's shared object files in python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marcus Willock</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/wrapping-go-in-python.html</guid><category>GO</category></item><item><title>Writing Neural Networks from Scratch</title><link>https://pyvideo.org/pygotham-2016/writing-neural-networks-from-scratch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll go through neural networks, explaining them from scratch.  The only background required is an understanding of Python, basic linear algebra and calculus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Schles</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/writing-neural-networks-from-scratch.html</guid></item><item><title>Abstractions and building up: A case study with chess_py, an open source chess platform</title><link>https://pyvideo.org/pygotham-2016/abstractions-and-building-up-a-case-study-with-chess_py-an-open-source-chess-platform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Programming can seem difficult because of the enormous level of abstraction involved. Objects are being dealt with that have very little to do with the real world. They are hard to grasp, touch, and feel. Chess on the other hand is a very concrete and physical game. Objects such as the board, pieces, and even logic such as the basic rules of the game are much easier to understand. How the pieces in chess interact, their capabilities, and their placement on the board can be similar to the way objects interact in python. Using chess_py, an open source platform for chess written by me in python, we can delve into the different classes and data structures to understand how they work and gain a deeper understanding of the language of python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aubhro Sengupta</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/abstractions-and-building-up-a-case-study-with-chess_py-an-open-source-chess-platform.html</guid></item><item><title>Advanced Permissioning</title><link>https://pyvideo.org/pygotham-2016/advanced-permissioning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In many Django applications, permissioning (building rules for who has access to what) is pretty easy. Logged out users can see some stuff, logged in users can see more stuff, and superusers can see (and edit, and delete) all of the stuff! But when you want to handle more complex permissioning (like object-level permissions), it can get pretty ugly. This talk will help to de-uglify things for you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack McCloy</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/advanced-permissioning.html</guid><category>Django</category></item><item><title>Algorithmically Generated Music Using Pyo Based on User Data</title><link>https://pyvideo.org/pygotham-2016/algorithmically-generated-music-using-pyo-based-on-user-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Peloton our data is pedaling speed and resistance from every second while a user rides their bike. We can use this data to generate music that plays back to the user. One way to generate unique and interesting sounds is using Pyo, a python-based DSP library, in combination with custom MIDI samples. This talk will cover how we structure this data, turn the data into music, and stream it to the user using a python-based pipeline.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Groff</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/algorithmically-generated-music-using-pyo-based-on-user-data.html</guid></item><item><title>An End to Boring Data with Visualizations</title><link>https://pyvideo.org/pygotham-2016/an-end-to-boring-data-with-visualizations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Put the days of trying to decipher meaning from boring spreadsheets behind you. Visualize data to give greater and immediate meaning to all those numbers with Python. Explore the variety of options available for data visualization in Python using different libraries and understand which ones excel for what type of task. Create maps, statistical graphs and more detailed or interactive visualizations that can also be used on the web, ideal to take that blog post to a whole new level.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heather Shapiro</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/an-end-to-boring-data-with-visualizations.html</guid></item><item><title>Best Practices for Writing Reusable Python</title><link>https://pyvideo.org/pygotham-2016/best-practices-for-writing-reusable-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all want to write reusable maintainable code that follows best practices, but how? The &amp;quot;what&amp;quot; is easy, but the nuts and bolts are elusive. This talk discusses various ways of accomplishing this with multiple tested pathways. Who should come to this talk? Data Scientists, Web-Devs, Dev-Ops, if you've written code you want others to use, if you want to write code that others will use, this is for you. Who shouldn't come to this talk? If you already publish your own packages on PyPI and you get no joy out of critiquing people who give Best Practices talks, you might benefit more from one of the other talks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Hall</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/best-practices-for-writing-reusable-python.html</guid></item><item><title>Building Command Line Tools in Python</title><link>https://pyvideo.org/pygotham-2016/building-command-line-tools-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you often catch yourself opening a Python script, changing a couple variables at the top, and then running &lt;cite&gt;python myscript.py&lt;/cite&gt;? Turn that script into a Command Line Tool! Learn how to use docopt to easily build a Command Line Tool, how to use pip to make your tool directly callable, and how this strategy can improve your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Taubeneck</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/building-command-line-tools-in-python.html</guid><category>Commandline</category></item><item><title>Care and feeding of Pythons</title><link>https://pyvideo.org/pygotham-2016/care-and-feeding-of-pythons.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Software Foundation was founded in an open source culture with a focus on volunteer work. As the Python ecosystem has grown, so have the volunteer efforts. However, some jobs are of a scale where they can’t reasonably be asked of a volunteer. The PSF also has an important role in financially supporting the Python community. In this keynote, we’ll see how the Python community is growing, what new challenges that brings, and how we can sustainably address them, so that the PSF can continue its mission to grow and nurture our community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ewa Jodlowska</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/care-and-feeding-of-pythons.html</guid><category>Culture</category><category>Community</category></item><item><title>Creating a culture of Computation - Scientific, Social and Humanitarian</title><link>https://pyvideo.org/pygotham-2016/creating-a-culture-of-computation-scientific-social-and-humanitarian.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python User Group at Queens College seeks to broadly distribute knowledge and enthusiasm about data and inquiry facillitated by compuation.  The official languages of the computer science department remain Java and C++ which certainly have their place.  However, we are trying to make Python the /lingua franca/ of student research.  Please come to hear our triumphs and failures.  The presentation will be given emacs org mode with an IPython shell and a Jupyter notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Misshula</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/creating-a-culture-of-computation-scientific-social-and-humanitarian.html</guid></item><item><title>Design for Non-Designers</title><link>https://pyvideo.org/pygotham-2016/design-for-non-designers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing, when you are a programmer, can be super intimidating. This talk will highlight the best ways to improve your design and UX skills so you can create an interfaces that are usable and at least semi-attractive without hiring a designer — guaranteed no designer-y jargon.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tracy Osborn</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/design-for-non-designers.html</guid><category>Design</category></item><item><title>Don't Overreact: Moving from Twisted to Asyncio</title><link>https://pyvideo.org/pygotham-2016/dont-overreact-moving-from-twisted-to-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk covers the basics of the Twisted and Asyncio libraries for asynchronous I/O and then delves into an experience porting the Kademlia distributed hash table (DHT) library from Twisted to Asyncio.  The talk will start with a high level discussion of asynchronous I/O and describe some example cases where it might be useful.  Concrete examples in both Twisted and Asyncio will be provided to demonstrate two different approaches to asynchronous libraries.  Then, in the primary focus of the talk, the process, challenges, and lessons from converting a complex library from Twisted to Asyncio will be covered.   This will include covering cases when a conversion should and shouldn't be undertaken, along with advice for anyone who wants to convert an existing library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Muller</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/dont-overreact-moving-from-twisted-to-asyncio.html</guid></item><item><title>Dplython: Intuitive Data Analysis, Funky Python</title><link>https://pyvideo.org/pygotham-2016/dplython-intuitive-data-analysis-funky-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of data analysis is to write code that manipulates data to give us answers. Ideally, we could translate our questions into code as quickly as we could think! Dplython is an open source Python library (inspired by R's &amp;quot;dplyr&amp;quot;) that improves productivity by constraining analysis to a core set of the most common data manipulation operations. By mapping the way we think about typical tasks to functions, dplython moves data analysis closer to &amp;quot;speed-of-thought.&amp;quot; In this talk, I'll describe the core ideas behind dplython, present a tutorial on using it for data analysis, and give a technical peek at Pythonic lazy evaluations created with operator overloading.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Riederer</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/dplython-intuitive-data-analysis-funky-python.html</guid><category>Data Analysis</category></item><item><title>Fighting the Flu with Machine Learning</title><link>https://pyvideo.org/pygotham-2016/fighting-the-flu-with-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone despises falling sick. In this talk, I will present how I used Python and machine learning to predict future sequences of the flu. My Random Forests model learns patterns in how the flu mutates from previous flu seasons, and creates decision trees based on those inferences. I will also cover how using a library (scikit-learn) was much easier and accurate than creating a Random Forests Classifier.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rohan Koodli</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/fighting-the-flu-with-machine-learning.html</guid><category>Machine Learning</category></item><item><title>Hacking/Typing/Writing at 200 Words Per Minute</title><link>https://pyvideo.org/pygotham-2016/hackingtypingwriting-at-200-words-per-minute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A decade ago, stenography (steno) was a proprietary, locked down technology with a heavy upfront learning cost and high dropout rate. Mirabai Knight, a true geek, was so frustrated after she became a professional stenographer that she hired a developer to help her make a FOSS steno solution. Now, the open steno community exists with her passion driving them forward. At the core is Plover, the free software that lets anyone try and learn stenography for free. Around it there are helper tools, learning resources, open hardware initiatives, and more. Ted manages the GitHub repository and is a student of the Open Steno Project himself. He will talk about Open Steno, where it came from, what it was like before it existed, what it's good for, how it works (as a Python application), and where it may go in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ted Morin</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/hackingtypingwriting-at-200-words-per-minute.html</guid><category>stenography</category></item><item><title>Hassle Free ETL with PySpark</title><link>https://pyvideo.org/pygotham-2016/hassle-free-etl-with-pyspark.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While the models of data science get all the press, the real work is in the maze of data preprocessing and pipelines. The goal of this talk is to get a glimpse into how you can use Python and the distributed power of Spark to simplify your (data) life, ditch the ETL boilerplate and get to the insights. We’ll intro PySpark and considerations in ETL jobs with respect to code structure and performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Howley</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/hassle-free-etl-with-pyspark.html</guid><category>spark</category></item><item><title>Introduction to Microservices with Nameko</title><link>https://pyvideo.org/pygotham-2016/introduction-to-microservices-with-nameko.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introductory overview of the microservice pattern for web applications, made concrete with working examples using Nameko.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Peterson</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/introduction-to-microservices-with-nameko.html</guid></item><item><title>Introduction to Neural Networks with Tensorflow</title><link>https://pyvideo.org/pygotham-2016/introduction-to-neural-networks-with-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks are a powerful machine learning model that are used in many applications, from computer vision and speech recognition to time series modeling and natural language processing. TensorFlow is an open source machine learning library developed by Google that can be used to easily create these types of models. I will give an overview of neural networks, and show how to implement and use these models using TensorFlow's Python API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Craig</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/introduction-to-neural-networks-with-tensorflow.html</guid><category>tensorflow</category></item><item><title>It's Raining, It's Pouring? A web and SMS application in Flask and Twilio to call Farmers.</title><link>https://pyvideo.org/pygotham-2016/its-raining-its-pouring-a-web-and-sms-application-in-flask-and-twilio-to-call-farmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about the use of python in building a web application with which we call farmers in less developed countries to capture rainfall occurrence. These data are used to complement lower resolution satellite data, and to potentially update climate models. The application is built in Flask and uses Twilio's API to deliver voicemails to farmers in less developed countries. Twilio's API records farmers' touch tone responses regarding the occurrence of rainfall.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katya Vasilaky</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/its-raining-its-pouring-a-web-and-sms-application-in-flask-and-twilio-to-call-farmers.html</guid><category>flask</category></item><item><title>Make data cleansing fun again with Pandas</title><link>https://pyvideo.org/pygotham-2016/make-data-cleansing-fun-again-with-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will provide a fast-paced introduction to cleansing text data with Python. We'll cover specific Pandas tools as well as strategies for managing the cleansing processes. Topics include: slicing/splitting/joining, transforming text, working with missing values, supplementing with additional sources, and dealing with duplicates.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Hooper</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/make-data-cleansing-fun-again-with-pandas.html</guid></item><item><title>Making Games</title><link>https://pyvideo.org/pygotham-2016/making-games.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From your first 'while True:' to your first framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piper Thunstrom</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/making-games.html</guid><category>Games</category></item><item><title>Migrating to Python, slowly</title><link>https://pyvideo.org/pygotham-2016/migrating-to-python-slowly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You probably already know the reasons why you should migrate your project to use Python 3. But if you're anything like me, that process seems perilous and disruptive, and you can't see a path to get there that doesn't involve pain and suffering. In this talk, I will present a strategy to help you migrate your project to Python 3, while minimizing risk and disruption.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roger López</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/migrating-to-python-slowly.html</guid></item><item><title>Playing with Python Bytecode</title><link>https://pyvideo.org/pygotham-2016/playing-with-python-bytecode.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered what Python is actually doing when it executes your code? Want to learn to hand-craft artisanal Python bytecode? In this talk, we explain CPython's internal code representation, and we demonstrate techniques for modifying code objects for fun and profit.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Sanderson</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/playing-with-python-bytecode.html</guid><category>bytecode</category></item><item><title>Postgres Present and Future</title><link>https://pyvideo.org/pygotham-2016/postgres-present-and-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Postgres 9.5 was just released a few months ago and has a number of of new improvements we'll walk through including new JSONB functions, some analytical tooling, and of course upsert. Then we'll dive into what's coming in Postgres 9.6, the next Postgres release. Finally, we'll round it out with some look at the ecosystem of extensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/postgres-present-and-future.html</guid></item><item><title>PyPy &amp; Us Could Be PyPy &amp; You</title><link>https://pyvideo.org/pygotham-2016/pypy-us-could-be-pypy-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've probably heard of PyPy. It's an interpreter that can make your Python fast. Really fast. We'll talk about some fundamentals &amp;amp; lessons learned from running PyPy in large scale production deployments for the last ~3 years.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian Berman</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/pypy-us-could-be-pypy-you.html</guid><category>pypy</category></item><item><title>Python for Home-Ec</title><link>https://pyvideo.org/pygotham-2016/python-for-home-ec.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever tried to make something with scrap wood, and wondered how to use it optimally? Do have a bunch of pickles and jams you made, and you want to eat them in an order that maximizes variety? These are real problems a co-worker of mine had, and we used Python to solve them. I'll show the data we started with, the solutions we came up with, and a bit of the computer science behind them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/python-for-home-ec.html</guid></item><item><title>Python for segregated signal averaging of cardiac baroreflex response in humans</title><link>https://pyvideo.org/pygotham-2016/python-for-segregated-signal-averaging-of-cardiac-baroreflex-response-in-humans.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The cardiovascular system is regulated through complex interactions between the central nervous system, the heart and systemic arteries. Quantifying the underlying interactions can provide detailed diagnostic information on an individual’s health. Python and libraries such as pandas, scipi, numpi and matplotlib provide the tools needed to process and quantify the relationship between recordings of multiple simultaneous cardiovascular signals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Witter</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/python-for-segregated-signal-averaging-of-cardiac-baroreflex-response-in-humans.html</guid></item><item><title>Python Performance Profiling: The Guts And The Glory</title><link>https://pyvideo.org/pygotham-2016/python-performance-profiling-the-guts-and-the-glory.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your Python program is too slow, and you need to optimize it. Where do you start? Optimization is a scientific investigation, just like debugging is: you generate hypotheses about how to make your program faster, then use benchmarks as the experiments that test your hypotheses. With the right tools, you can optimize your code where it counts. With the Python profiler “Yappi” to understand its features and limitations we’ll learn how to find the maximum performance wins with minimum effort.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">A. Jesse Jiryu Davis</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/python-performance-profiling-the-guts-and-the-glory.html</guid></item><item><title>Summarizing documents</title><link>https://pyvideo.org/pygotham-2016/summarizing-documents.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extractive summarization — finding the salient points in a document or corpus — is one of the most fundamental tasks in natural language processing. I’ll show you three ways to do it. One dates back to an IBM Journal article from 1958. One uses topic modeling, a technology from the 2000s. And one uses neural network-derived language embeddings and long short term memory networks — techniques that are only a couple of years old. I’ll explain the algorithms, show code and demos for all three, and I’ll discuss the engineering trade-offs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Williams</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/summarizing-documents.html</guid></item><item><title>Teaching and Doing Digital Humanities with Jupyter Notebooks</title><link>https://pyvideo.org/pygotham-2016/teaching-and-doing-digital-humanities-with-jupyter-notebooks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk discusses our experiences using Jupyter Notebooks for digital humanities tutorials, workshops, and scholarship.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Lavin</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/teaching-and-doing-digital-humanities-with-jupyter-notebooks.html</guid></item><item><title>Vector space modeling on music data</title><link>https://pyvideo.org/pygotham-2016/vector-space-modeling-on-music-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vector space modeling is a popular machine learning approach with a wide variety of applications, including product recommendations, information retrieval, and image classification. In this talk we will go into detail of some of our innovative approaches to building these vector spaces on music data at iHeartRadio. We will also give several real-world examples of how we use these models, highlighting their power, flexibility, and simplicity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Schmeier</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/vector-space-modeling-on-music-data.html</guid></item><item><title>wat‽ Mind-bending Edge Cases in Python</title><link>https://pyvideo.org/pygotham-2016/wat-mind-bending-edge-cases-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore ten of the most paradoxical and mind-numbing &amp;quot;Python wats&amp;quot; -- unique edge cases in the language. We'll even go so far as to re-implement the stdlib functions which cause them to understand just why they actually make sense.&lt;/p&gt;
&lt;p&gt;This is a fun and entertaining talk. In the end, attendees will gain insight into functions they use every day, including &lt;cite&gt;zip&lt;/cite&gt;, &lt;cite&gt;max&lt;/cite&gt;, &lt;cite&gt;min&lt;/cite&gt;, &lt;cite&gt;any&lt;/cite&gt;,  &lt;cite&gt;all&lt;/cite&gt;,  and more. Even the simplest of tools, when combined, can produce really weird results!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/wat-mind-bending-edge-cases-in-python.html</guid></item><item><title>Webscraping by Example: An introduction to BeautifulSoup</title><link>https://pyvideo.org/pygotham-2016/webscraping-by-example-an-introduction-to-beautifulsoup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a basic tutorial on the various features of the popular html parser BeautifulSoup.  In this tutorial, we will cover the basic functions and data structures that make up the BeautifulSoup package.  We will utilize this knowledge as we automate some data extraction tasks on the Buildings Information System (BIS) published by the New York City Department of Buildings.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stevie Slotterback</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/webscraping-by-example-an-introduction-to-beautifulsoup.html</guid><category>Scraping</category><category>BeautifulSoup</category></item><item><title>We're All Database Engineers (WADE)</title><link>https://pyvideo.org/pygotham-2016/were-all-database-engineers-wade.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;WADE is a distributed database framework providing strong consistency and high throughput using chain replication, in lieu of the traditional primary/backup model. Quite unlike traditional databases, WADE is a framework. Programmers implement the storage interface themselves and write custom query or update functions in Python that are executed by the database avoiding the dreaded read-write update cycle that degrades performance. Since the storage layer is implemented by the programmer it can be hand customized to the use case at hand using tools such as LevelDB, RocksDB, or whatever the programmer desires. However, WADE takes control at the networking layer handling replication, message forwarding amongst nodes, and fault tolerance in the event of failure so long as a few simple functions are implemented by the end user.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Kramer</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/were-all-database-engineers-wade.html</guid><category>database</category></item><item><title>Why and how to GraphQL</title><link>https://pyvideo.org/pygotham-2016/why-and-how-to-graphql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last year, GraphQL was introduced to the developer's world as the vaccine to our REST APIs addiction but looks like not many of us are looking for a cure. Why would we? What are the main differences in the development and how to get started with GraphQL on Python/Django are questions that are going to be answered during this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Menezes</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/why-and-how-to-graphql.html</guid><category>GraphQL</category></item><item><title>Write Less Code with Algebra!</title><link>https://pyvideo.org/pygotham-2016/write-less-code-with-algebra.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will describe an ongoing effort to treat agent interactions as abstract algebraic structures. The primary motivations for this attempt it are to increase code reuse, and ultimately to enable the creation of agent-based models through the filling in of forms, choosing among various module operations and chaining them together to produce customized agent behavior.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gene Callahan</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/write-less-code-with-algebra.html</guid><category>Mathematics</category></item><item><title>Modeling State in Text Adventure Games</title><link>https://pyvideo.org/pygotham-2016/modeling-state-in-text-adventure-games.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Although text adventure games, like Colossal Cave Adventure or Zork, don't have graphics, they still have in-game objects to model. I've been working on a framework for writing text adventure games in Python, which means setting on a system for modeling stateful things. In this talk, I'll discuss choosing a design pattern, modifying the pattern to work better in Python, and then use it to make a mini text adventure game!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie Silverio</dc:creator><pubDate>Fri, 17 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-17:pygotham-2016/modeling-state-in-text-adventure-games.html</guid></item></channel></rss>