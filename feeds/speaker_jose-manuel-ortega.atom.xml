<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jose-manuel-ortega.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Darkweb + Python: discover, analyze and extract information from hidden services</title><link href="https://pyvideo.org/pycon-italia-2019/darkweb-python-discover-analyze-and-extract-information-from-hidden-services.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/darkweb-python-discover-analyze-and-extract-information-from-hidden-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will start explaining how Tor project can help us to the
research and development of tools for online anonymity and privacy of
its users while surfing the Internet, by establishing virtual circuits
between the different nodes that make up the Tor network. In addition,
we will review how Tor works from anonymity point of view, preventing
websites from tracking you. Python help us to automate the process to
search an discover hidden services thanks to packages like
requests,requesocks and sockspy. At this point we will review the
crawling process and show tools in python ecosystem available for this
task such as Deep Explorer(&lt;a class="reference external" href="https://github.com/blueudp/deep-explorer"&gt;https://github.com/blueudp/deep-explorer&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;These could be the talking points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Tor project and hidden services&lt;/li&gt;
&lt;li&gt;Discovering hidden services.&lt;/li&gt;
&lt;li&gt;Modules and packages we can use in python for connecting with Tor
network&lt;/li&gt;
&lt;li&gt;Tools that allow search hidden services and atomate the crawling
process in Tor network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1563"&gt;https://python.it/feedback-1563&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="tor"></category><category term="security"></category><category term="privacy"></category><category term="hacking"></category><category term="crawler"></category></entry><entry><title>Testing python security</title><link href="https://pyvideo.org/pycon-es-2018/testing-python-security.html" rel="alternate"></link><published>2018-10-07T00:00:00+00:00</published><updated>2018-10-07T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2018-10-07:pycon-es-2018/testing-python-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will highlight the biggest problems we can find in python functions, how to use then in a secure way and tools and services that help you identify vulnerabilities in the python source code.&lt;/p&gt;
&lt;p&gt;These could be the main talking points:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to secure programming in python.&lt;/li&gt;
&lt;li&gt;Introduce dangerous functions for code injection and how we can solve this issues from a security point of view.&lt;/li&gt;
&lt;li&gt;Common attack vectors on Python applications like Remote Command Execution and SQL injection.&lt;/li&gt;
&lt;li&gt;Best practices for avoid execution of malicious commands.&lt;/li&gt;
&lt;li&gt;Tools that help us to protect and obfuscate our source code.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Testing python security</title><link href="https://pyvideo.org/pycon-ireland-2018/testing-python-security.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/testing-python-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a language that in a easy way allows to scale up from starter projects to complex applications for data processing and serving dynamic web pages. But as you increase complexity in your applications, it can be easy to introduce potential problems and vulnerabilities. In this talk, I will highlight the biggest problems we can find in python functions, how to use then in a secure way and tools and services that help you identify vulnerabilities in the python source code. These could be the main talking points: -Introduction to secure programming in python. -Introduce dangerous functions for code inyection and how we can solve this issues from a security point of view. -Common attack vectors on Python applications like Remote Command Execution and SQL injection -Best practices for avoid execution of malicious commands -Tools that help us to protect and obfuscate our source code&lt;/p&gt;
</summary><category term="security"></category></entry><entry><title>Microservices and Serverless in Python projects</title><link href="https://pyvideo.org/europython-2018/microservices-and-serverless-in-python-projects.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/microservices-and-serverless-in-python-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monoliths, microservices and now Serverless. Function as a Service
(FaaS) platforms give us new ways to attack old problems. The
possibility of executing functions as a service allows designing
scalable and highly parallel applications, but on the other hand, this
kind of applications require a particular programming style. For
example, bundling dependencies and managing state is not trivial.&lt;/p&gt;
&lt;p&gt;However, there are plenty of tools and frameworks to help you code
serverless applications with Python, and once you get started it is not
complicated.&lt;/p&gt;
&lt;p&gt;In this talk we will mention the advantages of Serverless and we will
focus on the situations in which we can introduce it into our Python
projects. We will use AWS Lambda for the examples.&lt;/p&gt;
&lt;p&gt;These could be the main talking points:&lt;/p&gt;
&lt;p&gt;Introducing Serverless and Function as a Service (FaaS) in Python
projects Advantages of Microservices and Serverless AWS Lambda functions
with chalice Testing AWS lambda with docker&lt;/p&gt;
</summary></entry><entry><title>Discovering python search engine</title><link href="https://pyvideo.org/pycon-es-2017/discovering-python-search-engine.html" rel="alternate"></link><published>2017-09-23T17:30:00+02:00</published><updated>2017-09-23T17:30:00+02:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/discovering-python-search-engine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducción a los principales motores de búsqueda que podemos encontrar en python comentando las principales características de cada uno de ellos. Se comentarán los principales motores de búsqueda que podemos integrar en nuestras aplicaciones como elasticsearch,Whoosh y PostGres Full text para aplicaciones web con django.&lt;/p&gt;
</summary></entry><entry><title>OSINT Tools for Security AuditingOpen Source Intelligence with python tools</title><link href="https://pyvideo.org/fosdem-2017/osint-tools-for-security-auditingopen-source-intelligence-with-python-tools.html" rel="alternate"></link><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2017-02-05:fosdem-2017/osint-tools-for-security-auditingopen-source-intelligence-with-python-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk would aim about making an introduction to open source intelligence automation tools(OSINT)  developed in Python, commenting the process we can follow to obtain, analyze and exploitpublic information in social networks and public servers.The final objective is obtain the  maximum possible of knowledge in the context we are auditing.&lt;/p&gt;
&lt;p&gt;The talking points could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction searching information from multiples sources with OSINT tools.&lt;/li&gt;
&lt;li&gt;OSINT tools developed with python for extracting public information from servers and domains.&lt;/li&gt;
&lt;li&gt;Advantages and limitations these tools from the user point of view.&lt;/li&gt;
&lt;li&gt;Comment how these tools are developed and the main modules used in their development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the tools to comment are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Censys and Shodan Python API as search engine server information.&lt;/li&gt;
&lt;li&gt;SpiderFoot and recon-ng as a tools for extracting information from multiple sources and automate the footprinting process.&lt;/li&gt;
&lt;li&gt;the Harvester as Python script for extracting emails and hostnames in a particular domain.&lt;/li&gt;
&lt;li&gt;Osrframework and Maltego OSINT visualisation tool&lt;/li&gt;
&lt;li&gt;Libraries and modules for collecting information from Tor and ZeroNet networks&lt;/li&gt;
&lt;li&gt;Tinfoleak and Tweepy as Python scripts for data extraction on twitter.&lt;/li&gt;
&lt;li&gt;FullContact API for obtain social networks profiles associated with an email address.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>OSINT Tools for security auditing</title><link href="https://pyvideo.org/pycon-es-2016/osint-tools-for-security-auditing.html" rel="alternate"></link><published>2016-10-09T00:00:00+00:00</published><updated>2016-10-09T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2016-10-09:pycon-es-2016/osint-tools-for-security-auditing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talking points could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction searching information from multiples sources with OSINT tools.&lt;/li&gt;
&lt;li&gt;OSINT tools developed with python for extracting public information from servers and domains.&lt;/li&gt;
&lt;li&gt;Advantages and limitations these tools from the user point of view.&lt;/li&gt;
&lt;li&gt;Comment how these tools are developed and the main modules used in their development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of the tools to comment are:&lt;/p&gt;
&lt;p&gt;Shodan Python API as search engine server information. Tinfoleak and Tweepy as Python scripts for data extraction on twitter. SpiderFoot as a tool for extract information from multiple sources. the Harvester as Python script for extracting emails and hostnames in a particular domain.&lt;/p&gt;
&lt;p&gt;This talk's resources available at &lt;a class="reference external" href="https://github.com/jmortega/osint_tools_security_auditing"&gt;https://github.com/jmortega/osint_tools_security_auditing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Webscraping with Asyncio</title><link href="https://pyvideo.org/pycon-ireland-2016/webscraping-with-asyncio.html" rel="alternate"></link><published>2016-11-06T00:00:00+00:00</published><updated>2016-11-06T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2016-11-06:pycon-ireland-2016/webscraping-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If we want to extract the contents of a website automating information
extraction, often we find that the website does not offer any API to
get the data you need and it is necessary use scraping techniques to
recover data from a Web automatically. Some of the most powerful tools
for extracting the data in web pages can be found in python ecosystem.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Introduction to webscraping and python tools&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of the most powerful tools to extract data can be found in the
python ecosystem, among which we highlight Beautiful soup, Pyquery and
Scrapy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Asyncio with aiohttp for asyncronous requests&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will make an introduction to asyncio and aiohttp modules explaining
the basic concepts like coroutines and event loops and try to compare
them with requests module. The most important is understand why the
union asyncio + aiohttp has a better performance than requests module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Asynchronous scraping data&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will show an example integrating some of the scraping tools
commented before like BeautifulSoup or Scrapy with asyncio + aiohttp
and obtain the performance improvement comparing with Requests module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Comparing Python ORM</title><link href="https://pyvideo.org/pycon-es-2015/comparing-python-orm.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/comparing-python-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El objetivo de la charla es mostrar algunos de los sistemas ORM que podemos encontrar dentro del ecosistema de Python como Sqlalchemy, Storm, Sqlobject, Django ORM,realizando una comparativa entre ellos,mostrando ventajas y desventajas de cada uno.
Algunas de las características a comparar son performance, eficiencia, tratamiento de caché, consultas.
Por ultimo, se comentarán las ventajas que aportan estos sistemas para la seguridad de la aplicaciones web con Django.&lt;/p&gt;
</summary><category term="Track Avanzado"></category></entry><entry><title>Seguridad y criptografía en Python</title><link href="https://pyvideo.org/pycon-es-2015/seguridad-y-criptografia-en-python.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/seguridad-y-criptografia-en-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La charla tendrá como objetivo introducir la criptografía y la seguridad desde el punto de vista del desarrollador, mostrando maneras de cifrar la información con scripts de Python y la información más sensible en aplicaciones web usando Django,comentando la principales vulnerabilidades que podemos encontrar en un sitio web(SQL injection,XSS, CSRF) y cómo Django nos puede ayudar a evitar ataques que se aprovechen de estas vulnerabilidades.&lt;/p&gt;
</summary><category term="Track Científico"></category></entry><entry><title>Hacking ético con herramientas Python</title><link href="https://pyvideo.org/europython-2016/hacking-etico-con-herramientas-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/hacking-etico-con-herramientas-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jose Manuel Ortega - Hacking ético con herramientas Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/hacking-etico-con-herramientas-python"&gt;https://ep2016.europython.eu//conference/talks/hacking-etico-con-herramientas-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El objetivo de la charla sería mostrar las herramientas que disponemos
dentro de la propia API de Python y librerías de terceros para
desarrollar nuestras propias herramientas que permitan realizar
pruebas de seguridad y de pentesting de las aplicaciones.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python se ha convertido en el lenguaje más usado para desarrollar
herramientas dentro del ámbito de la seguridad.
Muchas de las herramientas que podemos encontrar hoy en día como
escáner de puertos, análisis de vulnerabilidades, ataques por fuerza
bruta y hacking de passwords, se han escrito en este lenguaje, además
de ofrecer un ecosistema de herramientas para realizar pruebas de
seguridad y de pentesting de aplicaciones.&lt;/p&gt;
&lt;p&gt;Entre los puntos a tratar podríamos destacar:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Introducir Python como lenguaje de desarrollo de herramientas de seguridad&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introducir librerías para obtener información de nuestro objetivo como Shodan, pygeocoder, pygeoip&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Análisis y extracción de metadatos en Python en imágenes y documentos&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Análisis de puertos con herramientas como python-nmap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Ethical hacking with Python tools</title><link href="https://pyvideo.org/europython-2016/ethical-hacking-with-python-tools.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/ethical-hacking-with-python-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jose Manuel Ortega - Ethical hacking with Python tools
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/ethical-hacking-with-python-tools"&gt;https://ep2016.europython.eu//conference/talks/ethical-hacking-with-python-tools&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python, as well as offering an ecosystem of tools for testing security
and application pentesting.Python offers a tool ecosystem for
developing our own tools security for testing applications and the
servers security,identifying information about servers and potential
vulnerabilities.&lt;/p&gt;
&lt;p&gt;The ultimate objective is show a pentesting tool integrating some of
the modules commented and try a demo showing info about our domain
target and find vulnerabilities in it,&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Nowdays, Python is the language more used for developing tools within
the field of security. Many of the tools can be found today as port
scanner, vulnerability analysis, brute force attacks and hacking of
passwords are written in python. The goal of the talk would show the
tools available within the Python API and third-party modules  for
developing our own pentesting and security tools and finally show a
pentesting tool integrating some of the modules.&lt;/p&gt;
&lt;p&gt;The main topics of the talk could include:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Enter Python language as platform for developing security tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduction about the main libraries we can use for introducing in
development of security    tools such as socket and requests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Libraries for obtain servers information such as Shodan,
pygeocoder,pythonwhois&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shodan is a search engine that lets you find specific computers
(routers, servers, etc.) and get information about ports and services
that are opened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.Analysis and metadata extraction in Python for images and documents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Show tools for scraping web data and obtain metadata information  in
documents and images&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.Port scanning with tools like python-nmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With python-nmap module we can check ports open for a target ip or domain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.Check vulnerabilities in FTP and SSH servers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With libraries like ftplib and paramiko we can check if the server is
vulnerable to ftp and ssh anonymous connections.&lt;/p&gt;
</summary></entry><entry><title>Python tools for webscraping</title><link href="https://pyvideo.org/pydata-madrid-2016/python-tools-for-webscraping.html" rel="alternate"></link><published>2016-04-28T00:00:00+00:00</published><updated>2016-04-28T00:00:00+00:00</updated><author><name>José Manuel Ortega</name></author><id>tag:pyvideo.org,2016-04-28:pydata-madrid-2016/python-tools-for-webscraping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Madrid 2016&lt;/p&gt;
&lt;p&gt;Most of the talks and workshop tutorials can be found here: &lt;a class="reference external" href="https://github.com/PyDataMadrid2016/Conference-Info"&gt;https://github.com/PyDataMadrid2016/Conference-Info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we want to extract the contents of a website automating information extraction, often we find that the website does not offer any API to get the data you need and It is necessary use scraping techniques to recover data from a Web automatically. Some of the most powerful tools for extracting the data in web pages can be found in the python ecosystem.&lt;/p&gt;
&lt;p&gt;Introduction to webscraping&lt;/p&gt;
&lt;p&gt;WebScraping is the process of collecting or extracting data from web pages automatically. Nowdays is a very active field and developing shared goals with the semantic web field, natural language processing,artificial intelligence and human computer interaction.&lt;/p&gt;
&lt;p&gt;Python tools for webscraping&lt;/p&gt;
&lt;p&gt;Some of the most powerful tools to extract data can be found in the python ecosystem, among which we highlight Beautiful soup, Webscraping, PyQuery and Scrapy.&lt;/p&gt;
&lt;p&gt;Comparison between webscraping tools&lt;/p&gt;
&lt;p&gt;A comparison of the mentioned tools will be made, showing advantages and disadvantages of each one,highlighting the elements of each one to perform data extraction as regular expressions,css selectors and xpath expressions.&lt;/p&gt;
&lt;p&gt;Project example with scrapy&lt;/p&gt;
&lt;p&gt;Scrapy is a framework written in python for extraction automated data that can be used for a wide range of applications such as data mining processing. When using Scrapy we have to create a project, and each project consists of:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Items: We define the elements to be extracted.&lt;/li&gt;
&lt;li&gt;Spiders: The heart of the project, here we define the extract data procedure.&lt;/li&gt;
&lt;li&gt;Pipelines: Are the proceeds to analyze elements: data validation, cleansing html code outline&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Introduction to webscraping(5 min)
I will mention the main scraping techniques&lt;/p&gt;
&lt;p&gt;1.1. WebScraping&lt;/p&gt;
&lt;p&gt;1.2. Screen scraping&lt;/p&gt;
&lt;p&gt;1.3. Report mining&lt;/p&gt;
&lt;p&gt;1.4. Spiders&lt;/p&gt;
&lt;p&gt;Python tools for webscraping(10 min)
For each library I will make and introduction with a basic example. In some examples I will use requests library for sending HTTP requests&lt;/p&gt;
&lt;p&gt;2.1. BeautifulSoup&lt;/p&gt;
&lt;p&gt;2.2. Webscraping&lt;/p&gt;
&lt;p&gt;2.2. PyQuery&lt;/p&gt;
&lt;p&gt;Comparing scraping tools(5 min)&lt;/p&gt;
&lt;p&gt;3.1.Introduction to techniques for obtain data from web pages like regular expressions,css selectors, xpath expressions&lt;/p&gt;
&lt;p&gt;3.2.Comparative table comparing main features of each tool&lt;/p&gt;
&lt;p&gt;Project example with scrapy(10 min)&lt;/p&gt;
&lt;p&gt;4.1.Project structure with scrapy&lt;/p&gt;
&lt;p&gt;4.2.Components(Scheduler,Spider,Pipeline,Middlewares)&lt;/p&gt;
&lt;p&gt;4.3.Generating reports in json,csv and xml formats&lt;/p&gt;
</summary></entry></feed>