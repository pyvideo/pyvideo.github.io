<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Koudai Aono</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 17 May 2024 00:00:00 +0000</lastBuildDate><item><title>Enhancing Decorators with Type Annotations: Techniques and Best Practices</title><link>https://pyvideo.org/pycon-us-2024/enhancing-decorators-with-type-annotations-techniques-and-best-practices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are powerful, magical syntax sugar, offering a convenient way
to wrap and enhance functions. But sometimes, it's not clear how to use
a defined decorator.&lt;/p&gt;
&lt;p&gt;What arguments should we pass to a given decorator? What functions does
it target? Does it change the return type of the wrapped function? Have
you ever faced these questions?&lt;/p&gt;
&lt;p&gt;If proper type hints are defined for decorators, static type checkers
like mypy and pyright IDEs will point out the errors in usage. Thus,
guiding you on the right path by catching bugs earlier, reducing
unnecessary debugging and unexpected runtime behaviour.&lt;/p&gt;
&lt;p&gt;This talk will step you through type definitions utilizing
&lt;tt class="docutils literal"&gt;typing.TypeVarTuple&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;typing.Protocol&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;typing.ParamSpec&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;typing.Concatenate&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Type Parameter Syntax&lt;/tt&gt;, and more, all of
which are practical to implement and can make your project robust!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Koudai Aono</dc:creator><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-17:/pycon-us-2024/enhancing-decorators-with-type-annotations-techniques-and-best-practices.html</guid><category>PyCon US 2024</category></item></channel></rss>