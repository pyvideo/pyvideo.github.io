<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_mobile.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Build Native Mobile Apps with Python and BeeWare</title><link href="https://pyvideo.org/python-frederick/build-native-mobile-apps-with-python-and-beeware.html" rel="alternate"></link><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><author><name>Bob Marchese</name></author><id>tag:pyvideo.org,2018-10-11:python-frederick/build-native-mobile-apps-with-python-and-beeware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the October 2018 Python Frederick event, Bob showed the group how we can build native mobile applications that are written completely in Python using the BeeWare suite of tools&lt;/p&gt;
</summary><category term="beeware"></category><category term="mobile"></category></entry><entry><title>Better WebSockets - Server-Sent Events, a carefree alternative</title><link href="https://pyvideo.org/europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Andrei Neagu</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/better-websockets-server-sent-events-a-carefree-alternative.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever found yourself in a situation where you:&lt;/div&gt;
&lt;div class="line"&gt;- had to use WbSockets?&lt;/div&gt;
&lt;div class="line"&gt;- had to to create a separate project and had the issue of interfacing
both?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle disconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle reconnections?&lt;/div&gt;
&lt;div class="line"&gt;- had to handle all the above and scale WebSockets?&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If your experience was horrible (like mine was), we shall take a look at
Server-Sent Events, an alternative to WebSockets.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The following arguments will be discussed:&lt;/div&gt;
&lt;div class="line"&gt;- intro to the subject&lt;/div&gt;
&lt;div class="line"&gt;- inner workings&lt;/div&gt;
&lt;div class="line"&gt;- differences from WebSockets&lt;/div&gt;
&lt;div class="line"&gt;- implementation explanation for a generic HTTP server in Python&lt;/div&gt;
&lt;div class="line"&gt;- use cases&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Mobile"></category><category term="System Architecture"></category><category term="Web"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs"></category></entry><entry><title>Kivy, Python RAD per lo sviluppo di applicazioni mobile e non solo</title><link href="https://pyvideo.org/europython-2013/kivy-python-rad-per-lo-sviluppo-di-applicazioni-mobile-e-non-solo.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Davide Corio</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/kivy-python-rad-per-lo-sviluppo-di-applicazioni-mobile-e-non-solo.html</id><summary type="html"></summary><category term="mobile"></category><category term="kivy-ios"></category><category term="kivy"></category></entry><entry><title>Server side story</title><link href="https://pyvideo.org/europython-2013/server-side-story.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Simone Deponti</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/server-side-story.html</id><summary type="html"></summary><category term="HTTP"></category><category term="networking"></category><category term="deploy"></category><category term="mobile"></category><category term="javascript"></category><category term="desktop"></category><category term="sysadmin"></category><category term="json"></category><category term="gevent"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="application-design"></category><category term="websockets"></category><category term="architecture"></category></entry><entry><title>Flask + PWA - Mobile Applications</title><link href="https://pyvideo.org/flask-conf-2018/flask-pwa-mobile-applications.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>Luiz Lima</name></author><id>tag:pyvideo.org,2018-08-25:flask-conf-2018/flask-pwa-mobile-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask + PWA - Mobile Applications - Palestra de Luiz Lima na Flask Conf 2018.&lt;/p&gt;
</summary><category term="flask"></category><category term="pwa"></category><category term="mobile"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 1</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-1.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 2</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-2.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 3</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-3.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - part4</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part4.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part4.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Controlling apples with snakes: Automating mobile apps with Appium</title><link href="https://pyvideo.org/pycon-us-2018/controlling-apples-with-snakes-automating-mobile-apps-with-appium.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Nir Arad</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/controlling-apples-with-snakes-automating-mobile-apps-with-appium.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing mobile applications is hard. Testing manually is nearly impossible.
That’s where automated testing shines. Just sit back and watch the machine go!
Python is a very powerful language for writing automated tests, but since Python is not installed on mobile platforms, we need to find a way to remotely control and monitor the device.
But how do we automate a device remotely? The answer is Appium.&lt;/p&gt;
&lt;p&gt;In this talk I will go over the process of deploying and testing iOS (or Android) applications, and how to work with Appium to easily generate Python 3 code for testing your application.&lt;/p&gt;
</summary><category term="appium"></category><category term="testing"></category><category term="mobile"></category></entry><entry><title>What is Django's Role on Mobile?</title><link href="https://pyvideo.org/djangocon-us-2012/what-is-djangos-role-on-mobile.html" rel="alternate"></link><published>2012-09-05T00:00:00+00:00</published><updated>2012-09-05T00:00:00+00:00</updated><author><name>Eric Florenzano</name></author><id>tag:pyvideo.org,2012-09-05:djangocon-us-2012/what-is-djangos-role-on-mobile.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mobile grows bigger each year, but we love the web, and Django. Where
does our knowledge and experience fit in this new ecosystem? What kind
of a role can Django play on fast-growing platforms like iOS and
Android?&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="intro"&gt;
&lt;h4&gt;Intro&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django's version of MVC vs. iOS/Android version of MVC&lt;/li&gt;
&lt;li&gt;How the platforms differ from Django&lt;/li&gt;
&lt;li&gt;What is similar to Django&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="api"&gt;
&lt;h4&gt;API&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easiest way for Django to be used in conjunction with mobile today&lt;/li&gt;
&lt;li&gt;Big fat requests with lots of data preferable to many smaller
requests&lt;/li&gt;
&lt;li&gt;Authentication best practices for mobile backend APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="phonegap"&gt;
&lt;h4&gt;PhoneGap&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Can actually use Django to build your mobile app today&lt;/li&gt;
&lt;li&gt;JavaScript tricks to get around things like tap delay&lt;/li&gt;
&lt;li&gt;How much Django is really used vs. how much JavaScript&lt;/li&gt;
&lt;li&gt;Offline caching&lt;/li&gt;
&lt;li&gt;Performance issues with this approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h4&gt;Future&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick look at RubyMotion&lt;/li&gt;
&lt;li&gt;Turns out it's possible to cross-compile Python for iOS&lt;/li&gt;
&lt;li&gt;Android has Py4A (including interpreter embedding)&lt;/li&gt;
&lt;li&gt;What can be done with this? Mobile Django.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;They are different worlds, need to be careful to respect both&lt;/li&gt;
&lt;li&gt;Even today Django proves useful as an API layer&lt;/li&gt;
&lt;li&gt;Django web apps in native wrapper can be a solution, albeit with its
issues&lt;/li&gt;
&lt;li&gt;As hardware gets better, we may see something like an embedded Django&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="mobile"></category></entry><entry><title>Developing Desktop and mobile apps with PySide and QML</title><link href="https://pyvideo.org/europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Thomas Perl</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Thomas Perl - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of
QML in Qt 4.7, this now gives developers a chance to develop
touch-based, rich applications directly with Python. This talk
introduces PySide development, combined with QML, and shows some
real-world examples of mobile PySide applications.&lt;/p&gt;
&lt;p&gt;This talk is based on my PySide/QML on &lt;a class="reference external" href="http://thp.io/2010%20/meego-python/"&gt;MeeGo
tutorials&lt;/a&gt;, and shows some of
the possibilities. It is aimed at Python developers looking for a GUI
toolkit to create fluent, hardware-accelerated cross-platform UIs using
QML.&lt;/p&gt;
&lt;p&gt;Materials available at: &lt;a class="reference external" href="http://thp.io/2011/europython/"&gt;http://thp.io/2011/europython/&lt;/a&gt;&lt;/p&gt;
</summary><category term="gui"></category><category term="mobile"></category><category term="pyside"></category><category term="qt"></category></entry><entry><title>Rubrica indirizzi all'ennesima potenza</title><link href="https://pyvideo.org/europython-2011/rubrica-indirizzi-allennesima-potenza.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Davide Corio</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/rubrica-indirizzi-allennesima-potenza.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Davide Corio - 23 June 2011 in &amp;quot;Track Italiana Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avete presente il classico, noioso, banale esempio di rubrica indirizzi
in Python? Si? Quindi, diamo un'occhiata ad un nuovissimo, complicato ed
entusiasmante modo di tenere la nostra rubrica e il nostro dispositivo
mobile sincronizzati. Mischieremo differenti tecnologie come Zope,
OpenERP, Funambol, XML-RPC e Json. Tutto per rendere la vostra vita più
elettrizzante!&lt;/p&gt;
</summary><category term="mobile"></category></entry><entry><title>Saving Gaia with jQuery Mobile and GeoDjango</title><link href="https://pyvideo.org/europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Calvin Cheng</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/saving-gaia-with-jquery-mobile-and-geodjango.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Calvin Cheng - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We had the privilege of working on a mobile web application for ETH
Zurich, funded by ETH North-South Centre, using Django/Postgis, jQuery
mobile and Openlayers technology.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to share what we have learnt technically and
the experiences and fun we had with polygon creation on a map and saving
polygon vertices and related data into our spatial database via
geodjango.&lt;/p&gt;
&lt;p&gt;This mobile web app is developed based on research by Dr Koh of ETH
Zurich, specializing on Matrix-calibrated and edge-corrected
species-area models that allow users to evaluate the biodiversity
consequence and trade-offs of land- use decisions. The development and
description of these models were published in Conserv. Biol. 24, 994 and
J. Appl. Ecol. 47, 1063.&lt;/p&gt;
</summary><category term="database"></category><category term="geodjango"></category><category term="jquery"></category><category term="mobile"></category><category term="spatial"></category><category term="web"></category></entry><entry><title>An iPhone-Python love affair: Building APIs for mobile</title><link href="https://pyvideo.org/europython-2011/an-iphone-python-love-affair-building-apis-for-m.html" rel="alternate"></link><published>2011-07-07T00:00:00+00:00</published><updated>2011-07-07T00:00:00+00:00</updated><author><name>Anna Callahan</name></author><id>tag:pyvideo.org,2011-07-07:europython-2011/an-iphone-python-love-affair-building-apis-for-m.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Anna Callahan,Nate Aune - 24 June 2011 in &amp;quot;Track
Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mobile apps are the hot item of the day - and the best mobile apps are
backed by a great website. Python web developer Nate Aune and iPhone
developer Anna Callahan will show you how we built a simple music web
app in Django with a native iPhone app that communicates with it.
Attendees of this talk will see a concrete case study of building an
application that exposes an API for mobile devices.&lt;/p&gt;
&lt;p&gt;Our web app exposes a JSON API for sending and receiving data from the
mobile device. We’ll talk about why we chose Django and the TastyPie API
package, and discuss other Python-based frameworks that could be used to
build the API such as Pyramid, Flask and Bottle. We’ll also compare REST
and custom APIs to understand best practices for building APIs designed
for mobile devices.&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category><category term="flask"></category><category term="json"></category><category term="mobile"></category><category term="rest"></category><category term="tastypie"></category><category term="web"></category></entry><entry><title>Kivy und Arduino - Robotersteuerung mit dem Smartphone</title><link href="https://pyvideo.org/pycon-de-2013/kivy-und-arduino-robotersteuerung-mit-dem-smart.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Andreas Bresser</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/kivy-und-arduino-robotersteuerung-mit-dem-smart.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In diesem Vortrag wird gezeigt, wie man ein Robotik-Board (Arduino) über
Bluetooth durch ein Smartphone steuern kann. Hierbei kommt Kivy als
Framework für die Grafische Oberfläche zum Einsatz.&lt;/p&gt;
</summary><category term="arduino"></category><category term="bluetooth"></category><category term="kivy"></category><category term="mobile"></category><category term="robot"></category><category term="smartphone"></category></entry><entry><title>Schlangenhochzeit in der Wolke</title><link href="https://pyvideo.org/pycon-de-2013/schlangenhochzeit-in-der-wolke.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Jens Klein</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/schlangenhochzeit-in-der-wolke.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Googles Appengine steht für hochskalierbare Anwendungen in der Cloud.
Locandy ist unser Startup für mobile Location based Games.&lt;/p&gt;
&lt;p&gt;Auf der Cloud-Platform mit ihrer sehr restriktiven Python-Umgebung haben
wir das Portal für Spieler, Autoren und Business Kunden umgesetzt.
Browser, Mobile-App und PDF-Server werden damit bedient.&lt;/p&gt;
&lt;p&gt;Dabei ist nicht alles so rund gelaufen, wie wir es gerne gehabt hätten.
Die Probleme wurden gelöst - dank Python mit seinem starken
Werkzeugkasten.&lt;/p&gt;
&lt;p&gt;Der Vortrag geht kurz auf die Anforderungen ein, zeigt auf welche
Probleme es gab und wie wir sie gelöst haben. In einem Github Repository
stelle ich ein Buildout inkl. kleiner Beispielapplikation mit den
meisten dieser Lösungen zur Verfügung.&lt;/p&gt;
</summary><category term="appengine"></category><category term="buildout"></category><category term="cloud"></category><category term="gruntjs"></category><category term="mobile"></category><category term="plone.testing"></category><category term="pyramid"></category><category term="testlayers"></category><category term="velruse"></category><category term="WebTest"></category></entry><entry><title>Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Ivan Beschastnikh</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python-based Platform for Easy Development and Deployment of Networked
Systems and Applications&lt;/p&gt;
&lt;p&gt;Presented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos&lt;/p&gt;
&lt;p&gt;Seattle is an open-source platform for developing and deploying
networked applications. Core feature of Seattle is that it allows safe
execution of untrusted code on end-user systems. In our talk we look at
how we used Python to build a safe, restricted code execution
environment for Seattle that not only provides execution safety but also
enforces strict resource consumption limits. In addition, Seattle
includes a high-level API to hide inconsistent OS-specific behaviors
from developers. What results is a platform that welcomes the
participation of end-user machines for general-purpose distributed
programming and creates new possibilities for developers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://seattle.cs.washington.edu/"&gt;http://seattle.cs.washington.edu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Beginning of talk missing, due to technical
problems.]&lt;/p&gt;
</summary><category term="api"></category><category term="language"></category><category term="mobile"></category><category term="network"></category><category term="p2p"></category><category term="pycon"></category><category term="pycon2010"></category><category term="seattle"></category><category term="security"></category><category term="university"></category></entry></feed>