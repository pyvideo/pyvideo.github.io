<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_claus.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-26T14:30:00+01:00</updated><entry><title>Implementing Custom Containers</title><link href="https://pyvideo.org/pycon-uk-2017/implementing-custom-containers.html" rel="alternate"></link><published>2017-10-26T14:30:00+01:00</published><updated>2017-10-26T14:30:00+01:00</updated><author><name>Claus</name></author><id>tag:pyvideo.org,2017-10-26:pycon-uk-2017/implementing-custom-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One often encounters the following situation(s):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want to represent my data,&lt;/li&gt;
&lt;li&gt;I want to read/write, load/dump or somehow get/save data,&lt;/li&gt;
&lt;li&gt;I want to iterate over data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of inventing a completely new class that provides required functionality, it may make sense to mimic or subclass an already existing collection, e.g. a dict, add custom dunder (double underscore) methods and quickly end up with a container that not only serves your purpose but is also very natural to use.&lt;/p&gt;
&lt;p&gt;After a short introduction in which we clarify some notions, we focus on two sample use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to extend a tuple to represent data?&lt;/li&gt;
&lt;li&gt;How to implement a dict-like container for data handling?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout the talk we will discover some of the most often needed dunder methods that define a container's behaviour.&lt;/p&gt;
</summary></entry></feed>