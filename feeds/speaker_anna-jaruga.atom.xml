<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anna-jaruga.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-02T09:00:00+00:00</updated><entry><title>To trust or to test?: Automated testing of scientific projects with pytest</title><link href="https://pyvideo.org/pycon-us-2019/to-trust-or-to-test-automated-testing-of-scientific-projects-with-pytest.html" rel="alternate"></link><published>2019-05-02T09:00:00+00:00</published><updated>2019-05-02T09:00:00+00:00</updated><author><name>Dorota Jarecka</name></author><id>tag:pyvideo.org,2019-05-02:pycon-us-2019/to-trust-or-to-test-automated-testing-of-scientific-projects-with-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many researchers rely strongly on numerical computations. Unfortunately,
testing scientific code is a hard task. Often there is no ground truth
available for comparison and the end result of the simulation is unknown
even to the code developer herself/himself. Often the user-base of the
scientific code is small and the work environment does not provide
incentives for testing.&lt;/p&gt;
&lt;p&gt;However, there are always parts of the code that are relatively easy to
cover by Unit Tests. Scientific pipelines could and should have
Regressions Tests, which ensure that previously developed software still
performs after changes in the code, or in external libraries and
computational environment. An automatic test suite should not be a
burden and can become a game-changer even for a small programming
project.&lt;/p&gt;
&lt;p&gt;This tutorial is meant to be an introduction to testing in general and
to pytest library. Pytest is a full feature tool to test the Python
code, it offers a simple way to get started and scales from simple unit
testing to complex functional testing. We will begin with simple assert
statements and finish with pytest.fixture and pytest.parametrization.
The tutorial will also cover a simple integration of the tests suit with
Continuous Integration platforms using GitHub and Travis/CircleCI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience:&lt;/strong&gt; The tutorial is designed for scientist and data scientists
who would like incorporate testing to their everyday work. We expect
that people know basic Python and NumPy, and are familiar with simple
shell commands. Basic knowledge of Git/GitHub will be useful in the
second half of the tutorial.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>The quest for scientific credit for software documentation</title><link href="https://pyvideo.org/write-the-docs-europe-2015/the-quest-for-scientific-credit-for-software-documentation.html" rel="alternate"></link><published>2015-08-31T00:00:00+00:00</published><updated>2015-08-31T00:00:00+00:00</updated><author><name>Anna Jaruga</name></author><id>tag:pyvideo.org,2015-08-31:write-the-docs-europe-2015/the-quest-for-scientific-credit-for-software-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Full talk description: &lt;a class="reference external" href="http://www.writethedocs.org/conf/eu/2015/speakers/"&gt;http://www.writethedocs.org/conf/eu/2015/speakers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.writethedocs.org/conf/eu/2015/schedule/"&gt;http://www.writethedocs.org/conf/eu/2015/schedule/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow us on Twitter &amp;#64;writethedocs&lt;/p&gt;
&lt;p&gt;Join our mailing list &lt;a class="reference external" href="http://writethedocs.us11.list-manage.com/subscribe?u=fcfe905987123983cc93c7a46&amp;amp;id=e2e27d6167"&gt;http://writethedocs.us11.list-manage.com/subscribe?u=fcfe905987123983cc93c7a46&amp;amp;id=e2e27d6167&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>