<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_simmi-mourya.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>Scientific computing using Cython: Best of both Worlds!</title><link href="https://pyvideo.org/europython-2017/scientific-computing-using-cython-best-of-both-worlds.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Simmi Mourya</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/scientific-computing-using-cython-best-of-both-worlds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cython is not only an excellent and widely used tool to speed up
computational Python code, itâ€™s also a very smart way to talk to
native code and libraries. The Cython compiler translates Python code
to C or C++ code, and supports static type annotations to allow
direct use of C/C++ data types and functions. You get the best of
both worlds while working with Cython: Python like syntax with
blazing fast C speed.&lt;/p&gt;
&lt;p&gt;This talk/tutorial by a Python/Cython developer introduces Cython
programming language and leads the participants all the way from
their first Python extension to an efficient integration with native
C.&lt;/p&gt;
&lt;p&gt;Topics covered will be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Using the Cython compiler to build a native extension module&lt;/li&gt;
&lt;li&gt;Cython development from Jupyter notebook&lt;/li&gt;
&lt;li&gt;Mixing Python with static C types in the Cython language&lt;/li&gt;
&lt;li&gt;Calling into native code from Cython code (Brief introduction)&lt;/li&gt;
&lt;li&gt;Wrap up: A brief case study -
Cyvlfeat: A Cython/Python wrapper for Computer Vision library, VLFeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Participants are expected to have a good understanding of the Python
language, some basic knowledge about C or C++.  No deep C programming
knowledge is required, nor is any prior knowledge needed about
writing extension modules for the CPython runtime.&lt;/p&gt;
</summary></entry></feed>