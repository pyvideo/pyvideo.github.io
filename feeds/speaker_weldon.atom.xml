<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Weldon</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_weldon.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>It's Your Call(able): a tour of Python's callable (function) interface</title><link href="https://pyvideo.org/pycon-italia-2022/its-your-callable-a-tour-of-pythons-callable-function-interface.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Weldon</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/its-your-callable-a-tour-of-pythons-callable-function-interface.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s Your Call(able): a tour of Python’s callable (function) interface -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;A deep dive into python functions and the callable interface surrounding
them. We take a tour into everything that happens on on a “def” line in
Python, and explore how to make the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s Your Call(able): a tour of Python’s callable (function) interface -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;A deep dive into python functions and the callable interface surrounding
them. We take a tour into everything that happens on on a “def” line in
Python, and explore how to make the most of all the rich metadata
provided about functions, before going into detail hacking the Python
decorator pattern. Functions are fundamental to python, and are amongst
the first features of python that most users learn. We call a function
with arguments, and it returns a value. However, there is more to this
callable interface than meets the eye, and there are lots of useful and
powerful things we can do with the callable interface. You may have come
across many of these already: (anonymous) lambda functions, the &lt;strong&gt;call&lt;/strong&gt;
magic method, the decorator pattern, the &lt;strong&gt;doc&lt;/strong&gt; property, and modules
like functools and inspect which provide detailed about functions and
allow us to alter functions at runtime. The now-retired Python 3.6
release added typing annotations to this mix, and opened up a new world
of metadata to use alongside your callables.&lt;/p&gt;
&lt;p&gt;Lots of libraries, particularly web frameworks like Flask, Django, and
FastAPI, and testing toolkits like pytest, use this callable interface
to implement their API. As developers, understanding these advanced
features of python’s callable interface is particularly useful when
writing generic, automation focused code, and understanding how such
prominent libraries work.&lt;/p&gt;
&lt;p&gt;This talk gives a deep-dive into python functions, and the associated
callable interface. We’ll start with a quick tour of the basics, before
covering python’s more advanced callable features, and exploring some
examples about how, why, and when you may wish to use these features
yourself.&lt;/p&gt;
&lt;p&gt;Speaker: Weldon&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="clean code"></category><category term="type hinting"></category></entry></feed>