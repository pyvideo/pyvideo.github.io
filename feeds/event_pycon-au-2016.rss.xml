<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 15 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>A Girls Guide To Growing A Moustache with Python</title><link>https://pyvideo.org/pycon-au-2016/a-girls-guide-to-growing-a-moustache-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Heidi Baxter
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/57/view_talk"&gt;https://2016.pycon-au.org/schedule/57/view_talk&lt;/a&gt;
The objective is to showcase the power and flexibility of combining preexisting python modules and apply them to the field of facial detection and machine learning.
Correctly positioning a mustache on any given face in a straight forward and fun example of applying the technology in a 30 min presentation&lt;/p&gt;
&lt;p&gt;To use an elementary task as a vehicle for explaining and demonstrating the complexities of shape recognition, object classifiers and machine learning.&lt;/p&gt;
&lt;p&gt;I will demonstrate the use of image pyramids for image scaling and blending.
The histogram of oriented gradients (HOG) is a feature descriptor used in computer vision and image processing for the purpose of object detection.
Finding the location of different facial features (e.g. corners of the eyes, eyebrows, and the mouth, the tip of the nose etc.) accurately will be described.
Facial landmarks are used to align facial images to a mean face shape. How this allows the blending of images will be described and demonstrated.&lt;/p&gt;
&lt;p&gt;If you are a girl and want a mustache, you can’t just grow one, so you have to steal one.
I developed this project on raspberry pi and python. I wanted to do something different on that platform. I felt there were too many people who used their Rpi to feed their dog, water their plants or play MP3. I knew the platform had more potential than that. Hopefully this talk will help people think differently about Rpi3.
Attendees will learn tips on image processing, as well as training your own object classifier.
Showcasing the power of python in a fun, lighthearted way. Hopefully, being informative and entertaining.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heidi Baxter</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/a-girls-guide-to-growing-a-moustache-with-python.html</guid><category>datascience</category></item><item><title>A Project-Driven Approach to Teaching Python: A Showcase of Student Work and Achievements</title><link>https://pyvideo.org/pycon-au-2016/a-project-driven-approach-to-teaching-python-a-showcase-of-student-work-and-achievements.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruce Fuda
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/124/view_talk"&gt;https://2016.pycon-au.org/schedule/124/view_talk&lt;/a&gt;
One of the greatest advantages the teaching of the Digital Technologies has over most other schooling disciplines is the ease and speed with which students can see the result of their learning. New knowledge and skills go from being concepts they've never seen before to working code and applications very quickly, resources to assist them are everywhere, and feedback throughout the learning process is immediate. This presentation demonstrates some of the work graduating students from my Year 12 class have produced in their final year - projects that demonstrate mastery of computer science concepts like path finding, Bayesian spam filters, Markov chain-based predictive text generators and Artificial Intelligence algorithms. With the right support and guidance, students can go from programming novices to Python ninjas in a time frame as short as two years. Come along and see what high school students are capable of, and how we can help them get there!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Fuda</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/a-project-driven-approach-to-teaching-python-a-showcase-of-student-work-and-achievements.html</guid></item><item><title>A proof of concept Python toolkit for effective landscape fuel hazard management</title><link>https://pyvideo.org/pycon-au-2016/a-proof-of-concept-python-toolkit-for-effective-landscape-fuel-hazard-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Henry Walshaw
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/136/view_talk"&gt;https://2016.pycon-au.org/schedule/136/view_talk&lt;/a&gt;
Since the 2009 Victorian Bushfires there has been a major funding increase to allow fuel reduction burns in national parks in NSW. The first recommendation (Review of performance targets for bushfire fuel management on public land 2015) is that the government moves towards a risk reduction target rather than the current hectarue target. An evidentiary method of proposing burns based on ISO 31000 Risk management - principles and guidelines (2009) was built into a manual workflow using Esri's ArcGIS suite. The next step was to automate the process as much as possible. To do this we built a suite of tools using Python in ArcGIS and in Pandas. This meant that we could spend more time making sure our calculations were correct and we understood the data rather than spending time re-creating ways to read tables and perform calculations.&lt;/p&gt;
&lt;p&gt;In this talk we'll cover the suite of tools we built and a workflow for a user, and what this means for environmental policy in the department and NSW. We'll talk about ways we step between automation and using tools like Excel which our Environmental managers are very familiar with, but which don't always lend themselves to consistent input. And we'll talk about how building this suite not only does the calculations for us, but also records the metadata at every step along the trail, so we can provide evidence of how we made our decisions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Henry Walshaw</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/a-proof-of-concept-python-toolkit-for-effective-landscape-fuel-hazard-management.html</guid><category>ArcGIS</category><category>Pandas</category></item><item><title>A quick intro to AWS Serverless</title><link>https://pyvideo.org/pycon-au-2016/a-quick-intro-to-aws-serverless.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Curtis Maloney
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/126/view_talk"&gt;https://2016.pycon-au.org/schedule/126/view_talk&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Curtis Maloney</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/a-quick-intro-to-aws-serverless.html</guid></item><item><title>Automated deployment of Python packages for development</title><link>https://pyvideo.org/pycon-au-2016/automated-deployment-of-python-packages-for-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew MacDonald&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/109/view_talk"&gt;https://2016.pycon-au.org/schedule/109/view_talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The ability to automatically deploy development and test versions of software supports a rapid development/release cycle.&lt;/p&gt;
&lt;p&gt;Within our section of the Bureau of Meteorology we have a number of internal Python packages, ranging from small simple packages to large applications that are dependent on the smaller packages. We manage the development cycle to ease deployment of these packages and applications into development, test, and production environments.&lt;/p&gt;
&lt;p&gt;Elements of our process are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Source code management (git)&lt;/li&gt;
&lt;li&gt;Code review (Gerrit)&lt;/li&gt;
&lt;li&gt;Continuous integration (Jenkins)&lt;/li&gt;
&lt;li&gt;Internal PyPi servers (Apache)&lt;/li&gt;
&lt;li&gt;A development environment for automatic deployment of every Gerrit approved commit (Anaconda environment via Jenkins)&lt;/li&gt;
&lt;li&gt;Versioning (git tags + versioneer)&lt;/li&gt;
&lt;li&gt;Test environment for every tagged version (Anaconda environment via Jenkins)&lt;/li&gt;
&lt;li&gt;Production environment for specified releases (Anaconda environment via Ansible)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A key benefit of this process is that we have a deployed Python environment for the latest development version of all packages, a pinned collection of packages for testing, and an approved stable collection for production. The development and test environments are rapidly updated when commits are approved in Gerrit or tagged. The production environment is then readily updated with specific versions after a period of testing in the test environment.&lt;/p&gt;
&lt;p&gt;This presentation will discuss our development process, how it works for us and how we leverage Python packaging to do it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew MacDonald</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/automated-deployment-of-python-packages-for-development.html</guid></item><item><title>Big data biology for pythonistas: getting in on the genomics revolution</title><link>https://pyvideo.org/pycon-au-2016/big-data-biology-for-pythonistas-getting-in-on-the-genomics-revolution.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Darya Vanichkina
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/151/view_talk"&gt;https://2016.pycon-au.org/schedule/151/view_talk&lt;/a&gt;
In 2001 Bill Clinton unveiled &amp;quot;the most important, most wondrous map ever produced by humankind&amp;quot; - the human genome. This monumental endeavour cost $3 billion, and took hundreds of scientists from all over the world 13 years. Today, a single person can generate such a map in ~2 days for $1000. This dramatic drop in cost means that we now have data for hundreds of thousands of people - and other species - from all corners of the globe, and cohorts are available for every major disease under the sun. Petabytes of new data are also being generated every day.&lt;/p&gt;
&lt;p&gt;Most of this data is publicly available, so anyone with an internet connection can try in silico biology from the comfort of their own home. In my talk, I'll walk through what this data looks like, and how it's analysed - with a special focus on where python fits into the workflow (;tldr the most interesting parts!). I will also highlight some common pitfalls software engineers and developers face when getting into this space. Finally, I'll showcase several other facets of bioinformatics that sorely need contributions from good coders.&lt;/p&gt;
&lt;p&gt;Genomics is rapidly entering the world of health care in both the public and private hospital sectors, and in direct-to-consumer genetic testing. Understanding this data, the challenges and limitations of its analytics will help us all make better-informed health and medical decisions, affecting our quality of life and those we love.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Darya Vanichkina</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/big-data-biology-for-pythonistas-getting-in-on-the-genomics-revolution.html</guid><category>datascience</category></item><item><title>Breaking up arrays up into chunks for fun and science with Xarray and Dask</title><link>https://pyvideo.org/pycon-au-2016/breaking-up-arrays-up-into-chunks-for-fun-and-science-with-xarray-and-dask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Hicks
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/176/view_talk"&gt;https://2016.pycon-au.org/schedule/176/view_talk&lt;/a&gt;
Xarray is n-dimensional array package bringing numpy and pandas-style interfaces to labelled data.  Its main use is for manipulating scientific datasets stored in NetCDF file format.&lt;/p&gt;
&lt;p&gt;The Dask package brings task graphs for parallel computation of arrays, by breaking them up into smaller chunks, for lazy processing of arrays. It can handle larger-than-memory dataset, scaling from a single machine to a cluster.&lt;/p&gt;
&lt;p&gt;When used together, then can be used to analyse all sorts of scientific data.  This talk will look at using them to analyse a timeseries of Earth-observation from Landsat satellites.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Hicks</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/breaking-up-arrays-up-into-chunks-for-fun-and-science-with-xarray-and-dask.html</guid><category>datascience</category></item><item><title>Building brains</title><link>https://pyvideo.org/pycon-au-2016/building-brains.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paula Sanz-Leon
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/33/view_talk"&gt;https://2016.pycon-au.org/schedule/33/view_talk&lt;/a&gt;
The Virtual Brain (TVB) is an open-source scientific software written in
Python for advanced simulations of complex brain dynamics. TVB can be used in
a client-server configuration, such that its web-based interface can be
accessed remotely, or as a standalone cross-platform Python library through a
scripting interface.&lt;/p&gt;
&lt;p&gt;In this talk I will begin by briefly explaining the motivations and science
behind TVB. This will be followed by a description of TVB's architecture and
main functionalities, including: simulation of neural activity; modification
and visualization of brain connectivity and network dynamics; and, analysis
of time-series. Lastly, I will show you that getting started with brain
simulations is just one Jupyter notebook away.&lt;/p&gt;
&lt;p&gt;With TVB you might not be able to build smart brains (yet), but you can build
one of the most realistic approximations to the physics of a human brain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paula Sanz-Leon</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/building-brains.html</guid><category>datascience</category></item><item><title>Click: A Pleasure To Write, A Pleasure To Use</title><link>https://pyvideo.org/pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Vetter
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/64/view_talk"&gt;https://2016.pycon-au.org/schedule/64/view_talk&lt;/a&gt;
We have a wide variety of packages and modules in Python that help build
commandline tools in different ways. One of the more recent contenders is
'click'. It uses a very intuitive approach to create simple CLIs as well as
complex ones. In this talk, I will introduce building CLIs with 'click' and
illustrate some of its advantages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Vetter</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html</guid><category>click</category></item><item><title>Code the Docs: Interactive Document Environments</title><link>https://pyvideo.org/pycon-au-2016/code-the-docs-interactive-document-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paris Buttfield-Addison
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/184/view_talk"&gt;https://2016.pycon-au.org/schedule/184/view_talk&lt;/a&gt;
Distributing example code and applications with documentation is now easy. There are a million different ways to get code to people: from zips, to GitHub, to gists, and beyond. Code is easy to distribute. But how do we create a better link between example code, and written documentation?
Luckily, clever boffins have come up with some solutions: interactive document environments. These let the live code and the documentation sit side-by-side with one another, the distributed example code is the documentation.&lt;/p&gt;
&lt;p&gt;This talk will take a brief look at some of the different interactive document environments out there – mainly Jupyter, IPython Notebooks, and Swift Playgrounds – and the various strengths, weaknesses, and caveats of these tools. We’ll also explore the future, and discuss where these tools are going, as well as the implications for technical documentation. Learn how to add interactivity to your documentation, and why this might be a good idea!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paris Buttfield-Addison</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/code-the-docs-interactive-document-environments.html</guid></item><item><title>Comparing Wagtail, Django CMS and Mezzanine</title><link>https://pyvideo.org/pycon-au-2016/comparing-wagtail-django-cms-and-mezzanine.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adam Brenecki
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/102/view_talk"&gt;https://2016.pycon-au.org/schedule/102/view_talk&lt;/a&gt;
Django CMS, Mezzanine and Wagtail are the three most popular Django-based content management systems; all three have kept (or, in Wagtail's case, gained) their popularity because they are so different to each other. In many ways, from their fundamental data models right through to how they approach their content editing UIs, each one has a very different take on how a CMS should work.&lt;/p&gt;
&lt;p&gt;This talk will explore the different approaches, strengths and weaknesses of each CMS, and what they mean for you as a developer and for your content editors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Brenecki</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/comparing-wagtail-django-cms-and-mezzanine.html</guid><category>django</category><category>django cms</category><category>mezzanine</category><category>wagtail</category></item><item><title>CPython internals and the VM</title><link>https://pyvideo.org/pycon-au-2016/cpython-internals-and-the-vm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Swenson
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/145/view_talk"&gt;https://2016.pycon-au.org/schedule/145/view_talk&lt;/a&gt;
Ever wanted to know what CPython, the standard Python interpreter, is doing under the hood? What happens at startup before your code is run? How is your code translated to VM bytecode, what does that bytecode mean, and how is it run? In this talk, we'll dive into all of those fun parts!&lt;/p&gt;
&lt;p&gt;This will help you understand what your code is doing under the hood, how to potentially optimize it, and to know the advantages and disadvantages of CPython and how they affect you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Swenson</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/cpython-internals-and-the-vm.html</guid></item><item><title>Data Science Design Patterns</title><link>https://pyvideo.org/pycon-au-2016/data-science-design-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tennessee Leeuwenburg
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/78/view_talk"&gt;https://2016.pycon-au.org/schedule/78/view_talk&lt;/a&gt;
Most 'data science' projects fall into just a few well-understood design patterns. This talk de-mystifies what those patterns are, how to use them practically, and how to get to grips with your data. We'll a look at how to understand the input/output structure of the models, how to design a reasonable 'experiment', and how to get started. We'll look at getting to grips with problems by simple data sets that can fit entirely on-screen, designing the basic 'form' of the machine before levelling up to bigger data and badder algorithms.&lt;/p&gt;
&lt;p&gt;All of this will be shown using Python tools, libraries and running code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tennessee J Leeuwenburg</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/data-science-design-patterns.html</guid><category>datascience</category></item><item><title>Deciding between continuity and change in your Open Source community</title><link>https://pyvideo.org/pycon-au-2016/deciding-between-continuity-and-change-in-your-open-source-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Neugebauer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/153/view_talk"&gt;https://2016.pycon-au.org/schedule/153/view_talk&lt;/a&gt;
When you’re a big, for-profit project, it can be easy to justify a change from outdated software to the new hotness: figure out why the old software isn’t working for you, do a cost-benefit analysis, and – if it still seems like a good idea – make the change.
When you’re a community of volunteers, that justification can be less clear: cost-benefit analyses will rarely be about money. Worse still, the human costs can be difficult to justify: It’s difficult to get volunteers to do more unpaid work than they’re already doing. If your community depends on Open Source software, you get the added political difficulty of needing to navigate the divide between large-scale change and making small improvements to systems your community actively contributes to.
Whilst the motivation might be different, the process isn’t: leading a community towards change means understanding why existing systems aren’t suitable, making your community enthusiastic about the need for change, and then actually making that change.
To help make this point more concretely, we’ll look at how and why linux.conf.au – a long-running Open Source conference in Australia – effected a move away away from a bespoke legacy conference management software to one based on Symposion, the popular Django-based software created for the Python Software Foundation. We’ll also look at how that’s led to the PSF funding Registrasion, a Django-based conference sales platform.
With this case study as a guide, we’ll talk about how to make a decision to replace the software that your community runs on. In particular, we’ll cover how to identify and engage with stakeholders within a community; the value of prototypes in maintaining interest; and what a cost-benefit analysis might look like when your currencies are human joy, and burnout prevention.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Neugebauer</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/deciding-between-continuity-and-change-in-your-open-source-community.html</guid></item><item><title>Designing hardware APIs to facilitate hands-on learning</title><link>https://pyvideo.org/pycon-au-2016/designing-hardware-apis-to-facilitate-hands-on-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Antoniades
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/172/view_talk"&gt;https://2016.pycon-au.org/schedule/172/view_talk&lt;/a&gt;
Through experimentation with educational hardware and software, Obelisk Systems has identified the need for, and developed a brand new framework to allow students (both university and high-school) fluid interaction with complex hardware within classrooms. This framework is further implemented into an API that handles all low-level sensor access whilst maintaining relevance to a wide variety of students.
This API will be used to interface with space experimentation and education hardware being developed by Obelisk Systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Antoniades</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/designing-hardware-apis-to-facilitate-hands-on-learning.html</guid><category>education</category></item><item><title>Designing Hardware with Python - A story of the HDMI2USB.tv project...</title><link>https://pyvideo.org/pycon-au-2016/designing-hardware-with-python-a-story-of-the-hdmi2usbtv-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Timothy Ansell&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/25/view_talk"&gt;https://2016.pycon-au.org/schedule/25/view_talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python is generally considered a high level language a long way from hardware, this very fact actually makes it an awesome tool for helping out with the design and creation of hardware!&lt;/p&gt;
&lt;p&gt;This talk will hopefully cover;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python hardware description languages (HDLs) for creating &amp;quot;gateware&amp;quot; for FPGA chips or even real IC design.&lt;/li&gt;
&lt;li&gt;Python scripting for hardware schematic layout and design rule checking.&lt;/li&gt;
&lt;li&gt;Python tools for deploying, programming and debugging embedded systems.&lt;/li&gt;
&lt;li&gt;Some cool projects like the HDMI2USB.tv (open source hardware for video capture) which use many of the above parts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will focus on open source tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Timothy Ansell</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/designing-hardware-with-python-a-story-of-the-hdmi2usbtv-project.html</guid></item><item><title>Digitising 100 years of parliamentary data - Django as a framework for government data management</title><link>https://pyvideo.org/pycon-au-2016/digitising-100-years-of-parliamentary-data-django-as-a-framework-for-government-data-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Samuel Spencer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/135/view_talk"&gt;https://2016.pycon-au.org/schedule/135/view_talk&lt;/a&gt;
Historical information on Australian Parliaments has been available in the Parliamentary Library's flagship publication the Parliamentary Handbook - an extensive almanac with biographies, tables and records dating back to Australia's federation. This data is used as a way to track key social issues, such as length of service, gender representation in parliament and historical election information in an authoritative format.&lt;/p&gt;
&lt;p&gt;To improve access to this information the library began development of a mobile app which evolved into a complete Django-based data management system for managing parliamentary biographies and service histories based on Popolo, a civic data framework for the management and dissemination of parliamentary information. Along with interactive biographies and records of ministries and parties, the system for the first time allows users to build custom tables from complex queries that are dynamically updated as new information is made available.&lt;/p&gt;
&lt;p&gt;Coupled with this is the development of a biographical data management system that will ensure that records of new parliamentarians and future changes to existing parliamentarians are captured in a single system.&lt;/p&gt;
&lt;p&gt;In this presentation, we cover the challenges and successes in digitising over 100 years parliamentary data, including migration, data cleansing and data trust issues. We also provide a technical breakdown of the chosen framework and infrastructure, and issues during development especially when dealing with imprecise or incomplete historical records. Lastly, we cover the Django apps for data modelling and querying built for this project that have already been released as open-source.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Spencer</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/digitising-100-years-of-parliamentary-data-django-as-a-framework-for-government-data-management.html</guid><category>django</category></item><item><title>Django - Customise your SQL</title><link>https://pyvideo.org/pycon-au-2016/django-customise-your-sql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Josh Smeaton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/86/view_talk"&gt;https://2016.pycon-au.org/schedule/86/view_talk&lt;/a&gt;
Learn about the different methods of altering the SQL that the Django ORM generates. Write complex reporting queries, perform calculations within the database, or drop down to writing the entire query in pure SQL. Take advantage of your specific database features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Smeaton</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/django-customise-your-sql.html</guid><category>django</category></item><item><title>Django &amp; Drupal: A tale of two cities.</title><link>https://pyvideo.org/pycon-au-2016/django-drupal-a-tale-of-two-cities.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Donna Benjamin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/201/view_talk"&gt;https://2016.pycon-au.org/schedule/201/view_talk&lt;/a&gt;
Drupal and Django have much in common. They’re both open source tools for building the web. They’re also marked by some fundamental differences. However, both are so much more than that.&lt;/p&gt;
&lt;p&gt;&amp;quot;Every human creature is constituted to be that profound secret and mystery to every other. A solemn consideration, when I enter a great city by night, that every one of those darkly clustered houses encloses its own secret; that every room in every one of them encloses its own secret!&amp;quot; - Charles Dickens.&lt;/p&gt;
&lt;p&gt;Let’s explore the darkly clustered houses of these two different communities of open source people.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What common challenges do we face?&lt;/li&gt;
&lt;li&gt;What different approaches do we take?&lt;/li&gt;
&lt;li&gt;What can we learn from each other?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, what could we do together?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donna Benjamin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/django-drupal-a-tale-of-two-cities.html</guid><category>django</category><category>drupal</category></item><item><title>Django Reduxed</title><link>https://pyvideo.org/pycon-au-2016/django-reduxed.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saket  Bhushan
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/56/view_talk"&gt;https://2016.pycon-au.org/schedule/56/view_talk&lt;/a&gt;
The talk will be an introduction to all the moving parts involved in building
a client side isomorphic single page application with a REST backend. We
will take a dive into How and where does React-Redux fit into the bigger picture
of REST APIs and Client Side MVC, and how to seamlessly introduce the goodness
it brings to your django project. We will also see some non obvious things that you had
to deal while using redux.&lt;/p&gt;
&lt;p&gt;Having a service oriented architecture in web projects require interfacing the
backend using a REST-ful interface. Building your website as a single page app
allows you to focus on building the API up front, rather than duplicating your
efforts to build a website and then replicating the functionality with an API.
With a single page app, your website can be constructed in much the same way as
a mobile app. Django and the Django REST Framework enabled my team to quickly
deliverable a highly functional REST API that was customised to our unique needs.&lt;/p&gt;
&lt;p&gt;React is a great tool to keep UI organised, but won't keep
track of the data and state of application. Redux comes to rescue over here -
it defines a minimal but sufficiently powerful way of interacting with that state.
An action from the UI is combined with a simple JS object(state).
Redux helps developers manage the state and flow of data around an application.&lt;/p&gt;
&lt;p&gt;One of the strengths of redux is that everything is very explicit.
It ease out the process of managing the state and flow of data
around an application. Imagine tons of asynchronous actions without introducing
annoying UI bugs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saket  Bhushan</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/django-reduxed.html</guid></item><item><title>DjangoConf Lightning Talks and Closing</title><link>https://pyvideo.org/pycon-au-2016/djangoconf-lightning-talks-and-closing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/djangoconf-lightning-talks-and-closing.html</guid><category>django</category><category>lightning talks</category></item><item><title>Doing Math with Python</title><link>https://pyvideo.org/pycon-au-2016/doing-math-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amit Saha
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/83/view_talk"&gt;https://2016.pycon-au.org/schedule/83/view_talk&lt;/a&gt;
The talk aims to highlight how Python is the perfect programming language to make programming more fun and immediately applicable to young learners. By making use of standard library modules such as the fractions module, third party packages such as matplotlib and sympy, the audience will learn how to write programs to solve common math problems. Some of the topics that will be discussed are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simulating uniform and non-uniform random events&lt;/li&gt;
&lt;li&gt;Drawing Fractals&lt;/li&gt;
&lt;li&gt;Solving algebraic equations and inequalities&lt;/li&gt;
&lt;li&gt;Solving calculus problems&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amit Saha</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/doing-math-with-python.html</guid><category>education</category></item><item><title>Empowering X.509 Certificate Management with Python</title><link>https://pyvideo.org/pycon-au-2016/empowering-x509-certificate-management-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Marlon Dutra
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/68/view_talk"&gt;https://2016.pycon-au.org/schedule/68/view_talk&lt;/a&gt;
Today, more than ever before, security is part of the fabric of the internet, with most websites defaulting to https over the historically used default of unsecured http. Whenever you see a URL starting with &lt;a class="reference external" href="https://"&gt;https://&lt;/a&gt; (https:), your browser is sending the HTTP (or Spdy) traffic through a Transport Layer Security (TLS) tunnel. Part of establishing this secure tunnel involves your browser validating an X.509 certificate provided by the website you're viewing. This allows you to be sure that the server on the other end is who it says it is before you send some potentially sensitive information like your username and password.&lt;/p&gt;
&lt;p&gt;This is just one example of how these technologies can be used, but there are many more. In distributed systems that communicate sensitive information, like user data, it is imperative to have a mutual authentication mechanism, where the client is confident it is talking to the right service, as well as the service being confident it is talking to the right client. Beyond strong authentication, it is usually desirable to have some authorization logic, to prevent clients from having unrestricted access to all services.&lt;/p&gt;
&lt;p&gt;Since any TCP communication can be tunneled through TLS, and TLS supports such mutual authentication through X.509 certificates, they are the perfect set of tools for the job. The problem to solve then becomes how you manage all of these certificates.&lt;/p&gt;
&lt;p&gt;Crafting simple certificates with the openssl command line is a bit tricky but doable. However, modern certificates support a variety of advanced features and it is quite complicated to take full advantage of them through the command line, especially in a programmatic way. This is where Python can be a powerful tool. Through the use of certain libraries, you can inject valuable information into your certificates that can be used for many purposes, such as establishing a robust authorization model for a service.&lt;/p&gt;
&lt;p&gt;In this session we'll explore some of the ways you can leverage X.509 certificate features to better protect your systems and data. We'll give specific examples of how to use Python for the programmatic management of complex certificates as well as talking about how the largest website on the Internet, Facebook, handles hundreds of thousands of such certificates in its internal infrastructure, using these same approaches.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you will understand how to craft your own elaborate certificates with Python and how to use them to secure communications between networked services.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marlon Dutra</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/empowering-x509-certificate-management-with-python.html</guid></item><item><title>Evaluating fire simulators using Docker, Dask and Jupyter notebooks!</title><link>https://pyvideo.org/pycon-au-2016/evaluating-fire-simulators-using-docker-dask-and-jupyter-notebooks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nathan Faggian
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/168/view_talk"&gt;https://2016.pycon-au.org/schedule/168/view_talk&lt;/a&gt;
Bushfires are one of the most destructive forces in our environment. A major responsibility of the Bureau of Meteorology is to provide information on weather conditions that could make bushfires difficult to fight. Fire agencies then use simulators of fire behaviour to inform finer grained warnings to protect the Australian public. Objectively choosing the best performing simulators, or indeed the best versions of the same simulator, with respect to end-user requirements is a difficult task that requires a large amount of computation.&lt;/p&gt;
&lt;p&gt;The introduction of new tools like Docker, Dask and Jupyter notebooks make the task of large scale computation much easier! The Bureau of Meteorology is looking at these technologies to help modernise its legacy workflows and processes, one example is our recent work in the area of fire simulators.&lt;/p&gt;
&lt;p&gt;This talk will work through the approach developed for a reproducible environment (using Docker) and then how we form workflows (jupyter notebooks) that execute fire simulators on a small compute cluster of both windows and linux hosts (Dask, Distributed).  Finally, we will work through an example of scaling up an experiment and demonstrate a process that is easy to replicate and follow for fellow scientists.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Faggian</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/evaluating-fire-simulators-using-docker-dask-and-jupyter-notebooks.html</guid></item><item><title>Every Millisecond Counts: Performance &amp; UX</title><link>https://pyvideo.org/pycon-au-2016/every-millisecond-counts-performance-ux.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Davey Shafik
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/38/view_talk"&gt;https://2016.pycon-au.org/schedule/38/view_talk&lt;/a&gt;
How do you lose 900 million dollars in 100ms? Or 8 million visits in just 4/10 of a second?&lt;/p&gt;
&lt;p&gt;User expectations are higher than ever when it comes to web performance, so much so that we've created an entirely new application architecture just to make it feel like our websites are faster than they actually are.&lt;/p&gt;
&lt;p&gt;This talk will look at how we can improve our users experience at any scale through performance optimizations at every layer of the stack, from backend to browser.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davey Shafik</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/every-millisecond-counts-performance-ux.html</guid></item><item><title>Exploring Kivy in the classroom - GUI and App development for Python</title><link>https://pyvideo.org/pycon-au-2016/exploring-kivy-in-the-classroom-gui-and-app-development-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amanda Hogan
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/88/view_talk"&gt;https://2016.pycon-au.org/schedule/88/view_talk&lt;/a&gt;
Graphical User Interface with Python is a tricky business. Come and learn a bit about Kivy and learn about my successes and failures using it with my Senior Software Development students (in NSW) to introduce GUI and App development with Python.
In this workshop you'll be introduced to the Kivy library, the tagging and formatting in kv files, setting up the python classes to support the UI and passing parameters between them.
The workshop is not really suitable for the Python beginner because we need to play around with classes and methods (one of the challenges with using it in the classroom) but will otherwise be a fairly measured pace.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amanda Hogan</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/exploring-kivy-in-the-classroom-gui-and-app-development-for-python.html</guid><category>kivy</category><category>education</category></item><item><title>Fail Early, Fail Often, Fail Well</title><link>https://pyvideo.org/pycon-au-2016/fail-early-fail-often-fail-well.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Josh Simmons
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/34/view_talk"&gt;https://2016.pycon-au.org/schedule/34/view_talk&lt;/a&gt;
It happens. Things go south and it’s not even clear how. Your client and you can’t see eye to eye, or your enthusiastic new business partner has dropped off the radar. The project you’ve invested weeks, months, or years into may never see the light of day.&lt;/p&gt;
&lt;p&gt;Failure comes in many forms and the increasing complexity of our projects and the world they operate in doesn’t help. Despite our best efforts, learning the hard way is often the only way. Perhaps this is why modern startup culture has rallied around the mantra: “Fail fast. Fail early. Fail often.” But I spent the better part of my career failing in freelance, agency, and startups, and the experience leads me to believe the common refrain to be lacking.&lt;/p&gt;
&lt;p&gt;Like gymnasts who train to fall properly, I believe we must learn to fail well. In this talk, I draw from my experience learning the hard way, flagging the ten easiest and most insidious mistakes one can make. Because failure is inevitable, I will also be sharing a framework for recovery that includes managing yourself, your relationships, and your reputation.&lt;/p&gt;
&lt;p&gt;Attendees will leave with a better sense of what NOT to do, an idea of how to cope with failure, and the knowledge that failure is inevitable and that’s OK.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Simmons</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/fail-early-fail-often-fail-well.html</guid></item><item><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link>https://pyvideo.org/pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sam Kitajima-Kimbrel
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/23/view_talk"&gt;https://2016.pycon-au.org/schedule/23/view_talk&lt;/a&gt;
Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Rather than risk a from-scratch rewrite of the entire system, we chose to extract small and well-defined chunks one at a time into simple services using a common internal interface standard.&lt;/p&gt;
&lt;p&gt;Given a new fleet of services and a set of internal REST APIs, how do we get to parity with the existing public API specifications? Rather than force every service to implement authentication, data validation, rate-limiting, and so on, we chose to build a simple federation service to translate and proxy customer requests to internal systems. Python was a natural choice for this application due to its flexibility, extensive library and testing ecosystem, and suitability for rapid prototyping and development.&lt;/p&gt;
&lt;p&gt;But: how did we get from A to B? This talk will cover the details of Twilio’s past and current API architecture, how we adapted the service-oriented architecture pattern to build a consistent public interface, and the testing and deployment strategies we used to migrate 5 billion monthly requests from old to new systems with no downtime.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</guid></item><item><title>From Humanities to Tech: How a Religion PhD came to be learning Python</title><link>https://pyvideo.org/pycon-au-2016/from-humanities-to-tech-how-a-religion-phd-came-to-be-learning-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lauren Bernauer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/93/view_talk"&gt;https://2016.pycon-au.org/schedule/93/view_talk&lt;/a&gt;
Despite studying Physics, Chemistry, and the compulsory Maths at High School, I ended up in a Arts degree at University, and from there majored in Studies in Religion and History and continued on to do postgraduate research degrees in Religion. But along the way I became employed in IT and since completing my PhD have been teaching myself Python (among other things). However all these years in the Humanities have resulted in a particular way of approaching learning, one that is not entirely helpful to learning programming. In addition to this, there is also how I can make my new skills relevant to all those years of research and study?&lt;/p&gt;
&lt;p&gt;This talk is going to be about my own journey from a STEM high school student, to a humanities researcher, and then to IT, and what I have learnt along the way. It is also about why (I think) teaching children about computers and programming is incredibly important. And also, what I am doing, and planning to do with my new found Python skills in relation to my PhD and potential further research.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lauren Bernauer</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/from-humanities-to-tech-how-a-religion-phd-came-to-be-learning-python.html</guid></item><item><title>Functional Programming for Pythonistas</title><link>https://pyvideo.org/pycon-au-2016/functional-programming-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bianca Gibson
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/155/view_talk"&gt;https://2016.pycon-au.org/schedule/155/view_talk&lt;/a&gt;
Rampant side effects.
The shifting sands of mutable state beneath your feet.
Enter Functional Programming.
Functional Programming helps you write more clear, maintainable and testable code.&lt;/p&gt;
&lt;p&gt;This talk will cover the core principles of functional programming, how they relate to techniques you probably already use, how to apply them in python, the benefits they can offer and how to introduce them to other developers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bianca Gibson</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/functional-programming-for-pythonistas.html</guid></item><item><title>Geoscience Big Data Computing with Python</title><link>https://pyvideo.org/pycon-au-2016/geoscience-big-data-computing-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fei Zhang
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/66/view_talk"&gt;https://2016.pycon-au.org/schedule/66/view_talk&lt;/a&gt;
Python programming language is extensively used in Geoscience Australia (www.ga.gov.au) for scientific computing. In particular, a datacube system has been developed recently using Python as a core technology. The system manages petabyte-scale earth-observation satellite imagery datasets. And has enabled a wide range of applications such as the Water Observation from Space.&lt;/p&gt;
&lt;p&gt;This talk is about how Geoscience Australia applies scientific computing (Python) to the big data challenges.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fei Zhang</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/geoscience-big-data-computing-with-python.html</guid><category>datascience</category></item><item><title>Graphing when your Facebook friends are awake</title><link>https://pyvideo.org/pycon-au-2016/graphing-when-your-facebook-friends-are-awake.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexander Hogue
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/76/view_talk"&gt;https://2016.pycon-au.org/schedule/76/view_talk&lt;/a&gt;
Look I’m not really sure why but I think I made a thing that makes graphs of when people are online on Facebook. It sounds kinda creepy and uh it is. We'll talk about the struggle of finding a good graphing library, so come along and roleplay as  the NSA. ˙ ͜ʟ˙&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hogue</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/graphing-when-your-facebook-friends-are-awake.html</guid></item><item><title>Have It Your Way: Maximizing Drive-Thru Contributions</title><link>https://pyvideo.org/pycon-au-2016/have-it-your-way-maximizing-drive-thru-contributions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;VM (Vicky) Brasseur
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/118/view_talk"&gt;https://2016.pycon-au.org/schedule/118/view_talk&lt;/a&gt;
They drop by, they fix their particular problem, they leave. They're the drive-through contributor. While, yes, we all would prefer that these people stick around and join the community, there's no denying that a good drive-thru contribution adds value to your project.&lt;/p&gt;
&lt;p&gt;A strong argument can be made that the more drive-thru contributors your project has, the healthier the project process and ecosystem. It shows that you've set up a process which is easy to understand, easy to follow, and which makes it easy to contribute. In a situation like that, it increases the opportunities for new contributors to become new community members and everyone is a winner.&lt;/p&gt;
&lt;p&gt;This talk will present:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Methods for maximizing drive-thru contributions&lt;/li&gt;
&lt;li&gt;Overall advantages of those methods for your project&lt;/li&gt;
&lt;li&gt;An argument for using number of drive-thru contributions as a metric for project health&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">VM (Vicky) Brasseur</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/have-it-your-way-maximizing-drive-thru-contributions.html</guid></item><item><title>Hear no evil, see no evil, patch no evil: Or, how to monkey-patch safely.</title><link>https://pyvideo.org/pycon-au-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graham Dumpleton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/18/view_talk"&gt;https://2016.pycon-au.org/schedule/18/view_talk&lt;/a&gt;
Python is a dynamic programming language and has a strong tradition of adhering to a programming style called duck-typing. This means that it is possible to easily modify an application's code while it is running. One might wish to do this for various reasons, including enhancing the functionality of code, correcting errant behaviour, or adding instrumentation or debugging code.&lt;/p&gt;
&lt;p&gt;Making such code modifications can be tricky though and not done correctly can potentially interfere with the operation of the original code, through destroying introspection abilities, not honouring the duck-typing mantra or due to being applied at the wrong time.&lt;/p&gt;
&lt;p&gt;If you do need to do monkey patching though, the 'wrapt' library is your friend, with its transparent object proxy wrappers and post import hook mechanism, it allows you to safely monkey patch code to modify its behaviour.&lt;/p&gt;
&lt;p&gt;Come learn about the 'wrapt' library and the joys, but also the dangers, of monkey patching.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Dumpleton</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/hear-no-evil-see-no-evil-patch-no-evil-or-how-to-monkey-patch-safely.html</guid></item><item><title>Hitting the Wall and How to Get Up Again - Tackling Burnout and Strategies for Self Care</title><link>https://pyvideo.org/pycon-au-2016/hitting-the-wall-and-how-to-get-up-again-tackling-burnout-and-strategies-for-self-care.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jackson Fairchild
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/192/view_talk"&gt;https://2016.pycon-au.org/schedule/192/view_talk&lt;/a&gt;
It doesn't matter whether it is a labour of love, or you are working to pay the bills, or that delicious combination of both, there is a risk that one day you will hit the wall. Burnout is a looming menace in many communities, particularly those with long hours, tight deadlines, rigid dependencies, complex intellectual demands, uncertain rewards and moving goalposts.&lt;/p&gt;
&lt;p&gt;Why does it happen? How can we learn to understand ourselves well enough to spot the signs in ourselves and in other? How can we repair the damage and come back from the brink? Jackson Fairchild will present a lively, enlightening and funny talk based on his experience as both an experienced mental health clinician and a person who works too hard.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jackson Fairchild</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/hitting-the-wall-and-how-to-get-up-again-tackling-burnout-and-strategies-for-self-care.html</guid></item><item><title>How digital agencies can invest in open-source products without going broke or insane</title><link>https://pyvideo.org/pycon-au-2016/how-digital-agencies-can-invest-in-open-source-products-without-going-broke-or-insane.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Greg Turner
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/166/view_talk"&gt;https://2016.pycon-au.org/schedule/166/view_talk&lt;/a&gt;
Compared to single-project software teams, digital agencies face the challenges of having to balance limited capacity amongst competing clients and projects, which makes it difficult to find time between the billable hours to invest.&lt;/p&gt;
&lt;p&gt;However, agencies also have a whole lot to gain from building reusable code - chiefly scalability. If an agency's reusable code can become a product that offers value to clients, then agencies can move beyond hourly-rate pricing towards value-based pricing.&lt;/p&gt;
&lt;p&gt;But creating products is expensive and risky, and open-sourcing products is even more so, until the benefits start accumulating.&lt;/p&gt;
&lt;p&gt;This talk covers learnings from our 7 years as a Python/Django web agency, moving from using open source to contributing and creating it; what guides our investment decisions, and why some decisions worked and some didn't, and how our philosophy has shifted as a result.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Turner</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/how-digital-agencies-can-invest-in-open-source-products-without-going-broke-or-insane.html</guid></item><item><title>I wish I learnt that earlier!</title><link>https://pyvideo.org/pycon-au-2016/i-wish-i-learnt-that-earlier.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rachel Bunder
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/154/view_talk"&gt;https://2016.pycon-au.org/schedule/154/view_talk&lt;/a&gt;
Python is an easy language to learn. Many Python programmers just picked it up thinking “It can’t be too different from X, just with indents!”. By learning a language this way you don’t discover the features unique to that language.&lt;/p&gt;
&lt;p&gt;In this talk we’ll take a tour of Python features that are easily missed. This includes list comprehension,  generator functions and the PEP documents. Where appropriate time comparisons between different methods will be given.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rachel Bunder</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/i-wish-i-learnt-that-earlier.html</guid></item><item><title>Imposter Syndrome</title><link>https://pyvideo.org/pycon-au-2016/imposter-syndrome.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bianca Gibson
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/156/view_talk"&gt;https://2016.pycon-au.org/schedule/156/view_talk&lt;/a&gt;
Ever thought ‘oh no, they are all going to realise that I have absolutely no idea what I’m doing’? If so this talk is for you. I’ll cover some of the signs of imposter syndrome, how to minimise it’s negative    impact and how to reduce those feelings in yourself and others.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bianca Gibson</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/imposter-syndrome.html</guid></item><item><title>Integrating 2 factor authentication into your project</title><link>https://pyvideo.org/pycon-au-2016/integrating-2-factor-authentication-into-your-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markus Holtermann
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/31/view_talk"&gt;https://2016.pycon-au.org/schedule/31/view_talk&lt;/a&gt;
Most websites these days require some kind of authentication. User name + password is the most common one. OAuth with Facebook / Github / Google / Twitter is also common. But sometimes you can't rely on 3rd party services and user name + password is not enough. In those cases 2 Factor Authentication is a nice, additional security layer. Use e.g. a phone to ensure a more secure authentication.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Holtermann</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/integrating-2-factor-authentication-into-your-project.html</guid><category>django</category></item><item><title>Integrating Python within a School Context</title><link>https://pyvideo.org/pycon-au-2016/integrating-python-within-a-school-context.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brad Nielsen
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/185/view_talk"&gt;https://2016.pycon-au.org/schedule/185/view_talk&lt;/a&gt;
Python is an ideal first programming language for secondary school students due to the simplicity of its syntax, its enforced code formatting, and the extensibility of the language. Introducing Python to a school however, takes planning, an incremental approach, and modification to existing curriculum plans based on experience. In this presentation, you will be given an overview of how a high school has introduced Python through years 8-12. You will also learn about various Python packages and environments that can be of benefit to a school including: Python Turtle, Grok Learning, Pygame, Flask, and PythonAnywhere.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brad Nielsen</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/integrating-python-within-a-school-context.html</guid><category>education</category></item><item><title>Learning TensorFlow</title><link>https://pyvideo.org/pycon-au-2016/learning-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Robert Layton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/126/view_talk"&gt;https://2016.pycon-au.org/schedule/126/view_talk&lt;/a&gt;
The recently released TensorFlow library has caused great waves in machine learning circles, with its powerful syntax that allows for distributed computation, improved efficiency, and modularisation. The framework allows you to build graph-based models, such as those used in machine learning and artificial intelligence, and have those models run on a distributed computing systems, including GPUs.&lt;/p&gt;
&lt;p&gt;This talk will cover what TensorFlow is, why/when you should use it, and cover the basics surrounding Variables, Placeholders, and Custom Functions. Importantly, there are several use cases &lt;em&gt;not&lt;/em&gt; focused on data analytics - TensorFlow is more than just a machine learning library!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Layton</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/learning-tensorflow.html</guid><category>datascience</category><category>tensorflow</category></item><item><title>Linear Genetic Programming in Python Bytecode</title><link>https://pyvideo.org/pycon-au-2016/linear-genetic-programming-in-python-bytecode.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mark Burgess
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/99/view_talk"&gt;https://2016.pycon-au.org/schedule/99/view_talk&lt;/a&gt;
A quick tutorial on genetic programming and its implementation in Python.
Including the general process of evolution, the various representations of programs and particularly linear genetic programming.
Some really basic python libraries are introduced, including the DEAP and pyevolve frameworks.
It has been presented and prototyped by github user mgard (and documented &lt;a class="reference external" href="http://multigrad.blogspot.com.au/2014/06/fun-with-python-bytecode.html"&gt;http://multigrad.blogspot.com.au/2014/06/fun-with-python-bytecode.html&lt;/a&gt;) that python bytecode itself could be directly evolved in linear genetic programming to alleviate the overhead of compiling the permutations of trees generated by the evolutionary process.
Python bytecode itself is redly accessed and created by Cpython, though not compatible between versions and a subset of python bytecode instructions will be selected for the implementation of a basic example of symbolic regression.
A futher and more useful example will be provided.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Burgess</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/linear-genetic-programming-in-python-bytecode.html</guid></item><item><title>Mental Health in Development</title><link>https://pyvideo.org/pycon-au-2016/mental-health-in-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eloise Macdonald-Meyer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/179/view_talk"&gt;https://2016.pycon-au.org/schedule/179/view_talk&lt;/a&gt;
This talk will explore the various mental health pressures and impacts that development can have, as well as the strategies developers, and their workplaces, can use to deal with them to support those who may be suffering.
Many conversations have been started about mental health in technology, and it is important for these to continue. Parts of the development process can sometimes lead to situations where looking after yourself can be difficult and it is important not only to be able to minimise the risk of these, but to be able to recognise them and find ways out of them.
On the other hand, the amount of technology to help combat mental health is increasing, and what better demographic to test, use and further develop these technologies than developers themselves. This talk will also discuss the rise and continuity of technology to assist in mental health.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eloise Macdonald-Meyer</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/mental-health-in-development.html</guid></item><item><title>MicroPython: Embedded programming for everyone</title><link>https://pyvideo.org/pycon-au-2016/micropython-embedded-programming-for-everyone.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jim Mussared
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/110/view_talk"&gt;https://2016.pycon-au.org/schedule/110/view_talk&lt;/a&gt;
Embedded programming allows students to take their programs into the physical world - to build robots and interactive gadgets with sensors and displays. Until recently, this has been almost exclusively the domain of lower level languages like C which is not known for its beginner friendliness.&lt;/p&gt;
&lt;p&gt;MicroPython is an optimized implementation of Python 3 designed to be run on the sort of embedded microcontrollers that are making their way into the classroom, allowing Python to take the place of C. In particular, the BBC MicroBit, the pyboard and the ESP8266 all now support MicroPython.&lt;/p&gt;
&lt;p&gt;By using a language that students are already familiar with, more time can be spent on fun things like building robots and less time debugging code or setting up development tools.&lt;/p&gt;
&lt;p&gt;One of the problems with teaching embedded programming in a classroom environment is the equipment required - both the actual boards and any additional accessories or modules. We will also demonstrate a browser-based MicroBit simulator which makes embedded programming accessible to more students and also allows for the creation of structured lessons, problems and assessments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Mussared</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/micropython-embedded-programming-for-everyone.html</guid><category>MicroPython</category><category>education</category></item><item><title>More testing with fewer tests</title><link>https://pyvideo.org/pycon-au-2016/more-testing-with-fewer-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clinton Roy
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/188/view_talk"&gt;https://2016.pycon-au.org/schedule/188/view_talk&lt;/a&gt;
We all wish we were were testing more, but tests are ugly, a pain to write and are brittle. Property based testing helps to solve all of these problems. Now, with Hypothesis, Python has an outstanding toolkit to write property based tests.&lt;/p&gt;
&lt;p&gt;With Hypothesis, instead of writing individual tests, you describe properties of your code and Hypothesis generates the test cases for you. This frees you from writing repetitive and error prone test cases. Hypothesis will generate many more test cases than you'll ever be able to bare writing, and will find more bugs.&lt;/p&gt;
&lt;p&gt;Hypothesis has plugins for Django and numpy to help you generate test cases for these two frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Clinton Roy</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/more-testing-with-fewer-tests.html</guid></item><item><title>Predicting the TripleJ Hottest 100 With Python</title><link>https://pyvideo.org/pycon-au-2016/predicting-the-triplej-hottest-100-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Justin Warren
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/41/view_talk"&gt;https://2016.pycon-au.org/schedule/41/view_talk&lt;/a&gt;
For several years now, I've used Python to help me attempt to predict the results of TripleJ's Hottest 100.&lt;/p&gt;
&lt;p&gt;LEARN! how to write scripts that use more than CPU0 on your fancy multi-core laptop!&lt;/p&gt;
&lt;p&gt;SEE! the alarming amount of information you can get through social network APIs.&lt;/p&gt;
&lt;p&gt;MARVEL! at the myriad ways Optical Character Recognition will mangle your text!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Warren</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/predicting-the-triplej-hottest-100-with-python.html</guid></item><item><title>Preventing Cat-astrophes with GNU MediaGoblin</title><link>https://pyvideo.org/pycon-au-2016/preventing-cat-astrophes-with-gnu-mediagoblin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ben Sturmfels
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/138/view_talk"&gt;https://2016.pycon-au.org/schedule/138/view_talk&lt;/a&gt;
What would happen to all the cat videos if YouTube were to disappear? It would be a cat-atstrophe!&lt;/p&gt;
&lt;p&gt;GNU MediaGoblin is Python-based media publishing system for artists — an alternative to centralised, censored and surveilled systems like Flickr, YouTube and SoundCloud. MediaGoblin gives people privacy, choice and control of their own media, something we need now more than ever.&lt;/p&gt;
&lt;p&gt;This talk will explore the architecture of GNU MediaGoblin, the technical challenges in implementing fully decentralised sharing and commenting through PyPump and the Pump.io API as well as work to lower the Python deployment barrier to empower normal people to escape the centralised systems (&amp;quot;userops&amp;quot;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Sturmfels</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/preventing-cat-astrophes-with-gnu-mediagoblin.html</guid></item><item><title>Behind Closed Doors: Managing Passwords in a Dangerous World</title><link>https://pyvideo.org/pycon-au-2016/pycon-au-2016-behind-closed-doors-managing-passwords-in-a-dangerous-world.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Noah Kantrowitz
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/61/view_talk"&gt;https://2016.pycon-au.org/schedule/61/view_talk&lt;/a&gt;
Secrets come in many forms, passwords, keys, tokens. All crucial for the operation of an application, but each dangerous in its own way. In the past, many of us have pasted those secrets in to a text file and moved on, but in a world of config automation and ephemeral microservices these patterns are leaving our data at greater risk than ever before.&lt;/p&gt;
&lt;p&gt;New tools, products, and libraries are being released all the time to try to cope with this massive rise in threats, both new and old-but-ignored. This talk will cover the major types of secrets in a normal web application, how to model their security properties, what tools are best for each situation, and how to use them with major web frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Noah Kantrowitz</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pycon-au-2016-behind-closed-doors-managing-passwords-in-a-dangerous-world.html</guid><category>django</category></item><item><title>Saturday: Lightning Talks</title><link>https://pyvideo.org/pycon-au-2016/pycon-au-2016-saturday-lightning-talks.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pycon-au-2016-saturday-lightning-talks.html</guid><category>lightning talks</category></item><item><title>SSL all the things</title><link>https://pyvideo.org/pycon-au-2016/pycon-au-2016-ssl-all-the-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Markus Holtermann
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/50/view_talk"&gt;https://2016.pycon-au.org/schedule/50/view_talk&lt;/a&gt;
Over the last few years SSL/TLS encryption of websites has risen tremendously. The Let’s Encrypt organization makes that pretty easy. And you can use it, too. For free! In this talk I'll show how to integrate SSL/TLS and point out some common pitfalls.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Holtermann</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pycon-au-2016-ssl-all-the-things.html</guid></item><item><title>The Power ⚡️ and Responsibility 😓 of Unicode Adoption ✨</title><link>https://pyvideo.org/pycon-au-2016/pycon-au-2016-the-power-and-responsibility-of-unicode-adoption.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Katie McLaughlin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/19/view_talk"&gt;https://2016.pycon-au.org/schedule/19/view_talk&lt;/a&gt;
Communication is difficult.&lt;/p&gt;
&lt;p&gt;Whether it’s between humans or machines or a combination of the two, trying to translate meaningful information is a lossy process.&lt;/p&gt;
&lt;p&gt;Converting languages to use the new Unicode standard is hard, but once it's in place, you get this marvellous feature-add: Emoji compatibility. No longer do we have to make faces with symbols, or be forced to platform-specific emoticons! Rejoice in the extended character set!&lt;/p&gt;
&lt;p&gt;Emoji has a rich history as a way to allow the communication of ideas in a reduced amount of data, and dates back to a time where this was important: SMS communications in Japan. However, as social networks feverishly try and clamber into this bandwagon, their implementations of the standard create more issues with miscommunication that aren't already possible with a 12x12 pictograph. 🤔&lt;/p&gt;
&lt;p&gt;From the technical to the social aspects, mojibake and UTF-{8,16,32}, this talk will cover why the extended character set provided by the Unicode standard needs to be treated with responsibility by users and platforms alike.&lt;/p&gt;
&lt;p&gt;This talk is not just an excuse to see what parts of the conference stack can’t handle Unicode, I promise. 😇&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie McLaughlin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pycon-au-2016-the-power-and-responsibility-of-unicode-adoption.html</guid></item><item><title>Pyrobuf and the Tyranny of Speed</title><link>https://pyvideo.org/pycon-au-2016/pyrobuf-and-the-tyranny-of-speed.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gregory Saunders
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/171/view_talk"&gt;https://2016.pycon-au.org/schedule/171/view_talk&lt;/a&gt;
The data structures used to represent information and program state in memory are rarely conducive to the storage and transmission of that information and state. The process of translating those data structures into a format better suited to storage is known as serialisation or marshalling.&lt;/p&gt;
&lt;p&gt;Google’s Protobuf is a mechanism for serialising and deserialising structured data. Pyrobuf is a alternative, lightning-fast, implementation of Protobuf written in Cython that is 2-4 times faster than Protobuf when using its C++ backend and 20-40 times faster than its pure Python implementation.&lt;/p&gt;
&lt;p&gt;In this talk we’ll briefly review Protobuf and compare it to other well known serialisation mechanisms such as XML and JSON. We’ll then take a look at Pyrobuf and the basic strategies it uses to achieve significantly better performance.&lt;/p&gt;
&lt;p&gt;Pyrobuf’s main claim to fame is its speed. This makes fixing bugs and adding new features a real challenge as any degradation in performance will not be well-received by users who’ve come to expect and rely on its speed. Therefore, for the remainder of the talk we’ll discuss tricks and tips, some more legitimate than others, for maintaining speed as new features are added.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gregory Saunders</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pyrobuf-and-the-tyranny-of-speed.html</guid><category>pyrobuf</category></item><item><title>Python All the Things</title><link>https://pyvideo.org/pycon-au-2016/python-all-the-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Russell Keith-Magee
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/198/view_talk"&gt;https://2016.pycon-au.org/schedule/198/view_talk&lt;/a&gt;
We’re familiar with Python as a scripting language, as a web server language, as a teaching language, as a data analysis language, and as a teaching language. But is that the limit of where Python can be used? What is the future for Python on other platforms? Is the prospect of using Python on those platforms a novelty, or a viable way to fend off an existential threat to the language? And how does this threat intersect with other threats we have to our community, and to our industry?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-all-the-things.html</guid></item><item><title>Python at Terrace</title><link>https://pyvideo.org/pycon-au-2016/python-at-terrace.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim Stephens
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/95/view_talk"&gt;https://2016.pycon-au.org/schedule/95/view_talk&lt;/a&gt;
The development of the Digital Technologies curriculum and the shift from ICT to DT has dramatically changed the teaching of computing in schools. This change has challenged teachers to find new solutions and software to assist them in their teaching of the curriculum. Some schools have employed Python as a way of meeting these challenges and requirements outlined in the curriculum documents.
The band description 8.6 states that  by the end of Grade Eight students should be using a general purpose language to code solutions. At Terrace we decided to use Python to achieve this outcome because of Python’s ease of deployment, cost and syntax light approach. Students in Grade Eight use the turtle and functions to write their name and create shapes. In Grades Nine and Ten the band description states:Students develop modular solutions to complex problems using an object-oriented programming language where appropriate, and evaluate their solutions and existing information systems based on a broad set of criteria including connections to existing policies and their enterprise potential. To achieve this we get students to program classes and databases. Students create a piece of software that creates customers for a bank or a character creator for an RPG. Students design, implement and evaluate the software that they create. In this presentation I will share the successes and failures over the past five years and provide people with software options, programs of work and ideas for Grades Eight to Ten when using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Stephens</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-at-terrace.html</guid><category>education</category></item><item><title>Python for Bioinformatics for learning Python</title><link>https://pyvideo.org/pycon-au-2016/python-for-bioinformatics-for-learning-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Martin Schweitzer
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/89/view_talk"&gt;https://2016.pycon-au.org/schedule/89/view_talk&lt;/a&gt;
In this talk I will explain why Python is an excellent language for learning about bioinformatics.  I intend to make a compelling case in favour of using Python as a first language for teaching bioinformatics.&lt;/p&gt;
&lt;p&gt;I will then explain how bioinformatics can be a useful vehicle for learning Python.&lt;/p&gt;
&lt;p&gt;Finally, we will visit a site where users can learn both Python and bioinformatics in a stimulating, engaging and motivating environment.&lt;/p&gt;
&lt;p&gt;The talk will assume familiarity with Python, but does not assume any knowledge of bioinformatics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martin Schweitzer</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-for-bioinformatics-for-learning-python.html</guid></item><item><title>Python for bridging between researchers and service operators: from CFFI to Jupyterhub</title><link>https://pyvideo.org/pycon-au-2016/python-for-bridging-between-researchers-and-service-operators-from-cffi-to-jupyterhub.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kevin Plastow
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/108/view_talk"&gt;https://2016.pycon-au.org/schedule/108/view_talk&lt;/a&gt;
This talk will give an overview of a water forecasting system, which exposes via Python a suite of tools developed in C++ for hydrologists to use.&lt;/p&gt;
&lt;p&gt;PySWIFT is a Python software system that allows the use of SWIFT (Short-term Water Information and Forecasting Tools), a hydrologic suite of tools for flood and short-term streamflow forecasting.&lt;/p&gt;
&lt;p&gt;When integrating the SWIFT C++ system with Python, we aimed to achieve two main goals:
1. Provide a productive and interactive environment for hydrological modelling.
2. Take advantage of a complex multi-threaded C++ suite of tools that enables rapid execution.&lt;/p&gt;
&lt;p&gt;To achieve the first goal, we created a modelling environment using JupyterHub. In this environment, modellers can set up, run, inspect and modify models, which is ideal to conduct exploratory experiments with the models.
To achieve the second goal, we used CFFI to create a Python wrapper for SWIFT’s API. CFFI allows us to interact with SWIFT’s C interface.&lt;/p&gt;
&lt;p&gt;In this presentation, we will highlight the challenges and learnings that came about whilst building this system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Plastow</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-for-bridging-between-researchers-and-service-operators-from-cffi-to-jupyterhub.html</guid><category>datascience</category></item><item><title>Python for science, side projects and stuff!</title><link>https://pyvideo.org/pycon-au-2016/python-for-science-side-projects-and-stuff.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Lonsdale
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/85/view_talk"&gt;https://2016.pycon-au.org/schedule/85/view_talk&lt;/a&gt;
There are many serious reasons why Python is a great language for scientific research but in this talk I will propose an alternative reason; Python is great for scientific research because of all the other non-scientific things you can do with it!&lt;/p&gt;
&lt;p&gt;Research data can take a long time to generate, and researchers may never know when certain programming skills will be needed. Since you’re going to procrastinate on side projects anyway, using Python in those side projects is a great way to improve your skills until they are needed. Using my own experiences in computational biology research,  I’ll go through how the use of Python for web scraping and data visualisation in several diversions, distractions and other side projects ultimately helped my research.&lt;/p&gt;
&lt;p&gt;I’ll also outline how the general-purpose nature of Python can come in handy for teaching and outreach, and how packages like Django can allow for efficiently creating infrastructure around research data and analysis.  There is more to research than doing research, and more to scientific programming in Python than the usual suspects in SciPy. In this talk I’ll argue that using Python for side projects and harebrained schemes is essential preparation for all of the other legitimate reasons to use Python to solve scientific problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Lonsdale</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-for-science-side-projects-and-stuff.html</guid></item><item><title>Python for Water Forecasting Services</title><link>https://pyvideo.org/pycon-au-2016/python-for-water-forecasting-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daehyok Shin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/142/view_talk"&gt;https://2016.pycon-au.org/schedule/142/view_talk&lt;/a&gt;
Since 2008, the Bureau of Meteorology has developed several modelling systems to support its streamflow forecasting services. These systems include MSDM (Modified Statistical Downscaling Method) and WAFARi (Water Availability Forecasts of Australian Rivers) for the Seasonal Streamflow Forecasting service (&lt;a class="reference external" href="http://www.bom.gov.au/water/ssf"&gt;http://www.bom.gov.au/water/ssf&lt;/a&gt;), STAR (Streamflow Toolkit for Australian Rivers) for the 7-Day Streamflow Forecasting service (&lt;a class="reference external" href="http://www.bom.gov.au/water/7daystreamflow"&gt;http://www.bom.gov.au/water/7daystreamflow&lt;/a&gt;) and HRS toolkit for the Historical Reference Stations (&lt;a class="reference external" href="http://www.bom.gov.au/water/hrs"&gt;http://www.bom.gov.au/water/hrs&lt;/a&gt;). These systems routinely ingest recent observation data, fetch climate forecasts, run rainfall-runoff models and provide updated forecasts through publicly available websites. We chose Python as the primary programming language to build the main components of these systems, and used open source packages for scientific computing including NumPy, Pandas, Matplotlib, PyTables and IPython. Python was used as the glue to integrate different system components, and as a bridge to connect scientists and IT programmers. This approach resulted in a highly productive collaboration with CSIRO and university partners. It also fostered effective communication between hydrologists and system developers. In this presentation, we will describe how these modelling systems were built up and currently operate within the Bureau, and also explain how the use of Python was a key factor for successful development and operation of these forecasting systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daehyok Shin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-for-water-forecasting-services.html</guid></item><item><title>Python on Windows</title><link>https://pyvideo.org/pycon-au-2016/python-on-windows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peter Lovett
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/132/view_talk"&gt;https://2016.pycon-au.org/schedule/132/view_talk&lt;/a&gt;
Some of us working in the corporate world are required to use Microsoft Windows.
How can we bring the goodness of Python to the Windows platform?
What are the problems you could encounter and how can you solve them?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wail at install directory problems!&lt;/li&gt;
&lt;li&gt;scream at path separators!&lt;/li&gt;
&lt;li&gt;cry at the craziness of special window installers&lt;/li&gt;
&lt;li&gt;revel in the beauty of lovely help&lt;/li&gt;
&lt;li&gt;marvel at the joy of py launcher and a proper #! line&lt;/li&gt;
&lt;li&gt;be terrified at accessing the winapi through the win32 libraries&lt;/li&gt;
&lt;li&gt;be astonished at Python taking control of Excel / Word / Outlook / Acrobat through the COM interface with win32com&lt;/li&gt;
&lt;li&gt;laugh at batch files!&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-on-windows.html</guid></item><item><title>Python's Bright Future in Science</title><link>https://pyvideo.org/pycon-au-2016/pythons-bright-future-in-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Juan Nunez-Iglesias
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/200/view_talk"&gt;https://2016.pycon-au.org/schedule/200/view_talk&lt;/a&gt;
Over the past five years, Python has skyrocketed in popularity in the scientific world, pushing out proprietary languages such as IDL and Matlab. This rise was powered by simple syntax and efficient numerical libraries. But many operations in Python are still slow, and upstart languages, such as Julia and Go, promise simplicity &lt;em&gt;and&lt;/em&gt; speed. Can Python cement its place in scientific computing?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Nunez-Iglesias</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/pythons-bright-future-in-science.html</guid><category>datascience</category></item><item><title>Reinventing Django for the Real-Time Web</title><link>https://pyvideo.org/pycon-au-2016/reinventing-django-for-the-real-time-web.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Godwin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/28/view_talk"&gt;https://2016.pycon-au.org/schedule/28/view_talk&lt;/a&gt;
Django's new Channels feature takes Django beyond the world of HTTP's request-response protocol and into the modern Web protocol world of WebSockets and real-time communication - but it also does a lot more. Learn how Django can now respond to WebSockets, emails or instant messages as easily as HTTP, and we re-architected Django to support all these changes while keeping a clean API and backwards compatibility, and the implications it has for the wider Python ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/reinventing-django-for-the-real-time-web.html</guid><category>django</category></item><item><title>Releasing Calendar-Versioned Software</title><link>https://pyvideo.org/pycon-au-2016/releasing-calendar-versioned-software.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/144/view_talk"&gt;https://2016.pycon-au.org/schedule/144/view_talk&lt;/a&gt;
Calendar-versioned software (or “calver”), in contrast to semantically versioned software (or “semver”), is released on regular intervals, rather than on the occurrence of features, bug fixes, or backwards compatibility breaking changes. This method of releasing software, notably used by Twisted and various related projects, eschews the “major.minor.patchlevel” format and the guarantees of a semver regime and instead focuses on providing robust backwards compatibility, clear deprecation cycles, and frequent but smaller releases. This talk discusses some of the trials and tribulations of the release process of such a project, Twisted, and the ways that it makes it work, as well as what tools are available to make the process easier if you wish to implement it yourself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amber Brown ("HawkOwl")</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/releasing-calendar-versioned-software.html</guid></item><item><title>Reproducible Research in Python</title><link>https://pyvideo.org/pycon-au-2016/reproducible-research-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jodie Burchell
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/127/view_talk"&gt;https://2016.pycon-au.org/schedule/127/view_talk&lt;/a&gt;
You’ve seen a great idea on someone’s blog that you think would really push that old analysis you did 6 months ago to the next level. You open up the Dropbox folder you have with all of your scripts, and … you’re lost. Which script did you start with? What does this random chunk of code do? Where is the original data file? You finally sort out your scripts, but then your code fails every second line because you don't even remember which packages you used before. Frustrated, you give up.&lt;/p&gt;
&lt;p&gt;What if I told you that there is a better way to keep track of your analyses, and that it is easier than you think to do so? In this talk I will show you how using a reproducible research approach to your analyses can save you hours of time when revisiting or updating old projects, and demonstrate some of the tools that Python has available to make this possible. This talk will cover how to manage your packages using virtualenvs, how to thoroughly document your analysis using Jupyter Notebook, how to keep track of any changes using source control systems like Git and how to collaborate effectively using GitHub. By the end you will wonder why you’ve ever done your analyses any other way, and will be happily maintaining and improving your projects for many years to come!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jodie Burchell</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/reproducible-research-in-python.html</guid></item><item><title>RULES FOR RADICALS: CHANGING THE CULTURE OF PYTHON AT FACEBOOK</title><link>https://pyvideo.org/pycon-au-2016/rules-for-radicals-changing-the-culture-of-python-at-facebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jason Fried
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/27/view_talk"&gt;https://2016.pycon-au.org/schedule/27/view_talk&lt;/a&gt;
Today, services built on Python 3.5 using asyncio are widely used at Facebook. But as recently as May of 2014 it was actually impossible to use Python 3 at Facebook. Come learn how we cut the Gordian Knot of dependencies and social aversion to the point where new services are now being written in Python 3 and existing codebases have plans to move to Python 3.5.  All without official support or sanction.&lt;/p&gt;
&lt;p&gt;&amp;quot;Rules for Radicals&amp;quot; is a book for community organizers by the late Saul Alinsky on how to unite people to effect positive change in their communities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Fried</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/rules-for-radicals-changing-the-culture-of-python-at-facebook.html</guid></item><item><title>Search-First Writing for Developers</title><link>https://pyvideo.org/pycon-au-2016/search-first-writing-for-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Heidi Waterhouse
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/47/view_talk"&gt;https://2016.pycon-au.org/schedule/47/view_talk&lt;/a&gt;
If people can't use your software, you have already failed as a developer.&lt;/p&gt;
&lt;p&gt;This talk digs in to how optimizing for search and using the existing technical assistance forums can put your product ahead of the pack. Technical writing, in all its variations, is a type of interface with your product. It incorporates everything from an error message to an implementation guide. How can you as a developer make deploying, using, and promoting your product as painless as possible? Make it searchable. Make finding the answer to a problem so trivially easy that your user barely even remembers they had a problem.&lt;/p&gt;
&lt;p&gt;No one wants to be using software. They want to be data mining or manipulating beautiful photos or targeting advertising. Making them think about the software diverts them from what they want to be accomplishing. Use these documentation techniques to get them in and out and on their way.&lt;/p&gt;
&lt;p&gt;(my secret is: I'm always angry when I have to read help)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heidi Waterhouse</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/search-first-writing-for-developers.html</guid><category>django</category></item><item><title>Security Starts With You: Social Engineering</title><link>https://pyvideo.org/pycon-au-2016/security-starts-with-you-social-engineering.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tiberius Hefflin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/149/view_talk"&gt;https://2016.pycon-au.org/schedule/149/view_talk&lt;/a&gt;
Virus? There’s an app for that. Malware? There’s an app for that. Social engineering? It's a little more complicated. These techniques, used by hackers to gather information on their target, are hard to combat without education - so why don’t we talk about them more often? Aimed at the average user who could be targeted by such an attack, this talk discusses the tools of social engineering, how it can be combated and why so many companies fail in preparing their employees for such an attack.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tiberius Hefflin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/security-starts-with-you-social-engineering.html</guid></item><item><title>Smart City: Connecting the dots and digital kids</title><link>https://pyvideo.org/pycon-au-2016/smart-city-connecting-the-dots-and-digital-kids.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Roland Gesthuizen
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/203/view_talk"&gt;https://2016.pycon-au.org/schedule/203/view_talk&lt;/a&gt;
Schools face a daunting challenge to increase their student
exposure to coding, hands-on technology learning to solve some
real-world problems and teaching STEM principles (Science, Technology,
Engineering and Mathematics) through design, construction and testing.
This personal presentation by a leading teacher illustrate journey to
connect his students to some real-world problems and the challenges
faced along the way. Following on from an earlier
computational-thinking challenge to build and program a moving
vehicle, Roland's current mission is to challenge students to design,
build a smart city consisting of intelligent vehicles and
infrastructure. To do this they need to program a navigation algorithm
to autonomously navigate vehicles through a series of traffic
challenges that test collision avoidance and road safety. They have
been invited to showcase their work at the ITS2016 Word Congress in
Melbourne with a maker-space for delegates to share our hands-on
problem solving and learning with the software and models developed by
the students. Moonshots live in a grey area between audacious
technology and pure science fiction. Our moonshot was to empower
students around the globe to build and control their future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roland Gesthuizen</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/smart-city-connecting-the-dots-and-digital-kids.html</guid><category>education</category></item><item><title>So you want to make a screencast?</title><link>https://pyvideo.org/pycon-au-2016/so-you-want-to-make-a-screencast.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Caleb Hattingh
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/77/view_talk"&gt;https://2016.pycon-au.org/schedule/77/view_talk&lt;/a&gt;
Well, do you?  If so, there are a bunch of tips and tricks that you can learn that will get you up to speed very quickly.&lt;/p&gt;
&lt;p&gt;Creating lesson content is always demanding and time-consuming.  Using screencasts as a medium of instruction is no different, but there are clearly very specific habits that can make you much more efficient.  Specific advice about working with Python and the Jupyter Notebook will also be covered.&lt;/p&gt;
&lt;p&gt;Secondly, this talk will also touch on aspects related to working with a publisher. These will include drafting the initial scope of work, negotiating timelines, and managing feedback and criticism.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caleb Hattingh</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/so-you-want-to-make-a-screencast.html</guid></item><item><title>Sunday: Lightning Talks and Closing</title><link>https://pyvideo.org/pycon-au-2016/sunday-lightning-talks-and-closing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/sunday-lightning-talks-and-closing.html</guid><category>lightning talks</category></item><item><title>Teaching geometry using Logo/Python turtle module, or how to sneak programming into maths class</title><link>https://pyvideo.org/pycon-au-2016/teaching-geometry-using-logopython-turtle-module-or-how-to-sneak-programming-into-maths-class.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vivian Li
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/117/view_talk"&gt;https://2016.pycon-au.org/schedule/117/view_talk&lt;/a&gt;
With the new national curriculum for Digital Technologies, there is a fantastic opportunity (and in some schools, need) to teach programming in conjunction with other learning areas. Python is an ideal first language, and there is a natural and deep relationship between mathematics and computer science.&lt;/p&gt;
&lt;p&gt;We used the Python’s Turtle module (an implementation of Logo) to create resources that integrate the Year 7 Geometry topic and the basics of Python programming in a way that’s highly engaging for students. Learn about how we integrated the two subject areas and the results of our pilot run with a cohort of Year 7 students in NSW.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vivian Li</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-geometry-using-logopython-turtle-module-or-how-to-sneak-programming-into-maths-class.html</guid><category>education</category></item><item><title>Teaching programming in undergraduate psychology</title><link>https://pyvideo.org/pycon-au-2016/teaching-programming-in-undergraduate-psychology.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damien Mannion&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/79/view_talk"&gt;https://2016.pycon-au.org/schedule/79/view_talk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Psychology is a diverse discipline that involves the scientific study of behaviour and cognition. As part of undergraduate training in psychology, students are required to develop substantial skills in research methods and critical thinking. Here, I will discuss our recent efforts to use computer programming to aid in the student achievement of such outcomes. We have introduced a programming component in two third-year undergraduate psychology courses. As part of 'Vision &amp;amp; Brain', students learn to use Python (particularly the package 'PsychoPy') to implement their own vision science experiments. As part of 'Research Internship', students learn to use Python (particularly the 'numpy' and 'veusz' packages) to perform data analyses and to produce visualisations. The aim of these new course components is to provide students with a set of skills that will increase their ability to conduct research, but also to increase their problem solving and critical thinking skills through the process of coding. I will discuss our educational and practical implementation of such material and will use the results of student surveys and feedback to evaluate their effectiveness. Finally, I will discuss some of the challenges we encountered and give some indications of potential future developments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damien Mannion</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-programming-in-undergraduate-psychology.html</guid><category>psychopy</category><category>numpy</category><category>veusz</category></item><item><title>Teaching Python: Ten+ Years of Successes, Trials and Tribulations</title><link>https://pyvideo.org/pycon-au-2016/teaching-python-ten-years-of-successes-trials-and-tribulations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruce Fuda
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/125/view_talk"&gt;https://2016.pycon-au.org/schedule/125/view_talk&lt;/a&gt;
Teaching programming has always been a challenge given the lack of experience, understanding and knowledge students in schools generally have about what is involved and what it means to be studying &amp;quot;IT&amp;quot;. It hasn't been helped by a lack of robust curriculum in most states and territories in Australia. With the recent endorsement of the Australian Curriculum: Digital Technologies, most states and territories have implementation timelines as early as 2017, and this means that teachers (and those who want to support them in their classrooms) now have an obligation to deliver ambitious, engaging and rigorous learning activities in their classrooms. Having been in the enviable situation of being supported and encouraged to design and implement innovative computer science curricula for students in years 6-12, I'll be sharing the reasons why I choose to use Python as my primary teaching language in high school, and identify the tips, tricks and traps teachers need to watch out for when using it as the basis for learning not just programming skills, but computational thinking more generally. This includes an explanation of the importance of a project-driven approach, and demonstration of the techniques I use and projects my students work on in class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Fuda</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-python-ten-years-of-successes-trials-and-tribulations.html</guid><category>education</category></item><item><title>Teaching Python with Minecraft</title><link>https://pyvideo.org/pycon-au-2016/teaching-python-with-minecraft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Digital K
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/134/view_talk"&gt;https://2016.pycon-au.org/schedule/134/view_talk&lt;/a&gt;
Minecraft is one of the best selling video games of all time. So, why not use it as a tool for teaching Python?&lt;/p&gt;
&lt;p&gt;Instead of clicking to place blocks, students can create giant shapes, structures or even games within the game by learning some basic Python code - and along the way, key programming concepts.&lt;/p&gt;
&lt;p&gt;This presentation will cover how it works, and what you need to set this up for school or home. We'll look at examples of coding projects, how it can relate to other subjects in the curriculum (such as maths and design), and discuss why this is a great tool for introducing beginners to text-based coding.&lt;/p&gt;
&lt;p&gt;No prior knowledge required, although some familiarity with the Minecraft game and/ or text-based coding will be useful.&lt;/p&gt;
&lt;p&gt;Recommended for teachers or parents of students in Years 5 - 12 who are at a beginner or intermediate stage of learning programming.  Budding young coders also welcome!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Digital K</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-python-with-minecraft.html</guid><category>education</category></item><item><title>The dangerous, exquisite art of safely handing user-uploaded files.</title><link>https://pyvideo.org/pycon-au-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom Eastman
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/148/view_talk"&gt;https://2016.pycon-au.org/schedule/148/view_talk&lt;/a&gt;
Every web application has an attack surface -- the exposed points of interaction where a malicious or mischievous user can commit malice, or mischief (respectively). Possibly nowhere, however, is more vulnerable than places a user is allowed to upload arbitrary files.&lt;/p&gt;
&lt;p&gt;The scope for abuse is eye-widening: The contents of the file, the type of the file, the size and encoding of the file, even the &lt;em&gt;name&lt;/em&gt; of the file can be a potent vector for attacking your system.&lt;/p&gt;
&lt;p&gt;The scariest part? Even the best and most secure web-frameworks (yes, I'm talking about Django) can't protect you from all of it.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you every scary thing I know about that can be done with a file upload, and how to protect yourself from -- hopefully -- most of them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</guid></item><item><title>The Evolution of Python Packaging at Facebook</title><link>https://pyvideo.org/pycon-au-2016/the-evolution-of-python-packaging-at-facebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dan Reif
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/131/view_talk"&gt;https://2016.pycon-au.org/schedule/131/view_talk&lt;/a&gt;
With tens of millions of Python invocations every day, what’s a packager to do?  The answer selected must account for the insanity of a deeply-heterogeneous production environment: different kernels, different OS distributions, even different versions of system Python.  It also needs enough context to carry with it a consistent reference point for when it was packaged relative to the work of thousands of engineers in a single, unified source control tree.  Lastly, at Facebook scale with hundreds of thousands of servers, every byte sent over the network and stored on disk counts, and every CPU cycle wasted can create a myriad of challenges associated with data center operations management.&lt;/p&gt;
&lt;p&gt;Sure, it’d be easy to show what a beautiful, easy packaging format we’ve developed at Facebook, and sing its praises, but that’s not what this talk is about.  Instead, we’ll get into the nitty-gritty, and talk about hard tradeoffs that happen when developing a system in the real world.  This is an in-depth look at how Facebook’s packaging has evolved, warts and speed bumps included.  Some of the design goals we addressed (and/or issues we hit!) included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Synchronizing and pinning versioning of underlying compiled libraries across related tools&lt;/li&gt;
&lt;li&gt;Running the package as a transparently-Pythonic command-line utility, à la shebang, so we could do in-place replacements of packages written in other languages (e.g. C++)&lt;/li&gt;
&lt;li&gt;Optimizing package size transferred across the network&lt;/li&gt;
&lt;li&gt;Optimizing package sizes on disk&lt;/li&gt;
&lt;li&gt;Minimizing package launch times&lt;/li&gt;
&lt;li&gt;Handling packages launched from a network-FS location that subsequently goes offline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees will learn about the different tools and techniques we used to solve these challenges, as well as the reasoning behind any trade offs that were made.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Reif</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/the-evolution-of-python-packaging-at-facebook.html</guid></item><item><title>Turning stories into websites</title><link>https://pyvideo.org/pycon-au-2016/turning-stories-into-websites.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Donna Benjamin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/65/view_talk"&gt;https://2016.pycon-au.org/schedule/65/view_talk&lt;/a&gt;
The user story sits at the centre of most agile development methodologies.&lt;/p&gt;
&lt;p&gt;But what makes a good story? and where do stories come from? What do we do with them once they've been estimated, prioritised, re-sized and broken down? How can we maintain our sense of the big picture when it's broken down into tiny puzzle pieces? How does that help us build good products?&lt;/p&gt;
&lt;p&gt;This talk puts the focus on the &amp;quot;user&amp;quot; telling the story to understand their requirements for the product. It then turns back to the team to look at how we hear and discuss those stories in order to bring them to life to build the product, and build it right.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donna Benjamin</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/turning-stories-into-websites.html</guid></item><item><title>Tutorial: A Practical Introduction To Machine Learning</title><link>https://pyvideo.org/pycon-au-2016/tutorial-a-practical-introduction-to-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sam Hames
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/133/view_talk"&gt;https://2016.pycon-au.org/schedule/133/view_talk&lt;/a&gt;
Machine learning is a hot topic, with lots of hype about what it can and might do. Given the broad landscape of machine learning, and the continuing proliferation of new tools and techniques it can be difficult to get a pragmatic view of how machine learning can be used, or even where to start.&lt;/p&gt;
&lt;p&gt;This tutorial will provide a high level introduction to machine learning: what it is, what kind of problems we can solve with it, and how can we apply it. In doing so this tutorial will also introduce the scikit-learn library and show you why this library is a central part of the machine learning ecosystem in Python.&lt;/p&gt;
&lt;p&gt;We will start from scratch with a small example dataset, and walk through the process of building and carefully validating a classifier with scikit-learn. The practical focus during the tutorial will be on hands on implementation and experimentation. The technical focus will be on machine learning algorithms as black boxes for making decisions.&lt;/p&gt;
&lt;p&gt;Assumed background: This tutorial only assumes that you are comfortable with Python the language. We will &lt;em&gt;not&lt;/em&gt; assume that you have any maths background, or that you are familiar with numerical computing: discussion of maths and algorithms will be strictly limited to hand waving.&lt;/p&gt;
&lt;p&gt;About Jack&lt;/p&gt;
&lt;p&gt;Jack Simpson is a PhD candidate at the Australian National University working on image processing and behavioural analysis. He received his Software Carpentry Instructor training over a year ago and since then has organised and taught multiple workshops university.&lt;/p&gt;
&lt;p&gt;About Alistair&lt;/p&gt;
&lt;p&gt;Alistair Walsh is a cognitive neuroscientist currently working at The University of Melbourne, Research Platforms department as a Community Manager. He teaches Python, machine learning and text and image processing to researchers who aren't from a computer science background but need to use programming tools in their research. Alistair is also an instructor trainer for Software Carpentry and has run Software Carpentry programming workshops in Melbourne, Sydney and Adelaide.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Hames</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/tutorial-a-practical-introduction-to-machine-learning.html</guid></item><item><title>Tutorial: Technical Blogging for Python Programmers</title><link>https://pyvideo.org/pycon-au-2016/tutorial-technical-blogging-for-python-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thursday Bram
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/115/view_talk"&gt;https://2016.pycon-au.org/schedule/115/view_talk&lt;/a&gt;
This tutorial will cover how to write about your programming projects for an online audience, whether you're promoting your projects, recruiting open source contributors, or building up a blog to impress employers. We'll briefly cover the mechanics of blogging, then dive into how to write effectively about technical topics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thursday Bram</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/tutorial-technical-blogging-for-python-programmers.html</guid></item><item><title>Using Jupyter notebooks to develop and share interactive data displays</title><link>https://pyvideo.org/pycon-au-2016/using-jupyter-notebooks-to-develop-and-share-interactive-data-displays.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ioanna Ioannou
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/143/view_talk"&gt;https://2016.pycon-au.org/schedule/143/view_talk&lt;/a&gt;
Presented with Maoyuan Liu from the Bureau of Meteorology.&lt;/p&gt;
&lt;p&gt;Jupyter notebooks have become a very popular tool for scientific data analysis and exploration. Often notebook users may produce a data analysis within a notebook and decide they wish to share it with a wider audience. While notebooks offer excellent facilities for data visualisation, they are less than ideal as a medium for sharing these visualisations more broadly. Interacting with data in a notebook requires knowledge of programming. Notebooks with static data displays are more accessible to non-technical audiences, but static displays severely limit the breadth and depth of data that can be explored within one notebook. So the question arises: How can we provide our audience with the ability to explore our data?&lt;/p&gt;
&lt;p&gt;Developing interactive data displays for the web typically requires knowledge of web technologies that notebook users may not possess. To bridge this gap, a flurry of recent activity has focussed on the development of tools that facilitate interactivity within notebooks. Such tools include interactive plotting tools that enable actions such as zooming and selecting of data within plots, user interface elements (eg. drop-down menus, sliders) that can be incorporated into notebooks, and tools that facilitate the arrangement of plots and information into dashboard-like displays.&lt;/p&gt;
&lt;p&gt;My team at the Australian Bureau of Meteorology has used these tools to build shareable interactive data displays comparing weather forecasts against observations across Australia. In this talk we will review currently available tools that facilitate interactivity within notebooks, share our experience in using them, and the practices we have developed around their use. A simple step-by-step example will demonstrate how we can put together an interactive data display allowing selective plotting of data through UI controls and interaction with the plots.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ioanna Ioannou</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/using-jupyter-notebooks-to-develop-and-share-interactive-data-displays.html</guid><category>datascience</category></item><item><title>Why would a new developer choose Django?</title><link>https://pyvideo.org/pycon-au-2016/why-would-a-new-developer-choose-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Josh Simmons
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/36/view_talk"&gt;https://2016.pycon-au.org/schedule/36/view_talk&lt;/a&gt;
What makes new developers choose Django over Rails or WordPress? As a web developer and community organizer, Josh has learned a lot about the differences between the frameworks and why people make the choices they do.&lt;/p&gt;
&lt;p&gt;We'll compare Django with other ecosystems to see where it excels and where it lags. You'll leave with a better sense of the web ecosystem as a whole and why people are choosing things that &lt;em&gt;aren't&lt;/em&gt; Django. Critically, attendees will leave with specific ideas about how to attract more new developers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Simmons</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/why-would-a-new-developer-choose-django.html</guid></item><item><title>MicroPython: a journey from Kickstarter to Space</title><link>https://pyvideo.org/pycon-au-2016/micropython-a-journey-from-kickstarter-to-space.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damien George
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/199/view_talk"&gt;https://2016.pycon-au.org/schedule/199/view_talk&lt;/a&gt;
MicroPython is a lean and efficient reimplementation of Python 3 with a
reduced standard library, and brings the awesomeness of Python to computing
devices with few resources, such as microcontrollers.  In this talk I will
detail my journey in building MicroPython and the various projects that it
has been used in and the people who are using it.  I will talk about running
a successful Kickstarter campaign (actually two of them!), circuit board
manufacturing, working with the European Space Agency, working with the BBC
on the micro:bit project, and the challenges of managing and funding
open-source software.  There will also be some live demos!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damien George</dc:creator><pubDate>Sat, 13 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-13:pycon-au-2016/micropython-a-journey-from-kickstarter-to-space.html</guid><category>MicroPython</category></item><item><title>402: Payment Required. Micropayments for IoT</title><link>https://pyvideo.org/pycon-au-2016/402-payment-required-micropayments-for-iot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could provide access to sensor data in exchange for small amounts of payment, or give your devices a stipend and they could autonomously engage in commerce with in a marketplace of machines? Payment solutions for microresources thus far have either required cumbersome aggregation, billing and centeralised metering or have been deemed too cheap to meter. We'll explore technology that could reduce this friction such as the bitcoin blockchain and open source python libraries that allow your devices to engage in micropayments in a fast, trustless and cheap manner.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mitchell O'Neill</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/402-payment-required-micropayments-for-iot.html</guid><category>Internet-of-Things</category><category>Micro-Payments</category></item><item><title>Controlling a 3D printer with Python</title><link>https://pyvideo.org/pycon-au-2016/controlling-a-3d-printer-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Additive manufacturing ('3D printing') has already proven to be a revolutionary technology in industries as diverse as medicine, architecture, industrial design and aerospace. At the same time affordable consumer-grade printers have put 3d printing increasingly within reach of the general public. However the user interfaces of most 3D printers still leave something to be desired. Interaction is generally performed via a monochrome LCD and jog dial. Network connectivity is often an afterthought with file transfers primarily performed via SD Card. OpenGB is an Open Source 3D printer control interface. It was developed in conjunction with re:3D as part of the Open Gigabot project but was designed to work on a variety of Open Source 3D printers. In this talk James Stewart will describe the OpenGB backend which is written in Python and acts as an intermediary between the network and the printer. Various technologies are employed including: Tornado, Websockets, JSONRPC, Multiprocessing &amp;amp; pySerial. As well as 3D printing enthusiasts, this talk will be of interest to anybody using Python to control a lower-level controller such as Arduino.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Stewart</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/controlling-a-3d-printer-with-python.html</guid><category>Internet-of-Things</category><category>OpenGB</category><category>3D Printing</category></item><item><title>ESP8266 and MicroPython</title><link>https://pyvideo.org/pycon-au-2016/esp8266-and-micropython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ESP8266 is an exciting new WiFi enabled SoC which is not only small and fast but also very very cheap. And now it can run Python! This talk discusses the ins and outs of ESP8266 chips and modules, how to install MicroPython, and what you can do with it once you've installed it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Moore</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/esp8266-and-micropython.html</guid><category>Internet-of-Things</category><category>MicroPython</category><category>ESP8266</category></item><item><title>GPS Tracking with Python</title><link>https://pyvideo.org/pycon-au-2016/gps-tracking-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is very well-suited to implement GPS tracking services. Devices need to report position data to servers, and Python handles this role well, especially with the new support for asynchronous event loops in Python 3 which can handle tens of thousands of simultaneous connections. In addition, the struct module in the Python standard library makes short work of processing binary data supplied by devices. In addition to basic interaction with tracking devices, this talk will also present methods of integration (server) testing using py.test, as well as considerations regarding support for both UDP and TCP protocols in the same stack, since different GPS tracking devices may prefer one or the other.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caleb Hattingh</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/gps-tracking-with-python.html</guid><category>Internet-of-Things</category><category>GPS</category></item><item><title>Internet of Things - Lightning Talks</title><link>https://pyvideo.org/pycon-au-2016/iot-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internet of Things - Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Wheeler</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/iot-lightning-talks.html</guid><category>Internet-of-Things</category><category>lightning talks</category></item><item><title>OpenBMC: Boot your server with Python</title><link>https://pyvideo.org/pycon-au-2016/openbmc-boot-your-server-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenBMC is an open source software project that replaces the Baseboard Management Controller firmware that is responsible for turning off and on, and managing the health of your server. The core of the software that performs these functions is implemented in Python, allowing easy to read, modify and debug firmware that is traditionally not accessible to a user. This talk will cover the architecture of the OpenBMC and demonstrate how easy it is to support a new server platform by writing a few lines of Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel Stanley</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/openbmc-boot-your-server-with-python.html</guid><category>Internet-of-Things</category><category>OpenBMC</category></item><item><title>Scripting the Internet of Things</title><link>https://pyvideo.org/pycon-au-2016/scripting-the-internet-of-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A big part of the Internet of Things are the end nodes, such as sensors, that are controlled by microcontrollers or other small computing devices. These devices are getting more and more sophisticated and it can be beneficial to program them with a scripting language instead of a low-level language like C. Such scripting languages need to be implemented specifically to fit and run on a microcontroller and in this talk I will discuss a few of them: Python, Lua, JavaScript and Ruby. I will talk in detail about MicroPython, a lean and efficient reimplementation of Python 3 with a reduced standard library, that runs on microcontrollers and can be used to build Internet-of-Things devices. There will be plenty of time in the talk for questions and open discussion.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damien George</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/scripting-the-internet-of-things.html</guid><category>Internet-of-Things</category><category>MicroPython</category></item><item><title>The Internet of (Better) Things</title><link>https://pyvideo.org/pycon-au-2016/the-internet-of-better-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Internet of Things! Existential menace or meaningless buzzword? Automating away drudgery or just eroding privacy? Cornucopia or Panopticon? We'll look at the poor state of the current IoT in terms of security, privacy and interoperation. We'll consider a set of requirements for a better IoT. And we'll look at what we as Pythonistas can do to improve on this, as a community and an industry.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Moore</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/the-internet-of-better-things.html</guid><category>Internet-of-Things</category><category>Security</category><category>Privacy</category><category>Interoperation</category></item><item><title>Working with real-time data streams in Python</title><link>https://pyvideo.org/pycon-au-2016/working-with-real-time-data-streams-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An increasing number of devices and applications are producing vast amounts of data in real time. This can include measurements, sensor readings, and performance data. Making this data useful often requires that we analyse and use the data in real time but this requires techniques to aggregate, filter, and smooth the data. Drawing on simple and well-tested techniques from mathematics and engineering allows us to solve these problems quickly and efficiently. This talk will describe how Python can be used to develop powerful capabilities for working with real-time data streams and provide simple examples you can start using yourself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lachlan Blackhall</dc:creator><pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-12:pycon-au-2016/working-with-real-time-data-streams-in-python.html</guid><category>Internet-of-Things</category><category>Data</category><category>Real-time</category><category>Kalman Filter</category></item></channel></rss>