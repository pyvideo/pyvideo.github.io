<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 25 Jul 2018 00:00:00 +0000</lastBuildDate><item><title>Going beyond the Django ORM limitations with Postgres</title><link>https://pyvideo.org/europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html</guid><category>django</category><category>database</category></item><item><title>Postgres Demystified</title><link>https://pyvideo.org/europython-2013/postgres-demystified.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgres-demystified.html</guid><category>postgresql</category><category>database</category></item><item><title>Postgres at any scale</title><link>https://pyvideo.org/europython-2018/postgres-at-any-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ll start with the basics you need to know as an app developer about
interacting with your database, then dig into how you can start to
analyze performance. We’ll look at things you need to know for a small
application, then the things you should be cautious of as you start to
layer in other items you need to be aware of for performance including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cache hit ratio&lt;/li&gt;
&lt;li&gt;Index hit ratio&lt;/li&gt;
&lt;li&gt;Proper use of indexes&lt;/li&gt;
&lt;li&gt;Bloat&lt;/li&gt;
&lt;li&gt;Efficient joins&lt;/li&gt;
&lt;li&gt;Sharding&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-25:europython-2018/postgres-at-any-scale.html</guid></item><item><title>Postgres at any scale</title><link>https://pyvideo.org/pycon-ca-2017/postgres-at-any-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll start with the basics you need to know as an app developer about interacting with your database, then dig into how you can start to analyze performance. We'll look at things you need to know for a small application, then the things you should be cautious of as you start to layer in other items you need to be aware of for performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/postgres-at-any-scale.html</guid><category>postgres</category></item><item><title>How Heroku Uses Heroku to Build Heroku</title><link>https://pyvideo.org/pycon-ar-2012/how-heroku-uses-heroku-to-build-heroku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Within Heroku you'll find many languages (Ruby, Python, Go, Erlang,
Clojure), many tools (Pivotal Tracker, Github, Github Issues, Trello),
and many forms of communication (Campfire, Grove.io, GChat, Skype).
Heroku internally is comprised of many small teams, with a total of 50
engineers there exist nearly 20 teams. Each team interacts through
their own preferred form of communication.&lt;/div&gt;
&lt;div class="line"&gt;Despite their very different working styles, each team is able to and
often do deploy on a daily basis without being blocked by other teams.
We do this by building small sharp tools and letting systems
communicate across well defined contracts and APIs. I'll cover how
some of the teams use various tools, but more broadly how we use the
platform and methodologies to grow our team without compromising
ability to execute quickly or quality.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 17 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-17:pycon-ar-2012/how-heroku-uses-heroku-to-build-heroku.html</guid></item><item><title>Moving from Apps to Services</title><link>https://pyvideo.org/pycon-ar-2012/moving-from-apps-to-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Django applications start as monolithic apps, the next step is
often to break these out into individual Django apps in a larger
project. This is a great step, but still requires you to use code as
your contract you talk across. As teams scale before 5-6 people this
introduces complexity and often many bugs over time. The effective way
to continue to scale teams is to define services that talk across
defined API’s and data contracts. This allows you to iteratively version
services and continue to improve them while still supporting backwards
compatibility.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Fri, 16 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-16:pycon-ar-2012/moving-from-apps-to-services.html</guid></item><item><title>Postgres Performance for Humans</title><link>https://pyvideo.org/pyohio-2017/postgres-performance-for-humans-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To many developers the database is a black box. You expect to be able to put data into your database, have it to stay there, and get it out when you query it... hopefully in a performant manner. We'll go from basics to the more advanced of what you need to know to keep things running smoothly.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-29:pyohio-2017/postgres-performance-for-humans-2.html</guid></item><item><title>Postgres Present and Future</title><link>https://pyvideo.org/pygotham-2016/postgres-present-and-future.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Postgres 9.5 was just released a few months ago and has a number of of new improvements we'll walk through including new JSONB functions, some analytical tooling, and of course upsert. Then we'll dive into what's coming in Postgres 9.6, the next Postgres release. Finally, we'll round it out with some look at the ecosystem of extensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/postgres-present-and-future.html</guid></item><item><title>DjangoCon EU 2013: Craig Kerstiens - Getting past the Django ORM limitations with Postgres</title><link>https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-craig-kerstiens-getting-past-the-django-orm-limitations-with-postgres.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Wed, 15 May 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-05-15:djangocon-europe-2013/djangocon-eu-2013-craig-kerstiens-getting-past-the-django-orm-limitations-with-postgres.html</guid></item><item><title>Postgres present and future</title><link>https://pyvideo.org/pycon-us-2016/craig-kerstiens-postgres-present-and-future-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Craig Kerstiens&lt;/p&gt;
&lt;p&gt;Postgres 9.5 was just released a few months ago and has a number of of new improvements we'll walk through including new JSONB functions, some analytical tooling, and of course upsert. Then we'll dive into what's coming in Postgres 9.6, the next Postgres release. Finally, we'll round it out with some look at the ecosystem of extensions.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/craig-kerstiens-postgres-present-and-future-pycon-2016.html</guid></item><item><title>Postgres Performance for Humans</title><link>https://pyvideo.org/pycon-us-2014/postgres-performance-for-humans.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;To many developers the database is a black box. You expect to be able to
put data into your database, have it to stay there, and get it out when
you query it... hopefully in a performant manner. When its not
performant enough the two options are usually add some indexes or throw
some hardware at it. We'll walk through a bit of a clearer guide of how
you can understand and manage DB performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/postgres-performance-for-humans.html</guid></item></channel></rss>