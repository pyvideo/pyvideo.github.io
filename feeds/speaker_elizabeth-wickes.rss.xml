<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 May 2018 00:00:00 +0000</lastBuildDate><item><title>Hard Shouldn't be Hardship: Supporting Absolute Novices to Python</title><link>https://pyvideo.org/pycon-us-2018/hard-shouldnt-be-hardship-supporting-absolute-novices-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we tell novices that programming is hard, what are we warning them about? The intent may be to impress upon learners the importance of taking the workload seriously and starting early on the homework. However, “hard” is a loaded word and leaving novices alone with that word and their imaginations can create an unbounded variable, normalizing emotional extremes and all nighters.  The instructor often has no idea that &amp;quot;hard&amp;quot; has become &amp;quot;hardship&amp;quot;.&lt;/p&gt;
&lt;p&gt;An instructor's expertise can become a blindspot. We've learned what is normal through experience and can easily forget that we didn't know from the start.  We presume that those experiencing trouble will stop and reach out for help, but this will not always be the case if they don't know those situations look like.  Saying &amp;quot;when you're stuck&amp;quot; is not an objective,  actionable statement and leaves the unbounded suffering monster in play, particularly for students who are afraid of being a bother or being seen as asking a stupid question.  We need to be clear with our learners about when difficult material has moved outside our expectations and create a classroom environment where questions and clarifications are celebrated.&lt;/p&gt;
&lt;p&gt;This talk will cover real and practical methods to help learners succeed in intensive programming courses, such as making your expectations clear, helping your students recognize when and how they should reach out for help, creating a positive emotional atmosphere in the classroom, and providing help efficiently.  Topics will include a ban on demotivational words, strategies for soliciting questions, the &amp;quot;2 hour&amp;quot; rule, the educational benefits of live coding, and recontextualizing error messages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elizabeth Wickes</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-10:pycon-us-2018/hard-shouldnt-be-hardship-supporting-absolute-novices-to-python.html</guid></item><item><title>AutoDocish: Automated-ish Dataset Documentation</title><link>https://pyvideo.org/pydata-chicago-2016/autodocish-automated-ish-dataset-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://figshare.com/articles/AutoDocish_Automated-ish_Dataset_Documentation/3759288/1"&gt;https://figshare.com/articles/AutoDocish_Automated-ish_Dataset_Documentation/3759288/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AutoDocish is a command line Python tool to semi-automate the dataset documentation process. Written with a framework for expansion and customization, it produces template files in MarkDown that contain a basic data dictionary structure. This talk explains dataset documentation practices and how this tool could fit into the data publishing workflow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elizabeth Wickes</dc:creator><pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-28:pydata-chicago-2016/autodocish-automated-ish-dataset-documentation.html</guid><category>documentation</category></item></channel></rss>