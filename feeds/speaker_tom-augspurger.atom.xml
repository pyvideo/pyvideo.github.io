<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tom-augspurger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-06T00:00:00+00:00</updated><entry><title>Introduction to pandas</title><link href="https://pyvideo.org/pydata-new-york-city-2019/introduction-to-pandas.html" rel="alternate"></link><published>2019-11-06T00:00:00+00:00</published><updated>2019-11-06T00:00:00+00:00</updated><author><name>Marc Garcia</name></author><id>tag:pyvideo.org,2019-11-06:pydata-new-york-city-2019/introduction-to-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is a hands on introduction to pandas. pandas is a fast, powerful, flexible and easy to use data analysis and manipulation tool, built on top of the Python programming language.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Scalable Machine Learning with Dask</title><link href="https://pyvideo.org/pydata-new-york-city-2019/scalable-machine-learning-with-dask.html" rel="alternate"></link><published>2019-11-04T00:00:00+00:00</published><updated>2019-11-04T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2019-11-04:pydata-new-york-city-2019/scalable-machine-learning-with-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a great ecosystem for machine learning, especially on relatively small datasets processed on a single machine. We'll use Dask to scale libraries like NumPy, pandas, and scikit-learn to larger datasets and larger problems. We'll see that problems can be compute- or memory-bound (or both). We'll see strategies for dealing with these, using a cluster to parallelize our computation.&lt;/p&gt;
</summary></entry><entry><title>Better and Faster Hyper Parameter Optimization with Dask</title><link href="https://pyvideo.org/scipy-2019/better-and-faster-hyper-parameter-optimization-with-dask.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2019-07-13:scipy-2019/better-and-faster-hyper-parameter-optimization-with-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nearly every machine learning model requires that the user specify certain parameters before training begins, aka &amp;quot;hyper-parameters&amp;quot;. Finding the optimal set of hyper-parameters is often a time- and resource-consuming process. A recent breakthrough hyper-parameter optimization algorithm, Hyperband, can find high performing hyper-parameters with minimal training and has theoretical backing. This talk will provide intuition for Hyperband, explain it's use and why it's well-suited for Dask, a Python library that scales Python to larger datasets and more computational resources. Experiments find high performing hyper-parameters more quickly in the presence of parallel computational resources and with a deep learning model.&lt;/p&gt;
</summary></entry><entry><title>Scalable Machine Learning with Dask</title><link href="https://pyvideo.org/scipy-2018/scalable-machine-learning-with-dask.html" rel="alternate"></link><published>2018-07-13T00:00:00+00:00</published><updated>2018-07-13T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2018-07-13:scipy-2018/scalable-machine-learning-with-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk demonstrates how to scale a Python-based machine learning
workflow to larger models and larger datasets. The talk will introduce a
common workflow using NumPy, pandas, and scikit-learn, and discuss some
challenges with scaling that workflow out to larger datasets. We'll then
see how dask and dask-ml work with and extend these libraries to enable
large-scale parallel and distributed machine learning.Presenter(s):
Speaker: Tom Augspurger, Anaconda, Inc. Speaker: Olivier Grisel, INRIA&lt;/p&gt;
</summary></entry><entry><title>pandas .head() to .tail() (Beginner Level)</title><link href="https://pyvideo.org/scipy-2018/pandas-head-to-tail-beginner-level.html" rel="alternate"></link><published>2018-07-10T00:00:00+00:00</published><updated>2018-07-10T00:00:00+00:00</updated><author><name>Dillon Niederhut</name></author><id>tag:pyvideo.org,2018-07-10:scipy-2018/pandas-head-to-tail-beginner-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is an introduction to pandas, a library providing data
structures and algorithms for tabular data analysis. It's aimed at
scientists and data analysts new to scientific Python. No previous
experience with pandas is expected. Familiarity with the basics of
Python will be helpful. We'll work through a series of Jupyter notebooks
together, with an emphasis on solving realistic problems as exercises.
We'll cover 1. A definition of tabular data and pandas' data structures
for tabular data 2. How pandas' alignment by row and column labels
simplifies data analysis 3. groupby for analyzing subsets of a table
grouped by some common factor 4. Tidy data: how to structure your data
to facilitate analysis. 5. Performance: How to benchmark and profile
code, and some common pandas performance pitfalls 6. pandas' special
support for time-series data.Presenter(s): Speaker: Dillon Niederhut,
Enthought Speaker: Tom Augspurger, Anaconda, Inc. Speaker: Joris Van den
Bossche, Université Paris-Saclay Center for Data Science&lt;/p&gt;
</summary></entry><entry><title>Parallel Data Analysis with Dask</title><link href="https://pyvideo.org/pycon-us-2018/parallel-data-analysis-with-dask.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/parallel-data-analysis-with-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The libraries that power data analysis in Python are essentially limited to a single CPU core and to datasets that fit in RAM. Attendees will see how dask can parallelize their workflows, while still writing what looks like normal python, NumPy, or pandas code.&lt;/p&gt;
&lt;p&gt;Dask is a parallel computing framework, with a focus on analytical computing. We'll start with &lt;cite&gt;dask.delayed&lt;/cite&gt;, which helps parallelize your existing Python code. We’ll demonstrate &lt;cite&gt;dask.delayed&lt;/cite&gt; on a small example, introducing the concepts at the heart of dask like the &lt;em&gt;task graph&lt;/em&gt; and the &lt;em&gt;schedulers&lt;/em&gt; that execute tasks. We’ll compare this approach to the simpler, but less flexible, parallelization methods available in the standard library like &lt;cite&gt;concurrent.futures&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Attendees will see the high-level collections dask provides for writing regular Python, NumPy, or Pandas code that is then executed in parallel on datasets that may be larger than memory. These high level collections provide a familiar API, but the execution model is very different. We'll discuss concepts like the GIL, serialization, and other headaches that come up with parallel programming. We’ll use dask’s various schedulers to illustrate the differences between multi-threaded, multi-processes, and distributed computing.&lt;/p&gt;
&lt;p&gt;Dask includes a distributed scheduler for executing task graphs on a cluster of machines. We’ll provide each person access to their own cluster.&lt;/p&gt;
</summary><category term="dask"></category></entry><entry><title>Pandas: .head() to .tail()</title><link href="https://pyvideo.org/pydata-seattle-2015/pandas-head-to-tail.html" rel="alternate"></link><published>2015-07-24T00:00:00+00:00</published><updated>2015-07-24T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2015-07-24:pydata-seattle-2015/pandas-head-to-tail.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is an extremely powerful library for data analysis. With that power comes complexity. This tutorial will focus on the core features of pandas, which handle most data munging tasks. The emphasis will be on practical applications, illustrating solutions to common problems using real-world data.&lt;/p&gt;
&lt;p&gt;The motivation of this tutorial mirrors that of pandas itself: practicality. A brief discussion on the problems pandas tries to solve will help frame the rest of the tutorial. We'll aim for an intuitive understanding of each new method and data structure. This will help keep us from getting overwhelmed by the options available as we expand our data munging toolkit. The start of the talk will focus on the core operations of&lt;/p&gt;
&lt;p&gt;Selecting and Indexing
Reshaping and Tidy Data
Summarization
Grouped operations
Merging and Joining
These operations can be combined into &amp;quot;pandastic&amp;quot; method chains that flow seamlessly from data IO to analysis.&lt;/p&gt;
&lt;p&gt;Time permitting we'll look at some of the more specialized areas of pandas including Categoricals, time-series analysis, Hierarchical Indexes, chunked / out of core processing, and data pipelines.&lt;/p&gt;
&lt;p&gt;Learning to use a library the size of pandas is a huge commitment. What's more, your goal is rarely achieved just with pandas. Rather, pandas gets you to the point where you can begin your interesting analysis. We'll build the foundation to quickly get you past the data munging, to the analysis.&lt;/p&gt;
&lt;p&gt;Materials:
- slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/pandas-head-to-tail-slidestom-augspurger"&gt;http://www.slideshare.net/PyData/pandas-head-to-tail-slidestom-augspurger&lt;/a&gt;
- Github repo: &lt;a class="reference external" href="https://github.com/tomaugspurger/pydataseattle"&gt;https://github.com/tomaugspurger/pydataseattle&lt;/a&gt;
- nbviewer link to notebooks: &lt;a class="reference external" href="http://nbviewer.ipython.org/github/TomAugspurger/PyDataSeattle/tree/master/notebooks/"&gt;http://nbviewer.ipython.org/github/TomAugspurger/PyDataSeattle/tree/master/notebooks/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Mind the Gap! Bridging the pandas - scikit learn dtype divide</title><link href="https://pyvideo.org/pydata-chicago-2016/mind-the-gap-bridging-the-pandas-scikit-learn-dtype-divide.html" rel="alternate"></link><published>2016-08-27T00:00:00+00:00</published><updated>2016-08-27T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2016-08-27:pydata-chicago-2016/mind-the-gap-bridging-the-pandas-scikit-learn-dtype-divide.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/TomAugspurger/mtg/blob/master/MTG.pdf"&gt;https://github.com/TomAugspurger/mtg/blob/master/MTG.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This talk briefly introduces the two different data models used by Scikit-Learn (NumPy arrays) and pandas DataFrames. We see why this can cause problems for users of these libraries. Finally, we discuss strategies for managing the differences.&lt;/p&gt;
</summary><category term="pandas"></category><category term="scikit"></category></entry><entry><title>Pandas: .head() to .tail()</title><link href="https://pyvideo.org/pydata-chicago-2016/pandas-head-to-tail.html" rel="alternate"></link><published>2016-08-26T00:00:00+00:00</published><updated>2016-08-26T00:00:00+00:00</updated><author><name>Tom Augspurger</name></author><id>tag:pyvideo.org,2016-08-26:pydata-chicago-2016/pandas-head-to-tail.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/TomAugspurger/pydata-chi-h2t"&gt;https://github.com/TomAugspurger/pydata-chi-h2t&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An introduction to using pandas for data analysis.  Please clone the repository and follow the setup before arriving.&lt;/p&gt;
</summary></entry></feed>