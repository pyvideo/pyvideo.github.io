<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dr-clement-walter.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-12T00:00:00+00:00</updated><entry><title>keras-fsl: Fast model builder for production ready few shot learning algorithms</title><link href="https://pyvideo.org/pydata-warsaw-2019/keras-fsl-fast-model-builder-for-production-ready-few-shot-learning-algorithms.html" rel="alternate"></link><published>2019-12-12T00:00:00+00:00</published><updated>2019-12-12T00:00:00+00:00</updated><author><name>Dr. Cl√©ment Walter</name></author><id>tag:pyvideo.org,2019-12-12:pydata-warsaw-2019/keras-fsl-fast-model-builder-for-production-ready-few-shot-learning-algorithms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few shot learning aims at leveraging huge database for training deep
neural nets models to be used onto problems with very few data. Among
other methods we will focus on metric learning algorithms because they
allow for immediate adaptation of the model in production. To develop
such model, fast experiment is key; we will present a versatile
framework for their implementation in tf.keras.&lt;/p&gt;
&lt;p&gt;Most of the industrial cases we face do not have enough data to allow
for a complete end-to-end training of common deep architecture.
Furthermore research paper often do not address real test cases. In this
context there is a need for easy benchmarking of usual and custom models
onto ones particular datasets.&lt;/p&gt;
&lt;p&gt;Furthermore best academic performers may not the preferred choice for
production applications as simplicity, robustness and explicability are
other factor of interest. Thus the need for a modularity in the
implementation to be able to mix the best of them to improve practical
results.&lt;/p&gt;
&lt;p&gt;We will review some recent theoretical development in Few Shot learning
and show their corresponding implementation in tf.keras. Finally I will
showcase the keras_fsl package with public notebooks and key results on
usual benchmarks.&lt;/p&gt;
</summary></entry></feed>