<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Jul 2013 00:00:00 +0000</lastBuildDate><item><title>Python for hackers and Penetration testing</title><link>https://pyvideo.org/europython-2013/python-for-hackers-and-penetration-testing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Oltjano Terpollari</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-for-hackers-and-penetration-testing.html</guid><category>sqlmap</category><category>subnet</category><category>set</category><category>networking</category><category>zip</category><category>whitehat</category><category>web</category><category>windows</category><category>sysadmin</category><category>ssh</category><category>linux</category><category>hacking</category><category>pythonscripts</category><category>security</category><category>socket</category></item><item><title>The Data Structures of Python</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--the-data-structures-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Data Structures of Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Any Python programmer knows about the major builtin data strcutres,
lists, dicts, tuples, but do you always remember when you're supposed to
use them? Do you know about all the cool data structures hidden in the
standard library? This talk will be a review of the characteristics of
the different data structures, and a tour of idiomatic ways to use some
of the structures in the standard library.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;First, as a note this talk borders between survey and discuss in depth.
For each data structure I want to cover their implementation,
performance characteristics, and idiomatic usage (e.g. tuples vs.
lists), a lot of them have similar implementations so idiomatic usage
will dominate for some of them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The builtins (10 minutes)&lt;ul&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an array of pointers&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Immutable*&lt;/li&gt;
&lt;li&gt;Implemented as a fixed-length array of pointers&lt;/li&gt;
&lt;li&gt;dicts&lt;/li&gt;
&lt;li&gt;Unordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;Why no immutable variant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;Unordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;frozenset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Standard Library (10 minutes)&lt;ul&gt;
&lt;li&gt;OrderedDict&lt;/li&gt;
&lt;li&gt;Ordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a dict with a doubly-linked list running through
it.&lt;/li&gt;
&lt;li&gt;deque&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an unrolled, doubly-linked list&lt;/li&gt;
&lt;li&gt;namedtuple&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects, &lt;em&gt;also&lt;/em&gt; addressable by
name.&lt;/li&gt;
&lt;li&gt;Immutable&lt;/li&gt;
&lt;li&gt;Implemented as a tuple with extra properties&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;Like a list... but limited to &amp;quot;primitve&amp;quot; types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance characteristics.&lt;/li&gt;
&lt;li&gt;Writing your own (5 minutes)&lt;ul&gt;
&lt;li&gt;Abstract Base Classes&lt;/li&gt;
&lt;li&gt;Duck typing&lt;ul&gt;
&lt;li&gt;Why would you want to use them!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's available.&lt;/li&gt;
&lt;li&gt;OrderedSet&lt;/li&gt;
&lt;li&gt;An ordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a set with a doubly-linked list running through it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Questions (5 minutes)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-data-structures-of-python.html</guid><category>abc</category><category>datastructures</category><category>dequearray</category><category>dict</category><category>ducktyping</category><category>frozenset</category><category>list</category><category>namedtuple</category><category>ordereddict</category><category>orderedset</category><category>pycon</category><category>pycon2011</category><category>set</category><category>tuple</category></item></channel></rss>