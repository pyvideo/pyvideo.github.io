<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Avik Basu</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_avik-basu.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-07-26T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Containerizing Python: Crafting Better and Efficient Containers</title><link href="https://pyvideo.org/pycascades-2024/containerizing-python-crafting-better-and-efficient-containers.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Avik Basu</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/containerizing-python-crafting-better-and-efficient-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containerization, particularly with tools like Docker, has become a cornerstone in deploying applications efficiently. Building a Docker image for Python applications is generally uncomplicated, yet optimizing these images requires extra work. Notably, many of these optimizations are uniquely tailored to Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on techniques and best practices …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containerization, particularly with tools like Docker, has become a cornerstone in deploying applications efficiently. Building a Docker image for Python applications is generally uncomplicated, yet optimizing these images requires extra work. Notably, many of these optimizations are uniquely tailored to Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on techniques and best practices to build more efficient Docker images for Python in order to generate reproducible and quicker builds while reducing the image sizes at the same time.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Mono-repositories in Python</title><link href="https://pyvideo.org/pycascades-2025/mono-repositories-in-python.html" rel="alternate"></link><published>2025-02-08T00:00:00+00:00</published><updated>2025-02-08T00:00:00+00:00</updated><author><name>Avik Basu</name></author><id>tag:pyvideo.org,2025-02-08:/pycascades-2025/mono-repositories-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Mono-repository (Monorepo) refers to a repository that contains multiple packages or projects inside one repository. In most cases, it is better to just have multiple repositories that each contain a library, an application or a data science project with Jupyter notebooks. However, in some cases it makes sense …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Mono-repository (Monorepo) refers to a repository that contains multiple packages or projects inside one repository. In most cases, it is better to just have multiple repositories that each contain a library, an application or a data science project with Jupyter notebooks. However, in some cases it makes sense to have a monorepo containing multiple projects often sharing a common theme or an ecosystem. This talk will explore the circumstances where monorepos make more sense, how to create monorepos containing Python libraries and projects, handle dependencies, version management and CI/CD setup. We shall go through a sample Python mono repository, thus making it practical for attendees to follow along.&lt;/p&gt;
</content><category term="PyCascades 2025"></category></entry><entry><title>Beyond the Black Box: Interpreting ML Models with SHAP</title><link href="https://pyvideo.org/pyohio-2025/beyond-the-black-box-interpreting-ml-models-with-shap.html" rel="alternate"></link><published>2025-07-26T00:00:00+00:00</published><updated>2025-07-26T00:00:00+00:00</updated><author><name>Avik Basu</name></author><id>tag:pyvideo.org,2025-07-26:/pyohio-2025/beyond-the-black-box-interpreting-ml-models-with-shap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML models behave as a black box in most scenarios. Model predicts or
provides a certain output but it is very difficult to generate any
actionable insights directly. This is mostly because we generally have
no idea which features are contributing the most to the model behavior
internally. SHAP …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML models behave as a black box in most scenarios. Model predicts or
provides a certain output but it is very difficult to generate any
actionable insights directly. This is mostly because we generally have
no idea which features are contributing the most to the model behavior
internally. SHAP provides a certain way to explain model predictions,
and can act as an important tool in a data scientist’s toolbox.&lt;/p&gt;
&lt;p&gt;In this talk, we will begin by explaining to the audience the need for
explainable ML models and why it is important to understand beyond what
the model outputs. We will then briefly go over the mathematical
intuition behind Shapley values and its origins from game theory. After
that we will walk through a couple of case studies of tree based and
neural network based models. We will be focusing on interpretation of
SHAP through various plots using the shap library in Python. Finally, we
will discuss the best practices for interpreting SHAP visualizations,
handling large datasets, and common pitfalls to avoid.&lt;/p&gt;
</content><category term="PyOhio 2025"></category></entry><entry><title>Building Efficient Containers for Python Applications</title><link href="https://pyvideo.org/pytexas-2024/building-efficient-containers-for-python-applications.html" rel="alternate"></link><published>2024-04-21T00:00:00+00:00</published><updated>2024-04-21T00:00:00+00:00</updated><author><name>Avik Basu</name></author><id>tag:pyvideo.org,2024-04-21:/pytexas-2024/building-efficient-containers-for-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building Efficient Containers for Python Applications&lt;/p&gt;
&lt;p&gt;In recent years, containerization using tools like Docker has become a cornerstone for deploying applications efficiently. This talk focuses on techniques and best practices to build more efficient Docker images for Python in order to generate reproducible and quicker builds while reducing the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building Efficient Containers for Python Applications&lt;/p&gt;
&lt;p&gt;In recent years, containerization using tools like Docker has become a cornerstone for deploying applications efficiently. This talk focuses on techniques and best practices to build more efficient Docker images for Python in order to generate reproducible and quicker builds while reducing the image sizes at the same time.&lt;/p&gt;
&lt;p&gt;Speaker: Avik Basu&lt;/p&gt;
&lt;p&gt;Avik is an experienced Data Scientist and Machine Learning Engineer. Currently he leads AIOps at Intuit. He was first introduced to Python in 2013 during his undergrad, and has been his primary language since then. He views writing elegant Python code as an art, blending creativity with engineering precision. Presently, he leads the Machine Learning efforts for AIOps at Intuit.&lt;/p&gt;
</content><category term="PyTexas 2024"></category></entry></feed>