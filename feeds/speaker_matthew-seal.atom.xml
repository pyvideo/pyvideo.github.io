<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matthew-seal.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-04T00:00:00+00:00</updated><entry><title>Data and ETL with Notebooks in Papermill</title><link href="https://pyvideo.org/pydata-la-2019/data-and-etl-with-notebooks-in-papermill.html" rel="alternate"></link><published>2019-12-04T00:00:00+00:00</published><updated>2019-12-04T00:00:00+00:00</updated><author><name>Matthew Seal</name></author><id>tag:pyvideo.org,2019-12-04:pydata-la-2019/data-and-etl-with-notebooks-in-papermill.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notebooks have traditionally been a tool for drafting code and avoiding
repeated expensive computations while exploring solutions. However, with
new tools like nteract's papermill and scrapbook libraries, this
technology has been expanded to make a reusable and parameterizable
template for execution. We'll look at how to make use of this pattern
for Data and ETL processes.&lt;/p&gt;
&lt;div class="section" id="intro"&gt;
&lt;h4&gt;Intro&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Myself, Netflix, and Why I'm here&lt;/li&gt;
&lt;li&gt;What does a Data Platform Team do?&lt;/li&gt;
&lt;li&gt;Projects and Open Source tools discussed in presentation Papermill,
Jupyter, nteract, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="notebooks"&gt;
&lt;h5&gt;Notebooks&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-jupyter-notebooks"&gt;
&lt;h4&gt;What are Jupyter Notebooks?&lt;/h4&gt;
&lt;p&gt;We'll some visual examples and breakdowns of notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-notebook-work"&gt;
&lt;h4&gt;How Notebook Work&lt;/h4&gt;
&lt;p&gt;A guide through how a notebook executes and the model it uses to run
your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traditional-use-cases"&gt;
&lt;h4&gt;Traditional Use Cases&lt;/h4&gt;
&lt;p&gt;Around experimentation and code development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-use-cases"&gt;
&lt;h4&gt;New Use Cases&lt;/h4&gt;
&lt;p&gt;For production data and operations without full rewrites of Notebook
code.&lt;/p&gt;
&lt;div class="section" id="papermill"&gt;
&lt;h5&gt;Papermill&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-papermill"&gt;
&lt;h4&gt;What is papermill?&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://papermill.readthedocs.io/en/latest/"&gt;papermill&lt;/a&gt; is a library
for executing notebooks programmatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-you-use-it"&gt;
&lt;h4&gt;How do you use it?&lt;/h4&gt;
&lt;p&gt;You'll see some examples in Python and with it's provided CLI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-does-it-fit-into-the-notebook-model"&gt;
&lt;h4&gt;How does it fit into the Notebook model?&lt;/h4&gt;
&lt;p&gt;We'll relate the execution back into original Notebook execution
diagrams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-extend-papermill"&gt;
&lt;h4&gt;How to extend papermill&lt;/h4&gt;
&lt;p&gt;Quick pointer to the extensibility of the library and how to add new
functionality.&lt;/p&gt;
&lt;div class="section" id="using-papermill-in-production-data-pipelines"&gt;
&lt;h5&gt;Using papermill in production data pipelines&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="operationalizing-notebooks"&gt;
&lt;h4&gt;Operationalizing Notebooks&lt;/h4&gt;
&lt;p&gt;Failure analysis, Productionalization, Sharing executions...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dags-of-notebooks"&gt;
&lt;h4&gt;Dags of Notebooks&lt;/h4&gt;
&lt;p&gt;Making a pipeline with Notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-testing"&gt;
&lt;h4&gt;Integration Testing&lt;/h4&gt;
&lt;p&gt;Good practices Where unittesting doesn't fit&lt;/p&gt;
&lt;div class="section" id="netflix-usage"&gt;
&lt;h5&gt;&amp;#64; Netflix usage&lt;/h5&gt;
&lt;p&gt;Quick blip about adoption and usage at Netflix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="related-libraries-time-pending"&gt;
&lt;h5&gt;Related libraries (time pending)&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="scrapbook"&gt;
&lt;h4&gt;Scrapbook&lt;/h4&gt;
&lt;/div&gt;
&lt;div class="section" id="commuter-nbviewer"&gt;
&lt;h4&gt;Commuter / NBViewer&lt;/h4&gt;
&lt;/div&gt;
</summary></entry><entry><title>Programmatic Notebooks with papermill</title><link href="https://pyvideo.org/pycon-us-2019/programmatic-notebooks-with-papermill.html" rel="alternate"></link><published>2019-05-03T13:40:00+00:00</published><updated>2019-05-03T13:40:00+00:00</updated><author><name>Matthew Seal</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/programmatic-notebooks-with-papermill.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notebooks have traditionally been a tool for drafting code and avoiding
repeated expensive computations while exploring solutions. However, with
new tools like nteract's papermill and scrapbook libraries, this
technology has been expanded to make a reusable and parameterizable
template for execution.&lt;/p&gt;
&lt;p&gt;We'll walk though how Jupyter notebooks are being programmatically used
at Netflix and how this helps with our batch processing world. We'll
also explore how these use cases connect back with users and why we've
adopted these tools for Python and non-Python execution.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>