<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Julin S</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 02 Oct 2020 00:00:00 +0000</lastBuildDate><item><title>Publishing well-formed Python packages</title><link>https://pyvideo.org/pycon-au-2020/publishing-well-formed-python-packages.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Julin S&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/HWU9J7"&gt;https://2020.pycon.org.au/program/HWU9J7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#### Why
Most of the well established projects follow some practices and has some mechanism in place to ensure better maintainability.&lt;/p&gt;
&lt;p&gt;But we can find a good number of packages online which are being developed without an equivalent mechanism.&lt;/p&gt;
&lt;p&gt;In this talk, I will mention some tools, which when used, can lay the foundation for a well formed package.&lt;/p&gt;
&lt;p&gt;#### Well-formed package&lt;/p&gt;
&lt;p&gt;A package whose source has some structure which makes testing and development more efficient and less error-prone.&lt;/p&gt;
&lt;p&gt;Such a package also makes working with its source a more pleasant experience.&lt;/p&gt;
&lt;p&gt;A well-formed package makes things easier for both the developer and the user.&lt;/p&gt;
&lt;p&gt;But it is easier to get started with a structure than to maintain that form. Which calls for a mechanism to maintain that structure.&lt;/p&gt;
&lt;p&gt;#### How&lt;/p&gt;
&lt;p&gt;The source code should adopt a style and stick with it. A linting tool like pylint can help with it.
Or you could use black.&lt;/p&gt;
&lt;p&gt;Use type annotations along with tools like mypy.&lt;/p&gt;
&lt;p&gt;Eliminate unused code with &lt;cite&gt;vulture&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Add tests to be sure that the different functionalities work as intended using tools like pytest or the built-in unittest.
This will be extremely useful to be sure that further modifications do not break existing code.&lt;/p&gt;
&lt;p&gt;Ensure proper test coverage with coverage.py
After all, adding tests isn't everything. One got to make sure it reaches every nook and corner.&lt;/p&gt;
&lt;p&gt;Automate tests with tox, nox, etc.&lt;/p&gt;
&lt;p&gt;Package the project in tune with the future of packaging.
setuptools, flit or poetry&lt;/p&gt;
&lt;p&gt;And add some CI/CD.&lt;/p&gt;
&lt;p&gt;Other tools like pre-commit, bumpversion, etc may also be used.&lt;/p&gt;
&lt;p&gt;#### Intended audience&lt;/p&gt;
&lt;p&gt;People who create and publish python packages.
The presentation is from the package developer's perspective and not exactly about the innards of the different python packaging tools.&lt;/p&gt;
&lt;p&gt;#### Pre-requisites&lt;/p&gt;
&lt;p&gt;Basic Python programming.
Git&lt;/p&gt;
&lt;p&gt;## Tentative talk outline&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linting&lt;/li&gt;
&lt;li&gt;Type checking&lt;/li&gt;
&lt;li&gt;Eliminating dead code&lt;/li&gt;
&lt;li&gt;Tests&lt;/li&gt;
&lt;li&gt;Test coverage&lt;/li&gt;
&lt;li&gt;Test automation&lt;/li&gt;
&lt;li&gt;Packaging&lt;/li&gt;
&lt;li&gt;CI/CD&lt;/li&gt;
&lt;li&gt;Other tools&lt;/li&gt;
&lt;li&gt;Future of packaging&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;#### Speaker info (anonymized):&lt;/p&gt;
&lt;p&gt;Using Python for 5 years. Interested in text processing.&lt;/p&gt;
&lt;p&gt;Published a few packages to PyPI using different packaging tools.&lt;/p&gt;
&lt;p&gt;The proposed talk is derived from experience of creating them.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Sat Sep  5 13:00:00 2020 at Floperator&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julin S</dc:creator><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-09-05:/pycon-au-2020/publishing-well-formed-python-packages.html</guid><category>PyCon AU 2020</category><category>JulinS</category><category>PyCon</category><category>PyConAU</category><category>PyConline</category><category>Python</category><category>pyconau</category><category>pyconau_2020</category></item><item><title>Tallk: Publishing well formed Python packages</title><link>https://pyvideo.org/pycon-india-2020/tallk-publishing-well-formed-python-packages.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julin S</dc:creator><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-02:/pycon-india-2020/tallk-publishing-well-formed-python-packages.html</guid><category>PyCon India 2020</category></item></channel></rss>