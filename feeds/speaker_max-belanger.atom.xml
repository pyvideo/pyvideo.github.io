<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_max-belanger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>How to ship a Python app to a hundred million desktops</title><link href="https://pyvideo.org/europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Max Bélanger</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is widely used to write scripts and tools, but did you know that
it can also be used to build client-side end-user applications? Crossing
the gap from script to app can be challenging: Join us to learn how to
write modern, high quality desktop apps in Python!&lt;/p&gt;
&lt;p&gt;At Dropbox, we’ve been fans of Python from the very beginning: we’ll
take you on a tour of our app for Windows/macOS/Linux and share our
“lessons learned” from over 10 years of development.&lt;/p&gt;
&lt;p&gt;We’ll share best practices and techniques for shipping Python code to
hundreds of millions of devices: discover how to maximize security,
improve performance and guarantee stability.&lt;/p&gt;
&lt;p&gt;We’ll explore the key choices we made and why: learn how we migrated to
Python 3 by simultaneously shipping both versions, or how we use HTML to
power our GUI (a la Electron).&lt;/p&gt;
&lt;p&gt;We’ll reveal our favorite tools and libraries: learn how we scaled from
a few engineers to over 100 and added support for other programming
languages (like Rust).&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The goal of this talk is to share our learnings from using Python on
Windows, macOS and Linux to encourage the use of Python when building
Desktop apps.&lt;/div&gt;
&lt;div class="line"&gt;- We also want to recognize the third-party libraries we’ve used (and
their authors) to raise their profile with the overall community.&lt;/div&gt;
&lt;div class="line"&gt;- We hope this will inspire attendees to write more desktop Python
code, and raise awareness for this use case with the community as a
whole.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We intend to speak to any Python developer/engineer or enthusiast who
makes use of Python in a Desktop environment (or wants to), whether
it’s to make scripts, tools or apps.&lt;/div&gt;
&lt;div class="line"&gt;We do not expect knowledge of any specific third-party Python
libraries; in fact, we hope to draw attention to and recognize many
libraries we’ve found useful.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Architecture"></category><category term="Best Practice"></category><category term="Cross-Platform-Development"></category><category term="Mac OS X"></category><category term="Windows"></category></entry><entry><title>Going from 2 to 3 on Windows, macOS and Linux</title><link href="https://pyvideo.org/pycon-us-2019/going-from-2-to-3-on-windows-macos-and-linux.html" rel="alternate"></link><published>2019-05-03T13:55:00+00:00</published><updated>2019-05-03T13:55:00+00:00</updated><author><name>Max Bélanger</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/going-from-2-to-3-on-windows-macos-and-linux.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Dropbox, we’ve always used Python to power our application for
Windows, macOS and Linux (until recently, Python 2.7). Over the years, a
growing lack of features and the need for outdated compilers/toolchains
made migrating to Python 3 a necessity. Join us to hear the tale of our
unique journey from Python 2 to 3 and the lessons we learned along the
way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We’ll discuss the reasons that led to our decision to make the jump.&lt;/li&gt;
&lt;li&gt;We’ll dive into how we sequenced the transition by using the C-API to
ship both versions of Python and choose one at runtime.&lt;/li&gt;
&lt;li&gt;We’ll reveal the tools we used to enforce a hybrid (2/3) syntax for
over hundreds of thousands of lines of Python code.&lt;/li&gt;
&lt;li&gt;We’ll discuss some of our most spectacular bugs and gotchas, and how
you can avoid them!&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="talk"></category></entry></feed>