<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate><item><title>How to write a JIT compiler in 30 minutes</title><link>https://pyvideo.org/pycon-italia-2019/how-to-write-a-jit-compiler-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This will be a live-coding exercise: we will write a working (albeit
simple and limited) JIT compiler from scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1675"&gt;https://python.it/feedback-1675&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/how-to-write-a-jit-compiler-in-30-minutes.html</guid><category>performance</category><category>JIT</category><category>assembly</category><category>live-coding</category><category>compilers</category></item><item><title>Solving Google Code Jam problems with PyPy - Part 1</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Solving Google Code Jam problems with PyPy - Part 2</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Coding competitions with PyPy aka "Python for the win!"</title><link>https://pyvideo.org/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Programmazione competitiva con PyPy: "Vincere con Python!"</title><link>https://pyvideo.org/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Fundamental Technologies Used in PyPy JIT Compiler</title><link>https://pyvideo.org/pycon-japan-2012/fundamental-technologies-used-in-pypy-jit-compiler.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction about technologies of JIT compiler used in PyPy such as what we call “production of JIT compiler” , how “hinting mechanism” works, and so forth for beginner. In other words, brief introduction to JIT compiler used in PyPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">池田 涼太郎</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-16:pycon-japan-2012/fundamental-technologies-used-in-pypy-jit-compiler.html</guid><category>JIT</category></item><item><title>PyPy Status Update</title><link>https://pyvideo.org/pycon-italia-2017/pypy-status-update.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this talk is to present the latest news in the PyPy world.
In particular, I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the current status of PyPy, including performance and compatibility
w.r.t CPython&lt;/li&gt;
&lt;li&gt;the status of NumPy and in general of the scientific stack: what
works, what doesn’t, the speed and compatibility tradeoffs, etc.&lt;/li&gt;
&lt;li&gt;the status Python 3 on PyPy&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/pypy-status-update.html</guid><category>performance</category><category>JIT</category><category>pypy</category><category>python3</category><category>numpy</category></item><item><title>PyPy hands-on</title><link>https://pyvideo.org/europython-2011/pypy-hands-on.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Antonio Cuni,Armin Rigo - 21 June 2011 in &amp;quot;Training
Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The session is divided into two parts, of roughly 2 hours each. People
who are interested only in the first part, can leave the session after
it. However, the first part is a prerequisite for the second one, thus
people are not advised to join in the middle of the session.&lt;/p&gt;
&lt;p&gt;The session is meant to be highly interactive. People are invited to
bring their own laptop and try things by themselves.&lt;/p&gt;
&lt;div class="section" id="part-1-run-your-application-under-pypy"&gt;
&lt;h4&gt;Part 1: Run your application under PyPy&lt;/h4&gt;
&lt;p&gt;This tutorial is targeted to Python users who want to run their favorite
Python application under PyPy, and exploit the most of it. The following
topics will be covered:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to fix/avoid CPython implementation details (e.g., refcounting)

- general overview of how the PyPy JIT works

- how to optimize your program for the PyPy JIT

- how to view and interpret the traces produced by the JIT

- how to tweak the parameters of the JIT and the GC

- how to use existing CPython C extensions on PyPy, and fix them if necessary
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="part-2-write-your-own-interpreter-with-pypy"&gt;
&lt;h4&gt;Part 2: Write your own interpreter with PyPy&lt;/h4&gt;
&lt;p&gt;PyPy is not only a Python interpreter, but also a toolchain to implement
dynamic languages. This tutorial is targeted to people who want to
implement their own programming languages, or who simply want to know
more about how the PyPy JIT works internally.&lt;/p&gt;
&lt;p&gt;The students will be given the source code for a toy language
implemented in RPython. They will learn:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
- how to translate it to C using the PyPy translation toolchain

- what are the &amp;quot;hints&amp;quot; needed by the JIT generator, and how to place them
&lt;/pre&gt;
&lt;p&gt;Then, they will be challenged to add the proper hints to the toy
interpreter, to get the best result with the JIT.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;THINGS TO DO BEFORE THE TRAINING&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You are encouraged to bring your laptop to the training session.&lt;/p&gt;
&lt;p&gt;Make sure that the following prerequisites are met:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install PyPy 1.5:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/download.html"&gt;http://pypy.org/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started.html#installing-pypy"&gt;http://doc.pypy.org/en/latest/getting-started.html#installing-pypy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure that &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;distribute&lt;/tt&gt; are installed (look
at the URL above for instructions)&lt;/li&gt;
&lt;li&gt;Clone the pypy repository, and update to the 1.5 version:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/pypy"&gt;http://bitbucket.org/pypy/pypy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd pypy&lt;/p&gt;
&lt;p&gt;$ hg up -r release-1.5&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clone the jitviewer repository and install it on pypy:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$ hg clone &lt;a class="reference external" href="http://bitbucket.org/pypy/jitviewer"&gt;http://bitbucket.org/pypy/jitviewer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$ cd jitviewer&lt;/p&gt;
&lt;p&gt;$ /path/to/pypy-1.5/bin/pypy setup.py develop&lt;/p&gt;
&lt;p&gt;If you intend to follow also the second part (&amp;quot;Write your own
interpreter with PyPy&amp;quot;), you need to make sure you have a working
&lt;a class="reference external" href="http://doc.pypy.org/en/latest/getting-started-python.html%20#translating-the-pypy-python-interpreter"&gt;developing
environment&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pypy-hands-on.html</guid><category>cd</category><category>cpython</category><category>extensions</category><category>hg</category><category>jit</category><category>optimize</category><category>pypy</category><category>setup.py</category><category>tutorial</category></item><item><title>Making CPython Fast Using Trace-based Optimisations</title><link>https://pyvideo.org/europython-2011/making-cpython-fast-using-trace-based-optimisatio.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Shannon - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython can be made faster by implementing the sort of optimizations
used in the PyPy VM, and in my HotPy VM. All the necessary changes can
be made without modifying the language or the API.&lt;/p&gt;
&lt;p&gt;The CPython VM can be modified to support optimizations by adding an
effective garbage collector and by separating the virtual-machine state
from the real- machine state (like Stackless).&lt;/p&gt;
&lt;p&gt;Optimizations can be implemented incrementally. Since almost all of the
optimizations are implemented in the interpreter, all hardware platforms
can benefit. JIT compiler(s) can then be added for common platforms
(intel, ARM, etc.).&lt;/p&gt;
&lt;p&gt;For more information see &lt;a class="reference external" href="http://hotpy.blogspot.com/"&gt;http://hotpy.blogspot.com/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shannon</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/making-cpython-fast-using-trace-based-optimisatio.html</guid><category>cpython</category><category>jit</category><category>pypy</category><category>vm</category></item><item><title>Why is Python slow and how PyPy can help?</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is Python slow and how PyPy can help?&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski and Alex Gaynor&lt;/p&gt;
&lt;p&gt;PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance. This talk is going
to be a deep dive into what exactly makes Python such a hard language to
optimize, how PyPy is organized, and what optimizations our JIT can do
(and what it can't do) for your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will detail how a python interpreter works internally and why
some operations are costly. We'll go through several python features,
how they work, why they're slow in CPython and how we're fixing it.&lt;/p&gt;
&lt;p&gt;The list of mentioned features is not exhaustive, however we will try to
focus at least on the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dynamic language - In Python code we have no known types, like a
statically typed language. Even operations like &amp;quot;a + b&amp;quot; can do
anything, unless we know more about the code, and the types it is
operating on.&lt;/li&gt;
&lt;li&gt;Frame introspection - Frame objects need to be allocated for every
function call, and all local variables are stored on the frame, and
must be accessible from further down the call stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy uses a novel approach called &amp;quot;virtualizables&amp;quot; which makes it
possible to avoid frame allocation in most common cases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Object model - All user defined Python objects have a dictionary
which stores their attributes, as does every type. When Python does
an attribute lookup this requires at least two dictionary lookups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In PyPy we use an approach similar to the one used by V8 with hidden
classes (except more PyPy specific) called map dictionaries and other
optimizations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FFI calls - Calling C from Python is costly and hard to optimize. In
PyPy we expose C APIs to Python code via ctypes. This part explains
how we can optimize ctypes calls.&lt;/li&gt;
&lt;li&gt;array module - Users of CPython's array module probably know it can
save them quite a bit of memory, however it's also slower than using
a list, due to the overhead of boxing and unboxing on every
operations. Here we will tie everything together and describe how the
array module is much faster with PyPy's JIT, combining our
optimizations to: unbox values, remove the dynamicism within traces,
and deliver great performance.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</guid><category>jit</category><category>pycon</category><category>pycon2011</category><category>pypy</category><category>vm</category></item></channel></rss>