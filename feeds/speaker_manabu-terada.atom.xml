<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_manabu-terada.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-04-24T00:00:00+00:00</updated><entry><title>Intro to Visualization</title><link href="https://pyvideo.org/scipy-japan-2019/intro-to-visualization.html" rel="alternate"></link><published>2019-04-24T00:00:00+00:00</published><updated>2019-04-24T00:00:00+00:00</updated><author><name>Manabu Terada</name></author><id>tag:pyvideo.org,2019-04-24:scipy-japan-2019/intro-to-visualization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Visualizations in Python using Jupyter Notebooks.&lt;/p&gt;
&lt;div class="section" id="connect-with-us"&gt;
&lt;h4&gt;Connect with us!&lt;/h4&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/enthought"&gt;https://twitter.com/enthought&lt;/a&gt;
&lt;a class="reference external" href="https://www.facebook.com/Enthought/"&gt;https://www.facebook.com/Enthought/&lt;/a&gt;
&lt;a class="reference external" href="https://www.linkedin.com/company/enthought"&gt;https://www.linkedin.com/company/enthought&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="tutorial"></category></entry><entry><title>Introduce syntax and history of Python from 2.4 to 3.6</title><link href="https://pyvideo.org/pycon-thailand-2018/introduce-syntax-and-history-of-python-from-24-to-36.html" rel="alternate"></link><published>2018-06-16T00:00:00+00:00</published><updated>2018-06-16T00:00:00+00:00</updated><author><name>Manabu Terada</name></author><id>tag:pyvideo.org,2018-06-16:pycon-thailand-2018/introduce-syntax-and-history-of-python-from-24-to-36.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I think we began to use Python in some production systems at 2.3 or 2.4. I think Python 2.4 had enough functionality to build any system. Many tools ware created and used.
Python 2.4 was released nearly 15 years ago. Since then Python has been steadily evolving. Although it is possible to create a system with only Python 2.4, it is necessary to know the latest Python trends in order to write code that is better, more maintainable, and more performance-oriented.
There are also features and grammar in the web knockout that are often overlooked, not only by new python users, but also by seasoned Python veterans. I will introduce those features and grammar that I think are important while comparing the grammar and functions incorporated in Python 2.4 and now.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Manabu is the founder and CEO of CMS Communications Inc., a Tokyo-based professional Plone and Python development company.
Manabu has contributed east Asian language functions to Plone. He has been Board chair of PyCon Japan and is a core member of the Japan Plone Users Group. He was Guest Associate Professor of Hitotsubashi University in 2011, and he became a PSF Contributing member in September 2017.&lt;/p&gt;
</summary></entry><entry><title>Introducing TOKYO, Japan</title><link href="https://pyvideo.org/pycon-thailand-2018/introducing-tokyo-japan.html" rel="alternate"></link><published>2018-06-16T00:00:00+00:00</published><updated>2018-06-16T00:00:00+00:00</updated><author><name>Manabu Terada</name></author><id>tag:pyvideo.org,2018-06-16:pycon-thailand-2018/introducing-tokyo-japan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talk
Announcing PyCon JP, 15-18 September, 2018 and PloneConf, 5-11 November, 2018 both in Ota City Industrial Plaza (PiO), Tokyo!
&lt;a class="reference external" href="https://www.pycon.jp/"&gt;https://www.pycon.jp/&lt;/a&gt; &lt;a class="reference external" href="https://2018.ploneconf.org/"&gt;https://2018.ploneconf.org/&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Manabu is the founder and CEO of CMS Communications Inc., a Tokyo-based professional Plone and Python development company.
Manabu has contributed east Asian language functions to Plone. He has been Board chair of PyCon Japan and is a core member of the Japan Plone Users Group. He was Guest Associate Professor of Hitotsubashi University in 2011, and he became a PSF Contributing member in September 2017.&lt;/p&gt;
</summary><category term="lightning talk"></category></entry><entry><title>Introduce Syntax and History of Python from 2.4 to 3.6</title><link href="https://pyvideo.org/pycon-apac-2018/introduce-syntax-and-history-of-python-from-24-to-36.html" rel="alternate"></link><published>2018-06-01T00:00:00+00:00</published><updated>2018-06-01T00:00:00+00:00</updated><author><name>Manabu Terada</name></author><id>tag:pyvideo.org,2018-06-01:pycon-apac-2018/introduce-syntax-and-history-of-python-from-24-to-36.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The speaker will introduce the new syntax and functions between Python
2.4 and Python 3.6 in this talk. I will also compare the old style to
the new style. You will learn the best practices for Python coding and
how to perform refactoring your old Python code. You can look at the
evolution of Python.&lt;/p&gt;
</summary></entry><entry><title>ライトニングトーク</title><link href="https://pyvideo.org/pycon-japan-2012/raitoningutoku.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Hajime Nakagami</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/raitoningutoku.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;September 15 Lightning Talks | ライトニングトーク&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="python3"></category><category term="python3 migration"></category><category term="twilio"></category><category term="pickle"></category></entry><entry><title>Plone5のOSSにおける進化と適応 〜 PyCon (US) 2016 Keynoteの日本語での再演</title><link href="https://pyvideo.org/pycon-japan-2016/plone5noossniokerujin-hua-toshi-ying-pycon-us-2016-keynotenori-ben-yu-denozai-yan.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Zenichiro Yasuda</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/plone5noossniokerujin-hua-toshi-ying-pycon-us-2016-keynotenori-ben-yu-denozai-yan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python madeのエンタープライズCMS Ploneは15年の歴史を持ちます。 本講演では、USのPyCon2016におけるCris Ewing (Plone Foundation所属)のキーノート講演&amp;quot;Adaptation in OSS&amp;quot; を日本語で再現し、15年の進化と適応がどのようにPlone5に結実したかをご紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;本講演は、Plone FoundationのCris EwingによるPyCon (US) 2016 キーノート講演 &amp;quot;Adaptation in OSS&amp;quot; を日本語で再現するものです。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;1. イントロダクション (適応の定義と種類)&lt;/h4&gt;
&lt;p&gt;これはPythonで作られたオープンソースCMS Ploneとコミュニティについての誕生から現在に至るまでのAdaptation =「適応」の物語です。適応とは、生物の形態が環境の変化に応じて変わることです。このトークではPloneの適応を生物界になぞらえて「擬似適応」「収斂進化(しゅうれんしんか)」「比喩的な意味での適応」という3つに分けてお話します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h4&gt;2.   Ploneの誕生と普及&lt;/h4&gt;
&lt;p&gt;進化のはじまりは誕生から。前段としてPloneがどのようにして生まれたのかをお話します。&lt;/p&gt;
&lt;p&gt;内容は以下ととなります。 - Ploneを支えるミドルウェアZope誕生の経緯 - Zopeのキーとなるアイデア - トラバーサルとオブジェクトパブリッシング - CMFの登場 - Ploneの誕生 - Ploneコミュニティの成長&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;3. Ploneに訪れた変化&lt;/h4&gt;
&lt;p&gt;Ploneは広く普及するのと同時にいくつか大きな問題を抱えていました。これらに対応することが後の適応につながりました。&lt;/p&gt;
&lt;p&gt;ここでの内容は以下となります。 - そもそもCMSの目的とは何か - Plone の抱えていた問題点 - ウェブ経由でのカスタマイズ(TTW) - TTW との決別 - さらなる問題の顕現とコミュニティの対応&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plone5"&gt;
&lt;h4&gt;4. 適応を果たしたPlone5&lt;/h4&gt;
&lt;p&gt;この結果、進化の過程を経て適応を果たしたPlone5が生まれました。その適応の内容とはどのようなものなのか。おもに技術的な面をお話します。&lt;/p&gt;
&lt;p&gt;内容は以下になります。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;擬似適応&lt;/strong&gt; - plone.apiのファサードパターンとZCAのアダプターパターン
*   plone.apiのファサードパターン&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;plone.api はソフトウェア設計における「ファサード・パターン」の優れた事例です。 このファサードにより クリーンかつモダンで完全にPythonicなプラグインが書けるようになりました！&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zope Component Architectureのアダプターパターン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZCAに実装されたデザインパターンのひとつがアダプターパターンです。このデザインパターンはPloneのような大規模で複雑なシステムで有効で、数々の厄介な問題を解決するために役立っています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;収斂進化&lt;/strong&gt; - オブジェクトパブリッシングの問題への対処&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
Ploneはアダプターを採用することで、オブジェクトパブリッシングがよりシンプルになり、カスタマイズしやすくなっています。&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;比喩的な意味での適応&lt;/strong&gt; - Diazoによるテーミング&lt;/p&gt;
&lt;p&gt;Plone5のテーマは、HTMLレイアウトとCSS、JavaScriptに加えてコンテンツをどこに配置するかを記述したDiazoのルールファイルで構成されています。最近のHTMLフレームワークをPloneに組み込むことに何ら問題はありません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;実際にPlone5のテーミングのデモを行います。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;5. さいごに&lt;/h4&gt;
&lt;p&gt;適応の考え方はWebシステムだけに限ったものではありません。このパワフルなコンセプトは他のソフトウェアプロジェクトでも使えるものです。Webの世界は休みなく変化していますが、Ploneはその適応力で将来に置いてもその独自の地位を確保し続けるものと思います。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="plone"></category></entry></feed>