<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matej-cepl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-03T00:00:00+00:00</updated><entry><title>Wounded hero revived: Lessons learned from porting M2Crypto to Python 3</title><link href="https://pyvideo.org/pycon-cz-2018/wounded-hero-revived-lessons-learned-from-porting-m2crypto-to-python-3.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>MatÄ›j Cepl</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/wounded-hero-revived-lessons-learned-from-porting-m2crypto-to-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The purpose of this talk is to remind people about M2Crypto. After many years of very light almost non-maintenance only by the brave RHEL maintainer, I have taken over M2Crypto to port it to Py3k and hoped to be done in a month the most. Now, two years later, the merge finally happened and M2Crypto has another chance to survive in the world where Py3k compatibility is a necessity.&lt;/p&gt;
&lt;p&gt;This presentation is about the experience of porting large project combining Python and C from 2.5 to Py3k compliance. I would like to describe the biggest problems and tools which helped me. The formers were (aside from plenty of lingering bugs) complete mess of using 'bytes' and 'str' in Py2k code. What helped a lot were PEP-484 annotations (working in Py2k in the comment form), compatibility macros which are actually present in Python since 2.6.&lt;/p&gt;
</summary></entry></feed>