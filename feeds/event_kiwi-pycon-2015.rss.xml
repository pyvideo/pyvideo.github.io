<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 06 Sep 2015 00:00:00 +0000</lastBuildDate><item><title>Blind Analytics - getting insight from data without seeing the data</title><link>https://pyvideo.org/kiwi-pycon-2015/blind-analytics-getting-insight-from-data-witho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will start with an overview of current methods of privacy
preserving computation including homomorphic encryption, secret sharing,
and differential privacy.&lt;/p&gt;
&lt;p&gt;We will explore current uses of privacy preserving computation, in
fields such as government, finance, telecommunications and IoT. We will
look at the technological and social barriers to wider adoption then
gaze into the crystal ball to see where the future might take us.&lt;/p&gt;
&lt;p&gt;To conclude we will explore one technique (partially homomorphic
encryption) with a motivating medical example. A high level overview of
the open source library &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-paillier&lt;/span&gt;&lt;/tt&gt; will be given along with a
few code samples showing how easy (some) privacy preserving analytics
can be to implement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Thorne</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/blind-analytics-getting-insight-from-data-witho.html</guid></item><item><title>Custom Python Applications in Neuroscience</title><link>https://pyvideo.org/kiwi-pycon-2015/custom-python-applications-in-neuroscience.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are several (open source and proprietary) packages available for
image processing in neuroscience. However, each package has its own
strengths and limitations depending on the purpose of the analysis.
After testing many of them at work, we have found a need to develop our
own packages (at the Brain Imaging Laboratory, MBC). We will expose a
couple of python tools that could be handy for anyone dealing with
neuroscience (or medical images in general) in their projects. The tools
presented are for (i.) quick image viewing, (ii.) dicom image sorting
and de-identifying and (iii.) automatic email notifications to alert
about server warnings (e.g., if machine is down, close to full capacity,
failing to connect to local image archiving network (PACS), etc..).
While many of these tools could have been written in other programming
languages, we will explain the reasons for choosing python, share a bit
about our python learning journey and perform a brief demonstration on
the command line.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gagan  Sharma</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/custom-python-applications-in-neuroscience.html</guid></item><item><title>Database migrations using alembic</title><link>https://pyvideo.org/kiwi-pycon-2015/database-migrations-using-alembic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing database schema changes can be a challenging process. From the
schema change itself to keeping test (and user!) data in sync with the
schema across multiple development branches can be a headache. Alembic
is paracetamol for this change management headache. Alembic is a
companion package to sqlalchemy for creating database schema migrations.
This talk will introduce alembic, demonstrate how it is used to generate
schema deltas and migrate database schemas. The talk will discuss
manually adding data migration to a schema migration script and describe
how using alembic has changed our development process. Some familiarity
with databases and sqlalchemy will be assumed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Mitchell</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/database-migrations-using-alembic.html</guid></item><item><title>Keynote: Ways that we (as professional or hobby programmers) can be more effective learners</title><link>https://pyvideo.org/kiwi-pycon-2015/keynote-ways-that-we-as-professional-or-hobby-p.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Kaptur</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/keynote-ways-that-we-as-professional-or-hobby-p.html</guid></item><item><title>Python's New Type Hints in Action… In JavaScript</title><link>https://pyvideo.org/kiwi-pycon-2015/kiwi-pycon-2015-pythons-new-type-hints-in-action-in-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big
thing in Python, or the harbinger of doom upon our entire community.
Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some
benefits that other languages have had for years: IDEs will be able to
do code completion better; a whole class of boring tests will fall out
automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you
have to substantially change your code style? Will Python's simple
expressiveness suddenly become unattainable thanks to clumsy Java-style
type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look
at TypeScript, a minimal implementation of Gradual Typing over
JavaScript. We'll see how the type system works, and how it fits into
the already thriving JavaScript developer community, where most people
aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work,
and see what Python can learn from a language that has successfully made
the jump to a type-hinted world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Neugebauer</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/kiwi-pycon-2015-pythons-new-type-hints-in-action-in-javascript.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/kiwi-pycon-2015/lightning-talks-18.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/lightning-talks-18.html</guid><category>lightning talks</category></item><item><title>Mezzanine: a brief primer</title><link>https://pyvideo.org/kiwi-pycon-2015/mezzanine-a-brief-primer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mezzanine is a CMS framework built on top of Django that provides a set
of primitives for building rich sites that can be managed by
non-technical users.&lt;/p&gt;
&lt;p&gt;Topics this talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Where Mezzanine sits in the broader ecosystem. Mezzanine is not a
stand-alone product like Drupal or Wordpress, but a set of tools.
There are other tools associated with Mezzanine that provide
functionality that Mezzanine itself doesn't provide&lt;/li&gt;
&lt;li&gt;Structure of a Mezzanine site&lt;/li&gt;
&lt;li&gt;Two techniques for managing content Page-based vs object-based;
example and use-cases&lt;/li&gt;
&lt;li&gt;Things Mezzanine does well Advantages of using Mezzanine over other
CMS systems&lt;/li&gt;
&lt;li&gt;Things Mezzanine does not do well Reasons not to use Mezzanine&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Will Hughes</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/mezzanine-a-brief-primer.html</guid></item><item><title>Playing to lose: making sensible security decisions by assuming the worst</title><link>https://pyvideo.org/kiwi-pycon-2015/playing-to-lose-making-sensible-security-decisio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The unfortunate truth about networked applications is that an attacker
only needs to know one thing you didn't know to get past your defences.
You need to know everything, they don't.&lt;/p&gt;
&lt;p&gt;The odds aren't in your favour. You're eventually going to get hacked.&lt;/p&gt;
&lt;p&gt;That's the bad news. But if you stop thinking about a security
compromise as &amp;quot;that thing you close your eyes and hope never happens&amp;quot;,
and instead start thinking about it as an inevitability, then you can
start making better security decisions.&lt;/p&gt;
&lt;p&gt;&amp;quot;If they compromise my web servers, how do I protect my application
servers?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they break my application server code, how can I prevent them from
gaining a foothold on my infrastructure?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they poison my web-site with cross-site scripting, how do I find out
before my users get hurt?&amp;quot;&lt;/p&gt;
&lt;p&gt;In short: &amp;quot;If I'm going to get hacked, how do I make it hurt less?&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a talk about defence in depth.&lt;/p&gt;
&lt;p&gt;Building a secure system isn't about luck, it’s about planning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/playing-to-lose-making-sensible-security-decisio.html</guid></item><item><title>The Pythonista's 3D printing toolchain</title><link>https://pyvideo.org/kiwi-pycon-2015/the-pythonistas-3d-printing-toolchain.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/SolidCode/SolidPython"&gt;SolidPython&lt;/a&gt; is a Python
module which allows executed Python to generate OpenSCAD script.
&lt;a class="reference external" href="http://www.openscad.org/"&gt;OpenSCAD&lt;/a&gt; is software for creating solid
3D CAD models. OpenSCAD is not an interactive modeller, instead it is
something like a 3D-compiler that reads in a script file that describes
the object and renders the 3D model from this script file.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/daid/Cura"&gt;Cura&lt;/a&gt; is the Python-based user
interface to the CuraEngine slicing library, which processes 3D models
into 3D printing instructions for various printers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.botqueue.com/"&gt;BotQueue&lt;/a&gt; is a 3D printing job-control
service, allowing remote submission and monitoring of printing jobs to
any number of printers.&lt;/p&gt;
&lt;p&gt;This talk will take a tour through SolidPython, Cura, and BotQueue
showing how Python can help with the design, preparation, and printing
of your doodad, widget, or dingus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Baker</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/the-pythonistas-3d-printing-toolchain.html</guid></item><item><title>Using Python to Test</title><link>https://pyvideo.org/kiwi-pycon-2015/using-python-to-test.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk has very little to do with what most people associate with
testing, and everything to do with the challenges, tools and concepts
required to perform large scale automated testing of hardware devices. I
promise there will no mention of the difference between unit and
integration tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kieran Brownlees</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/using-python-to-test.html</guid></item><item><title>You Don’t Care About Efficiency: Synchronous Code Is Dying</title><link>https://pyvideo.org/kiwi-pycon-2015/you-dont-care-about-efficiency-synchronous-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you write blocking code, you don’t care about efficiency.&lt;/p&gt;
&lt;p&gt;There, I said it.&lt;/p&gt;
&lt;p&gt;It’s 2015, and still the vast majority of Python programmers write
essentially synchronous code that blocks on network I/O. This approach,
while simple to reason about, struggles mightily with scaling up and out
into software that does a lot of network I/O. Worse, it makes it
difficult to write code that reacts rapidly to changing conditions.&lt;/p&gt;
&lt;p&gt;The writing is on the wall for this kind of software, as the community
shifts towards writing software that embraces asynchronicity. In this
talk we’ll discuss why synchronous software is a problem, what your
options are to move away from it, and what challenges are being faced by
the Python ecosystem as we try to move towards a brave new asynchronous
world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Benfield</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/you-dont-care-about-efficiency-synchronous-code.html</guid></item><item><title>Zaqar: Message and Notification service of OpenStack</title><link>https://pyvideo.org/kiwi-pycon-2015/zaqar-message-and-notification-service-of-openst.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As every messaging service, it's main goals are:- performance,
availability, durability, fault-tolerance and scalability. Besides
providing support for message and notification services through
OpenStack, Zaqar aims to ease the design of distributed systems and
allow for asynchronous work distribution without creating yet another
message broker.&lt;/p&gt;
&lt;p&gt;This talk aims to give the audience as much information as possible
about Zaqar's architecture, design, patterns, performance, issues it
faced and how why it was built from scratch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fei Long Wang</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/zaqar-message-and-notification-service-of-openst.html</guid></item><item><title>A practical guide to web security</title><link>https://pyvideo.org/kiwi-pycon-2015/a-practical-guide-to-web-security.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation is an introduction to securing your Python web
application. I am definitely not a security expert, just a developer who
thinks security should be everyone's job. That's right. It's your
responsibility too. Hopefully I can soften the blow by giving you a
beginner's guide to security. That's me, the beginner.&lt;/p&gt;
&lt;p&gt;We will pick apart an example Python web application to demonstrate good
security practices, along with examples and explanations of why they are
important.&lt;/p&gt;
&lt;p&gt;I'll cover a few different web security topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Not trusting any input from your users&lt;/li&gt;
&lt;li&gt;Authentication and session management&lt;/li&gt;
&lt;li&gt;Using HTTPS effectively&lt;/li&gt;
&lt;li&gt;Things not to do in client land&lt;/li&gt;
&lt;li&gt;Obvious mistakes&lt;/li&gt;
&lt;li&gt;Not so obvious mistakes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have written a web application and not thought twice about
security, this talk is for you. If you can name the OWASP Top 10, then
you can come along anyway and ask me a really tricky question at the
end.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Stott</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/a-practical-guide-to-web-security.html</guid></item><item><title>An introduction to Wagtail (CMS)</title><link>https://pyvideo.org/kiwi-pycon-2015/an-introduction-to-wagtail-cms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an introduction to Wagtail, a content management system
built on the Python web framework, Django. Many content managers are not
designed with web developers in mind, and choosing the right CMS for a
project, that does it's job well and assists with fast paced
development, can be difficult. Everyone has a favourite out there. I'm
not sure if I can call Wagtail my favourite yet, however I have found it
to be a very developer-friendly system. And after unknowingly working
alongside a core contributor for some time, I hadn't realised what
little recognition Wagtail has as a tool, even among Django developers.
My talk will thus discuss the pros and cons of the system, with a
demonstration to show how easy it is to get started with using it. I
will also touch on it's nature as an open-source platform and some of
it's potential futures.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eloise "Ducky" Macdonald-Meyer</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/an-introduction-to-wagtail-cms.html</guid></item><item><title>Build a Better Hat Rack: All Contributions Welcome</title><link>https://pyvideo.org/kiwi-pycon-2015/build-a-better-hat-rack-all-contributions-welcom.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We have many ways of reporting and recognising our code contributions in
open source projects, but often it is the work we do outside of code
commits themselves that get forgotten and unattributed. Hours of code
review, documentation, testing; organising of meetups and volunteering
at conferences; even just brainstorming and talking about things - how
much of these have you done without accreditation?&lt;/p&gt;
&lt;p&gt;During this session, we will discuss what it means to contribute to open
source projects, what constitutes a non-code contribution, steps we can
take to recognise the work of our peers, and how projects can better
encourage non-code participation through recognition and
acknowledgement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie McLaughlin</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/build-a-better-hat-rack-all-contributions-welcom.html</guid></item><item><title>Connascence in Python</title><link>https://pyvideo.org/kiwi-pycon-2015/connascence-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Connascence is the taxonomy of coupling: it allows us to specify how two
or more pieces of code are connected, and suggests ways of minimising
the impact of that coupling. Ultimately this allows developers to write
software that is more flexible to change.&lt;/p&gt;
&lt;p&gt;At the end of the talk the audience will have learned some of the forms
of connascence with real python code examples, and will understand how
to apply those principles to their own code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomi Richards</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/connascence-in-python.html</guid></item><item><title>Cython: get the benefits of C without leaving Python</title><link>https://pyvideo.org/kiwi-pycon-2015/cython-get-the-benefits-of-c-without-leaving-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cython is an optimising static compiler based on Pyrex, created by Greg
Ewing from the university of Canterbury. It bridges the worlds of Python
and C, letting you write code that runs close to C speed in a syntax
that is very close to Python. This talk will show how you can speed up a
typical Python program with Cython datatypes. We’ll call C functions
directly, passing NumPy arrays with ease. We’ll see how we can release
the global interpreter lock, letting us run multiple threads in parallel
near C speeds. We’ll look at Cython’s parallel module for data
parallelism and compare it to some alternatives and discuss the pros and
cons.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris LeBlanc</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/cython-get-the-benefits-of-c-without-leaving-pyt.html</guid></item><item><title>Functionalish programming in Python with effect</title><link>https://pyvideo.org/kiwi-pycon-2015/functionalish-programming-in-python-with-effect.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;'everyone' knows that separating out IO and other side effects makes
code easier to unit test. What if there were a Python library that helps
do that systematically which you could use to make all your things
better? There is. Come and find out more.&lt;/p&gt;
&lt;p&gt;Chris Armstrong's Effect library is the library in question. I found
this while digging into all the varied implementations of monads for
Python (a generic concept that encapsulates the principle of IO and side
effects) - and I'd like to share its beauty with other folk. Effect
(&lt;a class="reference external" href="https://pypi.python.org/pypi/effect"&gt;https://pypi.python.org/pypi/effect&lt;/a&gt;) allows consistent separation of
side effect (e.g. IO or even just global state changes) from the code
that depends on those effects. Testing and reasoning about code becomes
easier. But it can often be hard to get into such a system. Allow me to
take you on a tour through how to change regular code into super
testable code using Effect.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Collins</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/functionalish-programming-in-python-with-effect.html</guid></item><item><title>Integrating Python Apps with Centralised Identity Management Systems</title><link>https://pyvideo.org/kiwi-pycon-2015/integrating-python-apps-with-centralised-identity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most Python web developers are familiar with authentication and
authorisation on the open web, but the requirements and technologies
used inside companies and large organisations are different:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identities and groups are probably stored in an external identity
management system's directory rather than in an application's
database tables.&lt;/li&gt;
&lt;li&gt;Authorisation decisions will be based on group membership and
policies that are defined outside the application.&lt;/li&gt;
&lt;li&gt;Users may be expected or required to use a &lt;em&gt;single sign-on&lt;/em&gt;
technology such as Kerberos or SAML to authenticate to applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will familiarise the audience with these technologies and
demonstrate how Python web applications can be integrated with an
identity management system to meet business requirements while providing
a positive user experience. Particular technologies covered will
include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.freeipa.org"&gt;FreeIPA&lt;/a&gt;: an open-source identity
management solution, for defining users, groups and authorisation
policies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/modauthgssapi/mod_auth_gssapi"&gt;mod_auth_gssapi&lt;/a&gt;
/ mod_auth_kerb: Apache modules for Kerberos authentication&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.adelton.com/apache/mod_lookup_identity/"&gt;mod_lookup_identity&lt;/a&gt;:
Apache module to retrieve user information from a directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will conclude with discussion about upcoming Kerberos features,
techniques for dealing with multiple authentication methods, and
progress in making identity management integration easier for Python
(and in particular, Django) developers.&lt;/p&gt;
&lt;p&gt;People developing or deploying Python web applications in business
environments or for large open source projects with centralised identity
management will get the most out of this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fraser Tweedale</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/integrating-python-apps-with-centralised-identity.html</guid></item><item><title>Keynote: How Python works as a teaching language</title><link>https://pyvideo.org/kiwi-pycon-2015/keynote-how-python-works-as-a-teaching-language.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie Bell</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/keynote-how-python-works-as-a-teaching-language.html</guid></item><item><title>Message Passing Interface and Inversion of Control</title><link>https://pyvideo.org/kiwi-pycon-2015/message-passing-interface-and-inversion-of-contro.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The myriad of methods available for MPI programming is daunting by
itself, and largely unnecessary. The solutions proposed by the
developers of MPI and the new languages in this space are all addressing
the problem the way it's always been addressed. What I present is a way
to attack the massively parallel problem that reduces the complexity of
MPI programming to that of implementing a very simple state machine.
I've used this combination of MPI and IoC to write state-of-the-art
applications that run on some of the largest supercomputers around the
world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rand Huso</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/message-passing-interface-and-inversion-of-contro.html</guid></item><item><title>Micro-Services: Is HTTP the only way?</title><link>https://pyvideo.org/kiwi-pycon-2015/micro-services-is-http-the-only-way.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="introduction"&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Over the past few years, micro-services have been gaining popularity due
to their advantages over traditional monolithic architectures. It
becomes easier to horizontally scale the heavier portions of an
application; you're not tied to the same OS or programming language for
the entire application, meaning you can easily slot in the best tool for
the job; and finally, you can quickly build the entire application in
dynamic yet less performant languages, then rebuild any bottlenecks with
faster (but slower to develop) languages.&lt;/p&gt;
&lt;p&gt;As a basic example, rather than directly communicating with a database
for user authentication, a web front-end would make an HTTP request to
another lightweight REST service to check credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-application"&gt;
&lt;h4&gt;An Example Application&lt;/h4&gt;
&lt;p&gt;In order to elucidate the difference between monolithic and
micro-services, we will use a simple Social-Network web application that
allows users to post 141 character messages. A user must first sign up,
then log in with a username and password, then they can post their
messages publicly. A user can then follow any other user, and receive
real time updates when that user posts. While the behaviour is simple,
there are a number of different concepts that are explored: template
rendering, user signup and authentication, data storage and notification
delegation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-monolithic-version"&gt;
&lt;h4&gt;A Monolithic Version&lt;/h4&gt;
&lt;p&gt;The first version of the will be a single Django application. The talk
does not go into detail on the source code, instead briefly discusses
the views, databases (tables and queries) and overall architecture at a
high level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-http-micro-service-version"&gt;
&lt;h4&gt;The HTTP Micro-Service Version&lt;/h4&gt;
&lt;p&gt;In order to deconstruct the monolith into micro-services, we look at
different functions of the application: message viewing, user signup and
authentication, data storage and search, and user notification. Django
is kept as the front-end, but the databases for authentication, data
storage and searching and user-follows are each transformed into their
own micro-service. Flask is used as the HTTP framework for these
services, with SQLAlchemy for database as necessary. Some source code is
discussed (mostly in terms of standard Django database access c.f. HTTP)
but this is also quite high level. The talk will also cover what HTTP
comes with &amp;quot;out of the box&amp;quot;, in terms of authentication, deployment and
scalability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-transports"&gt;
&lt;h4&gt;Alternative Transports&lt;/h4&gt;
&lt;p&gt;After the micro-services have been split, we can start to think about
different transports that might be more appropriate (or at least more
interesting) in some circumstances.&lt;/p&gt;
&lt;div class="section" id="introducing-a-message-queue"&gt;
&lt;h5&gt;Introducing a Message Queue&lt;/h5&gt;
&lt;p&gt;From a user perspective, HTTP is a synchronous protocol, so making other
synchronous HTTP calls inside an HTTP handler doesn't introduce much
complexity. Message queues, on the other hand, are asynchronous by
nature. We look at using message queues for delegating user
notifications (which don't require a response, and are easy to handle),
then for authentication, data storage and searching – each requiring a
slightly different &amp;quot;level&amp;quot; of &amp;quot;synchronicity&amp;quot; and a need to be
shoehorned into HTTP differently. We'll look at code for message
producing and consuming and discuss architecture again.&lt;/p&gt;
&lt;p&gt;Message queues are already widely used for handling intensive background
tasks, so we'll look at how they compare to HTTP in this application
(for security and deployment), and briefly also talk about
cross-platform compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lower-down-the-stack-raw-sockets"&gt;
&lt;h5&gt;Lower Down the Stack - Raw Sockets&lt;/h5&gt;
&lt;p&gt;If, for some reason, the overhead of HTTP or a message queue is too
high, direct socket communication might be better. We'll look at a
Python TCP server for user authentication, and a UDP server for handling
user notifications, and example code for both. Also discussed are the
security implications (it's DIY all the way), performance, and how you
might scale these.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Finally we'll look at a comparison overview for all these different
methods and summarise with the pros and cons of each.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Shaw</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/micro-services-is-http-the-only-way.html</guid></item><item><title>My own Platform as a Service in Python, which you can do too</title><link>https://pyvideo.org/kiwi-pycon-2015/my-own-platform-as-a-service-in-python-which-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last couple of years I have evolved my own Platform as a
Service (PaaS) for hosting Django apps, and you can run it too.&lt;/p&gt;
&lt;p&gt;I use Nginx, Circus, Chaussette, and Django, with some support from
Django-environ and deployment automation using Fabric. All of that
except Nginx are written in Python. Systemd is a new init process
coming.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Circus is a process and socket manager, and gives a nice way to scale
processes.&lt;/li&gt;
&lt;li&gt;Chaussette WSGI server works well with Circus, as Circus can pass the
socket to it.&lt;/li&gt;
&lt;li&gt;Django-environ it's a library that parses environment variables or
files with key-value pairs. Environment variables are used on some
PaaS, but the file support I find very useful.&lt;/li&gt;
&lt;li&gt;Fabric is a framework for writing system commands to be run on remote
hosts, and is great for automating system administration.&lt;/li&gt;
&lt;li&gt;Systemd is a new &amp;quot;init&amp;quot; process for Linux and offers some interesting
possibilities for hosting Python webapps.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lee Begg</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/my-own-platform-as-a-service-in-python-which-you.html</guid></item><item><title>Python and Elasticsearch (Add Full Text Search to your legacy application)</title><link>https://pyvideo.org/kiwi-pycon-2015/python-and-elasticsearch-add-full-text-search-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At GrabOne we started to use Elasticsearch a year ago and integrate it
with Django. The transition was pretty smooth.&lt;/p&gt;
&lt;div class="section" id="what-is-elasticsearch"&gt;
&lt;h4&gt;What Is Elasticsearch ?&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open Source product &lt;a class="reference external" href="https://www.elastic.co/products/elasticsearch"&gt;https://www.elastic.co/products/elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Based on Apache Lucene index system&lt;/li&gt;
&lt;li&gt;Dristibuted, scalable and highly available&lt;/li&gt;
&lt;li&gt;Real time search and analytics capabilities&lt;/li&gt;
&lt;li&gt;RESTful API&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-with-python"&gt;
&lt;h4&gt;Integration With Python&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Because it is RESTful can be integrated with urllib&lt;/li&gt;
&lt;li&gt;Official Python connector maintained by the elasticsearch team
&lt;a class="reference external" href="https://github.com/elastic/elasticsearch-py"&gt;https://github.com/elastic/elasticsearch-py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Official Pythonic Query builder and Model mapper (ORM)
&lt;a class="reference external" href="https://github.com/elastic/elasticsearch-dsl-py"&gt;https://github.com/elastic/elasticsearch-dsl-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="grabone-use-case"&gt;
&lt;h4&gt;GrabOne use case&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Started by redoing the search page&lt;/li&gt;
&lt;li&gt;Rebuilding the entire frontend using Elasticsearch as datasource for
a Django website&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benoit Chabord</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/python-and-elasticsearch-add-full-text-search-to.html</guid></item><item><title>Python in Classrooms</title><link>https://pyvideo.org/kiwi-pycon-2015/python-in-classrooms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python as a language has had great success in being accessible to
aspiring programmers of much younger ages than most contemporary
languages, and the skill set attained from learning to program may
include basic problem solving, mathematics and even literacy. We have
conducted several workshops with diverse groups of primary school
children in years 4 to 6, attempting to teach elementary programming
skills using Python. The goals of the workshops were to promote numeracy
and literacy in Tasmanian schools, where there may be lower rates of
competency in these areas. We wanted to do this through the use of a
formal, syntax-dependent language, which could have benefits related to
natural language skills and literacy. To engage our students we
constructed exercises in different topics, that lead to children being
able to modify a small, simple and modular game using PyGame for Python
2.7. In some of these exercises, the students created elementary
programs to answer simple math questions and participated in group
exercises to make modifications to one version of the game (adding
characters, dialogue and interactions) before being able to modify their
own version. In these sessions we found participants to engage well with
the source material despite being reasonably advanced, with teaching
staff making comparisons between accurate python syntax and
grammatically correct English.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eloise "Ducky" Macdonald-Meyer</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/python-in-classrooms.html</guid></item><item><title>Why Python is awesome – and some other languages are cool too</title><link>https://pyvideo.org/kiwi-pycon-2015/why-python-is-awesome-and-some-other-languages.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Switching between many languages quickly clarifies each language's
strengths and weaknesses. My background is in Java – however more
recently I have moved onto using Python, JavaScript and PHP, whilst
dabbling in Go. My talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Asynchronous programming, and the various ways it can be written in
code, with reference to JavaScript and Go.&lt;/li&gt;
&lt;li&gt;Packaging, how some languages do it better and worse than Python, and
what Python can learn from them.&lt;/li&gt;
&lt;li&gt;Unit testing in all languages is hard, but the syntactic sugar that
is added can ease the pain, and make the output when your tests
inevitably fail easier to read.&lt;/li&gt;
&lt;li&gt;Syntax Shock, what brackets and semi-colons? Why are you not running
– oh yes I need a semi-colon there.&lt;/li&gt;
&lt;li&gt;Cool stuff with Magic(al) methods and Duck Typing that languages like
Java would not have a hope of implementing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will highlight some of the delight I get when coming back to
Python; and some of the aspects of other languages that I think would be
really cool to add.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lee Symes</dc:creator><pubDate>Sat, 05 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/why-python-is-awesome-and-some-other-languages.html</guid></item><item><title>Keynote: Brenda Wallace - Copyright</title><link>https://pyvideo.org/kiwi-pycon-2015/keynote-brenda-wallace-copyright.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brenda Wallace</dc:creator><pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-04:kiwi-pycon-2015/keynote-brenda-wallace-copyright.html</guid></item></channel></rss>