<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jamie Hannaford</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jamie-hannaford.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-31T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Making our spaces more inclusive</title><link href="https://pyvideo.org/djangocon-europe-2015/jamie-hannaford-making-our-spaces-more-inclusive.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Jamie Hannaford</name></author><id>tag:pyvideo.org,2015-08-08:/djangocon-europe-2015/jamie-hannaford-making-our-spaces-more-inclusive.html</id><content type="html"></content><category term="DjangoCon Europe 2015"></category></entry><entry><title>Generating docs from APIs</title><link href="https://pyvideo.org/write-the-docs-europe-2015/generating-docs-from-apis.html" rel="alternate"></link><published>2015-08-31T00:00:00+00:00</published><updated>2015-08-31T00:00:00+00:00</updated><author><name>Jamie Hannaford</name></author><id>tag:pyvideo.org,2015-08-31:/write-the-docs-europe-2015/generating-docs-from-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;APIs define contracts between a service and a client, and with the rise
of representation languages like Swagger, Apiary, and RAML, these
contracts can be consumed programmatically and adapted easily into our
codebases. Other tools like JSON Schema also contribute to this idea of
integration between service and client â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;APIs define contracts between a service and a client, and with the rise
of representation languages like Swagger, Apiary, and RAML, these
contracts can be consumed programmatically and adapted easily into our
codebases. Other tools like JSON Schema also contribute to this idea of
integration between service and client.&lt;/p&gt;
&lt;p&gt;But what about our documentation? If API contracts can be assimilated
into software, surely it can drive our documentation too? In this talk,
I want to introduce some of the techniques I've used on past projects
that allow exactly that. By using remote schemas to generate software,
it also allows us to generate working documentation that is always
relevant and never out of date. Apart from accuracy, we also get the
added benefits of reduced development time, reduced effort, and reduced
duplication. We can all of this by documenting once, and re-using across
multiple projects!&lt;/p&gt;
</content><category term="Write the Docs Europe 2015"></category></entry></feed>