<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Volumetric sculpting - Shaping a dynamic chisel</title><link>https://pyvideo.org/pycon-se-2019/volumetric-sculpting-shaping-a-dynamic-chisel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The shape of the tool determines the outcome of the result. A story about developing a volumetric 3D modeling and animation tool for creating virtual and physical sculptures using VTK, Numpy and PyQt told through the tool itself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Nyberg</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/volumetric-sculpting-shaping-a-dynamic-chisel.html</guid><category>3d</category></item><item><title>PlotVR - walk through your data</title><link>https://pyvideo.org/europython-2019/plotvr-walk-through-your-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you bored by 3D-plots that only give you a simple rotatable
2d-projection? plotVR is an open source package that provides a simple
way for data scientists to plot data, pick up a phone, get a real 3d
impression - either by VR or by AR - and use the computer's keyboard to
walk through the scatter plot:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.github.com/thomann/plotVR"&gt;https://www.github.com/thomann/plotVR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing and plotting your dataframe open your phone's browser
and use your GoogleVR Cardboard. Furthermore performant Android- and
iOS-apps are available - both support VR-Cardboard and the iOS-Version
also AR.&lt;/p&gt;
&lt;p&gt;Once you are immersed in your Cardboard how do you navigate through the
scatter? plotVR lets you use the computer's keyboard to walk as you
would in any first person game.&lt;/p&gt;
&lt;p&gt;You want to share your impression? Just save the HTML and publish it.&lt;/p&gt;
&lt;p&gt;The technologies beneath this project are: a web server that handles the
communication between the DataScience-session and the phone, WebSockets
to quickly proxy the keyboard events, QR-codes facilitate the simple
pairing of both, and an HTML-Page on the computer to grab the keyboard
events. And the translation of these keyboard events into 3D terms is a
nice exercise in three.js, OpenGL, and SceneKit for HTML, Android, and
iOS resp.&lt;/p&gt;
&lt;p&gt;Ready to see your data as you have never seen before? Join the talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philipp Thomann</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/plotvr-walk-through-your-data.html</guid><category>3D</category><category>Augmented Reality</category><category>Data Science</category><category>Open-Source</category><category>Visualization</category></item><item><title>Algorithmic Generation of OpenGL Geometry</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Algorithmic Generation of OpenGL Geometry&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Hartley&lt;/p&gt;
&lt;p&gt;Starting from a basic 'hello world' OpenGL app, a simple and Pythonic
model of 3D polyhedra is presented, with neat generators to convert
these into ctype arrays for OpenGL. Geometric algorithms then generate
some fun geometry, and these are compounded to produce successively more
complex and interesting shapes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The author's intent is to demonstrate that effective stylistic 3D
graphics can be achieved using surprisingly small amounts of code. This
hopefully makes the topic amenable to 3D beginners, while possibly
suggesting some alternative approaches to those with 3D experience.&lt;/p&gt;
&lt;p&gt;Talk Outline&lt;/p&gt;
&lt;p&gt;Throughout, discussion of ideas and code dissection alternates with live
animated demos, at 60fps on very modest hardware.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Inspirations - Effective non-photo-realistic work in gaming, movies
and the demo scene. (1m)&lt;/li&gt;
&lt;li&gt;A convenient &amp;amp; Pythonic way to model 3D polyhedra, and some neat
generators to convert these into OpenGL arrays at runtime. (7m)&lt;/li&gt;
&lt;li&gt;Composition of polyhedra to create more complex shapes. (3m)&lt;/li&gt;
&lt;li&gt;The resulting performance characteristics: What works well from
Python, and what doesn't. (2m)&lt;/li&gt;
&lt;li&gt;Koch tetrahedron &amp;amp; tetrix, aka Sierpinski tetrahedron. (1m)&lt;/li&gt;
&lt;li&gt;Surprisingly effective 3D models created from small bitmaps. (1m)&lt;/li&gt;
&lt;li&gt;Automatic generation of trees, mazes, complex spaces. (3m)&lt;/li&gt;
&lt;li&gt;Algorithmic modification of existing shapes, such as bevels,
geometric duals, and polyhedron stellation. (2m)&lt;/li&gt;
&lt;li&gt;Shapes that morph: Rearranging vertices on the fly (5m)&lt;/li&gt;
&lt;li&gt;Questions (5m)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideas demonstrated in the talk are written against OpenGL 2.1, but
written in a 'mostly OpenGL 3' style, using vertex buffer objects or
vertex arrays.&lt;/p&gt;
&lt;p&gt;The demo code uses pyglet to create a window and handle GUI events, and
uses PyOpenGL for the majority of OpenGL calls, since it provides a more
friendly and Pythonic interface. In the performance-sensitive inner
render loop, however, I use pyglet's slightly more bare-bones OpenGL
bindings.&lt;/p&gt;
&lt;p&gt;However, the majority of the talk focuses on the manipulation of
abstract data structures to represent geometry, which is not affected by
these or other OpenGL library choices.&lt;/p&gt;
&lt;p&gt;This is a substantially improved version of the talk 'Flying High:
Hobbyist OpenGL from Python', previously presented at EuroPython 2010.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Hartley</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html</guid><category>3d</category><category>opengl</category><category>pycon</category><category>pycon2011</category><category>pyglet</category><category>pyopengl</category></item></channel></rss>