<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 May 2016 00:00:00 +0000</lastBuildDate><item><title>A Quick peek at Netlogo</title><link>https://pyvideo.org/depy-2016/a-quick-peek-at-netlogo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mike fills in some spare time by show off Netlogo at DePy 2016&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Tamillow</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/a-quick-peek-at-netlogo.html</guid></item><item><title>A Universal Carving Approach for Database Forensic Analysis</title><link>https://pyvideo.org/depy-2016/a-universal-carving-approach-for-database-forensic-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Forensic tools assist analysts with recovery of data and understanding system events, even when working with corrupted data storage. These tools rely on &amp;quot;file carving&amp;quot; techniques to restore files with damaged metadata by analyzing raw file content. While much of the sensitive data is stored and processed by databases, file carving tools for databases are practically non-existent because most databases (particularly commercial ones) do not document their storage formats. Internally, database content is kept in individual &amp;quot;pages&amp;quot; and follows a unique, yet consistent, set of rules for storage and maintenance. By directly accessing raw database storage, we can recover corrupted contents and reveal user activities that are hidden even from database administrators.&lt;/p&gt;
&lt;p&gt;There are a number of database-specific tools developed for recovery and monitoring purposes but they are surprisingly limited in face of corruption or &amp;quot;unintentional&amp;quot; side-effects caused by normal database execution. In this talk, we present a universal tool that seamlessly supports many different databases, rebuilding table and other data content from any remaining storage fragments on disk or in memory. We also demonstrate just how much activity takes place under the hood of a database and present an overview of some things that can be discovered by directly investigating database internals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Wagner</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/a-universal-carving-approach-for-database-forensic-analysis.html</guid></item><item><title>Building and Distributing Python Software with Conda</title><link>https://pyvideo.org/depy-2016/building-and-distributing-python-software-with-conda.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conda is a cross platform, package management system widely used in the scientific and data science Python communities. Conda can be used to package and distribute software written in any language but has first class support for Python packages. This talk will briefly cover how to use conda to install and manage data science packages as well as how conda can be used to create isolated computing environments. The main focus of the talk will be an in-depth look at how to easily and reproducibly create conda packages for your own Python software, and options for how to share these packages with others. Finally, combining a collection of conda packages into custom cross-platform installable conda-based Python distributions will be explored.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Helmus</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/building-and-distributing-python-software-with-conda.html</guid></item><item><title>Business Data Processing Using Python</title><link>https://pyvideo.org/depy-2016/business-data-processing-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Businesses of all sizes can benefit from Python and its associated frameworks. The developer tools are extensive but the community of software engineers, programmers and analyst need a systematic approach that will guarantee a successful deployment on behalf of the business.&lt;/p&gt;
&lt;p&gt;Business Data Processing is a term that is not used regularly. It is relegated to the background while buzzwords like Apps, Full Stack Programming, Web Services and Cloud Computing dominate the landscape. Emphasis need to be placed back on Business Data Processing due to the ever changing needs of business and the flexibility afforded the technical community that utilize Python and its associated framework and tools to solve business problems.&lt;/p&gt;
&lt;p&gt;A worthy approach to business data processing using Python will be explored. Simplistic discussion on business values, requirements, agile development, user experience and support will be reviewed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gregory Dover</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/business-data-processing-using-python.html</guid></item><item><title>Deploying Django to Heroku</title><link>https://pyvideo.org/depy-2016/deploying-django-to-heroku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying a Python web application can be an involved process. It often requires you to be familiar with systems administration, database administration, networking, security and more. Platform as a service (PaaS) offering, helps reduce this complexity by removing the need to manage the infrastructure on your own, and enables you to focus more on software development. This talk will cover what is needed and how to run a Django application on the popular PaaS, Heroku. It will detail project architectural and configuration changes needed to allow your app to run on Heroku, how to configure external services (such as a database and media file hosting), and the basic commands needed to deploy and manage your site. Throughout this talk, we will use a working codebase to demonstrate.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Jasinski</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/deploying-django-to-heroku.html</guid></item><item><title>Mapping Collaborations and Knowledge in Scientific Research and Wikipedia: A How-to Approach</title><link>https://pyvideo.org/depy-2016/mapping-collaborations-and-knowledge-in-scientific-research-and-wikipedia-a-how-to-approach.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While our primary job as researchers is to generate new knowledge, it is equally important for us to understand what it is already out there. In this talk we present two examples in which Python was the enabling tool that allowed us to crunch that information in a time-efficient way: in the first example, our goal was to map a field of scientific research based on the analysis of bibliographic data to understand who, where, when, and what is being published. In particular we focused on the field of Atomic Layer Deposition, a materials synthesis technique that, among other things, has become a key component of semiconductor manufacturing, and it is one of the author's (AY) key areas of expertise. The second example focuses on mapping the evolution of Wikipedia's published content around a particular scientific discipline.&lt;/p&gt;
&lt;p&gt;In both cases we used a similar approach: we took the simplest possible approach that minimized development/learning time, prioritizing lightweight, native code and the use of standard libraries over performance. In this talk we will begin by emphasizing the methodology that we followed, addressing questions such as how to transform bibliographic data into dataframes and graphs, and the approach that we took to parse Wikipedia. We will then provide an overview of the results to exemplify Python's capabilities for this kind of data analysis.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Angel Yanguas-Gil</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/mapping-collaborations-and-knowledge-in-scientific-research-and-wikipedia-a-how-to-approach.html</guid></item><item><title>Mathematical Optimization for Machine Learning</title><link>https://pyvideo.org/depy-2016/mathematical-optimization-for-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we provide a user-friendly introduction to mathematical optimization for machine learning by essentially answering three important questions: (i) what is mathematical optimization, (ii) why should a machine learning researcher/practitioner learn it, and (iii) how does it actually work?&lt;/p&gt;
&lt;p&gt;Every machine learning problem has parameters that must be tuned properly to ensure optimal learning. As a simple example consider the case of linear regression with one dimensional input, where the two parameters slope and intercept of the linear model are tuned by forming a 'cost function' - a continuous function in both parameters - that measures how well the linear model fits a dataset given a value for its slope and intercept. The proper tuning of these parameters via the cost function corresponds geometrically to finding the values for the parameters that make the cost function as small as possible or, in other words, ’minimize’ the cost function. The tuning of these parameters is accomplished by a set of tools known collectively as mathematical optimization.&lt;/p&gt;
&lt;p&gt;Mathematical optimization, as the formal study of how to properly minimize cost functions, is used not only in solving virtually every machine learning problem (regression, classification, clustering, etc.), but reasons in a variety of other fields including operations, logistics, and physics. As a result, a mere working knowledge of how to use existing pre-packaged solvers will not be adequate for any serious machine learning developer who wants to code-up their own implementation or tailor existing algorithms to a specific application.&lt;/p&gt;
&lt;p&gt;The lion’s share of this talk is dedicated to showing how to implement widely-used optimization schemes in Python. We plan to do so by introducing the concept of iterative methods and presenting two extremely popular iterative schemes: gradient descent and Newton’s method. This will be followed by a discussion of stochastic gradient descent – a variant of gradient descent often referred to as the Backpropagation algorithm, most suitable for today’s large datasets. Live Python demos will be run for all algorithms discussed here.&lt;/p&gt;
&lt;p&gt;This talk is based on a forthcoming machine learning textbook (Machine Learning Refined; Cambridge University Press, 2016) co-authored by the speakers: Reza Borhani and Jeremy Watt (PhD, Computer Science, Northwestern University). This text has also been the source for a number of quarter length university courses on machine learning, deep learning, and numerical optimization for graduate and senior level undergraduate students. The speakers have also given/plan to give a number of tutorials on deep learning at major computer vision and AI conferences including CVPR, AAAI, ICIP, WACV, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Watt</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/mathematical-optimization-for-machine-learning.html</guid></item><item><title>Pre-Modeling: Data Preprocessing and Feature Exploration in Python</title><link>https://pyvideo.org/depy-2016/pre-modeling-data-preprocessing-and-feature-exploration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data preprocessing and feature exploration are crucial steps in a modeling workflow. In this tutorial, I will demonstrate how to use Python libraries such as scikit-learn, statsmodels, and matplotlib to perform pre-modeling steps. Topics that will be covered include: missing values, variable types, outlier detection, multicollinearity, interaction terms, and visualizing variable distributions. Finally, I will show the impact of utilizing these techniques on model performance. Interactive Jupyter notebooks will be provided.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">April Chen</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/pre-modeling-data-preprocessing-and-feature-exploration-in-python.html</guid></item><item><title>Pystan: Bayesian Inference for Fun and Profit</title><link>https://pyvideo.org/depy-2016/pystan-bayesian-inference-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probabilistic programming languages offer a flexible and expressive way to model data by treating random variables as first-class objects. Stan is a popular and well-supported library which allows users to write models in the Stan programming language and use MCMC methods to perform Bayesian inference. Stan itself is written in C++, and has a Python interface through the PyStan package. In this talk, I'll show off some of the capabilities of PyStan and go through a simple practical example of Bayesian inference in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/pystan-bayesian-inference-for-fun-and-profit.html</guid></item><item><title>Python Powered Restful API Basics with Web2py</title><link>https://pyvideo.org/depy-2016/python-powered-restful-api-basics-with-web2py.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web2py's rapid prototyping capabilities can be leveraged to bootstrap quickly through initial prototypes into full production environments. RESTful API construction can be a powerful developer tool to modularizing applications for maintenance and optimization. Basics of RESTful API design and implementation will be covered with a case study tutorial. Concepts will be expanded upon to leverage built in web2py functionality for rapid prototyping.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Graves</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/python-powered-restful-api-basics-with-web2py.html</guid></item><item><title>The UCSC IoT Python Platform</title><link>https://pyvideo.org/depy-2016/the-ucsc-iot-python-platform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prof. Luca de Alfaro works in the areas of reputation systems for ecommerce and collaboration, crowdsourcing, game theory, and formal methods for system design and verification. Luca is author of many tools including Crowdgrader and Similcheck. He is also the CTO of Camio.com. This talk is about a new tool for the Internet of Things that he is about to release.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luca De Alfaro</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/the-ucsc-iot-python-platform.html</guid></item><item><title>To Catch a Cheat</title><link>https://pyvideo.org/depy-2016/to-catch-a-cheat.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are various game theoretic models of cheating. I give results from simulations of various models of cheating-in-game-play collected from my own open source python code (MIT). These results are extended to a &amp;quot;society at large&amp;quot; model of the result of cheating-at-game-play. I discuss some overt and less overt counter-measures to cheating-at-game-play in the context of online test taking.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Casey Schroeder</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/to-catch-a-cheat.html</guid></item></channel></rss>