<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Michael Droettboom</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michael-droettboom.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Measuring the performance of CPython</title><link href="https://pyvideo.org/pycon-us-2024/measuring-the-performance-of-cpython.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/measuring-the-performance-of-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years, improving performance has been one of the main
areas of focus for CPython. This talk focuses on how CPython's
performance is measured, and what it means when we say that one version
is X% faster than another. Many of these techniques apply in general …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years, improving performance has been one of the main
areas of focus for CPython. This talk focuses on how CPython's
performance is measured, and what it means when we say that one version
is X% faster than another. Many of these techniques apply in general to
all kinds of software.&lt;/p&gt;
&lt;p&gt;This includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A history of performance measurement in Python, and how measuring an
interpreter can be different from other kinds of software.&lt;/li&gt;
&lt;li&gt;An overview of CPython's &lt;tt class="docutils literal"&gt;pyperformance&lt;/tt&gt; benchmark suite, and what
makes a benchmark more or less useful. Why is the concept of the
&amp;quot;typical Python workload&amp;quot; so elusive? An evaluation of the breadth of
the benchmark suite and a discussion of ways in which the Python
community can help to improve it.&lt;/li&gt;
&lt;li&gt;Why measuring time is hard, and how we improve that situation with
software, hardware, and statistics.&lt;/li&gt;
&lt;li&gt;An overview of our continuous benchmarking system, based on Github
Actions.&lt;/li&gt;
&lt;li&gt;Lastly, a discussion of how these techniques can be applied to
software in general.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Going faster in all directions at once: How two teams are working together to make Python better for all</title><link href="https://pyvideo.org/pycon-us-2025/going-faster-in-all-directions-at-once-how-two-teams-are-working-together-to-make-python-better-for-all.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/going-faster-in-all-directions-at-once-how-two-teams-are-working-together-to-make-python-better-for-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two separate, but related, projects to make CPython faster are currently happening at the same time. The first, funded by Microsoft, aims to improve the single-threaded performance of CPython (PEP 659, PEP 744). The second, funded by Meta, aims to remove the global interpreter lock so multiple threads can …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two separate, but related, projects to make CPython faster are currently happening at the same time. The first, funded by Microsoft, aims to improve the single-threaded performance of CPython (PEP 659, PEP 744). The second, funded by Meta, aims to remove the global interpreter lock so multiple threads can make better use of all processor cores (PEP 703). There are technical challenges to achieving both of these goals simultaneously. We will describe how we collaborate to nonetheless make both projects a success. This includes (a) regular and open lines of communication, (b) sharing the same code for benchmarking, (c) leaving space for each of these projects to develop on their own, and (d) allocating time to directly tackle the intersection of the two problems.&lt;/p&gt;
&lt;p&gt;This talk is intended for a general audience. It will cover technical topics related to language runtimes at a high level, and also include people-management topics related to open source communities.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Iodide and Pyodide: Bringing Data Science Computation to the Web Browser</title><link href="https://pyvideo.org/pydata-la-2018/iodide-and-pyodide-bringing-data-science-computation-to-the-web-browser.html" rel="alternate"></link><published>2018-10-22T00:00:00+00:00</published><updated>2018-10-22T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2018-10-22:/pydata-la-2018/iodide-and-pyodide-bringing-data-science-computation-to-the-web-browser.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to Iodide and Pyodide: tools for doing data science
entirely in the web browser.&lt;/p&gt;
</content><category term="PyData LA 2018"></category></entry><entry><title>Iodide and Pyodide: Bringing Data Science Computation to the Web Browser</title><link href="https://pyvideo.org/pydata-new-york-city-2018/iodide-and-pyodide-bringing-data-science-computation-to-the-web-browser.html" rel="alternate"></link><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2018-08-17:/pydata-new-york-city-2018/iodide-and-pyodide-bringing-data-science-computation-to-the-web-browser.html</id><content type="html"></content><category term="PyData New York City 2018"></category></entry><entry><title>Astropy, growing a community-based software system for astronomy</title><link href="https://pyvideo.org/scipy-2013/astropy-growing-a-community-based-software-syste-0.html" rel="alternate"></link><published>2013-07-01T00:00:00+00:00</published><updated>2013-07-01T00:00:00+00:00</updated><author><name>Erik Tollerud</name></author><id>tag:pyvideo.org,2013-07-01:/scipy-2013/astropy-growing-a-community-based-software-syste-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Astropy is a community-based software project to coordinate the
development of libraries and applications for astronomy. We will report
on progress that has been made with astropy since the last scipy
conference.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Droettboom, Michael, STScI; Robitaille, Thomas, Max Planck
Institute; Tollerud, Erik, Yale Universit&lt;/p&gt;
&lt;p&gt;Track: Astronomy and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Astropy is a community-based software project to coordinate the
development of libraries and applications for astronomy. We will report
on progress that has been made with astropy since the last scipy
conference.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Droettboom, Michael, STScI; Robitaille, Thomas, Max Planck
Institute; Tollerud, Erik, Yale Universit&lt;/p&gt;
&lt;p&gt;Track: Astronomy and Astrophysics&lt;/p&gt;
&lt;p&gt;Astropy is a community-based software project to coordinate the
development of libraries and applications for astronomy. We will report
on progress that has been made with astropy since the last scipy
conference. The past year has seen much growth in the number and quality
of the core libraries in astropy and a public release. We will highlight
the new capabilities available, and outline the development plans for
the upcoming year. Finally we discuss the strategies for advertising its
capabilities and growing the documentation and tutorials available for
users and developers.&lt;/p&gt;
</content><category term="SciPy 2013"></category><category term="astronomy"></category><category term="astrophysics"></category><category term="astropy"></category></entry><entry><title>Airspeed Velocity: Tracking Performance of Python Projects Over Their Lifetime</title><link href="https://pyvideo.org/scipy-2014/airspeed-velocity-tracking-performance-of-python.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2014-07-09:/scipy-2014/airspeed-velocity-tracking-performance-of-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Presenting &amp;quot;airspeed velocity&amp;quot;, a new tool for benchmarking Python
software projects over their lifetime.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As software projects mature and become more robust against bugs, they
may also lose some of their runtime performance and memory efficiency.
Airspeed velocity (asv) is a new tool to help find those performance …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Presenting &amp;quot;airspeed velocity&amp;quot;, a new tool for benchmarking Python
software projects over their lifetime.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As software projects mature and become more robust against bugs, they
may also lose some of their runtime performance and memory efficiency.
Airspeed velocity (asv) is a new tool to help find those performance
degradations before they get out to end users. It automatically runs a
benchmark suite over a range of commits in a project's repository, as
well as in a matrix of configurations of Python versions and other
dependencies. The results, possibly from multiple machines, are then
collated and published in a web-based report.&lt;/p&gt;
&lt;p&gt;While filling a similar role as projects such as &amp;quot;codespeed&amp;quot; and
&amp;quot;vbench&amp;quot;, airspeed velocity is designed to be easier to set up and
deploy, since it uses only a DVCS repository as its database and the
report is deployable to any static web server.&lt;/p&gt;
&lt;p&gt;Airspeed velocity provides an easy way to write benchmarks, inspired by
&amp;quot;nosetests&amp;quot; and &amp;quot;py.test&amp;quot;. It is possible to benchmark runtime, memory
usage, or any user-defined metric.&lt;/p&gt;
&lt;p&gt;Other features either implemented or in the planning stages include:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;tight integration with existing profiling tools, such as RunSnakeRun&lt;/li&gt;
&lt;li&gt;parameterized benchmarks to investigate how an algorithm scales with
data size&lt;/li&gt;
&lt;li&gt;automatic search for degrading commits&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The presentation will provide a demo of airspeed velocity, and discuss
its early usage for benchmarking the astropy project.&lt;/p&gt;
</content><category term="SciPy 2014"></category><category term="benchmarking"></category><category term="performance"></category></entry><entry><title>ASDF, a New Scientific Data Format</title><link href="https://pyvideo.org/scipy-2015/asdf-a-new-scientific-data-format.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Perry Greenfield</name></author><id>tag:pyvideo.org,2015-07-10:/scipy-2015/asdf-a-new-scientific-data-format.html</id><content type="html"></content><category term="SciPy 2015"></category></entry><entry><title>Keynote: Open Source Contributors in Space and Time</title><link href="https://pyvideo.org/scipy-2023/keynote-open-source-contributors-in-space-and-time.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>Michael Droettboom</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/keynote-open-source-contributors-in-space-and-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michael Droettboom is a Principal Software Engineering Manager at Microsoft where he leads the CPython Performance Engineering Team. That team contributes directly to the upstream CPython project, and recently helped make Python 3.11 up to 60% faster than 3.10.&lt;/p&gt;
&lt;p&gt;Michael has been contributing to open source for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michael Droettboom is a Principal Software Engineering Manager at Microsoft where he leads the CPython Performance Engineering Team. That team contributes directly to the upstream CPython project, and recently helped make Python 3.11 up to 60% faster than 3.10.&lt;/p&gt;
&lt;p&gt;Michael has been contributing to open source for over 25 years: he is the former lead maintainer of matplotlib, a major contributor to astropy, and he is the original author of Pyodide and airspeed velocity. His work has supported such diverse applications as the Hubble and James Webb Space Telescopes, the Firefox web browser, infrared retinal imaging, and optical sheet music recognition.&lt;/p&gt;
</content><category term="SciPy 2023"></category><category term="Keynote"></category></entry></feed>