<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_magdalena-rother.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>Writing Awesome PyPI packages in Python</title><link href="https://pyvideo.org/europython-2017/writing-awesome-pypi-packages-in-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Magdalena Rother</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/writing-awesome-pypi-packages-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the strengths of the Python programming language is the huge
base of Open Source libraries. The PyPI (Python Package Index)
repository provides currently 105,917 packages, many of them
developed actively by contributors.&lt;/p&gt;
&lt;p&gt;This talk is a tour through various tools and practices, which help
to keep your package in a good state for your users and make it
easier for other developers to contribute. One can find these
practices in projects of different size, such as Django (24,244
commits, 1,397 contributors) Pandas (15,005 commits, 754
contributors) and Faker (20 commits, 3 contributors).&lt;/p&gt;
&lt;p&gt;Some things to consider when creating your own package:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;using a Makefile for automatic testing, coverage analysis and environment setup.&lt;/li&gt;
&lt;li&gt;structuring your .gitignore file.&lt;/li&gt;
&lt;li&gt;using pyenv and .python-version for Python version management.&lt;/li&gt;
&lt;li&gt;using tox to ascertain that code is working in different environments.&lt;/li&gt;
&lt;li&gt;squashing different configuration files to a single setup.cfg file.&lt;/li&gt;
&lt;li&gt;using EditorConfig and .editorconfig to automatically set project coding standards in the editor.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>How to become a software developer in science?</title><link href="https://pyvideo.org/europython-2014/how-to-become-a-software-developer-in-science.html" rel="alternate"></link><published>2014-07-24T00:00:00+00:00</published><updated>2014-07-24T00:00:00+00:00</updated><author><name>Magdalena Rother</name></author><id>tag:pyvideo.org,2014-07-24:europython-2014/how-to-become-a-software-developer-in-science.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;My path from &lt;em&gt;'Hello world'&lt;/em&gt; to software development was long and hard.
The approach I learned during my research may help you to create high
quality software and improve as a developer. The talk covers how you can
benefit from your non-IT knowledge, atomize your project and how
collaboration accelerates your learning.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: give practical tools for improving skills and software quality
to people with a background other than IT.&lt;/p&gt;
&lt;p&gt;Eight years ago, as a plant biologist, I knew almost nothing about
programming. When I took a course in python programming, I found myself
so fascinated that it altered my entire career. I became a scientific
software developer. It was long and hard work to get from the level of
'Hello world' to the world of software development. The talk will cover
how to embrace a non-IT education as a strength, how and why to atomize
programming tasks and the importance of doing side projects.&lt;/p&gt;
&lt;div class="section" id="embrace-your-background"&gt;
&lt;h4&gt;1. Embrace your background&lt;/h4&gt;
&lt;p&gt;Having domain specific knowledge from a field other than IT helps you to
communicate with the team, the users and the group leader. It prevents
misunderstandings and helps to define features better. A key step you
can take is systematically apply the precise domain specific language to
the code e.g when naming objects, methods or functions. Another is to
describe the underlying scientific process step by step as a Use Case
and write it down in pseudocode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="atomisation"&gt;
&lt;h4&gt;2. Atomisation&lt;/h4&gt;
&lt;p&gt;Having a set of building block in your software helps to define
responsibilities clearly. Smaller parts are easier to test, release and
change. Modular design makes the software more flexible and avoids the
Blob and Lava Flow Anti-Patterns. When using object oriented programming
a rule of thumb is that an object (in Python also a method) does only
one thing. You can express this Single Responsibility Principle as a
short sentence for each module. Another practical action is to introduce
Design Patterns that help to decouple data and its internal
representation. As a result, your software becomes more flexible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="participating-in-side-projects"&gt;
&lt;h4&gt;3. Participating in side projects&lt;/h4&gt;
&lt;p&gt;Learning from others is a great opportunity to grow. Through side
projects you gain a fresh perspective and learn about best practices in
project management. You gain new ideas for improvement and become aware
of difficulties in your own project. You can easily participate in a
scientific project by adding a small feature, writing a test suite or
provide a code review on a part of a program.&lt;/p&gt;
&lt;p&gt;Summarizing, in scientific software development using domain-specific
knowledge, atomisation of software, and participation in side projects
are three things that help to create high quality software and to
continuously improve as a developer.&lt;/p&gt;
&lt;p&gt;The talk will address challenges in areas where science differs from the
business world. It will present general solution one might use for
software developed in a scientific environment for research projects
rather then discussing particular scientific packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qualifications"&gt;
&lt;h4&gt;Qualifications&lt;/h4&gt;
&lt;p&gt;During my PhD I developed a software on 3D RNA modeling
(www.genesilico.pl/moderna/) that resulted in 7 published articles. I am
coauthor on a paper on bioinformatic software development. Currently I
am actively developing a system biology software in Python at the
Humboldt University Berlin (www.rxncon.org).&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>