<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_tools.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Immagino: un racconto di serverless e codeless (più o meno).</title><link href="https://pyvideo.org/pycon-italia-2019/immagino-un-racconto-di-serverless-e-codeless-piu-o-meno.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Christian Strappazzon</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/immagino-un-racconto-di-serverless-e-codeless-piu-o-meno.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In &lt;a class="reference external" href="https://gs1it.org/"&gt;GS1 Italy&lt;/a&gt; abbiamo realizzato il servizio
&lt;a class="reference external" href="http://immagino.biz/"&gt;Immagino&lt;/a&gt;, dove vengono digitalizzati prodotti
merceologici. La parte interessante è come ci portiamo in casa le
immagini e le descrizioni: abbiamo creato una pipeline di elaborazione
con &lt;a class="reference external" href="https://aws.amazon.com/"&gt;aws&lt;/a&gt;, vedremo insieme il disegno
dell’applicazione, i servizi (sqs, sns, lambda, s3) e package (zappa,
asyncio, boto3) utilizzati. Non servono partiolari conoscenze di aws e
Python, l’obiettivo è mostrare un caso d’uso in produzione.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1690"&gt;https://python.it/feedback-1690&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="aws"></category><category term="boto3"></category><category term="zappa"></category><category term="lambda-functions"></category><category term="packages"></category><category term="tools"></category><category term="pythonscripts"></category></entry><entry><title>Live Coding in Python v2.16</title><link href="https://pyvideo.org/vancouver-python-developers/live-coding-in-python-v216.html" rel="alternate"></link><published>2017-07-20T00:00:00+00:00</published><updated>2017-07-20T00:00:00+00:00</updated><author><name>Don Kirkby</name></author><id>tag:pyvideo.org,2017-07-20:vancouver-python-developers/live-coding-in-python-v216.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demonstrates an Eclipse plugin that runs your Python code while you type it, including a new feature: live unit tests. Also shows Emacs package and new PyCharm plugin, as well as the old features of turtle graphics and live coding display.&lt;/p&gt;
</summary><category term="live coding"></category><category term="tools"></category></entry><entry><title>The Glory of pdb's set_trace</title><link href="https://pyvideo.org/pycon-us-2017/the-glory-of-pdbs-set_trace.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Nicole Zuckerman</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/the-glory-of-pdbs-set_trace.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone needs to debug code, and it can take up a non-trivial portion
of our time to wait for code to complete execution and write print
messages to stdout. There’s one function in particular in the python
debugger (pdb) library that can give you a much clearer understanding of
what’s going on in your code, much more quickly; pdb.set_ trace(). In
this talk, we’ll identify the most useful things you can do when you use
set trace, that can make debugging exponentially more efficient and
enjoyable.&lt;/p&gt;
</summary><category term="debugging"></category><category term="tools"></category></entry><entry><title>From rocks to a hammer when and how to change your company's analytical tools</title><link href="https://pyvideo.org/pydata-dc-2016/from-rocks-to-a-hammer-when-and-how-to-change-your-companys-analytical-tools.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Sebastien Genty</name></author><id>tag:pyvideo.org,2016-10-08:pydata-dc-2016/from-rocks-to-a-hammer-when-and-how-to-change-your-companys-analytical-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Many organizations still rely on SPSS/SAS to do most of their analytical work. These tools are not only very costly ($10k+ per year per license), but are also limited (no scripting ability, very manual). In 2015, we began transitioning into Python to build robust tools and to reduce operational costs. Along the way, we learned a lot about propagating new tools within a company, reverse engineering, and helping others adjust to a new paradigm. This talk will outline our process of evaluating new tools, initial adoption and companywide propagation. One of the main findings was that open source does not mean free, and we had to take into account each person's experience and comfort in devising our implementation strategy. Lastly, we had to develop our own internal library in order to maintain functionality.&lt;/p&gt;
</summary><category term="tools"></category></entry><entry><title>Integrating Development, Documentation and Reporting</title><link href="https://pyvideo.org/write-the-docs-2013/integrating-development-documentation-and-reporting.html" rel="alternate"></link><published>2013-04-09T00:00:00+00:00</published><updated>2013-04-09T00:00:00+00:00</updated><author><name>Ana Nelson</name></author><id>tag:pyvideo.org,2013-04-09:write-the-docs-2013/integrating-development-documentation-and-reporting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let’s explore the amazing things that happen when you combine reporting with documentation. We’ll start with a retro-chic command-line task management tool named ‘ado’, and create a beautifully modern D3-based interactive task explorer (no server necessary). Learn how powerful documentation-driven development can be, and the benefits of freeing documentation and reporting from their usual separate silos. In this talk we will simultaneously document Bash, Python, SQL, CSS, HTML and JavaScript using HTML, PDF, epub, Excel and .docx formats (with just a single command!). You’ll learn about Dexy, the document and data automation tool that makes this possible by working alongside the documentation tools you already know and love.&lt;/p&gt;
</summary><category term="documentation"></category><category term="tools"></category></entry><entry><title>IronPython Tooling (#67)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--ironpython-tooling---67.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Dino E Viehland</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--ironpython-tooling---67.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IronPython Tooling&lt;/p&gt;
&lt;p&gt;Presented by Dino E Viehland (Microsoft)&lt;/p&gt;
&lt;p&gt;One of the most popular requests for the IronPython team is tooling
support. During this talk Iâ€™ll show you some of the existing tools
available to help create IronPython applications. Iâ€™ll also look at
the latest IronPython features which can help you debug, profile and
improve your applications. Iâ€™ll also compare and contrast these with
the solutions available for CPython that you may already be familiar
with.&lt;/p&gt;
</summary><category term="ironpython"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tools"></category></entry><entry><title>Writing Books using Python and Open Source Software (#40)</title><link href="https://pyvideo.org/pycon-us-2010/writing-books-using-python-and-open-source-softwa.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/writing-books-using-python-and-open-source-softwa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Books using Python and Open Source Software&lt;/p&gt;
&lt;p&gt;Presented by Mr. wesley j. chun&lt;/p&gt;
&lt;p&gt;These days, there are countless number of software applications and web
services that have been developed using free and open source software
(FOSS). Such tools have become so flexible, powerful, and universal,
that it should also be possible for authors to write manuscripts using
open source tools like Python in the same way that applications are
developed. In this talk, we present some case studies of this
phenomenon.&lt;/p&gt;
</summary><category term="documentation"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tools"></category></entry></feed>