<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_clean-code.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Code review for Beginners and Experts: Tips &amp; Tricks</title><link href="https://pyvideo.org/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Łukasz Kąkol</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much easier to debug, and it's much harder to introduce
a bug in such code.&lt;/div&gt;
&lt;div class="line"&gt;When you think about code review, you probably think about verifying
and examining the code. Reviewing the expert's code may look like a
waste of time because he knows what he's doing. Reviewing the code by
a beginner may look like a waste of time because he's not able to find
as many defects as an experienced developer. Code review is a code
quality tool in the first place, but it's also much beyond that. You
can teach or help someone, learn from somebody and much more both from
the position of reviewer and reviewee.&lt;/div&gt;
&lt;div class="line"&gt;There is much more about the real power of code review which I want to
share with you.&lt;/div&gt;
&lt;div class="line"&gt;This talk is also about how to do it the right way and how to not do
it based on lessons learned and my experience within the diverse teams
of people with a variety of knowledge and experience. I was reviewing
the code but, on the other hand, I was also being reviewed. I'd like
to pass my observations to people who are reviewing the code both in
commercial and open source projects for a while. This talk is also for
those who want to start to review the code, but they do not know how
to do it.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Development"></category><category term="Programming"></category></entry><entry><title>Don't start with a database</title><link href="https://pyvideo.org/europython-2019/dont-start-with-a-database.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Grzegorz Kocjan</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/dont-start-with-a-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What you do when you start a new project? Usually, we begin with
database design, then we prepare a migration system, user registration,
and all different stuff that distracts us from doing what is most
important - business logic. With the clean architecture, we can learn
how to start a project in another way and this will be one of two main
topics of my talk. The second one will be about new features in Python.
You probably heard about typings, mypy, and dataclasses, but I will show
you how they can be used in real life project that can be developed over
many years in production lifecycle. There will be no &amp;quot;hello world&amp;quot; app,
no copy &amp;amp; paste of documentation, only practical knowledge learned
through many years of practice.&lt;/p&gt;
</summary><category term="APIs"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category></entry><entry><title>How to read (code)</title><link href="https://pyvideo.org/europython-2019/how-to-read-code.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Max Humber</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/how-to-read-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you learn a new language, like French or German or even English,
you first learn how to read. Then you learn how to write. When you learn
a new &lt;em&gt;programming&lt;/em&gt; language, you first learn how to write. And that’s
it.&lt;/p&gt;
&lt;p&gt;Imagine that you were never formally taught how to read. And that you
were told that you should just figure it out … by writing … a whole
bunch. How would that even work? I don’t think it would.&lt;/p&gt;
&lt;p&gt;If you can’t read. You can’t write. It’s that simple.&lt;/p&gt;
&lt;p&gt;Do you think that Shakespeare would be Shakespeare if he never read a
single book in his entire life? No. Nothing is created in a vacuum. Good
writers are good writers because they’re good readers.&lt;/p&gt;
&lt;p&gt;Just as reading is an invaluable skill so to is reading code. It’s a
skill that’s never formally taught. But it’s a skill that is essential
nonetheless. In this talk I’ll show you how to effectively read code so
that might write better code.&lt;/p&gt;
</summary><category term="Beginners"></category><category term="Clean Code"></category><category term="Documentation"></category><category term="Learning"></category><category term="Teaching"></category></entry><entry><title>Modern Continuous Delivery for Python Developers</title><link href="https://pyvideo.org/europython-2019/modern-continuous-delivery-for-python-developers.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Peter Bittner</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/modern-continuous-delivery-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment automation, cloud platforms, containerization, short
iterations to develop and release software—we’ve progressed a lot. And
finally it’s official: Kubernetes and OpenShift are the established
platforms to help us do scaling and zero downtime deployments with just
a few hundred lines of YAML. It’s a great time.&lt;/p&gt;
&lt;p&gt;Can we finally put all our eggs into one basket? Identify the cloud
platform that fits our needs, and jump on it? That could well backfire:
Vendor lock-in is the new waterfall, it slows you down. In future you’ll
want to jump over to the next better platform, in a matter of minutes.
Not months.&lt;/p&gt;
&lt;p&gt;This talk is about The Art of Writing deployment pipelines that will
survive Kubernetes, OpenShift and the like. It’s for Python developers
and Kubernetes enthusiasts of all levels – no domain specific knowledge
required, all you need to understand will be explained. You’ll learn how
to separate application-specific and deployment-specific configuration
details, to maximize your freedom and avoid vendor lock-in.&lt;/p&gt;
&lt;p&gt;Come see a demo of a Django project setup that covers everything from
local development to automatic scaling, flexible enough to be deployed
on any of your favorite container platforms. Take home a working,
future-proof setup for your Python applications.&lt;/p&gt;
</summary><category term="Agile"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Deployment/Continuous Integration and Delivery"></category></entry><entry><title>PEP yourself: 10 PEPs you should pay attention to</title><link href="https://pyvideo.org/europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Juan Santos</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reading standards documents can be a dull task. But like in other
fields, standards in Python play a big part. Python Enhancement
Proposals (PEPs) are defined, improved, and eventually implemented by
the community. They apply to mostly anything related to Python, from the
more abstract and general to the more concrete and specific. Paying
attention to them, and knowing which ones to read beforehand is a vital
task that should take place prior to writing the first lines of code in
a project.&lt;/p&gt;
&lt;p&gt;In this talk we will go over a condensed list of the most important PEPs
to this date and see how they influence everyday coding. From style
guides and docstring conventions to data classes and assignment
expressions, we will see how these PEPs affect (or can affect) the code
we write, and how can we use them to improve our code and make
developing easier and more fun.&lt;/p&gt;
&lt;p&gt;After this talk, attendees will have a better grasp on why PEPs are
important to Python, which are a must read, and which ones they should
use as a guide in the future, both for coding and refactoring.&lt;/p&gt;
</summary><category term="Clean Code"></category><category term="Python Skills"></category><category term="Python general"></category></entry><entry><title>From Python script to Open Source Project</title><link href="https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/from-python-script-to-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Static Analysis"></category><category term="Tooling"></category></entry><entry><title>Refactoring in Python</title><link href="https://pyvideo.org/europython-2019/refactoring-in-python.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Tin Marković</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/refactoring-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[Replacement talk]&lt;/div&gt;
&lt;div class="line"&gt;This talk was a replacement for Stanislav Geidl's talk: From legacy
code to modern code&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Honest apologies to anyone whose expectations were subverted, but
Stanislav fell sick and could not attend. Find the updated abstract
below:&lt;/p&gt;
&lt;p&gt;This talk will describe experiences and lessons learned from tackling
extremely demanding code. How to bring order to mismanaged code and
elevate the code base to a standard that's acceptable in today's tech
environment.&lt;/p&gt;
&lt;p&gt;Python makes wonderful code accessible at our fingertips, but it also
allows us to take a lot of liberty. When you start, code is beautiful
and makes sense. With each step you walk on, you find more and more
hacks showing up. Eventually, the brilliant codebase you've started with
can not be seen under the mud.&lt;/p&gt;
&lt;p&gt;Not every code-base can be rewritten, not everything can be redone from
scratch. Cool libraries often take a lot of liberty with code structure
and make cross-integration difficult, if not impossible. Tests sound
ideal, but in practice, they're just so hard to make right. Why is this,
and how to change it?&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The talk will tackle the problems in three parts:&lt;/div&gt;
&lt;div class="line"&gt;- The Easy Wins: What to do to instantly increase the code quality in
your organisation. How? Why isn't it enough?&lt;/div&gt;
&lt;div class="line"&gt;- Patterns and Antipatterns: How to identify code that &amp;quot;smells&amp;quot;, how
to replace it? How to integrate into old code, better?&lt;/div&gt;
&lt;div class="line"&gt;- The Philosophy: What approach to set down for the future? Why to
care? How to write replace-able code. How to prevent history from
repeating.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The talk will close with audience discussion and experiences, questions
and proposals - building a collection of some on-premise tips and
tricks.&lt;/p&gt;
</summary><category term="Architecture"></category><category term="Clean Code"></category><category term="Development"></category><category term="Python 3"></category><category term="legacy-code"></category></entry></feed>