<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mark-rees.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-08-11T00:00:00+00:00</updated><entry><title>PyPy - is it ready for production?</title><link href="https://pyvideo.org/pycon-au-2012/pypy-is-it-ready-for-production.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Mark Rees</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/pypy-is-it-ready-for-production.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I have followed the development of PyPy since 2004 and played with
various releases to see what the PyPy team had achieved. It wasn't until
the release of PyPy 1.18 that I actually ran some existing production
python code under it. The perc&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I have followed the development of PyPy since 2004 and played with
various releases to see what the PyPy team had achieved. It wasn't until
the release of PyPy 1.18 that I actually ran some existing production
python code under it. The perceived performance improvement of this
exercise inspired me to implement a more scientific method for comparing
the runtime performance of CPython and PyPy running various Python
production code sets that we use in the company I work for. This
presentation will discuss the results of this comparison and the
positives and negatives with utilising PyPy in production.&lt;/p&gt;
</summary><category term="pypy"></category></entry><entry><title>Seeing with Python by Mark Rees</title><link href="https://pyvideo.org/pycon-au-2014/seeing-with-python-by-mark-rees.html" rel="alternate"></link><published>2014-08-11T00:00:00+00:00</published><updated>2014-08-11T00:00:00+00:00</updated><author><name>Mark Rees</name></author><id>tag:pyvideo.org,2014-08-11:pycon-au-2014/seeing-with-python-by-mark-rees.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2013 I purchased a Ninja Block (&lt;a class="reference external" href="http://ninjablocks.com/"&gt;http://ninjablocks.com/&lt;/a&gt;) and wanted
to add a camera based sensor to it. So began my adventures in computer
vision using python. The talk will discuss the various libraries
(including PyOpenCV &amp;amp; SimpleCV ) available for python to perform CV
tasks like motion detection, object tracking &amp;amp; facial recognition. As my
goals for the camera sensor underwent &amp;quot;feature creep&amp;quot; the project
required it's own dedicated processing power, so a BeagleBone Black &amp;amp;
later a Raspberry Pi were purchased and the project became a IoT device.
I will also share my experiences with developing python CV solutions ARM
based computers. If the demo gods are willing, code examples will be
demonstrated.&lt;/p&gt;
</summary></entry></feed>