<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nathan-gaberel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-04-20T00:00:00+00:00</updated><entry><title>Take the goRe out of a DjangoReact stack</title><link href="https://pyvideo.org/djangocon-europe-2019/take-the-gore-out-of-a-djangoreact-stack.html" rel="alternate"></link><published>2019-04-20T00:00:00+00:00</published><updated>2019-04-20T00:00:00+00:00</updated><author><name>Nathan Gaberel</name></author><id>tag:pyvideo.org,2019-04-20:djangocon-europe-2019/take-the-gore-out-of-a-djangoreact-stack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing, packaging and integrating JS apps with Django.
As a Django dev you cannot ignore Javascript frameworks anymore. But integrating React (or any javascript framework) with Django is not seamless: thereâ€™s no documented guide to setup a project, getting hot reloading to work is a painful must-have, and then how do you even leverage the power of both frameworks to code faster? Doing this without losing time and productivity is very hard.
After 4 years of building a dozen django/react projects at Theodo, I want to share with you the very efficient setup we came up with, both for development and production use.&lt;/p&gt;
</summary></entry></feed>