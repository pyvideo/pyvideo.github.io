<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_coroutines.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-04-06T00:00:00+00:00</updated><entry><title>Generators Showdown Showcase</title><link href="https://pyvideo.org/pycon-es-2013/generators-showdown-showcase.html" rel="alternate"></link><published>2013-12-29T00:00:00+00:00</published><updated>2013-12-29T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2013-12-29:pycon-es-2013/generators-showdown-showcase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: James Powell&lt;/p&gt;
&lt;p&gt;Track: Avanzado&lt;/p&gt;
&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyCon Canada, PyData Boston, and PyTexas. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
</summary><category term="generators"></category><category term="coroutines"></category></entry><entry><title>Generators will free your mind</title><link href="https://pyvideo.org/pycon-es-2014/generators-will-free-your-mind.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-04-06:pycon-es-2014/generators-will-free-your-mind.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyData London, PyCon Spain, and the conference &amp;quot;for Python Quants&amp;quot;. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
&lt;p&gt;Generators are one of the most notable features of Python, and they are a critical component of Python 3's driving focus on iterability as a core protocol. This talk introduces the basic concepts surrounding generators, generator expressions, and co-routines, then dives into ways that generators can improve our code: not just in terms of performance but also by offering us better ways to model our problems.&lt;/p&gt;
</summary><category term="generators"></category><category term="coroutines"></category></entry><entry><title>PyGotham 2011: A Practical Guide to Non-blocking IO, Coroutines, and Concurrency</title><link href="https://pyvideo.org/pygotham-2011/pygotham-2011--a-practical-guide-to-non-blocking-.html" rel="alternate"></link><published>2011-09-16T00:00:00+00:00</published><updated>2011-09-16T00:00:00+00:00</updated><author><name>Robert Hancock</name></author><id>tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--a-practical-guide-to-non-blocking-.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;From the OS on up how coroutines and threads affect the performance of
your Python programs and who to deal with them.&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="nonblockingio"></category><category term="pygotham"></category><category term="pygotham2011"></category></entry><entry><title>Fun with App Engine 1.5.0</title><link href="https://pyvideo.org/pycon-au-2011/fun-with-app-engine-150.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Greg Darke</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/fun-with-app-engine-150.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using generators as coroutines in App Engine to get more done.&lt;/p&gt;
</summary><category term="coroutines"></category><category term="generators"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>An outsider's look at co-routines.</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Peter Portante</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An outsider's look at co-routines.&lt;/p&gt;
&lt;p&gt;Presented by Peter Portante&lt;/p&gt;
&lt;p&gt;Let's take an outsiders look at coroutines, the underlying concept used
by greenlets. First we'll define what they are conceptually, and show
some typical use cases. Then we'll take a look at a sampling of the
implementations out there to see what they are actually doing to
implement the concept. Finally, we'll show their pluses and minuses, and
highlight some features of packages that use them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define what a coroutine is&lt;ul&gt;
&lt;li&gt;Coroutine state not known to operating system&lt;/li&gt;
&lt;li&gt;Difference between a thread or process&lt;/li&gt;
&lt;li&gt;What state is required for tracking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show how coroutines are used&lt;ul&gt;
&lt;li&gt;gevent example&lt;/li&gt;
&lt;li&gt;concurrence example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review two implementations&lt;ul&gt;
&lt;li&gt;Greenlets&lt;/li&gt;
&lt;li&gt;Python based co-routines using generators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantages/Disadvantages&lt;/li&gt;
&lt;li&gt;Differentiating features of packages that use them&lt;ul&gt;
&lt;li&gt;Concurrence&lt;/li&gt;
&lt;li&gt;Gevent&lt;/li&gt;
&lt;li&gt;Eventlets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="concurrence"></category><category term="coroutines"></category><category term="gevent"></category><category term="greenlets"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Using Coroutines to Create Efficient, High-Concurrency Web Applications</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Matt Spitz</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Coroutines to Create Efficient, High-Concurrency Web Applications&lt;/p&gt;
&lt;p&gt;Presented by Matt Spitz&lt;/p&gt;
&lt;p&gt;Creating high-concurrency python web applications is inherently
difficult for a variety of reasons. In this talk, I'll discuss the
various iterations of application server paradigms we've used at meebo,
the advantages/disadvantages of each approach, and why we've settled on
a coroutine-based WSGI setup to handle our high-concurrency web
applications going forward.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a number of ways in which to create a web application in
python. Some examples include a straight-up CGI scripts that run anew
with each request, preforked Apache workers that each handle multiple
requests, and using an asynchronous web framework like Twisted.&lt;/p&gt;
&lt;p&gt;At meebo, we've settled on using gunicorn, a lightweight WSGI server,
which supports gevent, a coroutine-based network library for python.
Gevent monkeypatches python's system modules to make network requests
asynchronous using an event loop based on libevent. This trick allows
the developer to use a simple blocking CGI as a non-blocking web
application that can handle many concurrent requests.&lt;/p&gt;
&lt;p&gt;I'll discuss our iteration process through these approaches to building
web applications, why we ended up choosing gunicorn+gevent, the
challenges this new framework presents, and how we've dealt with them.&lt;/p&gt;
</summary><category term="coroutines"></category><category term="gevent"></category><category term="gunicorn"></category><category term="highconcurrency"></category><category term="libevent"></category><category term="pycon"></category><category term="pycon2011"></category><category term="wsgi"></category></entry></feed>