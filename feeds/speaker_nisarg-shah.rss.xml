<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Nisarg Shah</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 24 Mar 2022 00:00:00 +0000</lastBuildDate><item><title>Developing GraphQL API in Django using Graphene</title><link>https://pyvideo.org/europython-2020/developing-graphql-api-in-django-using-graphene.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build GraphQL schema, queries, and mutations in Django using graphene library&lt;/p&gt;
&lt;p&gt;GraphQL technology has become popular nowadays. While developing REST APIs, there are many things that developers need to take into consideration. There are multiple endpoints and over-fetching is the main problem of REST. GraphQL offers a unique approach and architecture for developing APIs. How is that efficient?&lt;/p&gt;
&lt;p&gt;While using GraphQL, a client can request the data which is needed. It is an alternative for building APIs in place of REST. It’s a query language that can work as a medium between the frontend and backend.&lt;/p&gt;
&lt;p&gt;The journey to develop GraphQL APIs in python needs some requirements and knowledge. We will be building APIs in the Django framework using a graphene library which includes many features of GraphQL such as ObjectTypes, Queries, Mutations, etc. We will start by understanding these concepts followed by some code. This includes detailed information about the Query class, what are resolvers, and where to write business logic, how pagination can be incorporated with queries would be included. Also, it will include the information about the Mutation class, arguments needed for mutation, and what type of response can be returned on successful operations.&lt;/p&gt;
&lt;p&gt;Learning outcomes would be the understanding of code and building GraphQL APIs using graphene in a proper and structured way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nisarg Shah</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/developing-graphql-api-in-django-using-graphene.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Databases</category><category>Django</category><category>PostgreSQL</category><category>Python 3</category></item><item><title>Let REST Do Rest: Deep Dive In GraphQL With Django</title><link>https://pyvideo.org/python-web-conf-2021/let-rest-do-rest-deep-dive-in-graphql-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Let REST Do Rest: Deep Dive In GraphQL With Django&amp;quot; by: Nisarg Shah&lt;/p&gt;
&lt;p&gt;GraphQL is a query language and uses a schema based approach. It has only one endpoint and client can request the needed data. While building APIs, schema can be fixed and teams can work independently as the structure is fixed.&lt;/p&gt;
&lt;p&gt;I will initiate my talk with some overview on GraphQL APIs and concepts of GraphQL. Following that, I will cover some core concepts which are required for developing some basic queries and mutations. Those concepts will include fields, object types, schema, resolvers, etc. Along with this, I will cover the N+1 problem of GraphQL queries and will look into a way to optimize the GraphQL queries for solving this problem.&lt;/p&gt;
&lt;p&gt;Also versioning of GraphQL APIs is not similar to versioning of REST APIs, it’s quite different and interesting. Only updates of schema fields are needed. Many times GraphQL is used, but in some cases REST is preferred over GraphQL.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nisarg Shah</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-22:/python-web-conf-2021/let-rest-do-rest-deep-dive-in-graphql-with-django.html</guid><category>Python Web Conf 2021</category><category>PythonWebConf</category><category>PythonWebConf2021</category></item><item><title>Getting Started with Airflow for Your Data Workflows</title><link>https://pyvideo.org/python-web-conf-2022/getting-started-with-airflow-for-your-data-workflows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While working with data products, a developer might have encountered some data tasks which require some scripts or cron jobs. A script might include a series of tasks which needs to be performed on that data. Also, the tasks might be dependent on each other’s execution status and results. In these scenarios, how do you build flows in a structured way? How do you define the dependency of a task and check errors from logs? Using Airflow, you can do everything mentioned above with more flexibility and ease. The pipelines can be triggered daily, developers can get email on failures of specific tasks in the pipeline, and much more.&lt;/p&gt;
&lt;p&gt;In this talk, initially I will go through some main benefits of using the Airflow orchestration tool. After that, I will show the comparison of python script and DAG defined in airflow. I will start from the basic installation, understanding DAG and tasks, exploring various operators (PythonOperator and BashOperator), and defining the structure. After this talk, anyone would be able to develop the pipelines in airflow which has the python/bash implementation in every task.&lt;/p&gt;
&lt;p&gt;At the end, I would also touch upon some issues regarding fetching logs which a developer can face while using docker-swarm in the pipelines. The workaround is to use multithreading, one thread to read and print logs and the other to check the status of the service.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nisarg Shah</dc:creator><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-03-24:/python-web-conf-2022/getting-started-with-airflow-for-your-data-workflows.html</guid><category>Python Web Conf 2022</category><category>PythonWebConf</category><category>PythonWebConf2022</category></item></channel></rss>