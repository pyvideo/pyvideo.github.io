<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_robert-kuska.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-03T00:00:00+00:00</updated><entry><title>Bits and bytes of python memory management</title><link href="https://pyvideo.org/pycon-colombia-2018/bits-and-bytes-of-python-memory-management.html" rel="alternate"></link><published>2018-02-09T00:00:00+00:00</published><updated>2018-02-09T00:00:00+00:00</updated><author><name>Robert Kuska</name></author><id>tag:pyvideo.org,2018-02-09:pycon-colombia-2018/bits-and-bytes-of-python-memory-management.html</id><summary type="html"></summary></entry><entry><title>Feed your code to coala</title><link href="https://pyvideo.org/pycon-cz-2016/feed-your-code-to-coala.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Robert Kuska</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/feed-your-code-to-coala.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you already use linters for your codebase but it still feels like
it's not enough. You want to check for more things, and better, use
your own checkers but you want it to be as easy as possible! Meet
coala.io, it feeds on your code and makes it better at the same time.
With (almost[*]_) no cost.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[*]&lt;/td&gt;&lt;td&gt;CPU consumption not included&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary></entry><entry><title>Bits and bytes of Python memory management</title><link href="https://pyvideo.org/pycon-cz-2018/bits-and-bytes-of-python-memory-management.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>Robert Kuska</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/bits-and-bytes-of-python-memory-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is it true that Python is not returning memory back to OS? What happens with variables which are no longer needed? How important is a garbage collector? How to trace and profile memory usage?&lt;/p&gt;
&lt;p&gt;Let's find out answers to these and maybe some more questions.&lt;/p&gt;
&lt;p&gt;Talk overview:&lt;/p&gt;
&lt;p&gt;Introduction: Why do I need to care about memory management in Python? Objects in Python – what are they?
Memory management: How memory is being allocated at start/while running – blocks/pools/arenas? How is memory being freed – reference counting/garbage collector? Extras - small integer’s identity, sys.intern, sys.getsizeof, lists/dicts dynamic allocations. How to find cycles in variables referencing?
Tools for memory management: Overview of available tools for managing memory. How and why Instagram disabled/re-enabled garbage collector?&lt;/p&gt;
</summary></entry></feed>