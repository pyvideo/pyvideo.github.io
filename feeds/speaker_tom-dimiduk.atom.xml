<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tom-dimiduk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-14T00:00:00+00:00</updated><entry><title>HoloPy: Holograpy and Light Scattering in Python</title><link href="https://pyvideo.org/scipy-2014/holopy-holograpy-and-light-scattering-in-python.html" rel="alternate"></link><published>2014-07-14T00:00:00+00:00</published><updated>2014-07-14T00:00:00+00:00</updated><author><name>Tom Dimiduk</name></author><id>tag:pyvideo.org,2014-07-14:scipy-2014/holopy-holograpy-and-light-scattering-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Digital holography microscopy is a powerful tool for fast 3D imaging of
soft matter systems. However, making measurements from holograms
requires special computation. HoloPy is a set of tools for
reconstructing and fitting to holograms. It also includes tools for
computing light scattering, setting up inverse problems, and working
with images and metadata.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Digital holographic microscopy is fast and powerful tool for 3D imaging.
Holography captures information about a 3D scene onto a 2D camera using
interference. This means that the speed of holographic imaging is
limited only by camera speed, making holography an ideal tool for
studying fast processes in soft matter systems. However, making use of
this encoded information requires significant computational post
processing. We have developed and released
&lt;a class="reference external" href="http://manoharan.seas.harvard.edu/holopy/"&gt;HoloPy&lt;/a&gt;, a python based
tool for doing these calculations.&lt;/p&gt;
&lt;p&gt;The traditional method for extracting information from holograms is to
optically reconstruct by shining light through a hologram to obtain an
image of the recorded scene. HoloPy implements the digital equivalent of
this, numerical reconstruction, in the form of light propagation by
convolution. This is a fast technique based on fast Fourier transforms,
which effectively allows refocusing a holographic image after it is
taken.&lt;/p&gt;
&lt;p&gt;For systems where a detailed scattering model is available, Lee and
coworkers showed that it is possible to make more precise measurements
by fitting a scattering model to a recorded hologram
[&lt;a class="reference external" href="http://physics.nyu.edu/grierlab/index12c/"&gt;1&lt;/a&gt;]. We have extended
this technique to clusters of spheres
[&lt;a class="reference external" href="http://arxiv.org/pdf/1202.1600"&gt;2&lt;/a&gt;][&lt;a class="reference external" href="http://people.seas.harvard.edu/~vnm/pdf/Perry-Faraday_Discussions-2012.pdf"&gt;3&lt;/a&gt;]
and to non-spherical particles
[&lt;a class="reference external" href="http://arxiv.org/pdf/1310.4517"&gt;4&lt;/a&gt;]. HoloPy implements all of
these fitting techniques such that they can be used with a few lines of
python code. HoloPy also exposes an interface to all of its scattering
models compute light scattering of microscopic particles or clusters of
particles for other purposes.&lt;/p&gt;
&lt;p&gt;HoloPy is open source (GPLv3) and is hosted on
&lt;a class="reference external" href="https://launchpad.net/holopy"&gt;launchpad&lt;/a&gt;. HoloPy uses Numpy for most
of its manipulations, though it calls out to Fortran and
&lt;a class="reference external" href="http://code.google.com/p/a-dda"&gt;C&lt;/a&gt; codes to compute light
scattering. HoloPy also includes matplotlib and mayavi based tools for
visualizing holograms and particles.&lt;/p&gt;
&lt;p&gt;[1] Lee et.al., Optics Express, Vol. 15, Issue 26, pp. 18275-18282
(2007)&lt;/p&gt;
&lt;p&gt;[2] Fung et. al., JQSRT, Vol 113, Issue 18, pp. 2482-2489 (2012)&lt;/p&gt;
&lt;p&gt;[3] Perry et. al., Faraday Discussions, Vol 159, pp. 211-234 (2012)&lt;/p&gt;
&lt;p&gt;[4] Wang et. al. JQSRT, (2014)&lt;/p&gt;
</summary><category term="holopy"></category></entry></feed>