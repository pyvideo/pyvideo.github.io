<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pyohio2010.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-07-31T00:00:00+00:00</updated><entry><title>PyOhio 2010: Building your own kind of dictionary</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>W. Matthew Wilson</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building your own kind of dictionary&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;My talk is based on a project that seemed very simple at first. I wanted
an object like the regular python dictionary, but with a few small
tweaks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;values for some keys should be restricted to elements of a set&lt;/li&gt;
&lt;li&gt;values for some keys should be restricted to instances of a type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, pretend I want a dictionary called favorites, and I want
the value for the &amp;quot;color&amp;quot; key to be any instance of my Color class.
Meanwhile, for the &amp;quot;movie&amp;quot; key, I want to make sure that the value
belongs to my set of movies.&lt;/p&gt;
&lt;p&gt;In the talk, I'll walk through how I used tests to validate my different
implementations until I came up with a winner.&lt;/p&gt;
&lt;p&gt;Unlike my talk last year on metaclass tomfoolery, and the year before
that on fun with decorators (and decorator factories) I'm hoping to make
this talk straightforward and friendly to beginning programmers.&lt;/p&gt;
&lt;p&gt;You'll see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how I use tests to solve a real-world problem&lt;/li&gt;
&lt;li&gt;a few little gotchas with the super keyword&lt;/li&gt;
&lt;li&gt;a little about how python works under the hood.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="dict"></category><category term="dictionaries"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Code With Style</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--code-with-style.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Clayton Parker</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--code-with-style.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code With Style&lt;/p&gt;
&lt;p&gt;Presented by Clayton Parker&lt;/p&gt;
&lt;p&gt;Six Feet Up's senior developer Clayton Parker will lead you on a journey
to become a Python Zen master. Your code should be as fashionable as it
is functional. To quote the Zen of Python, &amp;quot;Beautiful is better than
ugly&amp;quot;. This talk will teach you about the Python style guide and why it
is important. The talk will show you examples of well written Python and
how to analyze your current code to make Guido proud.&lt;/p&gt;
</summary><category term="code style"></category><category term="pep8"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="style"></category></entry><entry><title>PyOhio 2010: Controlling UNIX Processes using Supervisor</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Controlling UNIX Processes using Supervisor&lt;/p&gt;
&lt;p&gt;Presented by Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Supervisor is a Python daemon that can control arbitrary processes in a
UNIX- like environment. It features a client/server model of control
that can easily be extended. This talk will cover the configuration and
setup of Supervisor. It will also cover how to extend Supervisor and
take advantage of its XML-RPC interface and ability to react to events
that it generates.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2010"></category><category term="supervisor"></category></entry><entry><title>PyOhio 2010: Genetic Programming in Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--genetic-programming-in-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--genetic-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genetic Programming in Python&lt;/p&gt;
&lt;p&gt;Presented by Eric Floehr&lt;/p&gt;
&lt;p&gt;Did you know you can create and evolve programs that find solutions to
problems? This talk walks through how to use Genetic Programming (GP) as
a tool to discover solutions to hard problems, when to use GP, how best
to set up the GP environment, and how to interpret the results.&lt;/p&gt;
</summary><category term="geneticprogramming"></category><category term="gp"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Getting to know MongoDB using Python and IronPython</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sam Corder</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting to know MongoDB using Python and IronPython&lt;/p&gt;
&lt;p&gt;Presented by Sam Corder&lt;/p&gt;
&lt;p&gt;Is your RDBMS not coping with the load anymore and can't be scaled out
any further? Are you designing the next big thing and know your RDBMS
won't be able to handle it? Are you tired of shoe-horning a data model
into where it doesn't belong? Are you just curious what this thing
called MongoDB is? In this session you will explore a popular
alternative to the RDBMS called Mongo from one who has battled with BSON
to write the original .Net driver. You'll learn basics of schema design,
document manipulation, several ways to get at your data, something odd
called map/reduce and all from the comfort of Python and the slightly
uncomfortable IronPython.&lt;/p&gt;
</summary><category term="ironpython"></category><category term="mongodb"></category><category term="nosql"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: GUI Tools</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--gui-tools.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--gui-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GUI Tools&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;There are several Graphical User Interface frameworks available for
Python. In this talk, perpahs the two most popular, wxPython and PyQt,
are examined. The talk will focus on major differences, tools, and a
specific example done both in wxPython and PyQt, that is a non-trivial
production grade example.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: sound is inaudible for the first minute]&lt;/p&gt;
</summary><category term="gui"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pyqt"></category><category term="wxpython"></category></entry><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>PyOhio 2010: Lap Around IronPython</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lap-around-ironpython.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sarah Dutkiewicz</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lap-around-ironpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lap Around IronPython&lt;/p&gt;
&lt;p&gt;Presented by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;It's not just C# and VB.NET that can be used in WinForms, WPF,
Silverlight, and ASP.NET. You could also use IronPython! In this
session, you will get a quick overview of IronPython and a look into
using it with each of the following: WinForms, WPF, Silverlight, and
ASP.NET&lt;/p&gt;
</summary><category term="asp.net"></category><category term="ironpython"></category><category term=".net"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="silverlight"></category><category term="winforms"></category><category term="wpf"></category></entry><entry><title>PyOhio 2010: Lightning Talks</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lightning-talks.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="concurrency"></category><category term="gil"></category><category term="lxml"></category><category term="mercurial"></category><category term="plone"></category><category term="plone4"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="suds"></category></entry><entry><title>PyOhio 2010: Log Analysis with Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--log-analysis-with-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Scott McCarty</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--log-analysis-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Log Analysis with Python&lt;/p&gt;
&lt;p&gt;Presented by Scott McCarty&lt;/p&gt;
&lt;p&gt;Log analysis is something that every programmer and systems adminstrator
must do sometimes. This talk will be an introduction to the concepts of
pattern recognition, artificial ignorance, word counting, stopword
lists, and command line graphing. It is based on a pythonic
implementation of these techniques called petit and will delve into
several use cases and show how using these techniques can help you save
time when analyzing logs with python.&lt;/p&gt;
</summary><category term="artificialignorance"></category><category term="commandline"></category><category term="graphing"></category><category term="patternrecognition"></category><category term="petit"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="stopwordlists"></category><category term="wordcounting"></category></entry><entry><title>PyOhio 2010: Making it go faster</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--making-it-go-faster.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>W. Matthew Wilson</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--making-it-go-faster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making it go faster&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;An introduction to profiling python code.&lt;/p&gt;
&lt;p&gt;I'll use cProfile, pstats, and RunSnakeRun to find where code is getting
bogged down in a real-world example. I'll measure the run-time cost with
timeit, refactor, and measure it again.&lt;/p&gt;
&lt;p&gt;Finally, I'll talk about the limits of python optimization and show how
to replace python code with C.&lt;/p&gt;
</summary><category term="cprofile"></category><category term="optimizing"></category><category term="pstats"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="runsnakerun"></category><category term="timeit"></category></entry><entry><title>PyOhio 2010: Processing Large Datasets with Hadoop and Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--processing-large-datasets-with-hadoo.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>William McVey</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--processing-large-datasets-with-hadoo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Large Datasets with Hadoop and Python&lt;/p&gt;
&lt;p&gt;Presented by William McVey&lt;/p&gt;
&lt;p&gt;This talk will explore how Hadoop along with Python can be used to
process large datasets. An overview of the Apache Hadoop project will be
given. The map/reduce concept will be introduced and some methods of
coding the data processing routines in python will be explored. The talk
will use real world examples to illustrate how this approach can be used
to parallelize computationally expensive operations across multiple
cluster nodes effectively using python.&lt;/p&gt;
&lt;p&gt;The course will assume familiarity with the Python language during the
demos, but will not actually require a deep knowledge of python to
understand the concepts introduced.&lt;/p&gt;
</summary><category term="datasets"></category><category term="hadoop"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Project Management 101</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--project-management-101.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--project-management-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Project Management 101&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;Python is employed for a general purpose project management tool.
Contrasted to tools like Sphinx which focus on documenting a software
project, this framework is intended for general purpose project
management, with a specific application into engineering projects.
Intermediate uses of Python are employed, as well as the Web.py
framework, Sphinx documentation tool and the Mako template system. The
author has used this tool to create internal commercial applications of
the project management software.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Technical issues at beginning (first talk of
conference, gear wasn't quite setup); missing initial section of talk,
then missing 20 seconds about 3 minutes in.&lt;/p&gt;
</summary><category term="projectmanagement"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy and Unladen-Swallow: Making your Python Fast&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="optimizing"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>PyOhio 2010: Python 101 for the .NET Developer</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sarah Dutkiewicz</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101 for the .NET Developer&lt;/p&gt;
&lt;p&gt;Presented by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;The first part of the session will cover the basics of Python - its
history, how its data structures compare to those we're familiar with in
the primary .NET languages, its strong and weak points, who's using it,
and why you as a developer - both generally speaking and as a .NET
developer - should care about Python. The second part of the session
will get into the demos - starting with some basic Python scripts and
getting into IronPython scripts, if time allows. By the end of this
session, you'll have an idea of what Python is, why you should know it
as a developer and specifically as a .NET developer, and how to get
setup and write a basic app in both Python and IronPython.&lt;/p&gt;
</summary><category term="ironpython"></category><category term=".net"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Python and Entrepreneurship</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--python-and-entrepreneurship.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--python-and-entrepreneurship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Entrepeneurship&lt;/p&gt;
&lt;p&gt;Featuring Eric Floehr, Nick Albright, Matt Wilson, Austin Godber, James
Bonanno&lt;/p&gt;
&lt;p&gt;One of the strengths of dynamic languages is rapid development and quick
results. Python has been used by a number of Ohio small businesses, from
supporting back-office operations to being the language the company's
products are built on. This panel discussion will talk about the
opportunities and challenges in using Python to build a business on, as
well as a discussion on starting, running, and growing a
technology-based business.&lt;/p&gt;
</summary><category term="business"></category><category term="entrepeneur"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: So You Just Took "Python 101" -- What's Next?</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Greg Lindstrom</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So You Just Took &amp;quot;Python 101&amp;quot; -- What's Next?&lt;/p&gt;
&lt;p&gt;Presented by Greg Lindstrom&lt;/p&gt;
&lt;p&gt;In this class we will develop, step-by-step and as a class, two simple
games, Hi/Low and Hangman. We will start from scratch and walk through
each step of each game discussing decision making, loops (&amp;quot;for&amp;quot;, &amp;quot;while&amp;quot;
and &amp;quot;if&amp;quot;), data structures (tuple, list and dictionary) and looking at
different ways to &amp;quot;get-r-done&amp;quot;.&lt;/p&gt;
&lt;p&gt;You should know a little about Python but don't have to know anything
else about programming (you should know how to edit and run a Python
program on your Operating System). Bring a computer with Python
installed if you want to play along.&lt;/p&gt;
</summary><category term="datastructures"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Splunking With Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--splunking-with-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Benjamin W. Smith</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--splunking-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Splunking With Python&lt;/p&gt;
&lt;p&gt;Presented by Benjamin W. Smith&lt;/p&gt;
&lt;p&gt;Getting dirty with the Splunk API and various other sysadmin tasks with
Python.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2010"></category><category term="splunk"></category><category term="sysadmin"></category></entry><entry><title>PyOhio 2010: Teach Me Python Bugfixing</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teach Me Python Bugfixing&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;Python wants YOU to help maintain and extend the language we love so
much... but maybe you don't know how to go about making your
contribution. Catherine doesn't either. David Murray, an experienced
Python contributor, will guide her - and you - through the process, live
and unscripted. Come take part in learner-controlled instruction. No C
programming required!&lt;/p&gt;
</summary><category term="bugfixing"></category><category term="core"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Wrangling the bits, standardizing how apps get built</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Rick Harding</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wrangling the bits, standardizing how apps get built&lt;/p&gt;
&lt;p&gt;Presented by Rick Harding&lt;/p&gt;
&lt;p&gt;As we moved more work to Python we had to figure out how to start,
share, and deploy projects in a standard way. Virtualenv, pip, and Git
to the rescue.&lt;/p&gt;
&lt;p&gt;[Note: The talk starts at around 7:20 when the mic is working.]&lt;/p&gt;
</summary><category term="deploying"></category><category term="fabric"></category><category term="git"></category><category term="pip"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="virtualenv"></category></entry></feed>