<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_asynchronous.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-24T00:00:00+00:00</updated><entry><title>Keynote: The Natural State Of Computers</title><link href="https://pyvideo.org/kiwi-pycon-2019/keynote-the-natural-state-of-computers.html" rel="alternate"></link><published>2019-08-24T00:00:00+00:00</published><updated>2019-08-24T00:00:00+00:00</updated><author><name>Amber Brown</name></author><id>tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/keynote-the-natural-state-of-computers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The renaissance of asynchronous programming can leave you asking 'how does this actually solve the problem?'. By investigating the common tasks that we as Python developers implement, we can find which ones are made easier with asynchronous techniques, and which ones are made more difficult.&lt;/p&gt;
</summary><category term="keynote"></category><category term="asynchronous"></category></entry><entry><title>Asynchronous programming in Python</title><link href="https://pyvideo.org/pycon-ireland-2018/asynchronous-programming-in-python.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mikhail Medvedev</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/asynchronous-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming can have many advantages, but may be awfully complicated. It also requires a developer to think differently. In this talk I will go through what async programming is, when you should or should not use it, and what we can do to avoid getting lost. I will also explore various approaches and tools available in Python.&lt;/p&gt;
</summary><category term="async"></category><category term="asynchronous"></category></entry><entry><title>Asynchronous Programming with Tornado Web Server</title><link href="https://pyvideo.org/pytexas-2014/asynchronous-programming-with-tornado-web-server.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Kacie Houser</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/asynchronous-programming-with-tornado-web-server.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will define what asynchronous means and why it is useful for todays
web applications. I will also give and introduction to using Tornado web
server and go over syntax. Then I'll will do a code walk through of
small project I wrote using Tornado Web Server and virtualenv that
utilizes calls Google maps API and demonstrates asynchronous calls.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="tornado"></category></entry><entry><title>Asynchronous I/O in Python 3</title><link href="https://pyvideo.org/chipy/asynchronous-io-in-python-3.html" rel="alternate"></link><published>2013-07-11T00:00:00+00:00</published><updated>2013-07-11T00:00:00+00:00</updated><author><name>Feihong Hsu</name></author><id>tag:pyvideo.org,2013-07-11:chipy/asynchronous-io-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Feihong talks about PEP 3156 and the basic usage of Tulip, the reference
implementation.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="tulip"></category></entry><entry><title>Asynchronous vs. Threaded Python</title><link href="https://pyvideo.org/chipy/asynchronous-vs--threaded-python.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-06-11:chipy/asynchronous-vs--threaded-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous vs. Threaded Python&lt;/p&gt;
&lt;p&gt;Presented at ChiPy by David Beazley on June 12th, 2009&lt;/p&gt;
&lt;p&gt;This is the opening act to Mindblowing GIL. Covers threading vs.
asynchronous programming in Python.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="chipy"></category><category term="gil"></category><category term="threads"></category></entry><entry><title>Healthcare process management in Python: a use case</title><link href="https://pyvideo.org/europython-2011/healthcare-process-management-in-python-a-use-ca.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/healthcare-process-management-in-python-a-use-ca.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Federico Caboni - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'll describe our successful experience in introducing
Python into a system for blood collection tube labeling in laboratory
and hospital environments, based on IHE Technical Frameworks –the
industry standard for modeling and streamlining healthcare processes–
and designed to avoid human errors and ensure process traceability.&lt;/p&gt;
&lt;p&gt;During the talk I will explain why we chose Python in the first place,
how we've been able to leverage the language's features and
characteristics for our specific field and what problems and limitations
we faced.&lt;/p&gt;
&lt;p&gt;I will show specific instances of Python usage in different parts of the
project, including a low-level driver for laboratory automation
machinery, an asynchronous messaging module, the implementation of
IHE-compliant actors and the inevitable end-user web application,
implemented with Django.&lt;/p&gt;
&lt;p&gt;Using Python greatly helped us in building our system, allowing very
rapid prototyping cycles for both hardware and software, but during the
talk I'll also point out what we found was missing, and what would be
nice to have to ensure Python has its proper place as a viable platform
for designing streamlined healthcare workflows based on established
international standards.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="prototyping"></category><category term="web"></category></entry><entry><title>Getting ready for PostgreSQL 9.1</title><link href="https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Gabriele Bartolini</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="business"></category><category term="community"></category><category term="database"></category><category term="distributed"></category><category term="extensions"></category><category term="partitioning"></category><category term="postgresql"></category><category term="replication"></category></entry><entry><title>It's the message, stupid: python &amp; amqp</title><link href="https://pyvideo.org/europython-2011/its-the-message-stupid-python-amqp.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Muharem Hrnjadovic</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/its-the-message-stupid-python-amqp.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Muharem Hrnjadovic - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Messaging is a well established domain in information technology and can
greatly improve the scalability and throughput of a system when employed
appropriately. Message queues can be used to achieve&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;spatial decoupling i.e. the systems that produce and consume messages
may be deployed on different machines, networks, continents etc.&lt;/li&gt;
&lt;li&gt;temporal decoupling i.e. a system can enqueue a message and carry on
without waiting for the message consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use e.g. messaging in &lt;a class="reference external" href="http://openquake.org"&gt;OpenQuake&lt;/a&gt; to
distribute calculations of &lt;a class="reference external" href="http://openquake.org/about/gem/"&gt;seismic
hazard&lt;/a&gt; and the respective risk to
human lives and infrastructure.&lt;/p&gt;
&lt;p&gt;There is a huge number of messaging patterns identified in the
&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;industry&lt;/a&gt; and a small
selection of these will be presented to whet your appetite :-)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;AMQP&lt;/a&gt; is a fairly new and open messaging
standard with a number of freely available open source message brokers
(&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;,
&lt;a class="reference external" href="http://www.zeromq.org/"&gt;ZeroMQ&lt;/a&gt;, &lt;a class="reference external" href="http://qpid.apache.org/"&gt;qpid&lt;/a&gt;
etc.) with different features and performance trade-offs.&lt;/p&gt;
&lt;p&gt;In the course of the presentation you will be - introduced to AMQP
concepts and jargon - introduced to available Python AMQP bindings
(focussing on an asynchronous
(&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;txAMQP&lt;/a&gt;) and a synchronous variant
(most likely &lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;kombu&lt;/a&gt;) - shown code
examples demonstrating how to use these Python bindings&lt;/p&gt;
&lt;p&gt;The presentation (45 minutes in total) is structured as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;7.5 minutes for messaging concepts and patterns&lt;/li&gt;
&lt;li&gt;7.5 minutes for AMQP concepts&lt;/li&gt;
&lt;li&gt;5 minutes for an overview of the Python bindings for AMQP&lt;/li&gt;
&lt;li&gt;10 minutes for txAMQP examples (asynchronous bindings)&lt;/li&gt;
&lt;li&gt;10 minutes for kombu examples (synchronous bindings)&lt;/li&gt;
&lt;li&gt;5 minutes for questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;http://www.amqp.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;http://www.rabbitmq.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.zeromq.org/"&gt;http://www.zeromq.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qpid.apache.org/"&gt;http://qpid.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;https://launchpad.net/txamqp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;http://ask.github.com/kombu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;http://www.amazon.com/dp/0321200683/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="amqp"></category><category term="asynchronous"></category><category term="patterns"></category><category term="performance"></category><category term="queues"></category><category term="scalability"></category><category term="technology"></category></entry><entry><title>PyCon 2009: Using Twisted Deferreds (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-1-of-3.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-1-of-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="deferreds"></category><category term="pycon"></category><category term="pycon2009"></category><category term="tutorial"></category><category term="twisted"></category></entry><entry><title>PyCon 2009: Using Twisted Deferreds (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-2-of-3.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-2-of-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="http://blip.tv/file/1997952"&gt;http://blip.tv/file/1997952&lt;/a&gt;&amp;gt;`__&lt;/p&gt;
&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="deferreds"></category><category term="pycon"></category><category term="pycon2009"></category><category term="tutorial"></category><category term="twisted"></category></entry><entry><title>PyCon 2009: Using Twisted Deferreds (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-3-of-3.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-3-of-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="deferreds"></category><category term="pycon"></category><category term="pycon2009"></category><category term="tutorial"></category><category term="twisted"></category></entry><entry><title>Demystifying Non-Blocking and Asynchronous I/O (#164)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--demystifying-non-blocking-and-asynchr.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Peter A Portante</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--demystifying-non-blocking-and-asynchr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demystifying non-blocking and asynchronous I/O&lt;/p&gt;
&lt;p&gt;Presented by Peter A Portante&lt;/p&gt;
&lt;p&gt;We will first define what blocking, non-blocking, synchronous and
asynchronous I/O are under the POSIX interfaces. We'll cover how and
when these four types of I/O should be used, and their individual
effects on a Python based application. The notion of concurrency will be
discussed by comparing a simple threaded blocking I/O application to a
simple single threaded non-blocking I/O application by walking the
attendees through the python code for those applications.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Eventlet: Asynchronous I/O with a synchronous interface (#141)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--eventlet--asynchronous-i-o-with-a-syn.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Donovan Preston</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--eventlet--asynchronous-i-o-with-a-syn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eventlet: Asynchronous I/O with a synchronous interface&lt;/p&gt;
&lt;p&gt;Presented by Donovan Preston&lt;/p&gt;
&lt;p&gt;Network servers which scale to thousands of simultaneous connections
have always been possible in Python thanks to libraries such as asyncore
and twisted. More recently, FriendFeed's new open source project Tornado
has stirred debate in this area. These libraries allow a Python process
to scale to many simultaneous connections using non-blocking I/O (also
known as asynchronous I/O). However these projects require that the
programmer learn a custom API to abstract away the complexities of using
a callback-style API.&lt;/p&gt;
&lt;p&gt;Eventlet uses greenlet, which provides coroutines as described in &amp;quot;The
Art of Computer Programming&amp;quot;, to implement efficient cooperative
concurrency while retaining synchronous semantics. Eventlet also
provides an implementation of the standard library's socket module. Code
written to use Python's standard socket library can be transparently
converted to use nonblocking I/O and green threads with eventlet. This
leads to much greater code reuse and programmer efficiency.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.eventlet.net/"&gt;http://www.eventlet.net/&lt;/a&gt;&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="eventlet"></category><category term="greenlet"></category><category term="i/o"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>