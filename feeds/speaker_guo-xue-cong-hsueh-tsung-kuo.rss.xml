<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - 郭學聰 (Hsueh-Tsung Kuo)</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 02 Oct 2021 00:00:00 +0000</lastBuildDate><item><title>Celery meets Singleton – PyCon Taiwan 2020</title><link>https://pyvideo.org/pycon-taiwan-2020/celery-meets-singleton-pycon-taiwan-2020.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 2, 14:30–15:00&lt;/p&gt;
&lt;p&gt;Celery is a popular framework for deferred, offline, or scheduled processing. Celery itself is written in Python, and it can well fit into docker, stack, and cluster structure.
In real situation, we might have requirement or usage like this: to ensure only one instance of celery task running. Celery itself could not do this out of the box. So there are some patches implementations or usage strategies to support singleton task. However all of them have their pros and cons. Sadly these patches need more dependencies and not robust enough, thus they could not fit to our situations.
In this talk, I will share some implementation strategies, discuss characteristics, explain their weak points. After that, I will introduce a strategy which has different characteristics, pros, and cons from other strategies. And this strategy totally fit our requirement.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;fieliapm/B10XOgeXD#/"&gt;https://hackmd.io/&amp;#64;fieliapm/B10XOgeXD#/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: 郭學聰 (Hsueh-Tsung Kuo)&lt;/p&gt;
&lt;p&gt;台灣某game會社的小小RD
目前是CPPRG(C# Perl Python Ruby Golang)熟手
Smalltalk與Scheme基本教義派
不是太奇怪的程式語言都會一些&lt;/p&gt;
&lt;p&gt;請多多指教⎝（˶′◡‵˶）⎠&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">郭學聰 (Hsueh-Tsung Kuo)</dc:creator><pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-09-06:/pycon-taiwan-2020/celery-meets-singleton-pycon-taiwan-2020.html</guid><category>PyCon Taiwan 2020</category></item><item><title>The Pitfalls of Integrating Lua with Python – 郭學聰 (PyCon Taiwan 2021)</title><link>https://pyvideo.org/pycon-taiwan-2021/the-pitfalls-of-integrating-lua-with-python-guo-xue-cong-pycon-taiwan-2021.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 1, 11:35-12:05&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In some domain of computer &amp;amp; information industries, such as, gaming, Lua is an excellent embedded script language. It can be used to describe daily changed business logic and rule description, but keep consuming little resource including CPU and memory. If we need to offer programmable part in a Python based executable or system for non-programmer, such as game master and multimedia creator, Lua is a well choice. Integrating Lua with Python seems to be easy when using Lua modules from PyPI, but actually has some pitfalls inside, including isolation and complex data exchanging. So I will share some experiences and hope who want to integrate Lua with Python could avoid these traps.&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;This talk is related to:&lt;/p&gt;
&lt;p&gt;Some core parts of Python script language
Lua script language
Python module to interact with Lua
lupa
luadata&lt;/p&gt;
&lt;p&gt;Slides not uploaded by the speaker.
HackMD: &lt;a class="reference external" href="https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2FBJf1UgFGK"&gt;https://hackmd.io/&amp;#64;pycontw/2021/%2F%40pycontw%2FBJf1UgFGK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Speaker: 郭學聰 (Hsueh-Tsung Kuo)&lt;/p&gt;
&lt;p&gt;台灣某game會社的小小RD目前是CPPRG(C# Perl Python Ruby Golang)熟手Smalltalk與Scheme基本教義派不是太奇怪的程式語言都會一些請多多指教⎝（˶′◡‵˶）⎠&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">郭學聰 (Hsueh-Tsung Kuo)</dc:creator><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-02:/pycon-taiwan-2021/the-pitfalls-of-integrating-lua-with-python-guo-xue-cong-pycon-taiwan-2021.html</guid><category>PyCon Taiwan 2021</category></item></channel></rss>