<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_csv.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-04-07T00:00:00+00:00</updated><entry><title>How do I read a tabular data file into pandas?</title><link href="https://pyvideo.org/data-school/pandas-02-read-tabular-data-file.html" rel="alternate"></link><published>2016-04-07T00:00:00+00:00</published><updated>2016-04-07T00:00:00+00:00</updated><author><name>Kevin Markham</name></author><id>tag:pyvideo.org,2016-04-07:data-school/pandas-02-read-tabular-data-file.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Tabular data&amp;quot; is just data that has been formatted as a table, with rows and columns (like a spreadsheet). You can easily read a tabular data file into pandas, even directly from a URL! In this video, I'll walk you through how to do that, including how to modify some of the default arguments of the read_table function to solve common problems.&lt;/p&gt;
&lt;p&gt;This is video 2 of 30 in the series, &lt;a class="reference external" href="http://www.dataschool.io/easier-data-analysis-with-pandas/"&gt;Easier data analysis in Python with pandas&lt;/a&gt;. The notebook and datasets shown in the video are available on &lt;a class="reference external" href="https://github.com/justmarkham/pandas-videos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</summary><category term="data science"></category><category term="data analysis"></category><category term="data wrangling"></category><category term="data processing"></category><category term="pandas"></category><category term="tutorial"></category><category term="Data School"></category><category term="csv"></category></entry><entry><title>PyCon 2009: A Configuration Comparison in Python (#70)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-configuration-comparison-in-python-.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-configuration-comparison-in-python-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Configuration Comparison in Python&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by Terry Peppers&lt;/p&gt;
&lt;p&gt;When faced with the simple task of figuring out how to use configuration
to your advantage in Python there are a myriad of methods. The purpose
of this talk is to walk through the standard library modules and the
popular Python Package Index modules comparing and contrasting
configuration formats and the code that consumes them. Specifically, I
would like to walk through the use of the csv module, the ConfigParser
module, ConfigObj, lxml, PyYaml and SimpleJSON.&lt;/p&gt;
</summary><category term="configobj"></category><category term="configparser"></category><category term="csv"></category><category term="lxml"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pyyaml"></category><category term="simplejson"></category></entry><entry><title>Hidden Treasures in the Standard Library</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hidden Treasures in the Standard Library&lt;/p&gt;
&lt;p&gt;Presented by Doug Hellmann&lt;/p&gt;
&lt;p&gt;This presentation covers features of the standard library not widely
known or used. Each feature is presented with a short demonstration
program and explanation.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The standard library contains many hidden gems that are not widely used,
either because they are not publicized enough or because they are deep
in a module that programmers haven't had cause to study or use. This
presentation covers 8-10 selected topics of this nature in about 25
minutes (leaving time for a couple of questions). Demonstration code is
included for every item.&lt;/p&gt;
&lt;p&gt;Possible tips include, in no particular order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using hmac to verify pickled data before unpacking it.&lt;/li&gt;
&lt;li&gt;Using uuid4 to generate session tokens.&lt;/li&gt;
&lt;li&gt;Regular expression look-ahead/behind matches.&lt;/li&gt;
&lt;li&gt;pdb startup files&lt;/li&gt;
&lt;li&gt;Reading files with mmap&lt;/li&gt;
&lt;li&gt;Using csv dialects&lt;/li&gt;
&lt;li&gt;The robotparser module&lt;/li&gt;
&lt;li&gt;The rlcompleter module&lt;/li&gt;
&lt;li&gt;Using locale to format numbers and currency&lt;/li&gt;
&lt;li&gt;The cgitb module&lt;/li&gt;
&lt;li&gt;pkgutil.getdata&lt;/li&gt;
&lt;li&gt;contextlib.contextmanager&lt;/li&gt;
&lt;li&gt;The cmd module&lt;/li&gt;
&lt;li&gt;The fileinput module&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cgitb"></category><category term="cmd"></category><category term="contextlib.contextmanager"></category><category term="csv"></category><category term="fileinput"></category><category term="hmac"></category><category term="locale"></category><category term="pdb"></category><category term="pkgutil.getdata"></category><category term="pycon"></category><category term="pycon2011"></category><category term="rlcompleter"></category><category term="robotparser"></category><category term="uuid4"></category></entry></feed>