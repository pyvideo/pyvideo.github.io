<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_trent-mcconaghy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-30T00:00:00+00:00</updated><entry><title>Blockchains for Artificial Intelligence</title><link href="https://pyvideo.org/pydata-berlin-2017/blockchains-for-artificial-intelligence.html" rel="alternate"></link><published>2017-06-30T00:00:00+00:00</published><updated>2017-06-30T00:00:00+00:00</updated><author><name>Trent McConaghy</name></author><id>tag:pyvideo.org,2017-06-30:pydata-berlin-2017/blockchains-for-artificial-intelligence.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes the various ways in which emerging blockchain technologies can be helpful for machine learning / artificial intelligence work, from audit trails on data to decentralized model exchanges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In recent years, big data has transformed AI, to an almost unreasonable level. Now, blockchain technology could transform AI too, in its own particular ways. Some applications of blockchains to AI are mundane yet useful, like audit trails on AI models. Some appear almost unreasonable, like AI that can own itself — AI DAOs (decentralized autonomous organizations) leading to the first AI millionaires. All of them are opportunities. Blockchain technologies — especially planet-scale ones — can help realize some long-standing dreams of AI and data folks. This talk will explore these applications.&lt;/p&gt;
</summary></entry><entry><title>BigchainDB : a Scalable Blockchain Database, in Python</title><link href="https://pyvideo.org/pydata-berlin-2016/bigchaindb-a-scalable-blockchain-database-in-python.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Trent McConaghy</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/bigchaindb-a-scalable-blockchain-database-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;This talk describes BigchainDB. BigchainDB fills a gap in the decentralization ecosystem: a decentralized database, at scale. It has big-data performance levels, a querying system, and a permissioning system that supports public and private versions. It's complementary to decentralized processing platforms like Ethereum, and decentralized file systems like IPFS. BigchainDB is written in Python.&lt;/p&gt;
&lt;p&gt;This talk describes BigchainDB. BigchainDB fills a gap in the decentralization ecosystem: a decentralized database, at scale. It points to performance of 1 million writes per second throughput, storing petabytes of data, and sub-second latency.&lt;/p&gt;
&lt;p&gt;The BigchainDB design starts with a distributed database (DB), and through a set of innovations adds blockchain characteristics: decentralized control, immutability, and creation &amp;amp; movement of digital assets. BigchainDB inherits characteristics of modern distributed databases: linear scaling in throughput and capacity with the number of nodes, a full-featured NoSQL query language, efficient querying, and permissioning. Being built on an existing distributed DB, it also inherits enterprise-hardened code for most of its codebase.&lt;/p&gt;
&lt;p&gt;Scalable capacity means that legally binding con- tracts and certificates may be stored directly on the blockchain database. The permissioning system enables configurations ranging from private enterprise blockchain databases to open, public blockchain databases. BigchainDB is complementary to decentralized processing platforms like Ethereum, and decentralized file systems like InterPlanetary File System (IPFS).&lt;/p&gt;
&lt;p&gt;This talk describes technology perspectives that led to the BigchainDB design: traditional blockchains, distributed databases, and a case study of the domain name system (DNS). We introduce a concept called blockchain pipelining, which is key to scalability when adding blockchainlike characteristics to the distributed DB. We present a thorough description of BigchainDB, a detailed analysis of latency, and experimental results. The talk concludes with a description of use cases.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/bigchaindb/bigchaindb"&gt;https://github.com/bigchaindb/bigchaindb&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Driving Moore's Law with Python-Powered Machine Learning: An Insider's Perspective</title><link href="https://pyvideo.org/pydata-berlin-2014/driving-moores-law-with-python-powered-machine-l.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Trent McConaghy</name></author><id>tag:pyvideo.org,2014-07-26:pydata-berlin-2014/driving-moores-law-with-python-powered-machine-l.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;People talk about a Moore's Law for gene sequencing, a Moore's Law for
software, etc. This is talk is about &lt;em&gt;the&lt;/em&gt; Moore's Law, the bull that
the other &amp;quot;Laws&amp;quot; ride; and how Python-powered ML helps drive it. How do
we keep making ever-smaller devices? How do we harness atomic-scale
physics? Large-scale machine learning is key. The computation drives new
chip designs, and those new chip designs are used for new computations,
ad infinitum. High-dimensional regression, classification, active
learning, optimization, ranking, clustering, density estimation,
scientific visualization, massively parallel processing -- it all comes
into play, and Python is powering it all.&lt;/p&gt;
</summary></entry></feed>