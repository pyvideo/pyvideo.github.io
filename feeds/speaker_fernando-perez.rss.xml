<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 08 Aug 2014 00:00:00 +0000</lastBuildDate><item><title>IPython: tools for the entire lifecycle of research computing</title><link>https://pyvideo.org/scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython started as a better interactive Python interpreter in 2001, but
over the last decade it has grown into a rich and powerful set of
interlocking tools aimed at enabling an efficient, fluid and productive
workflow in the typical use cases encountered by scientists in everyday
research.&lt;/p&gt;
&lt;p&gt;Today, IPython consists of a kernel executing user code and capable of
communicating with a variety of clients, using ZeroMQ for networking via
a well-documented protocol. This enables IPython to support, from a
single codebase, a rich variety of usage scenarios through user-facing
applications and an API for embedding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An interactive, terminal-based shell with many capabilities far
beyond the default Python interactive interpreter (this is the
default application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that most users
are familiar with).&lt;/li&gt;
&lt;li&gt;A Qt console that provides the look and feel of a terminal, but adds
support for inline figures, graphical calltips, a persistent session
that can survive crashes of the kernel process, and more.&lt;/li&gt;
&lt;li&gt;A web-based notebook that can execute code and also contain rich text
and figures, mathematical equations and arbitrary HTML. This notebook
presents a document-like view with cells where code is executed but
that can be edited in-place, reordered, mixed with explanatory text
and figures, etc.&lt;/li&gt;
&lt;li&gt;A high-performance, low-latency system for parallel computing that
supports the control of a cluster of IPython engines communicating
over ZeroMQ, with optimizations that minimize unnecessary copying of
large objects (especially numpy arrays).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk we will show how IPython supports all stages in the
lifecycle of a scientific idea: individual exploration, collaborative
development, large- scale production using parallel resources,
publication and education. In particular, the IPython Notebook supports
multiuser collaboration and allows scientists to share their work in an
open document format that is a true &amp;quot;executable paper&amp;quot;: notebooks can be
version controlled, exported to HTML or PDF for publication, and used
for teaching. We will demonstrate the key features of the system,&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</guid><category>General</category></item><item><title>IPython in-depth: Interactive Tools for Scientific Computing</title><link>https://pyvideo.org/scipy-2012/ipython-in-depth-interactive-tools-for-scientifi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive and parallel computing that are
widely used in scientific computing. We will show some uses of IPython
for scientific applications, focusing on exciting recent developments,
such as the network- aware kernel, web-based notebook with code,
graphics, and rich HTML, and a high-level framework for interactive
parallel computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Tue, 17 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-17:scipy-2012/ipython-in-depth-interactive-tools-for-scientifi.html</guid></item><item><title>The Berkeley Institute for Data Science a place for people like us</title><link>https://pyvideo.org/scipy-2014/the-berkeley-institute-for-data-science-a-place-f.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I will describe the new Berkeley Institute for Data Science (BIDS), part
of a collaboration with UW and NYU funded by the Moore and Sloan
Foundations. It will be a space for the open and interdisciplinary work
that is typical of the SciPy community. In the creation of BIDS, the
role of open source scientific tools for Data Science, and specifically
the SciPy ecosystem, played an important role.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2013, the Gordon and Betty Moore and the Alfred P. Sloan foundations
&lt;a class="reference external" href="http://www.moore.org/programs/science/data-driven-discovery/data-science-environments"&gt;awarded&lt;/a&gt;
UC Berkeley, U. Washington and NYU for a collaborative, $38M in support
of a 5-year initiative to create novel environments for Data Science.
This project was driven by the recognition that computing and data
analysis have now become the backbone of all scientific research, and
yet the teams, collaborations and individuals that make this possible
typically encounter significant barriers in today's academic
environments.&lt;/p&gt;
&lt;p&gt;The SciPy community is one of the poster children of this issue: many of
our members live &amp;quot;officially&amp;quot; in traditional, discipline-oriented
scientific research, and yet we have committed time and effort to
creating an open ecosystem of tools for research. As we all know, this
is often done with little support from the standard incentive structures
of science, be it publication venues, funding agencies or hiring, tenure
and promotion committees.&lt;/p&gt;
&lt;p&gt;The launch of this initiative is an important moment, as it signals the
recognition of this problem by important and well-respected foundations
in science. At UC Berkeley, we took this opportunity to create the new
&lt;a class="reference external" href="http://vcresearch.berkeley.edu/datascience/bids-launch-dec-12"&gt;Berkeley Institute for Data
Science&lt;/a&gt;.
In this effort, the open source tools of the SciPy community will play a
central role.&lt;/p&gt;
&lt;p&gt;In this talk, I will describe the larger context in which this
initiative has been created, as well as the scientific scope of our
team, our goals, and the opportunities that we will try to provide with
this space. We expect that this new institute, together with our
partners at UW and NYU, will play an important role in support of the
great work of the SciPy ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-10:scipy-2014/the-berkeley-institute-for-data-science-a-place-f.html</guid></item><item><title>Interactive Parallel Computing with IPython Part 1</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part.html</guid><category>ipython</category></item><item><title>Interactive Parallel Computing with IPython Part 2</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part-0.html</guid><category>ipython</category></item><item><title>Interactive Parallel Computing with IPython Part 3</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part-1.html</guid><category>ipython</category></item><item><title>Open Source and Open Science: how Python and its community made me a better scientist</title><link>https://pyvideo.org/pycon-apac-2014/open-source-and-open-science-pycon-apac-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will discuss the intersection of Open Source and scientific research,
focusing on the positive impact that Open Source tools and ideas, and
the Python community in particular, have had on the world of science.
Scientific research is at a crossroads, under increasing pressure to
justify itself to society at large and with very real questions being
asked about the reproducibility of scientific results and access to the
products of science. The Open Source community have created both
technical and cultural solutions to similar problems that we as
scientists can learn from. The Python language has also made major
inroads into research and education, helping foster a culture of better
computational research and opening up a space for a lot of creativity at
the intersection of science and computing.&lt;/p&gt;
&lt;p&gt;About the speaker&lt;/p&gt;
&lt;p&gt;Fernando Pérez is a research scientist at UC Berkeley, working at the
intersection of high-level scientific computing with open tools and
brain imaging. He started the IPython project in 2001, while a graduate
student in Physics at CU Boulder. He continues to lead a talented team
(who do all the hard work) to develop IPython as the interface between
the humans at the keyboard and the bits in the machine.&lt;/p&gt;
&lt;p&gt;He is a founding member of NumFOCUS, a PSF member, and received the 2012
Award for the Advancement of Free Software for IPython and his
contributions to scientific Python. He is a founding investigator of the
Berkeley Institute for Data Science, created in 2013.&lt;/p&gt;
&lt;p&gt;When he can get away from a computer, Fernando tries to enjoy the
mountains and the outdoors hiking, backpacking and climbing. For more
information, see &lt;a class="reference external" href="http://fperez.org"&gt;http://fperez.org&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-08:pycon-apac-2014/open-source-and-open-science-pycon-apac-2014.html</guid></item><item><title>Science And Python: retrospective of a (mostly) successful decade</title><link>https://pyvideo.org/pycon-ca-2012/science-and-python-retrospective-of-a-mostly-s.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The relation between Python and scientific work is a long one, and in
the last 10+ years it has turned into a major success story. I will
review this process from the vantage point of IPython’s role, and will
look into the challenges ahead for Python to remain a leader in this
space.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-11:pycon-ca-2012/science-and-python-retrospective-of-a-mostly-s.html</guid></item><item><title>IPython: Python at your fingertips</title><link>https://pyvideo.org/pycon-us-2012/ipython-python-at-your-fingertips.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython is widely used in the scientific community, but its various
tools can be used in any context. IPython gets you as close as possible
to the Python language, with an array of tools for productive work: at
the terminal, in GUIs, through a web browser, and in high-level parallel
computing. This talk will explain the design of IPython and provide
short, hands-on demos of its main features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian E. Granger</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/ipython-python-at-your-fingertips.html</guid></item><item><title>IPython in-depth: high-productivity interactive and parallel python</title><link>https://pyvideo.org/pycon-us-2012/ipython-in-depth-high-productivity-interactive-a.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive and parallel computing that are
widely used in scientific computing, but can benefit any Python
developer. We will show how to use IPython in different ways, as: an
interactive shell, an embedded shell, a graphical console, a
network-aware VM in GUIs, a web-based notebook with code, graphics and
rich HTML, and a high-level framework for parallel computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian E. Granger</dc:creator><pubDate>Wed, 07 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-07:pycon-us-2012/ipython-in-depth-high-productivity-interactive-a.html</guid></item><item><title>IPython in-depth: high-productivity interactive and parallel python</title><link>https://pyvideo.org/pycon-us-2013/ipython-in-depth-high-productivity-interactive-a-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive and parallel computing that are
widely used in scientific computing, but can benefit any Python
developer.&lt;/p&gt;
&lt;p&gt;We will show how to use IPython in different ways, as: an interactive
shell, an embedded shell, a graphical console, a network-aware VM in
GUIs, a web-based notebook with code, graphics and rich HTML, and a
high-level framework for parallel computing.&lt;/p&gt;
&lt;p&gt;All materials for this tutorial can be found on our &lt;a class="reference external" href="https://github.com/ipython/ipython-in-depth"&gt;github
repository&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger</dc:creator><pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-13:pycon-us-2013/ipython-in-depth-high-productivity-interactive-a-0.html</guid><category>tutorial</category></item><item><title>Keynote - Fernando Pérez</title><link>https://pyvideo.org/pycon-us-2014/keynote-fernando-perez.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/keynote-fernando-perez.html</guid></item><item><title>IPython in depth: high productivity interactive and parallel python</title><link>https://pyvideo.org/pycon-us-2014/ipython-in-depth-high-productivity-interactive-a-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive and parallel computing that are
widely used in scientific computing, but can benefit any Python
developer.&lt;/p&gt;
&lt;p&gt;We will show how to use IPython in different ways, as: an interactive
shell, an embedded shell, a graphical console, a network-aware VM in
GUIs, a web-based notebook with code, graphics and rich HTML, and a
high-level framework for parallel computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/ipython-in-depth-high-productivity-interactive-a-1.html</guid></item></channel></rss>