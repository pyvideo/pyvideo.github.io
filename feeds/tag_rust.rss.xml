<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Delta Chat, CFFI, pytest and all the Rust</title><link>https://pyvideo.org/europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delta Chat, a new approach to decentralized messaging, uses Python in
several ways. Delta Chat is a Whatsapp/Telegram-style messenger app
which uses the existing e-mail server network instead of central
servers. There is no address book upload, and no necessity to tie
accounts to mobile numbers. We'll live- demo how &amp;quot;Chat over E-mail&amp;quot;
works, with random audience members, in real-time.&lt;/p&gt;
&lt;p&gt;We'll then look into how Python is used for automated testing (with
pytest) against the messenger core library which is exposed through
CFFI. However, the core library will soon be ported to full Rust. Are
there better ways to interface Rust with Python than going through
C-interfaces?&lt;/p&gt;
&lt;p&gt;In the third part we'll introduce first example Chat Bots, written in
Python. Do you want to send an machine-generated system allert to a
sysadmin group? Or safely archive all media that is posted to a family
group? Or have your IoT sensor react to commands or send info? Just do
it without registering a bot to some central cite, or by exposing all
content information to (e. g. Telegram) servers. A Chat Bot only needs
access to a standard IMAP/SMTP account. We'll look at the simple Python
API for writing and testing powerful and versatile Chat bots.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- Delta Chat: &lt;a class="reference external" href="https://delta.chat"&gt;https://delta.chat&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Core library and Py bindings:
&lt;a class="reference external" href="https://github.com/deltachat/deltachat-core"&gt;https://github.com/deltachat/deltachat-core&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Deltabot: &lt;a class="reference external" href="https://github.com/deltachat/deltabot/"&gt;https://github.com/deltachat/deltabot/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</guid><category>Development</category><category>Python general</category><category>Rust</category><category>Sensors</category><category>System Administration</category></item><item><title>Python vs Rust for Simulation</title><link>https://pyvideo.org/europython-2019/python-vs-rust-for-simulation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Both Python and Rust are getting more and more popularity. Although it
is unfair to compare them directly, this talk aims to provide a clear
comparison with a pre-defined criteria applied to a specific use-case.&lt;/div&gt;
&lt;div class="line"&gt;Writing a simulation engine is very similar to writing a game engine
and requires certain features from a language or framework.&lt;/div&gt;
&lt;div class="line"&gt;Possible comparison criteria:&lt;/div&gt;
&lt;div class="line"&gt;1. Performance&lt;/div&gt;
&lt;div class="line"&gt;2. Simplicity&lt;/div&gt;
&lt;div class="line"&gt;3. Amount of code necessary for a MVP&lt;/div&gt;
&lt;div class="line"&gt;4. Utilities: docs, tests, profile&lt;/div&gt;
&lt;div class="line"&gt;5. Compatibility&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Tl;dr&lt;/div&gt;
&lt;div class="line"&gt;Do I want to go back to Python after Rust? Maybe+)&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alisa Dammer</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/python-vs-rust-for-simulation.html</guid><category>Code Analysis</category><category>Development</category><category>Rust</category><category>python</category></item><item><title>Pumping up Python modules using Rust</title><link>https://pyvideo.org/pycon-us-2018/pumping-up-python-modules-using-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve spent much time writing (or debugging) Python performance problems, you’ve probably had a hard time managing memory with its limited language support.&lt;/p&gt;
&lt;p&gt;In this talk, we venture deep into the belly of the Rust Language to uncover the secret incantations for building high performance and memory safe Python extensions using Rust.&lt;/p&gt;
&lt;p&gt;Rust has a lot to offer in terms of safety and performance for high-level programming languages such Python, Ruby, Js and more with its easy Foreign Function Interface capabilities which enables developers to easily develop bindings for foreign code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">vigneshwer dhinakaran</dc:creator><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-13:pycon-us-2018/pumping-up-python-modules-using-rust.html</guid><category>rust</category></item><item><title>Interacting with C and Rust using CFFI</title><link>https://pyvideo.org/pycon-ireland-2017/interacting-with-c-and-rust-using-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of Python's main advantages has always been its ability to expose external libraries to Python code very easily, however, writing wrappers around these libraries has always been a pain point that CFFI aims to address. CFFI allows you to call code written in other programming languages without having to write anything other than Python code, it is famous for being able to call C code but is also able to call code written in other languages like Rust and Go. This talk will go over the advantages of using CFFI as opposed to the other ways of calling external libraries in Python (such as writing C extensions) and showcase more advanced ways of using CFFI to improve PyPy's compatibility with Python modules.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-21:pycon-ireland-2017/interacting-with-c-and-rust-using-cffi.html</guid><category>rust</category></item><item><title>Rusty Python</title><link>https://pyvideo.org/pycon-italia-2017/rusty-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio “colla”, esistono librerie per creare estensioni
nei linguaggi più vari, da C/C++ a Fortran con poche righe di codice
abbiamo il nostro wrapper bello funzionante.&lt;/p&gt;
&lt;p&gt;Da qualche tempo un nuovo linguaggio di aggiunge alla lista: Rust!&lt;/p&gt;
&lt;p&gt;Ci sono due strade, la prima è quella di fare in modo che la libreria
Rust esponga una API C, e per poi usarla con &lt;tt class="docutils literal"&gt;ctypes&lt;/tt&gt; o &lt;tt class="docutils literal"&gt;cffi&lt;/tt&gt;.
L’altra strada passa per &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rust-cpython&lt;/span&gt;&lt;/tt&gt;, un wrapper Rust per le API C
di Python, con cui è possibile sia chiamare Python da Rust che estendere
Python con moduli in puro Rust.&lt;/p&gt;
&lt;p&gt;In questo talk vedremo come è possibile esporre delle strutture Rust in
modo da offrire una interfaccia Pythonica senza venire a compromessi con
le prestazioni.&lt;/p&gt;
&lt;p&gt;Prerequisiti:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Python&lt;/li&gt;
&lt;li&gt;conoscenza minima di Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take away:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“Si può fare!!” un modulo Python in Rust, con setup e test su Travis.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Bertini</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/rusty-python.html</guid><category>Python</category><category>extensions</category><category>Rust</category></item></channel></rss>