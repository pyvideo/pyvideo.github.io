<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 22 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Getting started with Plone CMS development - Part 1</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-1.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Getting started with Plone CMS development - Part 2</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-2.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Python Packaging on the Enterprise</title><link>https://pyvideo.org/europython-2013/python-packaging-on-the-enterprise.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to discuss problems and solutions when implementing an
end-to- end Python environment for a big company.&lt;/p&gt;
&lt;p&gt;The term ‘Enterprise’ often has negative connotations in much of the
open- source world, usually along the lines of ‘expensive and bloated’.
In this case I’d like to use it for describing a systems environment
where the freedoms of a developer working at home with her laptop are
not always available or practical. For example, coding on the holodeck
of the Starship Enterprise.&lt;/p&gt;
&lt;p&gt;Big teams and codebases need tools that make it very easy for new
developers to get up and running writing code with the minimum of fuss.
Large software platforms needs tools to manage complex package
dependency graphs and release workflows. Also, production environments
don’t always have compilers or direct internet access so many of
Python’s standard packaging tools make it a bit tricky to get things
going in these regards.&lt;/p&gt;
&lt;p&gt;I’d like to present how we managed to solve a number of these problems
for a recent client, a task which happily culminated in much of the
software being open-sourced at &lt;a class="reference external" href="https://github.com/eeaston/pkglib"&gt;https://github.com/eeaston/pkglib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Edit: The software also has numerous testing tools included which I’ll
demonstrate, including py.test fixtures for mongo, redis, pyramid and
generic servers, selenium webdriver and C/C++ code coverage and
profiling.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Easton</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-packaging-on-the-enterprise.html</guid><category>packaging</category><category>jenkins</category><category>continuous-integration</category><category>systems-programming</category><category>sysadmin</category></item><item><title>The ‘Agile Movement’</title><link>https://pyvideo.org/europython-2013/the-agile-movement.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Sherwood</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/the-agile-movement.html</guid><category>bdd</category><category>continuous-integration</category><category>project-management</category><category>agile</category><category>testing</category><category>principles</category><category>tdd</category><category>pair-programming</category><category>XP</category></item><item><title>Dalla User Story al test automatico in Django: un percorso step by step per dormire sonni tranquilli</title><link>https://pyvideo.org/pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le specifiche poco chiare o approssimative sono una delle piaghe degli
sviluppatori, e portano all’odioso fenomeno dei task non accettati o
rimandati indietro etichettati come BUG.&lt;/p&gt;
&lt;p&gt;Spesso, tuttavia, non c’è proprio nulla di rotto ma solo una serie di
incomprensioni dovute alla scarsa qualità dell’analisi, che provocano,
generalmente, molta frustrazione in chi ha scritto il codice.&lt;/p&gt;
&lt;p&gt;Nel corso del talk vedremo come tutto questo sia evitabile grazie
all’approccio &lt;strong&gt;BDD&lt;/strong&gt; , all’utilizzo di &lt;strong&gt;User Stories&lt;/strong&gt; con
&lt;strong&gt;Acceptance Tests&lt;/strong&gt; scritti usando il linguaggio &lt;em&gt;Gherkin&lt;/em&gt; e
all’esecuzione di test automatici.&lt;/p&gt;
&lt;p&gt;In più, mostreremo una applicazione pratica su un progetto &lt;em&gt;Django&lt;/em&gt;
usando &lt;em&gt;Behave&lt;/em&gt; con &lt;em&gt;behave_django&lt;/em&gt; e &lt;em&gt;Selenium&lt;/em&gt; con &lt;em&gt;splinter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filippo Morelli</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html</guid><category>bdd</category><category>continuous-integration</category><category>agile</category><category>selenium</category><category>django</category><category>behave</category></item><item><title>Integration tests ready to use with pytest-play</title><link>https://pyvideo.org/pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I will introduce a new pytest plugin with which it is very
easy (even for non-technical) go to create and run new integration
testing at any level of IOT complex systems.&lt;/p&gt;
&lt;p&gt;pytest-play is a pytest plugin that allows you to play a JSON file that
describes some actions and assertions. We can use actions like: -
Selenium, driving the browser for the UI test - MQTT messages,
simulating a device - API calls - queries to Cassandra or PostgresSQL
(in the future) - custom commands, thanks to the pluggable architecture
Other advantages: - UI tests more reliable with implicit waits before
interacting with the elements - BDD support to make the scenario more
legible - reusability of steps&lt;/p&gt;
&lt;p&gt;I will show you how easy it is to create a json and execute it on the
fly on a Continuous Integration system. So let’s start having fun in
testing with pytest-play.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serena Martinetti</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</guid><category>continuous-integration</category><category>open source</category><category>Python</category><category>testing</category><category>selenium</category><category>integration</category><category>api</category><category>pytest</category><category>Functional Testing</category></item><item><title>Heroku: come deployare un'app Django in 10 minuti!</title><link>https://pyvideo.org/pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se sei stanco di occuparti di &lt;em&gt;load balancing&lt;/em&gt; , &lt;em&gt;routing&lt;/em&gt; e &lt;em&gt;cloud
monitoring&lt;/em&gt; e vorresti dedicarti solo a &lt;em&gt;lambda function&lt;/em&gt; , &lt;em&gt;list
comprehension&lt;/em&gt; o &lt;em&gt;class-based view&lt;/em&gt; allora questo è il talk che fa per
te.&lt;/p&gt;
&lt;p&gt;Heroku è la piattaforma PaaS ( &lt;em&gt;Platform as a Service&lt;/em&gt; ) che consente
agli sviluppatori di creare, eseguire e gestire applicazioni interamente
nel cloud. Ad essere fornito come servizio non c’è solo l’hardware, ma
anche la piattaforma che astrae l’hardware stesso e permette di
usufruire di funzionalità che consentono di ottenere bilanciamenti
automatici, gestione del deployment e altro ancora.&lt;/p&gt;
&lt;p&gt;Il vantaggio per l’utente è quello di concentrarsi solo ed
esclusivamente sullo sviluppo dell’applicazione senza perdersi
nell’analisi di problematiche legate all’ambiente in cui essa deve
essere distribuita ottenendo così la scalabilità e l’affidabilità
necessaria.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sabatino Severino</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</guid><category>paas</category><category>continuous-integration</category><category>github</category><category>continuous-delivery</category><category>Python</category><category>pipeline</category><category>django</category><category>heroku</category><category>git</category><category>deployment</category><category>web development</category></item><item><title>Lessons from a massive, openly-developed project</title><link>https://pyvideo.org/pycon-italia-2018/lessons-from-a-massive-openly-developed-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack is a massive open source project, formed of multiple
components written in Python. Created in 2010, it attracted thousands of
developers which produced hundreds of thousands of commits. It is
completely openly-developed: there is no single organization owning it,
and anyone can participate on a level playing ground.&lt;/p&gt;
&lt;p&gt;During this wild ride, we discovered new classes of issues, crafted
novel solutions, made mistakes and learned lessons, most of them
applicable to other open source projects. Come learn about software
engineering best practices, open collaboration advice and other fun tips
and tricks based on our experience ! No prior experience with OpenStack
is needed to attend this talk.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Carrez</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/lessons-from-a-massive-openly-developed-project.html</guid><category>quality-assurance</category><category>project-management</category><category>continuous-integration</category><category>#lessonslearned</category><category>collaboration</category><category>principles</category><category>software-engineering</category><category>best-practices</category><category>OpenStack</category><category>release-engineering</category></item><item><title>DevOps di applicazioni Python (e non solo) su OpenShift</title><link>https://pyvideo.org/pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenShift Origin è la Platform-as-a-Service opensource di riferimento.
Basata su Kubernetes e Docker, contiene features aggiuntive e
integrazioni con altri componenti che semplificano le pratiche di
DevOps.&lt;/p&gt;
&lt;p&gt;Dopo una breve introduzione ad Openshift ed alla sua architettura,
vedremo come:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fare il setup di infrastrutture applicative microservice-based (es.
microservizi Python Flask/Django, single page application Angular,
ecc…)&lt;/li&gt;
&lt;li&gt;creare una piattaforma di Continuous Integration e Continuous
Delivery&lt;/li&gt;
&lt;li&gt;implementare e gestire la CI/CD di microservice-based application
sfruttando l’integrazione con Git e Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architettura di base di OpenShift&lt;/li&gt;
&lt;li&gt;come costruire un &lt;em&gt;project&lt;/em&gt; OpenShift: &lt;em&gt;builds&lt;/em&gt; e &lt;em&gt;deployments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;automatizzare il setup mediante &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;utilizzare Git, Jenkins e Openshift per creare una semplice pipeline
di CI/CD&lt;/li&gt;
&lt;li&gt;strategie di deployment avanzate: &lt;em&gt;blue-green deployment&lt;/em&gt; , &lt;em&gt;A/B
deployment&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisiti"&gt;
&lt;h4&gt;Prerequisiti&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Git e Jenkins&lt;/li&gt;
&lt;li&gt;conoscenza base dei concetti CI/CD e DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Fiore</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</guid><category>microservices</category><category>continuous-integration</category><category>git</category><category>continuous-delivery</category><category>kubernetes</category><category>devops</category><category>jenkins</category><category>docker</category><category>OpenShift</category></item><item><title>PaaS per tutti i gusti: CI/CD sotto controllo con Kubernetes e Dokku</title><link>https://pyvideo.org/pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk saranno illustrati processi e workflow tipici dei
paradigmi del DevOp e delle metodologie Agile. Vedremo quali
&lt;strong&gt;accorgimenti&lt;/strong&gt; devono essere presi con le applicazioni pacchettizzate
con &lt;strong&gt;Docker&lt;/strong&gt; , in particolare le applicazioni Django e come &lt;strong&gt;evitare
le problematiche principali che portano frustrazione e impediscono
un’adozione reale della CI/CD&lt;/strong&gt;. Saranno presentati degli esempi pratici
&lt;strong&gt;workflow&lt;/strong&gt; implementati con successo, in modo snello, versionato e
ripetibile, in ambienti che vanno dal test fino alla produzione. In
ultimo faremo una carrellata dei sistemi di &lt;strong&gt;PaaS&lt;/strong&gt; più in voga del
momento concentrandoci quindi su &lt;strong&gt;Dokku&lt;/strong&gt; e &lt;strong&gt;Kubernetes&lt;/strong&gt; , che
coprono tutto il ventaglio delle necessità di deploy, dal piccolo sito
fino al sistema ultra scalabile e ridondato.&lt;/p&gt;
&lt;p&gt;Prerequisito per il talk è conoscere i concetti base di Docker e
dell’uso di git. Durante il talk con 3 distinti esempi e demo di
complessità crescente esploreremo il mondo della CI/CD.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claudio Mignanti</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</guid><category>paas</category><category>continuous-integration</category><category>gitlab</category><category>kubernetes</category><category>testing</category><category>git</category><category>docker</category></item><item><title>Trying Continuous Delivery</title><link>https://pyvideo.org/pycon-japan-2012/trying-continuous-delivery.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will share why we tried continuous development and delivery process, what have been done, what succeeded and – probably more importantly – what failed through location-based social networking service development using Python on Google App Engine.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">古川 亨</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-16:pycon-japan-2012/trying-continuous-delivery.html</guid><category>continuous delivery</category><category>continuous integration</category><category>googleappengine</category></item><item><title>unittest嫌いがunittestをtesting</title><link>https://pyvideo.org/pycon-japan-2012/unittestxian-igaunittestwotesting.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;unittestをまともに書いていないunittest弱者同士で来るべきテスト駆動開発/継続的インテグレーション時代に備えて共に傷を舐め合いましょう&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">会津 剛</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pycon-japan-2012/unittestxian-igaunittestwotesting.html</guid><category>unittest</category><category>continuous integration</category></item><item><title>Ansible roles, private git repos and the Ansible Galaxy tool</title><link>https://pyvideo.org/pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a python tool that automates the management of an IT
infrastructure. It is easy to learn but rushing to use it with a limited
knowledge of its best practices leads to not reusable code.&lt;/p&gt;
&lt;p&gt;Creating reusable Ansible roles is a strongly encouraged practice, in
fact there is a tool designed just for this purpose: Ansible Galaxy. It
comes bundled with Ansible and its purpose is to download roles from the
Galaxy hub and other sources.&lt;/p&gt;
&lt;p&gt;This talk wants to show how we manage our Ansible roles and their
dependencies in a consistent way by means of Ansible Galaxy. It will
also offer an overview of how Ansible roles can be tested.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">serena lorenzini</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</guid><category>config-ninja</category><category>continuous-integration</category><category>command-line</category><category>gitlab</category><category>ansible</category><category>best-practices</category></item><item><title>Desplegando Python continuamente sin esfuerzo</title><link>https://pyvideo.org/pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los términos &amp;quot;despliegue continuo&amp;quot; e &amp;quot;integración continua&amp;quot; están cada vez más presentes en el léxico del programador. Si bien Python es un lenguaje tremendamente apropiado para aplicar estas prácticas, la cantidad de herramientas, opciones o, simplemente, de conceptos hace que el recién llegado alcance un nivel de confusión tal que la tarea parezca imposible. Usando herramientas habituales en Python mostraremos que construir un sistema de despliegue continuo es cómodo y sencillo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ana López Pérez</dc:creator><pubDate>Sun, 24 Sep 2017 10:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/desplegando-python-continuamente-sin-esfuerzo.html</guid><category>continuous integration</category><category>continuous delivery</category></item><item><title>Vom Commit zum Deployment - Build pipelines in Jenkins</title><link>https://pyvideo.org/pycon-de-2013/vom-commit-zum-deployment-build-pipelines-in-je.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Wenn man Code in ein Repository eincheckt möchte man dazu schnelles und
aussagekräftiges Feedback.&lt;/p&gt;
&lt;p&gt;Natürlich sind lokal die Tests durchgelaufen (oder etwa nicht?), aber
wie kann man weitere Überprüfungen automatisieren? Dieser Vortrag zeigt,
wie man in Jenkins und Werkzeugen wie nose/pylint/coverage build
pipelines anlegt, die von Unittests und linting bis zum Deployment gehen
können.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Fenzl</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/vom-commit-zum-deployment-build-pipelines-in-je.html</guid><category>build pipeline</category><category>continuous integration</category></item></channel></rss>