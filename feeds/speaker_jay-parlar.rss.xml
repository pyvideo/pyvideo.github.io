<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 18 Nov 2017 00:00:00 +0000</lastBuildDate><item><title>Debugging software designs using testable pseudo-code</title><link>https://pyvideo.org/pycon-ca-2017/debugging-software-designs-using-testable-pseudo-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When an architect designs a building, or an engineer designs a bridge, they don’t scribble rough sketches on paper and declare “We’re agile, we’ll figure out the details later!”. They create precise designs, and are able to prove important safety properties about their work before a single shovel hits the dirt.&lt;/p&gt;
&lt;p&gt;But when designing highly complex, concurrent, fault-tolerant systems, developers often don’t create more than rough pseudo-code and a few Visio diagrams, before starting work and hoping that any design bugs will be discovered before going to production.&lt;/p&gt;
&lt;p&gt;PlusCal/TLA+ is a pseudo-code language that allows for precise descriptions of digital systems, and provides tooling to run automated and exhaustive tests on the pseudo-code itself. Developers can discover design bugs before a single line of “real” code has been written.&lt;/p&gt;
&lt;p&gt;Developers at AWS, Microsoft/Azure, etc. have used PlusCal to help design systems and find serious, highly-subtle bugs in products including S3, EC2, EBS, DynamoDB, the Xbox 360 memory system, and many others.&lt;/p&gt;
&lt;p&gt;Its use at Amazon has been so successful that management now explicitly allocates engineering time to TLA+. To quote Chris Newcombe, former AWS Principal Engineer:&lt;/p&gt;
&lt;p&gt;TLA+ is the most valuable thing that I’ve learned in my professional career. It has changed how I work by giving me an immensely powerful tool to find subtle flaws in system designs. It has changed how I think…&lt;/p&gt;
&lt;p&gt;This talk will provide a short introduction to specifying software designs and PlusCal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Parlar</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/debugging-software-designs-using-testable-pseudo-code.html</guid></item><item><title>GitHub’s Deployments API: let GitHub be your deployment glue</title><link>https://pyvideo.org/pycon-ca-2016/githubs-deployments-api-let-github-be-your-deployment-glue.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Github's Deployments API allows Github itself to sit in the middle of
your deployment pipeline, acting as the glue needed to pull together
loosely- coupled deployment tooling. This talk will discuss how the
author used Github's Deployments API to connect a chatbot to a custom CI
server, allowing for chat-based deploys to a custom Docker-based
infrastructure.&lt;/p&gt;
&lt;div class="section" id="jay-parlar-bio"&gt;
&lt;h4&gt;Jay Parlar Bio&lt;/h4&gt;
&lt;p&gt;Jay is a Hamilton-based software developer at Rackspace, working on
internal tools to improve the quality of life of his coworkers. He
spends his days writing JavaScript and Python, contributing both to
front-end and back-end systems.&lt;/p&gt;
&lt;p&gt;He earned his Ph.D. in Software Engineering from McMaster University,
where he focused on hard real-time embedded systems and vibration
analysis, topics that have little-to-nothing to do with his current job.&lt;/p&gt;
&lt;p&gt;Outside of work, Jay spends most of his time with his wife and three
kids.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Parlar</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-12:pycon-ca-2016/githubs-deployments-api-let-github-be-your-deployment-glue.html</guid></item></channel></rss>