<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Adam Hopkins</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 22 Mar 2021 00:00:00 +0000</lastBuildDate><item><title>Overcoming access control in web APIs</title><link>https://pyvideo.org/europython-2020/overcoming-access-control-in-web-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a modern single-page application. Not all APIs are the same, so we will explore different considerations to make when crafting a solution to handle token-based authentication, and scoping to define access levels.&lt;/p&gt;
&lt;p&gt;As one of the core developers of the async web framework Sanic, I will primarily focus on authentication and authorization tools inside Sanic to showcase how to address these issues. However, the concepts should be broadly applicable enough to take back and apply to any web API. The goal is to learn the hot spots, and identify strategies to overcome them.&lt;/p&gt;
&lt;p&gt;Core take aways will include:
- how to implement various JWT strategies;
- best practices for storing JWTs on a browser; and
- controlling access privileges using structured scopes.&lt;/p&gt;
&lt;p&gt;Time permitting, we will even discuss some tools to be used to help ease the anxiety and make security more approachable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hopkins</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/overcoming-access-control-in-web-apis.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Authentication</category><category>Best Practice</category><category>RESTful</category><category>Web</category></item><item><title>Making Sanic Even Faster</title><link>https://pyvideo.org/python-web-conf-2021/making-sanic-even-faster.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Making Sanic Even Faster&amp;quot; by: Adam Hopkins
Sanic is one of the fastest growing frameworks in the Python world. But it is also simply one of the fastest Python web servers. This year, we are making it even faster.&lt;/p&gt;
&lt;p&gt;There are a number of under the hood changes planned for 2021 as Sanic gears up for its first “stable” release at the end of the year. You can read about some of the changes here: &lt;a class="reference external" href="https://community.sanicframework.org/t/2021-development-plan/783"&gt;https://community.sanicframework.org/t/2021-development-plan/783&lt;/a&gt;
This talk will focus on &lt;em&gt;why&lt;/em&gt; these changes are being made, and &lt;em&gt;how&lt;/em&gt; we are achieving them.&lt;/p&gt;
&lt;p&gt;Time permitting, I will also do a little demonstration about deploying production ready, high performance applications in the new world and show the practical impact.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hopkins</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-22:/python-web-conf-2021/making-sanic-even-faster.html</guid><category>Python Web Conf 2021</category><category>PythonWebConf</category><category>PythonWebConf2021</category></item></channel></rss>