<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lisa-n-roach.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>Exploring Network Programmability with Python and YANG</title><link href="https://pyvideo.org/pycon-us-2017/exploring-network-programmability-with-python-and-yang.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Lisa N Roach</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/exploring-network-programmability-with-python-and-yang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently, networking vendors and Silicon Valley giants have been putting
forth a concerted effort to build standardized models for networking
devices. These models allow for building reusable and versatile scripts
with predictable, standardized data. Without such models, the wide
variety of inputs and outputs required by different devices and vendors
made scripting a tedious and challenging endeavor. The modeling language
in use is called YANG, and a variety of standards have emerged. A vendor
agnostic standard called OpenConfig has lately become stable enough to
begin programming devices with it. Using Python, YANG is surprisingly
easy to work with, and extremely powerful applications can be written
with basic knowledge of JSON or XML and RPCs.&lt;/p&gt;
&lt;p&gt;The talk will start with use-cases for programming networking devices,
and will detail a specific, trivial, use case that will be used in the
talk. Next, we will discuss the ‘legacy’ way of programming devices (SSH
and screenscraping), and highlight the challenges, such as complex
regular expressions, slow responses, and lack of reusability between
devices. From there we will dive into YANG, focusing on OpenConfig
models. A YANG model is essentially a template, and JSON or XML can be
mapped to the YANG template. This makes it perfect for Pythonic
manipulation. In the use case there will be a GET RPC returning a YANG
representation of the box’s state in JSON, which we will search for the
relevant health indicator by drilling down in the JSON dictionary. A
simple change to the dictionary will remediate the problem, and a PATCH
RPC merges the new configuration onto the box. Since open, standard
models are in use, this script could be run on many devices across a
network to achieve the same effect with no changes needed. We will
finish up with the pros and cons of YANG before opening the talk for
Q&amp;amp;A.&lt;/p&gt;
</summary></entry></feed>