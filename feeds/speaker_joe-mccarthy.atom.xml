<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joe-mccarthy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-06T00:00:00+00:00</updated><entry><title>D’oh! Unevenly spaced time series analysis of The Simpsons in Pandas</title><link href="https://pyvideo.org/pydata-seattle-2017/doh-unevenly-spaced-time-series-analysis-of-the-simpsons-in-pandas.html" rel="alternate"></link><published>2017-07-06T00:00:00+00:00</published><updated>2017-07-06T00:00:00+00:00</updated><author><name>Joe McCarthy</name></author><id>tag:pyvideo.org,2017-07-06:pydata-seattle-2017/doh-unevenly-spaced-time-series-analysis-of-the-simpsons-in-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will explore the use of tools in the Pandas data analysis library for analyzing unevenly spaced time series data. The tutorial will start off with a brief primer on Pandas and the data.world API, and demonstrate how to use Pandas tools for analyzing data from The Simpsons episodes from data.world.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Indeed data scientists occasionally analyze time series data in which the events of interest are unevenly spaced. For example, when we want to understand how a change to a user interface for Indeed Hire recruiters affects the time it takes them to review candidates, we might look at changes in time intervals between individual candidate dispositions in our logs. When we want to understand the ratio of new business to repeat business - or explore different definitions of repeat business - we analyze the intervals in the creation dates of new requisitions from the same client.&lt;/p&gt;
&lt;p&gt;The Pandas data analysis library offers powerful tools for conducting time series analysis. When working on unevenly spaced time series, we have found the shift() and transform() DataFrame methods particularly helpful. Many of the examples of using these methods that we found on the web were used only on small, artificial datasets. Determining how best to apply them to real datasets was not always as straightforward as we would have hoped.&lt;/p&gt;
&lt;p&gt;Rather than use internal proprietary data to illustrate examples of how these methods can be used effectively to analyze unevenly spaced time series data, we will instead use data from a publicly available dataset of episodes of The Simpsons at data.world (&lt;a class="reference external" href="https://data.world/data-society/the-simpsons-by-the-data"&gt;https://data.world/data-society/the-simpsons-by-the-data&lt;/a&gt;). In doing so, we will also provide an introduction on how to use the data.world API.&lt;/p&gt;
&lt;p&gt;The purpose of this tutorial is to&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Provide a brief, focused primer on some basic aspects of Pandas&lt;/li&gt;
&lt;li&gt;Provide an overview of data.world datasets and accessing them via the API&lt;/li&gt;
&lt;li&gt;Show how advanced Pandas tools can be used for analyzing unevenly spaced time series data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participants will be best prepared for this tutorial if they&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Understand Python basics&lt;/li&gt;
&lt;li&gt;Have Python 2 or Python 3 installed on their computers&lt;/li&gt;
&lt;li&gt;Install the latest versions of Pandas and Jupyter Notebook (recommended: use Anaconda)&lt;/li&gt;
&lt;li&gt;Install the data.world Python API (&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;git+git://github.com/datadotworld/data.world-py.git&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Create a data.world account and an API key via the data.world Advanced Settings page&lt;/li&gt;
&lt;li&gt;Update: jupyter notebooks associated with the tutorial have been uploaded to a GitHub repository (&lt;a class="reference external" href="https://github.com/gumption/pydata-simpsons"&gt;https://github.com/gumption/pydata-simpsons&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python for Data Science: A Rapid On ramp Primer</title><link href="https://pyvideo.org/pydata-seattle-2015/python-for-data-science-a-rapid-on-ramp-primer.html" rel="alternate"></link><published>2015-07-24T00:00:00+00:00</published><updated>2015-07-24T00:00:00+00:00</updated><author><name>Joe McCarthy</name></author><id>tag:pyvideo.org,2015-07-24:pydata-seattle-2015/python-for-data-science-a-rapid-on-ramp-primer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this tutorial is to provide efficient and sufficient scaffolding for people with no prior knowledge of Python – but with some knowledge of programming – to effectively utilize Python-based tools for data science research and development, such as the pandas and scikit-learn open source libraries, or the Atigeo xPatterns analytics framework.&lt;/p&gt;
&lt;p&gt;The first part of the tutorial will cover basic data science concepts and use code and data examples relevant to data science (drawn from the UCI mushroom dataset). Basic Python programming concepts will include data structures (strings, lists, tuples, dictionaries), control structures (conditionals &amp;amp; loops), file I/O, and defining and calling functions.&lt;/p&gt;
&lt;p&gt;The second part of the tutorial will focus on constructing a simple decision tree based on the ID3 algorithm and using it to classify instances from the UCI mushroom dataset. This portion will also include the use of recursion, Python classes (object-oriented programming) and the use of Python scripts with arguments from the command line.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://github.com/gumption/Python_for_Data_Science"&gt;https://github.com/gumption/Python_for_Data_Science&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>