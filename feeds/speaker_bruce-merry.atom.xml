<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bruce-merry.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-11T00:00:00+00:00</updated><entry><title>An introduction to concurrent programming with asyncio</title><link href="https://pyvideo.org/pycon-za-2018/an-introduction-to-concurrent-programming-with-asyncio.html" rel="alternate"></link><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2018-10-11:pycon-za-2018/an-introduction-to-concurrent-programming-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrent programming is useful any time one needs to deal with
multiple concurrent tasks: a server answering requests from multiple
clients, a client scraping data from multiple servers, a workflow
manager running external processes in a pipeline, and more.&lt;/p&gt;
&lt;p&gt;While there are many concurrent programming frameworks for Python, there
is one that is included out of the box: asyncio. I will introduce the
framework and explain the syntax and APIs. Perhaps more importantly, I
will offer practical tips on development with asyncio, such as exception
handling, testing, debugging, and integration with existing code.&lt;/p&gt;
&lt;p&gt;Attendees will come away with an understanding of why they will want to
use asyncio instead of multi-threading, an understanding of the basic
concepts, and knowledge of some additional libraries that will help them
be productive with asyncio.&lt;/p&gt;
</summary></entry><entry><title>How I learnt to stop worrying and love Boost.Python</title><link href="https://pyvideo.org/pycon-za-2015/how-i-learnt-to-stop-worrying-and-love-boostpyth.html" rel="alternate"></link><published>2015-10-02T00:00:00+00:00</published><updated>2015-10-02T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2015-10-02:pycon-za-2015/how-i-learnt-to-stop-worrying-and-love-boostpyth.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Zen of Python dictates that there should be one - and preferably
only one - obvious way to do something. However, when it comes to
interoperation with C and C++, there is a multitude of options: the
Python C API, Boost.Python, ctypes, cffi, Cython. I will describe my
quest to find the &lt;strong&gt;holy grail&lt;/strong&gt;&lt;sup&gt;W&lt;/sup&gt;W &lt;strong&gt;right interface&lt;/strong&gt; for a
high-performance networking library.&lt;/p&gt;
&lt;p&gt;The talk is largely a case study in applying Boost.Python, and will look
at some issues such as the Global Interpreter Lock, handling
KeyboardInterrupt cleanly, and managing object lifetime. I will briefly
mention some of the alternative tools to explain why I settled on
Boost.Python. It is not a complete Boost.Python tutorial, but rather
aims to give a sense of the flavour and show how it's used in a real
application.&lt;/p&gt;
&lt;p&gt;For obvious reasons, this talk will have a lot of C++ code in it, and
some familiarity with C++ will be useful.&lt;/p&gt;
</summary><category term="Room 215"></category></entry><entry><title>Thursday Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2015/thursday-lightning-talks.html" rel="alternate"></link><published>2015-10-01T00:00:00+00:00</published><updated>2015-10-01T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2015-10-01:pycon-za-2015/thursday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h0m0s"&gt;(0:00:00)&lt;/a&gt; &lt;strong&gt;Racy interrupt handling&lt;/strong&gt; by Bruce Merry&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h6m0s"&gt;(0:06:00)&lt;/a&gt; &lt;strong&gt;Vulture in Python&lt;/strong&gt; by Philip Sterne&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h11m9s"&gt;(0:11:09)&lt;/a&gt; &lt;strong&gt;Edx&lt;/strong&gt; by Carl Dawson&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h17m39s"&gt;(0:17:39)&lt;/a&gt; &lt;strong&gt;AST linting&lt;/strong&gt; by Bryn Divey&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h24m33s"&gt;(0:24:33)&lt;/a&gt; &lt;strong&gt;Numpy in Anger!&lt;/strong&gt; by Laura Richter&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h29m28s"&gt;(0:29:28)&lt;/a&gt; &lt;strong&gt;How to screw up loading CSVs in Python&lt;/strong&gt; by James Saunders&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h33m34s"&gt;(0:33:34)&lt;/a&gt; &lt;strong&gt;PyQuery&lt;/strong&gt; by Nicholas Spagnoletti&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/DiaE9GCJ0nM?t=0h37m27s"&gt;(0:37:27)&lt;/a&gt; &lt;strong&gt;Debian Python moves kicking and screaming to Git&lt;/strong&gt; by Stefano Rivera&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="Room 215"></category></entry><entry><title>Juggling GPU tasks with asyncio</title><link href="https://pyvideo.org/pycon-za-2016/juggling-gpu-tasks-with-asyncio.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Bruce Merry</name></author><id>tag:pyvideo.org,2016-10-07:pycon-za-2016/juggling-gpu-tasks-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting peak performance with a GPU requires juggling concurrent tasks:
copying data to the GPU, processing data, and copying results back off
can all happen in parallel. In a distributed system, data arrives from
the network and results are sent back over the network. Python's asyncio
module is a great way to manage all these concurrent tasks while
avoiding many of the hazards of multiple threads.&lt;/p&gt;
&lt;p&gt;This talk will describe how I've used asyncio (actually trollius, the
Python 2 backport) to make this all work for GPU-accelerated real-time
processing in the MeerKAT radio telescope. I'll cover some helper
classes I've written for ensuring that operations happen in the right
order, and talk about how changing from a threaded model to trollius has
simplified the code.&lt;/p&gt;
&lt;p&gt;No experience with GPU programming or asyncio/trollius is required or
expected. Some prior exposure to event-driven programming or coroutines
in Python would be useful.&lt;/p&gt;
</summary></entry><entry><title>Friday Lightning Talks</title><link href="https://pyvideo.org/pycon-za-2017/friday-lightning-talks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Pi Delport</name></author><id>tag:pyvideo.org,2017-10-06:pycon-za-2017/friday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Friday Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Bruce Merry: &amp;quot;asyncio: it's all about the cancellation&amp;quot;&lt;/li&gt;
&lt;li&gt;Simba Nyatsanga: &amp;quot;Keep you friends close and caches closer&amp;quot;&lt;/li&gt;
&lt;li&gt;Peter van Onselen: &amp;quot;And now for something completely different&amp;quot;&lt;/li&gt;
&lt;li&gt;Simon Cross: &amp;quot;Python Software Society of South Africa&amp;quot;&lt;/li&gt;
&lt;li&gt;Whitney Tennant: &amp;quot;Why I kept flying to Cape Town for sammiches&amp;quot;&lt;/li&gt;
&lt;li&gt;Matthew French: &amp;quot;Grid computing on a budget (Or: Reinventing celery)&amp;quot;&lt;/li&gt;
&lt;li&gt;Marlene Mhangami: &amp;quot;The PSF and Python in Africa&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry></feed>