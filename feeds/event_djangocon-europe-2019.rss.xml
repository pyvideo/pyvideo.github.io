<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 23 Apr 2019 00:00:00 +0000</lastBuildDate><item><title>Frontend Development for Backend Developers</title><link>https://pyvideo.org/djangocon-europe-2019/frontend-development-for-backend-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to the tools of modern frontend development for Django developers looking to incorporate UI libraries, CSS preprocessors, bundlers, and ES6 into their projects.
Until recently, I wrote frontend code like a backend developer. jQuery and Javascript were synonymous. CSS and JS dependencies were either linked from CDNs or downloaded and shoved into static file directories the ol’ fashioned way.
For those willing to take the plunge, the modern frontend ecosystem can offer better user experience design, more robust client-side code, greater test coverage, and powerful build tools that free up your time for the fun stuff.
Getting modern frontend tools to play nicely with your Django project can be challenging at first, so in this discussion, we’ll go over some steps that have helped me go from 'Frontend Dinosaur' to 'Frontend Neanderthal'.
This talk is intended for Django developers who are comfortable with Django, HTML, CSS, and JS but have little-to-no experience with frontend build tools (webpack, gulp, grunt) or frontend frameworks (react, angular, vue).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Townley</dc:creator><pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-23:djangocon-europe-2019/frontend-development-for-backend-developers.html</guid></item><item><title>DjangoCon 2019 - Day 3 Lightning Talks</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-day-3-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks Day 3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-22:djangocon-europe-2019/djangocon-2019-day-3-lightning-talks.html</guid></item><item><title>Advanced, free, open-source application performance monitoring for your Python apps</title><link>https://pyvideo.org/djangocon-europe-2019/advanced-free-open-source-application-performance-monitoring-for-your-python-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk and technical demo we’re going to walk through a minimal example Django web app, simulate traffic of varied intensity, and monitor the entire system as well as peek deeper in the app.
It is 3am. Your phone rings with a special tone - the systems propping up your employer’s or client’s website are down. You open your eyes and groan, fumbling for your laptop. You’re used to the system’s worst problems, you have an idea what it might be. It’s slow going while you manually check if every component is working. You go back to bed in an hour, having written up a few of the most important details and brought the website back up. Hooray!
However, at 6am you get another call. You sigh and fix it. Then another at 7am, and at 11am. A few days later the outages repeat. What is going on?!
There are types of problems that can’t be solved purely through experience and knowledge of a system. You need deeper monitoring data than “% CPU” and “RAM free” to resolve them. Worse still, there are multiple components involved with failures in one masking a true underlying cause in another, like a slow loading page masking a slow database, which in turn makes you wonder what queries it’s really answering. In this talk we’re going to have a look at how you can monitor small to medium projects to really understand deeper problems at a glance.
The talk will pick specific solutions from various vendors as well as open source for different parts of the problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emanuil Tolev</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/advanced-free-open-source-application-performance-monitoring-for-your-python-apps.html</guid></item><item><title>Apathy and Arsenic: a Victorian Era lesson on fighting the surveillance state</title><link>https://pyvideo.org/djangocon-europe-2019/apathy-and-arsenic-a-victorian-era-lesson-on-fighting-the-surveillance-state.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What does expensive Victorian era wallpaper have in common with a Cambridge Analytica Facebook quiz?
Why is the GDPR like a trip to a seaside resort?
How could a cryptoparty have anything to do with a rare book in a library in Michigan?
Lilly Ryan - historian, privacy advocate, and penetration tester - walks you through a two hundred year old method for fighting the surveillance state, based on the advocacy led by 19th century scientists to abolish the domestic use of arsenic. You will learn about the tireless efforts used by anti-arsenic activists to change the public perception of arsenic, Cory Doctorow’s theory of Peak Indifference, the lives ruined by data breaches, and how to sustain the recent public shift from “I have nothing to hide” to “I value my privacy”.
This session will offer tips for developers, security professionals, and other interested folks on how to help everyday people have more power over their own information and how to sustain hope for the future when we’ve been aware of the solutions for years.
Come along and take in stories of murder, mismanagement, and mendacity, and learn how to keep up the fight against mass surveillance now that the tide is turning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lilly Ryan</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/apathy-and-arsenic-a-victorian-era-lesson-on-fighting-the-surveillance-state.html</guid></item><item><title>Building a custom model field from the ground up</title><link>https://pyvideo.org/djangocon-europe-2019/building-a-custom-model-field-from-the-ground-up.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A comprehensive guide on building custom models fields in Django. Including descriptors, lookups, expressions and many more.
Often you need to map domain entities onto your application and store them in a database. Django provides you with a very extensible API that allows you to integrate domain entities with ORM seamlessly. This talk will walk through all essential steps in building a Money instances support for Django from the ground, based on real-life examples taken from django-money library.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dmitry Dygalo</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/building-a-custom-model-field-from-the-ground-up.html</guid></item><item><title>Building a Django Community in Africa</title><link>https://pyvideo.org/djangocon-europe-2019/building-a-django-community-in-africa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The fast spread of Django in Africa through some initiatives such as Django Girls and Python Conferences has gained popularity especially in the West of Africa. Pushing the agenda of creating an active community will go a long way to promote the use of Django and strengthen the relationship between Django developers in Africa.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Abigail Mesrenyame Dogbe</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/building-a-django-community-in-africa.html</guid></item><item><title>Building plugin ecosystems with Django</title><link>https://pyvideo.org/djangocon-europe-2019/building-plugin-ecosystems-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Django applications including real-world examples.
It is probably common sense by now that modular architectures win over monolithic architectures in a number of ways. Django gives us reusable apps, but just because they are reusable doesn’t mean they automatically integrate nicely with each other and a Python programmer is still required to glue them together. In this talk I will show how to build a rich Django application that provides a well-defined plugin API. The API will allow plugins to seamlessly integrate with the main application. The talk will show various patterns around URL routing, Django‘s signal system and the use of setuptools to provide auto-detection of installed plugins. Installing a plugin should not be much more complicated than a simple pip install.
The explained architecture has been in use for some years in the pretix open source project and made it possible to us to grow a rich plugin ecosystem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Michel</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/building-plugin-ecosystems-with-django.html</guid></item><item><title>DjangoCon 2019 - Day 2 Lightning Talks</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-day-2-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightnings talks Day 2&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/djangocon-2019-day-2-lightning-talks.html</guid></item><item><title>djangocon.close()</title><link>https://pyvideo.org/djangocon-europe-2019/djangoconclose.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/djangoconclose.html</guid></item><item><title>Docs or it didn't happen! (with Q&amp;A)</title><link>https://pyvideo.org/djangocon-europe-2019/docs-or-it-didnt-happen-with-qa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever skimmed through a README, tried to follow a quickstart tutorial, attempted to decipher an error message, or typed ‘–help’ in your console? Congratulations – you have encountered documentation! Long gone are the days of massive books with never-ending stories about your software. Today’s users are smarter and less patient, which means that we no longer need to document all the things, as long as what we do document is clear, concise, helpful, and accessible. And that’s where the real work starts.
Documentation requires some attitude adjustment, since prose doesn’t neatly compile into binaries as code does. But Don’t Panic™! No matter what your role is in the community, you can apply a few key principles from the technical writing world to make your project more docs-friendly, and therefore more user- and contributor-friendly.
This talk covers strategies, best practices, and pro tips for rethinking how we create and curate documentation. This special edition will include Django-specific examples and use-cases as well as a special Q&amp;amp;A session, where we will try to address some of the community’s top concerns and ideas about the Django docs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mikey Ariel</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/docs-or-it-didnt-happen-with-qa.html</guid></item><item><title>Does this run in linear time? A case for algorithmics</title><link>https://pyvideo.org/djangocon-europe-2019/does-this-run-in-linear-time-a-case-for-algorithmics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Algorithms are fun to learn and their usefulness goes beyond getting that good grade or acing a coding interview. This talk aims to showcase some the hidden benefits of keeping your algorithmic skills sharp, as well as the speaker’s personal recommendations in keeping up the good work without feeling like studying for an exam.
How many sorting methods can you name out of your head? What is greedy? If these terms sound familiar, you’ve probably heard of algorithmics. For the everyday developer, algorithms are either the scare of all the technical interviews, or that one course you took in university which they vaguely remember. It seems that if you’re not working for one of the big companies, you will never use them. So you might ask yourself: Why do I need to know about linear time when the libraries I’m using already optimise for this?
While you might not implement binary search in that new feature you’re working on, or use dynamic programming, diving a bit deeper into this world could prove useful in training your mind to see patterns you might have a harder time seeing otherwise, or to write code that is better optimised and will give the end users a better experience. I am going to try to dispel some of the myths surrounding the study of algorithms and competitive programming, and argue that sharpening this skill is something that benefits us, as software developers, outside of passing technical tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iulia Avram</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/does-this-run-in-linear-time-a-case-for-algorithmics.html</guid></item><item><title>Fetching data from APIs (GitHub) using Django and GraphQl without hitting the rate limits</title><link>https://pyvideo.org/djangocon-europe-2019/fetching-data-from-apis-github-using-django-and-graphql-without-hitting-the-rate-limits.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will present how I fetched data from GitHub API without hitting rate limits along with a walkthrough of my project and the pros of using GraphQl over REST in my project. In addition to this, I’ll also highlight various tools I have used to accomplish this and why I chose to add this data source and the tools.
My project is important because fetching data is troublesome when it comes to rate limits and taking care of number of API calls, and will be helpful for both beginners and intermediate developers.
As far as GitHub API is concerned, the data which is to be pulled is already sorted and classified which makes it an excellent source for visualization. The data that is available includes meticulous information regarding pull requests, issues, activity feeds, repositories, organizations etc, which is why I thought GitHub will be a relevant data source to add to Open Humans.
I had developed this project as a part of my Outreachy internship with Open Humans Foundation. Open Humans Foundation provides a single platform to upload, connect and privately store data from a plethora of sources including 23andMe, AncestryDNA, Fitbit, Runkeeper and so on. My proposal included adding GitHub and Twitter data sources to this platform.
The workflow of this project can be described as follows: 1. User goes to the website provided by this repo 2. A user signs up/signs in with Open Humans and authorizes the Github integration on Open Humans 3. This redirects the user back to this Github-integration website 4. The user is redirected starts the authorization with Github. For this they are redirected to the Github page 5. After a user has authorized both Open Humans &amp;amp; Github their Github data will be requested and ultimately saved as a file in Open Humans. 6. Regular updates of the data should be automatically triggered to keep the data on Open Humans up to date.
The whole project uses Django to fetch data from the GitHub API. Now, fetching data has a couple of challenges: 1. The Github API uses rate limits, which need to be respected and going over the rate limit would not yield more data but just errors 2. Getting all the data from Github takes a while, not only because of the rate limits, but also because it can be a lot of data
For this reason this application makes good use of background tasks with Celery and the Python module requests_respectful, which keeps track of API limits by storing limits in a redis database. As redis is already used for Celery as well this does not increase the number of non-python dependencies. To exercise rate limiting, I came across requests_respectful, a wrapper that Open Humans is using in its API integrations. It is a rate-limiting wrapper built on top of Requests by SerpentAI. This enables users to work within rate limits(user rate limiting) of any amount of services simultaneously. Requests_respectful maximizes allowed requests without going over rate limits.
Going through the API documentation, I found the v4 of GitHub API, also known as GraphQL API. GraphQL is a query language for your API, for executing queries by using a type system you define for your data and gives the power to request exactly the data that they need. GraphQL provides a complete and understandable description of the data in your API and makes it easier to aggregate from multiple sources. GraphQL requests are POST requests to the GraphQL endpoint and the response is returned as JSON(link) matching the query. Using GraphQL in Github API v4 has enabled me to easily extract required data in a single API call.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manaswini Das</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/fetching-data-from-apis-github-using-django-and-graphql-without-hitting-the-rate-limits.html</guid></item><item><title>Here Come The Robots - Django and Machine Learning</title><link>https://pyvideo.org/djangocon-europe-2019/here-come-the-robots-django-and-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A practical, hands-on guide to using machine learning in your Django projects, including a live demo of four applications.
Machine Learning is probably the most important development in our industry (and possibly our civilisation!). Previously restricted to math geniuses with access to supercomputers and massive data centres, machine learning tools are increasingly available as web services which are easily consumed from more traditional web applications. Python has become the lingua franca of machine learning, so Django developers are well placed to take advantage of the next wave of application development.
In this talk I’ll outline the various machine learning platforms and provide a set of practical examples that demonstrate how Django developers can start taking advantage of artificial intelligence in their own applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Dyson</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/here-come-the-robots-django-and-machine-learning.html</guid></item><item><title>How (and why!) to build a Django based project with SQLAlchemy Core</title><link>https://pyvideo.org/djangocon-europe-2019/how-and-why-to-build-a-django-based-project-with-sqlalchemy-core.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I believe that Django ORM can fit almost 95% of the projects, however, it doesn’t perform well for some tasks. You can switch to raw SQL, but again: if you need an additional level of abstraction to build a flexible and better-maintained product, it won’t be enough. Here is when SQLAlchemy Core comes to fill the gap.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gleb Pushkov</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/how-and-why-to-build-a-django-based-project-with-sqlalchemy-core.html</guid></item><item><title>Jupyter, Django and Altair - Quick and dirty business analytics</title><link>https://pyvideo.org/djangocon-europe-2019/jupyter-django-and-altair-quick-and-dirty-business-analytics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django’s great for building web apps. Jupyter’s great for sharing reproducible analysis. Altair’s great for making analysis interactive, and easier to understand visually. Here’s how to use them all together.
For a large part of last year, I was working in a small, cross disciplinary team in a business information company, building data products to help make sense of public spending data.
Our shared language across the team was python, and over the year, we came up with a workflow that let our analysts and data science specialists work with Jupyter notebook to carry out analysis, and build interactive data viz using Altair to explore data, before taking the same code used to generate these charts, and incorporate them in the main django app as data products for our customers.
This talk outlines why these tools are useful together, explaining how Altair packages up some of the most recent advances in thinking about data vizualisation techniques, and makes them accessible to python developers for exploratory analysis of data using Jupyter and Django together.
We’ll finish by showing how, once you’re happy with them, you can then integrate these same interactive visualisations into an existing django application, and make them accessible to your users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Adams</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/jupyter-django-and-altair-quick-and-dirty-business-analytics.html</guid></item><item><title>Maintaning a Django codebase after 10k commits</title><link>https://pyvideo.org/djangocon-europe-2019/maintaning-a-django-codebase-after-10k-commits.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let’s dive into the challenges that arise when a Django project starts to become huge.
Django is extremely effective for creating a website quickly with top notch features out of the box. But in some codebases, after a while, new developments can become harder and harder.
In this talk, we’ll examine some design decisions that have, and haven’t, scaled successfully, in the hope that the next time you start your big scale Django project, you won’t end up cursing your past self after three years.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joachim Jablon</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/maintaning-a-django-codebase-after-10k-commits.html</guid></item><item><title>Maps with GeoDjango, PostGIS and Leaflet</title><link>https://pyvideo.org/djangocon-europe-2019/maps-with-geodjango-postgis-and-leaflet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will see how we have integrated a map into a web project already in production using GeoDjango, PostGIS and Leaflet and we will perform a demonstration of integration of a map from scratch into a Django project.
A map allows users to view and search for data in a spatial way and it is common to add one to their web project.
In this talk we will see how we have integrated a map into a web project already in production using GeoDjango, PostGIS and Leaflet and we will perform a demonstration of integration of a map from scratch into a Django project.
GeoDjango is a module included in Django that transforms it into a world-class geographic Web framework.
PostGIS is an extension of the PostgreSQL database that adds support for geographic objects allowing you to perform spatial queries.
Leaflet is the leading open source JavaScript library for interactive web maps optimized for mobile devices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paolo Melchiorre</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/maps-with-geodjango-postgis-and-leaflet.html</guid></item><item><title>Nothingness and identity in Python and Django</title><link>https://pyvideo.org/djangocon-europe-2019/nothingness-and-identity-in-python-and-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There’s something rich, beautiful and mysterious in the several kinds of nothingness and identity that we encounter as Python/Django programmers. Understanding the connections they make with ontology, epistemology and metaphysics adds another dimension to the joy of programming.
As Django programmers, we’re blessed - we have several kinds of nothingness and identity at our fingertips. There’s something rich, beautiful and mysterious in them, and in their variety and relation. For the programmer, the discovery of them is an opening into Python’s power and expressiveness.
It’s the same richness and mystery that logicians and philosophers have discovered in them: entire schools of thought are founded on various approaches to nothingness. Programmers are in fact working with key ideas that are also crucially important to ontology, epistemology and metaphysics.
From the pioneers of boolean electronics who adopted the NAND gate as the basic building block of logical circuits to thinkers like Sartre and Kant, nothing repeatedly turns out to be at the heart of everything. And the Python programmer who gets a surprise when checking for the identity of a variable is in fact running into the same problems that Heraclitus was aware of, 25 centuries before Guido van Rossum was even born. We’re in good company, in other words.
Nothingness and identity and the way we use them in Python and Django are related to phenomenology, utopia, politics, theories of agency and much, much more.
Knowing about these connections might not make anyone a better programmer, but it can add another dimension to their understanding of the discipline, and add to the richness and beauty of their world, making the joy of programming even deeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/nothingness-and-identity-in-python-and-django.html</guid></item><item><title>Pentesting your Django apps</title><link>https://pyvideo.org/djangocon-europe-2019/pentesting-your-django-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ll look at why Django developers should learn to pentest the apps they build, explain how we learnt to do it, and show how basic security tests fit into our development workflow.
Having your apps professionally pentested is a great way to find and fix security problems. For many projects though, resource constraints mean that pentesting either never happens, or it happens infrequently.
Our solution to this problem was to learn to do basic pentesting of our own applications. With this talk we aim to encourage other developers to do the same.
We’ll show the benefits to a project of even simple security testing, and show people how to get started with pentesting as developers.
We’re also running a workshop/sprint in which you can learn to pentest a vulnerable Django app.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keira and Sky</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/pentesting-your-django-apps.html</guid></item><item><title>Reduce, Reuse, Recycle - Persisting WebSocket connections with SharedWorkers</title><link>https://pyvideo.org/djangocon-europe-2019/reduce-reuse-recycle-persisting-websocket-connections-with-sharedworkers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When using WebSockets to communicate between your server and the client every new browser context–tab, window, iframe, and so on–is likely to create another WebSocket connection. All these open connections can quickly take a toll on your server resources, or if you’re using a PaaS which charges for each connection, it could quickly add up to a big bill.
In this talk, we’ll look at how you can use SharedWorkers to create a single persistent WebSocket which can be used by every browser context to communicate with your Django Channels WebSocket server&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Basset</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/reduce-reuse-recycle-persisting-websocket-connections-with-sharedworkers.html</guid></item><item><title>Serverless Django with Zappa</title><link>https://pyvideo.org/djangocon-europe-2019/serverless-django-with-zappa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An exploration of how Serverless can be used to run your Django applications with the pros and cons of doing so. The focus is on AWS Lambda using Zappa for deployment.
Over the last couple of years, Serverless has become an increasingly popular option for serving applications, going beyond even containerisation in its promise of minimal DevOps overheads and reduced operational costs - unburdening developers to focus on the applications themselves.
Often serverless is used in conjunction with microservices as part of a larger application stack. But how effective is it for running your entire Django application as an alternative to the traditional ‘always-on’ model for a website? This talk explores the pros and cons of running your own personal/experimental Django projects and the challenges of using it in a full production environment.
We’ll be exploring this with a concrete example based on AWS Lambda and associated services, Zappa for deployment and Wagtail as the Django application to give a Serverless Content Mangement System.
The talk is accompanied by online documentation so that attendees can run their own Serverless CMS or their own application with little or no running costs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neal Todd</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/serverless-django-with-zappa.html</guid></item><item><title>Simple visual regression testing</title><link>https://pyvideo.org/djangocon-europe-2019/simple-visual-regression-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Visual regression testing is an afterthought to many developers working on lean development teams. We will go over how to create automated visual tests that are both scalable and simple to implement.
Most of us will agree that testing CSS changes is important…in theory. But when you have limited development time and no QA resources, how do you ensure that pages look as expected after CSS changes? Instead of constantly having to click around we can programmatically detect UI changes
In this talk I will start with how to set up your existing test environment with automated visual tests using Python and Selenium. Then we will discuss a few pit falls that I ran into when implementing visual regression testing
The audience will be expected to have a general understanding about how test cases are set up in Django&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zelma Gist</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/simple-visual-regression-testing.html</guid></item><item><title>Sketching out a Django redesign</title><link>https://pyvideo.org/djangocon-europe-2019/sketching-out-a-django-redesign.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will take a look at how Django could look if it was designed from the ground up as an ASGI framework. We’ll examine how we could approach this design in a way that helps reduce tight coupling and framework complexity, and take a look at what new capabilities this would provide.
This talk sketches out how a redesign of Django might look, if it was reworked as an ASGI web framework. It draws on the design work behind the Starlette web framework and the Uvicorn web server.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Christie</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/sketching-out-a-django-redesign.html</guid></item><item><title>Django and Web Security Headers</title><link>https://pyvideo.org/djangocon-europe-2019/django-and-web-security-headers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web browsers support several HTTP headers to opt in to extra security features. I’ll explain then and show you how to get an A+ rating for these with the free checker SecurityHeaders.com, using built-in features and a few third-party packages.
The web browser is an evolving environment, but with massive backwards compatibility. Because of this, a lot of its security features are opt-in and incremental through headers such as Content-Security-Policy and Feature-Policy. I’ll walk through and explain the main headers recommended by Scott Helme’s SecurityHeaders.com , and how you can get your site to an A+ score, with a mix of built-in features and third party packages for the more cutting edge headers. Also I’ll briefly show some free and paid tools that can aid with deployment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Johnson</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/django-and-web-security-headers.html</guid></item><item><title>DjangoCon 2019 - Day 1 Lightning Talks</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-day-1-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks Day 1&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/djangocon-2019-day-1-lightning-talks.html</guid></item><item><title>Feeding the Pony: Contributing back to Django &amp; How to make that work for you</title><link>https://pyvideo.org/djangocon-europe-2019/feeding-the-pony-contributing-back-to-django-how-to-make-that-work-for-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django’s life-blood is its contributors. This talk is about how we enable more contributors from across the community, how they (You!) can get involved, and how you can make sure that it helps your career.
Django looks like it’s doing just fine: it’s a popular framework in a popular language. We have major releases every six months. We have Django Girls, a Foundation (and Fellows), super conferences in glamorous locations, and more.
But the code is old and there’s only the smallest number of people that regularly contribute. We need more. We need you!
What’s more, as good as we are elsewhere as a community, the group of contributors isn’t as diverse as the community at large: there are clearly barriers to entry here. We’re trying to change that, and we want to invite you to come and join-in.
Contributing to open source is great fun, it’s a great learning opportunity, and it can really help your career.
I’m going to tell you how to get involved, and how to get support in that.
Importantly I’m going to tell you how to avoid the pitfalls.
You are qualified to contribute. More than that, your contribution is the future of Django. Come code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlton Gibson</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/feeding-the-pony-contributing-back-to-django-how-to-make-that-work-for-you.html</guid></item><item><title>How PyLadies Brazil became the biggest PyLadies chapter of the world</title><link>https://pyvideo.org/djangocon-europe-2019/how-pyladies-brazil-became-the-biggest-pyladies-chapter-of-the-world.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will summarize the history of the creation of PyLadies and Django Girls Brazil and the work done over the last three years to achieve the biggest number of Pyladies subgroups in the world.
Initiatives concerning gender disparity have been gaining strength internationally in recent years, and the Brazilian open-source community has stood out in the quantity and effectiveness of actions aimed at these projects, changing the scenario of our regional and national conferences and events. Here in Brazil, we also have the biggest PyLadies community of the world (in number of chapters), with over 30 chapters around the country. But how did we get here? How do we manage to have such a huge group of people working together and specially learning from each other to run our activities so organically?
In this talk we will discuss about our experience with PyLadies and Django Girls in different regions in Brazil, where we summarize some of the history of the creation of PyLadies and Django Girls Brazil, how everything started and the path we follow to this day. During the talk, we’ll learn more about how do we get ladies (and gentlemen) to work together for these changes to happen, also how the organizers of the chapters and workshops communicate in order to improve their routines and activities and finally, the annual experience sharing meeting we have to gather people who represent the groups to brainstorm ideas of how to make our community better. It will be mentioned all the construction and exchange that takes place within our community and with the diverse communities that support us in the most various corners of the country, their particularities, difficulties and results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/how-pyladies-brazil-became-the-biggest-pyladies-chapter-of-the-world.html</guid></item><item><title>Logging Rethought 2: The Actions of Frank Taylor Jr.</title><link>https://pyvideo.org/djangocon-europe-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We build services, potentially used by hundreds, thousands or even millions of people. And despite all the testing we do, some operations and interactions with these services will not work out the way we expect or hope. Wouldn’t it be great to be able to reconstruct what led to a problem? And then analyze if the same problem occurred at other times?
In this talk, I want to look at structured logging. What are the benefits of it over plain-text logging? How can it be used effectively?
Logging, by itself, can help to trace bugs. Structured logging adds additional, post-logging capabilities when used correctly. Because log events are structured data, they can be analyzed much more efficiently and effectively than plain text log messages. Furthermore, one can even build graphs and diagrams to visualize what’s happening in a service nicely.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Holtermann</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/logging-rethought-2-the-actions-of-frank-taylor-jr.html</guid></item><item><title>Making your life (h)APIer with Django</title><link>https://pyvideo.org/djangocon-europe-2019/making-your-life-hapier-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today’s web, creating API’s has become a big part of web-development. Django and Django REST Framework make our lives easy :-) But let’s take it a notch further with DRF-Schema-Adapter.
When it comes to building API’s with Django, Django REST Framework has become the go-to solution. It is a great tool that integrates seamlessly with Django and it’s ORM.
Unfortunately when building a medium-to-large API, DRF leads to a lot of very similar and somewhat repetitive code in building your ViewSet, Serializer, Pagination or Filter classes. In the long-run, all this code also has to be maintained!
This is where DRF-Schema-Adapter can make your life easier and happier!
In this talk, we’ll go over the basics of building an API with DRF versus using DRF-Schema-Adapter and how it will help shrink your codebase.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/making-your-life-hapier-with-django.html</guid></item><item><title>Pushing the ORM to its limits</title><link>https://pyvideo.org/djangocon-europe-2019/pushing-the-orm-to-its-limits.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;You can do a lot more with the Django ORM than you might think, and when something isn't possible using the existing primitives, you can easily add your own. In this talk you will learn about both advanced features of the ORM and how to run your own SQL queries.&lt;/strong&gt;
Django's ORM makes it super simple to run quick queries against your database, but it can do a lot more for you than you might think. Need to get some statistics on a monthly-basis? Easy, just annotate your queryset with year and month using &lt;tt class="docutils literal"&gt;ExtractYear&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ExtractMonth&lt;/tt&gt;, and you can use &lt;tt class="docutils literal"&gt;.values()&lt;/tt&gt; to get the data aggregated by month.
When you find yourself in need of something that is not already covered by the existing ORM functions, you will often be able to create it yourself. Have you modelled your data with separate date and time fields, but need to compare this to a datetime field? You can make a custom expression in Django for combining the date and time into a datetime in the database.
Starting with Django 1.11, you can easily make subqueries using the Django ORM. In Django 2.0 we got support for window functions. Django 2.1 exposes additional functions that are available in many databases, and version 2.2 will introduce support for custom constraints and extends the primitives for custom indexes.
It is also easy to drop down to writing raw SQL if you need to. It is probably not something you need to do every day, but it's good to know that the option is there, and know how and when to do it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sigurd Ljødal</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/pushing-the-orm-to-its-limits.html</guid><category>django</category><category>orm</category></item><item><title>Take the goRe out of a DjangoReact stack</title><link>https://pyvideo.org/djangocon-europe-2019/take-the-gore-out-of-a-djangoreact-stack.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing, packaging and integrating JS apps with Django.
As a Django dev you cannot ignore Javascript frameworks anymore. But integrating React (or any javascript framework) with Django is not seamless: there’s no documented guide to setup a project, getting hot reloading to work is a painful must-have, and then how do you even leverage the power of both frameworks to code faster? Doing this without losing time and productivity is very hard.
After 4 years of building a dozen django/react projects at Theodo, I want to share with you the very efficient setup we came up with, both for development and production use.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathan Gaberel</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/take-the-gore-out-of-a-djangoreact-stack.html</guid></item><item><title>The 750,000-line long pull request: crafting a more resilient open source community</title><link>https://pyvideo.org/djangocon-europe-2019/the-750000-line-long-pull-request-crafting-a-more-resilient-open-source-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As open source communities grow, they need to adapt to new dynamics: Different types of expertise between contributors, different expectations, etc. The arrival of a very large PR on the OpenFisca project became the test of the work we had put in to create a more resilient community.
Since 2011, a community of developers and economists are developing OpenFisca, an open source framework in Python that turns law into software so it can be used by administrations, economists and activists.
The contributors are split between tech experts and domain experts, each bringing interesting skills, mindsets and issues. However, a full time tech team became the full time core team, shifting the balance of the community. Having a full time team working on the project was a plus, but it gave tech experts a central role that put a lot of strain on domain experts’ contributions.
In this talk, I will describe how we worked to create a dynamic community that can deal with uncertainty (new contributors, very large PRs, …) and grow to reach new heights in the hope it can inspire other communities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna-Livia Gomart</dc:creator><pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-20:djangocon-europe-2019/the-750000-line-long-pull-request-crafting-a-more-resilient-open-source-community.html</guid></item><item><title>Djangocon 2019 - Europe - Day 3</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-europe-day-3.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-12:djangocon-europe-2019/djangocon-2019-europe-day-3.html</guid></item><item><title>Djangocon 2019 - Europe - Day 2</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-europe-day-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-11:djangocon-europe-2019/djangocon-2019-europe-day-2.html</guid></item><item><title>Djangocon 2019 - Europe - Day 1</title><link>https://pyvideo.org/djangocon-europe-2019/djangocon-2019-europe-day-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Wed, 10 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-10:djangocon-europe-2019/djangocon-2019-europe-day-1.html</guid></item></channel></rss>