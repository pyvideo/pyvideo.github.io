<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Code review for Beginners and Experts: Tips &amp; Tricks</title><link>https://pyvideo.org/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much easier to debug, and it's much harder to introduce
a bug in such code.&lt;/div&gt;
&lt;div class="line"&gt;When you think about code review, you probably think about verifying
and examining the code. Reviewing the expert's code may look like a
waste of time because he knows what he's doing. Reviewing the code by
a beginner may look like a waste of time because he's not able to find
as many defects as an experienced developer. Code review is a code
quality tool in the first place, but it's also much beyond that. You
can teach or help someone, learn from somebody and much more both from
the position of reviewer and reviewee.&lt;/div&gt;
&lt;div class="line"&gt;There is much more about the real power of code review which I want to
share with you.&lt;/div&gt;
&lt;div class="line"&gt;This talk is also about how to do it the right way and how to not do
it based on lessons learned and my experience within the diverse teams
of people with a variety of knowledge and experience. I was reviewing
the code but, on the other hand, I was also being reviewed. I'd like
to pass my observations to people who are reviewing the code both in
commercial and open source projects for a while. This talk is also for
those who want to start to review the code, but they do not know how
to do it.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Kąkol</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</guid><category>Best Practice</category><category>Clean Code</category><category>Code Analysis</category><category>Development</category><category>Programming</category></item><item><title>Brace yourself, Python 2 is retiring</title><link>https://pyvideo.org/pycon-uk-2018/brace-yourself-python-2-is-retiring.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk and Interactive Session&lt;/p&gt;
&lt;p&gt;Please note: this is an hour long session.&lt;/p&gt;
&lt;p&gt;Python2 will reach End Of Life on January 1st, 2020. Do we have only one
and a half year to migrate to python3? Well… Yes and no. Most people aim
for the upgrade. But that doesn’t mean everyone. This talk would be a
comprehensive guide for migration from python2 to python3. However, I’ll
also talk about projects that cannot be migrated for various reasons.
2020 doesn’t necessarily mean pythonic armageddon. Come and find out.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Kąkol</dc:creator><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-17:pycon-uk-2018/brace-yourself-python-2-is-retiring.html</guid></item><item><title>Pythonic code vs. performance</title><link>https://pyvideo.org/europython-2018/pythonic-code-vs-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Idiomatic Python is beautiful. If you’re new to Python, this talk is for
you because I’m going to reveal the charm of python in front of you.
I’ll present how boilerplate code can be replaced with idiomatic python.
If you’re experienced python developer, this talk is also for you
because I’ll compare the performance of the idiomatic code, both from
CPU and memory point of view. Some of these results may surprise you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Kąkol</dc:creator><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-25:europython-2018/pythonic-code-vs-performance.html</guid></item><item><title>Pythonic code vs performance</title><link>https://pyvideo.org/pycon-uk-2017/pythonic-code-vs-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Apologies for the lack of slides on this presentation, the projector feed wasn't working&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Idiomatic python is beautiful. If you're new to Python, this talk is for you because I'm going to reveal the charm of python in front of you. I'll present how boilerplate code can be replaced with idiomatic python. If you're experienced python developer, this talk is also for you because I'll compare the performance of the idiomatic code, both from CPU and memory point of view. Some of these results may surprise you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lukasz Kakol</dc:creator><pubDate>Thu, 26 Oct 2017 12:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-26:pycon-uk-2017/pythonic-code-vs-performance.html</guid></item></channel></rss>