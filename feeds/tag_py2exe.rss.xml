<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 20 Jul 2011 00:00:00 +0000</lastBuildDate><item><title>Distributing Python programs through PyInstaller</title><link>https://pyvideo.org/europython-2011/distributing-python-programs-through-pyinstaller.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Giovanni Bajo - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on how to distribute multi-platform proprietary
Python applications, using &lt;a class="reference external" href="http://www.pyinstaller.org"&gt;PyInstaller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python
installation, nor third party library. The executable can then be packed
and shipped in many different ways (through installer wizards, deb/rpm
packages, etc.).&lt;/p&gt;
&lt;p&gt;PyInstaller is a good multi-platform alternative to tools like py2exe
and py2app, but it found troubles to gain acceptance in a market that
seems strongly tied to older tools. Instead, PyInstaller puts forward
important new features: for instance, it works on the most important
desktop platforms (Windows, Linux/UNIX, Mac), and it has got an
automatic and fully transparent support for all the workarounds needed
to make applications using complex libraries like Matplotlib or PyQt
work within a static executable.&lt;/p&gt;
&lt;p&gt;In detail, the following points will be discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Distribution of a priopriertary software: initial requests&lt;/li&gt;
&lt;li&gt;PyInstaller: how it works (basic tutorial)&lt;/li&gt;
&lt;li&gt;The secrets of PyInstaller: technical details&lt;/li&gt;
&lt;li&gt;Import hooks: effectively handling third party extensions&lt;/li&gt;
&lt;li&gt;Flexibility with PyInstaller: what goes in and what stays out&lt;/li&gt;
&lt;li&gt;Linux: static binaries for a single distribution or
cross-distributions&lt;/li&gt;
&lt;li&gt;Mac: creation of bundles for graphic applications&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/distributing-python-programs-through-pyinstaller.html</guid><category>matplotlib</category><category>py2exe</category><category>pyqt</category></item><item><title>PyCon 2009: How I Distribute Python applications on Windows - py2exe and InnoSetup (#108)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--how-i-distribute-python-applications-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many deployment options for Python code. I'll share what has
worked well for me on Windows, packaging command line tools and services
using py2exe and InnoSetup. I'll demonstrate a simple build script which
creates windows binaries and an InnoSetup installer in one step. In
addition, I'll go over common errors which come up when using py2exe and
hints on troubleshooting them. This is a short talk, so there will be a
follow-up Open Space session to share experience and help each other
solve distribution problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--how-i-distribute-python-applications-.html</guid><category>innosetup</category><category>py2exe</category><category>pycon</category><category>pycon2009</category><category>windows</category></item><item><title>Cross platform application development and distribution (#116)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cross platform application development and distribution&lt;/p&gt;
&lt;p&gt;Presented by Stani Michiels and Nadia Alramli&lt;/p&gt;
&lt;p&gt;You think Python gives you native cross platform applications for free?
Think twice. Are you interested in distributing your application to
other platforms but not sure how?&lt;/p&gt;
&lt;p&gt;We will give tips and examples on how to enhance the native feel of your
application: notifications, registration of file types and more. The
talk will also help you to avoid common pitfalls and provides solutions
for designing cross platform user interfaces. (Although we use wxPython
as an example, the principles are valid for other toolkits as well.)
We'll show you where to start if you want to distribute your application
to different platforms, briefly discussing tools like py2exe, py2app and
Debian/Ubuntu packaging ecosystem. This talk is based on our experience
from developing Phatch (Photo Batch Processor) and SPE (Python Editor).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nadia Alramli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</guid><category>crossplatform</category><category>packaging</category><category>py2app</category><category>py2exe</category><category>pycon</category><category>pycon2010</category><category>wxpython</category></item></channel></rss>