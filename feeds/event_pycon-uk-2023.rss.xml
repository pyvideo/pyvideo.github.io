<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyCon UK 2023</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 24 Sep 2023 00:00:00 +0000</lastBuildDate><item><title>3 Lessons Data Scientists Can Learn from World War II</title><link>https://pyvideo.org/pycon-uk-2023/3-lessons-data-scientists-can-learn-from-world-war-ii.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ll revisit three stories from WWII where statisticians for the Allied forces got things perfectly right - and terribly wrong. We'll explore the flaws of averages, survivorship bias, and the German tanks problem. Drawing parallels to modern business situations, we'll discuss the takeaways for modern day data scientists.&lt;/p&gt;
&lt;p&gt;World War II, the largest armed conflict in human history, not only required unfathomable firepower but also unprecedented brain power. Data scientists - or statisticians as they were called back in the day - worked tirelessly to advance military technology and produce indispensable intelligence reports. Eighty years on, the lessons they learned remain relevant and are important for anyone doing data science or analysis at present.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll visit three stories from WWII and discuss how the lessons learned then apply for modern day business settings. We’ll explore:
- How the flaw of averages made the scientifically optimised cockpit to be a perfect fit for no-one.
- How survivorship bias impacted the armour placed on bomber planes.
- How the need to assess the monthly rate of German tank production bred a simple solution.&lt;/p&gt;
&lt;p&gt;In the second part of the talk we’ll discuss how learnings from these stories can be used in a business environment, working through business use-cases with real (looking) data and some basic Python manipulations.&lt;/p&gt;
&lt;p&gt;While the talk was prepared with data scientists and analysts in mind, anyone with a curious mind may find it worthwhile. Basic familiarity of Python is helpful but not required. By the end of this talk audience members will be familiar with several common pitfalls in data science and equipped to handle business problems in a more mature and well-rounded way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alon Nir</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/3-lessons-data-scientists-can-learn-from-world-war-ii.html</guid><category>PyCon UK 2023</category></item><item><title>Fear the mutants. Love the mutants.</title><link>https://pyvideo.org/pycon-uk-2023/fear-the-mutants-love-the-mutants.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developers often use code coverage as a target, which makes it a bad measure of test quality. Mutation testing changes the game and fixes the problem.&lt;/p&gt;
&lt;p&gt;Come and learn to use it in your CI/CD process. I promise, you'll never look at penguins the same way again!&lt;/p&gt;
&lt;p&gt;Code coverage (the percentage of your code tested by your tests) is a great metric. However, coverage doesn’t tell you how good your tests are at picking up changes to your codebase - if your tests aren’t well-designed, changes can pass your unit tests but break production.&lt;/p&gt;
&lt;p&gt;Mutation testing is a great (and massively underrated) way to quantify how much you can trust your tests. Mutation tests work by changing your code in subtle ways, then applying your unit tests to these new, &amp;quot;mutant&amp;quot; versions of your code. If your tests fail, great! If they pass… that’s a change that might cause a bug in production.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll show you how to get started with mutation testing and how to integrate it into your CI/CD pipeline. After the session, you’ll be ready to use mutation testing with wild abandon. Soon, catching mutant code will be a routine part of your release engineering process, and you’ll never look at penguins the same way again!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Kahan</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/fear-the-mutants-love-the-mutants.html</guid><category>PyCon UK 2023</category></item><item><title>Friday Lightning Talks</title><link>https://pyvideo.org/pycon-uk-2023/friday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/friday-lightning-talks.html</guid><category>PyCon UK 2023</category></item><item><title>Optimizing GraphQL Performance: Tips and Techniques</title><link>https://pyvideo.org/pycon-uk-2023/optimizing-graphql-performance-tips-and-techniques.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore techniques to optimize GraphQL performance for snappy, scalable, and resource-efficient APIs. Attendees will learn about batching queries with DataLoader, managing query complexity and depth, leveraging persisted queries for reduced network overhead, and implementing
caching strategies on both server and client-side.&lt;/p&gt;
&lt;p&gt;API performance is crucial for delivering a smooth and responsive user
experience. GraphQL has gained popularity as a flexible and efficient query
language, but without proper optimization, it may underperform or even become a
bottleneck in your application.&lt;/p&gt;
&lt;p&gt;In this talk, we'll dive into the essential techniques and best practices to
optimize GraphQL performance, ensuring that your APIs are snappy, scalable, and
resource-efficient. Attendees will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The importance of batching queries and how to implement it using DataLoader or
similar libraries.&lt;/li&gt;
&lt;li&gt;The concept of query complexity and depth, and how to set up limits to prevent
resource abuse.&lt;/li&gt;
&lt;li&gt;Leveraging persisted queries to reduce network overhead and improve caching
capabilities.&lt;/li&gt;
&lt;li&gt;Implementing caching strategies, both on the server and client-side, to
minimize redundant requests and reduce load times.&lt;/li&gt;
&lt;li&gt;Exploring monitoring and observability tools that can help you identify
performance bottlenecks and continuously optimize your GraphQL implementation
for maximum efficiency.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Arminio</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/optimizing-graphql-performance-tips-and-techniques.html</guid><category>PyCon UK 2023</category></item><item><title>Saturday Lightning Talks</title><link>https://pyvideo.org/pycon-uk-2023/saturday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/saturday-lightning-talks.html</guid><category>PyCon UK 2023</category></item><item><title>Secure, Modern, and Simple Dependency Management with PDM and Friends</title><link>https://pyvideo.org/pycon-uk-2023/secure-modern-and-simple-dependency-management-with-pdm-and-friends.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What actually happens when you import a package? Let's find out, then explore recent packaging developments, including the new tool PDM, comparing it to pip and poetry. We'll also cover some (opinionated) best practices for handling metadata, and building secure, modern applications using third party libraries in python.&lt;/p&gt;
&lt;p&gt;Python has a rich ecosystem of open source packages available to assist with almost any conceivable requirement. Installing, using, and updating these packages should be quick, easy, and secure, however, dependency management and python packaging has historically been a source of frustration for developers, particularly with the added complications of virtual environments, and subtle differences between python versions. Furthermore, software supply chain security has attracted particular importance of late as increasing numbers of major vulnerabilities have been discovered requiring fast, sometimes immediate, mitigation.&lt;/p&gt;
&lt;p&gt;In recent years, efforts have been made to improve packaging and dependency management in python, and we have seen the release of a number of developer tools, including poetry, pipenv, and pipx. These work alongside pip and earlier tools such as disutils, setuptools, and easy_install, and offer higher level interfaces for developers to work with. In 2020, a new tool was released called PDM (Python Dependency Manager), and is gaining traction amongst developers in recent months.&lt;/p&gt;
&lt;p&gt;This talk will start by giving an overview of how python imports work, before moving on to cover a brief history of package management in python, and an overview of the current state of play, and the vulnerabilities that we are exposed to by supply chain attacks. We'll then give a brief introduction to PDM, before discussing what practical steps we can take to both improve our developer experiences, and ensure the code we write is modern, secure, and maintainable.&lt;/p&gt;
&lt;p&gt;We'll ask questions including some of the below.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What actually happens 'under the hood' when we use the import statement?&lt;/li&gt;
&lt;li&gt;How many different ways can we import a package in python?&lt;/li&gt;
&lt;li&gt;What does a dependency manager do, and how does it work?&lt;/li&gt;
&lt;li&gt;What does a supply chain attack look like, and how do we try and stop them happening?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the speaker will offer an opinionated guide to some of the best python tooling and package management setups available to python developers in 2023.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dom Weldon</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/secure-modern-and-simple-dependency-management-with-pdm-and-friends.html</guid><category>PyCon UK 2023</category></item><item><title>SIGN-TO-TEXT:Unleashing the Power of Google AI for real time ASL transcription</title><link>https://pyvideo.org/pycon-uk-2023/sign-to-textunleashing-the-power-of-google-ai-for-real-time-asl-transcription.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will delve into how leveraging Google's cutting-edge tools and frameworks, combined with Python, can revolutionize the way we bridge the communication gap between sign language users and the wider world.&lt;/p&gt;
&lt;p&gt;Communication barriers between the deaf and hard-of-hearing community and the wider world have created significant challenges in effective interaction.However the good news is cutting-edge AI technologies can revolutionize the way we transcribe American Sign Language (ASL) and enable inclusive communication.&lt;/p&gt;
&lt;p&gt;Using the power of Python libraries and Google's AI tools, including the Google Cloud Vision API for hand and finger tracking, TensorFlow for deep learning models, and AutoML for data scarcity challenges, I will demonstrate Sign_To_Text, a revolutionary system that transforms how sign language users connect with the world.&lt;/p&gt;
&lt;p&gt;Witness live demonstrations as I seamlessly integrate Google AI technologies to translate fingerspelled letters in real time into textual representations, empowering individuals and fostering inclusive communication.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Atieno Ouma</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/sign-to-textunleashing-the-power-of-google-ai-for-real-time-asl-transcription.html</guid><category>PyCon UK 2023</category></item><item><title>Sunday Lightning Talks</title><link>https://pyvideo.org/pycon-uk-2023/sunday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/sunday-lightning-talks.html</guid><category>PyCon UK 2023</category></item><item><title>The Magic of Self: How Python inserts self into methods</title><link>https://pyvideo.org/pycon-uk-2023/the-magic-of-self-how-python-inserts-self-into-methods.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how &lt;cite&gt;self&lt;/cite&gt; works? Whenever you call a method, &lt;cite&gt;self&lt;/cite&gt; seems to magically appear as an argument. But behind this dark magic lies a well-defined protocol, the descriptor protocol, that you can implement yourself. Join me and learn how Python inserts &lt;cite&gt;self&lt;/cite&gt; into methods!&lt;/p&gt;
&lt;p&gt;A phrase that I hear a lot is that “Python is easy to learn but hard to master”. In a way that’s true: Python’s many abstractions allow you to focus on the business logic of your code instead of the lower-level implementation details.&lt;/p&gt;
&lt;p&gt;At the same time, most of Python’s abstractions aren’t &lt;em&gt;magical&lt;/em&gt;: Its versatile data model allows you to hook into almost every aspect of the language to implement objects that behave just as Python’s built-in objects do. This enables you to create new types of objects that have high-level interfaces of their own.&lt;/p&gt;
&lt;p&gt;In this talk, I want to entice you to explore the wonderful landscape of Python’s data model by diving into an especially magical feature: The automatic insertion of &lt;cite&gt;self&lt;/cite&gt; into methods.&lt;/p&gt;
&lt;p&gt;When you first came across &lt;cite&gt;self&lt;/cite&gt; in a method signature, chances are that you learned that inserting the instance into methods is just something Python does for you; that you shouldn’t worry too much about it. I will go one step further and show you that there’s a well-defined protocol behind this magic, the descriptor protocol.&lt;/p&gt;
&lt;p&gt;By the end, not only should you be able to implement descriptors of your own, but you should also be able to recognize that some well-known features of Python, such as properties and classmethods, are implemented using the same descriptor protocol.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastiaan Zeeff</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/the-magic-of-self-how-python-inserts-self-into-methods.html</guid><category>PyCon UK 2023</category></item><item><title>The programmer's imagination</title><link>https://pyvideo.org/pycon-uk-2023/the-programmers-imagination.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As creators of software, we're repeatedly told that we're not merely imagining the future of the world, but bringing it into being. Let's suppose that's true. What, exactly, are we imagining, and why does it matter?&lt;/p&gt;
&lt;p&gt;Of all our faculties, imagination is usually considered the freest, the seat of creation. I'm interested in what we are doing with this freedom, and I am suspicious of it.&lt;/p&gt;
&lt;p&gt;At the same time, I believe that our imagination tells us truths we might not always want to hear, forcefully.&lt;/p&gt;
&lt;p&gt;In this talk I want to pay attention to the programmer's imagination, and show how the imagination draws lines between things as disparate as Django's success page for new projects and [Dracoraptor hanigani](&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dracoraptor"&gt;https://en.wikipedia.org/wiki/Dracoraptor&lt;/a&gt;), the recently discovered Welsh dinosaur (on view at the National Museum, next door to Cardiff City Hall).&lt;/p&gt;
&lt;p&gt;As programmers, our imagination conjures up new worlds on blank pages, but I think that imagination can always be traced back to assumptions, prejudices and desires that are active right now - the programmer's imagination isn't telling us about the future, but about &lt;em&gt;now&lt;/em&gt; - and what's wrong with it.&lt;/p&gt;
&lt;p&gt;I want to show what the imagination has meant for what we do with the software we create, and what it means for the future. I will use it to identify some of the things we have lost in the last decades, and how we can find them again.&lt;/p&gt;
&lt;p&gt;Amongst other things I'll discuss dinosaurs and birds, palaeoart and 1980s computer programming books, David H Ahl and Joseph Wiezenbaum, to help make sense of what we're doing, what we think we're doing, the relationship between them - and what, perhaps, we &lt;em&gt;should&lt;/em&gt; be doing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/the-programmers-imagination.html</guid><category>PyCon UK 2023</category></item><item><title>The Standard Library Tour</title><link>https://pyvideo.org/pycon-uk-2023/the-standard-library-tour.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tired of complex code? Python's standard library has tools to simplify your tasks! Join us for a tour of the standard library where we'll dive into less-known modules that do well-known things and well-known modules that do less-known things.&lt;/p&gt;
&lt;p&gt;The Standard Library Tour is designed to provide attendees with an understanding of Python's standard library less known features. Have you ever found yourself writing complex code only to discover that Python has tools available within its library that could have made your job easier? Then this talk is for you!&lt;/p&gt;
&lt;p&gt;The outline of the talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic information about the library&lt;/li&gt;
&lt;li&gt;Well-known modules which do less-known things&lt;ul&gt;
&lt;li&gt;functools less-known features: &amp;#64;singledispatch, partial(), &amp;#64;cache&lt;/li&gt;
&lt;li&gt;itertools less-known features: product(), filterfalse(), zip_longest()&lt;/li&gt;
&lt;li&gt;collections less-known features: ChainMap, defaultdict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Less-known modules which do well-known things&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;doctest for testing: testmod()&lt;/li&gt;
&lt;li&gt;Difflib &amp;amp; Filecmp for comparison: Difflib.SequenceMatcher, Filecmp.cmpfiles()&lt;/li&gt;
&lt;li&gt;contextlib for tasks involving the with statement: &amp;#64;contextmanager, &amp;#64;asynccontextmanager&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By attending this session, you'll gain a deeper understanding of Python's standard library and you'll discover the &amp;quot;unknown unknowns&amp;quot; - tools that you may not even know exist within Python's standard library. By becoming familiar with the library and all of its capabilities, you'll be better equipped to solve problems and build applications more efficiently, without reinventing the wheel. You'll also receive recommendations on where to find additional resources and information so you can continue learning and exploring Python's tools after the conference has ended.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Bajić</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/the-standard-library-tour.html</guid><category>PyCon UK 2023</category></item><item><title>Welcome and UKPA AGM</title><link>https://pyvideo.org/pycon-uk-2023/welcome-and-ukpa-agm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome and Introduction&lt;/p&gt;
&lt;p&gt;Welcome and Introduction&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Owen Campbell</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/welcome-and-ukpa-agm.html</guid><category>PyCon UK 2023</category></item><item><title>Well well. ML is not the answer to everything.</title><link>https://pyvideo.org/pycon-uk-2023/well-well-ml-is-not-the-answer-to-everything.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Datasets with potential to predict contaminated water are more than just numbers. They can mean the difference between drawing safe drinking water from a well and drawing unsafe levels of arsenic. This talk compares ways of generating a predictive model and addresses the ethical importance of application over technological ideology.&lt;/p&gt;
&lt;p&gt;Between 1970 and the year 2000, the United Nations Children's Fund (UNICEF) worked with the Bangladesh government to provide safe drinking water to 80% of the population by the year 2000. The strategy was to achieve this goal by installing tubewells within the country. Unfortunately, many of these wells produced water contaminated with harmful arsenic content.&lt;/p&gt;
&lt;p&gt;When applying machine learning to this problem, the complexities of providing clean drinking water to an entire country highlight the limitations of foundational technological principles. I experienced this when contributing to the project iArsenic, which used data from these wells to predict a well's arsenic content.&lt;/p&gt;
&lt;p&gt;Using iArsenic, individuals can submit data about their own well in Bangladesh and have a prediction generated to classify the safety of this well. Armed with fundamental principles of data science, I came into this project keen to enlighten the geoscience team about the data science sins they had committed.&lt;/p&gt;
&lt;p&gt;Where was the evaluation?
Where was the train and test split?
Why does it matter if the model is opaque or transparent?&lt;/p&gt;
&lt;p&gt;Ultimately, the question I was not asking gave the most valuable insight. Do these data science fundamentals matter? Surely, if we have a model that is 51% accurate all the time, it would be beneficial to use this model to tell people whether they should drink from a well or not, because 1% of people would benefit. In reality, these models are over 80% accurate.&lt;/p&gt;
&lt;p&gt;Sitting in front of a MacBook Pro in a university library doing this data science project, it can look obvious that this model can be used to tell these people what is good for them and to give them the opportunity to make over 80% of the problem disappear in a take it or leave it fashion. So why is this seemingly simple and effective approach never deployed? When considering whether you would trust your health to a model with a 51% accuracy, does it still seem so simple or is the problem being underestimated by a colonial mindset?&lt;/p&gt;
&lt;p&gt;This talk explores the computing culture shocks experienced when different fields collaborate, discussing how the convictions that help people navigate within a field can raise barriers between fields. Perhaps learning to embrace our convictions with flexibility will break barriers instead of building them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kane Swartz</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/well-well-ml-is-not-the-answer-to-everything.html</guid><category>PyCon UK 2023</category></item><item><title>When to rebuild things that already exist</title><link>https://pyvideo.org/pycon-uk-2023/when-to-rebuild-things-that-already-exist.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This year I built a library that already exists. The existing solutions didn’t quite meet my needs, I wanted something that ticked all of my boxes. When thinking about building something new people referred me to xkcd #927. But I did it anyway.&lt;/p&gt;
&lt;p&gt;For the last 6 years I’ve maintained dask-kubernetes, a Python library for deploying Dask clusters on Kubernetes. In that time I’ve tried nearly every Python Kubernetes client library on PyPI. In fact dask-kubernetes today uses over five different libraries and tools to interact with the Kubernetes API. Each one has different strengths and weaknesses, features and bugs. To satisfy all of the needs of Dask Kubernetes there is no one library that can do it alone.&lt;/p&gt;
&lt;p&gt;Should I continue to build wrappers and shims in dask-kubernetes to homogenize the various dependencies? Should I contribute to an existing one to fill in the blanks? Or can I build one library to rule them all?&lt;/p&gt;
&lt;p&gt;Earlier this year I decided to build exactly the library I needed. Not a perfect universal library to supersede everything, not a wrapper for everything that exists. Just the library I need to solve my problems, to reduce complexity in my projects and to help me learn the things I need to know to maintain these projects into the future.&lt;/p&gt;
&lt;p&gt;In this talk I will dig into my perspective on when to wrap a dependency, when to contribute to a dependency and when to build a new dependency from scratch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Tomlinson</dc:creator><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-24:/pycon-uk-2023/when-to-rebuild-things-that-already-exist.html</guid><category>PyCon UK 2023</category></item><item><title>Friday Welcome and Introductions</title><link>https://pyvideo.org/pycon-uk-2023/friday-welcome-and-introductions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome and Introductions&lt;/p&gt;
&lt;p&gt;Welcome and Introductions&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ann Barr</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/friday-welcome-and-introductions.html</guid><category>PyCon UK 2023</category></item><item><title>How I used PostgreSQL® to find pictures of me at a party</title><link>https://pyvideo.org/pycon-uk-2023/how-i-used-postgresqlr-to-find-pictures-of-me-at-a-party.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At an event, a photographer can take many photos. Which ones do you appear in? Find out how to search for faces using Python, OpenCV, OpenAI and, yes, PostgreSQL®.&lt;/p&gt;
&lt;p&gt;Python ties it all together, and PostgreSQL's pgvector extension allows making SQL queries to find photos with my face.&lt;/p&gt;
&lt;p&gt;Nowadays, if you attend an event you're bound to end up with a catalogue of photographs to look at. Formal events are likely to have a professional photographer, and modern smartphones mean that it's easy to make a photographic record of just about any gathering. It can be fun to look through the pictures, to find yourself or your friends and family, but it can also be tedious.&lt;/p&gt;
&lt;p&gt;At our company get-together earlier in the year, the photographers did indeed take a lot of pictures. Afterwards the best of them were put up on our internal network - and like many people, I combed through them looking for those in which I appeared (yes, for vanity, but also with some amusement).&lt;/p&gt;
&lt;p&gt;In this talk, I'll explain how to automate finding the photographs I'm in (or at least, mostly so). I'll walk through Python code that extracts faces using OpenCV, calculates vector embeddings using imgbeddings and OpenAI, and stores them in PostgreSQL® using pgvector. Given all of that, I can then make an SQL query to find which pictures I'm in.&lt;/p&gt;
&lt;p&gt;Python is a good fit for data pipelines like this, as it has good bindings to machine learning packages, and excellent support for talking to PostgreSQL.&lt;/p&gt;
&lt;p&gt;You may be wondering why that sequence ends with PostgreSQL (and SQL) rather than something more machine learning specific. I'll talk about that as well, and in particular about how PostgreSQL allows us to cope when the amount of data gets too large to be handled locally, and how useful it is to be able to relate the similarity calculations to other columns in the database - in our case, perhaps including the image metadata.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tibs</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/how-i-used-postgresqlr-to-find-pictures-of-me-at-a-party.html</guid><category>PyCon UK 2023</category></item><item><title>How to keep your database happy</title><link>https://pyvideo.org/pycon-uk-2023/how-to-keep-your-database-happy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;5 simple things you can put in place to make sure you have a database that runs smoothly and performs well.&lt;/p&gt;
&lt;p&gt;You don't want to spend too much time looking after your database; you've got better things to do with your time. You do, however, want your database to run smoothly and perform well. Fortunately, there are a few simple things that you can do to make sure your database ticks along nicely in the background.
I've put together my top 5 tips, based on things that have been useful to me as a DBA and as a database consultant. These are things you can put in place, without too much effort, to make sure your database works well. The focus will be on PostgreSQL, but most of the tips are also relevant to other databases.
You'll come away with some simple ways to keep your database happy, leaving you free to concentrate on developing your application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Karen Jex</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/how-to-keep-your-database-happy.html</guid><category>PyCon UK 2023</category></item><item><title>If you can’t give me poetry, can’t you give me poetical science?</title><link>https://pyvideo.org/pycon-uk-2023/if-you-cant-give-me-poetry-cant-you-give-me-poetical-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technology is often hidden backstage at the theatre – a toolkit to enhance performance, not something artists make plays about. But generations of audience members have ‘grown up online’. To tell contemporary stories, don’t we need to put tech centre stage? What is digital theatre – and is it still theatre?&lt;/p&gt;
&lt;p&gt;Ada Lovelace was the daughter of a social reformer and a mad/bad/dangerous-to-know poet. She grew up to be a mathematician, an analyst, a musician, a gambler, and the first computer programmer. But the engine she coded for was never built – and she didn’t live to see whether her programme worked or not.&lt;/p&gt;
&lt;p&gt;I’m the daughter of an English tutor and a ‘works in software’. I’ve grown up to be a playwright and a digital theatre-maker. I was also commissioned to research, write, and develop a play about Ada Lovelace, music, AI, and poetical science. But it was never staged – and I have no idea if it works in performance or not.&lt;/p&gt;
&lt;p&gt;Luckily I’m not dead yet, and I have actually managed to stage other work exploring how tech-y themes, online communities, and virtual spaces work in live theatre. My theatre-making overlaps with gaming, radio, film, and livestreaming. I love thinking about how staging the tech can create restrictions/opportunities, feeding into the form and the theme of a story. And I’m especially interested in how theatre – an artform that had to change dramatically to survive lockdown – might move forwards now that audiences are more reluctant to leave their homes than ever.&lt;/p&gt;
&lt;p&gt;If you’re not the kind of person who goes to the theatre then you might be the kind of person who’s up for digital theatre – poetical science, maybe, rather than just poetry. If, of course, we can agree on what digital theatre even is…&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emily Holyoake</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/if-you-cant-give-me-poetry-cant-you-give-me-poetical-science.html</guid><category>PyCon UK 2023</category></item><item><title>Investigating Environmental issues with Python</title><link>https://pyvideo.org/pycon-uk-2023/investigating-environmental-issues-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Earth's sustainability is on the brink. However, with today's information wars this situation isn't universally accepted. This talk democratises citizen environmental investigation by applying Python to selected Green issues. By separating facts from fiction humanity can be better informed to safeguard our existence.&lt;/p&gt;
&lt;p&gt;Existential threats to humanity as a result of decades of damage inflicted to the planet are already in motion. From the first climate refugees in 2014, to escalating public health crises of air pollution and food insecurity around the world, Earth becomes less inhabitable every day.&lt;/p&gt;
&lt;p&gt;And yet concern isn't as widespread as is warranted. Many parties profit from unsustainable practices, and therefore have motive to obfuscate the long-term harmful consequences. In today's post-truth world, exacerbated by generative AI and other mis-used tech, public opinion is the battleground between multiple opposing influences, only to the detriment of society.&lt;/p&gt;
&lt;p&gt;This talk aims to better equip citizens to bypass/counter the deliberate informational noise and investigate environmental issues themselves, being more empowered to come to their own conclusions about the actual state of our world.&lt;/p&gt;
&lt;p&gt;A selection of scientific workflows, using open-source Python and publicly available resources, will be presented, each delving into a topical environmental issue to produce actionable insight. Designed to be accessible and reproducible by tech literate citizens without domain expertise, the audience will takeaway transferable Python skills for undertaking similar scientific computing exploration.&lt;/p&gt;
&lt;p&gt;Let's democratise Python's potential for citizen access to discovery of environmental facts, so that humanity can be better informed to better influence the safeguarding of our planet, and ultimately our existence.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mx Chiin-Rui Tan</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/investigating-environmental-issues-with-python.html</guid><category>PyCon UK 2023</category></item><item><title>Live highlights in BBC iPlayer</title><link>https://pyvideo.org/pycon-uk-2023/live-highlights-in-bbc-iplayer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How we built a prototype to allow journalists to add highlight markers to interesting moments on BBC News in iPlayer, and how we went from idea to prototype to production.&lt;/p&gt;
&lt;p&gt;In BBC News Labs, we work closely with journalists and we try to come up with innovative approaches to meeting their needs - either to improve or automate internal processes or to enhance the audience experience.&lt;/p&gt;
&lt;p&gt;An idea was born from discussions with a BBC News editor to add markers to indicate to users where the big important moments are on the news channel. We built a minimum viable product, and extended the reach of the prototype over the next few months. We launched our first audience facing trial on news live pages, and then it was used on Eurovision, Springwatch, Glastonbury and Wimbledon.&lt;/p&gt;
&lt;p&gt;The project was built using AWS lambda functions (Python), FastAPI and postgres, a React / TypeScript frontend and an iPlayer plugin (also TypeScript).&lt;/p&gt;
&lt;p&gt;This talk will cover our rapid prototyping process, the tech stack used, as well as how we managed to deliver a production audience-facing project - and where we go from here.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Nuttall</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/live-highlights-in-bbc-iplayer.html</guid><category>PyCon UK 2023</category></item><item><title>Multi-Objective Linear Programming to find the Best Pokémon Team</title><link>https://pyvideo.org/pycon-uk-2023/multi-objective-linear-programming-to-find-the-best-pokemon-team.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is the best Pokémon team? Who should I pick? What attacks should they learn? Here, I use multi-objective linear programming, and a bit of simulation, to figure it out.&lt;/p&gt;
&lt;p&gt;Here I give an example of using Python to solve a combinatorial problem from the mathematical field of Operational Research: How to find the best Pokémon team. Using a variety of Python libraries a mulit-objective linear programming problem is used to find the best combination of Pokémon, and their attacks. PuLP is used to formulate and solve the multi-objective linear programming problems, and a Pareto front is found by varying the importance of each objective. Then, a third objective, a Pokémon team's performance in a Monte Carlo simulation of Pokémon battles, is used to differentiate between Pareto optimal solutions and find the definitive best team of Pokémon. I relate how this fun problem is related to more serious scheduling and timetabling problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geraint Palmer</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/multi-objective-linear-programming-to-find-the-best-pokemon-team.html</guid><category>PyCon UK 2023</category></item><item><title>Open-source, developer-friendly observability in only a few lines code</title><link>https://pyvideo.org/pycon-uk-2023/open-source-developer-friendly-observability-in-only-a-few-lines-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I want a clear picture of how my application is performing in production, but proper observability involves a lot of faff. So let's look at how to add metrics to an application with only a few lines of code and an open-source library called autometrics-py.&lt;/p&gt;
&lt;p&gt;Marie Curie said, “Nothing in life is to be feared, it is only to be understood.”&lt;/p&gt;
&lt;p&gt;For developers, writing code is a big part of our lives. And if we want to understand how the code we write is actually performing out in the wild, then we need to use techniques and tooling from the world of observability.&lt;/p&gt;
&lt;p&gt;This poses a problem for many of us, including myself: Observability tooling is itself fear-inducing!&lt;/p&gt;
&lt;p&gt;Yes, I would love to understand how my code is doing after I release it onto the scary internets. (Please. Tell me. I have no idea.)&lt;/p&gt;
&lt;p&gt;However, the path to an observable codebase is full of easy-to-take wrong turns and very confusing signage. Speaking personally, I needed to get to know the the quirks of a time-series database, determine what to measure (and how to measure it), label my data correctly, and then learn a new query language to generate charts that would help me understand whether or not my app is doing as well as I (really, really) hope it is.&lt;/p&gt;
&lt;p&gt;I am a developer. I’ve been creating web applications for a decade. And yet, before working for an observability company, I still relied mostly on carefully placed log statements to debug my production code.&lt;/p&gt;
&lt;p&gt;This is why I started contributing to autometrics-py, which is a small, open source micro-framework that exposes a cute little python decorator to make implementing observability best practices much, much simpler for developers. (To be clear: I am by no measure an expert in observability, but that’s exactly why I’m excited to share what I’ve learned while helping to make it easier for others.)&lt;/p&gt;
&lt;p&gt;In this talk, we’ll cover what makes observability tricky, especially for devs, and how we can do away with this trickiness by making some smarty-pants assumptions about the type of data we are most interested in. We’ll focus on the unique power of getting metrics at the function level (because who doesn’t love functions?!), and emerge with the confidence of Marie Curie when it comes to understanding the health of our codebase in production.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Beutell</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/open-source-developer-friendly-observability-in-only-a-few-lines-code.html</guid><category>PyCon UK 2023</category></item><item><title>Saturday Welcome and Introductions</title><link>https://pyvideo.org/pycon-uk-2023/saturday-welcome-and-introductions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome and Introductions&lt;/p&gt;
&lt;p&gt;Welcome and Introductions&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ann Barr</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/saturday-welcome-and-introductions.html</guid><category>PyCon UK 2023</category></item><item><title>The Accidental Conference Director</title><link>https://pyvideo.org/pycon-uk-2023/the-accidental-conference-director.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TBC&lt;/p&gt;
&lt;p&gt;TBC&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ann Barr</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/the-accidental-conference-director.html</guid><category>PyCon UK 2023</category></item><item><title>The Sound of Your Footsteps can Predict for Dementia</title><link>https://pyvideo.org/pycon-uk-2023/the-sound-of-your-footsteps-can-predict-for-dementia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will present how one can use acoustic-based clinical gait analysis to predict onset &amp;amp; progression of cognitive decline as well as assess increase in risk of falls in highly frail and vulnerable demographics of the population, especially older adults who live alone and with multiple co-morbidities.&lt;/p&gt;
&lt;p&gt;Do you know how the sound of your footsteps can be used to predict the likelihood of a fatal fall? Do you know that they can also be used to predict whether you will develop dementia in the next 6 months or so?&lt;/p&gt;
&lt;p&gt;This talk will be a gentle introduction to the world of clinical gait analysis and how your gait (a.k.a the way you walk) is a digital biomarker for predicting physical and cognitive health. We will take an strong multidisciplinary approach where we will combine know-how of clinical science, remote monitoring, assistive technology and state-of-art acoustic AI engineering to showcase how this is possible.&lt;/p&gt;
&lt;p&gt;The topics that we will cover are as follows:&lt;/p&gt;
&lt;p&gt;Digital Biomarker Engineering : We will discuss the framework of how you can feature engineer health indictors (&amp;quot;biomarkers&amp;quot;) from data collected by sensors in an IOT ecosystem like PIR, magnetic sensors and even microphones/audio recorders.
Gait Analysis : We will do a crash course on Human Gait to set the foundation required to use gait data to predict for neurodegenerative conditions and cognitive decline.
Acoustic Gait Analysis : We will spend majority of our time here to understand how acoustics engineering and machine learning can help in analysing human gait from just audio recordings to predict for cognitive decline discussed in #2 earlier.
To demonstrate a real life application, I will share how this concept was used to track the progression of dementia of an older adult over the past 2 years.&lt;/p&gt;
&lt;p&gt;I will showcase the tech stack to make this possible.
I will showcase the challenges we faced along the way in undertaking niche research, architecture development, AI development and real-life feedback from the older adult, family members and care-givers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Debayan Das</dc:creator><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-23:/pycon-uk-2023/the-sound-of-your-footsteps-can-predict-for-dementia.html</guid><category>PyCon UK 2023</category></item><item><title>Adventures in Unicode: the `str` less travelled</title><link>https://pyvideo.org/pycon-uk-2023/adventures-in-unicode-the-str-less-travelled.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3's &lt;cite&gt;str&lt;/cite&gt; was a leap forward but not a panacea. Join me to dive into the strange world of unicode, how it can bite you, and what to do about it.&lt;/p&gt;
&lt;p&gt;In Python 3 we finally got a Unicode-native &lt;cite&gt;str&lt;/cite&gt; type throughout, and there was much rejoicing. But Unicode is a tricky beast, difficult to tame, and there are still plenty of ways it can bite you if you are not careful.&lt;/p&gt;
&lt;p&gt;We will look at some of these ways, the eldritch abominations looming in shadowy corners of Python's text; we will discover how the siren-song of seemingly innocuous strings can dash you upon the rocks, the deep peculiarity of the humble flag, and finally come to inner peace and harmony as we understand true grapheme-nature.&lt;/p&gt;
&lt;p&gt;We will then touch on the deeper mysteries of bidirectional text, and our hearts will turn to despair. It will be a fun time.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alistair Lynn</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/adventures-in-unicode-the-str-less-travelled.html</guid><category>PyCon UK 2023</category></item><item><title>Domain Driven Design and Python</title><link>https://pyvideo.org/pycon-uk-2023/domain-driven-design-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you heard of Domain Driven Design? Not well known in the Python world, it's an influential development approach that aims to 'tackle complexity in the heart of software'. If you're working on complex problems, come find out more: it may change the way you think!&lt;/p&gt;
&lt;p&gt;I've been writing code for 25 years. Over that time I've been through a few, rare, exhilarating paradigm shifts where my thinking as a developer suddenly changed. One was early on, when I suddenly understood object oriented programming. Test driven development was another. And then, six years ago, I read Eric Evan's 2003 book Domain Driven Design.&lt;/p&gt;
&lt;p&gt;The book opened up for me a whole new way of thinking about the practice of software development. It is focused not on traditional technical concerns we're used to reading about, but on the conceptual world of modelling. It views an application's domain model as one of its most important assets, and presents a wealth of wisdom about how to orient our thinking, code and working practices around that model.&lt;/p&gt;
&lt;p&gt;But, for some reason, these ideas are not well known in the Python community.&lt;/p&gt;
&lt;p&gt;I now work on a highly complex project: Kraken, a Python monolith of tens of thousands of modules, serving energy and utility companies in a variety of countries. Domain Driven Design has, for me, been an invaluable influence.&lt;/p&gt;
&lt;p&gt;In this talk, I'll outline the key ideas of Domain Driven Design, ideas that are beyond any one language, technology or architecture. I'll also ground it with some practical examples of how it can look in Python. Are you looking for your next paradigm shift? Perhaps this could be it!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Seddon</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/domain-driven-design-and-python.html</guid><category>PyCon UK 2023</category></item><item><title>I plugged a Z80 into a Pi Pico, here's how it happened</title><link>https://pyvideo.org/pycon-uk-2023/i-plugged-a-z80-into-a-pi-pico-heres-how-it-happened.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've always wanted to build a retro computer based on an old-stock Z80 cpu. The biggest roadblock for me in this endeavor has always been finding a way to manage I/O and a modern display.&lt;/p&gt;
&lt;p&gt;The Pi Pico solved all this for me.&lt;/p&gt;
&lt;p&gt;Introducing the Raspberry Pi Pico Z80-Based Retro Computer: A Revolutionary Fusion of Modern Technology, geekiness and Nostalgic Computing!&lt;/p&gt;
&lt;p&gt;Prepare to be blown away by this project, where the almighty Pi Pico take on the role of the ultimate multitasker —a graphics card, clock, ROM, and keyboard controller— for a Z80-based retro computer. Did I ignite your inner geek yet?!&lt;/p&gt;
&lt;p&gt;Imagine a Z80 cpu, like the one that powers the BBC micro but with vibrant 8-bit color graphics coming to life on a VGA screen! All thanks the Raspberry Pi Pico and its PIO capabilities. The Pico in this project has been turned into a somewhat efficient graphics card, enabling smooth rendering of retro-style visuals on modern screens. Experience the nostalgia of blocky pixels.... &lt;strong&gt;in 4K&lt;/strong&gt; (with an HDMI adapter)&lt;/p&gt;
&lt;p&gt;The Raspberry Pi Pico's versatility extends beyond its graphics capabilities. Acting as the clock, it allows for varying the speed of the cpu and do &amp;quot;fancy&amp;quot; things like step by step debugging of Z80 assembly.&lt;/p&gt;
&lt;p&gt;One of the most delightful aspects of the project is using the Pico as a ROM. Gone are the days of meticulously erasing and rewriting chips, as this setup allows you to effortlessly load files instead.&lt;/p&gt;
&lt;p&gt;And with the Pico acting as a USB host, you are free to plug in modern hardware directly into this fancy retro computer! USB keyboard and mouse, SD-card reader, you name it!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emma Delescolle</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/i-plugged-a-z80-into-a-pi-pico-heres-how-it-happened.html</guid><category>PyCon UK 2023</category></item><item><title>Interactive web pages with Django or Flask, without writing Javascript</title><link>https://pyvideo.org/pycon-uk-2023/interactive-web-pages-with-django-or-flask-without-writing-javascript.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bring your Django, Flask, etc. pages to life using htmx.&lt;/p&gt;
&lt;p&gt;No Javascript, nor refreshing the page.  Create, update and delete data; change the date range for a chart; drill down using a sequence of dropdowns; create an interactive search box, an infinite scrolling page or a sortable drag &amp;amp; drop table.&lt;/p&gt;
&lt;p&gt;Python has many excellent back-end frameworks, but we can't use it yet for mainstream front-end development. How do we bring our web pages to life without having to write Javascript, and without learning a front end framework like React or AngularJS?&lt;/p&gt;
&lt;p&gt;The htmx library uses simple tag attributes to add behaviour to HTML tags. It gives you access to AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML for modern user interfaces.&lt;/p&gt;
&lt;p&gt;Learn how, without refreshing the page, you can: create, update and delete data; change the date range for a chart; drill down using a sequence of dropdowns; and create an interactive search box.&lt;/p&gt;
&lt;p&gt;Discover how to use htmx with any Python web framework. The examples will mostly use Django, plus a single example of how to use the same ideas in Flask.&lt;/p&gt;
&lt;p&gt;You will also see how to create an infinite scrolling page, a sortable drag and drop table, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Coen de Groot</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/interactive-web-pages-with-django-or-flask-without-writing-javascript.html</guid><category>PyCon UK 2023</category></item><item><title>Technical Neglect</title><link>https://pyvideo.org/pycon-uk-2023/technical-neglect.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unmanaged technical debt weighs down many codebases, exerting drag on their schedules, but it is more often an effect than a cause. We will look at what technical debt is (and is not) with a view to properly attributing the root and recurring cause as technical neglect than technical debt.&lt;/p&gt;
&lt;p&gt;Many developers evoke the mischievous spirit and day-to-day burden of technical debt to explain the misfortunes and troubles of their codebase and delivery. While unmanaged technical debt weighs down many codebases and exerts drag on their schedules, it is more often an effect than a cause. In this talk, we will look at what is and is not meant by technical debt — and other metaphors — with a view to properly attributing the root and recurring cause as technical neglect than technical debt. Without seeing technical neglect for what it is, we will continue to misattribute our problems to an effect rather than a cause.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevlin Henney</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/technical-neglect.html</guid><category>PyCon UK 2023</category></item><item><title>Vulnerability Management with CVSS</title><link>https://pyvideo.org/pycon-uk-2023/vulnerability-management-with-cvss.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you find it difficult to keep up with the increasing number of reported vulnerabilities? Are you unclear about the severity of a vulnerability in your system? Look no further than the Common Vulnerability Scoring System (CVSS).&lt;/p&gt;
&lt;p&gt;Do you find it difficult to keep up with the increasing number of reported vulnerabilities? Are you unclear about the severity of a vulnerability in your system? Look no further than the Common Vulnerability Scoring System (CVSS).
This standardized framework provides an objective method for scoring security vulnerabilities on a scale from 0 to 10, enabling you to prioritize resources and improve your system's security and resilience. Our talk will demonstrate how to utilize CVSS in Python projects, enabling you to efficiently prioritize efforts and set up automated vulnerability reports. Don't let vulnerabilities go unnoticed - utilize CVSS to enhance your software security today.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomas Horacek</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/vulnerability-management-with-cvss.html</guid><category>PyCon UK 2023</category></item><item><title>What on earth is a code sprint?</title><link>https://pyvideo.org/pycon-uk-2023/what-on-earth-is-a-code-sprint.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monday at PyCon UK is dedicated to [our code sprints](&lt;a class="reference external" href="https://2023.pyconuk.org/sprints/"&gt;https://2023.pyconuk.org/sprints/&lt;/a&gt;). We'd love to have you joining in!&lt;/p&gt;
&lt;p&gt;Code sprints are a fantastic way to get started as an open-source software contributor, in a friendly, supportive environment where experienced contributors are on hand to help others get started.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-09-22:/pycon-uk-2023/what-on-earth-is-a-code-sprint.html</guid><category>PyCon UK 2023</category></item></channel></rss>