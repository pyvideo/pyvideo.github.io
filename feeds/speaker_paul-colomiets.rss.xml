<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 28 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Peer to peer file synchronization for your apps</title><link>https://pyvideo.org/pycon-ukraine-2018/peer-to-peer-file-synchronization-for-your-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody knows there are three data tiers: source code, database, and
cache. In this talk, I’m going to introduce a fourth data tier in
between a database and source code. I.e. it’s cheap to read and always
available like source code but can contain dynamic data, like a
database.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Colomiets</dc:creator><pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/peer-to-peer-file-synchronization-for-your-apps.html</guid></item><item><title>"Vagga" - a containerisation tool without daemons</title><link>https://pyvideo.org/kyivpy/vagga-a-containerisation-tool-without-daemons.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paul Colomiets talking about Vagga (&lt;a class="reference external" href="https://github.com/tailhook/vagga"&gt;https://github.com/tailhook/vagga&lt;/a&gt;) - a containerisation tool without daemons&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Colomiets</dc:creator><pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-25:kyivpy/vagga-a-containerisation-tool-without-daemons.html</guid></item><item><title>Using Rust to build asynchronous IO for Python</title><link>https://pyvideo.org/pycon-ukraine-2016/using-rust-to-build-asynchronous-io-for-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Colomiets</dc:creator><pubDate>Sat, 23 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-23:pycon-ukraine-2016/using-rust-to-build-asynchronous-io-for-python.html</guid></item><item><title>LINUX CONTAINERS ECOSYSTEM</title><link>https://pyvideo.org/pycon-ukraine-2014/linux-containers-ecosystem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker changed the way we do development and deployment. But most people
use it as a black box that do the job most of the time. This is advanced
level talk that explains how linux containers work in depth. What new
perspectives they open. And what new challenges they impose. After this
lecture you might be able to implement your own Docker or to build more
sophisticated tools on top of linux containers. It consists of three
parts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Internals of linux namespaces: system calls and other things behind
containers&lt;/li&gt;
&lt;li&gt;Overview of different container implementations: docker, lxc,
vagrant-lxc, nix...&lt;/li&gt;
&lt;li&gt;New security challenges of namespaces with great emphasis on Docker
and clouds&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Colomiets</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-11-02:pycon-ukraine-2014/linux-containers-ecosystem.html</guid></item></channel></rss>