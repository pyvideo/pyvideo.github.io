<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyGotham 2021</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pygotham-2021.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-02T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Continuous Documentation for your code</title><link href="https://pyvideo.org/pygotham-2021/continuous-documentation-for-your-code.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/continuous-documentation-for-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you document your code? Do you think it is important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you wrote
it, there is always a big possibility that you will have to spend some time
to find out how this code works …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you document your code? Do you think it is important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you wrote
it, there is always a big possibility that you will have to spend some time
to find out how this code works. Or if someone else wrote some code, which
is already in production and your task is to fix a bug in it and there is no
documentation and no one actually knows what this code does.&lt;/p&gt;
&lt;p&gt;There are more benefits of implementing continuous documentation for the
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;easy to onboard new team members,&lt;/li&gt;
&lt;li&gt;easy to share knowledge,&lt;/li&gt;
&lt;li&gt;if this code is open source - easy to start contributing,&lt;/li&gt;
&lt;li&gt;easy to see purpose and motivation of each piece of code,&lt;/li&gt;
&lt;li&gt;easy to keep versioning for each new release of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It this talk I will show the difference between documentation types and will
show a demo in the end of the talk.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Deploying a Django Virtual Event Platform Using Containers and Terraform</title><link href="https://pyvideo.org/pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/deploying-a-django-virtual-event-platform-using-containers-and-terraform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django
application into the Cloud with Fargate. We’ll dive in with how to getting
up and running fast, but leaving the overhead of managing virtual machines
and Kubernetes behind. Create and store the application Docker images …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to leverage cloud native tools and launch a scalable Python and Django
application into the Cloud with Fargate. We’ll dive in with how to getting
up and running fast, but leaving the overhead of managing virtual machines
and Kubernetes behind. Create and store the application Docker images in a
container repository and without touching the AWS console we can create
fully Infrastructure as Code automated deployments via CodePipeline into
Fargate containers and S3 buckets. Deliver the React application via
CloudFront and S3 for full global scalability. Leave the legacy deployments
behind and forge bravely into the new world of Cloud Native applications.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Getting started with Fuzz testing</title><link href="https://pyvideo.org/pygotham-2021/getting-started-with-fuzz-testing.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Vinicius Gubiani Ferreira</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/getting-started-with-fuzz-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is your project safe against unforeseen scenarios? Are you sure? How about
if we take it for a ride then? There is almost no software completely error
free. And catch all of the possible errors is hard, not to say almost
impossible, but what if we use tools that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is your project safe against unforeseen scenarios? Are you sure? How about
if we take it for a ride then? There is almost no software completely error
free. And catch all of the possible errors is hard, not to say almost
impossible, but what if we use tools that help us bring possible issues to
our attention? Those that might cause security issues, or bad user
experience.&lt;/p&gt;
&lt;p&gt;In this presentation I'll discuss how to get started with fuzz testing: The
art of hitting software with invalid, unexpected, or random data and seeing
how it reacts. I'll present valid scenarios for fixing the bugs found, some
of the existing tools, and how to integrate fuzz testing with our existing
tests.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>How to build, test and publish an open source Python library</title><link href="https://pyvideo.org/pygotham-2021/how-to-build-test-and-publish-an-open-source-python-library.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Simon Willison</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/how-to-build-test-and-publish-an-open-source-python-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I currently maintain over 100 Python packages on PyPI. This is a lot! The
secret to managing this many packages is comprehensive automation powered by
GitHub Actions.&lt;/p&gt;
&lt;p&gt;I'll show you how to use cookiecutter, pytest and GitHub Actions to develop a new Python library, add tests, run continuous
integration …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I currently maintain over 100 Python packages on PyPI. This is a lot! The
secret to managing this many packages is comprehensive automation powered by
GitHub Actions.&lt;/p&gt;
&lt;p&gt;I'll show you how to use cookiecutter, pytest and GitHub Actions to develop a new Python library, add tests, run continuous
integration and automatically  publish new releases of
your package to PyPI.&lt;/p&gt;
&lt;p&gt;[Detailed notes to accompany this talk](&lt;a class="reference external" href="https://github.com/simonw/pygotham-packaging"&gt;https://github.com/simonw/pygotham-packaging&lt;/a&gt;)&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Machine Learning without a Ph.D</title><link href="https://pyvideo.org/pygotham-2021/machine-learning-without-a-phd.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Aaron Ma</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/machine-learning-without-a-phd.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demand for Machine Learning (ML) engineers has skyrocketed in recent years,
though are not enough engineers to fulfill that demand. In this talk, we'll
learn the core concepts of ML, then a deep dive into the fascinating world
of neural networks. By the end of this talk, you'll learn …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demand for Machine Learning (ML) engineers has skyrocketed in recent years,
though are not enough engineers to fulfill that demand. In this talk, we'll
learn the core concepts of ML, then a deep dive into the fascinating world
of neural networks. By the end of this talk, you'll learn the tools you need so you
can be one of the highly specialized ML practitioners that FAANG companies
are looking for. Ready to explore the magical world of ML and master it
WITHOUT a Ph.D.? Let's get started.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Making Government Useable by anyone with Pandas, Python and Eland</title><link href="https://pyvideo.org/pygotham-2021/making-government-useable-by-anyone-with-pandas-python-and-eland.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Jay Miller</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/making-government-useable-by-anyone-with-pandas-python-and-eland.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unreadable data can lead to bad perceptions and positive action being
delayed. Some of the most obscure data comes from reporting from local,
state and federal governments. That said the data is there, freely available
and it has to be provided in a consistent (at some level) manner.&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unreadable data can lead to bad perceptions and positive action being
delayed. Some of the most obscure data comes from reporting from local,
state and federal governments. That said the data is there, freely available
and it has to be provided in a consistent (at some level) manner.&lt;/p&gt;
&lt;p&gt;This talk will look at how I made Police Call Records easier to investigate with
Python, Pandas and Eland.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>pyAudioProcessing: Building audio classification models in Python</title><link href="https://pyvideo.org/pygotham-2021/pyaudioprocessing-building-audio-classification-models-in-python.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Jyotika Singh</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/pyaudioprocessing-building-audio-classification-models-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unlike types of data that are more commonly dealt with in the industry these
days, such as numerical data, text or image data, audio signals need a
different approach while trying to extract information and building machine
learning models. This talk will highlight the challenges with Audio
Classification problems …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unlike types of data that are more commonly dealt with in the industry these
days, such as numerical data, text or image data, audio signals need a
different approach while trying to extract information and building machine
learning models. This talk will highlight the challenges with Audio
Classification problems starting with what an audio signal is and what its
numerical representation means, how it is widely different from other data
types, what feature extraction from audio looks like, how to go about it,
what it means and the open-source tools in Python that can be leveraged for
the same. Digital signal processing, that includes audio processing, is a
whole separate field to study and leveraging portions of learning from that
in order to build successful models on audio data is an interesting and
challenging problem. In addition, Matlab is a popular language of choice
with great tools for audio signal processing. Python being a popular
language of choice for Machine Learning presents another set of challenges
to build successful audio and speech classification solutions in Python
alone. Focus will then upon how to build classification models from the
features representing the unseen information from audio and speech signals
and doing it all leveraging different open-source tools available to Python
users. This will be followed by a few examples of different audio
classification and prediction problem statements, such as audio type
classification, music genre classification and spoke location name
classification, and a solution for attempting to solve them using Python
using the different features formation techniques and tools discussed
earlier in the talk.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Securing Django Applications</title><link href="https://pyvideo.org/pygotham-2021/securing-django-applications.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Gajendra Deshpande</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/securing-django-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most popular Python-based web framework used for creating web
applications. The web applications are vulnerable for various reasons
including a) configuration settings of the web applications b) lack of
implementation of security best practices and secure coding and c) lack of
awareness of secure first web …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most popular Python-based web framework used for creating web
applications. The web applications are vulnerable for various reasons
including a) configuration settings of the web applications b) lack of
implementation of security best practices and secure coding and c) lack of
awareness of secure first web applications among developers. The vulnerable
web applications put the data of the customers at greater risk and the
compromised code can lead to problems beyond control. It is very important
to develop secure web applications to protect customer data and code to
mitigate the risk. In this talk, we will focus on two aspects. First,
performing penetration testing on Django web applications to identify
vulnerabilities and scanning for Open Web Application Security Project
(OWASP) Top 10 risks. Second, strategies and configuration settings for
making the source code and Django applications secure. We will also discuss
the Djangohunter tool to identify incorrectly configured Django applications
that are exposing sensitive information.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>The human side of Software</title><link href="https://pyvideo.org/pygotham-2021/the-human-side-of-software.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Josue Balandrano Coronel</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/the-human-side-of-software.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We live in a world of systems, and being software developers, we focus on
the technical things we build. But, we often forget the bigger system that
we are a part of. A system with technical and human parts that we have to
navigate daily. We need to acknowledge …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We live in a world of systems, and being software developers, we focus on
the technical things we build. But, we often forget the bigger system that
we are a part of. A system with technical and human parts that we have to
navigate daily. We need to acknowledge this to truly understand Software and
everything around it.&lt;/p&gt;
&lt;p&gt;In this talk I'll go over the different ways our own preconceptions and
humanity affects how we build software. By doing this we can see the entire
system we are a part of from up above, understand , and navigate it better
to ultimately change it for the better.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Write Docs Devs Love: Ten Tricks To Level Up Your Tech Writing</title><link href="https://pyvideo.org/pygotham-2021/write-docs-devs-love-ten-tricks-to-level-up-your-tech-writing.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Mason Egger</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/write-docs-devs-love-ten-tricks-to-level-up-your-tech-writing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Think of that feeling you get when you follow an online tutorial or
documentation and the code works on the first run. Now think of all the
hours spent wasted following broken, outdated, or incomplete documentation.
From our favorite tutorials to bad product docs we all consume technical
writing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Think of that feeling you get when you follow an online tutorial or
documentation and the code works on the first run. Now think of all the
hours spent wasted following broken, outdated, or incomplete documentation.
From our favorite tutorials to bad product docs we all consume technical
writing. Tutorials, blog posts, and product docs help developers learn new
things, build projects, and debug issues. But what makes one tutorial better
than another? In this talk I'll discuss how you can write the documentation
that developers love and I’ll share 10 tips and tricks to improve your
technical writing.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Animating Visualizations in Python</title><link href="https://pyvideo.org/pygotham-2021/animating-visualizations-in-python.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Reshama Shaikh</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/animating-visualizations-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[Plotly](&lt;a class="reference external" href="https://plotly.com/python/"&gt;https://plotly.com/python/&lt;/a&gt;) is a versatile, open-source python
graphing library which lets us make interactive graphs.  It is built on top
of the [Plotly JavaScript library](plotly.js).  In this talk, I will show
how to go from a typical static visualization to one enriched with
animations …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[Plotly](&lt;a class="reference external" href="https://plotly.com/python/"&gt;https://plotly.com/python/&lt;/a&gt;) is a versatile, open-source python
graphing library which lets us make interactive graphs.  It is built on top
of the [Plotly JavaScript library](plotly.js).  In this talk, I will show
how to go from a typical static visualization to one enriched with
animations.&lt;/p&gt;
&lt;p&gt;Here is an [example of an animated line
plot](&lt;a class="reference external" href="https://twitter.com/reshamas/status/1404881262867779586"&gt;https://twitter.com/reshamas/status/1404881262867779586&lt;/a&gt;) using plotly.&lt;/p&gt;
&lt;p&gt;I will share how you can get started creating your own animated plot in
python!&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Assessing and mitigating unfairness in AI systems</title><link href="https://pyvideo.org/pygotham-2021/assessing-and-mitigating-unfairness-in-ai-systems.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Manojit Nandi</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/assessing-and-mitigating-unfairness-in-ai-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While fairness has become an increasingly popular topic in machine learning
and data science, many data scientist struggle with how to incorporate
fairness assessments and unfairness techniques into their work. We will
cover formal frameworks for assessing ML systems for fairness-related harms
and how to apply different algorithmic techniques …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While fairness has become an increasingly popular topic in machine learning
and data science, many data scientist struggle with how to incorporate
fairness assessments and unfairness techniques into their work. We will
cover formal frameworks for assessing ML systems for fairness-related harms
and how to apply different algorithmic techniques for mitigating unfairness
in trained models.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Building quality data pipelines</title><link href="https://pyvideo.org/pygotham-2021/building-quality-data-pipelines.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Matthew Eng</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/building-quality-data-pipelines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with data can be daunting when making code changes. As we make
transformational changes to our data, how do we know that the quality of our
data is preserved? Performing these transformations on large datasets can be
even more daunting, as the number of areas that could have …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with data can be daunting when making code changes. As we make
transformational changes to our data, how do we know that the quality of our
data is preserved? Performing these transformations on large datasets can be
even more daunting, as the number of areas that could have been affected.
The number of areas to troubleshoot can be numerous, making it time-
consuming to identify the root cause to be fixed.&lt;/p&gt;
&lt;p&gt;Instead of going through a manual checklist of data points and features to
check, this talk will walk through a framework for how you can readily apply
testing to ensure that any data transformations we make are accurate, and&lt;/p&gt;
&lt;p&gt;This talk is for anyone working with datasets where maintaining the quality
of our data i&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Graphs for Data Science with NetworkX</title><link href="https://pyvideo.org/pygotham-2021/graphs-for-data-science-with-networkx.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Bruno Gonçalves</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/graphs-for-data-science-with-networkx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphs are simple concepts: a set of individual Nodes (components) connected
by Edges (relationships). In this very simplicity lies their power. They can
describe the structure of our friendships, connections between airports, the
spread of diseases from person to person, the relation of one concept to
another, how species …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphs are simple concepts: a set of individual Nodes (components) connected
by Edges (relationships). In this very simplicity lies their power. They can
describe the structure of our friendships, connections between airports, the
spread of diseases from person to person, the relation of one concept to
another, how species interact in an ecosystem or how computers communicate
to form the World Wide Web.&lt;/p&gt;
&lt;p&gt;Networks are the fundamental language of our increasingly complex world and
the key to successfully understand it. By exploring in detail the way graphs
can be used to explore, describe, analyze and understand empirical datasets
we will put you at the forefront of this growing field.&lt;/p&gt;
&lt;p&gt;In this lecture we will use Python's NetworkX to build our understanding of
network representations and algorithms by exploring real world network
datasets such as the airline transportation network, the bitcoin transaction
network, the road network of open street map, etc. Through this practical
approach attendees will better understand the fundamental ideas and concepts
that lie at the base of  our increasingly complex world and take the first
steps towards being at the forefront of this growing field.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>How we dealt with poor code analysis support in our generator, metaclasses, and code generation heavy projects</title><link href="https://pyvideo.org/pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Vladimir Losev</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/how-we-dealt-with-poor-code-analysis-support-in-our-generator-metaclasses-and-code-generation-heavy-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Projects that heavily rely on such Python features as metaclasses,
decorators, or code-generation face a problem of poor support by static code
analysis tools. This results in little to no suggestions in IDE or broken
mypy tests.&lt;/p&gt;
&lt;p&gt;We'll talk about how we addressed this issue on our open-source
[&lt;a class="reference external" href="https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit"&gt;https …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Projects that heavily rely on such Python features as metaclasses,
decorators, or code-generation face a problem of poor support by static code
analysis tools. This results in little to no suggestions in IDE or broken
mypy tests.&lt;/p&gt;
&lt;p&gt;We'll talk about how we addressed this issue on our open-source
[&lt;a class="reference external" href="https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit"&gt;https://github.com/Toloka/toloka-kit](https://github.com/Toloka/toloka-kit&lt;/a&gt;)
and [&lt;a class="reference external" href="https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit"&gt;https://github.com/Toloka/crowd-kit](https://github.com/Toloka/crowd-kit&lt;/a&gt;)
projects.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Keeping code safe and modern with semantic searches</title><link href="https://pyvideo.org/pygotham-2021/keeping-code-safe-and-modern-with-semantic-searches.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/keeping-code-safe-and-modern-with-semantic-searches.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linting helps us avoid common mistakes and use our team's preferred style
and syntax. Deprecation warnings help us know that changes may be coming
soon and offer suggestions about how to migrate.&lt;/p&gt;
&lt;p&gt;Existing linting tools and deprecation systems aren't always customizable or
extensible to organization-specific checks. Some constructs are …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linting helps us avoid common mistakes and use our team's preferred style
and syntax. Deprecation warnings help us know that changes may be coming
soon and offer suggestions about how to migrate.&lt;/p&gt;
&lt;p&gt;Existing linting tools and deprecation systems aren't always customizable or
extensible to organization-specific checks. Some constructs are also
difficult to search for with regular expressions, which is a common
configuration offering.&lt;/p&gt;
&lt;p&gt;The time leading up to and during a migration often becomes a pain, leading
to all-at-once changes that slow teams down. Can we do better?&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>On the Use and Misuse of Decorators</title><link href="https://pyvideo.org/pygotham-2021/on-the-use-and-misuse-of-decorators.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/on-the-use-and-misuse-of-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most fraught questions in Python is “What is a decorator?”. Most
answers are simple, easy to understand, and wrong. So what's the right
answer?&lt;/p&gt;
&lt;p&gt;Decorators like &lt;cite&gt;&amp;#64;wraps&lt;/cite&gt; or &lt;cite&gt;&amp;#64;classmethod&lt;/cite&gt; change the behaviour of a
callable, and do so by returning a new callable. Other decorators, like …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most fraught questions in Python is “What is a decorator?”. Most
answers are simple, easy to understand, and wrong. So what's the right
answer?&lt;/p&gt;
&lt;p&gt;Decorators like &lt;cite&gt;&amp;#64;wraps&lt;/cite&gt; or &lt;cite&gt;&amp;#64;classmethod&lt;/cite&gt; change the behaviour of a
callable, and do so by returning a new callable. Other decorators, like
&lt;cite&gt;&amp;#64;property&lt;/cite&gt; accept a callable, but leave something completely different in
their place.&lt;/p&gt;
&lt;p&gt;This flexibility isn’t just there for decorators that come with Python. You
can use this flexibility in your own decorators, and it offers the potential
for you to build interesting and unexpected new behaviour.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at why Python has decorators, and how you can build
them.&lt;/p&gt;
&lt;p&gt;We’ll look at how some more popular decorators in Python do what they do.
Finally, we’ll look at how to harness decorators to do unexpected and
potentially horrible things with Python.&lt;/p&gt;
&lt;p&gt;After this talk, you’ll know how decorators work, how to write your own
decorators, and how decorators enable you to do extremely weird things in
Python. Most importantly, you’ll understand how to use decorators
responsibly, and definitely not to confuse your friends and colleagues.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Prioritizing Pandemic Rates with Python: Connecting generalized disease modeling to optimization in a pandemic world</title><link href="https://pyvideo.org/pygotham-2021/prioritizing-pandemic-rates-with-python-connecting-generalized-disease-modeling-to-optimization-in-a-pandemic-world.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Madelyn Kapfhammer</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/prioritizing-pandemic-rates-with-python-connecting-generalized-disease-modeling-to-optimization-in-a-pandemic-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A backbone of traditional epidemiology is the Susceptible-Infected-Recovered
(SIR) model for infectious disease spread. SIR models allow for the
mathematical depiction and interpretation of infection dynamics with three
general parameters of susceptible, infected, and recovered individuals for a
given disease system. While SIR models are a unique and commonly …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A backbone of traditional epidemiology is the Susceptible-Infected-Recovered
(SIR) model for infectious disease spread. SIR models allow for the
mathematical depiction and interpretation of infection dynamics with three
general parameters of susceptible, infected, and recovered individuals for a
given disease system. While SIR models are a unique and commonly used type
of infectious disease modeling, uncertainty is almost always present in
determining optimal control of pandemics. At the initial outbreak of a
disease, disease rates--including transmission rate, recovery rate, death
rate, and host arrival rate--are often unknown, making it difficult for
researchers to understand the ideal end results. Consequently, then public
health and medical officials are unable to make informed decisions on
treatment options and safety measures to put in place to ensure the health
of the affected populations. There has been a push to predict ideal disease
rates associated with a specific system, allowing researchers to devise
proper public health protocols to achieve these rates and the highest
amounts of recovered individuals for an outbreak. With a clear indication of
how a disease is transmitted, how individuals in a population interact, and
how hosts recover/suffer from infection and proper modeling, interventions
can combat disease outbreaks, epidemics, and pandemics. As it is difficult
to create SIR models with optimal disease transmission, recovery, death, and
host arrival rates, PandemicPriority is a generalized tool which
computationally determines optimal values for each of these rates through
randomized search for the future development of infectious disease
treatments and interventions.&lt;/p&gt;
&lt;p&gt;This talk will outline my journey as a student in Biology and Computer
Science while I was struggling to combine my passions in both fields. How is
it that Python can connect to traditional disease modeling? PandemicPriority
gave me the opportunity to understand the complexities of Python programming
for optimizing disease models, paving the way towards my interest in
computational epidemiology.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Python Typing Koans</title><link href="https://pyvideo.org/pygotham-2021/python-typing-koans.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>R.Kracekumar</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/python-typing-koans.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gradual typing was introduced in Python 3.5 standard library. Since then a
lot of standard library changes, new PEPs, third-party libraries added
support to type-hints. The flask 2.0 supports type-hints, SQLAlchemy,
Django(through the third-party stubs ) and a lot more of the libraries
support gradual typing.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gradual typing was introduced in Python 3.5 standard library. Since then a
lot of standard library changes, new PEPs, third-party libraries added
support to type-hints. The flask 2.0 supports type-hints, SQLAlchemy,
Django(through the third-party stubs ) and a lot more of the libraries
support gradual typing.&lt;/p&gt;
&lt;p&gt;The resources to learn gradual typing are minimal and available in form of
talks. I have built a self-exploratory way to learn Python typing using the
TDD/koans concept, [Python Typing
Koans](&lt;a class="reference external" href="https://github.com/kracekumar/python-typing-koans"&gt;https://github.com/kracekumar/python-typing-koans&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The materials has koans for learn typing the pure python code, Django code,
Django Rest Framework.&lt;/p&gt;
&lt;p&gt;[Here is a small demo video](&lt;a class="reference external" href="https://asciinema.org/a/419119"&gt;https://asciinema.org/a/419119&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this 10 minutes talk, I'll show how to use the tool to learn gradual
typing with hand-picked examples from a wide range of topics by
adding/modifying the existing Python code and type-annotation.&lt;/p&gt;
&lt;p&gt;Note: Gradual typing, type-hints, optional static typing all refers to the
same concept.&lt;/p&gt;
&lt;p&gt;Links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Repo: [&lt;a class="reference external" href="https://github.com/kracekumar/python-typing-koans](https://github.com/kracekumar/python-typing-koans"&gt;https://github.com/kracekumar/python-typing-koans](https://github.com/kracekumar/python-typing-koans&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Demo Video: [&lt;a class="reference external" href="https://asciinema.org/a/419119](https://asciinema.org/a/419119"&gt;https://asciinema.org/a/419119](https://asciinema.org/a/419119&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Stupid Things I've Done with Python</title><link href="https://pyvideo.org/pygotham-2021/stupid-things-ive-done-with-python.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/stupid-things-ive-done-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On every computer I've had for the past 20 years, I've created a folder
called &amp;quot;stupid python tricks&amp;quot;. It's where I put code that should never see
the light of day. Code that abuses advanced features like decorators,
metaclasses, and dynamic typing to do terrible things. Code I'm going …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On every computer I've had for the past 20 years, I've created a folder
called &amp;quot;stupid python tricks&amp;quot;. It's where I put code that should never see
the light of day. Code that abuses advanced features like decorators,
metaclasses, and dynamic typing to do terrible things. Code I'm going to
teach you.&lt;/p&gt;
&lt;p&gt;I have a [GitHub repository](&lt;a class="reference external" href="https://github.com/judy2k/stupid-python-tricks"&gt;https://github.com/judy2k/stupid-python-tricks&lt;/a&gt;)
that contains a compilation of all the awful code I've written over the
years, abusing features like metaclasses, decorators, various __dunder__
methods, and the mutable nature of Python's underlying data structures.&lt;/p&gt;
&lt;p&gt;It's a funny way to see how Python works under the hood, but it's also
educational.&lt;/p&gt;
&lt;p&gt;Really!&lt;/p&gt;
&lt;p&gt;Each of the tricks is entertainingly terrible. But they're also mostly self-
contained ways to see what happens when you override certain behaviours of
the Python language. Anyone with an intermediate level of Python
understanding should be able to follow along and learn something.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>The Wonderful World of Data Quality Tools in Python</title><link href="https://pyvideo.org/pygotham-2021/the-wonderful-world-of-data-quality-tools-in-python.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Sam Bail</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/the-wonderful-world-of-data-quality-tools-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk takes you on a whirlwind tour of data quality tools in Python.
Data quality has been a hot topic for a while, and there are several open
source Python-based packages out there that all cover different aspects of
the broad concept we call &amp;quot;data quality&amp;quot;. But - which …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk takes you on a whirlwind tour of data quality tools in Python.
Data quality has been a hot topic for a while, and there are several open
source Python-based packages out there that all cover different aspects of
the broad concept we call &amp;quot;data quality&amp;quot;. But - which one is the right tool
for my use case? What do these tools do (or not do), and how do I know which
one to pick?&lt;/p&gt;
&lt;p&gt;We'll first dive into a classification of the different types of data
quality tools in the space, before looking at some hands-on examples of some
of the most prominent packages. We'll be making brief stops at tools like
pydqc, datagristle, bulwark, dvc, dedupe, and Great Expectations, and see
hands-on demos of each tool. The audience will walk away with a better
understanding of &amp;quot;what's out there&amp;quot; and a little boost to get started using
their tool of choice!&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>There Are Python 2 Relics in Your Code</title><link href="https://pyvideo.org/pygotham-2021/there-are-python-2-relics-in-your-code.html" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Miroslav Šedivý</name></author><id>tag:pyvideo.org,2021-10-01:/pygotham-2021/there-are-python-2-relics-in-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Should we return to Python 2? No? Then why don't you get rid of those Python
2 relics from your code?&lt;/p&gt;
&lt;p&gt;Migration to Python 3 is over, but that's not the end of the journey.
Although your code runs with the currently supported Python 3.6 to 3.9 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Should we return to Python 2? No? Then why don't you get rid of those Python
2 relics from your code?&lt;/p&gt;
&lt;p&gt;Migration to Python 3 is over, but that's not the end of the journey.
Although your code runs with the currently supported Python 3.6 to 3.9 (and
upcoming 3.10), there may be some pieces of code that look obvious to you,
but may surprise younger developers who have never seen Python 2 code.&lt;/p&gt;
&lt;p&gt;Earlier this year, I helped dozens of Python projects on GitHub to get rid
of those Python 2 relics. I'll show you a few recipes beyond the automatic
tools, how to make your code modern and prepared for future updates.&lt;/p&gt;
&lt;p&gt;And no, we should not return to Python 2. We should get rid of it
completely.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry></feed>