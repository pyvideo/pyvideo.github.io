<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dane-hillard.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-24T00:00:00+00:00</updated><entry><title>Lightning Talks Day 2</title><link href="https://pyvideo.org/djangocon-us-2019/lightning-talks-day-2.html" rel="alternate"></link><published>2019-09-24T00:00:00+00:00</published><updated>2019-09-24T00:00:00+00:00</updated><author><name>Adem Gaygusuz</name></author><id>tag:pyvideo.org,2019-09-24:djangocon-us-2019/lightning-talks-day-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks by Kojo Idrissa&lt;/p&gt;
&lt;p&gt;Adem Gaygusuz 00:00
Laura Lorenz 5:24
Micah Lyle 10:23
Vince Salvino 15:14
Russell Keith-Magee 20:24
Brad Martsberger 25:19
Jeremy Gatens 30:21
Dane Hillard 35:31
Caleb Collins-Parks 40:27&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Kojo Idrissa ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://kojoidrissa.com/"&gt;http://kojoidrissa.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</summary></entry><entry><title>Using a custom template loader at scale</title><link href="https://pyvideo.org/djangocon-us-2019/using-a-custom-template-loader-at-scale.html" rel="alternate"></link><published>2019-09-23T00:00:00+00:00</published><updated>2019-09-23T00:00:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2019-09-23:djangocon-us-2019/using-a-custom-template-loader-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Using a custom template loader at scale by Dane Hillard&lt;/p&gt;
&lt;p&gt;You can reuse Django templates with the &lt;cite&gt;{% include %}&lt;/cite&gt; tag. But what if you need to share a template across multiple projects? Learn how we built a custom template loader to ship template changes â€” all without deploying any code.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/using-a-custom-template-loader-at-scale/"&gt;https://2019.djangocon.us/talks/using-a-custom-template-loader-at-scale/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Dane Hillard ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/easyaspython"&gt;https://twitter.com/easyaspython&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://dane.engineering"&gt;https://dane.engineering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</summary></entry><entry><title>Adopt-a-pytest</title><link href="https://pyvideo.org/pyohio-2019/adopt-a-pytest.html" rel="alternate"></link><published>2019-07-27T11:15:00+00:00</published><updated>2019-07-27T11:15:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/adopt-a-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest is a testing framework that makes writing and running Python
tests simpler. Adopting new tooling in a large system is often a burden.
How can you introduce pytest gradually with minimal pain?&lt;/p&gt;
&lt;div class="section" id="who"&gt;
&lt;h4&gt;Who&lt;/h4&gt;
&lt;p&gt;This is for anyone currently using &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for Python unit testing
that would like to adopt &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaways"&gt;
&lt;h4&gt;Takeaways&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to run &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;How to create a basic &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; configuration&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; marks to shim an existing project&lt;/li&gt;
&lt;li&gt;Converting a &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; test to &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h4&gt;What&lt;/h4&gt;
&lt;p&gt;With its simplified syntax, powerful fixture behaviors, detailed test
reports, and plugin-based architecture, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; has a lot to offer.
Whether you're new to Python unit testing or you've been using
&lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for a while, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; may be something to consider. It's
not too hard to get up and running with &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; on a fresh project,
but how can you retrofit an existing project without having to refactor
the world all at once?&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Serverless Django with Zappa</title><link href="https://pyvideo.org/djangocon-us-2018/serverless-django-with-zappa.html" rel="alternate"></link><published>2018-10-16T00:00:00+00:00</published><updated>2018-10-16T00:00:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2018-10-16:djangocon-us-2018/serverless-django-with-zappa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A common set of considerations when planning to release a new
application are around hosting and resources:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which platforms will support my app?&lt;/li&gt;
&lt;li&gt;What OS should I use?&lt;/li&gt;
&lt;li&gt;What WSGI server should I use?&lt;/li&gt;
&lt;li&gt;How much memory and CPU do I need?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Zappa, a framework for running serverless WSGI applications on top of
AWS Lambda, can help address these and other questions around
application deployment. With some configuration (as code), Zappa can get
you up and running quickly, letting you focus on developing the
application instead of the infrastructure.&lt;/p&gt;
&lt;p&gt;In this talk weâ€™ll go through some of these kinds of questions to see
how they might be answered in traditional solutions and then see how
Zappa handles them. Weâ€™ll also talk about a few specific configuration
options for handling SSL certificates and running Django commands on the
Zappa-deployed application.&lt;/p&gt;
</summary></entry></feed>