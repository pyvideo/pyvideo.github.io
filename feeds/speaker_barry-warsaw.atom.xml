<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Barry Warsaw</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_barry-warsaw.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Tai Chi Principles for Mindful Programmers</title><link href="https://pyvideo.org/kiwi-pycon-2016/tai-chi-principles-for-mindful-programmers.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2016-09-11:/kiwi-pycon-2016/tai-chi-principles-for-mindful-programmers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Barry Warsaw
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/141/"&gt;https://kiwi.pycon.org/schedule/presentation/141/&lt;/a&gt;
I've been playing music all my life, programming for almost 40 years, using Python for more than 20, and studying tai chi for nearly 15.  These life-long pursuits continue to reveal their truths as fun and interesting vocations and avocations …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Barry Warsaw
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/141/"&gt;https://kiwi.pycon.org/schedule/presentation/141/&lt;/a&gt;
I've been playing music all my life, programming for almost 40 years, using Python for more than 20, and studying tai chi for nearly 15.  These life-long pursuits continue to reveal their truths as fun and interesting vocations and avocations.  My study of tai chi has had particularly profound consequences and in this talk I'll explore some of its applications to the world of programming.&lt;/p&gt;
</content><category term="Kiwi PyCon 2016"></category></entry><entry><title>Python Steering Council Panel</title><link href="https://pyvideo.org/pybay-2019/python-steering-council-panel.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-08-17:/pybay-2019/python-steering-council-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Mailman 3</title><link href="https://pyvideo.org/pycon-us-2012/mailman-3.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2012-03-10:/pycon-us-2012/mailman-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mailman 3 has been in development for several years. This is an
evolution of the ever popular mailing list management system that runs
thousands of mailing lists around the world. This talk describes how the
code has been modernized and how the architectural deficiencies of
Mailman 2 have been …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mailman 3 has been in development for several years. This is an
evolution of the ever popular mailing list management system that runs
thousands of mailing lists around the world. This talk describes how the
code has been modernized and how the architectural deficiencies of
Mailman 2 have been addressed using REST and other technologies. This is
a spinoff from the AOSA chapter on Mailman 3.&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>aiosmtpd - A better asyncio based SMTP server</title><link href="https://pyvideo.org/pycon-us-2017/aiosmtpd-a-better-asyncio-based-smtp-server.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2017-05-21:/pycon-us-2017/aiosmtpd-a-better-asyncio-based-smtp-server.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;smtpd.py has been in the standard library for many years. It's been a
common tool for deploying SMTP and LMTP servers that handle email-based
communication in Python, providing both basic protocol implementations
and a fundamental module for higher level tools, such as lazr.smtptest
for testing email clients …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;smtpd.py has been in the standard library for many years. It's been a
common tool for deploying SMTP and LMTP servers that handle email-based
communication in Python, providing both basic protocol implementations
and a fundamental module for higher level tools, such as lazr.smtptest
for testing email clients. Based on asyncore and asynchat, smtpd.py is
showing its age, and its API is unwieldy.&lt;/p&gt;
&lt;p&gt;Fortunately, there's a new alternative available. aiosmtpd is a modern
reinvention based on asyncio, with all the improvements that come along
with such a new implementation. It provides servers for both the SMTP
and LMTP protocols, as well as a higher level &amp;quot;controller&amp;quot; API for
testing SMTP and LMTP clients. It exposes a much better API for
customization, allowing the user to associate a simple &amp;quot;handler&amp;quot; to
process incoming messages without having to worry about the details of
the protocols, and it provides some useful hooks for subclassing.&lt;/p&gt;
&lt;p&gt;This talk will describe the purpose and history of smtpd.py and
aiosmtpd, show how users can extend the servers and implement
specialized handlers, and show how applications can use the testing API
for ensuring that their email sending applications do the right things.
Examples will be taken from GNU Mailman 3, which uses aiosmtpd
extensively.&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Get your resources faster, with importlib.resources</title><link href="https://pyvideo.org/pycon-us-2018/get-your-resources-faster-with-importlibresources.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2018-05-12:/pycon-us-2018/get-your-resources-faster-with-importlibresources.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Resources are files that live within Python packages.  Think test data files, certificates, templates, translation catalogs, and other static files you want to access from Python code.  Sometimes you put these static files in a package directory within your source tree, and then locate them by importing the package …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Resources are files that live within Python packages.  Think test data files, certificates, templates, translation catalogs, and other static files you want to access from Python code.  Sometimes you put these static files in a package directory within your source tree, and then locate them by importing the package and using its &lt;cite&gt;__file__&lt;/cite&gt; attribute.  But this doesn't work for zip files!&lt;/p&gt;
&lt;p&gt;You could use &lt;cite&gt;pkg_resources&lt;/cite&gt;, an API that comes with &lt;cite&gt;setuptools&lt;/cite&gt; and hides the differences between files on the file system and files in a zip file.  This is great because you don't have to use &lt;cite&gt;__file__&lt;/cite&gt;, but it's not so great because &lt;cite&gt;pkg_resources&lt;/cite&gt; is a big library and can have potentially severe performance problems, even at import time.&lt;/p&gt;
&lt;p&gt;Welcome to &lt;cite&gt;importlib.resources&lt;/cite&gt;, a new module and API in Python 3.7 that is also available as a standalone library for older versions of Python.  &lt;cite&gt;importlib.resources&lt;/cite&gt; is build on top of Python's existing import system, so it is very efficient.  It also defines an abstract base class which loaders can implement to provide their own resource access.  Python's built-in zipimporter uses this to provide efficient access to resources within a zip file.  Third party import hooks can do the same, so resources can come from anything that is importable by Python.&lt;/p&gt;
&lt;p&gt;This talk will step through the motivations behind &lt;cite&gt;importlib.resources&lt;/cite&gt;, the library's usage, its interfaces, and the hooks made available to third party packages.  It will also talk about the minor differences between the standalone version and the version in Python 3.7's standard library.  Hopefully audience members will come away with compelling reasons to port their code to this much more efficient library.&lt;/p&gt;
</content><category term="PyCon US 2018"></category></entry><entry><title>Python Steering Council - Keynote - PyCon 2019</title><link href="https://pyvideo.org/pycon-us-2019/python-steering-council-keynote-pycon-2019.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2019-05-05:/pycon-us-2019/python-steering-council-keynote-pycon-2019.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Steering Council Keynote panel&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="keynote"></category><category term="steering council"></category><category term="panel"></category></entry><entry><title>Steering Council Panel</title><link href="https://pyvideo.org/pycon-us-2024/steering-council-panel.html" rel="alternate"></link><published>2024-05-19T00:00:00+00:00</published><updated>2024-05-19T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2024-05-19:/pycon-us-2024/steering-council-panel.html</id><content type="html"></content><category term="PyCon US 2024"></category></entry><entry><title>Python Steering Council Panel</title><link href="https://pyvideo.org/pycon-us-2025/python-steering-council-panel.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/python-steering-council-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Steering Council is a 5-person elected committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Steering Council is a 5-person elected committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;Presented by: Barry Warsaw, Donghee Na, Gregory P Smith, Pablo Galindo Salgado, (Steering Council member not present: Emily Morehouse)&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Reinventing the Wheel: A Community-Driven Roadmap for Python Packaging</title><link href="https://pyvideo.org/pycon-us-2025/reinventing-the-wheel-a-community-driven-roadmap-for-python-packaging.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Jonathan Dekhtiar</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/reinventing-the-wheel-a-community-driven-roadmap-for-python-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem thrives on innovation, adaptability, versatility and a thriving open-source community. Python’s reach continues to evolve, fueled today by custom silicon, variations within CPU architecture families, AI accelerators, and diverse use cases. The Wheel format and packaging tools should adapt and evolve to better support the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem thrives on innovation, adaptability, versatility and a thriving open-source community. Python’s reach continues to evolve, fueled today by custom silicon, variations within CPU architecture families, AI accelerators, and diverse use cases. The Wheel format and packaging tools should adapt and evolve to better support the Python community.&lt;/p&gt;
&lt;p&gt;We’ll review the most potent challenges in the Python packaging ecosystem, and present our roadmap for adapting the Wheel format to enable native support for specialized hardware, the use of non-default Python package indexes, and managing diverse compute backends, all while maintaining the accessibility and simplicity Python is known for.We'll issue a call to action from the open source community, supported by important libraries such as PyTorch, JAX, Scikit-learn, etc. This is a unified roadmap for the future of Python packaging, and present published and draft PEPs.
Description&lt;/p&gt;
&lt;p&gt;Managing software stacks in complex compute environments is difficult. Often the standard wheel tags aren’t sufficient to describe your exact compute environment. These are common problems for many users, are often difficult to remedy, and even more difficult to make reproducible, easy to use, and composable.&lt;/p&gt;
&lt;p&gt;We propose to “Re-Invent the Wheel” and have founded the “Wheel Next” interest group as an open source collaboration among different users, companies, packages, and maintainers that are working together on solutions to these difficult problems. We are actively publishing PEPs that extend the Wheel format, metadata, packaging tooling, and PyPI standards, and contribute to projects that help with various aspects of the problem space, including installers and indexes.&lt;/p&gt;
&lt;p&gt;In addition, we’ll give a call to action for everyone interested in joining the initiative and helping us evolve and build the packaging ecosystem the Python world needs today and in the future.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>