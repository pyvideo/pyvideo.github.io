<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyCascades 2023</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycascades-2023.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-03-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Cloud Infrastructure From Python Code: How Far Could We Go?</title><link href="https://pyvideo.org/pycascades-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Asher Sterkin</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure From Code (IfC) is a relatively new trend in Cloud DevOps automation aiming at the automatic generation of cloud deployment templates directly from the application code. There are already several solutions primarily focused on the TypeScript programming language. This talk is about what could be done for the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure From Code (IfC) is a relatively new trend in Cloud DevOps automation aiming at the automatic generation of cloud deployment templates directly from the application code. There are already several solutions primarily focused on the TypeScript programming language. This talk is about what could be done for the Python ecosystem.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Fear the Mutants. Love the Mutants</title><link href="https://pyvideo.org/pycascades-2023/fear-the-mutants-love-the-mutants.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Max Kahan</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/fear-the-mutants-love-the-mutants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage is a great metric - how much of your code is actually tested by your unit tests. However, this doesn’t tell you how good your tests actually are at picking up changes to your codebase - if your tests aren’t well thought-out, it’s possible for changes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage is a great metric - how much of your code is actually tested by your unit tests. However, this doesn’t tell you how good your tests actually are at picking up changes to your codebase - if your tests aren’t well thought-out, it’s possible for changes to get past your unit tests but break production.&lt;/p&gt;
&lt;p&gt;Mutation testing is a great (and massively underrated) way to understand how valuable your tests are. Mutation score quantifies how much trust you should put in your tests to stop mutant versions of your code escaping from your lab and wreaking havoc in production. In this talk, I’ll show you examples of how to get started with mutation testing and how to integrate it into your CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;After the session, you’ll be ready to use mutation testing with wild abandon and you'll be ready to integrate it into your release engineering process, testing your mutant code without needing to set foot in the lab at all!&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Lightning Talks (PyCascades 2023)</title><link href="https://pyvideo.org/pycascades-2023/lightning-talks-pycascades-2023.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Jim De la Hunt</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/lightning-talks-pycascades-2023.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jim De la Hunt
Lightning Talk: Global domain names and email addresses, or, email me at जिम&amp;#64;डाटामेल.भारत . Alerting people that non-ASCII domain names are in use and spreading. Our code should be able to handle them. Python tools and online resources …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jim De la Hunt
Lightning Talk: Global domain names and email addresses, or, email me at जिम&amp;#64;डाटामेल.भारत . Alerting people that non-ASCII domain names are in use and spreading. Our code should be able to handle them. Python tools and online resources to get domain names and email right.&lt;/p&gt;
&lt;p&gt;Speaker: Wes Lord
Lightning Talk: The surprising alternative to git rebase (it's git reset)&lt;/p&gt;
&lt;p&gt;Speaker: Sam Edwardes
Lightning Talk: How to do &amp;quot;everything&amp;quot; with Pydantic. I want walk the audience through using Pydantic to do a few really cool things including: (1) parsing JSON into python objects, (2) validating data, (3) refactoring your code, (4) talking to a SQL database&lt;/p&gt;
&lt;p&gt;Speaker: Tony Fast
Lightning Talk: Important digital accessibility language, standards, and tools for designing inclusive technology . Attendees will learn community and industry standards for auditing and understanding web content accessibility guidelines.&lt;/p&gt;
&lt;p&gt;Speaker: Mariatta Wijaya
Lightning Talk: PyCon US 2023: the 20 years celebration special. I will tell attendees about info about PyCon US 2023: registration, schedule, venue, etc. While this year's travel grant application has closed, it's still worth knowing that it exists and I will share how attendees can stay updated on PyCon US news so they can apply for next year's travel grants. I'll also share how attending PyCon has impacted my personal growth and career and opens up opportunities, and I would love for more people to have the same experience by attending PyCon US.&lt;/p&gt;
&lt;p&gt;Speaker: Robin Reynolds-Haertle
Lightning Talk: Yellowstone Codera - Python programming puzzles with a Yellowstone theme&lt;/p&gt;
&lt;p&gt;Speaker: Santiago Soler
Lightning Talk: During this lightning talk I'll present Pooch, an open-source Python library for downloading and catching data files from the web. It provides easy ways to download data files from different protocols, cache it locally, check their integrity through checksums, and more. It also provides tools for downloading collections of files, useful for managing sample datasets for scientific and data-processing Python packages. Currently Pooch is being used by well-known libraries like SciPy, scikit-learn, Xarray and scikit-image, amongst others.&lt;/p&gt;
&lt;p&gt;Speaker: Andres Pineda
Lightning Talk: Invite to Pycon Latam&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Looping Mechanisms with Python Lists</title><link href="https://pyvideo.org/pycascades-2023/looping-mechanisms-with-python-lists.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Syed Ansab Waqar Gillani</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/looping-mechanisms-with-python-lists.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a variety of looping mechanisms for iterables engineered using functions and language keywords. Is it possible that two loops with same complexity have different runtimes? Which mechanism is the fastest and the slowest, Which one should you use to optimize your application?&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Metaprogramming in Python using Metaclasses</title><link href="https://pyvideo.org/pycascades-2023/metaprogramming-in-python-using-metaclasses.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Adarsh Divakaran</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/metaprogramming-in-python-using-metaclasses.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Metaprogramming is writing programs that manipulate programs. Dive into the deeper python magic of metaprogramming and enhance your understanding of object orientation in Python and its working under the hood.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>PyCascades 2023: Day 2</title><link href="https://pyvideo.org/pycascades-2023/pycascades-2023-day-2.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/pycascades-2023-day-2.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCascades Day 2&lt;/p&gt;
&lt;p&gt;View the full schedule here: &lt;a class="reference external" href="https://2023.pycascades.com/program/schedule/"&gt;https://2023.pycascades.com/program/schedule/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Sharing is Caring - Sharing pytest Fixtures</title><link href="https://pyvideo.org/pycascades-2023/sharing-is-caring-sharing-pytest-fixtures.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Brian Okken</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/sharing-is-caring-sharing-pytest-fixtures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest rocks, obviously. When people start using pytest as a team, they often come up with cool fixtures that would be great to share across projects. In fact, many great Python packages come pre-loaded with pytest fixtures. This talk describes how easy it is to share fixtures using the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest rocks, obviously. When people start using pytest as a team, they often come up with cool fixtures that would be great to share across projects. In fact, many great Python packages come pre-loaded with pytest fixtures. This talk describes how easy it is to share fixtures using the pytest plugin model.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Untangle Python Spaghettis - Deep Dive Into Environments</title><link href="https://pyvideo.org/pycascades-2023/untangle-python-spaghettis-deep-dive-into-environments.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/untangle-python-spaghettis-deep-dive-into-environments.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After learning doing in Python, we started multiple Python or Data Science projects. Dependency management becomes a skill that we need to avoid requirement conflicts amount projects. In this talk, we will learn how dependencies management tools work and how to choose the right one to use.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Using Lark to Parse Text</title><link href="https://pyvideo.org/pycascades-2023/using-lark-to-parse-text.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Robin Reynolds-Haertle</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/using-lark-to-parse-text.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parsing tools aren't just for compilers! You can use parsing tools to read, parse, and manipulate all sorts of data. We'll use Lark, a Python parsing library, to look at some basic examples and the resulting parse trees, demonstrating the end-to-end process of input, parse tree, and output.&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parsing tools aren't just for compilers! You can use parsing tools to read, parse, and manipulate all sorts of data. We'll use Lark, a Python parsing library, to look at some basic examples and the resulting parse trees, demonstrating the end-to-end process of input, parse tree, and output.&lt;/p&gt;
&lt;p&gt;This talk is for anyone that has used Python to read in data from a text file.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Vulnerability Scanning For Free (as in Puppies)</title><link href="https://pyvideo.org/pycascades-2023/vulnerability-scanning-for-free-as-in-puppies.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Terri Oda</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/vulnerability-scanning-for-free-as-in-puppies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Secure software supply chains with 0 vulnerabilities sounds like a great idea, but once you start looking through entire dependency chains and large systems, it can be a lot harder to achieve than one might expect. Using the free, open source, CVE Binary Tool vulnerability scanner (written in python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Secure software supply chains with 0 vulnerabilities sounds like a great idea, but once you start looking through entire dependency chains and large systems, it can be a lot harder to achieve than one might expect. Using the free, open source, CVE Binary Tool vulnerability scanner (written in python!), we'll show what it looks like to set up vulnerability scanning, what kinds of fun things you find, and how keeping things up to date can mean an ongoing maintenance burden that is more like a free puppy than a free beer. We'll talk about how naive policies, governmental mandates and capitalism may ruin your day, and what we can do to stay secure and help everyone get past the puppy phase without sending anyone back to the pound.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>What's That Smell? Detecting Air Quality with Python</title><link href="https://pyvideo.org/pycascades-2023/whats-that-smell-detecting-air-quality-with-python.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Justin Castilla</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/whats-that-smell-detecting-air-quality-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With a little wiring and a few lines of code, one can create your own hyperlocal air sensor system to send alerts, activate smart-windows, and gather data. A sensor measures air particulate density and sends the values to a Raspberry Pi compute unit. The Raspberry Pi then sends the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With a little wiring and a few lines of code, one can create your own hyperlocal air sensor system to send alerts, activate smart-windows, and gather data. A sensor measures air particulate density and sends the values to a Raspberry Pi compute unit. The Raspberry Pi then sends the data along with a timestamp and location information to a cloud instance of Redis, a NoSQL data store. Once in Redis, the data can trigger SMS notifications, feed data visualization libraries, or activate electronics such as air purifiers or motors to open or close windows. This can be scaled to monitor air quality in multiple rooms, offices, city blocks, or cities.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Writing an I2C Sensor Driver</title><link href="https://pyvideo.org/pycascades-2023/writing-an-i2c-sensor-driver.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Colin Dietrich</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/writing-an-i2c-sensor-driver.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Digital sensors have become a standard way of collecting data in the physical world. Join me as we delve into the realm of digital bus sensors by creating a driver for an I2C light-to-digital converter.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Demystifying SQLite with Python</title><link href="https://pyvideo.org/pycascades-2023/demystifying-sqlite-with-python.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Ria Bhatia</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/demystifying-sqlite-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to choosing a light, simple and high performance database for your python application, SQLite surely comes to mind. Learning and befriending SQlite has several benefits, and it is a must have tool for every programmer. But have you ever wondered what is happening behind the scenes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to choosing a light, simple and high performance database for your python application, SQLite surely comes to mind. Learning and befriending SQlite has several benefits, and it is a must have tool for every programmer. But have you ever wondered what is happening behind the scenes which makes its storage and retrieval so efficient? How is data being managed internally? Let's explore the SQLite database using python while learning some intriguing underlying principles.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Eternal Sunshine of the Spotless Development Environment</title><link href="https://pyvideo.org/pycascades-2023/eternal-sunshine-of-the-spotless-development-environment.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Sarah Kaiser</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/eternal-sunshine-of-the-spotless-development-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;But it worked on machine&amp;quot; is one the most frustrating lines to hear when collaborating on a project. Creating and configuring reproducible environments is a major part of modern software development and had led to the popularity of tools like Docker to specify where and how code runs. Setting …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;But it worked on machine&amp;quot; is one the most frustrating lines to hear when collaborating on a project. Creating and configuring reproducible environments is a major part of modern software development and had led to the popularity of tools like Docker to specify where and how code runs. Setting up Docker and Development Containers in VS Code make it easy to configure not only the where the code runs, but also the developer workspace. Setting up these tools can reduce effort for maintainers, bootstrap contributors, and make running events like workshops or sprints easier.&lt;/p&gt;
&lt;p&gt;In this talk, we will cover why setting up container infrastructure like Docker can be useful for your project, and how you can extend that with Dev Containers to configure a full development experience in VS Code. We will also take a look at two common OSS project scenarios and how workflows for using Docker, Dev Containers and Codespaces make things easier. No container experience required, and some knowledge of VS Code helpful, but not necessary.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Implementing Distributed Tracing</title><link href="https://pyvideo.org/pycascades-2023/implementing-distributed-tracing.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Zach Lipp</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/implementing-distributed-tracing.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distributed tracing is a powerful tool for understanding microservices. Join this talk to learn what distributed tracing is, how to add it to your Python applications, an overview of how it works, and some reflections from someone who has implemented it across projects.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Practicality Beats Purity: The Zen of Python’s Escape Hatch</title><link href="https://pyvideo.org/pycascades-2023/practicality-beats-purity-the-zen-of-pythons-escape-hatch.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Chris Neugebauer</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/practicality-beats-purity-the-zen-of-pythons-escape-hatch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Zen of Python, the well known list of 20 Python aphorisms (of which only 19 are written down), contains a lot of prescriptive advice for what makes &amp;quot;Good&amp;quot; Python code… or it would, if one of them didn't give you permission to ignore the rest of them.&lt;/p&gt;
&lt;p&gt;Focusing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Zen of Python, the well known list of 20 Python aphorisms (of which only 19 are written down), contains a lot of prescriptive advice for what makes &amp;quot;Good&amp;quot; Python code… or it would, if one of them didn't give you permission to ignore the rest of them.&lt;/p&gt;
&lt;p&gt;Focusing on one piece of the 19 aphorisms, this talk explores the contradictions in the Zen of Python's advice, and how even with prescriptive rules, writing &amp;quot;Good&amp;quot; Python remains a subjective exercise.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>PyCascades 2023: Day 1</title><link href="https://pyvideo.org/pycascades-2023/pycascades-2023-day-1.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/pycascades-2023-day-1.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCascades Day 1&lt;/p&gt;
&lt;p&gt;View the full schedule here: &lt;a class="reference external" href="https://2023.pycascades.com/program/schedule/"&gt;https://2023.pycascades.com/program/schedule/&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Python's Syntactic Sugar</title><link href="https://pyvideo.org/pycascades-2023/pythons-syntactic-sugar.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/pythons-syntactic-sugar.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know you can (mostly) replicate all of Python 3.8's syntax using only 11 core pieces of syntax (plus some magical functions)? Come to this talk to hear about how &amp;quot;simple&amp;quot; things like &lt;cite&gt;+&lt;/cite&gt; and &lt;cite&gt;.&lt;/cite&gt; actually unravel into chunks of Python code!&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>SBOMs are coming. How will Python help?</title><link href="https://pyvideo.org/pycascades-2023/sboms-are-coming-how-will-python-help.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Anthony Harrison</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/sboms-are-coming-how-will-python-help.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As software is increasingly integrated with many third party components, particularly open-source components, it is essential to have a clear understanding of all of the software that is being deployed. With an increasing focus on improving the Cybersecurity of the many different parts of the supply chain, there is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As software is increasingly integrated with many third party components, particularly open-source components, it is essential to have a clear understanding of all of the software that is being deployed. With an increasing focus on improving the Cybersecurity of the many different parts of the supply chain, there is a growing expectation that a Software Bill of Materials (SBOM) will become a key artefact of any software component to help capture all of the software assets being used. This talk will briefly introduce the concept of SBOMs and show how a number of Python tools will help in the production, management and use of SBOMs as part of a system lifecycle.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Security Best Practices for Django Applications</title><link href="https://pyvideo.org/pycascades-2023/security-best-practices-for-django-applications.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Gajendra Deshpande</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/security-best-practices-for-django-applications.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django being one of the most popular Python-based web frameworks, applications developed using Django are always on the radar of hackers who try to find the vulnerabilities in the Django application and exploit the same for their benefit. This talk will discuss how to secure Django Web applications.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Tightening Your Feedback Loop with Live Coding</title><link href="https://pyvideo.org/pycascades-2023/tightening-your-feedback-loop-with-live-coding.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Don Kirkby</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/tightening-your-feedback-loop-with-live-coding.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the things that makes Python easy to work with is that you don't need a compile step before you can check that your code works. What if you could skip the save and run steps, too? Live coding lets you constantly run your code, as you edit …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the things that makes Python easy to work with is that you don't need a compile step before you can check that your code works. What if you could skip the save and run steps, too? Live coding lets you constantly run your code, as you edit it, and shows you what's happening inside. It's also great for visual tools like Matplotlib and Pillow.&lt;/p&gt;
&lt;p&gt;I'll be demonstrating my Live Coding in Python project that includes plugins for PyCharm, Emacs, and SublimeText, as well as live tutorials that use Pyodide to let the reader experiment with code samples right in the browser.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Why 'Hello World' is a Massive Operation</title><link href="https://pyvideo.org/pycascades-2023/why-hello-world-is-a-massive-operation.html" rel="alternate"></link><published>2023-03-18T00:00:00+00:00</published><updated>2023-03-18T00:00:00+00:00</updated><author><name>Richard Rowland</name></author><id>tag:pyvideo.org,2023-03-18:/pycascades-2023/why-hello-world-is-a-massive-operation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From Python code to Stack Virtual Machine - What happens on the computer when you run print(“Hello world”)? This talk attempts to dissect how Python code gets translated for execution. While many programmers can live without interacting with compiler internals, a stronger understanding of CPython can help make us …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From Python code to Stack Virtual Machine - What happens on the computer when you run print(“Hello world”)? This talk attempts to dissect how Python code gets translated for execution. While many programmers can live without interacting with compiler internals, a stronger understanding of CPython can help make us better programmers.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry></feed>