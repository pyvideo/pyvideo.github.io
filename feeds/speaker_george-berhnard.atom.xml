<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_george-berhnard.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-04-08T00:00:00+00:00</updated><entry><title>Performant Python</title><link href="https://pyvideo.org/pycon-italia-2017/performant-python.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>George Berhnard</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/performant-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a great language. Easy to learn, friendly to use, widely used.&lt;/p&gt;
&lt;p&gt;It is not, however, renowned for being fast. In a lot of situations
that does not matter. Sometimes it really does. This talk will
introduce you to some tools and techniques for making sure your
Python code becomes fast enough – without turning into a maintenance
nightmare. Fast code does not have to be unreadable - and when you’re
writing Python, it really pays of to think “pythonically”.&lt;/p&gt;
&lt;p&gt;That does mean using the included batteries, and utilising the
ecosystem of tools around the language, too.&lt;/p&gt;
&lt;p&gt;Warning: may contain small bits of other languages.&lt;/p&gt;
</summary></entry></feed>