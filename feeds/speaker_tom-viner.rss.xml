<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 20 Sep 2015 00:00:00 +0000</lastBuildDate><item><title>Testing with two failure seeking missiles</title><link>https://pyvideo.org/pycon-uk-2015/testing-with-two-failure-seeking-missiles.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Testing with two failure seeking missiles: fuzzing and property based testing&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with purely random data on it's own doesn't get you very far.
But two approaches that have been around for a while have new libraries
that help you generate random input, that homes in on failing testcases.&lt;/p&gt;
&lt;p&gt;First
&lt;strong&gt;`Hypothesis &amp;lt;https://hypothesis.readthedocs.org/en/latest/&amp;gt;`__&lt;/strong&gt;, a
Python implementation and update of the Haskell library QuickCheck.
Known as property based testing, you specify a property of your code
that must hold, and Hypothesis does its best to find a counterexample.
It then shrinks this to find the minimal input that contradicts your
property.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;`American fuzzy lop &amp;lt;http://lcamtuf.coredump.cx/afl/&amp;gt;`__&lt;/strong&gt;
(AFL), is a young fuzzing library that's already achieved an impressive
trophy case of bug discoveries. Using instrumentation and genetic
algorithms, it generates test input that carefully searches out as many
code paths as it can find, seeking greater functional coverage and
ultimately locating crashes and hangs that no other method has found.
I'll be showing how with &lt;strong&gt;`Python-
AFL &amp;lt;http://jwilk.net/software/python-afl&amp;gt;`__&lt;/strong&gt; we can apply this tool
to our Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Viner</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/testing-with-two-failure-seeking-missiles.html</guid></item><item><title>Testing with two failure seeking missiles: fuzzing and property based testing</title><link>https://pyvideo.org/europython-2015/testing-with-two-failure-seeking-missiles-fuzzing-and-property-based-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom Viner - Testing with two failure seeking missiles: fuzzing and property based testing
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Full Video of Talk][0]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Testing with purely random data on it's own doesn't get you very far. But
two approaches that have been around for a while have new libraries that
help you generate random input, that homes in on failing testcases.&lt;/p&gt;
&lt;p&gt;First &lt;strong&gt;[Hypothesis][1]&lt;/strong&gt;, a Python implementation and update of the
Haskell library
QuickCheck. Known as property based testing, you specify a property of your
code that must hold, and Hypothesis does its best to find a counterexample.
It then shrinks this to find the minimal input that contradicts your
property.&lt;/p&gt;
&lt;p&gt;Video: &lt;a class="reference external" href="https://www.youtube.com/watch?v=YGim-BL_ebE#t=53m17s"&gt;https://www.youtube.com/watch?v=YGim-BL_ebE#t=53m17s&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;[American fuzzy lop][2]&lt;/strong&gt; (AFL), is a young fuzzing library
that's already
achieved an impressive trophy case of bug discoveries. Using
instrumentation and genetic algorithms, it generates test input that
carefully searches out as many code paths as it can find, seeking greater
functional coverage and ultimately locating crashes and hangs that no other
method has found. I'll be showing how with &lt;strong&gt;[Python-AFL][3]&lt;/strong&gt; we can apply this
tool to our Python code.&lt;/p&gt;
&lt;p&gt;[0]: &lt;a class="reference external" href="https://youtu.be/YGim-BL_ebE?t=53m17s"&gt;https://youtu.be/YGim-BL_ebE?t=53m17s&lt;/a&gt;
[1]: &lt;a class="reference external" href="https://hypothesis.readthedocs.org/en/latest/"&gt;https://hypothesis.readthedocs.org/en/latest/&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://lcamtuf.coredump.cx/afl/"&gt;http://lcamtuf.coredump.cx/afl/&lt;/a&gt;
[3]: &lt;a class="reference external" href="http://jwilk.net/software/python-afl"&gt;http://jwilk.net/software/python-afl&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Viner</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-08:europython-2015/testing-with-two-failure-seeking-missiles-fuzzing-and-property-based-testing.html</guid></item></channel></rss>