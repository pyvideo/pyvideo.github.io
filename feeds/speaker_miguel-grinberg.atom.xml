<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_miguel-grinberg.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-13T00:00:00+00:00</updated><entry><title>Asynchronous Web Development with Flask</title><link href="https://pyvideo.org/pycon-uk-2019/asynchronous-web-development-with-flask.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2019-09-13:pycon-uk-2019/asynchronous-web-development-with-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A common misconception is that traditional frameworks such as Flask and Django are incompatible with asynchronous web servers. In this talk I'm going to show you how to write an asynchronous web application using Flask.&lt;/p&gt;
</summary></entry><entry><title>Look Ma, No HTTP!</title><link href="https://pyvideo.org/europython-2019/look-ma-no-http.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/look-ma-no-http.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I'm going to live code a web application that is built
exclusively on top of WebSocket, without using HTTP at all!&lt;/p&gt;
&lt;p&gt;What's the benefit of using WebSocket over HTTP, you may ask? With
WebSocket each client establishes a permanent connection to the server,
so there is no request/response cycle and no need for the client to poll
the server for data. Each side can freely send data to the other side at
any time, so this is an ideal stack for building highly dynamic,
event-driven applications.&lt;/p&gt;
&lt;p&gt;For this live coding exercise I'm going to use the Socket.IO server for
Python, and the Socket.IO client for JavaScript. No Flask, no Django, no
HTTP!&lt;/p&gt;
</summary><category term="ASYNC / Concurrency"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs"></category></entry><entry><title>Keynote: Coding for Pleasure</title><link href="https://pyvideo.org/pycon-ireland-2018/keynote-coding-for-pleasure.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/keynote-coding-for-pleasure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software engineers are usually advised to invest some of their free time on side projects, as a way to hone their skills and build a portfolio to show off while job hunting. While Miguel Grinberg is a big fan of personal projects, his reasons are completely different. He hopes to convince you to start a personal project of your own after giving you a fresh perspective on this practice.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Oops! I Committed My Password To GitHub!</title><link href="https://pyvideo.org/pycon-us-2018/oops-i-committed-my-password-to-github.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/oops-i-committed-my-password-to-github.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do AWS, GitHub, Travis CI, DockerHub, Google, Stripe, New Relic, and the rest of the myriad of services that make our developer life easier have in common?
They all give you secret keys to authenticate with. Did you ever commit one of these to source control by mistake? That happened to me more times than I'm willing to admit!&lt;/p&gt;
&lt;p&gt;In this talk I'm going to go over the best practices to follow when when writing Python applications that prevent this type of accident.&lt;/p&gt;
</summary><category term="password"></category></entry><entry><title>Fun with WebSocket and Flask</title><link href="https://pyvideo.org/pycon-ireland-2017/fun-with-websocket-and-flask.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2017-10-21:pycon-ireland-2017/fun-with-websocket-and-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;WebSocket enables a web server to establish dedicated connections with clients, on which raw data can flow at any time and in any direction, free of the request/response cycle and the &amp;quot;chattiness&amp;quot; of the HTTP protocol. Paired with a high-level protocol such as Socket.IO, you get a powerful and easy to use framework for bi-directional, low latency communication, with clients available for Python, JavaScript, Java, iOS, Android, C++, .Net and more. Flask is a lightweight and very popular web framework for Python that makes writing web servers easy and fun, without sacrificing any power. What happens when you combine WebSocket, Socket.IO and Flask? In this talk I'm going to show you some of the cool applications that you can build when these technologies are put to work together, including streaming audio and video, real-time sensor data, automatic voting and more!&lt;/p&gt;
</summary><category term="webSocket"></category><category term="flask"></category></entry><entry><title>Python Microservices</title><link href="https://pyvideo.org/europython-2017/python-microservices.html" rel="alternate"></link><published>2017-07-10T00:00:00+00:00</published><updated>2017-07-10T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2017-07-10:europython-2017/python-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is for Python web developers interested in learning what
are the core ideas behind microservices, what problems they try to
solve, and what are the viable options to implement them in Python,
both from technical and teamwork point of views. Some of the topics
that will be discussed include the role of APIs, the improvements
microservices bring to application scalability, upgrades, and
maintenance, and the challenges in breaking up a monolithic
application.&lt;/p&gt;
&lt;p&gt;Attendees will leave the talk with a good idea of what microservices
are, and how they help build better applications. As usual with my
presentations, there will be actual code examples presented during
the talk that I will also host on GitHub, for those interested in
investigating further on their own.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous Python for the Complete Beginner</title><link href="https://pyvideo.org/pycon-us-2017/asynchronous-python-for-the-complete-beginner.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2017-05-21:pycon-us-2017/asynchronous-python-for-the-complete-beginner.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the introduction of the asyncio package in Python 3.4, you can hear
lots of people talking about asynchronous programming, most in a
favorable way, some not so much. In this talk, I will tell you what this
async fever is about and what can it do for you that regular Python
can't, not only with asyncio, but also with other frameworks that
existed long before it.&lt;/p&gt;
</summary></entry><entry><title>Microservices with Python and Flask</title><link href="https://pyvideo.org/pycon-us-2017/microservices-with-python-and-flask.html" rel="alternate"></link><published>2017-05-17T00:00:00+00:00</published><updated>2017-05-17T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2017-05-17:pycon-us-2017/microservices-with-python-and-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are receiving the buzzword treatment these days, and as
such, they have a cloud of hype surrounding them that makes it hard to
separate substance from fluff. In this tutorial, Miguel Grinberg starts
with an introduction to this architecture, including what's great and
not so great about it, and then teaches you how a traditional monolithic
application written in Flask can be refactored into a modern distributed
system based on microservices.&lt;/p&gt;
</summary></entry><entry><title>PyDX 2015: Creating a REST API with Python and Flask</title><link href="https://pyvideo.org/pydx-2015/pydx-2015-creating-a-rest-api-with-python-and-flask.html" rel="alternate"></link><published>2015-10-10T00:00:00+00:00</published><updated>2015-10-10T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2015-10-10:pydx-2015/pydx-2015-creating-a-rest-api-with-python-and-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyDX 2015 talk by Miguel Grinberg&lt;/p&gt;
</summary></entry><entry><title>Flask at Scale</title><link href="https://pyvideo.org/pycon-us-2016/miguel-grinberg-flask-at-scale-pycon-2016.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/miguel-grinberg-flask-at-scale-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Miguel Grinberg&lt;/p&gt;
&lt;p&gt;Do you think that because Flask is a micro-framework, it must only be good for small, toy-like web applications? Well, not at all! In this tutorial I am going to show you a few patterns and best practices that can take your Flask application to the next level.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Writing RESTful web services with Flask</title><link href="https://pyvideo.org/pycon-us-2014/writing-restful-web-services-with-flask.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/writing-restful-web-services-with-flask.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;micro&amp;quot; part fool you; Flask can do everything the &amp;quot;others&amp;quot; can do, many
times in a simpler, leaner way. This session will introduce you to Flask
as an engine to build RESTful web services.&lt;/p&gt;
</summary></entry><entry><title>Flask by Example</title><link href="https://pyvideo.org/pycon-us-2014/flask-by-example.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/flask-by-example.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;micro&amp;quot; part fool you; Flask can do everything others can do, many times
in a simpler, leaner way. In this tutorial session you will follow me as
I write a complete web application in front of your eyes using the core
framework and a handful of extensions.&lt;/p&gt;
</summary></entry><entry><title>Flask Workshop</title><link href="https://pyvideo.org/pycon-us-2015/flask-workshop.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/flask-workshop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;&amp;quot;micro&amp;quot;&amp;quot; part fool you; Flask can do everything others can do, many
times in a simpler, leaner way. In this tutorial session we will build a
web application together. Bring your laptop and your questions!&lt;/p&gt;
</summary></entry><entry><title>Is Your REST API RESTful?</title><link href="https://pyvideo.org/pycon-us-2015/is-your-rest-api-restful.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/is-your-rest-api-restful.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing a fully complaint REST API is hard, so hard it is too common for
APIs to violate one or more of the REST architectural principles. In
this talk I will describe the six REST principles, and I will tell you
what happens if you don't follow them.&lt;/p&gt;
</summary></entry></feed>