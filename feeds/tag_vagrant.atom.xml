<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_vagrant.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-15T00:00:00+00:00</updated><entry><title>Boosting teamwork with Vagrant</title><link href="https://pyvideo.org/djangocon-us-2012/boosting-teamwork-with-vagrant.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/boosting-teamwork-with-vagrant.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I will present Vagrant, a free open-source tool
facilitating the manipulation of virtualized environments, and how it
may benefit the development of Django applications. This talk is aimed
at Django developers of all levels who are interested in getting an
overview of the great possibilities Vagrant offers to support teamwork
and quality assurance.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will present Vagrant, a free open-source tool
facilitating the manipulation of virtualized environments, and how it
may benefit the development of Django applications. This talk is aimed
at Django developers of all levels who are interested in getting an
overview of the great possibilities Vagrant offers to support teamwork
and quality assurance.&lt;/p&gt;
&lt;p&gt;One major benefit of using Vagrant is with on-boarding. Previously, when
new developers joined a project, it could take hours or days for them to
correctly set up their development environment and install all the
projects' dependencies (the correct version of Python, the virtualenv,
the database server, the caching engine, etc.). With Vagrant, combined
with provisioning tools like Chef or Puppet, it is now possible to
easily create a virtual machine with all the right dependencies properly
pre-installed and pre- configured to allow anyone to be fully
operational and ready to contribute to the project in a matter of
minutes.&lt;/p&gt;
&lt;p&gt;Another major benefit of Vagrant is that it gives the opportunity to
create a working environment for all developers that closely matches
that of the production server. This in turn allows to anticipate
potential issues when new code and resources eventually get deployed
live.&lt;/p&gt;
&lt;p&gt;In this talk, I will present some key functionalities and workflows
around the use of Vagrant: - installing Vagrant and Virtualbox. -
creating a new virtual machine. - provisioning a virtual machine with
basic requirements. - sharing virtual machine specifications with team
members.&lt;/p&gt;
&lt;p&gt;This talk will include a brief introduction to Chef and Puppet. It will
also include multiple practical tricks like accessing the VM's database
server from the host's machine, setting up useful shell aliases or
automatically activating the virtualenv when launching the VM.&lt;/p&gt;
</summary><category term="django"></category><category term="vagrant"></category></entry><entry><title>Virtuelle Entwicklungsumgebungen mit Vagrant</title><link href="https://pyvideo.org/pycon-de-2012/virtuelle-entwicklungsumgebungen-mit-vagrant.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Markus Zapke-Gründemann</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/virtuelle-entwicklungsumgebungen-mit-vagrant.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Oft benötigt man für verschiedene Projekte ganz unterschiedliche
Bibliotheken, Dienste und Werkzeuge. Alle Abhängigkeiten auf einer
Maschine zu installieren kann schnell anstrengend bis unmöglich werden.
Hier kommt Vagrant ins Spiel: Mit Hilfe von Vagrant kann man einfach und
schnell Virtuelle Maschinen als Entwicklungsumgebungen erstellen,
konfigurieren und benutzen.&lt;/p&gt;
&lt;p&gt;Durch die Nutzung von (vorhandenen) Provisioning Tools wie Chef oder
Puppet kann man vorhandene Konfigurationen von Produktiv-System zum
Setup der Virtuellen Maschinen nutzen. Außerdem lassen sich mit Vagrant
auch komplexe Cluster-Setups auf dem eigenen Rechner aufbauen.&lt;/p&gt;
</summary><category term="vagrant"></category><category term="virtual box"></category><category term="virtuelle maschinen"></category></entry><entry><title>Von der Entwicklung bis zum Deployment mit standardisierten und konfigurierbaren Laufzeitumgebungen</title><link href="https://pyvideo.org/pycon-de-2013/von-der-entwicklung-bis-zum-deployment-mit-standa.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Juergen Schackmann</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/von-der-entwicklung-bis-zum-deployment-mit-standa.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Es wird gezeigt, wie Laufzeitumgebungen (Betriebssystem, Services wie
Datenbank oder Webserver, Python, Applikation) standardisiert
konfiguriert und automatisiert erzeugt werden können. Somit wird
sichergestellt, dass eine Applikation immer in definierten und
weitgehend identischen Umgebungen ausgeführt wird - unabhängig von den
verschiedenen Phasen des Lebenszyklus (Entwicklung, Test, Produktion
etc.) und persönlichen Präferenzen und Know-how der involvierten
Personen. Hierfür eingesetzt werden: Vagrant, Virtualbox,Puppet,
Virtualenv.&lt;/p&gt;
</summary><category term="bootstrapping"></category><category term="deployment"></category><category term="django"></category><category term="puppet"></category><category term="vagrant"></category><category term="virtualenv"></category></entry></feed>