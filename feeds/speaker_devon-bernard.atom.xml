<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_devon-bernard.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-18T00:00:00+00:00</updated><entry><title>Effective Python package management</title><link href="https://pyvideo.org/pycon-ca-2017/effective-python-package-management.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Devon Bernard</name></author><id>tag:pyvideo.org,2017-11-18:pycon-ca-2017/effective-python-package-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk showcases various example scenarios around the ins/outs of managing Python packages. Scenarios range from intra-package problems of how to build a package, inter-package problems of how to connect packages, to general usage/environment/setup problems that developers have a hard time debugging. For each of these scenarios, I'll highlight the pros/cons, best practices, and how to overcome the issues developers commonly face.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing packages from public, local file system, git (ssh + https), and how this affects deployment procedures&lt;/li&gt;
&lt;li&gt;handling systems with multiple Python versions or package managers&lt;/li&gt;
&lt;li&gt;how app structures and imports can affect testability&lt;/li&gt;
&lt;li&gt;relative vs absolute imports&lt;/li&gt;
&lt;li&gt;virtual environments&lt;/li&gt;
&lt;li&gt;setup scripts&lt;/li&gt;
&lt;li&gt;package versioning (why, when, how)&lt;/li&gt;
&lt;li&gt;how new code changes could not be taking effect (old .pyc files, or updated import not catching)&lt;/li&gt;
&lt;li&gt;handling sub-packages/dependencies that utilize parent configuration files&lt;/li&gt;
&lt;li&gt;working with &lt;cite&gt;PYTHONPATH&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;executing python as modules or scripts&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>