<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 07 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Hora de sacar la basura: garbage collector</title><link>https://pyvideo.org/pycon-es-2018/hora-de-sacar-la-basura-garbage-collector.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uno de los motivos por los que programar en Python es cómodo y sencillo es que no tenemos que preocuparnos por el tiempo de vida de nuestros objetos. Es decir, una vez que deja de ser necesaria, una variable desaparece de la memoria “magicamente”. Esto puede —erróneamente— llevarnos a creer que no es necesario preocuparnos por lo que ocurre entre bastidores.&lt;/p&gt;
&lt;p&gt;Nada más alejado de la realidad: conocer cómo Python gestiona la memoria es fundamental en ciertos escenarios, y desconocer qué está ocurriendo puede tener consecuencias tan importantes como desagradables. Por ejemplo, si nuestros programas gestionan una gran cantidad de datos al mismo tiempo o lanzan múltiples processos en paralelo esto deja de ser una cuestión teórica y convierte en algo que a nosotros, mentes pragmáticas, también nos importa.&lt;/p&gt;
&lt;p&gt;Python utiliza para manejar la memoria una estrategia combinada consistente en dos intimidantes términos: (1) conteo de referencias y (2) colector de basura generacional. Entender cómo ambos sistemas trabajan juntos y cuáles son las limitaciones de cada uno nos ayudará a entender aspectos específicos de nuestra programación del día a día. Ejemplos: (a) qué ocurre con la memoria exactamente cuando hay multiples hilos o procesos, (b) qué pasa si nuestras estructuras de datos se contienen a si mismas, un escenario posible al trabajar con grafos, o (c) qué hace Python con los valores temporales que se producen, sin ir más lejos, al sumar dos números o dos arrays de NumPy.&lt;/p&gt;
&lt;p&gt;Aunque estos conceptos suelen considerarse avanzados y difíciles de entender, veremos que no es así. Éste no es un asunto meramente teórico ni es difícil encontrar sus aplicaciones prácticas. En esta charla explicaremos por qué es algo que debe importarnos y hablaremos de cómo aplicar los conocimientos que hemos adquirido a problemas específicos.&lt;/p&gt;
&lt;p&gt;Resumen esquemático de la charla:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Repaso express: qué son las variables en Python&lt;ol class="arabic"&gt;
&lt;li&gt;Variables como etiquetas&lt;/li&gt;
&lt;li&gt;Variables vs objetos&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Qué es la recoleción de basura.&lt;/li&gt;
&lt;li&gt;Conteo por referencias&lt;ol class="arabic"&gt;
&lt;li&gt;Qué problema resuelve.&lt;/li&gt;
&lt;li&gt;Problemas del conteo por referencia.&lt;ol class="arabic"&gt;
&lt;li&gt;Hilos&lt;/li&gt;
&lt;li&gt;Ciclos&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Recolector de basura para ciclos&lt;ol class="arabic"&gt;
&lt;li&gt;Las tres generaciones.&lt;/li&gt;
&lt;li&gt;El algoritmo&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Aplicaciones prácticas y conocimiento útil.&lt;ol class="arabic"&gt;
&lt;li&gt;Que ocurre al implementar &lt;tt class="docutils literal"&gt;__del__()&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Copy-on-write.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Hilos versus procesos.&lt;/li&gt;
&lt;li&gt;Extras&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo</dc:creator><pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-07:pycon-es-2018/hora-de-sacar-la-basura-garbage-collector.html</guid></item><item><title>The snake and the blackhole</title><link>https://pyvideo.org/pylondinium-2018/the-snake-and-the-blackhole.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will learn how to construct a general relativity raytracer in Python. Our goal will be to obtain synthetic images of black holes (similar to those observed in the movie Interstellar) by recreating how the light propagates in an environment of extreme gravity, such as a rotating black hole. Using this as an excuse, we will analyse different approaches to optimise our code as much as possible using all the tools available in the Python ecosystem. We will also learn how to construct efficient scientific simulations in Python that can match the speed of any other programming language.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo</dc:creator><pubDate>Sun, 10 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-10:pylondinium-2018/the-snake-and-the-blackhole.html</guid></item><item><title>Los closures que emocionaron a Spielberg</title><link>https://pyvideo.org/pycon-es-2016/los-closures-que-emocionaron-a-spielberg.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;De los creadores de «Los titulares sensacionalistas que emocionaron a Spielberg», esta charla tiene como objetivo que la audiencia se familiarice con el casi eternamente esquivo concepto de los «closures» (o «cierres»). Éste es un término con el que en ocasiones nos cruzamos en charlas o por Internet y ante el cual nuestro primer impulso es, aterrados, cerrar la pestaña de nuestro navegador. Pero, quizás muy a nuestro pesar, los «cierres» forman parte de nuestro día a día, y merece la pena aprender a desenvolvernos con ellos aunque sólo sea para —por fin— entender qué es exactamente ese error de UnboundLocalError que nos hemos encontrado a veces… aunque la variable existe.&lt;/p&gt;
&lt;p&gt;Para ello, seguiremos un itinerario que va progresivamente desde lo más fácil y familiar a lo más difícil y específico. Empezaremos por introducir algunos problemas sencillos que se suelen presentar en escenarios de programación comunes, entendiendo cuál es su relación con ese arcano y misterioso ente que son los closures . Una vez hayamos comprendido su definición, pasaremos a dar algunos ejemplos prácticos que nos ayuden a asentar el concepto permanente e irreversiblemente en nuestras mentes. También explicaremos su relación con otros componentes del ecosistema Python, incluyendo decoradores y el módulo functools. Por último, mostraremos algunos ejemplos ignotos en los que los primigenios usaron closures para optimizar parte del código de la librería estándar.&lt;/p&gt;
&lt;p&gt;Resumen esquemático de la charla:&lt;/p&gt;
&lt;p&gt;Scope de las variables vars() / locals() / globals() Qué es una closure Motivación: por qué se usan Ejemplos practicos Decoradores Closures y functools Optimizacion de codigo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pycon-es-2016/los-closures-que-emocionaron-a-spielberg.html</guid></item><item><title>Charlas Rapidas + #ThePymientoProject</title><link>https://pyvideo.org/pycon-es-2016/charlas-rapidas-thepymientoproject.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="51%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Tiempo&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Título&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;02:54&lt;/td&gt;
&lt;td&gt;Jesús Espino&lt;/td&gt;
&lt;td&gt;Abriendo las clases de CPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;07:25&lt;/td&gt;
&lt;td&gt;J.L. Cercos-Pita&lt;/td&gt;
&lt;td&gt;¿Te han tongado en la selección de charlas de la PyConES?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;13:02&lt;/td&gt;
&lt;td&gt;Guillem Borrell&lt;/td&gt;
&lt;td&gt;No le abandones. Él nunca lo haría.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;18:24&lt;/td&gt;
&lt;td&gt;Pablo Galindo&lt;/td&gt;
&lt;td&gt;How to FIX Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;24:21&lt;/td&gt;
&lt;td&gt;Manuel Kaufmann&lt;/td&gt;
&lt;td&gt;fades + pysenteishon&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;30:28&lt;/td&gt;
&lt;td&gt;Johanna Sánchez&lt;/td&gt;
&lt;td&gt;Presentación PyConAR 2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;33:32&lt;/td&gt;
&lt;td&gt;Manuel Garrido&lt;/td&gt;
&lt;td&gt;Where can I park?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;37:52&lt;/td&gt;
&lt;td&gt;Pablo Lobariñas&lt;/td&gt;
&lt;td&gt;OpenBadges en Python Madrid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;39:56&lt;/td&gt;
&lt;td&gt;Adolfo Rosillo y Cristóbal Contreras&lt;/td&gt;
&lt;td&gt;Presentación de Pymiento Project&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesús Espino</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-08:pycon-es-2016/charlas-rapidas-thepymientoproject.html</guid><category>lightning talks</category></item></channel></rss>