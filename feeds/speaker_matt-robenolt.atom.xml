<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matt-robenolt.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-30T00:00:00+00:00</updated><entry><title>Everything is broken, and I don't know why.</title><link href="https://pyvideo.org/pyohio-2017/everything-is-broken-and-i-dont-know-why.html" rel="alternate"></link><published>2017-07-30T00:00:00+00:00</published><updated>2017-07-30T00:00:00+00:00</updated><author><name>Matt Robenolt</name></author><id>tag:pyvideo.org,2017-07-30:pyohio-2017/everything-is-broken-and-i-dont-know-why.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all have someone on our team who writes code with bugs in it. Not us, of course, but someone else. This code somehow gets into production and this code just maybe sometimes crashes. How can we detect these issues and extract useful information at runtime so we can fix these bugs? What kind of stuff should we even be looking for?&lt;/p&gt;
</summary></entry><entry><title>HTTP for Great Good</title><link href="https://pyvideo.org/djangocon-us-2013/http-for-great-good.html" rel="alternate"></link><published>2013-10-01T00:00:00+00:00</published><updated>2013-10-01T00:00:00+00:00</updated><author><name>Matt Robenolt</name></author><id>tag:pyvideo.org,2013-10-01:djangocon-us-2013/http-for-great-good.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;HTTP FOR GREAT GOOD&lt;/p&gt;
&lt;p&gt;Thursday 11:30 a.m.--12:15 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;DESCRIPTION I will be explaining some of the tricks and details about
how Disqus uses HTTP techniques to scale our Django backends by
harnessing upstream caches.&lt;/p&gt;
&lt;p&gt;ABSTRACT I will be providing a brief introduction into tools that work
along-side Django, such as Varnish, and explaining how these critical
components work together to make a fast user experience. &amp;quot;The fastest
HTTP request is no HTTP request at all.&amp;quot;&lt;/p&gt;
&lt;p&gt;What tools does Django provide for working with this? What are things we
can look out for? How can we rearchitect something to be more
&amp;quot;cacheable&amp;quot;? What do all of these HTTP headers even mean?!&lt;/p&gt;
</summary></entry></feed>