<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matthew-turk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-13T00:00:00+00:00</updated><entry><title>Getting Lost in Community Building</title><link href="https://pyvideo.org/scipy-2019/getting-lost-in-community-building.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>Matthew Turk</name></author><id>tag:pyvideo.org,2019-07-13:scipy-2019/getting-lost-in-community-building.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing a strategy for community building in a project, and ultimately transitioning that project to a peer-supported collaborative enterprise, is an intensely challenging process. This talk will describe some community building strategies, talk about lots of (painful, demoralizing, embarrassing) ways they fall short, and suggest a path forward for projects to collaborate as a meta-community.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Developing Communities to Develop Themselves</title><link href="https://pyvideo.org/pydata-chicago-2016/keynote-developing-communities-to-develop-themselves.html" rel="alternate"></link><published>2016-08-28T00:00:00+00:00</published><updated>2016-08-28T00:00:00+00:00</updated><author><name>Matthew Turk</name></author><id>tag:pyvideo.org,2016-08-28:pydata-chicago-2016/keynote-developing-communities-to-develop-themselves.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1EK7_ioemYMqrUW4M8vvF2usql4vjvQMS5I9xCUNvBso/edit#slide=id.p"&gt;https://docs.google.com/presentation/d/1EK7_ioemYMqrUW4M8vvF2usql4vjvQMS5I9xCUNvBso/edit#slide=id.p&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Analysis and Visualization of 3D Data with yt</title><link href="https://pyvideo.org/scipy-2016/analysis-and-visualization-of-3d-data-with-yt-scipy-2016-matthew-turk.html" rel="alternate"></link><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><author><name>Matthew Turk</name></author><id>tag:pyvideo.org,2016-07-14:scipy-2016/analysis-and-visualization-of-3d-data-with-yt-scipy-2016-matthew-turk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;yt is a Python package designed for domain-specific inquiry of volumetric data, licensed under the BSD license and available at yt-project.org. Utilizing numerous components of the scientific Python ecosystem, it is able to ingest data from numerous different sources from domains such as astrophysics, nuclear engineering, weather and climate, oceanography, and seismology. Building on top of a parallelized framework for data selection, analysis, processing and visualization, inquiry can be driven based on relevant, physical quantities rather than those specific to data formats. I will describe recent advances in the yt 3.0 series, including support for particle, octree, patch and unstructured mesh datasets; interactive and batch volume rendering using both software and OpenGL backends; semantically-rich ontologies of fields, derived quantities and affiliated units (powered by sympy); user-defined kernel estimates for density; support for visualization in non-Cartesian domains; and a flexible chunking system for data IO. I will describe some of the non-astrophysics domains that yt has been applied to, and the infrastructure implemented to support that. Finally, I will describe the community-driven approach taken to designing, developing and implementing new features, and describe some of the challenges this has presented in the context of scientific software developers.&lt;/p&gt;
</summary><category term="SciPy 2016"></category></entry><entry><title>yt: An Integrated Science Environment for Astrophysical Simulations</title><link href="https://pyvideo.org/scipy-2012/yt-an-integrated-science-environment-for-astroph.html" rel="alternate"></link><published>2012-07-18T00:00:00+00:00</published><updated>2012-07-18T00:00:00+00:00</updated><author><name>Matthew Turk</name></author><id>tag:pyvideo.org,2012-07-18:scipy-2012/yt-an-integrated-science-environment-for-astroph.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The usage of the high-level scripting language Python has enabled new
mechanisms for data interrogation, discovery and visualization of
scientific data. We present yt ( &lt;a class="reference external" href="http://yt-project.org/"&gt;http://yt-project.org/&lt;/a&gt; ), an open
source, community-developed astrophysical analysis and visualization
toolkit for both post-processing and in situ analysis of data generated
by high-performance computing (HPC) simulations of astrophysical
phenomena. We report on successes in astrophysical computation through
development of analysis tasks, visualization, cross-code compatibility,
and community building.&lt;/p&gt;
</summary><category term="Astronomy Mini-Symposia"></category></entry><entry><title>Zero Dependency Python</title><link href="https://pyvideo.org/scipy-2014/zero-dependency-python.html" rel="alternate"></link><published>2014-07-10T00:00:00+00:00</published><updated>2014-07-10T00:00:00+00:00</updated><author><name>Kester Tong</name></author><id>tag:pyvideo.org,2014-07-10:scipy-2014/zero-dependency-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We present a new method for distributing and using Python that requires
no dependencies beyond the Google Chrome web browser based on Portable
Native Client (PNaCl). We will demonstrate an IPython notebook run
completely client side with no out-of-browser components, backed by
Google Drive, an HTML5 File System, and able to pass numpy arrays as
typed arrays without serialization as JSON.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We present a new method for distributing and using Python that requires
no dependencies beyond the Google Chrome web browser. By combining the
static linking methodology of traditional supercomputer-style
deployments of Python with the technology Portable Native Client (PNaCl)
we have constructed a method for building, deploying, and sharing
fully-sandboxed scientific python stacks that require no client-side
installation: the entire IPython notebook and scientific python stack,
in a website, at native speeds. We will present this technology, along
with some of its potential applications, describing its shortcomings and
future extensibility. We will conclude by demonstrating an IPython
notebook run completely client side with no out-of-browser components,
backed by Google Drive and an HTML5 File System, and able to pass numpy
arrays as typed arrays into the browser without serialization as JSON.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We will begin by briefly describing the problems with deploying
scientific python as a stack, particularly the dependency graph,
installation time, and so on.&lt;/li&gt;
&lt;li&gt;We'll describe the PNaCl technology and build system for scientific
python, including how individuals can create their own .pexes with
their own application stack&lt;/li&gt;
&lt;li&gt;We'll describe potential applications, such as bundling safe,
sandboxed executables with scripts and lessons&lt;/li&gt;
&lt;li&gt;We will demonstrate a complete system for running the IPython
notebook in a sandboxed, Google Chrome window&lt;/li&gt;
&lt;li&gt;We'll conclude by describing methods that this system could be
extended to run sandboxed python executables on any system,
independent of the Chrome web browser, such as supercomputers and
non-virtualized hosting providers&lt;/li&gt;
&lt;/ol&gt;
</summary></entry></feed>