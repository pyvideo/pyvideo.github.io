<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mariatta.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-17T00:00:00+00:00</updated><entry><title>PEP 581 and PEP 588: Migrating CPython's Issue Tracker</title><link href="https://pyvideo.org/pybay-2019/pep-581-and-pep-588-migrating-cpythons-issue-tracker.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Mariatta</name></author><id>tag:pyvideo.org,2019-08-17:pybay-2019/pep-581-and-pep-588-migrating-cpythons-issue-tracker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In 2017, CPython codebase was moved to GitHub from Mercurial, an effort that took more than three years of planning and lots of volunteer coordination. The move proved to be successful and well-appreciated. New contributors face less barriers when contributing to Python. Core developers are benefiting from personal assistants in the form of GitHub bots and automations. Can the workflow be even better? In this talk, we'll look into other problems in CPython's workflow: the issue tracker itself.&lt;/p&gt;
&lt;p&gt;The acceptance of PEP 581, by Python steering council means that another big workflow change is impending. Let's hear about some of the proposed plans on improving CPython's workflow, and learn how you can help and take part in this process.&lt;/p&gt;
&lt;p&gt;Abstract
Outline&lt;/p&gt;
&lt;p&gt;Brief introduction to core Python workflow. It's complicated. (5 minutes)
The issue tracker is called bpo (an instance of Roundup) &lt;a class="reference external" href="https://bugs.python.org"&gt;https://bugs.python.org&lt;/a&gt;
Codebase and pull requests are done in GitHub: github.com/python/cpython
Contributing guide: devguide.python.org
CPython discussions aren't normally not on GitHub, but on mailing list (python-dev, core-mentorship) and discourse discuss.python.org&lt;/p&gt;
&lt;p&gt;GitHub is a new thing for Python (3 minutes)&lt;/p&gt;
&lt;p&gt;PEP 512: Migrating source code from Mercurial to GitHub
Some pain points: core devs and Python release managers have to learn and adjust to a workflow. (it was not an overnight success)
On the good side: it opens up oppurtunities to contribute to core workflow improvements, and still making big impact: devguide improvements, bots(bedevere, and miss-islington), toolings like blurb and cherry-picker. Contributing to Python is easier on GitHub.&lt;/p&gt;
&lt;p&gt;Should I stay or should I go? (3 minutes)&lt;/p&gt;
&lt;p&gt;bpo works, but it is not up to date with recent advancements: no emoji support, unintuitive UI, not mobile-friendly.
bpo's development is hindered and stagnated.
we're losing potential contributors just because the tracker is bpo.
lack of existing API from bpo making it hard to automate things.&lt;/p&gt;
&lt;p&gt;Let's Use GitHub Issues already! (7 minutes)&lt;/p&gt;
&lt;p&gt;It is not as simple as &amp;quot;just copy over a bunch of tickets to GitHub&amp;quot;
Some of us fear the uncertainties: GitHub is not open source, corporation owned, it could one day disappear without notice?
What we're already doing: daily backup of GitHub data. starting to use CLA Assistant. We've asked GitHub to grant us early access to the &amp;quot;issue triage&amp;quot;.&lt;/p&gt;
&lt;p&gt;What we still need help with (7 minutes) -- A professional project manager, similar to how PyPI/Warehouse project was handled. Steering council has opened this discussion with The PSF. -- We will have a &amp;quot;trial&amp;quot; issue tracker repo. We need to port 100s of tickets from bpo to GitHub. We need experiments and feedback. -- You can help update Devguide on how to use GitHub issue tracker and how to triage/add labels etc. -- We need more people to help triage issues. We've been able to grant bug triage permission more easily than granting commit privilege. Hear Emily's talk on being a core developer. -- If you have other ideas of improvements: write to python-dev, Use PEP 581 or PEP 588 in subject (to get my attention) -- Donate to The PSF. You can now donate directly for CPython's development: &lt;a class="reference external" href="https://www.python.org/psf/donations/python-dev/"&gt;https://www.python.org/psf/donations/python-dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/gLZ9W"&gt;https://t.ly/gLZ9W&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</summary></entry><entry><title>Don't be a robot, build the bot</title><link href="https://pyvideo.org/pycon-us-2019/dont-be-a-robot-build-the-bot.html" rel="alternate"></link><published>2019-05-03T10:50:00+00:00</published><updated>2019-05-03T10:50:00+00:00</updated><author><name>Mariatta</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/dont-be-a-robot-build-the-bot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing a large open source project like CPython is no easy task. Learn
how the Python core team automated their GitHub workflow with bots,
making it easier for maintainers and contributors to collaborate
together. Even if you’re not managing a large project, you can still
build your own bot! Hear some ideas on what you can automate on GitHub
and personalize your bot based on your own workflow. All you need is
Python. Don’t be a robot; build the bot.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Hands-on Intro to aiohttp</title><link href="https://pyvideo.org/pycon-us-2019/hands-on-intro-to-aiohttp.html" rel="alternate"></link><published>2019-05-02T13:20:00+00:00</published><updated>2019-05-02T13:20:00+00:00</updated><author><name>Mariatta</name></author><id>tag:pyvideo.org,2019-05-02:pycon-us-2019/hands-on-intro-to-aiohttp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is a relatively new feature in Python, with the &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntaxes only recently became proper keywords in Python 3.7.
Asyncio allows you to write asynchronous programs in Python. In this
tutorial, we’ll introduce you to an asyncio web library called
&lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt; is a library for building web client and server using Python
and asyncio. We’ll introduce you to several key features of &lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt;;
including routing, session handling, templating, using middlewares,
connecting to database, and making HTTP GET/POST requests. We’ll provide
best practises in building your &lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt; application, as well as how
to write tests for your application.&lt;/p&gt;
&lt;p&gt;We’ll use all new Python 3.7 features to build web services with asyncio
and aiohttp.&lt;/p&gt;
</summary><category term="tutorial"></category></entry></feed>