<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 16 Sep 2018 00:00:00 +0000</lastBuildDate><item><title>Rehabilitating Pickle</title><link>https://pyvideo.org/pycon-uk-2018/rehabilitating-pickle.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pickle is a compact serialisation protocol for Python objects. It could
be a convenient way for Python programs and distributed systems to
communicate. Unfortunately pickle is widely considered to be unsafe, and
it has lead to several vulnerabilities over the years. As the Python
manual warns&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The pickle module is not secure against erroneous or&lt;/div&gt;
&lt;div class="line"&gt;maliciously constructed data. Never unpickle data&lt;/div&gt;
&lt;div class="line"&gt;received from an untrusted or unauthenticated source.&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Does this have to be the case? Can we use Pickle safely?&lt;/p&gt;
&lt;p&gt;This talk will be a deep dive into what an attacker can do with a
maliciously constructed pickles. I’ll show what defences you can
implement against the common attacks, especially those that gain
arbitrary code execution. I will present new research into other
attacks, and mitigations. Finally I will review a few less known
alternatives to pickle.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Willmer</dc:creator><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-16:pycon-uk-2018/rehabilitating-pickle.html</guid></item><item><title>Rehabilitating Pickle</title><link>https://pyvideo.org/europython-2018/rehabilitating-pickle.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pickle is a compact serialisation protocol for Python objects. It could
be a convenient way for Python programs and distributed systems to
communicate. Unfortunately pickle is widely considered to be unsafe, and
it has lead to several vulnerabilities over the years. As the Python
manual warns&lt;/p&gt;
&lt;blockquote&gt;
The pickle module is not secure against erroneous or maliciously
constructed data. Never unpickle data received from an untrusted or
unauthenticated source.&lt;/blockquote&gt;
&lt;p&gt;Does this have to be the case? Can we use Pickle safely?&lt;/p&gt;
&lt;p&gt;This talk will be a deep dive into what an attacker can do with a
maliciously constructed pickles. I’ll show what defences you can
implement against the common attacks, especially those that gain
arbitrary code execution. I will present new research into other
attacks, and mitigations. Finally I will review a few less known
alternatives to pickle.&lt;/p&gt;
&lt;p&gt;This talk will expand on a &lt;a class="reference external" href="https://www.youtube.com/watch?v=5omAT9sqguE&amp;amp;list=PLWsDEQH0HiPZUhtqGczfDnNdiJMhWpmWd&amp;amp;index=9&amp;amp;t=13m10s"&gt;PyLondinium 2018 lightning
talk&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Willmer</dc:creator><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-27:europython-2018/rehabilitating-pickle.html</guid></item><item><title>FIDO - The dog ate my password</title><link>https://pyvideo.org/pycon-uk-2015/fido-the-dog-ate-my-password.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Passwords are a pain for us all - programmers, users and admins alike.
How can we reduce that pain, or eliminate it entirely?&lt;/p&gt;
&lt;p&gt;This talk will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduce &lt;a class="reference external" href="https://fidoalliance.org/specifications/overview/"&gt;Universal Authentication Framework (UAF) &amp;amp; Universal
Second Factor
(U2F)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Describe how they streamline authentication, even eliminate passwords
entirely&lt;/li&gt;
&lt;li&gt;Show how to integrate UAF/U2F into a Django web application&lt;/li&gt;
&lt;li&gt;Summarize the state of support for UAF &amp;amp; U2F in browsers, devices,
and the wider world&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an audience member you will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn how to implement seamless authentication&lt;/li&gt;
&lt;li&gt;Gain a sense of hope, that you never have type
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;EH3EX?e)8&amp;gt;6%sZ)48B^l3o08R&lt;/span&gt;&lt;/tt&gt; again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is a condensed version of &lt;a class="reference external" href="https://ep2015.europython.eu/conference/talks/taking-the-pain-%20out-of-passwords-and-authentication"&gt;Taking the pain out of passwords
and
authentication&lt;/a&gt;,
first presented at EuroPython 2015.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Willmer</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/fido-the-dog-ate-my-password.html</guid></item><item><title>Taking the pain out of passwords and authentication</title><link>https://pyvideo.org/europython-2015/taking-the-pain-out-of-passwords-and-authentication.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alex Willmer - Taking the pain out of passwords and authentication
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Passwords are a pain for us all - programmers, users and admins alike.
How can we reduce that pain, or eliminate it entirely?&lt;/p&gt;
&lt;p&gt;This talk will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review research into techniques that improve the usability of password systems, and mitigate shortcomings&lt;/li&gt;
&lt;li&gt;Introduce the new standards Universal Authentication Framework (UAF) &amp;amp; Universal Second Factor (U2F)&lt;/li&gt;
&lt;li&gt;Describe how they streamline authentication, even eliminate passwords entirely&lt;/li&gt;
&lt;li&gt;Show how to integrate UAF/U2F in Django and other Python frameworks&lt;/li&gt;
&lt;li&gt;Summarize the state of support for UAF &amp;amp; U2F in browsers, devices, and the wider world&lt;/li&gt;
&lt;li&gt;&amp;lt;del&amp;gt;Introduce Sonipass - a project to replace passwords, even on existing websites&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://moreati.github.io/passwordspain"&gt;Slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Willmer</dc:creator><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-08:europython-2015/taking-the-pain-out-of-passwords-and-authentication.html</guid></item><item><title>CloudABI: Capability based security on Linux/Unix</title><link>https://pyvideo.org/europython-2016/cloudabi-capability-based-security-on-linuxunix.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alex Willmer - CloudABI: Capability based security on Linux/Unix
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/capability-based-security-on-unix-with-cloudabi"&gt;https://ep2016.europython.eu//conference/talks/capability-based-security-on-unix-with-cloudabi&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Take POSIX, add capability-based security, then remove anything that
conflicts. The result is CloudABI, available for BSD, Linux, OSX et
al.&lt;/p&gt;
&lt;p&gt;A CloudABI process is incapable of any action that has a global impact
It can only affect the file descriptors you provide. As a result even
unknown binaries can safely be executed - without the need for
containers, virtual machines, or other sandboxes.&lt;/p&gt;
&lt;p&gt;This talk will introduce CloudABI, how to use it with Python, the
benefits, and the trade-offs.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nuxi.nl/"&gt;CloudABI&lt;/a&gt; is a new POSIX based computing environment that brings &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Capability-based_security"&gt;capability-based security&lt;/a&gt; to BSD, Linux, OSX et al.&lt;/p&gt;
&lt;p&gt;Unlike traditional Unix, if a CloudABI process goes rogue it _cannot_
execute random binaries, or read arbitrary files. This is achieved by
removing &lt;cite&gt;open()&lt;/cite&gt; &amp;amp; any other API able to acquire global resources.
Instead a CloudABI process must be granted _capabilities_ to specific
resources (e.g. directories, files, sockets) in the form of file
descriptors. If a process only has a descriptor for &lt;cite&gt;/var/www&lt;/cite&gt; then
it's _incapable_ of affecting any file or folder outside that
directory.&lt;/p&gt;
&lt;p&gt;This talk will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review the security &amp;amp; reusability problems of Linux &amp;amp; Unix processes&lt;/li&gt;
&lt;li&gt;Introduce capability-based security&lt;/li&gt;
&lt;li&gt;Summarize the design of CloudABI - its benefits &amp;amp; trade-offs&lt;/li&gt;
&lt;li&gt;Demonstrate how to write Python software for CloudABI &amp;amp; run it&lt;/li&gt;
&lt;li&gt;Point out the pitfalls &amp;amp; gotchas to be aware of&lt;/li&gt;
&lt;li&gt;Discuss the current &amp;amp; future status of CloudABI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CloudABI began life on FreeBSD. It also runs DragonFly BSD, NetBSD,
PC-BSD, Arch Linux, Debian, Ubuntu, &amp;amp; OS X. The API &amp;amp; ABI are kernel
agnostic - a CloudABI binary can run on any supported kernel. The
design is evolved from
&lt;a class="reference external" href="https://www.cl.cam.ac.uk/research/security/capsicum/"&gt;Capsicum&lt;/a&gt;, a library that allows processes to drop access to undesired syscalls at
runtime. CloudABI applies this at build time to make testing &amp;amp; lock-
down easier.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Willmer</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-31:europython-2016/cloudabi-capability-based-security-on-linuxunix.html</guid></item></channel></rss>