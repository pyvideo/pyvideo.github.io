<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Jul 2013 00:00:00 +0000</lastBuildDate><item><title>Unleash the ponies! Using FeinCMS to add content tools that users love to any Django model</title><link>https://pyvideo.org/djangocon-au-2013/unleash-the-ponies-using-feincms-to-add-content.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Site editors often struggle with editing rich content and managing
variations in layout in Django admin. By rich content we mean text,
images, video, tables, and so on. Trying to squeeze all this content
into a single rich-text editor is like trying to jam a magical pony into
a dog kennel. A better approach is to use a rich content framework like
FeinCMS. FeinCMS is a sensible, flexible framework which allows rich
content of any shape to be manipulated within any Django model in your
project.&lt;/p&gt;
&lt;p&gt;This talk describes what FeinCMS does and how it works, and most
importantly whether it should be pronounced to rhyme with &amp;quot;Vein&amp;quot; or
&amp;quot;Vine&amp;quot;. The talk is supported with working example code that shows the
progression of a FeinCMS project through several levels of
functionality, plus some real-world demonstrations of fully-developed
functionality.&lt;/p&gt;
&lt;p&gt;A FeinCMS Document model is just like any Django model, except it has
one or more 'templates'. Each 'template' has one or more regions, and
each region is a place where an unlimited amount of rich content types
can be added, removed or rearranged to form the content in that region.
This is all wrapped up in a nifty lightweight Javascript interface for
Django's admin, and a surprisingly simple implementation at the database
level.&lt;/p&gt;
&lt;p&gt;The types of content available in a given region is defined by a
collection of abstract Django models (e.g. one model to represent a
passage of text, another model to represent an image, and so on).
Developers are free to define their own FeinCMS content types, using all
the usual features of Django models.&lt;/p&gt;
&lt;p&gt;At the HTML template level, each FeinCMS content item renders a standard
template, and can optionally render different templates in different
circumstances.&lt;/p&gt;
&lt;p&gt;This flexibility allows Django developers to quickly design and build
CMSes that match the content and layout perfectly, meaning happier
content editors, fewer maintenance headaches and greater magical pony
freedom.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Greg Turner</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:djangocon-au-2013/unleash-the-ponies-using-feincms-to-add-content.html</guid></item><item><title>PyConAU 2010: GLAMkit: a harder, better, faster, stronger way to write reusable Django code</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GLAMkit: a harder, better, faster, stronger way to write reusable Django
code&lt;/p&gt;
&lt;p&gt;Presented by Dr. Greg Turner (the Interaction Consortium)&lt;/p&gt;
&lt;p&gt;As part of our web development work for Galleries, Libraries, Archives
and Museums (the so-called GLAM sector), we have open-sourced the common
tools and design patterns that we have developed as a web framework
called GLAMkit (&lt;a class="reference external" href="http://glamkit.org/"&gt;http://glamkit.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;GLAMkit is based on Django, and is inspired by its design philosophy of
several apps which implement specific features. However, by looking at
the successes and challenges faced by other CMSes and collections of
apps such as Pinax, we have taken the philosophy a stage futher.&lt;/p&gt;
&lt;p&gt;Rather than being a collection of Django apps, we have constructed
GLAMkit as a collection of optional and reusable Django 'toolkits' for
implementing common features. We leave the implementation details - the
things that Django already does brilliantly - to the application
developers themselves.&lt;/p&gt;
&lt;p&gt;In this talk, we will present the history of GLAMkit's development, with
particular focus on how our approach to reusability came about, and some
examples of that approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Greg Turner</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--glamkit--a-harder--better--faster--.html</guid><category>advocacy</category><category>architecture</category><category>community</category><category>pyconau</category><category>pyconau2010</category><category>web</category></item></channel></rss>