<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_generators.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-22T00:00:00+00:00</updated><entry><title>Il rasoio dei generatori di Python per semplificare il codice e ridurre l'uso di memoria</title><link href="https://pyvideo.org/pycon-italia-2018/il-rasoio-dei-generatori-di-python-per-semplificare-il-codice-e-ridurre-luso-di-memoria.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Davide Brunato</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/il-rasoio-dei-generatori-di-python-per-semplificare-il-codice-e-ridurre-luso-di-memoria.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I generatori sono una delle caratteristiche più avanzate di Python ma
anche meglio integrate con le altre parti del linguaggio e con una
sintassi molto simile ad altri costrutti. In particolare Python 3 fa un
utilizzo più esteso dei iteratori anche nelle funzioni base e semplifica
ulteriormente l’uso dei generatori. In questa presentazione illustrerei
il funzionamento delle funzioni generatrici e dei generatori partendo
dalle basi dell’iterazione. Analizzerei inoltre i vantaggi che i
generatori possono portare nella semplificazione del codice e nella
riduzione dell’uso di memoria, con degli esempi di codice e di misura
delle prestazioni e delle risorse utilizzate. Come esempio conclusivo
presenterei un modulo per il parsing di XPath, completamente basato sui
generatori.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="iterators"></category><category term="xpath"></category><category term="Python"></category><category term="generators"></category></entry><entry><title>Una zuppa di Python</title><link href="https://pyvideo.org/pycon-italia-2018/una-zuppa-di-python.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Alessandro Re</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/una-zuppa-di-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk, pensato principalmente per neofiti o per chi vuole
approfondire le sue conoscenze di base su Python, introdurrò brevemente
diversi argomenti, cercando di dare consigli utili, dritte sul modo
migliore di scrivere alcuni pezzi di codice e presentandovi strumenti
all’avanguardia. Nessun requisito particolare è richiesto.&lt;/p&gt;
&lt;p&gt;Tramite una serie di esempi, piccoli problemi e soluzioni, vi mostrerò
molti oggetti che possono fare una grossa differenza nel vostro percorso
di crescita (e nel vostro codice!). Non temete, però, la quantità di
argomenti trattati: è possibile che ne conosciate già una buona parte e
l’obiettivo è, prima di tutto, dare qualche direzione verso nuovi
orizzonti. Lo spirito di questo talk non è di diventare esperti in un
solo argomento, ma di imparare qualche nuova nozione, e vedere qualche
“snippet”, che possa rendere più veloce e divertente scrivere codice in
Python.&lt;/p&gt;
&lt;p&gt;Una succosa zuppa di Python, con dentro molti ingredienti, ma che
formano un piatto gustoso a palati diversi. Un esempio di cosa
assaggerete? Venv, testing, tips, iteratori, builtins e una spolveratina
di zen-zero!&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 18:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="best-practices"></category><category term="testing"></category><category term="generators"></category><category term="python3"></category></entry><entry><title>Generators Showdown Showcase</title><link href="https://pyvideo.org/pycon-es-2013/generators-showdown-showcase.html" rel="alternate"></link><published>2013-12-29T00:00:00+00:00</published><updated>2013-12-29T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2013-12-29:pycon-es-2013/generators-showdown-showcase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: James Powell&lt;/p&gt;
&lt;p&gt;Track: Avanzado&lt;/p&gt;
&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyCon Canada, PyData Boston, and PyTexas. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
</summary><category term="generators"></category><category term="coroutines"></category></entry><entry><title>Generators will free your mind</title><link href="https://pyvideo.org/pycon-es-2014/generators-will-free-your-mind.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-04-06:pycon-es-2014/generators-will-free-your-mind.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are generators and coroutines in Python? What additional conceptualisations do they offer, and how can we use them to better model problems? This is a talk I've given at PyData London, PyCon Spain, and the conference &amp;quot;for Python Quants&amp;quot;. It's an intermediate-level talk around the core concept of generators with a lot of examples of not only neat things you can do with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
&lt;p&gt;Generators are one of the most notable features of Python, and they are a critical component of Python 3's driving focus on iterability as a core protocol. This talk introduces the basic concepts surrounding generators, generator expressions, and co-routines, then dives into ways that generators can improve our code: not just in terms of performance but also by offering us better ways to model our problems.&lt;/p&gt;
</summary><category term="generators"></category><category term="coroutines"></category></entry><entry><title>Beyond Python Enhanced Generators</title><link href="https://pyvideo.org/europython-2011/beyond-python-enhanced-generators.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Erik Groeneveld</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/beyond-python-enhanced-generators.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Groeneveld - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Right after the introduction of PEP342 (Enhanced Generators) we started
to decompose programs into generators. It was soon discovered that for
real-life problems one would need something like &amp;quot;yield from&amp;quot;, as is
described in PEP380. At that time, we already had a similar solution
called '&lt;a class="reference external" href="http://weightless.io/compose"&gt;compose&lt;/a&gt;', which we adapted
to PEP380.&lt;/p&gt;
&lt;p&gt;After 5 years working with 'compose', we found a small set of other
features that are essential if you want to use Enhanced Generators not
only as a way of lightweight command scheduling, but also a a pipe-line,
or parser. Indeed, the latter concepts are what real co-routines are
about.&lt;/p&gt;
&lt;p&gt;This talk introduces what is needed on top of PEPs 342 and 380 based on
experience with decomposing big enterprise search engines into
co-routines. Parts of it have been presented on SPA (2008) and
EuroPython (2010). Understanding of Enhanced Generators is a
prerequisite.&lt;/p&gt;
&lt;p&gt;Experience has shown that the topic is subtle enough to require quite
some time for full understanding, hence the suggestion for a 90 min
slot.&lt;/p&gt;
</summary><category term="generators"></category><category term="search"></category></entry><entry><title>Fun with App Engine 1.5.0</title><link href="https://pyvideo.org/pycon-au-2011/fun-with-app-engine-150.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Greg Darke</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/fun-with-app-engine-150.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using generators as coroutines in App Engine to get more done.&lt;/p&gt;
</summary><category term="coroutines"></category><category term="generators"></category></entry><entry><title>Ereignis-diskrete Simulation mit SimPy</title><link href="https://pyvideo.org/pycon-de-2013/ereignis-diskrete-simulation-mit-simpy.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Stefan Scherfke</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/ereignis-diskrete-simulation-mit-simpy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Simulationen kommen immer dann zum Einsatz, wenn Experimente an realen
Systemen mit hohen Risiken bzw. Kosten verbunden oder gar nicht erst
möglich sind. Zudem erlauben Simulationen es, Vorgänge, die in der
realität lange Zeiträume beanspruchen, in zumeist wesentlich kürzerer
Zeit nachzuvollziehen.&lt;/p&gt;
&lt;p&gt;Nach einer kurzen Einführung in das Thema zeigt dieser Vortrag anhand
einfacher Beispiele, wie sich Ereignis-diskrete Simulationen mit SimPy
umsetzen lassen und welche Funktionen SimPy zur Umsetzung komplexerer
Simulationen bietet.&lt;/p&gt;
</summary><category term="ereignis-diskret"></category><category term="generators"></category><category term="simpy"></category><category term="simulation"></category><category term="zeit-diskret"></category></entry><entry><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Matt Harrison</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you should use
them? This hands-on tutorial will cover these intermediate subjects in
detail, by explaining the theory behind them then walking through
examples. It will also cover how to test such programs. The session will
conclude with some basic problems to work through.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing (45 min)&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;doctest&lt;/li&gt;
&lt;li&gt;brief code coverage intro&lt;/li&gt;
&lt;li&gt;other testing tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Programming (15 min)&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;Substitutes for above constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions (20 min)&lt;ul&gt;
&lt;li&gt;callables&lt;/li&gt;
&lt;li&gt;arguments (args, kw)&lt;/li&gt;
&lt;li&gt;mutable parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoping (10 min)&lt;/li&gt;
&lt;li&gt;Closures (5 min)&lt;/li&gt;
&lt;li&gt;Decorators (20 min)&lt;ul&gt;
&lt;li&gt;Simple decorators&lt;/li&gt;
&lt;li&gt;parameterized decorators&lt;/li&gt;
&lt;li&gt;mangling&lt;/li&gt;
&lt;li&gt;templates for decorators&lt;/li&gt;
&lt;li&gt;classmethod staticmethod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties (5 min)&lt;/li&gt;
&lt;li&gt;List comprehensions (10 min)&lt;/li&gt;
&lt;li&gt;Iterator pattern (5 min)&lt;/li&gt;
&lt;li&gt;Generators (15 min )&lt;/li&gt;
&lt;li&gt;Hands-on application (50 min)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="callables"></category><category term="closures"></category><category term="decorators"></category><category term="functionalprogramming"></category><category term="functions"></category><category term="generators"></category><category term="iterators"></category><category term="listcomprehensions"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-advanced"></category></entry></feed>