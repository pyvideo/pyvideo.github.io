<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_measuring.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-09T00:00:00+00:00</updated><entry><title>Faster Python Programs - Measure, don't Guess</title><link href="https://pyvideo.org/pycon-us-2018/faster-python-programs-measure-dont-guess.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Mike Müller</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/faster-python-programs-measure-dont-guess.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimization can often help to make Python programs faster or use less memory. Developing a strategy, establishing solid measuring and visualization techniques as well as knowing about algorithmic basics and datastructures are the foundation for a successful optimization. The tutorial will cover these topics.
Examples will give you a hands-on experience on how to approach efficiently.&lt;/p&gt;
&lt;p&gt;Python is a great language. But it can be slow compared to other languages
for certain types of tasks. If applied appropriately, optimization may reduce
program runtime or memory consumption considerably. But this often comes at a price. Optimization can be time consuming and the optimized program may be more complicated. This, in turn, means more maintenance effort. How do you find out if it is worthwhile to optimize your program? Where should you start?&lt;/p&gt;
&lt;p&gt;This tutorial will help you to answer these questions. You will learn how
to find  an optimization strategy based on quantitative and objective criteria.
You will experience that one's gut feeling what to optimize is often wrong.&lt;/p&gt;
&lt;p&gt;The solution to this problem is: „Measure, Measure, and Measure!“. You will
learn how to measure program run times as well as profile CPU and memory.
There are great tools available. You will learn how to use some of them.
Measuring is not easy because, by definition, as soon as you start to measure,
you influence your system. Keeping this impact as small as possible is
important. Therefore, we will cover different measuring techniques.&lt;/p&gt;
&lt;p&gt;Furthermore, we will look at algorithmic improvements. You will see that the
right data structure for the job can make a big difference. Finally, you will
learn about different caching techniques.&lt;/p&gt;
</summary><category term="profiling"></category><category term="measuring"></category></entry></feed>