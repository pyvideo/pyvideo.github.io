<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 31 May 2016 00:00:00 +0000</lastBuildDate><item><title>Functional Programming in Python</title><link>https://pyvideo.org/pydata-berlin-2016/functional-programming-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it. And that is functional - at least in my opinion. I'm working with Python for a living since two years after coming from a background in Ruby, Haskell, Clojure, and some more languages. Since then I have tried to marry ideomatic Python to the functional style I learned to love. It's time to share my experience.&lt;/p&gt;
&lt;p&gt;I will talk about&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;higher order functions&lt;/li&gt;
&lt;li&gt;partial function application and currying&lt;/li&gt;
&lt;li&gt;function composition&lt;/li&gt;
&lt;li&gt;functional collection transformations (and why they are relevant for PySpark)&lt;/li&gt;
&lt;li&gt;(fake) lazy evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and how it all relates to Python (and what's missing).&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/kirel/functional-python"&gt;https://github.com/kirel/functional-python&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Kirsch</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pydata-berlin-2016/functional-programming-in-python.html</guid><category>functional</category></item></channel></rss>