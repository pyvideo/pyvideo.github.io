<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 11:30:00 +0000</lastBuildDate><item><title>Thoth - how to recommend the best possible libraries for your application</title><link>https://pyvideo.org/pycon-us-2019/thoth-how-to-recommend-the-best-possible-libraries-for-your-application.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Having libraries in your Python project properly locked to a specific
version is a well known best practice. Dependency management tools in
the Python ecosystem lock dependencies to the latest version available,
but what if the latest version available is not the best fit for your
application? Open source project Thoth is an advanced Python dependency
resolver which recommends libraries for your project based on
observations that are gathered for Python libraries for specific runtime
environments. How these recommendations look like? How are different
observations like performance characteristics of machine learning
libraries for a particular hardware gathered?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fridolín Pokorný</dc:creator><pubDate>Sat, 04 May 2019 11:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-us-2019/thoth-how-to-recommend-the-best-possible-libraries-for-your-application.html</guid><category>talk</category></item><item><title>Selinon - dynamic distributed task flows</title><link>https://pyvideo.org/pycon-de-2018/selinon-dynamic-distributed-task-flows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever tried to define and process complex workflows for data
processing? If the answer is yes, you might have struggled to find the
right framework for that. You've probably came across Celery - popular
task flow management for Python. Celery is great, but it does not
provide enough flexibility and dynamic features needed badly in complex
flows. As we discovered all the limitations, we decided to implement
Selinon.&lt;/p&gt;
&lt;p&gt;Have you ever tried to define and process complex workflows for data
processing? If the answer is yes, you might have struggled to find the
right framework for that. You've probably came across Celery - popular
task flow management for Python. Celery is great, but it does not
provide enough flexibility and dynamic features needed badly in complex
flows. As we discovered all the limitations, we decided to implement
Selinon.&lt;/p&gt;
&lt;p&gt;Selinon enhances Celery task flow management and allows you to create
and model task flows in your distributed environment that can
dynamically change behavior based on computed results in your cluster,
automatically resolve tasks that need to be executed in case of
selective task runs, automatic tracing mechanism and many others.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fridolín Pokorný</dc:creator><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-24:pycon-de-2018/selinon-dynamic-distributed-task-flows.html</guid><category>Big Data</category><category>Infrastructure</category><category>Parallel Programming</category><category>Programming</category><category>Python</category></item><item><title>SelinonDistributed dynamic task flow management with Python</title><link>https://pyvideo.org/fosdem-2017/selinondistributed-dynamic-task-flow-management-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Selinon is a project that is based on popular Python project Celery. Celery is a distributed task queue that offers one to run tasks. Selinon gives one a power to define flows and dependencies in flows, schedule tasks based on results of workers, success or any external events, handle errors, trace flow state and actions in a distributed environment. Its main goal is to split task logic (code) and persistence logic from data and time dependencies between tasks in flows that are stated in simple YAML configuration files.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fridolín Pokorný</dc:creator><pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-05:fosdem-2017/selinondistributed-dynamic-task-flow-management-with-python.html</guid></item><item><title>Selinon - A dynamic distributed task computing with Python</title><link>https://pyvideo.org/pycon-sk-2017/selinon-a-dynamic-distributed-task-computing-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Selinon is a project that is based on popular project Celery. Selinon gives you a power to define flows and dependencies in flows in a distributed environments, schedule tasks based on results of workers, their success or any external events.&lt;/p&gt;
&lt;p&gt;Selinon is an advanced flow management above Celery project (an asynchronous distributed task queue) written in Python3, that allows you to dynamically schedule tasks based on results of previous tasks, group tasks into flows, schedule flows from other flows, store results of tasks in your storages and databases transparently, validate results against defined JSON schemas, track flow progress via the build-in tracing mechanism, complex per-task or per-flow failure handling with fallback tasks or fallback flows. All of this can be done in a fully distributed environments orchestrated by OpenShift, Kubernetes or any other orchestration tool.&lt;/p&gt;
&lt;p&gt;The project is actively developed and hosted at &lt;a class="reference external" href="https://github.com/selinon"&gt;https://github.com/selinon&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fridolín Pokorný</dc:creator><pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-03-11:pycon-sk-2017/selinon-a-dynamic-distributed-task-computing-with-python.html</guid></item></channel></rss>