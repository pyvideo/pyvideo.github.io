<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Python general</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_python-general.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Delta Chat, CFFI, pytest and all the Rust</title><link href="https://pyvideo.org/europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Holger Krekel</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delta Chat, a new approach to decentralized messaging, uses Python in
several ways. Delta Chat is a Whatsapp/Telegram-style messenger app
which uses the existing e-mail server network instead of central
servers. There is no address book upload, and no necessity to tie
accounts to mobile numbers. We'll live- ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delta Chat, a new approach to decentralized messaging, uses Python in
several ways. Delta Chat is a Whatsapp/Telegram-style messenger app
which uses the existing e-mail server network instead of central
servers. There is no address book upload, and no necessity to tie
accounts to mobile numbers. We'll live- demo how &amp;quot;Chat over E-mail&amp;quot;
works, with random audience members, in real-time.&lt;/p&gt;
&lt;p&gt;We'll then look into how Python is used for automated testing (with
pytest) against the messenger core library which is exposed through
CFFI. However, the core library will soon be ported to full Rust. Are
there better ways to interface Rust with Python than going through
C-interfaces?&lt;/p&gt;
&lt;p&gt;In the third part we'll introduce first example Chat Bots, written in
Python. Do you want to send an machine-generated system allert to a
sysadmin group? Or safely archive all media that is posted to a family
group? Or have your IoT sensor react to commands or send info? Just do
it without registering a bot to some central cite, or by exposing all
content information to (e. g. Telegram) servers. A Chat Bot only needs
access to a standard IMAP/SMTP account. We'll look at the simple Python
API for writing and testing powerful and versatile Chat bots.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- Delta Chat: &lt;a class="reference external" href="https://delta.chat"&gt;https://delta.chat&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Core library and Py bindings:
&lt;a class="reference external" href="https://github.com/deltachat/deltachat-core"&gt;https://github.com/deltachat/deltachat-core&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Deltabot: &lt;a class="reference external" href="https://github.com/deltachat/deltabot/"&gt;https://github.com/deltachat/deltabot/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Development"></category><category term="Python general"></category><category term="Rust"></category><category term="Sensors"></category><category term="System Administration"></category></entry><entry><title>import bacon ü•ì</title><link href="https://pyvideo.org/europython-2019/import-bacon.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Ivana Kellyerova</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/import-bacon.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's often said that Python comes with batteries included, meaning that
the standard library can do basically anything except for maybe conjure
bacon for you (though I heard that's coming in 3.8). I don't think we
fully appreciate the sheer vastness of it, though, so I went through ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's often said that Python comes with batteries included, meaning that
the standard library can do basically anything except for maybe conjure
bacon for you (though I heard that's coming in 3.8). I don't think we
fully appreciate the sheer vastness of it, though, so I went through it
module by module looking for hidden gems (sorry, eggs). This is a by no
means exhaustive compilation of the useful, the underrated, and the
funny.&lt;/p&gt;
&lt;p&gt;When it comes to the Python standard library, chances are you use it on
a daily basis -- or more likely, a more or less stable subset of it. The
usual way we add things to the subset is by looking for a solution to a
problem and ending up getting pointed to a standard library module.
That, however, means that the odds of you finding out that there is a
whole module whose sole purpose is to tell you if a string is a Python
keyword are very slim.&lt;/p&gt;
&lt;p&gt;The aim of this talk is to showcase CPython libraries that are
interesting in some way: mostly for their usefulness, but in some cases
simply for being wonderfully weird in some way. The talk is not aimed at
any particular level of Python experience - as a beginner you'll get a
taste of just how many batteries Python ships with, and as a person
using the language often you might end up growing your own personal
subset a bit more.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="CPython"></category><category term="Python general"></category></entry><entry><title>PEP yourself: 10 PEPs you should pay attention to</title><link href="https://pyvideo.org/europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Juan Santos</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/pep-yourself-10-peps-you-should-pay-attention-to.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reading standards documents can be a dull task. But like in other
fields, standards in Python play a big part. Python Enhancement
Proposals (PEPs) are defined, improved, and eventually implemented by
the community. They apply to mostly anything related to Python, from the
more abstract and general to the ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reading standards documents can be a dull task. But like in other
fields, standards in Python play a big part. Python Enhancement
Proposals (PEPs) are defined, improved, and eventually implemented by
the community. They apply to mostly anything related to Python, from the
more abstract and general to the more concrete and specific. Paying
attention to them, and knowing which ones to read beforehand is a vital
task that should take place prior to writing the first lines of code in
a project.&lt;/p&gt;
&lt;p&gt;In this talk we will go over a condensed list of the most important PEPs
to this date and see how they influence everyday coding. From style
guides and docstring conventions to data classes and assignment
expressions, we will see how these PEPs affect (or can affect) the code
we write, and how can we use them to improve our code and make
developing easier and more fun.&lt;/p&gt;
&lt;p&gt;After this talk, attendees will have a better grasp on why PEPs are
important to Python, which are a must read, and which ones they should
use as a guide in the future, both for coding and refactoring.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Clean Code"></category><category term="Python Skills"></category><category term="Python general"></category></entry><entry><title>A Day Has Only 24¬±1 Hours</title><link href="https://pyvideo.org/europython-2019/a-day-has-only-24-1-hours.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Miroslav ≈†ediv√Ω</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/a-day-has-only-24-1-hours.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On the last Sunday of October you may get ‚Äúone more hour of sleep‚Äù but
as well may spend much more time debugging code dealing with the time
zones, daylight saving time shifts and datetime stuff in general.&lt;/p&gt;
&lt;p&gt;We'll look at a few pitfalls you may encounter when working ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On the last Sunday of October you may get ‚Äúone more hour of sleep‚Äù but
as well may spend much more time debugging code dealing with the time
zones, daylight saving time shifts and datetime stuff in general.&lt;/p&gt;
&lt;p&gt;We'll look at a few pitfalls you may encounter when working with
datetimes in Python. We'll dissect the pytz library, explain why it
contains over 500 individual time zones while focusing on the 63 entries
in Europe. We'll also find the reason why pytz is not part of the
standard Python, why it gets updated so often and why even that won't
solve all your problems. Do you know what happens after 2021 when the EU
stops DST switching?&lt;/p&gt;
&lt;p&gt;Two centuries of short-sighted propaganda and long-term chaos in
forty-five minutes. Maybe that will make you want to avoid time zones in
your code altogether!&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Community"></category><category term="Python general"></category><category term="failures/mistakes"></category></entry><entry><title>How software can feed the world üå±</title><link href="https://pyvideo.org/europython-2019/how-software-can-feed-the-world.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Christian Barra</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-software-can-feed-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infarm is a FaaS, Farming as a Service, and whether you believe it or
not, our business is in-house farming at scale.&lt;/p&gt;
&lt;p&gt;We design and build our farms, grow vegetables and sell them, and the
backbone of our infrastructure is based on Python.&lt;/p&gt;
&lt;p&gt;You can check this video to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infarm is a FaaS, Farming as a Service, and whether you believe it or
not, our business is in-house farming at scale.&lt;/p&gt;
&lt;p&gt;We design and build our farms, grow vegetables and sell them, and the
backbone of our infrastructure is based on Python.&lt;/p&gt;
&lt;p&gt;You can check this video to see what we do -&amp;gt;
&lt;a class="reference external" href="https://twitter.com/christianbarra/status/1096399602159439874"&gt;https://twitter.com/christianbarra/status/1096399602159439874&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More than 10 million observations are recorded from our farms, feeding
our farm management system that allows operators, plant scientists, and
supervisors to monitor each farm in real-time.&lt;/p&gt;
&lt;p&gt;During this talk I will briefly introduce the world's problems we are
trying to resolve at Infarm and then talk about our IoT farms,
infrastructure, how we use Python and how we plan to improve the
capabilities of our farms by adding edge machine learning.&lt;/p&gt;
&lt;p&gt;Agenda&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- What are the problems we are trying to solve at Infarm&lt;/div&gt;
&lt;div class="line"&gt;- Our 4 tech pillars&lt;/div&gt;
&lt;div class="line"&gt;- How we started with Python&lt;/div&gt;
&lt;div class="line"&gt;- Issues we are facing while scaling our Python infrastructure to
support &amp;gt; 400 farms&lt;/div&gt;
&lt;div class="line"&gt;- How we plan to evolve our software and infrastructure on 4 different
levels: consolidate, architecture, cloud native and observability&lt;/div&gt;
&lt;div class="line"&gt;- How Python is going to support our automated farms and its role in
making the farms smarter (edge computing with AI)&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Big Data"></category><category term="Hardware/IoT"></category><category term="Internet of Things (IoT)"></category><category term="Machine-Learning"></category><category term="Python general"></category></entry><entry><title>Practical decorators</title><link href="https://pyvideo.org/europython-2019/practical-decorators.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Reuven Lerner</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/practical-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher level of abstraction, applying the same treatment to functions
and classes.&lt;/p&gt;
&lt;p&gt;But what can you actually do with them? For many Python developers I've
encountered, decorators sometimes appear to be a solution looking for a
problem.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you some practical uses for decorators, and how
you can use them to make your code more readable and maintainable, while
also providing more semantic power. Moreover, you'll see examples of
things would be hard to do without decorators. I hope that after this
talk, you'll have a good sense of how to use decorators in your own
Python projects.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Compiler and Interpreters"></category><category term="Data Structures"></category><category term="Programming"></category><category term="Python Skills"></category><category term="Python general"></category></entry><entry><title>Visual debugger for Jupyter Notebooks: Myth or Reality?</title><link href="https://pyvideo.org/europython-2019/visual-debugger-for-jupyter-notebooks-myth-or-reality.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Elizaveta Shashkova</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/visual-debugger-for-jupyter-notebooks-myth-or-reality.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers like Jupyter Notebooks for their flexibility:
they are very useful for interactive prototyping, scientific
experiments, visualizations and many other tasks. There are different
development tools which make working with Jupyter Notebooks easier and
smoother, but all of them lack very important feature: visual debugger.
Since Jupyter ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers like Jupyter Notebooks for their flexibility:
they are very useful for interactive prototyping, scientific
experiments, visualizations and many other tasks. There are different
development tools which make working with Jupyter Notebooks easier and
smoother, but all of them lack very important feature: visual debugger.
Since Jupyter Kernel is a usual Python process, it looks reasonably to
use one of existing Python debuggers with it. But is it really possible?&lt;/p&gt;
&lt;p&gt;In this talk we‚Äôll try to understand how Python debugger should be
changed to work with Jupyter cells and how these changes are already
implemented in the PyCharm IDE. After that we‚Äôll look into the whole
Jupyter architecture and try to understand which bottlenecks in it
prevent creation of universal Jupyter debugger at the moment.&lt;/p&gt;
&lt;p&gt;This talk requires a basic knowledge of Jupyter Notebooks and
understanding of Python functions and objects. It will be interesting
for people who want to learn internals of the tools they use every day.
Also it might be an inspiration for people who want to implement a
visual debugger in their favourite IDE.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Debugging"></category><category term="Jupyter"></category><category term="Python general"></category><category term="Tooling"></category></entry><entry><title>Building quantum applications with D-Wave's Leap</title><link href="https://pyvideo.org/europython-2020/building-quantum-applications-with-d-waves-leap.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alexander Condello</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/building-quantum-applications-with-d-waves-leap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get started coding on a quantum computer using D-Wave's Python-based Leap cloud service.&lt;/p&gt;
&lt;p&gt;In the past, quantum computing was largely reserved for researchers, physicists, and scientists with direct access to physical quantum computing systems. But the game has changed, thanks to the cloud. Barriers to quantum computing are coming ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get started coding on a quantum computer using D-Wave's Python-based Leap cloud service.&lt;/p&gt;
&lt;p&gt;In the past, quantum computing was largely reserved for researchers, physicists, and scientists with direct access to physical quantum computing systems. But the game has changed, thanks to the cloud. Barriers to quantum computing are coming down quickly.&lt;/p&gt;
&lt;p&gt;Today, cloud access (like D-Wave‚Äôs Leap 2 quantum application environment) and improvements in quantum computing hardware, software, and developer tools are allowing programmers around the world to code on live quantum computers in real-time. Developers, students, and researchers around the world can now tap into the power of a quantum via their browser ‚Äî quantum mechanical knowledge not required. Users and private companies have already built over 200 early applications on D-Wave‚Äôs computers in industries ranging from automotive to machine learning, aerospace, finance, and beyond. The quantum application era is here, and the growing quantum developer community is making it a reality.&lt;/p&gt;
&lt;p&gt;In this session, Alex Condello, Manager of Applications Development Technology and Tools at D-Wave Systems, will talk about the burgeoning quantum application development ecosystem, and how developers can start learning to code on a quantum computer today. This includes a walkthrough of Leap 2, D-Wave's new quantum cloud service equipped with hybrid solvers, and D-Wave's Ocean SDK. Alex will also explore some of the early applications that developers and companies have built to-date.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Community"></category><category term="Jupyter"></category><category term="Machine-Learning"></category><category term="Other Hardware"></category><category term="Python general"></category></entry><entry><title>Digital Transformation in the fight against Coronavirus</title><link href="https://pyvideo.org/europython-2020/digital-transformation-in-the-fight-against-coronavirus.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bruno Ferreira</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/digital-transformation-in-the-fight-against-coronavirus.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;COVID-19: An experience of the Comptroller General of the State of Goi√°s&lt;/p&gt;
&lt;p&gt;The Corona Virus - COVID-19 pandemic caused a significant impact on public services. In particular, it brought a massive digitalization of services that were offered in person. In addition, there was a great deal of pressure on official ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;COVID-19: An experience of the Comptroller General of the State of Goi√°s&lt;/p&gt;
&lt;p&gt;The Corona Virus - COVID-19 pandemic caused a significant impact on public services. In particular, it brought a massive digitalization of services that were offered in person. In addition, there was a great deal of pressure on official channels, whether to seek a service or to report a fact. Qualified and official information becomes an element in combating the pandemic. Knowing where to look for information, reporting a fact or getting a qualified response are essential steps to maximize the efficiency of the citizen's decision-making process, especially in a scenario of such uncertainty. The State has a fundamental role, whether as an inducer, executor or provider of the means necessary for information and decision-making to be effective at that time.
Connected by the growing demand, the State of Goi√°s, through the State's Comptroller General, published a series of technological tools with the objective of bringing information to the citizen, promoting social control and improving public policies to fight the Coronavirus.
This document seeks to show how technological tools were adopted and implemented in terms of transforming the ombudsman channels in the State of Goi√°s through the State's Comptroller General in actions to combat the Coronavirus pandemic. The document seeks to show how the transformation of the ombudsman channels occurred through machine learning techniques and data visualization.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="PyPi"></category><category term="PyPy"></category><category term="Python Skills"></category><category term="Python general"></category><category term="R"></category></entry><entry><title>Elegant Exception Handling</title><link href="https://pyvideo.org/europython-2020/elegant-exception-handling.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Eyal Trabelsi</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/elegant-exception-handling.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Error handling is hard. Regardless of the approach you take, it usually means littering your application with checks and validations that greatly reduce code readability. So how can we tackle exceptions?&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Python Skills"></category><category term="Python general"></category><category term="python"></category></entry><entry><title>Guido van Rossum Q&amp;A</title><link href="https://pyvideo.org/europython-2020/guido-van-rossum-qa.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Guido van Rossum</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/guido-van-rossum-qa.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Q&amp;amp;A session with Guido van Rossum, Creator of Python.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Python general"></category></entry><entry><title>How to Run a Corridor Track in a Remote Conference with Python</title><link href="https://pyvideo.org/europython-2020/how-to-run-a-corridor-track-in-a-remote-conference-with-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/how-to-run-a-corridor-track-in-a-remote-conference-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How hard can it be..? Let's find out..!&lt;/p&gt;
&lt;p&gt;One of the best aspects of any conference, and EuroPython in particular, is the corridor track. It's when you walk around the physical conference venue and bump into an old buddy, find yourself striking up a conversation with a friendly co-attendee ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How hard can it be..? Let's find out..!&lt;/p&gt;
&lt;p&gt;One of the best aspects of any conference, and EuroPython in particular, is the corridor track. It's when you walk around the physical conference venue and bump into an old buddy, find yourself striking up a conversation with a friendly co-attendee in the coffee queue, or join a huddle of welcoming folks discussing something interesting. The corridor track is where the community comes alive.&lt;/p&gt;
&lt;p&gt;How do we remotely recreate the opportunity for chance encounters, unexpected conversation and exploration of a venue and new city with friends?&lt;/p&gt;
&lt;p&gt;We already have a template for a solution: MUDs (multi-user dungeons/dimensions), back in the day, were hugely popular virtual worlds of text. I asked myself, &amp;quot;what would a MUD written in 2020 look like?&amp;quot;. Then, rather foolishly, &amp;quot;how hard can this be?&amp;quot;. Happily, I'd written a MUD in Python as a recent entry to PyWeek.&lt;/p&gt;
&lt;p&gt;This talk describes how I initially created, extended and then refined my very own MUD, written in Python using asyncio, structlog, sly, redis and other fun technology. What's more, this MUD is special because it's a programmable MUD: it's really a multi-user development platform for on-the-fly coding of interactive virtual worlds.&lt;/p&gt;
&lt;p&gt;What could possibly go wrong..? Let's find out..!&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Conferences and Meet-Ups"></category><category term="Fun and Humor"></category><category term="Game-Development"></category><category term="Python general"></category></entry><entry><title>The Hidden Power of the Python Runtime</title><link href="https://pyvideo.org/europython-2020/the-hidden-power-of-the-python-runtime.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Elizaveta Shashkova</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/the-hidden-power-of-the-python-runtime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Retrieve useful information from Python runtime and build development tools based on it&lt;/p&gt;
&lt;p&gt;Many people like Python for its simplicity and beauty. But every statement in Python, even the simple one, produces a lot of events during the program execution. These events are usually hidden from a user, so ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Retrieve useful information from Python runtime and build development tools based on it&lt;/p&gt;
&lt;p&gt;Many people like Python for its simplicity and beauty. But every statement in Python, even the simple one, produces a lot of events during the program execution. These events are usually hidden from a user, so it helps developers to skip low-level implementation details and focus on bigger things.&lt;/p&gt;
&lt;p&gt;At the same time many parts of this hidden information are very useful and interesting to examine. The good news is that Python Runtime allows to retrieve it really simply, so there is no need to configure additional libraries or pass additional parameters to interpreter. Everybody can do it right inside their Python code.&lt;/p&gt;
&lt;p&gt;During this talk we will learn how Python allows to inspect current program state during the execution. We will learn about Python variables, frame objects and useful information they store. After that we will discuss several powerful tools which are based on the runtime information and which can be helpful for any Python programmer in their everyday life.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Debugging"></category><category term="Development"></category><category term="Python general"></category><category term="Tooling"></category></entry><entry><title>The Hitchhiker's Guide to CLIs in Python</title><link href="https://pyvideo.org/europython-2020/the-hitchhikers-guide-to-clis-in-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Vinayak Mehta</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/the-hitchhikers-guide-to-clis-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn all about CLIs and how to create one&lt;/p&gt;
&lt;p&gt;Command-line applications and interfaces are used by both newcomers and experienced Python developers everyday. But do you know how they came to be? Hop on to this ship as we go through the CLI galaxy and look at its history ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn all about CLIs and how to create one&lt;/p&gt;
&lt;p&gt;Command-line applications and interfaces are used by both newcomers and experienced Python developers everyday. But do you know how they came to be? Hop on to this ship as we go through the CLI galaxy and look at its history, explore the CLI anatomy and discover some Python packages that can help us create them.&lt;/p&gt;
&lt;p&gt;We‚Äôll then look at some widely used CLIs of our time. And emulate one of them by creating our own CLI using Click. Finally, we‚Äôll package it and publish it on PyPI. Are you ready to travel faster-than-light using this ship‚Äôs Infinite Improbability Drive? Carry your towel!&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Command-Line"></category><category term="Development"></category><category term="Python general"></category><category term="The Answer to Life the Universe and Everything Else"></category><category term="Tooling"></category></entry><entry><title>Writing Zenlike Python</title><link href="https://pyvideo.org/europython-2020/writing-zenlike-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Jason McDonald</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-zenlike-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are going on about?&lt;/p&gt;
&lt;p&gt;Most of us are familiar with the &amp;quot;Zen of Python&amp;quot;, Tim Peters's legendary, if tongue-in-cheek, set of guiding principles for the Python language. But can they actually inform Pythonic code?&lt;/p&gt;
&lt;p&gt;In this talk, Jason C. McDonald will unpack how the twenty principles (including the unwritten rule) of the Zen can guide you to write beautiful, maintainable code, by treating Python AS Python!&lt;/p&gt;
&lt;p&gt;This talk is intended primarily for developers who have come to Python from another language, no matter their experience level. McDonald will shed light on how to work WITH Python's type system, statements, and iterative tools, rather than against them. You'll walk away with a new appreciation of the language, and an understanding of what Pythonic really means; an understanding which will empower you to find the One Obvious Way to solve any problem in Python.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Beginners"></category><category term="Clean Code"></category><category term="Python 3"></category><category term="Python general"></category><category term="The Answer to Life the Universe and Everything Else"></category></entry></feed>