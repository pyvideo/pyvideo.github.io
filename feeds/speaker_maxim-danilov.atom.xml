<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Maxim Danilov</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_maxim-danilov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-11-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Hidden gems of Django Admin</title><link href="https://pyvideo.org/djangocon-us-2022/hidden-gems-of-django-admin.html" rel="alternate"></link><published>2022-10-19T00:00:00+00:00</published><updated>2022-10-19T00:00:00+00:00</updated><author><name>Maxim Danilov</name></author><id>tag:pyvideo.org,2022-10-19:/djangocon-us-2022/hidden-gems-of-django-admin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Admin Panel is a complex and bad-documented tool in the Django that can greatly speed up development if you start to understand it.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Isn't it easier for us to write our Backend?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will answer: “No, it’s not easier!”.&lt;/p&gt;
&lt;p&gt;Seven years of insights and discoveries in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Admin Panel is a complex and bad-documented tool in the Django that can greatly speed up development if you start to understand it.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Isn't it easier for us to write our Backend?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will answer: “No, it’s not easier!”.&lt;/p&gt;
&lt;p&gt;Seven years of insights and discoveries in my report.&lt;/p&gt;
</content><category term="DjangoCon US 2022"></category></entry><entry><title>Django FTL: Resolving Bottlenecks on the Path to High Performance</title><link href="https://pyvideo.org/pycon-fr-2024/django-ftl-resolving-bottlenecks-on-the-path-to-high-performance.html" rel="alternate"></link><published>2024-11-03T00:00:00+00:00</published><updated>2024-11-03T00:00:00+00:00</updated><author><name>Maxim Danilov</name></author><id>tag:pyvideo.org,2024-11-03:/pycon-fr-2024/django-ftl-resolving-bottlenecks-on-the-path-to-high-performance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raw Django doesn't take the first places when comparing the performance of Python web frameworks. However, it can be pretty fast if we identify the bottlenecks and find ways to avoid them. Comparing performance and implementation complexity before and after gives us an understanding of which features should be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raw Django doesn't take the first places when comparing the performance of Python web frameworks. However, it can be pretty fast if we identify the bottlenecks and find ways to avoid them. Comparing performance and implementation complexity before and after gives us an understanding of which features should be implemented and what can be skipped.&lt;/p&gt;
&lt;p&gt;The Django framework offers a beautiful collection of diverse tools that are easy to understand, set up, and start working with. However, after some time, appearing disadvantages of the framework's features may increase the complexity of the development process and fatally reduce project performance. While the new version of Django successfully improves the developers effictivity, the task to improving performance requires a good understanding of how Django works.&lt;/p&gt;
&lt;p&gt;In this talk, I will review the most significant performance-reducing factors in Django and provide examples of how to avoid them.&lt;/p&gt;
&lt;p&gt;Overview of the talk from a 10,000-feet view:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Django vs. other faster frameworks: reviewing architectural differences.&lt;/li&gt;
&lt;li&gt;Request-Response Flow: Identifying elements that can be easily omitted.&lt;/li&gt;
&lt;li&gt;Forms and Data validation: Balancing flexibility and performance.&lt;/li&gt;
&lt;li&gt;The quickest methods for data serialization.&lt;/li&gt;
&lt;li&gt;Debunking myths about async-await productivity.&lt;/li&gt;
&lt;li&gt;Fire and Forget: FTL Client-Server Communication.&lt;/li&gt;
&lt;li&gt;Improving Time to First Byte (TTFB). Less known Responce classes.&lt;/li&gt;
&lt;li&gt;Reviewing other utilities to expedite our project.&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By comparing performance before and after, every developer attending this talk can decide which advice to implement in their own projects.&lt;/p&gt;
</content><category term="PyCon FR 2024"></category></entry></feed>