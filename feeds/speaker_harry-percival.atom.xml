<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_harry-percival.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-10T00:00:00+00:00</updated><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 1</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 2</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obidire alla capra! TDD con Python i Selenium</title><link href="https://pyvideo.org/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Intermediate testing with Django: Outside-in TDD and Mocking effectively</title><link href="https://pyvideo.org/pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What order should I write my tests and code in to avoid wasting time on blind alleys?&lt;/li&gt;
&lt;li&gt;If I'm using Mocks in my tests to avoid external dependencies, how do I avoid getting stuck with unwieldy, unreadable tests that don't actually tell me when things have gone wrong?&lt;/li&gt;
&lt;li&gt;Unit tests vs integration tests vs functional tests, which should I use when, and what are the trade-offs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial we'll work through an example of using an existing Django codebase, adding a new feature, and experimenting with different testing techniques along the way to illustrate the pros and cons of each&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bottom-up vs outside-in development&lt;/li&gt;
&lt;li&gt;double-loop TDD&lt;/li&gt;
&lt;li&gt;using Mocks to isolate application layers from each other&lt;/li&gt;
&lt;li&gt;&amp;quot;listen to your tests&amp;quot;, and learning to use ugly or convoluted tests as a signal for improving design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some familiarity with Django is desirable, although skills learned in other web frameworks are transferrable.  By the end, you'll be able to go back to your own projects with practical experience, and a new way of thinking about how to optimise your tests for your own circumstances.&lt;/p&gt;
</summary><category term="django"></category><category term="tdd"></category><category term="mock"></category></entry><entry><title>Introduction to TDD with Django</title><link href="https://pyvideo.org/pycon-us-2018/introduction-to-tdd-with-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/introduction-to-tdd-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.&lt;/p&gt;
&lt;p&gt;The tutorial is suitable for people who are new to either testing, or Django, or both, although some basic working knowledge of Python syntax (or programming in another language) is assumed.&lt;/p&gt;
&lt;p&gt;Learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit testing and Functional testing&lt;/li&gt;
&lt;li&gt;the Selenium browser automation tool&lt;/li&gt;
&lt;li&gt;Python's unittest standard library module&lt;/li&gt;
&lt;li&gt;Django models, views and templates&lt;/li&gt;
&lt;li&gt;testing front-end and back-end code&lt;/li&gt;
&lt;li&gt;refactoring, using tests&lt;/li&gt;
&lt;li&gt;the unit-test/code cycle, or Red-Green-Refactor, TDD workflow&lt;/li&gt;
&lt;li&gt;and the Testing Goat, Python's unofficial mascot for testing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come prepared!  You'll need a Python 3.6 virtualenv with Django and Selenium installed.  Detailed instructions are provided &lt;a class="reference external" href="https://www.obeythetestinggoat.com/book/pre-requisite-installations.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="tdd"></category><category term="django"></category></entry><entry><title>Don't be scared of the lava! Why purist unit tests are a waste of time.</title><link href="https://pyvideo.org/djangocon-europe-2014/dont-be-scared-of-the-lava-why-purist-unit-tests-are-a-waste-of-time.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/dont-be-scared-of-the-lava-why-purist-unit-tests-are-a-waste-of-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;purist&amp;quot; approach to unit tests says that your tests should be
perfectly isolated, that they should mock out any dependencies, and that
they should never, ever touch the database. The database is hot lava!&lt;/p&gt;
&lt;p&gt;In this talk I will outline a (controversial) thesis: that such tests
are just not very useful in the world of web application development,
and Django. Given that my opinion is so wrong-headed (or maybe just
plain wrong), I will endeavour to provide a balanced picture of the pros
and cons of different testing approaches, including the arguments for
purist unit tests, the options for integration testing and acceptance
testing, the &amp;quot;functional core imperative shell&amp;quot; pattern (AKA hexagon
architecture), all with a view to leaving the audience informed enough
to make their own decisions about testing strategy.&lt;/p&gt;
</summary></entry><entry><title>How does a spreadsheet work?</title><link href="https://pyvideo.org/pycon-uk-2014/how-does-a-spreadsheet-work.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/how-does-a-spreadsheet-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Harry Percival&lt;/p&gt;
&lt;p&gt;How does a spreadsheet work? A tour of the codebase of Dirigible, the Pythonic spreadsheet&lt;/p&gt;
&lt;p&gt;Have you ever wondered how a spreadsheet works? It's actually surprisingly simple.&lt;/p&gt;
&lt;p&gt;Join me for a tour around the codebase of Dirigible, the Pythonic spreadsheet (recently rescued from its abandonware status and made open source).&lt;/p&gt;
&lt;p&gt;Find out how cell formulae are parsed and evaluated to become cell values, how the dependency graph of the spreadsheet is built, and how custom python code can be merged into spreadsheet calculations without everything exploding violently.&lt;/p&gt;
</summary></entry><entry><title>How (not) to argue - a recipe for more productive tech conversations</title><link href="https://pyvideo.org/pycon-uk-2015/how-not-to-argue-a-recipe-for-more-productive-tech-conversations.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/how-not-to-argue-a-recipe-for-more-productive-tech-conversations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you've spent any time in technology, you will have come across the
classic phenomenon of the unproductive technical debate -- and not just
bikeshedding. Much of our technical debate seems to end up full of
cognitive dissonance, ego, the cherry-picking of evidence, talking at
cross purposes, and argument for its own sake.&lt;/p&gt;
&lt;p&gt;This talk will attempt to diagnose the roots of this disfunction, and
provide some pointers towards how to engage in more constructive
dialogue.&lt;/p&gt;
&lt;p&gt;Keywords: Torvalds, Socrates, Jonathan Haidt, Djangogirls, Cognitive
Behavioural Therapy.&lt;/p&gt;
</summary></entry><entry><title>How to build a spreadsheet with Python</title><link href="https://pyvideo.org/europython-2015/how-to-build-a-spreadsheet-with-python.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2015-08-08:europython-2015/how-to-build-a-spreadsheet-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Harry Percival - How to build a spreadsheet with Python
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Do you know how a spreadsheet works?  Can you imagine building one,
from scratch, in Python?  This talk will be a whirlwind overview of
how to do just that.  Based on the source code of Dirigible, a short-
lived experiment in building a cloud-based Pythonic spreadsheet (now
[open-sourced](&lt;a class="reference external" href="https://github.com/pythonanywhere/dirigible"&gt;https://github.com/pythonanywhere/dirigible&lt;/a&gt;-
spreadsheet), for the curious).&lt;/p&gt;
&lt;p&gt;We'll start from scratch, with a simple data representation for a two-
by-two grid, and then gradually build up the functionality of our
spreadsheet:
- Cell objects, and the formula/value distinction
- Evaluating cells, from simple arithmetic up to an Excel-like dialect
- Building up the dependency graph, and the ensuing fun times with
recursion (arg!)
- Integrating custom functions and user-defined code.&lt;/p&gt;
&lt;p&gt;Showing and explaining code examples, and alternating with  live demos
(don't worry, I've done this before!)&lt;/p&gt;
&lt;p&gt;And it's all in Python!  You'll be surprised at how easy it turns out
to be, when you go step-by-step, each building on the last... And I
promise you'll be at least a couple of  moderately mind-blowing
moments :)&lt;/p&gt;
</summary></entry><entry><title>PythonAnywhere and Education</title><link href="https://pyvideo.org/europython-2015/pythonanywhere-and-education.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2015-08-07:europython-2015/pythonanywhere-and-education.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Harry Percival - PythonAnywhere and Education
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]
[Education Summit]&lt;/p&gt;
&lt;p&gt;Python may be the ideal language for teaching because of its
simplicity and readability, but actually getting a working and
consistent development environment installed on a diverse set of
student (or school) computers can be less than straightforward. And
then there's pip, numpy, scipy, windows vs unix command lines...&lt;/p&gt;
&lt;p&gt;As a result, we've had lots of teachers coming to PythonAnywhere over
the years, to skip all these problems. We've recently started adding
some extra features to help teachers and students which we're keen to
share with the EuroPython audience.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2016-07-18</title><link href="https://pyvideo.org/europython-2016/lightning-talks-2016-07-18.html" rel="alternate"></link><published>2016-07-28T00:00:00+00:00</published><updated>2016-07-28T00:00:00+00:00</updated><author><name>Harald Massa</name></author><id>tag:pyvideo.org,2016-07-28:europython-2016/lightning-talks-2016-07-18.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers - Lightning Talks
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Lightning talks, presented by Harald Massa&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Larry Hastings  - My life as a MEME&lt;/li&gt;
&lt;li&gt;Javier Domingo - Python exp!&lt;/li&gt;
&lt;li&gt;Danielle Procida - Python Adventures in Namibia&lt;/li&gt;
&lt;li&gt;Radomes Dopiralski - Win Fabulous Prizes&lt;/li&gt;
&lt;li&gt;Thomas Waldmann - Borg Backup&lt;/li&gt;
&lt;li&gt;Lasse Schuirmann - Cola - Lint and Fix All Code&lt;/li&gt;
&lt;li&gt;Tuna Vargi - argüman.org&lt;/li&gt;
&lt;li&gt;Harry Percival &amp;amp; Fabian Kreutz - Sponsored Massage Training, in Aid of The Python Software Foundation&lt;/li&gt;
&lt;li&gt;Michele Simionato - Thanks for the Python3 Statement&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Outside-In TDD</title><link href="https://pyvideo.org/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="testing"></category><category term="tdd"></category><category term="Django"></category><category term="bdd"></category></entry><entry><title>(PARTIAL) - Python Bootcamp</title><link href="https://pyvideo.org/pycon-us-2016/partial-harry-percival-python-bootcamp-pycon-2016.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/partial-harry-percival-python-bootcamp-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;If you’re thinking of coming to the conference but you’re new to Python, this could be the session for you. Whether you’re totally new to programming or you already know another language, this hands-on session will give you a crash-course in Python, and the ecosystem around it, to give you the context you need to get the most out of the rest of Pycon.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Obidire alla capra! TDD con Python i Selenium</title><link href="https://pyvideo.org/europython-2012/obidire-alla-capra-tdd-con-python-i-selenium.html" rel="alternate"></link><published>2012-07-05T00:00:00+00:00</published><updated>2012-07-05T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2012-07-05:europython-2012/obidire-alla-capra-tdd-con-python-i-selenium.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Harry Percival - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In breve: - Seguiremo il tutorial officiale di Django, pero con la
metodologia TDD - primo, i test! - Inclusi i test del browser stesso con
Selenium - Anche “unit test” dei model, views e forms di Django -
Discussioni della filosofia TDD: cosa testare, cosa non testare, come
testare… - l’Italiano del speaker non e garantito perfetto, pero
&lt;a class="reference external" href="http://harry.pythonanywhere.com/"&gt;http://harry.pythonanywhere.com/&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/hjwp%20/Test-Driven-Django-Tutorial"&gt;https://github.com/hjwp/Test-Driven-Django-Tutorial&lt;/a&gt;
“Test-Driven Django with Selenium” o “La capra di Test incontra il pony
di Django” Questo training sarÃ&amp;amp;nbsp_place_holder; particolarmente per
in principianti, o uno che vuol’ imparare un po di: Django Selenium TDD
(&amp;quot;Test-Driven-Development&amp;quot;) Per uno che conosce giÃ&amp;amp;nbsp_place_holder;
bene questi tre temi, non sarÃ&amp;amp;nbsp_place_holder; tanto utile. L’idea
e di seguire il tutorial officiale di Django, dunque
sarÃ&amp;amp;nbsp_place_holder; dal punto di visto dal principiante, pero a
ogni punto useremo la metodologia “TDD” - costruendo dei test prima dal
coding del sito. Non sara solo i “unit test”. Si comincia con i
“functional” test, usando Selenium, che permette da usare un vero
browser per testare le funzione del sito, dal punto di vista del
utilizzatore. Sento una domanda: PerchÃ© dovrÃ² ascoltare a lui? Son’
fortunato di avere iniziato la mia carriera con una compagnie di
fanatici del “Extreme Programming”, una metodologia che domanda un
devozione quasi-religiosa al test. La mia conversione non era facile,
posso dire che ho chiesto domande ad ogni turno, “perchÃ© fasciamo cosi,
perchÃ© non possiamo andare direttamente al coding” etc etc - e posso
dire che adesso son proprio convinto. Ho imparato degli migliori, e ho
tutta la passione di un neofita. Questo training
sarÃ&amp;amp;nbsp_place_holder; anche la prima volta che l’ho fatto in
Italiano, allora sarÃ&amp;amp;nbsp_place_holder; sicuramente emozionante.&lt;/p&gt;
</summary></entry><entry><title>Fully Test-Driven Web Development with Django and Selenium</title><link href="https://pyvideo.org/pycon-us-2013/fully-test-driven-web-development-with-django-and.html" rel="alternate"></link><published>2013-03-14T00:00:00+00:00</published><updated>2013-03-14T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-03-14:pycon-us-2013/fully-test-driven-web-development-with-django-and.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The concept: run through the official Django tutorial, but with full
TDD.&lt;/p&gt;
&lt;p&gt;So, Browser-based testing with Selenium + in-depth unit-testing;&lt;/p&gt;
&lt;p&gt;TDD Discussions: what to test, what not to test;&lt;/p&gt;
&lt;p&gt;Aimed at beginners (new to Django, TDD or Selenium)&lt;/p&gt;
&lt;p&gt;Come prepared! you’ll need Git, Firefox, Python2.7, Django1.4 and
Selenium installed&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>TDD for web applications, from scratch</title><link href="https://pyvideo.org/pycon-us-2014/tdd-for-web-applications-from-scratch.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/tdd-for-web-applications-from-scratch.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn Test-Driven-Development and Django by building a simple web
application from scratch. We'll cover unit testing, Django models, views
and templates, as well as using Selenium to open up a real web browser
for functional tests. This talk is intended for audiences new to TDD,
new to Django, and even new to Python! You'll need Python 3, Git,
Firefox, Selenium and Django installed on your PC.&lt;/p&gt;
</summary></entry><entry><title>TDD with Django, from scratch: a beginner's intro to testing and web development</title><link href="https://pyvideo.org/pycon-us-2015/tdd-with-django-from-scratch-a-beginners-intro.html" rel="alternate"></link><published>2015-04-09T00:00:00+00:00</published><updated>2015-04-09T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2015-04-09:pycon-us-2015/tdd-with-django-from-scratch-a-beginners-intro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A beginner's introduction to testing and web development with Django.
We'll build a simple web app, from scratch, but with full TDD, including
functional testing with Selenium and unit testing Django's views,
templates, and models. Some familiarity with Python is desirable, but no
prior knowledge of Django or testing is assumed.&lt;/p&gt;
</summary></entry></feed>