<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 14 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Scaling from 0 to 60k RPM</title><link>https://pyvideo.org/pyparis-2018/scaling-from-0-to-60k-rpm.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Baptiste Aviat</dc:creator><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-14:pyparis-2018/scaling-from-0-to-60k-rpm.html</guid></item><item><title>Writing a C Python extension in 2017</title><link>https://pyvideo.org/pyparis-2017/writing-a-c-python-extension-in-2017.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes the build of a C Python extension, with prebuilt
binaries, when modern packaging standards, as well as Docker, have been
a game changer in the Python extensions world. Many examples come from
our experience building PyMiniRacer, used in production across hundreds
of companies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Baptiste Aviat</dc:creator><pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-12:pyparis-2017/writing-a-c-python-extension-in-2017.html</guid></item><item><title>Writing a C Python extension in 2017</title><link>https://pyvideo.org/pycon-us-2017/writing-a-c-python-extension-in-2017.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk describes the build of a C Python extension, with prebuilt
binaries, in 2017, where modern packaging standards, as well as Docker,
have been a game changer in the Python extensions world. Most examples
come from our experience building
&lt;a class="reference external" href="https://github.com/sqreen/PyMiniRacer"&gt;PyMiniRacer&lt;/a&gt;, an embedded
Python / JavaScript bridge used in production across hundreds of
companies.&lt;/p&gt;
&lt;p&gt;We will describe the different aspects of building a binary extension,
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;using the modern manylinux wheel type in order to ship a built
binary, usable in most Linux distributions;&lt;/li&gt;
&lt;li&gt;the choices offered to developers when building an extension: the
Python public C API, cffi, ...;&lt;/li&gt;
&lt;li&gt;testing of a binary module across various platforms;&lt;/li&gt;
&lt;li&gt;troubleshooting &amp;amp; debugging an extension: the basics you need to
tackle most common issues.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Baptiste Aviat</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/writing-a-c-python-extension-in-2017.html</guid></item></channel></rss>