<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aron-ahmadia.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-13T00:00:00+00:00</updated><entry><title>Parallel Data Analysis in Python</title><link href="https://pyvideo.org/scipy-2017/parallel-data-analysis-in-python.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Matthew Rocklin</name></author><id>tag:pyvideo.org,2017-07-13:scipy-2017/parallel-data-analysis-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial teaches the fundamentals of parallel programming in Python. It focuses on covering a few programming techniques rather than diving into one framework or tool in particular.&lt;/p&gt;
&lt;p&gt;Student Goals:&lt;/p&gt;
&lt;p&gt;Students will walk away with a high-level understanding of both parallel problems and how to reason about parallel computing frameworks. They will also walk away with hands-on experience using a variety of frameworks easily accessible from Python.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Parallel Python Analyzing Large Data Sets</title><link href="https://pyvideo.org/pydata-dc-2016/parallel-python-analyzing-large-data-sets.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Aron Ahmadia</name></author><id>tag:pyvideo.org,2016-10-07:pydata-dc-2016/parallel-python-analyzing-large-data-sets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Students will walk away with a high-level understanding of both parallel problems and how to reason about parallel computing frameworks. They will also walk away with hands-on experience using a variety of frameworks easily accessible from Python.&lt;/p&gt;
</summary><category term="Data"></category><category term="parallel"></category><category term="sets"></category></entry><entry><title>Solving the import problem: Scalable Dynamic Loading Network File Systems</title><link href="https://pyvideo.org/scipy-2012/solving-the-import-problem-scalable-dynamic-load.html" rel="alternate"></link><published>2012-07-18T00:00:00+00:00</published><updated>2012-07-18T00:00:00+00:00</updated><author><name>Aron Ahmadia</name></author><id>tag:pyvideo.org,2012-07-18:scipy-2012/solving-the-import-problem-scalable-dynamic-load.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The most common programming paradigm for scientific computing, SPMD
(Single Program Multiple Data), catastrophically interacts with the
loading strategies of dynamically linked executables and
network-attached file systems on even moderately sized high performance
computing clusters. This difficulty is further exacerbated by
&amp;quot;function-shipped&amp;quot; I/O on modern supercomputer compute nodes, preventing
the deployment of simple solutions. In this talk, we introduce a
two-component solution: collfs, a set of low-level MPI-collective file
operations that can selectively shadow file system access in a library,
and walla, a set of Python import hooks for seamlessly enabling parallel
dynamic loading scalable to tens of thousands of cores.&lt;/p&gt;
</summary><category term="hpc"></category></entry><entry><title>Reproducible, Relocatable, Customizable Builds and Packaging with HashDist Part1</title><link href="https://pyvideo.org/scipy-2014/reproducible-relocatable-customizable-builds-an.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Andy Terrel</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/reproducible-relocatable-customizable-builds-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk introduces HashDist, a critical component of the scientific
software development workflow. HashDist enables highly customizable,
source-driven, and reproducible builds for scientific software stacks.
HashDist builds can be made relocatable, allowing the easy
redistribution of binaries on all three major operating systems as well
as cloud and supercomputing platforms.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing scientific software is a continuous balance between not
reinventing the wheel and getting fragile codes to interoperate with one
another. Binary software distributions such as Anaconda provide a robust
starting point for many scientific software packages, but this solution
alone is insufficient for many scientific software developers. HashDist
provides a critical component of the development workflow, enabling
highly customizable, source-driven, and reproducible builds for
scientific software stacks, available from both the IPython Notebook and
the command line.&lt;/p&gt;
&lt;p&gt;To address these issues, the Coastal and Hydraulics Laboratory at the US
Army Engineer Research and Development Center has funded the development
of HashDist in collaboration with Simula Research Laboratories and the
University of Texas at Austin. HashDist is motivated by a functional
approach to package build management, and features intelligent caching
of sources and builds, parametrized build specifications, and the
ability to interoperate with system compilers and packages. HashDist
enables the easy specification of &amp;quot;software stacks&amp;quot;, which allow both
the novice user to install a default environment and the advanced user
to configure every aspect of their build in a modular fashion. As an
advanced feature, HashDist builds can be made relocatable, allowing the
easy redistribution of binaries on all three major operating systems as
well as cloud, and supercomputing platforms. As a final benefit, all
HashDist builds are reproducible, with a build hash specifying exactly
how each component of the software stack was installed.&lt;/p&gt;
&lt;p&gt;This talk will feature an introduction to the problem of packaging
Python-based scientific software, a discussion of the basic tools
available to scientific Python developers, and a detailed discussion and
demonstration of the HashDist package build manager.&lt;/p&gt;
&lt;p&gt;The HashDist documentation is available from:
&lt;a class="reference external" href="http://hashdist.readthedocs.org/en/latest/"&gt;http://hashdist.readthedocs.org/en/latest/&lt;/a&gt; HashDist is currently hosted
at: &lt;a class="reference external" href="https://github.com/hashdist/hashdist"&gt;https://github.com/hashdist/hashdist&lt;/a&gt;&lt;/p&gt;
</summary><category term="packaging"></category><category term="reproducible research"></category></entry><entry><title>Teaching Numerical Methods with IPython Notebooks, Part 1</title><link href="https://pyvideo.org/scipy-2014/teaching-numerical-methods-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aron Ahmadia</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</summary><category term="ipython"></category><category term="numerical methods"></category></entry><entry><title>Teaching Numerical Methods with IPython Notebooks, Part 3</title><link href="https://pyvideo.org/scipy-2014/teaching-numerical-methods-part-3.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aron Ahmadia</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-part-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</summary><category term="ipython"></category><category term="numerical methods"></category></entry><entry><title>Teaching Numerical Methods with IPython Notebooks 2</title><link href="https://pyvideo.org/scipy-2014/teaching-numerical-methods-with-ipython-notebooks.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aron Ahmadia</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-with-ipython-notebooks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</summary><category term="ipython"></category><category term="numerical methods"></category></entry></feed>