<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pycon2011.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-03-11T00:00:00+00:00</updated><entry><title>Panel: Python VMs</title><link href="https://pyvideo.org/pycon-us-2011/panel-python-vms.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/panel-python-vms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python VMs&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland&lt;/p&gt;
&lt;p&gt;Python is lucky enough to have a healthy ecosystem of virtual machines
(VMs) exist. CPython, Jython, IronPython, and PyPy are all used
extensively by people in real-world situations. This panel brings
together a representative from each of the major VMs to discuss where
they are now, going in the future, and to answer questions from the
community.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;All four major Python VMs will be represented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;: Brett Cannon&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;: Frank Wierzbicki&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;: Dino Viehland&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;: Maciej Fijalkowski Moderation will be
handled by Jacob Kaplan-Moss of Django.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cpython"></category><category term="ironpython"></category><category term="jython"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category></entry><entry><title>"Dude, Where's My RAM?" - A deep dive into how Python uses memory</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Dave Malcolm</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Dude, Where's My RAM?&amp;quot; - A deep dive into how Python uses memory&lt;/p&gt;
&lt;p&gt;Presented by Dave Malcolm&lt;/p&gt;
&lt;p&gt;This talk will give a deep dive into how CPython uses memory. I'll be
demonstrating a new tool I've written that analyses CPython's memory
usage, and offer hints and tips on how you can reduce the memory
footprint of your Python programs.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Is your Python program using too much memory? This talk will give a deep
dive into how CPython uses memory - starting from objects in your Python
code, down through the various implementations layers, eventually
reaching actual hardware.&lt;/p&gt;
&lt;p&gt;In particular, I'll be demonstrating a new tool I've written that can
track CPython's memory usage down to the level of individual bytes, and
offer hints and tips on how you can reduce the memory footprint of your
Python programs.&lt;/p&gt;
</summary><category term="cpython"></category><category term="memory"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Advanced Network Architectures With ZeroMQ</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--advanced-network-architectures-with-z.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Zed A. Shaw</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--advanced-network-architectures-with-z.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced Network Architectures With ZeroMQ&lt;/p&gt;
&lt;p&gt;Presented by Zed A. Shaw&lt;/p&gt;
&lt;p&gt;In this talk I will demonstrate how to use ZeroMQ with Python (and
others) to do really advanced or even weird network architectures.
You'll see Python talk to other languages, handle HTTP, JSON, XML,
WebSockets, encode videos, chat messaging, etc. All in a short talk with
only code, no diagrams. You should know ZeroMQ already.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will demonstrate a series of progressively difficult problems
that you can solve with ZeroMQ:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Basic messaging types (request/response, publish/subscribe).&lt;/li&gt;
&lt;li&gt;Mongrel2 and HTTP processing.&lt;/li&gt;
&lt;li&gt;Coroutine based web frameworks and why they suck (so quit making
them).&lt;/li&gt;
&lt;li&gt;Distributed worker queues of various flavors.&lt;/li&gt;
&lt;li&gt;Asynchronous chat protocols with JSON and XML.&lt;/li&gt;
&lt;li&gt;Clusters of calculators considering and communicating.&lt;/li&gt;
&lt;li&gt;Talking to other languages and easily ditching Python if you need.&lt;/li&gt;
&lt;li&gt;Anything else I can think up and do in a single screen of Python.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This talk will assume you know ZeroMQ and Python, but if you don't know
ZeroMQ you can probably still keep up.&lt;/p&gt;
</summary><category term="mongrel"></category><category term="pycon2011"></category></entry><entry><title>Algorithmic Generation of OpenGL Geometry</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jonathan Hartley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Algorithmic Generation of OpenGL Geometry&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Hartley&lt;/p&gt;
&lt;p&gt;Starting from a basic 'hello world' OpenGL app, a simple and Pythonic
model of 3D polyhedra is presented, with neat generators to convert
these into ctype arrays for OpenGL. Geometric algorithms then generate
some fun geometry, and these are compounded to produce successively more
complex and interesting shapes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The author's intent is to demonstrate that effective stylistic 3D
graphics can be achieved using surprisingly small amounts of code. This
hopefully makes the topic amenable to 3D beginners, while possibly
suggesting some alternative approaches to those with 3D experience.&lt;/p&gt;
&lt;p&gt;Talk Outline&lt;/p&gt;
&lt;p&gt;Throughout, discussion of ideas and code dissection alternates with live
animated demos, at 60fps on very modest hardware.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Inspirations - Effective non-photo-realistic work in gaming, movies
and the demo scene. (1m)&lt;/li&gt;
&lt;li&gt;A convenient &amp;amp; Pythonic way to model 3D polyhedra, and some neat
generators to convert these into OpenGL arrays at runtime. (7m)&lt;/li&gt;
&lt;li&gt;Composition of polyhedra to create more complex shapes. (3m)&lt;/li&gt;
&lt;li&gt;The resulting performance characteristics: What works well from
Python, and what doesn't. (2m)&lt;/li&gt;
&lt;li&gt;Koch tetrahedron &amp;amp; tetrix, aka Sierpinski tetrahedron. (1m)&lt;/li&gt;
&lt;li&gt;Surprisingly effective 3D models created from small bitmaps. (1m)&lt;/li&gt;
&lt;li&gt;Automatic generation of trees, mazes, complex spaces. (3m)&lt;/li&gt;
&lt;li&gt;Algorithmic modification of existing shapes, such as bevels,
geometric duals, and polyhedron stellation. (2m)&lt;/li&gt;
&lt;li&gt;Shapes that morph: Rearranging vertices on the fly (5m)&lt;/li&gt;
&lt;li&gt;Questions (5m)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideas demonstrated in the talk are written against OpenGL 2.1, but
written in a 'mostly OpenGL 3' style, using vertex buffer objects or
vertex arrays.&lt;/p&gt;
&lt;p&gt;The demo code uses pyglet to create a window and handle GUI events, and
uses PyOpenGL for the majority of OpenGL calls, since it provides a more
friendly and Pythonic interface. In the performance-sensitive inner
render loop, however, I use pyglet's slightly more bare-bones OpenGL
bindings.&lt;/p&gt;
&lt;p&gt;However, the majority of the talk focuses on the manipulation of
abstract data structures to represent geometry, which is not affected by
these or other OpenGL library choices.&lt;/p&gt;
&lt;p&gt;This is a substantially improved version of the talk 'Flying High:
Hobbyist OpenGL from Python', previously presented at EuroPython 2010.&lt;/p&gt;
</summary><category term="3d"></category><category term="opengl"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pyglet"></category><category term="pyopengl"></category></entry><entry><title>An (biased) survey of the python web</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--an--biased--survey-of-the-python-web.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an--biased--survey-of-the-python-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An (biased) survey of the python web&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;I may be BDFL of one framework, but that's also why I pay attention to
the whole ecosystem. From the release of Plone 4, TurboGears 2, Django
1.2 and Pylons 1 ,it's been an interesting year. And things like
html5lib, an updated WSGI spec, and a contender for the next generation
WSGI have all made things interesting. Come explore the wild and dynamic
jungle that I call &amp;quot;the python web toolkit.&amp;quot;&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will not teach people to use python to make websites. It's to
teach people who already use python, that there are lots of different
tools out there, and to help us all get some perspective on the python
web toolkit.&lt;/p&gt;
&lt;p&gt;In 2005 Pycon had the great PyWebOff, and while this talk won't be about
throwing Twisted into a cage match with Zope3, or setting Flask up in a
fight to the death against web.py, it will one again provide an attempt
to survey the full landscape of the python web world, and to see how far
we've come in the last 5 years.&lt;/p&gt;
&lt;p&gt;We've definitely come a long way. Django has brought over many converts
to Python, google released app engine with python as the first supported
language, and there are quite a few sites in the top 100 using python to
serve up dynamic content to hundreds of millions of users.&lt;/p&gt;
&lt;p&gt;But it hasn't all been good either, there's more fragmentation than
ever. We've also got more half finished libraries, and broken framework
extensions, and abandoned projects littering up the landscape.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="web"></category><category term="webframeworks"></category></entry><entry><title>An Introduction to Tornado</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--an-introduction-to-tornado.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Gavin M. Roy</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-introduction-to-tornado.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Introduction to Tornado&lt;/p&gt;
&lt;p&gt;Presented by Gavin M. Roy&lt;/p&gt;
&lt;p&gt;Tornado is an open source version of the scalable, non-blocking web
server and tools that power FriendFeed. It is not only a web server but
it is a light- weight, use only what you need, web development
framework. In this talk we will review the current state of the Tornado
project, review the features Tornado provides and give examples of how
to implement asynchronous web applications in Tornado.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Tornado is an open source version of the scalable, non-blocking web
server and tools that power FriendFeed. It is not only a web server but
it is a light- weight, use only what you need, web development
framework. In this talk we will review the current state of the Tornado
project, review the features Tornado provides and give examples of how
to implement asynchronous web applications in Tornado.&lt;/p&gt;
&lt;p&gt;Topics covered will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Core Tornado concepts&lt;/li&gt;
&lt;li&gt;Building an asynchronous web application&lt;/li&gt;
&lt;li&gt;Using the Tornado template engine&lt;/li&gt;
&lt;li&gt;Database Interaction&lt;/li&gt;
&lt;li&gt;Secure cookies and Sessions&lt;/li&gt;
&lt;li&gt;Utilizing built-in OAuth Clients for Authentication&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;State of asynchronous drivers available to Tornado&lt;/li&gt;
&lt;li&gt;A light introduction to Tornado internals&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="tornado"></category></entry><entry><title>An Open success for the cloud: OpenStack</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--an-open-success-for-the-cloud--openst.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Andy Smith</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-open-success-for-the-cloud--openst.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Open success for the cloud: OpenStack&lt;/p&gt;
&lt;p&gt;Presented by Andy Smith&lt;/p&gt;
&lt;p&gt;OpenStack is a collection of open source technologies written entirely
in Python, delivering a massively scalable cloud operating system.
OpenStack is currently developing two interrelated projects: OpenStack
Compute and OpenStack Object Storage. OpenStack Compute is software to
provision and manage large groups of virtual private servers, and
OpenStack Object Storage is software for creating redundant, scalable
object storage using clusters of commodity servers to store terabytes or
even petabytes of data.&lt;/p&gt;
&lt;p&gt;This talk will go into details about the success of OpenStack with
Python, limitations and how overall, Python was the right technology
choice.&lt;/p&gt;
</summary><category term="openstack"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>An outsider's look at co-routines.</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Peter Portante</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An outsider's look at co-routines.&lt;/p&gt;
&lt;p&gt;Presented by Peter Portante&lt;/p&gt;
&lt;p&gt;Let's take an outsiders look at coroutines, the underlying concept used
by greenlets. First we'll define what they are conceptually, and show
some typical use cases. Then we'll take a look at a sampling of the
implementations out there to see what they are actually doing to
implement the concept. Finally, we'll show their pluses and minuses, and
highlight some features of packages that use them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define what a coroutine is&lt;ul&gt;
&lt;li&gt;Coroutine state not known to operating system&lt;/li&gt;
&lt;li&gt;Difference between a thread or process&lt;/li&gt;
&lt;li&gt;What state is required for tracking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show how coroutines are used&lt;ul&gt;
&lt;li&gt;gevent example&lt;/li&gt;
&lt;li&gt;concurrence example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review two implementations&lt;ul&gt;
&lt;li&gt;Greenlets&lt;/li&gt;
&lt;li&gt;Python based co-routines using generators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantages/Disadvantages&lt;/li&gt;
&lt;li&gt;Differentiating features of packages that use them&lt;ul&gt;
&lt;li&gt;Concurrence&lt;/li&gt;
&lt;li&gt;Gevent&lt;/li&gt;
&lt;li&gt;Eventlets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="concurrence"></category><category term="coroutines"></category><category term="gevent"></category><category term="greenlets"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>API Design: Lessons Learned</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--api-design--lessons-learned.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--api-design--lessons-learned.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;API lessons learned from a decade of core Python development.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking
behind some of Python's successful APIs and ones that leave something to
be desired. Learn general principles for designing a good API for public
consumption.&lt;/p&gt;
&lt;p&gt;Hear the story and principles behind the design of Python's &amp;quot;in&amp;quot;
operator, the development of deques, and the evolution of the set API.&lt;/p&gt;
&lt;p&gt;Examine the principles and story behind the development of the named
tuple API. Learn about unforeseen use cases and a bug that made it to
production.&lt;/p&gt;
&lt;p&gt;Discuss the decimal module's API challenge -- adhering to a published
standard. Talk about the Queue module's framework style and how the API
was refactored.&lt;/p&gt;
&lt;p&gt;Discuss what we've learned about naming functions and methods. Look at
the i-naming convention in itertools, camelcase oddities, the proposed
Italian name for enumerate, and vaguely named methods like
assertItemsEqual.&lt;/p&gt;
&lt;p&gt;Learn about Guido's ideas on when to add flags to method signatures.
Recap his thoughts on the problems with the percent formatting operator.
Then hear Raymond's advice on packaging, hierarchies, and nested name
spaces.&lt;/p&gt;
&lt;p&gt;See how to use documentation to mitigate API problems using examples
from regular expressions, decimal, tokenize, sorting.&lt;/p&gt;
</summary><category term="api"></category><category term="apidesign"></category><category term="cpython"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>API Design anti-patterns</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--api-design-anti-patterns.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--api-design-anti-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API Design Anti-Patterns&lt;/p&gt;
&lt;p&gt;Presented by Alex Martelli&lt;/p&gt;
&lt;p&gt;Designing interfaces so that other code can interact with ours (whether
our code is a library, framework, application, website...) is a very
common and clearly crucial activity, but fraught with dangers -- stuff
we all keep doing wrong time after time. This talks shows some common
cases of API design errors encountered in the wild, with tips on how to
avoid them when you design your next API.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Whenever we write code we should always be thinking about how other code
(whether our own, or other people's) will interact with ours (an &amp;quot;API&amp;quot;,
in common parlance). Indeed, the most common and terrible mistake in API
design is... not doing any! -- i.e., not providing any designed,
architected way for other code to interact with ours. That's fortunately
less common when &amp;quot;our code&amp;quot; is a library or framework;-), but, alas!,
sadly widespread when &amp;quot;our code&amp;quot; is an application or website -- that's
why questions about screen- scraping the web and simulating keystrokes
and mouse gestures need be so tragically frequent all over the web.&lt;/p&gt;
&lt;p&gt;Once past the obvious hurdle of not having any API at all, there's still
plenty of ways we can go badly wrong in the process of designing one --
and many of those ways fall into recognizable categories, i.e.,
patterns. Specifically, since they're frequently observed categories of
defective design, they're anti-patterns -- and that's what this talk is
in fact about (as the smartest among you could tell from the title...).&lt;/p&gt;
&lt;p&gt;I'm eminently qualified to present on this subject, since, in a lifetime
spent mostly stumbling into software (after actually qualifying to
design hardware in college, but only doing that for a few years), I've
been responsible for more of my shares of API design fumbles (plus, of
course, just like every other programmer, I've done my share of swearing
at the design fumbles of other API designers). And, as novelist Richard
Bach reminds us, &amp;quot;You teach best what you most need to learn&amp;quot;!-)&lt;/p&gt;
</summary><category term="api"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Backup Is Hard; Let's Go Shopping</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Gary Bernhardt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--backup-is-hard--let--39-s-go-shopping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Backup Is Hard; Let's Go Shopping&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;We'll fly through the most clever bits of BitBacker, an online backup
app developed as a startup for three years and eventually abandoned.
Highlights: a hacked-up httplib/asyncore HTTP client; a real-life,
HATEOAS-respecting RESTful API, and an encryption scheme that can
quickly diff a file system against the server while leaking no
information – not even file timestamps.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This is the story of a solution to a huge problem: fast, secure online
backup. A single client generates a hundred gigabytes, millions of data
chunks, and thousands of file system snapshots. To appreciate the
problem's scale, consider that a Python array holding content hashes for
1,000,000 files consumes 100 MB of memory. File hashes are only a
portion of the required per- file metadata, and that's only one for
snapshot of thousands.&lt;/p&gt;
&lt;p&gt;We'll tour the hard parts of this system with no apology for their
difficulty. The httplib/asyncore hybrid monster that served millions of
parallel requests, transparently retrying on failures and timeouts, with
only 300 lines of python. The RESTful API – fully respecting hypertext,
with every request safely repeatable, even POSTs, and not a single
hard-coded URL in the client. The encryption scheme that leaked nothing
– not even modification times – but could quickly diff local file
systems against the server. And, that one time that a client
accidentally requested a 4.76 megabyte URL in production.&lt;/p&gt;
</summary><category term="backup"></category><category term="bigdata"></category><category term="bitbacker"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Best Practices for Impossible Deadlines</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--best-practices-for-impossible-deadlin.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Christopher Groskopf</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--best-practices-for-impossible-deadlin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Best Practices for Impossible Deadlines&lt;/p&gt;
&lt;p&gt;Presented by Christopher Groskopf&lt;/p&gt;
&lt;p&gt;At the Chicago Tribune we develop, test, and deploy production web
applications on schedules that range from two hours to two months. This
talk will discuss the tools and techniques that allow us to make our
deadlines, including automated deployments, frameworks, just-in-time
testing, and more. Attention will be paid to
&lt;a class="reference external" href="htt%20p://github.com/newsapps/beeswithmachineguns"&gt;http://github.com/newsapps/beeswithmachineguns&lt;/a&gt;
and the problems they solve.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;On my first day at the Chicago Tribune I was given a CSV of data about
defoliant spraying in Vietnam and told to build this: Agent Orange. What
followed was one of the most stressful and difficult weeks of my life,
during which I learned an incredible amount about web development. I had
to stop thinking about databases and start thinking about serialized
JSON structures stashed on S3; stop thinking about building tools and
start thinking about mashing up tech that was never designed to be
married (in this case Simile Timeline and Google Maps); stop thinking
about idealistic development practices and start thinking about getting
a working product out the door. In short: I had to rewire my brain for
news.&lt;/p&gt;
&lt;p&gt;This talk will go in-depth on deadline-oriented strategies that I've
learned in a year of building news applications. Some of these revolve
around specific technologies, like fabric for single-keystroke
deployments or Varnish for caching, but most will be matters of
practice, like what to test when you have no time for testing or how to
avoid (yes, avoid!) database migrations.&lt;/p&gt;
&lt;p&gt;They say Django is &amp;quot;the web framework for perfectionists with
deadlines.&amp;quot; This is their Art of War.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An anecdote: Agent Orange&lt;/li&gt;
&lt;li&gt;We can't have nice things (or best practices)&lt;/li&gt;
&lt;li&gt;Low-hanging fruit: staging environment, git branches, PEP8.&lt;/li&gt;
&lt;li&gt;Only build it once: Iterations, interviews and stakeholders&lt;/li&gt;
&lt;li&gt;Salvage, share and steal [code]&lt;/li&gt;
&lt;li&gt;Keeping track: Be a ticketing warrior&lt;/li&gt;
&lt;li&gt;Tools improve faster than you do: iterate your stack&lt;/li&gt;
&lt;li&gt;Single-keystroke deployment (fabric)&lt;/li&gt;
&lt;li&gt;Migrations are hard: Building read-only apps&lt;/li&gt;
&lt;li&gt;Don't serve that: Using S3 for hosting&lt;/li&gt;
&lt;li&gt;Caching &amp;gt; optimization (varnish)&lt;/li&gt;
&lt;li&gt;Know your load limits (beeswithmachineguns)&lt;/li&gt;
&lt;li&gt;Configuration-as-application: application frameworks (maps, tables)&lt;/li&gt;
&lt;li&gt;Pair programming &amp;gt; functional testing &amp;gt; unit testing&lt;/li&gt;
&lt;li&gt;except UseWordpress, e: print &amp;quot;No, really&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sites that will be used as examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Agent Orange&lt;/li&gt;
&lt;li&gt;Burr Oak Memorial&lt;/li&gt;
&lt;li&gt;Census 2010: Cook county participation rates map&lt;/li&gt;
&lt;li&gt;Area judges and supervision rates of speeders table&lt;/li&gt;
&lt;li&gt;RedEye Homicide Tracker&lt;/li&gt;
&lt;li&gt;Chicago Tribune Elections Center&lt;/li&gt;
&lt;li&gt;2010 Illinois School Report Cards&lt;/li&gt;
&lt;li&gt;TribLocal&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="beeswithmachineguns"></category><category term="bestpractices"></category><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Continuous deployment</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--continuous-deployment.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--continuous-deployment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting the latest revision of
software into production use all the time, as opposed to working towards
larger releases. The important difference is iteration time: whereas
large software packages produce new software in timeframes of years or
months, continuous deployment teams typically put new code into
production in timeframes of hours or less.&lt;/p&gt;
&lt;p&gt;The practice is slowly attracting a small but growing group of loyal
followers, just like continuous integration over the past few years and
test- driven development did before that. They can be explained in terms
of being natural extensions of each other. Like TDD and CI, CD gets eyed
somewhat suspiciously (and rightfully so: skeptical analysis is great),
but the undersigned believes there's a legitimate advantage for many
applications.&lt;/p&gt;
&lt;p&gt;Many years ago, TTD and testing tools in general were mostly ad-hockery.
Now, with many different production-quality testing tools, this has
become unthinkable. Similarly, continuous integration was something
other people did for a long time, but now we have tools such as Buildbot
and Hudson. Continuous deployment is still somewhat in the early stage
in terms of ready-to-use tools, but it's likely that we'll see a similar
evolution.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what I plan to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a short history of people developed software&lt;/li&gt;
&lt;li&gt;from the recent models to CD (sort of a working definition of CD
here)&lt;/li&gt;
&lt;li&gt;when is it a good idea? pros/cons&lt;/li&gt;
&lt;li&gt;requirements &amp;amp; battle plan for applying CD in an existing development
environment (and possibly code base)&lt;/li&gt;
&lt;li&gt;an overview of existing tools and how they work together&lt;/li&gt;
&lt;li&gt;caveat emptors, known pitfalls (deployment and recovery strategies go
here, since most implementations figure out they need them after
stuff blows up)&lt;/li&gt;
&lt;li&gt;questions! (hopefully lots of people who've tried or are thinking
about implementing something similar -- like I said, there are a lot
of people implementing it but not too many ideas being bounced
around)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cd"></category><category term="ci"></category><category term="continuousdeployment"></category><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="softwaredevelopment"></category><category term="tdd"></category><category term="workflow"></category></entry><entry><title>CouchDB and Python in practice</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--couchdb-and-python-in-practice.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Luke Gotszling</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--couchdb-and-python-in-practice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CouchDB and Python in practice&lt;/p&gt;
&lt;p&gt;Presented by Luke Gotszling&lt;/p&gt;
&lt;p&gt;This talk introduces one 'NoSQL' solution, CouchDB, and how to get it to
play well with Python. Topics covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to CouchDB&lt;/li&gt;
&lt;li&gt;A python ORM for CouchDB&lt;/li&gt;
&lt;li&gt;Parsing CouchDB documents within python&lt;/li&gt;
&lt;li&gt;Writing view functions in python&lt;/li&gt;
&lt;li&gt;Map/reduce on CouchDB from python&lt;/li&gt;
&lt;li&gt;Lessons learned from managing and distributing a live deployment at
scale under high load&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This is a rough draft&lt;/p&gt;
&lt;p&gt;NoSQL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CouchDB stores schema free documents&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why CouchDB?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Complicated mapping structures handled&lt;/li&gt;
&lt;li&gt;Revision history&lt;/li&gt;
&lt;li&gt;Maps nicely to Python objects&lt;/li&gt;
&lt;li&gt;HTTP protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python ORM&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;couchdb-python&lt;/li&gt;
&lt;li&gt;Mapping structures&lt;/li&gt;
&lt;li&gt;demo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;View functions&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;write in Erlang, Javascript, Python?&lt;/li&gt;
&lt;li&gt;demo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scaling&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Distributed map/reduce&lt;/li&gt;
&lt;li&gt;BigCouch&lt;/li&gt;
&lt;li&gt;Read/write quorum&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="couchdb"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Dependency management with Puppet</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--dependency-management-with-puppet.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Richard Crowley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--dependency-management-with-puppet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dependency management with Puppet&lt;/p&gt;
&lt;p&gt;Presented by Richard Crowley&lt;/p&gt;
&lt;p&gt;Puppet is a configuration management tool that we'll learn to use the
easy way. We'll introduce the Puppet language and the concept of
resources like packages, files, shell commands, and more. We'll use
Puppet to build our dev environment and deploy it to production servers.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We've all been there: religiously following the steps in some blog post
for the 47th time trying to setup a shiny new server. We thought we'd
improved the situation when we copied our Bash history into doit.sh and
committed it. Then along came Pip and requirements.txt files.&lt;/p&gt;
&lt;p&gt;That's where most of us are today. Pip can only manage Python packages
so much of our servers' behavior is left to Lady Luck. Puppet gives us
the power to efficiently and confidently specify everything our program
needs.&lt;/p&gt;
&lt;p&gt;We'll start at square one and the concept of resources, the basic unit
of configuration management. We'll learn the Puppet language's resource
syntax. We'll talk about obvious resource types like packages and files
plus less obvious types like shell commands, users, groups, and daemons.
We'll compose resources into larger ones, declare dependencies between
resources, and accommodate differences between OS X and Linux.&lt;/p&gt;
&lt;p&gt;These Puppet manifests can satisfy our program's dependencies on demand,
making them ideal parts of the deploy process. We'll walk through how
Puppet is used to build production environments both through tools such
as Fabric and Puppet's traditional client-server mode.&lt;/p&gt;
&lt;p&gt;Dependency hell doesn't have to be your reality. Consistent, reliable
environments can be had with Puppet.&lt;/p&gt;
</summary><category term="dependencies"></category><category term="puppet"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Deploying Applications with zc.buildout</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>JIm Fulton</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying Applications with zc.buildout&lt;/p&gt;
&lt;p&gt;Presented by JIm Fulton&lt;/p&gt;
&lt;p&gt;This talk described using zc.buildout for application deployment to
production environments. It presents building self-contained source
releases, and using these to create RPM distributions. It shows how to
use buildout to configure services, including web servers, cron jobs,
monitoring and so on. Finally, it presents ongoing efforts to deploy
applications that span many machines.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We build and deploy large Python applications for our customers. These
applications are built from many component parts including Python
packages and non-python applications and tools. Assembling these pieces
can be a tedious and error-prone process. The zc.buildout (Buildout)
package was developed to automate this process.&lt;/p&gt;
&lt;p&gt;As our use of buildout has matured, we've integrated it with system
packaging tools and developed techniques for managing software
deployemnt and service configuration. I'll provide a detailed
description of the techniques and tools used.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Buildout&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;History&lt;/li&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;li&gt;Recipes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment pholisophy: keeping software and service configuration
separate&lt;/li&gt;
&lt;li&gt;System Packaging&lt;ul&gt;
&lt;li&gt;Making self-contained source releases (tar balls)&lt;/li&gt;
&lt;li&gt;Creating system packages from source releases with RPM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service configuration -- system build outs&lt;ul&gt;
&lt;li&gt;Scope: Python processes, cron, log rotation, run scripts,
monitoring, etc.&lt;/li&gt;
&lt;li&gt;Place files in &amp;quot;standard&amp;quot; locations.&lt;/li&gt;
&lt;li&gt;Run by root&lt;/li&gt;
&lt;li&gt;examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meta recipes&lt;ul&gt;
&lt;li&gt;Goal: provide only essential information.&lt;/li&gt;
&lt;li&gt;Recipes provide basic level of abstraction.&lt;/li&gt;
&lt;li&gt;Buildout provides basic tools to build on these abstractions, but
these tools only scale so far.&lt;/li&gt;
&lt;li&gt;Buildout configuration language is &lt;em&gt;not&lt;/em&gt; a programming language.&lt;/li&gt;
&lt;li&gt;Meta-recipes provide a much more powerful way to build high-level
abstractions over basic recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next step: Make me a ...&lt;ul&gt;
&lt;li&gt;Model based definition of complete systems spanning multiple hosts
with interlocking services&lt;/li&gt;
&lt;li&gt;Automatic management of resources&lt;/li&gt;
&lt;li&gt;Implemented with ssh, system packaging tools (e.g. yum) and
buildout-based tools.&lt;/li&gt;
&lt;li&gt;Four levels of abstraction&lt;/li&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="zc.buildout"></category></entry><entry><title>Disqus: Serving 400 million people with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--disqus--serving-400-million-people-wi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--disqus--serving-400-million-people-wi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Disqus: Serving 400 million people with Python&lt;/p&gt;
&lt;p&gt;Presented by David Cramer and Jason Yan&lt;/p&gt;
&lt;p&gt;Disqus, one of the largest Python applications on the web, will explain
how they deal with scaling complexities in a growing startup. Founded in
2007, Disqus maintains a small engineering team reaching over 400
million users a month. Being powered by Python has allowed quick
iteration of the application, without sacrificing code quality and
performance. The talk will cover key parts of the architecture and
development process at Disqus, including hardware, databases, and common
bottlenecks.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="disqus"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Distributed Tasks with Celery</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--distributed-tasks-with-celery.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Ryan Petrello</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--distributed-tasks-with-celery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distributed Tasks with Celery&lt;/p&gt;
&lt;p&gt;Presented by Ryan Petrello&lt;/p&gt;
&lt;p&gt;Celery is an open source task queueing system based on distributed
message passing, especially using the AMQP protocol. This talk will
focus on the need for task distribution, the tools celery provides to
meet those needs, and an in-depth discussion of how we've used celery at
ShootQ to improve the efficiency and reliability of our background
processes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk (including time for questions) will last approximately 30
minutes and will focus on the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The need for distributed tasks in real world systems, especially in a
web application environment. This portion of the talk will describe
examples where the traditional request-response model of the web can
be improved with background processing.&lt;/li&gt;
&lt;li&gt;A brief overview of traditional distributed message passing models
and the AMPQ protocol.&lt;/li&gt;
&lt;li&gt;An overview of Celery and the variety of tools it provides for task
distribution, scheduling, and execution. This portion of the talk
will also review production-oriented components of Celery, such as
monitoring, error detection/reporting, and error recovery.&lt;/li&gt;
&lt;li&gt;Real world discussion of several problems we solved at ShootQ using
Celery including before-and-after looks at our implementations.&lt;/li&gt;
&lt;li&gt;Common pitfalls and gotchas we encountered while working with Celery.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="amqp"></category><category term="celery"></category><category term="pycon"></category><category term="pycon2011"></category><category term="queueing"></category></entry><entry><title>Diversity in Tech: Improving our Toolset</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--diversity-in-tech--improving-our-tool.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jennifer Leech</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--diversity-in-tech--improving-our-tool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity in Tech: Improving our Toolset&lt;/p&gt;
&lt;p&gt;Presented by Jennifer Leech&lt;/p&gt;
&lt;p&gt;As communities allow more diversity, they draw from a larger talent
pool, challenge each other more, and hit a higher bar in terms of
ingenuity and work-product. However questions surrounding diversity
often seem under- examined. What are the effects of diversity in the
community, or lack thereof? I intend to approach this topic from an
accessible and entertaining, yet analytical perspective.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Last year there was a photo of Kate Moss shown during a PyCon
presentation which raised debate as to its appropriateness. This debate
brought up some interesting questions - but what I found most
interesting was that while it elicited strong opinions, the issue seemed
to be somewhat unexamined. This event sparked a desire for deeper
analysis on this topic in a more focussed setting.&lt;/p&gt;
&lt;p&gt;In this talk, I intend to address some of the core principles underlying
this debate. Discussion will include the following questions: Where does
responsibility lie in understanding these issues? What are the effects
of failing to do so? What are the effects of diversity in the community,
or lack thereof? What do we lose by being more homogenous or more
diverse? Gain?&lt;/p&gt;
&lt;p&gt;As communities allow more diversity, they draw from a larger talent
pool, challenge each other more, and hit a higher bar in terms of
ingenuity and work-product. However, diversity requires awareness and
tolerance on both the part of the dominant culture and on the part of
the new arrivals to smooth the inevitable rough edges.&lt;/p&gt;
&lt;p&gt;I intend to approach this topic from an accessible, inclusive and
entertaining, yet analytical perspective. The broader intent is to raise
the level of understanding and community discourse on this topic. It is
odd that diversity can so dramatically affect our lives and communities
and yet be unexamined, particularly in a community so highly intelligent
and educated as that which populates the tech industry.&lt;/p&gt;
</summary><category term="diversity"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Django: Pitfalls I Encountered and How to Avoid Them</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--django--pitfalls-i-encountered-and-ho.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Luke Sneeringer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--django--pitfalls-i-encountered-and-ho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django: Pitfalls I Encountered and How to Avoid Them&lt;/p&gt;
&lt;p&gt;Presented by Luke Sneeringer&lt;/p&gt;
&lt;p&gt;Are you starting a moderate to large sized Django project? Do you need
to plan ahead and build an application that will react to unanticipated
needs? This talk covers some techniques and pitfalls I encountered in
writing my first reasonably large Django site, and what I did
differently the second time I started a project.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;When working on a company product, especially one where developers don't
always have full control over the scope and needs of the application,
it's important to plan ahead for unanticipated needs.&lt;/p&gt;
&lt;p&gt;This talk will cover simple tricks and methods that are a small amount
of work up front, but can save you lots of time later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pycon-talk-outline"&gt;
&lt;h4&gt;PyCon Talk Outline&lt;/h4&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Introduction (5m)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Me!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Making Mistakes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;It happens. &amp;quot;Code quality can be measured by the number of WTFs
per minute in the code review.&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When dealing with a big, expansive framework like Django,
sometimes you just don't know that something is there. Good docs
don't completely solve this...there's always going to be the thing
you don't find. Similarly, sometimes you don't realize how to
leverage something that you do know about until much later.&lt;/p&gt;
&lt;p&gt;My regrets with my current project aren't sweeping architectural issues. I did most of the big stuff right. My regrets are mostly small things that, because it was my first big project, there was this piece or that piece that I didn't see or didn't fully appreciate, and so now I have little blocks of code that are tougher to maintain than they need to be. End of the world? No. Worth thinking through for next time? Yes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Some trivial things (10m)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Preface: Yeah, some of these are dumb.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Beginning at the beginning: Project Setup&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I had sys.path pointing to the directory above the project root, like the tutorial does. I wish I hadn't done that.&lt;/li&gt;
&lt;li&gt;Need to run two instances on the same box that don't share the actual codebase (e.g. a staging server)? You still can, but it's more awkward. Better to set sys.path at your project root.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Dude, where's my Media class?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;How did I do it? First I had a magic template variable. Then I&lt;/dt&gt;
&lt;dd&gt;copied Form.Media&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Then, on a later project, I realized a block works just fine.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;My boss wants ____ available on every page!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How did I do it? I had a method we called everywhere that took
arbitrary keyword arguments...&lt;/li&gt;
&lt;li&gt;Oh, there's TEMPLATE_CONTEXT_PROCESSORS...&lt;ul&gt;
&lt;li&gt;...if you manually use RequestContext every time! So, just do
that. Always. Even if you don't need it.&lt;/li&gt;
&lt;li&gt;I want .select_related('something') every time!&lt;/li&gt;
&lt;li&gt;...so I typed it! A lot.&lt;/li&gt;
&lt;li&gt;Oh, that can be done by overriding def queryset on the manager
class? That's easier to maintain...&lt;ul&gt;
&lt;li&gt;...but make sure you set the flag to use it on related fields!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;We need sample data for so-and-so, such-and-such...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disclaimer: This one actually isn't mine; my boss did it. But,
it's amusing, and worth mentioning.&lt;/li&gt;
&lt;li&gt;We needed sample data so my boss could preview themes...so he set
up a second database, put in fake data, and hard-coded it in the
app-wide (not server-specific) settings.py.&lt;ul&gt;
&lt;li&gt;Copied the entire DB structure...at the time. But it changes.&lt;/li&gt;
&lt;li&gt;Oh, and the unit testing framework didn't appreciate it,
either.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fixtures are the right way (and sooner or later I'll get this
fixed...it's still there).&lt;ul&gt;
&lt;li&gt;(space reserved for my stumbling upon something else silly, and
hopefully humorous, that I did wrong)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;How to avoid missing trivial things?&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Read the documentation. Over and over.&lt;/li&gt;
&lt;li&gt;Become familiar with the Django code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A non-trivial thing: Forms (10m)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django forms can do anything...given sufficient shenanigans.
Always do it the Django forms way; your life will be easier.&lt;/li&gt;
&lt;li&gt;Forms and ModelForms are static, and I needed dynamic choices on a
form...&lt;ul&gt;
&lt;li&gt;...so I just ditched newforms&lt;/li&gt;
&lt;li&gt;But wait, this is Python. A trivial function that calls the
metaclass can solve this problem!&lt;ul&gt;
&lt;li&gt;This looks complicated, but it's not. Walk through how to do
it.&lt;/li&gt;
&lt;li&gt;It's quite maintainable, and you get all the other bells and
whistles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Questions? (5m)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Django Packages: A Case Study</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--django-packages--a-case-study.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--django-packages--a-case-study.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Packages: A Case Study&lt;/p&gt;
&lt;p&gt;Daniel Greenfeld&lt;/p&gt;
&lt;p&gt;Django Packages is the place to review Django apps, frameworks, and
projects. This talk is for everyone, including non-Django users, and
covers everything from architecture, API development, to interacting
with PyPI, Github, Bitbucket, etc. It will include tools, lessons
learned, and projects that fork the code to save the world and will
finish with an overview of the forthcoming pypackages.com.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Since launch Django Packages has become the place to find and compare
apps, frameworks and projects produced by the Django Community. Through
the use of public APIs, Django Packages constantly fetches hard data
from PyPI, Github, and Bitbucket, aproviding a powerful mash-up of
real-world data on the volume of usage of a particular package. At a
glance you can see which package is the most downloaded, which is the
most used, and which has seen ongoing development.&lt;/p&gt;
&lt;p&gt;The project is open sourced on Github, with all non-user data accessible
available via the API. Django Packages was conceived and and launched in
the 2010 Django Dash. Since launch it has seen features added
incrementally and was a frequently mentioned project at the 2010
DjangoCon and was #1 on Hacker News on Sunday, December 5, 2010. It's
purpose is to provide a place for Django Developers to submit, research,
and review apps, projects, and frameworks.&lt;/p&gt;
&lt;p&gt;The talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Launching the project&lt;ul&gt;
&lt;li&gt;The pre-Django Packages state of finding Django apps&lt;/li&gt;
&lt;li&gt;Grids, not tags&lt;/li&gt;
&lt;li&gt;Only hard metrics allowed, no opinions or rating systems!&lt;/li&gt;
&lt;li&gt;Slurping content from PyPI, Github, Bitbucket, Launchpad,
SourceForge, and Google Project Hosting&lt;/li&gt;
&lt;li&gt;Lessons Learned AKA The Zen of Python and PEP-8&lt;/li&gt;
&lt;li&gt;Deployment and backups&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Month after launch&lt;ul&gt;
&lt;li&gt;New feature considerations&lt;/li&gt;
&lt;li&gt;Handing over the keys to reduce bus factor&lt;/li&gt;
&lt;li&gt;Excitement when seeing it being used as a reference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DjangoCon&lt;ul&gt;
&lt;li&gt;Sprint tactics for your pet project&lt;/li&gt;
&lt;li&gt;Development of an API&lt;/li&gt;
&lt;li&gt;Github, Google Project Hosting, and PyPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Going forward&lt;ul&gt;
&lt;li&gt;Planned new features for Django Packages&lt;/li&gt;
&lt;li&gt;Forking Django Packages to save the world&lt;/li&gt;
&lt;li&gt;pypackages.com - a forthcoming place to review Python
applications, frameworks, and packages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="packages"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Documentation Driven Development</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--documentation-driven-development.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Corey Oordt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--documentation-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Documentation Driven Development&lt;/p&gt;
&lt;p&gt;Presented by Corey Oordt&lt;/p&gt;
&lt;p&gt;Developers usually leave documentation as a final step; one that they
will get to as soon as they are forced with threats of bodily harm.
Writing the documentation before writing the code, can lead to better
code, better implementation and, of course, actual documentation.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;&amp;quot;Documentation Driven Design&amp;quot; was coined by our team after noticing how
documenting code dramatically changed how we approached problems. By
writing the documentation first, you saw the problem from a different
perspective: the end user or programmer. This talk will focus on a few
items:&lt;/p&gt;
&lt;p&gt;Usable, not just functional. Many times developers write code that
solves the problem, but is a real pain in the neck to use. Writing the
documentation first demonstrates how easy or difficult it is to
implement the solution right away.&lt;/p&gt;
&lt;p&gt;A guide to what to write. Many developers leave documentation undone
because they don't know how to approach it. Having some idea of what
needs writing can make the task seem less daunting.&lt;/p&gt;
</summary><category term="documentation"></category><category term="documentationdrivendesign"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Everything You Wanted To Know About Pickling, But Were Afraid To Ask!</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--everything-you-wanted-to-know-about-p.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Richard T. Saunders</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--everything-you-wanted-to-know-about-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Wanted To Know About Pickling, But Were Afraid To Ask!&lt;/p&gt;
&lt;p&gt;Presented by Richard T. Saunders&lt;/p&gt;
&lt;p&gt;Serializing data structures (in Python-speak &amp;quot;pickling&amp;quot;) to save to
disk/socket is an important tool for the programmer: We will discuss how
the pickling protocols (0,1,2, and 3) work as well as real-world issues
(gotchas, backwards-compatibility, etc). We will concentrate on the
basics of this stack-based protocol: what it looks like, how to
encode/decode, speeds of different implementations.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The Pickling Protocols are a fundamental tool for saving state.&lt;/p&gt;
&lt;p&gt;We will discuss the differences between text serialization and Python
pickling (as well as marshalling, and simple bit-blitting).&lt;/p&gt;
&lt;p&gt;We will spend a little time discussing history: why there is a cPickle
and pickle module in 2.x and only pickle in 3.x., and why there are 4
different protocols: 0,1,2 and 3.&lt;/p&gt;
&lt;p&gt;We will then dive right in and look at how the stack-based protocol
works. We will concentrate on the basics (the stack-based machine), as
all the protocols adhere to this basic model, but tend to discuss the
more recent protocols and their differences. We will also discuss how
the memoization scheme works.&lt;/p&gt;
&lt;p&gt;We will show some simple examples and then build to more complex
examples.&lt;/p&gt;
&lt;p&gt;We will also discuss the relative speeds: the different protocols (text,
0,1,2,3) and the different implementations (Python, Boost,
PicklingTools, IronPython?, PyPy? Unladen Swallow?).&lt;/p&gt;
&lt;p&gt;We will end with some real-world advice and some gotchas to watch out
for (32-bit vs. 64-bit, different versions of Python serialize
differently, etc.).&lt;/p&gt;
</summary><category term="pickling"></category><category term="pycon"></category><category term="pycon2011"></category><category term="serialization"></category></entry><entry><title>Exhibition of Atrocity</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--exhibition-of-atrocity.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Mike Pirnat</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--exhibition-of-atrocity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exhibition of Atrocity&lt;/p&gt;
&lt;p&gt;Presented by Mike Pirnat&lt;/p&gt;
&lt;p&gt;Believe it or not, but you can write pretty horrendously awful code even
in a language as elegant as Python. Over the years, I've committed my
share of sins; now it's time to come clean. Step right up for a tour of
twisted, evil, and downright wrong code, and learn some strategies to
avoid writing criminally bad code--if you dare!&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;What does it look like when good intentions go horribly wrong? This talk
will take a tour through pathological code from my past (as well as some
contributions from friends, coworkers, and the community), featuring
such terrors as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lies, Damn Lies, and Hungarian Notation&lt;/li&gt;
&lt;li&gt;Crimes Against PEP-8&lt;/li&gt;
&lt;li&gt;The Diaper Pattern&lt;/li&gt;
&lt;li&gt;The Beast With a Thousand Elifs&lt;/li&gt;
&lt;li&gt;The Mile-Long Club&lt;/li&gt;
&lt;li&gt;God Objects and God Methods&lt;/li&gt;
&lt;li&gt;The Malignant Menace of Mutable Keyword Arguments&lt;/li&gt;
&lt;li&gt;The Seductive Lure of Global State&lt;/li&gt;
&lt;li&gt;Slower Applications Through DTO Bondage&lt;/li&gt;
&lt;li&gt;A Twisty Maze of Single-Character Variables, All Alike&lt;/li&gt;
&lt;li&gt;Lambdas, Lambdas Everywhere&lt;/li&gt;
&lt;li&gt;The List Comprehension That Ate Cincinnati&lt;/li&gt;
&lt;li&gt;Adventures in Wheel Reinvention&lt;/li&gt;
&lt;li&gt;New and Creative Ways to Break the Build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...as well as others as time permits.&lt;/p&gt;
</summary><category term="badcode"></category><category term="diaperpattern"></category><category term="lambda"></category><category term="pep8"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Extreme Network Programming with Python and Linux</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--extreme-network-programming-with-pyth.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Rob Ludwick</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--extreme-network-programming-with-pyth.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extreme Network Programming with Python and Linux&lt;/p&gt;
&lt;p&gt;Presented by Rob Ludwick&lt;/p&gt;
&lt;p&gt;Traditionally, C is the preferred language for low level network
programming and works well for those who have the time and patience to
work with it. As it turns out, Python is very capable for prototyping
low level network code, collecting data, and testing ideas quickly
without getting lost in the land of C.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;While not as robust as C, Python provides a simple and elegant solution
for many cases to either prove a theory or gather data before developing
a more robust solution. Obscure topics such as raw sockets, multicast,
network bridging, rolling your own vpn, and disruption tolerant
networking will be covered. Use of Python can enable building a custom
protocols, debugging a network, fixing broken nets, custom logging and
processing, and simulation of networks. The author will talk about his
experiences using Python on Linux for extreme network programming and
possibilities for future efforts.&lt;/p&gt;
</summary><category term="network"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Firefox Sync</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--firefox-sync.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Tarek Ziadé</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--firefox-sync.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Firefox Sync&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;Firefox Sync let you access your history, passwords, bookmarks and even
open tabs across all your devices, while remaining unreadable on the
server through encryption. After a brief introduction on the Sync
protocol, this talk will focus on the server, which is written in
Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will briefly explain how Syncing works then will focus on the
Server architecture and code. You will discover through this talk how
the server was built and what technologies it uses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Firefox Sync in numbers&lt;/li&gt;
&lt;li&gt;How synchronisation happens - the big picture&lt;ol class="arabic"&gt;
&lt;li&gt;Desktop&lt;/li&gt;
&lt;li&gt;iPhone (Firefox Home)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;How encryption works&lt;/li&gt;
&lt;li&gt;Overview of the APIs&lt;ol class="arabic"&gt;
&lt;li&gt;Sync 1.1&lt;/li&gt;
&lt;li&gt;User 1.0&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Server architecture&lt;ol class="arabic"&gt;
&lt;li&gt;User &amp;amp; Data storage&lt;/li&gt;
&lt;li&gt;Web Services&lt;/li&gt;
&lt;li&gt;Libraries used&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Scaling and benchmarking&lt;ol class="arabic"&gt;
&lt;li&gt;Grinder&lt;/li&gt;
&lt;li&gt;Funkload&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run your own server !&lt;/li&gt;
&lt;li&gt;What's Next&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="casestudy"></category><category term="firefoxsync"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Friday Afternoon Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--friday-afternoon-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Paul Smith</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--friday-afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Friday afternoon lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Friday afternoon lightning talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Paul Smith - Raising money for Japan&lt;/li&gt;
&lt;li&gt;02:24 Jeff Daily - The Global Arrays Parallel Programming Toolkit&lt;/li&gt;
&lt;li&gt;08:30 Matt Harrison - My insecurity problem&lt;/li&gt;
&lt;li&gt;13:10 Pete Fein - Hacking for Freedom&lt;/li&gt;
&lt;li&gt;18:40 Robert Brewer - logging.statistics&lt;/li&gt;
&lt;li&gt;27:30 Nathan Nichols - Lessons Learned Writing DSLs for Automated
Content Generation&lt;/li&gt;
&lt;li&gt;33:15 Giles Thomas - Why Resolver switched from IronPython to CPython
japan, qtile, pyparsing, logging.statistics, resolver, cpython,
ironpython&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="cpython"></category><category term="ironpython"></category><category term="japan"></category><category term="logging.statistics"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pyparsing"></category><category term="qtile"></category></entry><entry><title>Fun with Python's Newer Tools</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--fun-with-python--39-s-newer-tools.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--fun-with-python--39-s-newer-tools.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it
works under the hood, enjoy a simple example, and then have fun pushing
it to the limit in interesting ways.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Look at how a Counter is implemented. See a simple word count example.
Use a counter for unittests. Implement a sparse matrix.&lt;/p&gt;
&lt;p&gt;Show how named tuples are created, combined, subclassed, and extended.
See how to implement an Enum class and how to create default values.&lt;/p&gt;
&lt;p&gt;Learn the basics of the new string formatting syntax. See how to use it
for templating.&lt;/p&gt;
&lt;p&gt;Show everyday uses for an LRU cache, look at the underlying
implementation, and see how to use it to trivially solve a dynamic
programming problem.&lt;/p&gt;
</summary><category term="counters"></category><category term="lrucache"></category><category term="namedtuples"></category><category term="pycon"></category><category term="pycon2011"></category><category term="stringformatting"></category></entry><entry><title>Genetic Programming in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--genetic-programming-in-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--genetic-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genetic Programming in Python&lt;/p&gt;
&lt;p&gt;Presented by Eric Floehr&lt;/p&gt;
&lt;p&gt;Did you know you can create and evolve programs that find solutions to
problems? This talk walks through how to use Genetic Algorithms and
Genetic Programming as tools to discover solutions to hard problems,
when to use GA/GP, setting up the GA/GP environment, and interpreting
the results. Using &lt;a class="reference external" href="http://pyevolve.sourceforge.net/"&gt;pyevolve&lt;/a&gt;,
we'll walk through a real-world implementation creating a GP that
predicts the weather.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Genetic Algorithms (GA) and Genetic Programming (GP) are methods used to
search for and optimize solutions in large solution spaces. GA/GP use
concepts borrowed from natural evolution, such as mutation, cross-over,
selection, population, and fitness to generate solutions to problems. If
done well, these solutions will become better as the GA/GP runs.&lt;/p&gt;
&lt;p&gt;GA/GP has been used in problem domains as diverse as scheduling,
database index optimization, circuit board layout, mirror and lens
design, game strategies, and robotic walking and swimming. They can also
be a lot of fun, and have been used to evolve aesthetically pleasing
artwork, melodies, and approximating pictures or paintings using
polygons.&lt;/p&gt;
&lt;p&gt;GA/GP is fun to play with because often-times an unexpected solution
will be created that will give new insight or knowledge. It might also
present a novel solution to a problem, one that a human may never
generate. Solutions may also be inscrutable, and determining why a
solution works is interesting in itself.&lt;/p&gt;
</summary><category term="ga"></category><category term="geneticalgorithms"></category><category term="geneticprogramming"></category><category term="gp"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pyevolve"></category></entry><entry><title>Get new contributors (and diversity) through outreach</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--get-new-contributors--and-diversity--.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Asheesh Laroia</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--get-new-contributors--and-diversity--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get new contributors (and diversity) through outreach&lt;/p&gt;
&lt;p&gt;Presented by Asheesh Laroia&lt;/p&gt;
&lt;p&gt;Groups like the Fedora Design Team, Dreamwidth, SF Ruby, and OpenHatch
have discovered the power of outreach to bring in new contributors. In
the past year, SF Ruby grew in numbers as well as in diversity, moving
from 3% women to 18% women. Because most projects need ongoing help,
this talk discusses effective strategies for bringing in contributors
who stick around for the long haul.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk is targeted at anyone involved in an open source project who
wants to find more contributors.&lt;/p&gt;
&lt;p&gt;Programs like Google Summer of Code often provide excited students who
disappear after a summer's work. Meanwhile, request for help emails on
development lists are typically met with silence. Hackathons create a
flurry of commits, but then we never hear from the participants again.
Expanding your team is possible, and it requires care in terms of
outreach, expectation management, and mentorship.&lt;/p&gt;
&lt;p&gt;We will discuss three major forms of outreach:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One-on-one check-ins with participants,&lt;/li&gt;
&lt;li&gt;Periodic drives to bring in new contributors, and&lt;/li&gt;
&lt;li&gt;In-person teaching events. Each one has &amp;quot;do&amp;quot;s and &amp;quot;don't&amp;quot;s associated
with it. This talk digests the experience of effective outreach into
practical strategies that you can re-use within your project.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="diversity"></category><category term="openhatch"></category><category term="outreach"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Getting the job: the do's and don'ts of landing a Python job</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--getting-the-job--the-do--39-s-and-don.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Brian Moloney</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--getting-the-job--the-do--39-s-and-don.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting the job: the do's and don'ts of landing a Python job&lt;/p&gt;
&lt;p&gt;Presented by Brian Moloney&lt;/p&gt;
&lt;p&gt;Every Python programmer is brilliant in his or her own way. That
brilliance shines in code and peer-to-peer conversation. But how do you
display your skills to a non-programmer? How do you impress management
and human resources? What do you need to do (and not do) to successfully
navigate the hiring process and land the job?&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Imaginary Landscape has been interviewing, hiring and not hiring Python
talent since 1999. Throughout these many years, there have been good
candidates, bad candidates and downright ugly candidates. This talk will
use actual correspondence and examples to demonstrate what can separate
you from the crowd and what can separate you from consideration.
Imaginary Landscape non- technical Managing Partner Brian Moloney will
lead the session by describing how he evaluates potential hires and what
goes through his mind while speaking with potential Python candidates.
Attendees will take away a specific set of guidelines for mastering the
non-technical aspects of the recruiting process.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: There are problems with the audio for the first 5
minutes.]&lt;/p&gt;
</summary><category term="hiring"></category><category term="job"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Going Full Python - Threadless</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--going-full-python---threadless.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Chris McAvoy</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--going-full-python---threadless.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Going Full Python -- Threadless&lt;/p&gt;
&lt;p&gt;Presented by Chris McAvoy&lt;/p&gt;
&lt;p&gt;Threadless is a 10 year old community based design company with an
overpowering love of witty t-shirts and a mission to 'inspire
awesomeness.' After 10 years of working primarily with PHP, Threadless
has decided to use Python as our base development language. The decision
was 10% technical and 90% touchy feely. We know what a powerful
community can do to a product, and see the same sort of drive and
passion in the Python community that we see in our own design community.
Python is the peanut butter to our jelly. We're excited to share our
jelly with you. Chris McAvoy, VP of Technology at Threadless (and the
founder of the Chicago Python Users Group), will share a bit about the
companies history, the role of technology in supporting the community at
the core of the business, and why Python and Threadless are going to be
totally BFF's.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="threadless"></category></entry><entry><title>Greasing the Wheels of Exploration with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--greasing-the-wheels-of-exploration-wi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Michael Sims</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--greasing-the-wheels-of-exploration-wi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The control of the Mars Exploration Rovers (MER) requires a complex set
of coordinated activites by a team. Early in the MER mission the author
automated in Python much of the task of one of the operation positions,
the Payload Uplink Lead, for 7 of the 9 cameras on each rover. This talk
describes the MER rovers, the operation tasks and that implemented
system.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Mars Exploration Rovers (MER), Spirit and Opportunity, have been
roaming the surface of Mars since January of 2004 leading to many
discoveries about the nature and history of our sister planet. Each
activity requires a complex set of coordinated activites by a team.
Early in the MER mission the author automated much of the task of one of
the positions, the Payload Uplink Lead, for 7 of the 9 cameras on each
rover. The system, called AutoPUL, is written in Python and that has
proven to be the excellent choice for the development and maintenance.
In the talk I'll describe the Mars Rover mission and the operational
activities and how AutoPUL and Python fullfilled those needs.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="mer"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Handling ridiculous amounts of data with probabilistic data structures</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>C. Titus Brown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Handling ridiculous amounts of data with probabilistic data structures&lt;/p&gt;
&lt;p&gt;Presented by C. Titus Brown&lt;/p&gt;
&lt;p&gt;Part of my job as a scientist involves playing with rather large amounts
of data (200 gb+). In doing so we stumbled across some neat CS
techniques that scale well, and are easy to understand and trivial to
implement. These techniques allow us to make some or many types of data
analysis map-reducable. I'll talk about interesting implementation
details, fun science, and neat computer science.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;If an extreme talk, I will talk about interesting details/issues in:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python as the backbone for a non-SciPy scientific software package:
using Python as a frontend to C++ code, esp for parallelization and
testing purposes.&lt;/li&gt;
&lt;li&gt;Implementing probabilistic data structures with one-sided error as
pre-filters for data retrieval and analysis, in ways that are
generally useful.&lt;/li&gt;
&lt;li&gt;Efficiently breaking down certain types of sparse graph problems
using these probabilistic data structures, so that large graphs can
be analyzed straightforwardly. This will be applied to plagiarism
detection and/or duplicate code detection.&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="bigdata"></category><category term="parallelization"></category><category term="pycon"></category><category term="pycon2011"></category><category term="testing"></category></entry><entry><title>Hidden Treasures in the Standard Library</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hidden Treasures in the Standard Library&lt;/p&gt;
&lt;p&gt;Presented by Doug Hellmann&lt;/p&gt;
&lt;p&gt;This presentation covers features of the standard library not widely
known or used. Each feature is presented with a short demonstration
program and explanation.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The standard library contains many hidden gems that are not widely used,
either because they are not publicized enough or because they are deep
in a module that programmers haven't had cause to study or use. This
presentation covers 8-10 selected topics of this nature in about 25
minutes (leaving time for a couple of questions). Demonstration code is
included for every item.&lt;/p&gt;
&lt;p&gt;Possible tips include, in no particular order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using hmac to verify pickled data before unpacking it.&lt;/li&gt;
&lt;li&gt;Using uuid4 to generate session tokens.&lt;/li&gt;
&lt;li&gt;Regular expression look-ahead/behind matches.&lt;/li&gt;
&lt;li&gt;pdb startup files&lt;/li&gt;
&lt;li&gt;Reading files with mmap&lt;/li&gt;
&lt;li&gt;Using csv dialects&lt;/li&gt;
&lt;li&gt;The robotparser module&lt;/li&gt;
&lt;li&gt;The rlcompleter module&lt;/li&gt;
&lt;li&gt;Using locale to format numbers and currency&lt;/li&gt;
&lt;li&gt;The cgitb module&lt;/li&gt;
&lt;li&gt;pkgutil.getdata&lt;/li&gt;
&lt;li&gt;contextlib.contextmanager&lt;/li&gt;
&lt;li&gt;The cmd module&lt;/li&gt;
&lt;li&gt;The fileinput module&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cgitb"></category><category term="cmd"></category><category term="contextlib.contextmanager"></category><category term="csv"></category><category term="fileinput"></category><category term="hmac"></category><category term="locale"></category><category term="pdb"></category><category term="pkgutil.getdata"></category><category term="pycon"></category><category term="pycon2011"></category><category term="rlcompleter"></category><category term="robotparser"></category><category term="uuid4"></category></entry><entry><title>Hookbox: All Python web-frameworks, now real-time. Batteries Included.</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--hookbox--all-python-web-frameworks--n.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Michael Carter</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--hookbox--all-python-web-frameworks--n.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hookbox: All Python web-frameworks, now real-time. Batteries Included.&lt;/p&gt;
&lt;p&gt;Presented by Michael Carter&lt;/p&gt;
&lt;p&gt;Learn how to supercharge your python web applications (Django, Pylons,
TG, GAE, Werkzeug, WSGI, etc) with real-time features! Presenceful and
moderated chat? About 10 minutes, seriously. A real-time graph to
monitor the CPU? Less than five. If you pay attention for at least half
of this talk, you'll leave confident and ready to take advantage of
WebSocket, Comet, and the world, thanks to Hookbox.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Hookbox (&lt;a class="reference external" href="http://hookbox.org/"&gt;http://hookbox.org&lt;/a&gt;) is a Python and
Eventlet- based Comet-server/message-queue which tightly integrates with
existing web application infrastructure via web hooks and a REST
interface; Hookbox’s purpose is to ease the development of real-time web
applications, with an emphasis on tight integration with existing web
technology. Put simply, Hookbox is a web-enabled message queue.&lt;/p&gt;
&lt;p&gt;Browers may directly connect to Hookbox, subscribe to named channels,
and publish and receive messages on those channels in real-time. An
external application (typically the web application itself) may also
publish messages to channels by means of the Hookbox REST interface. All
authentication and authorization is performed by an external web
application via designated “webhook” callbacks.&lt;/p&gt;
&lt;p&gt;In this talk we cover the broad principles of Hookbox, then examine a
few short examples in depth, including presenceful and moderated chat,
real-time graphing, and, of course, a game. The code examples are very
purposefully brief; the important parts of the talk deal with the
interaction model between browser, web framework, and Hookbox --
everything else follows naturally and easily into place.&lt;/p&gt;
&lt;p&gt;The audience need not be familiar with a particular web framework over
another, but they must be proficient with at least one.&lt;/p&gt;
&lt;p&gt;Though this talk is aimed at a novice level, we'll also spend some time
talking about the more advanced features that Hookbox provides.&lt;/p&gt;
</summary><category term="hookbox"></category><category term="pycon"></category><category term="pycon2011"></category><category term="realtime"></category><category term="webapps"></category></entry><entry><title>How to kill a patent with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to kill a patent with Python&lt;/p&gt;
&lt;p&gt;Presented by Van Lindberg&lt;/p&gt;
&lt;p&gt;Finding the right piece of &amp;quot;prior art&amp;quot; - technical documentation that
described a patented piece of technology before the patent was filed -
is like finding a needle in a very big haystack. This session will talk
about how I am making that process faster and more accurate through the
use of natural language processing, graph theory, machine learning, and
lots of Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;From my work consulting on a number of patent cases, I am frequently
asked to find &amp;quot;prior art&amp;quot; - patents and publications that describe a
technology before a certain date. The problem is that the indexing
mechanisms for patents and publications are not as good as they could
be, making good prior art searching more of an art than a science. When
I decided to do better, I reached for Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Part I (5 mins): The USPTO as a data source.* The full-text of each
patent is available from the USPTO (and now from Google.) What does
this data look like? How can it be harvested and normalized to create
data structures that we can work with?&lt;/li&gt;
&lt;li&gt;Part II (15 mins, in two parts):* Once the patents have been cleaned
and normalized, they can be turned into data structures that we can
use to evaluate their relationship to other documents. This is done
in two ways - by modeling each patent as a document vector and a
graph node.&lt;/li&gt;
&lt;li&gt;Part IIA (7 mins): Patents as document vectors.* Once we have a
patent as a data structure, we can treat the patent as a vector in an
n-dimensional space. In moving from a document into a vector space,
we will touch on normalization, stemming, TF/IDF, Latent Semantic
Indexing (LSI) and Latent Dirichlet Allocation (LDA).&lt;/li&gt;
&lt;li&gt;Part IIB (7 mins): Patents as technology graphs.* This will show
building graph structures using the connections between patents -
both the built-in connections in the patents themselves as well as
the connections discovered while working with the patents as vectors.
We apply some social network analysis to partition the patent graph
and find other documents in the same technology space.&lt;/li&gt;
&lt;li&gt;Part III (5 mins): What have we built?* Now that we have done all
this analysis, we can see some interesting things about the patent
database as a whole. How does the patent database act as a map to the
world of technology? And how has this helped with the original
problem - finding better prior art?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="patents"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>How to sell Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-sell-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Chris Shenton</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-sell-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to sell Python&lt;/p&gt;
&lt;p&gt;Presented by Daniel Greenfeld , C. Titus Brown , Dan Mesh , Chris
Shenton , Rich Leland , Frank Wiles&lt;/p&gt;
&lt;p&gt;A lot of people want to use Python, but their customer, management,
school, government, or organization won't let them. Python is a great
tool, but it can be challenging to get in the door. This panel will
explore how companies and individuals have successfully introduced
Python, what tools are available to sell Python, and what pitfalls there
are to avoid.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;A lot of people want to use Python, but their customer, management,
school, government, or organization won't let them. Python is a great
tool, but it can be challenging to get in the door. This panel will
explore how companies and individuals have successfully introduced
Python, what tools are available to sell Python, and what pitfalls there
are to avoid.&lt;/p&gt;
&lt;p&gt;Possible questions will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a good example success story you can share?&lt;/li&gt;
&lt;li&gt;What pitfalls should you avoid?&lt;/li&gt;
&lt;li&gt;How do you deal with organizations that have already spent
bucketloads of money on a piss-poor technology stack, are hurting for
it, but can't seem to let go?&lt;/li&gt;
&lt;li&gt;How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who
stand to lose from introducing Python?&lt;/li&gt;
&lt;li&gt;What tools are available to help sell Python?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Five panelists will be chosen from a broad spectrum of individuals
including academic, government, for-profit organizations, and non-profit
organizations.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Academia: C. Titus Brown&lt;/li&gt;
&lt;li&gt;Goverment: Chris Shenton of Koansys/NASA&lt;/li&gt;
&lt;li&gt;Large Commercial Organization: Dan Mesh of Evite&lt;/li&gt;
&lt;li&gt;Small Commercial Organization: Frank Wiles of RevSys&lt;/li&gt;
&lt;li&gt;Non-Profit Organization: Rich Leland of National Geographic&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="panel"></category><category term="pycon"></category><category term="pycon2011"></category><category term="sellingpython"></category></entry><entry><title>How to write obfuscated python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-write-obfuscated-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Rev. Johnny Healey</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-write-obfuscated-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to write obfuscated python&lt;/p&gt;
&lt;p&gt;Presented by Rev. Johnny Healey&lt;/p&gt;
&lt;p&gt;With its clean, highly readable syntax, Python would seem to be quite a
challenge for a programmer attempting to write obfuscated code.
Fortunately, it provides a wide variety of high-level abstractions that
can be misused in exciting ways. This survey of obfuscation strategies
will include topics such as decorator abuse, lambda calculus, and
bytecode manipulation.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python's clean syntax can make traditional approaches to writing
obfuscated code much more challenging. Fortunately, Python provides many
useful abstractions that can be misused to write code that is unreadable
or even deliberately misleading. This talk will provide a survey of
silly python tricks that explore the boundaries of the language.&lt;/p&gt;
&lt;p&gt;Topics&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Redefining builtins&lt;/li&gt;
&lt;li&gt;Rarely used syntax&lt;/li&gt;
&lt;li&gt;Comparison edge cases&lt;/li&gt;
&lt;li&gt;Things you probably shouldn't do with decorators&lt;/li&gt;
&lt;li&gt;Fun with lambdas&lt;/li&gt;
&lt;li&gt;Bytecode manipulation&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="obfuscated"></category><category term="obfuscation"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>HTSQL - an insanely good WSGI / REST interface to your favorite database</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--htsql---an-insanely-good-wsgi---rest-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Clark C. Evans</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--htsql---an-insanely-good-wsgi---rest-.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;HTSQL is a URI-based high-level query language for relational databases;
it is written in the Python language. HTSQL is a wonderful complement
existing WSGI- based applications, making it trivial to create
interactive dashboards, complex reports. We use HTSQL as a REST query
interface for data integration and ad-hoc reporting by technical users
or &lt;tt class="docutils literal"&gt;accidental programmers&lt;/tt&gt;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The HTSQL processor is a high-level URI-based query language for
relational databases such as SQLite, PostgreSQL or MySQL. Since it's
written in Python, it is easy to integrate and generates immediate value
as the core of your application's custom reporting engine. HTSQL is like
the Django or SQLAlchemy ORMs in that it generates SQL, but unlike an
ORM in that its design center is completely different -- it was created
for hard core reporting and not object to relational mapping. Hence, it
is a wonderful complement to existing WSGI- based applications to easily
create dashboards, complex reports. We use HTSQL as a REST reporting
interface for data integration and ad-hoc queries.&lt;/p&gt;
&lt;p&gt;This talk will have two parts. In the first part we'll give a brief
overview of the rationale and design of the query language. In the
second part, we'll show how to hook the HTSQL processor into your WSGI
application and how to make custom commands, such as a simple calendar
output from a table containing a date column.&lt;/p&gt;
&lt;p&gt;The talk will be presented by Clark Evans, HTSQL was developed by Kyrylo
Simonov. The main HTSQL site is &lt;a class="reference external" href="http://htsql.org"&gt;http://htsql.org&lt;/a&gt; and the code is at
&lt;a class="reference external" href="http://bitbucket.org/promet%20heus/htsql"&gt;http://bitbucket.org/prometheus/htsql&lt;/a&gt;.
It'll be similar to previous talks, such as
&lt;a class="reference external" href="http://htsql.org/talks/20101103.html"&gt;http://htsql.org/talks/20101103.html&lt;/a&gt;.&lt;/p&gt;
</summary><category term="htsql"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>HTTP in Python: which library for what task?</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--http-in-python--which-library-for-wha.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Augie Fackler</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--http-in-python--which-library-for-wha.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTTP in Python: which library for what task?&lt;/p&gt;
&lt;p&gt;Presented by Augie Fackler&lt;/p&gt;
&lt;p&gt;HTTP is the lingua franca of the web, and many things done in Python
depend on it, yet HTTP in Python isn't always as good as one would
expect. It's well worth knowing the options and tradeoffs available.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;HTTP in Python is very much a mixed bag of available technology. What's
implemented mostly works well, but there are some frustrating gaps in
different libraries that are poorly documented. I've gone wading through
every HTTP library I can find for Python while trying to fix an obscure
bug in Mercurial and decided to write my own. I'll cover what's
available today and why I'm starting from scratch with a completely new
implementation.&lt;/p&gt;
</summary><category term="httplib"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pycurl"></category><category term="urllib"></category></entry><entry><title>Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--introduction-to-parallel-computing-on.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Roy Hyunjin Han</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--introduction-to-parallel-computing-on.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA&lt;/p&gt;
&lt;p&gt;Presented by Roy Hyunjin Han&lt;/p&gt;
&lt;p&gt;With Andreas Klöckner's PyCUDA, you can harness the massively parallel
supercomputing power of your NVIDIA graphics card to crunch numerically
intensive scientific computing applications in a fraction of the runtime
it would take on a CPU and at a fraction of the development cost of C++.
We'll cover hardware architecture, API fundamentals and several examples
to get you started.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are two approaches to parallelizing a computationally heavy
procedure: use a messaging queue such as AMQP to distribute tasks among
a networked cluster or increase the number of processors in a single
machine. This talk focuses on techniques for adapting mathematical code
to run on specialized multi-core graphic processors.&lt;/p&gt;
&lt;p&gt;Modern graphic processors have hard-coded transistors for common vector
and matrix operations, making them ideal for general scientific
computing. However, the NVIDIA CUDA's unique design requires knowledge
of its hardware to adapt algorithms effectively. This talk covers basic
CUDA architecture, API functions and several examples to illustrate the
different kinds of problems that will benefit from parallelization.&lt;/p&gt;
</summary><category term="nvidia"></category><category term="parallel"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pycuda"></category></entry><entry><title>Javascript for people who know Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--javascript-for-people-who-know-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Ian Bicking</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--javascript-for-people-who-know-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Javascript for people who know Python&lt;/p&gt;
&lt;p&gt;Presented by Ian Bicking&lt;/p&gt;
&lt;p&gt;Javascript as a diff on Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;You know Python. You should know Javascript. The two aren't so
different, but this talk will explain exactly how they are different --
lists, dicts, objects, functions, loops and all the other details of
Javascript described in terms of Python.&lt;/p&gt;
</summary><category term="javascript"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Jython Concurrency</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--jython-concurrency.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jim Baker</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--jython-concurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jython Concurrency&lt;/p&gt;
&lt;p&gt;Presented by Jim Baker&lt;/p&gt;
&lt;p&gt;Jython is arguably the best Python implementation to target concurrent
code. Jython has no GIL, it leverages the Java platform to provide
robust support for concurrency in its runtime, and it enables access to
a set of high-level abstractions from Java. This talk will walk through
at the extreme level pertinent Jython implementation details and a
series of examples, including Java integration.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Jython implements the Python language, but we leverage the underlying
Java platform to provide an opionated alternative to CPython in our
support of concurrency.&lt;/p&gt;
&lt;p&gt;Because of the GIL and related infrastructure, CPython cannot use a
model in which threads perform concurrent computation defined in Python
on shared objects in the same process. (Of course, there are
workarounds, such as multiprocessing or using C extensions.)&lt;/p&gt;
&lt;p&gt;In contrast, there's no GIL in Jython. Jython instead embraces threads,
provides extensive support for managing their execution and coordination
through standard Java platform functionality (java.util.concurrent), and
threaded code works well with Jython's implementation of standard
mutable collection types. Lastly, the underlying JVM provides extensive
instrumentation as well as the ability to set a variety of parameters,
including choice of GC. There are also the inevitable pitfalls that
might be seen in complex architectures, such as around the use of
ClassLoaders.&lt;/p&gt;
&lt;p&gt;This talk will go into a detailed discussion of some of the interesting
ramifications of these design points and how they can be effectively
applied to write concurrent code, as illustrated through a variety of
short examples.&lt;/p&gt;
</summary><category term="concurrency"></category><category term="java"></category><category term="jython"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Large Scale Data Conditioning &amp; Processing with Stackless Python and Pypes</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--large-scale-data-conditioning--amp--p.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Eric Gaumer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--large-scale-data-conditioning--amp--p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large Scale Data Conditioning &amp;amp; Processing with Stackless Python and
Pypes&lt;/p&gt;
&lt;p&gt;Presented by Eric Gaumer&lt;/p&gt;
&lt;p&gt;Pypes is a component oriented framework for designing dataflow
applications. It uses Stackless Python to model components as
computational entities that operate by sending and receiving messages.
Components are designed to process streams of data modeled as a series
of messages which are exchanged asynchronously. Data streams are
initiated over an asynchronous REST interface.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There's been some recent momentum around data flow programming with a
number of new frameworks having been released. This new found interest
is due largely in part to the increasing amount of data being produced
and consumed by applications. MapReduce has become a general topic of
discussion for analytics over large data sets but it's increasingly
evident that it's not a panacea.&lt;/p&gt;
&lt;p&gt;Simple batch processing tools like MapReduce and Hadoop are just not
powerful enough in any one of the dimensions of the big data space that
really matters. One particular area where MapReduce falls short is in
near real-time search. It used to be common to run batch processing jobs
on a nightly basis which would index the days events, making them
searchable.&lt;/p&gt;
&lt;p&gt;Given today's social dynamics, people have come to expect instant access
to data as opposed to a daily digest. Batch oriented semantics are being
superseded by event driven architectures that act on live, real-time
streams of data. This shift in paradigm has sparked new interest in
dataflow concepts.&lt;/p&gt;
&lt;p&gt;Dataflow frameworks promote the data to become the main concept behind
any program. It becomes a matter of &amp;quot;data-flow&amp;quot; over &amp;quot;control-flow&amp;quot;
where processes are just the way data is created, manipulated and
destroyed. This concept is well represented in the Unix operating system
which pipes data between small single-purpose tools to produce more
sophisticated applications.&lt;/p&gt;
&lt;p&gt;Pypes is a dataflow framework that leverages Stackless Python to model
processes as black box operations that communicate by sending and
receiving messages. These processes are naturally component oriented
allowing them to be connected in different ways to form new
applications. Components are inherently stateless making parallel
processing relatively simple. Because a component is an abstraction of a
Stackless tasklet (true coroutines), expensive setups such as loading
machine learning models are done once during initialization and can then
be used throughout the life of the component. This is in contrast to
MapReduce frameworks that typically incur this overhead each time the
map function is called or try to manage some sort of global state.&lt;/p&gt;
&lt;p&gt;One aspect that differentiates Pypes from other dataflow frameworks is
its &amp;quot;push&amp;quot; model. Unlike generator based solutions which pull data
through the system, Pypes provides a RESTful interface that allows data
to be pushed in. This allows Pypes to sit more natural as an event
driven middleware component in the context of a larger architecture. A
data push model also simplifies scalability since an entire cluster of
nodes can be setup behind a load balancer which will then automatically
partition the incoming data stream. Generator based &amp;quot;pull models&amp;quot; cannot
easily partition data without somehow coordinating access to the data
which involves global state.&lt;/p&gt;
&lt;p&gt;Pypes was designed to be a highly scalable, event driven, dataflow
scheduling and execution environment. Writing your own components is
simple and Pypes provides Paste templates for creating new projects.
Components are packaged as Python eggs and discovered automatically.
They can be wired together using a visual editor that runs in any HTML5
compliant browser. Pypes supports Directed Acyclic Graphs and data
streams are modeled as a series of JSON (dict) packets which support
meta-data at both the packet level and the field level.&lt;/p&gt;
&lt;p&gt;Pypes also leverages the Python multiprocessing module to scale up. Data
arriving through the REST interface on any given node will be
distributed across parallel instances of the graph running on different
cores/CPUs. Data submission is completely asynchronous.&lt;/p&gt;
&lt;p&gt;This talk will provide a gentle introduction to the Pypes architecture
and design.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Brief intro to Stackless Python (benefits it provides)&lt;/li&gt;
&lt;li&gt;Control-Flow vs Data-Flow&lt;/li&gt;
&lt;li&gt;Preemptive vs Cooperative Scheduling&lt;/li&gt;
&lt;li&gt;The Topological Scheduler&lt;/li&gt;
&lt;li&gt;The REST API (Submitting Data - Asynchronous Web Service)&lt;/li&gt;
&lt;li&gt;Packet API: A unified data model with meta-data support&lt;/li&gt;
&lt;li&gt;Writing Custom Components - Paste templates and pluggable eggs&lt;/li&gt;
&lt;li&gt;Scale up - multiprocessing support&lt;/li&gt;
&lt;li&gt;Scale out - cloud friendly&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="pypes"></category><category term="stackless"></category></entry><entry><title>Linguistics of Twitter</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--linguistics-of-twitter.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Michael D. Healy</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--linguistics-of-twitter.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dialectical changes in America are influencing expression online. This
talk will discuss a current project which is using the Natural Language
Toolkit to develop up to date reference materials to measure and monitor
online natural language.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contrary to expectations, the prevalence of television did not cause
every American to speak in a common standard dialect. Rather, smaller
sub-regional dialects are merging into stronger regional dialects with
the largest change in spoken English since the 1750's taking place in
the Northern Cities Vowel Shift.&lt;/p&gt;
&lt;p&gt;Social Media is widely considered a conversational media, users often
leaning on their dialect which to express themselves.&lt;/p&gt;
&lt;p&gt;Taking a recent tweet for example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'_andBeautyKills: – after tonight, don’t leave your boy roun’ me, umma #true playa fareal.'
&lt;/pre&gt;
&lt;p&gt;This tweet presents a problem for traditional natural language
processing paradigm:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Do they build out an extensive reg ex to solve this?&lt;/li&gt;
&lt;li&gt;Even Worse, do they reject it because of non-Standard English?&lt;/li&gt;
&lt;li&gt;How do they respond such that communication is effective?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently under development with Python using the Natural Language
Toolkit are the tools and methodologies to process, understand and
respond to communication that falls outside Standard American English.
This talk will focus on the status of existing tools, where development
stands, challenges for traditional tools and potential opportunities for
exploration.&lt;/p&gt;
&lt;p&gt;While limited to American English, any participant who is studying
natural language processing of any language is welcome and sure to
learn. The techniques could be applied to languages around the world for
which the motivated programmer is knowledgeable about.&lt;/p&gt;
</summary><category term="nltk"></category><category term="pycon"></category><category term="pycon2011"></category><category term="twitter"></category></entry><entry><title>MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Niall O'Higgins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL&lt;/p&gt;
&lt;p&gt;Presented by Niall O'Higgins&lt;/p&gt;
&lt;p&gt;The Catch.com backend provides an API for publishing and querying your
personal data - used by many hugely popular Android, iOS and Web
clients. We ported this system to Python and MongoDB, using the Pylons
Web framework. This talk details our reasoning for choosing - and
experiences with - these cutting-edge Web and NoSQL database
technologies in a high-traffic, real-world production system.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Faced with the limits of our initial Catch.com Java/BDB backend
implemention, we evaluated various alternative technologies including
Amazon SimpleDB, MySQL, Cassandra and MongoDB. Eventually we settled on
Python, Pylons and MongoDB.&lt;/p&gt;
&lt;p&gt;We found Python and MongoDB gave us unique flexibility with our data
model, allowed us to scale for increased reliability and performance and
decreased feature development time - and in this talk we'll describe
exactly how.&lt;/p&gt;
&lt;p&gt;While there are many advantages, Python/Pylons and MongoDB (as a
relative newcomer on the database scene) certainly have issues and
limitations which must be taken into careful consideration for any
real-world production deployment.&lt;/p&gt;
&lt;p&gt;We compare MongoDB with other database technologies such as more
traditional RDBMS like MySQL and competing NoSQL options such as
Cassandra, CouchDB and BDB.&lt;/p&gt;
&lt;p&gt;We give a detailed introducton to data modeling in MongoDB - with
special attention paid to how this differs from a traditional relational
system - the operators provided by its rich query language and utilizing
advanced features such as GeoSpatial indexing, Replica Sets, Sharding -
and how to deal with some of the more publicized limitations of the
system (such as single-server durability).&lt;/p&gt;
&lt;p&gt;While much of this talk will be about using MongoDB with Python, we will
also touch on issues surrounding production deployment of the Pylons Web
framework, including how we work around the GIL to take advantage of
multi-core machines.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="mongodb"></category><category term="nosql"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pylons"></category><category term="scalable"></category></entry><entry><title>Montreal-Python -- Lessons Learned from Bootstraping a Python Community</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--montreal-python----lessons-learned-fr.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--montreal-python----lessons-learned-fr.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Montréal-Python is a user-group formed in 2007. It has since then grown
into a thriving community with code sprint and regular meetings
attracting over 50 attendees. This talk will present history of the
group and will highlight the key factors behind its success with the
hope to inspire others to replicate that accomplishment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will first walk the audience through the factors inherent to
Montréal itself and how it affected other user groups before
Montréal-Python. These groups inspired us to get a group of Python
hackers started the presentation will show how we were able to leverage
on the success of other user groups to bring our young community
forward.&lt;/p&gt;
&lt;p&gt;The various stages of our growth will be presented along with insights
on how we managed to find speakers and venues at each point. The
presentation will then go through an overview of our current activities,
sharing in the process how effective they are in engaging the community.
Our plans for the next few years will be presented then a summary will
provide advice to anyone who would like to get started organizing a
local Python user group.&lt;/p&gt;
</summary><category term="community"></category><category term="growth"></category><category term="pycon"></category><category term="pycon2011"></category><category term="usergroups"></category></entry><entry><title>mrjob: Distributed Computing for Everyone</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--mrjob--distributed-computing-for-ever.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jimmy Retzlaff</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--mrjob--distributed-computing-for-ever.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;mrjob: Distributed Computing for Everyone&lt;/p&gt;
&lt;p&gt;Presented by Jimmy Retzlaff&lt;/p&gt;
&lt;p&gt;Have tons of data that needs analysis? Now it's as easy as 1-2-3! 1)
Sign up for an Amazon Web Services account. 2) Install Yelp's mrjob. 3)
Write as few as a dozen lines of Python code. This talk will show you
how to use mrjob and Amazon's Elastic MapReduce to easily process lots
of data in parallel on a potentially large cluster of computers that you
can rent for a dime per computer per hour.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In their 2004 paper, Google outlined MapReduce - one of the programming
models they use to process large data sets. MapReduce is a relatively
simple model to develop for that allows the underlying framework to
automatically parallelize the job, add fault tolerance, and scale the
job to many commodity computers.&lt;/p&gt;
&lt;p&gt;In 2009, Amazon Web Services introduced their Elastic MapReduce (EMR)
product. It layers the Hadoop open source package on top of their
Elastic Compute Cloud (EC2) to allow anyone to rent a cluster of
computers by the hour, starting at about a dime per computer per hour,
in order to run MapReduce jobs.&lt;/p&gt;
&lt;p&gt;Some of the significant issues with Amazon's solution involve starting
up machine instances, replicating your code and its dependancies to EMR,
running and monitoring the job, and gathering the results.&lt;/p&gt;
&lt;p&gt;So Yelp developed mrjob, which takes care of these details and lets the
developer focus on working with their data. Yelp uses mrjob to power
many internal jobs that work with its very large log files, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;People Who Viewed This Also Viewed...&lt;/li&gt;
&lt;li&gt;A user clicked an ad over and over, but we only want to charge the
advertiser once&lt;/li&gt;
&lt;li&gt;We're thinking of a change, but want to simulate how that will affect
ad revenue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can use that same power with just a few lines of Python.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install mrjob: sudo easy_install mrjob&lt;/li&gt;
&lt;li&gt;Documentation: &lt;a class="reference external" href="http://packages.python.org/mrjob/"&gt;http://packages.python.org/mrjob/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PyPI: &lt;a class="reference external" href="http://pypi.python.org/pypi/mrjob"&gt;http://pypi.python.org/pypi/mrjob&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Development is hosted at github: &lt;a class="reference external" href="http://github.com/Yelp/mrjob"&gt;http://github.com/Yelp/mrjob&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="distributed"></category><category term="distributedcomputing"></category><category term="mrjob"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Opening the Flask</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--opening-the-flask.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--opening-the-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Opening the Flask&lt;/p&gt;
&lt;p&gt;Presented by Armin Ronacher&lt;/p&gt;
&lt;p&gt;After a year of the Flask microframework it's time to draw some
conclusions, see things that went right and things that should be
improved. The talk gives both an introduction into Flask itself as well
as well as the ecosystem that evolved around it.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Flask is a microframework that was born out of an April's fool joke that
quickly became more than that. Based on the powerful foundation of
Werkzeug and Jinja2 it's one of the most popular frameworks for Python
now.&lt;/p&gt;
&lt;p&gt;The talk starts with a very quick introduction into Flask, where it all
started and why I think people like it. We will look into the design of
Flask and why it works the way it works.&lt;/p&gt;
&lt;p&gt;Furthermore we will look into the Flask ecosystem and how extensions
work and have a brief look in what is planned for the future, especially
regarding Python 3.&lt;/p&gt;
&lt;p&gt;The talk assumes basic knowledge of web applications.&lt;/p&gt;
</summary><category term="flask"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Optimal Aircraft Engine Tuner Selection in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimal Aircraft Engine Tuner Selection in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey Armstrong&lt;/p&gt;
&lt;p&gt;A numerical algorithm for designing on-board aircraft engine diagnostics
has been implemented in Python. Employing the optimization techniques
within SciPy, the code performs a search for an optimal vector of
parameters for estimating engine variables, including exhaust
temperatures and thrust. The algorithm exploits the numerical strengths
of Python and SciPy for speed and interoperability.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;An emerging field of aircraft engine diagnostics is the inclusion of
on-board engine performance tracking algorithms. These algorithms
utilize data provided by a limited number of engine sensors to determine
the current engine performance, which tends to degrade over time.
However, estimating engine performance instantaneously is problematic
due to the limited number of sensors normally available on a commercial
aircraft engine.&lt;/p&gt;
&lt;p&gt;One common practice is to estimate and track engine performance in
software using a Kalman filter, a mathematical construct for tuning a
numerical model to better track actual measurements (1). A new technique
has been devised to optimize the design of this filter in aircraft
engine applications (2). An optimization procedure to aid in the design
of the filter has been implemented in Python and exercised against the
significant number of minimization and optimization strategies available
in SciPy. The talk focuses on the design of this optimization procedure
in Python. The object-oriented nature of Python offers benefits over
alternative numerical languages; speed, availability, and
maintainability played central roles in the selection of Python as the
implementation language. The availability of the multiprocessing module
allowed for full utilization of modern multi-core CPUs, in contrast with
often limited commercial numerical computing packages, further improving
computational speed.&lt;/p&gt;
&lt;p&gt;Some difficulties were encountered during this design exercise.
Discussion of these obstacles and their eventual solution is presented.
Specifically, iterative solvers for the discrete algebraic Riccati
equation and the discrete Lyapunov equation had to be authored in Python
(3,4). Additional framework for working with discrete state-space
control systems was created, exploiting the object-oriented features of
the language (5).&lt;/p&gt;
&lt;p&gt;The Python implementation was able to verify the solution of the
optimization problem. Comparison with an alternative, reference MATLAB
implementation will be presented briefly. The results of this research
is planned to be presented at the American Society for Mechanical
Engineers Turbo Expo 2011 Conference in June, 2011 (6). The algorithm
design in Python is meant to showcase the ability to perform controls
engineering tasks in the Python language efficiently.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;“Kalman Filter,” Wikipedia:
&lt;a class="reference external" href="ht%20tp://en.wikipedia.org/wiki/Kalman_filter"&gt;http://en.wikipedia.org/wiki/Kalman_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L. and Garg, S., “Optimal Tuner Selection for Kalman
Filter-Based Aircraft Engine Performance Estimation”. Journal of
Engineering for Gas Turbines and Power. March 2010, Vol. 132.&lt;/li&gt;
&lt;li&gt;“Algebraic Riccati Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Algebraic_Riccati_equatio%20n"&gt;http://en.wikipedia.org/wiki/Alge
braic_Riccati_equation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Lyapunov Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lyapunov_equation"&gt;http://en.wikipedia.org/wiki/Lyapunov_equa
tion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“State Space,” Wikipedia: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/State-space"&gt;http://en.wikipedia.org/wiki/State-
space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L., Armstrong, J. B., &amp;quot;Application of an Optimal Tuner
Selection Approach for On-Board Self-Tuning Engine Models,&amp;quot;
Proceedings of the ASME Turbo Expo 2011, GT2011-46408, 2011 (To Be
Published).&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="aircraftenginetuning"></category><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scipy"></category></entry><entry><title>Packaging, from Distutils to Distutils2</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--packaging--from-distutils-to-distutil.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--packaging--from-distutils-to-distutil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging, from Distutils to Distutils2&lt;/p&gt;
&lt;p&gt;Tarek Ziadé&lt;/p&gt;
&lt;p&gt;Packaging or installing a Python application can be extremely painful.
This talk will deep-dive into the new Distutils2 features and explain
how you can use them in your project &lt;em&gt;today&lt;/em&gt; to make life easier for
everyone (users, OS package managers, developers, etc.).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Distutils2 presentation and goals&lt;ol class="arabic"&gt;
&lt;li&gt;Framework&lt;/li&gt;
&lt;li&gt;Command-driven packaging system&lt;/li&gt;
&lt;li&gt;Changes from Distutils1&lt;/li&gt;
&lt;li&gt;R.I.P. setup.py&lt;/li&gt;
&lt;li&gt;The new metadata fields (PEP 345)&lt;/li&gt;
&lt;li&gt;versions for your project (PEP 386)&lt;/li&gt;
&lt;li&gt;PyPI goodies&lt;ol class="arabic"&gt;
&lt;li&gt;browsing&lt;/li&gt;
&lt;li&gt;uploading docs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;What's installed ? what to install ? (PEP 376)&lt;ol class="arabic"&gt;
&lt;li&gt;The Dependency graph tool&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Extensibility !&lt;ol class="arabic"&gt;
&lt;li&gt;commands&lt;/li&gt;
&lt;li&gt;compilers&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pysetup, one command to rule them all&lt;/li&gt;
&lt;li&gt;install !&lt;/li&gt;
&lt;li&gt;remove&lt;/li&gt;
&lt;li&gt;do other things&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Example 1: A simple Distutils2 project&lt;/li&gt;
&lt;li&gt;Example 2: Porting your project to Distutils2, and keep it
working in Distutils/Setuptools/zc.buildout environments.&lt;/li&gt;
&lt;li&gt;Example 3: Creating and releasing your own commands and compilers&lt;/li&gt;
&lt;li&gt;Example 4: Developement process made simple with Distutils2&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;Roadmap&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="distutils"></category><category term="distutils2"></category><category term="pycon"></category><category term="pycon2011"></category><category term="setup.py"></category><category term="setuptools"></category><category term="zc.buildout"></category></entry><entry><title>Panel: Python in Schools: Teaching It and Teaching With It.</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--panel--python-in-schools--teaching-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python in Schools: Teaching It and Teaching With It.&lt;/p&gt;
&lt;p&gt;Panel with Joel Zachary Miller, Jeffrey Elkner, Vern Ceder, Brian C.
Brumley, Maria Litvin&lt;/p&gt;
&lt;p&gt;Educators discuss Python as both a subject and a tool in primary and
secondary (K12) education. Topics addressed include the distinction
between teaching Python and teaching with Python, the benefits of Python
in K12 and ways to demonstrate the value of Python to administrators.
Panel includes private and public K12 educators and university faculty
involved in instruction in the K12 setting.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Zac Miller will act as panel moderator.&lt;/p&gt;
&lt;p&gt;Panel will open with a brief introduction of the origins of the panel
and self introductions of panel members before addressing the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The distinction between teaching Python and teaching with Python.&lt;ul&gt;
&lt;li&gt;Teaching Python&lt;/li&gt;
&lt;li&gt;Teaching Math with Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How does Teaching with Python complement Teaching Python?&lt;ul&gt;
&lt;li&gt;Do tensions between the two exist?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What keeps Python out of schools? What can be done to encourage more
schools to teach tools like Python?&lt;/li&gt;
&lt;li&gt;What is the biggest benefit teaching Python brings to your school and
students? What is the biggest benefit in general, beyond your school?&lt;/li&gt;
&lt;li&gt;Can teaching Python help spark creativity in those students who have
trouble exercising it?&lt;ul&gt;
&lt;li&gt;When teaching Python a creativity divide becomes readily apparent
among students. Students with a high level of curiosity and
creativity constantly try new things on their own, while other
students are focused solely on completing the assignments for
grades. How can an instructor handle this?&lt;/li&gt;
&lt;li&gt;What tangible steps can an instructor take to encourage
creativity?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What does the future look like for Python in K12 education, both at
our own schools and in general?&lt;/li&gt;
&lt;li&gt;Audience Questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Panel Biographies:&lt;/p&gt;
&lt;p&gt;Vern Ceder, Director of Technology, Canterbury School, Ft Wayne,
Indiana. The Canterbury School has been teaching at least a little
Python to every single 8th and 9th grader in the school since 2001, as
well as offering electives in Python, Java, C, etc. Vern also teaches
Python through Northwestern's Gifted Learning Links program
(&lt;a class="reference external" href="http://www.ctd.northwestern.edu/gll/"&gt;http://www.ctd.northwestern.edu/gll/&lt;/a&gt;) and is the author of The Quick
Python Book, 2nd ed (&lt;a class="reference external" href="http://www.manning.com/ceder"&gt;http://www.manning.com/ceder&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Maria Litvin. Maria teaches Math and Computer Science at Phillips
Academy in Andover, MA, including &amp;quot;Introduction to Discrete Mathematics
and Programming in Python.&amp;quot; She also taught Python to Boston-area high
school teachers and to middle schoolers in Google's CAPE program. She's
co-author of several Computer Science textbooks, most recently
Mathematics for the Digital Age and Programming in Python
(&lt;a class="reference external" href="http://www.skylit.c%20om/mathandpython.html"&gt;www.skylit.com/mathandpython.html&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Jeffrey Elkner, teaches computer programming and information technology
at the Governor's Career and Technical Academy in Arlington, Virginia.
He has been teaching with Python since 1999, and is co-author of a free
on-line textbook: How to Think Like a Computer Scientist: Learning with
Python. He also maintains the Open Book Project
(&lt;a class="reference external" href="http://openbookproject.net/"&gt;http://openbookproject.net&lt;/a&gt;), which
contains several Python resources. Jeff has attended each PyCon held
thus far, often bringing students along with him.&lt;/p&gt;
&lt;p&gt;Brian Brumley teaches Python (and lots of other stuff) to grades 6-8 at
Porter-Gaud school in Charleston, SC. Brian is a regular presenter at
state and regional conferences on technology and programming in schools.&lt;/p&gt;
&lt;p&gt;Zac Miller is adjunct instructor in the STEM school at Gainesville State
College and a faculty member at the Da Vinci Academy at South Hall
Middle School in Gainesville, Georgia. Zac is currently teaching Python
programming and Python programming for Geographic Information Systems to
K12 and college- level students.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="teaching"></category></entry><entry><title>Pluggable Django Patterns</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--pluggable-django-patterns.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Corey Oordt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--pluggable-django-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pluggable Django Patterns&lt;/p&gt;
&lt;p&gt;Presented by Corey Oordt&lt;/p&gt;
&lt;p&gt;Pluggable or reusable applications are a key feature of Django, but
there is little guidance on writing them well. We'll dig into the
different types of Django applications and coding patterns that make
writing a reusable application easier. The talk also covers ways to
avoid common implementation gotchas.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Reusable, or pluggable, applications are a powerful feature of Django.
Your code can do more if written with a few ideas and techniques in
mind. We'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The four qualities of a pluggable application&lt;/li&gt;
&lt;li&gt;The three types of Django applications&lt;/li&gt;
&lt;li&gt;Ten common situations in implementing reusable code and coding
patterns to handle them&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="patterns"></category><category term="pluggable"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Prototyping Go's Select with stackless.py for Stackless Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--prototyping-go--39-s-select-with-stac.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Andrew Francis</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--prototyping-go--39-s-select-with-stac.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prototyping Go's Select with stackless.py for Stackless Python&lt;/p&gt;
&lt;p&gt;Presented by Andrew Francis&lt;/p&gt;
&lt;p&gt;Showing how to use Python to prototype powerful concurrency features for
Stackless Python. We do want you to try this at home.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Google’s introduction of the Go language raised eyebrows in the
Stackless Python community. Although very different languages, Go and
Stackless Python’s concurrency model share a common ancestor: the Bell
Labs family of languages (i.e., Newsqueak, Limbo). The common feature
are channels: a synchronous message passing mechanism based on Tony
Hoare’s Communicating Sequential Processes (CSP).&lt;/p&gt;
&lt;p&gt;Both Go and Python have channels. However with the select language
statement, Go has the ability to wait on multiple channels
simultaneously. Select greatly simplifies many concurrent programming
problems. Stackless Python does not have this feature. Other channel
based languages also feature powerful concurrency constructs. How hard
would these constructs be to implement for Stackless Python?&lt;/p&gt;
&lt;p&gt;This talk explores the prototyping potential of stackless.py, the PyPy's
framework's implementation of Stackless Python. The beauty of
stackless.py is that it is written in Python and implements much of
Stackless Python's API! The &amp;quot;case study&amp;quot; involves prototyping Go's
select in stackless.py before reimplementing select in C based Stackless
Python.&lt;/p&gt;
&lt;p&gt;During this talk, it will be shown how stackless.py can be used with
CPython and the greenlet package (no need to install another Python).
The audience will also get an in depth look at how channels are
implemented. Channels are at the heart of Stackless Python's message
based concurrency model. Finally the audience will gain insights into
future directions of Stackless Python.&lt;/p&gt;
</summary><category term="csp"></category><category term="go"></category><category term="greenlets"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category><category term="stackless"></category></entry><entry><title>PSF funds PyPy</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--psf-funds-pypy.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--psf-funds-pypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Maciej Fija?kowski, Armin Rigo, Alex Gaynor, Laura Creighton and Jacob
Hall&lt;/p&gt;
</summary><category term="psf"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category></entry><entry><title>Python - The Secret Sauce in the Open Cloud</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python---the-secret-sauce-in-the-open.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jason Huggins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python---the-secret-sauce-in-the-open.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python - The Secret Sauce in the Open Cloud&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;This talk will go into detail on current cloud computing technology,
specifically OpenStack and libvirt and how Python is the &amp;quot;secret sauce&amp;quot;
that powers the open cloud. We'll show how to bring up your own cloud
&amp;quot;from scratch&amp;quot;, and explain why you would do such a thing.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Covered topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to use VirtualBox&lt;/li&gt;
&lt;li&gt;How to use kvm&lt;/li&gt;
&lt;li&gt;How to use libvirt with Python&lt;/li&gt;
&lt;li&gt;How to check out, build, and deploy OpenStack&lt;/li&gt;
&lt;li&gt;How to setup and maintain your own cloud&lt;/li&gt;
&lt;li&gt;Real world examples&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="kvm"></category><category term="libvirt"></category><category term="openstack"></category><category term="pycon"></category><category term="pycon2011"></category><category term="virtualbox"></category></entry><entry><title>Python and Robots: Teaching Programming in High School</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Vern Ceder</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Robots: Teaching Programming in High School&lt;/p&gt;
&lt;p&gt;Presented by Vern Ceder&lt;/p&gt;
&lt;p&gt;Combining Python with inexpensive robots is a very effective way of
teaching programming at the middle and high school levels. Since Python
is easy to understand a constructivist approach is possible - students
learn by creating and running simple programs, observing the results,
and then modifying their code to fix bugs and add functionality.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The approach suggested in this talk is partly based upon that developed
at the Institute for Personal Robots in Education
(&lt;a class="reference external" href="http://wiki.roboteducation.org/"&gt;http://wiki.roboteducation.org&lt;/a&gt;)
by staff from Georgia Tech and Bryn Mawr, combined with my own
experiences teaching programming with Python as described in my talk
&amp;quot;Goodbye, Hello World: Rethinking Teaching with Python&amp;quot;, PyCon 2007, and
my subsequent talks at NECC.&lt;/p&gt;
&lt;p&gt;Because students are able to see what their code is doing and because
Python is easy to understand, students can explore simple programming
concepts, learning features as they need them. This approach increases
both student engagement and retention. It also seems that this approach
is more appealing to girls than a more traditional programming class.&lt;/p&gt;
&lt;p&gt;I'll illustrate my talk with samples of code created by students and
video of the students/robots in action.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Introduction - school background, course structure, origin of approach&lt;/p&gt;
&lt;p&gt;Hardware and computer setup used&lt;/p&gt;
&lt;p&gt;Initial exercises and first projects&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Control of robot&lt;/li&gt;
&lt;li&gt;Program as sequence of commands&lt;/li&gt;
&lt;li&gt;Basic programming concepts - looping, branching, functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced projects&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* obstacle detection
* image processing
* simple AI approaches
&lt;/pre&gt;
&lt;p&gt;Pitfalls and strategies for using robots&lt;/p&gt;
&lt;p&gt;Questions and Suggestions&lt;/p&gt;
</summary><category term="highschool"></category><category term="pycon"></category><category term="pycon2011"></category><category term="robots"></category><category term="teaching"></category></entry><entry><title>Python-Aware Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-aware-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-aware-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python-Aware Python&lt;/p&gt;
&lt;p&gt;Presented by Ned Batchelder&lt;/p&gt;
&lt;p&gt;Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. This talk will cover a
number of the techniques for writing Python-Aware Python, and will
hopefully inspire you to build the next great Python tool.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python provides many features for introspecting, analyzing, parsing,
compiling, and otherwise grokking Python code. These modules and
techniques provide the foundation for developer's tools such as
autocompletion IDE's, code analysis tools, test runners, profilers, and
so on.&lt;/p&gt;
&lt;p&gt;I'll delve into a number of the common techniques used to write
Python-Aware Python. Each has its area of applicability and its
strengths and weaknesses. I'll demonstrate small samples that show how
those techniques underlie the tools we all know and love.&lt;/p&gt;
&lt;p&gt;The world of Python tools is ready for new exploration. This talk will
give you the foundation you need to write the next great Python-aware
application.&lt;/p&gt;
</summary><category term="analysis"></category><category term="compiling"></category><category term="introspection"></category><category term="parsing"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Python for High Performance Computing</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-for-high-performance-computing.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>William Scullin</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-for-high-performance-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for High Performance Computing&lt;/p&gt;
&lt;p&gt;Presented by William Scullin&lt;/p&gt;
&lt;p&gt;Python is becoming increasingly popular within the high performance
computing community. While it initially gained traction as a scripting
language, Python's role has continued to expand with Python applications
for science scaling to hundreds of thousands of cores and bindings to
high performance libraries becoming commonplace. This talk is meant as
an overview of Python's role in the HPC space.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk is focused on raising awareness of Python in the high
performance computing space. Specific topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;building the Python interpreter for speed&lt;/li&gt;
&lt;li&gt;an overview of bindings to numerical libraries&lt;/li&gt;
&lt;li&gt;using GPUs and accelerators with Python&lt;/li&gt;
&lt;li&gt;scaling codes with MPI&lt;/li&gt;
&lt;li&gt;issues when scaling on very large systems&lt;/li&gt;
&lt;li&gt;an overview of successful science codes&lt;/li&gt;
&lt;li&gt;a live demonstration of Python running on 163,840 cores&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="gpu"></category><category term="highperformancecomputing"></category><category term="hpc"></category><category term="mpi"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Python IDEs Panel</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-ides-panel.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-ides-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python IDEs Panel&lt;/p&gt;
&lt;p&gt;Moderated by Michael Foord&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dino Viehland - Python Tools for Visual Studio&lt;/li&gt;
&lt;li&gt;Dmitry Jemerov - PyCharm&lt;/li&gt;
&lt;li&gt;Todd Whiteman - ActiveState Komodo IDE&lt;/li&gt;
&lt;li&gt;Stephan Deibel - WingWare IDE&lt;/li&gt;
&lt;li&gt;Barry Warsaw - Emacs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As Python becomes more popular, more users are wanting IDEs that provide
code completion, integrated source code control, project management, and
other developer tools. This panel includes representatives from a number
of Python- specific or Python-supporting IDE vendors, showing the ways
that IDEs can speed up development on any platform.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;For many developers, IDEs are an essential tool-just as essential as
source code control. The growth of Python in recent years has led to a
number of projects and vendors developing Python-specific or
Python-supporting IDEs. This panel will allow attendees to compare and
contrast the different IDEs available.&lt;/p&gt;
</summary><category term="emacs"></category><category term="ide"></category><category term="komodo"></category><category term="komodoide"></category><category term="pycharm"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pythontoolsforvisualstudio"></category><category term="visualstudio"></category><category term="wingware"></category></entry><entry><title>Python.MiroCommunity.org + UniversalSubtitles.org</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-mirocommunity-org---universals.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Carl Karsten</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-mirocommunity-org---universals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Will and Carl talk about Python Miro Community, where it's at now, the
PSF grant, and what they're planning for it in the future.&lt;/p&gt;
</summary><category term="mirocommunity"></category><category term="pmc"></category><category term="pycon"></category><category term="pycon2011"></category><category term="subtitles"></category><category term="unisub"></category><category term="universalsubtitles"></category></entry><entry><title>Python Software Foundation Chairman Address</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-software-foundation-chairman-a.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Steve Holden</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-software-foundation-chairman-a.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Software Foundation Chairman Address&lt;/p&gt;
&lt;p&gt;Presented by Steve Holden&lt;/p&gt;
&lt;p&gt;Steven Holden summarizes the last year for the Python Software
Foundation and talks about future directions.&lt;/p&gt;
</summary><category term="future"></category><category term="psf"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Rapid Python used on Big Data to Discover Human Genetic Variation</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--rapid-python-used-on-big-data-to-disc.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Deniz Kural</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--rapid-python-used-on-big-data-to-disc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid Python used on Big Data to Discover Human Genetic Variation&lt;/p&gt;
&lt;p&gt;Presented by Deniz Kural&lt;/p&gt;
&lt;p&gt;Advances in genome sequencing has enabled large-scale projects such as
the 1000 Genomes Project to sequence genomes across diverse populations
around the world, resulting in very large data sets. I use Python for
rapid development of algorithms for processing &amp;amp; analyzing genomes and
discovering thousands of new variants, including &amp;quot;Mobile Elements&amp;quot; that
copy&amp;amp;paste; themselves across the genome.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Recent advances in high-throughput sequencing now enables accurate
sequencing human genomes at a low cost &amp;amp; high speed. This technology is
now used to initiate projects involving large-scale sequencing of many
genomes. The 1000 Genomes project aims to sequence 2500 genomes across
27 world populations, and has initially completed its Pilot phase. The
aim of the project is to discover &amp;amp; characterize novel variants. These
variants enable association studies that investigate the link between
genomic variation &amp;amp; phenotypes, including disease.&lt;/p&gt;
&lt;p&gt;A class of variants, known as &amp;quot;Structural Variants&amp;quot; represent a
heterogenous class of larger variants, such as inversions, duplications,
deletions, and various kinds of insertions.&lt;/p&gt;
&lt;p&gt;I use Python to for rapid development of algorithms to process, analyze,
and annotate very large data sets. In particular, I focus on Mobile
Elements, pieces of DNA that copy&amp;amp;paste; across the genome. These
elements constitute roughly half of the genome, whereas protein-coding
genes account for roughly 1.5 % of the genome.&lt;/p&gt;
&lt;p&gt;I will discuss distributed computing, genomics, and big data within the
context of Python.&lt;/p&gt;
</summary><category term="bigdata"></category><category term="casestudy"></category><category term="dna"></category><category term="genomes"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reverse-engineering Ian Bicking's brain: inside pip and virtualenv&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Pip and virtualenv are widely used in the Python world, but for the size
of their user base don't receive many code contributions, and many users
have misconceptions about how they actually work.&lt;/p&gt;
&lt;p&gt;This talk will cover a bit of advanced use of pip and virtualenv, but
mostly we'll dive into the source code, mapping it out with a high-level
view and diving into the guts of particularly interesting bits. By the
end of the talk, you'll have a good idea exactly how pip and virtualenv
do their magic, and where to go looking in the source for particular
behaviors or bug fixes. We'll walk through the creation of a virtualenv
step-by-step, and trace a typical &amp;quot;pip install -r requirements.txt&amp;quot; and
&amp;quot;pip uninstall&amp;quot; through the code paths they follow.&lt;/p&gt;
&lt;p&gt;I'll know the talk was a success when I see the pull requests!&lt;/p&gt;
</summary><category term="pip"></category><category term="pycon"></category><category term="pycon2011"></category><category term="virtualenv"></category></entry><entry><title>Saturday Afternoon Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--saturday-afternoon-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--saturday-afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Saturday afternoon lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Afternoon Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Eric Holscher - Read the Docs
(&lt;a class="reference external" href="http://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;05:25 Nate Aune - DjangoZoom
(&lt;a class="reference external" href="http://djangozoom.com/"&gt;DjangoZoom&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;09:40 Paul Smith - Update on Japan&lt;/li&gt;
&lt;li&gt;12:40 Phillip von Weitershausen - The English of Programming
Languages (JavaScript)&lt;/li&gt;
&lt;li&gt;18:15 Henrique Bastos - Community Bootstrap&lt;/li&gt;
&lt;li&gt;24:00 Barry Warsaw - flufl.i18n library
(&lt;a class="reference external" href="https://launchpad.net/flufl.i18n"&gt;https://launchpad.net/flufl.i18n&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;31:20 Aron Griffis - Window Manglement with PyWO
(&lt;a class="reference external" href="http://code.google.com/p/pywo/"&gt;http://code.google.com/p/pywo/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;35:00 Josiah Carlson - Over-Engineering for Dummies&lt;/li&gt;
&lt;li&gt;40:35 Grace Law - Get the job you want&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="djangozoom"></category><category term="engineering"></category><category term="flufl.i18n"></category><category term="interviewing"></category><category term="javascript"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pywo"></category><category term="readthedocs"></category><category term="sphinx"></category></entry><entry><title>Saturday Morning Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alfredo Deza</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Saturday morning lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Morning Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Alfredo Deza - Faster VIM Python Editing
(&lt;a class="reference external" href="https://github.com/alfredodeza/chapa.vim"&gt;github.com/alfredodeza/chapa.vim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;03:40 Dean Hall - Python-on-a-chip
(&lt;a class="reference external" href="http://pythononachip.org/"&gt;pythononachip.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;07:55 Ned Batchelder - Cog will make you happy
(&lt;a class="reference external" href="http://nedbatchelder.com/code/cog"&gt;nedbatchelder.com/code/cog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;13:55 Brett Cannon - (Some of) your PSF money at work&lt;/li&gt;
&lt;li&gt;21:10 Baiju Muthukaden - GetPython3.net
(&lt;a class="reference external" href="http://getpython3.net/"&gt;getpython3.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;25:20 Shai Ben-yehuda - Light-weight UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are impossible
to read.]&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="chapa.vim"></category><category term="cog"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pymite"></category><category term="python3"></category><category term="pythononachip"></category><category term="vim"></category></entry><entry><title>Scaling Python past 100</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--scaling-python-past-100.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--scaling-python-past-100.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python past 100&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;Sourceforge.net has been in the top 100 sites on the internet, and we
discovered that python was easily able to scale up to handle that
traffic. In fact Python is now the core language for all new features,
and is taking over all of sourceforge.net.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The path from legacy PHP to modern python tools has been long an bumpy,
and this is the story of how we took Python from a single prototype
site, to the core technology driving SourceForge.net. I will discuss the
mistakes we made along the way, the benefits that sold python, and the
real secret behind our python transformation.&lt;/p&gt;
&lt;p&gt;A few highlights include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How we abused libraries for fun and profit&lt;/li&gt;
&lt;li&gt;How a major mistake made us look good&lt;/li&gt;
&lt;li&gt;How the python community worked for us&lt;/li&gt;
&lt;li&gt;How we couldn't have done it without Django AND TurboGears&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scalability"></category><category term="sourceforge"></category><category term="turbogears"></category></entry><entry><title>Serious Business: Python is not just for Engineering</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--serious-business--python-is-not-just-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Zach Steindler</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--serious-business--python-is-not-just-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serious Business: Python is not just for Engineering&lt;/p&gt;
&lt;p&gt;Presented by Zach Steindler&lt;/p&gt;
&lt;p&gt;Building a great business is quite different from building a great
product, but by measuring Key Performance Indicators (things like cash
flow, if users keep coming back, etc.) you can make sure your business
is on the right track. In this talk I'll cover common KPI in the tech
business and show you how we automate collecting and presenting KPI at
Olark.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;As a hacker-turned-founder, you quickly realize there's more to building
a great business than just building a great product. The easiest way to
know your business is on the right track is to measure Key Performance
Indicators (KPIs): things like cash flow, what parts of the product is
used the most, if your users keep coming back, if users are experiencing
problems... and many, many others. How are you supposed to keep track of
it all without getting lost in a sea of noise?&lt;/p&gt;
&lt;p&gt;With Python, of course! In this talk I'll cover the most common KPIs
technology businesses track and show you how we used Python at Olark to
automatically collect and present KPIs to the team. This has made it
much easier to quickly answer business questions and help us know we're
on the right track.&lt;/p&gt;
&lt;p&gt;So if you're a Python hacker who would like to learn more about how to
engineer a business, or if you're a business person who's just starting
to learn Python, come learn how Python isn't just for engineering.&lt;/p&gt;
</summary><category term="business"></category><category term="kpi"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>SOLVCON: A New Python-Based Software Framework for Massively Parallelized Numerical Simulations</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--solvcon--a-new-python-based-software-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Yung-Yu Chen</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--solvcon--a-new-python-based-software-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SOLVCON: A New Python-Based Software Framework for Massively
Parallelized Numerical Simulations&lt;/p&gt;
&lt;p&gt;Presented by Yung-Yu Chen&lt;/p&gt;
&lt;p&gt;SOLVCON is the first Python-based software framework for high-resolution
simulations of multi-physics conservation laws. More than ninety
percents of the codes are done in Python. Performance hot-spots are
optimized by C and glued by ctypes library. SOLVCON is high-performance
in nature and has been able to utilize 512 4-core nodes at Ohio
Supercomputer Center.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In this decade, performance improvements of scientific computing will
mainly come from major changes in the computing hardware. A
well-organized software structure is imperative to accommodate such
changes. Based on Python, SOLVCON (&lt;a class="reference external" href="http://solvcon.net/"&gt;http://solvcon.net/&lt;/a&gt;) is designed as a
software framework to develop conservation-law solvers by segregating
solving kernels from various supportive functionalities. Being the
governing equations for the physical world, conservation laws are
applied everywhere in science and engineering. Although it is well known
that the numerical algorithms and physical models form the kernel of any
conservation-law solver, few if not none code can cleanly separate those
core components from supportive functionalities. The lack of
organization has hindered the development of legacy codes. To address
the issues, the supportive functionalities are internalized in the
framework of SOLVCON. Aided by the framework, both multi- physics and
hybrid parallelism can be implemented in an organized way. To date,
SOLVCON has utilized up to 512 4-core nodes at Ohio Supercomputer Center
for high-resolution simulations of computational fluid dynamics (CFD).
SOLVCON targets to concurrently utilize thousands of computer nodes for
high- resolution simulations using over one billion mesh points.&lt;/p&gt;
&lt;p&gt;One of the major purposes of SOLVCON is to resolve the complicated
programming efforts for GPU clusters. Supercomputing is undergoing the
third revolution by the emerging GPU computing. To date, the fastest
supercomputer in the Top 500 list, Tianhe-1A, is a GPU cluster. GPU
computing promises numerical analysts to reduce the time for the
high-resolution simulations from months to days. In order to use GPU
computing to accelerate such large-scale problems, GPU nodes must be
networked together to form a GPU cluster. As such, shared-memory and
distributed-memory parallelization must be simultaneously utilized to
achieve the so-called hybrid parallelism. Parallel computing is
difficult, and hybrid parallel computing is more difficult. By using
Python to develop the fundamental software structure, GPU or
multi-threaded programming for shared- memory parallelization are locked
in solving kernels. Complex message-passing is implemented in SOLVCON
and isolated from solving-kernel developers. Highly optimized C and GPU
codes are glued into SOLVCON without loss of performance by using the
ctypes package. Othere important features of SOLVCON include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pluggable multi-physics.&lt;/li&gt;
&lt;li&gt;Built-in &lt;a class="reference external" href="http://www.grc.nasa.gov/WWW/microbus/"&gt;CESE&lt;/a&gt; solvers.&lt;/li&gt;
&lt;li&gt;Unstructured mesh consisting of mixed elements.&lt;/li&gt;
&lt;li&gt;Interface to Message-Passing Interface (MPI) libraries.&lt;/li&gt;
&lt;li&gt;Socket communication layer: working without MPI installed.&lt;/li&gt;
&lt;li&gt;Automatic distributed-memory parallelization by domain decomposition.&lt;/li&gt;
&lt;li&gt;Parallel I/O.&lt;/li&gt;
&lt;li&gt;In situ visualization by &lt;a class="reference external" href="http://vtk.org"&gt;VTK&lt;/a&gt; library.&lt;/li&gt;
&lt;li&gt;Standalone writers to VTK legacy and XML file formats.&lt;/li&gt;
&lt;li&gt;Integration to supercomputer (cluster) batch systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SOLVCON has been applied to computation fluid dynamics and computational
mechanics. More physical solvers are being developed for various
propagating wave problems, e.g., electromagnetic waves. By using Python
as the foundation in SOLVCON, performance and extensibility are well
balanced, and computational research is being done in the most
productive way. In this talk, the author of SOLVCON will make an
introduction to the software framework by including the following
topics:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Simulations of conservation laws and hybrid parallelism for
supercomputing.&lt;/li&gt;
&lt;li&gt;Issues in legacy codes and challenges to code for emerging
supercomputer hardware.&lt;/li&gt;
&lt;li&gt;Using SOLVCON in the simple way by pre-defined modules.&lt;/li&gt;
&lt;li&gt;Fixed parts in SOLVCON.&lt;ol class="arabic"&gt;
&lt;li&gt;Distributed computing.&lt;/li&gt;
&lt;li&gt;Multi-thread utilities.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Customizable parts in SOLVCON.&lt;ol class="arabic"&gt;
&lt;li&gt;Pluggable multi-physics and GPGPU computing.&lt;/li&gt;
&lt;li&gt;Supercomputer batch system and bootstrapping.&lt;/li&gt;
&lt;li&gt;In situ visualization.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The talk will take 30 minutes.&lt;/p&gt;
</summary><category term="gpgpu"></category><category term="numericalsimulations"></category><category term="parallelcomputing"></category><category term="pycon"></category><category term="pycon2011"></category><category term="simulations"></category><category term="solvcon"></category></entry><entry><title>State of Pylons/TurboGears 2/repoze.bfg</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--state-of-pylons-turbogears-2-repoze-b.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Ben Bangert</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--state-of-pylons-turbogears-2-repoze-b.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;State of Pylons/TurboGears 2/repoze.bfg&lt;/p&gt;
&lt;p&gt;Presented by Chris McDonough, Ben Bangert, and Mark Ramm&lt;/p&gt;
&lt;p&gt;A three-for-one talk by the main developers of three popular Python web
frameworks! We'll (very) briefly cover the state of each of our
individual frameworks and communities, and then we'll describe the
results of our efforts to work together and share code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Pylons is a popular, lightweight Python web framework.&lt;/p&gt;
&lt;p&gt;TurboGears 2 is a full-stack framework built atop Pylons.&lt;/p&gt;
&lt;p&gt;repoze.bfg is a moderately popular, lightweight Python web framework.&lt;/p&gt;
&lt;p&gt;The main developers and community leaders of these frameworks have been
working together and sharing as much as possible over the course of
roughly the last year. We'll very briefly describe to the audience the
states of our individual efforts, then we'll discuss how we intend to
move forward and share more code and effort in the year to come. The
talk will be more socially- oriented than technical.&lt;/p&gt;
&lt;p&gt;It's unusual for open source code and communities to bridge minor
perceived differences in scope and style and to start sharing code and
ideas openly. If you're a user of any of these frameworks, you'll want
to be present for this talk.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="pylons"></category><category term="pyramid"></category><category term="repoze.bfg"></category><category term="turbogears"></category></entry><entry><title>Statistical machine learning for text classification with scikit-learn</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--statistical-machine-learning-for-text.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Olivier Grisel</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--statistical-machine-learning-for-text.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Statistical machine learning for text classification with scikit-learn&lt;/p&gt;
&lt;p&gt;Presented by Olivier Grisel&lt;/p&gt;
&lt;p&gt;The goal of this talk is to give a state-of-the-art overview of machine
learning algorithms applied to text classification tasks ranging from
language and topic detection in tweets and web pages to sentiment
analysis in consumer products reviews.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Unstructured or semi-structured text data is ubiquitous thanks to the
read- write nature of the web. However human authors are often lazy and
don't fill- in structured metadata forms in web applications. It is
however possible to automate some structured knowledge extraction with
simple and scalable statistical learning tools implemented in python.
For instance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;guessing the language and topic of tweets and web pages&lt;/li&gt;
&lt;li&gt;analyze the sentiment (positive or negative) in consumer products
reviews in blogs or customer emails&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will introduce the main operational steps of supervised
learning:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;extracting the relevant features from text documents&lt;/li&gt;
&lt;li&gt;selecting the right machine learning algorithm to train a model for
the task at hand&lt;/li&gt;
&lt;li&gt;using the trained model on previously unseen documents&lt;/li&gt;
&lt;li&gt;evaluating the predictive accuracy of the trained model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also demonstrate the results obtained for above tasks using the
&lt;a class="reference external" href="http://scikit-learn.sourceforge.net/"&gt;scikit-learn&lt;/a&gt; package and
compare it to other implementations such as &lt;a class="reference external" href="http://nltk.org/"&gt;nltk&lt;/a&gt;
and the &lt;a class="reference external" href="http://code.google.com/apis/predict/"&gt;Google Prediction
API&lt;/a&gt;.&lt;/p&gt;
</summary><category term="googlepredictionapi"></category><category term="machine learning"></category><category term="nltk"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scikit-learn"></category></entry><entry><title>Status of Unicode in Python 3</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduced in Python 2.0, unicode became the default string type in
Python 3.0. It took 8 years to switch to unicode, and since Python 3.0,
a lot of bugs has been fixed. The switch to unicode opened many
questions. Should Python support both bytes and characters for
filenames? What to do with undecodable bytes? etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on the recent issues fixed in Python 3.1 and 3.2:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the PEP 383 (error handler to store undecodable bytes) everywhere&lt;/li&gt;
&lt;li&gt;Encoding of the command line arguments: utf-8 on Mac OS X, locale
encoding on UNIX/BSD, unicode on Windows&lt;/li&gt;
&lt;li&gt;Environment variables: creation of os.environb&lt;/li&gt;
&lt;li&gt;Filenames: huge work to support the PEP 383 everywhere, creation of
os.fsencode() and os.fsdecode()&lt;/li&gt;
&lt;li&gt;Python source code encoding: use tokenize.detect_encoding() instead
of the locale encoding&lt;/li&gt;
&lt;li&gt;some library examples: email, ftp, ...&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will present not only the changes in Python, but also in the C
API.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="python3"></category><category term="unicode"></category></entry><entry><title>Sunday Afternoon Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--sunday-afternoon-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--sunday-afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sunday Afternoon Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:40 Paul Smith - Japan&lt;/li&gt;
&lt;li&gt;03:10 Zed Shaw - Being Passionate&lt;/li&gt;
&lt;li&gt;05:40 Pete Fein - Twiggy: A Pythonic Logger&lt;/li&gt;
&lt;li&gt;11:15 Remy DeCausemaker - &lt;a class="reference external" href="mailto:FOSS&amp;#64;RIT"&gt;FOSS&amp;#64;RIT&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;16:15 Evgeny Fadeev - Askbot (&lt;a class="reference external" href="http://askbot.org/"&gt;askbot.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;21:05 Carl Karsen - Video subtitles
(&lt;a class="reference external" href="http://universalsubtitles.org/"&gt;universalsubtitles.org&lt;/a&gt;,
&lt;a class="reference external" href="http://python.mirocommunity.org/"&gt;python.mirocommunity.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;25:45 Larry Hastings - Minuteman
(&lt;a class="reference external" href="http://www.larryhastings.com/minuteman/"&gt;www.larryhastings.com/minuteman&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;31:50 Mike Pirnat - Win at parenting with Python
(&lt;a class="reference external" href="http://howoldismykid.com/"&gt;howoldismykid.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;36:15 Barry Warsaw - flufl.enum
(&lt;a class="reference external" href="https://launchpad.net/flufl.enum"&gt;launchpad.net/flufl.enum&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;40:45 Jonathan Hartley - Make a game for PyWeek
(&lt;a class="reference external" href="http://www.pyweek.org/"&gt;www.pyweek.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;45:30 Gregory P. Smith - Protobufs for data storage and transport
(&lt;a class="reference external" href="http://code.google.com/p/protobuf/"&gt;code.google.com/p/protobuf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;50:45 Dan Bentley - 2to3 + MOE&lt;/li&gt;
&lt;li&gt;56:15 Dino Viehland - Python tools for Visual Studio&lt;/li&gt;
&lt;li&gt;1:01:00 Moshe Zadka - Bayes' Theorem for Programmers&lt;/li&gt;
&lt;li&gt;1:04:50 Brandon Rhodes - Adventure in Python&lt;/li&gt;
&lt;li&gt;1:10:20 Whit Morriss - Sharing is caring, FOSS and Python at
SurveyMonkey&lt;/li&gt;
&lt;li&gt;1:15:25 Kumar McMillan - Fudging it with Mock Objects
(&lt;a class="reference external" href="http://farmdev.com/projects/fudge/"&gt;farmdev.com/projects/fudge/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="adventure"></category><category term="askbot"></category><category term="flufl.enum"></category><category term="foss@rit"></category><category term="fudge"></category><category term="minuteman"></category><category term="moe"></category><category term="pmc"></category><category term="protobuf"></category><category term="pycon"></category><category term="pycon2011"></category><category term="python2to3"></category><category term="pyweek"></category><category term="twiggy"></category><category term="universalsubtitles"></category></entry><entry><title>Supercomputer and Cluster Application Performance Analysis using Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--supercomputer-and-cluster-application.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Daniel W. Barnette</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--supercomputer-and-cluster-application.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon 2011: Supercomputer and Cluster Application Performance Analysis
using Python&lt;/p&gt;
&lt;p&gt;Presented by Daniel W. Barnette, PhD&lt;/p&gt;
&lt;p&gt;Sandia National Labs analyzes high-performance computing environments to
optimize application performance, analyze system architectures, and
provide design guidance for future systems. We discuss 1) generating
performance data across multiple systems using mini-applications, and 2)
using our open source Python tools Pylot/Co-Pylot to store and analyze
data using a MySQL database server.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Sandia National Laboratories analyzes large-scale, state-of-the-art high
performance computing environments for the Department of Energy (DOE),
Department of Defense (DoD), and other government agencies. Execution
efficiency is vital when dealing with datasets that require billions of
elements or when running simulations that take millions of core-hours to
complete.&lt;/p&gt;
&lt;p&gt;One approach to investigating execution efficiency is to instrument our
large- scale applications and platforms to generate timings and other
performance data. Although effective in mature computing environments,
working directly with large-scale applications is cumbersome, time
consuming, and even impossible in the early stages of computer system
analysis and design. Furthermore, the software and data sets of these
applications may be restricted, limiting our abilities to collaborate.&lt;/p&gt;
&lt;p&gt;In order to enhance our analysis capabilities far upstream from when
large- scale applications can be used and when working with external
collaborators, we have developed a collection of mini-applications that
capture the essence of our much larger scientific codes, are readily
applicable to both large and small systems, and whose run-time
information can accurately reveal problems associated with execution
efficiency.&lt;/p&gt;
&lt;p&gt;Generating the data is only half the problem, though. We need the
ability to capture platform-relevant mini-app performance data at the
convenience of the testers when and where they generate the data. We
also need the ability to search through, filter, and visualize the
resulting performance measurement datasets in detail to identify and
understand trends and patterns.&lt;/p&gt;
&lt;p&gt;Sandia National Laboratories has developed a performance analysis suite
primarily consisting of two tools written in Python, Pylot and Co-Pylot.
Co- Pylot is a relatively simple interface that enables easy batch
transfer of performance data to a remote MySQL database server for
persistent storage.&lt;/p&gt;
&lt;p&gt;Once stored, the performance data is extracted, organized, filtered, and
analyzed using Pylot, a more functionally complex interface. Pylot is
used to present user-selected MySQL database fields in a variety of
views including statistical data, bar and pie charts, Cartesian or
log-log or semi-log plots, reference curves for comparisons, and Kiviat
diagrams (also called radar charts) for multivariate datasets.&lt;/p&gt;
&lt;p&gt;A built-in storage buffer provides the ability to store, compare, and
analyze data from multiple databases. This capability is critical for
studying performance variations of a code running on a particular
architecture, comparing application performance across architectures, or
comparing multiple applications on one or more architectures. Values in
up to four database fields at a time can be mathematically combined to
generate a new temporary field to provide complete generality while
accessing a database. Further, Pylot provides the ability to easily move
MySQL databases and tables between computers, including the analyst’s
laptop. This coherency of databases across multiple analysis platforms
can be used, for example, to avoid network latency issues associated
with accessing remote servers. It also serves as a distributed backup
system.&lt;/p&gt;
&lt;p&gt;An outline of this presentation follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Applications at Sandia National Laboratories (6 mins)&lt;ul&gt;
&lt;li&gt;Simulation size and runtime of typical large Sandia applications&lt;/li&gt;
&lt;li&gt;Difficulties of using large-scale applications in early computer
system design and analysis&lt;/li&gt;
&lt;li&gt;Mantevo mini-apps – small, self-contained programs that embody
essential performance characteristics of key applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gathering data (4 mins)&lt;ul&gt;
&lt;li&gt;What information Mantevo mini-apps provide&lt;/li&gt;
&lt;li&gt;Co-Pylot – getting your data into a remote database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supercomputer and Cluster application analysis (10 mins)&lt;ul&gt;
&lt;li&gt;Pylot – demo of accessing and graphing MySQL data as a method for
analyzing performance&lt;/li&gt;
&lt;li&gt;Diagnosing performance issues&lt;/li&gt;
&lt;li&gt;Comparing different systems and different runs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future Extensions of Pylot (5 mins)&lt;ul&gt;
&lt;li&gt;Capturing compile-time and execution info&lt;/li&gt;
&lt;li&gt;Efforts to move parts of Pylot to the web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="pylot"></category><category term="sandianationallaboratories"></category><category term="supercomputer"></category></entry><entry><title>Supporting All Versions of Python All The Time With Tox</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supporting All Versions of Python All The Time With Tox&lt;/p&gt;
&lt;p&gt;Presented by Kumar McMillan&lt;/p&gt;
&lt;p&gt;This talk explains the modern techniques that every module maintainer
needs to know in order to support all major versions of Python. You
probably already have a massive test suite using a tool like nosetests,
py.test, unittest, or a custom runner. Using the tox command line tool,
you'll see how to run your tests in Python 2.x, 3.x, Jython, and
whatever else in parallel.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;tox is a new tool that lets you set up isolated virtual environments to
test your module's deployment and compatibility with all major versions
of Python. It's easy to install and is flexible enough that it probably
already supports your existing test suite. With one simple command you
can execute your test suite in each version of Python, you can build its
documentation with Sphinx, and get a nice printout of the results. It
has also been designed from the ground up to integrate into continuous
integration (CI) tools like Hudson.&lt;/p&gt;
&lt;p&gt;Using practical examples, this talk will show you how to toxify your
existing test suite and trick it out with the tox.ini config file.
You'll also see how to leverage Hudson's matrix build so that each code
checkin will run tests in all versions of Python and report detailed
failures.&lt;/p&gt;
&lt;p&gt;Your app supports Python 3, right? No? Tox is the best way to develop in
parallel with 2.x and 3.x. We'll go over how to set up tox for that.&lt;/p&gt;
</summary><category term="ci"></category><category term="hudson"></category><category term="pycon"></category><category term="pycon2011"></category><category term="testing"></category><category term="tox"></category></entry><entry><title>Swarming the Web: Evolving the Perfect Config File</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--swarming-the-web--evolving-the-perfec.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Kurt Grandis</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--swarming-the-web--evolving-the-perfec.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Swarming the Web: Evolving the Perfect Config File&lt;/p&gt;
&lt;p&gt;Presented by Kurt Grandis&lt;/p&gt;
&lt;p&gt;Deployed web applications are typically run on top of stacks of highly
configurable middleware. The number of tunable parameters and their
impact are rarely fully explored. Using SciPy and a set of common
Python-based web tools this session will present a new method of
automatically tuning a typical LAMP stack for optimal performance.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Deployed web applications typically run on top of stacks of configurable
technology (e.g. web servers, interface modules, software load
balancers, databases). Each of these components often has dozens of
tuneable parameters. How many times are those values typically tweaked
before a final set of tuned parameters are settled on? What criteria are
typically used to determine the optimal set?&lt;/p&gt;
&lt;p&gt;This session presents a new method of automatically tuning a common LAMP
stack for optimal performance. We explore a solution using some common
Python-based automated deployment and load testing tools and dive into
scientific computing with SciPy.&lt;/p&gt;
</summary><category term="lamp"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scipy"></category><category term="tuning"></category><category term="webapps"></category></entry><entry><title>Ten Years of Twisted</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--ten-years-of-twisted.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--ten-years-of-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten Years of Twisted&lt;/p&gt;
&lt;p&gt;Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;The Twisted event-driven networking engine is well-known in the Python
community. However, only a few of its features are widely understood.
This talk will be a brief conceptual introduction to Twisted, followed
by a survey of its features, their status, and how development has been
proceeding over the years, with a special focus on the last two years of
sponsored development.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will begin with a brief introduction to Twisted architectural
concepts; a description of the event loop, connections, and timers. It
will then segue into the many different features that Twisted offers,
including command-line tools for running an out-of-the-box
zero-configuration HTTP server, DNS server, IRC server, and SMTP server.
This will also present the relative maturity and stability of each of
these areas of the code, with a special emphasis on what level of
expertise a developer should have before attempting to use them.
Finally, I will describe some of the features that have been added to
Twisted along the way, including some new and exciting developments that
have been happening recently.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="twisted"></category></entry><entry><title>Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jason Huggins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster,
and more Pythonicly&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;Selenium is a popular web application testing tool for acceptance
testing dynamic web applications. Selenium 2.0 has a different
architecture that makes it leaner, meaner, and more pythonic -- for
testing desktop &lt;em&gt;and&lt;/em&gt; mobile web (iPhone/Android) apps. This talk will
go into detail on how Selenium 2 works. If you like testing and Python,
you'll enjoy what's cooking in Selenium 2.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Selenium was originally created by Jason Huggins and his team at
ThoughtWorks in 2004 as a tool for cross-browser acceptance testing of
dynamic web apps -- apps that use JavaScript heavily on the client. Over
the years, the Selenium tool family has expanded to include a Firefox
record and playback tool (Selenium IDE), a Remote Control server that
allows API access from any major programming language, and a Grid server
that allows tests to run in parallel across many machines.&lt;/p&gt;
&lt;p&gt;Despite it's widespread industry adoption, the Selenium project is far
from done. Selenium's goal is to drive any browser the same way an end
user would (e.g. opening pages, clicking buttons, entering text, etc.)
with any programming language on any OS platform. It's an ambitious
goal, and with a steady stream of new browsers (Chrome), new platforms
(Android, iPhone), and new HTML5 technologies (video, canvas, offline
storage) to support, just keeping up is an arduous task.&lt;/p&gt;
&lt;p&gt;Astute observers will note, though, the bulk of Selenium's automation
engine is implemented in JavaScript, which is confined by the browser's
security sandbox in which it executes JavaScript code. That security
sandbox ultimately is at odds with Selenium's goal to drive the browser
just as a user would. A user has no problem interacting with security
alerts for untrusted certificates, or file upload dialog boxes, but
Selenium can't deal with these kinds of things easily without extra
effort.&lt;/p&gt;
&lt;p&gt;Enter WebDriver. There's a lot in common between the Selenium and
WebDriver projects. They're both tools for automated testing of web
applications, and both aspire to offer browser test automation from any
language on any platform. However, they do their thing in radically
different ways. Selenium uses the strategy that JavaScript is the one
common tool available for automating all browsers, even though its
capabilities can be highly constrained. Meanwhile, WebDriver leverages
the strategy that acknowledges different automation strategies work best
for different browsers. COM works best for IE on Windows, Apple Events
for Safari on OS X. And Firefox, well, the best way to natively automate
Firefox is to turn it into a telnet server. (But that's a whole other
PyCon talk entirely!) WebDriver aims to natively drive each browser the
best way possible for maximum capability, then hiding those differences
between lower level C and C++ APIs, and finally exposing the
functionality through the appropriate C/C++ mechanism for each target
language, such as using ctypes for Python. With WebDriver's technical
approach, anything a user can do is now possible in test automation
code.&lt;/p&gt;
&lt;p&gt;This talk will go into detail explaining how Selenium and WebDriver (aka
Selenium 2) work, comparing the strengths and weaknesses of each tool's
approach to browser automation. The talk will then explain what Selenium
2.0 looks like and how to use it.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Description of problem space&lt;ul&gt;
&lt;li&gt;More browsers&lt;/li&gt;
&lt;li&gt;More frequent browser releases&lt;/li&gt;
&lt;li&gt;HTML 5 - video, canvas, offline storage&lt;/li&gt;
&lt;li&gt;The web in more places - Mobile, Chrome OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium&lt;/li&gt;
&lt;li&gt;Strengths of Selenium&lt;/li&gt;
&lt;li&gt;Description of challenges for Selenium 1&lt;ul&gt;
&lt;li&gt;Javascript security sandbox&lt;/li&gt;
&lt;li&gt;Same origin policy / cross-site scripting&lt;/li&gt;
&lt;li&gt;OS-level popups&lt;/li&gt;
&lt;li&gt;Speed / stability&lt;/li&gt;
&lt;li&gt;Java as the cross-language integration point (aka Not Very
Pythonic, eh?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium 2 (aka WebDriver)&lt;/li&gt;
&lt;li&gt;Strengths of Selenium 2&lt;/li&gt;
&lt;li&gt;How Selenium 2 is more pythonic&lt;ul&gt;
&lt;li&gt;(Lots and lots of example code goes here.)&lt;/li&gt;
&lt;li&gt;Spoiler Alert: No Java server required!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to test Android apps&lt;/li&gt;
&lt;li&gt;How to test iPhone apps&lt;/li&gt;
&lt;li&gt;Selenium development roadmap&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="browsers"></category><category term="embedded"></category><category term="html5"></category><category term="pycon"></category><category term="pycon2011"></category><category term="selenium"></category><category term="webdriver"></category></entry><entry><title>Testing with mock</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--testing-with-mock.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Michael Foord</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-with-mock.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with mock&lt;/p&gt;
&lt;p&gt;Presented by Michael Foord&lt;/p&gt;
&lt;p&gt;mock is a Python testing library. It has the goal of making mocking in
tests brain dead simple! mock provides the Mock class and the patch
decorator for safely patching out the objects you are mocking in your
tests. This talk will cover standard mocking patterns. We'll also look
at some of the newer features in the latest release, including support
for mocking magic methods.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;mock provides a core Mock class that removes the need to create a host
of trivial stubs throughout your test suite. After performing an action,
you can make assertions about which methods / attributes were used and
arguments they were called with. You can also specify return values and
set specific attributes in the normal way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.voidspace.org.uk/python/mock/"&gt;http://www.voidspace.org.uk/python/mock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/mock/"&gt;http://pypi.python.org/pypi/mock/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mock module also provides a patch() decorator that handles safely
patching out the things you are mocking during your test.&lt;/p&gt;
&lt;p&gt;We'll cover standard mocking patterns, and how mock makes them easy.
We'll also be looking at some of the newer features in the latest
release, including the magic method support that can be used (for
example) for mocking out objects used as context managers.&lt;/p&gt;
&lt;p&gt;mock is designed for &amp;quot;unit test style&amp;quot; testing, but is used with Python
testing libraries like nose and py.test.&lt;/p&gt;
&lt;p&gt;There will be some emphasis on how &lt;em&gt;not&lt;/em&gt; to use mocking in testing, and
why 'over mocking' is bad (and makes for brittle tests).&lt;/p&gt;
</summary><category term="mock"></category><category term="pycon"></category><category term="pycon2011"></category><category term="testing"></category></entry><entry><title>The Data Structures of Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--the-data-structures-of-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-data-structures-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Data Structures of Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Any Python programmer knows about the major builtin data strcutres,
lists, dicts, tuples, but do you always remember when you're supposed to
use them? Do you know about all the cool data structures hidden in the
standard library? This talk will be a review of the characteristics of
the different data structures, and a tour of idiomatic ways to use some
of the structures in the standard library.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;First, as a note this talk borders between survey and discuss in depth.
For each data structure I want to cover their implementation,
performance characteristics, and idiomatic usage (e.g. tuples vs.
lists), a lot of them have similar implementations so idiomatic usage
will dominate for some of them.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The builtins (10 minutes)&lt;ul&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an array of pointers&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;Ordered collections of any type of objects&lt;/li&gt;
&lt;li&gt;Immutable*&lt;/li&gt;
&lt;li&gt;Implemented as a fixed-length array of pointers&lt;/li&gt;
&lt;li&gt;dicts&lt;/li&gt;
&lt;li&gt;Unordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;Why no immutable variant&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;li&gt;sets&lt;/li&gt;
&lt;li&gt;Unordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;ul&gt;
&lt;li&gt;frozenset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Implemented as an open-addressed hash table.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Standard Library (10 minutes)&lt;ul&gt;
&lt;li&gt;OrderedDict&lt;/li&gt;
&lt;li&gt;Ordered mapping of hashable objects to any objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a dict with a doubly-linked list running through
it.&lt;/li&gt;
&lt;li&gt;deque&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as an unrolled, doubly-linked list&lt;/li&gt;
&lt;li&gt;namedtuple&lt;/li&gt;
&lt;li&gt;Ordered collection of any type of objects, &lt;em&gt;also&lt;/em&gt; addressable by
name.&lt;/li&gt;
&lt;li&gt;Immutable&lt;/li&gt;
&lt;li&gt;Implemented as a tuple with extra properties&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;Like a list... but limited to &amp;quot;primitve&amp;quot; types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance characteristics.&lt;/li&gt;
&lt;li&gt;Writing your own (5 minutes)&lt;ul&gt;
&lt;li&gt;Abstract Base Classes&lt;/li&gt;
&lt;li&gt;Duck typing&lt;ul&gt;
&lt;li&gt;Why would you want to use them!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What's available.&lt;/li&gt;
&lt;li&gt;OrderedSet&lt;/li&gt;
&lt;li&gt;An ordered collection of hashable objects&lt;/li&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Implemented as a set with a doubly-linked list running through it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Questions (5 minutes)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="abc"></category><category term="datastructures"></category><category term="dequearray"></category><category term="dict"></category><category term="ducktyping"></category><category term="frozenset"></category><category term="list"></category><category term="namedtuple"></category><category term="ordereddict"></category><category term="orderedset"></category><category term="pycon"></category><category term="pycon2011"></category><category term="set"></category><category term="tuple"></category></entry><entry><title>The Development of Python and You</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--the-development-of-python-and-you.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Brian Curtin</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-development-of-python-and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Development of Python and You&lt;/p&gt;
&lt;p&gt;Presented by Brian Curtin&lt;/p&gt;
&lt;p&gt;Have an inside look at what it takes to work on CPython, from getting
setup with the source and navigating the bug tracker, to the best
practices for having your work accepted. We'll find, categorize, and fix
an issue in Python to get you started. This talk is ideal for those who
are new to open source projects or are interested in the Python
development process.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;People from all backgrounds, users of all platforms, and developers of
all levels are necessary in the development of Python. From writing code
to documentation, it takes all kinds of people to make an impact. If
you've used Python, we need you, and what better place to get involved
than at PyCon?&lt;/p&gt;
&lt;p&gt;2010 saw a rise in the number of contributors to CPython, and the PSF
stepped in to support the efforts of those wanting to get involved. Are
you up for the challenge? This talk dives right into what it takes to
get involved, covering the who, what, where, when, and why of Python
development, going through the whole process live.&lt;/p&gt;
&lt;p&gt;After the conference is over, stick around with the CPython crew and
hack away!&lt;/p&gt;
</summary><category term="coredev"></category><category term="cpython"></category><category term="development"></category><category term="gettinginvolved"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>The Pyramid FAQ</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--the-pyramid-faq.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Carlos de la Guardia</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-pyramid-faq.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Pyramid FAQ&lt;/p&gt;
&lt;p&gt;Presented by Carlos de la Guardia&lt;/p&gt;
&lt;p&gt;The #pylons IRC channel is the most common way of giving support to
users of the Pyramid framework. In this talk we take away some of the
most often discussed topics in the channel and give detailed answers to
them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Every development project has a few questions and doubts that seem to
come up on its support channels every now and then. The Pyramid
framework is no exception.&lt;/p&gt;
&lt;p&gt;In this talk, we introduce Pyramid related FAQs using the chat logs and
proceed to discuss them in detail. Showing the logs allows us to give
the talk a lighter side and makes for an introduction to each topic
based on real user questions.&lt;/p&gt;
&lt;p&gt;Topics covered here include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Configuration objects.&lt;/li&gt;
&lt;li&gt;Object traversal versus URL dispatch.&lt;/li&gt;
&lt;li&gt;Context and views.&lt;/li&gt;
&lt;li&gt;Authentication and authorization.&lt;/li&gt;
&lt;li&gt;How much 'Zope stuff' is there in Pyramid and can we take it away?&lt;/li&gt;
&lt;li&gt;Examples of how Pyramid enables the Pylons philosophy of integrating
best of breed or preferred components.&lt;/li&gt;
&lt;li&gt;The future of Pyramid and Pylons.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="pyramid"></category></entry><entry><title>The Python That Wasn't</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python That Wasn't&lt;/p&gt;
&lt;p&gt;Presented by Larry Hastings&lt;/p&gt;
&lt;p&gt;One reason for Python's success is its restraint in adding new language
features. Only the most essential changes make it--and for every change
that gets accepted, many more are rejected. Come learn about proposed
changes to the Python language that failed--what, how, and why.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick overview of the process&lt;ul&gt;
&lt;li&gt;First ten years: send GvR a patch&lt;/li&gt;
&lt;li&gt;The modern approach: python-ideas, write a PEP, produce a
reference implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discuss the &amp;quot;prickly&amp;quot; Python community&lt;ul&gt;
&lt;li&gt;This is a good thing! Only the best ideas survive the python-dev
gauntlet!&lt;/li&gt;
&lt;li&gt;They do this not because they're mean, but because they care so
much.&lt;/li&gt;
&lt;li&gt;We must have eternal vigilance to prevent unnecessary changes!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A survey of some changes that didn't make it&lt;ul&gt;
&lt;li&gt;The switch/case statement (PEP 3103)&lt;/li&gt;
&lt;li&gt;The &amp;quot;freeze protocol&amp;quot; (PEP 351)&lt;/li&gt;
&lt;li&gt;The &amp;quot;dynamic attribute access&amp;quot; proposal from python-dev, 2007/02&lt;/li&gt;
&lt;li&gt;Many more possibilities await in the rejected PEPs!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My message to the audience&lt;ul&gt;
&lt;li&gt;Start with a post to python-ideas, please!&lt;/li&gt;
&lt;li&gt;Don't be surprised if you get a negative reaction&lt;/li&gt;
&lt;li&gt;Don't let your fear of a negative reaction stop you from trying,
necessarily&lt;/li&gt;
&lt;li&gt;Do your homework, and be your own worst critic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="coredev"></category><category term="cpython"></category><category term="makingsausage"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Through the Side Channel: Timing and Implementation Attacks in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--through-the-side-channel--timing-and-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Geremy Condra</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--through-the-side-channel--timing-and-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Through the Side Channel: Timing and Implementation Attacks in Python&lt;/p&gt;
&lt;p&gt;Presented by Geremy Condra&lt;/p&gt;
&lt;p&gt;Python's dynamic nature, large standard library, and concern for beauty
over performance make it an elegant and uniquely easy to use language,
but they also cause some unique problems. In this talk we'll explore how
features ranging from dictionaries to duck typing can become security
risks, demonstrate those attacks on real Python projects, and examine
how you can protect yourself and your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Over the last decade, an increasing body of evidence has accumulated
indicating that even when a system is hardened enough to provide strong
guarantees about its high-level behavior, implementation details and
especially performance properties can still provide attackers with an
easy way in. For Python, this is especially problematic: its generally
high-level view and the emphasis placed on flexibility often mean that
it can be difficult to stop attackers from gaining a foothold, while its
comparatively low execution speed increases the efficacy of wide variety
of implementation and timing attacks.&lt;/p&gt;
&lt;p&gt;To help Pythonistas understand and cope with these problems, we've
divided this talk into two parts: in the first, we demonstrate the
attacks against a series of widely-deployed Python projects with the
goal of both improving awareness about the issue and demonstrating
common weaknesses to be avoided. The second demonstrates effective
countermeasures and alternative constructions with the goal of improving
defenders' odds of spotting and correcting these flaws in their own
code.&lt;/p&gt;
</summary><category term="hacking"></category><category term="hardening"></category><category term="pycon"></category><category term="pycon2011"></category><category term="security"></category></entry><entry><title>TUF: Secure Software Updates in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Geremy Condra</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TUF: Secure Software Updates in Python&lt;/p&gt;
&lt;p&gt;Presented by Geremy Condra&lt;/p&gt;
&lt;p&gt;From an attacker's point of view there are few entry points with as much
to offer as a vulnerable software updater, yet history tells us that
such vulnerabilities are common. In this talk we'll demonstrate a number
of attacks, explain how common approaches fail to defend against them,
and demonstrate a pure Python library (TUF) that provides both robust
protection and extreme ease of use.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Vulnerabilities in software update systems expose users to huge range of
potential security risks, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Freeze attacks,&lt;/li&gt;
&lt;li&gt;Mix-and-match attacks,&lt;/li&gt;
&lt;li&gt;Rollback attacks, and&lt;/li&gt;
&lt;li&gt;Endless data attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first part of this talk, we'll demonstrate each of these against
real- world software updaters and explain how commonly used
countermeasures fail in application. We'll then move on to the second
part of the talk, demonstrating TUF, its internals, and the mechanisms
it uses to additionally defend against key compromise. Finally, we'll
demonstrate how easy it is to integrate TUF into your application and
its lifecycle.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="security"></category><category term="tuf"></category><category term="updates"></category></entry><entry><title>Units Need Testing Too</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--units-need-testing-too.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Gary Bernhardt</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--units-need-testing-too.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Units Need Testing Too&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;Python's long history of testing has focused primarily on integration-
and system-level tests: slow-running tests executing lots of code. These
are a great start, but many of them can be transformed into unit-level
tests. True unit tests are orders of magnitude faster (about 1ms each),
providing quicker feedback and better failure localization. We'll look
at why and how to write them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has a wonderful legacy in testing: PyUnit has been in the
standard library since March, 2001, and it was already a year old by
then. We adopted browser driving quickly, and we do it at huge scale
with great test parallelization infrastructure.&lt;/p&gt;
&lt;p&gt;Big tests aren't everything, though. In the Python world, true unit
tests are somewhat rare, and even most tests written with the unittest
library are integration tests. These tests are slow to execute and don't
localize failure as well as smaller, focused tests. They leave us with
two options: either run them rarely, sacrificing feedback, or run them
often, sacrificing speed.&lt;/p&gt;
&lt;p&gt;Writing true unit tests removes that particular trade-off. When your
tests execute in a millisecond each, you can afford to run a thousand of
them every time you save a source file. This talk will discuss what unit
tests really are, why they matter, and how to write them in Python.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="pyunit"></category><category term="testing"></category><category term="unittests"></category></entry><entry><title>Useful Namespaces: Context Managers and Decorators</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Useful Namespaces: Context Managers and Decorators&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;Python has two useful conventions for &amp;quot;I mean it, but only here&amp;quot; and you
can say it with Context Managers and Decorators. Both give you the power
to define a push/pop of a resource for a set period inside a namespace,
be it a function or a level of indentation. This talk is a list of
patterns that are implemented by one or the other (including some clever
functions that are both).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decorators, formal definition.&lt;/li&gt;
&lt;li&gt;Context Managers, formal definition.&lt;/li&gt;
&lt;li&gt;Informal definition: both have the opportunity to do and then undo. -
very similar to C++ RIIA &amp;quot;Resource Acquisition Is Initialization.&amp;quot; -
Context Managers were designed to do that but decorators are
frequently just as good.&lt;/li&gt;
&lt;li&gt;Which one to use use when is all about namespaces. - Context Managers
manipulate at the block level. - Function Decorators manipulate the
function level. - Class Decorators manipulate at the class level.&lt;/li&gt;
&lt;li&gt;Recipes on writing decorators and context managers - Familiar
examples from Django and Mock.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="contextmanagers"></category><category term="decorators"></category><category term="namespaces"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Using Blender's new BPY Python API</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--using-blender--39-s-new-bpy-python-ap.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--using-blender--39-s-new-bpy-python-ap.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Blender 2.5 (a free and open source software 3d graphics suite) includes
a new BPY python API which is usable for scripting modeling, animation,
etc. Learn to use this API to speed up your workflow, create procedural
graphics, and cool new tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since 2.5, the API has become more pythonic and self-descriptive.
Blender's UI can show you the Python equivalent for nearly every user
action and includes a full datablock exploration tool. Users will be
taught how to use so they can quickly adapt to their appropriate needs
with a little Blender experience and no previous BPY experience.&lt;/p&gt;
&lt;p&gt;There will be a brief Blender overview, an introduction to the API and
how to use it, as well as / along with an overview of some of the
presenter's own tools / use cases. Some other popular 3rd party Python
tools will also be shown as an example.&lt;/p&gt;
&lt;p&gt;If there is time, a brief demo of the Blender Game Engine will also be
given, though that is a separate API.&lt;/p&gt;
</summary><category term="blender"></category><category term="bpy"></category><category term="chriswebber"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Using Coroutines to Create Efficient, High-Concurrency Web Applications</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Matt Spitz</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--using-coroutines-to-create-efficient-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Coroutines to Create Efficient, High-Concurrency Web Applications&lt;/p&gt;
&lt;p&gt;Presented by Matt Spitz&lt;/p&gt;
&lt;p&gt;Creating high-concurrency python web applications is inherently
difficult for a variety of reasons. In this talk, I'll discuss the
various iterations of application server paradigms we've used at meebo,
the advantages/disadvantages of each approach, and why we've settled on
a coroutine-based WSGI setup to handle our high-concurrency web
applications going forward.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a number of ways in which to create a web application in
python. Some examples include a straight-up CGI scripts that run anew
with each request, preforked Apache workers that each handle multiple
requests, and using an asynchronous web framework like Twisted.&lt;/p&gt;
&lt;p&gt;At meebo, we've settled on using gunicorn, a lightweight WSGI server,
which supports gevent, a coroutine-based network library for python.
Gevent monkeypatches python's system modules to make network requests
asynchronous using an event loop based on libevent. This trick allows
the developer to use a simple blocking CGI as a non-blocking web
application that can handle many concurrent requests.&lt;/p&gt;
&lt;p&gt;I'll discuss our iteration process through these approaches to building
web applications, why we ended up choosing gunicorn+gevent, the
challenges this new framework presents, and how we've dealt with them.&lt;/p&gt;
</summary><category term="coroutines"></category><category term="gevent"></category><category term="gunicorn"></category><category term="highconcurrency"></category><category term="libevent"></category><category term="pycon"></category><category term="pycon2011"></category><category term="wsgi"></category></entry><entry><title>Using Python 3 to Build a Cloud Computing Service for my Superboard II</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--using-python-3-to-build-a-cloud-compu.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--using-python-3-to-build-a-cloud-compu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python 3 to Build a Cloud Computing Service for my Superboard II&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;The OSI Superboard II was the computer on which I first learned to
program back in 1979. Python is why programming remains fun today. In
this tale of old meets new, I describe how I have used Python 3 to
create a cloud computing service for my still-working Superboard--a
problem complicated by it only having 8Kb of RAM and 300-baud cassette
tape audio ports for I/O.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python 3, what good is it? Cloud computing? Bah! In this talk, I
describe how I have used Python 3 to build a distributed cloud-computing
service for my Superboard II system. Originally built in 1978, the
Superboard is an obvious candidate for cloud computing due to its
extremely constrained memory (8Kb), slow processor (a 1Mhz 6502),
crippled I/O (300 baud over audio), and retro programming environment
(Microsoft Basic 1.0). The only question is how to do it?&lt;/p&gt;
&lt;p&gt;To answer that question, this talk consist of two main parts. In the
first part, I discuss the problem of building a communications stack
between the Superboard and a Mac using nothing but audio
line-in/line-out ports--a problem involving a tricky I/O handling,
real-time audio signal processing, and the creation of a data-link layer
communication protocol. In the second part, I discuss the creation of a
distributed cloud-computing service and related topics including
messaging systems, key-value stores, map-reduce, etc.&lt;/p&gt;
&lt;p&gt;The primary implementation language for all of this work is Python 3.
Throughout the talk, I will mention interesting Python 3 programming
idioms along with pros and cons. I'll conclude by summarizing my
experience trying to build a significant project entirely in Python 3.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="soawesome"></category><category term="superboard"></category></entry><entry><title>web2py secrets tutorial (1/2)</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--web2py-secrets-tutorial--1-2.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Massimo Di Pierro</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--web2py-secrets-tutorial--1-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;web2py secrets&lt;/p&gt;
&lt;p&gt;Presented by Massimo Di Pierro&lt;/p&gt;
&lt;p&gt;We will provide an introduction to web2py with particular focus on its
design objectives, its differences when compared to other web
frameworks, and some of the most recently added features (components,
plugins, openid/oauth integration).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Web2py is a framework for rapid web application development of secure
database-driven web applications. In this tutorial we will provide a
brief introduction to web2py, the web based IDE, its internal design,
and its internal file organization. We will explain the motivations
behind some of its most controversial design goals. We will also discuss
in some detail its Ajax capabilities by using web2py components and
plugins for modular design of rich web interfaces.&lt;/p&gt;
&lt;p&gt;This will be a very concentrated version (10%) of a course (CSC438) on
web frameworks the author teaches at DePaul University. The course has
been taught 3 times and the last time counted more than 30 students.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="web"></category><category term="web2py"></category></entry><entry><title>What would you do with an ast?</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--what-would-you-do-with-an-ast.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Matthew J Desmarais</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--what-would-you-do-with-an-ast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What would you do with an ast?&lt;/p&gt;
&lt;p&gt;Presented by Matthew J Desmarais&lt;/p&gt;
&lt;p&gt;The ast module in the Python (&amp;gt;= 2.6) standard library provides a
representation of python code in a python data structure. We'll begin
with a discussion about what an abstract syntax tree is and why it's
useful. We can then talk about what's available in the ast module, how
it works, and how you can use it. This will be a practical session built
around examples examining and modifying live ASTs.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;I would prefer to make this a 45 minute talk with examination of code
samples.&lt;/p&gt;
&lt;p&gt;Python 2.6 introduced a new module in the standard library, ast. The
first line of the ast documentation is, &amp;quot;The ast module helps Python
applications to process trees of the Python abstract syntax grammar.&amp;quot;
What this means is not obvious and many, if not most, python programmers
won't know what this means. I will begin by talking about the idea of
syntax tree and how it fits into the python execution lifecycle. I will
also talk about the contents of the ast module. I will cover the
available ast.Node subclasses and the provided helper functions,
including the NodeVisitor and NodeTransformer. I will finish by talking
about how the ast module can be used to analyze Python code and how it
can be used to generate new code.&lt;/p&gt;
&lt;p&gt;I expect the time to break down roughly like this:&lt;/p&gt;
&lt;p&gt;Introduction ( 5m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Capacitor joke&lt;/li&gt;
&lt;li&gt;What is an abstract syntax tree?&lt;/li&gt;
&lt;li&gt;How they are used by the Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The contents of the ast module (20 m)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The node subclasses and the ast ( 10m )&lt;ul&gt;
&lt;li&gt;How you get an ast.&lt;/li&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;ast.stmt vs. ast.expr&lt;/li&gt;
&lt;li&gt;peculiarities&lt;/li&gt;
&lt;li&gt;code examples&lt;ul&gt;
&lt;li&gt;elif as syntactic sugar for &amp;quot;if: else: if:&amp;quot;&lt;/li&gt;
&lt;li&gt;comparison operators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why this is useful.&lt;/li&gt;
&lt;li&gt;the ast is the &amp;quot;truth&amp;quot; of the program&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;tricky code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The ast module helpers ( 10m )&lt;ul&gt;
&lt;li&gt;visitor pattern&lt;/li&gt;
&lt;li&gt;NodeVisitor&lt;/li&gt;
&lt;li&gt;NodeTransformer&lt;/li&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What you do with an ast ( 15m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Walking an ast&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;a simple visitor to gather variables by scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating/Modifying an ast&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;rearrange imports transformer&lt;/li&gt;
&lt;li&gt;naive &amp;quot;rename all instances&amp;quot; transformer&lt;/li&gt;
&lt;li&gt;naive macro expansion transformer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conclusion ( 5m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Practical Applications&lt;ul&gt;
&lt;li&gt;existing projects&lt;/li&gt;
&lt;li&gt;visitors&lt;ul&gt;
&lt;li&gt;checkers (pylint, pyflakes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transformers&lt;ul&gt;
&lt;li&gt;refactoring tools (rope)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When is it a good idea to use ast?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="ast"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Why is Python slow and how PyPy can help?</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--why-is-python-slow-and-how-pypy-can-h.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is Python slow and how PyPy can help?&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski and Alex Gaynor&lt;/p&gt;
&lt;p&gt;PyPy is a virtual machine for Python, featuring an advanced just in time
compiler, which can deliver exceptional performance. This talk is going
to be a deep dive into what exactly makes Python such a hard language to
optimize, how PyPy is organized, and what optimizations our JIT can do
(and what it can't do) for your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will detail how a python interpreter works internally and why
some operations are costly. We'll go through several python features,
how they work, why they're slow in CPython and how we're fixing it.&lt;/p&gt;
&lt;p&gt;The list of mentioned features is not exhaustive, however we will try to
focus at least on the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dynamic language - In Python code we have no known types, like a
statically typed language. Even operations like &amp;quot;a + b&amp;quot; can do
anything, unless we know more about the code, and the types it is
operating on.&lt;/li&gt;
&lt;li&gt;Frame introspection - Frame objects need to be allocated for every
function call, and all local variables are stored on the frame, and
must be accessible from further down the call stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyPy uses a novel approach called &amp;quot;virtualizables&amp;quot; which makes it
possible to avoid frame allocation in most common cases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Object model - All user defined Python objects have a dictionary
which stores their attributes, as does every type. When Python does
an attribute lookup this requires at least two dictionary lookups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In PyPy we use an approach similar to the one used by V8 with hidden
classes (except more PyPy specific) called map dictionaries and other
optimizations.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FFI calls - Calling C from Python is costly and hard to optimize. In
PyPy we expose C APIs to Python code via ctypes. This part explains
how we can optimize ctypes calls.&lt;/li&gt;
&lt;li&gt;array module - Users of CPython's array module probably know it can
save them quite a bit of memory, however it's also slower than using
a list, due to the overhead of boxing and unboxing on every
operations. Here we will tie everything together and describe how the
array module is much faster with PyPy's JIT, combining our
optimizations to: unbox values, remove the dynamicism within traces,
and deliver great performance.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="jit"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category><category term="vm"></category></entry><entry><title>Writing Command-Line Tools using IronPython and Visual Studios</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--writing-command-line-tools-using-iron.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Noah Gift</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--writing-command-line-tools-using-iron.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn how cool it is to write command-line tools using IronPython and
Visual Studios. In this talk we cover why command-lines tools are
important for .NET shops, how to write one, and finally, how to
distribute it as a standalone .exe.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how cool it is to write command-line tools using IronPython and
Visual Studios. In this talk we cover why command-lines tools are
important for .NET shops, how to write one, and finally, how to
distribute it as a standalone .exe.&lt;/p&gt;
</summary><category term="commandline"></category><category term="ironpython"></category><category term=".net"></category><category term="pycon"></category><category term="pycon2011"></category><category term="visualstudio"></category></entry><entry><title>Writing great documentation</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--writing-great-documentation.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--writing-great-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing great documentation&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Django’s among the best documented open source projects; I'm intensely
proud of that accomplishment. If any part of Django endures, I hope
it’ll be a “documentation culture” — an ethos that values great,
well-written documentation. To that end, this talk looks at the tools,
tips, and techniques I’ve learned over the years. I hope it helps you
write great documentation, too.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk looks at tips, tools, and techniques you can use to produce
great technical documentation.&lt;/p&gt;
&lt;p&gt;It's split roughly into two parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Part 1: technique. We'll look at the structural elements that make
documentation useful: tutorials, high-level overviews, topical
guides, reference material, FAQs, and more. We'll cover some tips on
how to get documentation done, and community processes for handling
documentation in teams (open or not). We'll also talk about what I'm
calling &amp;quot;Documentation Driven Development&amp;quot; - a technique riffing off
Test Driven Development that calls for writing documentation before
code.&lt;/li&gt;
&lt;li&gt;Part 2: tools. Over the last couple of years a few fantastic tools
have sprung up that ease the technical aspects of writing
documentation. We'll talk about which tools are suitable for which
uses, and look at a handful of cool tools including
&lt;a class="reference external" href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;,
&lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;Epydoc&lt;/a&gt;, and
&lt;a class="reference external" href="http://fitzgen.github.com/pycco/"&gt;http://fitzgen.github.com/pycco/&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is mostly targeted towards those documenting libraries or
frameworks intended for use by other developers, but much of it probably
applies to any sort of technical documentation.&lt;/p&gt;
</summary><category term="docs"></category><category term="documentation"></category><category term="epydoc"></category><category term="faqs"></category><category term="pycco"></category><category term="pycon"></category><category term="pycon2011"></category><category term="sphinx"></category></entry><entry><title>ZODB: A Python Persistence System</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--zodb--a-python-persistence-system.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Chris McDonough</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--zodb--a-python-persistence-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ZODB: A Python Persistence System&lt;/p&gt;
&lt;p&gt;Presented by Chris McDonough&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zodb.org/"&gt;ZODB&lt;/a&gt; is a transactional persistence system
written entirely in Python. This talk will serve as an introduction to
using the ZODB in a Python application.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;This talk will provide a high-level overview of ZODB useful to a novice
or intermediate Python programmer. The talk will cover the following
topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What Is ZODB?&lt;/li&gt;
&lt;li&gt;Brief history&lt;/li&gt;
&lt;li&gt;ZODB vs. relational databases&lt;/li&gt;
&lt;li&gt;ZODB vs. NoSQL databases&lt;/li&gt;
&lt;li&gt;ZODB vs. pickle&lt;/li&gt;
&lt;li&gt;Using ZODB&lt;/li&gt;
&lt;li&gt;Creating a Persistent Object&lt;/li&gt;
&lt;li&gt;Storing a Persistent Object&lt;/li&gt;
&lt;li&gt;Retrieving a Persistent Object&lt;/li&gt;
&lt;li&gt;Modifying a Persistent Object&lt;/li&gt;
&lt;li&gt;Saving Changes&lt;/li&gt;
&lt;li&gt;Folders&lt;/li&gt;
&lt;li&gt;Aspects&lt;/li&gt;
&lt;li&gt;Pluggable storages&lt;/li&gt;
&lt;li&gt;Scaling across multiple clients&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Indexing and Searching&lt;/li&gt;
&lt;li&gt;repoze.catalog&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the talk, an attendee should have a basic understanding of
how to create an application which depends on ZODB persistence.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="zodb"></category></entry><entry><title>Python 3: the next generation is here already</title><link href="https://pyvideo.org/pycon-us-2011/python-3-the-next-generation-is-here-already.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/python-3-the-next-generation-is-here-already.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: the next generation is here already&lt;/p&gt;
&lt;p&gt;Presented by wesley chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6/2.7, and other transition
tools.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python is currently at a crossroads: Python 2 has taken it from a quiet
word- of-mouth language to primetime, with many companies around the
world using it and an ever-increasing global marketshare of the
programming world. But now comes Python 3, the first version of the
language that is not backwards compatible with previous releases.&lt;/p&gt;
&lt;p&gt;What does this mean? Are all my Python programs going to break? Will I
have to rewrite everything? How much time do I have? When is Python 2
going to be EOL'd? Is the language undergoing a complete rewrite and
will I even recognize it? What are the changes between Python 2 and 3
anyway? Also, the next generation is already here, as Python 3 is over
two years old now. What has been ported so far, and what is its current
status? Are migration plans or transition tools available? If I want to
start learning Python, should I do Python 2 or Python 3? Are all Python
2 books obsolete?&lt;/p&gt;
&lt;p&gt;We will attempt to answer all of these questions and more. Join us!&lt;/p&gt;
&lt;p&gt;OUTLINE/TOPICS&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2 vs. Python 3&lt;/li&gt;
&lt;li&gt;Introduction to Python 3&lt;/li&gt;
&lt;li&gt;Backwards Compatibility&lt;/li&gt;
&lt;li&gt;Generational Changes&lt;/li&gt;
&lt;li&gt;Key Differences&lt;/li&gt;
&lt;li&gt;Role of Remaining Python 2.x releases&lt;/li&gt;
&lt;li&gt;Transition &amp;amp; Migration Plans &amp;amp; Tools&lt;/li&gt;
&lt;li&gt;Futures&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="2to3"></category><category term="pycon"></category><category term="pycon2011"></category><category term="python2"></category><category term="python3"></category></entry><entry><title>Running Django Apps on Google App Engine</title><link href="https://pyvideo.org/pycon-us-2011/running-django-apps-on-google-app-engine.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/running-django-apps-on-google-app-engine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Running Django Apps on Google App Engine&lt;/p&gt;
&lt;p&gt;Presented by wesley chun&lt;/p&gt;
&lt;p&gt;In the past, Django users couldn't run apps unmodified on Google App
Engine. Some tools helped with integration but required you to change
your data models. Django-nonrel removes this requirement letting you run
native Django apps on App Engine with only config changes if you bear in
mind its restrictions like no JOINs. In this talk, we'll discuss
Django-nonrel &amp;amp; porting App Engine apps to Django.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Previously, Django users could not get their apps to run unmodified on
Google App Engine, the cloud application-hosting platform. Older tools
like &amp;quot;the Helper&amp;quot; and &amp;quot;the Patch&amp;quot; required a change to the data models
as well as perhaps integrating additional tools into the application
source tree. The creators of the Patch realized how cumbersome this is
and created a replacement for all of these older tools.&lt;/p&gt;
&lt;p&gt;Django-nonrel allows users to run pure Django apps on App Engine with
only minor configuration changes. It basically enables Django's ORM to
operate on top of non-relational databases (in addition to preserving
its ability to support standard relational DBs), one of which is Google
App Engine's Datastore. (MongoDB is another.)&lt;/p&gt;
&lt;p&gt;What this means that current Django users can now use their existing
knowledge to write apps for App Engine as long as they keep App Engine
restrictions in mind, e.g., no JOINs. Projects written in this manner
will work without any modifications other than changing the
configuration settings. On the other side, App Engine developers now
have an alternative to the '&amp;quot;webapp&amp;quot; framework that comes with its SDK.
You can now leverage the power of a full web framework like Django and
still enjoy the flexibility and scalability of App Engine. In this talk,
we'll discuss Django-nonrel, and how to port App Engine apps from webapp
to pure Django to run on App Engine using Django-nonrel.&lt;/p&gt;
</summary><category term="django-nonrel"></category><category term="gae"></category><category term="googleappengine"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>