<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stephen-enright-ward.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-07T00:00:00+00:00</updated><entry><title>Solving very simple substitution ciphers algorithmically</title><link href="https://pyvideo.org/pydata-berlin-2018/solving-very-simple-substitution-ciphers-algorithmically.html" rel="alternate"></link><published>2018-07-07T00:00:00+00:00</published><updated>2018-07-07T00:00:00+00:00</updated><author><name>Stephen Enright-Ward</name></author><id>tag:pyvideo.org,2018-07-07:pydata-berlin-2018/solving-very-simple-substitution-ciphers-algorithmically.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A historical text may now be unreadable, because its language is
unknown, or its script forgotten (or both), or because it was
deliberately enciphered. Deciphering needs two steps: Identify the
language, then map the unknown script to a familiar one. Iâ€™ll present an
algorithm to solve a cartoon version of this problem, where the language
is known, and the cipher is alphabet rearrangement.&lt;/p&gt;
</summary></entry></feed>