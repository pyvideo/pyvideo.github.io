<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jacob Tomlinson</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jacob-tomlinson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-09-24T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Autoscaling distributed compute with Dask, Kubernetes and AWS</title><link href="https://pyvideo.org/euroscipy-2017/autoscaling-distributed-compute-with-dask-kubernetes-and-aws.html" rel="alternate"></link><published>2017-08-31T00:00:00+00:00</published><updated>2017-08-31T00:00:00+00:00</updated><author><name>Jacob Tomlinson</name></author><id>tag:pyvideo.org,2017-08-31:/euroscipy-2017/autoscaling-distributed-compute-with-dask-kubernetes-and-aws.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presenter: Jacob Tomlinson &amp;amp; Alex Hilson&lt;/p&gt;
</content><category term="EuroSciPy 2017"></category></entry><entry><title>Deploying multi-GPU workloads on Kubernetes in Python</title><link href="https://pyvideo.org/euroscipy-2023/deploying-multi-gpu-workloads-on-kubernetes-in-python.html" rel="alternate"></link><published>2023-08-14T00:00:00+00:00</published><updated>2023-08-14T00:00:00+00:00</updated><author><name>Jacob Tomlinson</name></author><id>tag:pyvideo.org,2023-08-14:/euroscipy-2023/deploying-multi-gpu-workloads-on-kubernetes-in-python.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By using Dask to scale out RAPIDS workloads on Kubernetes you can accelerate your workloads across many GPUs on many machines. In this talk, we will discuss how to install and configure Dask on your Kubernetes cluster and use it to run accelerated GPU workloads on your cluster.&lt;/p&gt;
</content><category term="EuroSciPy 2023"></category></entry><entry><title>Posters Spotlight</title><link href="https://pyvideo.org/euroscipy-2023/posters-spotlight.html" rel="alternate"></link><published>2023-08-14T00:00:00+00:00</published><updated>2023-08-14T00:00:00+00:00</updated><author><name>Piotr Płoński</name></author><id>tag:pyvideo.org,2023-08-14:/euroscipy-2023/posters-spotlight.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Posters Spotlight from the EuroSciPy 2023 conference held in Basel.
Abstract and link to the posters: &lt;a class="reference external" href="https://www.euroscipy.org/2023/poster_session.html"&gt;https://www.euroscipy.org/2023/poster_session.html&lt;/a&gt;&lt;/p&gt;
</content><category term="EuroSciPy 2023"></category></entry><entry><title>When to rebuild things that already exist</title><link href="https://pyvideo.org/pycon-uk-2023/when-to-rebuild-things-that-already-exist.html" rel="alternate"></link><published>2023-09-24T00:00:00+00:00</published><updated>2023-09-24T00:00:00+00:00</updated><author><name>Jacob Tomlinson</name></author><id>tag:pyvideo.org,2023-09-24:/pycon-uk-2023/when-to-rebuild-things-that-already-exist.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This year I built a library that already exists. The existing solutions didn’t quite meet my needs, I wanted something that ticked all of my boxes. When thinking about building something new people referred me to xkcd #927. But I did it anyway.&lt;/p&gt;
&lt;p&gt;For the last 6 years …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This year I built a library that already exists. The existing solutions didn’t quite meet my needs, I wanted something that ticked all of my boxes. When thinking about building something new people referred me to xkcd #927. But I did it anyway.&lt;/p&gt;
&lt;p&gt;For the last 6 years I’ve maintained dask-kubernetes, a Python library for deploying Dask clusters on Kubernetes. In that time I’ve tried nearly every Python Kubernetes client library on PyPI. In fact dask-kubernetes today uses over five different libraries and tools to interact with the Kubernetes API. Each one has different strengths and weaknesses, features and bugs. To satisfy all of the needs of Dask Kubernetes there is no one library that can do it alone.&lt;/p&gt;
&lt;p&gt;Should I continue to build wrappers and shims in dask-kubernetes to homogenize the various dependencies? Should I contribute to an existing one to fill in the blanks? Or can I build one library to rule them all?&lt;/p&gt;
&lt;p&gt;Earlier this year I decided to build exactly the library I needed. Not a perfect universal library to supersede everything, not a wrapper for everything that exists. Just the library I need to solve my problems, to reduce complexity in my projects and to help me learn the things I need to know to maintain these projects into the future.&lt;/p&gt;
&lt;p&gt;In this talk I will dig into my perspective on when to wrap a dependency, when to contribute to a dependency and when to build a new dependency from scratch.&lt;/p&gt;
</content><category term="PyCon UK 2023"></category></entry><entry><title>Dask Tutorial: The PyData Ecosystem</title><link href="https://pyvideo.org/scipy-2022/dask-tutorial-the-pydata-ecosystem.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Natalia Clementi</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/dask-tutorial-the-pydata-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a flexible library for parallel computing in Python. Dask provides high-level interfaces to extend the PyData ecosystem to larger-than-memory or distributed environments, as well as lower-level interfaces to customize workflows. This tutorial will be a data-oriented, hands-on, workshop that will show new users how to scale NumPy …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a flexible library for parallel computing in Python. Dask provides high-level interfaces to extend the PyData ecosystem to larger-than-memory or distributed environments, as well as lower-level interfaces to customize workflows. This tutorial will be a data-oriented, hands-on, workshop that will show new users how to scale NumPy and pandas via the Dask Array and Dask DataFrame collections, and how to use the interactive diagnostic tools to understand their computational performance. It will also cover the low-level Dask Delayed and Futures interfaces, and introduce cluster deployments. No previous Dask experience is required, though knowledge of Python basics and familiarity with NumPy and pandas is preferred.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/dask/dask-tutorial"&gt;https://github.com/dask/dask-tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="SciPy 2022"></category></entry><entry><title>GPU Development with Python 101</title><link href="https://pyvideo.org/scipy-2022/gpu-development-with-python-101.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Jacob Tomlinson</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/gpu-development-with-python-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing GPU code in Python is easier today than ever, and in this tutorial, I will share what I’ve learned and how you can get started with accelerating your code. You don’t need to learn C++ and you don’t need any special tooling. All you need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing GPU code in Python is easier today than ever, and in this tutorial, I will share what I’ve learned and how you can get started with accelerating your code. You don’t need to learn C++ and you don’t need any special tooling. All you need is an NVIDIA GPU, Python and a few libraries (and we’ll provide that for the tutorial).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jacobtomlinson/gpu-python-tutorial"&gt;https://github.com/jacobtomlinson/gpu-python-tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="SciPy 2022"></category></entry></feed>