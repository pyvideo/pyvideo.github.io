<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Alexander Hultner</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alexander-hultner.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-12-04T00:00:00+00:00</updated><subtitle></subtitle><entry><title>API-schema-based testing with schemathesis</title><link href="https://pyvideo.org/europython-2020/api-schema-based-testing-with-schemathesis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/api-schema-based-testing-with-schemathesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time.&lt;/p&gt;
&lt;p&gt;I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo.&lt;/p&gt;
&lt;p&gt;I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools.&lt;/p&gt;
&lt;p&gt;By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today.&lt;/p&gt;
&lt;p&gt;The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="RESTful"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Automatically generate test-cases – Schema-based API testing</title><link href="https://pyvideo.org/flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/automatically-generate-test-cases-schema-based-api-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster. The talk will focus on a subset of the field of property-based testing where we focus on testing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API’s using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster. The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time. I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I’m a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo. I will also compare it with its predecessor “swagger-conformance”, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about “QuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs” (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that’s part of the inspiration for these tools. By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today. The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="flask context"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>Workshop: Deep Dive into the Wheels of Packaging Using a Flask App</title><link href="https://pyvideo.org/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html" rel="alternate"></link><published>2021-12-04T00:00:00+00:00</published><updated>2021-12-04T00:00:00+00:00</updated><author><name>Alexander Hultner</name></author><id>tag:pyvideo.org,2021-12-04:/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexander has contributed much Flask content over the years and is a consultant at Hultnér Technologies&lt;/p&gt;
</content><category term="FlaskCon 2021"></category><category term="flask"></category><category term="packaging"></category><category term="workshop"></category></entry><entry><title>Test Fast, Fix More - Property based testing with Hypothesis</title><link href="https://pyvideo.org/pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html" rel="alternate"></link><published>2019-11-01T00:00:00+00:00</published><updated>2019-11-01T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2019-11-01:/pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Fast, Fix More – Property based in Python testing with Hypothesis Did you ever miss that corner case bug? Maybe it was a negative integer, strange timezone conversion behaviour, off by one error or something entirely else. These subtle bugs are often hard to catch and are easily missed …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Fast, Fix More – Property based in Python testing with Hypothesis Did you ever miss that corner case bug? Maybe it was a negative integer, strange timezone conversion behaviour, off by one error or something entirely else. These subtle bugs are often hard to catch and are easily missed in test cases. You like me have probably ran into plenty of code utilising only happy path testing, only to later discover subtle bugs which are easily fixed once pointed out. This is where property based testing comes into the picture.  In this talk I will focus on a wonderful Python library called Hypothesis but the concepts apply to other languages as well. Hypethesis is based on the same concept as the famous QuickCheck library for Haskell, which in turn have been ported a large number of languages. Hypothesis uses a wide range of input to find edge cases that you could otherwise easily miss, once it finds these cases it narrows down the input to the minimal breaking example to provide failures which are easier to understand.&lt;/p&gt;
</content><category term="PyCon SE 2019"></category><category term="hypothesis"></category><category term="testing"></category><category term="pytest"></category><category term="property based testing"></category></entry><entry><title>Intro to Pydantic, run-time type checking for your dataclasses</title><link href="https://pyvideo.org/pycon-us-2021/intro-to-pydantic-run-time-type-checking-for-your-dataclasses.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/intro-to-pydantic-run-time-type-checking-for-your-dataclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want static type checking in run time? Want to use standard python type annotations? Want compatibility with standard python dataclasses? Then it sounds like pydantic is something for you. Pydantic offers a pythonic way to validate your user data using run-time enforced standard type-annotations.&lt;/p&gt;
&lt;p&gt;This talk focuses on how …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want static type checking in run time? Want to use standard python type annotations? Want compatibility with standard python dataclasses? Then it sounds like pydantic is something for you. Pydantic offers a pythonic way to validate your user data using run-time enforced standard type-annotations.&lt;/p&gt;
&lt;p&gt;This talk focuses on how Pydantic can be used with web APIs to simplify many parts regarding user input validation. I’ve previously back in early 2018 built a similar solution to Pydantic based upon standard dataclasses for a large B2B SaaS application built with flask. When I left that project I was briefly considered rebuilding it as open-source but while doing my research I discovered Pydantic’s powers which I had put in my keep tabs on the list when it was in a much earlier stage, but at this point, it had evolved to a polished library and a perfect companion for JSON-based APIs.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://slides.com/hultner/pycon-us-2021"&gt;https://slides.com/hultner/pycon-us-2021&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Data Classes, in Python 3.6 and beyond</title><link href="https://pyvideo.org/pycon-se-2018/data-classes-in-python-36-and-beyond.html" rel="alternate"></link><published>2018-12-12T00:00:00+00:00</published><updated>2018-12-12T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2018-12-12:/pycon-se-2018/data-classes-in-python-36-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.7 is here and the &amp;#64;dataclass-decorator is a major new feature simplifying class-creation. In this talk, we will learn to use the power of data classes to make our codebases cleaner and leaner in a pythonic way.
We will also learn how to use the backport in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.7 is here and the &amp;#64;dataclass-decorator is a major new feature simplifying class-creation. In this talk, we will learn to use the power of data classes to make our codebases cleaner and leaner in a pythonic way.
We will also learn how to use the backport in Python 3.6 codebases before upgrading.&lt;/p&gt;
</content><category term="PyCon SE 2018"></category><category term="dataclasses"></category><category term="python3.7"></category><category term="python3.8"></category></entry><entry><title>Intro to Pydantic, Run-Time Type Checking For Your Dataclasses</title><link href="https://pyvideo.org/python-web-conf-2021/intro-to-pydantic-run-time-type-checking-for-your-dataclasses.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Alexander Hultnér</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/intro-to-pydantic-run-time-type-checking-for-your-dataclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Intro to Pydantic, Run-Time Type Checking For Your Dataclasses&amp;quot; by: Alexander Hultnér&lt;/p&gt;
&lt;p&gt;Want static type checking in run time? Want to use standard python type annotations? Want compatibility with standard python dataclasses? Then it sounds like pydantic is something for you. Pydantic offers a pythonic way to validate your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Intro to Pydantic, Run-Time Type Checking For Your Dataclasses&amp;quot; by: Alexander Hultnér&lt;/p&gt;
&lt;p&gt;Want static type checking in run time? Want to use standard python type annotations? Want compatibility with standard python dataclasses? Then it sounds like pydantic is something for you. Pydantic offers a pythonic way to validate your user data using run-time enforced standard type-annotations.&lt;/p&gt;
&lt;p&gt;This talk focuses on how Pydantic can be used with web APIs to simplify many parts regarding user input validation. I’ve previously back in early 2018 built a similar solution to Pydantic based upon standard dataclasses for a large B2B SaaS application built with flask. When I left that project I was briefly considered rebuilding it as open source but while doing my research I discovered Pydantic’s powers which I had put in my keep tabs on list when it was in an much earlier stage, but at this point it had evolved to a really polished library and a perfect companion for JSON-based APIs.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry></feed>