<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Pradeep Kumar Srinivasan</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_pradeep-kumar-srinivasan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-22T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python Types for Fun and Profit</title><link href="https://pyvideo.org/pycon-us-2022/python-types-for-fun-and-profit.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pradeep Kumar Srinivasan</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-types-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers now use type annotations to catch and fix bugs early in the coding process. This tutorial will introduce you to type annotations in Python. We’ll cover basic ideas about how types work in a dynamic language like Python, and where explicit annotations can provide value …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers now use type annotations to catch and fix bugs early in the coding process. This tutorial will introduce you to type annotations in Python. We’ll cover basic ideas about how types work in a dynamic language like Python, and where explicit annotations can provide value. We’ll then explore features of the type system in more depth, and demonstrate how they can be used to precisely yet flexibly express a huge range of programming patterns.&lt;/p&gt;
&lt;p&gt;Throughout the tutorial, you will have the chance to get your hands dirty by learning how to add types to small code snippets as well as to an example GitHub project, and run a type checker to see errors as you code. You’ll get to practice and play around with each concept as we discuss it, and walk away with concrete experience adding types to and catching bugs in real code.&lt;/p&gt;
&lt;p&gt;A laptop with Python installed is required along with internet access.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Securing Code with the Python Type System</title><link href="https://pyvideo.org/pycon-us-2022/securing-code-with-the-python-type-system.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Graham Bleaney</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/securing-code-with-the-python-type-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn’t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll see how Python types allow you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn’t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll see how Python types allow you to improve your project's security incrementally. First, we’ll show how simple type annotations by themselves can prevent security-impacting logic errors. Second, we'll see how you can prevent injection vulnerabilities such as SQL injection using a special type in your APIs (PEP 675). Next, we demonstrate how to leverage runtime type validation to securely deal with user-controlled data (such as HTTP requests). Finally, we show how types naturally enable powerful typing-based tools like Pysa and CodeQL to perform static taint flow analysis and catch complex vulnerabilities that span multiple functions. No security tool is a panacea, however, so we’ll also show you where typing and the tools that rely on it can fail.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Typing Summit</title><link href="https://pyvideo.org/pycon-us-2022/typing-summit.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>David Foster</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/typing-summit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Schedule of presentations:&lt;/p&gt;
&lt;p&gt;0:00 - “New typing features in Python 3.10 and 3.11”, David Foster&lt;/p&gt;
&lt;p&gt;17:51 - “Typing of Tensor Shapes and Type Arithmetic”, Alfonso Castaño&lt;/p&gt;
&lt;p&gt;39:15 - “Too small for a PEP: minor new typing features in Python 3.11”, Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;1:00:43 - Extending …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Schedule of presentations:&lt;/p&gt;
&lt;p&gt;0:00 - “New typing features in Python 3.10 and 3.11”, David Foster&lt;/p&gt;
&lt;p&gt;17:51 - “Typing of Tensor Shapes and Type Arithmetic”, Alfonso Castaño&lt;/p&gt;
&lt;p&gt;39:15 - “Too small for a PEP: minor new typing features in Python 3.11”, Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;1:00:43 - Extending PEP 647: User-Defined Type Guards”, Rebecca Chen&lt;/p&gt;
&lt;p&gt;1:19:07 - “The future of TypedDict&amp;quot; and &amp;quot;Runtime uses for type annotations: A survey of tools”, David Foster&lt;/p&gt;
&lt;p&gt;1:50:30 - “Runtime Annotations: PEP 563 &amp;amp; 649 Overview”, Carl Meyer&lt;/p&gt;
&lt;p&gt;2:21:05 - “Beyond Subtyping”, Kevin Millikin&lt;/p&gt;
&lt;p&gt;2:50:44 - “Panel: Typing-sig and Python Core Dev”, Guido van Rossum, Pablo Galindo Salgado, Thomas Wouters, Jelle Zijlstra, Pradeep Kumar Srinivasan, Matthew Rahtz&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Catching Tensor Shape Errors without Running Your Code</title><link href="https://pyvideo.org/pycon-us-2023/catching-tensor-shape-errors-without-running-your-code.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Pradeep Kumar Srinivasan</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/catching-tensor-shape-errors-without-running-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML developers are often slowed down by errors because of long iteration
times and difficulty in debugging ML code. &lt;em&gt;Tensor shape mismatches&lt;/em&gt; are
some of the most common errors for both new and experienced ML
developers, occurring when an operation is fed a multi-dimensional array
(tensor) with the wrong …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML developers are often slowed down by errors because of long iteration
times and difficulty in debugging ML code. &lt;em&gt;Tensor shape mismatches&lt;/em&gt; are
some of the most common errors for both new and experienced ML
developers, occurring when an operation is fed a multi-dimensional array
(tensor) with the wrong dimensions (shape).&lt;/p&gt;
&lt;p&gt;In this talk, we will show that it is possible to catch Tensor shape
mismatches without running your code by (a) representing the symbolic
shape of a tensor (e.g., H x W x B) with explicit type annotations,
called &lt;em&gt;shape types&lt;/em&gt;, and (b) using a type checker to catch mismatches.
We will also show how shape types can help us understand code faster by
allowing us to see the shape of a tensor variable right in the IDE.
Finally, we will describe how shape types can be adopted gradually in an
existing ML project, talk about support for features such as
broadcasting (in NumPy, PyTorch, etc.), and walk through the limitations
of this new concept of shape types.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry></feed>