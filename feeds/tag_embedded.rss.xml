<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate><item><title>Introduzione a Zerynth: Python per Microcontrollori e Applicazioni IoT</title><link>https://pyvideo.org/pycon-italia-2019/introduzione-a-zerynth-python-per-microcontrollori-e-applicazioni-iot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Durante il talk verrà presentato Zerynth
(&lt;a class="reference external" href="https://www.zerynth.com/"&gt;www.zerynth.com&lt;/a&gt;), un software per la
programmazione di &lt;strong&gt;microcontrollori&lt;/strong&gt; in &lt;strong&gt;Python&lt;/strong&gt; e la realizzazione
di applicazioni &lt;strong&gt;IoT&lt;/strong&gt; e per l’ &lt;strong&gt;Industria 4.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I principali argomenti trattati saranno:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Perchè utilizzare Zerynth (e quindi Python) per programmare
dispositivi IoT.&lt;/li&gt;
&lt;li&gt;Differenza tra Zerynth e il Python tradizionale.&lt;/li&gt;
&lt;li&gt;Differenza tra Zerynth ed altre piattaforme di programmazione
&lt;strong&gt;“embedded”&lt;/strong&gt; come &lt;strong&gt;Raspberry Pi&lt;/strong&gt; , &lt;strong&gt;Micropython&lt;/strong&gt; e &lt;strong&gt;Arduino&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Panoramica delle schede elettroniche supportate e dei servizi
&lt;strong&gt;Cloud&lt;/strong&gt; compatibili. In particolare verrà presentata la board
&lt;a class="reference external" href="http://4zerobox.com/"&gt;4zerobox&lt;/a&gt;, una delle schede elettroniche
ufficialmente supportate da Zerynth, mostrandone le caratteristiche
principali e le applicazioni in &lt;strong&gt;campo industriale&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Target ideale&lt;/strong&gt; : sviluppatori Python, professionisti dell’IoT,
designers, studenti e insegnanti, makers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Per approfondire&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La suite di sviluppo Zerynth è composta da:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Zerynth Studio&lt;/strong&gt; , un IDE professionale per la programmazione in
Python su schede elettroniche a microcontrollore. Zerynth Studio è
free e cross-platform. Scaricabile da qui:
&lt;a class="reference external" href="https://www.zerynth.com/zerynth-studio/"&gt;https://www.zerynth.com/zerynth-studio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zerynth Virtual Machine&lt;/strong&gt; , un sistema operativo real-time
multithreaded che fornisce una reale indipendenza dall’hardware e che
permette il riutilizzo del codice su qualsiasi architettura MCU.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zerynth App&lt;/strong&gt; , una App generica per smartphone con cui
visualizzare i dati e/o controllare i dispositivi programmati con
Zerynth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1488"&gt;https://python.it/feedback-1488&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 09:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luigi Francesco Cerfeda</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/introduzione-a-zerynth-python-per-microcontrollori-e-applicazioni-iot.html</guid><category>micropython</category><category>iot</category><category>embedded</category><category>industry applications</category><category>microcontroller</category><category>aws</category><category>InternetOfThings</category><category>InternetDelleCose</category><category>industry4.0</category><category>google-cloud</category></item><item><title>Introduzione a Zerynth: Python per Microcontrollori e Applicazioni IoT</title><link>https://pyvideo.org/pycon-italia-2018/introduzione-a-zerynth-python-per-microcontrollori-e-applicazioni-iot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Durante il talk verrà presentato Zerynth
(&lt;a class="reference external" href="https://www.zerynth.com/"&gt;www.zerynth.com&lt;/a&gt;), un software per la
programmazione di &lt;strong&gt;microcontrollori&lt;/strong&gt; in &lt;strong&gt;Python&lt;/strong&gt; e la realizzazione
di applicazioni &lt;strong&gt;IoT&lt;/strong&gt; e per l’ &lt;strong&gt;Industria 4.0&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I principali argomenti trattati saranno:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Perchè utilizzare Zerynth (e quindi Python) per programmare
dispositivi IoT.&lt;/li&gt;
&lt;li&gt;Differenza tra Zerynth e il Python tradizionale.&lt;/li&gt;
&lt;li&gt;Differenza tra Zerynth ed altre piattaforme di programmazione
&lt;strong&gt;“embedded”&lt;/strong&gt; come &lt;strong&gt;Raspberry Pi&lt;/strong&gt; , &lt;strong&gt;Micropython&lt;/strong&gt; e &lt;strong&gt;Arduino&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Panoramica delle schede elettroniche supportate e dei servizi
&lt;strong&gt;Cloud&lt;/strong&gt; compatibili. In particolare verrà presentata la board
&lt;a class="reference external" href="http://4zerobox.com/"&gt;4zerobox&lt;/a&gt;, una delle schede elettroniche
ufficialmente supportate da Zerynth, mostrandone le caratteristiche
principali e le applicazioni in &lt;strong&gt;campo industriale&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Target ideale&lt;/strong&gt; : sviluppatori Python, professionisti dell’IoT,
designers, studenti e insegnanti, makers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Per approfondire&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La suite di sviluppo Zerynth è composta da:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Zerynth Studio&lt;/strong&gt; , un IDE professionale per la programmazione in
Python su schede elettroniche a microcontrollore. Zerynth Studio è
free e cross-platform. Scaricabile da qui:
&lt;a class="reference external" href="https://www.zerynth.com/zerynth-studio/"&gt;https://www.zerynth.com/zerynth-studio/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zerynth Virtual Machine&lt;/strong&gt; , un sistema operativo real-time
multithreaded che fornisce una reale indipendenza dall’hardware e che
permette il riutilizzo del codice su qualsiasi architettura MCU.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zerynth App&lt;/strong&gt; , una App generica per smartphone con cui
visualizzare i dati e/o controllare i dispositivi programmati con
Zerynth.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 15:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luigi Francesco Cerfeda</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/introduzione-a-zerynth-python-per-microcontrollori-e-applicazioni-iot.html</guid><category>micropython</category><category>iot</category><category>embedded</category><category>industry applications</category><category>microcontroller</category><category>aws</category><category>InternetOfThings</category><category>InternetDelleCose</category><category>industry4.0</category><category>google-cloud</category></item><item><title>Combining Embedded and Interactive Python in a Debugger: A Case Study</title><link>https://pyvideo.org/europython-2011/combining-embedded-and-interactive-python-in-a-de.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Caroline Tice - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;LLDB is an open source compiler currently under development. LLDB
incorporates Python in several different ways: From the command line,
one can drop into an interactive Python script interpreter, entering
normal Python interactive commands and having them interpreted and
executed. In addition, the LLDB debugger has a programming API that
allows users to call actual debugger functions and access real debugger
objects. This API is run through SWIG and converted into a Python module
that gets automatically imported into the interactive interpreter inside
LLDB. The upshot of this is that, in the Python mode, users can call the
API functions as if they were regular Python functions. This is turn
means that users can do things like hit a breakpoint, call the
appropriate API functions to get the actual current frame object, check
to see if the caller function several frames up the stack is a
particular function, and if so, perform some other interesting action.
LLDB also allows for breakpoint commands to be written in Python (which
therefore allows them to call the API functions), as well as having a
command that interprets and executes a single line of Python.&lt;/p&gt;
&lt;p&gt;Because the API and all of the debugger functionality is available in a
Python module, it is also possible to write a debugger front end
completely in Python and have it import the LLDB module and call the
LLDB API functions (which calls into the LLDB shared library), to create
a new debugger front end. Our test suite takes advantage of this to run
tests on the LLDB library without having to start up an interactive LLDB
debubgger session.&lt;/p&gt;
&lt;p&gt;There were many interesting problems encountered and overcome in getting
all of this to work. LLDB combines both interactive Python and embedded
Python. There were some interesting things worked out so that a single
Python environment dictionary is used for the entire debugger session: A
user can pop into and out of the interactive interpreter and have access
at any time to anything defined in any previous visit to the interactive
interpreter (within the same debug session); breakpoint commands have
access to everything defined in the interactive session; so do embedded
script commands. It gets even more complicated, because LLDB can have
multiple debugger sessions alive at once, and each debugger session has
its own Python interpreter with its own dictionary and must not be
allowed to interfere with another session's state. In this talk I will
discuss how we implemented many of these features in LLDB, pointing out
some of the more interesting problems we encountered and how we overcame
them, and demonstrate it all working in LLDB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caroline Tice</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/combining-embedded-and-interactive-python-in-a-de.html</guid><category>api</category><category>embedded</category></item><item><title>The NCSS Challenge: teaching programming via automated testing</title><link>https://pyvideo.org/pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The NCSS Challenge (&lt;a class="reference external" href="http://challenge.ncss.edu.au/"&gt;http://challenge.ncss.edu.au/&lt;/a&gt;) is an online
programming competition for Australian high school students. There are
four different courses being run during 2011: Introductory Python,
Intermediate Python, Advanced Python, and Embedded Systems (using the
Arduino). In 2010 we had over 1700 students participate in the
Challenge. There are a number of interesting technical challenges which
had to be overcome in order to facilitate such a system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Dawborn</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</guid><category>embedded</category><category>teaching</category><category>testing</category></item><item><title>How Are Large Applications Embedding Python? (#6)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-are-large-applications-embedding-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Are Large Applications Embedding Python?&lt;/p&gt;
&lt;p&gt;Presented by Peter Shinners&lt;/p&gt;
&lt;p&gt;An examination of the ways Python is being embedded and deployed in the
large applications used for computer graphics; like Renderman, Maya,
Houdini, and Nuke.&lt;/p&gt;
&lt;p&gt;This session is for those interested in the popular techniques of
embedding the Python interpreter. The survey will determine the best
practices for embedding Python at the core of a large application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Shinners</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-are-large-applications-embedding-.html</guid><category>deploying</category><category>embedded</category><category>pycon</category><category>pycon2010</category></item><item><title>Plenary: Saturday Evening Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - Introduction&lt;/p&gt;
&lt;p&gt;(00:30) Guido van Rossum - PSF community service awards&lt;/p&gt;
&lt;p&gt;(02:42) Ka-Ping Yee - Using scrape.py to test your web apps&lt;/p&gt;
&lt;p&gt;(07:35) Ayman Hourieh - Python debugging techniques&lt;/p&gt;
&lt;p&gt;(12:28) Robin Mills - Geo-tagging and Phatch&lt;/p&gt;
&lt;p&gt;(17:30) Allen Short - Big brother's design rules&lt;/p&gt;
&lt;p&gt;(21:25) David Goodger - PyCon swag&lt;/p&gt;
&lt;p&gt;(25:00) David Ewing - Python in tiny embedded systems for the Smart Grid
and beyond&lt;/p&gt;
&lt;p&gt;(30:15) Dmitry Jemerov - Introducing PyCharm&lt;/p&gt;
&lt;p&gt;(33:50) Dirkjan Ochtman - PEP 385: hg conversion&lt;/p&gt;
&lt;p&gt;(37:30) Jesse Noller - Python: Hell Yeah.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html</guid><category>lightning talks</category><category>debugging</category><category>embedded</category><category>hg</category><category>phatch</category><category>pycharm</category><category>pycon</category><category>pycon2010</category><category>scrape.py</category></item><item><title>Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster,
and more Pythonicly&lt;/p&gt;
&lt;p&gt;Presented by Jason Huggins&lt;/p&gt;
&lt;p&gt;Selenium is a popular web application testing tool for acceptance
testing dynamic web applications. Selenium 2.0 has a different
architecture that makes it leaner, meaner, and more pythonic -- for
testing desktop &lt;em&gt;and&lt;/em&gt; mobile web (iPhone/Android) apps. This talk will
go into detail on how Selenium 2 works. If you like testing and Python,
you'll enjoy what's cooking in Selenium 2.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Selenium was originally created by Jason Huggins and his team at
ThoughtWorks in 2004 as a tool for cross-browser acceptance testing of
dynamic web apps -- apps that use JavaScript heavily on the client. Over
the years, the Selenium tool family has expanded to include a Firefox
record and playback tool (Selenium IDE), a Remote Control server that
allows API access from any major programming language, and a Grid server
that allows tests to run in parallel across many machines.&lt;/p&gt;
&lt;p&gt;Despite it's widespread industry adoption, the Selenium project is far
from done. Selenium's goal is to drive any browser the same way an end
user would (e.g. opening pages, clicking buttons, entering text, etc.)
with any programming language on any OS platform. It's an ambitious
goal, and with a steady stream of new browsers (Chrome), new platforms
(Android, iPhone), and new HTML5 technologies (video, canvas, offline
storage) to support, just keeping up is an arduous task.&lt;/p&gt;
&lt;p&gt;Astute observers will note, though, the bulk of Selenium's automation
engine is implemented in JavaScript, which is confined by the browser's
security sandbox in which it executes JavaScript code. That security
sandbox ultimately is at odds with Selenium's goal to drive the browser
just as a user would. A user has no problem interacting with security
alerts for untrusted certificates, or file upload dialog boxes, but
Selenium can't deal with these kinds of things easily without extra
effort.&lt;/p&gt;
&lt;p&gt;Enter WebDriver. There's a lot in common between the Selenium and
WebDriver projects. They're both tools for automated testing of web
applications, and both aspire to offer browser test automation from any
language on any platform. However, they do their thing in radically
different ways. Selenium uses the strategy that JavaScript is the one
common tool available for automating all browsers, even though its
capabilities can be highly constrained. Meanwhile, WebDriver leverages
the strategy that acknowledges different automation strategies work best
for different browsers. COM works best for IE on Windows, Apple Events
for Safari on OS X. And Firefox, well, the best way to natively automate
Firefox is to turn it into a telnet server. (But that's a whole other
PyCon talk entirely!) WebDriver aims to natively drive each browser the
best way possible for maximum capability, then hiding those differences
between lower level C and C++ APIs, and finally exposing the
functionality through the appropriate C/C++ mechanism for each target
language, such as using ctypes for Python. With WebDriver's technical
approach, anything a user can do is now possible in test automation
code.&lt;/p&gt;
&lt;p&gt;This talk will go into detail explaining how Selenium and WebDriver (aka
Selenium 2) work, comparing the strengths and weaknesses of each tool's
approach to browser automation. The talk will then explain what Selenium
2.0 looks like and how to use it.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Description of problem space&lt;ul&gt;
&lt;li&gt;More browsers&lt;/li&gt;
&lt;li&gt;More frequent browser releases&lt;/li&gt;
&lt;li&gt;HTML 5 - video, canvas, offline storage&lt;/li&gt;
&lt;li&gt;The web in more places - Mobile, Chrome OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium&lt;/li&gt;
&lt;li&gt;Strengths of Selenium&lt;/li&gt;
&lt;li&gt;Description of challenges for Selenium 1&lt;ul&gt;
&lt;li&gt;Javascript security sandbox&lt;/li&gt;
&lt;li&gt;Same origin policy / cross-site scripting&lt;/li&gt;
&lt;li&gt;OS-level popups&lt;/li&gt;
&lt;li&gt;Speed / stability&lt;/li&gt;
&lt;li&gt;Java as the cross-language integration point (aka Not Very
Pythonic, eh?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Description of Selenium 2 (aka WebDriver)&lt;/li&gt;
&lt;li&gt;Strengths of Selenium 2&lt;/li&gt;
&lt;li&gt;How Selenium 2 is more pythonic&lt;ul&gt;
&lt;li&gt;(Lots and lots of example code goes here.)&lt;/li&gt;
&lt;li&gt;Spoiler Alert: No Java server required!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to test Android apps&lt;/li&gt;
&lt;li&gt;How to test iPhone apps&lt;/li&gt;
&lt;li&gt;Selenium development roadmap&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Huggins</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-the-mobile--and-desktop--web-.html</guid><category>browsers</category><category>embedded</category><category>html5</category><category>pycon</category><category>pycon2011</category><category>selenium</category><category>webdriver</category></item></channel></rss>