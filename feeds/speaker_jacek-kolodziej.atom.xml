<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jacek-kolodziej.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-11T00:00:00+00:00</updated><entry><title>Event-Sourced Story</title><link href="https://pyvideo.org/pycon-de-2019/event-sourced-story.html" rel="alternate"></link><published>2019-10-11T00:00:00+00:00</published><updated>2019-10-11T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2019-10-11:pycon-de-2019/event-sourced-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jacek Kołodziej&lt;/p&gt;
&lt;p&gt;Track:PyConDE
After three years of utilizing event sourcing in [Growbots](http://growbots.com), I want to introduce to you its basics and share our experience acquired over that time - including complexity involved - so you can better assess whether it's a tool wo&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/SXSE8D"&gt;https://de.pycon.org/program/SXSE8D&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>GIL: What's the hassle and why should I care?</title><link href="https://pyvideo.org/pycon-cz-2016/gil-whats-the-hassle-and-why-should-i-care.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/gil-whats-the-hassle-and-why-should-i-care.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demistifying GIL - what's that, how it really affects performance,
what changed in the last few years and what can we do about GIL in
everyday programming.&lt;/p&gt;
&lt;p&gt;There is still a lot of misunderstanding regarding GIL, coming from
not-so-perfect documentation - not explaining the implications
thoroughly and in a simple way; it's also often outdated.&lt;/p&gt;
&lt;p&gt;Also, GIL's implementation changed a little in CPython 3.x that may
affect programmers' choices.&lt;/p&gt;
&lt;p&gt;This misinformation may, in some cases, drive them away from CPython
where it's not really the worst choice. By providing comprehensive
guide to today's GIL in CPython, this presentation aims to help make
better design choices - be it choosing a concurrency/parallelism
model, Python implementation to use or even whether or not to drop
Python entirely.&lt;/p&gt;
&lt;p&gt;There have been (and still are), of course, attempts to get rid of
GIL and find another solution for the problem it solves - newest of
which is Larry Hasting's project called GILectomy, which I hope to
shed some light on.&lt;/p&gt;
</summary></entry><entry><title>GIL: What's the hassle and why should I care?</title><link href="https://pyvideo.org/pycon-pl-2016/gil-whats-the-hassle-and-why-should-i-care.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/gil-whats-the-hassle-and-why-should-i-care.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demistifying GIL - what's that, how it really affects performance, what
changed in the last few years and what can we do about GIL in everyday
programming.&lt;/p&gt;
</summary></entry><entry><title>(py)OpenCL na kartach graficznych: wprowadzenie do GPGPU</title><link href="https://pyvideo.org/pycon-pl-2015/pyopencl-na-kartach-graficznych-wprowadzenie-do-gpgpu.html" rel="alternate"></link><published>2015-10-16T00:00:00+00:00</published><updated>2015-10-16T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2015-10-16:pycon-pl-2015/pyopencl-na-kartach-graficznych-wprowadzenie-do-gpgpu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Konsumenckie karty graficzne - nie tylko te z listy wymagań najnowszego Wiedźmina, ale i takie z niższych półek - mają coraz więcej jednostek obliczeniowych, które da się łatwo zaprogramować. Twój CPU ledwo zipie, a obliczenia ciągną się godzinami? Przyjdź i dowiedz się, jak GPGPU może pomóc, jak zaprząc &amp;quot;grafikę&amp;quot; do pracy i w jakim stopniu Python może to ułatwić!&lt;/p&gt;
</summary></entry><entry><title>asyncio-nous</title><link href="https://pyvideo.org/pycon-pl-2014/asyncio-nous.html" rel="alternate"></link><published>2014-10-16T00:00:00+00:00</published><updated>2014-10-16T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2014-10-16:pycon-pl-2014/asyncio-nous.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: asyncio-nous
Prelegent/Speaker: Jacek Kołodziej&lt;/p&gt;
&lt;p&gt;Jak i dlaczego spróbować asynchronicznego I/O z biblioteki standardowej&lt;/p&gt;
&lt;p&gt;Na prezentacji opiszę, czym jest moduł asyncio - dlaczego powstał, porównując go do istniejących rozwiązań; jaką rolę w obsłudze asynchronicznego I/O ma spełniać pokazując koncepty/komponenty, których używa. Powiem nieco o pisaniu kodu korzystającego z asyncio. Przedstawię też, do czego konkretnego możemy asyncio wykorzystać już dziś a przede wszystkim - dlaczego powinniśmy w ogóle spróbować asynchronicznego I/O.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>