<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - numba</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_numba.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Was Sie schon immer über „Visualisierung mit Python“ wissen wollten</title><link href="https://pyvideo.org/pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Josef Heinen</name></author><id>tag:pyvideo.org,2013-10-17:/pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Schon lange hat sich Python in den Software-Entwicklungsabteilungen von
Forschung und Industrie etabliert, nicht zuletzt wegen der Verbreitung
von Bibliotheken wie SciPy oder Matplotlib. Bei der Verarbeitung großer
Datenmengen oder im Zusammenspiel mit GUI-Toolkits stößt man aber leicht
an die Grenzen der interpretativen Programmierung.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt auf, wie …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Schon lange hat sich Python in den Software-Entwicklungsabteilungen von
Forschung und Industrie etabliert, nicht zuletzt wegen der Verbreitung
von Bibliotheken wie SciPy oder Matplotlib. Bei der Verarbeitung großer
Datenmengen oder im Zusammenspiel mit GUI-Toolkits stößt man aber leicht
an die Grenzen der interpretativen Programmierung.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt auf, wie solche Anforderung auf der Basis des &lt;em&gt;GR
Frameworks&lt;/em&gt;, einer &amp;quot;Lightweight&amp;quot;-Alternative zu Matplotlib, umgesetzt
werden können. Im Einzelnen wird beschrieben wie man mit aktuellen
Software-Technologien Echtzeit-Anwendungen oder rechenintensive
Simulationen in Python realisieren kann. So lässt sich zum Beispiel
durch die Verwendung von Just-In-Time Kompilierung mit Numba(Pro) eine
enorme Performance-Steigerung erzielen. An konkreten Beispielen werden
die Vorzüge des &lt;em&gt;GR Frameworks&lt;/em&gt; im Zusammenspiel mit JIT-Compilern,
graphischen Benutzeroberflächen (GUIs) sowie OpenGL, aber auch vor dem
Hintergrund einer stetig ansteigenden Paketflut beschrieben.&lt;/p&gt;
</content><category term="PyCon DE 2013"></category><category term="accelerate"></category><category term="anaconda"></category><category term="numba"></category><category term="numpy"></category><category term="opengl"></category><category term="pyqt"></category><category term="python"></category><category term="visualisierung"></category></entry><entry><title>Speed without drag</title><link href="https://pyvideo.org/pycon-es-2014/speed-without-drag.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>Saúl Díez-Guerra</name></author><id>tag:pyvideo.org,2015-04-06:/pycon-es-2014/speed-without-drag.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recorrido práctico a través de las opciones que Python ofrece para la optimización de código númerico de baja fricción (esto es, sin dejar de escribir Python), incluyendo: agotando CPython, NumPy, Numba, Parakeet, Cython, Theano, PyPy/NumPyPy, Pyston y Blaze.&lt;/p&gt;
</content><category term="PyCon ES 2014"></category><category term="NumPy"></category><category term="Numba"></category><category term="Parakeet"></category><category term="Cython"></category><category term="Theano"></category><category term="PyPy"></category><category term="NumPyPy"></category><category term="Pyston"></category><category term="Blaze"></category></entry><entry><title>Real World Numba: Taking the Path of Least Resistance</title><link href="https://pyvideo.org/pycon-india-2019/real-world-numba-taking-the-path-of-least-resistance.html" rel="alternate"></link><published>2019-10-12T00:00:00+00:00</published><updated>2019-10-12T00:00:00+00:00</updated><author><name>Ankit Mahato</name></author><id>tag:pyvideo.org,2019-10-12:/pycon-india-2019/real-world-numba-taking-the-path-of-least-resistance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The prominent reasons for the wide adoption of Python is the ease of learning, usability and readability coupled with the powerful ecosystem of Python packages. This often makes Python an attractive language for researchers &amp;amp; scholars to undertake computational projects and thesis. The ease of prototyping and tinkering also allows …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The prominent reasons for the wide adoption of Python is the ease of learning, usability and readability coupled with the powerful ecosystem of Python packages. This often makes Python an attractive language for researchers &amp;amp; scholars to undertake computational projects and thesis. The ease of prototyping and tinkering also allows for higher number of iterations and customization in the project, leading to increase in research output. But, one of the pain points of Python is its speed when compared to languages like C++ or FORTRAN which are still widely used in research.
Scholars, when hit by the performance bottleneck of pure python code, often come across some methods to increase their code performance like using PyMPI, Numpy or CPython. But, the learning curve is steep as things get less familiar. If learning Python is so easy, why should increasing the performance of Python code be so difficult?
This talk will address this question and introduce Numba, an open source JIT compiler that translates Python and NumPy code into fast machine code. 3 real world computational problems and their Numba counter-parts will be presented to the audience to demonstrate the ease and effectiveness of using Numba. Thereby showcasing how it can be useful in lowering the barrier to achieve code performance for scientific computing using Python.&lt;/p&gt;
</content><category term="PyCon India 2019"></category><category term="numba"></category><category term="scientific computing"></category></entry><entry><title>High Performance Data Processing in Python</title><link href="https://pyvideo.org/pycon-ireland-2018/high-performance-data-processing-in-python.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Donald Whyte</name></author><id>tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/high-performance-data-processing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;numpy and numba are popular Python libraries for processing large quantities of data. When running complex transformations on large datasets, many developers fall into common pitfalls that kill the performance of these libraries. This talk explains how numpy/numba work under the hood and how they use vectorisation to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;numpy and numba are popular Python libraries for processing large quantities of data. When running complex transformations on large datasets, many developers fall into common pitfalls that kill the performance of these libraries. This talk explains how numpy/numba work under the hood and how they use vectorisation to process large amounts of data extremely quickly. We use these tools to reduce the processing time of a dataset from 3 years to 12 hours, even when the code is run on a single Macbook Pro.&lt;/p&gt;
</content><category term="PyCon Ireland 2018"></category><category term="numpy"></category><category term="numba"></category></entry><entry><title>Data Science at Scale Using dask and Numba</title><link href="https://pyvideo.org/pycon-israel-2017/data-science-at-scale-using-dask-and-numba.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Yigal Weinberger</name></author><id>tag:pyvideo.org,2017-06-13:/pycon-israel-2017/data-science-at-scale-using-dask-and-numba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today there is a great need for improved performance and scalability even in the early stages of the data science process, in my talk I will discuss the limitations of pandas in terms of performance and show a few hands on examples for common data processing procedure using two …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today there is a great need for improved performance and scalability even in the early stages of the data science process, in my talk I will discuss the limitations of pandas in terms of performance and show a few hands on examples for common data processing procedure using two frameworks: Dask and Numba&lt;/p&gt;
</content><category term="PyCon Israel 2017"></category><category term="dask"></category><category term="numba"></category></entry><entry><title>¡Eureka! (Python y ciencia)</title><link href="https://pyvideo.org/pyday-galicia-2016/eureka-python-y-ciencia.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Miguel Sánchez de León Peque</name></author><id>tag:pyvideo.org,2016-09-17:/pyday-galicia-2016/eureka-python-y-ciencia.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se plantea una pregunta de física básica que se resolverá científicamente con ingenio, mátemáticas y python, aprovechando para (de una manera amena) ver librerías habituales en el entorno científico como sympy, numpy, scipy, matplotlib, bokeh, numba, pandas y sklearn.&lt;/p&gt;
</content><category term="PyDay Galicia 2016"></category><category term="pyday"></category><category term="sympy"></category><category term="numpy"></category><category term="scipy"></category><category term="matplotlib"></category><category term="bokeh"></category><category term="numba"></category><category term="pandas"></category><category term="sklearn"></category></entry></feed>