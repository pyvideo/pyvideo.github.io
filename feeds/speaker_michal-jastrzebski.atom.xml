<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michal-jastrzebski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-19T00:00:00+00:00</updated><entry><title>Introduction to genetic programming and PyEvolve</title><link href="https://pyvideo.org/pycon-ukraine-2012/introduction-to-genetic-programming-and-pyevolve.html" rel="alternate"></link><published>2012-10-20T00:00:00+00:00</published><updated>2012-10-20T00:00:00+00:00</updated><author><name>Michał Jastrzębski</name></author><id>tag:pyvideo.org,2012-10-20:pycon-ukraine-2012/introduction-to-genetic-programming-and-pyevolve.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genetic programming is new approach to solving problems that are hard to define. It is based on Darwin's theory of evolution. Solution to problem is not computed, it evolves. PyEvolve is python framework for genetic programming. I would like to tell you about basic concepts which GP is based on, and show you how to write genetic programs in python.&lt;/p&gt;
</summary></entry><entry><title>Dodging Chaos Monkey, how to live with broken-by-design architecture</title><link href="https://pyvideo.org/pycon-pl-2014/dodging-chaos-monkey-how-to-live-with-broken-by-design-architecture.html" rel="alternate"></link><published>2014-10-19T00:00:00+00:00</published><updated>2014-10-19T00:00:00+00:00</updated><author><name>Michał Jastrzębski</name></author><id>tag:pyvideo.org,2014-10-19:pycon-pl-2014/dodging-chaos-monkey-how-to-live-with-broken-by-design-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: Dodging Chaos Monkey, how to live with broken-by-design architecture
Prelegent/Speaker: Michał Jastrzębski&lt;/p&gt;
&lt;p&gt;Most of us, developers, don't acknowledge one, sad fact. Things breaks. No matter how expensive hardware was, it will break one day, only question is whether or not you replace it before it happens. Not always you will. To make truly fault tolerant and high available systems it requires not only ops effort, but devs as well. We need to learn how to write systems in HA. This talk will show you few problems and solutions to do so.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>3 zagadki Sphinx'a, czyli dwa słowa o dokumentacji</title><link href="https://pyvideo.org/pycon-pl-2013/3-zagadki-sphinxa-czyli-dwa-slowa-o-dokumentacji.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Michał Jastrzębski</name></author><id>tag:pyvideo.org,2013-10-17:pycon-pl-2013/3-zagadki-sphinxa-czyli-dwa-slowa-o-dokumentacji.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: 3 zagadki Sphinx'a, czyli dwa słowa o dokumentacji
Prelegent/Speaker: Michał Jastrzębski&lt;/p&gt;
&lt;p&gt;Dokumentacja techniczna kodu to rzecz niezmiernie ważna, z tym się zgodzi chyba każdy, kto kiedykolwiek przejął cudzy projekt, a zarazem bardzo często pomijana. Wielokrotnie zdarza się tak, iż zapominamy lub nie mamy czasu pisać dokumentacji, przez co się dezaktualizuje, jeśli w ogóle powstaje. Jak można ten stan rzeczy poprawić?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2013/pl/agenda"&gt;http://pl.pycon.org/2013/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>