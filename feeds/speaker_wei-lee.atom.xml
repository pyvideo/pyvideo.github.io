<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Wei Lee</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_wei-lee.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python Table Manners: Cut the Cookie Gracefully</title><link href="https://pyvideo.org/europython-2020/python-table-manners-cut-the-cookie-gracefully.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Wei Lee</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/python-table-manners-cut-the-cookie-gracefully.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Guideline Toward Cleaner Code&lt;/p&gt;
&lt;p&gt;### Goals
I expect the audiences to gain knowledge of the tools I mention and the primary usage of them. The tools will cover various aspects of software engineering (e.g., dependencies, testing, security, etc.). Also, I'll purpose how I combine all these tools in â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Guideline Toward Cleaner Code&lt;/p&gt;
&lt;p&gt;### Goals
I expect the audiences to gain knowledge of the tools I mention and the primary usage of them. The tools will cover various aspects of software engineering (e.g., dependencies, testing, security, etc.). Also, I'll purpose how I combine all these tools in my development workflow as a sample for how the audiences can integrate these tools into their workflow.&lt;/p&gt;
&lt;p&gt;### Outline for 30 minutes
* Dependency Management (4 min)
* Testing - Don't let your customer debug for you (4 min)
* Style Check and auto-fix (4 min)
* Task Management - No more repetitive typing (3 min)
* pre-commit - Prevent committing bad code into codebase (3 min)
* commitizen-tool - How good commit message can help (4 min)
* Security (3 min)
* Cookiecutter - Wrap up all the tools (3 min)
* Q &amp;amp; A (2 min)&lt;/p&gt;
&lt;p&gt;### Outline for 45 minutes
* Dependency Management (5 min)
* Testing - Don't let your customer debug for you (5 min)
* Style Check and auto-fix (5 min)
* Task Management - No more repetitive typing (5 min)
* pre-commit - Prevent committing bad code into codebase (5 min)
* commitizen-tool - How good commit message can help (5 min)
* Security (5 min)
* Continuous Integration - Assemble all the trivial steps (5 min)
* Cookiecutter - Wrap up all the tools (3 min)
* Q &amp;amp; A (2 min)&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="General"></category><category term="Programming"></category><category term="Tooling"></category></entry></feed>