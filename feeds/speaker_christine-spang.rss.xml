<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 13 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Billions of Emails Synced with Python</title><link>https://pyvideo.org/pybay-2017/billions-of-emails-synced-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The open source Nylas Sync Engine provides a RESTful API on top of a powerful email sync platform, making it easy to build messaging into apps. It’s built using Python and gevent and has scaled to sync billions of messages over its lifetime deployment. In this talk, we’ll show you how it’s built and what technical challenges we’ve solved along the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why a sync engine?&lt;/p&gt;
&lt;p&gt;If you’ve ever tried to build anything that works with email, you’ll find that it’s a problem full of twisty corners: the protocols themselves are obtuse and require entire RFCs just to describe how to implement sync with them, if you want your integration to work with everyone’s email you face implementing several different protocols or flavours of protocols (IMAP with CONDSTORE, IMAP with no CONDSTORE, Gmail IMAP, Exchange Web Services, Exchange ActiveSync, Office365 REST) plus OAuth authentication for different providers, and once you’ve gotten data flowing you still need to handle parsing email, which involves a complex format known as MIME as well as pretty much every way of encoding non-ASCII text as ASCII that has ever been invented.&lt;/p&gt;
&lt;p&gt;We’ve built a platform that layers a sync engine over 30 years of email history and allows developers to read and write to mailboxes and calendars using a modern REST API. It’s not just a simple proxy that makes calls to IMAP or Exchange behind the scenes: in order to meet the speed and reliability demands our customers require, when a user connects their email account to a developer’s app, our infrastructure syncs a copy of that mailbox and keeps it up-to-date as changes are made from that app or traditional web, mobile, and desktop email clients. This is a demanding technical challenge and wasn’t easy to build.&lt;/p&gt;
&lt;p&gt;How a sync engine?&lt;/p&gt;
&lt;p&gt;A semi-monolithic application composed of several services that all share a common database and a fair amount of code, but run on separate server fleets (email sync, api frontend, webhooks, etc.)&lt;/p&gt;
&lt;p&gt;~90k lines of Python, including tests and migrations&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Christine went to MIT, dropped out of an operating systems graduate program to be an early engineer at Ksplice, and most recently cofounded Nylas, a startup building an email platform. When she's not building rock-solid infrastructure for the Internet or speaking around the world at conferences like DebConf and PyCon, rumour has it she can be found on cliff walls, remote trails, and dance floors. She lives in Oakland, California.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/billions-of-emails-synced-with-python.html</guid></item><item><title>Lightning Talks - 2016-05-31 AM</title><link>https://pyvideo.org/pycon-us-2016/lightning-talks-2016-05-31-am.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-01:pycon-us-2016/lightning-talks-2016-05-31-am.html</guid><category>lightning talks</category></item><item><title>4. How the Tor Project uses Python</title><link>https://pyvideo.org/pycon-us-2012/4-how-the-tor-project-uses-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;While the Tor client software itself is written in C, there's more to
the Tor project than just the core client. Come see how the Tor project
uses Python for network analysis, metrics, and various front- and
back-end services.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-11:pycon-us-2012/4-how-the-tor-project-uses-python.html</guid></item><item><title>Subprocess to FFI: Memory, Performance, and Why You Shouldn't Shell Out</title><link>https://pyvideo.org/pycon-us-2014/subprocess-to-ffi-memory-performance-and-why-y.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sometimes, the code you need just isn't available in Python, but
someone's written some code in another language that solves your
problem. What options do you have for interacting with this external
code from within your program? We'll examine how to call external
binaries, what happens behind the scenes at a systems level, and how
these implementation details affect performance and memory usage. In the
second part of the talk, we'll discuss the different options for more
tightly integrating external code in the form of a C library for better
performance and control.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/subprocess-to-ffi-memory-performance-and-why-y.html</guid></item><item><title>Search 101: An Introduction to Information Retrieval</title><link>https://pyvideo.org/pycon-us-2014/search-101-an-introduction-to-information-retrie.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Data is everywhere! And most of the time, the best way to find what you
want in a pile of data is to search it. In this project-based tutorial,
you'll get an introduction to the basic theory of search and write a
program to index and search a collection of Wikipedia documents using
the Whoosh library. You'll leave with the ability to add search
functionality to all of your own projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/search-101-an-introduction-to-information-retrie.html</guid></item><item><title>To ORM or not to ORM</title><link>https://pyvideo.org/pycon-us-2015/to-orm-or-not-to-orm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database ORMs make it really convenient to pythonically query a
database, but it's difficult to decide when to use them and when not
to---and what the alternatives are. In this talk you'll learn strategies
for deciding when and where to use an ORM, when to be cautious, and how
to tell that you're doing the right thing, drawn from real-world lessons
learned building the Inbox email platform.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/to-orm-or-not-to-orm.html</guid></item><item><title>WebSockets from the Wire Up</title><link>https://pyvideo.org/pycon-us-2015/websockets-from-the-wire-up.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTML5 WebSockets power the real-time web. Come take a deep dive into how
they work, from the big picture down to what goes over the wire,
including insight into the performance benefits of the protocol, via a
real-world example of how WebSockets are implemented client- and
server-side in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Spang</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/websockets-from-the-wire-up.html</guid></item></channel></rss>