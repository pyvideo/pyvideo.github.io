<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_elizabeth-ramirez.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-06-17T00:00:00+00:00</updated><entry><title>Kalman Filters for non-rocket science</title><link href="https://pyvideo.org/pycon-us-2016/elizabeth-ramirez-kalman-filters-for-non-rocket-science-pycon-2016mp4.html" rel="alternate"></link><published>2016-06-17T00:00:00+00:00</published><updated>2016-06-17T00:00:00+00:00</updated><author><name>Elizabeth Ramirez</name></author><id>tag:pyvideo.org,2016-06-17:pycon-us-2016/elizabeth-ramirez-kalman-filters-for-non-rocket-science-pycon-2016mp4.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Elizabeth Ramirez&lt;/p&gt;
&lt;p&gt;Kalman Filters have been widely used for scientific applications. No wonder people often think they involve complex math, however you can actually introduce the Kalman Filter in your daily data processing work, without the complex math you would imagine. This talk will show how to implement the discrete Kalman Filter in Python using NumPy and SciPy.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Graph Database Patterns in Python</title><link href="https://pyvideo.org/pycon-us-2015/graph-database-patterns-in-python.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Elizabeth Ramirez</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/graph-database-patterns-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating and using models from a graph database can be quite different
to the ones used for row/column/document-oriented databases, in the
sense that the same query patterns could differ significantly in
structure and performance. This session will present how to create
models in Python for Titan property graphs, that allow you to manipulate
graphs as if you were querying with Gremlin DSL.&lt;/p&gt;
</summary></entry></feed>