<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Public Cloud (AWS/Google/...)</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Google Cloud for Pythonistas</title><link>https://pyvideo.org/europython-2019/google-cloud-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Support for Python on Google Cloud has never been better. Join us for a
tour of Python runtimes, services and client libraries, including App
Engine, Cloud Functions, Cloud Run, and more. We'll also discuss tools
for monitoring and debugging your Python application, and best practices
for using Python on Google Cloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/google-cloud-for-pythonistas.html</guid><category>EuroPython 2019</category><category>Deployment/Continuous Integration and Delivery</category><category>DevOps general</category><category>Development</category><category>Public Cloud (AWS/Google/...)</category><category>Web</category></item><item><title>Building smarter solutions with no expertise in machine learning</title><link>https://pyvideo.org/europython-2020/building-smarter-solutions-with-no-expertise-in-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML? API? AutoML? Python is the language of choice to solve problems with machine learning, but what can we build in only a few hours or days and without any expertise? In this session, we'll see how to benefit from existing ML models and how to create a custom model with AutoML techniques. We’ll also be active players of a live demo, so don't put your smartphone on airplane mode!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laurent PICARD</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/building-smarter-solutions-with-no-expertise-in-machine-learning.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Computer Vision</category><category>Human-Machine-Interaction</category><category>Machine-Learning</category><category>Natural Language Processing</category><category>Public Cloud (AWS/Google/...)</category></item><item><title>Probabilistic Forecasting with DeepAR and AWS SageMaker</title><link>https://pyvideo.org/europython-2020/probabilistic-forecasting-with-deepar-and-aws-sagemaker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In time series forecasting we are interested in how the time series is going to continue in the future. This is of high importance in areas like forecasting energy production from renewable resources, forecasting demand of customers or the price of products. Many forecasting algorithms provide only the prediction. However, oftentimes we are also interested in the likelihood of the prediction and how much it may vary. This is what probabilistic forecasting is for. With every forecast, we also obtain an upper and lower bound with certain probabilities. For a long time, probabilistic forecasting was limited to traditional techniques like ARIMA. DeepAR is an algorithm that allows us to combine Deep Learning techniques with probabilistic forecasting. Additionally, in contrast to training a model for each time series individually, DeepAR suggests training one large forecasting model for all related time series. The algorithm was developed by Amazon and is also provided in AWS SageMaker.
In this talk, we will understand the theoretical basics of DeepAR, have a look at a practical time series example and will demonstrate an implementation. In the end, you will be prepared to get started with your own forecasts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Kuhaupt</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/probabilistic-forecasting-with-deepar-and-aws-sagemaker.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Data Science</category><category>Deep Learning</category><category>Machine-Learning</category><category>Predictions</category><category>Public Cloud (AWS/Google/...)</category></item><item><title>Running Unit Test on Top of Serverless Service</title><link>https://pyvideo.org/europython-2020/running-unit-test-on-top-of-serverless-service.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increase your parallelization by 50x&lt;/p&gt;
&lt;p&gt;I will share on how to utilize serverless architecture for a less common scenario - unit testing.
As part of the talk, we will also discuss different approaches to parallelizing unit test suite execution.
Attendees will also learns on cost-benefit analysis related to increasing developer productivity.&lt;/p&gt;
&lt;p&gt;Outline:
- Introduction
- Different approaches to parallelizing unit test execution with pro &amp;amp; cons
- What we learned (gotcha) when implementing serverless as a unit test runner
- Cost-Benefit Analysis and usage report,
- Q&amp;amp;A&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adinata Thayib</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/running-unit-test-on-top-of-serverless-service.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Case Study</category><category>Multi-Processing</category><category>Public Cloud (AWS/Google/...)</category><category>Test Libraries (pytest/nose/...)</category><category>Tooling</category></item><item><title>Serverless 2.0 with Cloudstate.io-stateful functions with Python</title><link>https://pyvideo.org/europython-2020/serverless-20-with-cloudstateio-stateful-functions-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine billions of functions, with in-memory state, distributed across a Kubernetes cluster!&lt;/p&gt;
&lt;p&gt;Serverless is revolutionary and will dominate the future of Cloud. Function-as-a-Service (FaaS) however—with its stateless and short-lived functions is only the first step.&lt;/p&gt;
&lt;p&gt;What’s needed is a next-generation Serverless platform and programming model for general-purpose application development in the new world of real-time data and event-driven systems. What is missing is ways to manage distributed state in a scalable and available fashion, support for long-lived virtual stateful services, ways to physically co-locate data and processing, and options for choosing the right data consistency model for the job.&lt;/p&gt;
&lt;p&gt;This talk will discuss the challenges, requirements, and introduce you to our proposed solution: Cloudstate—an Open Source project building the next generation Stateful Serverless, running on Kubernetes, Akka, gRPC, Knative, and GraalVM, with polyglot support for Python, Java, Go, JavaScript, Swift, Scala, Python, Kotlin, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Walsh</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/serverless-20-with-cloudstateio-stateful-functions-with-python.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Cross-Platform-Development</category><category>Development</category><category>Distributed Systems</category><category>Public Cloud (AWS/Google/...)</category></item><item><title>Sharing Reproducible Python Environments with Binder</title><link>https://pyvideo.org/europython-2020/sharing-reproducible-python-environments-with-binder.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As reproducibility gains traction in the data science and research communities, the need to package code, data and the computational environment is growing.&lt;/p&gt;
&lt;p&gt;There are many tools that address different aspects of this type of packaging, such as Jupyter Notebooks for literate programming, Docker for containerising and porting computational environments, and so on. But they represent barriers to reproducibility as each one requires time and effort to learn.&lt;/p&gt;
&lt;p&gt;Project Binder integrates Notebooks and Docker for generating reproducible computational analyses and combines them with a web-based interface and cloud orchestration engines. This means that analysts do not have to worry about all the moving parts so long as they have followed basic software best practices: their code is version controlled and they've captured the dependencies the analysis needs to run. Binder then hosts the compute in the cloud and makes it easily shareable by providing a unique URL to the code repository, without imposing additional overheads on the analyst.&lt;/p&gt;
&lt;p&gt;During this talk, Sarah will introduce Binder (the service), BinderHub (the technological infrastructure) and mybinder.org (a public instance of a Binder service, free for anyone to use) and demonstrate how it can be used to share Python environments and analyses.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Gibson</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/sharing-reproducible-python-environments-with-binder.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Best Practice</category><category>Data Science</category><category>Jupyter</category><category>Open-Source</category><category>Public Cloud (AWS/Google/...)</category></item></channel></rss>