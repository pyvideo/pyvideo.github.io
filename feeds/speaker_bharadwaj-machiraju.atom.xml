<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bharadwaj-machiraju.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-03T00:00:00+00:00</updated><entry><title>Building Offensive Web Security Framework in Python - PyCon India 2015</title><link href="https://pyvideo.org/pycon-india-2015/building-offensive-web-security-framework-in-python-pycon-india-2015.html" rel="alternate"></link><published>2015-10-03T00:00:00+00:00</published><updated>2015-10-03T00:00:00+00:00</updated><author><name>Bharadwaj Machiraju</name></author><id>tag:pyvideo.org,2015-10-03:pycon-india-2015/building-offensive-web-security-framework-in-python-pycon-india-2015.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Bharadwaj Machiraju&lt;/p&gt;
&lt;p&gt;There are lots of good tools out there which facilitate security testing of web applications for different class of vulnerabilities. As a penetration tester or a developer, running these tools along with some custom tests is always a requirement. Calling those tools by remembering their command line arguments or organising the collected data is a difficult task. Repeating this task multiple times manually might make you go crazy. As this is Pycon, python comes for the rescue.&lt;/p&gt;
&lt;p&gt;Details: &lt;a class="reference external" href="https://in.pycon.org/cfp/pycon-india-2015/proposals/building-offensive-web-security-framework-in-python/"&gt;https://in.pycon.org/cfp/pycon-india-2015/proposals/building-offensive-web-security-framework-in-python/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>