<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_james-mills.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-08-09T00:00:00+00:00</updated><entry><title>Software Component Architectures and circuits? by James Mills</title><link href="https://pyvideo.org/pycon-au-2014/software-component-architectures-and-circuits-by.html" rel="alternate"></link><published>2014-08-09T00:00:00+00:00</published><updated>2014-08-09T00:00:00+00:00</updated><author><name>James Mills</name></author><id>tag:pyvideo.org,2014-08-09:pycon-au-2014/software-component-architectures-and-circuits-by.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Asynchronous Frameworks are plentiful in the Python Community.
There is Twisted, gevent, Tornado, asynccore and now with Python 3.4,
asyncio. circuits is not yet another Asynchronous Framework (although it
does support Async I/O) but a strong well defined Component Architecture
for building complex software with changing requirements. If you have
ever developed with Zope or Kamaelia you will be familiar with the
&amp;quot;Component&amp;quot; concept. circuits offers a unique perspective on Component
Architectures and offers a novel way to design, implement and deploy
complex software.&lt;/p&gt;
</summary></entry></feed>