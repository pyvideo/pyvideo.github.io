<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Michal Korbela</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 02 Nov 2024 00:00:00 +0000</lastBuildDate><item><title>Easy Service to Service Communication Using Pydantic Models</title><link>https://pyvideo.org/pycon-fr-2024/easy-service-to-service-communication-using-pydantic-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices architecture, while offering flexibility and scalability, introduces significant complexity in communication between services. Each API call involves creating and parsing request and response bodies on both the server and client sides, not to mention additional challenges like validation and maintaining API documentation. This multi-step process adds considerable overhead to both development and integration.&lt;/p&gt;
&lt;p&gt;FastAPI and Pydantic have made substantial improvements in managing these complexities on the server side. However, when using frameworks like Django or Flask, similar efficiencies can be harder to achieve. Despite these server-side advancements, simplifying the client-side experience remains crucial. One key challenge is managing request and response models without duplicating them across services.&lt;/p&gt;
&lt;p&gt;In this session, we will demonstrate easy generation of OpenAPI documentation for Django or Flask servers using django-ninja and flask-ninja packages.  Additionally we show sharing Pydantic models from the server with clients through Python packages that significantly simplify integration and eliminate code duplication.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michal Korbela</dc:creator><pubDate>Sat, 02 Nov 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-11-02:/pycon-fr-2024/easy-service-to-service-communication-using-pydantic-models.html</guid><category>PyCon FR 2024</category></item></channel></rss>