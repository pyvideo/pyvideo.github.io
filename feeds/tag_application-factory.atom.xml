<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Application Factory</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_application-factory.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-04T00:00:00+00:00</updated><subtitle></subtitle><entry><title>The Application Factory Architecture</title><link href="https://pyvideo.org/flaskcon-2020/the-application-factory-architecture.html" rel="alternate"></link><published>2020-07-04T00:00:00+00:00</published><updated>2020-07-04T00:00:00+00:00</updated><author><name>Bruno Rocha</name></author><id>tag:pyvideo.org,2020-07-04:/flaskcon-2020/the-application-factory-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruno Rocha (&amp;#64;rochacbruno) talks about how Flask encourages Application Factory Pattern for creating new application instances. Years ago I decided to leverage this pattern and use a wide application factory to build the whole Flask project. Using this approach we get rid of Circular import and app-out-of-context problems and â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruno Rocha (&amp;#64;rochacbruno) talks about how Flask encourages Application Factory Pattern for creating new application instances. Years ago I decided to leverage this pattern and use a wide application factory to build the whole Flask project. Using this approach we get rid of Circular import and app-out-of-context problems and also we have a better organization for our folder structure.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Application Factory"></category><category term="Flask"></category><category term="FlaskCon"></category></entry></feed>