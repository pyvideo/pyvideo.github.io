<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>Automated Video Editing with Stitcher</title><link>https://pyvideo.org/pygotham-2017/automated-video-editing-with-stitcher.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BuzzFeed generates hours of video every day with an extensive catalog going back several years. Content needs to be re-formatted for different devices, or cropped and trimmed to be re-purposed in new ways. Some of the routine effort goes to appending advertisements to a large number of videos or updating text overlays for internationalization. The common tools for video editing are complex and memory intensive and do not provide simple bulk batching of tasks. We are creating Stitcher to perform some of these routine tasks as well as processing for innovative front-end video applications.&lt;/p&gt;
&lt;p&gt;Stitcher is a declarative language for describing sequential and parallel editing operations on videos to a stitching service written in Python and built with moviepy, marshmallow and the popular transcoding tool ffmpeg. It can be used for scripting many of the repetitive tasks that occur in a high volume video production environment.&lt;/p&gt;
&lt;p&gt;The Stitcher syntax is loosely based on SMIL, a markup for multimedia video editing. It can describe the complex assembly of different source content including
videos, text and images in sequence, or in parallel as an overlay.&lt;/p&gt;
&lt;p&gt;This talk describes some of the production problems found in high volume environments and how Python tools such as Stitcher, moviepy, and ffmpeg help solve them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Karp</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:pygotham-2017/automated-video-editing-with-stitcher.html</guid></item><item><title>RESTful Service Design: Patterns and Anti-Patterns</title><link>https://pyvideo.org/pygotham-2016/restful-service-design-patterns-and-anti-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Drawing on more than a decade of combined experience in RESTful service design, your speakers will discuss many of the key architectural questions that every API developer needs to answer. The goal of this talk is to move quickly beyond the basics, and explore larger questions of how to build a sane and scalable service that your users will love. We will draw on our own experience of implementing bad (and later, less-bad) answers to these questions in multiple real-world situations, with specific examples demonstrated using Django REST Framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Revesz</dc:creator><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-17:pygotham-2016/restful-service-design-patterns-and-anti-patterns.html</guid><category>REST</category></item></channel></rss>