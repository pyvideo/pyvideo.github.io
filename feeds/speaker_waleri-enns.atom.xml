<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_waleri-enns.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-10-31T00:00:00+00:00</updated><entry><title>Putting Technical Debt under Control</title><link href="https://pyvideo.org/pycon-de-2012/putting-technical-debt-under-control.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Waleri Enns</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/putting-technical-debt-under-control.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&amp;quot;You don't control what you cannot measure&amp;quot;&lt;/p&gt;
&lt;p&gt;Tom Peters paraphrasing Lord Kelvin&lt;/p&gt;
&lt;p&gt;Die aus den Fugen geratende Qualität des Source Codes und das&lt;/p&gt;
&lt;p&gt;excessive Akkumulieren des sogenannten Technical Debt ist eine häufige&lt;/p&gt;
&lt;p&gt;Ursache für das vorzeitige Ableben von Software Projekten. Das&lt;/p&gt;
&lt;p&gt;Kontrollieren dieser Aspekte ist essentiell für eine langfristige&lt;/p&gt;
&lt;p&gt;Gesundheit der Software. Die Kontrolle setzt jedoch Messung voraus;&lt;/p&gt;
&lt;p&gt;erst die Definition und systematische Erhebung einer Qualitätsmetrik&lt;/p&gt;
&lt;p&gt;versetzt den Entwickler (und seinen Manager) in die Lage, die Qualität&lt;/p&gt;
&lt;p&gt;dieser Software zu überwachen und ggf. kontinuierlich zu verbessern.&lt;/p&gt;
&lt;p&gt;Das Gespann &amp;quot;Sonar + Python AddOn&amp;quot; gibt eine State-Of-The-Art-Antwort&lt;/p&gt;
&lt;p&gt;auf die Frage &amp;quot;Was ist qualitativ hochwertiger Python Code?&amp;quot;. Dieser&lt;/p&gt;
&lt;p&gt;Vortrag führt aus, wie die Qualität bzw. Technical Debt einer Python&lt;/p&gt;
&lt;p&gt;Code-Basis gemessen, zu einer Kennzahl 'verdichtet' und kontrolliert&lt;/p&gt;
&lt;p&gt;werden kann.&lt;/p&gt;
&lt;p&gt;Dieser auf Softwaremetriken basierende Ansatz wird auch Continuous&lt;/p&gt;
&lt;p&gt;Inspection genannt. Es ist abzusehen, dass diese Technologie einen&lt;/p&gt;
&lt;p&gt;ähnlich starken Einfluss auf die Entwicklung von Software haben wird&lt;/p&gt;
&lt;p&gt;wie die Continuous Integration / Continuous Deployment in der letzten&lt;/p&gt;
&lt;p&gt;Dekade.&lt;/p&gt;
&lt;p&gt;Mit Sonar und dem (noch jungen) Python Plugin steht die wesentliche&lt;/p&gt;
&lt;p&gt;Infrastruktur um Continuous Inspection in der Praxis für Python&lt;/p&gt;
&lt;p&gt;Projekte umzusetzen. Das Ziel dieses Vortrags ist es, die Python&lt;/p&gt;
&lt;p&gt;Community für diese Technologie zu begeistern.&lt;/p&gt;
</summary><category term="code"></category><category term="qualität"></category></entry></feed>