<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 23 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Measuring Model Fairness</title><link>https://pyvideo.org/pydata-la-2018/measuring-model-fairness.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine learning models are increasingly used to make decisions that
affect people’s lives. With this power comes a responsibility to ensure
that model predictions are fair. In this talk I’ll introduce several
common model fairness metrics, discuss their tradeoffs, and finally
demonstrate their use with a case study analyzing anonymized data from
one of Civis Analytics’s client engagements.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-23:pydata-la-2018/measuring-model-fairness.html</guid></item><item><title>Scaling Scikit Learn</title><link>https://pyvideo.org/pydata-seattle-2017/scaling-scikit-learn.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you do if you have a lot of models to fit, don’t want to spend all day with your laptop as a space heater, and have access to AWS? Take it to the cloud! I’ll share my experience setting up a system to take models coded with scikit-learn and run them in a cloud computing environment. This talk will focus on training data that fit in memory and data for prediction which maybe doesn’t.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I worked as part of a team to create software which moves data to and from scikit-learn models running in AWS’s EC2 service, and my talk will highlight some of the challenges we faced and the solutions we came up with. This project is possible because scikit-learn has a standardized API for all model types. No matter what algorithm you’re using, it has the same methods with the same arguments as any other algorithm.&lt;/p&gt;
&lt;p&gt;Data start and end either as tables in AWS’s Redshift (a postgres database) or CSVs stored in AWS’s S3 (a key-value store). The training data need to fit in memory, but we can make predictions on arbitrarily-large Redshift tables in roughly constant time, given a large enough pool of EC2 instances. The software and execution environment are packaged into Docker containers for reproducibility and speed in setting up on new EC2 instances.&lt;/p&gt;
&lt;p&gt;The challenges on the training side are in massaging input data to match the formats which scikit-learn models expect and in storing enough metadata to ensure that we can reproduce the arrays of features at prediction time. Predictions distribute chunks of data to their own EC2 instances. I’ll show off the custom backend for the joblib library that we use to manage the remote processes for predictions.&lt;/p&gt;
&lt;p&gt;Our software runs in Civis Analytics’s data science platform. For the application described in this talk, the platform mediates interactions with AWS services to provide security and permissioning. The principles I’ll discuss will be of general applicability to anyone interested in cloud-based production systems based on scikit-learn.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-06:pydata-seattle-2017/scaling-scikit-learn.html</guid></item><item><title>Building a Cloud based Data Science Platform with Python</title><link>https://pyvideo.org/scipy-2015/building-a-cloud-based-data-science-platform-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/building-a-cloud-based-data-science-platform-with-python.html</guid></item><item><title>Pystan: Bayesian Inference for Fun and Profit</title><link>https://pyvideo.org/depy-2016/pystan-bayesian-inference-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probabilistic programming languages offer a flexible and expressive way to model data by treating random variables as first-class objects. Stan is a popular and well-supported library which allows users to write models in the Stan programming language and use MCMC methods to perform Bayesian inference. Stan itself is written in C++, and has a Python interface through the PyStan package. In this talk, I'll show off some of the capabilities of PyStan and go through a simple practical example of Bayesian inference in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-07:depy-2016/pystan-bayesian-inference-for-fun-and-profit.html</guid></item><item><title>The wonder and the horror of the mock module</title><link>https://pyvideo.org/chipy/the-wonder-and-the-horror-of-the-mock-module.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;mock&amp;quot; module is a powerful (and fun!) tool for unit testing, and it comes built in to the the Python standard library. I'll give an overview of some of the more useful features of the module, and finish with a warning about the dangers of too much mockery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-10:chipy/the-wonder-and-the-horror-of-the-mock-module.html</guid></item><item><title>Python-Powered Machine Learning in the Cloud</title><link>https://pyvideo.org/depy-2015/python-powered-machine-learning-in-the-cloud.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a powerful, easy-to-use language which now has a wide range of
numerical and machine-learning open source libraries. At Civis
Analytics, we've built a cloud-based platform for data science which
empowers analysts to extract insights from their data with less effort.
The platform itself runs on Amazon Web Services, and the machine
learning workflows at the core of the platform are coded in Python.
Open-source Python libraries such as pandas, numpy, statsmodels, and
scikit-learn let our data scientists focus on high-level workflows and
greatly accelerate our development process. In this talk, I'll give an
overview of Civis's new data science platform, focusing on the
machine-learning aspects. I'll talk about how we use Python open-source
libraries to help with data analysis, and some of the challenges we've
overcome along the way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-30:depy-2015/python-powered-machine-learning-in-the-cloud.html</guid></item></channel></rss>