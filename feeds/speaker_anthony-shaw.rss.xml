<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Anthony Shaw</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 16 May 2025 00:00:00 +0000</lastBuildDate><item><title>How to write a container daemon in Python</title><link>https://pyvideo.org/pycon-au-2017/how-to-write-a-container-daemon-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When the authors of Docker first started, they wrote the Docker daemon in Python. This was later switching for Go, but why? This talk will cover mocker, a container runtime Anthony wrote to understand Docker by rewriting its basic functions in 100% Python. Anthony will walk through how to write a Docker daemon in Python whilst applying it to real problems. Whilst the tool might not be production ready, it demonstrates some patterns, libraries and ideas for working with Docker containers from Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:/pycon-au-2017/how-to-write-a-container-daemon-in-python.html</guid><category>PyCon AU 2017</category></item><item><title>Wily Python: Writing simpler and more maintainable Python</title><link>https://pyvideo.org/pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone starts with the best intentions with their Python projects,
&amp;quot;this time it's going to be clean, simple and maintainable&amp;quot;. But code
evolves over time, requirements change and codebases can get messy and
complicated quickly.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how to use &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; to measure and graph
how complicated your Python code is and a series of practical techniques
to simplify it. &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; will show you which parts of your projects are
becoming or have become hard to maintain and need a refactor. Once you
know where the skeletons are, you will learn practical techniques for
refactoring &amp;quot;complex&amp;quot; code and some resources to use to take your
refactoring to the next level.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Fri, 03 May 2019 14:35:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:/pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html</guid><category>PyCon US 2019</category><category>talk</category></item><item><title>Why is Python slow?</title><link>https://pyvideo.org/pycon-us-2020/why-is-python-slow.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-04-17:/pycon-us-2020/why-is-python-slow.html</guid><category>PyCon US 2020</category></item><item><title>Microsoft sponsor workshop</title><link>https://pyvideo.org/pycon-us-2021/microsoft-sponsor-workshop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this workshop, we will talk through scalable Django architecture and how Azure services like load balancing, sharded databases, and functions can be used to scale a Django application from a few to lots of users.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://aka.ms/pycon-django-workshop"&gt;https://aka.ms/pycon-django-workshop&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-14:/pycon-us-2021/microsoft-sponsor-workshop.html</guid><category>PyCon US 2021</category></item><item><title>Restarting Pyjion, a general purpose JIT for Python- is it worth it?</title><link>https://pyvideo.org/pycon-us-2021/restarting-pyjion-a-general-purpose-jit-for-python-is-it-worth-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk you'll see an update to the Pyjion project, a JIT compiler for CPython byte-code. This project was started 5 years ago but stopped after making no gains in performance. Recent changes to CPython have made optimisations more viable, so now it has been restarted and is showing big performance gains vs. standard CPython with 100% compatibility. Many attempts have been made to build a general purpose JIT for Python and few have succeeded. Is it worth it and what are the gains to be made? This talk will cover the design ideas of a JIT for CPython, optimisations, and future potential.&lt;/p&gt;
&lt;p&gt;Website: &lt;a class="reference external" href="https://pyjion.readthedocs.io"&gt;https://pyjion.readthedocs.io&lt;/a&gt;
Source code: &lt;a class="reference external" href="https://GitHub.com/tonybaloney/pyjion"&gt;https://GitHub.com/tonybaloney/pyjion&lt;/a&gt;
Book: &lt;a class="reference external" href="https://realpython.com/products/cpython-internals-book/"&gt;https://realpython.com/products/cpython-internals-book/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-14:/pycon-us-2021/restarting-pyjion-a-general-purpose-jit-for-python-is-it-worth-it.html</guid><category>PyCon US 2021</category></item><item><title>Diversity &amp; Inclusion Workgroup</title><link>https://pyvideo.org/pycon-us-2022/diversity-inclusion-workgroup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity &amp;amp; Inclusion Workgroup Panel
Georgi Ker, Lorena Mesa, Anthony Shaw, Reuven Lerner&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Georgi Ker</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/diversity-inclusion-workgroup.html</guid><category>PyCon US 2022</category><category>Keynote</category></item><item><title>Write faster Python! Common performance anti-patterns</title><link>https://pyvideo.org/pycon-us-2022/write-faster-python-common-performance-anti-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show small, specific examples of Python code that can be refactored to be faster without compromising on readability. At the start of the talk, I'll explain how to set up a profiler to measure application performance and how to track improvements and regressions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/write-faster-python-common-performance-anti-patterns.html</guid><category>PyCon US 2022</category></item><item><title>Unlocking the Parallel Universe: Subinterpreters and Free-Threading in Python 3.13</title><link>https://pyvideo.org/pycon-us-2024/unlocking-the-parallel-universe-subinterpreters-and-free-threading-in-python-313.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.12 introduced a new parallel execution model called &amp;quot;sub
interpreters&amp;quot; that uses a per-interpreter GIL to unlock a new way of
writing parallel code that's faster than multiprocessing. Python 3.13
introduces another new parallel execution model called &amp;quot;free-threading&amp;quot;
(previously called &lt;em&gt;no-gil&lt;/em&gt;) that replaces that optionally removes the
GIL so that threads can truly be parallel. Does free-threading make sub
interpreters redundant? We'll answer that question in this talk. We
unpack what sub interpreters are, how to use them and their limitations.
We'll explore free-threading, the optional flag to remove the GIL in
3.13. Finally we look at a use case for sub interpreters &lt;strong&gt;and&lt;/strong&gt;
free-threading together, a multi-worker, multi-thread ASGI web server.
We benchmark this against traditional web server architecture with
multiprocessing and threading. So fasten your seatbelts, fellow
Pythonistas! Let‚Äôs ride the comet tail of parallelism, leaving behind
the single-threaded past. üöÄ‚ú®&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Shaw</dc:creator><pubDate>Sun, 19 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-19:/pycon-us-2024/unlocking-the-parallel-universe-subinterpreters-and-free-threading-in-python-313.html</guid><category>PyCon US 2024</category></item><item><title>Lightning Talks - Friday</title><link>https://pyvideo.org/pycon-us-2025/lightning-talks-friday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;2:05 - Rodrigo Gir√£o Serr√£o - Meta lightning talk
7:15 - La√≠s Carvalho - Join Humble Data!
10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff
14:40 - Quang Vu - Enhancing My Archery Practice with Computer Vision
18:55 - Meagen Voss - Maaah! How I Killed My Site with a Goat Gif
24:25 - Will Lachance - How much energy will my solar panels produce?
29:10 - Amanda Lundberg - Captioner is Human
33:55 - Thomas Weiss - Predicting Fire Weather Using Historical RAWS Data
38:25 - Tom Rutherford - The power and danger of os.fork
42:45 - Cody Maloney - Remember to .close() file-like objects
47:25 - Anthony Shaw - CSnakes: Python in .NET
52:55 - Trey Hunner - Systems, gates, and rage&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Gir√£o Serr√£o</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/lightning-talks-friday.html</guid><category>PyCon US 2025</category></item></channel></rss>