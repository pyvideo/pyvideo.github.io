<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pytexas-2014.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-05T00:00:00+00:00</updated><entry><title>A CPython Eating Its Own Tail</title><link href="https://pyvideo.org/pytexas-2014/a-cpython-eating-its-own-tail.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/a-cpython-eating-its-own-tail.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is an expert-level talk that dives into CPython and discusses
various ways to embed Python interpreters. It starts with the &amp;quot;very high
level&amp;quot; embedding &amp;amp; the &amp;quot;pure&amp;quot; embedding, shows a fairly novel &amp;quot;zero
interpreter&amp;quot; embedding using Cython, a few attempts at a ctypes/cffi
embedding, and builds to a finish with a source-filter embedding of a
Python interpreter into itself.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to have some fun diving into CPython
internals while looking practical approaches to embedding CPython
interpreters into other (C/C++) processes. The final result, a Python 3
interpreter embedded into a Python 2 interpreter as an extension model,
is novel but may be of fairly limited actual use. It is, however, pretty
wild and a lot of fun!&lt;/p&gt;
</summary></entry><entry><title>A D&amp;D-based guide to Contribution and Inclusion in the Python Community</title><link href="https://pyvideo.org/pytexas-2014/a-dd-based-guide-to-contribution-and-inclusion-i.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Kojo Idrissa</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/a-dd-based-guide-to-contribution-and-inclusion-i.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python community needs many different types of contributions to
thrive. If you ever thought, &amp;quot;I'm not a great programmer, so I can't
contribute to the Python community. :-(&amp;quot;, you're WRONG!&lt;/p&gt;
&lt;p&gt;First, using classes and roles from Dungeons &amp;amp; Dragons (D&amp;amp;D) as a lens,
we'll look at multiple contributing roles in the Python community, and
how you can find one that fits you. Not familiar with D&amp;amp;D? I'll provide
a brief, relevant primer.&lt;/p&gt;
&lt;p&gt;Next, we'll continue the discussion to see how Inclusiveness helps us
get those different contributors into the Python community. To use D&amp;amp;D
language, a party of only one class won't go far. We'll also look at how
Inclusiveness is NOT the same thing as Diversity or Political
Correctness.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous Programming with Tornado Web Server</title><link href="https://pyvideo.org/pytexas-2014/asynchronous-programming-with-tornado-web-server.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Kacie Houser</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/asynchronous-programming-with-tornado-web-server.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will define what asynchronous means and why it is useful for todays
web applications. I will also give and introduction to using Tornado web
server and go over syntax. Then I'll will do a code walk through of
small project I wrote using Tornado Web Server and virtualenv that
utilizes calls Google maps API and demonstrates asynchronous calls.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="tornado"></category></entry><entry><title>Conducting and Visualizing Set-Theoretic Social Research with Python</title><link href="https://pyvideo.org/pytexas-2014/conducting-and-visualizing-set-theoretic-social-r.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Claude Rubinson</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/conducting-and-visualizing-set-theoretic-social-r.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will discuss a suite of F/OSS programs (Python/Qt) that
I have developed for conducting &amp;quot;qualitative comparative analysis,&amp;quot; a
social research technique for analyzing subset relationships. (For
example, religious fundamentalists constitute a rough subset of
political conservatives: most religious fundamentalists are politically
conservative but most conservatives aren't religious fundamentalists.)&lt;/p&gt;
&lt;p&gt;The talk will review the process of developing the software, beginning
with an R implementation that was ultimately discarded, and outline why
I ended up choosing Python and review the consequences of that choice,
both pro and con. I will also discuss my current work on developing new
techniques for visualizing subset relationships, including different
approaches to presenting Venn and Euler diagrams. More generally, I'll
assess benefits and disadvantages of using Python for developing
academic software.&lt;/p&gt;
</summary></entry><entry><title>GIS for Python People</title><link href="https://pyvideo.org/pytexas-2014/gis-for-python-people.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Sara Safavi</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/gis-for-python-people.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It seems like everyone is talking about GIS lately, but what exactly is
it, anyway? And more importantly: as a Python user, why should you care?&lt;/p&gt;
&lt;p&gt;This talk's goal is twofold: first, to try and demystify the basic idea
of &amp;quot;GIS&amp;quot; for people who are interested in the topic and are coming from
a Python background. I'll cover general GIS concepts, talk about spatial
data, and what makes it unique. Second, to show how you might be able to
use and integrate GIS into your work. I'll go over some of the more
common Python tools available for working with GIS data, and show
examples of use-cases. Although I'll briefly touch on major GIS industry
players, my main focus will be on easily-accessible, free &amp;amp; open source
tools.&lt;/p&gt;
&lt;p&gt;This is an all-levels talk: like the title says, this is for &amp;quot;Python
People&amp;quot;! Whether you consider yourself a seasoned Python developer, an
enthusiastic fan, or are just getting started: you should be able to
learn something new while following along with the concepts &amp;amp; examples
I'll discuss.&lt;/p&gt;
</summary></entry><entry><title>How to get started and keep going with Python</title><link href="https://pyvideo.org/pytexas-2014/how-to-get-started-and-keep-going-with-python.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Constanze Kratel</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/how-to-get-started-and-keep-going-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you have decided that you want to learn Python. Right now there are
lots of resources available for people who want to learn Python. But how
do you keep going once you have embarked on this path? This talk draws
on my personal experiences as I’m working on becoming proficient with
Python programming. It aims at encouraging novices in Python to take
advantage of all the resources that are available to become proficient.&lt;/p&gt;
</summary></entry><entry><title>How to write dumber tests</title><link href="https://pyvideo.org/pytexas-2014/how-to-write-dumber-tests.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Luke Lee</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/how-to-write-dumber-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing and debugging code is hard, but testing shouldn't be. This talk
will discuss common techniques for writing simpler tests that still
exercise your production code while preventing you from spending time
debugging test code.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2014/lightning-talks-11.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/lightning-talks-11.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:00) - Sasha Hart -- Make PyPI Fast&lt;/li&gt;
&lt;li&gt;(0:01:36) - Sasha Hart -- Find Your Editor&lt;/li&gt;
&lt;li&gt;(0:04:17) - Jeff Rush -- Ways to Call Out&lt;/li&gt;
&lt;li&gt;(0:06:28) - Jeff Rush -- Weak References&lt;/li&gt;
&lt;li&gt;(0:08:17) - James Powell -- Newton's Method&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Modeling Dollar and Community Currency Flows in a Virtual US County Using Python</title><link href="https://pyvideo.org/pytexas-2014/modeling-dollar-and-community-currency-flows-in-a.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>John Boik</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/modeling-dollar-and-community-currency-flows-in-a.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;John Boik is the author of the new book &amp;quot;Economic Direct Democracy: A
Framework to End Poverty and Maximize Well-Being.&amp;quot; John will delve into
his Python-based simulation model of flows of the dollar and a proposed
community currency (called the token) in a virtual US county. He gives
background on the proposed community currency system, called the Token
Exchange System, explores how the model is structured, presents modeling
results, and discusses potential social impact as guided and informed
his book's thesis. As a hint of scale and potential impact, annual
currency flows in the simulation model are measured in the billions. A
global partnership of interested academic, civil society, government,
business, and philanthropy groups is now forming to move the book's
proposal forward.&lt;/p&gt;
&lt;p&gt;Simulation model background:
&lt;a class="reference external" href="http://www.principledsocietiesproject.org/simulation-model/"&gt;http://www.principledsocietiesproject.org/simulation-model/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python TES-simulation Package:
&lt;a class="reference external" href="https://pypi.python.org/pypi/TES-simulation"&gt;https://pypi.python.org/pypi/TES-simulation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Project and book details: &lt;a class="reference external" href="http://www.principledsocietiesproject.org/"&gt;http://www.principledsocietiesproject.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Mogwai: Graph Databases in your App</title><link href="https://pyvideo.org/pytexas-2014/mogwai-graph-databases-in-your-app.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Cody Lee</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/mogwai-graph-databases-in-your-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graph Databases can be very powerful when used correctly, unfortunately
the landscape is still very young, let alone finding a python library to
interface with your database. Here we will cover Titan (a highly
scalable graph database) and Mogwai (a python OGM, maintained by me) to
interface with the database in an intuitive and easy fashion.&lt;/p&gt;
&lt;p&gt;We'll very quickly cover the concept of graph databases, and interacting
with Titan via the Gremlin REPL. Following that we'll go headstrong into
working with Mogwai and create a simple web API.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mogwai.readthedocs.org/"&gt;http://mogwai.readthedocs.org/&lt;/a&gt; &lt;a class="reference external" href="http://bitbucket.org/wellaware/mogwai"&gt;http://bitbucket.org/wellaware/mogwai&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>PostgreSQL 9.4's "jsonb" Document Store</title><link href="https://pyvideo.org/pytexas-2014/postgresql-94s-jsonb-document-store.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Micah Yoder</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/postgresql-94s-jsonb-document-store.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will give an intro to PostgreSQL's &amp;quot;jsonb&amp;quot; JSON document store; how it
compares to MongoDB; guidelines for choosing between SQL-only,
SQL+jsonb, and MongoDB; and using it from Python.&lt;/p&gt;
</summary></entry><entry><title>Python on the Brain: A Quick Dive into NuPIC</title><link href="https://pyvideo.org/pytexas-2014/python-on-the-brain-a-quick-dive-into-nupic.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Jeff Kramer</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/python-on-the-brain-a-quick-dive-into-nupic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At OSCON 2013 Numenta's Jeff Hawkin presented NuPIC, an open source
implementation of his theories on how the brain stores information,
makes connections between entities, and predicts the future. In this
talk we'll do a quick overview of the neocortical theory, and then dive
into an interesting code example of how NuPIC works, and build a simple,
fun neocortical prediction app in python.&lt;/p&gt;
</summary></entry><entry><title>Reliable Testing &amp; Deployments with pip and Wheels</title><link href="https://pyvideo.org/pytexas-2014/reliable-testing-deployments-with-pip-and-wheel.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/reliable-testing-deployments-with-pip-and-wheel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I plan to briefly introduce pip requirements files and the wheel format.
I will then demonstrate an approach for structuring requirements files,
using &amp;quot;snapshot&amp;quot; requirement files, and building &amp;quot;wheelhouses&amp;quot; that get
committed to your VCS. This approach has the following benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;known working &amp;amp; tested dependencies are clearly communicated between
developers&lt;/li&gt;
&lt;li&gt;project setup for new developers is simplified&lt;/li&gt;
&lt;li&gt;build servers no longer throw erroneous errors if PyPI is down&lt;/li&gt;
&lt;li&gt;production environments no longer need build tools installed on them&lt;/li&gt;
&lt;li&gt;production environments are guaranteed to be running on the same
version of dependencies that were developed on and tested&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Running in the USA: Analysis of World-Wide GPS Tracks in Running Events</title><link href="https://pyvideo.org/pytexas-2014/running-in-the-usa-analysis-of-world-wide-gps-tr.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Kyler Eastman</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/running-in-the-usa-analysis-of-world-wide-gps-tr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MapMyFitness is an open fitness tracking platform that collects hundreds
of thousands of tracks every day from GPS fitness devices around the
planet. Within this massive database of fitness activity lies untold
insights into human behavior. In this talk, I'll show how I use
Python-based analysis tools for identifying running events, from 5ks to
marathons). Using a combination of Amazon Redshift SQL, scipy,
matplotlib &amp;amp; pandas, I'll show how you can glean a variety of insight
into running event performance, from weather and training effects on
speed, to regional &amp;amp; demographic differences in attendance.&lt;/p&gt;
</summary></entry><entry><title>Snakes in Sheets</title><link href="https://pyvideo.org/pytexas-2014/snakes-in-sheets.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Abhipray Sahoo</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/snakes-in-sheets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microsoft Excel continues to be popular across many industries where
data analysis is fundamental to success. It marries powerful
organization and presentation functionality to sift through large
datasets. However, the default scripting language for Excel, VBA, is
often cumbersome to use. Python is maturing as a quantitative scripting
language with a growing scientific community around it, so it makes
great sense to marry Excel’s user interface with Python’s extensive data
acquisition and analysis libraries.&lt;/p&gt;
&lt;p&gt;This talk introduces you to Pyinex, an open source project to embed a
Python interpreter within an Excel addin. It directly exposes Python
user defined functions as Excel worksheet functions, allows users to
call arbitrary Python code from within Excel, and provides an
interactive Python session all from within the same process space.
Pyinex brings to Excel all the goodies of Python—data analysis using
SciPy, NumPy, Pandas and more; integration with databases, web services,
and other network resources; rapid function prototyping; extensive
library support; and so much more.&lt;/p&gt;
&lt;p&gt;This talk will demonstrate the capabilities of Pyinex and give an
overview of how it works internally. The aim is to present the tool for
both end-users and developers to inspire the audience thinking of new
use cases and spark conversation on how to further improve the project.&lt;/p&gt;
</summary></entry><entry><title>Swift for Pythonistas</title><link href="https://pyvideo.org/pytexas-2014/swift-for-pythonistas.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Andrew Donoho</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/swift-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Swift, Apple's new iOS/OS X programming language, is remarkably
Pythonic. Is it easy for a Pythonista to start writing iOS apps? This
talk will expose you briefly to Swift, the development environment and
discuss the biggest differences between Python and Swift. After this
talk, you will know how to approach the platform and see if Swift
programming is for you.&lt;/p&gt;
</summary></entry><entry><title>Visualizing Twitter Data with Blaze and Bokeh</title><link href="https://pyvideo.org/pytexas-2014/visualizing-twitter-data-with-blaze-and-bokeh.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>Christine Doig</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/visualizing-twitter-data-with-blaze-and-bokeh.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making nice interactive data visualizations in the browser should be
easy and fun! Let's explore tweets with simple IPython notebooks, a
Blaze interface and Bokeh plots!&lt;/p&gt;
&lt;p&gt;Bokeh is a Python interactive visualization library that targets modern
web browsers for presentation. Its goal is to provide elegant, concise
construction of novel graphics in the style of D3.js, but also deliver
this capability with high-performance interactivity over very large or
streaming datasets. &lt;a class="reference external" href="http://bokeh.pydata.org/"&gt;http://bokeh.pydata.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blaze provides a uniform and adaptable interface to access a variety of
backends, which include streaming Python, Pandas, SQLAlchemy, and Spark.
&lt;a class="reference external" href="http://blaze.pydata.org/"&gt;http://blaze.pydata.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>An Introduction to AngularJS for the Python Web Developer</title><link href="https://pyvideo.org/pytexas-2014/an-introduction-to-angularjs-for-the-python-web-d.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paul Bailey</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/an-introduction-to-angularjs-for-the-python-web-d.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to AngularJS and how to use it in your Python web app.
This talk will cover different web architectures and how Python and
AngularJS fit together to implement them. It will also cover the
frontend concepts introduced by the AngularJS and how to use them.&lt;/p&gt;
</summary></entry><entry><title>Ascending the Summit: Using Selenium to test web applications</title><link href="https://pyvideo.org/pytexas-2014/ascending-the-summit-using-selenium-to-test-web.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Hari Radhakrishnan</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/ascending-the-summit-using-selenium-to-test-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We built a testing suite, Summit, in Python using Selenium to
functionally test our application, the Decisio Health Patient Dashboard.&lt;/p&gt;
&lt;p&gt;I intend to show how that testing suite got us through the FDA 510(k)
clearance process and how to use Selenium and Python to test an
application in a headless and graphical browser.&lt;/p&gt;
</summary></entry><entry><title>Building concurrent network applications with asyncio</title><link href="https://pyvideo.org/pytexas-2014/building-concurrent-network-applications-with-asy.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/building-concurrent-network-applications-with-asy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I'll introduce the &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; module, which was recently
added to the Python standard library. I'll talk about the problems that
can be solved with asynchronous I/O and will show how the tools provided
by the module, including event loops, coroutines, and futures, along
with Python's new &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; syntax, can be used to build a
concurrent network application.&lt;/p&gt;
</summary></entry><entry><title>Case Study: Using Git to manage UI derived configuration Elements</title><link href="https://pyvideo.org/pytexas-2014/case-study-using-git-to-manage-ui-derived-config.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Doug Matzke</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/case-study-using-git-to-manage-ui-derived-config.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Git is common choice for DVCS by software development teams. This case
study describes a python system called ClicBank, that captures domain
specific UI entity definitions (in medical insurance industry) as XML
files and manages changes in the configurations using open source Git
modules. This case study will describe the use cases driving this
design, design choices, schema approach, implementation decisions,
python modules, workspace/repository design, number of managed entities,
GIT performance and status of project.&lt;/p&gt;
</summary></entry><entry><title>Creating a browser-based virtual computer lab for teaching and collaboration</title><link href="https://pyvideo.org/pytexas-2014/creating-a-browser-based-virtual-computer-lab-fo.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Ramalingam Saravanan</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/creating-a-browser-based-virtual-computer-lab-fo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With laptops and tablets becoming more powerful and more ubiquitous in
the classroom, traditional computer labs with rows of expensive desktop
computers are slowly beginning to lose their relevance. An alternative
approach for computer-assisted instruction is to use a browser-based
virtual computer lab. The different approaches to providing a virtual
computing environment for Python, and the associated challenges, will be
discussed. Options for providing a multi-user environment include
running a public IPython Notebook server, or using alternative
free/commercial solutions that incorporate the notebook interface, such
as JiffyLab, Sage Math Cloud, GraphTerm, and Wakari. A virtual computer
lab implemented using the GraphTerm server will be described. The
advantages of physical computer labs, such as face-to-face interaction,
and the challenge of replicating them in a virtual environment will be
discussed as well.&lt;/p&gt;
</summary></entry><entry><title>Dates &amp; Time: pain points, useful libraries, and testing considerations</title><link href="https://pyvideo.org/pytexas-2014/dates-time-pain-points-useful-libraries-and.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/dates-time-pain-points-useful-libraries-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Date &amp;amp; Time handling in Python has it's ups &amp;amp; downs. In this talk, we
will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;some of the pain points and weaknesses in the Python standard library&lt;/li&gt;
&lt;li&gt;two libraries I have found helpful: dateutils and arrow&lt;/li&gt;
&lt;li&gt;best practices for working with timezones&lt;/li&gt;
&lt;li&gt;best practices for testing code that deals with dates and time&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Democratization of Open Data with Python &amp; Open Source</title><link href="https://pyvideo.org/pytexas-2014/democratization-of-open-data-with-python-open-s.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Espartaco Palma</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/democratization-of-open-data-with-python-open-s.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the beginning of 2000s, Eric von Hippel has presented Models on
how Paradigm Shift from Producer Innovation to User and Open
Collaborative Innovation, this can be true not only on products, also in
how the users can produce innovation on service like the OpenData &amp;amp; Open
Government, don't need the main publisher, researcher or Government
provide all the work. The communities can push more innovation around
this new services.&lt;/p&gt;
&lt;p&gt;Nowadays, everybody can improve the data available, curate, create,
publish and provide more value on public &amp;amp; open data. Learn a framework
like Flask is more accessible than ever, host &amp;amp; publish REST services
for free, host the code of project for free also. It's democratizing all
the way. All can be done with Python.&lt;/p&gt;
&lt;p&gt;In this presentation I'll demonstrate how can use GitHub to publish a
data sets (and proper updates) and the code of the Python REST API with
no more than 100 lines of code which can be deployed on local
installation, plus, with few commands, deploy on a service with a free
tier like OpenShift for a worldwide audience.&lt;/p&gt;
</summary></entry><entry><title>Generators Will Free Your Mind</title><link href="https://pyvideo.org/pytexas-2014/generators-will-free-your-mind-0.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/generators-will-free-your-mind-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are generators and coroutines in Python? What additional
conceptualisations do they offer, and how can we use them to better
model problems? It's an intermediate-level talk around the core concept
of generators with a lot of examples of not only neat things you can do
with generators but also new ways to model and conceptualise problems.&lt;/p&gt;
&lt;p&gt;Generators are one of the most notable features of Python, and they are
a critical component of Python 3's driving focus on iterability as a
core protocol. This talk introduces the basic concepts surrounding
generators, generator expressions, and co-routines, then dives into ways
that generators can improve our code: not just in terms of performance
but also by offering us better ways to model our problems.&lt;/p&gt;
</summary></entry><entry><title>Getting along with Python</title><link href="https://pyvideo.org/pytexas-2014/getting-along-with-python.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Sasha Hart</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/getting-along-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've finished your introductory course or tutorial on Python, you
feel good about your knowledge of the language, and you might have some
projects under your belt. What now? How about some of the things that
aren't really code, which nobody really teaches you in a class or
tutorial, which can take years to learn by yourself? That's what this
talk is about: a few of the most common pain points for Python
programmers which can easily be avoided by adopting certain tools and
practices &amp;quot;around&amp;quot; the coding itself. Not coincidentally, the same tips
might also help improve your code and make your life with other Python
programmers more harmonious. Material will roughly summarize/follow the
contents of &lt;a class="reference external" href="http://gawp.sashahart.net"&gt;http://gawp.sashahart.net&lt;/a&gt;, as a general and gently
opinionated tour of common practices in the Python community.&lt;/p&gt;
</summary></entry><entry><title>Graph Databases via Networkx</title><link href="https://pyvideo.org/pytexas-2014/graph-databases-via-networkx.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Jeremy Langley</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/graph-databases-via-networkx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graph databases are a different way to approach your data. I'll be
talking about techniques from social network analysis to do some toy
problems to get you thinking in a different direction using a library
called Networkx.&lt;/p&gt;
</summary></entry><entry><title>High Resolution Reader for Traffic Signal Controllers</title><link href="https://pyvideo.org/pytexas-2014/high-resolution-reader-for-traffic-signal-control.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>John Black</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/high-resolution-reader-for-traffic-signal-control.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;see signalengineer.com for a description of this project offered as open
source on github&lt;/p&gt;
&lt;p&gt;topics I would like to cover if given 20-25 minutes&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;short background on traffic signal control&lt;/li&gt;
&lt;li&gt;the Purdue specification for high resolution (0.1 second) data logs&lt;/li&gt;
&lt;li&gt;interfacing the traffic signal controller by writing a Python shell
around WinSCP&lt;/li&gt;
&lt;li&gt;interfacing SQLite and CSV data using Python&lt;/li&gt;
&lt;li&gt;developing a user interface using QtDesigner and Pyside&lt;/li&gt;
&lt;li&gt;the need for threading in the Qt user interface and other lessons
learned through this project&lt;/li&gt;
&lt;li&gt;developing documentation with Sphinx and using WebKit to display it
within the Qt interface&lt;/li&gt;
&lt;li&gt;wrapping the project with cx_freeze&lt;/li&gt;
&lt;li&gt;using the Inno Setup Compiler to create a windows setup file for the
finished project&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>I ♥ Maps: Quantum GIS + Python</title><link href="https://pyvideo.org/pytexas-2014/i-maps-quantum-gis-python.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paige Bailey</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/i-maps-quantum-gis-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quantum GIS (QGIS) is an open-source, highly customizable geospatial
application that's great for data exploration, manipulation, and
cartographic preparation -- in other words, it's software that allows
you to make detailed, aesthetically-pleasing maps for free!&lt;/p&gt;
&lt;p&gt;QGIS is also &lt;em&gt;extremely&lt;/em&gt; script-able with Python, and integrates with a
large number of database and analysis backends (GRASS, R, PostGIS,
etc.). In this talk, Paige Bailey will be giving a short overview of
QGIS; detailing a few mapping case studies; then showing how to leverage
additional functionality by writing custom Python plugins.&lt;/p&gt;
</summary></entry><entry><title>Is your helper library opinionated enough?</title><link href="https://pyvideo.org/pytexas-2014/is-your-helper-library-opinionated-enough.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paul Murphy</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/is-your-helper-library-opinionated-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a constant debate.&lt;/p&gt;
&lt;p&gt;How do you build a helper library?&lt;/p&gt;
&lt;p&gt;At one end of the spectrum we have Runscope CEO John Sheehan who thinks
that helper libraries are evil and shouldn't exist at all. At the other
we find helper libraries that don't look or smell anything like the API.
And somewhere in the middle we have helper libraries that are so close
to the API itself that they are nothing more than a thin veneer.&lt;/p&gt;
&lt;p&gt;Which is better? Who’s right? The real question to me is how idiomatic
should a helper library be? Should a Django library make a Django
developer feel comfortable, or should she have to read the API docs to
understand how it works? Should a Python library look RESTful, or should
it look like a hierarchy of classes?&lt;/p&gt;
&lt;p&gt;At our company, we maintain two libraries. They both have advantages and
disadvantages, they appeal to different developers, and sometimes even
the same developer at different times.&lt;/p&gt;
</summary></entry><entry><title>Keynote - Developer Experience: Marketing matters</title><link href="https://pyvideo.org/pytexas-2014/keynote-developer-experience-marketing-matters.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Jesse Noller</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/keynote-developer-experience-marketing-matters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;In room 2300A&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="come-and-be-amazed"&gt;
&lt;h4&gt;Come and Be Amazed!!&lt;/h4&gt;
&lt;div class="figure"&gt;
&lt;img alt="Alt text" src="https://pbs.twimg.com/media/Bv-GL8uCcAAVN7d.jpg:large" /&gt;
&lt;p class="caption"&gt;Alt text&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Python and Spreadsheets: State of the Union, Oct 2014</title><link href="https://pyvideo.org/pytexas-2014/python-and-spreadsheets-state-of-the-union-oct.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Kojo Idrissa</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/python-and-spreadsheets-state-of-the-union-oct.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At PyTexas 2013 I gave a talk on using Python to work with spreadsheets.
The landscape is rapidly changing and the options have expanded. This
talk will be a whirlwind tour of your options for using Python with
spreadsheets (NOT just Excel) as of late 2014. From processing
spreadsheet &lt;em&gt;files&lt;/em&gt; to using Python to directly control a spreadsheet
app, we'll see what's available, with a focus on how it can help &lt;strong&gt;you&lt;/strong&gt;
with what you work on.&lt;/p&gt;
</summary></entry><entry><title>Snake charming with pyenv</title><link href="https://pyvideo.org/pytexas-2014/snake-charming-with-pyenv.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Douglas Mendizábal</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/snake-charming-with-pyenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll discuss how to use pyenv to manage multiple versions
of python to allow you to develop and test your code in Python 2, Python
3, pypy, etc.&lt;/p&gt;
</summary></entry><entry><title>Command line interfaces are easy, use them</title><link href="https://pyvideo.org/pytexas-2014/the-command-line-interface-because-why-not.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Eloy Zuniga Jr.</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/the-command-line-interface-because-why-not.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a useful and pleasant command line experience is easy. If
you've never really tried adding a command line interface (CLI) to your
python scripts or maybe you still have a bitter taste in your mouth from
the days of sys.argv, getopt, optparse, and argparse.&lt;/p&gt;
&lt;p&gt;I invite you to take another look ... or your first look at command line
interfaces and how easy and useful it is for your progress and sanity.&lt;/p&gt;
&lt;p&gt;Comparing &lt;tt class="docutils literal"&gt;Begins&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DocOpt&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Click&lt;/tt&gt;&lt;/p&gt;
</summary><category term="click"></category><category term="Commandline"></category></entry><entry><title>Unlocking Data Trapped in Audio and Video Files</title><link href="https://pyvideo.org/pytexas-2014/unlocking-data-trapped-in-audio-and-video-files.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paul Murphy</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/unlocking-data-trapped-in-audio-and-video-files.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more and more apps record audio and video files we need to start
thinking about what to do with those files. Playing them back isn't
enough. Media files are full of data that developers can start
exploiting thanks to an emergent category of signal and natural language
processing APIs.&lt;/p&gt;
&lt;p&gt;There are only 3 options for processing the words embedded in these
files:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Transcribe them yourself, manually.&lt;/li&gt;
&lt;li&gt;Find a transcript made by someone else.&lt;/li&gt;
&lt;li&gt;Use a library that extracts the words for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the developer of a python library that automates the extraction and
processing of words in media files, I'll demonstrate how easy it is to
make audio and video libraries fully searchable, create a word cloud of
keywords from a recorded phone call, and extract topics from news
broadcast.&lt;/p&gt;
&lt;p&gt;I'll show coding examples as well as products using this API.&lt;/p&gt;
</summary></entry><entry><title>When Scrum goes horribly wrong</title><link href="https://pyvideo.org/pytexas-2014/when-scrum-goes-horribly-wrong.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Bryan Haardt</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/when-scrum-goes-horribly-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The purpose of this talk is to provide an accounting of why Agile/Scrum
projects fail. We will define failure, discuss reason(s) an Agile
managed project ends in failure fail and offer solutions to the most
common causes of failed projects.&lt;/p&gt;
</summary></entry><entry><title>3 hours to Docker fundamentals: Jumpstart your Docker knowledge</title><link href="https://pyvideo.org/pytexas-2014/3-hours-to-docker-fundamentals-jumpstart-your-do.html" rel="alternate"></link><published>2014-10-03T00:00:00+00:00</published><updated>2014-10-03T00:00:00+00:00</updated><author><name>Aater Suleman</name></author><id>tag:pyvideo.org,2014-10-03:pytexas-2014/3-hours-to-docker-fundamentals-jumpstart-your-do.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker, the new trending containerization technique, is gaining interest
from organizations of all sizes with its lightweight, portable, “build
once, configure once and run anywhere” functionalities. Docker skills
are expected to be in high-demand because of its ability to streamline
workflow and reduce the need for hardware investment.&lt;/p&gt;
&lt;p&gt;This tutorial focuses on providing an in-depth understanding of Docker
and how to containerize Python web applications. Docker provides a
mechanism for low overhead virtualization and can be a key aspect of a
DevOps architecture. Docker allows isolated environments to be created
in a single machine without imposing a performance overhead. This leads
to new possibilities for optimizing the developer flows and creating
multi-tenant applications, saving time coding and improving quality.&lt;/p&gt;
&lt;p&gt;This tutorial will highlight a list of best practices, pitfalls, and dos
and dont’s from real-world case studies. We’ll walk through:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic concepts and Docker terminology&lt;/li&gt;
&lt;li&gt;Docker Commands&lt;/li&gt;
&lt;li&gt;Must Know Docker Features&lt;/li&gt;
&lt;li&gt;Docker in the real world using examples of projects implemented at
Flux7&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python 101++: Let's Get Down to Business</title><link href="https://pyvideo.org/pytexas-2014/python-101-lets-get-down-to-business.html" rel="alternate"></link><published>2014-10-03T00:00:00+00:00</published><updated>2014-10-03T00:00:00+00:00</updated><author><name>Paige Bailey</name></author><id>tag:pyvideo.org,2014-10-03:pytexas-2014/python-101-lets-get-down-to-business.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've started the Codecademy and Coursera courses; you've thumbed
through Zed Shaw's &amp;quot;Learn Python the Hard Way&amp;quot;; and now you're itching
to see what Python can help you do. This is the workshop for you!&lt;/p&gt;
&lt;p&gt;Here's the breakdown: we're going to be taking you on a whirlwind tour
of Python's capabilities. By the end of the workshop, you should be able
to easily follow any of the widely available Python courses on the
internet, and have a grasp on some of the more complex aspects of the
language.&lt;/p&gt;
&lt;p&gt;Please don't forget to bring your personal laptop!&lt;/p&gt;
&lt;p&gt;Audience: This course is aimed at those who already have some basic
programming experience, either in Python or in another high level
programming language (such as C/C++, Fortran, Java, Ruby, Perl, or
Visual Basic). If you're an absolute beginner -- new to Python, and new
to programming in general -- make sure to check out the &amp;quot;Python 101&amp;quot;
workshop!&lt;/p&gt;
&lt;p&gt;chapters: (00:00) (0:01:33) (0:01:39) (0:09:39) (0:10:24) (0:14:34)
(0:18:11) (0:23:45) (0:24:06) (0:25:37) (0:37:31) (1:28:25) (1:28:27)&lt;/p&gt;
</summary></entry><entry><title>Python 101: Python for Absolute Beginners</title><link href="https://pyvideo.org/pytexas-2014/python-101-python-for-absolute-beginners.html" rel="alternate"></link><published>2014-10-03T00:00:00+00:00</published><updated>2014-10-03T00:00:00+00:00</updated><author><name>Paige Bailey</name></author><id>tag:pyvideo.org,2014-10-03:pytexas-2014/python-101-python-for-absolute-beginners.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're absolutely new to Python, and to programming in general, this
is the place to start!&lt;/p&gt;
&lt;p&gt;Here's the breakdown: by the end of this workshop, you'll have Python
downloaded onto your personal machine; have a general idea of what
Python can help you do; be pointed in the direction of some excellent
practice materials; and have a basic understanding of the syntax of the
language.&lt;/p&gt;
&lt;p&gt;Please don't forget to bring your laptop!&lt;/p&gt;
&lt;p&gt;Audience: &amp;quot;Python 101&amp;quot; is geared toward individuals who are new to
programming. If you've had some programming experience (shell scripting,
MATLAB, Ruby, etc.), then you'll probably want to check out the more
intermediate workshop, &amp;quot;Python 101++&amp;quot;.&lt;/p&gt;
</summary></entry></feed>