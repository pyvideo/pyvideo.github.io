<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 23 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>Lessons learned from serving 1/4 million in-browser Python consoles with Tornado</title><link>https://pyvideo.org/europython-2013/lessons-learned-from-serving-14-million-in-browser-python-consoles-with-tornado.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giles Thomas</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/lessons-learned-from-serving-14-million-in-browser-python-consoles-with-tornado.html</guid></item><item><title>An HTTP request's journey through a platform-as-a-service</title><link>https://pyvideo.org/europython-2014/an-http-requests-journey-through-a-platform-as-a.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PythonAnywhere hosts tens of thousands of Python web applications, with
traffic ranging from a couple of hits a week to dozens of hits a second.
Hosting this many sites reliably at a reasonable cost requires a
well-designed infrastructure, but it uses the same standard components
as many other Python-based websites. We've built our stack on GNU/Linux,
nginx, uWSGI, Redis, and Lua -- all managed with Python. In this talk
we'll give a high-level overview of how it all works, by tracing how a
request goes from the browser to the Python application and its response
goes back again. As well as showing how a fairly large deployment works,
we'll give tips on scaling and share a few insights that may help people
running smaller sites discover how they can speed things up.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giles Thomas</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/an-http-requests-journey-through-a-platform-as-a.html</guid></item><item><title>Friday Afternoon Lightning Talks</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--friday-afternoon-lightning-talks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Friday afternoon lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Friday afternoon lightning talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Paul Smith - Raising money for Japan&lt;/li&gt;
&lt;li&gt;02:24 Jeff Daily - The Global Arrays Parallel Programming Toolkit&lt;/li&gt;
&lt;li&gt;08:30 Matt Harrison - My insecurity problem&lt;/li&gt;
&lt;li&gt;13:10 Pete Fein - Hacking for Freedom&lt;/li&gt;
&lt;li&gt;18:40 Robert Brewer - logging.statistics&lt;/li&gt;
&lt;li&gt;27:30 Nathan Nichols - Lessons Learned Writing DSLs for Automated
Content Generation&lt;/li&gt;
&lt;li&gt;33:15 Giles Thomas - Why Resolver switched from IronPython to CPython
japan, qtile, pyparsing, logging.statistics, resolver, cpython,
ironpython&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Smith</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--friday-afternoon-lightning-talks.html</guid><category>lightning talks</category><category>cpython</category><category>ironpython</category><category>japan</category><category>logging.statistics</category><category>pycon</category><category>pycon2011</category><category>pyparsing</category><category>qtile</category></item></channel></rss>