<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jacob-cook.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-19T00:00:00+00:00</updated><entry><title>Playing nice with Django and React</title><link href="https://pyvideo.org/pycon-ca-2017/playing-nice-with-django-and-react.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Jacob Cook</name></author><id>tag:pyvideo.org,2017-11-19:pycon-ca-2017/playing-nice-with-django-and-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For a web developer that's used to using Python frameworks like Django or Flask, getting into the world of frontend web development using modern JavaScript isn't always easy. For instance, there is no immediate solution to making new single-page application (SPA) frameworks work well with Django's rendering architecture, especially if you just want to make something simple. This talk will explore the differences between how Django renders web pages and how these JS frameworks expect you to do it, and how to marry the two approaches without reinventing the wheel (or using a heavy library that makes customization difficult). We will look in detail at a few of these concepts, then walk through a fun demo that shows just how efficient and developer-friendly this pattern can be.&lt;/p&gt;
&lt;p&gt;This talk is primarily aimed at beginners to frontend web development who may have been around the block with Django once or twice but are not fully on board with the concepts behind the modern JavaScript stack or with React. Those who come from the world of frontend web development and who are new to Django or Flask may also find this talk interesting.&lt;/p&gt;
</summary></entry><entry><title>arkOS: Your Data, Your Rules</title><link href="https://pyvideo.org/montreal-python/arkos-your-data-your-rules.html" rel="alternate"></link><published>2014-05-12T00:00:00+00:00</published><updated>2014-05-12T00:00:00+00:00</updated><author><name>Jacob Cook</name></author><id>tag:pyvideo.org,2014-05-12:montreal-python/arkos-your-data-your-rules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - arkOS is an operating system and front-end software stack dedicated to setting up easy self-hosted servers on inexpensive hardware like the Raspberry Pi. arkOS' flagship tool Genesis manages all aspects of a system and its software, and is based entirely in Python. Lead programmer Jacob Cook walks through the software and its frameworks, how they work, and why self-hosting in principle is becoming more and more important.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;arkOS: &lt;a class="reference external" href="https://arkos.io/"&gt;https://arkos.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jacob: &lt;a class="reference external" href="https://twitter.com/peakwinter"&gt;https://twitter.com/peakwinter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP46: &lt;a class="reference external" href="http://sflx.ca/mp46e"&gt;http://sflx.ca/mp46e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>