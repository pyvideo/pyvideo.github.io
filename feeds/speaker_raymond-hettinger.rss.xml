<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 May 2019 12:10:00 +0000</lastBuildDate><item><title>Modern solvers: Problems well-defined are problems solved</title><link>https://pyvideo.org/pycon-us-2019/modern-solvers-problems-well-defined-are-problems-solved.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every programmer should learn to use solvers, tools that reason directly
from a description of a problem to its solution.&lt;/p&gt;
&lt;p&gt;Tools like AlphaZero can formulate winning strategies for games given
only a description of the rules of the game. For certain classes of
problems, we really can just let the computer do the work.&lt;/p&gt;
&lt;p&gt;In this talk, we learn principles, techniques, and multiple examples for
three solvers available in Python.&lt;/p&gt;
&lt;p&gt;The first tool is a generic puzzle-solving framework that employs tree
search strategies. We apply it to a simple sequencing problem and then
to a harder sliding-block puzzle. Next, we'll look at the solver code to
learn how it works. I'll also show an essential optimization technique
and how to humanize the output. We demonstrate our skills by solving
another famous puzzle.&lt;/p&gt;
&lt;p&gt;The second tool is called a SAT solver. It is one of the miracles of the
21st century. From first principles, I'll show you what problems it
solves and the way problems need to be described for modules like
&lt;em&gt;PycoSAT&lt;/em&gt;. I'll provide helper functions to humanize our interactions
with this great tool. Then, we'll demonstrate our skills by creating a
Sudoku solver and a readable logic problem solver.&lt;/p&gt;
&lt;p&gt;The third tool is the &amp;quot;multi-armed bandit&amp;quot;. It is a generic
reinforcement learning algorithm that is easy to learn, powerful, and
applicable to a broad class of problems. We apply it to winning
rock-paper-scissors using pattern recognition.&lt;/p&gt;
&lt;p&gt;Lastly, I'll summarize DeepMind's paper on AlphaZero which was published
in the December 2018 edition of &lt;em&gt;Science&lt;/em&gt;. This gives us hints at the
full potential of these techniques.&lt;/p&gt;
&lt;p&gt;Pure Python source code and examples are provided for all of the tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 03 May 2019 12:10:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-us-2019/modern-solvers-problems-well-defined-are-problems-solved.html</guid><category>talk</category></item><item><title>Keynote - Preventing, Finding, and Fixing Bugs On a Time Budget</title><link>https://pyvideo.org/pybay-2018/keynote-preventing-finding-and-fixing-bugs-on-a-time-budget.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-18:pybay-2018/keynote-preventing-finding-and-fixing-bugs-on-a-time-budget.html</guid></item><item><title>Dataclasses: The code generator to end all code generators</title><link>https://pyvideo.org/pycon-us-2018/dataclasses-the-code-generator-to-end-all-code-generators.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PEP 557 dataclasses module is available in starting in Python 3.7.   It will become an essential part of every Python programmer's toolkit.  This talk shows what problem the module solves, explains its key design decisions, and provides practical examples of how to put it to work.&lt;/p&gt;
&lt;p&gt;Dataclasses are shown to be the next step in a progression of data aggregation tools: tuple, dict, simple class, bunch recipe, named tuples, records, attrs, and then dataclasses. Each builds upon the one that came before, adding expressiveness at the expense of complexity.&lt;/p&gt;
&lt;p&gt;Dataclasses are unique in that they let you selectively turn-on or turn-off its various capabilities and it lets the user choose the underlying data store (either instance dictionary, instance slots, or an inherited base class).&lt;/p&gt;
&lt;p&gt;Dataclasses and typing.NamedTuple both use variable annotations which were new in Python 3.6.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/dataclasses-the-code-generator-to-end-all-code-generators.html</guid><category>dataclasses</category></item><item><title>Keynote on Concurrency</title><link>https://pyvideo.org/pybay-2017/keynote-on-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote for PyBay 2017, the 2nd annual Regional Python Conference in SF&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-12:pybay-2017/keynote-on-concurrency.html</guid><category>keynote</category></item><item><title>Modern Python Dictionaries -- A confluence of a dozen great ideas</title><link>https://pyvideo.org/pycon-us-2017/modern-python-dictionaries-a-confluence-of-a-dozen-great-ideas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's dictionaries are stunningly good. Over the years, many great
ideas have combined together to produce the modern implementation in
Python 3.6.&lt;/p&gt;
&lt;p&gt;This fun talk uses pictures and little bits of pure python code to
explain all of the key ideas and how they evolved over time.&lt;/p&gt;
&lt;p&gt;Includes newer features such as key-sharing, compaction, and versioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/modern-python-dictionaries-a-confluence-of-a-dozen-great-ideas.html</guid></item><item><title>Thinking about Concurrency</title><link>https://pyvideo.org/pycon-russia-2016/thinking-about-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Walk through two examples of threading and multiprocessing to illustrate rules and best practices for taking advantage of concurrency.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Processes versus threads&lt;/li&gt;
&lt;li&gt;Fear and respect.  Methodology and Confidence&lt;/li&gt;
&lt;li&gt;Role of testing and fuzzing&lt;/li&gt;
&lt;li&gt;Race conditions and sequencing issues&lt;/li&gt;
&lt;li&gt;Locks versus flags&lt;/li&gt;
&lt;li&gt;Resource isolation and atomic message queues&lt;/li&gt;
&lt;li&gt;Sequencing by placing tasks in one thread&lt;/li&gt;
&lt;li&gt;Barriers that wait for parallel threads to complete&lt;/li&gt;
&lt;li&gt;Monitoring progress of daemon threads&lt;/li&gt;
&lt;li&gt;Thread local variables versus global state&lt;/li&gt;
&lt;li&gt;Advantages and disadvantages of processes&lt;/li&gt;
&lt;li&gt;Parallelizable tasks versus intrinsically sequential tasks&lt;/li&gt;
&lt;li&gt;Performance killers, the three most common mistakes&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-03:pycon-russia-2016/thinking-about-concurrency.html</guid></item><item><title>Modern Dictionaries</title><link>https://pyvideo.org/san-francisco-python/modern-dictionaries.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Python's dictionaries are stunningly good. Over the years, many great ideas have combined together to produce the modern implementation in Python 3.6. This fun talk is given by Raymond Hettinger, the Python core developer responsible for the set implementation and who designed the compact-and-ordered dict implemented in CPython for Python 3.6 and in PyPy for Python 2.7. He will use pictures and little bits of pure python code to explain all of the key ideas and how they evolved over time. He will also include newer features such as key-sharing, compaction, and versioning. This talk is important because it is the only public discussion of the state of the art as of Python 3.6. Even experienced Python users are unlikely to know the most recent innovations.
Who and Why (Audience)
----------------------
This talk is for all Python programmers. It is designed to be fully understandable for a beginner (it starts from first principles) but to have new information even for Python experts (how key-sharing works, how the compact-ordered patch works, how dict versioning works). At the end of this talk, you can confidently say that you know how modern Python dictionaries work and what it means for your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h4&gt;Bio&lt;/h4&gt;
&lt;p&gt;Raymond Hettinger has also served as a director of the Python Software Foundation, and has mentored many people over the years on their contributions to the python-dev community. He is also well known for his contributions to the Python Cookbook, and shares many pieces of Python wisdom on Twitter. He is a frequent keynote speaker at Python Conferences around the world and has received the Distinguished Service Award at PyCon 2014 for his exceptional contributions to the python community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-info"&gt;
&lt;h4&gt;Other info&lt;/h4&gt;
&lt;p&gt;This talk is delivered at SF Python's 2nd Annual Holiday Party for Python Devs in SF Bay Area, CA. In you are in San Francisco area looking to meet other python devs, please check our schedule for meetups on &lt;a class="reference external" href="http://sfpython.org"&gt;http://sfpython.org&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-12-08:san-francisco-python/modern-dictionaries.html</guid><category>coredev</category><category>dict</category></item><item><title>Saturday Afternoon keynote</title><link>https://pyvideo.org/pycon-ca-2016/saturday-afternoon-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: Invitation to Core Developer World&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-12:pycon-ca-2016/saturday-afternoon-keynote.html</guid></item><item><title>Being a Core Developer in Python</title><link>https://pyvideo.org/pybay-2016/being-a-core-developer-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyBay 2016 Keynote&lt;/p&gt;
&lt;p&gt;What I've learned from being a maintainer and core developer for the past 15 years. Thoughts on channeling Guido, stability, hyper-generalization, Sturgeon's law and egativity, evaluating submissions, inability to predict the future, user centric design, treating mature code differently, believing in or doubting your predecessors, lever arguments and completers, problems of too many choices, implementation details, how much to document, needs of the standard library versus the needs of users, code that is dead on arrival and how PyPI changed everything, orthogonality, importance of skill and expertise, consistency and foolish consistency, optimization and premature optimization, security tautologies, argument ordering, operator abuse, avoiding race to implementation (we can all write working code), the naming of parts, economy of force and complexity balance, feature creep, developing for others, over reliance on Guido, great minds don't think alike, preference for compactness,   and aversion to deprecations. What it means to be completely reliant on long term unpaid volunteers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Raymond has been a prolific contributor to the CPython project for over a decade, having implemented and maintained many of Python's great features. He has been instrumental in modules like bisect, collections, decimal, functools, itertools, math, random, with types like namedtuple, sets, dictionaries, and in many other places around the codebase. He has contributed to the modification of nearly 90,000 lines of code in the CPython repository, and has made over 160 changes in the PEP repository.&lt;/p&gt;
&lt;p&gt;Raymond has also served as a director of the Python Software Foundation, and has mentored many people over the years on their contributions to the python-dev community. He's also well known for his contributions to the Python Cookbook, and shares many pieces of Python wisdom on Twitter. He received the Distinguished Service Award at PyCon 2014 for his exceptional contributions to the python community.
​
&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/raymond-hettinger-keynote-core-developer-world"&gt;https://speakerdeck.com/pybay2016/raymond-hettinger-keynote-core-developer-world&lt;/a&gt;
​&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 20 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-20:pybay-2016/being-a-core-developer-in-python.html</guid></item><item><title>Keynotes session</title><link>https://pyvideo.org/pycon-israel-2016/keynotes-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Due to technical reasons this session is missing the recording of the laptop, which is important for this kind of a keynote.
Nevertheless there's still tremendous value in watching the video and the slides which are available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/raymond-hettinger.pdf"&gt;http://il.pycon.org/2016/static/sessions/raymond-hettinger.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pycon-israel-2016/keynotes-session.html</guid></item><item><title>Fun with Python's newer tools</title><link>https://pyvideo.org/europython-2011/fun-with-pythons-newer-tools.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it
works under the hood, enjoy a simple example, and then have fun pushing
it to the limit in interesting ways.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/fun-with-pythons-newer-tools.html</guid><category>learning</category></item><item><title>What makes Python so AWESOME</title><link>https://pyvideo.org/europython-2011/what-makes-python-so-awesome.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world of many programming languages, the popularity of Python
continues to grow without bound. We examine what makes it special and
how it influences the way we program:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;what gives python its texture and feel&lt;/li&gt;
&lt;li&gt;what features support rapid development&lt;/li&gt;
&lt;li&gt;where does the readability come from&lt;/li&gt;
&lt;li&gt;what features support economy of expression&lt;/li&gt;
&lt;li&gt;look at the mix of lightweight tools and industrial grade tools&lt;/li&gt;
&lt;li&gt;how easy is it to learn python? how hard is it to master&lt;/li&gt;
&lt;li&gt;what can python do that other languages can't&lt;/li&gt;
&lt;li&gt;what is the role of the python community&lt;/li&gt;
&lt;li&gt;why does the license matter&lt;/li&gt;
&lt;li&gt;does python just have zen or is there a python attitude?&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/what-makes-python-so-awesome.html</guid></item><item><title>Advanced Python</title><link>https://pyvideo.org/europython-2011/advanced-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Training Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will work through a series of real-world examples, showing
how an understanding of the tools built into the Python interpreter or
included in the standard library can be combined to solve difficult
problems clearly and Pythonically. We will also discuss when and how to
reach beyond the standard library when needed to address difficult
algorithmic and optimization problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/advanced-python.html</guid><category>optimization</category><category>tutorial</category></item><item><title>Python Tips, Tricks, and Idioms</title><link>https://pyvideo.org/europython-2011/python-tips-tricks-and-idioms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 23 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dozens of little insights into the language. A whirlwind tour of nifty
tricks, little known features, and common patterns.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-tips-tricks-and-idioms.html</guid></item><item><title>The Art of Subclassing</title><link>https://pyvideo.org/europython-2011/the-art-of-subclassing-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All problems have simple, easy-to-understand, logical wrong answers.
Subclassing in Python is no exception. Avoid the common pitfalls and
learn everything you need to know about how subclass in Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overriding and extending&lt;/li&gt;
&lt;li&gt;Calling your parents&lt;/li&gt;
&lt;li&gt;The ellipse / circle problem - what does a subclass mean?&lt;/li&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;Open Closed Principle&lt;/li&gt;
&lt;li&gt;The facts of life when subclassing builtin types&lt;/li&gt;
&lt;li&gt;How to Implement Cooperative Multiple Inheritance&lt;/li&gt;
&lt;li&gt;A example of perfect and simple python diamond&lt;/li&gt;
&lt;li&gt;Beware the Concrete C API&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/the-art-of-subclassing-0.html</guid><category>art</category></item><item><title>API design: Lessons Learned</title><link>https://pyvideo.org/europython-2011/api-design-lessons-learned.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking
behind some of Python's successful APIs and ones that leave something to
be desired. Learn general principles for designing a good API for public
consumption.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/api-design-lessons-learned.html</guid><category>api</category></item><item><title>Keynote: Raymond Hettinger</title><link>https://pyvideo.org/pycon-au-2011/keynote-raymond-hettinger.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Keynote by Raymond Hettinger.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Tue, 23 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-23:pycon-au-2011/keynote-raymond-hettinger.html</guid></item><item><title>Panel: Python 3</title><link>https://pyvideo.org/pycon-au-2011/panel-python-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a panel discussion in which Nick Coghlan, Raymond Hettinger and
Richard Jones discuss the state of Python 3, some of the new features,
the 3rd party adoption, migration strategies and open to the floor for
questions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Coghlan</dc:creator><pubDate>Tue, 23 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-23:pycon-au-2011/panel-python-3.html</guid><category>migration</category><category>python3</category></item><item><title>Mastering Team Play: Four powerful examples of composing Python tools (#184)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Team Play: Four powerful examples of composing Python tools&lt;/p&gt;
&lt;p&gt;Presented by Raymond Hettinger&lt;/p&gt;
&lt;p&gt;Starts with a quick review of the performance characteristics of major
individual tools in Python: bisect, heapq, lists, deques, sets,
frozensets, class structures, sorts, and weakreferences. Show how these
tools can be powerfully combined to create elegant solutions to four
hard problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Random sampling: when one data structure isn't enough. Discuss how
the nature of the problem dictates when to use one of two alternate
data structures.&lt;/li&gt;
&lt;li&gt;Ordered dictionaries: with the right compostion of dictionaries,
linked lists, and weak references, a dictionary can remember its
insertion order without any impact on its big-Oh running times.&lt;/li&gt;
&lt;li&gt;NFA to DFA conversion. The classic, but difficult, algorithm for
lexical analysis becomes simple when composing Python's dicts and
frozensets.&lt;/li&gt;
&lt;li&gt;Running median: the obvious approaches are horribly slow. The problem
centers around how to efficiently maintain sorted data while
advancing a large sliding window one value at a time. A list of
deques provides a dramatic and scalable improvement in running time.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</guid><category>bisect</category><category>dequeues</category><category>frozensets</category><category>heapq</category><category>lists</category><category>pycon</category><category>pycon2010</category><category>sets</category><category>sorts</category><category>weakreferences</category></item><item><title>API Design: Lessons Learned</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--api-design--lessons-learned.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;API lessons learned from a decade of core Python development.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Share the lessons learned from a decade of core Python development, what
worked and what didn't. Look at the development process and thinking
behind some of Python's successful APIs and ones that leave something to
be desired. Learn general principles for designing a good API for public
consumption.&lt;/p&gt;
&lt;p&gt;Hear the story and principles behind the design of Python's &amp;quot;in&amp;quot;
operator, the development of deques, and the evolution of the set API.&lt;/p&gt;
&lt;p&gt;Examine the principles and story behind the development of the named
tuple API. Learn about unforeseen use cases and a bug that made it to
production.&lt;/p&gt;
&lt;p&gt;Discuss the decimal module's API challenge -- adhering to a published
standard. Talk about the Queue module's framework style and how the API
was refactored.&lt;/p&gt;
&lt;p&gt;Discuss what we've learned about naming functions and methods. Look at
the i-naming convention in itertools, camelcase oddities, the proposed
Italian name for enumerate, and vaguely named methods like
assertItemsEqual.&lt;/p&gt;
&lt;p&gt;Learn about Guido's ideas on when to add flags to method signatures.
Recap his thoughts on the problems with the percent formatting operator.
Then hear Raymond's advice on packaging, hierarchies, and nested name
spaces.&lt;/p&gt;
&lt;p&gt;See how to use documentation to mitigate API problems using examples
from regular expressions, decimal, tokenize, sorting.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--api-design--lessons-learned.html</guid><category>api</category><category>apidesign</category><category>cpython</category><category>pycon</category><category>pycon2011</category></item><item><title>Fun with Python's Newer Tools</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--fun-with-python--39-s-newer-tools.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Spend ten minutes each learning to work with Counters, named tuples, new
string formatting, and the LRU cache. Learn the basic API, see how it
works under the hood, enjoy a simple example, and then have fun pushing
it to the limit in interesting ways.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Look at how a Counter is implemented. See a simple word count example.
Use a counter for unittests. Implement a sparse matrix.&lt;/p&gt;
&lt;p&gt;Show how named tuples are created, combined, subclassed, and extended.
See how to implement an Enum class and how to create default values.&lt;/p&gt;
&lt;p&gt;Learn the basics of the new string formatting syntax. See how to use it
for templating.&lt;/p&gt;
&lt;p&gt;Show everyday uses for an LRU cache, look at the underlying
implementation, and see how to use it to trivially solve a dynamic
programming problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--fun-with-python--39-s-newer-tools.html</guid><category>counters</category><category>lrucache</category><category>namedtuples</category><category>pycon</category><category>pycon2011</category><category>stringformatting</category></item><item><title>The Art of Subclassing</title><link>https://pyvideo.org/pycon-us-2012/the-art-of-subclassing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;All problems have simple, easy-to-understand, logical wrong answers.
Subclassing in Python is no exception. Avoid the common pitfalls and
learn everything you need to know about making effective use of
inheritance in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/the-art-of-subclassing.html</guid></item><item><title>Keynote - What Makes Python Awesome</title><link>https://pyvideo.org/pycon-us-2013/keynote-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Show the specific features that make Python more than just another
scripting language.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raymond Hettinger, a Python core developer for over decade, offers his
perspective on what differentiates Python from other scripting
languages.&lt;/p&gt;
&lt;p&gt;Ten years ago, Python was equal to other scripting languages in terms of
its expressiveness. Since then, it has pulled very far ahead using a
number of advanced technologies: list comprehensions, iterators,
generators, generator expressions, decorators, context managers,
metaclasses, and abstract base classes.&lt;/p&gt;
&lt;p&gt;Each of these capabilities were added in a way that respected the
language's reputation for readable, beautiful code. Together, the
toolset offers unique capabilities for rapid application development and
maintainable code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/keynote-3.html</guid><category>Plenary</category></item><item><title>Python's Class Development Toolkit</title><link>https://pyvideo.org/pycon-us-2013/pythons-class-development-toolkit.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a short, but thorough tutorial on the Python's built-in toolset
for creating classes. We look at commonly encountered challenges and how
to solve them using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/pythons-class-development-toolkit.html</guid><category>talk</category></item><item><title>Transforming Code into Beautiful, Idiomatic Python</title><link>https://pyvideo.org/pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn to take better advantage of Python's best features and improve
existing code through a series of code transformations, &amp;quot;When you see
this, do that instead.&amp;quot;&lt;/p&gt;
&lt;p&gt;Timetable:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=184s"&gt;03:04&lt;/a&gt; -- Looping over a range of functions&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=287s"&gt;04:47&lt;/a&gt; -- Looping over a collection&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=328s"&gt;05:28&lt;/a&gt; -- Looping backwards&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=411s"&gt;06:51&lt;/a&gt; -- Looping over a collection of indicies&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=456s"&gt;07:36&lt;/a&gt; -- Looping over two collections&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=582s"&gt;09:42&lt;/a&gt; -- Looping in sorted order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=604s"&gt;10:04&lt;/a&gt; -- Custom sort order&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=747s"&gt;12:27&lt;/a&gt; -- Call a function until a sentinel value&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=952s"&gt;15:52&lt;/a&gt; -- Distinguishing multiple exit points in loops&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1158s"&gt;19:18&lt;/a&gt; -- Looping over dictionary keys&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1270s"&gt;21:10&lt;/a&gt; -- Looping over dictionary keys and values&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1312s"&gt;21:52&lt;/a&gt; -- Construct a dictionary from pairs&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1395s"&gt;23:15&lt;/a&gt; -- Counting with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1530s"&gt;25:30&lt;/a&gt; -- Grouping with dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1677s"&gt;27:57&lt;/a&gt; -- Is a dictionary pop() atomic?&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1752s"&gt;29:12&lt;/a&gt; -- Linking dictionaries&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1870s"&gt;31:10&lt;/a&gt; -- Clarify function calls with keyword arguments&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1937s"&gt;32:17&lt;/a&gt; -- Clarify multiple return values with named tuples&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=1993s"&gt;33:13&lt;/a&gt; -- Unpacking sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2041s"&gt;34:01&lt;/a&gt; -- Updating multiple state variables&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2175s"&gt;36:15&lt;/a&gt; -- Simultaneous state updates&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2304s"&gt;38:24&lt;/a&gt; -- Concatenating strings&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2321s"&gt;38:41&lt;/a&gt; -- Updating sequences&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2397s"&gt;39:57&lt;/a&gt; -- Using decorators to factor-out administrative logic&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2424s"&gt;40:24&lt;/a&gt; -- Caching decorator&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2479s"&gt;41:19&lt;/a&gt; -- Factor-out temporary contexts for decimal&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2521s"&gt;42:01&lt;/a&gt; -- How to open and close files&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2545s"&gt;42:25&lt;/a&gt; -- How to use locks&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2590s"&gt;43:10&lt;/a&gt; -- Factor-out temporary contexts&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2696s"&gt;44:56&lt;/a&gt; -- Context manager: redirect_stdout()&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/watch?v=OSGv2VnC0go&amp;amp;t=2764s"&gt;46:04&lt;/a&gt; -- Concise expressive one-liners&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/transforming-code-into-beautiful-idiomatic-pytho.html</guid><category>talk</category><category>python3</category><category>pythonic</category></item><item><title>Beyond PEP 8 -- Best practices for beautiful intelligible code</title><link>https://pyvideo.org/pycon-us-2015/beyond-pep-8-best-practices-for-beautiful-inte.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distillation of knowledge gained from a decade of Python consulting,
Python training, code reviews, and serving as a core developer. Learn to
avoid some of the hazards of the PEP 8 style guide and learn what really
matters for creating beautiful intelligible code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/beyond-pep-8-best-practices-for-beautiful-inte.html</guid></item><item><title>Super considered super!</title><link>https://pyvideo.org/pycon-us-2015/super-considered-super.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's super() is well-designed and powerful, but it can be tricky to
use if you don't know all the moves.&lt;/p&gt;
&lt;p&gt;This talk offers clear, practical advice with real-world use cases on
how to use super() effectively and not get tripped-up by common
mistakes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/super-considered-super.html</guid></item></channel></rss>