<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 11 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Python Testing 201 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-201-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the September 2019 Python Frederick event, Matt explored the features of pytest and how to apply them to Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-11:python-frederick/python-testing-201-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Python Testing 101 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-101-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the March 2019 Python Frederick event, Matt focused on the fundamentals of Python testing while using the pytest package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-03-13:python-frederick/python-testing-101-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Mutation Testing in Python with Cosmic Ray</title><link>https://pyvideo.org/ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-21:ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</guid><category>unit testing</category><category>testing</category><category>mutation testing</category><category>ndc</category><category>ndcoslo</category><category>ndcoslo2016</category></item></channel></rss>