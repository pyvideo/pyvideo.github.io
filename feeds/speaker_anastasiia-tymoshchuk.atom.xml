<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anastasiia-tymoshchuk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>The Agile comedy: from hell to paradise</title><link href="https://pyvideo.org/europython-2019/the-agile-comedy-from-hell-to-paradise.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/the-agile-comedy-from-hell-to-paradise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Nowadays everyone wants to bring Agile Best Practices into all the
teams, but it's a hard task to implement it and adapt based on
different teams. Setting up all necessary Agile meetings and using
buzz words is not enough for the team to be happy and successful while
working in Agile environment.&lt;/div&gt;
&lt;div class="line"&gt;Inspired by the &amp;quot;Divine Comedy&amp;quot; by Dante Alighieri, I decided to
create a short guide into Agile best practices. It will guide through
Failures, Challenges to the Success in building a happy dream team!&lt;/div&gt;
&lt;div class="line"&gt;This talk is divided into three parts:&lt;/div&gt;
&lt;div class="line"&gt;1. Failures in setting up Agile processes for a team.&lt;/div&gt;
&lt;div class="line"&gt;2. Challenges on the way to happy and successful team.&lt;/div&gt;
&lt;div class="line"&gt;3. Successful examples how to have happy and productive Agile team and
constantly deliver a great product.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Agile"></category><category term="Development"></category><category term="General"></category></entry><entry><title>Ravioli vs Pelmeni software architecture (microservices vs services)</title><link href="https://pyvideo.org/pycon-italia-2019/ravioli-vs-pelmeni-software-architecture-microservices-vs-services.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/ravioli-vs-pelmeni-software-architecture-microservices-vs-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservice architecture is trending now, everyone wants to use it, not
matter if it’s needed or not. But what if you could know all the pros
and cons, possible examples and success stories… What if you could
choose by your considered and mature choice. This short talk will guide
through best practices of using service and microservice architecture,
so you could choose wisely.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1515"&gt;https://python.it/feedback-1515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="best-practices"></category><category term="examples"></category><category term="clean-architecture"></category></entry><entry><title>Python Decorators: Gift or Poison?</title><link href="https://pyvideo.org/pycon-de-2018/python-decorators-gift-or-poison.html" rel="alternate"></link><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-10-26:pycon-de-2018/python-decorators-gift-or-poison.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why would you ever need to use decorators in Python? Have you ever had
the task when you need to use one function in few places and you really
wanted to avoid of code duplicating? For example to add some logging
into functions or timers, etc. Decorators in Python are super powerful
with these tasks, but at the same time they are super complicated,
sometimes even magical. When I started learning Python, Decorators were
really like a magic: how to use them, how are they working, lots of
questions. The goal is to make the things easier and clear to answer a
question: to use or not to use Decorators in your project.&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>How to develop your project from an idea to architecture design in 50 minutes</title><link href="https://pyvideo.org/europython-2018/how-to-develop-your-project-from-an-idea-to-architecture-design-in-50-minutes.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/how-to-develop-your-project-from-an-idea-to-architecture-design-in-50-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever asked yourself:&lt;/div&gt;
&lt;div class="line"&gt;- how and where to start developing a new project from the scratch,&lt;/div&gt;
&lt;div class="line"&gt;- how to choose main components of a new software or how to develop a
new feature,&lt;/div&gt;
&lt;div class="line"&gt;- how to decide whether your project needs refactoring,&lt;/div&gt;
&lt;div class="line"&gt;- how to avoid repeating the same issues?&lt;/div&gt;
&lt;div class="line"&gt;This talk will answer all these questions.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;You will learn: - how to develop the idea from scratch,&lt;/div&gt;
&lt;div class="line"&gt;- how to use principles of Object Oriented Analysis and Design,&lt;/div&gt;
&lt;div class="line"&gt;- how to show amazing architecture design.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You will get better understanding where and how to start, analyze and
decouple the system, create a clean, clear and extendable architecture.&lt;/p&gt;
&lt;p&gt;My slides are here:
&lt;a class="reference external" href="https://atymo.me/projects/presentations/FromIdeaToDesign/"&gt;https://atymo.me/projects/presentations/FromIdeaToDesign/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python Decorators: Gift or Poison?</title><link href="https://pyvideo.org/europython-2018/python-decorators-gift-or-poison.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/python-decorators-gift-or-poison.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why would you ever need to use decorators in Python?&lt;/div&gt;
&lt;div class="line"&gt;Have you ever had the task when you need to use one function in few
places and you really wanted to avoid of code duplicating? For example
to add some logging into functions or timers, etc. Decorators in
Python are super powerful with these tasks, but at the same time they
are super complicated, sometimes even magical. When I started learning
Python, Decorators were really like a magic: how to use them, how are
they working, lots of questions. The goal is to make the things easier
and clear to answer a question: to use or not to use Decorators in
your project.&lt;/div&gt;
&lt;div class="line"&gt;What’s in the Talk:&lt;/div&gt;
&lt;div class="line"&gt;- Functions nature in Python&lt;/div&gt;
&lt;div class="line"&gt;- Magic of a Decorator&lt;/div&gt;
&lt;div class="line"&gt;- Basics&lt;/div&gt;
&lt;div class="line"&gt;- When to use Decorators&lt;/div&gt;
&lt;div class="line"&gt;- Examples&lt;/div&gt;
&lt;div class="line"&gt;- Even more Python magic&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;My slides are here:
&lt;a class="reference external" href="https://atymo.me/projects/presentations/GiftOrPoison/"&gt;https://atymo.me/projects/presentations/GiftOrPoison/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Code examples: &lt;a class="reference external" href="https://github.com/atymoshchuk/python_tutorials"&gt;https://github.com/atymoshchuk/python_tutorials&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>