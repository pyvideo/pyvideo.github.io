<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Anastasiia Tymoshchuk</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anastasiia-tymoshchuk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>How to develop your project from an idea to architecture design in 50 minutes</title><link href="https://pyvideo.org/europython-2018/how-to-develop-your-project-from-an-idea-to-architecture-design-in-50-minutes.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-07-25:/europython-2018/how-to-develop-your-project-from-an-idea-to-architecture-design-in-50-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever asked yourself:&lt;/div&gt;
&lt;div class="line"&gt;- how and where to start developing a new project from the scratch,&lt;/div&gt;
&lt;div class="line"&gt;- how to choose main components of a new software or how to develop a
new feature,&lt;/div&gt;
&lt;div class="line"&gt;- how to decide whether your project needs refactoring,&lt;/div&gt;
&lt;div class="line"&gt;- how to avoid repeating the same issues?&lt;/div&gt;
&lt;div class="line"&gt;This …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Have you ever asked yourself:&lt;/div&gt;
&lt;div class="line"&gt;- how and where to start developing a new project from the scratch,&lt;/div&gt;
&lt;div class="line"&gt;- how to choose main components of a new software or how to develop a
new feature,&lt;/div&gt;
&lt;div class="line"&gt;- how to decide whether your project needs refactoring,&lt;/div&gt;
&lt;div class="line"&gt;- how to avoid repeating the same issues?&lt;/div&gt;
&lt;div class="line"&gt;This talk will answer all these questions.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;You will learn: - how to develop the idea from scratch,&lt;/div&gt;
&lt;div class="line"&gt;- how to use principles of Object Oriented Analysis and Design,&lt;/div&gt;
&lt;div class="line"&gt;- how to show amazing architecture design.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You will get better understanding where and how to start, analyze and
decouple the system, create a clean, clear and extendable architecture.&lt;/p&gt;
&lt;p&gt;My slides are here:
&lt;a class="reference external" href="https://atymo.me/projects/presentations/FromIdeaToDesign/"&gt;https://atymo.me/projects/presentations/FromIdeaToDesign/&lt;/a&gt;&lt;/p&gt;
</content><category term="EuroPython 2018"></category></entry><entry><title>Python Decorators: Gift or Poison?</title><link href="https://pyvideo.org/europython-2018/python-decorators-gift-or-poison.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-07-25:/europython-2018/python-decorators-gift-or-poison.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why would you ever need to use decorators in Python?&lt;/div&gt;
&lt;div class="line"&gt;Have you ever had the task when you need to use one function in few
places and you really wanted to avoid of code duplicating? For example
to add some logging into functions or timers, etc. Decorators in
Python …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why would you ever need to use decorators in Python?&lt;/div&gt;
&lt;div class="line"&gt;Have you ever had the task when you need to use one function in few
places and you really wanted to avoid of code duplicating? For example
to add some logging into functions or timers, etc. Decorators in
Python are super powerful with these tasks, but at the same time they
are super complicated, sometimes even magical. When I started learning
Python, Decorators were really like a magic: how to use them, how are
they working, lots of questions. The goal is to make the things easier
and clear to answer a question: to use or not to use Decorators in
your project.&lt;/div&gt;
&lt;div class="line"&gt;What’s in the Talk:&lt;/div&gt;
&lt;div class="line"&gt;- Functions nature in Python&lt;/div&gt;
&lt;div class="line"&gt;- Magic of a Decorator&lt;/div&gt;
&lt;div class="line"&gt;- Basics&lt;/div&gt;
&lt;div class="line"&gt;- When to use Decorators&lt;/div&gt;
&lt;div class="line"&gt;- Examples&lt;/div&gt;
&lt;div class="line"&gt;- Even more Python magic&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;My slides are here:
&lt;a class="reference external" href="https://atymo.me/projects/presentations/GiftOrPoison/"&gt;https://atymo.me/projects/presentations/GiftOrPoison/&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Code examples: &lt;a class="reference external" href="https://github.com/atymoshchuk/python_tutorials"&gt;https://github.com/atymoshchuk/python_tutorials&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2018"></category></entry><entry><title>The Agile comedy: from hell to paradise</title><link href="https://pyvideo.org/europython-2019/the-agile-comedy-from-hell-to-paradise.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/the-agile-comedy-from-hell-to-paradise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Nowadays everyone wants to bring Agile Best Practices into all the
teams, but it's a hard task to implement it and adapt based on
different teams. Setting up all necessary Agile meetings and using
buzz words is not enough for the team to be happy and successful while
working …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Nowadays everyone wants to bring Agile Best Practices into all the
teams, but it's a hard task to implement it and adapt based on
different teams. Setting up all necessary Agile meetings and using
buzz words is not enough for the team to be happy and successful while
working in Agile environment.&lt;/div&gt;
&lt;div class="line"&gt;Inspired by the &amp;quot;Divine Comedy&amp;quot; by Dante Alighieri, I decided to
create a short guide into Agile best practices. It will guide through
Failures, Challenges to the Success in building a happy dream team!&lt;/div&gt;
&lt;div class="line"&gt;This talk is divided into three parts:&lt;/div&gt;
&lt;div class="line"&gt;1. Failures in setting up Agile processes for a team.&lt;/div&gt;
&lt;div class="line"&gt;2. Challenges on the way to happy and successful team.&lt;/div&gt;
&lt;div class="line"&gt;3. Successful examples how to have happy and productive Agile team and
constantly deliver a great product.&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Agile"></category><category term="Development"></category><category term="General"></category></entry><entry><title>Can we deploy yet?</title><link href="https://pyvideo.org/europython-2020/can-we-deploy-yet.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/can-we-deploy-yet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code production ready&lt;/p&gt;
&lt;p&gt;What happens when your features are done, your MVP is ready and you want to deploy your first production build? What do you do then? How do you make your first production build instead of re-using your development one? is your code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code production ready&lt;/p&gt;
&lt;p&gt;What happens when your features are done, your MVP is ready and you want to deploy your first production build? What do you do then? How do you make your first production build instead of re-using your development one? is your code ready to handle real user interactions?
This talk will show a production ready checklist for your Python code; what to look for when creating a production-ready Docker image; what are the differences between development and production environments and builds.
You will see how to deal with exceptions, logs, and metrics with real-world use cases.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Development"></category><category term="Documentation"></category></entry><entry><title>Python Decorators: Gift or Poison?</title><link href="https://pyvideo.org/pycon-de-2018/python-decorators-gift-or-poison.html" rel="alternate"></link><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2018-10-26:/pycon-de-2018/python-decorators-gift-or-poison.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why would you ever need to use decorators in Python? Have you ever had
the task when you need to use one function in few places and you really
wanted to avoid of code duplicating? For example to add some logging
into functions or timers, etc. Decorators in Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why would you ever need to use decorators in Python? Have you ever had
the task when you need to use one function in few places and you really
wanted to avoid of code duplicating? For example to add some logging
into functions or timers, etc. Decorators in Python are super powerful
with these tasks, but at the same time they are super complicated,
sometimes even magical. When I started learning Python, Decorators were
really like a magic: how to use them, how are they working, lots of
questions. The goal is to make the things easier and clear to answer a
question: to use or not to use Decorators in your project.&lt;/p&gt;
</content><category term="PyCon DE 2018"></category><category term="Python"></category></entry><entry><title>Ravioli vs Pelmeni software architecture (microservices vs services)</title><link href="https://pyvideo.org/pycon-italia-2019/ravioli-vs-pelmeni-software-architecture-microservices-vs-services.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2019-05-04:/pycon-italia-2019/ravioli-vs-pelmeni-software-architecture-microservices-vs-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservice architecture is trending now, everyone wants to use it, not
matter if it’s needed or not. But what if you could know all the pros
and cons, possible examples and success stories… What if you could
choose by your considered and mature choice. This short talk will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservice architecture is trending now, everyone wants to use it, not
matter if it’s needed or not. But what if you could know all the pros
and cons, possible examples and success stories… What if you could
choose by your considered and mature choice. This short talk will guide
through best practices of using service and microservice architecture,
so you could choose wisely.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1515"&gt;https://python.it/feedback-1515&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon Italia 2019"></category><category term="best-practices"></category><category term="examples"></category><category term="clean-architecture"></category></entry><entry><title>Continuous Documentation for your Python code</title><link href="https://pyvideo.org/pycon-italia-2022/continuous-documentation-for-your-python-code.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/continuous-documentation-for-your-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous Documentation for your Python code - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Do you document your code? Do you think it is important? Imagine that
you need to get back to your code in 6 month after you wrote it, there
is always a big possibility that you will have to spend …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous Documentation for your Python code - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Do you document your code? Do you think it is important? Imagine that
you need to get back to your code in 6 month after you wrote it, there
is always a big possibility that you will have to spend some time to
find out how this code works. This talk will tell you a secret trick
about documentation. Do you document your code? Do you think it is
important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you
wrote it, there is always a big possibility that you will have to spend
some time to find out how this code works. Or if someone else wrote some
code, which is already in production and your task is to fix a bug in it
and there is no documentation and no one actually knows what this code
does.&lt;/p&gt;
&lt;p&gt;There are more benefits of implementing continuous documentation for the
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;easy to onboard new team members,&lt;/li&gt;
&lt;li&gt;easy to share knowledge,&lt;/li&gt;
&lt;li&gt;if this code is open source - easy to start contributing,&lt;/li&gt;
&lt;li&gt;easy to see purpose and motivation of each piece of code,&lt;/li&gt;
&lt;li&gt;easy to keep versioning for each new release of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It this talk I will show the difference between documentation types and
will show a demo in the end of the talk.&lt;/p&gt;
&lt;p&gt;Speaker: Anastasiia Tymoshchuk&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="documentation"></category></entry><entry><title>Continuous Documentation for your code</title><link href="https://pyvideo.org/pygotham-2021/continuous-documentation-for-your-code.html" rel="alternate"></link><published>2021-10-02T00:00:00+00:00</published><updated>2021-10-02T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2021-10-02:/pygotham-2021/continuous-documentation-for-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you document your code? Do you think it is important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you wrote
it, there is always a big possibility that you will have to spend some time
to find out how this code works …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you document your code? Do you think it is important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you wrote
it, there is always a big possibility that you will have to spend some time
to find out how this code works. Or if someone else wrote some code, which
is already in production and your task is to fix a bug in it and there is no
documentation and no one actually knows what this code does.&lt;/p&gt;
&lt;p&gt;There are more benefits of implementing continuous documentation for the
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;easy to onboard new team members,&lt;/li&gt;
&lt;li&gt;easy to share knowledge,&lt;/li&gt;
&lt;li&gt;if this code is open source - easy to start contributing,&lt;/li&gt;
&lt;li&gt;easy to see purpose and motivation of each piece of code,&lt;/li&gt;
&lt;li&gt;easy to keep versioning for each new release of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It this talk I will show the difference between documentation types and will
show a demo in the end of the talk.&lt;/p&gt;
</content><category term="PyGotham 2021"></category></entry><entry><title>Can We Deploy Yet?</title><link href="https://pyvideo.org/python-web-conf-2021/can-we-deploy-yet.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/can-we-deploy-yet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Can We Deploy Yet?&amp;quot; by: Anastasiia Tymoshchuk&lt;/p&gt;
&lt;p&gt;Do you think your code is ready for production?
This talk contains a checklist for your Python code before you go to production:
- Exception handling
- How to become a detective or meaningful logging
- From code review to production or effective CI/CD …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Can We Deploy Yet?&amp;quot; by: Anastasiia Tymoshchuk&lt;/p&gt;
&lt;p&gt;Do you think your code is ready for production?
This talk contains a checklist for your Python code before you go to production:
- Exception handling
- How to become a detective or meaningful logging
- From code review to production or effective CI/CD
- Are your docker images secure? No problem!
- More hints and ideas&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry><entry><title>Make Your Software Architecture Sexy with Domain Driven Design</title><link href="https://pyvideo.org/python-web-conf-2022/make-your-software-architecture-sexy-with-domain-driven-design.html" rel="alternate"></link><published>2022-03-24T00:00:00+00:00</published><updated>2022-03-24T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2022-03-24:/python-web-conf-2022/make-your-software-architecture-sexy-with-domain-driven-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domain Driven Design (DDD) has a huge set of tools, which could be used to design your perfect architecture - loosely coupled and highly cohesive. Anastasiia has been using DDD for a few years and created her own way to design a new architecture for a product, a feature, redesign …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domain Driven Design (DDD) has a huge set of tools, which could be used to design your perfect architecture - loosely coupled and highly cohesive. Anastasiia has been using DDD for a few years and created her own way to design a new architecture for a product, a feature, redesign, refactoring and also for exploring existing products, their ecosystem and their functionality. In this talk attendees will learn on a real-world example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to start with Eventstorming to explore the user journey&lt;/li&gt;
&lt;li&gt;how to move forward and explore the ecosystem of the product/software/feature/service&lt;/li&gt;
&lt;li&gt;how to finalise a new architecture with C4 diagrams&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But despite all the attempts to create a new perfect architecture, it could be affected by the team and organisation structure. Conway’s Law says: “Any organisation that designs a system will produce a design whose structure is a copy of the organisation’s communication structure”. Anastasiia experienced this so many times in different teams and organisations, that in the past few years she started applying Team Topologies together with DDD. This worked pretty well and as a bonus Anastasiia will go through the hidden icebergs of this approach as well.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</content><category term="Python Web Conf 2022"></category><category term="PythonWebConf"></category><category term="PythonWebConf2022"></category></entry></feed>