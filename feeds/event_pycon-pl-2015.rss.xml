<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 Oct 2015 00:00:00 +0000</lastBuildDate><item><title>Building better machine learning algorithms for a Data platform with Python</title><link>https://pyvideo.org/pycon-pl-2015/building-better-machine-learning-algorithms-for-a-data-platform-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data Analytics platforms, with predictive models at their core, are the buzzword in Enterprise Analytics. Having been on both sides - a consultant providing analytics and a consumer of analytics, I’ve realized that there are few, if any, runaway winners. Rightly so. It is one of the hottest growth areas. This talk would go over some of the ingredients to building successful machine learning algorithms for the data analytics platform using Python. It is probably easy to build a simplistic machine learning model. But what does it take to build reasonably good, or even better - a state-of-art, model? What is the impact on the design/architecture of the data science components when data scales? Is there a secret sauce? When data scales, what are the trade-offs to consider? How far can one go when expert domain knowledge is not available in-house ? Based on learnings and results from actual business use cases, the talk would try to answer those above questions, along with the constraints various choices impose when creating the platform - when using Python stack. There will be emphasis on the following with actual results: Feature engineering, modeling selection, ensembling, importance of bias-variance and generalization. Expected Background of Audience: Anyone with an interest in analytics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bargava Subramanian</dc:creator><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-18:pycon-pl-2015/building-better-machine-learning-algorithms-for-a-data-platform-with-python.html</guid></item><item><title>How Python is Winning New Friends</title><link>https://pyvideo.org/pycon-pl-2015/how-python-is-winning-new-friends.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is now almost 25 years old, and continues to win mindshare in many communities, not least the scientific and financial world which rely heavily on intensive computation. This talk investigates the reasons why Python, and related open source technologies, are bringing a new rigor to subjects which have traditionally eschewed the skills embodied in the software engineering profession.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-18:pycon-pl-2015/how-python-is-winning-new-friends.html</guid></item><item><title>Anti-patterns for diversity</title><link>https://pyvideo.org/pycon-pl-2015/anti-patterns-for-diversity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For many years studies have shown that more diverse teams are more creative and flexible and produce better solutions. In addition both the demand for more tech talent and basic fairness also support increased diversity and inclusion. Just as there is no single easy way to write good code there is no single easy way to increase diversity. There are, however, several things that companies and organizations do which actually work against diversity. This talk will explore these anti-patterns for diversity, including uncritical belief in meritocracy, lack of understanding of the realities of marginalization, null processes, misunderstanding of “culture fit”, and an unwillingness to change, as well as some ways that teams, companies, and organizations might work to combat them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Naomi Ceder</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/anti-patterns-for-diversity.html</guid></item><item><title>Aplikacje desktopowe z PyQt</title><link>https://pyvideo.org/pycon-pl-2015/aplikacje-desktopowe-z-pyqt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyQt5 to potężne narzędzie do tworzenia aplikacji desktopowych. Pomimo swojego rozmiaru bywa dość łatwe i przyjemne w użyciu, nawet dla małych aplikacji. W trakcie prezentacji przedstawię środowisko PyQt5, sposób tworzenia aplikacji oraz możliwości jakie oferuje programistom Pythona. - Co to jest Qt5, PyQt5, PySide - Gdzie i jak działa (desktop/mobile) - Sposób tworzenia aplikacji, narzędzia do gui - Przykładowe aplikacje, zastosowania do małych aplikacji - Społeczność PyQt (aplikacje, książki, społeczność) - Porównanie do innych bibliotek GUI&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piotr Maliński</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/aplikacje-desktopowe-z-pyqt.html</guid></item><item><title>Conda: a cross-platform package manager</title><link>https://pyvideo.org/pycon-pl-2015/conda-a-cross-platform-package-manager.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them. It works on Linux, OS X and Windows, and was created for Python programs but can package and distribute any kind software, including native programs, R or node.js packages, and more. Conda is the foundation of a Python software distribution called Anaconda, although it can be used independently as well. This talk provides a motivation as to why Conda was built, gives an overview of what it is and some examples of what it can be used for.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mateusz Paprocki</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/conda-a-cross-platform-package-manager.html</guid></item><item><title>Contributors, Colleagues, Clients &amp; Customers: Sustaining Open Source Communities</title><link>https://pyvideo.org/pycon-pl-2015/contributors-colleagues-clients-customers-sustaining-open-source-communities.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to open source software, what do you want to be doing? Do you want an occasional hobby where you can have fun contributing back to the community? Have a significant impact on the world by being able to commit full time to growing the available pool of free &amp;amp; open source software? Spend time getting to know the needs of a particular organisation, and applying open source tools to solve their problems? Or perhaps you'd prefer to understand the general needs of a broad category of potential users, and design open source tools that will solve their problems without customisation? Getting involved in open source development communities can offer all these opportunities and more, but it also makes it incredibly easy for us to overcommit and burn ourselves out. If we're not careful, our unrealistic expectations can also contribute to the burnout of our peers. To ensure sustainability, we need to come to a shared understanding of some of the different ways we can engage with open source communities, what we can reasonably offer for free, and what we should expect to be paid for.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Coghlan</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/contributors-colleagues-clients-customers-sustaining-open-source-communities.html</guid></item><item><title>Data Scientist's Python toolbox</title><link>https://pyvideo.org/pycon-pl-2015/data-scientists-python-toolbox.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the talk I would like to give an overview of existing python tools for mathematical modeling (numpy, scipy, pandas, others) and share experiences of using them in our application (&lt;a class="reference external" href="http://www.datarobot.com/"&gt;http://www.datarobot.com/&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Babych</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/data-scientists-python-toolbox.html</guid></item><item><title>Humans' Deep learning for humans</title><link>https://pyvideo.org/pycon-pl-2015/humans-deep-learning-for-humans.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I invite you on a fascinating journey through the world of deep learning during which with the help of python we will attempt to understand: - what does learning really mean? - how one can define learning? - when one can say that something was successfully learned? - how one can use deep learning for features discovery? - how to debug, test, design and use deep learning algorithms? - what are the areas in which deep learning is being used? - how can you use deep learning in your projects? But most importantly armed with the knowledge about the deep learning we will address the questions about the nature of what's learnable, learnablity of the world around us and finally using the findings of computer science we will try to understand the way our brains learn and how one can leverage that knowledge to improve one's own learning habits and the way learning process could be organised to improve it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Sobczak</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/humans-deep-learning-for-humans.html</guid></item><item><title>Kiedy ostatnio zrobiłeś coś dla 15 milionów ludzi?</title><link>https://pyvideo.org/pycon-pl-2015/kiedy-ostatnio-zrobiles-cos-dla-15-milionow-ludzi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slajdy:
&lt;a class="reference external" href="http://www.slideshare.net/Kamilagowski/pycon-pl-2015-k-agowski-m-wrbel-kiedy-ostatnio-zrobie-co-dla-15-milionw-ludzi"&gt;http://www.slideshare.net/Kamilagowski/pycon-pl-2015-k-agowski-m-wrbel-kiedy-ostatnio-zrobie-co-dla-15-milionw-ludzi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tworzymy portal, który odwiedzają miliony użytkowników. Do zapewnienia wysokiej wydajności potrzebujemy architektury opartej o nieblokujące połączenia sieciowe. W ostatnich latach powstało wiele frameworków webowych w języku Python wspomagających programowanie asynchroniczne. Który zatem wybrać? Tornado? Gevent? Pokażemy jak asynchroniczność działa na poziomie systemu operacyjnego, przedstawimy różne modele programowania, po czym przejdziemy do porównania najpopularniejszych frameworków webowych. Na koniec zaprezentujemy jak przy wykorzystaniu asynchroniczności w architekturze &amp;quot;Microservices&amp;quot; zrobić system dla milionów użytkowników.&lt;/p&gt;
&lt;p&gt;Kamil Łagowski
IT Systems Architect w firmie DreamLab Onet.pl. Odpowiedzialny m.in. za tworzenie wysokowydajnych aplikacji w oparciu o język programowania Python oraz technologie NoSQL.&lt;/p&gt;
&lt;p&gt;Marcin Wróbel
Z DreamLab Onet.pl związany od ponad 5 lat. Programuje głównie część aplikacyjną w Pythonie i bazy danych. Zajmuje się także rozwojem i utrzymaniem środowiska Python w firmie. Ostatnio przetwarza dane na Hadoopie na potrzeby systemów rekomendacyjnych oraz do celów analitycznych.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kamil Łagowski</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/kiedy-ostatnio-zrobiles-cos-dla-15-milionow-ludzi.html</guid></item><item><title>Kivy - introduction</title><link>https://pyvideo.org/pycon-pl-2015/kivy-introduction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;'Kivy - Open source Python library for rapid development of applications that make use of innovative user interfaces, such as multi-touch apps.' Let's see if Kivy is worth our attention, how rapid is 'rapid' and why Kivy isn't as popular in native apps world as Django in webdev universe. I'll introduce basics: from installation and hello world app, to more complex app and building .apk package (yay, mobile!).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rafał Mirończyk</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/kivy-introduction.html</guid></item><item><title>Painless testing</title><link>https://pyvideo.org/pycon-pl-2015/painless-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The report is about the adaptation of TDD in a small team. The main idea here: * Don't test everything * Think about maintenance of test * Choose proper strategy * Avoid mocks All ideas described with code samples in Python and Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Kharandziuk</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-pl-2015/painless-testing.html</guid></item><item><title>Dokku. Build your own PaaS</title><link>https://pyvideo.org/pycon-pl-2015/dokku-build-your-own-paas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is purposed to help people optimise their development &amp;amp; deployment flow having your own Heroku-like PaaS. The talk will clearify where is reasonable to use Dokku, explain how it works and what benifits of using it instead of Heroku or Beanstalk. Introducing Deis and AWS CloudFormation in cases where is necessary to scale.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sergey Parkhomenko</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/dokku-build-your-own-paas.html</guid></item><item><title>Growbots - od zera do wypuszczenia MVP z bazą 100 mln rekordów w 3 miesiące - studium przypadku</title><link>https://pyvideo.org/pycon-pl-2015/growbots-od-zera-do-wypuszczenia-mvp-z-baza-100-mln-rekordow-w-3-miesiace-studium-przypadku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tomasz Roda &amp;quot; Growbots - od zera do wypuszczenia MVP z bazą 100 mln rekordów w 3 miesiące - studium przypadku&amp;quot;&lt;/p&gt;
&lt;p&gt;Growbots to polski startup odnoszący spore sukcesy (udział w 500 Startups, zdobycie Aulera 2015), w którym tworzymy oprogramowanie automatyzujące część procesu sprzedaży. Zaczęliśmy tworzyć produkt w drugiej połowie stycznia, mając wówczas tylko 1 osobę techniczną na pokładzie. 3 miesiące później wpuszczaliśmy pierwszych klientów. Prezentacja techniczna o tym co i jak zrobiliśmy, co było dobrą decyzją, a przez co cierpimy do dzisiaj - wszystko na konkretnych, namacalnych przykładach z działającego produktu (stack: Python, Elasticsearch, Docker i inne). Dokładniej:
- wady i zalety rozbicia systemu na -naście modułów,
- testy, a ich brak - wpływ na tempo rozwoju i utrzymanie produktu,
- pełna rezygnacja z baz relacyjnych - nowe problemy, - o tym jak Elasticsearch radzi sobie z obsługą ponad 100 milionów sporych rekordów, - nowoczesne DevOps
- Amazon, Docker, Ansible - korzyści od pierwszego dnia (i problemy - a jakże inaczej),
- nasze podejście do crawlingu (dystrybucja ruchu, adresy IP, kolejki wiadomości),
- trochę o frontendzie (ReactJS),
- kilka słów na koniec o doświadczeniach z budowaniem dobrego zespołu.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomasz Roda</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/growbots-od-zera-do-wypuszczenia-mvp-z-baza-100-mln-rekordow-w-3-miesiace-studium-przypadku.html</guid></item><item><title>Locust - nowoczesne narzędzie do load testów</title><link>https://pyvideo.org/pycon-pl-2015/locust-nowoczesne-narzedzie-do-load-testow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Podczas prezentacji zaprezentuje narzędzie locust.io (&lt;a class="reference external" href="http://locust.io/"&gt;http://locust.io/&lt;/a&gt;). Opowiem do czego może zostać wykorzystane i w jaki sposób z niego korzystać. Przedstawie kilka typowych use caseów oraz omówie patterny i antipatterny.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacek Nosal</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/locust-nowoczesne-narzedzie-do-load-testow.html</guid></item><item><title>Nigdy więcej "AAA… Na mojej maszynie działało…"</title><link>https://pyvideo.org/pycon-pl-2015/nigdy-wiecej-aaa-na-mojej-maszynie-dzialalo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Często w życiu zawodowym pracujemy jednocześnie nad wieloma projektami, których zależności systemowe niekoniecznie są z sobą kompatybilne. Jeszcze częściej bywa tak, że po prostu nie chcemy zaśmiecać sobie systemu operacyjnego - virtualenv to często za mało… Można oczywiście używać maszyn virtualnych, ale zarządzanie nimi wprost, nie zawsze jest wygodne. Rozwiązaniem tych problemów jest Vagrant - narzędzie do prostego tworzenia odseparowanych od siebie środowisk developerskich, które w zasadzie niczym nie będą różniły się od środowiska produkcyjnego. Podczas prezentacji postaram się przybliżyć ciekawsze możliwości tego narzędzia, tworząc środowisko developerskie dla przykładowej aplikacji wymagającej kilku niestandardowych elementów :)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrzej Jankowski</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/nigdy-wiecej-aaa-na-mojej-maszynie-dzialalo.html</guid></item><item><title>OctoDocker - sprawdź działanie pull requesta przed akceptacją</title><link>https://pyvideo.org/pycon-pl-2015/octodocker-sprawdz-dzialanie-pull-requesta-przed-akceptacja.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Przenieś się w przyszłość by zdecydować czy mergować pull requesta. Oceń działanie aplikacji testując rzeczywistą aplikację webową z wprowadzonymi zmianami. Tematem prezentacji jest aplikacja OctoDocker, która została zbudowana w Allegro dla lepszego testowania pull requestów. Pozwala on na uruchomienie docelowej aplikacji z kodem dowolnego brancha lub pull requestu repozytorium Git. OctoDocker umożliwia uruchomienie skryptów inicjalizujących (umożliwiających np. inicjalizację aplikacji lub wgranie przykładowych danych) i zapewnia aktualizację obrazu docelowej aplikacji z każdym nowym commitem głównego brancha. OctoDocker został w całości napisany w Pythonie 3 i Django wraz z wykorzystaniem nowinek w świecie konteneryzacji - Docker, docker-compose, docker-py.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piotr Jarolewski</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/octodocker-sprawdz-dzialanie-pull-requesta-przed-akceptacja.html</guid></item><item><title>(py)OpenCL na kartach graficznych: wprowadzenie do GPGPU</title><link>https://pyvideo.org/pycon-pl-2015/pyopencl-na-kartach-graficznych-wprowadzenie-do-gpgpu.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Konsumenckie karty graficzne - nie tylko te z listy wymagań najnowszego Wiedźmina, ale i takie z niższych półek - mają coraz więcej jednostek obliczeniowych, które da się łatwo zaprogramować. Twój CPU ledwo zipie, a obliczenia ciągną się godzinami? Przyjdź i dowiedz się, jak GPGPU może pomóc, jak zaprząc &amp;quot;grafikę&amp;quot; do pracy i w jakim stopniu Python może to ułatwić!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacek Kołodziej</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/pyopencl-na-kartach-graficznych-wprowadzenie-do-gpgpu.html</guid></item><item><title>Python in a hacker's toolbox</title><link>https://pyvideo.org/pycon-pl-2015/python-in-a-hackers-toolbox.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A classical language set used by a security specialist included assembly and C, sometimes joined by C++ and usually quite a lot of Bash as well. A few years ago it seemed that Perl, and later Ruby, will become the scripting language of choice in the security field, however another contender - Python - was gaining user base too. Today it's rather obvious that Python won its place in the hacker's toolbox, especially given that a great deal of important tools of trade allow to be instrumented/scripted using it - examples include even the most basic utensils - IDA, GDB and Burp. Furthermore, Python with its set of standard libraries makes it extremely easy to create ad-hoc tools whenever they're needed. At the same time, due to rich introspection mechanisms, the language itself is an object of fascination from the security scene. The talk will focus on a few selected cases of Python intertwining with the security world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gynvael Coldwind</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/python-in-a-hackers-toolbox.html</guid></item><item><title>Riding a Bike Driven Development - Python Good Practices</title><link>https://pyvideo.org/pycon-pl-2015/riding-a-bike-driven-development-python-good-practices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentation consists of some tips and tricks which are well known for advanced pythonistas, but also a couple of less known practices based on my own experience developed during working on Fuel. “Riding a Bike” refers to something we need to eventually learn and it becomes natural after some time - so Natural that we don’t need to think about Riding a Bike while riding a bike. In my presentation I will confront different solutions for the same problems, showing underlying algorithms and complexity. Presentation intends to be a comprehensive set of good python practices for beginners and a spark for discussion among advanced pythonistas.&lt;/p&gt;
&lt;p&gt;Sylwester Brzęczkowski
Sylwester works as a junior Python engineer at Mirantis, where his major focus is on making a product for seamless deployment of OpenStack clouds. He graduated Adam Mickiewicz University in Poznań as a Bachelor of Software Engineering. While he was studying there, he and two of his friends have founded an initiative called PyCircle which helps other students to learn Python and supports their projects. In his free time he works on pet project called 'citify'. The rest of the time he spends for reading books, and playing musical instruments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sylwester Brzęczkowski</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/riding-a-bike-driven-development-python-good-practices.html</guid></item><item><title>Rise of Cortana: how artificial intelligence has changed global company?</title><link>https://pyvideo.org/pycon-pl-2015/rise-of-cortana-how-artificial-intelligence-has-changed-global-company.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michał Żyliński &amp;quot;Rise of Cortana: how artificial intelligence has changed global company?&amp;quot;&lt;/p&gt;
&lt;p&gt;Internet of Things, big data, machine learning are certainly drawing a lot of attention nowadays. This session is supposed to be practical, hands-on, human-friendly introduction to advanced analytics topics that surround us. It will be about turning data into something cool and hopefully useful. It will be about doing something fast, but not dirty. And yes, it’ll try to explain how Python and open source is helping Microsoft transition towards future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michał Żyliński</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/rise-of-cortana-how-artificial-intelligence-has-changed-global-company.html</guid></item><item><title>Skonteneryzuj swój świat</title><link>https://pyvideo.org/pycon-pl-2015/skonteneryzuj-swoj-swiat.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;W ciągu ostatnich kilku lat, z wielu stron zasypywani jesteśmy coraz to nowszymi określeniami, które zamiast kojarzyć się z oprogramowaniem, sugerują powiązanie z pracą w porcie: &amp;quot;dokery&amp;quot;, &amp;quot;rokety&amp;quot;, &amp;quot;kontenery&amp;quot; i inne. Żeby łatwiej się w tym wszystkim odnaleźć, wyjaśnię co do czego służy, jak zacząć swoją przygodę z &amp;quot;Dockerem&amp;quot; oraz jakie korzyści i niebezpieczeństwa z tym związane, czyhają na potencjalnego użytkownika.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dariusz Śmigiel</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/skonteneryzuj-swoj-swiat.html</guid></item><item><title>SOLID Python</title><link>https://pyvideo.org/pycon-pl-2015/solid-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SOLID is an acronym for five basic principles of Object Oriented Programming. The principles intend to make software entities easy to understand, maintain, unittest and reuse in different contexts. They are mostly used in strongly typed languages such as Java or C++. Probably that's why Python developers don't follow them too often or they do but didn't ever realize it. I'd like to talk about my experience in following the SOLID principles in Python. I will show you how they apply to Python as a dynamic language and what problems did they solve for me.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ignacy Sokołowski</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/solid-python.html</guid></item><item><title>With modern_peripherals: Python and Flask</title><link>https://pyvideo.org/pycon-pl-2015/with-modern_peripherals-python-and-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Auto-scrolling sites, glance-following ads, and gesture friendly web pages are coming! Over the last few years three products emerged that enable interaction with computer in a new way: Myo Armband, Leap Motion Controller and EyeTribe. The Myo Armband is a device that uses the electrical activity in your muscles to wirelessly control your computer, phone, and tablet, which is especially useful when your hands are “tied” or dirty. This device will be used to navigate through the presentation. The Leap Motion Controller tracks both hands in front of the screen. From a web developer’s perspective, both devices allows us to use gestures, previously restricted to touch devices, on desktops. EyeTribe is an affordable eye-tracking device. The talk will briefly cover setting up SDKs and python wrappers, and then focus on possible uses in daily life, business and, of course, web app development. Code examples will be included. In addition, the trade-offs between processing this new type of input data in the client versus processing input on the server will be discussed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piotr Dyba</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/with-modern_peripherals-python-and-flask.html</guid></item><item><title>Wszystko co chcielibyście wiedzieć o dziedziczeniu, ale boicie się zaimplementować.</title><link>https://pyvideo.org/pycon-pl-2015/wszystko-co-chcielibyscie-wiedziec-o-dziedziczeniu-ale-boicie-sie-zaimplementowac.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zainspirowany prelekcją Raymond Hettinger o nazwie &amp;quot;Super considered super!&amp;quot;, która pokazywała możliwości mechanizmu dziedziczenia, postanowiłem popełnić pewien eksperyment. Chciałem sprawdzić czy uda się zaimplementować taki mechanizm w frameworku webowym. Prelekcja będzie opisywała czy mi się udało, jakie napotkałem problemy oraz jak sobie z nimi radziłem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dominik Długajczyk</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/wszystko-co-chcielibyscie-wiedziec-o-dziedziczeniu-ale-boicie-sie-zaimplementowac.html</guid></item><item><title>Your keyboard</title><link>https://pyvideo.org/pycon-pl-2015/your-keyboard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a programmer, your fingers and the keyboard is the interface between your brain and the computer, and is one of your most important work tools. Yet is it often overlooked, and people tend to just use whatever keyboard that came with the computer. This talk will take an in-depth look at your computer keyboard.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Regebro</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:pycon-pl-2015/your-keyboard.html</guid></item><item><title>Microservices on OpenShift v3</title><link>https://pyvideo.org/pycon-pl-2015/microservices-on-openshift-v3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to Martin Fowler, microservices &amp;quot;is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.&amp;quot; (&lt;a class="reference external" href="http://martinfowler.com/articles/microservices.html"&gt;http://martinfowler.com/articles/microservices.html&lt;/a&gt;) That definition sounds very promising and makes you think about miscroservices architecture as something very easy. But is it really that simple to create such services? If you think about each of the pieces separately then maybe the answer is &amp;quot;yes&amp;quot;, but what about that moment when your project grows into more than 5 tasks? What about deploying them into tens, hundreds or thousands of instances? What about rolling out a new release of a single component or even dozens of them? You can see that the problem becomes very complex, very quickly. But now can you imagine a world where doing such complex tasks will be as easy as pressing one button (or invoking one command for CLI nerds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Szulik</dc:creator><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-15:pycon-pl-2015/microservices-on-openshift-v3.html</guid></item><item><title>Object capability security</title><link>https://pyvideo.org/pycon-pl-2015/object-capability-security.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most software we write has the ability to do essentially anything: open sockets, spawn processes, perform long blocking computation, read arbitrary objects in memory, et cetera. Most tools for limiting what applications can do are opt-in; many of them are complex to use. This has important security implications; software can often be tricked into abusing those privileges that it didn’t really even need to have to begin with. The object-capability model is an alternative security model that reasons about capabilities as first-class objects. In this talk, we’ll explore what object-capability security is, why we’re not all using it already, how we can leverage the ideas in it to materially improve the security of the projects we maintain today and start tomorrow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laurens van Houtven</dc:creator><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-15:pycon-pl-2015/object-capability-security.html</guid></item><item><title>Why do you need a code review system?</title><link>https://pyvideo.org/pycon-pl-2015/why-do-you-need-a-code-review-system.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code review is the single best practice you can introduce in your project that will tremendously improve both the quality of code and the competency of your team. But there are easier and harder ways of doing code review. The author will attempt to convince you that while sending the patches for review by e-mail or attaching them to issue reports on the bug tracker may somehow work, you will get much better results using dedicated software, even when the available options are not that great.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radomir Dopieralski</dc:creator><pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-15:pycon-pl-2015/why-do-you-need-a-code-review-system.html</guid></item></channel></rss>