<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Kas Stohr</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_kas-stohr.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-21T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Thinking of Topic Modeling as Search</title><link href="https://pyvideo.org/pybay-2024/thinking-of-topic-modeling-as-search.html" rel="alternate"></link><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><author><name>Kas Stohr</name></author><id>tag:pyvideo.org,2024-09-21:/pybay-2024/thinking-of-topic-modeling-as-search.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Typically when you think about using a topic model in production you encounter two hurdles: First, topics change continually, and document tags become stale as soon as they are created. Second, while unsupervised topic models do a good job of clustering topics, creating robust, human-interpretable labels is challenging. Framing â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Typically when you think about using a topic model in production you encounter two hurdles: First, topics change continually, and document tags become stale as soon as they are created. Second, while unsupervised topic models do a good job of clustering topics, creating robust, human-interpretable labels is challenging. Framing topic modeling as a search problem, helps overcome these challenges and makes it easier to use supervised or unsupervised topic models in real-time applications.&lt;/p&gt;
</content><category term="PyBay 2024"></category></entry></feed>