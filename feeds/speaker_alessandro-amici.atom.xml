<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alessandro-amici.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T00:00:00+00:00</updated><entry><title>Meet dask and distributed: the unsung heroes of Python scientific data ecosystem.</title><link href="https://pyvideo.org/pycon-italia-2019/meet-dask-and-distributed-the-unsung-heroes-of-python-scientific-data-ecosystem.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/meet-dask-and-distributed-the-unsung-heroes-of-python-scientific-data-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thanks to its world-class data tools and libraries, like Numpy, Pandas,
Jupyter, Matplotlib and xarray, Python is becoming the language of
choice in many scientific communities from Physics to Climate Science,
from Earth Observation to Economy.&lt;/p&gt;
&lt;p&gt;A turn-key but less-know component of the scientific ecosystem is the
dask library that enable seamless parallel, distributed and GPU
computing in most cases without code changes.&lt;/p&gt;
&lt;p&gt;We will use climate science as an typical example of a discipline where
simple tasks become easily big data problems and where mastering xarray,
dask and dask.distributed is the key to turn them back into simple
tasks, possibly on a large cluster of VMs (that you can easily provision
from your preferred cloud provider).&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://gitpitch.com/alexamici/talks/master?p=PyConX-2019"&gt;https://gitpitch.com/alexamici/talks/master?p=PyConX-2019&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1704"&gt;https://python.it/feedback-1704&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Jupyter"></category><category term="dask.distributed"></category><category term="Big-Data"></category><category term="xarray"></category><category term="dask"></category><category term="climate-change"></category><category term="earth-obeservation"></category><category term="pandas"></category></entry><entry><title>Solving Google Code Jam problems with PyPy - Part 1</title><link href="https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</id><summary type="html"></summary><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Solving Google Code Jam problems with PyPy - Part 2</title><link href="https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</id><summary type="html"></summary><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Coding competitions with PyPy aka "Python for the win!"</title><link href="https://pyvideo.org/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</id><summary type="html"></summary><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Programmazione competitiva con PyPy: "Vincere con Python!"</title><link href="https://pyvideo.org/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</id><summary type="html"></summary><category term="numpy"></category><category term="JIT"></category><category term="networkx"></category><category term="performance"></category><category term="scientific-computing"></category><category term="pypy"></category></entry><entry><title>Affrontare le sfide del cambiamento climatico con Python</title><link href="https://pyvideo.org/pycon-italia-2017/affrontare-le-sfide-del-cambiamento-climatico-con-python.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/affrontare-le-sfide-del-cambiamento-climatico-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Che si intenda pianificare una attività industriale di lungo periodo,
come costruire un complesso sciistico, o semplicemente scegliere il
periodo ideale per le vacanze ai tropici è essenziale avere previsioni
affidabili sulle condizioni climatiche che si incontreranno. Cosa non
banale in un mondo in cui il clima sta cambiando.&lt;/p&gt;
&lt;p&gt;Il &lt;a class="reference external" href="http://climate.copernicus.eu"&gt;servizio per il monitoraggio del cambiamento climatico del programma
europeo Copernicus&lt;/a&gt; si avvia a
diventare la principale piattaforma per l’accesso e l’analisi dei dati
climatici in Europa il cui cuore, il Climate Data Store Toolbox, è
interamente basato su Python 3 e sullo stack di tecnologie del PyData
con l’aggiunta di tool specifici per trattare dati che riguardano
l’atmosfera.&lt;/p&gt;
&lt;p&gt;In questo talk presenterò i dati e gli strumenti di accesso e analisi
già disponibili e la roadmap verso il sistema completo attraverso
l’implementazione di vari casi d’uso.&lt;/p&gt;
</summary><category term="climate-change"></category><category term="notebook"></category><category term="python3"></category><category term="pydata"></category></entry><entry><title>Solving the web most popular code shortening competition with Python 3</title><link href="https://pyvideo.org/pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/solving-the-web-most-popular-code-shortening-competition-with-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Code shortening” is the “sport” where participants strive to achieve
the shortest possible source code that solves a programming problem by
exploiting all the tricks and quirks of the language.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON problem&lt;/a&gt; on SPOJ
is one of the oldest and most popular code shortening problems on the
web with a bizarre twist, only character above ASCII value 32 are
counted for the penalty. During the talk we will take a journey into
some frightening depths of the Python language in order to write shorter
and shorter solutions to SIZECON until, exploiting a number of
mind-blowing tricks, we will reach the current record solution for
Python 3 of 31 characters.&lt;/p&gt;
&lt;p&gt;I promise I’ll show you the most obfuscated, contrived and sick python
code you have ever seen and (hopefully!) will ever see. I invite
participants to give &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON"&gt;SIZECON&lt;/a&gt;
a try and check their score against the &lt;a class="reference external" href="http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3"&gt;Python3
rankings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is an updated version of a talk I presented during Europython 2015
and that had an unexpected success both on-site and on social media. The
talk is now centred on Python 3 shorting tricks and is has been reworked
to be much more easy to follow.&lt;/p&gt;
</summary><category term="coding-competitions"></category><category term="fun-and-humor"></category><category term="python3"></category></entry><entry><title>Fast Python! Coding competitions with CPython and PyPy</title><link href="https://pyvideo.org/europython-2017/fast-python-coding-competitions-with-cpython-and-pypy.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/fast-python-coding-competitions-with-cpython-and-pypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a coding competition you want to solve problems &amp;quot;fast&amp;quot;...
why would you choose a &amp;quot;slow&amp;quot; interpreted language like Python?
Because the &amp;quot;slow&amp;quot; Python wins competitions more often that most people think.&lt;/p&gt;
&lt;p&gt;We will show how coding competitions work, what are the resources and
constraints that competitors need to take into account, and we will find
out that, like very often in real life, the actual processing time
is only a small term in the complex equation that describe a competition.&lt;/p&gt;
&lt;p&gt;The &amp;quot;faster&amp;quot; PyPy may help in gaining raw speed, but that is not the
real advantage it gives you in a competition.&lt;/p&gt;
</summary></entry><entry><title>Solving the web most popular code shortening competition in Python.</title><link href="https://pyvideo.org/europython-2015/solving-the-web-most-popular-code-shortening-competition-in-python.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2015-08-06:europython-2015/solving-the-web-most-popular-code-shortening-competition-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alessandro Amici - Solving the web most popular code shortening competition in Python.
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;“Code shortening” is the “sport” where participants strive to achieve
the shortest possible source code that solves a programming problem by
exploiting all the tricks and quirks of the language.&lt;/p&gt;
&lt;p&gt;The [SIZECON on SPOJ][1] is one of the oldest and most popular code
shortening problems on the web with a bizarre twist, only character
above ASCII value 32 are counted for the penalty. During the talk we
will take a journey into some frightening depths of the Python
language in order to write shorter and shorter solutions to SIZECON
until, exploiting a number of truly mind-blowing tricks, we will reach
the current record solution of 28 characters (above ASCII 32!).&lt;/p&gt;
&lt;p&gt;I promise I’ll show you the most obfuscated, contrived and sick python
code you have ever seen and (hopefully!) will ever see. I invite
participants to give [SIZECON][1] a try and check their score against
the [Python2][2] and [Python3][3] SPOJ rankings.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Slides:&lt;/em&gt; [&lt;a class="reference external" href="http://slides.com/alessandroamici/solving-the-web-most"&gt;http://slides.com/alessandroamici/solving-the-web-most&lt;/a&gt;-
popular-shortening-contest-with-python][4]&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://www.spoj.com/problems/SIZECON/"&gt;http://www.spoj.com/problems/SIZECON/&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://www.spoj.com/ranks/SIZECON/lang=PYTH%202.7"&gt;http://www.spoj.com/ranks/SIZECON/lang=PYTH%202.7&lt;/a&gt;
[3]: &lt;a class="reference external" href="http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3"&gt;http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3&lt;/a&gt;
[4]: &lt;a class="reference external" href="http://slides.com/alessandroamici/solving-the-web-most-popular-shortening-contest-with-python"&gt;http://slides.com/alessandroamici/solving-the-web-most-popular-shortening-contest-with-python&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Test-driven code search and reuse coming to Python with pytest-nodev</title><link href="https://pyvideo.org/europython-2016/test-driven-code-search-and-reuse-coming-to-python-with-pytest-nodev.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/test-driven-code-search-and-reuse-coming-to-python-with-pytest-nodev.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alessandro Amici - Test-driven code search and reuse coming to Python with pytest-nodev
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/test-driven-source-code-search-for-python-with-pytest-nodev"&gt;https://ep2016.europython.eu//conference/talks/test-driven-source-code-search-for-python-with-pytest-nodev&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We will present the test-driven reuse (TDR) development strategy, a
natural extension of test-driven development (TDD), and how to execute
it with &lt;a class="reference external" href="http://pytest-nodev.readthedocs.io/en/stable/quickstart.html"&gt;pytest-nodev&lt;/a&gt; a test-driven search engine for Python code.&lt;/p&gt;
&lt;p&gt;Pytest-nodev and the other nodev tools that helps implement TDR for
Python are rather new, in spite of that we will present several
successful applications of the technique to more and more complex
examples.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We will present the test-driven reuse (TDR) development strategy, a
natural extension of test-driven development (TDD), and how to execute
it with &lt;a class="reference external" href="http://pytest-nodev.readthedocs.io/en/stable/quickstart.html"&gt;pytest-nodev&lt;/a&gt; an Open Source test-driven search engine for Python code.&lt;/p&gt;
&lt;p&gt;When developing new functionalities developers spend significant
efforts searching for code to reuse, mainly via keyword-based
searches, e.g. on StackOverflow and Google. Keyword-based search is
effective in finding code that is explicitly designed and documented
to be reused, e.g. libraries and frameworks, but typically fails to
identify reusable functions and classes in the large corpus of
auxiliary code of software projects.&lt;/p&gt;
&lt;p&gt;TDR aims to address the limits of keyword-based search with test-
driven code search that focuses instead on code behaviour and
semantics. Developing a new feature in TDR starts with the developer
writing the tests that will validate candidate implementations of the
desired functionality. Before writing any functional code the tests
are run against all functions and classes of available projects. Any
code passing the tests is presented to the developer as a candidate
implementation for the target feature.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nodev-io/pytest-nodev"&gt;Pytest-nodev (github)&lt;/a&gt; and other nodev tools that help implement TDR for Python are newer than the JAVA counterparts, in spite of that we will present several applications of the technique to more and more complex examples.&lt;/p&gt;
</summary></entry><entry><title>Come "liberare" i dati catastali in formato CXF con GDAL/OGR e Proj4</title><link href="https://pyvideo.org/europython-2012/come-liberare-i-dati-catastali-in-formato-cxf-c.html" rel="alternate"></link><published>2012-07-04T00:00:00+00:00</published><updated>2012-07-04T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2012-07-04:europython-2012/come-liberare-i-dati-catastali-in-formato-cxf-c.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Alessandro Amici - 4 JULY 2012 in &amp;quot;Track Big Mac&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La buona notizia è che l’Agenzia del Territorio è in grado di fornire i
dati cartografici e catastali ufficiali su tutta Italia in formato
elettronico. La cattiva notizia è che tali dati sono distribuiti in vari
formati proprietari scarsamente e malamente supportati dai software GIS
di largo uso. In questa presentazione mostriamo come leggere, validare,
correggere e tradurre in formati standard (ad esempio shapefile) i dati
del catasto terreni e fabbricati in formato CXF usando il potente stack
di geoprocessing e format translation in Python. L’intero processo e
numerosi dei singoli passaggi sono completamente generici e possono
essere applicati alla lettura e traduzione di qualsiasi formato
geografico proprietario. B-Open ha recentemente rilasciato con licenza
Open Source bgeo.catasto, una parte della propria libreria di parser e
traduttori dai formati dell’Agenzia del Territorio. bgeo.catasto al
momento supporta la lettura e traduzione dei dati catastali in formato
CXF e dei dati censuari nei formati TER e FAB.&lt;/p&gt;
</summary></entry></feed>