<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_europython-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-14T00:00:00+00:00</updated><entry><title>A robotic platform for natural and effective human-robot interaction</title><link href="https://pyvideo.org/europython-2017/a-robotic-platform-for-natural-and-effective-human-robot-interaction.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Enrico Carbognani</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/a-robotic-platform-for-natural-and-effective-human-robot-interaction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This  talk deals  with  the usage  of  artificial  intelligent
techniques  in  humanoid  robotics. The focus is on human–robot
interaction with the goal of building a robotic platform which
embodiments are able to interact in natural and effective way with
humans through speech, gestures, and facial expressions. The system
is fully implemented in Python and based on the Robotic Operating
System (ROS). The talk will describe the hardware and software
configuration of our currently NAO based humanoid platform.  The
strategy has been to use available high level Python libraries for
spoken language processing, sentiment analysis,  vision,  interfacing
with Artificial Intelligence applications  in   order   to   provide
current edge technologies performances.   The overall system
architecture is based on finite state machines nodes interacting via
the ROS communication layer.&lt;/p&gt;
&lt;p&gt;The main fields of applications that the platform is targeting are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Entertainment&lt;/li&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Field robotics&lt;/li&gt;
&lt;li&gt;Home and companion robotics&lt;/li&gt;
&lt;li&gt;Hospitality&lt;/li&gt;
&lt;li&gt;Robot Assisted Therapy (RAT)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will present the latest status of the platform together with a NAO based demo.&lt;/p&gt;
</summary></entry><entry><title>Closing Session</title><link href="https://pyvideo.org/europython-2017/closing-session.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/closing-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Closing session&lt;/p&gt;
</summary></entry><entry><title>Deep Learning your Broadband Network @HOME</title><link href="https://pyvideo.org/europython-2017/deep-learning-your-broadband-network-home.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Hongjoo Lee</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/deep-learning-your-broadband-network-home.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of us have broadband internet services at home. Sometimes it
does not work well, and we visit speed test page and check internet
speed for ourselves or call cable company to report the service
failure. As a Python programmer, have you ever tried to automate the
internet speed test on a regular basis? Have you ever thought about
logging the data and analyzing the time series ?&lt;/p&gt;
&lt;p&gt;In this talk, we will go through the whole process of data mining and
knowledge discovery. Firstly we write a script to run speed test
periodically and log the metric. Then we parse the log data and
convert them into a time series and visualize the data for a certain
period.&lt;/p&gt;
&lt;p&gt;Next we conduct some data analysis; finding trends, forecasting, and
detecting anomalous data. There will be several statistic or deep
learning techniques used for the analysis; ARIMA (Autoregressive
Integrated Moving Average), LSTM (Long Short Term Memory).&lt;/p&gt;
&lt;p&gt;The goal is to provide basic idea how to run speed test and collect
metrics by automated script in Python. Also, I will provide high
level concept of the methodologies for analyzing time series data.
Also, I would like to motivate Python people to try this at home.&lt;/p&gt;
&lt;p&gt;This session is designed to be accessible to everyone, including
anyone with no expertise in mathematics, computer science.
Understandings of basic concepts of machine learning and some Python
tools bringing such concepts into practice might be helpful, but not
necessary for the audience.&lt;/p&gt;
</summary></entry><entry><title>Finding bugs for free: The magic of static analysis.</title><link href="https://pyvideo.org/europython-2017/finding-bugs-for-free-the-magic-of-static-analysis.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Mark Shannon</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/finding-bugs-for-free-the-magic-of-static-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static analysis is a powerful technique for improving the quality of
software. It allows you to find bugs in your Python code without any
the need for any annotations.&lt;/p&gt;
&lt;p&gt;At lgtm.com we provide state-of-the-art static analysis for a number
of languages including Python. Our Python analysis can find bugs
without the annoyance of many false positives. We have already found
bugs in the standard library, requests, numpy and many others.&lt;/p&gt;
&lt;p&gt;In this talk I will briefly describe what static analysis is, how it
can be useful to you, and then give an overview of the techniques we
use.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;This talk is aimed at all Python developers, although I expect that
those who have used pyflakes, pep8, pylint or mypy in the past will
find it the most accessible. I hope that this talk will inspire
developers to start using static analysis tools (hopefully ours) and
to produce better code as a result. I will assume that the audience
knows Python well, but knows little or nothing about static analysis.&lt;/p&gt;
&lt;p&gt;(lgtm.com is a commercial project that is free to use for open-source software)&lt;/p&gt;
</summary></entry><entry><title>From an old-school data managing company to data analytics with Python</title><link href="https://pyvideo.org/europython-2017/from-an-old-school-data-managing-company-to-data-analytics-with-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Henrik Hain</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/from-an-old-school-data-managing-company-to-data-analytics-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our mission is to manage a huge amount of communication and document
data in large scale industry projects by providing web based project
management systems. The increasing amount of communication creates
the desire for a GPS helping us and our customers to navigate through
the communication stream. Our R&amp;amp;D projects are focusing on topics
like clustering, event detection, and network analysis (Who knows
who, domain experts).&lt;/p&gt;
&lt;p&gt;Traveling the wild side of NLP, Data Science, and Analytics, we
stumbled across amazing Python tools supporting us in our goal to
navigate the project communication and therefor supporting our
clients in Project &amp;amp; Risk Management avoiding wrong turns. We
would like to share some of our approaches to answer our research
topics and challenges:&lt;/p&gt;
&lt;p&gt;One of the challenges, amongst others, is to utilize and adapt up to
date clustering algorithms for social stream data and to expose them
as reentrant services. Another one is to tailor them for the current
application domain, improving clustering precision by parametrization
and other means. Furthermore the integration of a Python based
analytics system into an existing JAVA based application environment
and eco system is required.&lt;/p&gt;
&lt;p&gt;In addition, we would also like to share some of our &amp;quot;traffic jams&amp;quot;
experienced during our travel starting as traditional Java/SQL
focusing company that integrated Python into its development
portfolio.&lt;/p&gt;
</summary></entry><entry><title>Graph Databases: Talking about your Data Relationships with Python</title><link href="https://pyvideo.org/europython-2017/graph-databases-talking-about-your-data-relationships-with-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Nicolle Cysneiros</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/graph-databases-talking-about-your-data-relationships-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever considered how many relationships you have in your
virtual life? Every friend or page liked on Facebook, each connection
in LinkedIn or Twitter account followed is a new relationship not
only between two people, but also between their data. In Brazil only,
we have 160 millions Facebook users. How can we represent and
manipulate all these relationships? Graph Databases are storage
systems that use graph structure (nodes and edges) to represent and
store data in a semantic way.&lt;/p&gt;
&lt;p&gt;This talk will begin approaching the challenge in representing
relationships in Relational Databases and introducing a more friendly
solution using graph. The definition of Graph Database, its pros and
cons and some available tools (Neo4J, OrientDB and TitanDB) will be
shown during the presentation, as well as how these tools can be
integrated with Python.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;p&gt;Relationships&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Relationships in Relational Databases&lt;/li&gt;
&lt;li&gt;Graph Definition&lt;/li&gt;
&lt;li&gt;Graph approach to represent relationships&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Graph Databases&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Definition&lt;/li&gt;
&lt;li&gt;Advantages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neo4J&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Usage Examples&lt;/li&gt;
&lt;li&gt;Integration with Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comparison between Graph Databases&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Comparison between Neo4J and Relational Database&lt;/li&gt;
&lt;li&gt;Applications&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>I don't like Mondays-what I learned about data engineering after 2 years on call</title><link href="https://pyvideo.org/europython-2017/i-dont-like-mondays-what-i-learned-about-data-engineering-after-2-years-on-call.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Daniele Rapati</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/i-dont-like-mondays-what-i-learned-about-data-engineering-after-2-years-on-call.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The first weekend of October 2015 my company bought an advert during
the first episode of &amp;quot;Downton Abbey&amp;quot; on Sunday evening. It was so
successful that the website went down for half an hour. We wanted to
look at the analytics and the data to estimate the impact. But they
were having a very hard weekend too: the replica of the production
database we used was unreachable and the only person who knew how to
fix it was on a plane. Monday really was a memorable day.&lt;/p&gt;
&lt;p&gt;This session is about sharing some life experience and best practices
around Data Engineering. Attendants should have some previous
understanding of data and tech in business. Attendants should leave
with an understanding of on-call practices and with some quick win
actions to take.&lt;/p&gt;
&lt;p&gt;What does it mean to be on call?&lt;/p&gt;
&lt;p&gt;How do you make sure that the phone rings as little as possible?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fixing versus Root Cause Analysis.&lt;/li&gt;
&lt;li&gt;Systems break at junctures.&lt;/li&gt;
&lt;li&gt;Especially if the juncture is with a third party.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why and when is it worth reacting to errors as soon as they happen?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;External Services.&lt;/li&gt;
&lt;li&gt;Increasing Business Trust.&lt;/li&gt;
&lt;li&gt;Allowing others to build on solid ground.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do you make sure the phone rings when it should?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alerting tools: emails, chat, specialised applications like PagerDuty, OpsGenie and Twilio&lt;/li&gt;
&lt;li&gt;Monitoring systems&lt;/li&gt;
&lt;li&gt;Monitoring data (Data Quality) as a continuous early warning system.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Introduction to TensorFlow</title><link href="https://pyvideo.org/europython-2017/introduction-to-tensorflow.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Alejandro Solano</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/introduction-to-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deep learning is at its peak, with scholars and startups releasing
new amazing applications every other week, and TensorFlow is the main
tool to work with it. However, Tensorflow it's not an easy-access library for beginners in the field.&lt;/p&gt;
&lt;p&gt;In this talk, we will cover the explanation of core concepts of deep
learning and TensorFlow totally from scratch, using simple examples
and friendly visualizations.&lt;/p&gt;
&lt;p&gt;The talk will go through the next topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why deep learning and what is it?&lt;/li&gt;
&lt;li&gt;The main tool for deep learning: TensorFlow&lt;/li&gt;
&lt;li&gt;Installation of TensorFlow&lt;/li&gt;
&lt;li&gt;Core concepts of TensorFlow: Graph and Session&lt;/li&gt;
&lt;li&gt;Hello world!&lt;/li&gt;
&lt;li&gt;Step by step example: learning how to sum&lt;/li&gt;
&lt;li&gt;Core concepts of Deep Learning: Neural network&lt;/li&gt;
&lt;li&gt;Core concepts of Deep Learning: Loss function and Gradient descent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, the hope is that you will have gained the
basic concepts involving deep learning and that you could build and
run your own neural networks using TensorFlow.&lt;/p&gt;
</summary></entry><entry><title>Large-scale data extraction, structuring and matching using Python and Spark</title><link href="https://pyvideo.org/europython-2017/large-scale-data-extraction-structuring-and-matching-using-python-and-spark.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Deep Kayal</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/large-scale-data-extraction-structuring-and-matching-using-python-and-spark.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Motivation - Matching data collections with the aim to augment and
integrate the information for any available data point that lies in
two or more of these collections, is a problem that nowadays arises
often. Notable examples of such data points are scientific
publications for which metadata and data are kept in various
repositories, and users’ profiles, whose metadata and data exist in
several social networks or platforms.&lt;/p&gt;
&lt;p&gt;In our case, collections were as follows: (1) A large dump of
compressed data files on s3 containing archives in the form of zips,
tars, bzips and gzips, which were expected to contain published
papers in the form of xmls and pdfs, amongst other files, and (2) A
large store of xmls in the form of xmls, some of which are to be
matched to Collection 1.&lt;/p&gt;
&lt;p&gt;Problem Statement - The problems, then, are: (1) How to best unzip
the compressed archives and extract the relevant files? (2) How to
extract meta-information from the xml or pdf files? (3) How to match
the meta-information from the two different collections? And all of
these must be done in a big-data environment.&lt;/p&gt;
&lt;p&gt;Presentation –
&lt;a class="reference external" href="https://drive.google.com/open?id=1hA9J80446Qh7nd8PMYZibtIR1WjMkdLXfDgwUlts7JM"&gt;https://drive.google.com/open?id=1hA9J80446Qh7nd8PMYZibtIR1WjMkdLXfDgwUlts7JM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The presentation will describe the solution process and the use of
python and Spark in the large-scale unzipping and extraction of files
from archives, and how metadata was then extracted from the files to
perform the matches on.&lt;/p&gt;
</summary></entry><entry><title>Lessons learned in X years of parallel programming</title><link href="https://pyvideo.org/europython-2017/lessons-learned-in-x-years-of-parallel-programming.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Michele Simionato</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/lessons-learned-in-x-years-of-parallel-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is a lot more to parallel programming in Python than
multiprocessing.Pool().map.&lt;/p&gt;
&lt;p&gt;In this talk I will share some hard-learned knowledge gained in
several years of parallel programming.&lt;/p&gt;
&lt;p&gt;Covered topics will include performance, ways to measure the
performance, memory occupation, data transfer and ways to reduce the
data transfer, how to debug parallel programs and useful libraries.&lt;/p&gt;
&lt;p&gt;I will give some practical examples, both in enterprise programming
(importing CSV files in a database) and in scientific programming
(numerical simulations). The initial part of the talk will be
pedagogical, advocating the convenience of parallel programming in
the small (i.e. in single machine environment); the second part will
be more advanced and will touch a few things to know when writing
parallel programs for medium-sized clusters.&lt;/p&gt;
&lt;p&gt;I will also briefly discuss the compatibility layer that we have
developed at GEM to be independent from the underlying
parallelization technology (multiprocessing, concurrent.futures,
celery, ipyparallel, grid engine...).&lt;/p&gt;
</summary></entry><entry><title>Lessons learnt building a medical chatbot in Python</title><link href="https://pyvideo.org/europython-2017/lessons-learnt-building-a-medical-chatbot-in-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Wilhelm Van Der Walt</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/lessons-learnt-building-a-medical-chatbot-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;To put an accessible and affordable health service in the hands of every person on earth.&amp;quot;&lt;/p&gt;
&lt;p&gt;Thats our mission at babylon. Leveraging the powers of AI, python and
micro services we took a step towards that vision by building a
medical chatbot that we shipped in November last year. In this talk I
would like to share with you all the things we learnt in the process.&lt;/p&gt;
&lt;p&gt;This talk is our story. Its a story that starts with an idea and
meanders through the dark and dangerous land of things like Graph
databases, machine learning and async programming in python. The
story is far from over, but we have come to a point where we would
like to reflect and share with the community all that we have learnt.&lt;/p&gt;
&lt;p&gt;More specifically I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Architecture decisions we made and why we made them&lt;/li&gt;
&lt;li&gt;lessons learnt doing async in python at scale&lt;/li&gt;
&lt;li&gt;testing chatbots&lt;/li&gt;
&lt;li&gt;clinical governance and safety (literally 2 sentences, I promise)&lt;/li&gt;
&lt;li&gt;The drawbacks of REST&lt;/li&gt;
&lt;li&gt;Why I am glad we did most of it in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then of course some time for questions at the end :)&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2017-07-14</title><link href="https://pyvideo.org/europython-2017/lightning-talks-2017-07-14.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/lightning-talks-2017-07-14.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks
EuroPython 2017 - 2017-07-14 - Anfiteatro 2&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Linespots: Predicting Bugs in your Code</title><link href="https://pyvideo.org/europython-2017/linespots-predicting-bugs-in-your-code.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Maximilian Scholz</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/linespots-predicting-bugs-in-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In times of increased awareness of technical debts, reviewing and
auditing code becomes more important. The main problem with code
review is the amount of time that is being spent searching the needle
in the haystack. You just don’t know what you are looking for and
where to find it. One possible solution to the problem to the idea of
bug prediction. If we could somehow know where bugs are in our code,
focusing reviewing efforts on that area should, in theory, increase
the effectiveness of our review. More bugs should be uncovered while
less time is spent reviewing.&lt;/p&gt;
&lt;p&gt;This is what Linespots tries to offer. It is an algorithm developed
during my thesis that analyses a project’s history and calculates a
probability value for each line of code in the project, representing
the likeliness of a bug existing in that line.&lt;/p&gt;
&lt;p&gt;Using the probabilities, reviewers can focus on the areas that are at
a higher risk of containing bugs and spend less time on robust code.&lt;/p&gt;
&lt;p&gt;The research done so far showed, that by analyzing 0.5% lines of code
with the highest risk values in a project, an average of 50% of the
bugs fixed in the next 150 commits were correctly predicted by
Linespots. This is an improvement by factor 10 compared to Bugspots,
an algorithm developed at Google, which Linespots is based upon.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basics and functionality of Linespots&lt;/li&gt;
&lt;li&gt;Research results&lt;/li&gt;
&lt;li&gt;Pros and cons of Linespots&lt;/li&gt;
&lt;li&gt;Results of a case study&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Modelling pollution from traffic, using Smartphone data and Python</title><link href="https://pyvideo.org/europython-2017/modelling-pollution-from-traffic-using-smartphone-data-and-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Anders Lehmann</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/modelling-pollution-from-traffic-using-smartphone-data-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk presents results from my PhD project on models for transportation
related pollution.&lt;/p&gt;
&lt;p&gt;Pollution from personal transport in Cities is a big and growing problem.
By monitoring the flow, and congestion in the transport system two goals
can be achieved. First, the adherence to agreed limit values
(or breaking said limits) can be followed and used to decrease
health effects of local pollution hotspots. Secondly, monitoring
of the total emission of climate forcing gases from transportation,
is important for designing climate mitigation actions.&lt;/p&gt;
&lt;p&gt;Python is used in combination with other tools to convert sensor data
from smartphones, into pollution concentrations in urban settings.
To mitigate the lack of complete data coverage, the missing data is
simulated by a traffic model, to locate congestion and model the
traffic related pollution concentration.&lt;/p&gt;
</summary></entry><entry><title>Overcoming Cognitive Bias</title><link href="https://pyvideo.org/europython-2017/overcoming-cognitive-bias.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Anna Ravenscroft</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/overcoming-cognitive-bias.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting with a brief description of how built-in mechanisms in our
brains lead to cognitive bias, the talk will address how a variety of
cognitive biases manifest in the Python and tech communities, and
how to overcome them.&lt;/p&gt;
</summary></entry><entry><title>Pandas - not just for data scientists</title><link href="https://pyvideo.org/europython-2017/pandas-not-just-for-data-scientists.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Uzi Halaby Senerman</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pandas-not-just-for-data-scientists.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is not a tutorial. It's an attempt to expose non data scientists
experienced pythonistas to the powerful pandas library. Most of
python developers don't use pandas (either because they never heard
of it, felt that it's a too steep learning curve or never thought
that it will be useful for them). I intend to talk about python
performance limitations and show how pandas can be used to overcome
some of these limitations. The talk will be accompanied by a live
Jupiter Notebook session that will demonstrate a typical use of
pandas.&lt;/p&gt;
</summary></entry><entry><title>Physical computing with Raspberry Pi and Python</title><link href="https://pyvideo.org/europython-2017/physical-computing-with-raspberry-pi-and-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/physical-computing-with-raspberry-pi-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Raspberry Pi Foundation is working to put the power of digital
making in the hands of people all over the world, and is well known
for its series of small, cheap single board computers.&lt;/p&gt;
&lt;p&gt;The Raspberry Pi runs a well supported Linux distro based on Debian,
which ships with a variety of programming tools and educational
software. Python is the main supported language on the platform, used
in many educational resources, and many Python libraries exist for
making the most of the Pi platform with other devices.&lt;/p&gt;
&lt;p&gt;I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raspberry Pi Foundation mission&lt;/li&gt;
&lt;li&gt;Raspberry Pi hardware specs&lt;/li&gt;
&lt;li&gt;Raspbian desktop&lt;/li&gt;
&lt;li&gt;GPIO pins&lt;/li&gt;
&lt;li&gt;GPIO Zero (Python library)&lt;/li&gt;
&lt;li&gt;Picamera&lt;/li&gt;
&lt;li&gt;Astro Pi (ESA space mission) &amp;amp; Sense HAT&lt;/li&gt;
&lt;li&gt;More HATs&lt;/li&gt;
&lt;li&gt;Pi projects&lt;/li&gt;
&lt;li&gt;Raspberry Pi community&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Plone: where is it today and where is it going</title><link href="https://pyvideo.org/europython-2017/plone-where-is-it-today-and-where-is-it-going.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Alessandro Pisa</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/plone-where-is-it-today-and-where-is-it-going.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plone CMS, first released in 2001, is now close to its 5.1 version.&lt;/p&gt;
&lt;p&gt;Did you know that the 2016 Olympics web site was built with Plone?
Did you know that many huge organizations that care about data protection use Plone?&lt;/p&gt;
&lt;p&gt;There are good reason why Plone is such a successful Python project,
but probably the most important is that Plone does take into account
the security of your data very seriously.&lt;/p&gt;
&lt;p&gt;Nowadays, information and data play a crucial role, sometimes they
are the more important asset of a company.
They have to be in a digital form and accessible from every device,
it is no surprise that they are exposed to a growing threat.&lt;/p&gt;
&lt;p&gt;During the talk I will review Plone built in security protection systems.
In addition I will review some of its features, like the ability to create,
without writing a line of code, custom content types, to change documents
workflows, to organize your documents in a snap.&lt;/p&gt;
&lt;p&gt;I will also talk about the foreseen new features that will be soon in
Plone and I will present Castle CMS and Quaive, some important projects
built on top of Plone that are currently under the spotlight.&lt;/p&gt;
</summary></entry><entry><title>Practical Debugging - Tips, Tricks and Ways to think</title><link href="https://pyvideo.org/europython-2017/practical-debugging-tips-tricks-and-ways-to-think.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Radoslav Georgiev</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/practical-debugging-tips-tricks-and-ways-to-think.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we write code, oftentimes things are not working as expected. We
followed the tutorial and yet we got an error. We introduce a new
feature but something else broke.&lt;/p&gt;
&lt;p&gt;Having to deal with bugs is inevitable. Trying to &amp;quot;debug&amp;quot; what
happened or what caused the problem can be really frustrating and
timewasting.&lt;/p&gt;
&lt;p&gt;The aim of this talk is go give ways to think &amp;amp; steps to take
when we are faced with the process of debugging.&lt;/p&gt;
&lt;p&gt;The language for the examples is going to be Python &amp;amp; the tools
used - from the python ecosystem.&lt;/p&gt;
&lt;p&gt;The talk will be practical, with a lot of real-world examples.&lt;/p&gt;
&lt;p&gt;The goal is to cover the following scenarios by showing different ways to approch the problem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You followed a tutorial but it's not working. What to do?&lt;/li&gt;
&lt;li&gt;You introduce new feature but things broke somewhere else in the project. What to do?&lt;/li&gt;
&lt;li&gt;You are using a popular 3rd party library but something breaks. What to do?&lt;/li&gt;
&lt;li&gt;A bug occurs and you have no idea what or who caused it. What to do?&lt;/li&gt;
&lt;li&gt;You can't fix or find the bug. What now?&lt;/li&gt;
&lt;li&gt;You want to generalize your debugging skills. How to do that?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be talking about critical changes, binary search, problem
isolation, interactive debuggers, printing, testing, greping and
other interesting things.&lt;/p&gt;
</summary></entry><entry><title>pybind11 - seamless operability between C++11 and Python</title><link href="https://pyvideo.org/europython-2017/pybind11-seamless-operability-between-c11-and-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Ivan Smirnov</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pybind11-seamless-operability-between-c11-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pybind/pybind11"&gt;pybind11&lt;/a&gt; is a lightweight
header-only C++11 library that exposes C++ types to Python and vice
versa and allows creating Python extension modules with minimum
boilerplate by leveraging compile-time introspection and type
inference. While this library's goals and some of the  syntax may be
considered similar to Boost. Python, it has a much smaller footprint,
is entirely self-contained, and offers additional features like
direct support for NumPy arrays.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at how to write Python extension modules
in C++ from scratch with pybind11, starting from simple bindings and
building up to more complex examples that deal with iterators, STL
data structures, NumPy types and Python callbacks. We will also touch
upon some of the internal machinery of the library like the virtual
call mechanism and reference counting.&lt;/p&gt;
</summary></entry><entry><title>PyPy meets Python 3 and Numpy</title><link href="https://pyvideo.org/europython-2017/pypy-meets-python-3-and-numpy.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Armin Rigo</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pypy-meets-python-3-and-numpy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is an alternative Python implementation whose JIT often gives
seriously better performance than CPython.  Now PyPy supports, in
beta version, two major new application domains: Python 3.x, and
Numpy and the rest of the scientific stack.  These are each an
important milestone for a subset of the Python community.&lt;/p&gt;
&lt;p&gt;Thanks to a grant by Mozilla, &amp;quot;PyPy3&amp;quot; now largely supports Python
3.5 with one or two extensions from Python 3.6.  Full support should
be  very close.  (Note that PyPy2 will not disappear, if only because
PyPy itself  is written in Python 2.7.) Numpy and the major packages
of the scientific stack are now starting to work well with PyPy
(PyPy2 mostly, but also PyPy3).  This is thanks to progress in
&amp;quot;cpyext&amp;quot; emulating the CPython C API, as well as fixes to the
packages in collaboration with the upstream developers.&lt;/p&gt;
&lt;p&gt;We will also mention some more &amp;quot;what's new in PyPy&amp;quot; topics from the
last couple of years.&lt;/p&gt;
</summary></entry><entry><title>Python and Angular, a perfect match?</title><link href="https://pyvideo.org/europython-2017/python-and-angular-a-perfect-match.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Oliver Braun</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/python-and-angular-a-perfect-match.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python on mobile devices is still negligible mostly because of the
GUI problems which arise. But Python on android devices is considered
to be a solved problem since the module Python for Android is
available. We have nowadays at least the possibility to develop for
mobile devices with the GUI engine Kivy which is maybe the first
choice for rapid prototyping on that platform. But as it comes to
design work and mobile device look alike Kivy is still far behind the
web development tools HTML/CSS.&lt;/p&gt;
&lt;p&gt;In our talk we present a conceptual work where we used Ionic - this
is an mobile development framework based on Angular - to build the
GUI part of an app and connected that to a Python back end. In our
point of view our proposal is very general and will give Python a
boost towards modern UX development and makes HTML/CSS/JavaScript a
real option especially in combination with Angular.&lt;/p&gt;
&lt;p&gt;The main part of our solution that we show is the interoperation
between JavaScript and Python such that asynchronous calls in both
direction are possible.&lt;/p&gt;
&lt;p&gt;The advantage is to develop UX and back end code only once and use it
literally on every platform where a Python interpreter and a browser
runs.&lt;/p&gt;
</summary></entry><entry><title>Python Bee</title><link href="https://pyvideo.org/europython-2017/python-bee.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Emma Gordon</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/python-bee.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thought up in 2009 by a group of MIT students who entered the Python
bee into a competition for “bad ideas”, a Python bee is like a
spelling bee for programmers.&lt;/p&gt;
&lt;p&gt;Instead of spelling words, participants are given functions to write
and must spell them out loud - one character at a time, without
looking at the code that they're writing! Players must spell valid
Python and every character counts, including symbols and whitespace.&lt;/p&gt;
&lt;p&gt;And the twist for the second round (credit for this one goes to
dropboxblogs):&lt;/p&gt;
&lt;p&gt;You're now allowed to look at the code, but... you must now team up
with other programmers, entering alternate characters without being
allowed to communicate via any other means.&lt;/p&gt;
&lt;p&gt;In order for everyone to be able to have a go, we'll split up into
small groups to play - for those that want to be competitive, we'll
use a scoring system so that we can still declare an overall
champion. You're very welcome to come along just to have fun though!&lt;/p&gt;
&lt;p&gt;TL;DR - a fun hour of slightly ridiculous programming games :)&lt;/p&gt;
</summary></entry><entry><title>Pythonic Refactoring: Protecting Your Users From Change</title><link href="https://pyvideo.org/europython-2017/pythonic-refactoring-protecting-your-users-from-change.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pythonic-refactoring-protecting-your-users-from-change.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've released a library! Now you need to maintain it. You want
to add features, restructure the code, fix bugs, and maybe improve
the library's usability. Your users just want their code to carry on
working. That's okay!&lt;/p&gt;
&lt;p&gt;This talk will cover techniques in both code and project management
to allow you to keep your code moving forwards without breaking your
users' code. It is aimed at developers with a little experience of
writing libraries in Python, and will cover some intermediate
subjects like function decorators and magic methods.&lt;/p&gt;
&lt;p&gt;Refactoring in Python is a mixed bag - on the one hand you have
powerful tools like the &amp;#64;property decorator, __dunder__ methods, and
even metaclasses. On the other hand, because Python code has no
concept of private or protected like some other languages, it can be
difficult to know what your public interface even is.&lt;/p&gt;
&lt;p&gt;I'll talk about how to identify your public interface, and make that
clear to your users. I'll cover how to structure your tests so you
know when you've broken your public interface. I'll discuss how to
use some of Python's language features to trick your users into
thinking your code hasn't changed at all (except for those brilliant
new features you've just added!). And finally, I'll cover how you
know it's time to break backwards compatibility and how to break it
to your users.&lt;/p&gt;
</summary></entry><entry><title>Pythonist view on Microservices &amp; Containerization</title><link href="https://pyvideo.org/europython-2017/pythonist-view-on-microservices-containerization.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Abhishek Sharma</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pythonist-view-on-microservices-containerization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices architecture and containerization are words thrown around
when we talk about designing systems that are loosely coupled, although
it may sound like buzz words but these key concepts play a very important
part in system as a whole.&lt;/p&gt;
&lt;p&gt;In this talk, we will cover how microservices can be implemented in python
using available open source frameworks and how it can be deployed independently
to scale and perform in production environment.
I'll also share several use-cases where it is worth planning and developing
system architecture considering microservices/containerization and will
also discuss some trade-off of having such architecture.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overview of microservices&lt;/li&gt;
&lt;li&gt;Implementing microservices using Python&lt;/li&gt;
&lt;li&gt;Advantages of microservices over Monolithic / SoA architecture&lt;/li&gt;
&lt;li&gt;Overview of containerization&lt;/li&gt;
&lt;li&gt;How to containerize Python based services (Docker)&lt;/li&gt;
&lt;li&gt;Advantages of microservices/containerization over traditional deployment&lt;/li&gt;
&lt;li&gt;CI/CD Approach in microservices and containerization&lt;/li&gt;
&lt;li&gt;Usecases where to use microservices&lt;/li&gt;
&lt;li&gt;Trade-off of using microservices&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Rethinking how we build HTTP APIs</title><link href="https://pyvideo.org/europython-2017/rethinking-how-we-build-http-apis.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Fergal Walsh</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/rethinking-how-we-build-http-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python universe is overflowing with web frameworks, from full
featured batteries included frameworks like Django to micro
frameworks like Bottle or Flask. They each have their own specific
features but in the end they are all very similar in their core
functionality of processing requests and generating responses.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss why I felt the need to create yet another
framework, a pico framework, that specifically focuses on the task of
building HTTP based APIs for the web.&lt;/p&gt;
&lt;p&gt;Pico, as it is aptly called, doesn't do templating, ORM, custom
routing, authentication, validation, caching, or a million other
things. Instead it helps you write clean APIs using simple functions
and modules with minimal boilerplate. Pico is both opinionated and
flexible in equal measures so you can focus on what matters; your API
logic. Pico helps you to write code that that is simple to get
started, trivial to test, and easy to maintain as your project grows.&lt;/p&gt;
&lt;p&gt;APIs built with Pico are self describing so client code can
automatically/dynamically be created. Pico includes both a Python
&amp;amp; Javascript client but it is also very simple to interact with
your API with plain old cURL/Requests/jQuery/etc. It is just a HTTP
API after all.&lt;/p&gt;
&lt;p&gt;Having recently released Pico 2.0, this talk will outline the
evolution of this framework over the past 7 years and discuss some
lessons learnt along the way about building HTTP APIs and frameworks.&lt;/p&gt;
</summary></entry><entry><title>Sabbagh - Executing scripts in a few milliseconds with MicroPython</title><link href="https://pyvideo.org/europython-2017/sabbagh-executing-scripts-in-a-few-milliseconds-with-micropython.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Marwan Al</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/sabbagh-executing-scripts-in-a-few-milliseconds-with-micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Command execution time can become important in a number of
applications. Commands executed in command-line completion need to
execute in less then 100ms or users will perceive a delay. In Shell
scripting one might want to execute commands repeatedly in a for loop
and fast execution times makes this more feasible.&lt;/p&gt;
&lt;p&gt;Python is a very powerful language but has a much slower startup time
compared to other interpreted languages like Perl, Lua and Bash. It
can take up to 10 times longer to startup then some of these other
languages.&lt;/p&gt;
&lt;p&gt;MicroPython was written as a lean implementation of Python 3 with a
small subset of the standard library mainly intended to run on
microcontrollers. But it happily runs on Unix systems with excellent
startup performance, making it an ideal candidate for implementing
certain time sensitive commands.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Explain when achieving fast execution times matters and when it doesn’t.&lt;/li&gt;
&lt;li&gt;Present two different approaches to measuring command execution
time, one simple and the other more detailed and accurate.&lt;/li&gt;
&lt;li&gt;Compare execution times of a simple set of scripts that add two
numbers in an number of different interpreted languages (micropython,
python3, awk, perl, lua, bash).&lt;/li&gt;
&lt;li&gt;Present an example use case of MicroPython on Unix. Bash completion
for pip install that completes the names of available packages live
from a remote pypi mirror.&lt;/li&gt;
&lt;li&gt;Demonstrate the auto completion script with pip on a local pypi mirror.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Scientific computing using Cython: Best of both Worlds!</title><link href="https://pyvideo.org/europython-2017/scientific-computing-using-cython-best-of-both-worlds.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Simmi Mourya</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/scientific-computing-using-cython-best-of-both-worlds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cython is not only an excellent and widely used tool to speed up
computational Python code, it’s also a very smart way to talk to
native code and libraries. The Cython compiler translates Python code
to C or C++ code, and supports static type annotations to allow
direct use of C/C++ data types and functions. You get the best of
both worlds while working with Cython: Python like syntax with
blazing fast C speed.&lt;/p&gt;
&lt;p&gt;This talk/tutorial by a Python/Cython developer introduces Cython
programming language and leads the participants all the way from
their first Python extension to an efficient integration with native
C.&lt;/p&gt;
&lt;p&gt;Topics covered will be:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Using the Cython compiler to build a native extension module&lt;/li&gt;
&lt;li&gt;Cython development from Jupyter notebook&lt;/li&gt;
&lt;li&gt;Mixing Python with static C types in the Cython language&lt;/li&gt;
&lt;li&gt;Calling into native code from Cython code (Brief introduction)&lt;/li&gt;
&lt;li&gt;Wrap up: A brief case study -
Cyvlfeat: A Cython/Python wrapper for Computer Vision library, VLFeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Participants are expected to have a good understanding of the Python
language, some basic knowledge about C or C++.  No deep C programming
knowledge is required, nor is any prior knowledge needed about
writing extension modules for the CPython runtime.&lt;/p&gt;
</summary></entry><entry><title>Space weather monitoring for a virtual reality simulation</title><link href="https://pyvideo.org/europython-2017/space-weather-monitoring-for-a-virtual-reality-simulation.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Antonio Del Mastro</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/space-weather-monitoring-for-a-virtual-reality-simulation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;High-energy particles accelerated by the Sun during Coronal Mass
Ejections (CME) are a major concern for a manned mission to Mars. On
Earth surface, these particles are shielded by the Earth magnetic
field. In space and on the Martian surface, where such shielding is
absent or much weaker, CME pose a radiation hazard to the health of
astronauts. The development of tools to understand and forecast the
interplanetary space weather is a requirement for future manned space
missions in order to properly protect the astronauts from the
radiation environment. A variety of methods are currently developed
by the scientific community and a number of public tools for space
weather monitoring and forecast is already available online.&lt;/p&gt;
&lt;p&gt;We present a Python-based tool which takes advantage of two publicly
accessible space weather web portals. Our software combines the
forecast of CME and a real-time propagation model of energetic
particles throughout the inner Solar System and the Martian
atmosphere. It consistently recovers real-time relevant information
and provides with days-to-hours forecasts for the radiation dose
astronauts on Mars would be exposed to. The system raises an alert
signal when the radiation dose exceeds the security levels defined by
the main space agencies adopted as a reference. Our tool is meant to
be integrated in a virtual reality simulation of a human settlement
on the surface of Mars (Mars City Project www.mars-city.org).&lt;/p&gt;
&lt;p&gt;Prerequisite:  Intermediate knowledge.&lt;/p&gt;
</summary></entry><entry><title>The Encounter: Python’s adventures in Africa</title><link href="https://pyvideo.org/europython-2017/the-encounter-pythons-adventures-in-africa.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/the-encounter-pythons-adventures-in-africa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A genuine encounter changes both parties. In this talk Daniele and
Aisha will report on the dialogue opened up by recent PyCons and
other Python events in Africa. They’ll discuss Python’s impact in
countries including Namibia, Nigeria and Zimbabwe, and what
open-source software means for Africa at large - and what the
encounter means for Python too.&lt;/p&gt;
</summary></entry><entry><title>Writing Awesome PyPI packages in Python</title><link href="https://pyvideo.org/europython-2017/writing-awesome-pypi-packages-in-python.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Magdalena Rother</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/writing-awesome-pypi-packages-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the strengths of the Python programming language is the huge
base of Open Source libraries. The PyPI (Python Package Index)
repository provides currently 105,917 packages, many of them
developed actively by contributors.&lt;/p&gt;
&lt;p&gt;This talk is a tour through various tools and practices, which help
to keep your package in a good state for your users and make it
easier for other developers to contribute. One can find these
practices in projects of different size, such as Django (24,244
commits, 1,397 contributors) Pandas (15,005 commits, 754
contributors) and Faker (20 commits, 3 contributors).&lt;/p&gt;
&lt;p&gt;Some things to consider when creating your own package:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;using a Makefile for automatic testing, coverage analysis and environment setup.&lt;/li&gt;
&lt;li&gt;structuring your .gitignore file.&lt;/li&gt;
&lt;li&gt;using pyenv and .python-version for Python version management.&lt;/li&gt;
&lt;li&gt;using tox to ascertain that code is working in different environments.&lt;/li&gt;
&lt;li&gt;squashing different configuration files to a single setup.cfg file.&lt;/li&gt;
&lt;li&gt;using EditorConfig and .editorconfig to automatically set project coding standards in the editor.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>A faster Python? You Have These Choices</title><link href="https://pyvideo.org/europython-2017/a-faster-python-you-have-these-choices.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Paul Ross</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/a-faster-python-you-have-these-choices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python was never intended as a fast language but many modern uses of
Python require high performance computing, particularly in data
science. This talk explores your options for squeezing maximum
performance out of critical Python code.&lt;/p&gt;
&lt;p&gt;This talk provides a succinct summary of the options you have: C
extensions, Cython, CFFI, PyPy and many others. It also shows the
trade-offs between execution performance and the cost of writing and
maintaining code with each choice. Each option is also explored for
maturity and ease of use for Python programmers. A real world
programming problem is coded and benchmarked using each of these
techniques. All the code used in the talk is available on GitHub.&lt;/p&gt;
&lt;p&gt;At the end of this talk you will be better place to decide on which
technique to use to make your code run 100x faster.&lt;/p&gt;
</summary></entry><entry><title>A journey into Git internals with Python</title><link href="https://pyvideo.org/europython-2017/a-journey-into-git-internals-with-python.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Andrey Syschikov</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/a-journey-into-git-internals-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Despite 12 years of history and wide popularity the workings of
Git still remain largely a mystery for many.
A lot of Git users operate it just by remembering a bunch of commands
and repeating them in a correct order.
I was one of them until I decided to dig deeper into how Git actually
works and suddenly I understood that internally Git operates by rather
simple principles and after you figure them out suddenly all those
commands start to make sense.&lt;/p&gt;
&lt;p&gt;To look into the Git's internal structure you need a programming language
to crunch the data and Python fit perfectly for this task.&lt;/p&gt;
&lt;p&gt;In this talk, I will dig into the internals of Git with Python,
that will help you better understand how Git works.&lt;/p&gt;
</summary></entry><entry><title>AI on a Pi</title><link href="https://pyvideo.org/europython-2017/ai-on-a-pi.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Julien Simon</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/ai-on-a-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In recent months, Artificial Intelligence has become the hottest
topic in the IT industry. In this session, we’ll first explain how
Deep Learning — a subset of AI — differs from traditional Machine
Learning and how it can help you solve complex problems such as
computer vision or natural language processing. Then, we’ll show you
how to start writing Deep Learning applications in Python thanks to
MXNet, a popular library for Deep Learning for both CPUs and GPUs.
We'll also see how to use pre-trained models and we'll load one on a
Raspberry Pi equipped with a camera. Finally, we’ll show random
objects to the Pi…and listen to what it thinks the objects are,
thanks to the text-to-speech capabilities of Amazon Polly.&lt;/p&gt;
</summary></entry><entry><title>An introduction to PyTorch &amp; Autograd</title><link href="https://pyvideo.org/europython-2017/an-introduction-to-pytorch-autograd.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Paul O'Grady</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/an-introduction-to-pytorch-autograd.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyTorch is an optimized tensor library for Deep Learning, and is a
recent newcomer to the growing list of GPU programming frameworks
available in Python. Like other frameworks it offers efficient tensor
representations and is agnostic to the underlying hardware. However,
unlike other frameworks it allows you to create &amp;quot;define-by-run&amp;quot;
neural networks resulting in dynamic computation graphs, where every
single iteration can be different---opening up a whole new world of
possibilities. Central to all neural networks in PyTorch is the
Autograd package, which performs Algorithmic Differentiation on the
defined model and generates the required gradients at each iteration.
In this talk I will present a gentle introduction to the PyTorch
library and overview its main features using some simple examples,
paying particular attention to the mechanics of the Autograd package.&lt;/p&gt;
&lt;p&gt;Keywords: GPU Processing, Algorithmic Differentiation, Deep Learning, Linear algebra.&lt;/p&gt;
</summary></entry><entry><title>Cloud Native Python in Kubernetes</title><link href="https://pyvideo.org/europython-2017/cloud-native-python-in-kubernetes.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Floris Bruynooghe</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/cloud-native-python-in-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverside applications are more and more likely to need to run in
dynamic cloud environments where they can automatically scale as
required.  One rightfully popular approach is to run the application
as a Docker container inside a Kubernetes cluster, giving you a lot of
operational benefits thanks to the Kubernetes folks.&lt;/p&gt;
&lt;p&gt;For the most part it is rather easy to make your Python application
work inside a Docker container.  But there are a number of common
patterns one can follow to save time by delegating more things to the
runtime environment.  Furthermore you can start adding a few simple
non-intrusive features to your application which will help improve the
application live-cycle in the cluster, ensuring smooth hand-over when
migrating the container to different nodes or scaling it up or down.&lt;/p&gt;
&lt;p&gt;This talk will quickly cover the basics of Kubernetes and will then
start from a simple program and will discuss the steps to take to make
it behave well in this environment.  Starting with the basics steps
you can rely on the runtime for, covering logging and all the way to
supporting the service life-cycle, health checking and monitoring in a
Kubernetes environment.  You will see that building a cloud-native
application is not very hard and something you can gradually
introduce.&lt;/p&gt;
</summary></entry><entry><title>Community teaching practices</title><link href="https://pyvideo.org/europython-2017/community-teaching-practices.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Alice Harpole</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/community-teaching-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last five years we saw many groups dedicated to teach people
how to program but any volunteer that is going to start a new teaching
group could have hundreds of questions related with concepts order,
examples, exercises, libraries and text editor/IDE. Panellists will
share their experience when teaching Python to newcomers from different
backgrounds as part of their volunteer work for some organisations such
as PyLadies, DjangoGirls, Code for Life, Software Carpentry,
Data Carpentry, etc. Among the panellists we will have&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mateusz Kuzak, from the Netherlands eScience Center and volunteer for Software Carpentry and Data Carpentry;&lt;/li&gt;
&lt;li&gt;Alice Harpole, from the University of Southampton;&lt;/li&gt;
&lt;li&gt;Celine Boudier, from Code for Life;&lt;/li&gt;
&lt;li&gt;Raniere Silva (as moderator), from the Software Sustainability Institute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All questions from the audience are welcomed.&lt;/p&gt;
</summary></entry><entry><title>Declarative Thinking and Programming</title><link href="https://pyvideo.org/europython-2017/declarative-thinking-and-programming.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Florian Wilhelm</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/declarative-thinking-and-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Declarative Programming is a programming paradigm that focuses on
describing what should be computed in a problem domain without
describing how it should be done.  The talk starts by explaining
differences between a declarative and imperative approach with the
help of examples from everyday life. Having established a clear
notion of declarative programming as well as pointed out some
advantages, we transfer these concepts to programming in general. For
example, the usage of control flow statements like loops
over-determine the order of computation which impedes scalable
execution as well as it often violates the single level of
abstraction principle.&lt;/p&gt;
&lt;p&gt;Following the theoretical part of the talk, some practical examples
are given how declarative programming can be applied easily within
Python. This comprises the advantages and disadvantages of using a
configuration file, e.g. config.yaml, versus a Python configuration
module, e.g. setup.py. Furthermore, the benefits of avoiding
statements of control flow with the help of list and dictionary
comprehensions as well as sets are demonstrated.&lt;/p&gt;
&lt;p&gt;The talk is concluded by a short, high-level excursion to a logistic
programming language, namely PyDatalog in order to build the bridge
between logistic and declarative programming. This is accomplished by
showing how a mathematical crossword can be easily solved with the
help of declarative and logistic programming.&lt;/p&gt;
</summary></entry><entry><title>Despicable machines: how computers can be assholes</title><link href="https://pyvideo.org/europython-2017/despicable-machines-how-computers-can-be-assholes.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Maciej Gryka</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/despicable-machines-how-computers-can-be-assholes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working on a new ML solution to solve a given problem, do you
think that you are simply using objective reality to infer a set of
unbiased rules that will allow you to predict the future? Do you
think that worrying about the morality of your work is something
other people should do? If so, this talk is for you.&lt;/p&gt;
&lt;p&gt;In this brief time, I will try to convince you that you hold great
power over how the future world will look like and that you should
incorporate thinking about morality into the set of ML tools you use
every day. We will take a short journey through several problems,
which surfaced over the last few years, as ML and AI generally,
became more widely used. We will look at bias present in training
data, at some real-world consequences of not considering it
(including one or two hair-raising stories) and cutting-edge research
on how to counteract this.&lt;/p&gt;
&lt;p&gt;The outline of the talk is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro the problem: ML algos can be biased!&lt;/li&gt;
&lt;li&gt;Two concrete examples.&lt;/li&gt;
&lt;li&gt;What's been done so far (i.e. techniques from recently-published papers).&lt;/li&gt;
&lt;li&gt;What to do next: unanswered questions.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Developing elegant workflows in Python code with Apache Airflow</title><link href="https://pyvideo.org/europython-2017/developing-elegant-workflows-in-python-code-with-apache-airflow.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/developing-elegant-workflows-in-python-code-with-apache-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every time a new batch of data comes in, you start a set of tasks.
Some tasks can run in parallel, some must run in a sequence, perhaps
on a number of different machines. That's a workflow.&lt;/p&gt;
&lt;p&gt;Did you ever draw a block diagram of your workflow? Imagine you could
bring that diagram to life and actually run it as it looks on the
whiteboard. With Airflow you can just about do that.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://airflow.apache.org"&gt;http://airflow.apache.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apache Airflow is an open-source Python tool for orchestrating data
processing pipelines. In each workflow tasks are arranged into a
directed acyclic graph (DAG). Shape of this graph decides the overall
logic of the workflow. A DAG can have many branches and you can
decide which of them to follow and which to skip at execution time.&lt;/p&gt;
&lt;p&gt;This creates a resilient design because each task can be retried
multiple times if an error occurs. Airflow can even be stopped
entirely and running workflows will resume by restarting the last
unfinished task. Logs for each task are stored separately and are
easily accessible through a friendly web UI.&lt;/p&gt;
&lt;p&gt;In my talk I will go over basic Airflow concepts and through examples
demonstrate how easy it is to define your own workflows in Python
code. We'll also go over ways to extend Airflow by adding custom task
operators, sensors and plugins.&lt;/p&gt;
</summary></entry><entry><title>Dockerized pytests</title><link href="https://pyvideo.org/europython-2017/dockerized-pytests.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Gonzalo Rafuls</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/dockerized-pytests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working with pytest and custom plugins things can get eery when
trying to mimic your Jenkins environment for debugging your tests
locally, specially across your team and their workspaces.&lt;/p&gt;
&lt;p&gt;In this talk will go through the challenges faced to containerize a
wild pytest environment.&lt;/p&gt;
&lt;p&gt;Topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Running Pytest on Jenkins jobs&lt;/li&gt;
&lt;li&gt;Pytest custom plugins&lt;/li&gt;
&lt;li&gt;Challenges for locally debugging/replicating a Jenkins job/pytest run&lt;/li&gt;
&lt;li&gt;Dockerizing pytest and it's dependencies&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>EPS General Assembly</title><link href="https://pyvideo.org/europython-2017/eps-general-assembly.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/eps-general-assembly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is where the EuroPython Society (EPS) board gives its reports, resolutions are passed and the EPS members can vote in a new EPS board.&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2018: Help us build the next edition!</title><link href="https://pyvideo.org/europython-2017/europython-2018-help-us-build-the-next-edition.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/europython-2018-help-us-build-the-next-edition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We need help with organizing and running EuroPython 2018.&lt;/p&gt;
&lt;p&gt;In this session, we will explain how the EuroPython workgroup model works and where you could help.&lt;/p&gt;
</summary></entry><entry><title>Explaining behavior of Machine Learning models with eli5 library</title><link href="https://pyvideo.org/europython-2017/explaining-behavior-of-machine-learning-models-with-eli5-library.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Mikhail Korobov</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/explaining-behavior-of-machine-learning-models-with-eli5-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ML estimators don't have to be black boxes. Interpretability has many
benefits: it is easier to debug interpretable models, humans trust
decisions of such models more.&lt;/p&gt;
&lt;p&gt;In this talk I’ll give an overview of ML models interpretation and debugging techniques. I’ll cover&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;linear models,&lt;/li&gt;
&lt;li&gt;decision trees,&lt;/li&gt;
&lt;li&gt;tree ensembles,&lt;/li&gt;
&lt;li&gt;arbitrary classifiers using LIME algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk focus is on explanation algorithms, because it is important
to be aware of pitfalls and limitations of the explanation method to
be able to interpret an explanation correctly. I’ll also show how to
use these techniques in practice, to debug and explain behavior of
estimators from Python ML libraries like scikit-learn and xgboost
using open-source eli5 library:
&lt;a class="reference external" href="https://github.com/TeamHG-Memex/eli5"&gt;https://github.com/TeamHG-Memex/eli5&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Attendees will get both practical and theoretical understanding of
these explanation methods. Target audience is ML practitioners who
want to&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;get a better quality from their ML pipelines - understanding of
why a wrong decision happens is often a first step to improve the
quality of an ML solution;&lt;/li&gt;
&lt;li&gt;explain ML model behavior to clients or stakeholders - inspectable
ML pipelines are easier to “sell” to a client; humans trust such
models more because they can check if an explanation is consistent
with their domain knowledge or gut feeling, understand better
shortcomings of the solution and make a more informed decision as a
result.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Fast product development using Django Rest Framework. #lessonslearned</title><link href="https://pyvideo.org/europython-2017/fast-product-development-using-django-rest-framework-lessonslearned.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Samuel Fuentes</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/fast-product-development-using-django-rest-framework-lessonslearned.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A year ago we decided to use Django and, specifically, DRF as the
cornerstone of our upcoming fast-iterating web platform. In this talk
I discuss why and how the architecture has evolved, key decisions
made and the lessons we learned along the way.&lt;/p&gt;
&lt;p&gt;I'll share the techniques we used for iterating quickly and how the
technology supported (and shaped) them. In addition some quirks and
DRF-specific tricks will be brought along the way.&lt;/p&gt;
&lt;p&gt;Expect a general talk about how Python (and specifically DRF) can be
used as a based for quick product iterations, a discussion regarding
how to build and evolve a platform to meet those needs and some
DRF-specific tidbits. No previous knowledge is required but
experience in web development will make the content more accessible.&lt;/p&gt;
</summary></entry><entry><title>Feeding data to AWS Redshift with Airflow</title><link href="https://pyvideo.org/europython-2017/feeding-data-to-aws-redshift-with-airflow.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Federico Marani</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/feeding-data-to-aws-redshift-with-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Airflow is a powerful system to schedule workflows and define them as
a collection of interdependent scripts. It is the perfect companion
to do extract/transform/load pipelines into data warehouses, such as
Redshift.&lt;/p&gt;
&lt;p&gt;This talk will introduce some of the basis of Airflow and some of the
concepts that are data pipeline specific, like backfills, retries,
etc. Then there will be some examples on how to integrate this, along
with some lessons learned there.&lt;/p&gt;
&lt;p&gt;At the end, there will be a part dedicated to Redshift, how to
structure data there, how to do some basic transformation
pre-loading, how to manage the schema using SQLAlchemy and Alembic.&lt;/p&gt;
</summary></entry><entry><title>Fighting the controls: tragedy and madness for programmers and pilots</title><link href="https://pyvideo.org/europython-2017/fighting-the-controls-tragedy-and-madness-for-programmers-and-pilots.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/fighting-the-controls-tragedy-and-madness-for-programmers-and-pilots.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damn it, this can’t be happening! As programmers, we find ourselves
time and again spiralling down into tighter loops of desperate
troubleshooting, fighting the controls of our machinery and
descending into what feels like a kind of madness. Later, when it’s
all over, we realise that the clues we needed to recover the
situation were staring us in the face all along, but we somehow
couldn’t even see them.&lt;/p&gt;
&lt;p&gt;There’s a reason for this: the nature of debugging for programmers
means that it quickly tips us into these states, and then very
effectively keeps us there.&lt;/p&gt;
&lt;p&gt;In programming we have worked hard to improve some aspects of
programmers’ work, creating methodologies, development frameworks,
paradigms, practices and thinking deeply about how to solve the
problems of producing good code. We have done very little work to
improve the way we debug our code,&lt;/p&gt;
&lt;p&gt;The good news is that although programmers have not developed very
adequate strategies or techniques for mitigating the risks that
debugging draws us into, other industries, and in particular
aviation, have. We can learn from their lessons without paying their
price.&lt;/p&gt;
</summary></entry><entry><title>Fixture factories for faster end-to-end tests</title><link href="https://pyvideo.org/europython-2017/fixture-factories-for-faster-end-to-end-tests.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Stephan Jaensch</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/fixture-factories-for-faster-end-to-end-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When developing and maintaining many different services, unit testing
is not enough to make sure your code works in production. By now,
many teams doing SOA (service-oriented architectures) have a set of
end-to-end tests that cover critical workflows to make sure these
work. For these tests, all of the utilized services need to have the
proper test fixture data in their datastores. This often leads to
developers having to deal with raw datastore data (like JSON or SQL)
for these tests, making the authoring of those tests very slow,
tedious, and error-prone.&lt;/p&gt;
&lt;p&gt;This talk is going to discuss several approaches we tried at Yelp to
generating these fixture data in a quicker, developer-friendly and
more correct way.&lt;/p&gt;
&lt;p&gt;The main part of the talk will be a deep-dive into what fixture
factories are, how to implement them and how to integrate them with
pytest, the leading Python testing framework. I'll show you several
other benefits this approach has over writing raw fixture data and
how this leads to more maintainable and easier to adapt code. We'll
also explore how you can then run your tests in parallel, cutting
down runtime drastically.&lt;/p&gt;
</summary></entry><entry><title>How Booking.com serves Deep Learning model predictions</title><link href="https://pyvideo.org/europython-2017/how-bookingcom-serves-deep-learning-model-predictions.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Sahil Dua</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/how-bookingcom-serves-deep-learning-model-predictions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With so many machine learning frameworks and libraries available,
writing a model isn’t a bottleneck anymore while putting your models
in production is still a challenge.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how we deploy the python deep learning
models in production at Booking.com.&lt;/p&gt;
&lt;p&gt;Topics will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deep Learning model training in Docker containers&lt;/li&gt;
&lt;li&gt;Automated retraining of models&lt;/li&gt;
&lt;li&gt;Deployment of models using Kubernetes&lt;/li&gt;
&lt;li&gt;Serving model predictions in containerized environment&lt;/li&gt;
&lt;li&gt;Optimising serving predictions for latency and throughput&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>How to apply deep learning for 3D object</title><link href="https://pyvideo.org/europython-2017/how-to-apply-deep-learning-for-3d-object.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Masaya Ogushi</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/how-to-apply-deep-learning-for-3d-object.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I talk about the &amp;quot;How to achieve the 3D object recognition accuracy 80%(40 category) for 3month &amp;quot;&lt;/p&gt;
&lt;p&gt;Deep Learning  is the good technique for image recognition and speech recognition.
And it apply the other field.
Many people try to apply the Deep Learning, but it is difficult to make a result.&lt;/p&gt;
&lt;p&gt;In my situation, I have enough knowledge about the 3D object and label data.
I'll talk about the how to achieve the  80 % (40 category)&lt;/p&gt;
&lt;p&gt;In My approach&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Getting the Information&lt;ul&gt;
&lt;li&gt;How to choose the information&lt;/li&gt;
&lt;li&gt;How to choose framework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Getting the Data&lt;ul&gt;
&lt;li&gt;Public data&lt;/li&gt;
&lt;li&gt;How to make the own data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try  small&lt;ul&gt;
&lt;li&gt;Trying the small data set&lt;/li&gt;
&lt;li&gt;Trying the train and predict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deciding the direction focus&lt;ul&gt;
&lt;li&gt;Choose what you can control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prioritizing with high certainty&lt;ul&gt;
&lt;li&gt;Pre-process&lt;/li&gt;
&lt;li&gt;Improve the train speed&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Increasing  the challenge times&lt;ul&gt;
&lt;li&gt;Using the GPU&lt;/li&gt;
&lt;li&gt;CPU optimization&lt;/li&gt;
&lt;li&gt;multi process&lt;/li&gt;
&lt;li&gt;resource&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parameter Tuning&lt;ul&gt;
&lt;li&gt;Improve Model Versatility or Improve Data Versatility&lt;/li&gt;
&lt;li&gt;Model Tuning&lt;ul&gt;
&lt;li&gt;RandomDropOut&lt;/li&gt;
&lt;li&gt;LeakyRelu&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Argumantion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Product&lt;ul&gt;
&lt;li&gt;Minimum function&lt;/li&gt;
&lt;li&gt;Using Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I hope to people who want to apply Deep Learning for the 3D model&lt;/p&gt;
</summary></entry><entry><title>Identity management, single sign-on and certificates with FreeIPA</title><link href="https://pyvideo.org/europython-2017/identity-management-single-sign-on-and-certificates-with-freeipa.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Christian Heimes</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/identity-management-single-sign-on-and-certificates-with-freeipa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authentication, authorization and public key infrastructure are
complicated and hard to get right, yet crucial for every
infrastructure. Manifold user databases in each application as well
as ad-hoc self-signed TLS/SSL certificates don't scale and are hard
to administrate. Users don't want to remember a password for each
service, admins prefer a centralized PKI, and developers struggle
with correct handling of password.&lt;/p&gt;
&lt;p&gt;FreeIPA is an Open Source, Python-based identity management solution.
It is much more than a simple user database. FreeIPA combines
multiple mature products under an easy-to-use installer, command line
and web interface: 389-DS LDAP server, MIT Kerberos, Dogtag PKI
certificate system, BIND DNS with DNSSEC, SSSD, certmonger and more.
It provides identities for users, services and machines with single
sign-on (optionally 2FA) and role or host based ACL. Keycloak and
Ipsilon IdP can be integrated to offer OpenIDC or SAML. Mutual trust
with Active Directory is possible, too.&lt;/p&gt;
&lt;p&gt;Installation of a FreeIPA server and integration with a WSGI
application is much simpler than you might think.  At the end of my
talk you will know how to deploy a FreeIPA server with just one
command, how to add replicas for redundancy, how to authenticate
users and access user data like name, email and group membership
without adding a single line of Kerberos or LDAP code to your
application, and how to issue TLS certificates with auto-renewal and
OCSP.&lt;/p&gt;
</summary></entry><entry><title>Inside Airbnb: Visualizing data that includes geographic locations</title><link href="https://pyvideo.org/europython-2017/inside-airbnb-visualizing-data-that-includes-geographic-locations.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Guillem Duran Ballester</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/inside-airbnb-visualizing-data-that-includes-geographic-locations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about creating visualizations for data that includes
geographical locations. We will be using data from InsideAirbnb.com
to represent the current status of Airbnb listings in Mallorca.&lt;/p&gt;
&lt;p&gt;We will show practical examples of different visualizations of geographical data:&lt;/p&gt;
&lt;p&gt;First, we will start with how to use bokeh to overlay data on google
maps. We will use examples to show how the GMapPlot interface works.
We will briefly explain how to use it,  and what are its limitations.&lt;/p&gt;
&lt;p&gt;Then, we will talk about plotting shapefiles with holoviews.
Shapefiles are files that describe the shape of maps. We will explain
how to deal with shapefiles. For instance, we will describe how we
use shapefiles to group geographical data by regions. We will also
briefly explain how holoviews works and how it can be used to display
geographical data.&lt;/p&gt;
&lt;p&gt;Moreover, we will talk about using datashader and geoviews to
visualize big data. First, we will briefly introduce datashader, bin
based plotting and the datashader Pipeline. After that, we will show
how to create plots with geoviews: how is the Interface, a few use
cases and some examples. Finally, we will move to plotting big data
on interactive maps.&lt;/p&gt;
&lt;p&gt;Eventually we will finish with dynamic maps for visualizing time
series: we will explain how do we do it and show some examples of how
to build an interactive dashboard for visualizing geographical data
that varies over time.&lt;/p&gt;
</summary></entry><entry><title>Inspect (Or Gadget)</title><link href="https://pyvideo.org/europython-2017/inspect-or-gadget.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Hugues Lerebours</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/inspect-or-gadget.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introspection is often seen as a bad coding practice and as
such a gadget.&lt;/p&gt;
&lt;p&gt;Nevertheless, the Python Standard Library provides different tools
(among them the 'inspect' library) to easily identify a generator,
recover the source code of a function or get a function signature.&lt;/p&gt;
&lt;p&gt;We propose to spend 1/2 hour to dig into what introspection has to offer
to developers, to see what tools are available, what you can get out of
them and some useful use cases that we met in our practice at Criteo.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Nonparametric Bayesian Models</title><link href="https://pyvideo.org/europython-2017/introduction-to-nonparametric-bayesian-models.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Omar Gutiérrez</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/introduction-to-nonparametric-bayesian-models.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we use supervised machine learning techniques we need to specify
the number of parameters that our model will need to represent the
data (number of clusters, number of Gaussians, etc.).&lt;/p&gt;
&lt;p&gt;Somewhat,  we are making our model inflexible.  In this talk we will
study the nonparametric models, in specific, Bayesian Nonparametric
Models (BNP) whose main purpose is getting more flexible models since
that in BNP the parameters can be automatically inferred by the
model.&lt;/p&gt;
&lt;p&gt;The outline is the next:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Parametric vs Nonparametric models&lt;/li&gt;
&lt;li&gt;A review on probability distributions&lt;/li&gt;
&lt;li&gt;Non-parametric Bayesian Methods&lt;/li&gt;
&lt;li&gt;Dirichlet Process&lt;/li&gt;
&lt;li&gt;Python (and R maybe) libraries for NPB&lt;/li&gt;
&lt;li&gt;Conclusions&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Lightning Talks 2017-07-13</title><link href="https://pyvideo.org/europython-2017/lightning-talks-2017-07-13.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Vitalii Vokhmin</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/lightning-talks-2017-07-13.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks
EuroPython 2017 - 2017-07-13 - Anfiteatro 2&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Network visualization and automation</title><link href="https://pyvideo.org/europython-2017/network-visualization-and-automation.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Antoine Fourmy</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/network-visualization-and-automation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Network automation and orchestration is the latest phase in the evolution
of IP and optical networks.
Over the last few years, network engineers have created a variety of
libraries and softwares to help them with the management, configuration and automation of huge networks made of hundreds of thousands of network devices (e.g. routers, switches, antenna...).&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce NetDim, a vendor-neutral software
for network modeling and automation based on the standard Python
library for GUI programming: tkinter.&lt;/p&gt;
&lt;p&gt;I will start the presentation with an introduction to network visualization,
and show how tkinter can be used to implement graph drawing algorithms,
as well as a full-on Geographic Information System (GIS),
allowing one to place network devices on a world map at their GPS coordinates.&lt;/p&gt;
&lt;p&gt;I will then discuss the whys and wherefores of network automation,
and show how to automatically generate and push scripts to a network
device via SSH or Telnet.&lt;/p&gt;
&lt;p&gt;More details about NetDim on github &lt;a class="reference external" href="https://github.com/mintoo/NetDim"&gt;https://github.com/mintoo/NetDim&lt;/a&gt; and
on this website &lt;a class="reference external" href="http://netdim.fr"&gt;http://netdim.fr&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Optimization using Flow Networks in NetworkX.</title><link href="https://pyvideo.org/europython-2017/optimization-using-flow-networks-in-networkx.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Rishabh Daal</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/optimization-using-flow-networks-in-networkx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prerequisite: Basic Programming.&lt;/p&gt;
&lt;p&gt;Goals:&lt;/p&gt;
&lt;p&gt;Introduction to NetworkX Library.
Using NetworkX for optimization Techniques using Network Flow.&lt;/p&gt;
&lt;p&gt;This talk can be divided into three major parts.&lt;/p&gt;
&lt;p&gt;Introduction to NetworkX
Basic Introduction to Network Flow.
The solution of (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Max-flow_min-cut_theorem#Project_selection_problem"&gt;https://en.wikipedia.org/wiki/Max-flow_min-cut_theorem#Project_selection_problem&lt;/a&gt;) Project selection problem using Network Flow and NetworkX.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to NetworkX.&lt;ul&gt;
&lt;li&gt;What is NetwrokX?&lt;/li&gt;
&lt;li&gt;Creating a graph in NetworkX.&lt;/li&gt;
&lt;li&gt;Some awesome methods&lt;/li&gt;
&lt;li&gt;Algorithms available.&lt;/li&gt;
&lt;li&gt;Using with other libraries like Pandas.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic Introduction to Network Flow.&lt;ul&gt;
&lt;li&gt;Origin of Problem: Mincut of soviet union railway network.&lt;/li&gt;
&lt;li&gt;A quick explanation of Max-Flow and min-cut problem.&lt;/li&gt;
&lt;li&gt;Max-flow = min-cut&lt;/li&gt;
&lt;li&gt;How to reduce problems for Network Flow optimization?&lt;/li&gt;
&lt;li&gt;Model the problem for using NetworkX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Solution of Project selection Problem using NetworkX.&lt;ul&gt;
&lt;li&gt;Problem statement.&lt;/li&gt;
&lt;li&gt;How can we solve it using max flow / min-cut?&lt;/li&gt;
&lt;li&gt;Modeling in form of graph.&lt;/li&gt;
&lt;li&gt;Proof of correctness&lt;/li&gt;
&lt;li&gt;Representing the graph in NetworkX&lt;/li&gt;
&lt;li&gt;Finding answer in NetworkX&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Optimizing queries for not so big data in PostgreSQL</title><link href="https://pyvideo.org/europython-2017/optimizing-queries-for-not-so-big-data-in-postgresql.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Stephanie Mifsud</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/optimizing-queries-for-not-so-big-data-in-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hotjar’s user recordings count above 400 million, with supporting
tables containing 4.5 billion records. This 5TB data fits nicely into
Postgres and doesn’t quite merit the full big data suite of tools.
However, at the rate of 1000 recordings per minute, and overall
request rate of 750K per minute, the penalty of inefficient queries
and updates can quickly cause nasty performance spikes if not thought
out well.&lt;/p&gt;
&lt;p&gt;This talk is about the challenges we faced at the lower end of big
data: the good decisions which helped keep our application running
and other lessons we had to learn the hard way&lt;/p&gt;
&lt;p&gt;Considerations for Database Design&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Design entities for the domain&lt;/li&gt;
&lt;li&gt;Balance normalization with performance&lt;/li&gt;
&lt;li&gt;Sharding later has big migration costs, consider designing for this early&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speak to the database from your Web Application&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why use ORMs and at which level of abstraction?&lt;/li&gt;
&lt;li&gt;Stored Procedures are fast, should we have more of those?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bringing data closer to the application&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Materialize Views&lt;/li&gt;
&lt;li&gt;Defer aggregations&lt;/li&gt;
&lt;li&gt;Application Level Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Handling Operational Troubles&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Explain(analyze, buffers) is your friend&lt;/li&gt;
&lt;li&gt;Detect and manage Index Bloat&lt;/li&gt;
&lt;li&gt;Reduce Deadlocks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reducing Impact of Background Maintenance Jobs&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Keep impact on database low with cursors and streaming&lt;/li&gt;
&lt;li&gt;Plan data retention policies early, so cleaning can be an ongoing process&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Scripting across hosts with Chopsticks</title><link href="https://pyvideo.org/europython-2017/scripting-across-hosts-with-chopsticks.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/scripting-across-hosts-with-chopsticks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Chopsticks lets your import and run Python code on remote Unix hosts
over SSH. It works with no code deployment and no preinstalled
software other than Python and SSH. It has built-in support for
running code on many hosts in parallel.&lt;/p&gt;
&lt;p&gt;Unlike Fabric or Ansible, Chopsticks not opinionated about the
structure of the code you run, allowing it to be used for
orchestration, auditing, diagnostics, monitoring probes, and more&lt;/p&gt;
&lt;p&gt;Also unlike these, Chopsticks is not wedded to SSH, so it can
transparently work on Docker containers over pipes, local
subprocesses - and in future, sudo?&lt;/p&gt;
&lt;p&gt;Daniel will demonstrate Chopsticks in action, walk through the API,
and explain the three clever tricks that Chopsticks is built on.&lt;/p&gt;
</summary></entry><entry><title>Streaming: Why should I care?</title><link href="https://pyvideo.org/europython-2017/streaming-why-should-i-care.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Christian Trebing</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/streaming-why-should-i-care.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You think, all that hype about streaming solutions does not affect
you? I thought so also. But when playing around with that topic for
some time, I realized that it sheds a different light on many topics
I struggled with for some time. In this talk I want to share with you
what I discovered when switching from a from a database centric view
to stream oriented processing.&lt;/p&gt;
&lt;p&gt;Splitting your application in smaller services gets easier as you
have more natural boundaries. You have more options to run different
data schema versions in different services (instead of one central db
upgrade). More scaling possibilities. Operations improvements.&lt;/p&gt;
&lt;p&gt;For sure, streaming does not solve any problem, but much more than I
thought before. And in python you have good support with many
streaming clients. I will give some examples and comparisons for
working with Kafka and Avro Schemas.&lt;/p&gt;
</summary></entry><entry><title>The Different Roads We Take</title><link href="https://pyvideo.org/europython-2017/the-different-roads-we-take.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Tracy Osborn</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/the-different-roads-we-take.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've all taken different routes to get to where we are today, and
we're not all currently on the same road going the same place. Tracy
Osborn will talk about the idea of the &amp;quot;Python engineer,&amp;quot; her (long
and full of bumps and potholes) journey to learning and teaching
Python, and the harmful myths about learning programming and the
paths available when you do so.&lt;/p&gt;
</summary></entry><entry><title>Type Annotations in Python 3: Whats, whys &amp; wows!</title><link href="https://pyvideo.org/europython-2017/type-annotations-in-python-3-whats-whys-wows.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Andreas Dewes</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/type-annotations-in-python-3-whats-whys-wows.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.5 introduced support for &amp;quot;type hints&amp;quot; (or annotations),
which allows us to annotate our code with useful bits of information
without affecting its runtime behavior. Type hints don't enforce a
particular use case and can therefore be used for many purposes.&lt;/p&gt;
&lt;p&gt;In my talk, I will explain some of the use cases of type hints, and
show how we can use them to e.g. make our code more secure or teach
it new tricks. We will have a look at popular libraries that help us
to use the power of type hints (e.g. mypy), but we will also see how
we can build our own extensions on top of the type hint system.&lt;/p&gt;
&lt;p&gt;After the talk you should walk away with a solid (basic) understanding
of type hints in Python and an idea of how they might be useful to
you now or in the future.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Typing and type hints in programming languages&lt;/li&gt;
&lt;li&gt;Short history and motivation of type hints in Python&lt;/li&gt;
&lt;li&gt;Basics of type hint syntax and semantics&lt;/li&gt;
&lt;li&gt;Use cases for type hints&lt;/li&gt;
&lt;li&gt;Type hints for code analysis: mypy and similar libraries&lt;/li&gt;
&lt;li&gt;Building new stuff with type hints in Python&lt;/li&gt;
&lt;li&gt;Summary, Outlook &amp;amp; Further Reading&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Using Python and microservices to fuel WebPush at Mozilla</title><link href="https://pyvideo.org/europython-2017/using-python-and-microservices-to-fuel-webpush-at-mozilla.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Mansimar Kaur</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/using-python-and-microservices-to-fuel-webpush-at-mozilla.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will focus on how python and microservices fuel webpush in
the storage team of Mozilla . It will also act as a good introduction
to webpush technology and how to integrate it into web apps.&lt;/p&gt;
&lt;p&gt;The talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How webpush works?&lt;/li&gt;
&lt;li&gt;The roles played by the various players involved (service workers and push servers and how they interact to bring about the webpush magic).&lt;/li&gt;
&lt;li&gt;The idea behind the service, WebPush Channels which is at the heart of  webpush at Mozilla's storage team.&lt;/li&gt;
&lt;li&gt;How the service was developed will be covered in detail.&lt;/li&gt;
&lt;li&gt;How developers can use WebPush Channels to integrate web push in their web apps.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>When Django is too bloated - Specialized Web-Applications with Werkzeug</title><link href="https://pyvideo.org/europython-2017/when-django-is-too-bloated-specialized-web-applications-with-werkzeug.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Niklas Meinzer</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/when-django-is-too-bloated-specialized-web-applications-with-werkzeug.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you ever think, Django and all the other “batteries included”
frameworks are not flexible enough for your needs? Do you feel like
they limit you in your creativity and design? Then this talk is for
you!&lt;/p&gt;
&lt;p&gt;Werkzeug is a very lightweight HTTP/WSGI utility for Python. You
might have actually used it before, since the popular framework Flask
is based on it.&lt;/p&gt;
&lt;p&gt;Werkzeug handles the WSGI communication with the web server and
parsing of HTTP packets for you, after that, you are left to do
whatever you want. No pre-defined ORM, no request dispatching or
template rendering.&lt;/p&gt;
&lt;p&gt;As a developer you are supported with a live debugger that runs in
the browser and a great variety of testing tools making it easy to
write fine grained unit tests for your application.&lt;/p&gt;
&lt;p&gt;As a developer at MPS - Medical Systems, I work with Werkzeug on a
daily basis. One of our products is ChemoCompile,  a chemo therapy
planning, management and documentation tool used in hospitals in
various European countries. It is a single-page web application
written in Python (backend) and AngularJS (frontend). When we created
it, we first prototyped it using Django, but soon realized, that we
did not need most of the functionality that Django provides and many
of our needs, like interfacing with hospital information systems, are
too much out of the scope of a regular web applications. I will talk
about, how we then discovered Werkzeug and built our own very
customized stack on top of it and how you can do it too!&lt;/p&gt;
</summary></entry><entry><title>A Gentle Introduction to Data Science</title><link href="https://pyvideo.org/europython-2017/a-gentle-introduction-to-data-science.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Marc Garcia</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/a-gentle-introduction-to-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This introductory talk, will cover the basics of datascience. From
the incluence of artificial intelligence, and the quest to replicate
a human mind, to a practical demo on how to build a hello world
machine learning in Python.&lt;/p&gt;
&lt;p&gt;The talk will try to answer questions such as: What do we understand
by data science? What do we know about the human mind, that can be an
inspiration for our programs? Which problems can we solve with data
science? What tools are available to do data science in Python?&lt;/p&gt;
</summary></entry><entry><title>Automatic Conference Scheduling with PuLP</title><link href="https://pyvideo.org/europython-2017/automatic-conference-scheduling-with-pulp.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/automatic-conference-scheduling-with-pulp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linear programming is often regarded as very theoretical or even not
known at all as a well-developed method of solving real world
problems.&lt;/p&gt;
&lt;p&gt;The talk gives a short introduction to LP problems and presents an
interesting use case for the Python linear programming problem solver
PuLP: that of creating a conference schedule.&lt;/p&gt;
</summary></entry><entry><title>Automating Instagram with Python and Selenium</title><link href="https://pyvideo.org/europython-2017/automating-instagram-with-python-and-selenium.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Tim Großmann</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/automating-instagram-with-python-and-selenium.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk about using Selenium and Python for social media
automation you will get some insights into growing your own open
source projects into tools that really get used and maintained by a
community. You will get an idea of what pitfalls you have to face
when working with something as fast changing as Instagram and how to
best tackle this.&lt;/p&gt;
&lt;p&gt;You'll  learn what the &amp;quot;Page Object&amp;quot; design pattern is, what it is
useful for and why we use it.&lt;/p&gt;
&lt;p&gt;Of course we will also talk about OpenSource and why it's important.&lt;/p&gt;
&lt;p&gt;A lot of the talk will be based on my article on InstaPy published at
the freeCodeCamp publication on Medium:
&lt;a class="reference external" href="https://medium.freecodecamp.com/my-open-source-instagram-bot-got-me-2-500-real-followers-for-5-in-server-costs-e40491358340"&gt;https://medium.freecodecamp.com/my-open-source-instagram-bot-got-me-2-500-real-followers-for-5-in-server-costs-e40491358340&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, who is this talk suited for?&lt;/p&gt;
&lt;p&gt;If you're just starting out with python, are interested in automation
or simply like to see a fun and interesting little open source
project, I'd love to see you at my talk and hear your ideas and
opinions about it.&lt;/p&gt;
</summary></entry><entry><title>Baby steps in short-text classification with python</title><link href="https://pyvideo.org/europython-2017/baby-steps-in-short-text-classification-with-python.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alisa Dammer</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/baby-steps-in-short-text-classification-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to provide an information about where and how one could
start using simple text-classification models.
Additionally it will be shown how a python classificator  can be incorporated
into existing system.
The presentation will be broken into 3 topics and a conclusion.&lt;/p&gt;
&lt;p&gt;First, the presentation provides an overview of how the problem was
approached, what information was useful or not and how the technologies
tack shown in the second part was decided on.&lt;/p&gt;
&lt;p&gt;Second part will concentrate on using Naive Bayesian model for text classification.
How the model was trained, what difficulties were met and how they were solved.
Additionally the talk will give a brief overview of other possible model choices
(random forest, SVM).&lt;/p&gt;
&lt;p&gt;The third part will show how the model was deployed and used in the
production. One architecture solution will be shown in details
(REST calls between Java Client and Flask Server), while other
possibilities will be mentioned briefly.&lt;/p&gt;
&lt;p&gt;As the conclusion the possible improvements for the model in use will
be suggested as well as short example of supervised learning algorithm
(CNN) and unsupervised classification algorithm (LDA) for the same purpose.
Along with the examples the proc and cons will be named.&lt;/p&gt;
&lt;p&gt;Technologies mentioned and used: Flask, Green Unicorn vs uWSGI, NLTK,
Sci-Kit, Python 3, Java 8, Jersey, Docker, Kubernetes&lt;/p&gt;
</summary></entry><entry><title>Big Data Analytics at the MPCDF: GPU Crystallography with Python</title><link href="https://pyvideo.org/europython-2017/big-data-analytics-at-the-mpcdf-gpu-crystallography-with-python.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Giuseppe Di Bernardo</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/big-data-analytics-at-the-mpcdf-gpu-crystallography-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In close collaboration with scientists from MPG, the Max Planck
Computing and Data Facility is&amp;nbsp;engaged in the development and
optimization of algorithms and applications for high
performance&amp;nbsp;computing, as well as in the design and&amp;nbsp;implementation of
solutions for data-intensive projects.&amp;nbsp;Python is now used at MPCDF in
the emerging area of “atom probe crystallography” (APT): a Fourier
spectral analysis in 3D reciprocal space can be simulated in order to
reveal both composition and crystallographic structure at the atomic
scale of billions APT experimental data sets. The Python data
ecosystem has proved to be well suited to this, as it has grown
beyond the confines of single machines to embrace scalability. This
talk aims to describe our approach to scaling across multiple GPUs,
and the role of our visualization methods too. Our data workflow
analysis relies on the GPU-accelerated Python software package called
PyNX, an open source Python library which provides fast parallel
computation scattering. The code is well suited for GPU computing,
using both the pyCUDA and pyOpenCL libraries. Exploratory data
analysis and performance tests are initially carried on through
Jupyter notebooks and Python packages e.g., pandas, matplotlib,
plotly. In production stage, interactive visualization is realized by
using standard scientific tool, e.g. Paraview, an open-source 3D
visualization program which e.g. requires Python modules to generate
visualization components within VTK files.&lt;/p&gt;
</summary></entry><entry><title>Call a C API from Python becomes more enjoyable with CFFI</title><link href="https://pyvideo.org/europython-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Jean-Sébastien Bevilacqua</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is slow ! Python can’t access bare metal!&lt;/p&gt;
&lt;p&gt;You often hear theses assumptions? Theses limitations can be
surpassed by Python extensions written in C. However, according to my
personal experience, doing this by leveraging C may yield to several
issues (e.g., memory management).&lt;/p&gt;
&lt;p&gt;C Foreign Function Interface for Python (a.k.a., CFFI) allows you to
easily write Python extensions. One of the main aims of CFFI is to to
wrap C libraries. Along the same lines, it may also be used for
performance enhancement.&lt;/p&gt;
&lt;p&gt;By this call, I am firstly presenting CFFI and it’s two modes of
utilization: API level and ABI level. Then I will share my own
experience about wrapping &lt;a class="reference external" href="https://github.com/google/shaderc"&gt;shaderc library&lt;/a&gt; in six hours &lt;a class="reference external" href="https://github.com/realitix/pyshaderc"&gt;pyshaderc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we are going to the next level, let’s wrap all the Vulkan API!
Vulkan is the new 3D API and is not a piece of cake. To see the real
advantage of CFFI, a side by side comparison between two Python
modules is going to be presented:&lt;/p&gt;
&lt;p&gt;CVulkan is a Vulkan wrapper written fully in C, it’s a classic C
extension for Python vulkan is its CFFI counterpart without any C
written, only Python&lt;/p&gt;
&lt;p&gt;I have developed two versions of Vulkan wrapper (one in a pure C, and
the second by leveraging CFFI) and I can assure you that CFFI is a a
way better!&lt;/p&gt;
&lt;p&gt;Let’s code!&lt;/p&gt;
</summary></entry><entry><title>Facing the challenge of climate change with xarray and Dask</title><link href="https://pyvideo.org/europython-2017/facing-the-challenge-of-climate-change-with-xarray-and-dask.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Francesco Nazzaro</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/facing-the-challenge-of-climate-change-with-xarray-and-dask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last years climate change has become one of the most important
topic. For any period longer than a few days science is not able to
provide comparable forecasts, but still a lot of useful information
about future climate conditions can be gained on time scale of a few
months to even several years.&lt;/p&gt;
&lt;p&gt;Climate forecast and climate projections data are quite complex to
analyse and represent. The Python science ecosystem proves extremely
effective as a platform to retrieve, analyse, process and present
this type of data. The backbone of the platform is the n-dimensional
array library xarray that provides the perfect mix between pandas
data structures and dask performance and parallelization.&lt;/p&gt;
&lt;p&gt;Reliable climate forecasts and climate projections are now available
from the Copernicus Climate Change Service, operated by ECMWF, that
will become the central hub for European effort in study and mitigate
climate change impacts. The service also provides access to an open
cloud platform, the CDS Toolbox, that is based on the Python 3
xarray/dask/pandas stack.&lt;/p&gt;
&lt;p&gt;In this talk I will present how to retrieve, analyse, process and
display climate data in a generic use case with xarray and with the
Copernicus CDS Toolbox.&lt;/p&gt;
&lt;p&gt;slides: &lt;a class="reference external" href="http://slides.com/francesconazzaro/europython-2017"&gt;http://slides.com/francesconazzaro/europython-2017&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Fast Python! Coding competitions with CPython and PyPy</title><link href="https://pyvideo.org/europython-2017/fast-python-coding-competitions-with-cpython-and-pypy.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/fast-python-coding-competitions-with-cpython-and-pypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a coding competition you want to solve problems &amp;quot;fast&amp;quot;...
why would you choose a &amp;quot;slow&amp;quot; interpreted language like Python?
Because the &amp;quot;slow&amp;quot; Python wins competitions more often that most people think.&lt;/p&gt;
&lt;p&gt;We will show how coding competitions work, what are the resources and
constraints that competitors need to take into account, and we will find
out that, like very often in real life, the actual processing time
is only a small term in the complex equation that describe a competition.&lt;/p&gt;
&lt;p&gt;The &amp;quot;faster&amp;quot; PyPy may help in gaining raw speed, but that is not the
real advantage it gives you in a competition.&lt;/p&gt;
</summary></entry><entry><title>Full-Text Search in Django with PostgreSQL</title><link href="https://pyvideo.org/europython-2017/full-text-search-in-django-with-postgresql.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/full-text-search-in-django-with-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After some experiences in the implementation of full-text search
functionality with different system, we have decided to use
PostgreSQL to implement full-text search functionality in our next
project, a website to search for shows, venues, bands and festivals.&lt;/p&gt;
&lt;p&gt;In the past, I have worked in two different projects, a mobile
platform to sell and buy used items and a sport videos sharing
platform, where I used two of the most currently famous full-text
search software (Elasticsearch or Solr) but I had some
synchronization and management problems.&lt;/p&gt;
&lt;p&gt;After that, in my company, we searched for new Django support of
full-text search PostgreSQL implementation and we decided to use it
to avoid any problems that I had in the past.&lt;/p&gt;
&lt;p&gt;I’m going to start speaking about the full-text search in a general
context and I want to show the problems I encountered implementing it
in the past.&lt;/p&gt;
&lt;p&gt;Afterwards, I’m going to talk about the PostgreSQL functionality to
implement the full-text search functionality and also present the
django.contrib.potgres.search module, with step-by-step
demonstrations of its functions with real world data.&lt;/p&gt;
&lt;p&gt;Finally, I’m going to show the way we use and test this functionality
in our project and which functionality lacks us to have a complete
implementation of full-text search in our project.&lt;/p&gt;
&lt;p&gt;At the end, I want to present my conclusions about our solution and I
want to explore some new features that will be present in the next
versions of Django and PostgreSQL.&lt;/p&gt;
</summary></entry><entry><title>Green threads in Python</title><link href="https://pyvideo.org/europython-2017/green-threads-in-python.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Vinicius Pacheco</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/green-threads-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is for general public with problems to scale. The good
background for this talk is people with minimal knowledge about
threads. After this talk I expect that the audience can be enable to
understand multiprocessing, when use and which tools and methods are
appropriate for each case.&lt;/p&gt;
&lt;p&gt;Understanding threads&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's the first moment on the talk. Here I'll speak about the thread theory and what happen when we use threads on the OS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Threads and multiprocess API&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I'll give simple examples about what python give us to use threads and multiprocessing perhaps with two APIs&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3/library/threading.html"&gt;https://docs.python.org/3/library/threading.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.5/library/multiprocessing.html"&gt;https://docs.python.org/3.5/library/multiprocessing.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Understanding Green threads&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Here I'll speak about green threads theory and what happen when we use green threads on our OS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Green thread Patterns and tools&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Here I'll show few examples with keep alive patterns, discuss about a few tools and show gevent and asyncio examples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parallelism x asynchronism&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I'll show the diference between parallelism and asynchronism discussing about the two theories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why, when and how&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's is the last talk moment and I'll explain the how complex is work with multiprocess showing cases like queues consume and APIs consume&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Hi, my name is README! - A Look at Why Docs are So Important</title><link href="https://pyvideo.org/europython-2017/hi-my-name-is-readme-a-look-at-why-docs-are-so-important.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Raphael Pierzina</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/hi-my-name-is-readme-a-look-at-why-docs-are-so-important.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When starting a new project, as developers we usually get right into
hacking things, like tinkering with libs that we would like to learn
or solving a particular problem as quickly a possible. Occasionally
we also decide to publish the resulting package to PyPI, so that
others can use our nifty code, submit a pull request and maybe even
form a community around the project.&lt;/p&gt;
&lt;p&gt;If you're lucky someone might find it on the front-page of PyPI or
the GitHub search or maybe even Hacker News or Reddit. What happens
next is on you really.  But what does that mean?&lt;/p&gt;
&lt;p&gt;Before jumping right to the command line and installing your package,
those who are interested usually try to find out what problems the
project is solving and how it can help them with their own. That's
what your README file is for - it's most likely the first thing
potential users read, that you control.&lt;/p&gt;
&lt;p&gt;A good README briefly and concisely explains what your software does,
how it can be installed and what API it exposes. You also want to
provide information on the requirements, the license it uses and how
the project is managed. Who are you? How to get in touch to report
problems and give feedback? Where can I find the Code of Conduct for
this project?&lt;/p&gt;
&lt;p&gt;This talk is for everyone who is interested in working on open source
projects and wants to know how documentation can help newcomers and
more experienced users use your code and to encourage them to engage
in the community.&lt;/p&gt;
</summary></entry><entry><title>How CPython parser works, and how to make it work better</title><link href="https://pyvideo.org/europython-2017/how-cpython-parser-works-and-how-to-make-it-work-better.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Artyom Skrobov</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/how-cpython-parser-works-and-how-to-make-it-work-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The part of CPython core that parses the Python source code is some
very old and convoluted code: the time has proven its reliability,
but few CPython hackers understand (or care) how it works, or even
what exactly it does. There is, however, a good reason to care: for
short-running scripts, the performance of CPython may easily be
dominated by that of parsing the source code.&lt;/p&gt;
&lt;p&gt;The talk will describe the two parsers that are involved, it will
explain how these two parsers build two different kinds of syntax
trees, and then show how the structure of one of the trees can be
amended to reduce its memory footprint threefold, with only minor
changes necessary in its consumers. It will also suggest other, more
invasive improvements, which can yield even better savings.&lt;/p&gt;
&lt;p&gt;The talk will assume fluency in C and a basic acquaintance with
CPython core internals, and will give the attendees an introduction
into hacking the parser, guiding their way through to the very
tangible end result of reducing Python overall memory consumption by
up to 30%, measured at standard micro-benchmarks.&lt;/p&gt;
</summary></entry><entry><title>How to build up a Python community and empower women</title><link href="https://pyvideo.org/europython-2017/how-to-build-up-a-python-community-and-empower-women.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Kristi Progri</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/how-to-build-up-a-python-community-and-empower-women.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2012 not a lot of people were interested in Python in the
relatively small city of Tirana, the capital of Albania. Even fewer
girls were interested in Python. During (Jona Azizaj and me) our talk
we will share the story of how we, a small but dedicated group of
people, jump started the community in a small country like Albania
and what other small cities and countries should avoid during their
first steps in developing a Python community in similar conditions.
Most important we will share tips and tricks on how to keep the
Python spirit alive for a long time after the first enthusiastic
steps, with the goal that our shared experience will help other
communities to make the first steps or grow even further. Also
nowadays we are witnessing that the number of girls involved in
technical fields, especially development, is really low and we are
going to present what as the influence on low participation of girls
and the steps we should take to fix it.&lt;/p&gt;
</summary></entry><entry><title>How to make money with your Python Open-Source Project</title><link href="https://pyvideo.org/europython-2017/how-to-make-money-with-your-python-open-source-project.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Max Tepkeev</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/how-to-make-money-with-your-python-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developers create new open-source projects every day. As the project
becomes popular they have to invest more and more time into it's
development and of course at some point a question arises: &amp;quot;How can
I make some money with my project ?&amp;quot;&lt;/p&gt;
&lt;p&gt;In this talk we will try to answer this question. We will talk about
different models of making money, their pros and cons. We will
concentrate on Python Open-Source projects mostly and try to answer
the following questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What to sell?&lt;/li&gt;
&lt;li&gt;Where to sell?&lt;/li&gt;
&lt;li&gt;How to distribute?&lt;/li&gt;
&lt;li&gt;How to license?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this talk you will have a clear understanding of how you can
make money with your project. What your next steps should be and how
you can get the actual profit while still continuing making your
customers happy.&lt;/p&gt;
</summary></entry><entry><title>How to use pandas the wrong way</title><link href="https://pyvideo.org/europython-2017/how-to-use-pandas-the-wrong-way.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Pietro Battiston</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/how-to-use-pandas-the-wrong-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The pandas library represents a very efficient and convenient tool
for data manipulation, but sometimes hides unexpected pitfalls which
can arise in various and sometimes unintelligible ways.&lt;/p&gt;
&lt;p&gt;By briefly referring to some aspects of the implementation, I will
review specific situations in which a change of approach can make
code based on pandas more robust, or more performant.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;inefficient indexing&lt;/li&gt;
&lt;li&gt;multiple dtypes and efficiency&lt;/li&gt;
&lt;li&gt;implicit type casting&lt;/li&gt;
&lt;li&gt;HDF5 storage overhead&lt;/li&gt;
&lt;li&gt;GroupBy.apply()... when you don't actually need it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UPDATE: slides and materials can be found at &lt;a class="reference external" href="http://pietrobattiston.it/python:pycon#europython_rimini_july_2017"&gt;http://pietrobattiston.it/python:pycon#europython_rimini_july_2017&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>If Ethics is not None</title><link href="https://pyvideo.org/europython-2017/if-ethics-is-not-none.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Katharine Jarmul</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/if-ethics-is-not-none.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The history of computing, as it's often covered in textbooks or
talks, remains primarily focused on a series of hardware
advancements, architectures, operating systems and software. In this
talk, we will instead explore the history of ethics in computing,
touching on the early days of computers in warfare and science,
leading up to ethical issues today such as Artificial Intelligence
and privacy regulation.&lt;/p&gt;
</summary></entry><entry><title>Infrastructure design patterns with Python, Buildbot, and Linux Containers</title><link href="https://pyvideo.org/europython-2017/infrastructure-design-patterns-with-python-buildbot-and-linux-containers.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>David Liu</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/infrastructure-design-patterns-with-python-buildbot-and-linux-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today’s world of fast-paced development, infrastructure can get
left behind quickly, leading to a potential increase in technical
debt. Buildbot is normally known to be a continuous integration (CI)
framework built in Python, but can be refashioned to solve
infrastructure design patterns that arise in enterprise or production
and deployment situations. Using Python and native Buildbot
components paired with Linux Containers, patterns such as license
management, resource allocation, load balancing, and enterprise
application deployment can be architected quickly with room for
expansion as one’s needs grow.&lt;/p&gt;
&lt;p&gt;Learn how to move past the CI mindset and construct infrastructure
needs with Buildbot and popular Linux Containers such as Docker and
ClearContainers. Attendees will learn the best known methods of
configuring Buildbot in non-CI implementations, and how to utilize
the framework components for future needs.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2017-07-12</title><link href="https://pyvideo.org/europython-2017/lightning-talks-2017-07-12.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/lightning-talks-2017-07-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks
EuroPython 2017 - 2017-07-12 - Anfiteatro 2&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Mary had a little lambda</title><link href="https://pyvideo.org/europython-2017/mary-had-a-little-lambda.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Anjana Vakil</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/mary-had-a-little-lambda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Mary had a little lambda,&lt;/div&gt;
&lt;div class="line"&gt;a function pure as snow.&lt;/div&gt;
&lt;div class="line"&gt;And for every program that Mary wrote,&lt;/div&gt;
&lt;div class="line"&gt;the lambda was all she needed to know.&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python’s lambda, a tiny anonymous function, can be useful in a pinch
when you’re feeling too lazy to type that extra d-e-f.
But did you know that behind this little lambda is actually
one of the most powerful &amp;amp; elegant abstractions in the
history of computer science?&lt;/p&gt;
&lt;p&gt;The lambda calculus, dating back to the work of lambda shepherd
Alonzo Church in the 1930's, lets us represent our programs
- all their logic and data - as pure, anonymous functions,
using nothing but (a whole lot of) lambda. Let’s take it for
a spin and see what we can create: booleans and conditionals,
integers, arithmetical operators, data structures… you name it.
With some determination, and a little squinting, we might even see
lambda do the impossible: reconcile object-oriented and functional
programming. You heard it right: lambda can do it all!&lt;/p&gt;
&lt;p&gt;Join me as we explore its astounding computational power,
and walk away with a deeper respect and admiration
for the almighty little lambda.&lt;/p&gt;
</summary></entry><entry><title>MSS - Software for planning research aircraft missions</title><link href="https://pyvideo.org/europython-2017/mss-software-for-planning-research-aircraft-missions.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Reimar Bauer</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/mss-software-for-planning-research-aircraft-missions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.geosci-model-dev.net/5/55/2012/"&gt;http://www.geosci-model-dev.net/5/55/2012/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scientific aircraft research flights have to be planned beforehand.&lt;/p&gt;
&lt;p&gt;For that it is necessary to have model forecasts of relevant
quantities such as meteorological parameters, chemical composition or
particle information to guide the aircraft to the location of
interest. Typically, many scientific instruments on board those
aircrafts used to investigate e.g. the chemical composition of the
air in order to get new insights often with the involvement of
different science groups.&lt;/p&gt;
&lt;p&gt;For discussion of the possibilites of the research flights, the
Mission Support System (MSS) was developed (&lt;a class="reference external" href="http://mss.rtfd.io"&gt;http://mss.rtfd.io&lt;/a&gt;). This
software helps to review a big amount of metereological and model
data by viewing the forecasted parameters of interest along possible
regions of a proposed flight path. Data and possible flight paths can
be displayed on a hoizontal view (map projection) or on a vertical
view (along the proposed flight path). Flight paths can be
constructed and modified on these views. Exchange through a waypoint
table is also possible.&lt;/p&gt;
&lt;p&gt;The talk gives a brief insight into the MSS software development
current state.&lt;/p&gt;
&lt;p&gt;We are using the OWS interface standard.
&lt;a class="reference external" href="https://geopython.github.io/OWSLib/"&gt;https://geopython.github.io/OWSLib/&lt;/a&gt; MSS is a client/server
application. The QT client interacts with a paste wsgi server. The
software is available for all platforms on conda-forge.&lt;/p&gt;
</summary></entry><entry><title>Neat Analytics with Pandas Indexes</title><link href="https://pyvideo.org/europython-2017/neat-analytics-with-pandas-indexes.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/neat-analytics-with-pandas-indexes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is the Swiss-Multipurpose Knife for Data Analysis in Python.
In this talk we will look deeper into how to gain productivity
utilising Pandas powerful indexing and make advanced analytics
a piece of cake.&lt;/p&gt;
&lt;p&gt;We will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pandas indexing recap&lt;/li&gt;
&lt;li&gt;Index Types&lt;/li&gt;
&lt;li&gt;Time-Series Index and resampling&lt;/li&gt;
&lt;li&gt;Pandas Multi-Indexing&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>PostgreSQL - The Database for Industry 4.0 and IOT</title><link href="https://pyvideo.org/europython-2017/postgresql-the-database-for-industry-40-and-iot.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Harald Armin Massa</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/postgresql-the-database-for-industry-40-and-iot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Industry 4.0 - the current trend to make more use of data technology
and analysis in manufactring.&lt;/p&gt;
&lt;p&gt;IOT - The Internet of Things, where many &amp;quot;things&amp;quot; currently just
loosing their information will transfer and store them within central
systems.&lt;/p&gt;
&lt;p&gt;There are aspects of those trends most do agree on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There will be orders of magnitude more data to store and analyze.&lt;/li&gt;
&lt;li&gt;More agents will need to connect and interact with databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will explore what makes PostgreSQL an excellent candidate
to be the database for managing all that data. Strengths in
development,  culture and community, extensibility and robustnest
will be presented. Selected features of current Version 9.6 and the
soon-to-be-released PostgreSQL Version 10 will be discussed for their
value in those trends. There will be an explanation of their
technical realisation, and special pointers how to use those features
from PostgreSQL.&lt;/p&gt;
</summary></entry><entry><title>PyCharm tips and tricks</title><link href="https://pyvideo.org/europython-2017/pycharm-tips-and-tricks.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Dmitry Trofimov</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/pycharm-tips-and-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCharm, a Python IDE with its free and open-source community
edition, in last several years has become a tool of choice for more
and more Python developers. But not everybody uses its full power.
Moreover, most only use a fraction of the functionality it provides.&lt;/p&gt;
&lt;p&gt;The reality is that an IDE is not just about a set of integrated
tools, but an environment that understands the semantics of your
project, of what you’re doing. It can leverage this to provide you
with functionality that can make repetitive mundane tasks become
frictionless, as well as give insight into potential problems.&lt;/p&gt;
&lt;p&gt;In this session, we will go through the most powerful features the
IDE offers and whether you do web development or work with data using
Python, you will benefit knowing how the IDE can leverage your
programming skills.&lt;/p&gt;
</summary></entry><entry><title>Pythonic JavaScript for Web Developers</title><link href="https://pyvideo.org/europython-2017/pythonic-javascript-for-web-developers.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Ville Säävuori</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/pythonic-javascript-for-web-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Having a basic knowledge of JavaScript is obligatory for every Web
developer in todays world. Most of us are familiar with the pain of
having to write some simple hide/show logic and ajax queries with
jQuery on a page that is mostly rendered server-side. Nowadays,
however, there are lots of great JavaScript frameworks and build
tools that not only make these things very easy to do The Right Way,
but also make the whole process quite painless.&lt;/p&gt;
&lt;p&gt;I spent past year in a small startup writing only front-end code and
evaluating different tools and best practises. Bringing these tools
to old Django projects has been eye-opening. There are practically no
documentation or code examples on how to integrate these things to
Python backend projects, so it’s very hard to get started from
scratch. In this talk we’ll go trough some of the tools, examples on
how to get started, and also some coding guidelines on how to make
JavaScript look and feel more sane and Pythonic.&lt;/p&gt;
&lt;p&gt;The current state of JavaScript frameworks is notoriously bad; there
are more of them than blog engines written with Django. We’ll focus
on Vue.js (&lt;a class="reference external" href="https://vuejs.org"&gt;https://vuejs.org&lt;/a&gt;) which is a lightweight, very easy to
get started and yet powerful tool.&lt;/p&gt;
&lt;p&gt;We’ll also take a look at new end-to-end browser test tools and
modern build tools that enable us to take full advantage of the huge
NPM package universe (Cheeseshop for JS)  and write modern
ES2015/ES2016 JavaScript that has more powerful and cleaner syntax.&lt;/p&gt;
</summary></entry><entry><title>Realtime Distributed Computing At Scale: Storm And Streamparse</title><link href="https://pyvideo.org/europython-2017/realtime-distributed-computing-at-scale-storm-and-streamparse.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alexander Lourenco</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/realtime-distributed-computing-at-scale-storm-and-streamparse.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Realtime distributed computing is tough, especially at scale:
managing a large data pipeline is tough, and it’s even tougher to keep
latency low and availability high when processing tens of thousands of
items per second. Many people turn in despair to Java or Scala when it
comes time to scale up, but we can do it in Python: Apache Storm is a
distributed realtime computation system that can let you scale up
- and no need to reach for a new language!&lt;/p&gt;
&lt;p&gt;This talk will walk the audience through the basics of Apache Storm
and how it’s an elegant, useful solution to realtime distributed computing,
as well as how streamparse can let you write your storm components in
Python by writing some code and a basic storm topology in Python.
We’ll also look at how Parsely uses Storm in production to handle
billions of realtime events a month. If we have time, we’ll go a bit
into how Storm has several advantages over other common Python computing
data streaming solutions, like Spark’s microbatching.&lt;/p&gt;
&lt;p&gt;Goals:&lt;/p&gt;
&lt;p&gt;At the end of the talk, ideally you should be able to understand:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What Apache Storm is, how it works generally, and what scenarios it’s useful for&lt;/li&gt;
&lt;li&gt;How streamparse can be used to write your Storm topologies&lt;/li&gt;
&lt;li&gt;How Storm + streamparse is used in an actual high-availability, low-latency production environment&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Rendering complex 3D-Geodata using pyRT</title><link href="https://pyvideo.org/europython-2017/rendering-complex-3d-geodata-using-pyrt.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/rendering-complex-3d-geodata-using-pyrt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyRT (pronounced &amp;quot;pirate&amp;quot;) is a rather new open source project
creating a ray tracer in pure Python and some optional CPU/GPU
acceleration using bindings. Ray tracing is a technique for
generating an image by tracing the path of light.&lt;/p&gt;
&lt;p&gt;PyRT was created to render large 3D City models. In this talk, the
possibilities and experiences of ray tracing in Python using pyRT are
shown. pyRT also runs in the Jupyter Notebook.&lt;/p&gt;
&lt;p&gt;Rendering complex 3D-Geodata, such as 3D-City models with an
extremely high polygon count and a vast amount of textures at
interactive framerates is still a very challenging task, especially
on mobile devices. This talk presents an approach for processing,
caching and serving massive geospatial data in a cloud-based
environment for large scale, out-of-core, highly scalable 3D scene
rendering in a web-based solution. PyRT  is used for rendering large
amounts of geospatial data. The approach for processing, rendering
and caching 3D-City Models is shown.&lt;/p&gt;
&lt;p&gt;Screenshots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/martinchristen/pyRT/raw/master/jupyter/img/sponza.png"&gt;https://github.com/martinchristen/pyRT/raw/master/jupyter/img/sponza.png&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/martinchristen/pyRT/blob/master/jupyter/img/Berlin_AO_small.PNG?raw=true"&gt;https://github.com/martinchristen/pyRT/blob/master/jupyter/img/Berlin_AO_small.PNG?raw=true&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Simple ETL in python 3.5+ with Bonobo</title><link href="https://pyvideo.org/europython-2017/simple-etl-in-python-35-with-bonobo.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Romain Dorgueil</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/simple-etl-in-python-35-with-bonobo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simple is better than complex, right? That’s true for data pipelines too.&lt;/p&gt;
&lt;p&gt;For more than 5 years, I hacked together extract-transform-load (ETL)
processes in various different positions (ETL is just a fancy term
for «bunch of things that take data somewhere and put it elsewhere,
eventually transformed»).&lt;/p&gt;
&lt;p&gt;I did it as a founder, as a consultant, as a technical co-founder,
for some side projects, and now in a big corp (to be continued…).&lt;/p&gt;
&lt;p&gt;In each case, I felt frustrated with the tools available, and in some
serious cases, I had to hack things myself to get the job done.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.bonobo-project.org/"&gt;https://www.bonobo-project.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bonobo is the repackaging of my past experiences for python 3.5+, and
grasping the basics should not take more than the length of the
presentation.&lt;/p&gt;
&lt;p&gt;Topics outline (subject to small changes) :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;INTRO : State of the art / different tools for different needs.&lt;/li&gt;
&lt;li&gt;Where does it come from.&lt;/li&gt;
&lt;li&gt;Writing a data processor.&lt;/li&gt;
&lt;li&gt;Running and monitoring data jobs.&lt;/li&gt;
&lt;li&gt;OUTRO : The road ahead.&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bonobo is the glue you need to tie together regular functions in a
transformation graph (think unix pipes). Execution strategies are
abstracted so you can focus on the real operations. As a result, you
can engineer simple and testable systems, using the same good
computer development practices as you use in -insert your favorite
field here-.&lt;/p&gt;
&lt;p&gt;Spoiler : there is no «big data» in this talk.&lt;/p&gt;
</summary></entry><entry><title>Sustainable Scientific Software Development</title><link href="https://pyvideo.org/europython-2017/sustainable-scientific-software-development.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Alice Harpole</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/sustainable-scientific-software-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the experimental Sciences, new theories are developed by applying
the Scientific method to produce results which are accurate,
reproducible and reliable. This involves testing the experimental
setup to show that it is working as designed and thoroughly documenting
the progress of the experiment. Results will not be trusted unless the
experiment has been carried out to a suitable standard.&lt;/p&gt;
&lt;p&gt;In computational Science, we should aim to apply the same principles.
Results should only be trusted if the code that has produced it has
undergone rigorous testing which demonstrates that it is working as
intended, and any limitations of the code (e.g. numerical errors)
are understood and quantified. The code should be well documented
so that others can understand how it works and run it themselves to
replicate results.&lt;/p&gt;
&lt;p&gt;Unfortunately, this can be quite challenging. By their very nature,
scientific codes are built to investigate systems where the behaviour
is to some extent unknown, so testing them can be quite difficult.
They can be very complex, built over a number of years (or even decades!)
with contributions from many people. However, even for the most complicated
of codes there are a number of different tools we can use to build robust,
reliable code.&lt;/p&gt;
&lt;p&gt;In this talk, I shall look at techniques and tools you can use to build
more sustainable scientific code, including testing, continuous integration and documentation.&lt;/p&gt;
</summary></entry><entry><title>Taking the Hipster out of Streaming</title><link href="https://pyvideo.org/europython-2017/taking-the-hipster-out-of-streaming.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Andreas Heider</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/taking-the-hipster-out-of-streaming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Winton ingests data continually from the world's financial markets.
We track millions of individual timeseries, with divergent formats,
from disparate time zones, and whose frequencies vary from months
to milliseconds. We go beyond simply reading and storing it -
we stitch distinct and vast data sets together and subject them to
intricate calculations in real-time.&lt;/p&gt;
&lt;p&gt;This talk will focus on the way we use Python to achieve these ends,
and how we are creating tools to further commoditise streaming as a service.&lt;/p&gt;
</summary></entry><entry><title>Teach your (micro)services speak Protocol Buffers with gRPC.</title><link href="https://pyvideo.org/europython-2017/teach-your-microservices-speak-protocol-buffers-with-grpc.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Mihai Iachimovschi</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/teach-your-microservices-speak-protocol-buffers-with-grpc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to microservices, there're a lot of things worth
keeping in mind. Designing such fine-grained, loosely-coupled
services requires paying lots of attention to various patterns and
approaches to make them future-proof. A very important thing to
consider, is the way those services will communicate with each-other
in production. Usually the communication is done over the network
using a technology-agnostic protocol. At the next level the service
should provide an API for its friend services. Then, the data should
be serialized without altering its meaning and transferred to the
picked endpoint.&lt;/p&gt;
&lt;p&gt;Nowadays, exposing a REST API that operates with JSON over plain HTTP
is a usual way to lay the grounds of communication for the services.
It is easy to accomplish, but it has some drawbacks. First of all,
JSON is a human readable format, and it’s not as other serialization
approaches. Also, with JSON it’s not possible to natively enforce the
schema, and evolving the API may be painful.&lt;/p&gt;
&lt;p&gt;This talk’s purpose is to describe in deep detail the benefits of
protocol buffers, that offer us for free an easy way to define the
API messages in the proto format, and then reuse them inside
different services, without even being locked to use the same
programming language for them. Moreover, with gRPC we can define the
API’s endpoints easily in the same proto format. All these offer us a
robust schema enforcement, compact binary serialization, and easy
backward compatibility.&lt;/p&gt;
</summary></entry><entry><title>Teeing up Python: Code Golf</title><link href="https://pyvideo.org/europython-2017/teeing-up-python-code-golf.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Lee Sheng</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/teeing-up-python-code-golf.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code golfing is an interesting heuristic dedicated to minimizing the
overall length of code to produce the same functionality. The result
doesn’t have to be incomprehensible, and in fact, we can make the
code more Pythonic in the process!&lt;/p&gt;
&lt;p&gt;Concise code helps future readers of the code understand the intent
without getting distracted by implementation errata. We’ll cover
numerous features of Python which allow complex ideas to be expressed
concisely without sacrificing readability.&lt;/p&gt;
&lt;p&gt;Broad subtopics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why even bother?&lt;/li&gt;
&lt;li&gt;Default! The two sweetest words in the english language!&lt;/li&gt;
&lt;li&gt;The Joy of Tuples&lt;/li&gt;
&lt;li&gt;Comprehending Comprehensions&lt;/li&gt;
&lt;li&gt;Who’s afraid of Functional Programming?&lt;/li&gt;
&lt;li&gt;Ideas in Context Managers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://goo.gl/hGk7nX"&gt;https://goo.gl/hGk7nX&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The joy of PyPy JIT: abstractions for free</title><link href="https://pyvideo.org/europython-2017/the-joy-of-pypy-jit-abstractions-for-free.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/the-joy-of-pypy-jit-abstractions-for-free.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PyPy JIT is a powerful piece of technology which makes Python program
running faster: in this talk, we will see how it helps us to write our
programs better without sacrificing performance.&lt;/p&gt;
&lt;p&gt;One of the key to write complex software systems of good quality is to make a
good usage of abstractions, to clearly separate the various layers and
components.  However, often each layer of abstraction adds some cost in terms
of runtime performance, so we need to struggle finding the best trade-off
between maintainability and speed.&lt;/p&gt;
&lt;p&gt;Because of the way it works, the PyPy JIT naturally removes the cost of most
abstractions: we will look at real-life examples of how this is possible,
showing what the JIT can and can't do. We will also show how this compares to
other popular systems of optimizing Python code, such as Cython.&lt;/p&gt;
</summary></entry><entry><title>Writing code? Pfft... Evolve it instead!</title><link href="https://pyvideo.org/europython-2017/writing-code-pfft-evolve-it-instead.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Emma Gordon</name></author><id>tag:pyvideo.org,2017-07-12:europython-2017/writing-code-pfft-evolve-it-instead.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We're heading into a future of delivery drones, driverless cars and
3D-printed &amp;quot;hoverboards&amp;quot; ...&lt;/p&gt;
&lt;p&gt;With machines now able to perform many tasks better than humans, some
people are going to be out of a job.&lt;/p&gt;
&lt;p&gt;But not software developers, right?! Could a computer generate the
code you currently write for a living?&lt;/p&gt;
&lt;p&gt;In this talk, we'll take a look at one of the many biologically
inspired approaches to AI - Genetic Algorithms, and how they can be
used to generate code given a description of the function that that
code should perform.&lt;/p&gt;
&lt;p&gt;Spoiler - you're probably not out of a job, yet...&lt;/p&gt;
</summary></entry><entry><title>Abstract Base Classes: a smart use of metaclasses</title><link href="https://pyvideo.org/europython-2017/abstract-base-classes-a-smart-use-of-metaclasses.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/abstract-base-classes-a-smart-use-of-metaclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk shows what Python Abstract Base Classes (ABCs) are and how
they can be used to categorise objects and implement a virtual
inheritance tree. The goal of the talk is to introduce programmers to
the concept of ABCs, and to show that metaclasses are not a terribly
complex topic, but something that can be used by normal programmers.
The talk is divided in three different “levels of difficulty”, each
of one going deeper in the technical aspects of the subject.&lt;/p&gt;
&lt;p&gt;Level 1: Polymorphism - Behaviours and delegation - Collections&lt;/p&gt;
&lt;p&gt;The first level is meant to give a quick overview of the collections
package and some useful code snippets. Even beginners can benefit of
the information given here. To complete this level you only need to
know what a try/except block is.&lt;/p&gt;
&lt;p&gt;Level 2: Registering - Abstract Base Classes - Categories&lt;/p&gt;
&lt;p&gt;The second level shows what real and virtual inheritance are,
explains what is the meaning of registering and defines Abstract Base
Classes. To complete this level you need to know what class
inheritance is (i.e. what class MyList(list) means).&lt;/p&gt;
&lt;p&gt;Level 3: Build your ABCs - Metaclasses - ABSs as interfaces&lt;/p&gt;
&lt;p&gt;The third level shows how to create your own ABCs, why metaclasses
are involved and why they are not a difficult concept. I will then
quickly review a possible use of metaclasses as interfaces. To
complete this level you need to know how to instantiate a class, and
the difference between class and instance.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous I/O and the real-time web</title><link href="https://pyvideo.org/europython-2017/asynchronous-io-and-the-real-time-web.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Amit Nabarro</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/asynchronous-io-and-the-real-time-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building web applications is one of the most common uses of Python.
With a plethora of different web frameworks aiming at varying audiences,
it has become a rather simple and well-documented process to develop
web applications and web services. So popular it has become that
the WSGI specification is the industry standard protocol for
developing web applications with Python.&lt;/p&gt;
&lt;p&gt;But the WSGI standard is lacking with two major limitations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It supports only the ‘traditional’ synchronous http request-response
cycle thus creating a ‘glass ceiling’ with the amount of requests a
single server can handle – often described as the C10K problem&lt;/li&gt;
&lt;li&gt;It does not provide an easy and efficient way of developing two-way
communication between servers and clients. Often referred to as the
real-time web this capability has become increasingly popular
with modern web applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over the past decade multiple networking libraries have been developed
to address these limitations.
In this talk we will explore:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is an asynchronous web server and how it differs from other,
WSGI-based web servers.&lt;/li&gt;
&lt;li&gt;What is concurrency and how it can help us achieve supreme performance
and scalability in our web applications. We will survey noteworthy
libraries which will help achieve true concurrency.&lt;/li&gt;
&lt;li&gt;How to develop real-time communication, using web sockets,
with our Javascript application&lt;/li&gt;
&lt;li&gt;Concerns, limitations and pitfalls when developing asynchronous
web applications.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>CyberSecurity.bootcamp()</title><link href="https://pyvideo.org/europython-2017/cybersecuritybootcamp.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Piotr Dyba</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/cybersecuritybootcamp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cyber-security is a critical part of all distributed applications. By
understanding and implementing proper security measures, you guard
your own resources against malicious attackers as well as provide a
secure environment for all relevant parties.&lt;/p&gt;
&lt;p&gt;The purpose of the talk is to show starting points on how to improve
security in python applications by destroying a few servers during
the presentation. It will provide the most important information and
will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Threat modeling&lt;/li&gt;
&lt;li&gt;Common attack vectors on Python applications.&lt;/li&gt;
&lt;li&gt;Why python is not vulnerable to some kinds of attacks.&lt;/li&gt;
&lt;li&gt;Why is eval so dangerous?&lt;/li&gt;
&lt;li&gt;Improving server deployment and security management.&lt;/li&gt;
&lt;li&gt;Automated security testing.&lt;/li&gt;
&lt;li&gt;Pentesting.&lt;/li&gt;
&lt;li&gt;Who is a CISO and why is cyber-security awareness in the company so important nowadays.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basic knowledge of networking, python and REST is advised.&lt;/p&gt;
</summary></entry></feed>