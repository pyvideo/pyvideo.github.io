<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jeff-lindsay.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-02-25T00:00:00+00:00</updated><entry><title>Building Public Infrastructure with Autosustainble Services</title><link href="https://pyvideo.org/pycon-russia-2013/building-public-infrastructure-with-autosustainble-services.html" rel="alternate"></link><published>2013-02-25T00:00:00+00:00</published><updated>2013-02-25T00:00:00+00:00</updated><author><name>Jeff Lindsay</name></author><id>tag:pyvideo.org,2013-02-25:pycon-russia-2013/building-public-infrastructure-with-autosustainble-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Five years ago, I realized we needed a vehicle other than startups to build sustainable open source services. This need came from my own problem of building lots and lots of simple services (usually in Python) and not having the time or desire to build a business around them. These services include Localtunnel, RequestBin, Airscript, and others. Here I'll show these projects, their place in the ecosystem, and what I plan to do about making them sustainable.&lt;/p&gt;
</summary></entry><entry><title>Throwing Together Distributed Services With Gevent</title><link href="https://pyvideo.org/pycon-us-2012/throwing-together-distributed-services-with-geven.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Jeff Lindsay</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/throwing-together-distributed-services-with-geven.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk we learn how to throw together a distributed system using
gevent and a simple framework called gservice. We'll go from nothing to
a distributed messaging system ready for production deployment based on
experiences building scalable, distributed systems at Twilio.&lt;/p&gt;
</summary></entry></feed>