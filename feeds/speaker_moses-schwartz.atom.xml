<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_moses-schwartz.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T11:30:00+00:00</updated><entry><title>A Snake in the Bits: Security Automation with Python</title><link href="https://pyvideo.org/pycon-us-2019/a-snake-in-the-bits-security-automation-with-python.html" rel="alternate"></link><published>2019-05-03T11:30:00+00:00</published><updated>2019-05-03T11:30:00+00:00</updated><author><name>Moses Schwartz</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/a-snake-in-the-bits-security-automation-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Security incident response is an intense, high stress, high skill job
that relies heavily on human judgement. Despite that, for reasons that
we can't begin to understand, a big part of an incident responder's job
seems to be opening numerous browser tabs and copy-pasting bits of text
from one system to another. The hard parts of incident response can't be
automated, but there are entire classes of busy-work that we can
eliminate with a few web hooks and some artisanal Python.&lt;/p&gt;
&lt;p&gt;In this talk we're going to discuss how to use Python to automate
security incident response team (SIRT) operations. We'll give an
overview of what a typical SecOps/SIRT infrastructure looks like, how
and where automation fits in, and dive into some code. We'll walk
through a simple example, with screenshots and code, of automating a
SecOps process. We want to show that&amp;nbsp; getting started with security
automation doesn't have to be difficult or expensive (though vendors
will happily take your money). Just a little bit of Python can make some
great quality of life improvements for incident responders.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>