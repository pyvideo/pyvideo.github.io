<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 08 Dec 2016 00:00:00 +0000</lastBuildDate><item><title>Modern Dictionaries</title><link>https://pyvideo.org/san-francisco-python/modern-dictionaries.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Python's dictionaries are stunningly good. Over the years, many great ideas have combined together to produce the modern implementation in Python 3.6. This fun talk is given by Raymond Hettinger, the Python core developer responsible for the set implementation and who designed the compact-and-ordered dict implemented in CPython for Python 3.6 and in PyPy for Python 2.7. He will use pictures and little bits of pure python code to explain all of the key ideas and how they evolved over time. He will also include newer features such as key-sharing, compaction, and versioning. This talk is important because it is the only public discussion of the state of the art as of Python 3.6. Even experienced Python users are unlikely to know the most recent innovations.
Who and Why (Audience)
----------------------
This talk is for all Python programmers. It is designed to be fully understandable for a beginner (it starts from first principles) but to have new information even for Python experts (how key-sharing works, how the compact-ordered patch works, how dict versioning works). At the end of this talk, you can confidently say that you know how modern Python dictionaries work and what it means for your code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h4&gt;Bio&lt;/h4&gt;
&lt;p&gt;Raymond Hettinger has also served as a director of the Python Software Foundation, and has mentored many people over the years on their contributions to the python-dev community. He is also well known for his contributions to the Python Cookbook, and shares many pieces of Python wisdom on Twitter. He is a frequent keynote speaker at Python Conferences around the world and has received the Distinguished Service Award at PyCon 2014 for his exceptional contributions to the python community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-info"&gt;
&lt;h4&gt;Other info&lt;/h4&gt;
&lt;p&gt;This talk is delivered at SF Python's 2nd Annual Holiday Party for Python Devs in SF Bay Area, CA. In you are in San Francisco area looking to meet other python devs, please check our schedule for meetups on &lt;a class="reference external" href="http://sfpython.org"&gt;http://sfpython.org&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-12-08:san-francisco-python/modern-dictionaries.html</guid><category>coredev</category><category>dict</category></item><item><title>The Development of Python and You</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--the-development-of-python-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Development of Python and You&lt;/p&gt;
&lt;p&gt;Presented by Brian Curtin&lt;/p&gt;
&lt;p&gt;Have an inside look at what it takes to work on CPython, from getting
setup with the source and navigating the bug tracker, to the best
practices for having your work accepted. We'll find, categorize, and fix
an issue in Python to get you started. This talk is ideal for those who
are new to open source projects or are interested in the Python
development process.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;People from all backgrounds, users of all platforms, and developers of
all levels are necessary in the development of Python. From writing code
to documentation, it takes all kinds of people to make an impact. If
you've used Python, we need you, and what better place to get involved
than at PyCon?&lt;/p&gt;
&lt;p&gt;2010 saw a rise in the number of contributors to CPython, and the PSF
stepped in to support the efforts of those wanting to get involved. Are
you up for the challenge? This talk dives right into what it takes to
get involved, covering the who, what, where, when, and why of Python
development, going through the whole process live.&lt;/p&gt;
&lt;p&gt;After the conference is over, stick around with the CPython crew and
hack away!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Curtin</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-development-of-python-and-you.html</guid><category>coredev</category><category>cpython</category><category>development</category><category>gettinginvolved</category><category>pycon</category><category>pycon2011</category></item><item><title>The Python That Wasn't</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python That Wasn't&lt;/p&gt;
&lt;p&gt;Presented by Larry Hastings&lt;/p&gt;
&lt;p&gt;One reason for Python's success is its restraint in adding new language
features. Only the most essential changes make it--and for every change
that gets accepted, many more are rejected. Come learn about proposed
changes to the Python language that failed--what, how, and why.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quick overview of the process&lt;ul&gt;
&lt;li&gt;First ten years: send GvR a patch&lt;/li&gt;
&lt;li&gt;The modern approach: python-ideas, write a PEP, produce a
reference implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Discuss the &amp;quot;prickly&amp;quot; Python community&lt;ul&gt;
&lt;li&gt;This is a good thing! Only the best ideas survive the python-dev
gauntlet!&lt;/li&gt;
&lt;li&gt;They do this not because they're mean, but because they care so
much.&lt;/li&gt;
&lt;li&gt;We must have eternal vigilance to prevent unnecessary changes!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A survey of some changes that didn't make it&lt;ul&gt;
&lt;li&gt;The switch/case statement (PEP 3103)&lt;/li&gt;
&lt;li&gt;The &amp;quot;freeze protocol&amp;quot; (PEP 351)&lt;/li&gt;
&lt;li&gt;The &amp;quot;dynamic attribute access&amp;quot; proposal from python-dev, 2007/02&lt;/li&gt;
&lt;li&gt;Many more possibilities await in the rejected PEPs!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;My message to the audience&lt;ul&gt;
&lt;li&gt;Start with a post to python-ideas, please!&lt;/li&gt;
&lt;li&gt;Don't be surprised if you get a negative reaction&lt;/li&gt;
&lt;li&gt;Don't let your fear of a negative reaction stop you from trying,
necessarily&lt;/li&gt;
&lt;li&gt;Do your homework, and be your own worst critic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Larry Hastings</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--the-python-that-wasn--39-t.html</guid><category>coredev</category><category>cpython</category><category>makingsausage</category><category>pycon</category><category>pycon2011</category></item></channel></rss>