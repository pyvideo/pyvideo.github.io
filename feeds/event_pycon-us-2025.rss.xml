<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyCon US 2025</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 May 2025 00:00:00 +0000</lastBuildDate><item><title>Bridging IoT and Machine Learning with Python for Sustainable Agriculture</title><link>https://pyvideo.org/pycon-us-2025/bridging-iot-and-machine-learning-with-python-for-sustainable-agriculture.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Food Insecurity is a major challenge that is ravaging the entire world especially Africa where Agriculture faces critical challenges in productivity, sustainability, and environmental deprivation. This is due to so many factors ranging from climate change to socio-economic factors. To combat this menace, there is need for a robust and scalable system like IoT for weather monitoring and informed decision making for both the policy makers and the farmers to be able to mitigate these challenges. Python, with its rich ecosystem, serves as a bridge between the IoT devices and machine learning, assisting in resolving these challenges and improving decision making in agriculture. This talk explores the use of Python in delivering sustainable agriculture practices. We will look at how data is collected using Python from such IoT devices as soil, weather, and crop sensors. With the help of the Pandas and NumPy and SciPy libraries, we will also show how the collected information is cleaned up and analyzed for further decision making. The session also emphasizes connecting machine learning solutions via TensorFlow, PyTorch, and scikit-learn toward enhancing agriculture. Such examples include estimating when and how much irrigation to apply, potential pest control measures needed, and when and how much pest control measures will be accomplished. Attendees will learn the mechanics of building complete pipelines beginning from IoT data collection to final deployment of machine learning models in cloud or edge devices. Other concerns which we will tackle include the quality of data, compatibility of devices, policies on expansion, and the solutions to these problems. This talk is ideal for researchers, developers, and practitioners interested in leveraging Python to transform agriculture. By the end, attendees will understand how Python can drive innovation, sustainability, and resilience in this critical sector.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iyinoluwa Moyosola Oyelade</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/bridging-iot-and-machine-learning-with-python-for-sustainable-agriculture.html</guid><category>PyCon US 2025</category></item><item><title>Bridging Python and Apache Iceberg: The Power of PyIceberg</title><link>https://pyvideo.org/pycon-us-2025/bridging-python-and-apache-iceberg-the-power-of-pyiceberg.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using tools like PyArrow, Pandas, or Polars makes it easy to work with dataframes. However, as datasets scale to terabytes, managing tables, evolving schemas, and ensuring consistency across tools becomes increasingly complex. Apache Iceberg™, an open table format, addresses these challenges, and, with PyIceberg, seamlessly integrates with your favorite Python-based tools.&lt;/p&gt;
&lt;p&gt;We will start with an introduction to Iceberg and PyIceberg, focusing on the features PyIceberg brings to the Python ecosystem such as schema evolution and transactional guarantees. We will demonstrate how PyIceberg supports interoperability between Iceberg tables and Python-native dataframes like PyArrow and Pandas, using practical examples of creating, querying, and writing to Iceberg tables.&lt;/p&gt;
&lt;p&gt;From these practical examples, we will dive deeper to explore how Iceberg tables evolve during these operations. This includes an in-depth look at Iceberg's file structure—metadata files, manifest lists, and manifests—and how PyIceberg leverages this structure to perform transactional table updates and optimize query planning, ensuring reliable performance at scale.&lt;/p&gt;
&lt;p&gt;Finally, we will discuss PyIceberg’s advanced features, including schema evolution, hidden partitioning, and time travel, which make table management efficient and flexible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rushan Jiang</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/bridging-python-and-apache-iceberg-the-power-of-pyiceberg.html</guid><category>PyCon US 2025</category></item><item><title>Cheese Must Stand: Defending the Python Library Ecosystem in 2025</title><link>https://pyvideo.org/pycon-us-2025/cheese-must-stand-defending-the-python-library-ecosystem-in-2025.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supply chain attacks on Python package infrastructure increased in frequency and sophistication in 2024. As PyPI comes under threat, how can we continue to secure our beloved cheese shop through 2025?&lt;/p&gt;
&lt;p&gt;The 600k packages in PyPI power sensitive infrastructure in almost every critical industry, and it's no surprise that the Python library ecosystem is a target. In 2024 alone, the Ultralytics token compromise and the NP6 combined typosquatting and DLL sideloading attack show the sophistication of these supply chain attacks.&lt;/p&gt;
&lt;p&gt;In the first part of this talk (12 minutes), we'll look back at these 2024 attacks and also consider examples such as the &amp;quot;revival hijack&amp;quot; attack vector and the 2022 dependency confusion attack on PyTorch. In the second portion (12 minutes), we'll dig into some critical developments in this area that have helped to mitigate recent attacks, such as:&lt;/p&gt;
&lt;p&gt;Provenance transparency logs using Sigstore&lt;/p&gt;
&lt;p&gt;Progressive supply chain security levels with SLSA&lt;/p&gt;
&lt;p&gt;Software Bills of Materials (sbomS)&lt;/p&gt;
&lt;p&gt;Artifact scanners such as Grype and Trivy&lt;/p&gt;
&lt;p&gt;We will also briefly discuss specific insights from developing Chainguard’s Guarded Ecosystems for Python, an ambitious alternative package index that rebuilds included packages from scratch. The final takeaway: while mitigations exist for these threats, they're not equally distributed, and we'll point out low hanging fruit for securing projects and infrastructure (3 minutes).&lt;/p&gt;
&lt;p&gt;This talk will be an accessible introduction to an intermediate topic (software supply chain security). Expect some cheesy puns and memes as we deal with this muenster problem—all in excellent taste, of course.&lt;/p&gt;
&lt;p&gt;Patrick recently received best speaker at SwampUP 2024. Srishti and Patrick recently teamed up for PyTorch 2024.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Smyth</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/cheese-must-stand-defending-the-python-library-ecosystem-in-2025.html</guid><category>PyCon US 2025</category></item><item><title>Going faster in all directions at once: How two teams are working together to make Python better for all</title><link>https://pyvideo.org/pycon-us-2025/going-faster-in-all-directions-at-once-how-two-teams-are-working-together-to-make-python-better-for-all.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two separate, but related, projects to make CPython faster are currently happening at the same time. The first, funded by Microsoft, aims to improve the single-threaded performance of CPython (PEP 659, PEP 744). The second, funded by Meta, aims to remove the global interpreter lock so multiple threads can make better use of all processor cores (PEP 703). There are technical challenges to achieving both of these goals simultaneously. We will describe how we collaborate to nonetheless make both projects a success. This includes (a) regular and open lines of communication, (b) sharing the same code for benchmarking, (c) leaving space for each of these projects to develop on their own, and (d) allocating time to directly tackle the intersection of the two problems.&lt;/p&gt;
&lt;p&gt;This talk is intended for a general audience. It will cover technical topics related to language runtimes at a high level, and also include people-management topics related to open source communities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Droettboom</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/going-faster-in-all-directions-at-once-how-two-teams-are-working-together-to-make-python-better-for-all.html</guid><category>PyCon US 2025</category></item><item><title>Keeping up with Python: what makes upgrades hard, and what can we do about it</title><link>https://pyvideo.org/pycon-us-2025/keeping-up-with-python-what-makes-upgrades-hard-and-what-can-we-do-about-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;cPython upgrades can be very challenging. Changes in python version usually mean changes all over the place and managing that can be taxing. Like first party code using deprecated api or Third-party code changing API required to change python versions. Lets go over some bad code examples and ways to improve the experience for everyone. So that maybe in the future upgrades are not so hard.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Fried</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/keeping-up-with-python-what-makes-upgrades-hard-and-what-can-we-do-about-it.html</guid><category>PyCon US 2025</category></item><item><title>Keynote Speaker - Dr. Kari L. Jordan</title><link>https://pyvideo.org/pycon-us-2025/keynote-speaker-dr-kari-l-jordan.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dr. Kari L. Jordan, is a leading figure in data science education, serving as the Executive Director for The Carpentries, a globally recognized nonprofit organization. Upon completing Bachelor's and Master’s degrees in Mechanical Engineering from Michigan Technological University, she pursued a Ph.D. in Engineering Education at The Ohio State University, specializing in interventions to enhance belonging for people of color in STEM. Dr. Jordan's visionary leadership has propelled The Carpentries' mission worldwide, fostering exponential growth and impact across academia, industry, and government sectors. A sought-after speaker and advocate for diversity and inclusion, she champions accessible data literacy and bridges the digital skills gap through strategic initiatives and international collaboration. Dr. Jordan's dedication to empowering individuals and fostering inclusive learning environments has earned her widespread recognition and respect, shaping the future of data literacy for societal betterment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Kari L. Jordan</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/keynote-speaker-dr-kari-l-jordan.html</guid><category>PyCon US 2025</category></item><item><title>Keynote - The Marshall Project</title><link>https://pyvideo.org/pycon-us-2025/keynote-the-marshall-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geoff Hing is a data reporter for The Marshall Project. He has worked as part of investigative, data and news applications teams in a number of newsrooms. At The Arizona Republic, Geoff covered demographic change in the state and contributed data reporting to enterprise projects on water use and prison labor. At APM Reports, he covered voting rights and analyzed police use-of-force data and records as part of a team investigating the efficacy of Tasers. And while at The Chicago Tribune, Geoff helped analyze and visualize police accountability and shooting data.&lt;/p&gt;
&lt;p&gt;Tom Meagher is an investigative data journalist and a senior editor at The Marshall Project, the nonprofit newsroom covering the criminal justice system in the United States. For more than a decade, Tom has used Python, Django, pandas and other libraries in his reporting, including stories on long delays plaguing executions and how prison officers evade accountability for abusing incarcerated people in their custody. As an editor he oversees The Marshall Project's coverage of prisons, jails and the death penalty. Before joining The Marshall Project, he led an interactive team for the Digital First Media newspaper chain and was the data editor at the Star-Ledger in Newark, N.J.. He got his start in journalism covering night cops for a small daily paper in Kansas.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geoff Hing</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/keynote-the-marshall-project.html</guid><category>PyCon US 2025</category></item><item><title>Lightning Talks - Sunday</title><link>https://pyvideo.org/pycon-us-2025/lightning-talks-sunday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;1:15 - Illirik Smirnov - Phone numbers and you: tips, tricks, and footguns
5:15 - Evan Kohilas - What have they done! Why is &lt;cite&gt;re.sub&lt;/cite&gt; changing from Python 3.13?
9:55 - Adam Silkey - &amp;quot;Solving&amp;quot; Python Packaging on Windows, once and for all
12:00 - Jonathan Daniel - Using &lt;cite&gt;uv pip&lt;/cite&gt; to accelerarte Docker
17:00 - Takanori Suzuki - Put the Cat Emoji in your documents!
22:30 - Jing Cao - What I learned going on strike with the NYTimes Tech Guild
28:00 - Michael McCaffrey - Overcoming ADHD and anxiety to achieve long-term goals
32:50 - Joongi Kim - My 10 years with PyCon KR
38:10 - Dave Peck - A whirlwind tour of t-strings!
43:45 - Sheena O'Connell - Python in Africa
48:00 - Conference Announcements&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Illirik Smirnov</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/lightning-talks-sunday.html</guid><category>PyCon US 2025</category></item><item><title>One Year In: Insights and Inspiration from my PSF Journey</title><link>https://pyvideo.org/pycon-us-2025/one-year-in-insights-and-inspiration-from-my-psf-journey.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reflecting on a year at the Python Software Foundation (PSF), I’ll share insights into how the CPython project and its surrounding efforts, as well as the PSF, operate. Learn how anyone can get involved in areas like code, documentation, or PSF projects, and uncover some lesser-known aspects of the PSF’s inner workings. Discover how you can contribute to—from code to documentation—and help shape Python’s future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Coffee</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/one-year-in-insights-and-inspiration-from-my-psf-journey.html</guid><category>PyCon US 2025</category></item><item><title>Phantom Dependencies: is your requirements.txt haunted?</title><link>https://pyvideo.org/pycon-us-2025/phantom-dependencies-is-your-requirementstxt-haunted.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know there’s more than Python code included in Python packages? This might be a surprise, especially if you’ve inspected your list of dependencies and only found exactly what you've pip-installed. There's something else lurking in the dark corners of your virtual environments.&lt;/p&gt;
&lt;p&gt;Modern software systems are complex, graph-like, and difficult to measure by both humans and our tools. Luckily there’s an answer: Software Bill-of-Materials (SBOMs). SBOMs can describe any amalgamation of Python, C, C++, Rust, and JavaScript in your Python application which enables static code analysis, license compliance, vulnerability management, and complying with new security regulations.&lt;/p&gt;
&lt;p&gt;By the end of this talk you'll know what Software Bill-of-Materials documents are, why they are useful, and what you need to do when someone asks for one!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/phantom-dependencies-is-your-requirementstxt-haunted.html</guid><category>PyCon US 2025</category></item><item><title>Processing large JSON files without running out of memory</title><link>https://pyvideo.org/pycon-us-2025/processing-large-json-files-without-running-out-of-memory.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to process a large JSON file in Python, it’s very easy to run out of memory while loading the data, leading to a super-slow run time or out-of-memory crashes. If you're running in the cloud, you can get a machine with more memory, but that means higher costs. How can you process these large files without running out of memory?&lt;/p&gt;
&lt;p&gt;In this talk you'll learn:&lt;/p&gt;
&lt;p&gt;How to measure memory usage.
Some of the reasons why loading JSON uses so much memory.&lt;/p&gt;
&lt;p&gt;Then, you'll learn some of the solutions to this problem:&lt;/p&gt;
&lt;p&gt;Using a more efficient in-memory representation.
Only loading the subset of the data you need.
Streaming parsing, which can parse arbitrarily-large files with a fixed amount of memory.
Using a different file format, like JSON Lines.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Itamar Turner-Trauring</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/processing-large-json-files-without-running-out-of-memory.html</guid><category>PyCon US 2025</category></item><item><title>PSF - Update from our Security Engineers</title><link>https://pyvideo.org/pycon-us-2025/psf-update-from-our-security-engineers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Update from Python Software Foundation Security Engineers, Seth Michael Larson and Mike Fiedler&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seth Michael Larson</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/psf-update-from-our-security-engineers.html</guid><category>PyCon US 2025</category></item><item><title>PyCon US 2025 Closing</title><link>https://pyvideo.org/pycon-us-2025/pycon-us-2025-closing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The closing statement of PyCon US 2025 by PyCon US 2025 Conference Chair, Elaine Wong&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elaine Wong</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/pycon-us-2025-closing.html</guid><category>PyCon US 2025</category></item><item><title>Python Software Foundation Update &amp; Awards</title><link>https://pyvideo.org/pycon-us-2025/python-software-foundation-update-awards.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Update on the work of the Python Software Foundation by PSF Executive Director, Deb Nicholson, followed by Community Service Awards and Distinguished Service Awards. Tania Allard presents the PyLadies Awards ceremony.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deb Nicholson</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/python-software-foundation-update-awards.html</guid><category>PyCon US 2025</category></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pycon-us-2025/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Steering Council is a 5-person elected committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;Presented by: Barry Warsaw, Donghee Na, Gregory P Smith, Pablo Galindo Salgado, (Steering Council member not present: Emily Morehouse)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Warsaw</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/python-steering-council-panel.html</guid><category>PyCon US 2025</category></item><item><title>Reinventing the Wheel: A Community-Driven Roadmap for Python Packaging</title><link>https://pyvideo.org/pycon-us-2025/reinventing-the-wheel-a-community-driven-roadmap-for-python-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem thrives on innovation, adaptability, versatility and a thriving open-source community. Python’s reach continues to evolve, fueled today by custom silicon, variations within CPU architecture families, AI accelerators, and diverse use cases. The Wheel format and packaging tools should adapt and evolve to better support the Python community.&lt;/p&gt;
&lt;p&gt;We’ll review the most potent challenges in the Python packaging ecosystem, and present our roadmap for adapting the Wheel format to enable native support for specialized hardware, the use of non-default Python package indexes, and managing diverse compute backends, all while maintaining the accessibility and simplicity Python is known for.We'll issue a call to action from the open source community, supported by important libraries such as PyTorch, JAX, Scikit-learn, etc. This is a unified roadmap for the future of Python packaging, and present published and draft PEPs.
Description&lt;/p&gt;
&lt;p&gt;Managing software stacks in complex compute environments is difficult. Often the standard wheel tags aren’t sufficient to describe your exact compute environment. These are common problems for many users, are often difficult to remedy, and even more difficult to make reproducible, easy to use, and composable.&lt;/p&gt;
&lt;p&gt;We propose to “Re-Invent the Wheel” and have founded the “Wheel Next” interest group as an open source collaboration among different users, companies, packages, and maintainers that are working together on solutions to these difficult problems. We are actively publishing PEPs that extend the Wheel format, metadata, packaging tooling, and PyPI standards, and contribute to projects that help with various aspects of the problem space, including installers and indexes.&lt;/p&gt;
&lt;p&gt;In addition, we’ll give a call to action for everyone interested in joining the initiative and helping us evolve and build the packaging ecosystem the Python world needs today and in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Dekhtiar</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/reinventing-the-wheel-a-community-driven-roadmap-for-python-packaging.html</guid><category>PyCon US 2025</category></item><item><title>The past, present, and future of virtual environments</title><link>https://pyvideo.org/pycon-us-2025/the-past-present-and-future-of-virtual-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Virtual environments have become an essential part of the Python developer experience, but recent tools provide workflows where virtual environments are no longer the center of user interactions.&lt;/p&gt;
&lt;p&gt;This talk explores the evolution of virtual environments, from their originating motivations and the role they serve today to a vision for the future, with a particular focus on how virtual environments are becoming automated, hidden, and disposable.&lt;/p&gt;
&lt;p&gt;Virtual environments were introduced in 2004. We’ll briefly discuss the history of the tools built to manage virtual environments. We’ll talk about the differences between imperative and declarative environment management. Then, we’ll dive into the user experiences powered by automating management of environments, using uv as a primary example.&lt;/p&gt;
&lt;p&gt;Finally, we’ll discuss limitations of the existing tooling and how they may be overcome in the future, such as, improving the IDE experience for scripts with inline metadata, locking build requirements, and using declarative interfaces for global environments.&lt;/p&gt;
&lt;p&gt;Some prior knowledge of virtual environments and Python packaging will be necessary to reason about the broader questions posed, but the talk will attempt to give the necessary background — deep Python knowledge will not be needed. The talk will be focused on user experience and abstractions rather than implementation details.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zanie Blue</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/the-past-present-and-future-of-virtual-environments.html</guid><category>PyCon US 2025</category></item><item><title>Unlearning SQL</title><link>https://pyvideo.org/pycon-us-2025/unlearning-sql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some people find SQL to be a helpful model for data analysis. They can also find themselves frustrated because some things that seem clear in SQL can seem difficult to restate in Python.&lt;/p&gt;
&lt;p&gt;We'll look at some of the SQL query design patterns in detail. With this, we can formulate Python functions that have the same behavior without the overheads of using an actual database. Even something like SQLite3 involves overheads that can be avoided.&lt;/p&gt;
&lt;p&gt;To keep the talk short, we'll avoid a number of more nuanced SQL features. We'll cover the principle elements of a Select statement including the Group by and Having clauses. This isn't a tutorial, and the audience needs to be comfortable with generator expressions and list comprehensions.&lt;/p&gt;
&lt;p&gt;The concept is to use SQL concepts for initial design, but pivot to Python for a robust implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/unlearning-sql.html</guid><category>PyCon US 2025</category></item><item><title>A new safe external debugger interface for CPython</title><link>https://pyvideo.org/pycon-us-2025/a-new-safe-external-debugger-interface-for-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to debug a Python application in production without stopping it? While tools like GDB make this straightforward for C/C++, Python developers face unique challenges when attaching debuggers to live processes. This talk introduces PEP 768, a new proposal for Python 3.14 that adds a safe, zero-overhead debugging interface to CPython.&lt;/p&gt;
&lt;p&gt;We'll explore how the current landscape forces debugging tools to use unsafe methods that can crash interpreters and corrupt memory. Then, we'll detail how PEP 768 solves these problems by introducing a cooperative debugging protocol that works with the interpreter rather than against it.&lt;/p&gt;
&lt;p&gt;You'll learn why attaching debuggers to Python processes is uniquely challenging, how PEP 768 enables safe debugging through interpreter cooperation, the technical details of the zero-overhead implementation, real-world applications, including live process attachment for pdb and all about the security considerations and safeguards.&lt;/p&gt;
&lt;p&gt;This talk will be particularly valuable for tool developers, system administrators, and anyone interested in Python internals or debugging techniques. You'll walk away understanding the challenges of live process debugging and how PEP 768 elegantly solves them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/a-new-safe-external-debugger-interface-for-cpython.html</guid><category>PyCon US 2025</category></item><item><title>Adventures in Account Recovery, PEP 541 &amp; More As Inaugural PyPI Support Specialist</title><link>https://pyvideo.org/pycon-us-2025/adventures-in-account-recovery-pep-541-more-as-inaugural-pypi-support-specialist.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI (Python Packaging Index) is used by over 800,000 users. With its ever growing user base and popularity, comes the need for making sure the PyPI ecosystem is secure for all users all without constraining ease of use. Part pep talk (pun intended!), part presentation, this talk plans to discuss some of the challenges that were tackled in terms of bringing the various PyPI support backlogs current in both account recovery and PEP 541 as well as other support requests. This talk will also discuss process improvements made, lessons learned, and what’s in store in the future for PyPI support.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maria Ashna</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/adventures-in-account-recovery-pep-541-more-as-inaugural-pypi-support-specialist.html</guid><category>PyCon US 2025</category></item><item><title>Attestations: a new generation of signatures on PyPI</title><link>https://pyvideo.org/pycon-us-2025/attestations-a-new-generation-of-signatures-on-pypi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;End-to-end signing and verification is one of the hardest technical and social challenges in open source packaging: it rests at the fault lines of error- and misuse-prone cryptography, long-term secret management, and identity/trust bootstrapping. These challenges have stymied past attempts to do large-scale end-user signing in the Python ecosystem, including PyPI's former (now disabled) support for PGP signature uploads.&lt;/p&gt;
&lt;p&gt;Over the past year, PyPI has designed, developed, and deployed a new approach to package signing, one that aims to break the iron triangle of end-user signing: digital attestations, as standardized in PEP 740.&lt;/p&gt;
&lt;p&gt;This talk will cover the architectural details of attestations, how attestations were implemented on PyPI and on the client (uploading side), their security properties (including transparency) and advantages, as well as how PyPI was able to enable signing by default for a large swath of the ecosystem without requiring maintainers to change anything about their packaging processes. The talk will also cover the future of attestations, including pieces of the puzzle that are currently missing (like large-scale verification of attestations by parties other than PyPI itself).&lt;/p&gt;
&lt;p&gt;The audience is expected to have an intermediate familiarity with Python packaging, including PyPI. No specific familiarity with cryptography is required. Audience members will leave the talk with an improved understanding of the challenges latent in end-user signing, how PEP 740's design and PyPI's implementation overcome those challenges, and how they can both produce and consume attestations today.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Woodruff</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/attestations-a-new-generation-of-signatures-on-pypi.html</guid><category>PyCon US 2025</category></item><item><title>Cython in Practice: A Deep Dive into Legacy C Integration and Debugging</title><link>https://pyvideo.org/pycon-us-2025/cython-in-practice-a-deep-dive-into-legacy-c-integration-and-debugging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Cython in Practice, we'll go over the benefits and challenges of utilizing Cython as a way to utilize legacy C/C++ programs and libraries within Python applications. Cython's capabilities permit users to use Python-like syntax to integrate with existing C code and build their own library and program interfaces accessible from both C and Python. This talk will cover essential tools and workflows for building with Cython and what the interface looks like for integrating with legacy C code, and how to build and package a Cython extension with Poetry and uv.&lt;/p&gt;
&lt;p&gt;However, utilizing the full powers of Cython is not without its own set of challenges. The presentation will also provide practical insights into common errors encountered during build and runtime phases while developing in Cython. Attendees will learn how to navigate these issues, using a detailed account of the specific obstacles faced when wrapping a legacy C library for Python via Cython. We will discuss different memory management and debugging tools, with a focus on Valgrind, and how to utilize these tools during development in Cython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maryanne Wachter</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/cython-in-practice-a-deep-dive-into-legacy-c-integration-and-debugging.html</guid><category>PyCon US 2025</category></item><item><title>Django Asíncrono: Desbloqueando el Poder de la Programación Async</title><link>https://pyvideo.org/pycon-us-2025/django-asincrono-desbloqueando-el-poder-de-la-programacion-async.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Con la llegada de Django 3.1, el framework dio un gran salto hacia el futuro al integrar soporte para asincronismo. Pero, ¿qué significa esto para quienes desarrollamos aplicaciones web? En esta charla, te voy a enseñar cómo usar las herramientas de asincronismo en Django para construir aplicaciones más rápidas y eficientes.&lt;/p&gt;
&lt;p&gt;Empezaremos con una breve introducción a asyncio, la base del asincronismo en Python. ¿Qué son los event loops? ¿Qué hacen async y await? Si nunca has trabajado con código asíncrono, no te preocupes, aquí lo explicaremos de forma simple.&lt;/p&gt;
&lt;p&gt;Después, entraremos directo en el mundo de Django: * Escribiremos vistas asíncronas (async def) y exploraremos casos prácticos donde el asincronismo realmente marca la diferencia. * Compararemos el rendimiento entre vistas síncronas y asíncronas mediante pruebas reales, mostrando cómo manejar múltiples peticiones a APIs externas de manera eficiente. * Veremos cómo Django adopta la convención de agregar una &amp;quot;a&amp;quot; a los métodos asíncronos del ORM (como aget, afirst, alast) para diferenciarlos de sus versiones síncronas. * Discutiremos las limitaciones actuales del ORM de Django (spoiler: sigue siendo síncrono) y cómo manejarlas en proyectos modernos.&lt;/p&gt;
&lt;p&gt;Para cerrar, incluiré una demostración práctica y ejemplos de código reales que puedes llevarte a casa.&lt;/p&gt;
&lt;p&gt;Esta charla está pensada para desarrolladores de nivel intermedio que quieran llevar sus proyectos Django al siguiente nivel y entender cómo el asincronismo puede transformar la manera en que construimos aplicaciones web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luis Martinez</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/django-asincrono-desbloqueando-el-poder-de-la-programacion-async.html</guid><category>PyCon US 2025</category></item><item><title>Elastic Generics: Flexible Static Typing with TypeVarTuple and Unpack</title><link>https://pyvideo.org/pycon-us-2025/elastic-generics-flexible-static-typing-with-typevartuple-and-unpack.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since Python 3.5, generic tuples can be parameterized as either orderings of component types (e.g. tuple[int, str]) or unbound sequences of a single type (e.g. &lt;tt class="docutils literal"&gt;tuple[float, &lt;span class="pre"&gt;...]&lt;/span&gt;&lt;/tt&gt;). Yet sometimes we need both: for example, a tuple that starts with an int and a str and follows with zero or more floats might describe a row in a dataset that starts with identifiers and follows with a variable number of observations. While we might want to define a generic Record class that can be elastically parameterized in this manner, doing so was not practical until the introduction of &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Unpack&lt;/tt&gt; in Python 3.11.&lt;/p&gt;
&lt;p&gt;With &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt;, a generic &lt;tt class="docutils literal"&gt;Record&lt;/tt&gt; class can be made concrete as &lt;tt class="docutils literal"&gt;Record[int, str]&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Record[int, str, float]&lt;/tt&gt;, or even &lt;tt class="docutils literal"&gt;Record[int, str, *tuple[float, &lt;span class="pre"&gt;...]]&lt;/span&gt;&lt;/tt&gt;: the same class can be parameterized as requiring two types, three types, or required int and str types followed by zero or more float types (as given with the Unpack notation &lt;tt class="docutils literal"&gt;*tuple[float, &lt;span class="pre"&gt;...]&lt;/span&gt;&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;This presentation will introduce &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Unpack&lt;/tt&gt;. Starting with annotated tuple types, the flexible, expressive range of mixture between fixed and unbound types will be demonstrated with mypy validation. Next, a variadic generic class, Record, will demonstrate the benefits of such elastic typing.&lt;/p&gt;
&lt;p&gt;Finally, a compelling application of &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt; will be demonstrated. While DataFrames are widely used, only the StaticFrame library, leveraging &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt;, offers a comprehensively generic DataFrame. DataFrames have variable numbers of columns, each sometimes a different type; further, while DataFrames might have tens or hundreds of columns, it is common for such datasets to have a fixed number of heterogeneously typed columns followed by a variable number of uniformly typed columns. With &lt;tt class="docutils literal"&gt;TypeVarTuple&lt;/tt&gt;, this type of flexible DataFrame typing is now possible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Ariza</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/elastic-generics-flexible-static-typing-with-typevartuple-and-unpack.html</guid><category>PyCon US 2025</category></item><item><title>Finding 2.0</title><link>https://pyvideo.org/pycon-us-2025/finding-20.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Note: This video contains discussion and images about personal experiences with cancer treatment.&lt;/p&gt;
&lt;p&gt;In the world of library development, achieving version 2.0 often takes years, if it's achieved at all. Surprisingly, nearly 90% of packages published to PyPI using semantic versioning have a major release number of less than two. What makes reaching this milestone so elusive?&lt;/p&gt;
&lt;p&gt;If we applied software versioning to our lives, what version would we give ourselves? Perhaps in our formative years as students, we'd be a part of a 0.x series, and as we establish careers and become self-sufficient, we might progress to a 1.x scheme. But do we settle there?&lt;/p&gt;
&lt;p&gt;Just like software libraries, our lives require maintenance, and despite our best intentions, hacks and workarounds inevitably infiltrate our routines. As these multiply and compound, our health can suffer. Do we wait for disaster to strike? Or, can we take a proactive approach in not only addressing problem areas but also striving for more?&lt;/p&gt;
&lt;p&gt;Together, we'll explore certain risks to our wellbeing inherent to our profession as software developers: sedentary lifestyles, long work hours, and social isolation, and how we can plan and design our next major release for success.&lt;/p&gt;
&lt;p&gt;&amp;quot;Finding 2.0&amp;quot; is an invitation to reimagine what's possible across life areas. Whether facing health struggles, burnout, or feeling stuck in a rut, this talk provides practical insights and actionable steps for rewriting the code of your life and embracing a future of health and fulfillment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Gibbons</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/finding-20.html</guid><category>PyCon US 2025</category></item><item><title>GPU Programming in Pure Python</title><link>https://pyvideo.org/pycon-us-2025/gpu-programming-in-pure-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GPU programming can be scary but doesn’t need to be. With the CUDA Core Libraries and CUDA Python object model, you have a friendly interface to get you started with GPU acceleration.&lt;/p&gt;
&lt;p&gt;In this example-driven talk, we'll begin with a general discussion of the CUDA model and how to manage accelerator devices in Python with cuda.core. Next, we'll teach you how to launch work and manage memory. Then, you'll learn how to use parallel algorithms with cuda.parallel, write your own kernels that leverage cooperative algorithms with cuda.cooperative, and integrate seamlessly with accelerated libraries such as cuDNN and cuBLAS.&lt;/p&gt;
&lt;p&gt;We'll look at a variety of parallel examples, from counting words, to implementing softmax, to a full blown machine learning demo.&lt;/p&gt;
&lt;p&gt;By the time the talk is over, you'll be ready to start accelerating your Python code with GPUs!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bryce Adelstein Lelbach</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/gpu-programming-in-pure-python.html</guid><category>PyCon US 2025</category></item><item><title>How to build a cross-platform graphical user interface with Python</title><link>https://pyvideo.org/pycon-us-2025/how-to-build-a-cross-platform-graphical-user-interface-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to build a user interface for your Python code, many guides will tell you that your only options are to use the command line, or wrap your code in a web interface. However, there is another option - building a native GUI interface. In fact for some use cases, a GUI app may be your only option.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn how to build and run a graphical user interface (GUI) that can run on your desktop, on your phone, or in a browser. You'll learn how you can use the BeeWare suite of tools to bootstrap a new GUI project, develop a GUI interface, and deploy that app to multiple desktop and mobile platforms, without making any code changes. You'll learn how to access device hardware like GPS and cameras; and you'll learn how to distribute your application - including all runtimes and third-party libraries - to others. Lastly, you'll get a brief introduction to how you can access native platform APIs that don't have a Python API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/how-to-build-a-cross-platform-graphical-user-interface-with-python.html</guid><category>PyCon US 2025</category></item><item><title>Iterando de forma eficiente en Python con Itertools</title><link>https://pyvideo.org/pycon-us-2025/iterando-de-forma-eficiente-en-python-con-itertools.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python viene con muchas herramientas poderosas “incluidas de fábrica”, y entre ellas se encuentran sus estructuras de bucle. Pero usarlas correctamente no siempre es tan sencillo como parece. En esta charla exploraremos el módulo itertools, una colección de funciones diseñadas para que escribas bucles más inteligentes, no más complejos. A través de ejemplos prácticos y casos del mundo real, veremos cómo aprovechar itertools para escribir código más eficiente y expresivo. Al finalizar, tendrás a tu disposición un conjunto de herramientas que te ayudarán a dominar tus bucles en Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andres Pineda</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/iterando-de-forma-eficiente-en-python-con-itertools.html</guid><category>PyCon US 2025</category></item><item><title>Keynote Speaker - Lynn Root</title><link>https://pyvideo.org/pycon-us-2025/keynote-speaker-lynn-root.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lynn Root is a Staff Engineer at Spotify and an adjunct professor at Columbia University's Graduate School of Engineering. She is a seasoned speaker on building and maintaining distributed systems &amp;amp; developer tooling, and is a tech lead on Spotify's ML/AI platform. She likes to refer to herself as an &amp;quot;engineer's engineer&amp;quot;.&lt;/p&gt;
&lt;p&gt;Lynn has been active in the Python community since 2012. She is the Chair of the PyLadies Global Council, a former Director and current fellow of the Python Software Foundation, and a global leader of diversity in the Python community. She is the author &amp;amp; maintainer (when she can) of the &lt;cite&gt;interrogate&lt;/cite&gt; package.&lt;/p&gt;
&lt;p&gt;When her hands are not on a keyboard, they are usually fussing with houseplants, holding a bass guitar, or trying to finish one of her many knitting projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/keynote-speaker-lynn-root.html</guid><category>PyCon US 2025</category></item><item><title>Looking At Audio</title><link>https://pyvideo.org/pycon-us-2025/looking-at-audio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's a few popular ways in which we can &amp;quot;see&amp;quot; sound. But what do you actually see on those visualizations?&lt;/p&gt;
&lt;p&gt;In this talk, we'll be building short PyScript programs utilizing WebGL for attractive visualization display. We'll cover two fundamental methods (amplitude measurement and frequency spectrum display) and the many fun ways in which those two can be used. We'll start by looking at simple sounds with offline batch processing to represent the audio graphically. We'll finish with realtime audio visualization.&lt;/p&gt;
&lt;p&gt;Note: The opinions and perspectives within this video should not be considered official stances of the Python Software Foundation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/looking-at-audio.html</guid><category>PyCon US 2025</category></item><item><title>Más allá de Try-Except: La frontera de Python en el manejo de errores con Monadas y Railway Magic</title><link>https://pyvideo.org/pycon-us-2025/mas-alla-de-try-except-la-frontera-de-python-en-el-manejo-de-errores-con-monadas-y-railway-magic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quiero que lleves tus habilidades de manejo de errores en Python a un nivel superior, haciendo que tu código sea más limpio, mantenible y menos propenso a fallos, incluso a medida que crezca en complejidad.&lt;/p&gt;
&lt;p&gt;Las estrategias tradicionales de manejo de excepciones en Python, como LBYL (&amp;quot;Look Before You Leap&amp;quot;) y EAFP (&amp;quot;Easier to Ask for Forgiveness than Permission&amp;quot;), funcionan bien en contextos simples, pero rápidamente se vuelven difíciles de manejar a medida que las bases de código crecen. Esto resulta en problemas de legibilidad, complejidad innecesaria y riesgo de errores no manejados adecuadamente, lo cual puede llevar a fallos inesperados.&lt;/p&gt;
&lt;p&gt;En mi charla, &amp;quot;Más allá de Try-Except: La frontera de Python en el manejo de errores con Monads y Railway Magic&amp;quot;, exploraremos un enfoque innovador para la gestión de errores en Python. Utilizaremos los monads, específicamente con la Results Library, y el método Railway-Driven Development, que nos permitirá adoptar conceptos de programación funcional para construir una estructura sólida y predecible para el manejo de errores.&lt;/p&gt;
&lt;p&gt;A través de ejemplos prácticos, demostraré cómo este enfoque facilita la integración de características avanzadas de Python, como pattern matching, haciendo que la gestión de errores sea más clara y eficiente. Al final de la charla, tendrás las herramientas necesarias para implementar un sistema de manejo de errores más robusto y mantenible en tus propios proyectos, superando las limitaciones de las prácticas tradicionales y mejorando significativamente la calidad de tu código.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Arias</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/mas-alla-de-try-except-la-frontera-de-python-en-el-manejo-de-errores-con-monadas-y-railway-magic.html</guid><category>PyCon US 2025</category></item><item><title>Metaclasses Demystified</title><link>https://pyvideo.org/pycon-us-2025/metaclasses-demystified.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Metaclasses are among the deep magic of Python, which most developers will ever need. As Python pushes into more and more spaces, and becomes responsible for increasingly complex software, there's a need for elegant solutions to some specific architectural problems; metaclasses are a part of some of those solutions.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn all about the enigmatic metaclass, and where this often esoteric part of Python actually can come in handy. Then, we'll wrap up by ensuring you're attacking the right problems before reaching for this oft-alluring piece of arcana.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason C. McDonald</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/metaclasses-demystified.html</guid><category>PyCon US 2025</category></item><item><title>Missing the Apex: Predicting F1 Races with Python</title><link>https://pyvideo.org/pycon-us-2025/missing-the-apex-predicting-f1-races-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Inspired by, and iterates upon, a paper published in an academic journal, this talk walks throughs through how I used Python to predict Fomula 1 (F1) races. Specifically we talk about the specific challenges related to web scraper, data wrangling, and statistical analysis to try and predict the outcome of F1 races by the evolution of track data over the weekend. Whether beginner or intermediate, or have no familiarity with F1 there's something in here for everyone to learn how to apply Python to their projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Weissbock</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/missing-the-apex-predicting-f1-races-with-python.html</guid><category>PyCon US 2025</category></item><item><title>NLP para la preservación del lenguaje indígena Quechua</title><link>https://pyvideo.org/pycon-us-2025/nlp-para-la-preservacion-del-lenguaje-indigena-quechua.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El quechua, hablado por más de 2.8 millones de personas en Bolivia, es uno de los idiomas indígenas más importantes del país. Sin embargo, enfrenta serias amenazas debido a la modernización y la globalización. Esta charla explora cómo las técnicas de Procesamiento de Lenguaje Natural (NLP) pueden ser una herramienta crucial para la revitalización y preservación del quechua, asegurando su uso en el ámbito digital y su transmisión a futuras generaciones.
Contenido principal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Contexto y relevancia: En Bolivia, el 21% de la población habla quechua, lo que lo convierte en un idioma vital para la cultura del país. Sin embargo, el uso del quechua está en declive, especialmente entre los jóvenes.&lt;/p&gt;
&lt;p&gt;Datos lingüísticos en quechua: Existen pocos recursos digitales y corpus disponibles en quechua, lo que dificulta la creación de tecnologías lingüísticas. Sin embargo, algunos esfuerzos están comenzando a surgir en la comunidad.&lt;/p&gt;
&lt;p&gt;Desafíos técnicos: Los modelos preentrenados para lenguas de bajo recurso como el quechua siguen siendo un reto debido a la falta de datos estructurados y herramientas de procesamiento.
Impacto social y cultural: La preservación del quechua a través de tecnologías NLP puede tener un impacto significativo en comunidades bolivianas, promoviendo el acceso a la información en su lengua materna y mejorando la visibilidad de su cultura.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Objetivo:&lt;/p&gt;
&lt;p&gt;Inspirar a la comunidad de Python y NLP a participar en proyectos que utilicen la tecnología para revitalizar el quechua en Bolivia, un idioma con una rica herencia cultural que necesita urgentemente soluciones digitales para su preservación y expansión.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carla Marcela Florida Román</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/nlp-para-la-preservacion-del-lenguaje-indigena-quechua.html</guid><category>PyCon US 2025</category></item><item><title>Notes, Groups and Stars: exceptional new features of Python 3.11!</title><link>https://pyvideo.org/pycon-us-2025/notes-groups-and-stars-exceptional-new-features-of-python-311.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notes, Groups, and Stars aren't just for concerts - they're also exception-ally useful features for error handling, new in Python 3.11!&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore a neglected corner of Python: exceptions and error handling! What would we like Python to do for us, when our programs do something we didn't expect? How can we help other programmers understand failures in our code?&lt;/p&gt;
&lt;p&gt;We'll take a broad view, starting from fundamentals like exceptions vs return values, before zooming through a history of tracebacks and chaining, and arriving at the glorious present with .add_note(), ExceptionGroup, and except*. You'll leave not just educated but enthused and excited - but perhaps even a ten-ex except-star developer!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zac Hatfield-Dodds</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/notes-groups-and-stars-exceptional-new-features-of-python-311.html</guid><category>PyCon US 2025</category></item><item><title>Painting with Python</title><link>https://pyvideo.org/pycon-us-2025/painting-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll cover the basics of making visual algorithmic art with Python using only basic dependencies (like Python Image Library / Pillow). No GPU acceleration. No AI. Just simple vanilla Python code. Come learn the basics from a hacker-turned-artist who repurposed math he learned doing IoT radio hacking to do visual art.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caleb Madrigal</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/painting-with-python.html</guid><category>PyCon US 2025</category></item><item><title>Program Your Own Computer in Python</title><link>https://pyvideo.org/pycon-us-2025/program-your-own-computer-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python to write code for web applications, scientific applications, and data analysis is extremely popular. Those of us who write that sort of code are typically sitting in front of desktop or laptop computers for 6-10 hours a day. And yet, while we may want those machines to do certain tasks for us, for some reason it rarely occurs to many of us to use Python to solve problems on those computers rather than the ones in the cloud.&lt;/p&gt;
&lt;p&gt;Perhaps it's just because the APIs for controlling them are so different, and it seems difficult to get started.&lt;/p&gt;
&lt;p&gt;In this talk I will explain how to use Python to integrate with your desktop environment; how to schedule tasks, schedule notifications, and script the applications you already use. We'll have a focus on macOS for demonstration purposes, but will also including pointers to similar tools for desktop Linux and Windows.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glyph</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/program-your-own-computer-in-python.html</guid><category>PyCon US 2025</category></item><item><title>Pruebas E2E automatizadas con Playwright y Python</title><link>https://pyvideo.org/pycon-us-2025/pruebas-e2e-automatizadas-con-playwright-y-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En un mundo donde necesitamos garantizar la calidad de nuestro producto, automatizar pruebas para poder seguir flujos de trabajo en ambientes ágiles es fundamental.&lt;/p&gt;
&lt;p&gt;En esta charla de 30 minutos, te invito a conocer el universo de Playwright combinado con el poder de Python, la cual es una herramienta con mucha proyección en el mercado.&lt;/p&gt;
&lt;p&gt;Comenzaremos explorando los fundamentos de Playwright, desvelando por qué lo hace tan único, cómo podemos instalarlo y automatizar de manera sencilla un caso de prueba de la mano con PyTest.&lt;/p&gt;
&lt;p&gt;Exploraremos juntos las opciones que nos da Playwright para la posibilidad de ejecutar nuestras pruebas en múltiples navegadores, tomar capturas de pantalla, video y emular vistas móviles para probar diseños responsivos.&lt;/p&gt;
&lt;p&gt;Pero no terminaremos ahí, exploraremos cómo potenciar tus scripts de prueba con el patrón de diseño &amp;quot;Page Object Model&amp;quot;, una práctica que mejora la mantenibilidad del código y facilita la colaboración en los equipos de desarrollo. Además, cómo podemos consumir información por medio de los &amp;quot;fixtures&amp;quot; facilitados por PyTest.&lt;/p&gt;
&lt;p&gt;Ya seas un ingeniero de QA o un desarrollador buscando mejorar la calidad de tus proyectos, esta charla te proporcionará herramientas prácticas y conocimientos esenciales para agregar pruebas E2E eficientes en tu flujo de desarrollo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joan Alejandro Esquivel Montero</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/pruebas-e2e-automatizadas-con-playwright-y-python.html</guid><category>PyCon US 2025</category></item><item><title>Reduce the environmental footprint of your Python programs</title><link>https://pyvideo.org/pycon-us-2025/reduce-the-environmental-footprint-of-your-python-programs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we witness the cutting-edge developments in Artificial Intelligence, the carbon footprint of our code base can no longer be brushed off as insignificant. In every respect, as developers, we have a responsibility to take the lead in implementing sustainable coding practices. This presentation explores Python techniques that can be embedded in one’s code that will help reduce cycles, lower resource dependencies, and decrease energy usage without degrading performance.&lt;/p&gt;
&lt;p&gt;More than just tech tips, this talk is going to focus on the why—looking into the expanding CO2 of the AI and tech space, what it means for our planet, and how it points to the importance of responsible development. The audience will discover that simple but conscious changes in one’s handy work, such writing better algorithms, datamodelling, and using greener tools can somehow make a positive impact to the environment.&lt;/p&gt;
&lt;p&gt;This talk is not only about utilizing new technologies correctly, it is also about changing the perception of our field. Let’s be responsible — let’s develop projects that will not harm the environment. Together, we can progress and adapt our development processes to the current climate change crisis – the one in which development and innovative efforts go hand in hand with taking care of the environment. So let’s code with purpose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Apoorv Garg</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/reduce-the-environmental-footprint-of-your-python-programs.html</guid><category>PyCon US 2025</category></item><item><title>Scale Smarter, Not Harder, with cuPyNumeric</title><link>https://pyvideo.org/pycon-us-2025/scale-smarter-not-harder-with-cupynumeric.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many data and simulation scientists use NumPy for its ease of use and good performance on CPU. This approach works well for single-node tasks, but scaling to handle larger datasets or more resource-intensive computations introduces significant challenges. Not to mention, using GPUs requires another level of complexity. We present the cuPyNumeric library. cuPyNumeric gives developers the same familiar NumPy interface, but seamlessly distributes work across CPUs and GPUs.&lt;/p&gt;
&lt;p&gt;A compelling example when scaling is necessary is when scientists at the SLAC National Accelerator Laboratory need to process a large amount of data within a fixed time window, called beam time. The full dataset generated during experiments is too large to be processed on a single CPU. Additionally, the code often must be modified during the beam time to adapt to changing experimental needs. Being able to use NumPy syntax rather than lower level distributed computing libraries makes these changes quick and easy, allowing researchers to focus on conducting more experiments rather than debugging or optimizing code.&lt;/p&gt;
&lt;p&gt;cuPyNumeric is designed to be a drop-in replacement to NumPy. Built on top of task-based distributed runtime from Stanford University, it automatically parallelizes NumPy APIs across all available resources, taking care of data distribution, communication, asynchronous and accelerated execution of compute kernels on both GPUs or multi-core CPUs. In addition, cuPyNumeric can be integrated with other popular Python libraries like SciPy, matplotlib, Jax. With cuPyNumeric, SLAC scientists successfully ran their data processing code distributed across multiple nodes and GPUs, processing the full dataset with a 6x speed-up compared to the original single-node implementation.&lt;/p&gt;
&lt;p&gt;In this talk we showcase the productivity and performance of cuPyNumeric library covering some detail on its implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Irina Demeshko</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/scale-smarter-not-harder-with-cupynumeric.html</guid><category>PyCon US 2025</category></item><item><title>Scaling the Mountain: A Framework for Tackling Large-Scale Tech Debt</title><link>https://pyvideo.org/pycon-us-2025/scaling-the-mountain-a-framework-for-tackling-large-scale-tech-debt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing tech debt in large legacy codebases isn’t just a challenge—it’s an ongoing battle that can drain developer productivity and morale. In this talk, I’ll introduce a Python-powered Tech Debt Framework bar-raiser designed to help teams tackle even the most daunting tech debt problems with 100,000+ violations. This open-source framework empowers developers and engineering leaders by: - Tracking Progress: Measure and visualize the state of tech debt and trends over time. - Recognizing Contributions: Celebrate developer efforts and foster accountability with contribution leaderboards and automated shoutouts. - Automating Fixes: Save countless hours with codemods that address repetitive debt patterns, allowing developers to focus on higher-priority work.&lt;/p&gt;
&lt;p&gt;Through real-world case studies, I’ll showcase how we: - Reduced 70,000+ pyright-ignore annotations to boost type-checking coverage from 60% to 99.5%. - Converted a monolithic sync codebase to async, addressing blocking IO issues and adopting asyncio effectively.&lt;/p&gt;
&lt;p&gt;Attendees will gain actionable strategies for scaling Python automation, fostering team buy-in, and systematically reducing tech debt across massive codebases. Whether you’re dealing with type errors, legacy dependencies, or async transitions, this talk provides a roadmap for creating cleaner, more maintainable code at scale.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jimmy Lai</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/scaling-the-mountain-a-framework-for-tackling-large-scale-tech-debt.html</guid><category>PyCon US 2025</category></item><item><title>Selenium with Python using Robot Framework</title><link>https://pyvideo.org/pycon-us-2025/selenium-with-python-using-robot-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring software quality is more important than ever. In this talk, we'll explore how to harness the power of Selenium with Python alongside the Robot Framework to create robust and efficient automated tests. As QA engineers, we face numerous challenges in delivering quality software under tight deadlines, and integrating these tools can streamline our testing processes. I'll start by understanding the fundamentals of Selenium and Robot Framework, then walk through setting up our environment and writing our first test suite together. We'll share best practices for maintaining our test scripts and discuss real-world applications demonstrating how these tools can enhance collaboration and improve software quality. By the end of the session, we’ll be equipped with the knowledge and resources to elevate our automation strategies and foster a quality culture in our development teams.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Monica Oyugi</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/selenium-with-python-using-robot-framework.html</guid><category>PyCon US 2025</category></item><item><title>Supercharge your Python library using AST parsing</title><link>https://pyvideo.org/pycon-us-2025/supercharge-your-python-library-using-ast-parsing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The primary goal of developers using the Python/C API is to increase the performance of their Python code. Often, this is done by executing a C function which has been compiled into machine code to bypass the Python interpreter. However, between a user’s Python code and the invocation of the C function, we can squeeze out even more performance. How, you ask?&lt;/p&gt;
&lt;p&gt;We can leverage AST parsing with Python’s standard library “ast” module to modify the syntax of the code. In this talk, we show some tricks to transform the Python AST for optimized runtime performance using the C API. These aren’t just theoretical, either! Each example is taken from CSP, an open-source computation graph library which heavily uses the Python/C API.&lt;/p&gt;
&lt;p&gt;This talk is meant for an advanced audience which has familiarity with the Python “ast” module as well as the Python/C API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Glustein</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/supercharge-your-python-library-using-ast-parsing.html</guid><category>PyCon US 2025</category></item><item><title>The Chaotic locals() and How We Fixed It</title><link>https://pyvideo.org/pycon-us-2025/the-chaotic-locals-and-how-we-fixed-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Historically, Python stored local variables in a dict, which was convenient and consistent. Users can use locals() to get the same dict Python is using for the local variables. As Python evolves, local variables were moved to the frame stack to improve performance, which made it invisible from Python code. However, locals() was kept because we still need a way to access some or all of the local variables in a frame.&lt;/p&gt;
&lt;p&gt;This became chaotic when we try to change the local variables through the dict - which is a common requirement for something like a debugger. What could possibly go wrong? Is the update remembered? Could it work with exec()? Will a random read in your code bites you? How can we reliably update the value of a local variable in a debugger?&lt;/p&gt;
&lt;p&gt;Well the short answer is - we can't, not until PEP 667.&lt;/p&gt;
&lt;p&gt;This talk will be about how we fixed the chaos in PEP 667 and what's the modern way to deal with local variables in a debugger.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tian Gao</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/the-chaotic-locals-and-how-we-fixed-it.html</guid><category>PyCon US 2025</category></item><item><title>The Zen of Polymorphism: Choosing between isinstance(), methods, and @singledispatch</title><link>https://pyvideo.org/pycon-us-2025/the-zen-of-polymorphism-choosing-between-isinstance-methods-and-singledispatch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a multi-paradigm language that embraces both functional programming and object-oriented programming (OOP) approaches to writing code. OOP is especially popular, in large part due to how it enables polymorphism (for example, calling speak() on a Dog object returns &amp;quot;woof&amp;quot;, while a Cat object's method returns &amp;quot;meow&amp;quot;.) However, OOP has many downsides that are often not understood until it's too late in the lifecycle of building a program. Fortunately, Python also enables developers to achieve similar behavior to polymorphism while using simple functions and plain data objects instead of classes.&lt;/p&gt;
&lt;p&gt;This talk will detail three different approaches provided by Python to achieve polymorphism behavior in a realistic program. It will compare and contrast their relative strengths and weaknesses. It will show how the most naive approach, which relies on isinstance() checks, leads to severe code duplication. It will show how OOP method polymorphism leads to code being organized along the wrong axis, which hurts understandability, debugging, and maintainability in practice. It will also demonstrate a less commonly known part of the built-in functools library called &amp;#64;singledispatch that strikes a perfect balance between functional and OOP programming styles.&lt;/p&gt;
&lt;p&gt;Finally, you'll learn how &amp;#64;singledispatch works under the covers, and how to build or integrate similar functionality into your own programs so you can realize the benefits of polymorphism while avoiding the pitfalls.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/the-zen-of-polymorphism-choosing-between-isinstance-methods-and-singledispatch.html</guid><category>PyCon US 2025</category></item><item><title>Transformando Gafas en Asistentes Inteligentes: Open Source Vision Language Models</title><link>https://pyvideo.org/pycon-us-2025/transformando-gafas-en-asistentes-inteligentes-open-source-vision-language-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, aprenderemos cómo transformar unas gafas comunes en un Asistente Inteligente por menos de 30 dólares, utilizando hardware accesible y modelos Open Source. Aprovecharemos los Vision Language Models (VLM), una tecnología que integra visión por computadora y procesamiento del lenguaje natural para crear inteligencia artificial multimodal, capaz de analizar imágenes y texto simultáneamente y generar respuestas en lenguaje natural.&lt;/p&gt;
&lt;p&gt;Exploraremos el origen y desarrollo de los Open VLMs, analizando su impacto, evolución y el enorme potencial que representan. Profundizaremos en su arquitectura, componentes esenciales y aplicaciones prácticas. Los asistentes aprenderán a crear sus propias gafas inteligentes, conociendo los requisitos técnicos necesarios, y podrán interactuar con varios prototipos funcionales disponibles durante la charla. Esto les permitirá probar las gafas en tiempo real y experimentar de primera mano como estos modelos responden y se adaptan a diversos escenarios. Además, se ofrecerá una guía práctica para configurar los modelos, realizar inferencias en sus computadoras y optimizarlos para funcionar con menos de 3 GB de memoria, haciendo esta tecnología más accesible y replicable para todos.&lt;/p&gt;
&lt;p&gt;Finalmente, exploraremos los desafíos actuales en la implementación de estos sistemas, incluyendo la optimización del uso de memoria y el desarrollo de técnicas de cuantización más eficientes. A partir de este análisis, reflexionaremos sobre el futuro de estas tecnologías en aplicaciones de inteligencia artificial, subrayando el papel clave de la colaboración en la comunidad Open Source. Concluiremos destacando el potencial transformador de estos dispositivos y su capacidad para redefinir nuestra interacción con el entorno en la vida cotidiana.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alejandro Núñez Arroyo</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/transformando-gafas-en-asistentes-inteligentes-open-source-vision-language-models.html</guid><category>PyCon US 2025</category></item><item><title>Un Enfoque Pythonico para Minería de Textos de Historias de Trabajo Arduo, Migración y Resiliencia</title><link>https://pyvideo.org/pycon-us-2025/un-enfoque-pythonico-para-mineria-de-textos-de-historias-de-trabajo-arduo-migracion-y-resiliencia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Entre 1942 y 1964, el Programa Bracero llevó a más de 4.5 millones de trabajadores mexicanos a los Estados Unidos para hacer frente a la escasez de mano de obra. Sin embargo, las experiencias personales de estos trabajadores a menudo permanecen en la sombra, aunque sus relatos capturan historias de trabajo incansable, migración, discriminación y resiliencia. Honrar estas narrativas requiere no solo un reconocimiento histórico, sino también un método para descubrir y analizar sistemáticamente sus relatos matizados. Aprovechando la minería de texto y el procesamiento de lenguaje natural mediante bibliotecas de Python como beautiful soup, Sentence Transformers y BERTopic, esta charla tiene como objetivo destacar los temas, luchas y resiliencia que definen las experiencias de braceros.&lt;/p&gt;
&lt;p&gt;Esta sesión explorará cómo estas bibliotecas de Python pueden utilizarse para realizar un análisis sistemático de grandes cuerpos de texto, revelando temas recurrentes y el sentimiento en historias orales y entrevistas. Profundizaremos en técnicas basadas en código para el modelado de temas, la extracción de palabras clave y el análisis de sentimiento que dan vida a las historias de los Braceros. Al examinar cómo Python puede facilitar la comprensión del lenguaje del trabajo, la migración y las dificultades, esta charla demostrará cómo la ciencia de datos puede desempeñar un papel en la valoración de narrativas culturales e históricas. Al hacerlo, esta presentación también busca mostrar el potencial de Python para unir los campos de las humanidades digitales, la etnografía y la tecnología, allanando el camino hacia una mayor comprensión y reconocimiento de las voces subrepresentadas en la historia compartida de trabajo y migración entre México y Estados Unidos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Silva Ferreira</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/un-enfoque-pythonico-para-mineria-de-textos-de-historias-de-trabajo-arduo-migracion-y-resiliencia.html</guid><category>PyCon US 2025</category></item><item><title>What they don't tell you about building a JIT compiler for CPython</title><link>https://pyvideo.org/pycon-us-2025/what-they-dont-tell-you-about-building-a-jit-compiler-for-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Despite their reputation, just-in-time compilers are not magic “go faster” machines. Developing and maintaining any sort of optimizing compiler for even a single platform, let alone all of Python’s most popular supported platforms, is an incredibly complicated, expensive task.&lt;/p&gt;
&lt;p&gt;However, figuring out how to compile Python code down to machine code is just the beginning. Most talks and other resources about JITs offer an interesting introduction to the general approaches used, but gloss over the most interesting technical issues that need to be solved in order to actually &amp;quot;ship&amp;quot; these performance gains in practice.&lt;/p&gt;
&lt;p&gt;As one of the engineers working on Microsoft's ambitious &amp;quot;Faster CPython&amp;quot; project, I'll introduce some of the challenges that we've encountered over the past year in our quest to make your code faster. Along the way, we'll learn how JITs decide what code to compile, how they compile this code in-process in a safe and secure way, and the debugging and profiling requirements that users have come to expect from native code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandt Bucher</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/what-they-dont-tell-you-about-building-a-jit-compiler-for-cpython.html</guid><category>PyCon US 2025</category></item><item><title>What's New in the Linux Kernel... from Python</title><link>https://pyvideo.org/pycon-us-2025/whats-new-in-the-linux-kernel-from-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every new version of the Linux kernel comes with new features, many of which can be easily used in Python. In this introduction to the world of systems programming in Python, we'll use our favorite language to try out a couple of new features added to the Linux kernel over the past year. Along the way, we'll learn about tools in the Python standard library for interfacing with the operating system and working with C-style data structures.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geoffrey Thomas</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/whats-new-in-the-linux-kernel-from-python.html</guid><category>PyCon US 2025</category></item><item><title>When GPUs Make Python Slower: Patterns and Pitfalls</title><link>https://pyvideo.org/pycon-us-2025/when-gpus-make-python-slower-patterns-and-pitfalls.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When does GPU acceleration slow down your Python code? More often than you might think! Join me to explore the world of GPU acceleration, in which I will walk through some use cases where it makes your code faster and slower, and sometimes much slower. I’ll explain what GPU accelerated libraries like Numba, CuPy, cuDF and cuGraph really do, and we’ll dive into string processing, memory transfer overhead, and real-world case studies in processing time-series data. Whether you’re new to GPU acceleration or already using it in production, you’ll better understand when using GPUs help, when it doesn’t, and when you should reach for other ways to make your Python code faster.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kaashif Hymabaccus</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/when-gpus-make-python-slower-patterns-and-pitfalls.html</guid><category>PyCon US 2025</category></item><item><title>Why `len('😶‍🌫️') == 4` and other weird things you should know about strings in Python</title><link>https://pyvideo.org/pycon-us-2025/why-len-4-and-other-weird-things-you-should-know-about-strings-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Strings in Python behave in all sorts of unexpected ways: len('😶‍🌫️') == 4, 'ñ' != 'ñ', 'dlrow olleh'.split()[1] == 'olleh'! How is this possible? And importantly, why should you care?&lt;/p&gt;
&lt;p&gt;In this presentation, we’ll give a brief introduction to text encoding, the different Unicode standards and how Python encodes strings before we dive deep into Unicode oddities. We’ll cover how one code point can represent multiple characters, why converting between upper-case and lower-case characters should be locale-dependent and how emoji’s work. Finally, we will discuss some best practices for handling unicode input in Python.&lt;/p&gt;
&lt;p&gt;After this talk, you'll have a better understanding of strings in Python, the Unicode character encoding and you’ll be aware of some common pitfalls and how to avoid them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marie Roald</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/why-len-4-and-other-weird-things-you-should-know-about-strings-in-python.html</guid><category>PyCon US 2025</category></item><item><title>Writing Extension Modules To Be Interruptible</title><link>https://pyvideo.org/pycon-us-2025/writing-extension-modules-to-be-interruptible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever told Python to crunch some numbers, realized right after pressing RETURN that you made a mistake setting up the problem, hit control-C to stop it again...and then sat there twiddling your thumbs for a surprisingly long time as nothing seemed to happen?&lt;/p&gt;
&lt;p&gt;The short version of what's going on when this happens is, the Python interpreter is notified of your having hit control-C almost immediately, but it has to wait to throw KeyboardInterrupt until the extension module that's doing the number crunching finishes its calculation and returns control to the interpreter.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss why the interpreter works that way (and why it has to work that way), what extension module authors can do today to make their extensions notice control-C promptly, and how we can all work toward a future where it's easy and natural for extension module authors to write extensions that don't make you wait for them to stop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zach Weinberg</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/writing-extension-modules-to-be-interruptible.html</guid><category>PyCon US 2025</category></item><item><title>You can and Should Build XKCD's "Sky Alarm" for Cool Space Things</title><link>https://pyvideo.org/pycon-us-2025/you-can-and-should-build-xkcds-sky-alarm-for-cool-space-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;XKCD is a webcomic by Randall Munroe, and in one of his comics there is a &amp;quot;Sky Alarm&amp;quot; [&lt;a class="reference external" href="https://xkcd.com/2979/"&gt;https://xkcd.com/2979/&lt;/a&gt;]. It features a small box with a light on top of it, and it goes &amp;quot;weeee ooooo&amp;quot; when a &amp;quot;Cool Space Thing [is] Happening!&amp;quot;.&lt;/p&gt;
&lt;p&gt;If you want one, I've got great news: you can build one and it can run on Python!&lt;/p&gt;
&lt;p&gt;Circuit Python let's us extend the Python we know and love into the world around us, and we can use that extension to build alarms when &amp;quot;Cool Space Things&amp;quot; happen. Or by adding a sensor or two, we can have it respond to things in our environment.&lt;/p&gt;
&lt;p&gt;This talk walks through a basic build of a &amp;quot;Sky Alarm&amp;quot; using Circuit Python. We'll highlight fetching data, selecting a micro controller, making it respond to data on a local server, and adding sensors, and logging data from those sensors for plotting, displays, or more complex functions and analysis. Focusing on a solder free build, this will give you the tools you need to bring Python into the physical spaces around you without needing to be an expert when it comes to electronics and electrical engineering.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Murray</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/you-can-and-should-build-xkcds-sky-alarm-for-cool-space-things.html</guid><category>PyCon US 2025</category></item><item><title>Zoom, Enhance: Asyncio's New Introspection Powers</title><link>https://pyvideo.org/pycon-us-2025/zoom-enhance-asyncios-new-introspection-powers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;asyncio in Python 3.14 introduces a new powerful feature: introspecting a running asyncio program from another OS process. This changes everything—now you can debug and profile your asyncio code in production with no performance penalty. Join us for a fun ride as we show how this magic works under the hood and how you can use it. Learn about technical design decisions, performance considerations, security implications, and trade-offs made. Along the way, you’ll gain both beautiful and horrible insights into how asyncio and operating systems interact, and we’ll wrap up with a flawless live demo!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pablo Galindo Salgado</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/zoom-enhance-asyncios-new-introspection-powers.html</guid><category>PyCon US 2025</category></item><item><title>503 days working full-time on FOSS: lessons learned</title><link>https://pyvideo.org/pycon-us-2025/503-days-working-full-time-on-foss-lessons-learned.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I worked full-time on a Python FOSS project (Textual) for 503 days, so what did I learn?&lt;/p&gt;
&lt;p&gt;Am I a better (Python) programmer? Am I a better teammate? Am I a better person?&lt;/p&gt;
&lt;p&gt;In this talk, I will share some lessons I learned over the course of these 503 days:&lt;/p&gt;
&lt;p&gt;How to get a tech job in this day &amp;amp; age
How to put your ego aside when working with others
How to deal with mistakes
How to interact with users &amp;amp; contributors online
How it feels to collaborate to a large codebase&lt;/p&gt;
&lt;p&gt;As for the first 3 questions... Ask my colleagues!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Girão Serrão</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/503-days-working-full-time-on-foss-lessons-learned.html</guid><category>PyCon US 2025</category></item><item><title>Automatizando el Rendimiento de Código Python</title><link>https://pyvideo.org/pycon-us-2025/automatizando-el-rendimiento-de-codigo-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimizar el código para mejorar el rendimiento requiere experiencia y un esfuerzo manual considerable. Debido a esta barrera, la mayoría del software permanece sin optimizar, lo que da lugar a las aplicaciones lentas que comúnmente experimentamos. En esta charla, veremos cómo las herramientas modernas impulsadas por IA pueden ahora optimizar continuamente el código Python de formas que antes estaban limitadas a programadores expertos.&lt;/p&gt;
&lt;p&gt;En esta charla, exploraremos los pasos que los desarrolladores de aplicaciones siguen al optimizar su código y analizaremos cómo cada uno de estos pasos puede ser automatizado. En particular: • Cómo los Modelos de Lenguaje de Gran Escala pueden generar optimizaciones efectivas para el código. • Cómo el nuevo código generado se verifica exhaustivamente para garantizar que sea funcionalmente correcto. • Cómo automatizar las pruebas de rendimiento para asegurarse de que las optimizaciones realmente mejoren el rendimiento.&lt;/p&gt;
&lt;p&gt;A través de demostraciones en vivo de optimización de código con Codeflash, mostraremos las capacidades de este enfoque. Presentaremos varias categorías de optimizaciones posibles analizando código integrado en proyectos populares de código abierto, como Pydantic. Finalmente, veremos cómo podemos comenzar a optimizar automáticamente nuestro código Python existente y futuro con estas herramientas. Esto permite a los desarrolladores centrarse en escribir nuevas funcionalidades, mientras que los optimizadores impulsados por IA determinan la implementación más eficiente en Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Rodriguez</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/automatizando-el-rendimiento-de-codigo-python.html</guid><category>PyCon US 2025</category></item><item><title>Beautiful and Balanced: Using Color Theory in Data Visualization</title><link>https://pyvideo.org/pycon-us-2025/beautiful-and-balanced-using-color-theory-in-data-visualization.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have just made the most aesthetically pleasing pie chart in the history of data viz - but has your color palette inadvertently introduced a bias to the data you're presenting?&lt;/p&gt;
&lt;p&gt;Our brains interpret color contextually: proximity to other colors changes the way we perceive a particular color, making it appear darker or lighter, more prominent or more demure. When presenting data visually, it's important to choose color palettes which do not skew the viewer's perception of the data relationships you're illustrating.&lt;/p&gt;
&lt;p&gt;In this talk, we'll take a peek at some basic color theory based on the work of Josef Albers, look at what color weight is, and how you can use it to evaluate your palette choices. We'll learn why those gorgeous palettes created by graphic designers may not be the best choices for your data visualizations, and present some strategies for choosing color palettes that keep your data presentation both unbiased and visually pleasing.&lt;/p&gt;
&lt;p&gt;This is a tool-agnostic talk: you can apply these techniques with any data visualization package or tool which allows you to specify a color palette.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laura Fisher</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/beautiful-and-balanced-using-color-theory-in-data-visualization.html</guid><category>PyCon US 2025</category></item><item><title>Building a NoGIL Load Balancer in 30 minutes</title><link>https://pyvideo.org/pycon-us-2025/building-a-nogil-load-balancer-in-30-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Load balancers are widespread nowadays because most software systems are web-centric and service oriented. However, they’re extremely complex to build, because they must be very performant and use sophisticated algorithms to route traffic. Until recently, you couldn’t use Python to build one, because even though it would make the code simpler, the GIL prevented multiple threads from executing Python at the same time. Now that you can, what are the practical implications in your day to day work? In this talk, we’re going to live code a load balancer in Python. This will help us understand the pros and cons of using modules such as asyncio, threading and concurrent.futures, and what changes when we remove the GIL from the way. Whether you’re building systems that demand concurrency (such as AI models or DevOps pipelines), or you’re just curious about how tools like gUnicorn or Starlette work under the hood, you’ll come away with practical insights on how to start off the NoGIL era on the right foot.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alvaro Duran</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/building-a-nogil-load-balancer-in-30-minutes.html</guid><category>PyCon US 2025</category></item><item><title>Building Resilient Data Pipelines: The Power of Idempotency</title><link>https://pyvideo.org/pycon-us-2025/building-resilient-data-pipelines-the-power-of-idempotency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data pipelines are vital for moving data from source to destination. They help with use cases like integrating multimodal data, building a data warehouse, improving data quality, and more.&lt;/p&gt;
&lt;p&gt;Over many years, developers have put forth many design patterns or best practices for building data pipelines in Python using Pandas, Numpy, and more. However, one crucial criterion for creating a data pipeline is idempotency.&lt;/p&gt;
&lt;p&gt;This talk will open with a brief overview of data pipelines and the importance of idempotency in distributed systems. We’ll look to answer the question: What does it take to build an idempotent data pipeline in Python with an example?&lt;/p&gt;
&lt;p&gt;Our exploration will begin with the pitfalls of non-idempotent pipelines, then proceed to a methodology for building idempotent data pipelines and the design decisions that accompany them. Along the way, we’ll explore testing strategies using pytest.&lt;/p&gt;
&lt;p&gt;This talk is aimed at those interested in building idempotent data pipelines.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mihir Kavatkar</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/building-resilient-data-pipelines-the-power-of-idempotency.html</guid><category>PyCon US 2025</category></item><item><title>Cambiando el guión: No estamos solas</title><link>https://pyvideo.org/pycon-us-2025/cambiando-el-guion-no-estamos-solas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;¡Hola! Somos Valen y Laura creadoras y hosts de DataSoul Podcast, un espacio seguro para compartir experiencias trabajando en la industria tech, así como hablar de temas de los que poco se habla pero que todos enfrentamos en algún momento. Este podcast quiere ser parte de Pycon US con la presentación de un episodio en vivo donde hablaremos de retos, miedos y la importancia de la comunidad, al momento de hacer un cambio de carrera hacia el mundo de los datos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laura López</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/cambiando-el-guion-no-estamos-solas.html</guid><category>PyCon US 2025</category></item><item><title>Cómo llevar tus presentaciones técnicas al siguiente nivel con Python + Quarto</title><link>https://pyvideo.org/pycon-us-2025/como-llevar-tus-presentaciones-tecnicas-al-siguiente-nivel-con-python-quarto.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Da lo mismo si trabajas como dev o haciendo ciencia de datos: crear buenas presentaciones es un aspecto clave para dar a conocer lo que haces. Una buena presentación nos permite mostrar la relevancia de nuestro trabajo de una forma clara y convincente, y destacar el valor de nuestras contribuciones técnicas. En este contexto, un elemento fundamental de cualquier presentación es un set de slides que se destaque. En esta charla presentaremos 10 simples reglas para crear slides en formato HTML usando Python y Quarto, un sistema de publicación técnico y científico de código abierto. La audiencia se llevará sugerencias concretas sobre cómo mejorar sus próximo set de slides y el código para implementarlas.&lt;/p&gt;
&lt;p&gt;¿Por qué Quarto? Quarto es una excelente herramienta para crear slides sobre contenido técnico porque permite integrar código, datos y texto en un solo archivo. A lo largo de la presentación nos enfocaremos en la creación de slides en formato HTML, ya que este tiene características que lo hacen particularmente útil para presentar contenido técnico. Por ejemplo, ofrece opciones flexibles para mostrar y ocultar código y para ajustar la cantidad de información mostrada, lo que nos permite crear &amp;quot;capas&amp;quot; de contenido. Así, es posible presentar ideas claves para una audiencia no técnica y al mismo tiempo incluir código que se muestra solo si es necesario. Incluso, gracias al poder de WebAssembly + pyodide, es posible hacer que aparezca un intérprete de Python directamente en nuestra presentación, para poder hacer una demostración de algo en el momento, si es necesario. Todas estas opciones nos permiten crear presentaciones adaptables a públicos con distintos niveles de experiencia o conocimiento técnico.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Riva Quiroga</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/como-llevar-tus-presentaciones-tecnicas-al-siguiente-nivel-con-python-quarto.html</guid><category>PyCon US 2025</category></item><item><title>Construyendo un Buscador Multimodal</title><link>https://pyvideo.org/pycon-us-2025/construyendo-un-buscador-multimodal.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En el mundo actual basado en datos, procesar y analizar eficientemente grandes volúmenes de datos es crucial para muchas aplicaciones. Exploremos juntos cómo crear y administrar embeddings de texto e imágenes para búsqueda de similitudes en una base de datos PostgreSQL. Nos sumergiremos en un ejemplo práctico utilizando Python para demostrar cómo pueden crear buscadores que empleen lenguaje natural.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elizabeth Fuentes</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/construyendo-un-buscador-multimodal.html</guid><category>PyCon US 2025</category></item><item><title>Descifrando emociones desde arte a memes</title><link>https://pyvideo.org/pycon-us-2025/descifrando-emociones-desde-arte-a-memes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El mundo que nos rodea está lleno de información de muchos tipos, y aunque muchas personas nos comunicamos de manera verbal para transmitir información muchas veces perdemos información del contexto o la intención si no va acompañado de imágenes. Lo mismo ocurre con los modelos cuando intentamos solucionar problemas muy complejos con modelos que solo pueden contener información de un tipo específico.&lt;/p&gt;
&lt;p&gt;Por ese motivo es necesario soluciones que puedan integrar diferentes tipos de datos, como imágenes, texto, video o audio: los modelos multimodales. Estos sistemas combinan múltiples entradas de tipos de datos y hacen los sistemas más robustos, ayudando en áreas de la salud, seguridad, criminología, comercial, etc.&lt;/p&gt;
&lt;p&gt;El objetivo de esta charla es mostrar cómo crear un sistema que sea capaz de identificar emociones de diverso tipo de imágenes, y en paralelo extraer emociones de textos con ese resultado (con diferentes modelos) y asociar textos a las imágenes con los textos extraídos.&lt;/p&gt;
&lt;p&gt;En esta charla, los asistentes aprenderán paso a paso cómo implementar un sistema multimodal que incluya imágenes y texto, con datos de libre acceso, y entender cómo los multimodales son una buena opción para solventar problemas complejos. Además, se compartirá el rol de Python del proceso, la aplicación de módulos externos para tener una implementación simple, para facilitar el realizar el proceso de multimodal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maria Jose Molina Contreras</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/descifrando-emociones-desde-arte-a-memes.html</guid><category>PyCon US 2025</category></item><item><title>Design Pressure: The Invisible Hand That Shapes Your Code</title><link>https://pyvideo.org/pycon-us-2025/design-pressure-the-invisible-hand-that-shapes-your-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever had this weird gut feeling that something is off in your code, but couldn't put the finger on why? Are you starting your projects with the best intentions, following all best practices, and still feel like your architecture turns weird eventually?&lt;/p&gt;
&lt;p&gt;Maybe, it's not your fault! Maybe, the tools or methodology you're using are applying design pressure that you're not cognizant of, but that influences the shape of your code.&lt;/p&gt;
&lt;p&gt;The best way to prevent that is becoming aware of the forces at play. So, let's look at what design pressure is, look at the most prominent examples of good and bad, and explore how to leverage the former and quell the latter. Because you can only deal with something you know exists.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hynek Schlawack</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/design-pressure-the-invisible-hand-that-shapes-your-code.html</guid><category>PyCon US 2025</category></item><item><title>Detecting Honeybee Swarms Using the Integration of OpenCV, Pandas, AI, &amp; PyTorch</title><link>https://pyvideo.org/pycon-us-2025/detecting-honeybee-swarms-using-the-integration-of-opencv-pandas-ai-pytorch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Honeybees will swarm during times of increased pollen and nectar flow, effectively dividing the hive in half. This can result in the complete loss of both halves of the hive for the beekeeper. In this talk, I will show how I used a Raspberry Pi, mounted on a hive and powered by solar panels, to take a still image of a hive entrance every 30 seconds and filtered using OpenCV. Each image was sent off in real-time to Marvin.AI for analysis to obtain a count of the number of bees at the hive entrance. A subsequent refinement has removed the need for AI analysis using an object detection model implemented in PyTorch using large scale datasets from iNaturalist to create a deep learning model which I plan to implement this Spring. The counts were stored in an offsite database and then aggregated into a Pandas dataset and subjected to a rolling window analysis. It was postulated that such an analysis would prove necessary to distinguish between swarming and “bearding” which is when many bees exit the hive and congregate at the entrance during very warm periods to ventilate it. While the bees were “uncooperative” this season and did not swarm, test data show that a beekeeper could be notified of a swarm event within 10 minutes of its occurrence, thus saving both hives. Attendees will learn : (1) The use of “maker” techniques in setting up and integrating solar power, Raspberry Pi systems and cameras as well as effectively running python on the systems and setting up remote access. (2) How to implement the setup and use of PyTorch data object models and how they relate to AI analysis (3) How to use NumPy and Pandas for biological system analysis (4) And maybe a little apiculture!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Dahlberg</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/detecting-honeybee-swarms-using-the-integration-of-opencv-pandas-ai-pytorch.html</guid><category>PyCon US 2025</category></item><item><title>Diseñando y Construyendo Teclados Personalizados con Python</title><link>https://pyvideo.org/pycon-us-2025/disenando-y-construyendo-teclados-personalizados-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Como programadores, pasamos mucho tiempo tecleando, pero a menudo pasamos por alto cómo el diseño de nuestros teclados afecta nuestra comodidad y productividad. En esta charla, exploraremos los teclados personalizados y cómo Python puede ayudarnos a crear nuestras propias experiencias de typing.&lt;/p&gt;
&lt;p&gt;Comenzaremos analizando la historia del diseño de teclados y las limitaciones de las distribuciones estándar como el QWERTY. Luego, hablaremos de las ventajas de distribuciones alternativas, como diseños ortolineales y split/divididos, que pueden ayudar a reducir la tensión y mejorar la velocidad de escritura.&lt;/p&gt;
&lt;p&gt;A continuación, revisaremos cómo diseñar el PCB (placa de circuito impreso) de un teclado personalizado y aprenderemos a utilizar herramientas de Python como GDSFactory. Aprenderás a colocar las teclas según la forma de tus manos y a crear una distribución que se enfoque en las teclas que más utilizas en tus lenguajes de programación preferidos.&lt;/p&gt;
&lt;p&gt;Una vez que tengamos el diseño del PCB, pasaremos a la construcción de nuestro teclado personalizado. Cubriremos los aspectos básicos del ensamblaje para convertir nuestro diseño en un dispositivo real. Finalmente, hablaremos sobre cómo adaptarnos a nuestra nueva distribución de teclado. Veremos herramientas en línea y scripts de Python para analizar nuestros hábitos de mecanografía, ayudándonos a identificar nuestras teclas más comunes y a monitorear nuestro progreso mientras reentrenamos nuestros dedos.&lt;/p&gt;
&lt;p&gt;No se requiere experiencia previa en construcción de teclados o diseño de PCB; solo trae tu curiosidad y ganas de crear una experiencia de escritura personalizada. Al final de esta charla, sabrás cuestionar el diseño de tu teclado actual y quizá te animes a construir y mejorar tu propio teclado personalizado usando Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos A Aranibar</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/disenando-y-construyendo-teclados-personalizados-con-python.html</guid><category>PyCon US 2025</category></item><item><title>Diving into the Deep End: A Python Journey in Water Management</title><link>https://pyvideo.org/pycon-us-2025/diving-into-the-deep-end-a-python-journey-in-water-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Six years ago, I was asked to create a better Excel spreadsheet to track water requests for a small irrigation district. That request sparked an unexpected journey: from knowing only basic Python syntax to building a SaaS platform that models physical water delivery systems. This platform now handles water accounting, delivery tracking, scheduling, reporting, and even simulation for real-world use.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll share how I tackled challenges like: - Transitioning from spreadsheets to a Python-powered solution. - Modeling physical systems without a background in discrete mathematics, graph theory, or simulation. - Scaling a personal learning project into a production-ready SaaS application.&lt;/p&gt;
&lt;p&gt;I’ll also explore the tools and techniques that made it possible, the lessons I learned along the way, and the moments of failure and success that shaped my journey. Whether new to Python, considering tackling a big project, or just curious about real-world applications of Python, this talk will inspire attendees to dive in and solve problems beyond their comfort zone.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Linke</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/diving-into-the-deep-end-a-python-journey-in-water-management.html</guid><category>PyCon US 2025</category></item><item><title>From Desktop to Browser: Crafting Browser-Native Game Engine with Webassembly</title><link>https://pyvideo.org/pycon-us-2025/from-desktop-to-browser-crafting-browser-native-game-engine-with-webassembly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how to turn your Python games into lightning-fast web experiences without compromising speed? In this session, overcome the browser barrier and learn how to create powerful game engines that smoothly connect desktop and web platforms using Pygame, pygbag, and WebAssembly.&lt;/p&gt;
&lt;p&gt;Starting with familiar Pygame foundations, discover how pygbag transforms Python games into browser-ready experiences. Learn techniques for managing state, particle effects, and physics computations with near-native performance. Through live demonstrations, explore practical strategies for optimizing rendering and maintaining smooth gameplay across different environments.&lt;/p&gt;
&lt;p&gt;By the end of the talk, learn how to create WebAssembly-powered games that function flawlessly on any platform without sacrificing user experience, and understand the architectural patterns that enable high-performance browser-based game engines.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neeraj Pandey</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/from-desktop-to-browser-crafting-browser-native-game-engine-with-webassembly.html</guid><category>PyCon US 2025</category></item><item><title>GeoMonitoreo con Python: Soluciones Innovadoras para los Desafíos de Latinoamérica</title><link>https://pyvideo.org/pycon-us-2025/geomonitoreo-con-python-soluciones-innovadoras-para-los-desafios-de-latinoamerica.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, contaremos la experiencia de subirse al ‘tren Python’ que prometía ser una tecnología en expansión allá por el 2015, cuando comenzamos a utilizar este lenguaje para la implementación de soluciones basadas en procesamiento de imágenes de video y satelitales para aplicaciones científicas en casos reales. Desde ese entonces, junto con su ecosistema compuesto por bibliotecas en constante actualización, Python continúa revolucionando el monitoreo ambiental en Latinoamérica. Con aplicaciones como el análisis de imágenes satelitales para evaluar los cambios de uso y cobertura de suelo hasta la detección de aumento o disminución de humedales o la presencia de cianobacterias en lagos, ríos o embalses, esta herramienta ha permitido implementar soluciones accesibles y escalables frente a desafíos como el cambio climático, la gestión de recursos hídricos y la conservación de ecosistemas. Compartiremos casos de estudio exitosos y herramientas clave, mostrando cómo la comunidad puede contribuir al cuidado ambiental y la sostenibilidad ambiental en la región. Python es más que un lenguaje de programación, es una interacción continua entre documentación, desarrolladores y la comunidad que pone a disposición infinidad de herramientas para que cualquier persona con una idea para cuidar el planeta pueda generar su aporte y divulgarlo globalmente, algo que resultaba difícil de imaginar en nuestros comienzos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Natalia V. Revollo</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/geomonitoreo-con-python-soluciones-innovadoras-para-los-desafios-de-latinoamerica.html</guid><category>PyCon US 2025</category></item><item><title>Going From Notebooks to Scalable Systems</title><link>https://pyvideo.org/pycon-us-2025/going-from-notebooks-to-scalable-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter Notebooks are a fantastic tool that make it very easy to get started on a project. But often, you’ll reach a point where you want to make your code part of a larger system, and you’ll need to change your way of working. You’ll need to go from code that gives you some insights or results to robust, reproducible code that runs automatically. In this talk, I’ll explain strategies that will help you smoothly refactor your code. I’ll introduce tools that will help you, and discuss the skills that you’ll need. Whether you're a data scientist looking to productionize your models or a developer working with data-heavy applications, you'll gain practical knowledge to help you move from exploratory notebooks to robust, scalable systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Nelson</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/going-from-notebooks-to-scalable-systems.html</guid><category>PyCon US 2025</category></item><item><title>How to learn Japanese with Python</title><link>https://pyvideo.org/pycon-us-2025/how-to-learn-japanese-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Japanese is reportedly one of the most difficult languages for English speakers to learn. (FSI language difficulty: &lt;a class="reference external" href="https://www.fsi-language-courses.org/"&gt;https://www.fsi-language-courses.org/&lt;/a&gt;...) There are many reasons for this, including the fact that there are three types of characters: hiragana, katakana, and kanji, and that words are not separated by spaces. In this talk, I will first introduce what makes Japanese different from many European languages. Then I will show how Python and natural language processing libraries can be used to support Japanese language learning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Takanori Suzuki</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/how-to-learn-japanese-with-python.html</guid><category>PyCon US 2025</category></item><item><title>Inclusive Data for 1.3 Billion: Designing Accessible Visualizations</title><link>https://pyvideo.org/pycon-us-2025/inclusive-data-for-13-billion-designing-accessible-visualizations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to the World Health Organization (WHO), an estimated 1.3 billion people (1 in 6 individuals) experience a disability, and nearly 2.2 billion people (1 in 5 individuals) have vision impairment. Improving the accessibility of visualizations will enable more people to participate in and engage with our data analyses.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll discuss some principles and best practices for creating more accessible data visualizations. It will include tips for individuals who create visualizations, as well as guidelines for the developers of visualization software to help ensure your tools can help downstream designers and developers create more accessible visualizations.&lt;/p&gt;
&lt;p&gt;Specifically, we will cover:&lt;/p&gt;
&lt;p&gt;What makes data visualizations inaccessible? We will cover accessibility fundamentals like color contrast, alternative text descriptions, keyboard navigation support, screen reader compatibility, and more, with specific examples and demonstrations.
Are Python data visualization tools accessible? We will teach how to analyze the visualization landscape and discuss how tool developers can begin and prioritize improvements.
How accessible is my visualization? We will demonstrate how to conduct accessibility audits for data visualization tools by performing and documenting two accessibility evaluation tests live.&lt;/p&gt;
&lt;p&gt;This talk will use examples from our ongoing work to improve the accessibility of Bokeh, a Python library for creating interactive data visualizations for web browsers. We hope this talk enables you to take the first few steps in making your next data visualization and your visualization tools, more accessible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pavithra Eswaramoorthy</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/inclusive-data-for-13-billion-designing-accessible-visualizations.html</guid><category>PyCon US 2025</category></item><item><title>Intuition vs. Reality: Surprising Truths in Python Performance</title><link>https://pyvideo.org/pycon-us-2025/intuition-vs-reality-surprising-truths-in-python-performance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How often do we trust our instincts when optimizing code? In Python, performance frequently defies intuition, leading us to make changes that might slow things down instead of speeding them up. This talk explores surprising truths about Python performance and showcases why measurement tools are essential for finding the real bottlenecks in our code.&lt;/p&gt;
&lt;p&gt;Consider this: is it faster to count even numbers in a list using len([x for x in arr if x % 2 == 0]) or sum(1 for x in arr if x % 2 == 0)? While one might seem more Pythonic or efficient at first glance, the performance results might surprise you.&lt;/p&gt;
&lt;p&gt;Through an interactive format, we’ll quiz you on performance scenarios using real-world examples. From counting even numbers to rewriting Python code in Rust, each case study will challenge assumptions about what makes code faster.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Arthur Pastel</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/intuition-vs-reality-surprising-truths-in-python-performance.html</guid><category>PyCon US 2025</category></item><item><title>Keynote Speaker - Cory Doctorow</title><link>https://pyvideo.org/pycon-us-2025/keynote-speaker-cory-doctorow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Note: This video contains strong language that may offend some viewers. The opinions and perspectives within this video should not be considered official stances of the Python Software Foundation.&lt;/p&gt;
&lt;p&gt;Cory Doctorow (craphound.com) is a science fiction author, activist and journalist. He is the author of many books, most recently PICKS AND SHOVELS and THE BEZZLE (followups to RED TEAM BLUES) and THE LOST CAUSE, a solarpunk science fiction novel of hope amidst the climate emergency. His most recent nonfiction book is THE INTERNET CON: HOW TO SEIZE THE MEANS OF COMPUTATION, a Big Tech disassembly manual. Other recent books include RED TEAM BLUES, a science fiction crime thriller; CHOKEPOINT CAPITALISM, nonfiction about monopoly and creative labor markets; the LITTLE BROTHER series for young adults; IN REAL LIFE, a graphic novel; and the picture book POESY THE MONSTER SLAYER.&lt;/p&gt;
&lt;p&gt;He maintains a daily blog at Pluralistic.net. He works for the Electronic Frontier Foundation, is a MIT Media Lab Research Affiliate, is a Visiting Professor of Computer Science at Open University, a Visiting Professor of Practice at the University of North Carolina’s School of Library and Information Science and co-founded the UK Open Rights Group. Born in Toronto, Canada, he now lives in Los Angeles. In 2020, he was inducted into the Canadian Science Fiction and Fantasy Hall of Fame. In 2022, he earned the Sir Arthur Clarke Imagination in Service to Society Awardee for lifetime achievement. In 2024, the Media Ecology Association awarded him the Neil Postman Award for Career Achievement in Public Intellectual Activity. York University (Canada) made him an Honourary Doctor of Laws; and the Open University (UK) made him an Honourary Doctor of Computer Science.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Doctorow</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/keynote-speaker-cory-doctorow.html</guid><category>PyCon US 2025</category></item><item><title>Lightning Talks - Friday</title><link>https://pyvideo.org/pycon-us-2025/lightning-talks-friday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;2:05 - Rodrigo Girão Serrão - Meta lightning talk
7:15 - Laís Carvalho - Join Humble Data!
10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff
14:40 - Quang Vu - Enhancing My Archery Practice with Computer Vision
18:55 - Meagen Voss - Maaah! How I Killed My Site with a Goat Gif
24:25 - Will Lachance - How much energy will my solar panels produce?
29:10 - Amanda Lundberg - Captioner is Human
33:55 - Thomas Weiss - Predicting Fire Weather Using Historical RAWS Data
38:25 - Tom Rutherford - The power and danger of os.fork
42:45 - Cody Maloney - Remember to .close() file-like objects
47:25 - Anthony Shaw - CSnakes: Python in .NET
52:55 - Trey Hunner - Systems, gates, and rage&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Girão Serrão</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/lightning-talks-friday.html</guid><category>PyCon US 2025</category></item><item><title>Make Python Talk, Make Python Listen</title><link>https://pyvideo.org/pycon-us-2025/make-python-talk-make-python-listen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Third-party packages for Python allow your programs to perform text-to-speech and speech recognition with only a few lines of code. You don't need to understand advanced machine learning algorithms to take advantage of these sophisticated features: even beginners can use these packages. In this talk, you'll learn the PyTTSx3 and gTTS packages to make your programs talk using your operating system's speech engine. You'll also learn how to use the free, offline Whisper package to convert audio files into text strings. The straightforward configuration for these packages mean you can start making immediate use of them in your Python applications. Finally, we cover the yt-dlp package for downloading video and audio files from the web for transcription purposes, and how all of this is being used by the PyVideo.org website.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Al Sweigart</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/make-python-talk-make-python-listen.html</guid><category>PyCon US 2025</category></item><item><title>Marimo: A Notebook that "Compiles" Python for Reproducibility and Reusability</title><link>https://pyvideo.org/pycon-us-2025/marimo-a-notebook-that-compiles-python-for-reproducibility-and-reusability.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores the following question: What would it take to create a new kind of Python notebook that, unlike a REPL, knew the order in which to run cells? What if the notebook could also update automatically or lazily when a variable was updated? And what if we could add UI elements, like sliders and dropdowns, to all this? Would this change how you worked with notebooks?&lt;/p&gt;
&lt;p&gt;But most of all: how would you build such a thing? In this talk, we propose that you would need a kind of &amp;quot;compiler&amp;quot; on top of Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on how to create such a notebook by using marimo — an open-source reactive notebook for Python that's executable as scripts and shareable as apps — as a case study. Marimo's key technology is static analysis: marimo &amp;quot;compiles&amp;quot; blocks of Python code, or &amp;quot;cells&amp;quot;, to a directed acyclic graph. This graph models how data flows across cells, and is used as an intermediate representation consumed by a runtime that eliminates hidden state while also powering interactive computing, scripts, and web apps.&lt;/p&gt;
&lt;p&gt;By using notebooks and marimo's internals as a case study, we'll examine a question that is broadly applicable to developer tools in many domains: What does it take to compile Python code to a flexible intermediate representation that preserves the original program's semantics? We'll discuss design decisions and tradeoffs along the way, such as the pros and cons of static analysis versus runtime tracing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Akshay Agrawal</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/marimo-a-notebook-that-compiles-python-for-reproducibility-and-reusability.html</guid><category>PyCon US 2025</category></item><item><title>Metaprogramming with Decorators, Metaclasses, and Dynamic Code Generation</title><link>https://pyvideo.org/pycon-us-2025/metaprogramming-with-decorators-metaclasses-and-dynamic-code-generation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation delves into advanced Python programming techniques related to metaprogramming, which allow developers to write code that can evaluate, modify, or build upon other code.&lt;/p&gt;
&lt;p&gt;We will explore key metaprogramming constructs—decorators, metaclasses, and dynamic code generation—through practical examples and real-world applications. This session will provide the audience with the tools and insights to take advantage of the most advanced Python programming techniques to help them plan, optimize workflows, or write dynamic applications Perfect for intermediate to advanced developers who are ready to take their coding skills to the next level!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aditya Mehra</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/metaprogramming-with-decorators-metaclasses-and-dynamic-code-generation.html</guid><category>PyCon US 2025</category></item><item><title>Or Else! An Exploration of Obscure Control Flow</title><link>https://pyvideo.org/pycon-us-2025/or-else-an-exploration-of-obscure-control-flow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar? Come join us for an adventure into depths of the Python world less traveled.&lt;/p&gt;
&lt;p&gt;We'll start with a brief look at the fundamentals of program control flow, and how our choices as developers influence the readability and maintainability of our code. We'll look at some easy ways to use lesser-known syntax elements to make common code patterns more obvious, and compare and contrast them with equivalent alternatives.&lt;/p&gt;
&lt;p&gt;Next, we'll start to pull back the curtains a bit on how Python handles more complex control flow mechanisms, like generators and decorators, and look at ways to leverage those features to build higher order functionality. Lastly, we'll get a bit reckless and look at how Python makes it possible to create our own systems for control flow, and consider committing some light crimes in the name of code readability.&lt;/p&gt;
&lt;p&gt;We might even implement the highly desired &amp;quot;do-while&amp;quot; loop while we're at it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amethyst Reese</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/or-else-an-exploration-of-obscure-control-flow.html</guid><category>PyCon US 2025</category></item><item><title>Processing Large Geospatial Datasets with Dask &amp; Xarray</title><link>https://pyvideo.org/pycon-us-2025/processing-large-geospatial-datasets-with-dask-xarray.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geospatial datasets are growing in size, often exceeding 100TB and reaching into Petabyte scale. Many of these datasets are publicly available, providing a great resource for analysis, but working with them requires increasingly large computational resources and a diverse set of tools.&lt;/p&gt;
&lt;p&gt;We will start by briefly introducing Dask and Xarray, which form the backbone of the geospatial stack in Python. Using the ERA5 dataset as a case study, we will demonstrate how Xarray can be used to explore large-scale climate data effectively from your local laptop.&lt;/p&gt;
&lt;p&gt;Building on this foundation, we will delve into recent advancements in Dask Array. Originally designed as a parallel NumPy API, Dask Array was used to handle much larger datasets over the last few years. We’ll explore the latest developments in Dask and Xarray that continue to expand the scalability and capabilities of these tools to catch up with the scale requirements of modern datasets.&lt;/p&gt;
&lt;p&gt;This discussion will highlight improvements in ease of use, scalability, and performance. Additionally, we’ll present the first-ever set of geospatial benchmarks, collected earlier in 2024 from the community. These benchmarks provide a clear illustration of the scale at which Xarray and Dask are required to operate.&lt;/p&gt;
&lt;p&gt;Finally, we’ll offer a peak behind the scenes of an ongoing project aimed at building the first ever query optimizer for large scale array computations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Patrick Hoefler</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/processing-large-geospatial-datasets-with-dask-xarray.html</guid><category>PyCon US 2025</category></item><item><title>Programming for Yourself</title><link>https://pyvideo.org/pycon-us-2025/programming-for-yourself.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The career benefits of learning programming have become increasingly obvious over time, but few people talk about another great super-power you get from learning to program: the ability to make things that solve your own problems.&lt;/p&gt;
&lt;p&gt;In this talk, I'll go through a few case studies from my own life wherein knowing how to program not only allowed me to solve problems for myself, but also allowed me to recognize that the problem I was having had a solution at all.&lt;/p&gt;
&lt;p&gt;Additionally, I'll talk about ways the approach to engineering changes (and doesn't change!) when programming bespoke applications for a small audience.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/programming-for-yourself.html</guid><category>PyCon US 2025</category></item><item><title>Python: The Architect's Secret Weapon</title><link>https://pyvideo.org/pycon-us-2025/python-the-architects-secret-weapon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The built environment is undergoing a digital revolution, and Python is at the forefront. This talk will explore how Python, combined with open-source tools like Blender, OpenUSD, and Dynamo, is transforming the way we design, analyze, and construct buildings.&lt;/p&gt;
&lt;p&gt;We'll delve into practical applications, from generating 3D models to performing energy simulations and creating stunning visualizations. You'll learn how to harness the power of Python to address pressing challenges in the construction industry, such as climate change, resource scarcity, and urban development.&lt;/p&gt;
&lt;p&gt;So if you're interested in how Python can shape the built environment then come and see for yourself!&lt;/p&gt;
&lt;p&gt;Key Takeaways:&lt;/p&gt;
&lt;p&gt;Understand the role of Python in the Architecture and Construction industry.
Learn how professionals use Python to automate design and analysis tasks.
Explore the potential of open-source tools like Blender, OpenUSD, and Dynamo.
Discover how Python is used to create stunning visualizations and simulations of buildings.
Gain insights into the future of digital design and construction.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tadeh Hakopian</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/python-the-architects-secret-weapon.html</guid><category>PyCon US 2025</category></item><item><title>Safeguard your precious API endpoints built on FastAPI using OAuth 2.0</title><link>https://pyvideo.org/pycon-us-2025/safeguard-your-precious-api-endpoints-built-on-fastapi-using-oauth-20.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Audience Level: Beginners, Pythonistas who build on FastAPI who are not security experts but still need to deploy secure APIs.&lt;/p&gt;
&lt;p&gt;Is implementing authorization to your API endpoints an afterthought? Who should have access to your API endpoints? This talk covers using OAuth 2.0 to secure API endpoints (including ML endpoints) built on FastAPI following industry-recognized best practices. Come on a journey with me from taking your API endpoints to being not just functional but also secure. When you follow secure identity standards, you’ll be equipped with a deeper understanding of the critical need for authorization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Semona Igama</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/safeguard-your-precious-api-endpoints-built-on-fastapi-using-oauth-20.html</guid><category>PyCon US 2025</category></item><item><title>Schemas: The Key To Data Happiness</title><link>https://pyvideo.org/pycon-us-2025/schemas-the-key-to-data-happiness.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shape shifting data got you down? If you’re a Pythonista who works with data you’ve probably had at least one headache due to unexpected changes in data. In this talk you’ll see how to create, maintain, and leverage schemas to generate test and training data, improve data pipeline reliability, generate code, and some other neat tricks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sev Leonard</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/schemas-the-key-to-data-happiness.html</guid><category>PyCon US 2025</category></item><item><title>The Most Bizarre Software Bugs in History</title><link>https://pyvideo.org/pycon-us-2025/the-most-bizarre-software-bugs-in-history.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've all heard that we should test our software, but what happens when we don't? Sometimes, it leads to strange and unexplainable events.&lt;/p&gt;
&lt;p&gt;Is 'testing more' always the right solution? What do these bugs reveal about software and its failures? And how can we use these lessons to build more resilient systems?&lt;/p&gt;
&lt;p&gt;Let's take a look at the most bizarre software bugs in history.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Bajić</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/the-most-bizarre-software-bugs-in-history.html</guid><category>PyCon US 2025</category></item><item><title>The PyArrow revolution in Pandas</title><link>https://pyvideo.org/pycon-us-2025/the-pyarrow-revolution-in-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas has long used NumPy for its back-end storage. But things are changing, and the future of Pandas will likely be tied closely with PyArrow. What are Arrow and PyArrow? How do they affect Pandas users today, and how will they affect us in the future? Is PyArrow always faster than the current Pandas backend? In this talk, I introduce PyArrow, tell you what it does, how we can already use it in our Pandas work, and when it's appropriate for you to use it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reuven M. Lerner</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/the-pyarrow-revolution-in-pandas.html</guid><category>PyCon US 2025</category></item><item><title>This Talk Has Been Disabled</title><link>https://pyvideo.org/pycon-us-2025/this-talk-has-been-disabled.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depending on who you ask, 15-20% of the world's population has some form of disability. Despite this, the vast majority of software isn't fully accessible. Building truly accessible systems starts with asking questions. What does it mean to be disabled? How do we know whether people can use our website? And what if our users have access issues that we don't know about?&lt;/p&gt;
&lt;p&gt;Many of these core concepts are covered by the Web Content Accessibility Guidelines, which are the governing standard for web accessibility. However, some scenarios require us to dig a little deeper. We'll look at situations where you might need to think beyond the guidelines, and some of the resources and tools that you can use to help you do so.&lt;/p&gt;
&lt;p&gt;Finally, we'll learn how to meet a variety of different accessibility requirements by breaking down a series of real-world case studies. We'll take a magnifying glass to a household name's user interfaces, travel back in time to the GeoCities era, apply some concepts from government press conferences to online content delivery, hack a life-saving medical device, and attempt to navigate technical events (and stairs). By the end of the talk, you should understand why it's important to evaluate the accessibility of your software, what goes wrong when assessments don't happen, and how to apply these lessons to design systems that work for everyone.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dawn Cooper</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/this-talk-has-been-disabled.html</guid><category>PyCon US 2025</category></item><item><title>Tips and Tricks for JSON Web Tokens (JWTs)</title><link>https://pyvideo.org/pycon-us-2025/tips-and-tricks-for-json-web-tokens-jwts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;JSON Web Tokens (JWTs) are a neat tool useful in many contexts from simple demos to complicated multi-server architectures. The goal of the talk is to give developers a basic understanding of what JWTs are, why they are useful, and how to get started using them in python. JWTs can be as lightweight as a JWT library and a few decorators or as thorough as a full-fledged authentication architecture.&lt;/p&gt;
&lt;p&gt;When using public key encryption/signatures, validating the JWT does not need require maintaining state, secrets, passwords, or user databases. This makes JWTs a robust, efficient, and flexible tool for serverless applications, horizontal scaling (e.g., load balancing), microservices, and APIs.&lt;/p&gt;
&lt;p&gt;In this talk, I will provide an introduction to JWTs and provide a simple example of how they can be combined with decorators for easy and flexible authentication. The goal is to give developers unfamiliar with JWTs ideas on how and when to include them in their own applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emin Martinian</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/tips-and-tricks-for-json-web-tokens-jwts.html</guid><category>PyCon US 2025</category></item><item><title>Unraveling Community Support For Free-Threaded Python</title><link>https://pyvideo.org/pycon-us-2025/unraveling-community-support-for-free-threaded-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping the free-threaded build of Python 3.13 was just the first step towards unlocking scalable multithreaded parallelism in Python. To unlock improved performance for real-world compute tasks, the universe of community-maintained open source packages also needed to be updated. This is the story of the first year of that effort.&lt;/p&gt;
&lt;p&gt;We will share tools, techniques, and guidance gained from porting Cython, NumPy, SciPy, PyO3, and many other packages with C, Cython, C++, Fortran, and Rust native extensions to support free-threaded Python, illustrated by anecdotes from our experiences.&lt;/p&gt;
&lt;p&gt;Attendees will learn about tools and techniques to discover and fix thread safety issues and multithreaded scaling bottlenecks in packages with native extensions or dependencies. If you are unsure about how to support free-threaded Python in a package you maintain, we hope that this talk will give you a plan and the toolbox necessary to accomplish the task.&lt;/p&gt;
&lt;p&gt;This talk is targeted at developers and maintainers of Python packages that include native dependencies as well as people who are interested in contributing to community packages that include native code. We assume some prior knowledge with native Python extensions written in C, C++, Rust, or Cython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lysandros Nikolaou</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/unraveling-community-support-for-free-threaded-python.html</guid><category>PyCon US 2025</category></item><item><title>Usando Python y Gemini para visualizar alertas sanitarias en una web accesible</title><link>https://pyvideo.org/pycon-us-2025/usando-python-y-gemini-para-visualizar-alertas-sanitarias-en-una-web-accesible.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se expondrá cómo se usa Flask y Gemini para obtener información de interés desde distintos sitios web no estructurados. Adicionalmente, se discutirán atajos para web-scraping con Python, en un formato legible para Gemini. Esta sesión está dirigida a personas interesadas en IA y con conocimiento básico de Python, así como para profesionales curiosos, en busca de nuevas aplicaciones de IA. La motivación de este proyecto surge pues en Chile las alertas sanitarias en medicamentos, especialmente en anticonceptivos, han sido un problema grave que impacta con más énfasis a mujeres y sus derechos reproductivos. Por ejemplo, alrededor de 200 mujeres fueron afectadas sólo en el primer fallo documentado de anticonceptivos en el segundo semestre de 2020. La solución del gobierno de la época fue indemnizar a las afectadas que demandaron, con 80.000 pesos Chilenos, (80 USD app). Desafortunadamente no fue el único caso, de hecho la última alerta informada de anticonceptivos defectuosos data de septiembre de 2024. En esta charla se presentará una web app para resolver el problema del acceso a la información sobre las alertas sanitarias de medicamentos defectuosos en Chile, usando IA generativa y frameworks web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lía Da Silva-Rojas</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/usando-python-y-gemini-para-visualizar-alertas-sanitarias-en-una-web-accesible.html</guid><category>PyCon US 2025</category></item><item><title>Using Rust in Free-Threaded vs Regular Python 3.13</title><link>https://pyvideo.org/pycon-us-2025/using-rust-in-free-threaded-vs-regular-python-313.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.13's new free-threaded build [&lt;a class="reference external" href="https://peps.python.org/pep-0703/"&gt;https://peps.python.org/pep-0703/&lt;/a&gt;] brings the possibility of true parallel execution into Python code for the first time.&lt;/p&gt;
&lt;p&gt;This brings promise of significant performance opportunity, but not without cost. Parallel execution is notorious for being challenging due to the additional complexity. This implies bugs, and the risk is particularly high for the compiled code powering Python - including the CPython interpreter itself (it's written in C). The main risk comes from data races, which can cause unpredictable and potentially dangerous crashes.&lt;/p&gt;
&lt;p&gt;The Rust programming language is designed to prevent data races by construction; if your code runs, it should be data race free (unless you misuse unsafe Rust).&lt;/p&gt;
&lt;p&gt;We'll explore the way that Rust does this, both from the rules of the language, and by the data structures it offers to complement those rules. We'll showcase this with examples of Rust (PyO3) code designed for &amp;quot;regular&amp;quot; Python 3.13 and how it changes to become compatible with the free-threaded build.&lt;/p&gt;
&lt;p&gt;This will lead onto ideas which we can carry across languages to influence how we write Python (and maybe C/C++) to be correct in a free-threaded world, before closing with some tantalizing examples of software architectures made possible by free-threaded Python.&lt;/p&gt;
&lt;p&gt;No prior Rust knowledge necessary.&lt;/p&gt;
&lt;p&gt;What you should hope to take away from this talk: - a basic understanding of how the free-threaded build of Python is different to the regular one, - an appreciation for the complexity of free-threading for compiled code, - how Rust helps you reason about this complexity, and - excitement for the future of free-threaded Python!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Hewitt</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/using-rust-in-free-threaded-vs-regular-python-313.html</guid><category>PyCon US 2025</category></item><item><title>Welcome</title><link>https://pyvideo.org/pycon-us-2025/welcome.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome to PyCon US 2025 from Conference Chair, Elaine Wong.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elaine Wong</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/welcome.html</guid><category>PyCon US 2025</category></item><item><title>Who Tests the Testers? Making and Testing Pipelines</title><link>https://pyvideo.org/pycon-us-2025/who-tests-the-testers-making-and-testing-pipelines.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You likely have a good pipeline that either runs tests, lints, or deployments for your project.&lt;/p&gt;
&lt;p&gt;But when it comes to changing that pipeline, how sure are you that it works before taking those changes live?&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore why it doesn't have to be the case that &amp;quot;there's no devops for devops&amp;quot;.&lt;/p&gt;
&lt;p&gt;We'll give a quick run down of what pipelines are, and why they should be used, before we give an example where it can be hard to know whether making changes to a pipeline will fail, and why that can be the case.&lt;/p&gt;
&lt;p&gt;Then, we'll showcase tools and methodologies that can be used for testing, creating, and simulating pipelines, so you too can setup a system to always be sure that your pipeline changes won't cause any water damage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Kohilas</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/who-tests-the-testers-making-and-testing-pipelines.html</guid><category>PyCon US 2025</category></item><item><title>Working with Audio in Python (feat. Pedalboard)</title><link>https://pyvideo.org/pycon-us-2025/working-with-audio-in-python-feat-pedalboard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Digital audio has been around for as long as computers, but working with audio data can still be complicated, especially in Python. In this talk, we'll talk about how digital audio works from the ground up (from sounds, to bytes, to files), how you can use Python to do a bunch of really neat things with audio, and how a Python library - Pedalboard - helps make working with audio much easier.&lt;/p&gt;
&lt;p&gt;Ever used a digital audio workstation (DAW) like GarageBand, Ableton Live, Logic, or Pro Tools? Today's musicians use DAWs as instruments in themselves. But what if you want to combine the power of a DAW with the flexibility of writing your own code?&lt;/p&gt;
&lt;p&gt;Pedalboard was built to fill this niche: to pull the power of a DAW into your Python code. Pedalboard makes it easy to build and apply audio effects, read and write audio files, and load audio plug-ins (&amp;quot;VSTs&amp;quot;) without any complicated dependencies or frameworks. Just import pedalboard and go!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Sobot</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/working-with-audio-in-python-feat-pedalboard.html</guid><category>PyCon US 2025</category></item><item><title>World's First Undoable Notebook</title><link>https://pyvideo.org/pycon-us-2025/worlds-first-undoable-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive Notebooks (e.g., Jupyter, Colab) are widely used for data science tasks such as data analysis, data visualization, and model training. A fundamental limitation of vanilla notebook frameworks is the inability to undo the effect of cell executions on the session state, e.g., users cannot ‘un-drop’ dataframe columns. In this talk, I will describe our ongoing work on adding automated, lightweight checkpointing in notebook sessions to address this issue.&lt;/p&gt;
&lt;p&gt;This talk should be interesting for an intermediate-level audience who have some experience with using Python-based notebooks and common data science libraries (e.g., Pandas, Matplotlib) and have experienced first-hand the various issues of existing notebook frameworks (e.g., no undos, non-persistent state). This talk will assume prior knowledge of notebook basics and terminology (e.g., cell executions, session state).&lt;/p&gt;
&lt;p&gt;Attendees will learn about how incremental checkpointing and versioning techniques commonly utilized in databases can be adapted to work well with interactive notebooks. At a more detailed level, they will learn about the characteristics of typical notebook workloads and how information (e.g., dependencies between variables) required for incremental checkpointing can be profiled from cell executions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zhaoheng Li</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/worlds-first-undoable-notebook.html</guid><category>PyCon US 2025</category></item><item><title>Accelerated Python: The Community and Ecosystem (Sponsor: NVIDIA)</title><link>https://pyvideo.org/pycon-us-2025/accelerated-python-the-community-and-ecosystem-sponsor-nvidia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is everywhere. Simulation, data science, and Gen AI all depend on it. Unfortunately, the dizzying array of tools leaves a newcomer baffled at where to start. We'll take you on a guided tour of the vibrant community and ecosystem surrounding accelerated Python programming. Explore a variety of tools, libraries, and frameworks that enable efficient computation and performance optimization in Python, including CUDA Python, RAPIDS, Warp, and Legate. We'll also discuss integration points with PyData, PyTorch, and JAX communities. Learn about collaborative efforts within the community, including open source projects and contributions that drive innovation in accelerated computing. We'll discuss best practices for leveraging these frameworks to enhance productivity in developing AI-driven applications and conducting large-scale data analyses.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Tanner</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/accelerated-python-the-community-and-ecosystem-sponsor-nvidia.html</guid><category>PyCon US 2025</category></item><item><title>Build modern Python apps on Azure (Sponsor: Microsoft)</title><link>https://pyvideo.org/pycon-us-2025/build-modern-python-apps-on-azure-sponsor-microsoft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For software engineers today, developing Python apps and getting them to the cloud can be a serious hassle. Join us to explore a streamlined end-to-end experience of developing cloud-ready Python applications with Microsoft technologies!&lt;/p&gt;
&lt;p&gt;We'll cover how to build and deploy applications to Azure that use modern async frameworks, generative AI, and open-source databases like PostgreSQL.&lt;/p&gt;
&lt;p&gt;By the end, you'll learn how save time and supercharge your development workflows with fan-favorite Python developer tools like VS Code, our Python extension, and GitHub Copilot - all without leaving your IDE!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pamela Fox</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/build-modern-python-apps-on-azure-sponsor-microsoft.html</guid><category>PyCon US 2025</category></item><item><title>Building AI Applications the Pydantic Way (Sponsor: Pydantic)</title><link>https://pyvideo.org/pycon-us-2025/building-ai-applications-the-pydantic-way-sponsor-pydantic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AI is becoming an increasingly common part of software development, but best practices for building and maintaining AI-powered applications are still evolving. Many developers are experimenting with LLMs, but figuring out how to structure AI applications effectively—let alone debug and monitor them—can be a challenge. The good news? AI development is just software development—with a few unique twists. You don't need to reinvent engineering principles to work with LLMs, but you do need the right design patterns and development tools to build reliable AI applications efficiently. In this talk, we'll share an opinionated blueprint for AI development in Python, covering both PydanticAI, an open-source AI agent framework, and Pydantic Logfire, an observability platform that helps you understand and debug your AI applications. You'll learn practical techniques for structuring LLM-powered systems, tracking and evaluating model behavior, and integrating AI features into larger software projects—using familiar tools and proven patterns. Whether you're already building AI applications or just curious about how best to approach them, this session will give you a clear, pragmatic foundation for writing AI-powered software in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Samuel Colvin</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/building-ai-applications-the-pydantic-way-sponsor-pydantic.html</guid><category>PyCon US 2025</category></item><item><title>Building Scalable AI Tool Servers with Model Context Protocol (MCP) and Heroku (Sponsor: Heroku)</title><link>https://pyvideo.org/pycon-us-2025/building-scalable-ai-tool-servers-with-model-context-protocol-mcp-and-heroku-sponsor-heroku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large Language Models (LLMs) become vastly more powerful when given the ability to call external tools to gather information and take real-world actions - such as querying APIs, modifying databases, or kicking off workflows. This talk explores how to build and scale these tool servers using Python and the Model Context Protocol (MCP).&lt;/p&gt;
&lt;p&gt;MCP is an open-source protocol that provides a standardized request format and response structure for LLMs interacting with external tools, ensuring consistency while allowing flexible execution under the hood. We’ll walk through implementing an MCP-compliant tool server in Python, covering topics like transport types, the connection lifecycle, and best practices.&lt;/p&gt;
&lt;p&gt;LLM tool servers must handle increasing traffic efficiently, requiring strategies for load balancing, container orchestration, and cloud deployment. We’ll discuss scaling Python services horizontally using load balancing and container orchestration. This includes practical considerations for deploying on 12-Factor App platforms like Heroku.&lt;/p&gt;
&lt;p&gt;Through live coding, we’ll implement, deploy, and scale an MCP-compliant tool server using Python. We’ll also demonstrate how an LLM can interact with MCP tool servers, enabling you to build powerful, API-driven AI agents.&lt;/p&gt;
&lt;p&gt;Attendees will gain hands-on knowledge of building, deploying, and scaling Python-based MCP tool servers and AI agents, made simple with Heroku’s streamlined deployment process.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hillary Sanders</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/building-scalable-ai-tool-servers-with-model-context-protocol-mcp-and-heroku-sponsor-heroku.html</guid><category>PyCon US 2025</category></item><item><title>DataComPy - Dataframe Comparisons made Explicit (Sponsor: Capital One)</title><link>https://pyvideo.org/pycon-us-2025/datacompy-dataframe-comparisons-made-explicit-sponsor-capital-one.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DataComPy is a widely used validation tool with over 1.1 million monthly installations, written to quickly and comprehensively compare a pair of dataframes. Designed to help make differences between schemas and data clear and explicit, DataComPy generates a comprehensive report at the completion of all comparisons, providing useful metrics such as match percentages, maximal differences, and sample mismatches between comparable columns. In addition, it supports various forms of input data types for both native (Pandas, Polars, Spark, Snowpark) and indirect (Dask, Ray) comparisons. It also supports comparison of certain types of database tables, including Snowflake and DuckDB. Over the course of the presentation, we'll be delving further into how DataComPy works, what features it provides, and what types of practical use cases it is designed to help address.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Akshay Gupta</dc:creator><pubDate>Thu, 15 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-15:/pycon-us-2025/datacompy-dataframe-comparisons-made-explicit-sponsor-capital-one.html</guid><category>PyCon US 2025</category></item></channel></rss>