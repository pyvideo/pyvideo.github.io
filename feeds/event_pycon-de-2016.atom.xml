<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-de-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-30T00:00:00+00:00</updated><entry><title>Building and Launching a SaaS Product with Python in 2 Weeks: A Shopify App Postmortem</title><link href="https://pyvideo.org/pycon-de-2016/building-and-launching-a-saas-product-with-python-in-2-weeks-a-shopify-app-postmortem.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Daniel Bader</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/building-and-launching-a-saas-product-with-python-in-2-weeks-a-shopify-app-postmortem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;The story of how I used Python + Django to build and launch a tiny paid SaaS app in two weeks and how you can do the same. The goal of my talk is to show you how to use the Shopify app store as a test bed for your own Python SaaS apps and to help you avoid the mistakes I made.&lt;/dt&gt;
&lt;dd&gt;We will cover the general logistics of a project like that and how you can leverage your Python skills to either gain experience building and launching software products, or to get exposure for your consulting services.&lt;/dd&gt;
&lt;/dl&gt;
</summary></entry><entry><title>Connexion - API-First Framework for Python</title><link href="https://pyvideo.org/pycon-de-2016/connexion-api-first-framework-for-python.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>João Santos</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/connexion-api-first-framework-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;Connexion is an open source API first REST framework for Python, built on top of Flask and based on Swagger, targeted for microservice development. Connexion automagically handles request routing, oauth2 security, request validation and response serialization based on a Swagger 2.0 Specification file in YAML, so you don’t have to care about boilerplate anymore. Because it is based on Flask it supports everything that Flask does, including deployment options and extensions.&lt;/dt&gt;
&lt;dd&gt;At Zalando we’ve adopted “API First” as one of our key engineering principles, to ensure our API are robust, consistent, general and abstracted from specific implementation and use cases. But when we tried to implement this principle for the first time we were faced with the lack of a python framework to achieve it in a easy fashion - there were several frameworks that produce a swagger definition from the implementation but none that do it the other way around - so we decided to fill that gap.&lt;/dd&gt;
&lt;/dl&gt;
</summary></entry><entry><title>Cynefin: why do things break and why is it hard to fix them?</title><link href="https://pyvideo.org/pycon-de-2016/cynefin-why-do-things-break-and-why-is-it-hard-to-fix-them.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Christian Theune</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/cynefin-why-do-things-break-and-why-is-it-hard-to-fix-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'll review things that broke for me in the last year: Python utilities I maintain, customer software, and infrastructure. I'll introduce and use the Cynefin framework to reflect upon those incidents and to select appropriate strategies to fix things.&lt;/p&gt;
</summary></entry><entry><title>Debug like a pro. How to become a better programmer through pdb-driven development</title><link href="https://pyvideo.org/pycon-de-2016/debug-like-a-pro-how-to-become-a-better-programmer-through-pdb-driven-development.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Philip Bauer</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/debug-like-a-pro-how-to-become-a-better-programmer-through-pdb-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Philip Bauer talks about pdb-driven development.&lt;/p&gt;
</summary></entry><entry><title>djangoSHOP is back</title><link href="https://pyvideo.org/pycon-de-2016/djangoshop-is-back.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Jacob Rief</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/djangoshop-is-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2010 Divio, the company behind djangoCMS started to develop djangoSHOP. Now after two years of silence, a new version of djangoSHOP is back, offering a REST API and a Finite State Machine for programmable workflows. Nevertheless djangoSHOP aims to be a minimalistic, but feature complete e-commerce framework, applying modern concepts such as Atomic Web Design as propagated by Brad Frost. This shifts page centric development with Models, Views and Templates to component based development using Models, Serializers and Atoms or Molecules.&lt;/p&gt;
</summary></entry><entry><title>Getting Native with Cython</title><link href="https://pyvideo.org/pycon-de-2016/getting-native-with-cython.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Stefan Behnel</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/getting-native-with-cython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cython is not only an excellent and widely used tool to speed up computational Python code, it’s also a very comfortable way to talk to native code and libraries. The Cython compiler translates Python code to C or C++ code, and supports static type annotations to allow direct use of C/C++ data types and functions. The tight integration of all three languages makes it possible to freely mix Python features like generators and comprehensions with C/C++ features like native data types, pointer arithmetic or manually tuned memory management in the same code.
This talk by a core developer introduces the Cython compiler by interactive code examples and presents recent enhancements in the language that continue to make Cython the best choice for the development of fast and portable Python extensions.&lt;/p&gt;
</summary></entry><entry><title>Hunting for the best NoSQL database. Why we love ArangoDB</title><link href="https://pyvideo.org/pycon-de-2016/hunting-for-the-best-nosql-database-why-we-love-arangodb.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Andreas Jung</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/hunting-for-the-best-nosql-database-why-we-love-arangodb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We have been using the Zope Object Database (ZODB) in various Zope and Plone projects for more than 15 years in addition to various RDBMS-driven projects based on Postgres and the well-known SQLAlchemy stack for Python. Over the years we have been using and evaluating various so-called NoSQL databases in various projects. My talk will cover experiences with Cassandra, MongoDB and others.
All experiences and statements are completely biased and personal. Choosing a new database is always like a hunt - you have different requirements in each project and you are always looking for the perfect solution. However there is no perfect solution - in particular no in the NoSQL world. All NoSQL databases set different priorities under the constraints of the CAP theorem (a database can fulfill only two out of the three aspects availabilty, consistency and partitioning tolerance). While evaluating many other NoSQL database we came to ArangoDB which is a multi-model database which appears a nice mixture of all requirements that we (we as solution provider for CMS and web solutions) often have. A document store with the features of the graph database. Together with partitioning and clustering support ArangoDB 3.0 appears to be the best option further projects. As written: this talk is completely biased and unscientific (not comparing all NoSQL features across all possible NoSQL databases).&lt;/p&gt;
</summary></entry><entry><title>Managing dependencies of Python projects</title><link href="https://pyvideo.org/pycon-de-2016/managing-dependencies-of-python-projects.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Jonathan Stoppani</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/managing-dependencies-of-python-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python package distribution ecosystem has improved a lot in recent years. Different methodologies and tooling have emerged to help deal with defining and installing the dependencies of a Python project, be it a library, a framework or a final product.The tools, techniques and approaches available scale up with varying levels of efficiency and success. In the Aldryn infrastructure, we deal with huge numbers of deployments, that need to be fast and repeatable. I'll discuss how we dealt with dependency management challenges, the lessons learnt and tools developed. These lessons are valuable and applicable even if you only need to deal with a few - rather than a few thousand - Python deployments. Getting dependency management right will help ensure your projects work now and in the future, across multiple installs or deployments.&lt;/p&gt;
</summary></entry><entry><title>Manipulating and analysing multi-dimensional data with Pandas</title><link href="https://pyvideo.org/pycon-de-2016/manipulating-and-analysing-multi-dimensional-data-with-pandas.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Sahil Dua</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/manipulating-and-analysing-multi-dimensional-data-with-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be based on open source data manipulation and analysis python library – Pandas. It will mainly focus on exploring the most commonly used features of the library like – integrated indexing using DataFrame objects, slicing and subsetting of large data sets, merging, joining and size mutability of data structures, hierarchical axis indexing to work with high-dimensional data in a lower-dimensional data, flexible reshaping and pivoting of data sets etc. Basically, this talk will give you an overview of the most useful features of this library.&lt;/p&gt;
</summary></entry><entry><title>MSS - Software for planning research aircraft missions</title><link href="https://pyvideo.org/pycon-de-2016/mss-software-for-planning-research-aircraft-missions.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Reimar Bauer</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/mss-software-for-planning-research-aircraft-missions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scientific aircraft research flights have to be planned beforehand. For that it is necessary to have model forecasts of relevant quantities suchas meteorological parameters, chemical composition or particle information to guide the aircraft to the location of interest. Typically, many scientific instruments on board those aircrafts used to investigate e.g. the chemical composition of the air in order to get new insights often with the involvement of different science groups.For discussion of the possibilites of the research flights, the Mission Support System (MSS) was developed. This software helps to review a bigamount of metereological and model data by viewing the forecasted parameters of interest along possible regions of a proposed flight path. Data and possible flight paths can be displayed on a horizontal view (map projection) or on a vertical view (along the proposed flight path). Flight paths can be constructed and modified on these views. I/O through a waypoint table is also possible.The talk gives a brief insight into the MSS software development.We are using the OWS interface standard.https://geopython.github.io/OWSLib/MSS is a client/server application. The QT client interacts with a paste wsgi server. The software is available for all platforms on conda-forge.&lt;/p&gt;
</summary></entry><entry><title>Optimize Thyself</title><link href="https://pyvideo.org/pycon-de-2016/optimize-thyself.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Nejc Zupan</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/optimize-thyself.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There’s a ton of digital ink spent on the subject of productivity. Choosing the right tools, the right editor, the right plugins, the right OS, mapping keyboard shortcuts, using mouse gestures, the list goes on and on.
This is not what this talk is about! It’s about everything else around your computer that can boost or kill your productivity. It’s about efficient communication, getting things done, working less while doing more, sleeping good, keeping your blood sugar at optimal levels, and ultimately, staying healthy.
How should I know? I’m juggling my time between my lifetime addiction to windsurfing , being a father and running a successful Python shop. My working time is very limited and I need to make the most of it. In this talk I’ll go through what works for me and point to research on the subject.&lt;/p&gt;
</summary></entry><entry><title>Powered by Python: Summarizing hotel reviews for 10,000 hotels and 100 million travelers</title><link href="https://pyvideo.org/pycon-de-2016/powered-by-python-summarizing-hotel-reviews-for-10000-hotels-and-100-million-travelers.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Steffen Wenz</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/powered-by-python-summarizing-hotel-reviews-for-10000-hotels-and-100-million-travelers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TrustYou is causing quite a stir in the travel industry: Our hotel review summaries, generated with machine learning and a bit of magic, are shown on Google, Hotels.com and many others. Our review analysis software is used by 10,000 hotels to improve their services.
And all this is done in Python! Join this talk for an overview of the various use cases Python supports us with, and the many great open source libraries we benefit from.&lt;/p&gt;
</summary></entry><entry><title>Python at Warp Speed</title><link href="https://pyvideo.org/pycon-de-2016/python-at-warp-speed.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/python-at-warp-speed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Schreiber talks about making Python run faster.&lt;/p&gt;
</summary></entry><entry><title>Python for standalone applications</title><link href="https://pyvideo.org/pycon-de-2016/python-for-standalone-applications.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Stefanie Lück</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/python-for-standalone-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many end users are used to applications with a graphical user interface (GUI). This is especially true in fields such as life science or humanistic disciplines. Therefore, the development of user-friendly GUI’s is a common task for some Python programmers. While a modern web application could be an alternative , often a permanent Internet access is not possible or not desired because of data confidentiality issues. In such cases a standalone application is required.Although several powerful and feature-rich GUI toolkits, such as Qt, or plotting libraries like matplotlib exist, they are often too low-level and add considerable complexity, especially for small and simple applications. Combined with the efforts for deploying the software on different operation systems, developing the interface may take significantly more time than writing the core application logic. Again, this effect is stronger the smaller the applications.
Therefore, we would like to initiate a discussion in the Python community about assembling and adapting of existing libraries into a compact and easy to use package which features: - Simple development of a contemporary looking GUI - Simple integration of plotting basic but modern looking scientific plots - Simple cross-platform deployment Such a package may facilitate the development of lightweight applications significantly. Furthermore, it can be of a great help for anyone who makes his/her first steps in Python programming, and thus to increase the popularity of the language.In this talk, we present several standalone bioinformatics applications with a graphical user interface. We provide examples of the problems we faced and how we overcame them. Furthermore, we demonstrate the repeated workflow steps for creating the GUI and making the application stand-alone for different platforms. Based on these experiences, we propose a high-level framework that greatly facilitates the development of such kinds of applications.&lt;/p&gt;
</summary></entry><entry><title>Remote controlling a fish brain with Python</title><link href="https://pyvideo.org/pycon-de-2016/remote-controlling-a-fish-brain-with-python.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Joe Donovan</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/remote-controlling-a-fish-brain-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joe Donovan talks about using Python to control a fish brain.&lt;/p&gt;
</summary></entry><entry><title>Using Cognitive Services in Python Projects</title><link href="https://pyvideo.org/pycon-de-2016/using-cognitive-services-in-python-projects.html" rel="alternate"></link><published>2016-10-30T00:00:00+00:00</published><updated>2016-10-30T00:00:00+00:00</updated><author><name>Mustafa Kasap</name></author><id>tag:pyvideo.org,2016-10-30:pycon-de-2016/using-cognitive-services-in-python-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will mention about the features of Cognitive services, which is part of Cortana Intelligence Suite. With short demos, we will demonstrate how simple it is to use Vision, Speech, Language, Knowledge and Search APIs in a Python projects.&lt;/p&gt;
</summary></entry><entry><title>Data Formats for Data Science</title><link href="https://pyvideo.org/pycon-de-2016/data-formats-for-data-science.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Valerio Maggio</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/data-formats-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The plain text is one of the simplest yet most intuitive format in which data could be stored. It is easy to create, human and machine readable, storage-friendly (i.e. highly compressible), and quite fast to process. Textual data can also be easily structured; in fact to date the CSV (Comma Separated Values) is the most common data format among data scientists.
However, this format is not properly suited in case data require any sort of internal hierarchical structure, or if data are too big to fit in a single disk.
In these cases, other formats must be considered, according to the shape of data, and the specific constraints imposed by the context. These formats may include general purpose solutions, e.g. [No]SQL databases, HDFS (Hadoop File System); or may be specifically designed for scientific data, e.g. hdf5, ROOT, NetCDF.
In this talk, I would like to discuss strength and flaws of each solution w.r.t. their usage for scientific computations in order to provide some practical guidelines for data scientists. The different data formats will be presented in combination with a set of related Python projects, that will be analysed and compared in terms of efficiency and features provided.&lt;/p&gt;
</summary></entry><entry><title>Deep modeling of DNA sequences with Python &amp; Keras</title><link href="https://pyvideo.org/pycon-de-2016/deep-modeling-of-dna-sequences-with-python-keras.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Gökçen Eraslan</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/deep-modeling-of-dna-sequences-with-python-keras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ordered sequences of molecules are the central concept of biological information. The DNA is composed of the 4 nucleotides (A, C, G, T) and is used to persist information over generations. Our understanding of these DNA sequences is very limited. We cannot read them like a book, we still have not learned their grammar and vocabulary. Consequently, there is no way to predict the biological purpose of a stretch of DNA from the sequence alone.Deep learning methods offer new ways to bring light into the darkness of our genome and to elucidate the structure of genes and their regulation.
However, the interpretability of deep models and difficulties with modeling long, variable-length sequences hinder the use of deep learning in biology.We are working on new approaches to deal with these issues. Examples are sequence classification using convolutional neural networks and generative models for variable-length sequences using recurrent variational autoencoders.
In this talk, we will give an overview of biological sequences, their fascinating properties and their relevance for disease biology. We will demonstrate some of our methods and their application. Finally, we will show some general ideas drawn from our research which are relevant for other topics.&lt;/p&gt;
</summary></entry><entry><title>Infrastructure as Code with AWS CloudFormation</title><link href="https://pyvideo.org/pycon-de-2016/infrastructure-as-code-with-aws-cloudformation.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Justyna Janczyszyn</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/infrastructure-as-code-with-aws-cloudformation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk is about:- what is infrastructure as code- best practices- benefits- introduction to cloudformation- practical demo showing how to use cloudformation templates to set up and manage the infrastructure for a sample django project (will include VPC, Security groups, EC2, RDS, IAM roles and policies, s3 bucket)&lt;/p&gt;
</summary></entry><entry><title>Introduction to Time Series Analysis with Pandas</title><link href="https://pyvideo.org/pycon-de-2016/introduction-to-time-series-analysis-with-pandas.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/introduction-to-time-series-analysis-with-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most data is allocated to a period or to some point in time. We can gain a lot of insight by analysing what happened when. The better the quality and accuracy of our data, the better our predictions can become.
Unfortunately the data we have to deal with is often aggregated for example on a monthly basis, but not all months are the same, they may have 28 days, 31 days, have four or five weekends,… It’s made fit to our calendar that was made fit to deal with the earth surrounding the sun, not to please Data Scientists.
Dealing with periodical data can be a challenge.
Pandas is a powerful framework for working with time series data and can make your life a lot easier.
This talks will feature:
how to analyse periodical data with pandasread and write data in various formatshow to mangle, reshape and pivotgain insights with statsmodels (e.g. seasonality)caveats when working with timed datavisualize your data on the fly&lt;/p&gt;
</summary></entry><entry><title>Optimizing Deep Convolutional Neural Networks for Speed and Performance</title><link href="https://pyvideo.org/pycon-de-2016/optimizing-deep-convolutional-neural-networks-for-speed-and-performance.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Arush Kakkar</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/optimizing-deep-convolutional-neural-networks-for-speed-and-performance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will be focusing on techniques to run the DCNNs as efficiently as possible in terms of : 1) Decrease running time on CPU 2) Decrease running time on GPU 3) Increase performance in case of very little data.
There will be a few strategies taught which will allow the neural networks to train and run much faster on CPUs without compromising on the accuracy. A few of them will be changing the neural network itself, which others will focus more on using tools to enhance performance. I have ran very deep neural networks in real-time on CPUs using some of the techniques which will presented.The latter half of the talk will be focused on increasing performance in case there is very little data. I have personally achieved accuracies of above 90% using Deep Neural Networks when there are only a few hundreds of images available as training data. I'll be sharing some of those intuitions in this talk, including concepts like initialization, normalization, tweaking the learning rate, regularization, when to finetune and when not to etc.
The whole talk will be focused on using Python to run Deep Neural Networks using the Theano/Keras library, which is the most popular deep learning library and is used widely by amateurs and professionals alike.It will not be a theoretical talk where I talk about theories to achieve something. I'll demonstrate how changing certain parameters (variables in Keras) change the performance in terms of speed, accuracy and size of model&lt;/p&gt;
</summary></entry><entry><title>Plone and Python Community: a Long Journey</title><link href="https://pyvideo.org/pycon-de-2016/plone-and-python-community-a-long-journey.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Alexander Loechel</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/plone-and-python-community-a-long-journey.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexander Loechel talks about Plone.&lt;/p&gt;
</summary></entry><entry><title>Processing music on the fly with Python</title><link href="https://pyvideo.org/pycon-de-2016/processing-music-on-the-fly-with-python.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Anna Wszeborowska</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/processing-music-on-the-fly-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Music transcription allows to convert an audio recording to musical notation through mathematical analysis. It is a very complex problem, especially for polyphonic music - currently existing solutions yield results with approx. 70% or less accuracy.
In the talk we will focus on transcribing a monophonic audio input and see how we can modify it on the fly. To achieve that, we need to determine pitch and duration of each note, and then use these parameters to create a sequence of MIDI events. MIDI stands for Musical Instrument Digital Interface and it encodes commands used to generate sounds by musical hardware or software.
Let’s see how to play around with sounds using Python and a handful of its powerful libraries. And let’s do it in real-time!&lt;/p&gt;
</summary></entry><entry><title>Profiling the Unprofilable</title><link href="https://pyvideo.org/pycon-de-2016/profiling-the-unprofilable.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Dmitry Trofimov</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/profiling-the-unprofilable.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a program is not fast enough, we call on the profiler to save us.But what happens when the program is hard to profile, like for instance the Python Debugger? In this talk we're going dive deep into Vmprof, a Python profiler, and see how it helps us find out why a debugger can be slow. Once we find the culprit, we'll use Cython to optimise things.&lt;/p&gt;
</summary></entry><entry><title>Reliable and effective tools for testing professional Python code</title><link href="https://pyvideo.org/pycon-de-2016/reliable-and-effective-tools-for-testing-professional-python-code.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Rafael Carício</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/reliable-and-effective-tools-for-testing-professional-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is unquestionable that one of the main characteristics of a health software project is the existence of well written tests. Furthermore, choosing the right tools for writing and running those tests are essential for the maintainability of the code base. Those tools need to provide reliability and be effective in the context of executing the tests to enable a productive environment for the software developer. Yet choosing the right tools might not be so obvious for a typical Python developer, since Python open source community maintains a wide range of tools for writing and running tests. This leads to confusion and doubts on which tools are the most suitable to be used in our Python projects.As a result of years of experience creating and maintaining Python projects, in this talk I will present a set of tools that were most successful in providing me reliable and effective Python testing environments. Moreover, it will incorporate code snippets and examples to illustrate how to make use of those tools in professional Python projects.&lt;/p&gt;
</summary></entry><entry><title>Reproducible Science with Python</title><link href="https://pyvideo.org/pycon-de-2016/reproducible-science-with-python.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/reproducible-science-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In science, results that are not reproducible by peer scientists are valueless and of no significance. Good practices for reproducible science are to publish used codes under Open Source licenses, perform code reviews, save the computational environments with containers (e.g., Docker), use open data formats, use a data management system, and record the provenance of all actions.This talk shows how to record the provenance of code development, code execution, and data management using a standard format for provenance and accompanying Python libraries. In particular, how to gather the provenance of an development process based on Git, how to gather provenance of any Python script and of any IPython/Jupyter notebook, and how to gather provenance of a paper written in LaTeX. Finally, the talk shows how use Python to analyze and explore the provenance, which is stored in a graph database (Neo4J).&lt;/p&gt;
</summary></entry><entry><title>SSL all the things</title><link href="https://pyvideo.org/pycon-de-2016/ssl-all-the-things.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/ssl-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years SSL/TLS encryption of not only websites but many other services as well has risen tremendously. The Let’s Encrypt organization and certificate authority (CA) makes that pretty easy. Since September 2015 more than 10 million certificates have been issued. And you can use it, too. For free!In this talk I'll give a quick introduction how SSL/TLS works. I’ll briefly layout the Let's Encrypt ACME protocol and explain what you need to make use of it. I will then give some examples of how to use SSL in Python while not shooting yourself in the foot or knee.&lt;/p&gt;
</summary></entry><entry><title>When We Were Young and In Love</title><link href="https://pyvideo.org/pycon-de-2016/when-we-were-young-and-in-love.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2016-10-29:pycon-de-2016/when-we-were-young-and-in-love.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An open-source software project is like a personal relationship: it can never endure on excitement and enthusiasm alone. Like a relationship, it has to be able to develop and mature - and that means it must also keep changing. And, less romantically but crucially, it must also learn to talk about money.&lt;/p&gt;
</summary></entry></feed>