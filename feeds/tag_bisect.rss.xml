<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 18 Jul 2011 00:00:00 +0000</lastBuildDate><item><title>Python's other collection types and algorithms</title><link>https://pyvideo.org/europython-2011/pythons-other-collection-types-and-algorithms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Dalke - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's impossible to use Python without learning about lists, dictionaries
and tuples, and most people have at least heard about sets. These four
collection types are so important and useful that Python has special
syntax for creating them.&lt;/p&gt;
&lt;p&gt;Fewer people know about Python's other built-in collection data types
and algorithms. A deque supports fast appends and pops from both ends
and is great for breath-first searches, the heapq module helps you
construct a priority queue on top of lists, and the bisect module is
handy for quick binary searches of an already sorted list.&lt;/p&gt;
&lt;p&gt;The defaultdict uses the dict &lt;strong&gt;missing&lt;/strong&gt; hook as a better solution to
setdefault, OrderedDict is a dictionary that preserves insertion order,
and Counter is a dictionary specialized for counting hashable objects. A
namedtuple is handy if you want to support both index and attribute
lookups for the same item, and a frozenset is a hashable form of a set
which can be used as keys in a dictionary or set.&lt;/p&gt;
&lt;p&gt;My talk will go over these 8 different classes and modules. I'll give
concrete examples of how to use them and why they are useful. The target
audience is intermediate programmers who are familiar with the Python's
standard data types and with data types in general, but who don't know
all of the functionality available in modern Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/pythons-other-collection-types-and-algorithms.html</guid><category>bisect</category><category>dictionaries</category><category>frozenset</category><category>heapq</category><category>learning</category><category>namedtuple</category><category>ordereddict</category></item><item><title>Mastering Team Play: Four powerful examples of composing Python tools (#184)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Team Play: Four powerful examples of composing Python tools&lt;/p&gt;
&lt;p&gt;Presented by Raymond Hettinger&lt;/p&gt;
&lt;p&gt;Starts with a quick review of the performance characteristics of major
individual tools in Python: bisect, heapq, lists, deques, sets,
frozensets, class structures, sorts, and weakreferences. Show how these
tools can be powerfully combined to create elegant solutions to four
hard problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Random sampling: when one data structure isn't enough. Discuss how
the nature of the problem dictates when to use one of two alternate
data structures.&lt;/li&gt;
&lt;li&gt;Ordered dictionaries: with the right compostion of dictionaries,
linked lists, and weak references, a dictionary can remember its
insertion order without any impact on its big-Oh running times.&lt;/li&gt;
&lt;li&gt;NFA to DFA conversion. The classic, but difficult, algorithm for
lexical analysis becomes simple when composing Python's dicts and
frozensets.&lt;/li&gt;
&lt;li&gt;Running median: the obvious approaches are horribly slow. The problem
centers around how to efficiently maintain sorted data while
advancing a large sliding window one value at a time. A list of
deques provides a dramatic and scalable improvement in running time.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</guid><category>bisect</category><category>dequeues</category><category>frozensets</category><category>heapq</category><category>lists</category><category>pycon</category><category>pycon2010</category><category>sets</category><category>sorts</category><category>weakreferences</category></item></channel></rss>