<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 09 May 2018 00:00:00 +0000</lastBuildDate><item><title>Accessibility, POUR, and the Pythonistas</title><link>https://pyvideo.org/pycon-ca-2017/accessibility-pour-and-the-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It would be easy to think that since Python is &amp;quot;just&amp;quot; a programming language, we don't have to pay attention to web accessibility. The fact is that most of what we do ends up with some, if not all, front-facing components delivered on the web or mobile via HTML, CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;Accessibility benefits everyone, not just people with disabilities. Whether someone is Deaf or blind, has motor or cognitive disabilities, or doesn't speak English as a first language, or tries to use your app on a mobile device in bright sun, if accessibility hasn't been considered, your app is likely to lock them out of being able to use it. As such, it is mission critical for our code output to take into account web accessibility basics.&lt;/p&gt;
&lt;p&gt;We'll explore the POUR principle: Building apps that are Perceivable, Operably, Understandable and Robust. We'll talk a bit about who is affected by lack of accessibility, and what barriers people may face.&lt;/p&gt;
&lt;p&gt;You'll leave the workshop with a greater understanding of the issues, some practical things to implement, and resources to be able to increase your knowledge.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Steenhout</dc:creator><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-09:pycon-ca-2017/accessibility-pour-and-the-pythonistas.html</guid><category>accessibility</category></item><item><title>CPython loves your Pull Requests</title><link>https://pyvideo.org/pycon-ca-2017/cpython-loves-your-pull-requests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CPython, what's CPython. CPython is the official implementation of Python, written in C. And it's not just a implementation, it is a group of volunteers and where they daily work on the project but there is no many active contributors.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to prove to you than you can become an active contributor of CPython.&lt;/p&gt;
&lt;p&gt;The core developers of CPython need your help, for example, with the review of some patches, you can comment a patch or try to reproduce a bug.&lt;/p&gt;
&lt;p&gt;In the past, when you wanted to contribute to CPython, you had to use the bug tracker interface and send a patch, this patch was reviewed if you were lucky and after commented etc.... but this process was really long and time consuming.&lt;/p&gt;
&lt;p&gt;Now with the new process based on GitHub and Git, you can create a new branch on your local repository and just send a Pull Request. The Pull Request is just awesome, we can comment it in just a few moments.&lt;/p&gt;
&lt;p&gt;We need your Pull Requests for CPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stéphane Wirtel</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/cpython-loves-your-pull-requests.html</guid><category>cpython</category></item><item><title>Deploy your Flask or Django app to AWS Lambda with Zappa</title><link>https://pyvideo.org/pycon-ca-2017/deploy-your-flask-or-django-app-to-aws-lambda-with-zappa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zappa makes it easy to deploy your Flask or Django (or really, any WSGI app) to Amazon AWS Lambda, by hooking into AWS API Gateway.&lt;/p&gt;
&lt;p&gt;In this talk, you'll get a brief introduction to how to use Zappa with your existing or upcoming projects, from how to install it to how to use it. If there's a stable connection, we'll even deploy a simple app during the talk, in only a few seconds.&lt;/p&gt;
&lt;p&gt;Lambda is an inexpensive and very highly concurrent way to run &amp;quot;serverless&amp;quot; applications. I'm currently using this technology to deploy an application that has a concurrency of 10,000, for one of the largest companies in the world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Coates</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/deploy-your-flask-or-django-app-to-aws-lambda-with-zappa.html</guid><category>zappa</category></item><item><title>Elegant solutions for everyday Python problems</title><link>https://pyvideo.org/pycon-ca-2017/elegant-solutions-for-everyday-python-problems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an intermediate Python developer looking to level up? Luckily, Python provides us with a unique set of tools to make our code more elegant and readable. I’ll share practical pythonic solutions for supercharging your code with tools like Decorators, Context Managers, and Mixins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/elegant-solutions-for-everyday-python-problems.html</guid></item><item><title>Empathy as a service: supporting mental health in the tech workplace</title><link>https://pyvideo.org/pycon-ca-2017/empathy-as-a-service-supporting-mental-health-in-the-tech-workplace.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At any given time, 1 in 5 adults are living with a mental illness, such as depression, bipolar disorder, generalized anxiety disorder, substance use disorder, burnout, or ADHD. Statistically, all of us working for an organization with 5 or more employees have at least one colleague who is affected. At the same time, the tech industry is often characterized by high stress, long hours, workplace pressure to be available by phone and e-mail after-hours or sometimes even while on vacation, social pressure to constantly network and attend conferences and make a name for yourself, and the precarious balance between trying to do good by contributing to open-source and maintaining some semblance of free time that doesn't involve coding. Given how this demanding environment increasingly blurs the line between our professional and personal lives, how can we ensure that the most vulnerable among us aren't being left behind?&lt;/p&gt;
&lt;p&gt;As a community, the single most damaging thing we can do is continue to treat mental health as a personal shortcoming that can't be talked about openly. We shouldn't think of it as &amp;quot;somebody else's problem&amp;quot;; the 4 in 5 of us who don't currently have mental health disorders must do our part to help end the stigma. This talk will begin with an overview of key statistics about mental illness, followed by the efforts of the non-profit organization Open Sourcing Mental Illness to gather more data about mental health in the tech industry, and finally conclude with ideas and strategies for making our tech workplaces more accommodating and inclusive.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nara Kasbergen</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/empathy-as-a-service-supporting-mental-health-in-the-tech-workplace.html</guid></item><item><title>Hard technical skills for modern-day research and business analysts</title><link>https://pyvideo.org/pycon-ca-2017/hard-technical-skills-for-modern-day-research-and-business-analysts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With data more prevalent and accessible than ever, quantitative data analysis has become a core competency for the modern business and research analyst. Ironically, “analysis” is only part of the job of a bonafide data analyst: extracting, cleaning, exploring, wrangling, validating and visualizing are now equally as important.&lt;/p&gt;
&lt;p&gt;I come from a traditional analyst background where the primary technical skill required was Microsoft Excel. However I quickly found this limiting: data transformations I performed were not easily replicable; I couldn’t query information housed in databases; nor could I scrape data tables from the web. Either I had to rely on others - typically engineers - to do this for me, or we decided not to do the analysis at all (ie. it wasn’t “feasible”).&lt;/p&gt;
&lt;p&gt;After a long and arduous process, I learned how to do most of these things myself and I’m convinced most analysts would also benefit from embracing the “engineering” mindset. Analysts will always need domain expertise, but they must now increasingly embrace modern software development skills in their day-to-day job. They should be data experts first, and subject matter experts second.&lt;/p&gt;
&lt;p&gt;Thanks to some great open-source libraries, the Python community is burgeoning with data analysts and scientists. In this talk we’ll cover how to take your data from start to finish, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extraction&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll also touch on some less hard skills, such as data skepticism, sanity checking and exploratory data analysis. By the end of this talk, audience members should have a good understanding of the “data pipeline”: all the steps required to get data from its raw, unrefined state to a structured and presentable story.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Petralia</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/hard-technical-skills-for-modern-day-research-and-business-analysts.html</guid></item><item><title>How I learned to stop worrying and love deep learning: a radiologist's perspective</title><link>https://pyvideo.org/pycon-ca-2017/how-i-learned-to-stop-worrying-and-love-deep-learning-a-radiologists-perspective.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Promise versus Reality: Healthcare, Medical Imaging, and A.I.&lt;/li&gt;
&lt;li&gt;The State of Deep Learning in Radiology and Medical Imaging Research&lt;/li&gt;
&lt;li&gt;Understanding Radiology Workflow: What Problems Are Yet To Be Solved&lt;/li&gt;
&lt;li&gt;The Top 5 Problems and Mitigations to Bringing Your AI Solution to Clinical Application&lt;/li&gt;
&lt;li&gt;Call to Action: Datasets and Python Toolset Resources for Approaching Medical Imaging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;This talk will discuss the state of deep learning from a uniquely clinical perspective and offer the audience member an opportunity to understand the challenges facing the clinical medical imaging community and outline opportunities for the Python community to engage with clinicians. It will examine the disconnect between what has been promised versus what’s been delivered between radiology and artificial intelligence. A brief review of the most exciting and recent research and methodologies as applied to medical imaging will be performed. We will discuss how machine learning could be applied to the full spectrum of radiology workflow beyond simply computer assisted detection and characterization. There will be a broadly applicable discussion of the Top 5 problems and mitigations necessary for individuals and organizations bringing their A.I. solutions to a clinical setting. Finally, there will be a summary of datasets and Python resources that will assist interested developers in contributing to the growing medical imaging A.I. community. This material has not been presented previously elsewhere.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jaron Chong</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/how-i-learned-to-stop-worrying-and-love-deep-learning-a-radiologists-perspective.html</guid></item><item><title>How to hack a Python app?</title><link>https://pyvideo.org/pycon-ca-2017/how-to-hack-a-python-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thought hacking was hard? It’s not, it’s easy and I’m going to show you how! In this episode of CSI PyCon we’ll investigate a series of hacking stories and break them down step-by-step to see exactly how they did it. By the end you’ll walk away a little bit more scared but a lot more prepared.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Asim Hussain</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/how-to-hack-a-python-app.html</guid></item><item><title>How to make your elementary school homework more fun with Python</title><link>https://pyvideo.org/pycon-ca-2017/how-to-make-your-elementary-school-homework-more-fun-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show off some of the ways I've made my elementary school homework more interesting using various pieces of python. This ranges from automating the generation of &amp;quot;factor trees&amp;quot;, which became a script that generated at least 10 different images creating a giant poster of information that barely works, to writing an entire 3d engine from scratch for a project to model a backyard. The code behind these endeavors is sometimes crazy, and often has a pretty funny story behind it. At least it’s better than whatever garbage that a block based programming tool educators keep pushing on me will create! I will also be posting all the code (as well as some that didn't make the talk) in a giant git repository on my github afterwards.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew Mirvish</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/how-to-make-your-elementary-school-homework-more-fun-with-python.html</guid></item><item><title>Introduction à Chatops en Python avec Errbot</title><link>https://pyvideo.org/pycon-ca-2017/introduction-a-chatops-en-python-avec-errbot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le succès de ses dernières années des outils de chat en ligne professionnels comme Slack ou Hipchat montrent que la collaboration des équipes de dévelopement et d'administration systèmes a changée. Elle est devenue temps réel. ChatOps, qui s'inscrit dans cette tendance, est l'idée de mettre vos outils devops au coeur de la conversation. Pour citer quelques opérations implémentées avec chatops, nous avons: deploiements, provisioning, monitoring, graphs, suivi de developpement tracking...&lt;/p&gt;
&lt;p&gt;Errbot est devenu au fil des années le chatbot de référence pour Python. Il permets non seulement aux developpeurs Python d'écrire de façon très naturelle des fonctionnalitées chatops en quelques lignes mais aussi, vous pourrez le voir dans cette présentation, permets à vos equipes de développement de personnaliser leur expérience de discussion en ligne avec des additions amusantes.&lt;/p&gt;
&lt;p&gt;Le but de cette présentation est de vous montrer comme il est facile de démarrer avec chatops avec Errbot, avec une série d'exemples concrets en Python et des conseils pratiques à propos de l'installation, la sécurité, etc. mais aussi quelques conseils pour assurer son succès dans les équipes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guillaume Binet</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/introduction-a-chatops-en-python-avec-errbot.html</guid><category>errbot</category><category>chatops</category></item><item><title>It’s a Pythonic Day in the Neighborhood - Data Harvesting Mr. Rogers</title><link>https://pyvideo.org/pycon-ca-2017/its-a-pythonic-day-in-the-neighborhood-data-harvesting-mr-rogers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twitch.tv streams ‘Mr. Rogers Neighborhood’ aired for over 7 million viewers spanning 432 hours. Utilizing the Twitch API, WebSockets, IRC protocol, and Python, I created a bot that sat in-channel and collected both chat and user action events. This data was then analyzed to examine metrics of user engagement, audience reaction, retention rates, and keyword/phrase frequency in hopes to benefit future iterations of similar events.&lt;/p&gt;
&lt;p&gt;The spirit and intent of this talk is to present a simplistic example of how I used python to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;communicate with the Twitch.tv API&lt;/li&gt;
&lt;li&gt;build websockets&lt;/li&gt;
&lt;li&gt;collect data (chat text, api calls, and scraping webpage info)&lt;/li&gt;
&lt;li&gt;analyze data&lt;/li&gt;
&lt;li&gt;create a fun python project that introduces the aforementioned subjects to both beginner and experienced pythonistas!&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cody Antunez</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/its-a-pythonic-day-in-the-neighborhood-data-harvesting-mr-rogers.html</guid></item><item><title>Multiprocessing: how to run Blockly generated code in Python</title><link>https://pyvideo.org/pycon-ca-2017/multiprocessing-how-to-run-blockly-generated-code-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blockly is a front-end GUI developed by Google that allows developers to create a drag-and-drop language for their product. However Blockly only generates a string and does not run code directly. I will take a look at the various potential approaches to execute code that is in a string:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;exec - quick for short commands&lt;/li&gt;
&lt;li&gt;subprocess - can be interrupted&lt;/li&gt;
&lt;li&gt;multiprocessing - can pass data back and forth by using queues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk is mainly about launching processes, dealing with zombies, interrupting processes based on user input and passing data back and forth between processes. Brief mentions of Flask are to be expected. Examples will be based on my experience in developing Bloxter a graphical drag-and-drop language for the GoPiGo3 to be used at home or in classrooms.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicole Parrot</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/multiprocessing-how-to-run-blockly-generated-code-in-python.html</guid></item><item><title>Navigating a Data Warehouse via CLI</title><link>https://pyvideo.org/pycon-ca-2017/navigating-a-data-warehouse-via-cli.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Shopify we have over 3000 Python batch ETL jobs. These jobs depend upon each other’s output forming a directed acyclic graph that, when visualized, is indiscernible from the hairballs that my cat pukes up.&lt;/p&gt;
&lt;p&gt;These jobs are created by a team of over 100 analysts and engineers who deploy on average 15 changes to them per day to production. With so many people and such a rapid pace of change, understanding how a dataset is constructed, debugging relationships, tracing the flow of data, or even just asking how prevalent a feature or type of relationship is becomes has been a daunting task requiring tracing not only 20k lines of YAML schedule files and 50k lines of Python code.&lt;/p&gt;
&lt;p&gt;To make asking questions about these jobs tractable, we’ve created a series of CLI tools that, when combined with unix tools, makes answering questions about our schedule possible.&lt;/p&gt;
&lt;p&gt;I’ll cover how we flatten that graph into a series of tables that we can output using a CLI tool and then how one can use grep, awk, sort, join, and column to answer some real questions that we had about our schedule.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Fournier</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/navigating-a-data-warehouse-via-cli.html</guid></item><item><title>Painter by numbers: using python to create a Kaggle competition</title><link>https://pyvideo.org/pycon-ca-2017/painter-by-numbers-using-python-to-create-a-kaggle-competition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;Painter By Numbers&amp;quot; Kaggle competition challenged participants to come up with an algorithm which can examine a pair of paintings and make a prediction: are these two paintings by the same artist? This talk explores some of the technical challenges involved with making an exciting and challenging competition, including how to build a simple RandomForestClassifier algorithm with sklearn as well as how to reduce the problem space to a manageable size by using painting metadata and clustering algorithms to identify groups of similar paintings.&lt;/p&gt;
&lt;p&gt;I also explain how to implement siamese neural networks in keras and examine how they allow the development of classification algorithms that can learn to extrapolate to new classes. Finally, I explore how the winning algorithm performed in an actual case of art fraud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kiri Nichol</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/painter-by-numbers-using-python-to-create-a-kaggle-competition.html</guid></item><item><title>PEP Talk - (Closing Keynote)</title><link>https://pyvideo.org/pycon-ca-2017/pep-talk-closing-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Core Developer &amp;amp; Software Engineer at Sony Pictures Imageworks&lt;/p&gt;
&lt;p&gt;Mariatta is a Python Core Developer and a Software Engineer at Sony Pictures Imageworks. She helps organize Vancouver PyLadies and PyCascades conference. She moved to Canada almost two decades ago and now considers Vancouver as her home.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta Wijaya</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/pep-talk-closing-keynote.html</guid><category>keynote</category></item><item><title>Playing nice with Django and React</title><link>https://pyvideo.org/pycon-ca-2017/playing-nice-with-django-and-react.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For a web developer that's used to using Python frameworks like Django or Flask, getting into the world of frontend web development using modern JavaScript isn't always easy. For instance, there is no immediate solution to making new single-page application (SPA) frameworks work well with Django's rendering architecture, especially if you just want to make something simple. This talk will explore the differences between how Django renders web pages and how these JS frameworks expect you to do it, and how to marry the two approaches without reinventing the wheel (or using a heavy library that makes customization difficult). We will look in detail at a few of these concepts, then walk through a fun demo that shows just how efficient and developer-friendly this pattern can be.&lt;/p&gt;
&lt;p&gt;This talk is primarily aimed at beginners to frontend web development who may have been around the block with Django once or twice but are not fully on board with the concepts behind the modern JavaScript stack or with React. Those who come from the world of frontend web development and who are new to Django or Flask may also find this talk interesting.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Cook</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/playing-nice-with-django-and-react.html</guid></item><item><title>PyPi space strategy boardgame</title><link>https://pyvideo.org/pycon-ca-2017/pypi-space-strategy-boardgame.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let me tell you how I’ve combined a raspberryPi, a projector, and a camera to create a strategy boardgame which handles the details for you.&lt;/p&gt;
&lt;p&gt;I'm going to take you step-by-step through how I built this game. In doing so I'll be answering the following questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why even? and how did the idea evolve over time?&lt;/li&gt;
&lt;li&gt;What obstacles did I encounter and how did I solve them?&lt;/li&gt;
&lt;li&gt;What packages did I leverage?&lt;/li&gt;
&lt;li&gt;How did I modularize components to make it multipurpose?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will focus less on the details of each function, and more on the way in which they were combined. It is my hope that attendees will&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;gain a deep understanding of how the game works, and&lt;/li&gt;
&lt;li&gt;feel confident in their ability to design their own version, using this as a template&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian Michetti Wilson</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/pypi-space-strategy-boardgame.html</guid><category>board game</category></item><item><title>Python and fluid mechanics</title><link>https://pyvideo.org/pycon-ca-2017/python-and-fluid-mechanics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="introduction"&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Fluid mechanics is the study of fluids (obvious examples are air and water). This could involve anything from studying how to reduce drag over the latest commercial airliners to the ideal design of a water turbine for extracting energy in dams.&lt;/p&gt;
&lt;p&gt;Worried that you’ve never studied fluid mechanics before? Come and join us to hear how we’ve been using Python in science. Don’t worry, we’ll explain everything!&lt;/p&gt;
&lt;div class="section" id="what-is-particle-image-velocimetry"&gt;
&lt;h5&gt;What is Particle Image Velocimetry?&lt;/h5&gt;
&lt;p&gt;On the experimental side of fluid mechanics these problems are studied by constructing experiments that represent the problem being studies (one common example of this that might pop into your head is that of a car inside a wind tunnel with a streak of smoke flowing over its surface). To analyze these experiments, various techniques are used (such as the smoke visualization mentioned earlier, or colored dye in water based studies). One of the most powerful of these techniques is Particle Image Velocimetry (or PIV).&lt;/p&gt;
&lt;p&gt;PIV involves 3 key things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Dispersing many small particles throughout a fluid flow&lt;/li&gt;
&lt;li&gt;High intensity illumination (usually lasers) to illuminate the particles&lt;/li&gt;
&lt;li&gt;High-speed cameras to record the motion of the particles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The end result of this technique is a series of images, each of which looks like a field of small bright speckles (each speckle being a illuminated particle). By correlating these images across time, PIV analysis software can determine the velocity at regularly spaced points in the image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analysis-of-piv-vector-fields"&gt;
&lt;h5&gt;Analysis of PIV vector fields&lt;/h5&gt;
&lt;p&gt;After obtaining these vector fields, the real science comes in analyzing them. For example one might be interested in what the pressure distribution over an airfoil is. This could be done by reconstructing the pressure field from the vector field. Another example is determining what the average turbulence level is in a jet of air. Now this is where Python comes in!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-python-package-for-analysis-of-piv-data"&gt;
&lt;h4&gt;A Python Package for Analysis of PIV Data&lt;/h4&gt;
&lt;p&gt;To facilitate analysis of PIV data we have developed a package that can perform many of these analysis tasks and further provides awesome visualization tools that aid in the PIV analysis workflow.&lt;/p&gt;
&lt;p&gt;The package provides 4 main functionalities:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A PIV data set object that contains analysis functions for analyzing its data&lt;/li&gt;
&lt;li&gt;Utilities for loading PIV vector data sets from PIV processing software file formats&lt;/li&gt;
&lt;li&gt;Visualization tools&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h5&gt;Utilities&lt;/h5&gt;
&lt;p&gt;Typically the actual processing of images into vector fields is done by specialized PIV software such as DaVis (by LaVision). We use the package ReadIM by user fleming79 (&lt;a class="reference external" href="https://github.com/fleming79/readim"&gt;https://github.com/fleming79/readim&lt;/a&gt;) to accomplish this. In the future other file formats from different PIV software providers would be supported too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analysis-tools"&gt;
&lt;h5&gt;Analysis Tools&lt;/h5&gt;
&lt;p&gt;Analysis functions include calculation of turbulence quantities such as: turbulent kinetic energy production, and turbulent kinetic energy.&lt;/p&gt;
&lt;p&gt;Functions for calculating mean quantities in the flow also exist, such as calculation of the Reynold's number and mean velocity.&lt;/p&gt;
&lt;p&gt;Typically these functions are all implemented of the core scientific programming packages for Python: Numpy and Scipy.&lt;/p&gt;
&lt;p&gt;In the talk we will visually demonstrate a workflow showing what these functions actually produce (and what they even mean, if you're not familiar with fluid mechanics!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interactive-data-visualization"&gt;
&lt;h5&gt;Interactive Data Visualization&lt;/h5&gt;
&lt;p&gt;One of the biggest problems in working with PIV data is in visualizing the data.&lt;/p&gt;
&lt;p&gt;In many cases, just to check if the analysis did what you thought it should, one must write several lines of code just to display a figure. This can make the data analysis workflow extremely cumbersome.&lt;/p&gt;
&lt;p&gt;Included in our package are functions that easily show researchers the data they want to see without having to write several lines of code to do it.&lt;/p&gt;
&lt;p&gt;These are implemented with Bokeh and HoloViews.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="a-side-note-on-the-open-science-initiative"&gt;
&lt;h4&gt;A Side Note on the Open Science Initiative&lt;/h4&gt;
&lt;p&gt;Part of the motivation for developing such a package is the fact that many of these analysis functions are routinely used by researchers all over the world. However due to lack of collaboration, different researchers implement their own version of essentially the same function. Furthermore new-comers into the field often have to re-write their functions from scratch, or if lucky, inherit them from there close predecessors.&lt;/p&gt;
&lt;p&gt;An open source package would make the codes used for PIV analysis available to all. This means that results produced from the code can be scrutinized in depth. Furthermore this would contribute to the reproducibility of results. For example, one researcher's average velocity code may return a different result from another's'. If researchers shared the code they used, reproducibility would be much easier.&lt;/p&gt;
&lt;p&gt;By creating this package, we hope to initiate collaboration such that we can produce better science than we could individually.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Deng</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/python-and-fluid-mechanics.html</guid></item><item><title>Search-first writing for developers</title><link>https://pyvideo.org/pycon-ca-2017/search-first-writing-for-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If people can't use your software, you have already failed as a developer.&lt;/p&gt;
&lt;p&gt;This talk digs in to how optimizing for search and using the existing technical assistance forums can put your product ahead of the pack. Technical writing, in all its variations, is a type of interface with your product. It incorporates everything from an error message to an implementation guide. How can you as a developer make deploying, using, and promoting your product as painless as possible? Make it searchable. Make finding the answer to a problem so trivially easy that your user barely even remembers they had a problem.&lt;/p&gt;
&lt;p&gt;No one wants to be using software. They want to be data mining or manipulating beautiful photos or targeting advertising. Making them think about the software diverts them from what they want to be accomplishing. Use these documentation techniques to get them in and out and on their way.&lt;/p&gt;
&lt;p&gt;(my secret is: I'm always angry when I have to read help)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heidi Waterhouse</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/search-first-writing-for-developers.html</guid></item><item><title>Slots, slots, slots, everybody: an exploration of __slots__</title><link>https://pyvideo.org/pycon-ca-2017/slots-slots-slots-everybody-an-exploration-of-__slots__.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's backbone is its dictionaries but, in some cases, these dictionary instances that objects use to store its attributes can take up too much memory. Luckily Python's fantastic data model provides a way to solve this by using tuples to store an object's instances variables: __slots__.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Douglas Anderson</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/slots-slots-slots-everybody-an-exploration-of-__slots__.html</guid></item><item><title>The backend of a global visual effects pipeline</title><link>https://pyvideo.org/pycon-ca-2017/the-backend-of-a-global-visual-effects-pipeline.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is to show to the public how python is used daily by visual effects (VFX) houses to create amazing feature films and commercials. Not your regular CRUD application. Lot's of opportunities.&lt;/p&gt;
&lt;div class="section" id="introduction-to-vfx"&gt;
&lt;h4&gt;Introduction to VFX&lt;/h4&gt;
&lt;p&gt;A high level overview to introduce the subject to the audience will start by covering, in a high level, the different departments involved in creating the magic images we see in the cinema. Modelling, lighting, rigging, animation, fx and composition.&lt;/p&gt;
&lt;p&gt;The tools that each department use in their day to day and how these tools integrate with python /provide a python API is going to be briefly explained.&lt;/p&gt;
&lt;p&gt;The workflow between the departments and their interaction comes next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vfx-backend-services"&gt;
&lt;h4&gt;VFX backend services&lt;/h4&gt;
&lt;p&gt;The backend of a VFX pipeline consists of two main concepts: asset management and the render farm.&lt;/p&gt;
&lt;p&gt;Both of those concepts will be explained and practical use cases / challenges that come with them will be presented.&lt;/p&gt;
&lt;p&gt;Other services such as authentication / authorization, production management and disk (HUGE NFS!) will be briefly explained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vfx-devops"&gt;
&lt;h4&gt;VFX devops&lt;/h4&gt;
&lt;p&gt;VFX is a global industry, studios need to share work between different localizations like NY, LA, Vancouver, Sydney, London and etc.&lt;/p&gt;
&lt;p&gt;At this part of the talk the main focus will be about deployment of services (ansible), service discovery (consul) and the challenges of syncing huge amounts of data between different localizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vfx-data"&gt;
&lt;h4&gt;VFX data&lt;/h4&gt;
&lt;p&gt;How we use data to drive our decisions in a VFX house. Possibilities of applying machine learning to VFX.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">André Prado</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/the-backend-of-a-global-visual-effects-pipeline.html</guid></item><item><title>The Five Eyes (Sunday Morning Keynote)</title><link>https://pyvideo.org/pycon-ca-2017/the-five-eyes-sunday-morning-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lynn Root is a Site Reliability Engineer at Spotify; but in reality, she tends to break things rather than make them more reliable. Lynn is also a global leader of PyLadies, and the founder &amp;amp; former leader of the San Francisco PyLadies. When her hands are not on a keyboard, they are usually holding a pair of knitting needles.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/the-five-eyes-sunday-morning-keynote.html</guid><category>keynote</category></item><item><title>Building Engaged Communities (Saturday Morning Keynote)</title><link>https://pyvideo.org/pycon-ca-2017/building-engaged-communities-saturday-morning-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camille Fournier is a Managing Director and Head of Platform Engineering at Two Sigma. She is the former Chief Technology Officer of Rent The Runway and a former Vice President of Technology at Goldman Sachs.&lt;/p&gt;
&lt;p&gt;Fournier earned an undergraduate degree from Carnegie Mellon University and a Master’s degree in Computer Science from the University of Wisconsin–Madison. She is a maintainer of the Apache ZooKeeper open source project, writes the Ask The CTO column for O’Reilly Media, and is a regular public speaker and advocate for greater diversity within technology and leadership. Her book, “The Manager’s Path,” was published by O’Reilly in early 2017.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Camille Fournier</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/building-engaged-communities-saturday-morning-keynote.html</guid><category>keynote</category></item><item><title>Call C code quickly and compatibly with CFFI</title><link>https://pyvideo.org/pycon-ca-2017/call-c-code-quickly-and-compatibly-with-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to speed up a slow part of your Python program by rewriting part of it in C? Maybe you needed to use a C/C++ library, but couldn't find a Python binding? This talk will get you started with CFFI, a modern approach to calling into C code from Python. CFFI (FFI stands for 'foreign function interface') produces code that works with both CPython and PyPy, and across Python 2 and 3. It doesn't require learning a custom 'wrapping' language, and can have less runtime overhead than ctypes.&lt;/p&gt;
&lt;p&gt;In my talk, I'll walk through the process of exposing a small C-based data structure in Python, and then packaging it up with setuptools. You don't need to be an expert C programmer to get great results!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zachary Voase</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/call-c-code-quickly-and-compatibly-with-cffi.html</guid></item><item><title>Can I use that code? Software licences as a user</title><link>https://pyvideo.org/pycon-ca-2017/can-i-use-that-code-software-licences-as-a-user.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s easy to become a software developer without ever having learned about software licences and how they might affect you (or your company!). It’s also easy to assume that because code is available on GitHub or as a package in PyPI it’s free to use with no restrictions. This usually isn’t the case!&lt;/p&gt;
&lt;p&gt;In this overview, you’ll learn about different types of licences and how some are or aren’t compatible with each other. Most of the focus will be on open-source licences, though I’ll also discuss how open-source licences work with closed source code. We’ll go over a few common licences in more detail so you understand your obligations when using code under that licence, and highlight some Python packages that use them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holly Becker</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/can-i-use-that-code-software-licences-as-a-user.html</guid></item><item><title>Changing the world with Python and Kivy</title><link>https://pyvideo.org/pycon-ca-2017/changing-the-world-with-python-and-kivy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you change the world using Python?&lt;/p&gt;
&lt;p&gt;There are 250 million children in the world who are not learning the basics of reading, writing, or mathematics, many of whom don't have access to schools or teachers at all. In order to provide universal basic education worldwide, the UN estimates that it would require an additional 69 million teachers by 2030. Without unprecedented investment, it is simply not possible to overcome this shortfall on a global scale.&lt;/p&gt;
&lt;p&gt;In 2015, we started a project, called Learn Leap Fly, to help address this shortfall using software running on tablets and smartphones. What’s more, we chose Python and Kivy to build our solution.&lt;/p&gt;
&lt;p&gt;In this talk, we will describe this incredible combination of technologies, and explain how Python and Kivy make it possible to build a suite of cross-platform, multi-lingual, touch-based apps targeting Android and IOS devices. What’s more, because it’s Python, we can blend in world-class machine learning and make a solution which can be applied on a Global scale. Finally, we can do it all with a tiny team, a tiny budget, and a ridiculously tight timeline.&lt;/p&gt;
&lt;p&gt;This is the story of how we are changing the world with Python and Kivy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kjell Wooding</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/changing-the-world-with-python-and-kivy.html</guid><category>kivy</category></item><item><title>Debugging software designs using testable pseudo-code</title><link>https://pyvideo.org/pycon-ca-2017/debugging-software-designs-using-testable-pseudo-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When an architect designs a building, or an engineer designs a bridge, they don’t scribble rough sketches on paper and declare “We’re agile, we’ll figure out the details later!”. They create precise designs, and are able to prove important safety properties about their work before a single shovel hits the dirt.&lt;/p&gt;
&lt;p&gt;But when designing highly complex, concurrent, fault-tolerant systems, developers often don’t create more than rough pseudo-code and a few Visio diagrams, before starting work and hoping that any design bugs will be discovered before going to production.&lt;/p&gt;
&lt;p&gt;PlusCal/TLA+ is a pseudo-code language that allows for precise descriptions of digital systems, and provides tooling to run automated and exhaustive tests on the pseudo-code itself. Developers can discover design bugs before a single line of “real” code has been written.&lt;/p&gt;
&lt;p&gt;Developers at AWS, Microsoft/Azure, etc. have used PlusCal to help design systems and find serious, highly-subtle bugs in products including S3, EC2, EBS, DynamoDB, the Xbox 360 memory system, and many others.&lt;/p&gt;
&lt;p&gt;Its use at Amazon has been so successful that management now explicitly allocates engineering time to TLA+. To quote Chris Newcombe, former AWS Principal Engineer:&lt;/p&gt;
&lt;p&gt;TLA+ is the most valuable thing that I’ve learned in my professional career. It has changed how I work by giving me an immensely powerful tool to find subtle flaws in system designs. It has changed how I think…&lt;/p&gt;
&lt;p&gt;This talk will provide a short introduction to specifying software designs and PlusCal.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Parlar</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/debugging-software-designs-using-testable-pseudo-code.html</guid></item><item><title>Descriptors, magic methods, and inheritance: oh my!</title><link>https://pyvideo.org/pycon-ca-2017/descriptors-magic-methods-and-inheritance-oh-my.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's very simple to write straightforward imperative code with Python. You can easily define classes and functions, and write behavior inside them. However, pure imperative design means that you'll likely end up writing the same patterns of code over and over - whether it's &lt;cite&gt;requests.get()&lt;/cite&gt; or &lt;cite&gt;LOGGER = getLogger(__name__)&lt;/cite&gt;. By taking advantage of some of the more advanced features of the Python language, like descriptors, overridden magic methods, and creative uses of inheritance, we can make our code smaller and more expressive. Proper abstractions will also make it easier to test your code thoroughly and effectively - because you're not reimplementing behavior unnecessarily, you can properly test the one place you do implement it, and rely on it from then on. And, it becomes much easier to add features later on that rely on existing behavior - you just need to describe them in terms of the things you've already implemented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jesse Shapiro</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/descriptors-magic-methods-and-inheritance-oh-my.html</guid></item><item><title>Double Click: continue building better CLIs</title><link>https://pyvideo.org/pycon-ca-2017/double-click-continue-building-better-clis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some of you might have been to my previous talk &amp;quot;Click - A Pleasure to Write, A Pleasure to Use&amp;quot;, a brief overview of the powerful features provided by click to build command-line tools. You can find a recording of it on YouTube. But don't worry, I'll give you a super quick summary at the beginning of this talk.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at some more advanced features of click to build an example command-line tools. I will show you how nested commands make it easy to modularize your (complex) application and how you can use custom parameter types to improve validation. Come and join me for a journey into a world with no clicking but with a lot of click.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Vetter</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/double-click-continue-building-better-clis.html</guid></item><item><title>Effective Python package management</title><link>https://pyvideo.org/pycon-ca-2017/effective-python-package-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk showcases various example scenarios around the ins/outs of managing Python packages. Scenarios range from intra-package problems of how to build a package, inter-package problems of how to connect packages, to general usage/environment/setup problems that developers have a hard time debugging. For each of these scenarios, I'll highlight the pros/cons, best practices, and how to overcome the issues developers commonly face.&lt;/p&gt;
&lt;p&gt;Some examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing packages from public, local file system, git (ssh + https), and how this affects deployment procedures&lt;/li&gt;
&lt;li&gt;handling systems with multiple Python versions or package managers&lt;/li&gt;
&lt;li&gt;how app structures and imports can affect testability&lt;/li&gt;
&lt;li&gt;relative vs absolute imports&lt;/li&gt;
&lt;li&gt;virtual environments&lt;/li&gt;
&lt;li&gt;setup scripts&lt;/li&gt;
&lt;li&gt;package versioning (why, when, how)&lt;/li&gt;
&lt;li&gt;how new code changes could not be taking effect (old .pyc files, or updated import not catching)&lt;/li&gt;
&lt;li&gt;handling sub-packages/dependencies that utilize parent configuration files&lt;/li&gt;
&lt;li&gt;working with &lt;cite&gt;PYTHONPATH&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;executing python as modules or scripts&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Devon Bernard</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/effective-python-package-management.html</guid></item><item><title>Find the farm -- data science insights into real estate pricing</title><link>https://pyvideo.org/pycon-ca-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using gmplot, geopy, and Python data science tools we’ll discover realtor farms, and assess the characteristics of sales vs listing price. Real estate transactions tend to be geographically sparse and temporally rare. There is often both a listing and a selling agent in the representing a given property. The sales price is determined by a number of factor. While there has been considerable interest in building pricing models relying on physical parameters, there has been little work done in assessing the contribution of the realtor. The discovery of a ‘farm’ uses cluster identification methods. These farms can then be analyzed for imputed listing prices and the sales price, both of which are negotiated.&lt;/p&gt;
&lt;p&gt;The problem: Most real estate analytics deal only with property description and location. Markets can swing quickly from buyer’s to seller’s advantage, so timing and days on market is important. Agent effects are not well understood and can be a significant factor in determining the actual price. Data source are examined . Python Modules utilized. Application of data science, e.g. modules pycluster, pyclustering, scikit-learn. (the talk is primarily application, not theory)&lt;/p&gt;
&lt;p&gt;Examples of geographic and hidden affinity Analysis of listing price to appraisal and listing agent effect Analysis of over/under-performance of sales price to listing price Determination of listing agent vs selling agent negotiation skills. Effect of dual agency on pricing. Effect of listing agent Farms on neighborhood pricing.&lt;/p&gt;
&lt;p&gt;Consideration as a Machine Learning project using Theano or TensorFlow , Keras, Sonnet tflearn&lt;/p&gt;
&lt;p&gt;Conclusions and future directions Questions&lt;/p&gt;
&lt;p&gt;data, code, notebooks, and graphics will be included&lt;/p&gt;
&lt;p&gt;The methodology presented is likely applicable to other low-volume high-value facilitated transactions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</guid></item><item><title>HOWTO write a function</title><link>https://pyvideo.org/pycon-ca-2017/howto-write-a-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing a function that the compiler will accept is much easier than writing a function that will get through code review on the first pass. I've written and reviewed lots of functions and the same advice comes up again and again.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your function should have three parts: input, transform, and output. You should do them in order and not intermingle the three.&lt;/li&gt;
&lt;li&gt;Keep the function readable by giving your reader context and keeping the amount of implied context low.&lt;/li&gt;
&lt;li&gt;You can mostly ignore cargo cult practices like one-entry-one-exit and strict function length limits. We'll talk about why those cults exist and how to defend against them in a code review.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diedreich</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/howto-write-a-function.html</guid></item><item><title>Make ASCII, not war: ascii-art for testing network analysis</title><link>https://pyvideo.org/pycon-ca-2017/make-ascii-not-war-ascii-art-for-testing-network-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test-driven development can be hard -- the more exhaustive your tests are, the more challenging they can be to comprehend and iterate on. This talk explores a side-project-turned-testing-framework for describing networks using ascii art, turning long and boring tests into beautiful snippets.&lt;/p&gt;
&lt;p&gt;This tool came about after we observed a funny pattern in the tests we were writing for our power-systems software: developers would smudge together 40+ lines of xml (or an equivalent number of lines of variables and class instantiations) in order to make a test with the cases they were interested in, and then they would draw a little ascii-shorthand of the network they had just described, because they wanted to be able to remember what they had made later on. This led us to wonder, &amp;quot;What if those diagrams were the test?&amp;quot;. So we build an ascii-diagram parser that made networks into networkx graphs, and then we built a tool to turn a networkx graph into a set of objects representing a power grid.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Lodder</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/make-ascii-not-war-ascii-art-for-testing-network-analysis.html</guid><category>ascii-art</category><category>networking</category></item><item><title>Obeying the Testing Goat: building a test obsessed culture at your company</title><link>https://pyvideo.org/pycon-ca-2017/obeying-the-testing-goat-building-a-test-obsessed-culture-at-your-company.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all know we should test our code. We all know that we should have a hypothetically perfectly tested codebase. But how many people actually do? Why don't we? What's stopping us? We'll talk about the skills and mentality everyone needs to have, the infrastructure that cuts down on the amount of work that you need to do to write a test, directly influencing how many of your coworkers actually write comprehensive tests. We'll also talk about planning and the torturous process of accepting what you can't test. You'll leave this talk planning to add an onboarding session dedicated to testing, excited about test infrastructure such as factories, and looking forward to the day that you discover the tests are there, and they can help you understand the code's structure and intended usage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julia Duimovich</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/obeying-the-testing-goat-building-a-test-obsessed-culture-at-your-company.html</guid></item><item><title>Postgres at any scale</title><link>https://pyvideo.org/pycon-ca-2017/postgres-at-any-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll start with the basics you need to know as an app developer about interacting with your database, then dig into how you can start to analyze performance. We'll look at things you need to know for a small application, then the things you should be cautious of as you start to layer in other items you need to be aware of for performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Craig Kerstiens</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/postgres-at-any-scale.html</guid><category>postgres</category></item><item><title>Python profiling and performance tuning in production</title><link>https://pyvideo.org/pycon-ca-2017/python-profiling-and-performance-tuning-in-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pinterest decreased latency and shrunk their front-end fleet by over 40% with less than 100 lines of python. This was done by understanding how a significant amount of latency and consumed resources were the result of gevent’s cooperative multitasking. 4 different open source python profilers, were then used together to identify and fix bottlenecks and inefficiencies in the code base. Most profilers are too slow to use in production, so profiling of web servers often occurs in synthetic environments. But to get an accurate picture of what is happening you need production profiling data, so a production ready Linux signal (SIGVTALRM) based python profiler was used. This talk will cover how Pinterest shrunk their front-end fleet, the techniques and tooling used to improve performance and how they can be applied elsewhere.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Gordon</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/python-profiling-and-performance-tuning-in-production.html</guid></item><item><title>Python &amp; spreadsheets: 2017 edition</title><link>https://pyvideo.org/pycon-ca-2017/python-spreadsheets-2017-edition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spreadsheets are OFTEN terrible. They're also everywhere! As one of the default forms of data exchange, learning to work with spreadsheets directly via Python can save time and effort. We'll look at Openpyxl, a library that lets you do just that. We'll look at at least two different (beginner-friendly)example cases: transforming one spreadsheet into another spreadsheet and converting a spreadsheet into JSON. I'll also use my experience as a former accountant to highlight some of the issues around reading from and writing to a spreadsheet file and how you might deal with them. You MAY even learn to make new friends and grow the Python community! True Story!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/python-spreadsheets-2017-edition.html</guid></item><item><title>Secret histories: the women of Python</title><link>https://pyvideo.org/pycon-ca-2017/secret-histories-the-women-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know the role women have played in building the Python community worldwide? Elissa Shevinsky interviewed both established and emerging leaders in the Python community, and will share their insights on what is most exciting in Python in 2017. This talk will include video clips of those interviews.&lt;/p&gt;
&lt;p&gt;Shevinsky is an experienced speaker on technical topics, and editor of the feminist anthology &amp;quot;Lean Out: The Struggle for Gender Equality in Tech and Startup Culture.&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elissa Shevinsky</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/secret-histories-the-women-of-python.html</guid></item><item><title>Setting expectations for Open Source participation</title><link>https://pyvideo.org/pycon-ca-2017/setting-expectations-for-open-source-participation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;I'm burning out from all of these rude users!&amp;quot; &amp;quot;Why is my contribution being ignored?!?&amp;quot; Phrases like these are unfortunately common in the world of open source. It all leads to frustrated users, contributors, and maintainers. Most of this negativity, though, stems from a misunderstanding from all sides of what should be expected from an open source project and those involved. The hope is that this talk will help re-calibrate how everyone involved in open source should view and interact with open source projects, leading to happier participants who want to be involved long-term in open source.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/setting-expectations-for-open-source-participation.html</guid></item><item><title>Teaching Python to teens</title><link>https://pyvideo.org/pycon-ca-2017/teaching-python-to-teens.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How does one design a workshop accessible to beginners yet also challenging to seasoned Python programmers? This talk will summarize two pieces of curriculum which have proven successful in engaging teenagers in Boston in an extracurricular setting. Unlike traditional computer science lecture material, these problems ask the learner to spend the majority of their time designing an original solution (in pseudocode or outline form). A syntax guide (with sample code snippets) is provided in addition to starter .py files, but students can engage with the problems in a meaningful way even without writing perfectly-functioning Python code.&lt;/p&gt;
&lt;p&gt;The first challenge asks students to evaluate two essays about astronauts. One essay exhibits characteristics of strong writing while the other uses a weak, informal writing style. Beginner students are asked to list words they believe have no place in strong writing. Beginners then receive guidance in creating a Python list and using the &amp;quot;in&amp;quot; keyword to check the sample essays for weak words. Advanced students are provided with a much larger set of possible evaluation criteria and, if sufficiently advanced, may also choose to write a web scraper which could be used as a plagiarism checker. All students must develop methods that a computer could use to determine which essay is superior. Because many non-programmers have experience in writing essays, this challenge problem was developed in the hopes that non-programmers might use it to bring a taste of Python into their classes.&lt;/p&gt;
&lt;p&gt;The second challenge problem asks students to evaluate real data from a math quiz app. The provided data contains a nested dictionary (yes!!!! nested dictionaries!!!! WIN) and may be analyzed directly in Python or in MongoDB (via PyMongo) using the MongoDB aggregation pipeline.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to empower attendees to offer similar workshops (for teens) regardless of prior programming experience. As the world faces not only a shortage of software engineers but also a shortage of available engineer-teachers, new curriculum which enables non-programmers (i.e., librarians, English teachers, history teachers, after school mentors, etc.) to teach programming is urgently needed.&lt;/p&gt;
&lt;p&gt;Whether or not you have teaching experience (or Python experience), come to this talk and help further the conversation about Python literacy!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robyn Allen</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/teaching-python-to-teens.html</guid></item><item><title>Unpacking an anomaly</title><link>https://pyvideo.org/pycon-ca-2017/unpacking-an-anomaly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a continuation of a series called Tales from the Ops Side. Back in November 2016, a seemingly innocuous piece of code that has been running for years starts throwing a very strange and nonsensical exception. This strange exception seemed to be thrown completely at random, could not be reproduced in any other environment, and would also self-heal! This talk tells the story of a baffling bug hunt spread over many weeks, involved all members of the company, including the CEO and CTO, and lead us deep into the guts of CPython and countless dead-ends.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hany Fahim</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/unpacking-an-anomaly.html</guid></item><item><title>Using Python to make sense of system traces</title><link>https://pyvideo.org/pycon-ca-2017/using-python-to-make-sense-of-system-traces.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will start off with a brief introduction to the LTTng project, and tracing in general, to show how it can be used to understand the interactions between Python applications and the Linux kernel. This knowledge is handy to both improve performance of Python applications and understand the interactions between multiple applications.&lt;/p&gt;
&lt;p&gt;Since kernel traces contain so much information, we need powerful tools to filter through the noise. Babeltrace 2's Python bindings allow developers to quickly build scripts that identify a number of problems.&lt;/p&gt;
&lt;p&gt;The talk will rely primarily on demos showing how to instrument a Python application, how to trace both the application and the Linux kernel, and how to extract meaningful metrics using LTTng analyses and the Babeltrace Python bindings.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jérémie Galarneau</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/using-python-to-make-sense-of-system-traces.html</guid></item><item><title>Automated Testing Framework</title><link>https://pyvideo.org/pycon-ca-2017/automated-testing-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avocado is a next generation testing framework inspired by Autotest
and modern development tools such as git. One can call it a test
framework with benefits. Native tests are written in Python and they
follow the unit test pattern, but any executable can serve as a test.&lt;/p&gt;
&lt;p&gt;In this presentation we will cover the Avocado architecture, main
features, demonstrations and we will also compare Avocado with some
known test runners.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amador Pahim</dc:creator><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-28:pycon-ca-2017/automated-testing-framework.html</guid><category>avocado</category><category>testing</category></item></channel></rss>