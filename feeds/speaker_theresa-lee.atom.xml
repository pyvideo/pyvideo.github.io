<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_theresa-lee.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-06T00:00:00+00:00</updated><entry><title>Memory Management in Python</title><link href="https://pyvideo.org/pygotham-2018/memory-management-in-python.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Theresa Lee</name></author><id>tag:pyvideo.org,2018-10-06:pygotham-2018/memory-management-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you understand how Python works under the hood? Can you explain the following?&lt;/p&gt;
&lt;p&gt;Why does &lt;cite&gt;a is b&lt;/cite&gt; evaluate to &lt;cite&gt;True&lt;/cite&gt; when both variables have a value of 201? Why does the statement evaluate to` False` if they both have a value of 498?
When will Python still hold a reference to an object that has been deleted?
How does Python collect garbage and is it any different from other languages like Ruby?&lt;/p&gt;
&lt;p&gt;Learn the answers to these questions and better understand concepts like interning, reference counting, reference cycles, and generational garbage collection in this talk.&lt;/p&gt;
</summary></entry></feed>