<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Raphael Michel</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_raphael-michel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-09-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Data internationalization in Django</title><link href="https://pyvideo.org/djangocon-europe-2017/data-internationalization-in-django.html" rel="alternate"></link><published>2017-04-04T00:00:00+00:00</published><updated>2017-04-04T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2017-04-04:/djangocon-europe-2017/data-internationalization-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django comes with well-established batteries included for translating an application into multiple languages. However, once you try to give your users the possibility to generate multi-lingual site contents Django is no longer able to help you. In this talk I will give an overview of the multiple methods and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django comes with well-established batteries included for translating an application into multiple languages. However, once you try to give your users the possibility to generate multi-lingual site contents Django is no longer able to help you. In this talk I will give an overview of the multiple methods and libraries that allow you to add translatable model fields and discuss pros and cons of the specific solutions.&lt;/p&gt;
</content><category term="DjangoCon Europe 2017"></category></entry><entry><title>Day 3 Guten Morgen</title><link href="https://pyvideo.org/djangocon-europe-2018/day-3-guten-morgen.html" rel="alternate"></link><published>2018-05-25T00:00:00+00:00</published><updated>2018-05-25T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2018-05-25:/djangocon-europe-2018/day-3-guten-morgen.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://media.ccc.de/v/hd-137-guten-morgen"&gt;https://media.ccc.de/v/hd-137-guten-morgen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Raphael Michel Tobias Kunze DjangoCon Europe Crew&lt;/p&gt;
</content><category term="DjangoCon Europe 2018"></category></entry><entry><title>Day 1 Guten Morgen</title><link href="https://pyvideo.org/djangocon-europe-2018/day-1-guten-morgen.html" rel="alternate"></link><published>2018-05-23T00:00:00+00:00</published><updated>2018-05-23T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2018-05-23:/djangocon-europe-2018/day-1-guten-morgen.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome to DjangoCon Europe 2018!&lt;/p&gt;
&lt;p&gt;Raphael Michel Tobias Kunze DjangoCon Europe Crew&lt;/p&gt;
</content><category term="DjangoCon Europe 2018"></category></entry><entry><title>Security strategies for multi tenant applications - Raphael Michel</title><link href="https://pyvideo.org/djangocon-europe-2020/security-strategies-for-multi-tenant-applications-raphael-michel.html" rel="alternate"></link><published>2020-09-19T00:00:00+00:00</published><updated>2020-09-19T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2020-09-19:/djangocon-europe-2020/security-strategies-for-multi-tenant-applications-raphael-michel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe 2020 (Virtual)
September 19, 2020 - 09h55 (GMT+1)&lt;/p&gt;
&lt;p&gt;&amp;quot;Security strategies for multi tenant applications&amp;quot; by Raphael Michel&lt;/p&gt;
&lt;p&gt;When writing multi-tenant applications, a very typical and dangerous bug is to forget about a WHERE statement and show data to the wrong users. This often goes unnoticed, since most …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe 2020 (Virtual)
September 19, 2020 - 09h55 (GMT+1)&lt;/p&gt;
&lt;p&gt;&amp;quot;Security strategies for multi tenant applications&amp;quot; by Raphael Michel&lt;/p&gt;
&lt;p&gt;When writing multi-tenant applications, a very typical and dangerous bug is to forget about a WHERE statement and show data to the wrong users. This often goes unnoticed, since most people are only testing with one user account. This talk discusses strategies to prevent this class of error entirely.&lt;/p&gt;
&lt;p&gt;Note: Q&amp;amp;A not available due to technical problems.&lt;/p&gt;
</content><category term="DjangoCon Europe 2020"></category></entry><entry><title>Building plugin ecosystems with Django</title><link href="https://pyvideo.org/djangocon-europe-2019/building-plugin-ecosystems-with-django.html" rel="alternate"></link><published>2019-04-21T00:00:00+00:00</published><updated>2019-04-21T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2019-04-21:/djangocon-europe-2019/building-plugin-ecosystems-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Django applications including real-world examples.
It is probably common sense by now that modular architectures win over monolithic architectures in a number of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Django applications including real-world examples.
It is probably common sense by now that modular architectures win over monolithic architectures in a number of ways. Django gives us reusable apps, but just because they are reusable doesn’t mean they automatically integrate nicely with each other and a Python programmer is still required to glue them together. In this talk I will show how to build a rich Django application that provides a well-defined plugin API. The API will allow plugins to seamlessly integrate with the main application. The talk will show various patterns around URL routing, Django‘s signal system and the use of setuptools to provide auto-detection of installed plugins. Installing a plugin should not be much more complicated than a simple pip install.
The explained architecture has been in use for some years in the pretix open source project and made it possible to us to grow a rich plugin ecosystem.&lt;/p&gt;
</content><category term="DjangoCon Europe 2019"></category></entry><entry><title>Data internationalization in Django</title><link href="https://pyvideo.org/djangocon-us-2018/data-internationalization-in-django.html" rel="alternate"></link><published>2018-10-17T00:00:00+00:00</published><updated>2018-10-17T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2018-10-17:/djangocon-us-2018/data-internationalization-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is a multitude of options to translate database data in Django,
for example django-parler, django-modeltranslation, django-nece,
django-hvad, and django-i18nfield (which is my own). The interesting
thing is that these libraries are not multiple implementations of the
same thing, but they are all radically different in their design and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is a multitude of options to translate database data in Django,
for example django-parler, django-modeltranslation, django-nece,
django-hvad, and django-i18nfield (which is my own). The interesting
thing is that these libraries are not multiple implementations of the
same thing, but they are all radically different in their design and
there are good reasons for every one of them. The sometimes subtle
differences might not be obvious to a beginner in the Django world. This
talk will help them navigate through different solutions and make an
informed decision.&lt;/p&gt;
</content><category term="DjangoCon US 2018"></category></entry><entry><title>Plugin ecosystems for Python web-applications</title><link href="https://pyvideo.org/pycon-de-2017/plugin-ecosystems-for-python-web-applications.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2017-10-25:/pycon-de-2017/plugin-ecosystems-for-python-web-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Raphael Michel&lt;/strong&gt; (&amp;#64;rami)&lt;/p&gt;
&lt;p&gt;I‘m a software developer working with the web for more than ten years and with Python and Django for over four years. I work as a freelancer and maintain multiple open source projects. The most notable Django-based one is pretix, a full-featured and free conference …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Raphael Michel&lt;/strong&gt; (&amp;#64;rami)&lt;/p&gt;
&lt;p&gt;I‘m a software developer working with the web for more than ten years and with Python and Django for over four years. I work as a freelancer and maintain multiple open source projects. The most notable Django-based one is pretix, a full-featured and free conference ticketing software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Python web applications including real-world examples. I'll give examples with Django, but the important bits aren't Django-specific.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is probably common sense by now that modular architectures win over monolithic architectures in a number of ways. Django gives us reusable apps, but just because they are reusable doesn’t mean they automatically integrate nicely with each other and a Python programmer is still required to glue them together. In this talk I will show how to build a rich Django application that provides a well-defined plugin API. The API will allow plugins to seamlessly integrate with the main application. The talk will show various patterns around URL routing, Django‘s signal system and the use of setuptools to provide auto-detection of installed plugins. Installing a plugin should not be much more complicated than a simple pip install.&lt;/p&gt;
&lt;p&gt;Django is only used as an example, most parts could be easily transferred to other web frameworks as well. The explained architecture has been in use for some years in the pretix open source project and made it possible to us to grow a rich plugin ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</content><category term="PyCon DE 2017"></category><category term="django"></category><category term="python"></category><category term="web"></category></entry></feed>