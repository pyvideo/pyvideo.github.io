<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_peter-szabo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-07-05T00:00:00+00:00</updated><entry><title>EuroPython 2013 Google Jam Quiz Solutions</title><link href="https://pyvideo.org/europython-2013/europython-2013-google-jam-quiz-solutions.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Péter Szabó</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/europython-2013-google-jam-quiz-solutions.html</id><summary type="html"></summary></entry><entry><title>Precompiling and deploying Python to any Linux, Mac OS X or FreeBSD system</title><link href="https://pyvideo.org/europython-2011/precompiling-and-deploying-python-to-any-linux-m.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Péter Szabó</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/precompiling-and-deploying-python-to-any-linux-m.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If a Python application has lots of dependencies and requires specific
versions of some of its dependencies, then users can easily get bored or
frustrated installing the application. To make the installation faster
and have less side effects, application authors can create bundles which
contain the application, all its dependencies and possibly the Python
interpreter. This talk presents a way of creating bundles using
StaticPython, and compares it to bb-freeze. StaticPython is a
single-file statically linked version of Python for 32-bit Linux (i386),
containing all standard and some extra Python modules and C extensions.&lt;/p&gt;
&lt;p&gt;Link to
&lt;a class="reference external" href="http://pts-mini-gpl.googlecode.com/svn/trunk/staticpython/doc%20/slides_2011-06-23/pts_staticpython_2011-06-23.html"&gt;slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="dependencies"></category></entry><entry><title>Emulating Stackless and greenlet with each other</title><link href="https://pyvideo.org/europython-2011/emulating-stackless-and-greenlet-with-each-other.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Péter Szabó</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/emulating-stackless-and-greenlet-with-each-other.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stackless Python and the greenlet package for CPython are two different
implementations of coroutine support for Python. (Coroutines are
fundamental building blocks of I/O frameworks like gevent, Eventlet,
Concurrence and Syncless to conveniently handle thousands of socket
connections at a time without creating threads.) Stackless and greenlet
implement a different interface. However, each is powerful enough so
that it can be used to emulate the other one. In this talk we explore
the differences and discuss design decisions and testing strategies of
the emulations we have implemented.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/slides_2011-06-20/pts_em%20u_coro_2011-06-20.html"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/s%20lides_2010-11-29/pts_coro_2010-11-29.html"&gt;Slides for the bonus
sub-talk&lt;/a&gt;&lt;/p&gt;
</summary><category term="concurrence"></category><category term="cpython"></category><category term="design"></category><category term="greenlet"></category><category term="stackless"></category><category term="testing"></category></entry></feed>