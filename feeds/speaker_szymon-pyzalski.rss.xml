<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Szymon Pyżalski</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Full Stack Type Safety</title><link>https://pyvideo.org/europython-2020/full-stack-type-safety.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Beyond PEP-484 – ensure type consistency between layers&lt;/p&gt;
&lt;p&gt;The introduction of PEP-484 gave us an option to enforce the internal type consistency of our Python applications. Our web projects, however, consist of multiple layers, with the Python app taking the role of an HTTP backend. What options do we have to ensure consistency across our stack?
In this talk, we will see some technologies that we can employ to enforce the contract between the layers of our stack. Especially between the frontend and backend. We will demo, how this can be achieved with REST/Swagger and with GraphQL. As both the Graphene library and the open API support for django-rest-framework are both a work-in-progress, we would check, what is possible, and what is still lacking. We will also discuss various approaches to the design: backend first, auto-generating backend from the spec, and TDD, with their advantages and disadvantages.
The topic would be discussed on a simple web application. We would try to play some realistic scenarios, where a careless developer breaks the contract to see how such a mistake can be spotted in the CI phase of the development cycle.
Basic knowledge of Django and JavaScript is required to understand the talk. Some familiarity with TypeScript and ReactJS would also be helpful. However, I plan to explain the code to the listeners that didn’t have prior exposure to these technologies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Pyżalski</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/full-stack-type-safety.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>APIs</category><category>Django</category><category>JavaScript</category><category>Type-Hinting</category><category>Web Protocols</category></item><item><title>How to test it?</title><link>https://pyvideo.org/pycon-pl-2013/how-to-test-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: How to test it?
Prelegent/Speaker: Szymon Pyżalski&lt;/p&gt;
&lt;p&gt;We all know it is good to write unit tests. But sometimes trivial code seems not so trivial to test it. Let's go through some of these situations and find suitable ways of creating tests that will give reproducible results while still emulating realistic situations our code can cope with.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2013/pl/agenda"&gt;http://pl.pycon.org/2013/pl/agenda&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Pyżalski</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:/pycon-pl-2013/how-to-test-it.html</guid><category>PyCon PL 2013</category></item><item><title>Queueing tasks with rq</title><link>https://pyvideo.org/pywaw-summit-2015/queueing-tasks-with-rq.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Queueing tasks with rq&lt;/p&gt;
&lt;p&gt;Do you need a simple queueing system to communicate between various python processes? Then RQ might be a solution for you. I will show you how to set up your tasks in RQ and how to solve some common problems with this technology.&lt;/p&gt;
&lt;p&gt;Speaker: Szymon Pyżalski. Born 1982. Programming for life since 2009. In python since 2011. Currently member of the ralph team in Allegro Group.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/zefciu/rq-pywaw"&gt;https://github.com/zefciu/rq-pywaw&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://summit.pywaw.org"&gt;http://summit.pywaw.org&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Szymon Pyżalski</dc:creator><pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-02:/pywaw-summit-2015/queueing-tasks-with-rq.html</guid><category>PyWaw Summit 2015</category></item></channel></rss>