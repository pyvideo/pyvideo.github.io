<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Doris Lee</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_doris-lee.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-15T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Enterprise-Ready Python for High-Performance Data Teams (Sponsor: Snowflake)</title><link href="https://pyvideo.org/pycon-us-2025/enterprise-ready-python-for-high-performance-data-teams-sponsor-snowflake.html" rel="alternate"></link><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><author><name>Savannah Ostrowski</name></author><id>tag:pyvideo.org,2025-05-15:/pycon-us-2025/enterprise-ready-python-for-high-performance-data-teams-sponsor-snowflake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we’ll explore the challenges of running Python in enterprise data teams and share lessons learned from building for PyData developers at Snowflake, with an emphasis on flexibility, performance, and library compatibility. We'll focus on two key aspects: APIs and runtimes. First, we'll look at how …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we’ll explore the challenges of running Python in enterprise data teams and share lessons learned from building for PyData developers at Snowflake, with an emphasis on flexibility, performance, and library compatibility. We'll focus on two key aspects: APIs and runtimes. First, we'll look at how you can run pandas at all data scales using Modin, and how this interoperates with other tools in the PyData stack. Then, we'll discuss ways to manage runtime compatibility, from customizing environments to working within notebook-based workflows.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Scaling your data science workflows with Modin</title><link href="https://pyvideo.org/scipy-2024/scaling-your-data-science-workflows-with-modin.html" rel="alternate"></link><published>2024-07-08T00:00:00+00:00</published><updated>2024-07-08T00:00:00+00:00</updated><author><name>Doris Lee</name></author><id>tag:pyvideo.org,2024-07-08:/scipy-2024/scaling-your-data-science-workflows-with-modin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas is one of the most commonly used data science libraries in Python, with a convenient set of APIs for data cleaning, preparation, analysis, and exploration. However, despite its widespread adoption, pandas suffers from severe memory and performance issues on even moderately sized datasets. Modin is an open-source project …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas is one of the most commonly used data science libraries in Python, with a convenient set of APIs for data cleaning, preparation, analysis, and exploration. However, despite its widespread adoption, pandas suffers from severe memory and performance issues on even moderately sized datasets. Modin is an open-source project that serves as a fast, scalable drop-in replacement for pandas (&lt;a class="reference external" href="https://github.com/modin-project/modin"&gt;https://github.com/modin-project/modin&lt;/a&gt;). By changing just a single line of code, Modin seamlessly speeds up pandas workflow on a laptop or in a cluster. Originally developed at UC Berkeley, Modin has been downloaded more than 17 million times and is used by leading data science teams across industries.&lt;/p&gt;
</content><category term="SciPy 2024"></category></entry></feed>