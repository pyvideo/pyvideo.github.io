<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Bernát Gábor</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bernat-gabor.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-15T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Standardize Testing in Python</title><link href="https://pyvideo.org/europython-2018/standardize-testing-in-python.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2018-07-26:/europython-2018/standardize-testing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, Bernat will introduce tox, an open source tool with the
bold vision of standardizing testing. From a CIs point of view, testing
contains much more than just unit and/or integration tests; other things
like code style checks, packaging, testing under various versions of
Python, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, Bernat will introduce tox, an open source tool with the
bold vision of standardizing testing. From a CIs point of view, testing
contains much more than just unit and/or integration tests; other things
like code style checks, packaging, testing under various versions of
Python, and checking that documentation still generates, are just as
important. Things quickly start to spiral out of control once you add
into the mix that there are many tools and ways to accomplish each of
these tasks. In this talk, we will learn how tox tries to abstract away
all this complexity, how to easily run CI tests on your local machine,
and how one can use this tool inside your CI frameworks to ensure high
quality and easily maintainable packages.&lt;/p&gt;
</content><category term="EuroPython 2018"></category></entry><entry><title>status quo of virtual environments</title><link href="https://pyvideo.org/europython-2019/status-quo-of-virtual-environments.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/status-quo-of-virtual-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the project maintainers); also, to find out if
the good old virtualenv project has any place left, now that Python 3.4+
contains venv.&lt;/p&gt;
&lt;p&gt;This talk is aimed to be a bit more technical in its first parts,
presenting in technical details what a virtualenv is. The target
audience is anyone who used virtual environments and wants to understand
how they tick from within. I’ll also emphasise diversity and inclusion
at Python interpreter level by highlighting other interpreters than
CPython: Jython, PyPy or Iron Python. A concise outline goes as follows:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;What is a virtual environment?&lt;/div&gt;
&lt;div class="line"&gt;- why we need it&lt;/div&gt;
&lt;div class="line"&gt;- what we use it for&lt;/div&gt;
&lt;div class="line"&gt;- demo - virtualenv vs system env&lt;/div&gt;
&lt;div class="line"&gt;How do we build a virtual environment (CPython)&lt;/div&gt;
&lt;div class="line"&gt;- technical workflow of venv creation&lt;/div&gt;
&lt;div class="line"&gt;- activation&lt;/div&gt;
&lt;div class="line"&gt;-- bash&lt;/div&gt;
&lt;div class="line"&gt;-- powershell&lt;/div&gt;
&lt;div class="line"&gt;-- cmd.bat&lt;/div&gt;
&lt;div class="line"&gt;Other interpreters&lt;/div&gt;
&lt;div class="line"&gt;- why other than CPython?&lt;/div&gt;
&lt;div class="line"&gt;- PyPy&lt;/div&gt;
&lt;div class="line"&gt;- Jython&lt;/div&gt;
&lt;div class="line"&gt;- virtualenv&lt;/div&gt;
&lt;div class="line"&gt;- all Python support&lt;/div&gt;
&lt;div class="line"&gt;- extra activation -&amp;gt; xonosh&lt;/div&gt;
&lt;div class="line"&gt;Summary and q/a&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Virtual Env"></category></entry><entry><title>Lessons from the Trenches: rewriting and re-releasing virtualenv</title><link href="https://pyvideo.org/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining this project became increasingly more troublesome, to the point where, we had more than 500 open issues at one point. In July 2019, I started working from scratch on a rewrite, with the goal of not just increasing the project's maintainability, but also to make it faster and add some new features that were just impossible or too hard to do in the existing code base. Fast forward six months to January 2020, when we released the first beta, with the first full release coming out on 10th February. It took a bit more than a month to squash all the open bugs tickets, but April started without any remaining open bug tickets. This talk will cover the lessons I've learned while on this journey.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Packaging"></category><category term="Virtual Env"></category><category term="python"></category></entry><entry><title>Type hinting (and mypy)</title><link href="https://pyvideo.org/pycon-us-2019/type-hinting-and-mypy.html" rel="alternate"></link><published>2019-05-04T14:35:00+00:00</published><updated>2019-05-04T14:35:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2019-05-04:/pycon-us-2019/type-hinting-and-mypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type hinting for Python (as a linter tool) came out in September 2015 as
part of Python 3.5 (and was championed by Guido himself). Since then,
variable annotations (plus, more recently, protocols) improved its
capabilities even further. Over the last two years, tools, such as mypy,
could build …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Type hinting for Python (as a linter tool) came out in September 2015 as
part of Python 3.5 (and was championed by Guido himself). Since then,
variable annotations (plus, more recently, protocols) improved its
capabilities even further. Over the last two years, tools, such as mypy,
could build on top of it. Slowly, these annotations have emerged from a
proof of concept state (e.g., mypy API planning) to becoming a stable
feature.&lt;/p&gt;
&lt;p&gt;In this presentation, I'll tell my story of using type hints for both
adding type hinting and checking type correctness for a library
supporting both Python 2 and 3 and reusing this information to insert
type data into the generated Sphinx documentation automatically.&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="talk"></category></entry><entry><title>Lightning Talks 1</title><link href="https://pyvideo.org/pycon-us-2021/lightning-talks-1.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/lightning-talks-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;André Roberge - Friendlier tracebacks&lt;/p&gt;
&lt;p&gt;Bernat Gabor - tox 4 is happening!&lt;/p&gt;
&lt;p&gt;Brett Cannon - Introducing the Python Launcher for Unix&lt;/p&gt;
&lt;p&gt;Cheuk Ho - What happens when the developer decided that your name is too short&lt;/p&gt;
&lt;p&gt;Deepa - A tale of mutability and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agenda of Lightning Talks  - Hosted by Dustin Ingram and Lorena Mesa&lt;/p&gt;
&lt;p&gt;André Roberge - Friendlier tracebacks&lt;/p&gt;
&lt;p&gt;Bernat Gabor - tox 4 is happening!&lt;/p&gt;
&lt;p&gt;Brett Cannon - Introducing the Python Launcher for Unix&lt;/p&gt;
&lt;p&gt;Cheuk Ho - What happens when the developer decided that your name is too short&lt;/p&gt;
&lt;p&gt;Deepa - A tale of mutability and recursion&lt;/p&gt;
&lt;p&gt;Jason C. McDonald - Code Review For Great Good&lt;/p&gt;
&lt;p&gt;Jürgen Gmach - How to Maintain Many, Many, Many, Many... Many Git Repositories?&lt;/p&gt;
&lt;p&gt;Mfon Eti-mfon - Queer Struggles in Africa: Fighting Hate With Python&lt;/p&gt;
&lt;p&gt;Phil Jones - What’s new in Flask&lt;/p&gt;
&lt;p&gt;Clint Cameron - How to take ownership of security in your Python code&lt;/p&gt;
&lt;p&gt;Daniel J. Dufour - Load Django Settings from Environmental Variables with One Magical Line of Code&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Python Packaging Demystified</title><link href="https://pyvideo.org/pycon-us-2021/python-packaging-demystified.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Bernát Gabor</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/python-packaging-demystified.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most developers, Python packaging feels like a magical (and cryptic) black box. Apps and libraries use a variety of tools and have different packaging challenges. Once you start reading up on this topic, you come across many seemingly random components: setuptools, pip, poetry, wheels, pyproject.toml, MANIFEST.in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most developers, Python packaging feels like a magical (and cryptic) black box. Apps and libraries use a variety of tools and have different packaging challenges. Once you start reading up on this topic, you come across many seemingly random components: setuptools, pip, poetry, wheels, pyproject.toml, MANIFEST.in, virtual environments, zippapp, shiv, pex, and so on. The sheer number of concepts to master can be overwhelming, leading many programmers to conclude that packaging in Python is a mess. Before you despair, join me in this tutorial session where you'll have a chance to learn how to package and publish/deploy your library and/or application through hands-on exercises.&lt;/p&gt;
&lt;p&gt;Topics include:&lt;/p&gt;
&lt;p&gt;How and why library packaging differs from application packaging
Differences between a source tree/source distribution/wheel
Differences between a build back-end and a build front-end (and why we even have this separation)
Tools used for packaging your library
Tools and techniques used to package your application
Testing your package for correctness&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>How we standardized editable installs - PEP-660 vs. PEP-662</title><link href="https://pyvideo.org/pycon-us-2022/how-we-standardized-editable-installs-pep-660-vs-pep-662.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Bernát Gábor</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/how-we-standardized-editable-installs-pep-660-vs-pep-662.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python Enhancement Proposal (PEP) is the method through which the Python community debates and adopts new features to the language. The same mechanism is used to standardize interfaces and methods used by the Python Packaging Ecosystem. The main difference is that while language PEPs are written mostly by core developers, packaging PEPs are written by members of the Python Packaging Authority (PyPA). How we build Python packages was standardized in 2016 through PEP-517 and PEP-518. Editable installs, while widely used and well known through the -e flag in pip, proved to be controversial, so it got left out of those proposals. It has taken another five years to reach a consensus, and I'm happy to say that -- through PEP-660 -- we now have a way for all build back-ends to support editable installs. Join me in this talk, where I'll tell a tale explaining how having competing PEPs and exhausting discussions -- while tiresome -- led to a better solution. Plus, you'll also understand the different options we considered and the solution we developed in the end.&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Python &amp; Bloomberg: An Open Source Duo (Sponsor: Bloomberg)</title><link href="https://pyvideo.org/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html" rel="alternate"></link><published>2023-04-20T00:00:00+00:00</published><updated>2023-04-20T00:00:00+00:00</updated><author><name>Pradyun Gedam</name></author><id>tag:pyvideo.org,2023-04-20:/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join this talk where we will briefly introduce Bloomberg and have some
of our engineers discuss their engagement in the Python Open Source
ecosystem. We will also present some exciting troubleshooting tools that
are widely used at Bloomberg that we are publishing as open source. You
will leave this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join this talk where we will briefly introduce Bloomberg and have some
of our engineers discuss their engagement in the Python Open Source
ecosystem. We will also present some exciting troubleshooting tools that
are widely used at Bloomberg that we are publishing as open source. You
will leave this talk having learned about the technical details and new
features related to these open source tools, which you might use daily
in the future!&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>🐍 Python meets the crab 🦀 - Friendship at first sight? (Sponsor: Bloomberg)</title><link href="https://pyvideo.org/pycon-us-2025/python-meets-the-crab-friendship-at-first-sight-sponsor-bloomberg.html" rel="alternate"></link><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><author><name>Bernát Gábor</name></author><id>tag:pyvideo.org,2025-05-15:/pycon-us-2025/python-meets-the-crab-friendship-at-first-sight-sponsor-bloomberg.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build back-end) allows you to easily integrate the two languages together and make use of the best of both.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Type hints inside the snake pit</title><link href="https://pyvideo.org/pylondinium-2018/type-hints-inside-the-snake-pit.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2018-06-09:/pylondinium-2018/type-hints-inside-the-snake-pit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, you'll learn the answer to the questions: why, how, what kind of, and where you should think of using type hints when writing Python. And yes, we'll include all sort of Python species, not just the fancy latest 3.5+ ones. Furthermore, you'll learn how to re-use type hints for much more than just type checking.&lt;/p&gt;
&lt;p&gt;Video Copyright belongs to the speaker.&lt;/p&gt;
</content><category term="PyLondinium 2018"></category></entry><entry><title>Lessons learned maintaining open source Python projects</title><link href="https://pyvideo.org/pytexas-2024/lessons-learned-maintaining-open-source-python-projects.html" rel="alternate"></link><published>2024-04-20T00:00:00+00:00</published><updated>2024-04-20T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2024-04-20:/pytexas-2024/lessons-learned-maintaining-open-source-python-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lessons learned maintaining open source Python projects&lt;/p&gt;
&lt;p&gt;I started maintaining open source projects back in 2016 with tox. In 2018, I became a virtualenv maintainer. Today, this has now ballooned to 16 different packages where I'm the primary maintainer (+6 other projects where I help out). On average, these …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lessons learned maintaining open source Python projects&lt;/p&gt;
&lt;p&gt;I started maintaining open source projects back in 2016 with tox. In 2018, I became a virtualenv maintainer. Today, this has now ballooned to 16 different packages where I'm the primary maintainer (+6 other projects where I help out). On average, these packages get more than 360 million downloads each month.&lt;/p&gt;
&lt;p&gt;In this talk, I will share my experience, and explore how I manage to pull this off while also having a primary job and a family. I will present which techniques I tried, what worked, and what did not. I will also share my views on how one should approach maintaining an open source package to avoid burnout.&lt;/p&gt;
&lt;p&gt;Speaker: Bernat Gabor&lt;/p&gt;
</content><category term="PyTexas 2024"></category></entry><entry><title>Python meets the crab - Friendship at first sight?</title><link href="https://pyvideo.org/pytexas-2025/python-meets-the-crab-friendship-at-first-sight.html" rel="alternate"></link><published>2025-04-13T00:00:00+00:00</published><updated>2025-04-13T00:00:00+00:00</updated><author><name>Bernát Gábor</name></author><id>tag:pyvideo.org,2025-04-13:/pytexas-2025/python-meets-the-crab-friendship-at-first-sight.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build back-end) allows you to easily integrate the two languages together and make use of the best of both.&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry></feed>