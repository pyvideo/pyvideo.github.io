<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate><item><title>Writing effective bayesian programs using TensorFlow and TFP</title><link>https://pyvideo.org/pydata-cordoba-2019/writing-effective-bayesian-programs-using-tensorflow-and-tfp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial aims to provide some examples of how to write effective Bayesian programs using TensorFlow and Tensorflow Probability. In TFP land, effectiveness usually comes from writing model that could generate batch-able functions, and utilizing modern hardware (GPU, TPU) with compiler accelerator (i.e., XLA). I will give a walkthrough on how to do so and highlight some gotchas.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Junpeng Lao</dc:creator><pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-27:pydata-cordoba-2019/writing-effective-bayesian-programs-using-tensorflow-and-tfp.html</guid><category>bayesian</category><category>tensorflow</category><category>probability</category></item><item><title>Putting Tensorflow Models into Production</title><link>https://pyvideo.org/pydata-austin-2019/putting-tensorflow-models-into-production.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bugra Akyildiz</dc:creator><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-12-07:pydata-austin-2019/putting-tensorflow-models-into-production.html</guid><category>tensorflow</category></item><item><title>Colaboratory el GDocs para Machine Learning</title><link>https://pyvideo.org/pyday-nea-2019/colaboratory-el-gdocs-para-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vamos a utilizar google colaboratory para ver un ejemplo de clasificación de imágenes de artículos a través de una red neuronal.&lt;/p&gt;
&lt;p&gt;Charla dada en el PyDay NEA 2019, Resistencia, Chaco, Argentina, UTN FRRE, French y Ayacucho, el 29/06/2019&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://eventos.python.org.ar/events/pydaynea2019/activity/187/"&gt;https://eventos.python.org.ar/events/pydaynea2019/activity/187/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diego Alcides Ramirez</dc:creator><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-29:pyday-nea-2019/colaboratory-el-gdocs-para-machine-learning.html</guid><category>colaboratory</category><category>machine learning</category><category>pyar</category><category>pydaynea</category><category>python</category><category>pythonargentina</category><category>tensorflow</category><category>utn</category></item><item><title>Basta problemi con tensorflow usando Docker &amp; Nvidia Docker</title><link>https://pyvideo.org/pycon-italia-2019/basta-problemi-con-tensorflow-usando-docker-nvidia-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Di sicuro vi sarà capitato che condividendo o effettuando un progetto
tensorflow questo non funzioni correttamente. Soprattutto non riesco a
far scalare la mia app perchè non ho abbastanza macchine con GPU e
eseguire lo scale su macchine con solo CPU è costoso per poi ottenere
scarsi benefici. La soluzione è utilizzare Docker e Nvidia Docker.
Vedremo perchè Docker è migliore di una macchina virtuale e come
cambiano le prestazioni rispetto ad andare direttamente sulla macchina.
Vedremo trucchi su come strutturare dei docker-compose file senza
duplicazione per poter sviluppare agilmente sia con GPU che senza, poter
effettuare un deploy con tranquillità e poter scalare facilmente anche
senza GPU. Slide Link: &amp;lt;&lt;a class="reference external" href="https://www.slideshare.net/NicolaLandro/basta"&gt;https://www.slideshare.net/NicolaLandro/basta&lt;/a&gt;-
problemicontensorflowusandodockernvidiadocker&amp;gt;&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1528"&gt;https://python.it/feedback-1528&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 10:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Landro</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/basta-problemi-con-tensorflow-usando-docker-nvidia-docker.html</guid><category>OSX</category><category>windows</category><category>devops</category><category>Machine Learning</category><category>GNU/Linux</category><category>cuda</category><category>tensorflow</category><category>docker</category></item><item><title>Image Generation with Tensorflow (GANs)</title><link>https://pyvideo.org/pycon-italia-2018/image-generation-with-tensorflow-gans.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an opensource language that has a wide community, and nowadays
the biggest companies also create frameworks, libraries with Python and
open- sourced them. Tensorflow is the most used library in Deep Learning
by researchers and there are many examples of various fields like
Computer Vision, Natural Language Processing, Signal Processing.&lt;/p&gt;
&lt;p&gt;Nowadays, Generative Adversarial Networks a.k.a. GAN collect nearly all
interests on it by the Computer Vision experts. There are diverse
applications like image colorization, image generation from random
numbers, computer game character creation, face frontalization, face
alignment, 2D to 3D image transfer, style transfer and so on.&lt;/p&gt;
&lt;p&gt;In this talk, we are going to talk about GANs and the implementation
details on Tensorflow which is backed by Google and has the power of
either work on CPU and GPU.&lt;/p&gt;
&lt;p&gt;The implementation of GANs can be divided into 2 parts. One is called
generator and other is called discriminator. In this talk, the
differences between the discriminator and generator also are mentioned.&lt;/p&gt;
&lt;p&gt;Besides, some various architecture of GANs like PGGAN, DCGAN, STARGAN,
architectures showed in Tensorflow code, which of these are not already
implemented in Tensorflow by the date now.&lt;/p&gt;
&lt;p&gt;The session will be finished with showing some examples of outputs in
face generation, room generation, and also live demo of the style
transfer implementation.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cenk Bircanoğlu</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/image-generation-with-tensorflow-gans.html</guid><category>Deep-Learning</category><category>image-processing</category><category>computer-science</category><category>tensorflow</category><category>ComputerVision</category></item><item><title>Applying serverless architecture pattern to distributed data processing</title><link>https://pyvideo.org/pycon-italia-2018/applying-serverless-architecture-pattern-to-distributed-data-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless architectures refer to applications that significantly depend
on “cloud” services (knows as Backend as a Service) or on custom code
that’s run in ephemeral runtime (Function as a Service or “FaaS&amp;quot;).&lt;/p&gt;
&lt;p&gt;To application developers, “serverless” mean app where some certain
logic of it is still written by the developer but unlike traditional
architectures or microservices is run in stateless compute runtime that
is event-triggered, may only last for one invocation, and fully managed
by a cloud. Serverless helps developers to transfer responsibility for
keeping their apps up and running as well as scaling out their workload
capacity without involving DevOps/ops as we got used to.&lt;/p&gt;
&lt;p&gt;In this talk we will go through whole “serverless” thing: from
decomposing app and its logic to microservices and further to smaller
bits, i.e. functions to defining data flow through functions and
building their fault-tolerant pipeline. Moreover, we will go through a
demo that highlights key takeaways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;what are functions, what it could and could not be&lt;/li&gt;
&lt;li&gt;how to design scalable architecture without getting into troubles by
hitting concrete bottlenecks&lt;/li&gt;
&lt;li&gt;how serverless can help scaling in/out compute capacity for data
processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demo itself will include examples of applying serverless
architecture pattern to emotion recognition app based on TensorFlow and
OpenCV 3.3&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 15:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denis Makogon</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/applying-serverless-architecture-pattern-to-distributed-data-processing.html</guid><category>serverless</category><category>image-processing</category><category>data-exploration</category><category>emotion-recognition</category><category>Deep-Learning</category><category>opencv</category><category>tensorflow</category><category>python3</category></item><item><title>Deep Learning from zero to hero</title><link>https://pyvideo.org/pycon-italia-2018/deep-learning-from-zero-to-hero.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avete sentito parlare di Deep Learning ma credete che la teoria alla
base sia troppo complessa? Non avete una laurea in matematica e
statistica e pensate che il machine learning non faccia per voi? Niente
paura: avrete solo bisogno di una conoscenze di base di Python.&lt;/p&gt;
&lt;p&gt;Conoscete la regola dell’80/20? Con il 20% delle conoscenze potete
raggiungere l’80% dei risultati: in questo talk vi mostrerò in modo
pratico tramite delle demo - alcuni trucchi per costruire dei buoni
modelli predittivi, evitando di perdere (tanto) tempo nella scelta dei
tools e delle librerie necessarie al vostro scopo.&lt;/p&gt;
&lt;p&gt;L’obbiettivo è fornirvi le basi pratiche con cui scegliere un modello di
rete neurale, farne training e ottimizzarlo nel modo più adatto alla
tipologia del problema che dovete affrontare.&lt;/p&gt;
&lt;p&gt;Agenda: - Introduzione al Deep Learning - Un esempio di training senza
scrivere codice - Sviluppare, testare e ottimizzare un modello reale -
Considerazioni finali&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gianluca Carucci</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/deep-learning-from-zero-to-hero.html</guid><category>machine-learning</category><category>Keras</category><category>Deep-Learning</category><category>data-analysis</category><category>tensorflow</category><category>computer-science</category><category>neural network</category></item><item><title>Sparkflow: Utilizing Pyspark for Training Tensorflow Models on Large Datasets</title><link>https://pyvideo.org/pydata-indy-2018/sparkflow-utilizing-pyspark-for-training-tensorflow-models-on-large-datasets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more public, large datasets are becoming available, distributed data processing tools such as Apache Spark are vital for data scientists. While SparkML provides many machine learning algorithms, standard pipelines, and a basic linear algebra library, it does not support training deep learning models. Due to the rise of Tensorflow in the last two years, Lifeomic built the Sparkflow library to combine the power of the Pipeline api from Spark with training Deep Learning models in Tensorflow. Sparkflow uses the Hogwild algorithm to train deep learning models in a distributed manor, which underneath leverages the driver/executor architecture in Spark to manage copied networks and gradients. In this session, we describe some of the lessons learned in building Sparkflow, the pros and cons of asynchronous distributed deep learning, how to use Spark Pipelines with Tensorflow with very few lines of code, and where we are headed with the library in the near future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Derek Miller</dc:creator><pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-12:pydata-indy-2018/sparkflow-utilizing-pyspark-for-training-tensorflow-models-on-large-datasets.html</guid><category>Pyspark</category><category>Tensorflow</category></item><item><title>Hands-on introduction to Deep Learning with Keras and Tensorflow</title><link>https://pyvideo.org/pydata-amsterdam-2018/hands-on-introduction-to-deep-learning-with-keras-and-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deep Learning has already conquered areas such as image recognition, NLP, voice recognition, and is a must-know tool for every Data Practitioner. This tutorial for aspiring Deep Learners will consist of a quick blunt Deep Learning overview followed by a hands-on tutorial that will teach you how to get started using Keras and Tesorflow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Agundez</dc:creator><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-26:pydata-amsterdam-2018/hands-on-introduction-to-deep-learning-with-keras-and-tensorflow.html</guid><category>deep learning</category><category>keras</category><category>tensorflow</category></item><item><title>Using Python to build an AI to play and win SNES StreetFighter II</title><link>https://pyvideo.org/pycon-us-2018/using-python-to-build-an-ai-to-play-and-win-snes-streetfighter-ii.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="figure"&gt;
&lt;img alt="ryu-python" src="http://www.thesimplelogic.com/wordpress/wp-content/uploads/2017/12/ryu-python.png" /&gt;
&lt;/div&gt;
&lt;p&gt;Hear the story of how we used Python to build an AI that plays Super
StreetFighter II on the Super NES. We’ll cover how Python provided the
key glue between the SNES emulator and AI, and how the AI was built with
&lt;tt class="docutils literal"&gt;gym&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;keras-rl&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;tensorflow&lt;/tt&gt;. We’ll show examples of game
play and training, and talk about which bot beat which bot in the
bot-v-bot tournament we ran.&lt;/p&gt;
&lt;p&gt;After this talk you’ll know how easy it is to use Python and Python’s
machine learning libraries to teach a computer to play games. You’ll see
a practical example of the same type of machine learning used by
AlphaGo, and also get to find out which character in StreetFighter II is
best to pick when playing your friends.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Fletcher</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/using-python-to-build-an-ai-to-play-and-win-snes-streetfighter-ii.html</guid><category>gym</category><category>keras-rl</category><category>tensorflow.</category></item><item><title>The unconventional Introduction to Deep Learning</title><link>https://pyvideo.org/pycon-italia-2017/the-unconventional-introduction-to-deep-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you are into Deep Learning, sooner or later, it inevitbly happens
that you’re asked at least once to explain what actually means &lt;strong&gt;Deep
Learning&lt;/strong&gt; , and what’s all the fuss about it.&lt;/p&gt;
&lt;p&gt;Indeed, answering this question in a proper way, may vary (and it has
to) depending on the kind of audience you’ve been talking to.&lt;/p&gt;
&lt;p&gt;If you are talking to a machine learning experts, you have to
concentrate on what &lt;em&gt;deep&lt;/em&gt; means, for the multiple learning models you
can come up with. Most importarly, you have to convince them that a deep
learning model would work by far better than a more standard and robust
Random Forest or Support Vector Machine.&lt;/p&gt;
&lt;p&gt;On the other hand, if your audience is made up of engineers, they
[STRIKEOUT:don’t give a damn..] are definitely more interested in how
you implement your Artificial Neural Networks (ANN) rather than
understanding what are the implications of different &lt;em&gt;activations&lt;/em&gt; and
&lt;em&gt;optimizers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, if your audience is made up of data scientists - who are a good
mixture of the previous two, according to &lt;a class="reference external" href="http://drewconway.com/zia/2013/3/26/the-data-science-venn-diagram"&gt;Drew
Conway&lt;/a&gt;
- they are more or less interested in both the two aspects.&lt;/p&gt;
&lt;p&gt;The other way, that is the &lt;em&gt;unconventional way&lt;/em&gt;, to explain what Deep
Learning means, is from the perspective of the computational model it
requires to be properly effective. Therefore, you may want to talk about
ANN in terms of matrix multiplications algorithms, running on a (series
of) GPUs in parallel. And this is &lt;strong&gt;exactly&lt;/strong&gt; the perspecitve I intend
to pursue in this talk.&lt;/p&gt;
&lt;p&gt;This talk is for PyData scientists who are interested in understanding
Deep Learning models from this unconventional perspective, learning what
are the libraries and tools they may leverage for their experiments on
GPUs. Experienced engineers may likely benefit from this talk as well,
learning how they can make their models run fast(er).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/the-unconventional-introduction-to-deep-learning.html</guid><category>Keras</category><category>rumba</category><category>Deep-Learning</category><category>machine-learning</category><category>Theano</category><category>GPU</category><category>tensorflow</category></item><item><title>Deep Learning models in Python without gibberish</title><link>https://pyvideo.org/pycon-es-2017/deep-learning-models-in-python-without-gibberish.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Las dos tecnologías más disruptivas actualmente en AI son el Deep Learning y el Reinforcement Learning. ¿Podemos hacernos ricos aplicando estas tecnologías al mundo de las finanzas? En esta charla daremos algunas claves sobre cómo usar Tensorflow para crear redes neuronales que aprenden a invertir en los mercados, y una introducción al Deep Q Learning, un algoritmo de aprendizaje con refuerzo que aprende el “juego” de la Bolsa como cualquier otro robot sometido a ciclos de acción + recompensa.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maite Giménez</dc:creator><pubDate>Sat, 23 Sep 2017 13:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-23:pycon-es-2017/deep-learning-models-in-python-without-gibberish.html</guid><category>tensorflow</category></item><item><title>Codelab: ¿Podemos predecir quién muere en Juego de Tronos con TensorFlow?</title><link>https://pyvideo.org/pycon-es-2017/codelab-podemos-predecir-quien-muere-en-juego-de-tronos-con-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En este taller daremos un enfoque práctico al Deep Learning y
exploraremos TensorFlow, un framework originalmente liberado por
Google para construir modelos computacionales sobre grafos.&lt;/p&gt;
&lt;p&gt;Daremos un ejemplo, sobre el conjunto de datos de Juego de Tronos
recopilado originalmente por la Universidad Politécnica de Munich,
para, con los pequeños datos sociodemográficos que tenemos de los
personajes, decidir cuánta vida puede quedarles a manos del escritor.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gema Parreño</dc:creator><pubDate>Fri, 22 Sep 2017 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-22:pycon-es-2017/codelab-podemos-predecir-quien-muere-en-juego-de-tronos-con-tensorflow.html</guid><category>workshop</category><category>tensorflow</category></item><item><title>Python+TensorFlow Cómo Ganar Dinero en Bolsa aplicando Deep Learning</title><link>https://pyvideo.org/pycon-es-2017/pythontensorflow-como-ganar-dinero-en-bolsa-aplicando-deep-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Las dos tecnologías más disruptivas actualmente en AI son el Deep Learning y el Reinforcement Learning. ¿Podemos hacernos ricos aplicando estas tecnologías al mundo de las finanzas? En esta charla daremos algunas claves sobre cómo usar Tensorflow para crear redes neuronales que aprenden a invertir en los mercados, y una introducción al Deep Q Learning, un algoritmo de aprendizaje con refuerzo que aprende el “juego” de la Bolsa como cualquier otro robot sometido a ciclos de acción + recompensa.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Miguel Leiva Murillo</dc:creator><pubDate>Fri, 22 Sep 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-22:pycon-es-2017/pythontensorflow-como-ganar-dinero-en-bolsa-aplicando-deep-learning.html</guid><category>tensorflow</category></item><item><title>Working with TensorFlow - tips learned from Spark PyData</title><link>https://pyvideo.org/pydata-meetups/working-with-tensorflow-tips-learned-from-spark-pydata.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What tips can we use with TensorFlow taken from Spark/big-data experience? Working with cloud machines, experimenting, iterating, interactive work, monitoring and visualisation. Some script goodies on github provided for working with EC2 and Jupyter.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tal Franji</dc:creator><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-05:pydata-meetups/working-with-tensorflow-tips-learned-from-spark-pydata.html</guid><category>tensorflow</category></item><item><title>NASA Space APPS Challenge: Asteroid prediction impact</title><link>https://pyvideo.org/pydata-barcelona-2017/nasa-space-apps-challenge-asteroid-prediction-impact.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow and Prophet : Forecasting Asteroid impact with opensource software Talk about NASA Space APPS 2016 global finalist project , focused on neural net design&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The talk will have two separate parts ; the first of it focuses on explaining Tensorflow architecture and Prophet opensource tools and the second part will dive into the Neural Net design and forecast prediction .&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gema Parreño</dc:creator><pubDate>Sat, 20 May 2017 17:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/nasa-space-apps-challenge-asteroid-prediction-impact.html</guid><category>keynote</category><category>tensorflow</category><category>prophet</category></item><item><title>TensorFlow Wide &amp; Deep: Advanced Classification the easy way</title><link>https://pyvideo.org/pydata-barcelona-2017/tensorflow-wide-deep-advanced-classification-the-easy-way.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will go on an adventure to build a machine learning model that combines the benefits of linear regression models with deep neural networks. You will also gain some intuition about what is happening under the hood, and learn how you can use this model for your own datasets.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deep learning has already revolutionized machine learning research, but it remains out of reach for many developers. However, tools already exist today that enable leading-edge machine learning for many problem domains.
In this talk, we will go on an adventure to build a machine learning model that combines the benefits of linear models with deep neural networks. You will also gain some intuition about what is happening under the hood, and learn how to use this model for your own datasets! To accomplish this, we will use TensorFlow, an open-source machine learning library with a full Python interface. It has become the most popular machine learning library on GitHub, and the community around it is growing rapidly.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yufeng Guo</dc:creator><pubDate>Sat, 20 May 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/tensorflow-wide-deep-advanced-classification-the-easy-way.html</guid><category>tensorFlow</category></item><item><title>Experimenting with TensorFlow</title><link>https://pyvideo.org/pycon-ireland-2016/experimenting-with-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From implementing new research to validating results, running machine
learning experiments can often be a process of trial and error.
TensorFlow is an open source computing framework that places state of
the art algorithms and tools into developers' hands, allowing you to
rapidly iterate experiments, monitor their results and scale into
production. We'll show you how to train machine learning pipelines from
conception to release with TensorFlow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Breandan Considine</dc:creator><pubDate>Sat, 05 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-05:pycon-ireland-2016/experimenting-with-tensorflow.html</guid><category>tensorflow</category></item><item><title>Deep Python learning with Tensorflow - a data-driven approach to Python execution</title><link>https://pyvideo.org/pycon-se-2016/deep-python-learning-with-tensorflow-a-data-driven-approach-to-python-execution.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is it possible to train a neural network to execute Python scripts?&lt;/p&gt;
&lt;p&gt;Data-driven algorithm learning is a growing field of research. In this talk we will take a look at Google’s new deep learning library Tensorflow, and implement a basic model that can be taught how to execute simple Python scripts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rehn</dc:creator><pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-09:pycon-se-2016/deep-python-learning-with-tensorflow-a-data-driven-approach-to-python-execution.html</guid><category>tensorflow</category></item><item><title>H2O Deep Water with Python early sneek</title><link>https://pyvideo.org/pydata-dc-2016/h2o-deep-water-with-python-early-sneek.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData 2016&lt;/p&gt;
&lt;p&gt;Python as a language for DeepLearning. Python is emerging as the facto language to specify Deep Learning Networks. In this talk we will explore some of the popular libraries like Tensorflow and Keras to see the semantics used to describe such networks and look a bit more under the hood at what is the python layer actually doing for these well known deep learning libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabrizio Milo</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/h2o-deep-water-with-python-early-sneek.html</guid><category>deep learning</category><category>tensorflow</category><category>keras</category></item><item><title>How to Build Your Own Self Driving Toy Car</title><link>https://pyvideo.org/pydata-dc-2016/how-to-build-your-own-self-driving-toy-car.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;I’ve spent the past 6 months building a self-driving toy car using a Raspberry Pi, OpenCV, and TensorFlow. If you’ve ever thought about building your own self-driving toy car, this presentation will help you avoid common pitfalls and shed light on important tradeoffs that you’ll have to weigh along the way. I’ll cover things like how to parse images, how to effectively tune machine learning neural&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Zotti</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/how-to-build-your-own-self-driving-toy-car.html</guid><category>opencv</category><category>tensorflow</category></item><item><title>Fizz Buzz in Tensorflow</title><link>https://pyvideo.org/pydata-chicago-2016/fizz-buzz-in-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Fizz Buzz is a ubiquitous, nearly trivial problem used to weed out developer job applicants. Recently I wrote a joking-not-joking blog post about a fictional interviewee who solves it using neural networks. After the blog post went viral, I spent a lot of time thinking about Fizz Buzz as a machine learning problem. It turns out it's surprisingly interesting and subtle! I'll talk about how and why.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joel Grus</dc:creator><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-27:pydata-chicago-2016/fizz-buzz-in-tensorflow.html</guid><category>tensorflow</category></item><item><title>Introduction to Neural Networks with Tensorflow</title><link>https://pyvideo.org/pygotham-2016/introduction-to-neural-networks-with-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks are a powerful machine learning model that are used in many applications, from computer vision and speech recognition to time series modeling and natural language processing. TensorFlow is an open source machine learning library developed by Google that can be used to easily create these types of models. I will give an overview of neural networks, and show how to implement and use these models using TensorFlow's Python API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Craig</dc:creator><pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-16:pygotham-2016/introduction-to-neural-networks-with-tensorflow.html</guid><category>tensorflow</category></item><item><title>Make sense of Deep Neural Networks using TensorBoard</title><link>https://pyvideo.org/pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we look at some ways in which the TensorBoard utility can be used to better understand the structure of Deep Neural Networks and how they function. Best practices on how to use the TensorFlow Python API to make your models and results more interpretable are discussed.
​
Abstract
Deep Neural Networks are fast becoming the face of modern Machine Learning. But understanding how they work can be a real challenge, especially while you are trying to build a model. Google's recently published library, TensorFlow, includes a lesser-used utility called TensorBoard that can be used to visualize the structure of your neural network model and inspect how data flows through it. This talk will demonstrate some techniques which will help you use TensorBoard more effectively, and better understand how TensorFlow computations work. Code walkthroughs will be done in iPython notebooks, which will be made available to attendees.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Arpan likes to find computing solutions to everyday problems. He is interested in human-computer interaction, robotics and cognitive science. He obtained his PhD from North Carolina State University, focusing on biologically-inspired computer vision. ​Working at Udacity, he develops content for artificial intelligence and machine learning courses.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard"&gt;https://speakerdeck.com/pybay2016/arpan-chakraborty-make-sense-of-deep-neural-networks-using-tensorboard&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Arpan Chakraborty</dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-21:pybay-2016/make-sense-of-deep-neural-networks-using-tensorboard.html</guid><category>deep learning</category><category>tensorflow</category></item><item><title>TensorFlow on the Web</title><link>https://pyvideo.org/pybay-2016/tensorflow-on-the-web.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be about walking through the steps to put a TensorFlow project into production on the web with Flask and Heroku. The goal is to introduce the project and show how TensorFlow can be used online for real data tasks, and discuss other considerations for deployment of a TensorFlow project.
​
Abstract
TensorFlow is a deep learning library with Python and C++ bindings that was released in 2015. The talk start with a brief intro to TensorFlow, and then dive into the specific steps to set up a simple project that can be served online.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Kendall is a lead software engineer at YesGraph, where he uses machine learning and Flask to power better invite flows for mobile and web apps. Previously he worked as an independent software consultant for four years, and before that he was a hardware designer at Qualcomm in San Diego for three years. Kendall was an an organizer of the San Diego Python Users Group, where he helped plan six one-day workshops on various Python topics.
​
Bio2
David Clark has a background in astrophysics, where he used Python extensively to analyze astronomical data. He recently transitioned careers to data science. Currently he is doing consulting for two startups. At Palo Alto Scientific, Inc., he uses the machine learning library TensorFlow to model sensor data from a wearable and infer a runner’s performance. He is also doing work for Quantea, Inc., making a dashboard using the Python libraries Bokeh and Pandas.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web"&gt;https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kendall Chuang</dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-21:pybay-2016/tensorflow-on-the-web.html</guid><category>tensorflow</category></item><item><title>Deep Learning with Python &amp; TensorFlow</title><link>https://pyvideo.org/pycon-japan-2016/deep-learning-with-python-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning libraries. But there are many problems. Which do you use? How do they compare to each other? How can you use a model that has been trained in your production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. Tensorflow allows you to construct easy to understand data flow graphs which form a mathematical and logical pipeline. Creating data flow graphs allow easier visualization of complicated algorithms as well as running the training operations over multiple hardware GPUs.&lt;/p&gt;
&lt;p&gt;Tensorflow data flow graphs and operations are written in Python. In this talk I will discuss how you can use TensorFlow to create Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Lewis</dc:creator><pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-21:pycon-japan-2016/deep-learning-with-python-tensorflow.html</guid><category>tensorflow</category><category>deep learning</category></item><item><title>지적 대화를 위한 깊고 넓은 딥러닝 (Feat. TensorFlow)</title><link>https://pyvideo.org/pycon-apac-2016/jijeog-daehwareul-wihan-gipgo-neolbeun-dibreoning-feat-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자:  김태훈 / carpedm20
슬라이드:  &lt;a class="reference external" href="https://www.slideshare.net/carpedm20/pycon-korea-2016"&gt;https://www.slideshare.net/carpedm20/pycon-korea-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">김태훈</dc:creator><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-30:pycon-apac-2016/jijeog-daehwareul-wihan-gipgo-neolbeun-dibreoning-feat-tensorflow.html</guid><category>tensorflow</category></item><item><title>Creating AI chat bot with Python 3 and TensorFlow</title><link>https://pyvideo.org/pycon-apac-2016/creating-ai-chat-bot-with-python-3-and-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: 신정규 ( Jeongkyu Shin )
슬라이드: &lt;a class="reference external" href="https://speakerdeck.com/inureyes/building-ai-chat-bot-using-python-3-and-tensorflow"&gt;https://speakerdeck.com/inureyes/building-ai-chat-bot-using-python-3-and-tensorflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recently, chat bot has become the center of public attention as a new mobile user interface since 2015. Chat bots are widely used to reduce human-to-human interaction, from consultation to online shopping and negotiation, and still expanding the application coverage. Also, chat bot is the basic of conversational interface and non-physical input interface with combination of voice recognition.&lt;/p&gt;
&lt;p&gt;Traditional chat bots were developed based on the natural language processing (NLP) and bayesian statistics for user intention recognition and template-based response. However, since 2012, accelerated advance in deep-learning technology and NLPs using deep-learning opened the possibilities to create chat bots with machine learning. Machine learning (ML)-based chat bot development has advantages, for instance, ML-based bots can generate (somewhat non-sense but acceptable) responses to random asks that has no connection with the context once the model is constructed with appropriate learning level.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce the garage chat bot creation process step-by-step. First, get the data and preprocess it with Python 3 and pandas. Also, data is modified to more trainable form. With preprocessed data, design the deep learning model with TensorFlow which is suitable for sentence-type input / output and train it. After training, serve the model with messenger interface created by using telegram API and Python 3, and demonstrate the result.&lt;/p&gt;
&lt;p&gt;In the process, we have to solve several problems. First is the preprocessing the Korean sentences with natural language processors, and tokenizing the sentences with proper length and types. Also, we have to solve the ‘josa (postpositions in Korean) hell” and conjunction problems to construct TensorFlow model. In addition to preprocessing, model architecture to recognize the conversational context is also needed. To serve bot with Python HTTP server and telegram API, some points demand deliberation. I’ll share my multi-modal bot model idea, implementation and tips to solve these problems.&lt;/p&gt;
&lt;p&gt;(Korean)&lt;/p&gt;
&lt;p&gt;chat bot은 2015년부터 모바일을 중심으로 새로운 사용자 UI로 주목받고 있다. 챗 봇은 상담시 인간-인간 인터랙션을 줄이는 용도부터 온라인 쇼핑 구매에 이르기까지 다양한 분야에 활용되고 있으며 그 범위를 넓혀 나가고 있다. 챗 봇은 대화형 인터페이스의 기초이면서 동시에 (음성 인식과 결합을 통한) 무입력 방식 인터페이스의 기반 기술이기도 하다.&lt;/p&gt;
&lt;p&gt;기존의 챗 봇들은 자연어 분석과 베이지안 통계에 기반한 사용자 의도 패턴 인식과 그에 따른 템플릿 응답을 기본 원리로 하여 개발되었다. 그러나 2012년 이후 급속도로 발전한 딥러닝 및 그에 기초한 자연어 인식 기술은 기계 학습을 이용해 챗 봇을 만들 수 있는 가능성을 열었다. 기계학습을 통해 챗 봇을 개발할 경우, 충분한 학습도의 모델을 구축한 후에는 학습 데이터에 따라 컨텍스트에서 벗어난 임의의 문장 입력에 대해서도 적당한 답을 생성할 수 있다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;이 발표에서는 Python 3 를 이용하여 실제 사용할 수 있는 챗 봇을 만드는 과정을 단계별로 진행한다. 우선 데이터를 구한 후 Python 3 와 Pandas를 사용하여 데이터를 전처리한다. 이렇게 전처리한 데이터를 학습에 적당한 형태로 재가공한다. 그 후 컴퓨터에 TensorFlow의 python 3 패키지를 설치한다. 이후 TensorFlow 를 이용하여 문장형 입출력에 적절한 딥러닝 모델을 설계한 후, 앞에서 전처리한 데이터를 이용하여 학습시킨 모델을 만든다. 이렇게 만든 모델을 telegram API 를 이용해 인터페이스를 만든 후, telegram에 봇을 친구로 등록하여 대화를 시연한다.&lt;/p&gt;
&lt;p&gt;이 과정에서 여러 문제들을 해결해야 한다. 우선 한국어 자연어 처리를 위해 데이터를 적절히 전처리하는 과정과, 모델 학습을 위해 문장의 길이 및 형태를 적절히 토크나이징하는 과정이 필요하다. 그 다음 Tensorflow 로 모델을 설계하고 딥러닝 모델로 학습하는 단계에서 장애가 되는 조사 및 접속사 처리, 오타 처리등의 문제를 해결해야 한다. 또한 연속 대화 구현을 위하여 문장 단위의 입출력이 아니라 컨텍스트를 인식하기 위한 모델 설계 또한 필요하다. 학습한 결과를 파이썬 HTTP 서버 및 telegram API를 이용해 서빙하는 부분에서 몇가지 고려할 부분들도 있다. 이러한 부분들에 대한 아이디어 및 구현과 팁을 공유하고자 한다.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">신정규</dc:creator><pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-29:pycon-apac-2016/creating-ai-chat-bot-with-python-3-and-tensorflow.html</guid><category>tensorflow</category></item><item><title>Deep Learning with Python &amp; TensorFlow</title><link>https://pyvideo.org/pycon-apac-2016/deep-learning-with-python-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: Ian Lewis / ianlewis
슬라이드: &lt;a class="reference external" href="https://github.com/pythonkr/pyconapac-2016-files/raw/master/20160813-103-17-IanLewis.pdf"&gt;https://github.com/pythonkr/pyconapac-2016-files/raw/master/20160813-103-17-IanLewis.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Lewis</dc:creator><pubDate>Fri, 26 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-26:pycon-apac-2016/deep-learning-with-python-tensorflow.html</guid><category>deep learning</category><category>tensorflow</category></item><item><title>Learning TensorFlow</title><link>https://pyvideo.org/pycon-au-2016/learning-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Robert Layton
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/126/view_talk"&gt;https://2016.pycon-au.org/schedule/126/view_talk&lt;/a&gt;
The recently released TensorFlow library has caused great waves in machine learning circles, with its powerful syntax that allows for distributed computation, improved efficiency, and modularisation. The framework allows you to build graph-based models, such as those used in machine learning and artificial intelligence, and have those models run on a distributed computing systems, including GPUs.&lt;/p&gt;
&lt;p&gt;This talk will cover what TensorFlow is, why/when you should use it, and cover the basics surrounding Variables, Placeholders, and Custom Functions. Importantly, there are several use cases &lt;em&gt;not&lt;/em&gt; focused on data analytics - TensorFlow is more than just a machine learning library!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Layton</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/learning-tensorflow.html</guid><category>datascience</category><category>tensorflow</category></item><item><title>Deep Learning with Python &amp; TensorFlow</title><link>https://pyvideo.org/europython-2016/deep-learning-with-python-tensorflow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ian Lewis - Deep Learning with Python &amp;amp; TensorFlow
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow"&gt;https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production app? In this talk I will discuss how you can use TensorFlow
to create Deep Learning applications. I will discuss how it compares
to other Python machine learning libraries, and how to deploy into
production.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open-Source framework created at Google for
building Deep Learning applications. Tensorflow allows you to
construct easy to understand data flow graphs in Python which form a
mathematical and logical pipeline. Creating data flow graphs allow
easier visualization of complicated algorithms as well as running the
training operations over multiple hardware GPUs in parallel.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how you can use TensorFlow to create Deep
Learning applications. I will discuss how it compares to other Python
machine learning libraries like Theano or Chainer. Finally, I will
discuss how trained TensorFlow models could be deployed into a
production system using TensorFlow Serve.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Lewis</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/deep-learning-with-python-tensorflow.html</guid><category>tensorflow</category><category>deep learning</category></item><item><title>Building a Pong playing AI in just 1 hour (plus 4 days training...)</title><link>https://pyvideo.org/pydata-london-2016/daniel-k-slater-building-a-pong-playing-ai-in-just-1-hour-plus-4-days-training.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;We will build an AI that can master the game of Pong in just 1 hour. In the course of this we will talk through some of the tools involved. Q-learning , Deep learning and Convolutional nets and how they fit into Pong. Most of the heavy lifting will be done using Google's recently released Tensorflow libraries.&lt;/p&gt;
&lt;p&gt;We will start by setting up a Python an agent in Pong that moves completely randomly. I will then talk over what Q-learning is and how it works and a bit about Convolutional nets. We will then build the actual agent using Tensorflow.&lt;/p&gt;
&lt;p&gt;Full code will be given, including links for downloading the resources required, so hopefully the audience can build this on their laptops. I would hope to give enough information that users will be able to make there own agents independently once finished.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/danielslater/building-a-pong-ai"&gt;https://speakerdeck.com/danielslater/building-a-pong-ai&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub: &lt;a class="reference external" href="https://github.com/DanielSlater/PyDataLondon2016"&gt;https://github.com/DanielSlater/PyDataLondon2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel K Slater</dc:creator><pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-09:pydata-london-2016/daniel-k-slater-building-a-pong-playing-ai-in-just-1-hour-plus-4-days-training.html</guid><category>tensorflow</category></item><item><title>Diving into Machine Learning through TensorFlow</title><link>https://pyvideo.org/pycon-us-2016/julia-ferraioli-amy-unruh-eli-bixby-diving-into-machine-learning-through-tensorflow-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Julia Ferraioli, Amy Unruh, Eli Bixby&lt;/p&gt;
&lt;p&gt;Machine learning can be an intimidating subject. In this session, we’ll get practical, hands-on experience with core concepts in machine learning with TensorFlow, an open source deep learning library. We’ll introduce the basics of TensorFlow, including how to ingest and prepare raw data for use, run a variety of algorithms to gain insight from the data, and have some fun with visualization.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julia Ferraioli</dc:creator><pubDate>Sun, 29 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-29:pycon-us-2016/julia-ferraioli-amy-unruh-eli-bixby-diving-into-machine-learning-through-tensorflow-pycon-2016.html</guid><category>tensorflow</category></item><item><title>Deep Learning in Python</title><link>https://pyvideo.org/pycon-za-2016/deep-learning-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will give an introduction to Neural Networks and Deep Learning
in Python. We will cover some of the history of Neural Networks and
obstacles that were encountered in the 1990s. This will then lead onto
the developments in 2006 and 2012 that lead to the resurgence of
interest in Neural Networks and the rebranding of the field as Deep
Learning. These developments will be illustrated by means of an extended
example of building a classifier of hand written digits on the MNIST
dataset. We will start with a simple Multi-Layer Perceptron and then
build this up into a Stacked Denoising Autoencoder. All code will be
developed using the Keras framework and TensorFlow and can be run on a
simple laptop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tobias Brandt</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pycon-za-2016/deep-learning-in-python.html</guid><category>deep learning</category><category>keras</category><category>tensorflow</category></item></channel></rss>