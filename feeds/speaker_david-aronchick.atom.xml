<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-aronchick.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-13T00:00:00+00:00</updated><entry><title>KubeFlow: Pythonic Machine Learning at Scale on Kubernetes</title><link href="https://pyvideo.org/scipy-2018/kubeflow-pythonic-machine-learning-at-scale-on-kubernetes.html" rel="alternate"></link><published>2018-07-13T00:00:00+00:00</published><updated>2018-07-13T00:00:00+00:00</updated><author><name>Paige Bailey</name></author><id>tag:pyvideo.org,2018-07-13:scipy-2018/kubeflow-pythonic-machine-learning-at-scale-on-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“KubeFlow marks the beginning of the end of the data scientist and/or
software engineer as disparate roles. Like DevOps has merged operations
and development, DataDevOps will consume data science.” - Philip Winder,
an engineer and consultant at Container Solutions &lt;a class="reference external" href="http://container"&gt;http://container&lt;/a&gt;-
solutions.com/tensorflow-on-kubernetes-kubeflow/ You've created and
tuned a machine learning model, using TensorFlow, PyTorch, or
scikit-learn - now what? How can you ensure that the model is deployed
to your DevOps team as production-ready code, and can scale as needed on
incoming data? How can you seamlessly migrate a model from your local
laptop / virtual machine to a hosted server on your cloud platform of
choice? This talk walks through the architecture of Kubeflow: a project
dedicated to answering those questions - and to making machine learning
on Kubernetes simple, portable and scalable. We will describe, in
detail, the three components of the project: * a JupyterHub platform
for creating and managing Jupyter notebook servers that are used by data
science and research groups; * a Tensorflow Customer Resource for
managing compute resources to a specific cluster size; and * a
Tensorflow Serving container to house the machine learning work. By the
end of this talk, you will have a firm understanding of why Kubernetes
would be useful to machine learning engineers, and how you can deploy
it, today, to support your predictive models.
&lt;a class="reference external" href="https://github.com/kubeflow/kubeflowPresenter(s"&gt;https://github.com/kubeflow/kubeflowPresenter(s&lt;/a&gt;): Speaker: Paige Bailey,
Microsoft Speaker: David Aronchick, Google&lt;/p&gt;
</summary></entry></feed>