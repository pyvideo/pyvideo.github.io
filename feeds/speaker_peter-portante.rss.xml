<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 17 Mar 2013 00:00:00 +0000</lastBuildDate><item><title>An outsider's look at co-routines.</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An outsider's look at co-routines.&lt;/p&gt;
&lt;p&gt;Presented by Peter Portante&lt;/p&gt;
&lt;p&gt;Let's take an outsiders look at coroutines, the underlying concept used
by greenlets. First we'll define what they are conceptually, and show
some typical use cases. Then we'll take a look at a sampling of the
implementations out there to see what they are actually doing to
implement the concept. Finally, we'll show their pluses and minuses, and
highlight some features of packages that use them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define what a coroutine is&lt;ul&gt;
&lt;li&gt;Coroutine state not known to operating system&lt;/li&gt;
&lt;li&gt;Difference between a thread or process&lt;/li&gt;
&lt;li&gt;What state is required for tracking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Show how coroutines are used&lt;ul&gt;
&lt;li&gt;gevent example&lt;/li&gt;
&lt;li&gt;concurrence example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Review two implementations&lt;ul&gt;
&lt;li&gt;Greenlets&lt;/li&gt;
&lt;li&gt;Python based co-routines using generators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Advantages/Disadvantages&lt;/li&gt;
&lt;li&gt;Differentiating features of packages that use them&lt;ul&gt;
&lt;li&gt;Concurrence&lt;/li&gt;
&lt;li&gt;Gevent&lt;/li&gt;
&lt;li&gt;Eventlets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Portante</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-outsider--39-s-look-at-co-routines.html</guid><category>concurrence</category><category>coroutines</category><category>gevent</category><category>greenlets</category><category>pycon</category><category>pycon2011</category></item><item><title>39. Python under PyCScope</title><link>https://pyvideo.org/pycon-us-2012/39-python-under-pycscope.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;CScope has been around for years, and is a very useful tool to get a
handle on C source code. Pycscope is an attempt to bring those benefits
to the world of Python. Unfortunately, the existing version is woefully
out of date. We take a walk through an attempt to update it, correct
some flaws and make it more generally useful to us, while giving us a
view into the Python parser.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Portante</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-11:pycon-us-2012/39-python-under-pycscope.html</guid></item><item><title>[Poster] The State of PyCscope</title><link>https://pyvideo.org/pycon-us-2013/the-state-of-pycscope.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyCscope V1.0 has been released and we want to bring folks up to speed
on the current state of its features and a bit about how it works.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Portante</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-17:pycon-us-2013/the-state-of-pycscope.html</guid><category>poster</category></item></channel></rss>