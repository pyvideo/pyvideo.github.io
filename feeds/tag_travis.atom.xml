<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_travis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-04-06T00:00:00+00:00</updated><entry><title>Gestión del ciclo de vida de un proyecto desde el propio repositorio</title><link href="https://pyvideo.org/pycon-es-2014/gestion-del-ciclo-de-vida-de-un-proyecto-desde-el-propio-repositorio.html" rel="alternate"></link><published>2015-04-06T00:00:00+00:00</published><updated>2015-04-06T00:00:00+00:00</updated><author><name>Miguel Angel García</name></author><id>tag:pyvideo.org,2015-04-06:pycon-es-2014/gestion-del-ciclo-de-vida-de-un-proyecto-desde-el-propio-repositorio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Me gustaría contar nuestro último caso de éxito utilizando Python. Consiste en un sistema de actualización automática de trabajos en el servidor de Integración Contínua. Está basado en la forma de trabajar de Travis, de manera que la especificación de las pruebas (entorno y ejecución) se encuentre en el mismo repositorio que el código, y se gestione automáticamente el entorno de integración contínua. Entre otras ventajas, se consigue que:&lt;/p&gt;
&lt;p&gt;Los desarrolladores tengan control completo sobre el entorno de pruebas existe un histórico de la configuración del entorno de pruebas cierta independencia del sistema de Integración Contínua
Desgraciadamente, Travis no se ajustaba completamente a nuestros requisitos, por lo que tuvimos que escribir nuestra propia solución. En Python, por supuesto.&lt;/p&gt;
</summary><category term="travis"></category></entry></feed>