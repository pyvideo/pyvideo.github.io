<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Adrian Mönnich</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 01 Dec 2021 00:00:00 +0000</lastBuildDate><item><title>useFlask() - or how to use a React frontend for your Flask app</title><link>https://pyvideo.org/europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and
just a bit of AJAX. All the JavaScript is usually included straight from
.js files or just minified with Python tools like webassets.&lt;/p&gt;
&lt;p&gt;But the JavaScript ecosystem has evolved a lot - one can now use tools
like Babel to write modern JS even when targeting older browsers and a
Webpack+Babel build is very straightforward and allows for advanced
preprocessing of JavaScript code.&lt;/p&gt;
&lt;p&gt;In this talk we'll even go one step further and not only use Webpack to
build the assets, but also integrate a small demo Flask app with a React
frontend where the Flask app only serves the static HTML page and uses a
RESTful API to communicate with the React app.&lt;/p&gt;
&lt;p&gt;We'll also look into how to keep convenient Flask features such as URL
building in client-side code (using the js-flask-urls package) and of
course React hooks will be used!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Mönnich</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</guid><category>EuroPython 2019</category><category>JavaScript Web Frameworks</category><category>Web Servers and MicroFWs</category></item><item><title>useFlask() - or how to use a React frontend for your Flask app</title><link>https://pyvideo.org/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel to write modern JS even when targeting older browsers and a Webpack+Babel build is very straightforward and allows for advanced preprocessing of JavaScript code. In this talk we'll even go one step further and not only use Webpack to build the assets, but also integrate a small demo Flask app with a React frontend where the Flask app only serves the static HTML page and uses a RESTful API to communicate with the React app. We'll also look into how to keep convenient Flask features such as URL building in client-side code (using the js-flask-urls package) and of course React hooks will be used!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Mönnich</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-05:/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</guid><category>FlaskCon 2020</category><category>ReactJs</category><category>Flask</category><category>FlaskCon</category></item><item><title>Flask-Multipass - A pluggable authentication framework for Flask</title><link>https://pyvideo.org/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authentication using username and password may be easy, but if you prefer letting some third party handle it, that may be tricky: You are now dealing with protocols like OAuth, OIDC or SAML - and all of them have their own pitfalls. And depending on what you use, you may even have to change because the provider you are using is changing their APIs. Flask-Multipass provides an easy-to-use wrapper around this complexity. This talk will go into details on why the extension was created, which cases it covers (and which it doesn't - it's not another Flask-Login!), and how its flexibility allows easy implementation of new authentication methods.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Mönnich</dc:creator><pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-12-01:/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html</guid><category>FlaskCon 2021</category><category>flask</category><category>authentication</category><category>security</category></item></channel></rss>