<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 25 Aug 2018 00:00:00 +0000</lastBuildDate><item><title>Danger Will Robinson! Warning! Warning! Warning!</title><link>https://pyvideo.org/pycon-au-2018/danger-will-robinson-warning-warning-warning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Danger Will Robinson! Warning! Warning! Warning! (What Python warnings are, why you should turn them on and how to create your own)&lt;/p&gt;
&lt;p&gt;Python's warnings mechanism is an important part of creating robust, reliable, production grade code. Unfortunately, it's also one of the most under-used standard libraries. Help find the bugs and errors with warnings! Ignore them at your peril! Suitable for beginner to intermediate.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Sat, 25 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-25:pycon-au-2018/danger-will-robinson-warning-warning-warning.html</guid></item><item><title>Python on Windows</title><link>https://pyvideo.org/pycon-au-2016/python-on-windows.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peter Lovett
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/132/view_talk"&gt;https://2016.pycon-au.org/schedule/132/view_talk&lt;/a&gt;
Some of us working in the corporate world are required to use Microsoft Windows.
How can we bring the goodness of Python to the Windows platform?
What are the problems you could encounter and how can you solve them?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wail at install directory problems!&lt;/li&gt;
&lt;li&gt;scream at path separators!&lt;/li&gt;
&lt;li&gt;cry at the craziness of special window installers&lt;/li&gt;
&lt;li&gt;revel in the beauty of lovely help&lt;/li&gt;
&lt;li&gt;marvel at the joy of py launcher and a proper #! line&lt;/li&gt;
&lt;li&gt;be terrified at accessing the winapi through the win32 libraries&lt;/li&gt;
&lt;li&gt;be astonished at Python taking control of Excel / Word / Outlook / Acrobat through the COM interface with win32com&lt;/li&gt;
&lt;li&gt;laugh at batch files!&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-on-windows.html</guid></item><item><title>Python Dark Corners Revisited</title><link>https://pyvideo.org/pycon-au-2012/python-dark-corners-revisited.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python can be deceptive - it looks so simple.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python can be deceptive - it looks so simple. Surely it will take only 5
to 10 minutes to learn.&lt;/p&gt;
&lt;p&gt;Self taught programmers often miss important fundamentals in Python -
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Everything is an Object. Yes everything. Integers, 'real' objects,
functions, classes. Ooooh template metaprogramming.&lt;/li&gt;
&lt;li&gt;It's only a name. Whoops. True, False, no longer None.&lt;/li&gt;
&lt;li&gt;'Objects can change their type'. Not.&lt;/li&gt;
&lt;li&gt;How the heck to a actually make a copy&lt;/li&gt;
&lt;li&gt;Which parts of tuples are constant?&lt;/li&gt;
&lt;li&gt;Deep and Shallow - weren't not talking philosophy here&lt;/li&gt;
&lt;li&gt;Accidental name creation - there's no easy solution&lt;/li&gt;
&lt;li&gt;Argument passing, Mutable arguments, default arguments, Mutable
default arguments&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Tue, 21 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-21:pycon-au-2012/python-dark-corners-revisited.html</guid></item><item><title>Python 102 - a recap and a bit more.</title><link>https://pyvideo.org/pycon-au-2013/python-102-a-recap-and-a-bit-more.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Self taught in Python? Think you missed a bit? This 90 minutes will fix
everything. From a really quick recap of the bare-bones essentials,
you'll get a good grasp and the core of Python. Want to know more about
classes, objects and more? This is for you. Also suitable for beginners
who need a quick start. * Recap of the essentials * Understanding the
object model * Everything you've ever wanted to know about dictionaries
* Building on types * Creating your own types - Object Oriented
Programming * Important elements from the Standard Library And lots of
time for questions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/python-102-a-recap-and-a-bit-more.html</guid></item><item><title>On Being Pythonic</title><link>https://pyvideo.org/pycon-au-2015/on-being-pythonic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Design Patterns, standard designs and idioms in Python&lt;/p&gt;
&lt;p&gt;Pythonic (Noun): Uses Python idioms well, that it is natural or shows
fluency in the language.&lt;/p&gt;
&lt;p&gt;Even though youâ€™re using Python syntax and keywords, your code still
smells like C, Java or Perl. Or just feels like it's not the best way.
This tour of Python is about changing the way you think, and to write
Python that makes the best use of the language. As a result, your Python
will be cleaner, simpler, nicer, and be more readable.&lt;/p&gt;
&lt;p&gt;Even though you know the syntax to make a class and inherit, you don't
know when you should. Composition? IsA, HasA, IsLikeA? What about
factories, singletons, iterators and adapters?&lt;/p&gt;
&lt;p&gt;Mashing together a long and painful background of C, C++, Perl and Java
coding, a mind-expanding trip down the Elements of Reusable
Object-Oriented Software rabbit hole, and over 30 years programming
experience, Peter brings some clarity, reason and ideas on Pythonic
idioms and OO design as implemented in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:pycon-au-2015/on-being-pythonic.html</guid></item></channel></rss>