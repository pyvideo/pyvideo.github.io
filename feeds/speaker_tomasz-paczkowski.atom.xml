<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tomasz-paczkowski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-25T00:00:00+00:00</updated><entry><title>Fun with cPython memory allocator</title><link href="https://pyvideo.org/europython-2014/fun-with-cpython-memory-allocator.html" rel="alternate"></link><published>2014-07-25T00:00:00+00:00</published><updated>2014-07-25T00:00:00+00:00</updated><author><name>Tomasz Paczkowski</name></author><id>tag:pyvideo.org,2014-07-25:europython-2014/fun-with-cpython-memory-allocator.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Working with Python does not usually involve debugging memory problems:
the interpreter takes care of allocating and releasing system memory and
you get to enjoy working on real world issues. But what if you encounter
such problems? What if your program never releases memory? How do you
debug it?&lt;/p&gt;
&lt;p&gt;This talk describes some of the lesser known properties of cPython
memory allocator and some ways to debug memory-related problems, all
this based on real events.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with Python does not usually involve debugging memory problems:
the interpreter takes care of allocating and releasing system memory and
you get to enjoy working on real problems. But what if you encounter
such problems? What if your program never releases memory? How do you
debug it?&lt;/p&gt;
&lt;p&gt;I will tell a story of one programmer discovering such problems. The
talk will take listeners on a journey of issues they can encounter,
tools they can use to debug the problems and possible solutions to seek
out. There will also be a brief mention of general memory management
principles.&lt;/p&gt;
&lt;p&gt;cPython uses a combination of its own allocator, &lt;tt class="docutils literal"&gt;malloc&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;mmap&lt;/tt&gt; pools to manage memory of Python programs. It usually is smart
enough, but there are some darker corners that are not well known by an
average Joe Programmer (read: me).&lt;/p&gt;
&lt;p&gt;There are tools that can help debug memory problems, but those are also
relatively unknown, and tend to have documentation that one might find
lacking. I will describe one such tool, called &lt;tt class="docutils literal"&gt;guppy&lt;/tt&gt;, which I have
found particulary helpful.&lt;/p&gt;
</summary></entry></feed>