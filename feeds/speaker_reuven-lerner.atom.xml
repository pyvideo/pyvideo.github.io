<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Reuven Lerner</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_reuven-lerner.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Practical decorators</title><link href="https://pyvideo.org/europython-2019/practical-decorators.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Reuven Lerner</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/practical-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher level of abstraction, applying the same treatment to functions
and classes.&lt;/p&gt;
&lt;p&gt;But what can you actually do with them? For many Python developers I've
encountered, decorators sometimes appear to be a solution looking for a
problem.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you some practical uses for decorators, and how
you can use them to make your code more readable and maintainable, while
also providing more semantic power. Moreover, you'll see examples of
things would be hard to do without decorators. I hope that after this
talk, you'll have a good sense of how to use decorators in your own
Python projects.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Compiler and Interpreters"></category><category term="Data Structures"></category><category term="Programming"></category><category term="Python Skills"></category><category term="Python general"></category></entry><entry><title>How to sort anything</title><link href="https://pyvideo.org/europython-2020/how-to-sort-anything.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Reuven Lerner</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/how-to-sort-anything.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keeping your data organized with &amp;quot;sorted&amp;quot; and custom functions&lt;/p&gt;
&lt;p&gt;Sorting is one of those things that we take for granted in Python. The built-in &amp;quot;sorted&amp;quot; function knows how to sort any iterable of objects that are themselves sortable.&lt;/p&gt;
&lt;p&gt;But hiding behind that simple description is a great deal of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keeping your data organized with &amp;quot;sorted&amp;quot; and custom functions&lt;/p&gt;
&lt;p&gt;Sorting is one of those things that we take for granted in Python. The built-in &amp;quot;sorted&amp;quot; function knows how to sort any iterable of objects that are themselves sortable.&lt;/p&gt;
&lt;p&gt;But hiding behind that simple description is a great deal of depth. In this talk, I'll go deep into what it means to sort, and how we can sort any collection of Python data.  We'll see how you can use custom functions to sort built-in data structures in new and interesting ways.  And we'll see how you can design your own custom classes such that they will sort in just the way you want.&lt;/p&gt;
&lt;p&gt;After watching this talk, you'll have a better understanding of sorting, built-in data structures, function objects, and how &amp;quot;magic methods&amp;quot; affect the our Python classes.  Moreover, you'll be able to write clearer, shorter, and more easily understood code.&lt;/p&gt;
&lt;p&gt;Topics I'll address in this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;sorted&amp;quot; and Timsort&lt;/li&gt;
&lt;li&gt;Sorting a list of simple structures&lt;/li&gt;
&lt;li&gt;Reversing the direction with &amp;quot;reverse&amp;quot;&lt;/li&gt;
&lt;li&gt;Custom sorting with &amp;quot;key&amp;quot;&lt;/li&gt;
&lt;li&gt;Stable sort&lt;/li&gt;
&lt;li&gt;Sorting a list of dicts&lt;/li&gt;
&lt;li&gt;Using &amp;quot;lambda&amp;quot;&lt;/li&gt;
&lt;li&gt;Using operator.itemgetter&lt;/li&gt;
&lt;li&gt;Sorting a list of named tuples&lt;/li&gt;
&lt;li&gt;Sorting a list of objects&lt;/li&gt;
&lt;li&gt;Making your object sortable&lt;/li&gt;
&lt;li&gt;The functools.total_ordering decorator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an intermediate-level talk; I'll assume that anyone attending knows how to write functions, classes, and methods.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Data"></category><category term="Development"></category><category term="Functional Programming"></category></entry><entry><title>Diversity &amp; Inclusion Workgroup</title><link href="https://pyvideo.org/pycon-us-2022/diversity-inclusion-workgroup.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Georgi Ker</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/diversity-inclusion-workgroup.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity &amp;amp; Inclusion Workgroup Panel
Georgi Ker, Lorena Mesa, Anthony Shaw, Reuven Lerner&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="Keynote"></category></entry></feed>