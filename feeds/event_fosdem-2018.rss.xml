<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 03 Feb 2018 00:00:00 +0000</lastBuildDate><item><title>Lift your Speed Limits with Cython</title><link>https://pyvideo.org/fosdem-2018/lift-your-speed-limits-with-cython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fast native code for Python&lt;/p&gt;
&lt;p&gt;The Cython compiler is the most widely used static compiler for Python. It is used to speed up Python code and to extend the CPython runtime with fast native extension modules that process huge amounts of data all around the world. This talk by one of the core developers gives a quick intro into the compiler, the language, and some of its main applications in the Python big-data ecosystem.&lt;/p&gt;
&lt;p&gt;Cython is not just a Python compiler or a native code wrapping tool, but also a programming language in its own right that mixes the Python language with C and C++ data types. The fact that you can simply drop Python code into it and compile it gives a very low entry level into performance optimisation by statically compiling your critical code and then tuning it into fast C to make it run faster.&lt;/p&gt;
&lt;p&gt;In this talk, I will guide you through some examples where the compilation of regular Python code leads to faster execution, and present ways how to make the code run much faster.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Behnel</dc:creator><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-02-03:fosdem-2018/lift-your-speed-limits-with-cython.html</guid><category>cython</category></item><item><title>Load testing web services at Mozilla with Molotov</title><link>https://pyvideo.org/fosdem-2018/load-testing-web-services-at-mozilla-with-molotov.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk presents the different challenges Mozilla faces when deploying web services for millions of users, and how load testing is used to prevent the most common pitfalls, through the usage of Molotov.&lt;/p&gt;
&lt;p&gt;Molotov (&lt;a class="reference external" href="http://molotov.readthedocs.io/"&gt;http://molotov.readthedocs.io/&lt;/a&gt;) is a custom load testing tool the Mozilla QA team created and uses to stress applications that get deployed for Firefox.&lt;/p&gt;
&lt;p&gt;This talk will present the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the different types of applications Mozilla deploys in the cloud&lt;/li&gt;
&lt;li&gt;the most common bottlenecks and how to detect and correct them&lt;/li&gt;
&lt;li&gt;the existing load testing tools&lt;/li&gt;
&lt;li&gt;Molotov features and examples&lt;/li&gt;
&lt;li&gt;Continuous Load Testing principles&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the end of the talk, attendees should have a good understanding of how an application should be stressed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziade</dc:creator><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-02-03:fosdem-2018/load-testing-web-services-at-mozilla-with-molotov.html</guid><category>molotov</category></item><item><title>Python 3: 10 years later</title><link>https://pyvideo.org/fosdem-2018/python-3-10-years-later.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Looking back at Python evolutions of the last 10 years&lt;/p&gt;
&lt;p&gt;Python 3.0 was released 10 years ago. It's time to look back: analyze the migration from Python 2 to Python 3, see the progress we made on the language, list bugs by cannot be fixed in Python 2 because of the backward compatibility, and discuss if it's time or not to bury Python 2.&lt;/p&gt;
&lt;p&gt;Python became the defacto language in the scientific world and the favorite programming language as the first language to learn programming.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Stinner</dc:creator><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-02-03:fosdem-2018/python-3-10-years-later.html</guid><category>python3</category></item><item><title>Surviving in an Open Source Niche: the Pythran case</title><link>https://pyvideo.org/fosdem-2018/surviving-in-an-open-source-niche-the-pythran-case.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythran is an open source compiler for scientific kernels written in Python.&lt;/p&gt;
&lt;p&gt;Its goal is to turn scientific kernels written in Python into native modules that runs much faster, take advantage of SIMD instruction units, multi-cores, get rid of the GIL without sacrifying high-level programing. As such it understands a strict subset of the Python language, keeping 100% backward compatibiliy with the original language.&lt;/p&gt;
&lt;p&gt;Looks cool? It is. But the target niche is small (high performance computing in Python and several great tools already exist (Cython, Numba). How have Pythran survived in the OSS jungle for 6 years while gathering a small but living community?&lt;/p&gt;
&lt;p&gt;The following points will be discussed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;making reasonable technical choices&lt;/li&gt;
&lt;li&gt;targeting a niche&lt;/li&gt;
&lt;li&gt;sharing the joy&lt;/li&gt;
&lt;li&gt;surviving the Python3 switch&lt;/li&gt;
&lt;li&gt;building a community&lt;/li&gt;
&lt;li&gt;surviving the bus factor&lt;/li&gt;
&lt;li&gt;finding funding&lt;/li&gt;
&lt;li&gt;not becoming a workaholic&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serge Guelton</dc:creator><pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-02-03:fosdem-2018/surviving-in-an-open-source-niche-the-pythran-case.html</guid><category>pythran</category></item></channel></rss>