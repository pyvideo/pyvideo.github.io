<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_zappa.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Immagino: un racconto di serverless e codeless (più o meno).</title><link href="https://pyvideo.org/pycon-italia-2019/immagino-un-racconto-di-serverless-e-codeless-piu-o-meno.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Christian Strappazzon</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/immagino-un-racconto-di-serverless-e-codeless-piu-o-meno.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In &lt;a class="reference external" href="https://gs1it.org/"&gt;GS1 Italy&lt;/a&gt; abbiamo realizzato il servizio
&lt;a class="reference external" href="http://immagino.biz/"&gt;Immagino&lt;/a&gt;, dove vengono digitalizzati prodotti
merceologici. La parte interessante è come ci portiamo in casa le
immagini e le descrizioni: abbiamo creato una pipeline di elaborazione
con &lt;a class="reference external" href="https://aws.amazon.com/"&gt;aws&lt;/a&gt;, vedremo insieme il disegno
dell’applicazione, i servizi (sqs, sns, lambda, s3) e package (zappa,
asyncio, boto3) utilizzati. Non servono partiolari conoscenze di aws e
Python, l’obiettivo è mostrare un caso d’uso in produzione.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1690"&gt;https://python.it/feedback-1690&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="aws"></category><category term="boto3"></category><category term="zappa"></category><category term="lambda-functions"></category><category term="packages"></category><category term="tools"></category><category term="pythonscripts"></category></entry><entry><title>Deploy your Flask or Django app to AWS Lambda with Zappa</title><link href="https://pyvideo.org/pycon-ca-2017/deploy-your-flask-or-django-app-to-aws-lambda-with-zappa.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Sean Coates</name></author><id>tag:pyvideo.org,2017-11-19:pycon-ca-2017/deploy-your-flask-or-django-app-to-aws-lambda-with-zappa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zappa makes it easy to deploy your Flask or Django (or really, any WSGI app) to Amazon AWS Lambda, by hooking into AWS API Gateway.&lt;/p&gt;
&lt;p&gt;In this talk, you'll get a brief introduction to how to use Zappa with your existing or upcoming projects, from how to install it to how to use it. If there's a stable connection, we'll even deploy a simple app during the talk, in only a few seconds.&lt;/p&gt;
&lt;p&gt;Lambda is an inexpensive and very highly concurrent way to run &amp;quot;serverless&amp;quot; applications. I'm currently using this technology to deploy an application that has a concurrency of 10,000, for one of the largest companies in the world.&lt;/p&gt;
</summary><category term="zappa"></category></entry></feed>