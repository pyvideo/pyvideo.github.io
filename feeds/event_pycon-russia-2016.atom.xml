<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-russia-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-04T00:00:00+00:00</updated><entry><title>Автоматическое разрешение заявок о ложных срабатываниях в антивирусе Avast</title><link href="https://pyvideo.org/pycon-russia-2016/avtomaticheskoe-razreshenie-zaiavok-o-lozhnykh-srabatyvaniiakh-v-antiviruse-avast.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Alexander Sibiryakov</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/avtomaticheskoe-razreshenie-zaiavok-o-lozhnykh-srabatyvaniiakh-v-antiviruse-avast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ложными срабатываниями в антивирусной терминологии называются срабатывания на чистых файлах, не являющихся зловредными. Когда пользователь видит красный поп-ап, запрещающий запуск файла антивирусом, ему предлагается сообщить о ложном срабатывании в лабораторию. С такими заявками будут разбираться вирусные аналитики.&lt;/p&gt;
&lt;p&gt;Тема ложных срабатываний очень важна для производителей антивирусов. Любимая игра или браузер, который используется повседневно, после обновления может начать «ловиться» антивирусом. У популярных антивирусов от этого страдают миллионы пользователей. Если системный файл ОС будет заблокирован, то такое срабатывание может закончится сервисом компьютера пользователя.&lt;/p&gt;
&lt;p&gt;Моей задачей было построить автоматический классификатор заявок для того, чтобы разгрузить вирусную лабораторию от ручного труда.&lt;/p&gt;
&lt;p&gt;Классификатор использовал на входе данные из 4-х бэкендов, рассчитывал около 120 сигналов и по ним вычислял вероятность зловредности файла. У классификатора были очень высокие требования к качеству. Для обучения использовались деревья решения с градиентным бустингом (GBDT), а обучающая выборка содержала 10000 примеров размеченных вручную аналитиками.&lt;/p&gt;
&lt;p&gt;Проект занял около полугода, для него была построена специальная инфраструктура и разработан бизнес-процесс аналитика на этапе внедрения. На данный момент классификатор используется уже два года.&lt;/p&gt;
</summary></entry><entry><title>Дискуссионная панель: Как и зачем писать свои библиотеки на python</title><link href="https://pyvideo.org/pycon-russia-2016/diskussionnaia-panel-kak-i-zachem-pisat-svoi-biblioteki-na-python.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Grigory Petrov</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/diskussionnaia-panel-kak-i-zachem-pisat-svoi-biblioteki-na-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Round table&lt;/p&gt;
</summary></entry><entry><title>Докеризация веб-приложениния на Python</title><link href="https://pyvideo.org/pycon-russia-2016/dokerizatsiia-veb-prilozheniniia-na-python.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Anton Egorov</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/dokerizatsiia-veb-prilozheniniia-na-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Я поделюсь опытом и лучшими практиками деплоймента веб-приложения на Python с помощью технологии Docker. Расскажу, как собрать образ с нуля, дам пошаговую инструкцию, которой можно пользоваться как шаблоном для своих приложений. У нас в компании большой опыт работы с Docker, только через мои руки прошло пару десятков приложений, которые надо было докеризировать, и каждое новое приложение — это отдельный квест.&lt;/p&gt;
</summary></entry><entry><title>Falcon - очередная WSGI библиотека?</title><link href="https://pyvideo.org/pycon-russia-2016/falcon-ocherednaia-wsgi-biblioteka.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Dmitry Kukushkin</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/falcon-ocherednaia-wsgi-biblioteka.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Для разработки веб-сервисов в Online Presence мы традиционно выбирали Django, но в один прекрасный момент, при разработке Глобальной Карты 2.0, мы поняли, что нам хочется больше свободы. Посмотрев по сторонам, выбор пал на микрофреймворк falcon.
В докладе я расскажу об устройстве Глобальной Карты, разберу причины, по которым мы взяли falcon, плюсы и минусы этого решения, а также поделюсь выводами, которые мы сделали по итогу внедрения этой библиотеки.&lt;/p&gt;
</summary></entry><entry><title>Flame graph: новый взгляд на привычное профилирование</title><link href="https://pyvideo.org/pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Kirill Borisov</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/flame-graph-novyi-vzgliad-na-privychnoe-profilirovanie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Все хотят знать, как выполняется их код. Многие догадываются, чем это можно измерить. И лишь немногие находят в себе силы продраться через результаты измерений. Проблема ещё более усложняется, если приложение исполняется в нескольких процессах, потоках или на разных серверах. Вал измерений захлестывает разработчика, и уже не видно конца...&lt;/p&gt;
&lt;p&gt;В этом докладе мы попытаемся упростить все это с помощью визуализации, а именно — flame graph'ов, красивых и наглядных . Также вместе рассмотрим процесс сбора данных, их подготовку и на примерах поучимся читать получившиеся графики.&lt;/p&gt;
</summary></entry><entry><title>How Python was Shaped by leaky Internals</title><link href="https://pyvideo.org/pycon-russia-2016/how-python-was-shaped-by-leaky-internals.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/how-python-was-shaped-by-leaky-internals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A deep dive into the internals of the CPython interpreter and how some of its design decisions have shaped the language.&lt;/p&gt;
</summary></entry><entry><title>Очереди задач без купюр</title><link href="https://pyvideo.org/pycon-russia-2016/ocheredi-zadach-bez-kupiur.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Artem Malyshev</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/ocheredi-zadach-bez-kupiur.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Так или иначе в любом сложном web приложении используются очереди задач. И так уж сложилось, что им положено быть распределёнными. В данный момент рынок решений для python разработчиков представляют 2 главных продукта - Celery и RQ.
В докладе я расскажу о внутреннем устройстве обеих систем. Поговорим о том, с какими проблемами столкнулись их создатели, как их решили и чем эти решения грозят конечному пользователю. Как устроены группы, хорды и eta? Как добиться отказоустойчивости на транспортном уровне? Почему это тяжело масштабировать? На все эти вопросы я дам ответ в своём докладе.&lt;/p&gt;
</summary></entry><entry><title>Physical computing with Python and Raspberry Pi</title><link href="https://pyvideo.org/pycon-russia-2016/physical-computing-with-python-and-raspberry-pi.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/physical-computing-with-python-and-raspberry-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Raspberry Pi Foundation is a UK charity which creates low-cost, high-performance computers that people use to learn, solve problems and have fun. Through our educational programmes we work to put the power of digital making into the hands of people all over the world.&lt;/p&gt;
&lt;p&gt;With Python on the Raspberry Pi, it's easy to start creating physical computing projects, and to experiment and tinker with add-ons and accessories from lights and buzzers to environmental sensors and robotics. This ease of access was accelerated with the creation of a new minimal boilerplate library called GPIO Zero, of which I am the primary author. In this talk I'll talk about the Foundation's work in education, share some great Pi projects, give a taster of how to get started in physical computing and dive into the technical innards of the GPIO Zero library. As well as a learning tool, the Pi is commonly used in home automation projects and industrial applications.&lt;/p&gt;
</summary></entry><entry><title>Питон под нагрузкой</title><link href="https://pyvideo.org/pycon-russia-2016/piton-pod-nagruzkoi.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Andrey Sumin</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/piton-pod-nagruzkoi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Питон занимает неотъемлемое место в архитектуре hh.ru — все фронтенд-сервисы и некоторые бекенды написаны именно на нём. В своём докладе я расскажу о том, как Питон справляется с нагрузкой самого посещаемого работного сайта в рунете (и почему иногда всё-таки не справляется), поделюсь наболевшими проблемами и способами их решения. Как выполнить CPU-intensive операции в Торнадо? Так ли страшен GIL? Как понять что вообще происходит на продакшене?
Доклад будет интересен всем, кто разрабатывает и поддерживает Питон-сервисы. Особый акцент я сделаю на проблемах, возникающих при использовании асинхронных фреймворков и на построении удобной инфраструктуры для отладки и мониторинга.&lt;/p&gt;
</summary></entry><entry><title>Python Robot Operating System вместо Middleware framework</title><link href="https://pyvideo.org/pycon-russia-2016/python-robot-operating-system-vmesto-middleware-framework.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Dmitry Kiselev</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/python-robot-operating-system-vmesto-middleware-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Мы визуализируем интерактивные 3д среды. Если без buzz-words, то нам надо синхронизировать зоопарк из 20-50 разных приложений на 4-5 нодах, так, чтобы разные инстансы Google Earth знали, в каком направлении смотрит сосед, и карта на тачскрине следовала бы за вашими передвижениями. Приложения разные: от веб-приложений в браузере до хитрообернутых продуктов гугла. Часть приложений обменивается данными раз в полчаса, другие же 60-120 раз в секунду, и еще миллион мелких проблем.&lt;/p&gt;
&lt;p&gt;Первая попытка была сделать это на Java Middleware — об этой попытке либо хорошо, либо ничего — то есть ничего.&lt;/p&gt;
&lt;p&gt;В докладе я расскажу, почему мы выбрали RobotOperationSystem (ROS) и почему он вам нужен, даже если вы не робот.&lt;/p&gt;
</summary></entry><entry><title>User-centered open source projects</title><link href="https://pyvideo.org/pycon-russia-2016/user-centered-open-source-projects.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Jackie Kazil</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/user-centered-open-source-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open-source projects often struggle with finding contributors and getting off of the ground. Communities, such as Github and PyPi, are host to redundant projects and libraries. In the development space, how do you distinguish your project from others, get people excited to contribute to it, and ultimately create a successful open source project? The answer is to apply user-centered design techniques to the development of your project. User-centered design is usually applied to web applications and products on the front-end of a website, but these techniques can be applied to open source libraries. In user-centered open source projects, your users are those who type &lt;cite&gt;pip install $your_library&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;In this talk, Jackie will illustrate some user-centered techniques that have been used on her own project — Mesa (&lt;a class="reference external" href="https://github.com/projectmesa/mesa"&gt;https://github.com/projectmesa/mesa&lt;/a&gt;), along with other successful open source projects. This talk will include a survey of interviews with a focus on successful techniques, along with additional user-centered design techniques that could be leveraged to inspire increased community engagement into your project.&lt;/p&gt;
</summary></entry><entry><title>Workshop «Property-based testing with Hypothesis»</title><link href="https://pyvideo.org/pycon-russia-2016/workshop-property-based-testing-with-hypothesis.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>David MacIver</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/workshop-property-based-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hypothesis is a library for writing smarter tests.&lt;/p&gt;
&lt;p&gt;Instead of hand-writing every example in your tests, you describe what sorts of examples you need and let it fill in the blanks. It uses this to actively go looking for bugs in your code.&lt;/p&gt;
&lt;p&gt;It’s proven very effective, and is being used by an ever growing number of open source projects (including pypy, cryptography, and mercurial), but people sometimes struggle to get started.&lt;/p&gt;
&lt;p&gt;In this session we’ll help you overcome that by going through a number of illustrative examples that will help you understand this style of testing better.&lt;/p&gt;
&lt;p&gt;The first two hours will be spent on these, start with a discussion of the problem, a sample test to start you off, and then people will work through it at their own pace, with me there to answer questions and help people when they get stuck. After people have had some time on a given problem, I’ll go over some possible tests for the example and why they are useful, and give people time to try anything they like out before moving on to the next problem.&lt;/p&gt;
&lt;p&gt;For the final hour, people will work on testing some more substantial code. You should feel free to bring your own, but I will provide some interesting projects for people to work on for anyone who doesn’t have anything specific.&lt;/p&gt;
&lt;p&gt;At the end of this you should feel much more comfortable with the general concepts of property based testing, and be able to use Hypothesis effectively to test your own code.&lt;/p&gt;
</summary></entry><entry><title>Знай и люби свой CPython во имя луны и великой справедливости</title><link href="https://pyvideo.org/pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2016-07-04:pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Один из основополагающих способов узнавать новое — выводить старое за границы применимости. Достигая противоречия или получая абсурдные результаты, можно получить представление о более общих концепциях, что позволяет детализировать уже понятое и прикоснуться к неизвестному. В этот раз нечто подобное я постараюсь сделать с основной реализацией ЯП Python — CPython. Мы рассмотрим блоки, из которых сделан интерпретатор, поймем, как они взаимодействуют, вмешаемся в их работу на низком уровне и поймем, какой профит и проблемы из этого можно получить.&lt;/p&gt;
</summary></entry><entry><title>Аннотации типов и Python 2 + 3</title><link href="https://pyvideo.org/pycon-russia-2016/annotatsii-tipov-i-python-2-3.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Andrey Vlasovskich</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/annotatsii-tipov-i-python-2-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Переход проекта на Python 3 может отнять довольно много сил. Для библиотек ситуация ещё сложнее, поскольку обычно нужно поддерживать обе версии и писать код на так называемом Python 2 + 3, пересечении множеств функциональности двух версий. Аннотации типов являются одним из средств, которые могут помочь при этом переходе.&lt;/p&gt;
&lt;p&gt;В докладе мы обсудим, как информация о типах позволяет находить ошибки несовместимости версий, почему в Dropbox добавляют аннотации типов даже в проекты на Python 2, что нового уже появилось и ещё появится в PEP 484 для поддержки совместимости Python 2 и 3.&lt;/p&gt;
</summary></entry><entry><title>Building social network with Neo4j and Python</title><link href="https://pyvideo.org/pycon-russia-2016/building-social-network-with-neo4j-and-python.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/building-social-network-with-neo4j-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Social phenomena is coming. We have lot’s of social applications that we are using every day, let’s say Facebook, twitter, Instagram. Lot’s of such kind apps based on social graph and graph theory. I would like to share my knowledge and expertise about how to work with graphs and build large social graph as engine for Social network using python and Graph databases. We'll compare SQL and NoSQL approaches for friends relationships.&lt;/p&gt;
</summary></entry><entry><title>Code Unto Others</title><link href="https://pyvideo.org/pycon-russia-2016/code-unto-others.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Nathaniel Manista</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/code-unto-others.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large codebases need not be tragedies of the commons so riddled with complexity and technical debt, but so many are. How does that happen? By what mechanisms and pathologies do a large number of locally reasonable decisions by intelligent authors add up to unmaintainable software? How can it be that the end result of everyone doing everything right is a system “too dangerous to touch” that can’t be modified without likely breaking something?&lt;/p&gt;
&lt;p&gt;I’ve written that software, I’ve maintained that software and brought it back from the brink, and I’ve trained others in what is required to avoid trouble. I’ll share what practices work, and why and how they do. I’ll dive into the designs of classes, functions, modules, and packages. I’ll evaluate the tradeoffs of global state and other dark magic. I’ll even dig into and get personal about naming.&lt;/p&gt;
&lt;p&gt;The first obligation of code is to run correctly. The second obligation of code usually is to run efficiently. The third obligation of code is to play well with other code and other programmers. Come learn how to write code that makes friends without sacrificing function or performance!&lt;/p&gt;
</summary></entry><entry><title>Как добавить scripting в веб приложение</title><link href="https://pyvideo.org/pycon-russia-2016/kak-dobavit-scripting-v-veb-prilozhenie.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Konstantin Lopuhin</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/kak-dobavit-scripting-v-veb-prilozhenie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Доклад для тех, кому требовалось дать пользователям возможность расширять приложение при помощи скриптов или макросов. К этом часто приходят разработчики приложений для продвинутых пользователей, у которых невозможно заранее прописать все варианты использования - как правило, это проекты для бизнес-пользователей.&lt;/p&gt;
&lt;p&gt;Когда стало понятно что это нужно, сразу возникает много проблем: есть очень большой простор для выбора решения и много граблей. Например: встроить чужой язык, или сделать свой? Если чужой, как правильно организовать песочницу, которая не даст выполнить произвольный код? Как устроить API и выбрать нужный уровень абстракции? Как показать
пользователю ошибки, как лучше организовать документацию, как обучить новых пользователей? Когда это вообще оправдано?&lt;/p&gt;
</summary></entry><entry><title>Хочу всё знать!</title><link href="https://pyvideo.org/pycon-russia-2016/khochu-vsio-znat.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Pavel Petlynsky</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/khochu-vsio-znat.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Доклад для пытливых и любознательных питонистов, которые хотят разобраться, как всё работает под капотом, и «где у ней внутре неонка».&lt;/p&gt;
&lt;p&gt;Python «тормозит»? Смотрим, как устроена виртуальная машина.
Python съел всю память? Смотрим, как устроено управление памятью и структура данных в стандартной библиотеке.
GIL — зло. Что будет, если его отключить?&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycon-russia-2016/lightning-talks.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon RU 2016 Lightning Talks&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Осторожно, DSL!</title><link href="https://pyvideo.org/pycon-russia-2016/ostorozhno-dsl.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Ivan Tsyganov</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/ostorozhno-dsl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Каждый разработчик рано или поздно сталкивается с предметно-ориентированными языками (DSL). Мы разберемся, зачем же нам нужны DSL, и какие проблемы они нам помогают решать. Поймем, в каких случаях нам стоит разрабатывать свой язык, а в каких — использовать уже существующий. Попробуем провести грань и решить, где у нас просто библиотека, а где — предметно ориентированный язык. Придумаем свой DSL и сравним различные подходы к работе с ним в Python. Увидим, как работают лексический и синтаксический анализаторы. Обязательно поговорим про то, как облегчить жизнь пользователям нашего языка. Как сделать информативными сообщения об ошибках? Как тестировать сценарии, написанные на нашем языке? На эти вопросы мы сможем дать ответ.&lt;/p&gt;
</summary></entry><entry><title>Продвинутое использование py.test</title><link href="https://pyvideo.org/pycon-russia-2016/prodvinutoe-ispolzovanie-pytest.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Andrew Svetlov</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/prodvinutoe-ispolzovanie-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Большинство разработчиков пишут тесты с помощью стандартной библиотеки unittest и довольны жизнью. Я тоже был из таких - пока не начал интенсивно использовать py.test.&lt;/p&gt;
&lt;p&gt;К сожалению, библиотека недостаточно популяризирована, и мы попробуем восполнить этот недостаток.&lt;/p&gt;
&lt;p&gt;В докладе речь пойдет о написании pytest fixtures (основном инструменте расширения), добавлении конфигурационных параметров, написании plugins и прочих полезных штуках.&lt;/p&gt;
</summary></entry><entry><title>Tensorflow and deep learning, without a PhD</title><link href="https://pyvideo.org/pycon-russia-2016/tensorflow-and-deep-learning-without-a-phd.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Martin Gorner</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/tensorflow-and-deep-learning-without-a-phd.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Google has recently open-sourced its framework for machine learning and neural networks called Tensorflow. With this new tool, deep machine learning transitions from an area of research into mainstream software engineering. In this session, we will teach you how to choose the right neural network for your problem and how to make it behave. Familiarity with differential equations is no longer required. Instead, a couple of lines ofTensorflow Python, and a bag of &amp;quot;tricks of the trade&amp;quot; will do the job. No previous Python knowledge required.&lt;/p&gt;
</summary></entry><entry><title>Theano: обучаем нейросеть</title><link href="https://pyvideo.org/pycon-russia-2016/theano-obuchaem-neiroset.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Ekaterina Tuzova</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/theano-obuchaem-neiroset.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Theano — это расширение языка Python, позволяющее эффективно вычислять математические выражения, содержащие многомерные массивы. Библиотека предоставляет базовый набор инструментов для конфигурации нейросетей и их обучения. Наибольшее признание Theano получила в задачах машинного обучения при решении задач оптимизации. Библиотека позволяет использовать возможности GPU без изменения кода программы, что делает ее незаменимой при выполнении ресурсоемких задач.&lt;/p&gt;
&lt;p&gt;В докладе я покажу базовые принципы Theano и общие сложности, с которыми сталкивается разработчик, впервые начиная использовать библиотеку. Так же мы рассмотрим особенности компилятора, который переводит математические выражения, написанные на языке Python в эффективный код на C.&lt;/p&gt;
</summary></entry><entry><title>Thinking about Concurrency</title><link href="https://pyvideo.org/pycon-russia-2016/thinking-about-concurrency.html" rel="alternate"></link><published>2016-07-03T00:00:00+00:00</published><updated>2016-07-03T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2016-07-03:pycon-russia-2016/thinking-about-concurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Walk through two examples of threading and multiprocessing to illustrate rules and best practices for taking advantage of concurrency.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Processes versus threads&lt;/li&gt;
&lt;li&gt;Fear and respect.  Methodology and Confidence&lt;/li&gt;
&lt;li&gt;Role of testing and fuzzing&lt;/li&gt;
&lt;li&gt;Race conditions and sequencing issues&lt;/li&gt;
&lt;li&gt;Locks versus flags&lt;/li&gt;
&lt;li&gt;Resource isolation and atomic message queues&lt;/li&gt;
&lt;li&gt;Sequencing by placing tasks in one thread&lt;/li&gt;
&lt;li&gt;Barriers that wait for parallel threads to complete&lt;/li&gt;
&lt;li&gt;Monitoring progress of daemon threads&lt;/li&gt;
&lt;li&gt;Thread local variables versus global state&lt;/li&gt;
&lt;li&gt;Advantages and disadvantages of processes&lt;/li&gt;
&lt;li&gt;Parallelizable tasks versus intrinsically sequential tasks&lt;/li&gt;
&lt;li&gt;Performance killers, the three most common mistakes&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>