<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_richard-signell.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-13T00:00:00+00:00</updated><entry><title>Building your own Weather App using NOAA Open Data and Jupyter Notebooks</title><link href="https://pyvideo.org/scipy-2018/building-your-own-weather-app-using-noaa-open-data-and-jupyter-notebooks.html" rel="alternate"></link><published>2018-07-13T00:00:00+00:00</published><updated>2018-07-13T00:00:00+00:00</updated><author><name>Filipe Fernandes</name></author><id>tag:pyvideo.org,2018-07-13:scipy-2018/building-your-own-weather-app-using-noaa-open-data-and-jupyter-notebooks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Leveraging the Open Geospatial Consortium (OGC) standards, NOAA's open
data, and Jupyter widgets we'll demonstrate how set up a data discovery
system based on time, location, and variable of interest (e.g.: wave
height). The goal is to walk through all the steps necessary to create a
fully-featured GIS interactive map (mobile friendly too!) using Jupyter
notebooks and widgets.Presenter(s): Speaker: Filipe Fernandes, SECOORA
Speaker: Richard Signell, United State Geological Survey&lt;/p&gt;
</summary></entry><entry><title>A Standardized Framework for Working with Met-Ocean Data</title><link href="https://pyvideo.org/scipy-2015/a-standardized-framework-for-working-with-met-ocean-data.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Richard Signell</name></author><id>tag:pyvideo.org,2015-07-10:scipy-2015/a-standardized-framework-for-working-with-met-ocean-data.html</id><summary type="html"></summary></entry><entry><title>Ocean Model Assessment for Everyone</title><link href="https://pyvideo.org/scipy-2014/ocean-model-assessment-for-everyone.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>Richard Signell</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/ocean-model-assessment-for-everyone.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An end-to-end workflow for assessing storm-driven water levels predicted
by coastal ocean models will be discussed which uses &lt;tt class="docutils literal"&gt;OWSLib&lt;/tt&gt; for CSW
Catalog access, &lt;tt class="docutils literal"&gt;Iris&lt;/tt&gt; for ocean model access and &lt;tt class="docutils literal"&gt;pyoos&lt;/tt&gt; for Sensor
Observation Service data access. Analysis and visualization is done with
&lt;tt class="docutils literal"&gt;Pandas&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Cartopy&lt;/tt&gt;, and the entire workflow is shared as in
IPython Notebook with custom environment in Wakari.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To assess how well ocean models are performing, the model products need
to be compared with data. Finding what models and data exist has
historically been challenging because this information is held and
distributed by numerous providers. Accessing data has been challenging
because ocean models produce gigabytes or terabytes of information, is
usually stored in scientific data formats like HDF or NetCDF, while
ocean observations are often stored in scientific data formats or in
databases.&lt;/p&gt;
&lt;p&gt;To solve this problem, the Integrated Ocean Observing System (IOOS) has
been building a distributed information system based on standard web
services for discovery and access. IOOS is now embarking on a nationwide
system-test using python to formulate queries, process responses, and
analyze and visualize the data. An end-to-end
(search-access-analyze-visualize) workflow for assessing storm-driven
water levels predicted by coastal ocean models will be discussed, which
uses &lt;tt class="docutils literal"&gt;OWSLib&lt;/tt&gt; for OGC CSW service catalog access, &lt;tt class="docutils literal"&gt;Iris&lt;/tt&gt; for ocean
model access and &lt;tt class="docutils literal"&gt;pyoos&lt;/tt&gt; (which wraps OWSLib) for Sensor Observation
Service data access. Analysis and visualization is done with &lt;tt class="docutils literal"&gt;Pandas&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;Cartopy&lt;/tt&gt;, and the entire end-to-end workflow is shared as in
IPython Notebook with custom environment in Wakari.&lt;/p&gt;
</summary></entry></feed>