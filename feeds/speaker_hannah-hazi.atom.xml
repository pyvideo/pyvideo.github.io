<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Hannah Hazi</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_hannah-hazi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-09-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python as a Second Language</title><link href="https://pyvideo.org/pycon-uk-2017/python-as-a-second-language.html" rel="alternate"></link><published>2017-10-26T15:00:00+01:00</published><updated>2017-10-26T15:00:00+01:00</updated><author><name>Hannah Hazi</name></author><id>tag:pyvideo.org,2017-10-26:/pycon-uk-2017/python-as-a-second-language.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes we can learn the most by coming at a topic sideways. Using examples from code written by people who are getting into Python after experiences with another language first, we can discover what ‘idiomatic’ Python looks like and find some tricks to writing concise, readable, delightful Python code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes we can learn the most by coming at a topic sideways. Using examples from code written by people who are getting into Python after experiences with another language first, we can discover what ‘idiomatic’ Python looks like and find some tricks to writing concise, readable, delightful Python code.
The talk will focus on useful tips for people coming in from different languages into Python land, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to loop like a native&lt;/li&gt;
&lt;li&gt;The Most Diabolical Python Anti-Pattern&lt;/li&gt;
&lt;li&gt;When (and when not) to use classes&lt;/li&gt;
&lt;li&gt;The Joy and Horror of Dynamic Typing&lt;/li&gt;
&lt;li&gt;Designing flexible code&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon UK 2017"></category></entry><entry><title>The Knowledge In The Code</title><link href="https://pyvideo.org/pycon-uk-2018/the-knowledge-in-the-code.html" rel="alternate"></link><published>2018-09-16T00:00:00+00:00</published><updated>2018-09-16T00:00:00+00:00</updated><author><name>Hannah Hazi</name></author><id>tag:pyvideo.org,2018-09-16:/pycon-uk-2018/the-knowledge-in-the-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Or, how I learned to stop worrying and love legacy code&lt;/p&gt;
&lt;p&gt;Legacy code. It's old, poorly documented, barely tested, a nightmare to
work with. You've never met the people who wrote it, but if you did
you'd have a thing or two to tell them! If you had the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Or, how I learned to stop worrying and love legacy code&lt;/p&gt;
&lt;p&gt;Legacy code. It's old, poorly documented, barely tested, a nightmare to
work with. You've never met the people who wrote it, but if you did
you'd have a thing or two to tell them! If you had the time, you'd love
to re-write it all.&lt;/p&gt;
&lt;p&gt;But what if I told you that there are gems hidden in your company's old
code? That re-writing it from scratch would be a bad mistake?&lt;/p&gt;
&lt;p&gt;This is the story of how I learned to love legacy code. And how you
might, too!&lt;/p&gt;
</content><category term="PyCon UK 2018"></category></entry><entry><title>Don't Cross The Streams - An Introduction to Virtual Environments</title><link href="https://pyvideo.org/pycon-uk-2019/dont-cross-the-streams-an-introduction-to-virtual-environments.html" rel="alternate"></link><published>2019-09-15T00:00:00+00:00</published><updated>2019-09-15T00:00:00+00:00</updated><author><name>Hannah Hazi</name></author><id>tag:pyvideo.org,2019-09-15:/pycon-uk-2019/dont-cross-the-streams-an-introduction-to-virtual-environments.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's learn about virtual environments - why it's useful, how it works, getting started.&lt;/p&gt;
</content><category term="PyCon UK 2019"></category><category term="virtual environments"></category></entry><entry><title>Unexploded Bombs</title><link href="https://pyvideo.org/pycon-uk-2022/unexploded-bombs.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Hannah Hazi</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/unexploded-bombs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Find the flaws in your codebase ... before they explode&lt;/p&gt;
&lt;p&gt;The SS Richard Montgomery is a ship with a strange history. Sunk in the mouth of the Thames Estuary during WWII, she's filled with an unknown number of explosives. There have been various attempts over the years to figure out …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Find the flaws in your codebase ... before they explode&lt;/p&gt;
&lt;p&gt;The SS Richard Montgomery is a ship with a strange history. Sunk in the mouth of the Thames Estuary during WWII, she's filled with an unknown number of explosives. There have been various attempts over the years to figure out the danger from this ship and potentially clear her - but so far, nothing has been done.&lt;/p&gt;
&lt;p&gt;Every codebase has its own unexploded bombs. potentially serious problems lurking beneath the surface of our code. How can we identify and tackle them? Software is just as vital to our safety as other kinds of engineering - I'll delve into some famous cases such as the Therac-25 incidents to show what can go wrong when we don't appreciate this.&lt;/p&gt;
&lt;p&gt;Let's use the Richard Montgomery as a metaphor to explore ways to make our code safer and more robust. Together, we can develop into software professionals and clear up problems in advance. &lt;em&gt;Before&lt;/em&gt; we set anything on fire.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry></feed>