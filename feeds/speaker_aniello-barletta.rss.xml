<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Aniello Barletta</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>CRAIS - Testing, everywhere</title><link>https://pyvideo.org/pycon-italia-2015/crais-testing-everywhere.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;During this talk I’ll show the architecture and the design pattern used
to implement the CRAIS Appium broker.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;CRAIS acts as an Appium (1) broker, in order to spawn Appium servers as
selenium grid nodes with specific capabilities using:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;USB hotplug Mechanism for locally-connected devices, where CRAIS
dinamically generate the node, registering itself to the hub,&lt;/li&gt;
&lt;li&gt;RPC invocation, where CRAIS spawns ad-hoc appium server instances.
The RPC method could be used to use remote android devices connected
to the server using a reverse-ssh tunnel.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CRAIS is based on:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ZODB object database for device storage (for both Hotplug &amp;amp; RPC),
ConfigObj for configuration management, Pyro4, a library that enables
to build applications in which objects can talk to each other over
the network,&lt;/li&gt;
&lt;li&gt;Cement as CLI framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CRAIS is implemented in order to use the same Object Database in both
RPC &amp;amp; Hotplug mode.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Appium is an open source test automation framework for use with
native, hybrid and mobile web apps, used in B! to integrate Android
/ iOS testing in a QA automation infrastructure.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Selenium GRID specifications&lt;/li&gt;
&lt;li&gt;Acceptance testing knowledge&lt;/li&gt;
&lt;li&gt;Python multithreading &amp;amp; subprocess32 modules usage&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniello Barletta</dc:creator><pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-09:/pycon-italia-2015/crais-testing-everywhere.html</guid><category>PyCon Italia 2015</category></item><item><title>Metodi e Strumenti per il Model Based Testing</title><link>https://pyvideo.org/pycon-italia-2016/metodi-e-strumenti-per-il-model-based-testing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aniello Barletta</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:/pycon-italia-2016/metodi-e-strumenti-per-il-model-based-testing.html</guid><category>PyCon Italia 2016</category></item><item><title>Introduction to Property-Based testing using Hypothesis</title><link>https://pyvideo.org/pycon-italia-2022/introduction-to-property-based-testing-using-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Property-Based testing using Hypothesis - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to
discover that you missed a bug because of some edge case you didn’t know
about? Does it ever feel like writing tests is just a formality - that
you already know your test cases will pass? Hyphothesis might be just
what you need! Property based testing relies on properties. It checks
that a function, program or whatever system under test abides by a
property. Most of the time, properties do not have to go into too much
details about the output. They just have to check for useful
characteristics that must be seen in the output. Benefits are numerous:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Cover the scope of all possible inputs: by construct, it does not
restrict the generated inputs if not asked to do so. Consequently it
can theorically generate all possible inputs and cover the whole
range of strings, integers or whatever type required by the system
under test.&lt;/li&gt;
&lt;li&gt;Shrink the input in case of failure: whenever it fails, the framework
tries to reduce the input to a smaller input. For instance: if the
condition of the failure is the existence of a given character in a
string it should return the one-character string having only this
character. This is certainly one of the most interesting features of
such approach as most of the time the failure can be summarized by a
very small case.&lt;/li&gt;
&lt;li&gt;Reproducible and replayable: each time it runs a property test, a
seed is produced in order to be able to re-run the test again on the
same datasets. Any run failure causes the framework to print both the
failing case and the seed in order to be able to fully reproduce the
run.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this talk i’ll present, the teorethical aspects behind the approach
and the benefits of using Hypothesis with schemathesis, a modern API
testing tool for web applications built with Open API and GraphQL
specifications.&lt;/p&gt;
&lt;p&gt;Speakers: Alessandro Molina, Aniello Barletta&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/introduction-to-property-based-testing-using-hypothesis.html</guid><category>PyCon Italia 2022</category><category>TDD</category><category>testing</category></item></channel></rss>