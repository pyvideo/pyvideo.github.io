<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_systemprogrammierung.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-16T00:00:00+00:00</updated><entry><title>File-I/O ist doch ganz einfach, oder?</title><link href="https://pyvideo.org/pycon-de-2013/file-io-ist-doch-ganz-einfach-oder.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Christian Kauhaus</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/file-io-ist-doch-ganz-einfach-oder.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Der Vortrag soll Bewusstsein dafür schaffen, wann man sich aus einer
komfortablen Umgebung (z.B. einem Application-Framework) in eine
systemspezifische Domäne begibt. Aus meiner Erfahrung im DevOps-Umfeld
sind mir viele Fälle bekannt, in denen Code auf Entwickler-Maschinen
keine Probleme macht, sich aber auf produktiven Servern nicht
ausreichend robust verhält. Die Eigenschaften von File-I/O in Python
dienen dabei als durchgehendes Anwendungsbeispiel.&lt;/p&gt;
&lt;p&gt;Der Vortrag gliedert sich in zwei Teile. Im ersten Teil möchte ich
anhand von ausgewählten &amp;quot;Pannen&amp;quot; zeigen, wann ein &lt;em&gt;with open(...)&lt;/em&gt;
allein nicht ausreicht, da z.B. die Python-Standardfunktionen keine
Zuverlässigkeit im Sinne der ACID-Eigenschaften gewährleisten. Im
zweiten Teil geht um konkrete Programmiertechniken wie
Write-Replace-Updates, Locking oder fsync, die die Robustheit von I/O
ggf. unter Einschränkung der Plattformunabhängigkeit erhöhen.&lt;/p&gt;
&lt;p&gt;Der Anwendungsteil des Vortrags basiert auf Material aus meinem
&lt;a class="reference external" href="http://blog.gocept.com/2013/07/15/reliable-file-updates-with-python/"&gt;Blogpost&lt;/a&gt;
zum gleich Thema.&lt;/p&gt;
</summary><category term="acid"></category><category term="plattformunabhängigkeit"></category><category term="systemprogrammierung"></category><category term="zuverlässigkeit"></category></entry></feed>