<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonas-obrist.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Artisanal Async Adventures</title><link href="https://pyvideo.org/pycon-italia-2019/artisanal-async-adventures.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/artisanal-async-adventures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write an efficient server, asynchronous networking is an
excellent strategy to do so. To build a production ready system, you
would use asyncio, tornado, twisted, trio or another popular
implementation. However, to fully understand how and why it works, I
will ignore these solutions and instead craft an artisanal asynchronous
implementation in front of your very eyes. Step by step we will turn a
blocking socket server, only capable of handling a single connection at
a time, into a beautiful non blocking server that has no trouble dealing
with many connections at once. By the end, you should see that
asynchronous code is not magical at all, but nevertheless incredibly
useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1742"&gt;https://python.it/feedback-1742&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 11:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="async"></category><category term="event-driven-architecture"></category><category term="python3"></category></entry><entry><title>Why you might want to go async?</title><link href="https://pyvideo.org/pycon-colombia-2018/why-you-might-want-to-go-async.html" rel="alternate"></link><published>2018-02-09T00:00:00+00:00</published><updated>2018-02-09T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2018-02-09:pycon-colombia-2018/why-you-might-want-to-go-async.html</id><summary type="html"></summary></entry><entry><title>Artisanal Async Adventures</title><link href="https://pyvideo.org/pycon-thailand-2018/artisanal-async-adventures.html" rel="alternate"></link><published>2018-06-16T00:00:00+00:00</published><updated>2018-06-16T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2018-06-16:pycon-thailand-2018/artisanal-async-adventures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write an efficient server, asynchronous networking is an excellent strategy to do so. To build a production ready system, you would use asyncio, tornado, twisted, trio or another popular implementation. However, to fully understand how and why it works, I will ignore these solutions and instead craft an artisanal asynchronous implementation in front of your very eyes. Step by step we will turn a blocking socket server, only capable of handling a single connection at a time, into a beautiful non blocking server that has no trouble dealing with many connections at once. By the end, you should see that asynchronous code is not magical at all, but nevertheless incredibly useful.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I'm a Python developer from Switzerland, living in Japan. I got started with Python developing modifications for the video game Counter-Strike before getting my first job building websites using Django. There I got involved with the popular open source Content Management System django CMS. Nowadays I work primarily with the Tornado framework and various asyncio libraries.&lt;/p&gt;
</summary></entry><entry><title>Artisanal Async Adventures</title><link href="https://pyvideo.org/pycon-apac-2018/artisanal-async-adventures.html" rel="alternate"></link><published>2018-06-01T00:00:00+00:00</published><updated>2018-06-01T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2018-06-01:pycon-apac-2018/artisanal-async-adventures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous networking may seem hard to understand at first, in this
talk, the speaker will show this is not the case. In 100 lines of code,
he will write a low level async network stack in front of your eyes,
explaining how things work as we go. By the end, you should understand
how and why async code works!&lt;/p&gt;
</summary></entry><entry><title>Why you might want to go async</title><link href="https://pyvideo.org/europython-2017/why-you-might-want-to-go-async.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/why-you-might-want-to-go-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming is becoming a hot topic in the Python
community, especially with the rise of popularity of Python 3 and the
new asyncio library in its standard library. However, it can still be
a confusing and mysterious concept. In this talk, I will explain what
async programming is, how it works and how it could benefit you. My
goal of this talk is that at the end of it, you have an idea about
what we mean when we say asynchronous programming in Python and you
know how and when to use it.&lt;/p&gt;
&lt;p&gt;In the first part of the talk, I will dive into what asynchronous
programming is and what it isn't. Explaining the difference between
IO bound code and CPU bound code.&lt;/p&gt;
&lt;p&gt;Then I will explain how this actually works in Python, explaining the
idea of an event loop, coroutines and cooperative multitasking.&lt;/p&gt;
&lt;p&gt;Finally, I will talk about why this may be beneficial, what kind of
applications can really benefit from this and provide some examples
from my experience.&lt;/p&gt;
</summary></entry><entry><title>Making the Django ORM Multilingual</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--making-the-django-orm-multilingua.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--making-the-django-orm-multilingua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making the Django ORM Multilingual&lt;/p&gt;
&lt;p&gt;Presented by Jonas Obrist&lt;/p&gt;
&lt;p&gt;Why does Django make it that hard to have translated database contents?
And what solutions are there to make it easier? And how can Django make
multilingual database contents less of a pain?&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2011"></category><category term="localization"></category><category term="multilingual"></category><category term="orm"></category><category term="translations"></category></entry><entry><title>Lightning Talks (day 3)</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-lightingtalksthirdday663flv.html" rel="alternate"></link><published>2010-05-26T00:00:00+00:00</published><updated>2010-05-26T00:00:00+00:00</updated><author><name>Jan Lehnardt</name></author><id>tag:pyvideo.org,2010-05-26:djangocon-europe-2010/djangoconeu-lightingtalksthirdday663flv.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Purely Python Imaging with Pymaging</title><link href="https://pyvideo.org/pycon-us-2013/purely-python-imaging-with-pymaging.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/purely-python-imaging-with-pymaging.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A little over a year ago, frustration with the state of image processing
in Python led me to start a project called pymaging. Pymaging is a pure
Python image processing library that works on Python 2.x and 3.x. This
talk will dive into why I started this project, how I dug into the
problems, what I learned about image formats and my goals for the future
of this project.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>