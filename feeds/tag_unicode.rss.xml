<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 12 May 2018 00:00:00 +0000</lastBuildDate><item><title>Capire le codifiche e Unicode</title><link>https://pyvideo.org/europython-2013/capire-le-codifiche-e-unicode.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezio Melotti</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/capire-le-codifiche-e-unicode.html</guid><category>pep393</category><category>python3</category><category>unicode</category><category>encodings</category></item><item><title>Understanding Encodings</title><link>https://pyvideo.org/europython-2013/understanding-encodings.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ezio Melotti</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/understanding-encodings.html</guid><category>pep393</category><category>python3</category><category>unicode</category><category>encodings</category></item><item><title>Python, Locales and Writing Systems</title><link>https://pyvideo.org/pycon-us-2018/python-locales-and-writing-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here’s some of the worst ones and how to handle them correctly.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rae Knowler</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/python-locales-and-writing-systems.html</guid><category>python3</category><category>unicode</category></item><item><title>¿DÃ³nde estÃ¡ mi Ã±?</title><link>https://pyvideo.org/pycon-es-2017/da3nde-esta-mi-a-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se hará un repaso histórico sobre como se ha ido afrontando el problema de la representación de caracteres por de medios electrónicos a lo largo de la historia desde el telégrafo hasta el estándar actual.&lt;/p&gt;
&lt;p&gt;Seguidamente describiremos como se manejaba en Python 2 y qué cambios se produjeron con la llegada de Python 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel González Álvarez</dc:creator><pubDate>Sat, 23 Sep 2017 12:30:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-23:pycon-es-2017/da3nde-esta-mi-a-.html</guid><category>unicode</category></item><item><title>Technical, standards-spec style analysis of Unicode</title><link>https://pyvideo.org/chipy/technical--standards-spec-style-analysis-of-unico.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a very educational presentation of Unicode, what it is, where it
comes from, how it works, Unicode in Python, ....&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordan Bettis</dc:creator><pubDate>Thu, 14 Jan 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-01-14:chipy/technical--standards-spec-style-analysis-of-unico.html</guid><category>chipy</category><category>unicode</category></item><item><title>Status of Unicode in Python 3</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduced in Python 2.0, unicode became the default string type in
Python 3.0. It took 8 years to switch to unicode, and since Python 3.0,
a lot of bugs has been fixed. The switch to unicode opened many
questions. Should Python support both bytes and characters for
filenames? What to do with undecodable bytes? etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on the recent issues fixed in Python 3.1 and 3.2:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the PEP 383 (error handler to store undecodable bytes) everywhere&lt;/li&gt;
&lt;li&gt;Encoding of the command line arguments: utf-8 on Mac OS X, locale
encoding on UNIX/BSD, unicode on Windows&lt;/li&gt;
&lt;li&gt;Environment variables: creation of os.environb&lt;/li&gt;
&lt;li&gt;Filenames: huge work to support the PEP 383 everywhere, creation of
os.fsencode() and os.fsdecode()&lt;/li&gt;
&lt;li&gt;Python source code encoding: use tokenize.detect_encoding() instead
of the locale encoding&lt;/li&gt;
&lt;li&gt;some library examples: email, ftp, ...&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will present not only the changes in Python, but also in the C
API.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Victor Stinner</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</guid><category>pycon</category><category>pycon2011</category><category>python3</category><category>unicode</category></item></channel></rss>