<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrew-burrows.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Keep On Mockin' In The Real World</title><link href="https://pyvideo.org/pygotham-2017/keep-on-mockin-in-the-real-world.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Andrew Burrows</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/keep-on-mockin-in-the-real-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an example-led romp through some of the trickier aspects of mocking and patching. It picks up where a beginner's guide leaves off and looks at the sort of problems you are likely to face when writing tests for the kind of real code that is currently in your codebase. Based on years of experience teaching and mentoring developers in my workplace on testing and mocking techniques I've collected together many of the follow up questions and war stories people have brought to me after hitting problems using mocks in their tests. This talk will equip you with a set of tools, tips and tricks you can use in your own testing and a greater appreciation of what kind of code might make life difficult when mocking.&lt;/p&gt;
</summary></entry><entry><title>Testing the untestable: a beginner’s guide to mock objects</title><link href="https://pyvideo.org/europython-2016/testing-the-untestable-a-beginners-guide-to-mock-objects.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Andrew Burrows</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/testing-the-untestable-a-beginners-guide-to-mock-objects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Burrows - Testing the untestable: a beginner’s guide to mock objects
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/testing-the-untestable-a-beginners-guide-to-mock-objects"&gt;https://ep2016.europython.eu//conference/talks/testing-the-untestable-a-beginners-guide-to-mock-objects&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this session you will learn your way around Python 3’s
unittest.mock package through examples. You’ll learn about the Mock
class, sentinels and patching. You will see the benefits that mocks
can bring and learn to avoid the pitfalls. Along the way I’ll fill you
in on some of the bewildering terminology surrounding mocks such as
“SUT”, “Stub”, “Double”, “Dummy” , “mockist” and more and I’ll give a
brief plug for my own mockextras package that can enhance your mock
experience.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mock objects can be a powerful tool to write easy, reliable tests for
the most difficult to test code. In this session you will learn your
way around Python 3’s unittest.mock package starting at the simplest
examples and working through progressively more problematic code.
You’ll learn about the Mock class, sentinels and patching and how and
when to use each of them. You will see the benefits that mocks can
bring and learn to avoid the pitfalls. Along the way I’ll fill you in
on some of the bewildering terminology surrounding mocks such as
“SUT”, “Stub”, “Double”, “Dummy” , “mockist” and more and I’ll give a
brief plug for my own mockextras package that can enhance your mock
experience.&lt;/p&gt;
</summary></entry></feed>