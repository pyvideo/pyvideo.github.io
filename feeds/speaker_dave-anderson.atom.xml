<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dave-anderson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-02T09:00:00+00:00</updated><entry><title>Building Evolutionary API with GraphQL and Python</title><link href="https://pyvideo.org/pycon-us-2019/building-evolutionary-api-with-graphql-and-python.html" rel="alternate"></link><published>2019-05-02T09:00:00+00:00</published><updated>2019-05-02T09:00:00+00:00</updated><author><name>Dave Anderson</name></author><id>tag:pyvideo.org,2019-05-02:pycon-us-2019/building-evolutionary-api-with-graphql-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You are a developer. Maybe you're building a rich web experience, like a
single page app using JavaScript and a framework like React, Angular or
Vue. Maybe you have multiple clients besides web on mobile platforms
like iOS or Android. Maybe you have an external facing public API for
use by clients with many diverse needs. One things is for sure: you need
a robust API.&lt;/p&gt;
&lt;p&gt;That API should be able to evolve over time to meet the growing and
changing demands of the business and your clients. The frameworks and
paradigms we choose as we develop any software can help or hinder that
change. A well-designed GraphQL API enables flexibility and stability
across changes, as well as easy service discovery and thinner clients
with less responsibilities, ensuring that your application grows
successfully over time.&lt;/p&gt;
&lt;p&gt;The tutorial will focus on building a GraphQL API using the &lt;strong&gt;Python&lt;/strong&gt;
library &lt;strong&gt;Graphene&lt;/strong&gt; with a &lt;strong&gt;Django&lt;/strong&gt; backend as a vehicle for teaching
the principals of evolutionary API that can be applied across any tech
stack, including REST, as well as the more practical concerns of working
with &lt;strong&gt;Graphene&lt;/strong&gt; and designing your API for GraphQL.&lt;/p&gt;
&lt;p&gt;A frontend, built using &lt;strong&gt;JavaScript&lt;/strong&gt; with &lt;strong&gt;React&lt;/strong&gt; and the &lt;strong&gt;Apollo&lt;/strong&gt;
GraphQL client library, will be made available so users can understand
the full-stack considerations of building this API and reacting to
evolving concerns over time. Writing JavaScript will not be required,
but being comfortable reading it and setting up a local environment will
help get more out of this tutorial.&lt;/p&gt;
&lt;p&gt;We'll attempt to answer questions such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When is using GraphQL for an API most effective?&lt;/li&gt;
&lt;li&gt;How do I get started with GraphQL in Python?&lt;/li&gt;
&lt;li&gt;What does it mean for an API to be Relay-compliant? What benefits are
there? Drawbacks if we don't comply?&lt;/li&gt;
&lt;li&gt;How can we make use of field arguments for sorting, filtering and
other concerns?&lt;/li&gt;
&lt;li&gt;What kinds of changes are safe to make to my API as clients begin
consuming it?&lt;/li&gt;
&lt;li&gt;How can I ensure my GraphQL API performs well and we avoid the
dreaded &lt;em&gt;N+1 As A Service&lt;/em&gt; problem?&lt;/li&gt;
&lt;li&gt;How should I design mutation responses for my GraphQL API to serve
client needs?&lt;/li&gt;
&lt;li&gt;How can multiple stakeholders decide how to evolve the API together?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="tutorial"></category></entry></feed>