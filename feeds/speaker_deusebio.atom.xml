<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Deusebio</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_deusebio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Everything You Always Wanted to Know About Async But Were Afraid to Ask (cit.)</title><link href="https://pyvideo.org/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Deusebio</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Always Wanted to Know About Async But Were Afraid to Ask
(cit.) - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In this talk, we will dig in the marvelous world of sync/async/parallel
computation. And show you how to define abstract computation upfront
lazily using Promises, deferring execution subsequently and throttling …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Always Wanted to Know About Async But Were Afraid to Ask
(cit.) - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In this talk, we will dig in the marvelous world of sync/async/parallel
computation. And show you how to define abstract computation upfront
lazily using Promises, deferring execution subsequently and throttling
the computation as you please. After this, async processing won’t have
any secret to you I still remember when during an interview for a Junior
Data Scientist position, I was asked about async and when to use it. I
was buffled. And - I must say - after learning about these concepts,
they are not that hard. Nevertheless, still mysterious to some. In this
talk, after explaining some basic concepts about asynchronous processing
and reviewing the most important Pythonic packages to be used in the
async context, we will gently introduce some notions of functional
programming and - most of all - one of its most useful tool for async
operations: the Promise monad. Thanks to this, we will then be able to
create, compose and chain abstract computations together, therefore
defining what we want to do, without actually doing it yet. Acting
lazily, its execution will rather be deferred to a second moment, where
we will make use of async and parallel framework to speed up and
parallelise execution. We will also show you how to throttle the
execution, a need that often arises when dealing with rate-limited
services and/or avoid overloading external component or resources. The
talk will be accompanied by the help of a simple Github repo that will
have examples and (hopefully) useful utility functions that will allow
you to approach the asynchronous world more easily and seamlessly.&lt;/p&gt;
&lt;p&gt;Speaker: Deusebio&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="asyncio"></category><category term="clean code"></category><category term="functional programming"></category></entry></feed>