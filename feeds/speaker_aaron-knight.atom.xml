<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aaron-knight.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-07T00:00:00+00:00</updated><entry><title>Fixing web data in production: best practices for bad situations</title><link href="https://pyvideo.org/pygotham-2017/fixing-web-data-in-production-best-practices-for-bad-situations.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Aaron Knight</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/fixing-web-data-in-production-best-practices-for-bad-situations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a perfect world, all of the data underlying your web app is accurate, complete, and error-free. But in the real world, production data sometimes needs to be updated.&lt;/p&gt;
&lt;p&gt;Perhaps you made some bad choices when setting up your models. Or maybe a bug introduced some inconsistent data. So how do you fix it? The na√Øve approach might be to run an update directly on your production database, but that kind of approach is extremely risky.&lt;/p&gt;
&lt;p&gt;This talk will outline some best practices for fixing production data. We'll go beyond the obvious precautions such as testing your scripts and ensuring that you have a database backup. Instead, this talk will focus on writing scripts that are idempotent, reversible, and performant.&lt;/p&gt;
</summary></entry><entry><title>Build a data pipeline with Luigi</title><link href="https://pyvideo.org/pycon-us-2017/build-a-data-pipeline-with-luigi.html" rel="alternate"></link><published>2017-05-18T00:00:00+00:00</published><updated>2017-05-18T00:00:00+00:00</updated><author><name>Aaron Knight</name></author><id>tag:pyvideo.org,2017-05-18:pycon-us-2017/build-a-data-pipeline-with-luigi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/luigi"&gt;Luigi&lt;/a&gt; is a Python library for
building pipelines of batch processes. It &amp;quot;handles dependency
resolution, workflow management, visualization, handling failures,
command line integration, and much more&amp;quot;&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use Luigi to build a data pipeline that runs a
series of interdependent jobs. We will also discuss some real-world use
cases for Luigi, and show how it can make running a data pipeline much
more robust and reliable.&lt;/p&gt;
</summary></entry></feed>