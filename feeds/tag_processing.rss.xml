<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 09 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Making your code faster: Cython and parallel processing in the Jupyter Notebook</title><link>https://pyvideo.org/pydata-dc-2016/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/gapatino/Making-Your-Code-Faster-Cython-and-parallel-processing-in-the-Jupyter-Notebook"&gt;https://github.com/gapatino/Making-Your-Code-Faster-Cython-and-parallel-processing-in-the-Jupyter-Notebook&lt;/a&gt;
Slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook"&gt;http://www.slideshare.net/PyData/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the complexity and scope of applications grow, it is very common to run into slow performance issues. In Python, it is possible to improve the speed of execution with the use of parallel processing and the Cython compiler. The Jupyter Notebook makes the implementation of both of them a relatively simple task, which will be the focus of this session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gustavo Patino</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook.html</guid><category>code</category><category>Cython</category><category>jupyter</category><category>jupyter notebook</category><category>notebook</category><category>parallel</category><category>processing</category></item><item><title>High-performance computing on gamer PCs</title><link>https://pyvideo.org/europython-2011/high-performance-computing-on-gamer-pcs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Yann Le Du - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Electron Paramagnetic Resonance Imaging, we are faced with a
deconvolution problem that has a strong impact on the image actually
reconstructed. Faced with the need of mapping the distribution of
organic matter in Terrestrial and Martian rock samples for applications
in exobiology, we needed to see how to extract a maximum amount of
information from our data: our approach uses reservoir computing
artificial neural networks coupled to a particle swarm algorithm that
evolves the reservoirs’ weights.&lt;/p&gt;
&lt;p&gt;The code runs on the Hybrid Processing Units for Science (HPU4Science)
cluster located at the Laboratoire de Chimie de la Matière Condensée de
Paris (LCMCP). The cluster is composed of a central data storage machine
and a heterogeneous ensemble of 6 decentralized nodes. Each node is
equipped with a Core2 Quad or i7 CPU and 3-7 NVIDIA Graphical Processing
Units (GPUs) including the GF110 series. Each of the 28 GPUs
independently explores a different parameter space sphere of the same
problem. Our application shows a sustained real performance of 15.6
TFLOPS. The HPU4Science cluster cost
&lt;span class="formula"&gt;36, 090&lt;i&gt;resulting&lt;/i&gt;&lt;i&gt;in&lt;/i&gt;&lt;i&gt;a&lt;/i&gt;432.3&lt;i&gt;MFLOPS&lt;/i&gt; ⁄ &lt;/span&gt; cost performance.&lt;/p&gt;
&lt;p&gt;That talk is meant to demonstrate on a practical case how consumer grade
computer hardware coupled to a very popular computer language can be
used to tackle a difficult yet very elementary scientific problem: how
do you go from formulating the problem, to choosing the right hardware
and software, and all the way to programming the algorithms using the
appropriate development tools and methodologies (notably Literate
Programming). On the math side, the talk requires a basic understanding
of matrix algebra and of the discretization process involved when
computing integrals.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yann Le Du</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/high-performance-computing-on-gamer-pcs.html</guid><category>image</category><category>mapping</category><category>nvidia</category><category>performance</category><category>processing</category><category>science</category><category>scientific</category></item><item><title>Advanced Aspects of the Django Ecosystem: Haystack, Celery &amp; Fabric</title><link>https://pyvideo.org/europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simon Willison - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django benefits from a thriving third-party ecosystem. This talk will
take a deep look at three of the components I have found most useful in
my own projects: Haystack for full-text search, Celery for offline
processing and Fabric for automated eployments. I'll discuss how we use
them for Lanyrd.com, and demonstrate why they deserve a permanent place
in your toolbox.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Willison</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/advanced-aspects-of-the-django-ecosystem-haystac.html</guid><category>celery</category><category>django</category><category>fabric</category><category>processing</category></item><item><title>Data Plumbing with Python</title><link>https://pyvideo.org/europython-2011/data-plumbing-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Pavlos Christoforou - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Point Nine provides operations outsourcing and support to large and
complex financial institutions.&lt;/p&gt;
&lt;p&gt;As part of our day to day responsibilities we are required to process
our client's trading activity which generally involves receiving data in
various formats and through various protocols, apply transformations,
validations and enrichment processes and distribute the resulting data
to various third parties, in short Data Plumbing.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce the audience to the (vast) field
of financial data processing which we believe presents a tremendous
opportunity for python and it's community and provide a brief overview
of Point Nine's deployment of Python as the main framework for all data
plumbing activities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pavlos Christoforou</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/data-plumbing-with-python.html</guid><category>community</category><category>deployment</category><category>framework</category><category>processing</category></item><item><title>Flow-based programming made easy with PyF 2.0</title><link>https://pyvideo.org/europython-2011/flow-based-programming-made-easy-with-pyf-20.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in &amp;quot;Training Pizza
Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyF is a python framework to ease flow based programming and allow
massive data crunching on multiple CPUs. We boast an optional web-based
interface to visually design processing tubes, batch scheduling, report
generation and email alerts.&lt;/p&gt;
&lt;p&gt;The Framework is easily extensible by writing plugins, a lot of features
like data persistence, reporting and web scrapping are already part of
the ecosystem.&lt;/p&gt;
&lt;p&gt;This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.&lt;/p&gt;
&lt;p&gt;If available, an additional training session will focus on working with
the framework to create your own flow-based processes and plugins.&lt;/p&gt;
&lt;p&gt;For more information: &lt;a class="reference external" href="http://www.pyfproject.org/"&gt;http://www.pyfproject.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/flow-based-programming-made-easy-with-pyf-20.html</guid><category>architecture</category><category>design</category><category>framework</category><category>processing</category><category>ui</category><category>web</category></item><item><title>Source code processing with Python</title><link>https://pyvideo.org/europython-2011/source-code-processing-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Kay Schluehr - 24 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Folklore says that having a problem and trying to solve it with regular
expressions gives you two problems. However not applying regular
expressions to advanced textual search'n replace doesn't solve your
problem either. One step above you have large portions of recursively
structured text aka &amp;quot;source code&amp;quot; and using context free grammars and
tools supporting them gives you two problems but not using them also
doesn't solve your original problem. Maybe you get uneasy at that point
because what I say implies parsers and computing science and what not
and you still wake up in the night believing that you have to learn
automata theory but you are lucky it was just a nightmare. Otherwise you
are laughing about the little diatribe against regexps and use them
without much deliberation, verifying your SQL input, mining source code
and do all the other things they are not made for.&lt;/p&gt;
&lt;p&gt;In my talk I'm addressing daily use of grammars outside of the scope of
compiler implementation or natural language processing. My talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Search &amp;amp; Replace using grammars&lt;/li&gt;
&lt;li&gt;CodeTemplates for source code transformation&lt;/li&gt;
&lt;li&gt;Generative grammars for expression generation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm touching this from the lightweight, &amp;quot;pythonic&amp;quot; angle and you might
wonder why not everyone uses those techniques already for decades in
their daily work. I can't answer this, I wonder about this too.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kay Schluehr</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/source-code-processing-with-python.html</guid><category>processing</category><category>science</category></item><item><title>PyConAU 2010: An Introduction to Processing</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--an-introduction-to-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Introduction to Processing&lt;/p&gt;
&lt;p&gt;Presented by Clinton J Roy (University of Queensland)&lt;/p&gt;
&lt;p&gt;Processing is an Open Source language designed to make interactive
graphics and animation programming easier than traditional GUI toolkits.
Processing is used to prototype systems and create interactive data
visualisations.&lt;/p&gt;
&lt;p&gt;[NOTES: Missing first 2 minutes of audio, then camera microphone for
first section.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Clinton J Roy</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--an-introduction-to-processing.html</guid><category>gui</category><category>multimedia</category><category>processing</category><category>pyconau</category><category>pyconau2010</category></item></channel></rss>