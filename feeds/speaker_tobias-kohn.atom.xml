<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Tobias Kohn</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tobias-kohn.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-05-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Here s Your Mistake</title><link href="https://pyvideo.org/pycon-uk-2019/here-s-your-mistake.html" rel="alternate"></link><published>2019-09-15T00:00:00+00:00</published><updated>2019-09-15T00:00:00+00:00</updated><author><name>Tobias Kohn</name></author><id>tag:pyvideo.org,2019-09-15:/pycon-uk-2019/here-s-your-mistake.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lessons learned from teaching Python; or why learning to program is surprisingly hard, even with a language as simple as Python.&lt;/p&gt;
</content><category term="PyCon UK 2019"></category></entry><entry><title>The Road to Pattern Matching in Python</title><link href="https://pyvideo.org/pycon-us-2021/the-road-to-pattern-matching-in-python.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Tobias Kohn</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/the-road-to-pattern-matching-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pattern matching is a great and proven tool for programmers. However, can we also assimilate and integrate it into Python? This talk tries to give an answer and discusses the rationale and ideas behind the recent &amp;quot;pattern matching&amp;quot; PEPs.&lt;/p&gt;
&lt;p&gt;Processing structured data has sparked ever more powerful programming tools â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pattern matching is a great and proven tool for programmers. However, can we also assimilate and integrate it into Python? This talk tries to give an answer and discusses the rationale and ideas behind the recent &amp;quot;pattern matching&amp;quot; PEPs.&lt;/p&gt;
&lt;p&gt;Processing structured data has sparked ever more powerful programming tools. Python's objects and classes, for instance, have proven themselves to be particularly versatile and form part of the backbone of the language. Constructing or building new objects---including built-ins such as lists, tuples or dictionaries---abounds in any Python code. In contrast, testing the structure of data and extracting specific elements is often rather cumbersome, requiring the frequent use of built-in functions like isinstance, len and getattr.&lt;/p&gt;
&lt;p&gt;Pattern matching addresses this issue by introducing a new paradigm to de-construct data, complementing existing tools. It can be thought of as an extension of Python's iterable unpacking to arbitrary objects. However, it does so in a 'safe' way, ensuring that objects have the necessary structure to proceed with unpacking elements and attributes.&lt;/p&gt;
&lt;p&gt;The objective of this talk is to give you an overview of why pattern matching matters and what it really is. You will gain a deeper understanding of the core concepts that make up pattern matching, as well as the design decisions and ideas behind the recent &amp;quot;pattern matching&amp;quot; PEPs. However, this talk will not provide an introduction on how to use pattern matching in your code, nor is it about the intricacies of the implementation. If you are a Python programmer, have heard of the new pattern matching features and are wondering what it is all about, then this talk is for you.&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry></feed>