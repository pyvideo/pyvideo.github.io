<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Aly Sivji</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aly-sivji.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-04-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Pluggable Architecture</title><link href="https://pyvideo.org/europython-2020/pluggable-architecture.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/pluggable-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extend functionality without touching existing code&lt;/p&gt;
&lt;p&gt;Applications and libraries with a pluggable architecture allow developers to add custom functionality. Plugins can customize user interfaces, create new workflows, and interface with legacy systems. Designing a plugin is often difficult - documentation is sparse, outdated, or non-existent. You end up diving into …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extend functionality without touching existing code&lt;/p&gt;
&lt;p&gt;Applications and libraries with a pluggable architecture allow developers to add custom functionality. Plugins can customize user interfaces, create new workflows, and interface with legacy systems. Designing a plugin is often difficult - documentation is sparse, outdated, or non-existent. You end up diving into a unfamiliar codebase to figure out what to do.&lt;/p&gt;
&lt;p&gt;This talk examines Pluggable Architecture by creating a custom plugin system: we will design an interface, think about where to hook in custom behavior, and discuss testing techniques. Understanding these principles will enable us to write custom plugins for third-party libraries. Extend the functionality of your favourite library without touching existing code!&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Development"></category><category term="Software Design"></category><category term="System Architecture"></category></entry><entry><title>Busy Beaver The Chicago Python Community Engagement Slack Bot</title><link href="https://pyvideo.org/pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-08-16:/pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Docker for Data Science</title><link href="https://pyvideo.org/pycon-us-2018/docker-for-data-science.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-05-10:/pycon-us-2018/docker-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks simplify the process of developing and sharing Data Science projects across groups and organizations. However, when we want to deploy our work into production, we need to extract the model from the notebook and package it up with the required artifacts (data, dependencies, configurations, etc) to ensure …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks simplify the process of developing and sharing Data Science projects across groups and organizations. However, when we want to deploy our work into production, we need to extract the model from the notebook and package it up with the required artifacts (data, dependencies, configurations, etc) to ensure it works in other environments. Containerization technologies such as Docker can be used to streamline this workflow.&lt;/p&gt;
&lt;p&gt;This hands-on tutorial presents Docker in the context of Reproducible Data Science - from idea to application deployment. You will get a thorough introduction to the world of containers; learn how to incorporate Docker into various Data Science projects; and walk through the process of building a Machine Learning model in Jupyter and deploying it as a containerized Flask REST API.&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="jupyter"></category><category term="docker"></category><category term="data science"></category></entry><entry><title>If Statements are a Code Smell</title><link href="https://pyvideo.org/pycon-us-2020/if-statements-are-a-code-smell.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/if-statements-are-a-code-smell.html</id><content type="html"></content><category term="PyCon US 2020"></category></entry><entry><title>Creating Reproducible Data Science Workflows using Docker Containers</title><link href="https://pyvideo.org/pyohio-2017/creating-reproducible-data-science-workflows-using-docker-containers.html" rel="alternate"></link><published>2017-07-30T00:00:00+00:00</published><updated>2017-07-30T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2017-07-30:/pyohio-2017/creating-reproducible-data-science-workflows-using-docker-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks make it easy to create reproducible workflows that can be distributed across groups and organizations. This is a simple process provided that our end-users have access to the data along with a compatible Python environment. Learn how to use Docker to package a shareable image containing the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks make it easy to create reproducible workflows that can be distributed across groups and organizations. This is a simple process provided that our end-users have access to the data along with a compatible Python environment. Learn how to use Docker to package a shareable image containing the libraries, code, and data required to reproduce every calculation.&lt;/p&gt;
</content><category term="PyOhio 2017"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-07-28:/pyohio-2018/saturday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>If Statements are a Code Smell</title><link href="https://pyvideo.org/pyohio-2019/if-statements-are-a-code-smell.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-07-27:/pyohio-2019/if-statements-are-a-code-smell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements allow us to selectively execute code based on
conditional logic. Overusing conditionals results in code that is hard
to understand and difficult to modify. This talk will demonstrate how to
refactor &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements into polymorphic classes, resulting in
cleaner program design. After this session, you will be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements allow us to selectively execute code based on
conditional logic. Overusing conditionals results in code that is hard
to understand and difficult to modify. This talk will demonstrate how to
refactor &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements into polymorphic classes, resulting in
cleaner program design. After this session, you will be able to
implement complex conditional logic using simple Python classes.&lt;/p&gt;
&lt;p&gt;Writing software is about making trade-offs between getting things done
and doing them right. Time constraints often force us to take shortcuts
to handle slight variations resulting in patches of conditional logic
sprinkled throughout our codebase. Workarounds that once allowed us to
move quickly now hinder our progress in getting new features out to
customers. It doesn't have to be this way!&lt;/p&gt;
&lt;p&gt;This talk will demonstrate how to use Object-Oriented programming
patterns, specifically polymorphism, to handle conditional logic
resulting in code that is easy to modify. The material will be presented
in the context of a real- world code refactor for an open-source
project. We will examine the initial solution, discuss its limitations,
and walk through the process of refactoring nested &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; blocks into
polymorphic classes.&lt;/p&gt;
&lt;p&gt;The session is geared towards developers who do not have a lot of
experience implementing Object-Oriented solutions. After this talk, you
will be able to identify situations where Object-Oriented design can be
used to simplify complex conditional logic. Using the steps outlined,
you will be able to refactor code to improve software architecture
without changing existing functionality.&lt;/p&gt;
</content><category term="PyOhio 2019"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2019/sunday-lightning-talks.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Kat Passen</name></author><id>tag:pyvideo.org,2019-07-27:/pyohio-2019/sunday-lightning-talks.html</id><content type="html"></content><category term="PyOhio 2019"></category></entry><entry><title>Object-Oriented Python Using functools.partial</title><link href="https://pyvideo.org/pyohio-2020/object-oriented-python-using-functoolspartial.html" rel="alternate"></link><published>2020-07-25T00:00:00+00:00</published><updated>2020-07-25T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2020-07-25:/pyohio-2020/object-oriented-python-using-functoolspartial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, &lt;strong&gt;everything&lt;/strong&gt; is an object -- &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;s, &lt;tt class="docutils literal"&gt;bool&lt;/tt&gt;s,
&lt;tt class="docutils literal"&gt;class&lt;/tt&gt;es, and, yes even &lt;tt class="docutils literal"&gt;function&lt;/tt&gt;s. This has many benefits,
but it also allows us to write un-Pythonic code that is hard to follow.&lt;/p&gt;
&lt;p&gt;This talk will demonstrate HOWTO design Object-Oriented solutions using
only functions, built-in data structures …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, &lt;strong&gt;everything&lt;/strong&gt; is an object -- &lt;tt class="docutils literal"&gt;int&lt;/tt&gt;s, &lt;tt class="docutils literal"&gt;bool&lt;/tt&gt;s,
&lt;tt class="docutils literal"&gt;class&lt;/tt&gt;es, and, yes even &lt;tt class="docutils literal"&gt;function&lt;/tt&gt;s. This has many benefits,
but it also allows us to write un-Pythonic code that is hard to follow.&lt;/p&gt;
&lt;p&gt;This talk will demonstrate HOWTO design Object-Oriented solutions using
only functions, built-in data structures, and the standard library.&lt;/p&gt;
&lt;p&gt;After this talk, attendees will have a better understanding of how
Python classes &lt;tt class="docutils literal"&gt;function&lt;/tt&gt; behind the scenes.&lt;/p&gt;
</content><category term="PyOhio 2020"></category></entry><entry><title>Testing from the Ground Up</title><link href="https://pyvideo.org/pytexas-2019/testing-from-the-ground-up.html" rel="alternate"></link><published>2019-04-13T00:00:00+00:00</published><updated>2019-04-13T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-04-13:/pytexas-2019/testing-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests ensure our program works as intended and that changes to the codebase do not break existing functionality. However, these benefits aren’t free; we need to have a plan to write our app and to test it. This talk will introduce concepts and techniques that can be used …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests ensure our program works as intended and that changes to the codebase do not break existing functionality. However, these benefits aren’t free; we need to have a plan to write our app and to test it. This talk will introduce concepts and techniques that can be used to write effective tests.&lt;/p&gt;
</content><category term="PyTexas 2019"></category><category term="testing"></category></entry><entry><title>Everyday Design Patterns Facade Pattern</title><link href="https://pyvideo.org/pytexas-2020/everyday-design-patterns-facade-pattern.html" rel="alternate"></link><published>2020-10-24T00:00:00+00:00</published><updated>2020-10-24T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2020-10-24:/pytexas-2020/everyday-design-patterns-facade-pattern.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Directly integrating dependencies into business logic couples our code to something we do not control. Changes made to upstream packages require us to update integration code across the project. This talk demonstrates how the Facade pattern can improve software design and simplify testing.&lt;/p&gt;
&lt;p&gt;Speaker: Aly Sivji
Aly Sivji is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Directly integrating dependencies into business logic couples our code to something we do not control. Changes made to upstream packages require us to update integration code across the project. This talk demonstrates how the Facade pattern can improve software design and simplify testing.&lt;/p&gt;
&lt;p&gt;Speaker: Aly Sivji
Aly Sivji is a Canadian expat living in Chicago. By day, he builds backend systems. By night, he is a co-organizer of the Chicago Python Users Group (ChiPy). Aly is an active participant in ChiPy’s Mentorship Program and he loves helping intermediate developers become experts. Outside of Python, Aly enjoys cycling, reading, and rewatching old TV shows.&lt;/p&gt;
</content><category term="PyTexas 2020"></category></entry><entry><title>Everyday Design Patterns: Observer Pattern</title><link href="https://pyvideo.org/pytexas-2022/everyday-design-patterns-observer-pattern.html" rel="alternate"></link><published>2022-06-21T00:00:00+00:00</published><updated>2022-06-21T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2022-06-21:/pytexas-2022/everyday-design-patterns-observer-pattern.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Observer Pattern enables us to design event-driven systems using loosely coupled components. In this talk, we will learn how, when, and why to use this pattern; we will explore how popular PyPI packages use the pattern; and, we will design a decorator-based Observer to process GitHub events.&lt;/p&gt;
&lt;p&gt;Speaker …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Observer Pattern enables us to design event-driven systems using loosely coupled components. In this talk, we will learn how, when, and why to use this pattern; we will explore how popular PyPI packages use the pattern; and, we will design a decorator-based Observer to process GitHub events.&lt;/p&gt;
&lt;p&gt;Speaker: Aly Sivji
Aly Sivji is a Canadian ex-pat living in Chicago. By day, he works as a Team Lead at Narrative Science building a platform that generates narrative text using client data. By night, he co-organizes the Chicago Python Users Group (ChiPy). Aly is an active participant in the ChiPy Mentorship Program and he loves helping intermediate developers become experts. Outside of Python, Aly enjoys cycling, reading, and rewatching old TV shows.&lt;/p&gt;
</content><category term="PyTexas 2022"></category></entry><entry><title>Unlocking the Power of Health Data: An Introduction to FHIR and Python</title><link href="https://pyvideo.org/pytexas-2023/unlocking-the-power-of-health-data-an-introduction-to-fhir-and-python.html" rel="alternate"></link><published>2023-04-02T00:00:00+00:00</published><updated>2023-04-02T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2023-04-02:/pytexas-2023/unlocking-the-power-of-health-data-an-introduction-to-fhir-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Unlocking the Power of Health Data: An Introduction to FHIR and Python&amp;quot;
Healthcare organizations generate and store vast amounts of data, but accessing and utilizing this data can be a challenge. One solution to this problem is FHIR (Fast Healthcare Interoperability Resources), a standard for exchanging electronic health information …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Unlocking the Power of Health Data: An Introduction to FHIR and Python&amp;quot;
Healthcare organizations generate and store vast amounts of data, but accessing and utilizing this data can be a challenge. One solution to this problem is FHIR (Fast Healthcare Interoperability Resources), a standard for exchanging electronic health information. In this talk, we will explore the basics of FHIR and its data model, as well as how to use Python to interact with FHIR servers and manipulate FHIR data. We will also discuss real-world examples of how FHIR and Python are being used in the healthcare industry to improve patient care and drive innovation. Attendees will come away with a solid understanding of FHIR and Python, and be equipped to start using these technologies to unlock the power of their own health data.
Speaker: Aly Sivji&lt;/p&gt;
&lt;p&gt;Aly Sivji is a Canadian ex-pat living in Chicago. By day, he works as a Team Lead at Jasper Health building a digital health platform to improve the management and delivery of cancer care. By night, he co-organizes the Chicago Python Users Group (ChiPy). Aly is an active participant in the ChiPy Mentorship Program and he loves helping intermediate developers become experts. Outside of Python, Aly enjoys cycling, reading, and rewatching old TV shows.&lt;/p&gt;
</content><category term="PyTexas 2023"></category></entry><entry><title>Lighting Talks Day 1</title><link href="https://pyvideo.org/pytexas-2025/lighting-talks-day-1.html" rel="alternate"></link><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2025-04-12:/pytexas-2025/lighting-talks-day-1.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lighting Talks Day 1&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry><entry><title>Pluggable Architecture</title><link href="https://pyvideo.org/python-web-conf-2020/pluggable-architecture.html" rel="alternate"></link><published>2020-06-19T00:00:00+00:00</published><updated>2020-06-19T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2020-06-19:/python-web-conf-2020/pluggable-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Pluggable Architecture&amp;quot; by: Aly Sivji&lt;/p&gt;
&lt;p&gt;Applications and libraries with pluggable architecture allow developers to customize software without having to modify existing code. We can use plugins to modify user interfaces, create new workflows, and interface with legacy systems. Designing a plugin is often difficult - documentation is sparse, outdated, or …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Pluggable Architecture&amp;quot; by: Aly Sivji&lt;/p&gt;
&lt;p&gt;Applications and libraries with pluggable architecture allow developers to customize software without having to modify existing code. We can use plugins to modify user interfaces, create new workflows, and interface with legacy systems. Designing a plugin is often difficult - documentation is sparse, outdated, or non-existent. You end up diving into a unfamiliar codebase to figure out what to do.&lt;/p&gt;
&lt;p&gt;This talk examines Pluggable Architecture by creating a custom plugin system: we will design an interface, think about where to hook in custom behavior, and discuss testing techniques. Understanding these principles will enable us to write custom plugins for third-party packages. Extend the functionality of your favourite library without touching existing code!&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry><entry><title>LocalStack: Developing for AWS without AWS</title><link href="https://pyvideo.org/python-web-conf-2021/localstack-developing-for-aws-without-aws.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/localstack-developing-for-aws-without-aws.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;LocalStack: Developing for AWS without AWS&amp;quot; by: Aly Sivji&lt;/p&gt;
&lt;p&gt;Amazon Web Services (AWS) has over 175 managed services: from leveraging S3 as a storage bucket to developing voice-enabled applications with Alexa, developers can solve complex problems with a few API calls. You pay Amazon a little more and you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;LocalStack: Developing for AWS without AWS&amp;quot; by: Aly Sivji&lt;/p&gt;
&lt;p&gt;Amazon Web Services (AWS) has over 175 managed services: from leveraging S3 as a storage bucket to developing voice-enabled applications with Alexa, developers can solve complex problems with a few API calls. You pay Amazon a little more and you ship products a lot faster.&lt;/p&gt;
&lt;p&gt;The question isn't should you use managed services, but how best to bring them into your organization's existing processes and workflows. You probably already have one, or more than one, AWS account to support different development environments. Setting up new resources for each team/developer to test against is going to be a lot of work related to IAM roles, policies, and permissions. Also, API calls are not free; development and testing workflows that use AWS resources cost money.&lt;/p&gt;
&lt;p&gt;Enter LocalStack. LocalStack is a testing framework used to develop cloud-native applications. Start a container and write code against a local environment that has the same functionality and APIs as AWS! This talk will discuss how to integrate LocalStack into your project by demonstrating several basic and advanced workflows. The session is geared towards intermediate and advanced developers that use AWS.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry></feed>