<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aly-sivji.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-16T00:00:00+00:00</updated><entry><title>Busy Beaver The Chicago Python Community Engagement Slack Bot</title><link href="https://pyvideo.org/pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-08-16:pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</summary></entry><entry><title>If Statements are a Code Smell</title><link href="https://pyvideo.org/pyohio-2019/if-statements-are-a-code-smell.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/if-statements-are-a-code-smell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements allow us to selectively execute code based on
conditional logic. Overusing conditionals results in code that is hard
to understand and difficult to modify. This talk will demonstrate how to
refactor &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements into polymorphic classes, resulting in
cleaner program design. After this session, you will be able to
implement complex conditional logic using simple Python classes.&lt;/p&gt;
&lt;p&gt;Writing software is about making trade-offs between getting things done
and doing them right. Time constraints often force us to take shortcuts
to handle slight variations resulting in patches of conditional logic
sprinkled throughout our codebase. Workarounds that once allowed us to
move quickly now hinder our progress in getting new features out to
customers. It doesn't have to be this way!&lt;/p&gt;
&lt;p&gt;This talk will demonstrate how to use Object-Oriented programming
patterns, specifically polymorphism, to handle conditional logic
resulting in code that is easy to modify. The material will be presented
in the context of a real- world code refactor for an open-source
project. We will examine the initial solution, discuss its limitations,
and walk through the process of refactoring nested &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; blocks into
polymorphic classes.&lt;/p&gt;
&lt;p&gt;The session is geared towards developers who do not have a lot of
experience implementing Object-Oriented solutions. After this talk, you
will be able to identify situations where Object-Oriented design can be
used to simplify complex conditional logic. Using the steps outlined,
you will be able to refactor code to improve software architecture
without changing existing functionality.&lt;/p&gt;
</summary></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2019/sunday-lightning-talks.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Kat Passen</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/sunday-lightning-talks.html</id><summary type="html"></summary></entry><entry><title>Testing from the Ground Up</title><link href="https://pyvideo.org/pytexas-2019/testing-from-the-ground-up.html" rel="alternate"></link><published>2019-04-13T00:00:00+00:00</published><updated>2019-04-13T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-04-13:pytexas-2019/testing-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests ensure our program works as intended and that changes to the codebase do not break existing functionality. However, these benefits arenâ€™t free; we need to have a plan to write our app and to test it. This talk will introduce concepts and techniques that can be used to write effective tests.&lt;/p&gt;
</summary><category term="testing"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-07-28:pyohio-2018/saturday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Docker for Data Science</title><link href="https://pyvideo.org/pycon-us-2018/docker-for-data-science.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/docker-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks simplify the process of developing and sharing Data Science projects across groups and organizations. However, when we want to deploy our work into production, we need to extract the model from the notebook and package it up with the required artifacts (data, dependencies, configurations, etc) to ensure it works in other environments. Containerization technologies such as Docker can be used to streamline this workflow.&lt;/p&gt;
&lt;p&gt;This hands-on tutorial presents Docker in the context of Reproducible Data Science - from idea to application deployment. You will get a thorough introduction to the world of containers; learn how to incorporate Docker into various Data Science projects; and walk through the process of building a Machine Learning model in Jupyter and deploying it as a containerized Flask REST API.&lt;/p&gt;
</summary><category term="jupyter"></category><category term="docker"></category><category term="data science"></category></entry><entry><title>Creating Reproducible Data Science Workflows using Docker Containers</title><link href="https://pyvideo.org/pyohio-2017/creating-reproducible-data-science-workflows-using-docker-containers.html" rel="alternate"></link><published>2017-07-30T00:00:00+00:00</published><updated>2017-07-30T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2017-07-30:pyohio-2017/creating-reproducible-data-science-workflows-using-docker-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks make it easy to create reproducible workflows that can be distributed across groups and organizations. This is a simple process provided that our end-users have access to the data along with a compatible Python environment. Learn how to use Docker to package a shareable image containing the libraries, code, and data required to reproduce every calculation.&lt;/p&gt;
</summary></entry></feed>