<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_pamela-mcanulty.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T16:30:00+00:00</updated><entry><title>Things I Wish They Told Me About The Multiprocessing Module in Python 3</title><link href="https://pyvideo.org/pycon-us-2019/things-i-wish-they-told-me-about-the-multiprocessing-module-in-python-3.html" rel="alternate"></link><published>2019-05-04T16:30:00+00:00</published><updated>2019-05-04T16:30:00+00:00</updated><author><name>Pamela McANulty</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/things-i-wish-they-told-me-about-the-multiprocessing-module-in-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you haven't tried multiprocessing or you are trying to move beyond
&lt;tt class="docutils literal"&gt;multiprocessing.map()&lt;/tt&gt;, you will likely find that using Python's
&lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt; module can get quite intricate and convoluted. This
talk focuses on a few techniques (starting, shutting down, data flow,
blocking, etc) that will maximize &lt;tt class="docutils literal"&gt;multiprocessing&lt;/tt&gt;â€™s efficiency,
while also helping you through the complex issues related to
coordinating startup and &lt;em&gt;especially&lt;/em&gt; shutdown of your multiprocess app.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>