<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joseph-leingang.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>Temporal Data Structures with SQLAlchemy and Postgres</title><link href="https://pyvideo.org/pycon-us-2017/temporal-data-structures-with-sqlalchemy-and-postgres.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Joseph Leingang</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/temporal-data-structures-with-sqlalchemy-and-postgres.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQLAlchemy (&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;http://www.sqlalchemy.org&lt;/a&gt;)
and Postgres
(&lt;a class="reference external" href="https://www.postgresql.org/"&gt;https://www.postgresql.org&lt;/a&gt;) provide
several useful tools that allow us to build and query records through
time: &lt;em&gt;temporal models&lt;/em&gt;. Combining a need to have robust auditing, as
well feature development on per-property history, we can turn
“regulatory overhead” into an exciting technical challenge. At Clover
Health we have built a small library to automate the task of decorating
a model and making it “temporal.” This talk aims to demonstrate the
underlying data model and interface for building this system.&lt;/p&gt;
</summary></entry></feed>