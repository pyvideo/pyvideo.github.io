<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 20 Jun 2015 00:00:00 +0000</lastBuildDate><item><title>Rescuing and Exploring Complex Life Science Data</title><link>https://pyvideo.org/pydata-london-2015/rescuing-and-exploring-complex-life-science-data.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Often we have no choice but to work with messy, difficult data. I
describe the Python-based approaches used to rescue and repair a
complex malformed dataset (using csvkit and a rule-driven
sanitisation approach), mount it in a new user-friendly db (using
pycap) before exploration (using py4neo). I finish by reflecting on
Python’s “gaps” as concerns life science/ biomedical analytical
tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone complains about messy, difficult datasets but often we have no
choice but to work with them. In 2014, I was charged with the
“informatic rescue” of the data for a large trans-European
epidemiological trial, where the challenges were (1) to extract and make
useable the complicated but malformed patient data in a remote and
idiosyncratic database, (2) make this available and regularly updated in
a user-friendly system, (3) integrate several other data sources and
finally (4) explore the data for research purposes.&lt;/p&gt;
&lt;p&gt;Here I describe the Python-based approach I used. Starting with &lt;em&gt;csvkit&lt;/em&gt;
to recreate the original legacy database for direct examination and
manipulation, malformed data was transformed by a pipeline of
rule-driven sanitisation before being subjected to validation via
another pipeline of rules. I describe how &lt;em&gt;pycap&lt;/em&gt; and &lt;em&gt;REDCap&lt;/em&gt; were used
to make an easily updatable and user- friendly database, and how this
was leveraged in merging other datasets. I show how this data was
integrated with associated and complex datasets (analytical and genomic)
and explored in a graph database using &lt;em&gt;py4neo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, I reflect on the gaps in Python’s life science and biomedical
analytical offerings, including why Excel spreadsheets are here to stay,
if our current IDEs are good enough and whether developers are the enemy
of the good enough.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Agapow</dc:creator><pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-20:pydata-london-2015/rescuing-and-exploring-complex-life-science-data.html</guid></item></channel></rss>