<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 06 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>Practical testing</title><link>https://pyvideo.org/pycon-za-2014/practical-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Automated tests are an important part of any software project, but
they're often hard to work with. Good test code should be written with
its own set of priorities and is sufficiently different from non-test
code that many standard programming practices are unsuitable. I have
spent many years writing (and reading) tests of varying quality and have
learned quite a lot from the experience. I hope to share some of that
experience and help to remove some of the pain usually associated with
writing and maintaining tests. This talk will cover some of the
practical aspects of writing good tests for real code, including: 1.
Properties of a good test case 2. How to manage setup and teardown 3.
Testing interactions between components 4. Some tools and techniques to
make testing easier 1. Helpers 2. Verified fakes 3. Recording doubles&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Thurgood</dc:creator><pubDate>Fri, 03 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-03:pycon-za-2014/practical-testing.html</guid><category>pyconza</category><category>pyconza2014</category></item><item><title>Friday Lightning Talks</title><link>https://pyvideo.org/pycon-za-2015/friday-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h0m0s"&gt;(0:00:00)&lt;/a&gt; &lt;strong&gt;Using Odo to
load data&lt;/strong&gt; by Tobias Brandt&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h5m23s"&gt;(0:05:23)&lt;/a&gt; &lt;strong&gt;Sh&lt;/strong&gt; by
Adrianna Pi≈Ñska&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h8m44s"&gt;(0:08:44)&lt;/a&gt; &lt;strong&gt;Pygame Zero&lt;/strong&gt;
by Neil Muller&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h11m57s"&gt;(0:11:57)&lt;/a&gt; &lt;strong&gt;How not to
hate Javascript&lt;/strong&gt; by Adam Jorgensen&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://youtu.be/MNyOPWT8ncw?t=0h16m28s"&gt;(0:16:28)&lt;/a&gt; &lt;strong&gt;Testing code
examples from your slides&lt;/strong&gt; by Jeremy Thurgood&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Jorgensen</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-02:pycon-za-2015/friday-lightning-talks.html</guid><category>lightning talks</category><category>Room 215</category></item><item><title>Property-based testing with Hypothesis</title><link>https://pyvideo.org/pycon-za-2015/property-based-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit testing can be more effective and less tedious when you have an
army of robot monkeys at your disposal. Why should humans have to worry
about finding the particular combination of Turkish and Tengwar that
crashes the serialiser, or the convoluted sequence of operations that
corrupts the database?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
Hypothesis is a Python library for turning unit tests into generative tests,
covering a far wider range of cases than you can manually. Rather than just
testing for the things you already know about, Hypothesis goes out and
actively hunts for bugs in your code. It usually finds them, and when it
does it gives you simple and easy to read examples to demonstrate.
&lt;/pre&gt;
&lt;p class="attribution"&gt;&amp;mdash;Hypothesis 1.0 release announcement&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Property-based testing lets you think about your tests in terms of
general behaviour and invariant properties instead of getting lost in
the details of individual examples, and good tools (such as Hypothesis)
will explore quite complex combinations of test data and reduce them to
minimum failing cases.&lt;/p&gt;
&lt;p&gt;This talk will provide a practical introduction to property-based
testing with Hypothesis, and show how you can use it to build more
effective test suites with less effort.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Thurgood</dc:creator><pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-02:pycon-za-2015/property-based-testing-with-hypothesis.html</guid><category>Room 215</category></item><item><title>Surviving a Legacy Codebase</title><link>https://pyvideo.org/pycon-za-2017/surviving-a-legacy-codebase.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few things strike more fear into the heart of a seasoned software
developer than the words &amp;quot;legacy code&amp;quot;. However, many of us spend a
lot of time working on byzantine monstrosities inherited from
contractors, third parties, or Bob who left the company three months
ago. Over the past several years, I've sunk way more hours than I
care to think about into making legacy codebases more malleable. I've
picked up a few tricks and strategies along the way that make the
process a little smoother and less painful, and I will be sharing
them in this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Thurgood</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pycon-za-2017/surviving-a-legacy-codebase.html</guid></item></channel></rss>