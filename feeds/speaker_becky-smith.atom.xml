<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Becky Smith</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_becky-smith.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-09-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python 2 is dead! Drag your old code into the modern age.</title><link href="https://pyvideo.org/europython-2018/python-2-is-dead-drag-your-old-code-into-the-modern-age.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Becky Smith</name></author><id>tag:pyvideo.org,2018-07-25:/europython-2018/python-2-is-dead-drag-your-old-code-into-the-modern-age.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The clock is ticking on Python 2.7, with support to be dropped in
January 2020. With major dependencies such as Django, NumPy and pandas
moving to Python 3 only, the time has come for even big established
codebases to consider upgrading. Many organisations are still postponing
for various …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The clock is ticking on Python 2.7, with support to be dropped in
January 2020. With major dependencies such as Django, NumPy and pandas
moving to Python 3 only, the time has come for even big established
codebases to consider upgrading. Many organisations are still postponing
for various reasons; we will attempt to demonstrate that with a bit of
planning and perseverance, and the assistance of some handy tools, we
can embrace the future!&lt;/p&gt;
&lt;p&gt;This session will provide a first-hand perspective on how we upgraded a
large (~65,000 lines of python code) 8-year-old Django project with
multiple external dependencies from Python 2.7 to Python 3.6.&lt;/p&gt;
&lt;p&gt;We will briefly discuss the benefits of upgrading to Python 3, and
architectural considerations. The session will primarily focus on the
practicalities of upgrading the code itself. We will not try to provide
a single “best” solution for upgrading to Python 3, but rather will
introduce some of the available tools, provide an insight into how we
used them, and their advantages and disadvantages from our experience.
We will discuss preparatory steps and approaches, strategies for dealing
with external dependencies, and “gotchas” that we encountered during the
process.&lt;/p&gt;
&lt;p&gt;The aim of this session is to provide an example of how a Python 3
upgrade on an established commercial product can be successfully
completed, and to furnish audience members with a set of tools and
strategies to help them with their own projects.&lt;/p&gt;
&lt;p&gt;Prerequisites: basic knowledge of Python.&lt;/p&gt;
</content><category term="EuroPython 2018"></category></entry><entry><title>Python 2 is dead! Drag your old code into the modern age</title><link href="https://pyvideo.org/pycon-uk-2018/python-2-is-dead-drag-your-old-code-into-the-modern-age.html" rel="alternate"></link><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><author><name>Becky Smith</name></author><id>tag:pyvideo.org,2018-09-18:/pycon-uk-2018/python-2-is-dead-drag-your-old-code-into-the-modern-age.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The clock is ticking on Python 2.7, with support to be dropped in
January 2020. With major dependencies such as Django, NumPy and pandas
moving to Python 3 only, the time has come for even big established
codebases to consider upgrading. Many organisations are still postponing
for various …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The clock is ticking on Python 2.7, with support to be dropped in
January 2020. With major dependencies such as Django, NumPy and pandas
moving to Python 3 only, the time has come for even big established
codebases to consider upgrading. Many organisations are still postponing
for various reasons; we will attempt to demonstrate that with a bit of
planning and perseverance, and the assistance of some handy tools, we
can embrace the future!&lt;/p&gt;
&lt;p&gt;This session will provide a first-hand perspective on how we upgraded a
large (~65,000 lines of python code) 8-year-old Django project with
multiple external dependencies from Python 2.7 to Python 3.6.&lt;/p&gt;
&lt;p&gt;We will briefly discuss the benefits of upgrading to Python 3, and
architectural considerations. The session will primarily focus on the
practicalities of upgrading the code itself. We will not try to provide
a single “best” solution for upgrading to Python 3, but rather will
introduce some of the available tools, provide an insight into how we
used them, and their advantages and disadvantages from our experience.
We will discuss preparatory steps and approaches, strategies for dealing
with external dependencies, and “gotchas” that we encountered during the
process.&lt;/p&gt;
&lt;p&gt;The aim of this session is to provide an example of how a Python 3
upgrade on an established commercial product can be successfully
completed, and to furnish audience members with a set of tools and
strategies to help them with their own projects.&lt;/p&gt;
</content><category term="PyCon UK 2018"></category></entry><entry><title>OpenSAFELY: a python powered response to the COVID pandemic</title><link href="https://pyvideo.org/pycon-uk-2022/opensafely-a-python-powered-response-to-the-covid-pandemic.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Becky Smith</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/opensafely-a-python-powered-response-to-the-covid-pandemic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenSAFELY is a secure, transparent, open-source platform, built in Python, in response to the COVID pandemic.  It provides almost real-time analysis of millions of electronic health records.  We will discuss privacy, security and research goals achieved by a cross-disciplinary team of researchers, epidemiologists and developers working together.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenSAFELY is a secure, transparent, open-source platform, built in Python, in response to the COVID pandemic.  It provides almost real-time analysis of millions of electronic health records.  We will discuss privacy, security and research goals achieved by a cross-disciplinary team of researchers, epidemiologists and developers working together.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is a secure, transparent, open-source software platform for analysis of electronic health records (EHR) data, built in Python.&lt;/p&gt;
&lt;p&gt;OpenSAFELY was built as a fast response to the Covid-19 pandemic to provide almost real-time analysis of millions of NHS records related to Covid data such as hospitalisations, deaths, risk factors and vaccinations.&lt;/p&gt;
&lt;p&gt;In this talk, we will tell the story of how OpenSAFELY came to be, the privacy, security and research goals it addresses with software, and how research best practices can be achieved by a cross-disciplinary team of researchers, epidemiologists and software developers working alongside each other.&lt;/p&gt;
&lt;p&gt;We will describe the particular challenges that face researchers working with potentially identifiable patient data, and how the inherent risks of such data can be mitigated.&lt;/p&gt;
&lt;p&gt;A key concept is the idea of pseudonymised data; i.e. data where a patient's immediately identifiable information (name, exact address, date of birth etc) has been obfuscated). While this sort of data has been superficially anonymised, it can be quite easy to re-identify individuals from the information available. For example, a malicious intruder might easily find and read Boris Johnson’s entire health record by searching for a patient who matches information that is openly available on his Wikipedia page: his age, the dates he tested positive and was admitted to hospital for Covid-19, and the fact that he lives in London.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is a range of tools that aims to allow analysis of EHR data while adhering to these principles; it aims to substantially exceed, by design, the current requirements on securing sensitive healthcare data.  OpenSAFELY does not move patient data outside of the secure environments where it already resides: instead, trusted analysts can run large scale computation across pseudonymised patient records in situ, and in near-real-time.&lt;/p&gt;
&lt;p&gt;OpenSAFELY contains a range of flexible, pragmatic, but broadly standardised tools that users work with to convert raw patient data into “research ready” datasets, and to then execute code across those datasets. We will discuss the architecture of the platform, some of the tools we chose to use, and reasons for the design decisions made.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry></feed>