<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matus-valo.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-03-10T00:00:00+00:00</updated><entry><title>Implementing distributed systems with Consul</title><link href="https://pyvideo.org/pycon-sk-2018/implementing-distributed-systems-with-consul.html" rel="alternate"></link><published>2018-03-10T00:00:00+00:00</published><updated>2018-03-10T00:00:00+00:00</updated><author><name>Matúš Valo</name></author><id>tag:pyvideo.org,2018-03-10:pycon-sk-2018/implementing-distributed-systems-with-consul.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing distributed systems is hard. Implementing distributed system
from scratch requires knowledge of specialized algorithms and
programming techniques. Consul is distributed system which enables us to
build distributed system only by using Consul HTTP API. In our
presentation, we are going to show basic concepts of consul, building
our own consul cluster and showing how consul can be used for
implementing distributed system. Our discussion will include also
showing how we can benefit from consul even when using already existing
python distributed components.&lt;/p&gt;
</summary><category term="Consul"></category><category term="Distributed systems"></category><category term="PyCon SK"></category><category term="Python"></category></entry><entry><title>ctypes tutorial</title><link href="https://pyvideo.org/pycon-sk-2017/ctypes-tutorial.html" rel="alternate"></link><published>2017-03-10T00:00:00+00:00</published><updated>2017-03-10T00:00:00+00:00</updated><author><name>Matuš Valo</name></author><id>tag:pyvideo.org,2017-03-10:pycon-sk-2017/ctypes-tutorial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python je dynamický programovací jazyk, ktorý bol navrhnutý tak, aby jeho kritické časti sa dali jednoducho prepísať do jazyka C. Preto sa často stretávame s praxou, že Python knižnice sa nesnažia znovu implementovať funkcionalitu ale poskytujú wrapper už existujúcej C knižnice. Implementácia takéhoto wrappera pomocou API python interpretera môže byt náročnejšia pretože si vyžaduje znalosť programovania v jazyku C a znalosť Python/C API. Navyše pri programovaní musíme priamo alebo nepriamo pracovať s pamäťou, čo môže viesť k chybám spôsobujúcim únik pamäte. Takéto riešenie má taktiež problém s prenositeľnosťou na alternatívne implementácie Pythonu (napr. PyPy, Jython).&lt;/p&gt;
&lt;p&gt;Väčšinu týchto problémov rieši knižnica ctypes. ctypes je súčasťou štandardnej distribúcie Pythonu. Poskytuje možnosť volania C funkcií priamo z Pythonu bez nutnosti programovania v jazyku C.&lt;/p&gt;
&lt;p&gt;V rámci prezentácie bude predstavená ctypes knižnica s príkladmi definovania API obsahujúce zložitejšie štruktúry a funkcie. V rámci praktického príkladu vytvoríme python wrapper nad openldap knižnicou libldap.&lt;/p&gt;
</summary></entry></feed>