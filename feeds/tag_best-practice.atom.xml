<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - best practice</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_best-practice.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Advanced asyncio: Solving Real-world Production Problems</title><link href="https://pyvideo.org/europython-2019/advanced-asyncio-solving-real-world-production-problems.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/advanced-asyncio-solving-real-world-production-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By building a simplified chaos monkey service, we will walk through how
to create a good foundation for an asyncio-based service, including
graceful shutdowns, proper exception handling, and testing asynchronous
code. We’ll get into the hairier topics as well, covering topics like
working with synchronous code, debugging and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By building a simplified chaos monkey service, we will walk through how
to create a good foundation for an asyncio-based service, including
graceful shutdowns, proper exception handling, and testing asynchronous
code. We’ll get into the hairier topics as well, covering topics like
working with synchronous code, debugging and profiling, and working with
threaded code. We’ll learn how to approach asynchronous and concurrent
programming with Python’s asyncio library, take away some best
practices, and learn what pitfalls to avoid.&lt;/p&gt;
&lt;p&gt;Outline:
(40 minutes + 5 min Q&amp;amp;A, if unable to get 45 minutes, then 30 min slot
with no time for Q&amp;amp;A)&lt;/p&gt;
&lt;div class="section" id="intro-2m"&gt;
&lt;h4&gt;Intro (2m)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Speaker/company intro&lt;/li&gt;
&lt;li&gt;Setting the context/purpose of talk&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="foundations-9m-trimmed-to-6m-for-30-min-slot"&gt;
&lt;h4&gt;Foundations (9m - trimmed to 6m for 30 min slot)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initial setup of an asyncio service (2m)&lt;ul&gt;
&lt;li&gt;Required boilerplate code&lt;/li&gt;
&lt;li&gt;Inspiration from official asyncio tutorial docs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Making a service &lt;em&gt;actually&lt;/em&gt; concurrent (5m)&lt;ul&gt;
&lt;li&gt;non-blocking vs concurrent&lt;/li&gt;
&lt;li&gt;when to be concurrent vs serial&lt;/li&gt;
&lt;li&gt;using callbacks vs awaits vs scheduling tasks (create_task) vs
asyncio.Events&lt;/li&gt;
&lt;li&gt;Making synchronous code asyncio-friendly (2m)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="intermediate-9m-trimmed-to-6m-for-30-min-slot"&gt;
&lt;h4&gt;Intermediate (9m - trimmed to 6m for 30 min slot)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Graceful shutdowns (3m)&lt;ul&gt;
&lt;li&gt;What a signal handler is, why it’s needed&lt;/li&gt;
&lt;li&gt;What signals to listen to&lt;/li&gt;
&lt;li&gt;Gotchas of cancelling tasks, asyncio.shield + shutdown behavior&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception handling (3m)&lt;ul&gt;
&lt;li&gt;Difference between top-level exception handling and handling
within other coroutines&lt;/li&gt;
&lt;li&gt;Avoid mistakenly swallowing/missing raised exceptions&lt;/li&gt;
&lt;li&gt;Making use of loop.set_exception_handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Making threaded code asyncio-“friendly” (3m)&lt;ul&gt;
&lt;li&gt;Calling threaded code from coroutines (aka running within a
ThreadPoolExecutor)&lt;/li&gt;
&lt;li&gt;Calling coroutines from from threaded code (aka
run_coroutine_threadsafe)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-19m-trimmed-to-15m-for-30-min-slot"&gt;
&lt;h4&gt;Advanced (19m - trimmed to 15m for 30 min slot)&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing asyncio code (7m)&lt;ul&gt;
&lt;li&gt;Benefits of debug mode&lt;/li&gt;
&lt;li&gt;How to mock coroutines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Debugging an asyncio service (5m)&lt;ul&gt;
&lt;li&gt;Reinforce debug mode&lt;/li&gt;
&lt;li&gt;Using “tricks&amp;quot; like &lt;tt class="docutils literal"&gt;asyncio.all_tasks&lt;/tt&gt; with logging,
&lt;tt class="docutils literal"&gt;loop.slow_callback_duration&lt;/tt&gt;, adding context/stack trace in default
exception handler&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Profiling (7m)&lt;ul&gt;
&lt;li&gt;Basic profiling (cProfile, strace) - not that different from sync
code&lt;/li&gt;
&lt;li&gt;Continuous profiling with 3rd party tools, i.e. github.com/what-
studio/profiling&lt;/li&gt;
&lt;li&gt;PyCharm’s asyncio &amp;amp; thread profiler&lt;/li&gt;
&lt;li&gt;How to properly trace a workflow/request (e.g. for the purpose of
distributed tracing) (to be cut if not enough time)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-up-review-1m"&gt;
&lt;h4&gt;Wrap up/Review (1m)&lt;/h4&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="ASYNC / Concurrency"></category><category term="Best Practice"></category><category term="Development"></category></entry><entry><title>Code quality in Python</title><link href="https://pyvideo.org/europython-2019/code-quality-in-python.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Radosław Ganczarek</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/code-quality-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Four years ago I talked about code quality during EuroPython in
Bilbao. A lot of things changed from that time. Firstly, most tools I
presented were still developed and gained new features, but also new
ones appeared I wanted to discuss with you. Secondly, Python changed,
Python 3 has …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Four years ago I talked about code quality during EuroPython in
Bilbao. A lot of things changed from that time. Firstly, most tools I
presented were still developed and gained new features, but also new
ones appeared I wanted to discuss with you. Secondly, Python changed,
Python 3 has type hints on board and there is a new tool dedicated to
checking the types. Thirdly - I changed. I'm more distanced form my
zealous approach from four years ago. I got real and reasonable.
That's why I wanted to talk about code quality tools in Python again.&lt;/div&gt;
&lt;div class="line"&gt;I'll talk about all the software that can make code review a bit
simpler by pointing out possible errors, duplicates or unused code.
I'll talk again about formatters and how can they be used in
modern-time projects. And I'll talk about hobgoblins, if you know what
I mean :)&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Code Analysis"></category><category term="Python 3"></category><category term="Tooling"></category><category term="Type-Hinting"></category></entry><entry><title>Code review for Beginners and Experts: Tips &amp; Tricks</title><link href="https://pyvideo.org/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Łukasz Kąkol</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/code-review-for-beginners-and-experts-tips-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Code review is not just boring duty. It's mutual responsibility for
the software we're releasing. It's one of the most critical aspects of
code quality, and therefore it's the first step of quality assurance.
This is also the key to easier programming and better maintainability.
Clean code is much easier to debug, and it's much harder to introduce
a bug in such code.&lt;/div&gt;
&lt;div class="line"&gt;When you think about code review, you probably think about verifying
and examining the code. Reviewing the expert's code may look like a
waste of time because he knows what he's doing. Reviewing the code by
a beginner may look like a waste of time because he's not able to find
as many defects as an experienced developer. Code review is a code
quality tool in the first place, but it's also much beyond that. You
can teach or help someone, learn from somebody and much more both from
the position of reviewer and reviewee.&lt;/div&gt;
&lt;div class="line"&gt;There is much more about the real power of code review which I want to
share with you.&lt;/div&gt;
&lt;div class="line"&gt;This talk is also about how to do it the right way and how to not do
it based on lessons learned and my experience within the diverse teams
of people with a variety of knowledge and experience. I was reviewing
the code but, on the other hand, I was also being reviewed. I'd like
to pass my observations to people who are reviewing the code both in
commercial and open source projects for a while. This talk is also for
those who want to start to review the code, but they do not know how
to do it.&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Development"></category><category term="Programming"></category></entry><entry><title>Configuring uWSGI for Production: The defaults are all wrong</title><link href="https://pyvideo.org/europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Peter Sperl</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, we began migrating from a proprietary service framework
to a WSGI-compliant one. We chose uWSGI as our host because of its
performance and feature set. But, while powerful, uWSGI's defaults are
driven by backward compatibility and are not ideal for new deployments.
Powerful features can be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, we began migrating from a proprietary service framework
to a WSGI-compliant one. We chose uWSGI as our host because of its
performance and feature set. But, while powerful, uWSGI's defaults are
driven by backward compatibility and are not ideal for new deployments.
Powerful features can be overlooked due to the sheer magnitude of its
feature set and spotty documentation. As we've scaled up the number of
services hosted by uWSGI over the last year, we've had to tweak our
standard configuration.&lt;/p&gt;
&lt;p&gt;In this talk, we'll present the base uWSGI configuration we use as a
starting point for all services, as well as some tips to avoid known
gotchas and provide a base level of defensiveness and high reliability.
This base configuration makes use of several &amp;quot;no-cost&amp;quot; uWSGI features
that help protect services from common, yet difficult to prevent issues
-- some of which we discovered the hard way. We'll also talk about some
programmatic uWSGI features which can be leveraged to improve
reliability and improve outage response.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the topics we'll cover include:&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating memory leaks&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating stuck, hung, or infinitely looping processes&lt;/div&gt;
&lt;div class="line"&gt;- Preventing misconfigurations&lt;/div&gt;
&lt;div class="line"&gt;- Preventing wasted development effort&lt;/div&gt;
&lt;div class="line"&gt;- Improving outage response&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Distributed Systems"></category><category term="Microservices"></category><category term="Web Servers and MicroFWs"></category><category term="failures/mistakes"></category></entry><entry><title>Don't do this at work</title><link href="https://pyvideo.org/europython-2019/dont-do-this-at-work.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Tiago Montes</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/dont-do-this-at-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I reframe a computer programming workshop for kids I
delivered earlier this year, exploring and sharing my experience
throughout that journey, from preparation to delivery, by recreating a
simple yet engaging enough game.&lt;/p&gt;
&lt;p&gt;With that I'll both demonstrate several Python related techniques and
tools many may …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I reframe a computer programming workshop for kids I
delivered earlier this year, exploring and sharing my experience
throughout that journey, from preparation to delivery, by recreating a
simple yet engaging enough game.&lt;/p&gt;
&lt;p&gt;With that I'll both demonstrate several Python related techniques and
tools many may not be aware of, on one hand, and, on the other, extract
provocative questions about general learning processes, especially when
targeted at professional developers.&lt;/p&gt;
&lt;p&gt;I promise zero slides and a somewhat fast-paced live (re)coding session,
intertwined with comments on good/bad techniques, along with a
surprising exploration of the turtle module in the Standard Library --
it is more capable than you think.&lt;/p&gt;
&lt;p&gt;I wrap up with a self-code review and with thoughts on how such a game
could be improved, what implications that could have for both beginners
and seasoned professionals: should you do this at work?&lt;/p&gt;
&lt;p&gt;Targeting 10 minute Q&amp;amp;A / discussion by the end!&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Education"></category><category term="Learning"></category><category term="Life"></category><category term="Python Skills"></category></entry><entry><title>Don't start with a database</title><link href="https://pyvideo.org/europython-2019/dont-start-with-a-database.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Grzegorz Kocjan</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/dont-start-with-a-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What you do when you start a new project? Usually, we begin with
database design, then we prepare a migration system, user registration,
and all different stuff that distracts us from doing what is most
important - business logic. With the clean architecture, we can learn
how to start a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What you do when you start a new project? Usually, we begin with
database design, then we prepare a migration system, user registration,
and all different stuff that distracts us from doing what is most
important - business logic. With the clean architecture, we can learn
how to start a project in another way and this will be one of two main
topics of my talk. The second one will be about new features in Python.
You probably heard about typings, mypy, and dataclasses, but I will show
you how they can be used in real life project that can be developed over
many years in production lifecycle. There will be no &amp;quot;hello world&amp;quot; app,
no copy &amp;amp; paste of documentation, only practical knowledge learned
through many years of practice.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="APIs"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category></entry><entry><title>How we run GraphQL APIs in production on our Kubernetes cluster</title><link href="https://pyvideo.org/europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I would like to share the workflow and tools we use to
build, deploy and operate GraphQL APIs on our on-premise Kubernetes
cluster.&lt;/p&gt;
&lt;p&gt;I will share code and command examples explaining how we are operating
our applications since our recent transition from REST APIs on Web …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I would like to share the workflow and tools we use to
build, deploy and operate GraphQL APIs on our on-premise Kubernetes
cluster.&lt;/p&gt;
&lt;p&gt;I will share code and command examples explaining how we are operating
our applications since our recent transition from REST APIs on Web
servers to GraphQL APIs containers on Kubernetes.&lt;/p&gt;
&lt;p&gt;This talk will not be about the difference between REST and GraphQL but
focus on the workflow, tools and experience we gained in switching our
run time environments and API models.&lt;/p&gt;
&lt;p&gt;At Numberly, we have built and are operating our own on-premise
Kubernetes cluster so we will also be talking about its capabilities and
share some of the experience we gained in doing so.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Proposed agenda:&lt;/div&gt;
&lt;div class="line"&gt;- Our previous workflow and its limitations&lt;/div&gt;
&lt;div class="line"&gt;- How we designed our Kubernetes cluster, its capabilities and the
choices we made&lt;/div&gt;
&lt;div class="line"&gt;- Developer workflow, environments management and deployment&lt;/div&gt;
&lt;div class="line"&gt;- Our GraphQL stack, featuring a sample application&lt;/div&gt;
&lt;div class="line"&gt;- What we're still working on to improve&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="APIs"></category><category term="Best Practice"></category><category term="Case Study"></category><category term="Docker"></category><category term="Infrastructure"></category></entry><entry><title>Modern Continuous Delivery for Python Developers</title><link href="https://pyvideo.org/europython-2019/modern-continuous-delivery-for-python-developers.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Peter Bittner</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/modern-continuous-delivery-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment automation, cloud platforms, containerization, short
iterations to develop and release software—we’ve progressed a lot. And
finally it’s official: Kubernetes and OpenShift are the established
platforms to help us do scaling and zero downtime deployments with just
a few hundred lines of YAML. It’s a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment automation, cloud platforms, containerization, short
iterations to develop and release software—we’ve progressed a lot. And
finally it’s official: Kubernetes and OpenShift are the established
platforms to help us do scaling and zero downtime deployments with just
a few hundred lines of YAML. It’s a great time.&lt;/p&gt;
&lt;p&gt;Can we finally put all our eggs into one basket? Identify the cloud
platform that fits our needs, and jump on it? That could well backfire:
Vendor lock-in is the new waterfall, it slows you down. In future you’ll
want to jump over to the next better platform, in a matter of minutes.
Not months.&lt;/p&gt;
&lt;p&gt;This talk is about The Art of Writing deployment pipelines that will
survive Kubernetes, OpenShift and the like. It’s for Python developers
and Kubernetes enthusiasts of all levels – no domain specific knowledge
required, all you need to understand will be explained. You’ll learn how
to separate application-specific and deployment-specific configuration
details, to maximize your freedom and avoid vendor lock-in.&lt;/p&gt;
&lt;p&gt;Come see a demo of a Django project setup that covers everything from
local development to automatic scaling, flexible enough to be deployed
on any of your favorite container platforms. Take home a working,
future-proof setup for your Python applications.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Agile"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Deployment/Continuous Integration and Delivery"></category></entry><entry><title>Software patterns for productive teams</title><link href="https://pyvideo.org/europython-2019/software-patterns-for-productive-teams.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Radoslav Georgiev</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/software-patterns-for-productive-teams.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software development is a team game.&lt;/p&gt;
&lt;p&gt;When we want to deliver more work, one of the variables that we can
change is the team size. But as we all know, increasing the team size
does not automatically translate into increased productivity &amp;amp; more
features shipped.&lt;/p&gt;
&lt;p&gt;If things are left unmanaged …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software development is a team game.&lt;/p&gt;
&lt;p&gt;When we want to deliver more work, one of the variables that we can
change is the team size. But as we all know, increasing the team size
does not automatically translate into increased productivity &amp;amp; more
features shipped.&lt;/p&gt;
&lt;p&gt;If things are left unmanaged, people can step on each other toes, block
each other &amp;amp; generally decrease the overall productivity of a given
software project.&lt;/p&gt;
&lt;p&gt;In this talk we'll identify different problems teams can face &amp;amp; see how
we can solve them using different strategies &amp;amp; patterns.&lt;/p&gt;
&lt;p&gt;In the end, we want to enable the team to perform better &amp;amp; ship features
with high confidence. We want enable the team &amp;amp; put its potential into
building good software.&lt;/p&gt;
&lt;p&gt;Problems we are going to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Constant merge conflicts / working in the same files&lt;/li&gt;
&lt;li&gt;Blocking each other on different features / Feature deadlock&lt;/li&gt;
&lt;li&gt;Constantly switching between bugfixing &amp;amp; feature development&lt;/li&gt;
&lt;li&gt;Constant regressions and things breaking down&lt;/li&gt;
&lt;li&gt;Fighting with local setup &amp;amp; not being able to properly test things,
especially when working with 3rd parties&lt;/li&gt;
&lt;li&gt;Merge strategies &amp;amp; improving the work with git &amp;amp; GitHub&lt;/li&gt;
&lt;li&gt;Communication between team members &amp;amp; ego fights&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each problem, we are going to propose different solutions with
provided real-life examples from our experience &amp;amp; projects.&lt;/p&gt;
&lt;p&gt;The examples show are going to be in the context of large Python /
Django projects.&lt;/p&gt;
&lt;p&gt;This talk is the natural sequel of the following talks from previous
EuroPythons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;EuroPython 2017 - Practical Debugging - Tips, Tricks and Ways to
think - &lt;a class="reference external" href="https://www.youtube.com/watch?v=9Ys4gCUtTh8"&gt;https://www.youtube.com/watch?v=9Ys4gCUtTh8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2018 - Django structure for scale and longevity -
&lt;a class="reference external" href="https://www.youtube.com/watch?v=yG3ZdxBb1oo"&gt;https://www.youtube.com/watch?v=yG3ZdxBb1oo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Abstractions"></category><category term="Best Practice"></category><category term="Communication"></category><category term="Django Projects"></category><category term="Management"></category></entry><entry><title>A Day Has Only 24±1 Hours</title><link href="https://pyvideo.org/europython-2019/a-day-has-only-24-1-hours.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Miroslav Šedivý</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/a-day-has-only-24-1-hours.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On the last Sunday of October you may get “one more hour of sleep” but
as well may spend much more time debugging code dealing with the time
zones, daylight saving time shifts and datetime stuff in general.&lt;/p&gt;
&lt;p&gt;We'll look at a few pitfalls you may encounter when working …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On the last Sunday of October you may get “one more hour of sleep” but
as well may spend much more time debugging code dealing with the time
zones, daylight saving time shifts and datetime stuff in general.&lt;/p&gt;
&lt;p&gt;We'll look at a few pitfalls you may encounter when working with
datetimes in Python. We'll dissect the pytz library, explain why it
contains over 500 individual time zones while focusing on the 63 entries
in Europe. We'll also find the reason why pytz is not part of the
standard Python, why it gets updated so often and why even that won't
solve all your problems. Do you know what happens after 2021 when the EU
stops DST switching?&lt;/p&gt;
&lt;p&gt;Two centuries of short-sighted propaganda and long-term chaos in
forty-five minutes. Maybe that will make you want to avoid time zones in
your code altogether!&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Community"></category><category term="Python general"></category><category term="failures/mistakes"></category></entry><entry><title>Exceptional Exceptions</title><link href="https://pyvideo.org/europython-2019/exceptional-exceptions.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/exceptional-exceptions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Did you know there are multiple ways to raise and capture exceptions?
Have you ever wondered if you should raise a built-in exception or
create your own hierarchy? Did you ever find it hard to understand
what an exception meant?&lt;/div&gt;
&lt;div class="line"&gt;This talk will go through the decisions needed to …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Did you know there are multiple ways to raise and capture exceptions?
Have you ever wondered if you should raise a built-in exception or
create your own hierarchy? Did you ever find it hard to understand
what an exception meant?&lt;/div&gt;
&lt;div class="line"&gt;This talk will go through the decisions needed to raise and capture
exceptions when creating a library. We will look at how to translate
and handle errors, create your own exceptions, and make exceptions
clear and easy to troubleshoot, while also understanding how they
actually work, common pitfalls.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk will enable intermediate developers to leave the room with a
solid understanding of how to work effectively with exceptions. As the
exception flow usually goes untested, this will help prevent frustrating
situations when errors occur that are not easy to understand or when an
unexpected result is produced. The talk will delve into the different
ways of working with exceptions. We will illustrate this with a
real-world example to which many developers will be able to relate.&lt;/p&gt;
&lt;p&gt;Following the talk, intermediate developers will leave the room more
informed and better prepared to create and handle exceptions, having
learned about many utilities that were already available to them, but
were never used or were used improperly.&lt;/p&gt;
&lt;p&gt;The not-so-advanced Pythonistas will get an in-depth dive into
exceptions. Even if they might not be able to grasp all of the content,
they will get a sense of the features that most programmers are unaware
of and learn to use them when the proper situation arrives.&lt;/p&gt;
&lt;p&gt;Advanced programmers will find this to be a humorous talk that will
certainly teach them at least one new thing, as I will dive into parts
of the grammar of Python that even many advanced programmers are not
used to.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The talk is also full of niche information like why the variable that
catches exceptions doesn’t like outside of the &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; scope.&lt;/div&gt;
&lt;div class="line"&gt;The talk is comprised of four main sections preceded by an
introduction to the problem and a conclusion with time for questions
at the end. We will look at how to raise, capture, create and design
exceptions, offering tips and pitfalls in each section.&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Development"></category><category term="General"></category><category term="Python 3"></category><category term="Python Skills"></category></entry><entry><title>From Python script to Open Source Project</title><link href="https://pyvideo.org/europython-2019/from-python-script-to-open-source-project.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/from-python-script-to-open-source-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you write a cool and useful Python script? Would you like to share
it with the community, but you're not sure how to go about that? If so,
then this talks is for you. We'll go over a list of simple steps which
can turn your script into a fully fledged open-source project.&lt;/p&gt;
&lt;p&gt;The Python community has a rich set of tools which can help verify the
quality of your code through automated code-review and linting. You can
benefit by taking advantage of this ecosystem. Complete the steps in
this checklist, and your project will be easier to maintain, you'll be
ready to take contributions from the community and those contributions
will be up to high standards. Your project will also keep up with other
projects on PyPI and you will be alerted if any new release causes an
incompatibility with your code.&lt;/p&gt;
&lt;p&gt;The same checklist can be used for non open-source projects as well.&lt;/p&gt;
&lt;p&gt;The project maturity checklist includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Properly structure your code&lt;/li&gt;
&lt;li&gt;Use a setup.py file&lt;/li&gt;
&lt;li&gt;Add entry_points for your script command&lt;/li&gt;
&lt;li&gt;Create a requirements.txt file&lt;/li&gt;
&lt;li&gt;Use Black to format your code&lt;/li&gt;
&lt;li&gt;Create a tox.ini config and include code linters&lt;/li&gt;
&lt;li&gt;Set up a Git repo&lt;/li&gt;
&lt;li&gt;Refactor your code to be unit-testable and add tests&lt;/li&gt;
&lt;li&gt;Add missing docstrings&lt;/li&gt;
&lt;li&gt;Add type annotations and a MyPy verification step&lt;/li&gt;
&lt;li&gt;Upload to GitHub&lt;/li&gt;
&lt;li&gt;Add a continuous integration service (e.g. Travis)&lt;/li&gt;
&lt;li&gt;Add a requirements updater (e.g. pyup.bot)&lt;/li&gt;
&lt;li&gt;Add test coverage checker (e.g. coveralls)&lt;/li&gt;
&lt;li&gt;Add a Readme file and documentation&lt;/li&gt;
&lt;li&gt;Publish your project on PyPI&lt;/li&gt;
&lt;li&gt;Advertise your project&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Static Analysis"></category><category term="Tooling"></category></entry><entry><title>Gamifying the study of algorithms</title><link href="https://pyvideo.org/europython-2019/gamifying-the-study-of-algorithms.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Iulia Avram</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/gamifying-the-study-of-algorithms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you remember when you used to learn algorithms? It was probably
either back when you were studying for your degree, or when you were
brushing up for a technical interview. If you're like most of the
developers I know, solving algorithms probably went from being a fun
past-time …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you remember when you used to learn algorithms? It was probably
either back when you were studying for your degree, or when you were
brushing up for a technical interview. If you're like most of the
developers I know, solving algorithms probably went from being a fun
past-time, to a bothersome necessity, to a thing of the past. Our life
has been greatly improved by our tools and there's little need to know
all sorting methods out there, or how to search through a tree. Or maybe
we're wrong, maybe knowing these things could make a difference in how
we write code.&lt;/p&gt;
&lt;p&gt;I am going to try to dispel some of the myths surrounding the study of
algorithms and competitive programming, and argue that sharpening this
skill is something that benefits us, as software developers, outside of
passing technical tests; that knowing many algorithms makes us better
and faster problem solvers.&lt;/p&gt;
&lt;p&gt;Lastly, this talk is about resources and ways in which to gamify the
study of algorithms. Going at it the same way as for exams or interviews
makes it very bothersome very quickly. It gets easy to lose sight of the
biggest picture and to start thinking of algorithms in abstract terms,
outside their applications. All these are factors that prompt the
question: why should I carry on with it?&lt;/p&gt;
&lt;p&gt;Therefore, something needs to be changed in the way we do this.
Algorithms are fun and they don't deserve the disdain we give them.
Knowing algorithms is not only for the geniuses and innovators.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Algorithms"></category><category term="Best Practice"></category><category term="Education"></category><category term="Fun and Humor"></category></entry><entry><title>How Thinking in Python Made Me a Better Software Engineer</title><link href="https://pyvideo.org/europython-2019/how-thinking-in-python-made-me-a-better-software-engineer.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Johnny Dude</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-thinking-in-python-made-me-a-better-software-engineer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you ever wonder why development in Python can be x10 faster than
development in languages like c++?&lt;/p&gt;
&lt;p&gt;Observing my teams’ experimentations, the python community, and reading,
I have adopted various habits, patterns, and tools. But most importantly
I learned thinking in Python. I consider thinking in Python a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you ever wonder why development in Python can be x10 faster than
development in languages like c++?&lt;/p&gt;
&lt;p&gt;Observing my teams’ experimentations, the python community, and reading,
I have adopted various habits, patterns, and tools. But most importantly
I learned thinking in Python. I consider thinking in Python a key for
rapid development and good engineering.&lt;/p&gt;
&lt;p&gt;Thinking in a programming language affects the amount of information you
need to keep in your working memory. It also affects the abstractions
and tools that pop in your mind and then used in constructing solutions.&lt;/p&gt;
&lt;p&gt;Let’s explore what it means to think in Python. Why Python allows you to
focus on problem solving, while languages like c++ often distract your
attention from the problem at hand.&lt;/p&gt;
&lt;p&gt;In this talk I will cover some good and bad practices by examples while
trying to consider the amount of effort needed to write it, read it, and
talk about it with other team members.&lt;/p&gt;
&lt;p&gt;Key Takeaways: Tips for speeding your work without compromising quality,
and reasoning for using it.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The audience should be comfortably familiar with the process of
software development, and software problem solving, and experience
using Python.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Development"></category><category term="Software Design"></category><category term="failures/mistakes"></category></entry><entry><title>How To Build a Python Microservice Without Losing a Job</title><link href="https://pyvideo.org/europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarcastic talk, sharing real-life experience on both technical and
social aspects of doing an architecture migration to microservices
without losing a job.&lt;/p&gt;
&lt;p&gt;Any change in software architecture is a significant time investment.
Writing microservices in Python is a joy, but when you decide on it,
there is often no …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarcastic talk, sharing real-life experience on both technical and
social aspects of doing an architecture migration to microservices
without losing a job.&lt;/p&gt;
&lt;p&gt;Any change in software architecture is a significant time investment.
Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;I would like to share typical pitfalls of choosing a framework stack,
communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Communication"></category><category term="Distributed Systems"></category><category term="Microservices"></category></entry><entry><title>How to ship a Python app to a hundred million desktops</title><link href="https://pyvideo.org/europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Max Bélanger</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-to-ship-a-python-app-to-a-hundred-million-desktops.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is widely used to write scripts and tools, but did you know that
it can also be used to build client-side end-user applications? Crossing
the gap from script to app can be challenging: Join us to learn how to
write modern, high quality desktop apps in Python!&lt;/p&gt;
&lt;p&gt;At …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is widely used to write scripts and tools, but did you know that
it can also be used to build client-side end-user applications? Crossing
the gap from script to app can be challenging: Join us to learn how to
write modern, high quality desktop apps in Python!&lt;/p&gt;
&lt;p&gt;At Dropbox, we’ve been fans of Python from the very beginning: we’ll
take you on a tour of our app for Windows/macOS/Linux and share our
“lessons learned” from over 10 years of development.&lt;/p&gt;
&lt;p&gt;We’ll share best practices and techniques for shipping Python code to
hundreds of millions of devices: discover how to maximize security,
improve performance and guarantee stability.&lt;/p&gt;
&lt;p&gt;We’ll explore the key choices we made and why: learn how we migrated to
Python 3 by simultaneously shipping both versions, or how we use HTML to
power our GUI (a la Electron).&lt;/p&gt;
&lt;p&gt;We’ll reveal our favorite tools and libraries: learn how we scaled from
a few engineers to over 100 and added support for other programming
languages (like Rust).&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The goal of this talk is to share our learnings from using Python on
Windows, macOS and Linux to encourage the use of Python when building
Desktop apps.&lt;/div&gt;
&lt;div class="line"&gt;- We also want to recognize the third-party libraries we’ve used (and
their authors) to raise their profile with the overall community.&lt;/div&gt;
&lt;div class="line"&gt;- We hope this will inspire attendees to write more desktop Python
code, and raise awareness for this use case with the community as a
whole.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We intend to speak to any Python developer/engineer or enthusiast who
makes use of Python in a Desktop environment (or wants to), whether
it’s to make scripts, tools or apps.&lt;/div&gt;
&lt;div class="line"&gt;We do not expect knowledge of any specific third-party Python
libraries; in fact, we hope to draw attention to and recognize many
libraries we’ve found useful.&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Cross-Platform-Development"></category><category term="Mac OS X"></category><category term="Windows"></category></entry><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://pyvideo.org/europython-2019/maintaining-a-python-project-when-its-not-your-job.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/maintaining-a-python-project-when-its-not-your-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be
written first. More often than not, projects that millions of people
depend on are written and maintained by only one person. If you’re
unlucky, that person is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be
written first. More often than not, projects that millions of people
depend on are written and maintained by only one person. If you’re
unlucky, that person is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering a high quality Python package you can be
proud of and having only limited time at your disposal? The answer is
not “try harder,” the answer is to do less.&lt;/p&gt;
&lt;p&gt;This talk will help you get there by talking about how you can make your
life easier, remove causes of friction with your contributors, and
empower said contributors to take over tasks that you can’t make time
for anymore.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Open-Source"></category></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://pyvideo.org/europython-2019/publish-a-perfect-python-package-on-pypi.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/publish-a-perfect-python-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;. Ensure your code will
work in different on different platforms! Document your code so people
won't ask you loads of questions! Finally, learn how avoid doing any of
this yourself.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should you package your code for PyPI?&lt;/li&gt;
&lt;li&gt;How to structure your project and your code, including why you need a
&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder!&lt;/li&gt;
&lt;li&gt;Discover what goes in your &lt;tt class="docutils literal"&gt;Pipfile&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and
why. Learn the difference between installing your library to use it,
and installing it to develop on it.&lt;/li&gt;
&lt;li&gt;Write tests for your project, and run them using Tox.&lt;/li&gt;
&lt;li&gt;Ensure your code will work in different on different platforms with
Continuous Integration!&lt;/li&gt;
&lt;li&gt;Document your code so people won't ask you loads of questions!&lt;/li&gt;
&lt;li&gt;How to actually get your code on PyPI using Twine.&lt;/li&gt;
&lt;li&gt;Finally, learn how avoid doing any of this yourself (or avoid doing
it twice) using CookieCutter templates.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Packaging"></category><category term="Python 3"></category></entry><entry><title>The dos and don'ts of task queues</title><link href="https://pyvideo.org/europython-2019/the-dos-and-donts-of-task-queues.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Petr Stehlík</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/the-dos-and-donts-of-task-queues.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Kiwi.com we heavily rely on task queues and asynchronous execution of
code to process large amounts of requests coming to our back-ends. With
the separation of our codebase to microservices, we can quickly try new
tools and different approaches to process these large volumes of
requests. The …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Kiwi.com we heavily rely on task queues and asynchronous execution of
code to process large amounts of requests coming to our back-ends. With
the separation of our codebase to microservices, we can quickly try new
tools and different approaches to process these large volumes of
requests. The microservice we’ll be talking about is making unreliable
slow 3rd party services reliable and asynchronous with a bit of business
logic sprinkled on top of it. We’ll tell a failure story of ours but
resulting in a valuable lesson.&lt;/p&gt;
&lt;p&gt;Most of our services use Celery and it’s the go-to tool for new services
as well but we wanted to be different with this new microservice. RQ is
the next best choice for task queues and it is presented as simpler and
more straightforward than Celery. That can definitely be true but after
3 weeks of research, development and struggling we found out the
unpleasant truth about being simple and making the right choices. We
won’t talk about comparing the frameworks but rather about the approach
on how to experiment with new things in your environment. After that,
we’ll present our current setup which can take upon any number of
tasks*. How we orchestrate the app and continuously integrate and
deploy and what fun things await ahead of us in the development.&lt;/p&gt;
&lt;p&gt;*Conditions may apply.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="ASYNC / Concurrency"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Case Study"></category><category term="failures/mistakes"></category></entry><entry><title>Wait, IPython can do that?!</title><link href="https://pyvideo.org/europython-2019/wait-ipython-can-do-that.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/wait-ipython-can-do-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks that IPython could do: embedding IPython sessions,
starting IPython automatically when a test fails, taking advantage of
the startup files, not to mention all the various magic functions.&lt;/p&gt;
&lt;p&gt;It took me some time to discover all those features (if there is one
thing I would like you to take away from this talk, it’s that reading
the documentation of a tool that you are using &lt;em&gt;every day&lt;/em&gt; is probably a
good idea) and in this talk, I will give an overview of what you can do
with IPython REPL.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the things I will talk about:&lt;/div&gt;
&lt;div class="line"&gt;- Documentation with ? and ??, running shell functions in IPython,
magic functions&lt;/div&gt;
&lt;div class="line"&gt;- Profiles, startup files, configuration file, kernels, and extensions&lt;/div&gt;
&lt;div class="line"&gt;- How to better use IPython for debugging&lt;/div&gt;
&lt;div class="line"&gt;- How to use IPython for profiling&lt;/div&gt;
&lt;div class="line"&gt;- Alternatives to IPython REPL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk is for you if you are a casual user of IPython - you know some
of its features, but maybe not all of them and instead of reading
through the documentation, you would prefer to see someone giving an
overview of IPython features and how you can use them.&lt;/p&gt;
&lt;p&gt;This talk is NOT for you if you are up to date with IPython
documentation and you think you know most of its features.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Development"></category><category term="Ipython"></category><category term="Tooling"></category><category term="iPython"></category></entry><entry><title>Automate your tasks with Python and publish with Chat Apps</title><link href="https://pyvideo.org/europython-2020/automate-your-tasks-with-python-and-publish-with-chat-apps.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Anton Chernikov</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/automate-your-tasks-with-python-and-publish-with-chat-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;That’s the way to build a Virtual Assistant for your team, the way to boost productivity.&lt;/p&gt;
&lt;p&gt;The technology is to take script written in a high-level language (Python), analyze its inputs/outputs, images or graphs display, other interactions with the user and build connectors to this script from …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;That’s the way to build a Virtual Assistant for your team, the way to boost productivity.&lt;/p&gt;
&lt;p&gt;The technology is to take script written in a high-level language (Python), analyze its inputs/outputs, images or graphs display, other interactions with the user and build connectors to this script from Chat Apps like Slack, Skype, and others. Imagine that you described your skill as a script and gave it to a software robot. And from that moment it is his skill, you and your colleagues can ask him any time to run this skill and give results. As a script author, you don't think about how to connect with different Chat Apps, how to control access, how to monitor that script works fine when colleagues run it, how to save logs, how to balance load if there are too many colleagues running script and so on, our platform does all of this so the author doesn't need to think about what is that software robot, how it works, the platform will understand script by itself. The author just drop script to the platform and tell to the platform which colleagues have the right to run this script.&lt;/p&gt;
&lt;p&gt;For whom?&lt;/p&gt;
&lt;p&gt;For teams who are in charge of Servers, Applications, API's, Data Bases, Analytical reports and other information technology items.&lt;/p&gt;
&lt;p&gt;For tasks like&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;to fetch diagnostic information from multiple data sources into Chat App, gather metrics/logs and analyzing them&lt;/li&gt;
&lt;li&gt;to take an action in case of incident right from a Chat App, rerouting users requests, server rebooting, launching new instances, and many other actions&lt;/li&gt;
&lt;li&gt;to give easy access via Chat App to APIs for team members and other coleagues&lt;/li&gt;
&lt;li&gt;to provide analytical reports by the request from Chat App, reports with graphs, images, tables, files, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;These things are trivial to automate and share, you can do much more with Python, Chat App and smart script sharing platform.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Community"></category><category term="Operations"></category><category term="Workforce"></category><category term="python"></category></entry><entry><title>Can we deploy yet?</title><link href="https://pyvideo.org/europython-2020/can-we-deploy-yet.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/can-we-deploy-yet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code production ready&lt;/p&gt;
&lt;p&gt;What happens when your features are done, your MVP is ready and you want to deploy your first production build? What do you do then? How do you make your first production build instead of re-using your development one? is your code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code production ready&lt;/p&gt;
&lt;p&gt;What happens when your features are done, your MVP is ready and you want to deploy your first production build? What do you do then? How do you make your first production build instead of re-using your development one? is your code ready to handle real user interactions?
This talk will show a production ready checklist for your Python code; what to look for when creating a production-ready Docker image; what are the differences between development and production environments and builds.
You will see how to deal with exceptions, logs, and metrics with real-world use cases.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Development"></category><category term="Documentation"></category></entry><entry><title>Cultivating a Culture of Creativity, Collaboration, and Captainship</title><link href="https://pyvideo.org/europython-2020/cultivating-a-culture-of-creativity-collaboration-and-captainship.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Amber Vanderburg</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/cultivating-a-culture-of-creativity-collaboration-and-captainship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my work as a consultant, coach, and organizational leader- I work with amazing companies around the world, helping them craft and implement strategies to build high-performing teams.&lt;/p&gt;
&lt;p&gt;And when I work with these teams, I notice that there are two factors that make all the difference between a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my work as a consultant, coach, and organizational leader- I work with amazing companies around the world, helping them craft and implement strategies to build high-performing teams.&lt;/p&gt;
&lt;p&gt;And when I work with these teams, I notice that there are two factors that make all the difference between a good organization and one that is changing the world.&lt;/p&gt;
&lt;p&gt;The first is having a culture of collaboration – and this means collaboration across individuals, across departments, and across teams – really - it’s a culture that’s less about competition and cutthroat political systems.. And more about helping each other achieve the extraordinary.&lt;/p&gt;
&lt;p&gt;The second quality is organizations that treat and expect their employees to act like owners. Owning not just their behaviors, actions, and responsibilities, but owning outcomes and becoming a voice for the organization.&lt;/p&gt;
&lt;p&gt;No matter where your organization is at today, the good news is– there are proven strategies to create a culture of collaborative ownership at your organization and that’s what I’m going to teach you in this course.&lt;/p&gt;
&lt;p&gt;I’ll share how you can build momentum from a carefully crafted vision and goals, I’ll help you improve communication and drive ownership, I’ll help you foster creativity, and finally, I’ll help you train up leaders in your organization and help you meet more of your goals.&lt;/p&gt;
&lt;p&gt;So, if you’re ready to transform your organization. let’s go!&lt;/p&gt;
&lt;p&gt;LEARNING OBJECTIVES:&lt;/p&gt;
&lt;p&gt;Attendees will learn: How to transform a command-obey dynamic to one of creativity and innovation through opportunities for ownership. How to collaborate with opportunities for ownership through proven methods to increase connectivity and engagement in the team. How to foster captainship within your organization. How to apply the ideas of collaborative ownership specifically in individual organizations.&lt;/p&gt;
&lt;p&gt;SESSION OUTLINE: Fostering an Ownership Culture (Creativity and Innovation)- Ownership Activity -Fostering a Collaborative Culture- Collaborative Activity - Fostering Captainship Culture - Captainship activity- The Application of Collaborative Ownership for Personal and Organizational Success- Applying Collaborative Ownership to Organizations and Self Activity -Conclusion Q&amp;amp;A&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Agile"></category><category term="Best Practice"></category><category term="Business"></category><category term="Community"></category><category term="DevOps general"></category></entry><entry><title>Effective Code Reviews</title><link href="https://pyvideo.org/europython-2020/effective-code-reviews.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Vinicius Gubiani Ferreira</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/effective-code-reviews.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The edge between hard skills and soft skills&lt;/p&gt;
&lt;p&gt;Does your company uses code review? In this talk I will demonstrate why it should start using them immediately, share the many benefits and situations we've gone through, besides good practices that should be used for effective code reviews, that add …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The edge between hard skills and soft skills&lt;/p&gt;
&lt;p&gt;Does your company uses code review? In this talk I will demonstrate why it should start using them immediately, share the many benefits and situations we've gone through, besides good practices that should be used for effective code reviews, that add quality to the product/service that is being delivered.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Agile"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Communication"></category></entry><entry><title>Extending HTTP for fun and non-profit</title><link href="https://pyvideo.org/europython-2020/extending-http-for-fun-and-non-profit.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/extending-http-for-fun-and-non-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My journey into the IETF HTTP workgroup&lt;/p&gt;
&lt;p&gt;Writing API guidelines is a best practice for standardizing APIs produced by thousands of service provider, but what happens when those rules are not backed by internet standards?&lt;/p&gt;
&lt;p&gt;This talk proposes an iterative strategy for identify and standardize inside IETF key features …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My journey into the IETF HTTP workgroup&lt;/p&gt;
&lt;p&gt;Writing API guidelines is a best practice for standardizing APIs produced by thousands of service provider, but what happens when those rules are not backed by internet standards?&lt;/p&gt;
&lt;p&gt;This talk proposes an iterative strategy for identify and standardize inside IETF key features of your API guidelines.
The steps includes feature landscaping, stakeholder identification and engagement, prototyping and writing an actual internet-draft.&lt;/p&gt;
&lt;p&gt;The strategy is shown using two examples:
- rewriting of &lt;cite&gt;Digest&lt;/cite&gt; header RFC3230 adding clarifications useful for implementors;
- proposing new &lt;cite&gt;RateLimit&lt;/cite&gt; headers and engage with implementors (Microsoft, Red Hat, Kong, ..).&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Best Practice"></category><category term="Case Study"></category><category term="Community"></category><category term="HTTP"></category></entry><entry><title>Flasync Await</title><link href="https://pyvideo.org/europython-2020/flasync-await.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>David Bordeynik</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/flasync-await.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is all the rage, mostly because it simplifies waiting for an operation that takes some time to finish. Python went all in on asyncio by changing the language to support it (async/await) iIn this microservices era where many of the applications we develop consume several 3rd party …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is all the rage, mostly because it simplifies waiting for an operation that takes some time to finish. Python went all in on asyncio by changing the language to support it (async/await) iIn this microservices era where many of the applications we develop consume several 3rd party API services, async is the fast track to success. In this talk, I’ll demonstrate the benefits of going async for a web application, justify choosing Sanic over other web frameworks like aiohttp. I’ll do so by transforming a Flask backed application to a Sanic backed application. Finally, I’ll provide tips &amp;amp; tricks from my experience on measuring, monitoring and testing async code.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Abstractions"></category><category term="Best Practice"></category><category term="Web"></category></entry><entry><title>How to Avoid Becoming a 10x Engineer</title><link href="https://pyvideo.org/europython-2020/how-to-avoid-becoming-a-10x-engineer.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Ivana Kellyerova</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/how-to-avoid-becoming-a-10x-engineer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why you should ignore advice by random internet people, by a random internet person&lt;/p&gt;
&lt;p&gt;The internet has never failed at being, among other things, a giant treasure of unsolicited advice by random people on all sorts of things, programming being no exception. Wanna become a better coder? Learn to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why you should ignore advice by random internet people, by a random internet person&lt;/p&gt;
&lt;p&gt;The internet has never failed at being, among other things, a giant treasure of unsolicited advice by random people on all sorts of things, programming being no exception. Wanna become a better coder? Learn to maximize your WPM (c). Never look at documentation because that's just embarrassing. And for crying out loud, change your screen background to black!&lt;/p&gt;
&lt;p&gt;So there you are, a fairly okay programmer, looking for ways to become better at coding. How do you achieve that? Well I'm no 10x engineer myself (thank goodness), but I do believe that there's a handful of things we can safely rule out.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Programming"></category><category term="The Answer to Life the Universe and Everything Else"></category></entry><entry><title>How to write multi-paradigm code</title><link href="https://pyvideo.org/europython-2020/how-to-write-multi-paradigm-code.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Elias Mistler</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/how-to-write-multi-paradigm-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;... without making a mess&lt;/p&gt;
&lt;p&gt;Python is a powerful multi-paradigm language which combines elements of object-orientation and functional programming. Both concepts can be really powerful if used right. But what if you use them together? It can be pragmatic and very efficient, but things can also get messy really quickly …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;... without making a mess&lt;/p&gt;
&lt;p&gt;Python is a powerful multi-paradigm language which combines elements of object-orientation and functional programming. Both concepts can be really powerful if used right. But what if you use them together? It can be pragmatic and very efficient, but things can also get messy really quickly.&lt;/p&gt;
&lt;p&gt;This talk explores peaceful co-existence of oo-classes and pure functions in the same code base. The focus is on identifying the right tool for the right job and bringing together the best of both. The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code Structure&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;State Handling&lt;/li&gt;
&lt;li&gt;Multiple implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prerequisites:
There are no formal prerequisites for this course, although it is recommended that participants have a strong background in Python and its code structuring mechanisms, as well as a deep understanding of at least one of the paradigms of OOP and FP.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Functional Programming"></category></entry><entry><title>Migrating codebases with millions of modules from Python 2 to Python 3</title><link href="https://pyvideo.org/europython-2020/migrating-codebases-with-millions-of-modules-from-python-2-to-python-3.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Francisco Passos</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/migrating-codebases-with-millions-of-modules-from-python-2-to-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This has been mitigated with tooling and education, but for the most part it requires human action and decision. While most codebases have somewhere between tens and thousands of Python modules, some companies may maintain a codebase with millions of modules. This presentation covers techniques and tooling that Google …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This has been mitigated with tooling and education, but for the most part it requires human action and decision. While most codebases have somewhere between tens and thousands of Python modules, some companies may maintain a codebase with millions of modules. This presentation covers techniques and tooling that Google created to enable the developers to scope their migration needs, plan the work required, execute effectively at scale and collaborate across teams/dependencies.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Python 2"></category><category term="Python 3"></category></entry><entry><title>Overcoming access control in web APIs</title><link href="https://pyvideo.org/europython-2020/overcoming-access-control-in-web-apis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Adam Hopkins</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/overcoming-access-control-in-web-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a modern single-page application. Not all APIs are the same, so we will explore different considerations to make when crafting a solution to handle token-based authentication, and scoping to define access levels.&lt;/p&gt;
&lt;p&gt;As one of the core developers of the async web framework Sanic, I will primarily focus on authentication and authorization tools inside Sanic to showcase how to address these issues. However, the concepts should be broadly applicable enough to take back and apply to any web API. The goal is to learn the hot spots, and identify strategies to overcome them.&lt;/p&gt;
&lt;p&gt;Core take aways will include:
- how to implement various JWT strategies;
- best practices for storing JWTs on a browser; and
- controlling access privileges using structured scopes.&lt;/p&gt;
&lt;p&gt;Time permitting, we will even discuss some tools to be used to help ease the anxiety and make security more approachable.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Authentication"></category><category term="Best Practice"></category><category term="RESTful"></category><category term="Web"></category></entry><entry><title>Practical Optimisations for Pandas</title><link href="https://pyvideo.org/europython-2020/practical-optimisations-for-pandas.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Eyal Trabelsi</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/practical-optimisations-for-pandas.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing performant pandas code is not an easy task, in this talk I will explain how to find the bottlenecks and how to write proper code with computational efficiency, and memory optimisation in mind.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Data"></category><category term="Data Science"></category></entry><entry><title>Python Memory Management 101</title><link href="https://pyvideo.org/europython-2020/python-memory-management-101.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>J.M. Ortega</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/python-memory-management-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deeping in Garbage collector&lt;/p&gt;
&lt;p&gt;I will review the main mechanims&amp;nbsp;for memory allocation and how the garbage collector works in conjunction with the memory manager for reference counting of the python objects.Finally, I will comment the best practices for memory managment&amp;nbsp;such as writing efficient code.&lt;/p&gt;
&lt;p&gt;These could …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deeping in Garbage collector&lt;/p&gt;
&lt;p&gt;I will review the main mechanims&amp;nbsp;for memory allocation and how the garbage collector works in conjunction with the memory manager for reference counting of the python objects.Finally, I will comment the best practices for memory managment&amp;nbsp;such as writing efficient code.&lt;/p&gt;
&lt;p&gt;These could be the main talking points:
-Introduccition&amp;nbsp;to memory management
-Garbage collector and reference counting with python
-Review the gc module for configuring the python garbage collector
-Best practices for memory managment&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Development"></category><category term="Management"></category><category term="Python Skills"></category></entry><entry><title>Python Table Manners: Cut the Cookie Gracefully</title><link href="https://pyvideo.org/europython-2020/python-table-manners-cut-the-cookie-gracefully.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Wei Lee</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/python-table-manners-cut-the-cookie-gracefully.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Guideline Toward Cleaner Code&lt;/p&gt;
&lt;p&gt;### Goals
I expect the audiences to gain knowledge of the tools I mention and the primary usage of them. The tools will cover various aspects of software engineering (e.g., dependencies, testing, security, etc.). Also, I'll purpose how I combine all these tools in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Guideline Toward Cleaner Code&lt;/p&gt;
&lt;p&gt;### Goals
I expect the audiences to gain knowledge of the tools I mention and the primary usage of them. The tools will cover various aspects of software engineering (e.g., dependencies, testing, security, etc.). Also, I'll purpose how I combine all these tools in my development workflow as a sample for how the audiences can integrate these tools into their workflow.&lt;/p&gt;
&lt;p&gt;### Outline for 30 minutes
* Dependency Management (4 min)
* Testing - Don't let your customer debug for you (4 min)
* Style Check and auto-fix (4 min)
* Task Management - No more repetitive typing (3 min)
* pre-commit - Prevent committing bad code into codebase (3 min)
* commitizen-tool - How good commit message can help (4 min)
* Security (3 min)
* Cookiecutter - Wrap up all the tools (3 min)
* Q &amp;amp; A (2 min)&lt;/p&gt;
&lt;p&gt;### Outline for 45 minutes
* Dependency Management (5 min)
* Testing - Don't let your customer debug for you (5 min)
* Style Check and auto-fix (5 min)
* Task Management - No more repetitive typing (5 min)
* pre-commit - Prevent committing bad code into codebase (5 min)
* commitizen-tool - How good commit message can help (5 min)
* Security (5 min)
* Continuous Integration - Assemble all the trivial steps (5 min)
* Cookiecutter - Wrap up all the tools (3 min)
* Q &amp;amp; A (2 min)&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="General"></category><category term="Programming"></category><category term="Tooling"></category></entry><entry><title>Real Time Stream Processing for Machine Learning at Massive Scale</title><link href="https://pyvideo.org/europython-2020/real-time-stream-processing-for-machine-learning-at-massive-scale.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alejandro Saucedo</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/real-time-stream-processing-for-machine-learning-at-massive-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Massively Parallel Stream of Data with Python (+ Kafka, SKlearn, SpaCy and Seldon)&lt;/p&gt;
&lt;p&gt;This talk will provide a practical insight on how to build scalable data streaming machine learning pipelines to process large datasets in real time using Python and popular frameworks such as Kafka, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Massively Parallel Stream of Data with Python (+ Kafka, SKlearn, SpaCy and Seldon)&lt;/p&gt;
&lt;p&gt;This talk will provide a practical insight on how to build scalable data streaming machine learning pipelines to process large datasets in real time using Python and popular frameworks such as Kafka, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We will be covering a case study performing automated content moderation on Reddit comments in real time. Our dataset will consist of 200k reddit comments from /r/science, 50,000 of which have been removed by moderators. We will be handling the stream data in a Kubernetes cluster, and the stream processing will be handled using the stream processing library Kafka. We will be running the end-to-end pipeline in Kubernetes with various components legeraging SKLearn, SpaCy and Seldon.&lt;/p&gt;
&lt;p&gt;We will then dive into fundamental concepts on stream processing such as windows, watermarking and checkponting, and we will show how to use each of these frameworks to build complex data streaming pipelines that can perform real time processing at scale by building, deploying and monitoring a machine learning model which will process production incoming data..&lt;/p&gt;
&lt;p&gt;Finally we will show best practices when using these frameworks, as well as a high level overview of tools that can be used for monitoring in-depth.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Best Practice"></category><category term="Big Data"></category><category term="Distributed Systems"></category><category term="Scientific Libraries (Numpy/Pandas/SciKit/...)"></category></entry><entry><title>Sharing Reproducible Python Environments with Binder</title><link href="https://pyvideo.org/europython-2020/sharing-reproducible-python-environments-with-binder.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Sarah Gibson</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/sharing-reproducible-python-environments-with-binder.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As reproducibility gains traction in the data science and research communities, the need to package code, data and the computational environment is growing.&lt;/p&gt;
&lt;p&gt;There are many tools that address different aspects of this type of packaging, such as Jupyter Notebooks for literate programming, Docker for containerising and porting computational …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As reproducibility gains traction in the data science and research communities, the need to package code, data and the computational environment is growing.&lt;/p&gt;
&lt;p&gt;There are many tools that address different aspects of this type of packaging, such as Jupyter Notebooks for literate programming, Docker for containerising and porting computational environments, and so on. But they represent barriers to reproducibility as each one requires time and effort to learn.&lt;/p&gt;
&lt;p&gt;Project Binder integrates Notebooks and Docker for generating reproducible computational analyses and combines them with a web-based interface and cloud orchestration engines. This means that analysts do not have to worry about all the moving parts so long as they have followed basic software best practices: their code is version controlled and they've captured the dependencies the analysis needs to run. Binder then hosts the compute in the cloud and makes it easily shareable by providing a unique URL to the code repository, without imposing additional overheads on the analyst.&lt;/p&gt;
&lt;p&gt;During this talk, Sarah will introduce Binder (the service), BinderHub (the technological infrastructure) and mybinder.org (a public instance of a Binder service, free for anyone to use) and demonstrate how it can be used to share Python environments and analyses.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Data Science"></category><category term="Jupyter"></category><category term="Open-Source"></category><category term="Public Cloud (AWS/Google/...)"></category></entry><entry><title>Tests that (Almost) Write Themselves</title><link href="https://pyvideo.org/europython-2020/tests-that-almost-write-themselves.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Stefan Baerisch</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/tests-that-almost-write-themselves.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hints for Golden Master Testing in Python&lt;/p&gt;
&lt;p&gt;What do we do when the only test requirements we have are &amp;quot;the new system should have the exact same results as the old system&amp;quot;? Golden Master Testing may help.
The idea behind golden master testing, also called characterization testing, is quite …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hints for Golden Master Testing in Python&lt;/p&gt;
&lt;p&gt;What do we do when the only test requirements we have are &amp;quot;the new system should have the exact same results as the old system&amp;quot;? Golden Master Testing may help.
The idea behind golden master testing, also called characterization testing, is quite simple: We don't write test cases that specify what the expected result is. Instead, we take the output from a prior, working version of a program (the golden master) and compare it to the result of the current version. If there is a difference between the output of the current system and the golden master, we may have found a bug.&lt;/p&gt;
&lt;p&gt;If implemented right, Golden Master testing can be very useful to test legacy systems or data processing programs with complex input and outputs. Golden Master Testing is also a good addition to our regression testing processes.&lt;/p&gt;
&lt;p&gt;In practice, implementing Golden Master testing is not quite that easy.  Just checking if the outputs are equal will often not work: If the output includes times and dates or random elements, a simple comparison will not be enough. Luckily for use, with Python, we have the perfect tool to process all kinds of outputs and only look at the parts of the output that are important for the outcome of the test.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at best practices for Golden Master Testing with Python. We will see techniques to identify and quantify the relevant differences between our golden master and the current output.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="Tooling"></category></entry><entry><title>The joy of deleting code</title><link href="https://pyvideo.org/europython-2020/the-joy-of-deleting-code.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Radosław Ganczarek</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/the-joy-of-deleting-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to apply YAGNI to practice&lt;/p&gt;
&lt;p&gt;They say measuring code quality by its LOC is like measuring aircraft quality by its weight. There's a lot of sense in the metaphor, as we often call inefficient code with words like &amp;quot;heavy&amp;quot; or &amp;quot;bloated&amp;quot;.
In my talk I'll tell you about …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to apply YAGNI to practice&lt;/p&gt;
&lt;p&gt;They say measuring code quality by its LOC is like measuring aircraft quality by its weight. There's a lot of sense in the metaphor, as we often call inefficient code with words like &amp;quot;heavy&amp;quot; or &amp;quot;bloated&amp;quot;.
In my talk I'll tell you about my approach to deleting unneeded code, tools that could help you and how did it turned out in the end in real world projects.
As you probably know, detecting unused code automatically is a hard task and doing it in Python is exceptionally hard because we sometimes call methods with getattr or write classes which are only used in non-python configuration files. Tools give us only a partial success. What you could do beyond them? What approach to take? I'd like to discuss it in detail in my talk.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Architecture"></category><category term="Best Practice"></category><category term="Clean Code"></category><category term="Code Analysis"></category><category term="Programming"></category></entry><entry><title>We have nearly one million lines of Python 2 code in production – and now?</title><link href="https://pyvideo.org/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Michael Howitz</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Porting a rather large code base to Python 3 – lessons learned usable for projects of any size&lt;/p&gt;
&lt;p&gt;In this talk I am going to present possible approaches for a Python 3 migration of existing Python code running on Python 2.7. I'll evaluate which of these approaches seems suitable …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Porting a rather large code base to Python 3 – lessons learned usable for projects of any size&lt;/p&gt;
&lt;p&gt;In this talk I am going to present possible approaches for a Python 3 migration of existing Python code running on Python 2.7. I'll evaluate which of these approaches seems suitable for a large code base and which principles should be paid attention to to increase the probability of a successful migration project.&lt;/p&gt;
&lt;p&gt;I'll use union.cms (a content management system used by German trade unions) to show the story of a successful migration project involving nearly one million lines of Python code. The story will include the obstacles we encountered and what we learned on the way.&lt;/p&gt;
&lt;p&gt;I believe that most of the discussed ideas and experience can also be used unchanged in smaller projects as the presented principles are very much the same.&lt;/p&gt;
&lt;p&gt;Goal of the presentation: You should be able to come up with a plan for migrating your Python 2 based projects to Python 3.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Development"></category><category term="Python 2"></category><category term="Python 3"></category><category term="legacy-code"></category></entry><entry><title>Writing and Scaling Collaborative Data Pipelines with Kedro</title><link href="https://pyvideo.org/europython-2020/writing-and-scaling-collaborative-data-pipelines-with-kedro.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Tam-Sanh Nguyen</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-and-scaling-collaborative-data-pipelines-with-kedro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to get your Data Scientists and Data Engineers to play nice, both now and in the future.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce data pipeline developers to QuantumBlack's approach for keeping data pipelines healthy and sustainable and facilitating collaboration between data scientists and data engineers by …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to get your Data Scientists and Data Engineers to play nice, both now and in the future.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce data pipeline developers to QuantumBlack's approach for keeping data pipelines healthy and sustainable and facilitating collaboration between data scientists and data engineers by using our open source framework, Kedro. Attendees need between novice and intermediate knowledge of Python (enough to understand syntactic sugar and funargs) in order to appreciate this talk.&lt;/p&gt;
&lt;p&gt;As data continues to inform more and more business strategy, high quality, fully featured data pipelines have never been more critical. Small data scripts and single-coder science projects are not enough to keep up with the pace of day-to-day business and their ever-growing list of requirements. Now, more than ever, we need data engineers and data scientists to collaborate effectively. Yet, these two parties come with inherently competing needs.&lt;/p&gt;
&lt;p&gt;Data scientists need high data volatility and parameterization, for experimentation, and data engineers, on the other hand, need stability and performance, to deliver data. Furthermore, as pipelines grow, the cost of knowledge transfer and training new team members also increases. How can we get scientists and engineers to work well together, and sustain pipeline growth as the team also grows?&lt;/p&gt;
&lt;p&gt;For this, QuantumBlack created Kedro, a framework for writing data pipelines that addresses both the needs for flexibility and stability in its features and patterns of use. By using Kedro’s tools and operating model, we have enabled our teams to scale our single-developer, micro-pipes to industrial sized data processors with dozens of developers; all without sacrificing readability, quality, or stability. This talk will show you how.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Data"></category><category term="Development"></category><category term="Open-Source"></category><category term="python"></category></entry><entry><title>Writing Good Python</title><link href="https://pyvideo.org/europython-2020/writing-good-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Prashant Chaubey</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-good-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like other programming languages, it is easy to write cryptic, unmaintainable, and rigid Python code. Moreover, in teams, this problem escalates due to varied coding styles of developers. How to ensure code quality and consistency? My goal with this talk is to educate my audience about some tools and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like other programming languages, it is easy to write cryptic, unmaintainable, and rigid Python code. Moreover, in teams, this problem escalates due to varied coding styles of developers. How to ensure code quality and consistency? My goal with this talk is to educate my audience about some tools and libraries that can help us in making our code more consistent.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Code Analysis"></category><category term="Documentation"></category><category term="Static Analysis"></category><category term="Type-Hinting"></category></entry><entry><title>Addestramento d'emergenza alla fase di Discovery per sviluppatori frustrati</title><link href="https://pyvideo.org/pycon-italia-2022/addestramento-demergenza-alla-fase-di-discovery-per-sviluppatori-frustrati.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Gabriele Giaccari</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/addestramento-demergenza-alla-fase-di-discovery-per-sviluppatori-frustrati.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Addestramento d’emergenza alla fase di Discovery per sviluppatori
frustrati - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Quante notti avete passato a produrre codice ‘importantissimo’ poi mai
andato in produzione? E la vostra idea di app del secolo che non ha mai
portato a nulla? Quanti soldi buttati per produrre software mai
utilizzato …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Addestramento d’emergenza alla fase di Discovery per sviluppatori
frustrati - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Quante notti avete passato a produrre codice ‘importantissimo’ poi mai
andato in produzione? E la vostra idea di app del secolo che non ha mai
portato a nulla? Quanti soldi buttati per produrre software mai
utilizzato? Troppi. Ma non deve andare per forza così,e la chiave è in
una parola: Discovery! Come programmatori, tutti noi abbiamo provato la
frustrazione di lavorare col massimo dell’impegno su software che poi
nella migliore delle ipotesi non hanno prodotto i risultati sperati, e
nella peggiore non sono neanche mai andati in produzione. Giorni (e
quindi soldi) buttati a realizzare cose che non andavano fatte, a
sviluppare “requisiti” imposti dall’alto senza capirne il contesto.
Usarci come ingranaggi in una fabbrica di funzionalità, invece che come
specialisti di team che puntino a risolvere dei problemi ed avere un
impatto reale sul mondo, è uno spreco senza precedenti. Scrivere codice
nel modo corretto, fare i test, impostare pipeline di Continuous
Integration è solo una parte del nostro lavoro, ma se quel codice in
primis non andava neanche scritto, sarà tutto inutile. Da parecchi anni
ormai sono nate metodologie e strumenti che aiutano a risolvere questo
problema, dal Design Thinking al Lean Startup, l’Impact Mapping o
l’Opportunity Solution Tree. Non è una roba solo da Designer o Product
Manager, gli sviluppatori devono essere i protagonisti di questo
processo cosiddetto di Discovery anche se spesso se ne tengono alla
larga. Questo addestramento è diviso in 3 mini lezioni di 10 minuti, per
definire il contesto, la teoria e la pratica di questa fase, con
l’obiettivo di dare gli strumenti e qualche spunto per iniziare questa
piccola rivoluzione, a livello personale e di team.&lt;/p&gt;
&lt;p&gt;Speaker: Gabriele Giaccari&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="agile"></category><category term="best practice"></category><category term="communication"></category></entry><entry><title>Back to Basics: Revisiting Basics with few Tips and Tricks in Python3.10v!</title><link href="https://pyvideo.org/pycon-italia-2022/back-to-basics-revisiting-basics-with-few-tips-and-tricks-in-python310v.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Gaurav Pandey</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/back-to-basics-revisiting-basics-with-few-tips-and-tricks-in-python310v.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Back to Basics: Revisiting Basics with few Tips and Tricks in
Python3.10v! - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;This talk is aimed at NewBie Python Programmers as well as Professional
Python Programmers to revise Python Basics and make fundamentals strong
for NewBie. During this talk, I’ll be revisiting Python Basics …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Back to Basics: Revisiting Basics with few Tips and Tricks in
Python3.10v! - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;This talk is aimed at NewBie Python Programmers as well as Professional
Python Programmers to revise Python Basics and make fundamentals strong
for NewBie. During this talk, I’ll be revisiting Python Basics with a
few Tips and Tricks and what’s new in Python3.10v. This talk is aimed at
NewBie Python Programmers as well as Professional Python Programmers to
revise Python Basics and make fundamentals strong for NewBie with new
end exciting features in Python3.10v. During this talk, I’ll be
revisiting Python Basics with a few Tips and Tricks. The talk is for
little experienced Python 3 programmers who have written a few lines of
code: Python experience is required. You can consider this talk as a
teaser of Python 3 features that you may have never used yet.&lt;/p&gt;
&lt;p&gt;After this talk, I hope you’ll be inspired to use these Tips and Tricks
in Python3.10v and make your fundamentals strong.&lt;/p&gt;
&lt;p&gt;Python3.10v comes with a few new features and for that Python3
fundamentals need to be strong, and in this talk, I’ll be covering
Important Basics on Python, you will learn everything about Python3.10v!&lt;/p&gt;
&lt;p&gt;Python3.10 is pretty simple to understand, but it also comes with a lot
of different code syntax options you can use. In this talk, I’ll be
going to have a look at all of them. We start with the basic syntax and
then move on to all the different syntaxes.&lt;/p&gt;
&lt;p&gt;Speaker: Gaurav Pandey&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="clean code"></category><category term="debugging"></category><category term="documentation"></category><category term="education"></category></entry><entry><title>Continuous Documentation for your Python code</title><link href="https://pyvideo.org/pycon-italia-2022/continuous-documentation-for-your-python-code.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Anastasiia Tymoshchuk</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/continuous-documentation-for-your-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous Documentation for your Python code - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Do you document your code? Do you think it is important? Imagine that
you need to get back to your code in 6 month after you wrote it, there
is always a big possibility that you will have to spend …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous Documentation for your Python code - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Do you document your code? Do you think it is important? Imagine that
you need to get back to your code in 6 month after you wrote it, there
is always a big possibility that you will have to spend some time to
find out how this code works. This talk will tell you a secret trick
about documentation. Do you document your code? Do you think it is
important?&lt;/p&gt;
&lt;p&gt;Imagine that you need to get back to your code in 6 month after you
wrote it, there is always a big possibility that you will have to spend
some time to find out how this code works. Or if someone else wrote some
code, which is already in production and your task is to fix a bug in it
and there is no documentation and no one actually knows what this code
does.&lt;/p&gt;
&lt;p&gt;There are more benefits of implementing continuous documentation for the
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;easy to onboard new team members,&lt;/li&gt;
&lt;li&gt;easy to share knowledge,&lt;/li&gt;
&lt;li&gt;if this code is open source - easy to start contributing,&lt;/li&gt;
&lt;li&gt;easy to see purpose and motivation of each piece of code,&lt;/li&gt;
&lt;li&gt;easy to keep versioning for each new release of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It this talk I will show the difference between documentation types and
will show a demo in the end of the talk.&lt;/p&gt;
&lt;p&gt;Speaker: Anastasiia Tymoshchuk&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="documentation"></category></entry><entry><title>Django with PostgreSQL superpowers</title><link href="https://pyvideo.org/pycon-italia-2022/django-with-postgresql-superpowers.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/django-with-postgresql-superpowers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django with PostgreSQL superpowers - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt; per se is a &lt;em&gt;database-agnostic&lt;/em&gt; web framework, but
&lt;em&gt;real-world projects&lt;/em&gt; based on it are not. &lt;strong&gt;PostgreSQL&lt;/strong&gt; has the
&lt;em&gt;richest feature set&lt;/em&gt; of any supported databases and we’ll see how to
use these &lt;strong&gt;superpowers&lt;/strong&gt; in &lt;em&gt;Django&lt;/em&gt;. Every time we’re going …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django with PostgreSQL superpowers - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt; per se is a &lt;em&gt;database-agnostic&lt;/em&gt; web framework, but
&lt;em&gt;real-world projects&lt;/em&gt; based on it are not. &lt;strong&gt;PostgreSQL&lt;/strong&gt; has the
&lt;em&gt;richest feature set&lt;/em&gt; of any supported databases and we’ll see how to
use these &lt;strong&gt;superpowers&lt;/strong&gt; in &lt;em&gt;Django&lt;/em&gt;. Every time we’re going to create
a new project with &lt;strong&gt;Django&lt;/strong&gt; we make assessments on its requirements to
choose the best architecture, of which, the &lt;strong&gt;database&lt;/strong&gt; is usually the
core.&lt;/p&gt;
&lt;p&gt;Django is a &lt;em&gt;database-agnostic&lt;/em&gt; web framework but natively supports only
4 &lt;strong&gt;Open Source databases&lt;/strong&gt;: PostgreSQL, SQLite, MariaDB and MySQL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt; has the &lt;em&gt;richest feature set&lt;/em&gt; of any supported database
and some of these features are natively supported directly in Django via
its contrib module.&lt;/p&gt;
&lt;p&gt;In this talk we’ll see how to use to our &lt;em&gt;advantage&lt;/em&gt; the features of
PostgreSQL as a database in Django, its exclusive features present in
its &lt;em&gt;contrib module&lt;/em&gt; and also other superpowers that can be exploited
through the use of &lt;em&gt;third-party packages&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;More info&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slide&lt;/strong&gt; and more &lt;strong&gt;information&lt;/strong&gt; on the talk on [&lt;/p&gt;
&lt;p&gt;Speaker: Paolo Melchiorre&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="django"></category><category term="postgresql"></category></entry><entry><title>Efficient ML pipelines using Parquet and PyArrow</title><link href="https://pyvideo.org/pycon-italia-2022/efficient-ml-pipelines-using-parquet-and-pyarrow.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Ingargiola</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/efficient-ml-pipelines-using-parquet-and-pyarrow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Efficient ML pipelines using Parquet and PyArrow - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Parquet is an high-performance columnar data format that has become the
de facto standard in the ML world. By leveraging the powerful PyArrow
API, I’ll show how to manage parquet datasets, ranging from a single
local file to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Efficient ML pipelines using Parquet and PyArrow - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Parquet is an high-performance columnar data format that has become the
de facto standard in the ML world. By leveraging the powerful PyArrow
API, I’ll show how to manage parquet datasets, ranging from a single
local file to a partitioned cloud-based dataset updated in real time.
Advanced analytics and Machine Learning (ML) are increasingly used to
drive business decisions or provide real-time services for end-users in
virtually every industry. Tabular data is the most ubiquitous type of
data. Therefore, efficient processing of handle tabular datasets is a
critical requirement to deliver performant products or services.&lt;/p&gt;
&lt;p&gt;In a proto-typical production ML workflow, an “ingestion pipeline” needs
to store large datasets on the cloud and continuously update them as new
data becomes available. An “analytics pipeline” usually needs to process
the entire dataset by reading it in batches, because the full dataset
would be too large to fit in RAM. An “inference pipeline” provides
real-time results (i.e.&amp;nbsp;model predictions or other online statistics)
and needs to process small batches of data in quasi-realtime. Finally,
the presentation of analytics results requires not only to show the
output from the models but also to provide context through “historical
data” for an arbitrary set of features. Therefore, low-latency access to
a small group of columns from a large dataset represents an additional
requirement.&lt;/p&gt;
&lt;p&gt;In the Python ecosystem, we can leverage tools such as Parquet and
PyArrow to address such complex workflow.&lt;/p&gt;
&lt;p&gt;Apache Parquet is a columnar storage format initially created to address
similar storage challenges in the Hadoop ecosystem. It has since become
a standard for efficient storage of large datasets in all the major
languages, including Python.&lt;/p&gt;
&lt;p&gt;The Apache Arrow project provides a cross-language in-memory
representation and query engine for tabular datasets and has a
performant IO interface for Parquet datasets. Its Python interface,
PyArrow, allows to query and process large partitioned datasets
distributed across multiple files and folders on local and cloud
storage.&lt;/p&gt;
&lt;p&gt;In this talk, combining PyArrow and Parquet datasets, we will explore
several techniques to address the use-cases of the typical production ML
workflows delineated above.&lt;/p&gt;
&lt;p&gt;Speaker: Ingargiola&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="aws"></category><category term="best practice"></category><category term="infrastructure"></category><category term="machine learning"></category><category term="pandas"></category><category term="performance"></category><category term="scaling"></category></entry><entry><title>Four years of Python</title><link href="https://pyvideo.org/pycon-italia-2022/four-years-of-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Duarte Carmo</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/four-years-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Four years of Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Inspired by my post Four Years of Python where I talk through some
valuable lessons for intermediate/beginner programmers to have in mind
when scaling up their career in Python development. I mention topics
such as testing, keeping things simple, and educating …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Four years of Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Inspired by my post Four Years of Python where I talk through some
valuable lessons for intermediate/beginner programmers to have in mind
when scaling up their career in Python development. I mention topics
such as testing, keeping things simple, and educating yourself. The
other day I realized: I’ve been programming in Python for about 4 years
now. I do get paid to write code, but for some reason still don’t
consider myself a pro. I did learn some valuable lessons however. For
those who just got started with Python, you’ll hopefully take something
out of these lessons. For the experienced, see this as a celebration of
our beloved language.&lt;/p&gt;
&lt;p&gt;Some of the topics I’ll cover are: - Reading is better then googling -
Keep things stupid simple - First make it work, then make it pretty -
Test early - Learn continuously&lt;/p&gt;
&lt;p&gt;I’ll share some learnings, principles, and resources that I’ve learned
through the years.&lt;/p&gt;
&lt;p&gt;Slides:&lt;/p&gt;
&lt;p&gt;Speaker: Duarte Carmo&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="architecture"></category><category term="best practice"></category><category term="clean code"></category><category term="education"></category><category term="machine learning"></category><category term="testing"></category></entry><entry><title>Ideas, Visions and Reality: Looking back on 20 years of community work - Mar</title><link href="https://pyvideo.org/pycon-italia-2022/ideas-visions-and-reality-looking-back-on-20-years-of-community-work-mar.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Marc-André Lemburg</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/ideas-visions-and-reality-looking-back-on-20-years-of-community-work-mar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ideas, Visions and Reality: Looking back on 20 years of community work -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Python has become very important for many of us - as the basis for
making a living, as a way to enjoy programming, or to bring people
together.&lt;/p&gt;
&lt;p&gt;I’d like to take you on …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ideas, Visions and Reality: Looking back on 20 years of community work -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Python has become very important for many of us - as the basis for
making a living, as a way to enjoy programming, or to bring people
together.&lt;/p&gt;
&lt;p&gt;I’d like to take you on a tour through my two decades of community work
and hopefully inspire some of you to contribute to the community as
well. Python has become a very important part of life for many of us -
as the basis for making a living, as a way to enjoy programming, or as a
project which brings together people. I’ve had the opportunity to work
in all these fields in the last two decades and have learned a lot.&lt;/p&gt;
&lt;p&gt;In this talk I’d like to take you on a tour, share some of the insights
I have gained and hopefully inspire some of you to contribute to the
community as well.&lt;/p&gt;
&lt;p&gt;PDF of the talk slides:&lt;/p&gt;
&lt;p&gt;Speaker: Marc-André Lemburg&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="community"></category><category term="conferences and meet ups"></category><category term="education"></category></entry><entry><title>La Continuous Delivery è una condizione mentale</title><link href="https://pyvideo.org/pycon-italia-2022/la-continuous-delivery-e-una-condizione-mentale.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Raffaele Colace</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/la-continuous-delivery-e-una-condizione-mentale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La Continuous Delivery è una condizione mentale - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In questo talk racconterò il mio percorso evolutivo da un approccio
waterfall a quello iterativo passando per i tanti errori commessi.
Mostrerò come abbiamo realizzato un template che aiuta nel processo di
Continuous Delivery utilizzando Kubernetes, Docker, Python e …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La Continuous Delivery è una condizione mentale - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In questo talk racconterò il mio percorso evolutivo da un approccio
waterfall a quello iterativo passando per i tanti errori commessi.
Mostrerò come abbiamo realizzato un template che aiuta nel processo di
Continuous Delivery utilizzando Kubernetes, Docker, Python e Terraform.
Vedo la gente passare i venerdì a fare rilasci in produzione e passare
il weekend a fare bug fixing. Vedo la gente stufa di fare sempre le
stesse attività ripetitive e perseverare nella solita routine da
developer frustrato. Ma tutto questo si può evitare con un cambio di
mentalità. Quello che voglio raccontare in questo talk è il mio percorso
evolutivo da un approccio waterfall a quello iterativo passando per i
tanti errori commessi.&lt;/p&gt;
&lt;p&gt;Racconterò come abbiamo realizzato un template che aiuta nel processo di
Continuous Delivery, dove la parola “continuous” è quella che definisce
bene l’importanza di questo processo. Nell’Agile Software Development,
il rilascio del software funzionante è uno dei punti più importanti e
questo deve avvenire spesso. Per poter rilasciare nuove funzionalità
però, dovremo scrivere tutti i test necessari, eseguirli, creare una
build e infine effettuare il deploy vero e proprio.&lt;/p&gt;
&lt;p&gt;Nello sviluppo del software moderno la Continuous Delivery (CD) è quel
processo che permette all’intero team di affrontare qualsiasi
cambiamento, come nuove feature, bugfix o esperimenti, in un modo
sostenibile, sicuro e rapido. In questo processo generalmente vengono
utilizzate tra le altre cose, due pratiche per effettuare i rilasci
continui: Continuous Integration (CI) e Continuous Deployment (CD).&lt;/p&gt;
&lt;p&gt;In questo talk racconterò come, insieme ai miei colleghi, siamo arrivati
alla costruzione di un processo automatizzato per effettuare rilasci sin
dal primo commit utilizzando Kubernetes, Docker, Python e Terraform per
la creazione di applicazioni web basate su Django e React.&lt;/p&gt;
&lt;p&gt;Slide:&lt;/p&gt;
&lt;p&gt;Speaker: Raffaele Colace&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="agile"></category><category term="best practice"></category><category term="case study"></category><category term="devops"></category><category term="django"></category></entry><entry><title>Linting Python The Elegant Way</title><link href="https://pyvideo.org/pycon-italia-2022/linting-python-the-elegant-way.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Riya Bansal</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/linting-python-the-elegant-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linting Python The Elegant Way - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;This talk is for those people who know basic python but are looking
forward to writing better and cleaner python code. Python has always
been known for its easy-to-understand syntax. This talk will empower all
developers and give perspective on how …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linting Python The Elegant Way - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;This talk is for those people who know basic python but are looking
forward to writing better and cleaner python code. Python has always
been known for its easy-to-understand syntax. This talk will empower all
developers and give perspective on how can you write code in a much more
elegant way. Linting is the automated checking of your source code for
programmatic and stylistic errors. Linters analyze source code to flag
programming errors, bugs, stylistic errors, and suspicious constructs.
This is done by using a lint tool. Python being one of the most elegant
language has got a wide variety of listing tools available that can help
programmers in Code formatting and styling their code in the best
suitable form. Python has got some advance listing tools like pylint and
flake8. In this talk we will have a great deal of discussion around how
these linters can be used and how these tools can help you find more
bugs and improve your code quality. These linting tools finds problems
that are typically caught by a compiler for less dynamic languages. We
will also discuss about how can we manage import orders, code
formatting, checking security vulnerabilities, managing dependencies etc
using these tools. There are also code analysis tools that provide other
insights into your code. While maybe not linters by definition, these
tools are usually used side-by-side with linters. They too hope to
improve the quality of the code. It’s useful to have linters run against
your code frequently. If automation and consistency aren’t there, it’s
easy for a large team or project to lose sight of the goal and start
creating lower-quality code.&lt;/p&gt;
&lt;p&gt;Attendees will be able to learn 1. What is a linter? 2. Famous linting
solutions like pylint and flake 8 3. Use cases like ordering imports,
finding error bugs 4. Managing dependency in python with these linter
tools.&lt;/p&gt;
&lt;p&gt;Speaker: Riya Bansal&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="clean code"></category><category term="code analysis"></category><category term="community"></category><category term="development"></category></entry><entry><title>Make the most of Django</title><link href="https://pyvideo.org/pycon-italia-2022/make-the-most-of-django.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/make-the-most-of-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Make the most of Django - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Taking full advantage of &lt;strong&gt;Open Source&lt;/strong&gt; software means getting involved
in its &lt;strong&gt;community&lt;/strong&gt; and &lt;strong&gt;contributing&lt;/strong&gt; to its development. We will
see how this is profoundly true in the &lt;strong&gt;Django&lt;/strong&gt; case as well.
&lt;strong&gt;Django&lt;/strong&gt; is one of the longest running &lt;strong&gt;open source …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Make the most of Django - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Taking full advantage of &lt;strong&gt;Open Source&lt;/strong&gt; software means getting involved
in its &lt;strong&gt;community&lt;/strong&gt; and &lt;strong&gt;contributing&lt;/strong&gt; to its development. We will
see how this is profoundly true in the &lt;strong&gt;Django&lt;/strong&gt; case as well.
&lt;strong&gt;Django&lt;/strong&gt; is one of the longest running &lt;strong&gt;open source&lt;/strong&gt; web frameworks
but despite this it is still one of the best around and continues to be
actively developed.&lt;/p&gt;
&lt;p&gt;Approaching such &lt;strong&gt;software&lt;/strong&gt; can be intimidating to a novice developer
as well as an experienced one because it is the result of over &lt;strong&gt;15
years&lt;/strong&gt; of excellent &lt;strong&gt;developers&lt;/strong&gt; work and it would take a long time
to get to know it thoroughly.&lt;/p&gt;
&lt;p&gt;In this talk we will see together the way I found for anyone to take
full &lt;strong&gt;advantage&lt;/strong&gt; of Django while &lt;strong&gt;contributing&lt;/strong&gt; to its success and
that of its &lt;strong&gt;community&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="more-info"&gt;
&lt;h4&gt;More info&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Slide&lt;/strong&gt; and more &lt;strong&gt;information&lt;/strong&gt; on the talk on [&lt;/p&gt;
&lt;p&gt;Speaker: Paolo Melchiorre&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="community"></category><category term="django"></category></entry><entry><title>Managing large-scale ML pipelines with MLflow and serverless computing.</title><link href="https://pyvideo.org/pycon-italia-2022/managing-large-scale-ml-pipelines-with-mlflow-and-serverless-computing.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>ilyas chaoua</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/managing-large-scale-ml-pipelines-with-mlflow-and-serverless-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing large-scale Machine Learning pipelines with MLflow and
serverless computing. - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;MLOps aims to manage the machine learning (ML) lifecycle including
experimentation, reproducibility, deployment, and model registry. Come
to discover how in Vedrai - one of the top AI startups in Europe - we
enhance and maintain ML pipelines …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing large-scale Machine Learning pipelines with MLflow and
serverless computing. - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;MLOps aims to manage the machine learning (ML) lifecycle including
experimentation, reproducibility, deployment, and model registry. Come
to discover how in Vedrai - one of the top AI startups in Europe - we
enhance and maintain ML pipelines models in production reliably and
efficiently using MLOps. Problem:&lt;/p&gt;
&lt;p&gt;One difficulty of employing Machine Learning (ML) within organizations
is managing the model’s lifecycle. Moving from experimenting to
deployment in production environments is operated by different steps:
Preparing and Analysing Data, Training, Deployment, Monitoring, and
Governance of ML models. So, it is crucial to possess a platform to
manage and organize the ML lifecycle.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;In Vedrai, we combined the strength of the MLflow framework and the
resilience of AWS serverless services to manage, deploy, and scale our
ML models in production. MLflow is an open-source framework for tracking
the entire ML lifecycle from training to deployment. Among the
functions, it offers model tracking, packaging, and serving. Whereas,
deploying ML applications is an infrastructure affair that needs to be
scalable with minimum server management, which makes AWS serverless
services a great choice.&lt;/p&gt;
&lt;p&gt;Value:&lt;/p&gt;
&lt;p&gt;MLflow enforces the model’s reproducibility and robustness at the same
time allowing more centralized experimentation. AWS serverless services
allow training and inferencing pipelines to run without provisioning or
managing servers while only paying for the time it takes to run.&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State of the art of MLOps.&lt;/li&gt;
&lt;li&gt;Record and query experiments with MLflow Tracking.&lt;/li&gt;
&lt;li&gt;Package data science code with MLflow Projects.&lt;/li&gt;
&lt;li&gt;Store ML models with MLflow Models Registry.&lt;/li&gt;
&lt;li&gt;Deploy ML models in the AWS environment.&lt;/li&gt;
&lt;li&gt;Future MLOps challenges.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: ilyas chaoua&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="architecture"></category><category term="aws"></category><category term="best practice"></category><category term="deep learning"></category><category term="devops"></category><category term="docker"></category><category term="infrastructure"></category><category term="machine learning"></category><category term="open source"></category><category term="operations"></category><category term="packaging"></category><category term="performance"></category><category term="scaling"></category></entry><entry><title>Modern Python: Alla scoperta delle ultime novità di (C)Python</title><link href="https://pyvideo.org/pycon-italia-2022/modern-python-alla-scoperta-delle-ultime-novita-di-cpython.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Mattia Giambirtone</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/modern-python-alla-scoperta-delle-ultime-novita-di-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern Python: Alla scoperta delle ultime novità di (C)Python - PyCon
Italia 2022&lt;/p&gt;
&lt;p&gt;Vi siete mai chiesti se ci fosse un modo migliore di scrivere il vostro
codice? Una qualche feature di Python oscura di cui eravate all’oscuro?
Sì? Ebbene, insieme demistificheremo alcune delle ultime feature più
interessanti …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern Python: Alla scoperta delle ultime novità di (C)Python - PyCon
Italia 2022&lt;/p&gt;
&lt;p&gt;Vi siete mai chiesti se ci fosse un modo migliore di scrivere il vostro
codice? Una qualche feature di Python oscura di cui eravate all’oscuro?
Sì? Ebbene, insieme demistificheremo alcune delle ultime feature più
interessanti e più sottovalutate del vecchio serpentone: sarà uno
spasso, promesso! Modern Python: Alla scoperta delle ultime novità di
(C)Python&lt;/p&gt;
&lt;p&gt;Pubblico Consigliato&lt;/p&gt;
&lt;p&gt;Questa presentazione è diretta a sviluppatori Python con almeno qualche
anno di esperienza sulle spalle e che siano interessati a rendere il
proprio codice più leggibile, idiomatico e magari anche più &lt;em&gt;veloce&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Introduzione Vi siete mai trovati a dover scrivere codice simile a
questo:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;some_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;    &lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;Here&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;e aver pensato: &lt;em&gt;”Cavolo, quell’assegnamento sembra proprio di
troppo!”&lt;/em&gt;? Se la risposta è sì, allora questa presentazione fa per voi!
Vi mostrerò come migliorare l’estetica, e magari anche la performance,
del vostro codice, mantenendo la medesima funzionalità. Imparerete
concetti avanzati quali i generatori asincroni, introdotti nel lontano
Python 3.6, il mitico operatore “tricheco”, la nuova e scintillante
istruzione &lt;tt class="docutils literal"&gt;match&lt;/tt&gt;, per un efficiente ed elegante pattern matching, ed
altro ancora: Sarà una figata, promesso!&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Immagino già che qualcuno di voi si stia chiedendo, &lt;em&gt;”Ma, Matt, Python
3.6? É vecchissimo! Perchè sei venuto a parlarci di una feature
introdotta nel 2016?”&lt;/em&gt;: Okay, diciamo che ho mentito (giusto un
pochino).&lt;/p&gt;
&lt;p&gt;Non tutte le funzionalità di cui parlerò in questa presentazione sono
&lt;em&gt;esattamente&lt;/em&gt; nuove di zecca, ma ho sempre avuto la sensazione che
alcune— specialmente i generatori asincroni— non abbiano mai ricevuto
l’attenzione che meritavano e che siano andate piuttosto in sordina: ciò
è stato probabilmente dovuto dal rilascio di Python 3.5 (che per
rinfrescarvi la memoria ha finalmente standardizzato la programmazione
asincrona, introducendo il concetto di coroutine e vari altri nuovi
oggetti), e con questa presentazione vorrei rendere loro giustizia e al
tempo stesso far notare alcune delle (spesso ben nascoste!) trappole in
cui si può cadere facendone uso. Giusto per dare un’assaggio degli
argomenti che voglio trattare, ecco cosa spero impariate dalla
presentazione: - Migliorare le performance del vostro codice,
parallelizzando le operazioni di I/O basata su file, utilizzando un solo
thread grazie all’aiuto dei generatori asincroni - Risparmiare prezioso
spazio e tempo sostituendo &lt;tt class="docutils literal"&gt;typing.Union[A, B, C]&lt;/tt&gt; con il suo
(magnificamente idiomatico) equivalente &lt;tt class="docutils literal"&gt;A | B | C&lt;/tt&gt; - Imparare la
maniera &lt;em&gt;”Pythonica”&lt;/em&gt; di effettuare pattern matching grazie all’uso
della nuova istruzione &lt;tt class="docutils literal"&gt;match&lt;/tt&gt; introdotta in Python 3.10. Potete dire
finalmente addio a codice del tipo
&lt;tt class="docutils literal"&gt;python&amp;nbsp; cases = {1: &amp;quot;one&amp;quot;, 2: &amp;quot;two&amp;quot;, 3: &amp;quot;three&amp;quot;}&amp;nbsp; one_two_three = cases.get(some_var, default_value)&lt;/tt&gt;
- Altro ancora! Ma vi toccherà venire alla presentazione per scoprirlo
:)&lt;/p&gt;
&lt;p&gt;Speaker: Mattia Giambirtone&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="abstractions"></category><category term="best practice"></category><category term="clean code"></category><category term="cpython"></category><category term="performance"></category><category term="type hinting"></category></entry><entry><title>Mutabilità e side effect non sono tuoi amici</title><link href="https://pyvideo.org/pycon-italia-2022/mutabilita-e-side-effect-non-sono-tuoi-amici.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Claudio Stamile</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/mutabilita-e-side-effect-non-sono-tuoi-amici.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutabilità e side effect non sono tuoi amici - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;La mutabilità di classi ed oggetti in python è croce e delizia degli
sviluppatori. L’utilizzo di operatori di modifica può generare problemi
nella consistenza delle strutture dati. In questo talk analizzeremo il
concetto di mutabilità mostrando alcuni …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutabilità e side effect non sono tuoi amici - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;La mutabilità di classi ed oggetti in python è croce e delizia degli
sviluppatori. L’utilizzo di operatori di modifica può generare problemi
nella consistenza delle strutture dati. In questo talk analizzeremo il
concetto di mutabilità mostrando alcuni metodi per evitare side effect
indesiderati. Python lascia agli sviluppatori un’enorme libertà di
utilizzo quando si tratta di modificare strutture dati o classi. E’
dunque necessario procedere in modo strutturato e rigoroso quando
vengono effettuate delle modifiche al fine di evitare che strutture dati
mutabili possano essere modificate in modo impropio generando dei side
effect che si ripercuotono all’interno di tutto il codice. Questo
problema è di particolare importanza quando si scrivono delle pipeline
di machine learning. In questi casi, infatti, a mutazione di una
struttura dati può portare ad un errato processing dei dati che, di
conseguenza, porterà al training di algoritmi di machine learning
errati. Scopo di questo talk è quello di investigare il concetto di
mutabilità nelle strutture dati e nelle classi e di quali effetti
dannosi essi possono generare all’interno del codice ed in particolar
modo in pipeline di machine learning. Verranno inoltre proposte alcune
buone norme (che prendono spunto dalla programmazione funzionale) utili
per poter scrivere codice robusto e privo di effetti indesiderati dati
dalla mutazione di eventuali strutture dati o classi.&lt;/p&gt;
&lt;p&gt;Speaker: Claudio Stamile&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="data structures"></category><category term="functional programming"></category></entry><entry><title>Python 3.10: let's pattern match! 🔥</title><link href="https://pyvideo.org/pycon-italia-2022/python-310-lets-pattern-match.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Laysa Uchoa</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/python-310-lets-pattern-match.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10: let’s pattern match! 🔥 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Python 3.10 is out there and with this comes Pattern Matching. With this
talk, you will be surprised how simple, yet powerful, Pattern Matching
really is.&lt;/p&gt;
&lt;p&gt;This talk and you, it is a match! 🔥 Python 3.10 is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.10: let’s pattern match! 🔥 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Python 3.10 is out there and with this comes Pattern Matching. With this
talk, you will be surprised how simple, yet powerful, Pattern Matching
really is.&lt;/p&gt;
&lt;p&gt;This talk and you, it is a match! 🔥 Python 3.10 is out there now. This
was a two-digit minor version change since the last release, and with
this release new ways of thinking about programming were brought to the
Python language - Pattern Matching.&lt;/p&gt;
&lt;p&gt;We will understand what was there before Python Pattern Matching and how
to use Pattern Matching in different scenarios. We will pattern match
from simple data types to more complex ones, such as dictionaries and
objects. We will also understand how to use guards, and how can build
composable patterns.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you will be surprised how simple, yet powerful,
Pattern Matching really is. This talk and you, it is a match!&lt;/p&gt;
&lt;p&gt;Speaker: Laysa Uchoa&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="best practice"></category><category term="development"></category></entry><entry><title>Self-explaining APIs</title><link href="https://pyvideo.org/pycon-italia-2022/self-explaining-apis.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/self-explaining-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Self-explaining APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;To mash up various APIs you need data to have a well defined meaning:
imagine meshing up healthcare APIs using different units for human
temperature, or financial APIs using different currencies.&lt;/p&gt;
&lt;p&gt;This talk describes strategies and python tools to overcome these
problems in large …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Self-explaining APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;To mash up various APIs you need data to have a well defined meaning:
imagine meshing up healthcare APIs using different units for human
temperature, or financial APIs using different currencies.&lt;/p&gt;
&lt;p&gt;This talk describes strategies and python tools to overcome these
problems in large API ecosystems. This talk will present strategies and
python tools to create semantically interoperable REST APIs. After the
problem statement, various solutions will be presented, including: -
contract-first api development with OpenAPI 3, ontologies, controlled
vocabularies; - the rdflib and pyld python libraries; - the use of
centralized catalogs.&lt;/p&gt;
&lt;p&gt;[Very draft slides here](&lt;/p&gt;
&lt;p&gt;Speaker: Roberto Polli&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="best practice"></category><category term="data structures"></category><category term="rest"></category></entry><entry><title>Stupid Things I've Done With Python</title><link href="https://pyvideo.org/pycon-italia-2022/stupid-things-ive-done-with-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/stupid-things-ive-done-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stupid Things I’ve Done With Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;On every computer I’ve had for the past 20 years, I’ve created a folder
called “stupid python tricks”. It’s where I put code that should never
see the light of day. Code that abuses features like …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stupid Things I’ve Done With Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;On every computer I’ve had for the past 20 years, I’ve created a folder
called “stupid python tricks”. It’s where I put code that should never
see the light of day. Code that abuses features like decorators,
metaclasses, and dynamic typing to do terrible things.&lt;/p&gt;
&lt;p&gt;Code I’m going to teach you. I have a GitHub repository that contains a
compilation of all the awful code I’ve written over the years, abusing
features like metaclasses, decorators, various &lt;strong&gt;dunder&lt;/strong&gt; methods, and
the mutable nature of Python’s underlying data structures.&lt;/p&gt;
&lt;p&gt;It’s a funny way to see how Python works under the hood, but it’s also
educational.&lt;/p&gt;
&lt;p&gt;Really!&lt;/p&gt;
&lt;p&gt;Each of the tricks is entertainingly terrible. But they’re also mostly
self-contained ways to see what happens when you override certain
behaviours of the Python language. Anyone with an intermediate level of
Python understanding should be able to follow along and learn something.&lt;/p&gt;
&lt;p&gt;I will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replacing an imported module with a class, so attribute lookups can
be &amp;#64;properties, with &lt;em&gt;hilarious&lt;/em&gt; results.&lt;/li&gt;
&lt;li&gt;Overriding the &lt;tt class="docutils literal"&gt;__sub__&lt;/tt&gt; magic method to create a hyphenated,
fuzzy-matching version of a boolean.&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;__getattr__&lt;/tt&gt; to save time implementing all the functions in
the &lt;tt class="docutils literal"&gt;math&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;__eq__&lt;/tt&gt; to make things that aren’t really the same look the
same.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is an entertaining tour of the Python Data Model, and the
things you can do - if you’re so inclined.&lt;/p&gt;
&lt;p&gt;Speaker: Mark Smith&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="abstractions"></category><category term="best practice"></category><category term="teaching"></category></entry><entry><title>Supercharge Your Shell — Command-Line Power-Ups and Dotfile Automation</title><link href="https://pyvideo.org/pycon-italia-2022/supercharge-your-shell-command-line-power-ups-and-dotfile-automation.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Justin Mayer</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/supercharge-your-shell-command-line-power-ups-and-dotfile-automation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supercharge Your Shell — Command-Line Power-Ups and Dotfile Automation -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;We spend hours each day in a terminal console, so let’s make the most of
that time by enhancing our command-line productivity. We will automate
dotfile configuration, facilitate Python interpreter and virtual
environment management, and supercharge our …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supercharge Your Shell — Command-Line Power-Ups and Dotfile Automation -
PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;We spend hours each day in a terminal console, so let’s make the most of
that time by enhancing our command-line productivity. We will automate
dotfile configuration, facilitate Python interpreter and virtual
environment management, and supercharge our terminals with powerful
command-line tools. We spend hours each day in a terminal console, so
let’s make the most of that time by enhancing our command-line
productivity. Together we will automate dotfile configuration,
facilitate Python interpreter and virtual environment management, and
supercharge our terminals with powerful command-line tools.&lt;/p&gt;
&lt;p&gt;Managing our shell configuration, commonly referred to collectively as
“dotfiles”, can be an onerous task. Thankfully there are tools like
Ansible and Chezmoi that we will use to more effectively automate
dotfile management in versioned repositories, which we can then easily
deploy to both personal workstations and remote servers.&lt;/p&gt;
&lt;p&gt;Given the pitfalls inherent in distro-packaged Python interpreters,
building and managing our own Python interpreters efficiently
has never been more important. Thankfully, we will use tools like ASDF
to make this incredibly easy, as well as examine its similar benefits
for Node.js/NPM and &lt;em&gt;hundreds&lt;/em&gt; of other languages and tools, all via
extensible plugins. For Fish shell users, we will see how VirtualFish
makes it easy to create, upgrade, and activate virtual environments in
ways that have never been available before.&lt;/p&gt;
&lt;p&gt;Finally, we will explore how powerful command-line tools like Zoxide,
Bat, RipGrep-All + fzf, and others can be used to dramatically increase
our terminal console productivity.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to automate dotfile configuration management and deployment&lt;/li&gt;
&lt;li&gt;how to build and manage multiple Python interpreter versions&lt;/li&gt;
&lt;li&gt;how to more efficiently manage Python virtual environments&lt;/li&gt;
&lt;li&gt;how to use powerful command-line tools to increase terminal console
productivity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: Justin Mayer&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="development"></category><category term="open source"></category></entry><entry><title>The Design of Everyday APIs</title><link href="https://pyvideo.org/pycon-italia-2022/the-design-of-everyday-apis.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/the-design-of-everyday-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Design of Everyday APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;What makes a good API for a library? Or more importantly, what makes it
bad? This talk will discuss the principles of what goes into
user-centered design, and how best to apply those principles when
writing a Python library for fellow …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Design of Everyday APIs - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;What makes a good API for a library? Or more importantly, what makes it
bad? This talk will discuss the principles of what goes into
user-centered design, and how best to apply those principles when
writing a Python library for fellow developers. What makes a good API
for a library? Or more importantly, what makes it bad?&lt;/p&gt;
&lt;p&gt;Implementing an API is an art. It’s the connection between the user and
the library itself. How can we optimize that connection to make the
experience more pleasing? What makes a user reach for one library over
another? What goes into an ergonomic API?&lt;/p&gt;
&lt;p&gt;This talk will first discuss what makes an API good: documentation,
simplicity, consistency, completeness, and flexibility. We will apply
those elements by looking at developing and iterating on our own
library.&lt;/p&gt;
&lt;p&gt;Speaker: Lynn Root&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="abstractions"></category><category term="apis"></category><category term="best practice"></category></entry><entry><title>Trojan Source - Can we trust open-source anymore?</title><link href="https://pyvideo.org/pycon-italia-2022/trojan-source-can-we-trust-open-source-anymore.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Cheuk Ho</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/trojan-source-can-we-trust-open-source-anymore.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trojan Source - Can we trust open-source anymore? - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Recently, a paper is published to demonstrate how a visibly valid
contribution can contain malicious code by exporting the Unicode control
characters. Some of these attacks has been tested on Python and it
works. Shall the Python and open-source …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trojan Source - Can we trust open-source anymore? - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Recently, a paper is published to demonstrate how a visibly valid
contribution can contain malicious code by exporting the Unicode control
characters. Some of these attacks has been tested on Python and it
works. Shall the Python and open-source communities be concerned?
Background:&lt;/p&gt;
&lt;p&gt;After researchers at the University of Cambridge published a paper(
about a malicious attack named Trojan Source, which exploited the fact
that some program interpreters, like CPython, can handle Unicode. This
has caused concerns in the open-source community about the malicious
contribution that looks totally legitimate in human eyes but contain
invisible attacks. As a member of the Python community, we should all be
aware of that and understand how we can prevent this attack to happen.&lt;/p&gt;
&lt;p&gt;About this talk:&lt;/p&gt;
&lt;p&gt;In this talk, Cheuk will decode the finding in this paper to a level
that can be understood by everyone. She will start with a joke example
who you can mess up someone by using Unicode. She will then explain what
is Unicode and why it causes trouble. Afterwards, she will explain the
Python examples( in the paper and why it can be dangerous. Lastly, she
will open up a discussion on how we should defend ourselves from those
attacks and what we can do as a community.&lt;/p&gt;
&lt;p&gt;Outline (30 mins talk):&lt;/p&gt;
&lt;p&gt;**5 minutes - Introduction, the opening of the talk&lt;/p&gt;
&lt;p&gt;In this session, Cheuk will ask audiences to debug a code snippet that
looks absolutely fine but will not work as code. She will explain that
this is the same concept used in Trojan Source.&lt;/p&gt;
&lt;p&gt;**10 mins - What is Unicode&lt;/p&gt;
&lt;p&gt;In this session, Cheuk will give an introduction about what is Unicode,
what it is to a computer and why we need Unicode in computers. She will
also explain how the benefit of having Unicode can also be a downfall to
make us vulnerable to the Trojan Source attack.&lt;/p&gt;
&lt;p&gt;**10 mins - How Trojan Source works in Python&lt;/p&gt;
&lt;p&gt;In this session, Cheuk will show a few examples using the Trojan Source
in legitimate Python code. She will point out how the attack is hiding
in the source code and in what cases it can be dangerous.&lt;/p&gt;
&lt;p&gt;**5 mins - How to protect ourselves&lt;/p&gt;
&lt;p&gt;In this session, Cheuk will open the discussion and make a few
suggestions of how we can protect ourselves as a community. This will
lead to the Q&amp;amp;A session where the audience can weigh in on their own
thought.&lt;/p&gt;
&lt;p&gt;Target audiences&lt;/p&gt;
&lt;p&gt;From those who are curious to maintainers of open-source libraries. This
is the knowledge we should all know and be aware of. Cheuk will explain
in a way that expects no prior knowledge is needed.&lt;/p&gt;
&lt;p&gt;What will audiences learn&lt;/p&gt;
&lt;p&gt;About Trojan Source attacks and how it works. They may also learn about
how interpreters, especially Python interpreters, works with Unicode.
Plus, they may have increased awareness about security in the
open-source world.&lt;/p&gt;
&lt;p&gt;Speaker: Cheuk Ho&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="community"></category><category term="open source"></category><category term="security"></category></entry><entry><title>Viaggio nel mondo delle librerie python</title><link href="https://pyvideo.org/pycon-italia-2022/viaggio-nel-mondo-delle-librerie-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Danilo Abbasciano</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/viaggio-nel-mondo-delle-librerie-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Viaggio nel mondo delle librerie python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;25 utili librerie in 30 minuti Attraverso un affascinate viaggio tra le
librerie python, tratteremo rapidamente quelle più utili e semplici da
utilizzare che ci faranno risparmiare tempo e linee di codice. Farò una
rapida presentazione per ognuna di esse …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Viaggio nel mondo delle librerie python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;25 utili librerie in 30 minuti Attraverso un affascinate viaggio tra le
librerie python, tratteremo rapidamente quelle più utili e semplici da
utilizzare che ci faranno risparmiare tempo e linee di codice. Farò una
rapida presentazione per ognuna di esse facendone risaltare i benefici e
le principali funzionalità. Da non perdere!&lt;/p&gt;
&lt;p&gt;Slides:&lt;/p&gt;
&lt;p&gt;Speaker: Danilo Abbasciano&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="clean code"></category><category term="development"></category></entry><entry><title>Vulture eats some Python</title><link href="https://pyvideo.org/pycon-italia-2022/vulture-eats-some-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Rahul Jha</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/vulture-eats-some-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vulture eats some Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Maintaining a high level of code quality is important for any serious
project. One aspect of this is ensuring that all code is actually used.
Finding and removing dead code allows to keep the code base clean and
reduces bugs. This is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vulture eats some Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Maintaining a high level of code quality is important for any serious
project. One aspect of this is ensuring that all code is actually used.
Finding and removing dead code allows to keep the code base clean and
reduces bugs. This is a practical guide on using and configuring Vulture
to do so. This talk is focused on how we can use Vulture to find dead
code. There are many reasons for dead code ending up in a project. The
most common is refactoring, but another is misspellings, which are only
detected at runtime for dynamic languages. Vulture helps you find unused
code in Python programs, and it is useful for cleaning up and finding
errors in large codebases. If you run Vulture on both your library and
test suite, you can find untested code.&lt;/p&gt;
&lt;p&gt;Due to Python’s dynamic nature, static code analyzers like Vulture are
likely to miss some dead code. Also, code that is only called implicitly
(e.g., using getattr) may be reported as unused. Nonetheless, Vulture
can be a very helpful tool for higher code quality.&lt;/p&gt;
&lt;p&gt;The second part of this talk investigates ways to improve Vulture’s
reporting such that the results are actionable and optimized for a low
number of false positives. It also discusses how to automate testing for
dead code with Vulture – there are quite a few options available: 1. Add
a step in your continuous integration testing. 2. As a pre-commit hook.
3. Run a script using Vulture API for more fine-grained control.&lt;/p&gt;
&lt;p&gt;The third and last part of this talk discusses a brief overview of the
internal workings of the tool, along with the scope of future
improvements. After all, the motive of this talk is not only to
encourage developers to prioritize code hygiene but also to inspire them
to come up with ideas to &lt;em&gt;enable&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;Speaker: Rahul Jha&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="clean code"></category><category term="code analysis"></category><category term="static analysis"></category><category term="tooling"></category></entry><entry><title>Why is our project late?</title><link href="https://pyvideo.org/pycon-italia-2022/why-is-our-project-late.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Marco Santoni</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/why-is-our-project-late.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is our project late? - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Why is it so hard to respect deadlines for a dev team? Is it just a
wrong planning methodology? Are there fundamental limits in the way our
brain makes plans? Has it always been like this?&lt;/p&gt;
&lt;p&gt;We’ll investigate the way …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is our project late? - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Why is it so hard to respect deadlines for a dev team? Is it just a
wrong planning methodology? Are there fundamental limits in the way our
brain makes plans? Has it always been like this?&lt;/p&gt;
&lt;p&gt;We’ll investigate the way humans perceive plans and unexpected events.
Do we have biases in estimates? Why is it so hard to respect deadlines
for a dev team? Is it just a wrong planning methodology? Are there
fundamental limits in the way our brain makes plans? Has it always been
like this?&lt;/p&gt;
&lt;p&gt;We’ll investigate the way humans perceive plans and unexpected events.
We’ll find out that we have biases in the way we make plans and
predictions. Problems are not limited to the planning phase though. When
the first issues occur during the project, we tend to take decisions
like increasing the team or taking shortcut that might not have the
desired outcome.&lt;/p&gt;
&lt;p&gt;Speaker: Marco Santoni&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="agile"></category><category term="best practice"></category><category term="development"></category></entry><entry><title>Writing Faster Python 3</title><link href="https://pyvideo.org/pycon-italia-2022/writing-faster-python-3.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Sebastian Witowski</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/writing-faster-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Faster Python 3 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Source code level optimization is often neglected - people don’t bother,
because getting a faster server often gives better results. But if you -
like me - always wonder what is the most efficient way to write some
code, then this talk is for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Faster Python 3 - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Source code level optimization is often neglected - people don’t bother,
because getting a faster server often gives better results. But if you -
like me - always wonder what is the most efficient way to write some
code, then this talk is for you! Did you know that Python preallocates
integers from -5 to 257? Reusing them 1000 times, instead of allocating
memory for a bigger integer, can save you a couple milliseconds of
code’s execution time. If you want to learn more about this kind of
optimizations then, … well, probably this presentation is not for you :)
Instead of going into such small details, I will talk about more “sane”
ideas for writing faster code.&lt;/p&gt;
&lt;p&gt;After a brief overview of different levels of optimization and how they
work in Python, I will show you simple and fast ways of measuring the
execution time of your code and finally, discuss examples of how some
code structures could be improved.&lt;/p&gt;
&lt;p&gt;You will see: * The fastest way of removing duplicates from a list *
How much faster your code is when you reuse the built-in functions
instead of trying to reinvent the wheel * What is faster than the “for
loop” * If the lookup is faster in a list or a set * When it’s better
to beg for forgiveness than to ask for permission&lt;/p&gt;
&lt;p&gt;Speaker: Sebastian Witowski&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="best practice"></category><category term="cpython"></category><category term="development"></category></entry></feed>