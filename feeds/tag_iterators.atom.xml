<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_iterators.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-22T00:00:00+00:00</updated><entry><title>Il rasoio dei generatori di Python per semplificare il codice e ridurre l'uso di memoria</title><link href="https://pyvideo.org/pycon-italia-2018/il-rasoio-dei-generatori-di-python-per-semplificare-il-codice-e-ridurre-luso-di-memoria.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Davide Brunato</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/il-rasoio-dei-generatori-di-python-per-semplificare-il-codice-e-ridurre-luso-di-memoria.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I generatori sono una delle caratteristiche più avanzate di Python ma
anche meglio integrate con le altre parti del linguaggio e con una
sintassi molto simile ad altri costrutti. In particolare Python 3 fa un
utilizzo più esteso dei iteratori anche nelle funzioni base e semplifica
ulteriormente l’uso dei generatori. In questa presentazione illustrerei
il funzionamento delle funzioni generatrici e dei generatori partendo
dalle basi dell’iterazione. Analizzerei inoltre i vantaggi che i
generatori possono portare nella semplificazione del codice e nella
riduzione dell’uso di memoria, con degli esempi di codice e di misura
delle prestazioni e delle risorse utilizzate. Come esempio conclusivo
presenterei un modulo per il parsing di XPath, completamente basato sui
generatori.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="iterators"></category><category term="xpath"></category><category term="Python"></category><category term="generators"></category></entry><entry><title>Python's Dusty Corners (#182)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's Dusty Corners&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;The talk will be a brief overview of all the features in python that you
don't need to know about right up until the moment you do. The list
includes how comparisons work, descriptors, iterators, context managers,
namespaces, else clauses on for/while loops (suggested by Hettinger).
The narrative of the talk is that these are features that you don't need
and/or shouldn't use in your day-to-day code but that you need to keep
in the back of your mind because other people's code and the stdlib do
use them. As Alex Martelli pointed out in his wonderful talk
&amp;quot;Abstractions as Leverage&amp;quot; you can't successfully function at one level
of abstraction if you don't know what is going on at the next level
down. This talk is a whirlwind tour of the next level down.&lt;/p&gt;
</summary><category term="contextmanagers"></category><category term="descripters"></category><category term="else"></category><category term="iterators"></category><category term="namespaces"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Matt Harrison</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you should use
them? This hands-on tutorial will cover these intermediate subjects in
detail, by explaining the theory behind them then walking through
examples. It will also cover how to test such programs. The session will
conclude with some basic problems to work through.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing (45 min)&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;doctest&lt;/li&gt;
&lt;li&gt;brief code coverage intro&lt;/li&gt;
&lt;li&gt;other testing tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Programming (15 min)&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;Substitutes for above constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions (20 min)&lt;ul&gt;
&lt;li&gt;callables&lt;/li&gt;
&lt;li&gt;arguments (args, kw)&lt;/li&gt;
&lt;li&gt;mutable parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoping (10 min)&lt;/li&gt;
&lt;li&gt;Closures (5 min)&lt;/li&gt;
&lt;li&gt;Decorators (20 min)&lt;ul&gt;
&lt;li&gt;Simple decorators&lt;/li&gt;
&lt;li&gt;parameterized decorators&lt;/li&gt;
&lt;li&gt;mangling&lt;/li&gt;
&lt;li&gt;templates for decorators&lt;/li&gt;
&lt;li&gt;classmethod staticmethod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties (5 min)&lt;/li&gt;
&lt;li&gt;List comprehensions (10 min)&lt;/li&gt;
&lt;li&gt;Iterator pattern (5 min)&lt;/li&gt;
&lt;li&gt;Generators (15 min )&lt;/li&gt;
&lt;li&gt;Hands-on application (50 min)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="callables"></category><category term="closures"></category><category term="decorators"></category><category term="functionalprogramming"></category><category term="functions"></category><category term="generators"></category><category term="iterators"></category><category term="listcomprehensions"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-advanced"></category></entry></feed>