<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Properties</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 08 Aug 2021 00:00:00 +0000</lastBuildDate><item><title>PyOhio 2011: Squinting at Python Objects</title><link>https://pyvideo.org/pyohio-2011/pyohio-2011-squinting-at-python-objects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Squinting at Python Objects&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) &lt;strong&gt;getattr&lt;/strong&gt;() and
&lt;strong&gt;getattribute&lt;/strong&gt;(), the attempt to access obj.something can result in
arbitrary code execution. If you are wondering how your Python program
is using memory, this can result in a problem: each time you look to see
if something is there, it &lt;strong&gt;is&lt;/strong&gt;, because it is pulled in dynamically
the moment you look for it. In this talk, you will learn how to prod
Python objects gently, and hopefully learn their secrets - and their
memory usage - without actually invoking code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sat, 30 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011-squinting-at-python-objects.html</guid><category>PyOhio 2011</category><category>descriptors</category><category>getattr</category><category>getattribute</category><category>optimizing</category><category>properties</category><category>pyohio</category><category>pyohio2011</category></item><item><title>Customizing what happens when you assign an attribute</title><link>https://pyvideo.org/python-morsels/customizing-what-happens-when-you-assign-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to customize what happens when you assign to a specific attribute on your class instances? You can use a property with a setter.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-08:/python-morsels/customizing-what-happens-when-you-assign-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item><item><title>Making a read-only attribute</title><link>https://pyvideo.org/python-morsels/making-read-only-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to make a read-only attribute in Python, you can turn your attribute into a property that delegates to an attribute with almost the same name (but with an underscore prefix).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-03:/python-morsels/making-read-only-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item><item><title>Making an auto-updating attribute</title><link>https://pyvideo.org/python-morsels/making-auto-updating-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We don't use getter methods in Python, instead we use the property decorator to make make automatically updating attributes. Properties allow us to customize what happens when you access an attribute.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-04-20:/python-morsels/making-auto-updating-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item></channel></rss>