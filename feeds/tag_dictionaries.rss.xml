<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 21 Jul 2011 00:00:00 +0000</lastBuildDate><item><title>PyOhio 2010: Building your own kind of dictionary</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building your own kind of dictionary&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;My talk is based on a project that seemed very simple at first. I wanted
an object like the regular python dictionary, but with a few small
tweaks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;values for some keys should be restricted to elements of a set&lt;/li&gt;
&lt;li&gt;values for some keys should be restricted to instances of a type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, pretend I want a dictionary called favorites, and I want
the value for the &amp;quot;color&amp;quot; key to be any instance of my Color class.
Meanwhile, for the &amp;quot;movie&amp;quot; key, I want to make sure that the value
belongs to my set of movies.&lt;/p&gt;
&lt;p&gt;In the talk, I'll walk through how I used tests to validate my different
implementations until I came up with a winner.&lt;/p&gt;
&lt;p&gt;Unlike my talk last year on metaclass tomfoolery, and the year before
that on fun with decorators (and decorator factories) I'm hoping to make
this talk straightforward and friendly to beginning programmers.&lt;/p&gt;
&lt;p&gt;You'll see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how I use tests to solve a real-world problem&lt;/li&gt;
&lt;li&gt;a few little gotchas with the super keyword&lt;/li&gt;
&lt;li&gt;a little about how python works under the hood.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">W. Matthew Wilson</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html</guid><category>dict</category><category>dictionaries</category><category>pyohio</category><category>pyohio2010</category></item><item><title>Objects and classes in Python (and JavaScript)</title><link>https://pyvideo.org/europython-2011/objects-and-classes-in-python-and-javascript.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a well-thought out system for classes. Beginners can use it
without understanding it all. Experts can use it to produce code that is
both elegant and powerful (such as models and class-based views in
Django). Python classes can be used for many purposes.&lt;/p&gt;
&lt;p&gt;This tutorial arises from the author's experience in using classes to
solve problems, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add custom methods and attributes to objects that are, at root, just an integer&lt;/li&gt;
&lt;li&gt;Construct dictionaries whose values are functions&lt;/li&gt;
&lt;li&gt;Construct classes on-the-fly&lt;/li&gt;
&lt;li&gt;Implement JavaScript object semantics in Python (advanced topic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The outline syllabus is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review of the class statement in Python (and decorators)&lt;/li&gt;
&lt;li&gt;Subclassing built-in types such as int and tuple&lt;/li&gt;
&lt;li&gt;How to define classes without using a class statement&lt;/li&gt;
&lt;li&gt;How to define a dispatch dictionary using a class statement&lt;/li&gt;
&lt;li&gt;Metaclasses as syntactic sugar for class construction&lt;/li&gt;
&lt;li&gt;Metaclasses to provide new class semantics&lt;/li&gt;
&lt;li&gt;Review of JavaScript object semantics&lt;/li&gt;
&lt;li&gt;Using Python classes to implement JavaScript object semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Guido on the history of Python classes see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html"&gt;http://python-history.blogspot.com/2010/06/method-resolution-order.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is for Intermediate or Advanced Python programmers.
(Beginners will find it very hard going.) The aim of the course is to
explain exactly what happens when a class in constructed, and to learn
ways of using this knowledge.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Fine</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/objects-and-classes-in-python-and-javascript.html</guid><category>dictionaries</category><category>javascript</category><category>tutorial</category></item><item><title>Python's other collection types and algorithms</title><link>https://pyvideo.org/europython-2011/pythons-other-collection-types-and-algorithms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Dalke - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's impossible to use Python without learning about lists, dictionaries
and tuples, and most people have at least heard about sets. These four
collection types are so important and useful that Python has special
syntax for creating them.&lt;/p&gt;
&lt;p&gt;Fewer people know about Python's other built-in collection data types
and algorithms. A deque supports fast appends and pops from both ends
and is great for breath-first searches, the heapq module helps you
construct a priority queue on top of lists, and the bisect module is
handy for quick binary searches of an already sorted list.&lt;/p&gt;
&lt;p&gt;The defaultdict uses the dict &lt;strong&gt;missing&lt;/strong&gt; hook as a better solution to
setdefault, OrderedDict is a dictionary that preserves insertion order,
and Counter is a dictionary specialized for counting hashable objects. A
namedtuple is handy if you want to support both index and attribute
lookups for the same item, and a frozenset is a hashable form of a set
which can be used as keys in a dictionary or set.&lt;/p&gt;
&lt;p&gt;My talk will go over these 8 different classes and modules. I'll give
concrete examples of how to use them and why they are useful. The target
audience is intermediate programmers who are familiar with the Python's
standard data types and with data types in general, but who don't know
all of the functionality available in modern Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/pythons-other-collection-types-and-algorithms.html</guid><category>bisect</category><category>dictionaries</category><category>frozenset</category><category>heapq</category><category>learning</category><category>namedtuple</category><category>ordereddict</category></item></channel></rss>