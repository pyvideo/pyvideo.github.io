<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Parallel Python Analyzing Large Data Sets</title><link>https://pyvideo.org/pydata-dc-2016/parallel-python-analyzing-large-data-sets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Students will walk away with a high-level understanding of both parallel problems and how to reason about parallel computing frameworks. They will also walk away with hands-on experience using a variety of frameworks easily accessible from Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aron Ahmadia</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/parallel-python-analyzing-large-data-sets.html</guid><category>Data</category><category>parallel</category><category>sets</category></item><item><title>Mastering Team Play: Four powerful examples of composing Python tools (#184)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Team Play: Four powerful examples of composing Python tools&lt;/p&gt;
&lt;p&gt;Presented by Raymond Hettinger&lt;/p&gt;
&lt;p&gt;Starts with a quick review of the performance characteristics of major
individual tools in Python: bisect, heapq, lists, deques, sets,
frozensets, class structures, sorts, and weakreferences. Show how these
tools can be powerfully combined to create elegant solutions to four
hard problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Random sampling: when one data structure isn't enough. Discuss how
the nature of the problem dictates when to use one of two alternate
data structures.&lt;/li&gt;
&lt;li&gt;Ordered dictionaries: with the right compostion of dictionaries,
linked lists, and weak references, a dictionary can remember its
insertion order without any impact on its big-Oh running times.&lt;/li&gt;
&lt;li&gt;NFA to DFA conversion. The classic, but difficult, algorithm for
lexical analysis becomes simple when composing Python's dicts and
frozensets.&lt;/li&gt;
&lt;li&gt;Running median: the obvious approaches are horribly slow. The problem
centers around how to efficiently maintain sorted data while
advancing a large sliding window one value at a time. A list of
deques provides a dramatic and scalable improvement in running time.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</guid><category>bisect</category><category>dequeues</category><category>frozensets</category><category>heapq</category><category>lists</category><category>pycon</category><category>pycon2010</category><category>sets</category><category>sorts</category><category>weakreferences</category></item></channel></rss>