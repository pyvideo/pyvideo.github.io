<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andi-albrecht.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-15T00:00:00+00:00</updated><entry><title>-getrieben. Wer treibt eigentlich die Test-Entwicklung?</title><link href="https://pyvideo.org/pycon-de-2013/-getrieben-wer-treibt-eigentlich-die-test-entwic.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Andi Albrecht</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/-getrieben-wer-treibt-eigentlich-die-test-entwic.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In den letzten Jahren machen auch in der Python-Welt immer mehr
“getriebene” Entwicklungsmethoden die Runde, so zum Beispiel Test Driven
Development, Behavior Driven Development oder Feature Driven
Development. Kaum ist davon die Rede, kommen noch weitere Schlagworte
aus dem Bereich des Testens, wie Acceptance Test, Unit Test, Functional
Test oder Integration Test, dazu und die Verwirrung ist oftmals perfekt.
Verliert man in diesem Dschungel an Begriffen den Überblick, ist die
Gefahr gegeben, dass man das Testen entweder ganz lässt oder keine der
Methoden richtig anzuwenden.&lt;/p&gt;
&lt;p&gt;Der Vortrag gibt eine Ordnung für diese Begriffe und versucht dadurch
etwas mehr Licht ins Dickicht zu bringen. Dabei steht weniger die
lehrbuchartige Klassifizierung der Methoden im Vordergrund, sondern es
wird die Fragestellung verfolgt, wer eigentlich die Zielgruppe eines
Tests ist. Das können neben Entwicklern auch Qualitätssicherer,
Projektleiter und -Mitglieder, aber auch letztlich Kunden eines
Produktes sein. Wer “liest” also die Testergebnisse und in welcher Form
sollten die Ergebnisse vorliegen, damit sie nutzbar sind. Zusammen mit
einer Betrachtung der unterschiedlichen Test-Gegenstände wird die Wahl
der Test-Methode und die Implementierung der Tests klarer.&lt;/p&gt;
&lt;p&gt;Zu den vorgestellten Methoden werden beispielhaft Python-Test-Frameworks
wie zum Beispiel Selenium, das Robot-Framework und klassische
UnitTest-Frameworks vorgestellt. Anhand von kurzen Code-Beispielen wird
der Einsatz dieser Werkzeuge für bestimmte Methodiken verdeutlicht und
es wird gezeigt, wie auf Basis der Testergebnisse Berichte und Metriken
für die jeweiligen Zielgruppen generiert werden können.&lt;/p&gt;
</summary><category term="testing"></category></entry></feed>