<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_paul-kehrer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-02T00:00:00+00:00</updated><entry><title>Best Practices for Cryptography In Python</title><link href="https://pyvideo.org/pycon-au-2019/best-practices-for-cryptography-in-python.html" rel="alternate"></link><published>2019-08-02T00:00:00+00:00</published><updated>2019-08-02T00:00:00+00:00</updated><author><name>Paul Kehrer</name></author><id>tag:pyvideo.org,2019-08-02:pycon-au-2019/best-practices-for-cryptography-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Part of what makes Python great also brings challenges for cryptographic operations that need rigorous control of memory and CPU instructions. In this talk we'll discuss situations where Python is a poor fit as well as ones where it shines and learn how to work around some of the issues.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/best-practices-for-cryptography-in-python"&gt;https://2019.pycon-au.org/talks/best-practices-for-cryptography-in-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fri Aug  2 14:10:00 2019 at C3.6&lt;/p&gt;
</summary></entry><entry><title>Reliably Distributing Compiled Modules</title><link href="https://pyvideo.org/pycon-us-2016/paul-kehrer-reliably-distributing-compiled-modules-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Paul Kehrer</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/paul-kehrer-reliably-distributing-compiled-modules-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Paul Kehrer&lt;/p&gt;
&lt;p&gt;Shipping Python libraries is easy! ...until you want to use a C library. How do you easily and reliably deliver software to users when they may not have the libraries you depend on, or even a compiler? How do you handle the significant differences between linux, OS X, Windows, FreeBSD, and other platforms Python runs on?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Hitchhiker's Guide to TLS &amp; SSL</title><link href="https://pyvideo.org/pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html" rel="alternate"></link><published>2016-05-29T00:00:00+00:00</published><updated>2016-05-29T00:00:00+00:00</updated><author><name>lvh</name></author><id>tag:pyvideo.org,2016-05-29:pycon-us-2016/lvh-cory-benfield-glyph-hynek-schlawack-paul-kehrer-the-hitchhikers-guide-to-tls-ssl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: lvh, Cory Benfield, Glyph, Hynek Schlawack, Paul Kehrer&lt;/p&gt;
&lt;p&gt;Since the SSL/TLS vulnerabilities in recent years, the landscape has improved considerably.  However, there’s still a lot of knowledge necessary to use TLS in Python properly, and a lot of useful information for setting up and debugging TLS stacks that’s hard to come by.  Join the makers of PyOpenSSL, the standard library’s ssl module, requests/urllib3, Twisted, the former maintainer of a CA, and&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The State of Crypto in Python</title><link href="https://pyvideo.org/pycon-us-2014/the-state-of-crypto-in-python.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Jarret Raim</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/the-state-of-crypto-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There are a half-dozen major Python cryptography frameworks built on at
least three separate C implementations, each with their own strengths
and weaknesses and in various states of maintenance. This presentation
will review the current state of the art and discuss the future of
crypto in Python including a new library under development, PyPy support
and more.&lt;/p&gt;
</summary></entry><entry><title>What to do when you need crypto</title><link href="https://pyvideo.org/pycon-us-2015/what-to-do-when-you-need-crypto.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jarret Raim</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/what-to-do-when-you-need-crypto.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The cryptographic world doesn't lend itself to the typical developer
flow of learning while doing. Add that to the massive amount of bad or
outdated information on the web and many developers are lost or worse,
build insecure systems. This tutorial will introduce developers to
modern cryptography with an eye towards practical scenarios around
password management, encryption and key management.&lt;/p&gt;
</summary></entry><entry><title>Reliably Distributing Binary Modules</title><link href="https://pyvideo.org/pycon-za-2016/reliably-distributing-binary-modules.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Paul Kehrer</name></author><id>tag:pyvideo.org,2016-10-07:pycon-za-2016/reliably-distributing-binary-modules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping Python libraries is easy! ...until you want to use a C library.
How do you easily and reliably deliver software to users when they may
not have the libraries you depend on, or even a compiler? How do you
handle the significant differences between linux, OS X, Windows,
FreeBSD, and other platforms Python runs on?&lt;/p&gt;
&lt;p&gt;We'll walk through:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The requirements for building C modules in Python.&lt;/li&gt;
&lt;li&gt;Why those requirements contribute to bad UX and create barriers to
adoption.&lt;/li&gt;
&lt;li&gt;How wheels can be used to surmount many of these challenges.&lt;/li&gt;
&lt;li&gt;What kind of infrastructure is required to build these wheels.&lt;/li&gt;
&lt;li&gt;The advantages and potential disadvantages of binary distribution.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>