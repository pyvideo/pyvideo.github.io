<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - packaging</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_packaging.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Django Package Thunderdome: Is Your Package Worthy?</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--django-package-thunderdome--is-yo.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-09-05:/djangocon-us-2011/djangocon-2011--django-package-thunderdome--is-yo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Package Thunderdome: Is Your Package Worthy&lt;/p&gt;
&lt;p&gt;Audrey Roy, Daniel Greenfeld&lt;/p&gt;
&lt;p&gt;What makes a package useful? What is it about certain packages that
makes them must-haves for any project? I’ll go over topics like:
purpose, structure, docs, tests, availability on PyPI and
Github/Bitbucket, activity, and more. I …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Package Thunderdome: Is Your Package Worthy&lt;/p&gt;
&lt;p&gt;Audrey Roy, Daniel Greenfeld&lt;/p&gt;
&lt;p&gt;What makes a package useful? What is it about certain packages that
makes them must-haves for any project? I’ll go over topics like:
purpose, structure, docs, tests, availability on PyPI and
Github/Bitbucket, activity, and more. I will visit some of the most
useful grids on djangopackages.com and highlight my top package picks,
showing examples of what makes these top packages so great.&lt;/p&gt;
</content><category term="DjangoCon US 2011"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="packaging"></category></entry><entry><title>Python Packaging on the Enterprise</title><link href="https://pyvideo.org/europython-2013/python-packaging-on-the-enterprise.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Edward Easton</name></author><id>tag:pyvideo.org,2013-07-05:/europython-2013/python-packaging-on-the-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to discuss problems and solutions when implementing an
end-to- end Python environment for a big company.&lt;/p&gt;
&lt;p&gt;The term ‘Enterprise’ often has negative connotations in much of the
open- source world, usually along the lines of ‘expensive and bloated’.
In this case I’d like to use …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to discuss problems and solutions when implementing an
end-to- end Python environment for a big company.&lt;/p&gt;
&lt;p&gt;The term ‘Enterprise’ often has negative connotations in much of the
open- source world, usually along the lines of ‘expensive and bloated’.
In this case I’d like to use it for describing a systems environment
where the freedoms of a developer working at home with her laptop are
not always available or practical. For example, coding on the holodeck
of the Starship Enterprise.&lt;/p&gt;
&lt;p&gt;Big teams and codebases need tools that make it very easy for new
developers to get up and running writing code with the minimum of fuss.
Large software platforms needs tools to manage complex package
dependency graphs and release workflows. Also, production environments
don’t always have compilers or direct internet access so many of
Python’s standard packaging tools make it a bit tricky to get things
going in these regards.&lt;/p&gt;
&lt;p&gt;I’d like to present how we managed to solve a number of these problems
for a recent client, a task which happily culminated in much of the
software being open-sourced at &lt;a class="reference external" href="https://github.com/eeaston/pkglib"&gt;https://github.com/eeaston/pkglib&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Edit: The software also has numerous testing tools included which I’ll
demonstrate, including py.test fixtures for mongo, redis, pyramid and
generic servers, selenium webdriver and C/C++ code coverage and
profiling.&lt;/p&gt;
</content><category term="EuroPython 2013"></category><category term="packaging"></category><category term="jenkins"></category><category term="continuous-integration"></category><category term="systems-programming"></category><category term="sysadmin"></category></entry><entry><title>devpi: driving your packaging and testing needs</title><link href="https://pyvideo.org/europython-2013/devpi-driving-your-packaging-and-testing-needs.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Holger Krekel</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/devpi-driving-your-packaging-and-testing-needs.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="packaging"></category><category term="quality-assurance"></category><category term="testing"></category></entry><entry><title>Tools of the Trade: The Making of a Code Editor.</title><link href="https://pyvideo.org/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project. We have had to address:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cross platform GUI development.&lt;/li&gt;
&lt;li&gt;Cross platform packaging solutions for Python.&lt;/li&gt;
&lt;li&gt;Creating an interactive visual debugger.&lt;/li&gt;
&lt;li&gt;Integrating with iPython notebook.&lt;/li&gt;
&lt;li&gt;Integrating with various IoT MicroPython devices.&lt;/li&gt;
&lt;li&gt;Integrating with frameworks such as PyGame/PyGameZero and Flask.&lt;/li&gt;
&lt;li&gt;Automating cross platform testing.&lt;/li&gt;
&lt;li&gt;Researching and testing UX with a challenging user base.&lt;/li&gt;
&lt;li&gt;Accessibility for all.&lt;/li&gt;
&lt;li&gt;Internationalisation.&lt;/li&gt;
&lt;li&gt;Creating an inclusive, welcoming and supportive community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will explain why Mu was created, how Mu was created and, most
importantly, shares the decision making, technical research and
implementation details of Mu in the hope others can learn from our
mistakes, mis-steps and muck-ups.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Cross-Platform-Development"></category><category term="Development"></category><category term="Education"></category><category term="Packaging"></category><category term="failures/mistakes"></category></entry><entry><title>Zen of Python Dependency Management</title><link href="https://pyvideo.org/europython-2019/zen-of-python-dependency-management.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Justin Mayer</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/zen-of-python-dependency-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring reliably repeatable dependency installation has long been an
unsolved problem for many Python projects. Pinning dependencies via
setup.py and requirements.txt has historically been met with extra work
and unexpected results, particularly when managing the dependencies of
dependencies.&lt;/p&gt;
&lt;p&gt;Thanks to PEP 518, Python projects can now more …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ensuring reliably repeatable dependency installation has long been an
unsolved problem for many Python projects. Pinning dependencies via
setup.py and requirements.txt has historically been met with extra work
and unexpected results, particularly when managing the dependencies of
dependencies.&lt;/p&gt;
&lt;p&gt;Thanks to PEP 518, Python projects can now more easily manage
dependencies via the new pyproject.toml file specification. In its wake,
a number of useful tools have arisen that use this file to provide
enhanced dependency resolution, including Poetry, Hatch, and Pipenv.&lt;/p&gt;
&lt;p&gt;Attendees of this talk will take home the following knowledge and
skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to replace three files (setup.py, requirements.txt, and
MANIFEST.ini) with just one: pyproject.toml&lt;/li&gt;
&lt;li&gt;why dependency resolution is hard and why it matters&lt;/li&gt;
&lt;li&gt;how Poetry, Hatch, and Pipenv differ and when to use each&lt;/li&gt;
&lt;li&gt;why one might use a less magical alternative: pip-tools&lt;/li&gt;
&lt;li&gt;how to use pipx to isolate system-wide Python tools&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="Open-Source"></category><category term="Packaging"></category><category term="PyPi"></category></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://pyvideo.org/europython-2019/publish-a-perfect-python-package-on-pypi.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/publish-a-perfect-python-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;. Ensure your code will
work in different on different platforms! Document your code so people
won't ask you loads of questions! Finally, learn how avoid doing any of
this yourself.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should you package your code for PyPI?&lt;/li&gt;
&lt;li&gt;How to structure your project and your code, including why you need a
&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder!&lt;/li&gt;
&lt;li&gt;Discover what goes in your &lt;tt class="docutils literal"&gt;Pipfile&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and
why. Learn the difference between installing your library to use it,
and installing it to develop on it.&lt;/li&gt;
&lt;li&gt;Write tests for your project, and run them using Tox.&lt;/li&gt;
&lt;li&gt;Ensure your code will work in different on different platforms with
Continuous Integration!&lt;/li&gt;
&lt;li&gt;Document your code so people won't ask you loads of questions!&lt;/li&gt;
&lt;li&gt;How to actually get your code on PyPI using Twine.&lt;/li&gt;
&lt;li&gt;Finally, learn how avoid doing any of this yourself (or avoid doing
it twice) using CookieCutter templates.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="EuroPython 2019"></category><category term="Best Practice"></category><category term="Packaging"></category><category term="Python 3"></category></entry><entry><title>Best practices for production-ready Docker packaging</title><link href="https://pyvideo.org/europython-2020/best-practices-for-production-ready-docker-packaging.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/best-practices-for-production-ready-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An iterative packaging plan for your Python application&lt;/p&gt;
&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An iterative packaging plan for your Python application&lt;/p&gt;
&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 60 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?&lt;/p&gt;
&lt;p&gt;To help you quickly package your application in a production-ready way, this talk will give you a plan to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimization.&lt;/p&gt;
&lt;p&gt;To make this process more concrete, along the way you'll also learn some of the techniques needed to build production-ready images:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Running as a non-root, for increased security.&lt;/li&gt;
&lt;li&gt;Debugging C crashes with faulthandler.&lt;/li&gt;
&lt;li&gt;Faster startup with pre-compiled .pycs.&lt;/li&gt;
&lt;li&gt;Smaller images by disabling pip caching.&lt;/li&gt;
&lt;li&gt;Avoiding Alpine Linux.&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the talk you'll also get some resources to teach you even more best practices that can't be fit in a 30-minute talk.&lt;/p&gt;
&lt;p&gt;This talk is for Python programmers who know the basics of Docker packaging, and need to run the resulting images in a production environment.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="DevOps general"></category><category term="Docker"></category><category term="Packaging"></category><category term="Security"></category></entry><entry><title>Building reproducible distributed applications at scale</title><link href="https://pyvideo.org/europython-2020/building-reproducible-distributed-applications-at-scale.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Fabian Höring</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/building-reproducible-distributed-applications-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging in Python is hard. Packaging is particularly hard when code needs to run in a distributed computing environment where it is difficult to know what runs where and which parts of the code are available to run there.&lt;/p&gt;
&lt;p&gt;In this talk we will present different ways to ship …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging in Python is hard. Packaging is particularly hard when code needs to run in a distributed computing environment where it is difficult to know what runs where and which parts of the code are available to run there.&lt;/p&gt;
&lt;p&gt;In this talk we will present different ways to ship Python code to a compute cluster, what Python's &amp;quot;pickling&amp;quot; feature has to do with this, what self contained executables are and the challenges we met when shipping Python code to a cluster with 1000s of nodes running 1000s of jobs like TensorFlow or Spark.&lt;/p&gt;
&lt;p&gt;As an example, we will show how one can run a PySpark job on top of S3 storage using PEX as a self contained executable artifact. Finally we will explain how those ideas generalize for different Jobs (like Tensorflow, Dask), different virtual environments (like Anaconda or vanilla Python virtual envs) and different distributed storage's (like S3 or HDFS).&lt;/p&gt;
&lt;p&gt;The auditor will get an overview of the challenges of Python packaging for distributed applications and see code samples that can be applied in his own project.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Big Data"></category><category term="Distributed Systems"></category><category term="Packaging"></category><category term="Virtual Env"></category></entry><entry><title>Difficulties of Python code development:packages,virtualenvs and package mangers</title><link href="https://pyvideo.org/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Michał Wodyński</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Develop your code effectively with well chosen tools&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development.&lt;/dt&gt;
&lt;dd&gt;After that we will jump to the topic of virtualenvs and …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Develop your code effectively with well chosen tools&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development.&lt;/dt&gt;
&lt;dd&gt;After that we will jump to the topic of virtualenvs and  popular tools that are used for managing them. I will explain what is purpose of the virtualenvs in Python and why we should use them.
Finally we will focus on the most important topic without which development is not possible – package mangers. Package managers it is wide topic in Python world. There is many package mangers and  currently we have tools like pip, pipenv or poetry but it is not obvious which of them we should use in first place. Which of them are recommended to use? What are prons and cons of certain package mangers? Is there any other not well known packages mangers? How package mangers are packaging Python code? Which of the package mangers are good for data scientists? Is your package manger is resolving dependencies?
This questions can appear especially when you are beginner and just to want start working with Python. Unfortunately form the beginning you must face the problem which of the package manger you should use. In this presentation I will answer all of this questions. I will list popular package mangers and some not known. I will show differences and which of them are best for which case. Also I will explain differences between packages that are used by different packages mangers. If you are interested in code development and package mangers or you are just confused which of them you should use this presentation is definitely for you. During this presentation I will answer all questions and I will wipe out all doubts about packages, package mangers and virtualenvs.&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Beginners"></category><category term="Conda / conda forge"></category><category term="Development"></category><category term="Packaging"></category><category term="Virtual Env"></category></entry><entry><title>Lessons from the Trenches: rewriting and re-releasing virtualenv</title><link href="https://pyvideo.org/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining this project became increasingly more troublesome, to the point where, we had more than 500 open issues at one point. In July 2019, I started working from scratch on a rewrite, with the goal of not just increasing the project's maintainability, but also to make it faster and add some new features that were just impossible or too hard to do in the existing code base. Fast forward six months to January 2020, when we released the first beta, with the first full release coming out on 10th February. It took a bit more than a month to squash all the open bugs tickets, but April started without any remaining open bug tickets. This talk will cover the lessons I've learned while on this journey.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Packaging"></category><category term="Virtual Env"></category><category term="python"></category></entry><entry><title>Writing Extensions and Bindings for GPU made Easy</title><link href="https://pyvideo.org/europython-2020/writing-extensions-and-bindings-for-gpu-made-easy.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Krishna Kanta Singh</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-extensions-and-bindings-for-gpu-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Bindings for C and CUDA code and Packaging it with setup.py in 30 min or less&lt;/p&gt;
&lt;p&gt;As Deep Learning Engineer and Researcher we are always trying to optimize some bottleneck computation in our programs. Sometimes we are faced with situations when scientific libraries like NumPy, SciPy aren't …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Bindings for C and CUDA code and Packaging it with setup.py in 30 min or less&lt;/p&gt;
&lt;p&gt;As Deep Learning Engineer and Researcher we are always trying to optimize some bottleneck computation in our programs. Sometimes we are faced with situations when scientific libraries like NumPy, SciPy aren't just cutting it or worse there are no libraries that implement the esoteric function on our expensive GPU hardware. Writing Custom C and Cuda Extension becomes an important skill and necessity for applications that require really fast computation.&lt;/p&gt;
&lt;p&gt;In this talk, we go through a detailed example of image search on billions of items, we write custom C and Cuda kernel for distance computation and learn how to connect them seamlessly with our python codebase. We compare methods for writing these extensions and bindings for python in terms of both speed and ease of use. Finally, we make it all work together by hacking the setup.py file for easy deployment and sharing of the&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="C-Languages"></category><category term="Data Science"></category><category term="Deep Learning"></category><category term="GPU"></category><category term="Packaging"></category></entry><entry><title>Workshop: Deep Dive into the Wheels of Packaging Using a Flask App</title><link href="https://pyvideo.org/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html" rel="alternate"></link><published>2021-12-04T00:00:00+00:00</published><updated>2021-12-04T00:00:00+00:00</updated><author><name>Alexander Hultner</name></author><id>tag:pyvideo.org,2021-12-04:/flaskcon-2021/workshop-deep-dive-into-the-wheels-of-packaging-using-a-flask-app.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexander has contributed much Flask content over the years and is a consultant at Hultnér Technologies&lt;/p&gt;
</content><category term="FlaskCon 2021"></category><category term="flask"></category><category term="packaging"></category><category term="workshop"></category></entry><entry><title>Lightning talks</title><link href="https://pyvideo.org/kiwi-pycon-2009/lightning-talks.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Morris Jones</name></author><id>tag:pyvideo.org,2009-11-07:/kiwi-pycon-2009/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Morris Jones (Simple robot using python on a wifi router)&lt;/li&gt;
&lt;li&gt;John Graves (Voice interaction)&lt;/li&gt;
&lt;li&gt;Charles Manning (A noob does ctypes)&lt;/li&gt;
&lt;li&gt;Raazesh Sainudiin (Computational Statistical Laboratories with SAGE
Notebook Server)&lt;/li&gt;
&lt;li&gt;Juergen Brendel (WSGI is easy)&lt;/li&gt;
&lt;li&gt;Michael Hoppe (Basic data acquisition and analysis)&lt;/li&gt;
&lt;li&gt;Carl Cerecke (A faster, cleaner goto …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Morris Jones (Simple robot using python on a wifi router)&lt;/li&gt;
&lt;li&gt;John Graves (Voice interaction)&lt;/li&gt;
&lt;li&gt;Charles Manning (A noob does ctypes)&lt;/li&gt;
&lt;li&gt;Raazesh Sainudiin (Computational Statistical Laboratories with SAGE
Notebook Server)&lt;/li&gt;
&lt;li&gt;Juergen Brendel (WSGI is easy)&lt;/li&gt;
&lt;li&gt;Michael Hoppe (Basic data acquisition and analysis)&lt;/li&gt;
&lt;li&gt;Carl Cerecke (A faster, cleaner goto statement)&lt;/li&gt;
&lt;li&gt;Douglas Bagnall (Booki, Objavi, Espri: the FLOSS Manuals publishing
suite)&lt;/li&gt;
&lt;li&gt;Peter Harrison (Introduction to Autonomous Systems)&lt;/li&gt;
&lt;li&gt;Jim Tittsler (Educational Content Packaging)&lt;/li&gt;
&lt;li&gt;David Hood (Little lies to tell when teaching Python Programming)&lt;/li&gt;
&lt;li&gt;Dylan Jay (How to host Python app for $20 in 20mins -
collective.hostout)&lt;/li&gt;
&lt;li&gt;Greg Hewgill (PSIL - Python S-expression Intermediate Language)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</content><category term="Kiwi PyCon 2009"></category><category term="lightning talks"></category><category term="ctypes"></category><category term="flossmanuals"></category><category term="goto"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="packaging"></category><category term="psil"></category><category term="robot"></category><category term="wsgi"></category></entry><entry><title>The Packaging Lifecycle with Poetry</title><link href="https://pyvideo.org/kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html" rel="alternate"></link><published>2019-08-25T00:00:00+00:00</published><updated>2019-08-25T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2019-08-25:/kiwi-pycon-2019/the-packaging-lifecycle-with-poetry.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Right now is an interesting time in the land of Python packaging; there are a lot of ideas flying around about the correct way to package, develop and publish your code. Poetry is one thread in this conversation.&lt;/p&gt;
</content><category term="Kiwi PyCon 2019"></category><category term="poetry"></category><category term="Packaging"></category></entry><entry><title>PyConAU 2010: Don't Break It: Continuous Integration &amp; Deployment</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Benno Rice</name></author><id>tag:pyvideo.org,2010-06-26:/pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don't Break It: Continuous Integration &amp;amp; Deployment&lt;/p&gt;
&lt;p&gt;Presented by Benno Rice&lt;/p&gt;
&lt;p&gt;So you've developed your application, it appears to work and you may
even have some tests to back that up. Now what?&lt;/p&gt;
&lt;p&gt;One part of software development that tends to receive not nearly enough
attention is the process of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don't Break It: Continuous Integration &amp;amp; Deployment&lt;/p&gt;
&lt;p&gt;Presented by Benno Rice&lt;/p&gt;
&lt;p&gt;So you've developed your application, it appears to work and you may
even have some tests to back that up. Now what?&lt;/p&gt;
&lt;p&gt;One part of software development that tends to receive not nearly enough
attention is the process of deploying, supporting and maintaining your
code in production. This demonstration will give an overview of using
tools such as Hudson, nose, stdeb and freshen to automate the testing,
packaging, deployment and verification of production software.&lt;/p&gt;
</content><category term="PyCon AU 2010"></category><category term="agile"></category><category term="architecture"></category><category term="packaging"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="testing"></category></entry><entry><title>PyConAU 2010: Esky: keep your frozen apps fresh</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Ryan F Kelly</name></author><id>tag:pyvideo.org,2010-06-26:/pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esky: keep your frozen apps fresh&lt;/p&gt;
&lt;p&gt;Presented by Ryan F Kelly&lt;/p&gt;
&lt;p&gt;Esky (&lt;a class="reference external" href="http://pypi.python.org/pypi/esky/"&gt;http://pypi.python.org/pypi/esky/&lt;/a&gt;) is an auto-update framework for
frozen Python applications, designed to be simple to use while
guaranteeing the safety of your app in case of failed or partial
updates. It provides easy …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esky: keep your frozen apps fresh&lt;/p&gt;
&lt;p&gt;Presented by Ryan F Kelly&lt;/p&gt;
&lt;p&gt;Esky (&lt;a class="reference external" href="http://pypi.python.org/pypi/esky/"&gt;http://pypi.python.org/pypi/esky/&lt;/a&gt;) is an auto-update framework for
frozen Python applications, designed to be simple to use while
guaranteeing the safety of your app in case of failed or partial
updates. It provides easy support for differential updates and is
compatible with py2exe, py2app, cx-freeze and bbfreeze.&lt;/p&gt;
&lt;p&gt;This talk will give an overview of esky's features, and show how to
extend an existing frozen application with auto-update support.&lt;/p&gt;
</content><category term="PyCon AU 2010"></category><category term="esky"></category><category term="packaging"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>Python Packages</title><link href="https://pyvideo.org/pycon-de-2013/python-packages.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Daniel Hepper</name></author><id>tag:pyvideo.org,2013-10-17:/pycon-de-2013/python-packages.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;setup.py, PyPI, easy_install, pip, distutils, setuptools, virtualenv -
wer ein Paket nutzen oder den eigenen Code als Paket verteilen will muss
sich durch einen Dschungel von Modulen und Werkzeugen kämpfen. Dieser
Vortrag bringt Licht ins Dunkel und stellt aktuelle Best Practices für
die Verwendung und Erstellung von Python-Paketen vor …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;setup.py, PyPI, easy_install, pip, distutils, setuptools, virtualenv -
wer ein Paket nutzen oder den eigenen Code als Paket verteilen will muss
sich durch einen Dschungel von Modulen und Werkzeugen kämpfen. Dieser
Vortrag bringt Licht ins Dunkel und stellt aktuelle Best Practices für
die Verwendung und Erstellung von Python-Paketen vor.&lt;/p&gt;
</content><category term="PyCon DE 2013"></category><category term="packaging"></category><category term="pip"></category><category term="pypi"></category><category term="setuptools"></category><category term="virtualenv"></category></entry><entry><title>devpi: driving packaging and testing needs</title><link href="https://pyvideo.org/pycon-de-2013/devpi-driving-packaging-and-testing-needs.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Holger Krekel</name></author><id>tag:pyvideo.org,2013-10-15:/pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;devpi provides both a private pypi server, a self-updating
pypi.python.org package cache, and work flow commands for uploading,
testing and installing packages. This talk shows some example scenarios
and discusses the unique feature of seemlessly &amp;quot;inheriting&amp;quot; the
pypi.python.org packages into your private index. We'll also …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;devpi provides both a private pypi server, a self-updating
pypi.python.org package cache, and work flow commands for uploading,
testing and installing packages. This talk shows some example scenarios
and discusses the unique feature of seemlessly &amp;quot;inheriting&amp;quot; the
pypi.python.org packages into your private index. We'll also look into
how you can perform testing of a package before you push a release to
the public index or your company-specific private index.&lt;/p&gt;
</content><category term="PyCon DE 2013"></category><category term="packaging"></category><category term="qa"></category><category term="testing"></category></entry><entry><title>Managing large-scale ML pipelines with MLflow and serverless computing.</title><link href="https://pyvideo.org/pycon-italia-2022/managing-large-scale-ml-pipelines-with-mlflow-and-serverless-computing.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>ilyas chaoua</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/managing-large-scale-ml-pipelines-with-mlflow-and-serverless-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing large-scale Machine Learning pipelines with MLflow and
serverless computing. - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;MLOps aims to manage the machine learning (ML) lifecycle including
experimentation, reproducibility, deployment, and model registry. Come
to discover how in Vedrai - one of the top AI startups in Europe - we
enhance and maintain ML pipelines …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing large-scale Machine Learning pipelines with MLflow and
serverless computing. - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;MLOps aims to manage the machine learning (ML) lifecycle including
experimentation, reproducibility, deployment, and model registry. Come
to discover how in Vedrai - one of the top AI startups in Europe - we
enhance and maintain ML pipelines models in production reliably and
efficiently using MLOps. Problem:&lt;/p&gt;
&lt;p&gt;One difficulty of employing Machine Learning (ML) within organizations
is managing the model’s lifecycle. Moving from experimenting to
deployment in production environments is operated by different steps:
Preparing and Analysing Data, Training, Deployment, Monitoring, and
Governance of ML models. So, it is crucial to possess a platform to
manage and organize the ML lifecycle.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;In Vedrai, we combined the strength of the MLflow framework and the
resilience of AWS serverless services to manage, deploy, and scale our
ML models in production. MLflow is an open-source framework for tracking
the entire ML lifecycle from training to deployment. Among the
functions, it offers model tracking, packaging, and serving. Whereas,
deploying ML applications is an infrastructure affair that needs to be
scalable with minimum server management, which makes AWS serverless
services a great choice.&lt;/p&gt;
&lt;p&gt;Value:&lt;/p&gt;
&lt;p&gt;MLflow enforces the model’s reproducibility and robustness at the same
time allowing more centralized experimentation. AWS serverless services
allow training and inferencing pipelines to run without provisioning or
managing servers while only paying for the time it takes to run.&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;State of the art of MLOps.&lt;/li&gt;
&lt;li&gt;Record and query experiments with MLflow Tracking.&lt;/li&gt;
&lt;li&gt;Package data science code with MLflow Projects.&lt;/li&gt;
&lt;li&gt;Store ML models with MLflow Models Registry.&lt;/li&gt;
&lt;li&gt;Deploy ML models in the AWS environment.&lt;/li&gt;
&lt;li&gt;Future MLOps challenges.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speaker: ilyas chaoua&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="architecture"></category><category term="aws"></category><category term="best practice"></category><category term="deep learning"></category><category term="devops"></category><category term="docker"></category><category term="infrastructure"></category><category term="machine learning"></category><category term="open source"></category><category term="operations"></category><category term="packaging"></category><category term="performance"></category><category term="scaling"></category></entry><entry><title>PyCon 2009: How to Build Applications Linux Distributions will Package (#78)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:/pycon-us-2009/pycon-2009--how-to-build-applications-linux-distr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty
application that makes people's lives easier you know the truly hard
part is convincing others to use it. One way to increase the number of
people installing your software is to convince Linux distributions to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: no audio first 1.5m] If you've ever created a nifty
application that makes people's lives easier you know the truly hard
part is convincing others to use it. One way to increase the number of
people installing your software is to convince Linux distributions to
package your software so that their end users can install by using the
system tools they're used to. One way of convincing them is by making
your application easy to package.&lt;/p&gt;
</content><category term="PyCon US 2009"></category><category term="linux"></category><category term="packaging"></category><category term="pycon"></category><category term="pycon2009"></category></entry><entry><title>Cross platform application development and distribution (#116)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--cross-platform-application-developmen.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Nadia Alramli</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cross platform application development and distribution&lt;/p&gt;
&lt;p&gt;Presented by Stani Michiels and Nadia Alramli&lt;/p&gt;
&lt;p&gt;You think Python gives you native cross platform applications for free?
Think twice. Are you interested in distributing your application to
other platforms but not sure how?&lt;/p&gt;
&lt;p&gt;We will give tips and examples on how to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cross platform application development and distribution&lt;/p&gt;
&lt;p&gt;Presented by Stani Michiels and Nadia Alramli&lt;/p&gt;
&lt;p&gt;You think Python gives you native cross platform applications for free?
Think twice. Are you interested in distributing your application to
other platforms but not sure how?&lt;/p&gt;
&lt;p&gt;We will give tips and examples on how to enhance the native feel of your
application: notifications, registration of file types and more. The
talk will also help you to avoid common pitfalls and provides solutions
for designing cross platform user interfaces. (Although we use wxPython
as an example, the principles are valid for other toolkits as well.)
We'll show you where to start if you want to distribute your application
to different platforms, briefly discussing tools like py2exe, py2app and
Debian/Ubuntu packaging ecosystem. This talk is based on our experience
from developing Phatch (Photo Batch Processor) and SPE (Python Editor).&lt;/p&gt;
</content><category term="PyCon US 2010"></category><category term="crossplatform"></category><category term="packaging"></category><category term="py2app"></category><category term="py2exe"></category><category term="pycon"></category><category term="pycon2010"></category><category term="wxpython"></category></entry><entry><title>The state of Packaging (#63)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Tarek Ziadé</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools and Pip added great features on the top of this
: the ability to fetch PyPI to install a project and its dependencies.
So you can &amp;quot;easy_install A-Program&amp;quot; and everything is done
automatically for you.&lt;/p&gt;
&lt;p&gt;But all these features have shown the flaws and limitations of the
current Distutils design, and the urgency to make it evolve with respect
to the existing OS-specific packaging systems.&lt;/p&gt;
&lt;p&gt;This talk will detail the biggest issues that need to be solved, and the
work that is being done. It will end up with a presentation of the
Distutils roadmap, and an overview of the Distribute project, the
Setuptools replacer.&lt;/p&gt;
</content><category term="PyCon US 2010"></category><category term="distribute"></category><category term="distutils"></category><category term="easy_install"></category><category term="packaging"></category><category term="pip"></category><category term="pycon"></category><category term="pycon2010"></category><category term="pypi"></category><category term="setuptools"></category></entry><entry><title>Conda: A Cross Platform Package Manager for any Binary Distribution</title><link href="https://pyvideo.org/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the problems that have plagued Python packaging in the past, followed by
a demonstration of its features.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the issues that have plagued packaging in the Python
ecosystem in the past, and discuss how Conda solves these problems. We
will show how to use conda to manage multiple environments. Finally, we
will look at how to build your own conda packages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the packaging problem? We will briefly look at the history of
the problem and the various solutions to it. There are two sides to
the packaging problem: the problem of installing existing packages
and the problem of building packages to be installed. We look at the
history of distutils, setuptools, distribute, and pip, the some of
the problems they solved, and issues that arose, particularly for the
scientific Python community.&lt;/li&gt;
&lt;li&gt;We will look at the conda package format, the design decisions that
guided the format, and the implications of those decisions. A conda
package is a bz2 compressed tarfile of all the files installed in a
prefix, along with a metadata directory for the package. A conda
package is typically installed by hard linking these files into the
install prefix. Conda packages should be relocatable, so that they
can be installed into any prefix. This allows conda packages to be
installed into many virtual environments at once. A conda package is
not Python specific.&lt;/li&gt;
&lt;li&gt;We will look at how basic commands for installation and environment
management. Conda uses a SAT solver to solve package dependency
constraints, which is a simple, rigorous, and modern way to ensure
that the set of packages that are installed are consistent with one
another.&lt;/li&gt;
&lt;li&gt;Conda has an extensive build framework which allows anybody to build
their own conda packages. We will show how to use these tools and how
to upload them to Binstar, a free packaging hosting service.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="SciPy 2014"></category><category term="conda"></category><category term="packaging"></category></entry><entry><title>Reproducible, Relocatable, Customizable Builds and Packaging with HashDist Part1</title><link href="https://pyvideo.org/scipy-2014/reproducible-relocatable-customizable-builds-an.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Andy Terrel</name></author><id>tag:pyvideo.org,2014-07-09:/scipy-2014/reproducible-relocatable-customizable-builds-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk introduces HashDist, a critical component of the scientific
software development workflow. HashDist enables highly customizable,
source-driven, and reproducible builds for scientific software stacks.
HashDist builds can be made relocatable, allowing the easy
redistribution of binaries on all three major operating systems as well
as cloud and supercomputing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk introduces HashDist, a critical component of the scientific
software development workflow. HashDist enables highly customizable,
source-driven, and reproducible builds for scientific software stacks.
HashDist builds can be made relocatable, allowing the easy
redistribution of binaries on all three major operating systems as well
as cloud and supercomputing platforms.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing scientific software is a continuous balance between not
reinventing the wheel and getting fragile codes to interoperate with one
another. Binary software distributions such as Anaconda provide a robust
starting point for many scientific software packages, but this solution
alone is insufficient for many scientific software developers. HashDist
provides a critical component of the development workflow, enabling
highly customizable, source-driven, and reproducible builds for
scientific software stacks, available from both the IPython Notebook and
the command line.&lt;/p&gt;
&lt;p&gt;To address these issues, the Coastal and Hydraulics Laboratory at the US
Army Engineer Research and Development Center has funded the development
of HashDist in collaboration with Simula Research Laboratories and the
University of Texas at Austin. HashDist is motivated by a functional
approach to package build management, and features intelligent caching
of sources and builds, parametrized build specifications, and the
ability to interoperate with system compilers and packages. HashDist
enables the easy specification of &amp;quot;software stacks&amp;quot;, which allow both
the novice user to install a default environment and the advanced user
to configure every aspect of their build in a modular fashion. As an
advanced feature, HashDist builds can be made relocatable, allowing the
easy redistribution of binaries on all three major operating systems as
well as cloud, and supercomputing platforms. As a final benefit, all
HashDist builds are reproducible, with a build hash specifying exactly
how each component of the software stack was installed.&lt;/p&gt;
&lt;p&gt;This talk will feature an introduction to the problem of packaging
Python-based scientific software, a discussion of the basic tools
available to scientific Python developers, and a detailed discussion and
demonstration of the HashDist package build manager.&lt;/p&gt;
&lt;p&gt;The HashDist documentation is available from:
&lt;a class="reference external" href="http://hashdist.readthedocs.org/en/latest/"&gt;http://hashdist.readthedocs.org/en/latest/&lt;/a&gt; HashDist is currently hosted
at: &lt;a class="reference external" href="https://github.com/hashdist/hashdist"&gt;https://github.com/hashdist/hashdist&lt;/a&gt;&lt;/p&gt;
</content><category term="SciPy 2014"></category><category term="packaging"></category><category term="reproducible research"></category></entry></feed>