<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_chipy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-03-10T00:00:00+00:00</updated><entry><title>ChiPy Python Mentorship</title><link href="https://pyvideo.org/chipy/chipy-python-mentorship.html" rel="alternate"></link><published>2016-03-10T00:00:00+00:00</published><updated>2016-03-10T00:00:00+00:00</updated><author><name>Tathagata</name></author><id>tag:pyvideo.org,2016-03-10:chipy/chipy-python-mentorship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This April we will the start the fourth round of ChiPy's mentorship program. We have worked with more than 70 developers till now, and some of them have landed exciting jobs by showcasing their mentorship projects. I'll give a quick view of the program and what are we looking for in a mentor and a mentee.
FAQ: &lt;a class="reference external" href="http://www.chipy.org/pages/sigs/mentorship/"&gt;http://www.chipy.org/pages/sigs/mentorship/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python-based data science to understand knowledge discovery and expertise: A science perspective</title><link href="https://pyvideo.org/chipy/python-based-data-science-to-understand-knowledge-discovery-and-expertise-a-science-perspective.html" rel="alternate"></link><published>2016-03-10T00:00:00+00:00</published><updated>2016-03-10T00:00:00+00:00</updated><author><name>Daniel E. Acuna</name></author><id>tag:pyvideo.org,2016-03-10:chipy/python-based-data-science-to-understand-knowledge-discovery-and-expertise-a-science-perspective.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All kinds of businesses are using data science and machine learning to understand themselves, lowering costs, engineering better products, and improving customer experiences. Similarly, we use data science to improve science itself, understanding how scientific topics are discovered and modeling institutional expertise. In our work, we use a combination of Python-powered big data analytics and web-based tools to achieve this goal, including pyspark (&lt;a class="reference external" href="http://spark.apache.org"&gt;http://spark.apache.org&lt;/a&gt;), scikit-learn (&lt;a class="reference external" href="http://http://scikit-learn.org"&gt;http://http://scikit-learn.org&lt;/a&gt;), Django (&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;https://www.djangoproject.com/&lt;/a&gt;), Celery (&lt;a class="reference external" href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;), and or-tools (&lt;a class="reference external" href="https://developers.google.com/optimization"&gt;https://developers.google.com/optimization&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First, we will present the infrastructure behind Scholarfy, a recommender system for massive scientific conferences (&lt;a class="reference external" href="http://www.scholarfy.net"&gt;http://www.scholarfy.net&lt;/a&gt;). We will also present a machine learning approach to automatically match expert scientific reviewers to research proposals (&lt;a class="reference external" href="http://pr.scienceofscience.org"&gt;http://pr.scienceofscience.org&lt;/a&gt;). Finally, we will present the work behind our award-winning visualization, World’s Science Map (&lt;a class="reference external" href="http://map.scienceofscience.org"&gt;http://map.scienceofscience.org&lt;/a&gt;), where we modeled the institutional expertise, collaboration network, and funding of all institutions in the world. At the end of our talk, we will argue that Python-powered data science can improve not only businesses but also science, making it more agile and accurate.&lt;/p&gt;
</summary></entry><entry><title>The wonder and the horror of the mock module</title><link href="https://pyvideo.org/chipy/the-wonder-and-the-horror-of-the-mock-module.html" rel="alternate"></link><published>2016-03-10T00:00:00+00:00</published><updated>2016-03-10T00:00:00+00:00</updated><author><name>Stephen Hoover</name></author><id>tag:pyvideo.org,2016-03-10:chipy/the-wonder-and-the-horror-of-the-mock-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;mock&amp;quot; module is a powerful (and fun!) tool for unit testing, and it comes built in to the the Python standard library. I'll give an overview of some of the more useful features of the module, and finish with a warning about the dangers of too much mockery.&lt;/p&gt;
</summary></entry><entry><title>A Talk on Giving a Pythonic Talk</title><link href="https://pyvideo.org/chipy/a-talk-on-giving-a-pythonic-talk.html" rel="alternate"></link><published>2015-03-12T00:00:00+00:00</published><updated>2015-03-12T00:00:00+00:00</updated><author><name>Catherine Vongsathorn</name></author><id>tag:pyvideo.org,2015-03-12:chipy/a-talk-on-giving-a-pythonic-talk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Xan Vongsathorn and Catherine Vongsathorn will be giving a talk about
talks. It turns out that many of python's core principles apply very
well to presentations -- or for that matter, communication more
generally -- which may be why we like python so much. Xan and Catherine
want to get people excited not only about giving talks but also about
using them to &lt;em&gt;actually communicate&lt;/em&gt;. You don’t have to be an expert,
nor do you need natural talent, to give a good talk; this metatalk will
discuss guiding principles that set effective presentations apart and
can be applied to any technical talk.&lt;/p&gt;
</summary></entry><entry><title>From Code to Coffee Table with Blender and Sly</title><link href="https://pyvideo.org/chipy/from-code-to-coffee-table-with-blender-and-sly.html" rel="alternate"></link><published>2015-03-12T00:00:00+00:00</published><updated>2015-03-12T00:00:00+00:00</updated><author><name>Matt Meshulam</name></author><id>tag:pyvideo.org,2015-03-12:chipy/from-code-to-coffee-table-with-blender-and-sly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been developing a Python library for turning 3D models into
CNC-machinable parts. I will demonstrate the basics of the library and
how I used it to build a wood coffee table.&lt;/p&gt;
</summary></entry><entry><title>Django+Elasticsearch+Haystack to Search PDFs and Such</title><link href="https://pyvideo.org/chipy/djangoelasticsearchhaystack-to-search-pdfs-and.html" rel="alternate"></link><published>2015-02-12T00:00:00+00:00</published><updated>2015-02-12T00:00:00+00:00</updated><author><name>Joe Jasinski</name></author><id>tag:pyvideo.org,2015-02-12:chipy/djangoelasticsearchhaystack-to-search-pdfs-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to search the contents of uploaded PDFs, Docs, and
other document formats on your website? Django Haystack (with the
Elasticsearch search backend) is a great way to add search to your site,
but it does not support full document indexing out of the box. I'd like
to share a solution that I cobbled together to allow this combination of
tools the ability to search document contents.&lt;/p&gt;
</summary></entry><entry><title>REST on Django</title><link href="https://pyvideo.org/chipy/rest-on-django.html" rel="alternate"></link><published>2015-02-12T00:00:00+00:00</published><updated>2015-02-12T00:00:00+00:00</updated><author><name>Adam Bain</name></author><id>tag:pyvideo.org,2015-02-12:chipy/rest-on-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A quick overview through the components that make up Django REST
Framework with a dive into a sample project.&lt;/p&gt;
</summary></entry><entry><title>A lightning look at O'Reilly's Python books</title><link href="https://pyvideo.org/chipy/a-lightning-look-at-oreillys-python-books.html" rel="alternate"></link><published>2014-12-11T00:00:00+00:00</published><updated>2014-12-11T00:00:00+00:00</updated><author><name>Tanya Schlusser</name></author><id>tag:pyvideo.org,2014-12-11:chipy/a-lightning-look-at-oreillys-python-books.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wouldn't it be awesome if ChiPy wrote its own book? We'd be able to get
BEvERages for weeks, maybe months on the royalty! If so, we'd need to
see what's already out there.&lt;/p&gt;
&lt;p&gt;This lightning talk takes a look at O'Reilly's Python books using
requests and BeautifulSoup, with a little of scipy's hierarchical
clustering on the book descriptions. It is presented in an iPython
notebook.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Python For Humans</title><link href="https://pyvideo.org/chipy/python-for-humans-3.html" rel="alternate"></link><published>2014-12-11T00:00:00+00:00</published><updated>2014-12-11T00:00:00+00:00</updated><author><name>Kenneth Reitz</name></author><id>tag:pyvideo.org,2014-12-11:chipy/python-for-humans-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We’ll go over where these APIs went wrong and learn about strong
and elegant API design. The high barriers to entry in Python will be
discussed. Potential solutions will be proposed.&lt;/p&gt;
</summary></entry><entry><title>November 2014 Chipy Talks</title><link href="https://pyvideo.org/chipy/november-2014-chipy-talks.html" rel="alternate"></link><published>2014-11-13T00:00:00+00:00</published><updated>2014-11-13T00:00:00+00:00</updated><author><name>Asma Mehjabeen</name></author><id>tag:pyvideo.org,2014-11-13:chipy/november-2014-chipy-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Talks from the November 2014 meeting. Hidden Markov Models to improve
activity recognition in patients with spinal cord injury and Innate
learning: training the brain before the eyes open.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="hidden-markov-models-to-improve-activity-recognition-in-patients-with-spinal-cord-injury"&gt;
&lt;h4&gt;Hidden Markov Models to improve activity recognition in patients with spinal cord injury&lt;/h4&gt;
&lt;p&gt;By: Asma Mehjabeen&lt;/p&gt;
&lt;p&gt;Fitness tracking is great for calories and steps, but similar sensors
are capable of reporting much more about how we move throughout the day.
This is especially important in assessing the quality of movement for
those with limited mobility. Doctors often want to know more detail
about patient behavior after therapy to select and adjust the
appropriate intervention. Using machine learning on wearable
accelerometer signals, we estimate the activities patients with
incomplete spinal cord injury are performing. By combining windowed
classifier estimates over time using a hidden markov model, we show how
error rates can be significantly decreased, which brings more detailed
assessments of patient activity closer to a clinical reality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="innate-learning-training-the-brain-before-the-eyes-open"&gt;
&lt;h4&gt;Innate learning: training the brain before the eyes open&lt;/h4&gt;
&lt;p&gt;By: Isaac Adorno&lt;/p&gt;
&lt;p&gt;Amorphous, blob-like patterns of neural activity form and move over the
eye during visual development in animals. Why do such patterns exist? We
show that these patterns are this way to better prepare the visual
system for natural vision. Essentially, these are movies played in the
eyes to refine the visual system before the eyes even open. We use
python to model the developing visual system, produce an efficient code
based on those patterns, and show how that code matches what is seen
biologically. In this way, we show that during your early development
you are learning from innately generated patterns - a unique twist in
the debates of nature and nurture.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pingo means "pin, go!"</title><link href="https://pyvideo.org/chipy/pingo-means-pin-go.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Luciano Ramalho</name></author><id>tag:pyvideo.org,2014-07-09:chipy/pingo-means-pin-go.html</id><summary type="html"></summary></entry><entry><title>Garbage Collection w/ Ref. Cycles</title><link href="https://pyvideo.org/chipy/garbage-collection-w-ref-cycles.html" rel="alternate"></link><published>2014-01-09T00:00:00+00:00</published><updated>2014-01-09T00:00:00+00:00</updated><author><name>Aaron Brady</name></author><id>tag:pyvideo.org,2014-01-09:chipy/garbage-collection-w-ref-cycles.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Reference counting is very useful but it has an odd problem. We employ a
technique from graphs to approach it. The solution works but it's a bit
slow.&lt;/p&gt;
</summary></entry><entry><title>Lexical Graphs with Natural Language Processing using NLTK</title><link href="https://pyvideo.org/chipy/lexical-graphs-with-natural-language-processing-u.html" rel="alternate"></link><published>2014-01-09T00:00:00+00:00</published><updated>2014-01-09T00:00:00+00:00</updated><author><name>Brian Ray</name></author><id>tag:pyvideo.org,2014-01-09:chipy/lexical-graphs-with-natural-language-processing-u.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Brian will talk about his experiences using Python and NLTK
&lt;a class="reference external" href="http://nltk.org/"&gt;http://nltk.org/&lt;/a&gt; to run language comparisons to generate lexical
difference graphs like the one mentioned in the &amp;quot;Lexical Distance Among
the Languages of Europe&amp;quot; article. &lt;a class="reference external" href="http://bit.ly/1cS46Ba"&gt;http://bit.ly/1cS46Ba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The focus will be on the NLTK and how its internals work to process a
language. This talk will be his best one ever.&lt;/p&gt;
</summary></entry><entry><title>There were 986 roadway fatalities in Illinois in 2013. Where's the data?</title><link href="https://pyvideo.org/chipy/there-were-986-roadway-fatalities-in-illinois-in.html" rel="alternate"></link><published>2014-01-09T00:00:00+00:00</published><updated>2014-01-09T00:00:00+00:00</updated><author><name>Nick Bennett</name></author><id>tag:pyvideo.org,2014-01-09:chipy/there-were-986-roadway-fatalities-in-illinois-in.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Seen on garish LED roadway signs all around Chicago on New Year's Eve,
2013: 986 TRAFFIC DEATHS IN 2013. It leads to many questions: On what
roads? When did the accidents happen? What do we do now? I'm scared to
drive. I will talk about purging my fears by finding the data to answer
some of those questions. &lt;a class="reference external" href="http://tothebeat.github.io/fatal-car-crashes/"&gt;http://tothebeat.github.io/fatal-car-crashes/&lt;/a&gt;
This talk will involve PythonAnywhere, IPython, a module that's not even
on PyPi (dbfpy), searching for and finding open government data,
CartoDB, Google Fusion Tables, csv, and maybe Pandas. Rest assured,
there will be no graphic photos.&lt;/p&gt;
</summary></entry><entry><title>A Visual Guide To Pandas</title><link href="https://pyvideo.org/chipy/a-visual-guide-to-pandas.html" rel="alternate"></link><published>2013-12-12T00:00:00+00:00</published><updated>2013-12-12T00:00:00+00:00</updated><author><name>Jason Wirth</name></author><id>tag:pyvideo.org,2013-12-12:chipy/a-visual-guide-to-pandas.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pandas is the data-munging Swiss Army knife of the Python world. Often
you know how your data should look but it's not so obvious how to get
there, so I'll present a visual approach to learning the library and
data manipulation.&lt;/p&gt;
</summary></entry><entry><title>Storm (with python (and a side of clojure))</title><link href="https://pyvideo.org/chipy/storm-with-python-and-a-side-of-clojure.html" rel="alternate"></link><published>2013-12-12T00:00:00+00:00</published><updated>2013-12-12T00:00:00+00:00</updated><author><name>Philip Doctor</name></author><id>tag:pyvideo.org,2013-12-12:chipy/storm-with-python-and-a-side-of-clojure.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A walking tour of Storm, what it is, what you can do, and how you can
use it with python.&lt;/p&gt;
</summary></entry><entry><title>The Chicago Process: How Braintree Develops Software</title><link href="https://pyvideo.org/chipy/the-chicago-process-how-braintree-develops-softw.html" rel="alternate"></link><published>2013-12-12T00:00:00+00:00</published><updated>2013-12-12T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2013-12-12:chipy/the-chicago-process-how-braintree-develops-softw.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Braintree needs to be highly available and secure, while still
maintaining a rapid development pace and strict backwards compatibility.
In order to achieve that, we use what has become known as the &amp;quot;Chicago
Process&amp;quot;. This involves pairing, strict TDD, a team structure, and
weekly iterations, all to empower the devs to make decisions and get
work of a high quality done while avoiding siloing.&lt;/p&gt;
</summary></entry><entry><title>CivicLab and Between the Bars</title><link href="https://pyvideo.org/chipy/civiclab-and-between-the-bars.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Benjamin Sugar</name></author><id>tag:pyvideo.org,2013-11-14:chipy/civiclab-and-between-the-bars.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk, I will present on a slice of the maker movement called
&amp;quot;civic making&amp;quot; and a new space that has opened up in Chicago to
encourage this type creation, CivicLab. As an example of &amp;quot;civic making&amp;quot;
I will discuss Between the Bars, a paper based blogging platform for
those who are incarcerated, built in Django. I will also discuss our
choice in framework and the pros/cons of our approach.&lt;/p&gt;
</summary></entry><entry><title>How Open Source Hardware Will Change the World</title><link href="https://pyvideo.org/chipy/how-open-source-hardware-will-change-the-world.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Paul Ebreo</name></author><id>tag:pyvideo.org,2013-11-14:chipy/how-open-source-hardware-will-change-the-world.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What if there was an open source project that changed how we produce the
most fundamental apsects of our lives? From the food we eat, to the
houses we live in, this project wants to open source the tools we use to
obtain what we need to live. Come to the ChiPy meeting to find out the
name of the project.&lt;/p&gt;
</summary></entry><entry><title>Measure It</title><link href="https://pyvideo.org/chipy/measure-it.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Peter Fein</name></author><id>tag:pyvideo.org,2013-11-14:chipy/measure-it.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;measure_it provides timing and counting for iterators (and other code
segments).&lt;/p&gt;
</summary></entry><entry><title>Monoids in Python</title><link href="https://pyvideo.org/chipy/monoids-in-python.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Philip Doctor</name></author><id>tag:pyvideo.org,2013-11-14:chipy/monoids-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monoids are largely badly explained, but actually quite beautiful. I
would like to take a brief tour of what a monoid is and how they can
help out with mundane every day tasks in python.&lt;/p&gt;
</summary></entry><entry><title>PyData Recap Lightning Talk</title><link href="https://pyvideo.org/chipy/pydata-recap-lightning-talk.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Jason Wirth</name></author><id>tag:pyvideo.org,2013-11-14:chipy/pydata-recap-lightning-talk.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Recap of last weeks PyData conference in NYC.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>What happened at #aaronswhack?</title><link href="https://pyvideo.org/chipy/what-happened-at-aaronswhack.html" rel="alternate"></link><published>2013-11-14T00:00:00+00:00</published><updated>2013-11-14T00:00:00+00:00</updated><author><name>Sheila Miguez</name></author><id>tag:pyvideo.org,2013-11-14:chipy/what-happened-at-aaronswhack.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Many python programmers showed up to participate in the Chicago
#aaronswhack. Here's a list of what they worked on, and here are
pointers to local projects as well as worldwide projects.&lt;/p&gt;
</summary></entry><entry><title>Post djangocon: An overview of edX</title><link href="https://pyvideo.org/chipy/post-djangocon-an-overview-of-edx.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>yarko</name></author><id>tag:pyvideo.org,2013-09-12:chipy/post-djangocon-an-overview-of-edx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;edX is a major django application serving huge numbers of students for
MIT, Harvard, Stanford, Berkely, and more.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief history of Computer-Based Instruction (python has a role);&lt;/li&gt;
&lt;li&gt;incomplete survey of current open-source CBI;&lt;/li&gt;
&lt;li&gt;edX: how's it different / what's it's rough structure, what (besides django/python) is involved;&lt;/li&gt;
&lt;li&gt;edX: hacking the platform (django development);&lt;/li&gt;
&lt;li&gt;edX: hacking courses; a deployment-level VM, and how to get started there;&lt;/li&gt;
&lt;li&gt;finally:&lt;ul&gt;
&lt;li&gt;future topics: deployment; what this can't do (maybe) and why;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;wrapup:&lt;ul&gt;
&lt;li&gt;call for interest &amp;amp; edx project night(s);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll try to have some USBs for anyone who want to try one of the edX VMs
during the talk&lt;/p&gt;
</summary></entry><entry><title>Set it, and forget it! Auto Scale on Rackspace</title><link href="https://pyvideo.org/chipy/set-it-and-forget-it-auto-scale-on-rackspace.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>Brian Curtin</name></author><id>tag:pyvideo.org,2013-09-12:chipy/set-it-and-forget-it-auto-scale-on-rackspace.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Rackspace is rolling out a new service to allow your cloud to scale on
its own, called Auto Scale. Built on Monitoring, Auto Scale allows you
to grow or shrink your fleet of resources as demand changes.&lt;/p&gt;
&lt;p&gt;pyrax, a Python package for working with OpenStack-based clouds like
Rackspace's, just released Auto Scale and Monitoring support with
version 1.5.0.&lt;/p&gt;
&lt;p&gt;I'll show how you can use pyrax to deploy servers and automatically add
or remove them based on their usage.&lt;/p&gt;
</summary></entry><entry><title>What's Love Got to do with It? / Love: for techies</title><link href="https://pyvideo.org/chipy/whats-love-got-to-do-with-it-love-for-techie.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>yarko</name></author><id>tag:pyvideo.org,2013-09-12:chipy/whats-love-got-to-do-with-it-love-for-techie.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What you think Love is - is (probably) wrong.&lt;/p&gt;
&lt;p&gt;The correct metaphor / definition for live will make much more sense to
the software person. In fact, it will help with team building and design
too. Yup.&lt;/p&gt;
&lt;p&gt;Grab a beer. I'll tell you a story about how this evolved (turing
machine example), how and where evolution selected it, and why it works
- and how it works for approaching problems (design) too.&lt;/p&gt;
&lt;p&gt;Then I'll lay out the api (functional description).&lt;/p&gt;
&lt;p&gt;Don't take it too seriously. You couldn't have known. Now you will.
Cheers!&lt;/p&gt;
</summary></entry><entry><title>Asynchronous I/O in Python 3</title><link href="https://pyvideo.org/chipy/asynchronous-io-in-python-3.html" rel="alternate"></link><published>2013-07-11T00:00:00+00:00</published><updated>2013-07-11T00:00:00+00:00</updated><author><name>Feihong Hsu</name></author><id>tag:pyvideo.org,2013-07-11:chipy/asynchronous-io-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Feihong talks about PEP 3156 and the basic usage of Tulip, the reference
implementation.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="tulip"></category></entry><entry><title>ipython / notebook demo</title><link href="https://pyvideo.org/chipy/ipython-notebook-demo.html" rel="alternate"></link><published>2013-07-11T00:00:00+00:00</published><updated>2013-07-11T00:00:00+00:00</updated><author><name>Jason Wirth</name></author><id>tag:pyvideo.org,2013-07-11:chipy/ipython-notebook-demo.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ipython was a big focus of Scipy: Fernando gave a keynote, Brian gave a
talk, and there was a tutorial.&lt;/p&gt;
&lt;p&gt;ipython appeals to a broad audience from beginners to advanced users.
&amp;quot;IDLE is awful and I basically learned Python using iPython&amp;quot; says Jason,
whose presentation will touch on the powerful features and extensibility
for advanced users.&lt;/p&gt;
</summary><category term="ipython"></category></entry><entry><title>Ultimate Language Shootout IV: C# is slightly better than you might imagine</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-c-is-slightly-bet.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>Philip Doctor</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-c-is-slightly-bet.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you find yourself accidentally writing c#, you can still have some
fun.&lt;/p&gt;
</summary></entry><entry><title>Ultimate Language Shootout IV: CoffeeScript</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-coffeescript.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>Feihong Hsu</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-coffeescript.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A brief introduction to CoffeeScript, given at ChiPy's Ultimate Language
Shootout IV.&lt;/p&gt;
</summary></entry><entry><title>Ultimate Language Shootout IV: Go: come drink the delicious kool-aid</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-go-come-drink-the.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>David Sutton</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-go-come-drink-the.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;From the makers of the wildly successful Plan 9 operating system and B
programming language. Go is Google's stab at systems programming.&lt;/p&gt;
</summary></entry><entry><title>Ultimate Language Shootout IV: Haskell or: How a List Comprehension Is Like a Burrito</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-haskell-or-how-a.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>Greg Kettler</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-haskell-or-how-a.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a compiled, statically typed, lazy, purely functional programming
language. About as far as possible from Python? Not quite. The languages
have a lot in common and Python has already borrowed a few tricks from
Haskell.&lt;/p&gt;
</summary></entry><entry><title>Ultimate Language Shootout IV: QUASI</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-quasi.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>Randy Baxley</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-quasi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;1977 - A language, the description of which was handed to me on about
one hundred and fifty mimeographed eight and one half by eleven sheets.
Robert Sibley handed it to the class to use as our compiler project.&lt;/p&gt;
</summary></entry><entry><title>Ultimate Language Shootout IV: Ruby</title><link href="https://pyvideo.org/chipy/ultimate-language-shootout-iv-ruby.html" rel="alternate"></link><published>2013-06-13T00:00:00+00:00</published><updated>2013-06-13T00:00:00+00:00</updated><author><name>Ross Heflin</name></author><id>tag:pyvideo.org,2013-06-13:chipy/ultimate-language-shootout-iv-ruby.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ruby, what you need to know&lt;/p&gt;
</summary></entry><entry><title>Hy: A Lisp that transforms itself into the Python AST.</title><link href="https://pyvideo.org/chipy/hy-a-lisp-that-transforms-itself-into-the-python.html" rel="alternate"></link><published>2013-05-09T00:00:00+00:00</published><updated>2013-05-09T00:00:00+00:00</updated><author><name>Christopher Webber</name></author><id>tag:pyvideo.org,2013-05-09:chipy/hy-a-lisp-that-transforms-itself-into-the-python.html</id><summary type="html"></summary></entry><entry><title>In-project virtualenvs</title><link href="https://pyvideo.org/chipy/in-project-virtualenvs.html" rel="alternate"></link><published>2013-05-09T00:00:00+00:00</published><updated>2013-05-09T00:00:00+00:00</updated><author><name>Christopher Webber</name></author><id>tag:pyvideo.org,2013-05-09:chipy/in-project-virtualenvs.html</id><summary type="html"></summary></entry><entry><title>Who saved The Onion, from being hacked by "Syrian Electronic Army"</title><link href="https://pyvideo.org/chipy/who-saved-the-onion-from-being-hacked-by-syrian.html" rel="alternate"></link><published>2013-05-09T00:00:00+00:00</published><updated>2013-05-09T00:00:00+00:00</updated><author><name>Sean Bloomfield</name></author><id>tag:pyvideo.org,2013-05-09:chipy/who-saved-the-onion-from-being-hacked-by-syrian.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Well, this isn't at all Python related (or even all that technical), but
at The Onion, we recently had a little run-in with the &amp;quot;hackers&amp;quot; from
the &amp;quot;Syrian Electronic Army&amp;quot;, and could talk about some lessons learned
from that, if there's any interest.&lt;/p&gt;
</summary></entry><entry><title>Open Science</title><link href="https://pyvideo.org/chipy/open-science.html" rel="alternate"></link><published>2013-02-15T00:00:00+00:00</published><updated>2013-02-15T00:00:00+00:00</updated><author><name>Sheila Miguez</name></author><id>tag:pyvideo.org,2013-02-15:chipy/open-science.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;pdftribute and open science&lt;/p&gt;
</summary></entry><entry><title>Scraping from the Web: An Overview That Does Not Contain Too Much Cussing</title><link href="https://pyvideo.org/chipy/scraping-with-python.html" rel="alternate"></link><published>2013-02-15T00:00:00+00:00</published><updated>2013-02-15T00:00:00+00:00</updated><author><name>Feihong Hsu</name></author><id>tag:pyvideo.org,2013-02-15:chipy/scraping-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A high level overview of how we did scraping at EveryBlock.&lt;/p&gt;
</summary><category term="scraping"></category></entry><entry><title>Genie</title><link href="https://pyvideo.org/chipy/genie.html" rel="alternate"></link><published>2013-01-10T00:00:00+00:00</published><updated>2013-01-10T00:00:00+00:00</updated><author><name>Tal Liron</name></author><id>tag:pyvideo.org,2013-01-10:chipy/genie.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will introduce Genie, a new programming language with a
Python- inspired syntax that compiles into binary executables and
libraries. Behind the scenes, Genie is a dialect of Vala, and a full
participant in the GObject universe. I will cover the language basics,
with an eye to comparing them with Python, and guide you around some
potential pitfalls. This is the second in a series of talks I am giving
on the topic of Python/GObject integration.&lt;/p&gt;
</summary><category term="Genie"></category><category term="vala"></category></entry><entry><title>Intro to Marmir: Spreadsheets on steroids</title><link href="https://pyvideo.org/chipy/intro-to-marmir-spreadsheets-on-steroids.html" rel="alternate"></link><published>2013-01-10T00:00:00+00:00</published><updated>2013-01-10T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2013-01-10:chipy/intro-to-marmir-spreadsheets-on-steroids.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Marmir (&lt;a class="reference external" href="https://github.com/brianray/mm"&gt;https://github.com/brianray/mm&lt;/a&gt;) takes Python data structures and
turns them into spreadsheets (think xlwt on steroids). This is a high
level Intro to the project, current status, goals, and to solicit any
contributions. This talk will look into how Marmir internals do things
like: measure fonts to fit columns, preserve data types (dates,
numbers), allow advanced look and feel customization of spreadsheets.
Later down the road, I would like to have a separate talk on Marmir
internals and how it may be customized to do things like, convert Django
model data directly to spreadsheets, integrate with google spreadsheets.&lt;/p&gt;
</summary></entry><entry><title>SQLAlchemy: As She is Code, an opinionated Intro</title><link href="https://pyvideo.org/chipy/sqlalchemy-as-she-is-code-an-opinionated-intro.html" rel="alternate"></link><published>2012-12-13T00:00:00+00:00</published><updated>2012-12-13T00:00:00+00:00</updated><author><name>Jordan Bettis</name></author><id>tag:pyvideo.org,2012-12-13:chipy/sqlalchemy-as-she-is-code-an-opinionated-intro.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The talk will be about using the SQL Alchemy query expression language&lt;/p&gt;
&lt;p&gt;and how it can be combined with the ORM for noble ends.&lt;/p&gt;
</summary></entry><entry><title>MediaGoblin Update</title><link href="https://pyvideo.org/chipy/mediagoblin-update.html" rel="alternate"></link><published>2012-10-11T00:00:00+00:00</published><updated>2012-10-11T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2012-10-11:chipy/mediagoblin-update.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;GNU MediaGoblin is a free software media publishing system written in
Python for images, video, and audio. This talk starts by tricking you
into watching the mediagoblin_campaign_pitch video, and then Chris
explains how he used Python to drive Blender to make the animated
effects.&lt;/p&gt;
</summary></entry><entry><title>Python 3.3.0 Release</title><link href="https://pyvideo.org/chipy/python-330-release.html" rel="alternate"></link><published>2012-10-11T00:00:00+00:00</published><updated>2012-10-11T00:00:00+00:00</updated><author><name>Brian Curtin</name></author><id>tag:pyvideo.org,2012-10-11:chipy/python-330-release.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Brian will cover the September 29th release of Python 3 (3.3.0)
including some highly technical details and importing information for
the casual users. He will go over some of the particular Window's stuff
while leaving the talk's focus on an assortment of cool stuff.&lt;/p&gt;
</summary></entry><entry><title>Event Driven Concurrency</title><link href="https://pyvideo.org/chipy/event-driven-concurrency.html" rel="alternate"></link><published>2012-09-13T00:00:00+00:00</published><updated>2012-09-13T00:00:00+00:00</updated><author><name>Ben Toews</name></author><id>tag:pyvideo.org,2012-09-13:chipy/event-driven-concurrency.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ben recently discovered event driven concurrency. He will be talking
about some of the basics as well as trying to compare it with other
concurrency options. The focus will be on its application in a few
recent projects as well as a comparison of Python's gevent and node.js.
Some of the demos will also be using matplotlib in honor of John
Hunter's passing.&lt;/p&gt;
</summary></entry><entry><title>Matplotlib Examples Uses</title><link href="https://pyvideo.org/chipy/matplotlib-examples-uses.html" rel="alternate"></link><published>2012-09-13T00:00:00+00:00</published><updated>2012-09-13T00:00:00+00:00</updated><author><name>Greg Kettler</name></author><id>tag:pyvideo.org,2012-09-13:chipy/matplotlib-examples-uses.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Two examples of using matplotlib: first, in Greg's PhD research in
marine microbiology; second, in plotting baseball PITCHf/x data.&lt;/p&gt;
</summary></entry><entry><title>Big Data De-duping</title><link href="https://pyvideo.org/chipy/big-data-de-duping.html" rel="alternate"></link><published>2012-06-14T00:00:00+00:00</published><updated>2012-06-14T00:00:00+00:00</updated><author><name>Derek Eder</name></author><id>tag:pyvideo.org,2012-06-14:chipy/big-data-de-duping.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Derek Eder of Webitects and Forest Gregg, a Ph.D. student of sociology
at the University of Chicago, will describe the Python library they are
developing to deduplicate tabular data, quickly, accurately, and at a
large scale. The library facilitates the matching of related records in
different data sets, using a machine learning approach. They expect to
have a demo to show and will explain how they expect that the library
will be used.&lt;/p&gt;
</summary></entry><entry><title>Open Government Data Movement</title><link href="https://pyvideo.org/chipy/open-government-data-movement.html" rel="alternate"></link><published>2012-06-14T00:00:00+00:00</published><updated>2012-06-14T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2012-06-14:chipy/open-government-data-movement.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The history and goals of the open government data movement nationally
and in Chicago, previous commercial uses of open data, such as weather
data, and a couple of contemporary examples of how cities and
independent groups are using open data.&lt;/p&gt;
</summary></entry><entry><title>Python powered search</title><link href="https://pyvideo.org/chipy/python-powered-search.html" rel="alternate"></link><published>2012-06-14T00:00:00+00:00</published><updated>2012-06-14T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2012-06-14:chipy/python-powered-search.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Explore the indexing / stemming / scoring libraries used to built a
highly concise search engine along with redis and tornado.&lt;/p&gt;
</summary></entry><entry><title>Lidless: A Video Analyzer and IRC Bot</title><link href="https://pyvideo.org/chipy/lidless-video-analyzer-and-irc-bot.html" rel="alternate"></link><published>2011-11-10T00:00:00+00:00</published><updated>2011-11-10T00:00:00+00:00</updated><author><name>Eric Stein</name></author><id>tag:pyvideo.org,2011-11-10:chipy/lidless-video-analyzer-and-irc-bot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A great Eye, lidless, wreathed in webcams.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Pumping Station: One (Chicago's Hackerspace) people often send
messages to the mailing list or ask on IRC if anyone is at the space or
plans to be later. There's an opportunity there to solve problems
automatically rather than through human input. Member Eric Stein
designed a Python / OpenCV based application (lidless) to monitor four
video cameras in the space and offer a REST API, a web front end with
historical graphs, and an IRC bot in the IRC channel to relay
information about how busy the space is.&lt;/p&gt;
&lt;p&gt;This talk is a short demo of the application accompanied by motivations
and high level archtechture breakdown. Following the demo/archtechture
I'll dive into the parts of the code that people are most interested in
hearing about with Q&amp;amp;A.&lt;/p&gt;
</summary><category term="image analysis"></category></entry><entry><title>Playdoh</title><link href="https://pyvideo.org/chipy/playdoh.html" rel="alternate"></link><published>2011-07-14T00:00:00+00:00</published><updated>2011-07-14T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2011-07-14:chipy/playdoh.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Playdoh is Mozilla's starter kit for new Django projects. It aims to be
secure-by-default and set up all the same goodies we use to scale for
high traffic, perform background tasks, localize our sites in many
languages, and other cool things.&lt;/p&gt;
</summary><category term="chipy"></category><category term="playdoh"></category></entry><entry><title>GNU MediaGoblin for a federated media future</title><link href="https://pyvideo.org/chipy/gnu-mediagoblin-for-a-federated-media-future.html" rel="alternate"></link><published>2011-06-09T00:00:00+00:00</published><updated>2011-06-09T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2011-06-09:chipy/gnu-mediagoblin-for-a-federated-media-future.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Christopher Allan Webber talks about GNU MediaGoblin, a federated
(decentralized) media publishing system (images, and later other media
like video) written in python and under the AGPL. Infrastructure
discussion describes what it means that GNU MediaGoblin uses an
unframework / is &amp;quot;wsgi minimalist&amp;quot;, about the choice of MongoDB and
MongoKit, and how to impress an audience with ascii art mockups.&lt;/p&gt;
</summary><category term="chipy"></category><category term="foss"></category><category term="gnu"></category><category term="media"></category><category term="mediagoblin"></category><category term="mongodb"></category><category term="mongokit"></category><category term="wsgi"></category></entry><entry><title>Using OpenCV with Python and ROS</title><link href="https://pyvideo.org/chipy/using-opencv-with-python-and-ros.html" rel="alternate"></link><published>2011-06-09T00:00:00+00:00</published><updated>2011-06-09T00:00:00+00:00</updated><author><name>Bill Mania</name></author><id>tag:pyvideo.org,2011-06-09:chipy/using-opencv-with-python-and-ros.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Bill Mania and Eric Kinzle A brief presentation of using the OpenCV
computer vision toolset with Python and ROS. Included at the end will be
a demonstration of tracking a colored object using a camera with
servo-driven pan and tilt capability.&lt;/p&gt;
</summary><category term="billmania"></category><category term="camera"></category><category term="chipy"></category><category term="image"></category><category term="opencv"></category><category term="robot"></category><category term="ros"></category></entry><entry><title>Python/Django deployment</title><link href="https://pyvideo.org/chipy/python-django-deployment.html" rel="alternate"></link><published>2011-02-10T00:00:00+00:00</published><updated>2011-02-10T00:00:00+00:00</updated><author><name>Rohit Sankaran</name></author><id>tag:pyvideo.org,2011-02-10:chipy/python-django-deployment.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'll introduce the WSGI ecosystem. We'll then setup a Django app and
deploy it to a VM. I'll cover server setup/config and best practices and
cover software used like Fabric, nginx etc. Sample nginx, WSGI and
Apache configs will be provided. People can follow along and I'll
provide download links after so they can try it at home. This will be
the best meeting ever.&lt;/p&gt;
</summary><category term="apache"></category><category term="chipy"></category><category term="fabric"></category><category term="nginx"></category><category term="wsgi"></category></entry><entry><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link href="https://pyvideo.org/chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html" rel="alternate"></link><published>2011-02-10T00:00:00+00:00</published><updated>2011-02-10T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-02-10:chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;1 &lt;a class="reference external" href="http://us.pycon.org/2011/schedule/sessions/198/"&gt;http://us.pycon.org/2011/schedule/sessions/198/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a class="reference external" href="http://pip.openplans.org/"&gt;http://pip.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a class="reference external" href="http://virtualenv.openplans.org/"&gt;http://virtualenv.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chipy"></category><category term="ianbicking"></category><category term="pip"></category><category term="virtualenv"></category></entry><entry><title>Django Deployment for the Average Bloke</title><link href="https://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>Carl Karsten</name></author><id>tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</summary><category term="apache"></category><category term="chipy"></category><category term="deployment"></category><category term="mod_wsgi"></category><category term="pinax"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>ROS - Robot Operating System</title><link href="https://pyvideo.org/chipy/ros---robot-operating-system.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>Bill Mania</name></author><id>tag:pyvideo.org,2011-01-13:chipy/ros---robot-operating-system.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ROS is the Robot Operating System, originally from Stanford and now
supported by Willow Garage. ROS has a mature Python interface and is
being used around the world by both amateur and professional
roboticists. At the end of the presentation, if time allows and interest
exists, some rudimentary ROS functionality will be demonstrated on a
robot in progress.&lt;/p&gt;
</summary><category term="chipy"></category><category term="robot"></category><category term="ros"></category></entry><entry><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link href="https://pyvideo.org/chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2011-01-13:chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'm not sure if we're still looking for talks on Thursday, but if so,
I'd like to volunteer to give a talk about using Python to do some
retro-computing hacking involving my vintage 1978 Superboard II. It's
not exactly robotics, but it involves hardware and a lot of low-level
hacking (along with some Python3 and ZeroMQ thrown in for good measure
;-).&lt;/p&gt;
</summary><category term="chipy"></category><category term="cool"></category><category term="python3"></category><category term="zeromq"></category></entry><entry><title>Tox</title><link href="https://pyvideo.org/chipy/tox.html" rel="alternate"></link><published>2010-11-11T00:00:00+00:00</published><updated>2010-11-11T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2010-11-11:chipy/tox.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a great new open source tool that helps you support all versions of
python with your existing automated tests. It's not a test runner, it's
a super test runner runner! Or something. There is no easy way to
describe it which is why the front page of the website is sort of
confusing, IMO. We use tox on the Nose project to make sure each code
change doesn't break the tests in Python 2.4, 2.5, 2.6, 2.7, 3.0 or
Jython. Not everybody targets so many environments but if you want to
maintain a widely used module then you probably will want to use tox
someday.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here's our Hudson matrix setup w/ tox:
&lt;a class="reference external" href="http://hudson.testrun.org/job/nose-unstable/"&gt;http://hudson.testrun.org/job/nose-
unstable/&lt;/a&gt; (we just set
this up recently which is why most builds were broken in one or two
envs) I can also spend some time going over how we are currently
maintaining a test suite that runs in both 2.x and 3.x simultaneously.&lt;/p&gt;
&lt;p&gt;This will be our Best Meeting Ever!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://codespeak.net/tox/"&gt;http://codespeak.net/tox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://chipy.org/"&gt;http://chipy.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="chipy"></category><category term="testing"></category><category term="tox"></category></entry><entry><title>Programming with Twisted</title><link href="https://pyvideo.org/chipy/programming-with-twisted.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Dan Griffen</name></author><id>tag:pyvideo.org,2010-07-08:chipy/programming-with-twisted.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;What twisted is and its purpose in life (ie the reactor pattern).&lt;/li&gt;
&lt;li&gt;Non-blocking network programming.&lt;/li&gt;
&lt;li&gt;The confusing topic of deferreds and callbacks everywhere.&lt;/li&gt;
&lt;li&gt;Methods for dealing with blocking APIs.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chipy"></category><category term="twisted"></category></entry><entry><title>PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/chipy/pypy-and-unladen-swallow--making-your-python-fast.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-08:chipy/pypy-and-unladen-swallow--making-your-python-fast.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="chipy"></category><category term="optimization"></category><category term="performance"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>Customizing the Django Admin</title><link href="https://pyvideo.org/chipy/customizing-the-django-admin.html" rel="alternate"></link><published>2010-06-10T00:00:00+00:00</published><updated>2010-06-10T00:00:00+00:00</updated><author><name>Brian Ray</name></author><id>tag:pyvideo.org,2010-06-10:chipy/customizing-the-django-admin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I plan on showing a live example and customizing as we go. This will be
a pretty mid-level talk and should be interesting to those not familiar,
those who know django and considered using the admin, and for djangonuts
who want to do some pretty advanced stuff.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Registering Models in the Admin&lt;/li&gt;
&lt;li&gt;Customizing the filtering, search, general display&lt;/li&gt;
&lt;li&gt;Adding Actions&lt;/li&gt;
&lt;li&gt;Inlines&lt;/li&gt;
&lt;li&gt;Custom Forms&lt;/li&gt;
&lt;li&gt;Making Fields Readonly by inheriting&lt;/li&gt;
&lt;li&gt;Integrating jQuery&lt;/li&gt;
&lt;li&gt;Custom Widgets like Image thumbnails&lt;/li&gt;
&lt;li&gt;Changing look and feel&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="admin"></category><category term="chipy"></category><category term="customizing"></category><category term="jquery"></category></entry><entry><title>Using Python for Blender Animations</title><link href="https://pyvideo.org/chipy/using-python-for-blender-animations.html" rel="alternate"></link><published>2010-06-10T00:00:00+00:00</published><updated>2010-06-10T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2010-06-10:chipy/using-python-for-blender-animations.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Creating tools with Python and Blender 2.5's bpy API&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walk through using Blender 2.5's new Python API to automate various
animation tasks, using examples from the film Patent Absurdity:
&lt;a class="reference external" href="http://patentabsurdity.com/"&gt;http://patentabsurdity.com/&lt;/a&gt;
&lt;a class="reference external" href="http://patentabsurdity.com/fsf_patent_anims.tar.gz"&gt;http://patentabsurdity.com/fsf_patent_anims.tar.gz&lt;/a&gt; has the sources of
the animations demonstrated.&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category></entry><entry><title>Twiggy: A Pythonic Logger</title><link href="https://pyvideo.org/chipy/twiggy--a-pythonic-logger.html" rel="alternate"></link><published>2010-04-08T00:00:00+00:00</published><updated>2010-04-08T00:00:00+00:00</updated><author><name>Peter Fein</name></author><id>tag:pyvideo.org,2010-04-08:chipy/twiggy--a-pythonic-logger.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Twiggy is an early-stage project to build a more Pythonic logging
module. It was started at Pycon 2010.&lt;/p&gt;
&lt;p&gt;Home:
&lt;a class="reference external" href="http://python-%20twiggy.googlecode.com"&gt;http://python-twiggy.googlecode.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the notes for a quick overview
&lt;a class="reference external" href="http://pythontwiggy.googlecode.com/hg/notes.html"&gt;http://pythontwiggy.googlecode.com/hg/note
s.html&lt;/a&gt;.&lt;/p&gt;
</summary><category term="chipy"></category><category term="logging"></category><category term="twiggy"></category></entry><entry><title>What's coming up in Python 2.7</title><link href="https://pyvideo.org/chipy/what--39-s-coming-up-in-python-2-7.html" rel="alternate"></link><published>2010-04-08T00:00:00+00:00</published><updated>2010-04-08T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-04-08:chipy/what--39-s-coming-up-in-python-2-7.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With 2.7 likely being the end of the 2.x line, come see what's in store
for the upcoming release. Changes to unittest, introduction of the
argparse module, and a whole host of 3.1 features are here to ease your
eventual transition into the wonderful world of Python 3.&lt;/p&gt;
</summary><category term="chipy"></category><category term="python2.7"></category></entry><entry><title>Changes to the GIL in Python 3</title><link href="https://pyvideo.org/chipy/changes-to-the-gil-in-python-3.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-01-14:chipy/changes-to-the-gil-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python3"></category></entry><entry><title>GitPython and Git Internals</title><link href="https://pyvideo.org/chipy/gitpython-and-git-internals.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2010-01-14:chipy/gitpython-and-git-internals.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Chris covers how git works, the internals, and using the GitPython
library.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gitorious.org/git-python"&gt;GitPython&lt;/a&gt;&lt;/p&gt;
</summary><category term="chipy"></category><category term="git"></category><category term="gitpython"></category></entry><entry><title>Technical, standards-spec style analysis of Unicode</title><link href="https://pyvideo.org/chipy/technical--standards-spec-style-analysis-of-unico.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>Jordan Bettis</name></author><id>tag:pyvideo.org,2010-01-14:chipy/technical--standards-spec-style-analysis-of-unico.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a very educational presentation of Unicode, what it is, where it
comes from, how it works, Unicode in Python, ....&lt;/p&gt;
</summary><category term="chipy"></category><category term="unicode"></category></entry><entry><title>REST-ful Web apps with Django Piston</title><link href="https://pyvideo.org/chipy/rest-ful-web-apps-with-django-piston.html" rel="alternate"></link><published>2009-12-10T00:00:00+00:00</published><updated>2009-12-10T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-12-10:chipy/rest-ful-web-apps-with-django-piston.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A common complaint about Django, the leading Python web application
framework, is that it doesn't make writing REST APIs easy enough. In
fact the paradigm for a typical Django application involves views which
map to HTML page templates. With end users increasingly expecting rich
interfaces with the responsiveness of a desktop application, this
paradigm is being superseded. Fortunately a third-party Django
application called Piston fills the gap. Django/Piston can be combined
with the Ext JS JavaScript framework and widget set to create
attractive, responsive Web applications, and this talk will show you
how.&lt;/p&gt;
</summary><category term="chipy"></category><category term="extjs"></category><category term="piston"></category></entry><entry><title>Python for Scientific and High Performance Computing (3 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu0.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 3 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (2 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu1.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 2 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (1 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu2.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (4 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-comput.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-comput.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 4 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Blender 2.5 loves Python 3</title><link href="https://pyvideo.org/chipy/blender-2-5-loves-python-3.html" rel="alternate"></link><published>2009-10-08T00:00:00+00:00</published><updated>2009-10-08T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2009-10-08:chipy/blender-2-5-loves-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blender 2.5 loves Python 3&lt;/p&gt;
&lt;p&gt;Presented by Chris Webber on October 8th, 2009&lt;/p&gt;
&lt;p&gt;Chris talks about the upcoming Blender 2.5 release. &amp;quot;Blender 2.5 is the
first app I know of that &lt;em&gt;requires&lt;/em&gt; Python 3.X. So that's pretty
interesting on its own. But there's plenty more interesting stuff to
discuss. It's going to be mostly an overview talk. Blender's python
integration could possibly span 3 separate talks, especially considering
the blender game engine's use of it, which is a separate but interesting
talk.&amp;quot;&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago. Stay tuned to the mailing list for more info. &lt;a class="reference external" href="http://chipy.org/"&gt;ChiPy
website&lt;/a&gt;&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category><category term="python3"></category></entry><entry><title>Asynchronous vs. Threaded Python</title><link href="https://pyvideo.org/chipy/asynchronous-vs--threaded-python.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-06-11:chipy/asynchronous-vs--threaded-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous vs. Threaded Python&lt;/p&gt;
&lt;p&gt;Presented at ChiPy by David Beazley on June 12th, 2009&lt;/p&gt;
&lt;p&gt;This is the opening act to Mindblowing GIL. Covers threading vs.
asynchronous programming in Python.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="chipy"></category><category term="gil"></category><category term="threads"></category></entry><entry><title>Mindblowing Python GIL</title><link href="https://pyvideo.org/chipy/mindblowing-python-gil.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-06-11:chipy/mindblowing-python-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mindblowing Python GIL&lt;/p&gt;
&lt;p&gt;Presented by David Beazley at ChiPy on June 11, 2009&lt;/p&gt;
&lt;p&gt;David Beazley: mind-blowing presentation about how the Python GIL
actually works and why it's even worse than most people even imagine.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.dabeaz.com/python/GIL.pdf"&gt;http://www.dabeaz.com/python/GIL.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS PROBLEMS: audio is fuzzy]&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python-advanced"></category></entry><entry><title>Web Apps with Jython</title><link href="https://pyvideo.org/chipy/web-apps-with-jython.html" rel="alternate"></link><published>2009-05-15T00:00:00+00:00</published><updated>2009-05-15T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-05-15:chipy/web-apps-with-jython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building apps with Jython&lt;/p&gt;
&lt;p&gt;Presented on May 15th, 2009 at ChiPy&lt;/p&gt;
&lt;p&gt;Talks about go_pylons and snakefight and other things that allow you to
build and run Python applications with Jython. WSGI to servlet adapter
in Jython 2.5.&lt;/p&gt;
</summary><category term="chipy"></category><category term="go_pylons"></category><category term="jython"></category><category term="snakefight"></category><category term="wsgi"></category></entry><entry><title>ChiPy: Chicago Python User Group Jan. '08 Meeting</title><link href="https://pyvideo.org/chipy/chipy--chicago-python-user-group-jan----39-08-mee.html" rel="alternate"></link><published>2008-01-01T00:00:00+00:00</published><updated>2008-01-01T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2008-01-01:chipy/chipy--chicago-python-user-group-jan----39-08-mee.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;pickle module -- Atul Varma&lt;/li&gt;
&lt;li&gt;PyStage, an animation framework -- Christopher Allan Webber&lt;/li&gt;
&lt;li&gt;Python Scripting for OpenOffice -- Steve Githens&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chriswebber"></category><category term="openoffice"></category><category term="pickle"></category><category term="pystage"></category></entry></feed>