<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mark-wiebe.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-15T00:00:00+00:00</updated><entry><title>Sequoia: Point Cloud Processing and Meshing</title><link href="https://pyvideo.org/pydata-seattle-2015/sequoia-point-cloud-processing-and-meshing.html" rel="alternate"></link><published>2015-07-26T00:00:00+00:00</published><updated>2015-07-26T00:00:00+00:00</updated><author><name>Mark Wiebe</name></author><id>tag:pyvideo.org,2015-07-26:pydata-seattle-2015/sequoia-point-cloud-processing-and-meshing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sequoia (&lt;a class="reference external" href="http://sequoia.thinkboxsoftware.com/"&gt;http://sequoia.thinkboxsoftware.com/&lt;/a&gt;) is a product, currently in beta, from Thinkbox Software, for processing and meshing large point clouds. This talk dives into some technical details of what it takes to create a scalable point cloud system.&lt;/p&gt;
&lt;p&gt;This talk will cover some of the details of how to create a scalable point cloud system, including how floating-point Morton order can be used to spatially organize a point cloud within a globally defined octree.&lt;/p&gt;
</summary></entry><entry><title>Panel: Using, contributing to, and integrating open source in large corporate environments</title><link href="https://pyvideo.org/pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html" rel="alternate"></link><published>2015-07-25T00:00:00+00:00</published><updated>2015-07-25T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-07-25:pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData is a gathering of users and developers of data analysis tools in Python. The goals are to provide Python enthusiasts a place to share ideas and learn from each other about how best to apply our language and tools to ever-evolving challenges in the vast realm of data management, processing, analytics, and visualization.&lt;/p&gt;
&lt;p&gt;We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.&lt;/p&gt;
</summary></entry><entry><title>Typing Arrays with DyND</title><link href="https://pyvideo.org/scipy-2015/typing-arrays-with-dynd.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Mark Wiebe</name></author><id>tag:pyvideo.org,2015-07-10:scipy-2015/typing-arrays-with-dynd.html</id><summary type="html"></summary></entry><entry><title>DyND Callables</title><link href="https://pyvideo.org/scipy-2016/dynd-callables-scipy-2016-mark-wiebe.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Mark Wiebe</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/dynd-callables-scipy-2016-mark-wiebe.html</id><summary type="html"></summary><category term="SciPy 2016"></category></entry><entry><title>Blaze: Building a Foundation for Array-Oriented Computing in Python</title><link href="https://pyvideo.org/scipy-2014/blaze-building-a-foundation-for-array-oriented-c.html" rel="alternate"></link><published>2014-07-10T00:00:00+00:00</published><updated>2014-07-10T00:00:00+00:00</updated><author><name>Mark Wiebe</name></author><id>tag:pyvideo.org,2014-07-10:scipy-2014/blaze-building-a-foundation-for-array-oriented-c.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Blaze project is a collection of libraries being built towards the
goal of generalizing NumPy's data model and working on distributed data.
This talk covers each of these libraries, and how they work together to
accomplish this goal.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's scientific computing and data analysis ecosystem, built around
NumPy, SciPy, Matplotlib, Pandas, and a host of other libraries, is a
tremendous success. NumPy provides an array object, the array-oriented
ufunc primitive, and standard practices for exposing and writing
numerical libraries to Python all of which have assisted in making it a
solid foundation for the community. Over time, however, it has become
clear that there are some limitations of NumPy that are difficult to
address via evolution from within. Notably, the way NumPy arrays are
restricted to data with regularly strided memory structure on a single
machine is not easy to change.&lt;/p&gt;
&lt;p&gt;Blaze is a project being built with the goal of addressing these
limitations, and becoming a foundation to grow Python's success in
array-oriented computing long into the future. It consists of a small
collection of libraries being built to generalize NumPy's notions of
array, dtype, and ufuncs to be more extensible, and to represent data
and computation that is distributed or does not fit in main memory.&lt;/p&gt;
&lt;p&gt;Datashape is the array type system that describes the structure of data,
including a specification of a grammar and set of basic types, and a
library for working with them. LibDyND is an in-memory array programming
library, written in C++ and exposed to Python to provide the local
representation of memory supporting the datashape array types. BLZ is a
chunked column-oriented persistence storage format for storing Blaze
data, well-suited for out of core computations. Finally, the Blaze
library ties these components together with a deferred execution graph
and execution engine, which can analyze desired computations together
with the location and size of input data, and carry out an execution
plan in memory, out of core, or in a distributed fashion as is needed.&lt;/p&gt;
</summary></entry></feed>