<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Alexander Steele</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alexander-steele.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-21T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Architecting Native Python Extension Modules</title><link href="https://pyvideo.org/pybay-2024/architecting-native-python-extension-modules.html" rel="alternate"></link><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><author><name>Alexander Steele</name></author><id>tag:pyvideo.org,2024-09-21:/pybay-2024/architecting-native-python-extension-modules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over 20% of the most downloaded Python modules rely on native extension modules written in compiled languages like C, C++, and Rust. These extension modules, with their low-level control and high performance, enable Python to be used in new domains, from numerical computing to interfacing with hardware. However, they â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over 20% of the most downloaded Python modules rely on native extension modules written in compiled languages like C, C++, and Rust. These extension modules, with their low-level control and high performance, enable Python to be used in new domains, from numerical computing to interfacing with hardware. However, they also present a new set of architecture-level questions, as well as trade-offs between performance, Python API ergonomics, and extension module maintainability. This talk will answer those questions and provide a set of best practices for creating fast, useful, and maintainable extension modules.&lt;/p&gt;
</content><category term="PyBay 2024"></category></entry></feed>