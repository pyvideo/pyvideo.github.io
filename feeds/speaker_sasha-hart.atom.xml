<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sasha-hart.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-05T00:00:00+00:00</updated><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2014/lightning-talks-11.html" rel="alternate"></link><published>2014-10-05T00:00:00+00:00</published><updated>2014-10-05T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2014-10-05:pytexas-2014/lightning-talks-11.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:00) - Sasha Hart -- Make PyPI Fast&lt;/li&gt;
&lt;li&gt;(0:01:36) - Sasha Hart -- Find Your Editor&lt;/li&gt;
&lt;li&gt;(0:04:17) - Jeff Rush -- Ways to Call Out&lt;/li&gt;
&lt;li&gt;(0:06:28) - Jeff Rush -- Weak References&lt;/li&gt;
&lt;li&gt;(0:08:17) - James Powell -- Newton's Method&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Getting along with Python</title><link href="https://pyvideo.org/pytexas-2014/getting-along-with-python.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Sasha Hart</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/getting-along-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've finished your introductory course or tutorial on Python, you
feel good about your knowledge of the language, and you might have some
projects under your belt. What now? How about some of the things that
aren't really code, which nobody really teaches you in a class or
tutorial, which can take years to learn by yourself? That's what this
talk is about: a few of the most common pain points for Python
programmers which can easily be avoided by adopting certain tools and
practices &amp;quot;around&amp;quot; the coding itself. Not coincidentally, the same tips
might also help improve your code and make your life with other Python
programmers more harmonious. Material will roughly summarize/follow the
contents of &lt;a class="reference external" href="http://gawp.sashahart.net"&gt;http://gawp.sashahart.net&lt;/a&gt;, as a general and gently
opinionated tour of common practices in the Python community.&lt;/p&gt;
</summary></entry></feed>