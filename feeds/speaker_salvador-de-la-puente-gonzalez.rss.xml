<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 02 Feb 2016 00:00:00 +0000</lastBuildDate><item><title>Method dispatching techniques in python</title><link>https://pyvideo.org/pycon-es-2014/method-dispatching-techniques-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lodr.github.io/presentations/method-dispatching/index.html#/"&gt;http://lodr.github.io/presentations/method-dispatching/index.html#/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Salvador de la Puente Gonzalez</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:pycon-es-2014/method-dispatching-techniques-in-python.html</guid></item><item><title>Syntactic Macros in Python</title><link>https://pyvideo.org/pycon-es-2015/syntactic-macros-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Syntactic Macros enable the programmer to manipulate the shape of the program before executing it allowing to extend the features of the language. Inspired by macropy, in this talk I explain how to get syntactic macros working with Python 3 at import time giving a couple of interesting examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Salvador de la Puente Gonz√°lez</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/syntactic-macros-in-python.html</guid><category>Track Avanzado</category></item></channel></rss>