<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matias-varela.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-24T00:00:00+00:00</updated><entry><title>Lidiando con formatos y unidades en nuestra API REST</title><link href="https://pyvideo.org/pycon-ar-2018/lidiando-con-formatos-y-unidades-en-nuestra-api-rest.html" rel="alternate"></link><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><author><name>Matias Varela</name></author><id>tag:pyvideo.org,2018-11-24:pycon-ar-2018/lidiando-con-formatos-y-unidades-en-nuestra-api-rest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mediante un proyecto con django rest framework, veremos como lidiar con las distintas unidades de medida, monedas y fechas según las preferencias del usuario, utilizando nuestros propios serializers, fields y views de este framework.&lt;/p&gt;
&lt;p&gt;Cuando se desarrolla un sistema que maneja datos de clima (temperatura, presión atmosférica, viento, radiación), éstos puede querer ser visto por el usuario, en distintas unidades (grados °C o °F, hPa o mBar, km/h o m/s, etc). Por otro lado, el usuario puede querer ingresar estos datos en las unidades que le son comunes. Esto implica la conversión en ambos sentidos (entrada y salida) para mantener la consistencia de los datos en el sistema y de los datos que ve el usuario. Otros ejemplos de esto son los precios de 'cosas' (en distintas monedas) y los formatos de fecha. En la charla, se mostrará una forma 'pythonica' de manejar estas conversiones mediante distintos serializers, fields y viewsets utilizando django rest framework. Veremos un ejemplo andando de como funciona todo.&lt;/p&gt;
</summary></entry></feed>