<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-uk-2014.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-20T00:00:00+00:00</updated><entry><title>Haircuts for your code</title><link href="https://pyvideo.org/pycon-uk-2014/haircuts-for-your-code.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Carl Crowder</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/haircuts-for-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Carl Crowder&lt;/p&gt;
&lt;p&gt;Talk about static analysis tools&lt;/p&gt;
</summary></entry><entry><title>Miss Adventures in Raspberry Pi</title><link href="https://pyvideo.org/pycon-uk-2014/miss-adventures-in-raspberry-pi.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Carrie Anne Philbin</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/miss-adventures-in-raspberry-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Carrie Anne Philbin.&lt;/p&gt;
&lt;p&gt;Introduced by &amp;quot;OY&amp;quot;.&lt;/p&gt;
&lt;p&gt;A tale of one teacher and her journey from ICT to Computing, and how the wider community can help computing education.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>PyPi (not that one) - Python on the RaspberryPi</title><link href="https://pyvideo.org/pycon-uk-2014/pypi-not-that-one-python-on-the-raspberrypi.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/pypi-not-that-one-python-on-the-raspberrypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Ben Nuttall&lt;/p&gt;
&lt;p&gt;Interesting Python projects on Raspberry Pi&lt;/p&gt;
</summary></entry><entry><title>Repeatable automated deployments with Juju</title><link href="https://pyvideo.org/pycon-uk-2014/repeatable-automated-deployments-with-juju.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Michael Foord</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/repeatable-automated-deployments-with-juju.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Michael Foord &amp;amp; Simon Davy&lt;/p&gt;
&lt;p&gt;Do you deploy your Python services to Amazon EC2, or to Openstack, or even to HP cloud, joyent or Azure? Do you want to - without being tied into any one of them?&lt;/p&gt;
&lt;p&gt;What about local deployments with lxc or kvm containers. How about managing your bare metal servers through Metal As A Service and deploying to OpenStack on top? ISP grade technology for your data centre!&lt;/p&gt;
&lt;p&gt;How about managing your service deployment and infrastructure with Python code? (Devops distilled.)&lt;/p&gt;
&lt;p&gt;If any of this sounds interesting then Juju maybe for you! Treat your servers as cattle not as pets, for service oriented repeatable deployments on your choice of back-end. Orchestrate and relate your services with charms written in Python.&lt;/p&gt;
&lt;p&gt;In this talk we'll demo service deployment for a Django application and related infrastructure.&lt;/p&gt;
</summary><category term="juju"></category></entry><entry><title>Studying astronomy at the University of Warwick using Python</title><link href="https://pyvideo.org/pycon-uk-2014/studying-astronomy-at-the-university-of-warwick-using-python.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Simon Walker</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/studying-astronomy-at-the-university-of-warwick-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Simon Walker&lt;/p&gt;
&lt;p&gt;We at the astronomy group at the University of Warwick use Python for a wide range of tasks. From efficient image reduction through numpy array manipulation, high performance analysis by wrapping C++ code, or use of the multiprocessing module, Python is utilised for many applications.&lt;/p&gt;
&lt;p&gt;The astronomy group studies other worlds, searching for extrasolar planets with new projects such as NGTS, and utilising results from the Kepler project. Also studied are the most distant objects in the universe, where massive explosions are visible from colossal distances. Cold dying stars known as white dwarfs are modelled as systems orbiting and stealing mass from their companion stars.&lt;/p&gt;
&lt;p&gt;Python enables our understanding at the Warwick astronomy group. In this talk I discuss topics covering the whole scientific process from manipulating raw data and correcting for systematic errors, through analysis incorporating modelling and understanding the results, to visualising the final products ready for publication.&lt;/p&gt;
</summary></entry><entry><title>The failure of python object serialization: why HPC in python is broken</title><link href="https://pyvideo.org/pycon-uk-2014/the-failure-of-python-object-serialization-why-hpc-in-python-is-broken.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Mike McKerns</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/the-failure-of-python-object-serialization-why-hpc-in-python-is-broken.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Mike McKerns&lt;/p&gt;
&lt;p&gt;Parallel and asynchronous computing in python is crippled by pickle's poor object serialization. However, a more robust serialization package would drastically improve the situation. To leverage the cores found in modern processors we need to communicate functions between different processes -- and that means callables must be serialized without pickle barfing. Similarly, parallel and distributed computing with MPI, GPUs, sockets, and across other process boundaries all need serialized functions (or other callables). So why is pickling in python so broken? Python's ability to leverage these awesome communication technologies is limited by python's own inability to be a fully serializable language. In actuality, serialization in python is quite limited, and for really no good reason.&lt;/p&gt;
&lt;p&gt;Many raise security concerns for full object serialization, however it can be argued that it is not pickle's responsibility to do proper authentication. In fact, one could apply rather insecure serialization of all objects the objects were all sent across RSA-encrypted ssh-tunnels, for example.&lt;/p&gt;
&lt;p&gt;Dill is a serialization package that strives to serialize all of python. We have forked python's multiprocessing to use dill. Dill can also be leveraged by mpi4py, ipython, and other parallel or distributed python packages. Dill serves as the backbone for a distributed parallel computing framework that is being used to design the next generation of large-scale heterogeneous computing platforms, and has been leveraged in large-scale calculations of risk and uncertainty. Dill has been used to enable state persistence and recovery, global caching, and the coordination of distributed parallel calculations across a network of the world's largest computers.     &lt;a class="reference external" href="http://pythonhosted.org/dill"&gt;http://pythonhosted.org/dill&lt;/a&gt;     &lt;a class="reference external" href="https://github.com/uqfoundation"&gt;https://github.com/uqfoundation&lt;/a&gt;     &lt;a class="reference external" href="http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/"&gt;http://matthewrocklin.com/blog/work/2013/12/05/Parallelism-and-Serialization/&lt;/a&gt;     &lt;a class="reference external" href="http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1"&gt;http://stackoverflow.com/questions/19984152/what-can-multiprocessing-and-dill-do-together?rq=1&lt;/a&gt;     &lt;a class="reference external" href="https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY"&gt;https://groups.google.com/forum/#!topic/mpi4py/1fd4FwdgpWY&lt;/a&gt;     &lt;a class="reference external" href="http://nbviewer.ipython.org/gist/anonymous/5241793"&gt;http://nbviewer.ipython.org/gist/anonymous/5241793&lt;/a&gt;&lt;/p&gt;
</summary><category term="dill"></category><category term="serialization"></category><category term="pickle"></category></entry><entry><title>Trouble at t'LeedsDataMill: Oompah.py ~ Big Data meets Big Brass</title><link href="https://pyvideo.org/pycon-uk-2014/trouble-at-tleedsdatamill-oompahpy-big-data-meets-big-brass.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2014-10-20:pycon-uk-2014/trouble-at-tleedsdatamill-oompahpy-big-data-meets-big-brass.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Nicholas Tollervey &amp;amp; Simon Davy&lt;/p&gt;
&lt;p&gt;We will describe and (maybe) perform via the medium of Brass Band footfall data collected from the city of Leeds.&lt;/p&gt;
&lt;p&gt;It's likely to be a loud, fun, interesting and musical exposition of big data manipulated with Python.&lt;/p&gt;
&lt;p&gt;It may involve Tubas.&lt;/p&gt;
</summary></entry><entry><title>A time traveler's guide to Python</title><link href="https://pyvideo.org/pycon-uk-2014/a-time-travelers-guide-to-python.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Jessica McKellar</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/a-time-travelers-guide-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Jessica McKellar&lt;/p&gt;
&lt;p&gt;Python language history talk.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Building Great APIs in Python</title><link href="https://pyvideo.org/pycon-uk-2014/building-great-apis-in-python.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Paul Hallett</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/building-great-apis-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Paul Hallett&lt;/p&gt;
&lt;p&gt;Applications are increasingly reliant on third party web APIs that provide complex services through a simple web interface. As such, it has never been more important understand how to build APIs with our favourite tools. This talk covers the API development ecosystem available to Python, the best practices for building APIs, and a short demonstration of how easy it is to add an API to an existing Python app.&lt;/p&gt;
</summary></entry><entry><title>Dealing with Bug Black Boxes</title><link href="https://pyvideo.org/pycon-uk-2014/dealing-with-bug-black-boxes.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Fergus Doyle</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/dealing-with-bug-black-boxes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Fergus Doyle&lt;/p&gt;
&lt;p&gt;&amp;quot;Full-stack&amp;quot; includes so much more than just client and server these days, with systems building on top of multiple database engines, caching layers, search backends, third party web services and hosting solutions to name but a few.&lt;/p&gt;
&lt;p&gt;What does this mean for infrastructure? In this talk we'll explore the impact maintaining so many independent cogs can have on a system as a whole.&lt;/p&gt;
&lt;p&gt;We’ll look at third-party components vs. those developed and maintained in-house and their similarities and differences. How can we encapsulate and efficiently test components in such disparate systems? What can we do to minimise the overhead and risk of releasing new code to individual components nested deep within the machine?&lt;/p&gt;
</summary></entry><entry><title>Functional Programming and Python</title><link href="https://pyvideo.org/pycon-uk-2014/functional-programming-and-python.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Pete Graham</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/functional-programming-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Pete Graham&lt;/p&gt;
&lt;p&gt;What is functional programming, and when would you want to use it?&lt;/p&gt;
&lt;p&gt;Can you use Python to write programs in a functional style? Is this a good idea? What are the limitations, and when should you use an alternative functional language such as Haskell (Scala, Closure, Erlang, Lisp, etc).&lt;/p&gt;
</summary></entry><entry><title>How does a spreadsheet work?</title><link href="https://pyvideo.org/pycon-uk-2014/how-does-a-spreadsheet-work.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/how-does-a-spreadsheet-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Harry Percival&lt;/p&gt;
&lt;p&gt;How does a spreadsheet work? A tour of the codebase of Dirigible, the Pythonic spreadsheet&lt;/p&gt;
&lt;p&gt;Have you ever wondered how a spreadsheet works? It's actually surprisingly simple.&lt;/p&gt;
&lt;p&gt;Join me for a tour around the codebase of Dirigible, the Pythonic spreadsheet (recently rescued from its abandonware status and made open source).&lt;/p&gt;
&lt;p&gt;Find out how cell formulae are parsed and evaluated to become cell values, how the dependency graph of the spreadsheet is built, and how custom python code can be merged into spreadsheet calculations without everything exploding violently.&lt;/p&gt;
</summary></entry><entry><title>Micro Python - shrinking Python down to run on a microcontroller</title><link href="https://pyvideo.org/pycon-uk-2014/micro-python-shrinking-python-down-to-run-on-a-microcontroller.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Damien George</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/micro-python-shrinking-python-down-to-run-on-a-microcontroller.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Damien George&lt;/p&gt;
&lt;p&gt;Micro Python is a rewrite of the Python language that uses minimal RAM and which is optimised to run on a microcontroller (basically a very small computer). I will outline the architecture of Micro Python, explain how it minimises RAM usage, and discuss its benefits and use in the embedded electronics world.&lt;/p&gt;
</summary><category term="MicroPython"></category></entry><entry><title>PyPy and it's ecosystem</title><link href="https://pyvideo.org/pycon-uk-2014/pypy-and-its-ecosystem.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Ronan Lamy</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/pypy-and-its-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Ronan Lamy&lt;/p&gt;
&lt;p&gt;PyPy is a fast, compliant alternative implementation of the Python language (2.7.6 and 3.2.5). I will give an overview of the current status of and the on-going development efforts on all the pieces that combine to make it a compelling Python platform. In particular, I will mention the RPython toolchain, CFFI, the JIT, garbage collection, the numpy port, Python 3 support, software transactional memory.&lt;/p&gt;
</summary></entry><entry><title>Stormy Webber</title><link href="https://pyvideo.org/pycon-uk-2014/stormy-webber.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Wes Mason</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/stormy-webber.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Wes Mason&lt;/p&gt;
&lt;p&gt;An introductory talk to building fast non-blocking async web services with Tornado, especially relevant to Django, Flask, bottle, web.py, Pyramid, Zope, Gevent, Twisted and every other web (or not) dev interested in learning what makes Tornado special for such tasks.&lt;/p&gt;
&lt;p&gt;Bonus: advanced tips and tricks for migrating from current systems and working with technologies such as WebSockets and Server Sent Events in Tornado.&lt;/p&gt;
</summary></entry><entry><title>Teaching children to program Python with the Pyland game</title><link href="https://pyvideo.org/pycon-uk-2014/teaching-children-to-program-python-with-the-pyland-game.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Alex Bradbury</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/teaching-children-to-program-python-with-the-pyland-game.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Alex Bradbury&lt;/p&gt;
&lt;p&gt;This summer, a team of interns at the University of Cambridge Computer Lab have been working on a project to teach children to program in Python through a programming game. The primary target platform is the Raspberry Pi, though multi-platform ports are planned for the future. It is, of course, open source. The game consists of a number of challenges and puzzles which invite the user to apply programming techniques in order to progress. I will discuss the motivation for the game, give a demo, give some insight into its implementation, our plans for the future, and how you can get involved.&lt;/p&gt;
</summary></entry><entry><title>The High Performance Python Landscape</title><link href="https://pyvideo.org/pycon-uk-2014/the-high-performance-python-landscape.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Ian Ozsvald</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/the-high-performance-python-landscape.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Ian Ozsvald&lt;/p&gt;
&lt;p&gt;A Python programmer has many options to profile and optimize CPU-bound and data-bound systems, common solutions include Cython, numpy and PyPy. Increasingly we have single-core solutions that should take advantage of many cores and clusters. This talk reviews the current state of the art, looking at the compromises and outcomes of the current approaches and reviews upcoming solutions like Numba, Pythran and PyPy’s numpy and STM. Thoughts will be shared on how current hindrances might be improved.&lt;/p&gt;
</summary></entry><entry><title>The Minecraft Challenge</title><link href="https://pyvideo.org/pycon-uk-2014/the-minecraft-challenge.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Katie Bell</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/the-minecraft-challenge.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Katie Bell&lt;/p&gt;
&lt;p&gt;There's already a great Python scripting interface for Minecraft, allowing you limitless creativity with the ability to read and place blocks anywhere. Unfortunately with limitless power the challenge of Minecraft disappears, because building a castle is somehow more satisfying when you have to mine and craft every block. If you’ve played Minecraft you’ve no doubt found yourself building or mining mindlessly in a pattern and wished you could simply script away the boring bits, but still keep the fun and challenge of the game.&lt;/p&gt;
&lt;p&gt;In this presentation I'll be demonstrating a Python interface for writing Minecraft AIs, giving you the programming equivalent of Survivor mode. Your helper robots have some advantages over humans and can mine and build things for you faster, but ultimately this doesn't feel like cheating because it can’t do anything you can’t do. This also works well in multiplayer on an open server where players and bots can interact but no single player can destroy the world with a small software bug.&lt;/p&gt;
&lt;p&gt;Writing an AI for the Minecraft world poses an interesting challenge for both young and experienced programmers, it’s a pure example of how we can use programming to avoid boring and repetitive tasks in the real world. It provides new programmers with immediate goals and for students exploring more advanced computer science concepts it leads well into real world robot control and game AI algorithms.&lt;/p&gt;
&lt;p&gt;In this talk, I'll go through the Minecraft server and client implementation details, the challenges of multiplayer programming and the structures built into the interface to make coding AIs easier such as built-in state machines and the ability for the in-game player to give commands.&lt;/p&gt;
&lt;p&gt;As a bonus, we’ll see how it plays out in the real world, what happens when we give the interface to a group of young programmers on a shared server, and how we can set up competitions and more specific AI-coding challenges.&lt;/p&gt;
</summary></entry><entry><title>Using python to improve government</title><link href="https://pyvideo.org/pycon-uk-2014/using-python-to-improve-government.html" rel="alternate"></link><published>2014-10-14T00:00:00+00:00</published><updated>2014-10-14T00:00:00+00:00</updated><author><name>Michael Brunton-Spall</name></author><id>tag:pyvideo.org,2014-10-14:pycon-uk-2014/using-python-to-improve-government.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Michael Brunton-Spall&lt;/p&gt;
&lt;p&gt;The Government Digital Service is helping to transform government, helping to provide user led, high quality digital services to make citizens lives easier. One of the projects is based in Birmingham, dealing with giving citizens redundancy pay if their employer goes insolvent. We took a team of .NET engineers with no experience of agile development, and built a project in Python, iteratively, following government security principles. In this session, you'll learn why we picked python, how we convinced management, and how we convinced the developers&lt;/p&gt;
</summary></entry><entry><title>Collaborative, streaming, 3D, and interactive matplotlib, ggplot2, and MATLAB plots in an IPython Notebook with Plotly</title><link href="https://pyvideo.org/pycon-uk-2014/collaborative-streaming-3d-and-interactive-matplotlib-ggplot2-and-matlab-plots-in-an-ipython-notebook-with-plotly.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Carole Griffiths</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/collaborative-streaming-3d-and-interactive-matplotlib-ggplot2-and-matlab-plots-in-an-ipython-notebook-with-plotly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Carole Griffiths &amp;amp; Chris Parmer&lt;/p&gt;
&lt;p&gt;Plotly's Python API lets you make and share beautiful, web-based plots. This talk will be a walk-through of Plotly's library. We will craft and embed interactive graphs within an IPython Notebook, use Plotly's web-app to edit and share graphs, and use Plotly's matplotlib wrapper to create web-based graphs and data files from matplotlib scripts.&lt;/p&gt;
&lt;p&gt;Plotly is the easiest way to graph and share your data online. Plotly allows you to make beautiful, interactive online graphs from Python, R, or MATLAB code or with its web-based spreadsheet tool. Public sharing is free, users own their data, and users control whether data and graphs are public or private.&lt;/p&gt;
</summary></entry><entry><title>Ecosystem Threats to Python</title><link href="https://pyvideo.org/pycon-uk-2014/ecosystem-threats-to-python.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/ecosystem-threats-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Van Lindberg.&lt;/p&gt;
&lt;p&gt;Friday morning keynote.&lt;/p&gt;
&lt;p&gt;Python is a spectacular success - far more than anyone, even Guido, would have anticipated 20 years ago. Python is preinstalled on almost every operating system, is becoming the lingua franca for many numeric, statistical, and big data problems, and is the default teaching language in many colleges and universities.&lt;/p&gt;
&lt;p&gt;But our success does not hide the warning signs. Javascript, Julia, Java, Lua, and Go are all picking up speed and mindshare, frequently at the expense of Python. What do these languages and language communities have that is enticing others to pick them? How can we learn from the good ideas in these languages to make Python even stronger? How can we interoperate and build on what they have?&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>HTTP/2: Because The Web Was Too Easy</title><link href="https://pyvideo.org/pycon-uk-2014/http2-because-the-web-was-too-easy.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Cory Benfield</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/http2-because-the-web-was-too-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Cory Benfield.&lt;/p&gt;
&lt;p&gt;The internet has spoken, HTTP is to get its first serious update in 15 years. In this talk we'll discuss what HTTP/2 is, why it's happening, and how it's going to affect you and everyone you love.&lt;/p&gt;
</summary></entry><entry><title>Lessons From Strangers</title><link href="https://pyvideo.org/pycon-uk-2014/lessons-from-strangers.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Rachel Sanders</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/lessons-from-strangers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Rachel Sanders&lt;/p&gt;
&lt;p&gt;Why are some workplaces vibrant and innovative, and others fetid pits of despair? Why are some products loved and others DOA? I dove into the strange world of business and psychology and emerged a better engineer.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Python For Zombies</title><link href="https://pyvideo.org/pycon-uk-2014/python-for-zombies.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Fernando Masanori</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/python-for-zombies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Fernando Masanori&lt;/p&gt;
&lt;p&gt;&amp;quot;15.000 enrolled in the first Brazilian MOOC to teach programming&amp;quot;&lt;/p&gt;
&lt;p&gt;Python for Zombies is the first MOOC (Massive Open Online Course) to teach programming in portuguese. Our first edition had 15.000 &amp;quot;zombies&amp;quot;. This course is different from traditional MOOCs (Edx, Coursera, etc). First is an initiative of the Brazilian Python community. Besides the difference of language, it is very &amp;quot;casual&amp;quot;, as I have little time, I recorded most of the videos on my trips between meetings, conferences or at mealtimes. This MOOC is &amp;quot;brazilian&amp;quot;, in a non traditional academic way. The size of the videos is far lower than the average traditional courses too. I will show you the most funny codes that I used in MOOC classes to teach programming: hacking basic modules and classes to obtain the &amp;quot;Answer to the Ultimate Question of Life, the Universe, and Everything&amp;quot;. All material is Creative Commons Share Alike. The MOOC is based in my experience to teach programming in past six years at FATEC, a public university in Brazil, with decreasing rates of failure in the introduction to programming discipline. We have 100% class in labs, Coding Dojos to training and tests in exercises. Slides: &lt;a class="reference external" href="http://bit.ly/python-for-zombies"&gt;http://bit.ly/python-for-zombies&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Simulating quantum systems</title><link href="https://pyvideo.org/pycon-uk-2014/simulating-quantum-systems.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Katie Barr</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/simulating-quantum-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Katie Barr&lt;/p&gt;
&lt;p&gt;Quantum theory is famously difficult and paradoxical, but exploring quantum systems numerically in high level languages such as Python is surprisingly easy. In this talk I will describe, step by step, how to simulate a particular system, the discrete time quantum walk. This is the quantum analogue of a classical random walk, and has some interesting properties which I will briefly describe. The simulation can be performed with just 15 lines of Python code, using no external modules. I will then indicate how simple variations on this simulation are used to perform current research into the discrete time quantum walk, as the example I give is a variation of Grover's algorithm, which is asymptotically the fastest possible quantum search algorithm. By the end of the talk listeners should be able to go away and perform their own simulations of this system. I will also indicate further motivations for using Python to investigate quantum mechanical systems, in particular using numpy support for linear algebra, which is one of the types of mathematics used by quantum theorists. There will be no mention of the trickier aspects of quantum systems, but, for those interested, I will provide materials describing how to measure entanglement and explore the effects of measurement in the quantum walk I have presented. I do not expect listeners to have any background in mathematics and physics, and will keep technical discussion which would require such background to a minimum.&lt;/p&gt;
</summary></entry><entry><title>Tests without boilerplate</title><link href="https://pyvideo.org/pycon-uk-2014/tests-without-boilerplate.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/tests-without-boilerplate.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Jonathan Fine&lt;/p&gt;
&lt;p&gt;This talk is about a new way of writing tests.&lt;/p&gt;
&lt;p&gt;We arrange matters so that the expression statement &lt;cite&gt;add(2, 2) == 4&lt;/cite&gt; reports a test failure if &lt;cite&gt;add(2, 2)&lt;/cite&gt; does not return &lt;cite&gt;4&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Similarly &lt;cite&gt;add(2, '2') ** TypeError&lt;/cite&gt; reports a test failure if &lt;cite&gt;add(2, '2')&lt;/cite&gt; does not raise a &lt;cite&gt;TypeError&lt;/cite&gt; exception.&lt;/p&gt;
&lt;p&gt;These new semantics (which provide no-boilerplate testing) do not apply when comparison expressions are used in conditional statements etc.&lt;/p&gt;
&lt;p&gt;I will demonstrate Python software that implements this, and will discuss with you the use, benefits and development of this new approach to writing tests.&lt;/p&gt;
</summary></entry><entry><title>Try A Little Randomness</title><link href="https://pyvideo.org/pycon-uk-2014/try-a-little-randomness.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/try-a-little-randomness.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Larry Hastings&lt;/p&gt;
&lt;p&gt;This talk is all about random numbers--what are they? What different kinds are there? What are they useful for? And why are computers really bad at them? Come learn all about random numbers, both the good and the bad.&lt;/p&gt;
</summary></entry><entry><title>When performance matters</title><link href="https://pyvideo.org/pycon-uk-2014/when-performance-matters.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Marc-Andre Lemburg</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/when-performance-matters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Marc-Andre Lemburg&lt;/p&gt;
&lt;p&gt;Installing Python packages is usually done with one of the available package installation systems, e.g. pip, easy_install, zc.buildout, manual &amp;quot;python setup.py install&amp;quot;.&lt;/p&gt;
&lt;p&gt;These systems work fine as long as you have Python-only packages. For packages that contain binaries, such as Python C extensions or other platform dependent code, the situation is a lot less bright.&lt;/p&gt;
&lt;p&gt;In the talk I will present a new web installer system that we're currently developing to overcome these limitations. The system uses the dynamic Python installation interface that all installers support (&amp;quot;python setup.py install&amp;quot;) with a web installer which automatically selects, downloads, verifies and installs the binary package for your platform.&lt;/p&gt;
</summary></entry></feed>