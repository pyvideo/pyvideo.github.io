<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 25 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Machine Learning as a Service: How to deploy ML Models as APIs without going nuts</title><link>https://pyvideo.org/pycon-de-2018/machine-learning-as-a-service-how-to-deploy-ml-models-as-apis-without-going-nuts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Often, the most convenient way to deploy a machine model is an API. It
allows accessing it from various programming environments and also
decouples the development and deployment of the models from its use.&lt;/p&gt;
&lt;p&gt;However, building an good API is hard. It involves many nitty-gritties
and many of them need to repeated everytime an API is built. Also, it is
very important to have a client library so that the API can be easily
accessed. If you every plan to use it from Javascript directly, then you
need to worry about cross-origin-resource-sharing etc. All things add up
and building APIs for machine very tedious.&lt;/p&gt;
&lt;p&gt;In this talk demonstrates how deploying machine learning models an APIs
can be made fun by using right programming abstractions. This presents
couple of opensource libraries
&lt;a class="reference external" href="https://firefly-%20python.readthedocs.io/en/latest/"&gt;firefly&lt;/a&gt; and
&lt;a class="reference external" href="https://rorodata.github.io/rorolite/"&gt;rorolite&lt;/a&gt; which are built for
this very purpose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/machine-learning-as-a-service-how-to-deploy-ml-models-as-apis-without-going-nuts.html</guid><category>Machine Learning</category><category>Python</category><category>Web</category></item><item><title>Machine Learning as a Service</title><link>https://pyvideo.org/pycon-uk-2018/machine-learning-as-a-service.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to deploy ML Models as APIs without going nuts&lt;/p&gt;
&lt;p&gt;Often, the most convenient way to deploy a machine model is an API. It
allows accessing it from various programming environments and also
decouples the development and deployment of the models from its use.&lt;/p&gt;
&lt;p&gt;However, building an good API is hard. It involves many nitty-gritties
and many of them need to repeated every time an API is built. It
requires understanding of some web framework, worrying about data
validation, authentication and deploying etc. Also, it is very important
to have a client library so that the API can be easily accessed. If you
ever plan to use it from Javascript directly, then you need to worry
about cross-origin-resource- sharing etc.&lt;/p&gt;
&lt;p&gt;In this talk demonstrates how deploying machine learning models an APIs
can be made fun by using right programming abstractions and tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-16:pycon-uk-2018/machine-learning-as-a-service.html</guid></item><item><title>Rewriting the Wayback machine's live web proxy in Python</title><link>https://pyvideo.org/pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The wayback machine is a high traffic website that has been online for over a decade. It was a mostly Java application. One component of the application is the Liveweb proxy. This is an HTTP proxy that archives a resource which is requested through it and the core data source for the wayback machine.
The liveweb proxy was rearchitected from scratch in Python and deployed on the actual website and has been running for a few months now without a single hitch. There were limitations in the standard library which needed to be worked around, careful tuning of parameters to balance disk I/O and memory usage, fine details of the HTTP protocol that needed to be understood and respected.
This talk discusses the architecture and design of the new system to handle the kind of traffic and patterns which are expected of an archiving proxy and how it was deployed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Noufal Ibrahim</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</guid><category>wayback machine</category><category>liveweb</category><category>http</category></item><item><title>Solving Puzzles with Python - (1/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-13.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-13.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item><item><title>Solving Puzzles with Python - Anand Chitipothu (2/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-23.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-23.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item><item><title>Solving Puzzles with Python - Anand Chitipothu (3/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-33.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-33.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item><item><title>Decorators Demystified</title><link>https://pyvideo.org/pycon-singapore-2015/decorators-demystified.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are heavily used in modern python libraries and web frameworks. But they are still mystery to many people. In this talk I plan to discuss the concept of decorators in depth.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-18:pycon-singapore-2015/decorators-demystified.html</guid></item><item><title>Managing Machine Learning Models in Production</title><link>https://pyvideo.org/pycon-uk-2017/managing-machine-learning-models-in-production.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing models in production is not a trivial task. It involves many challenges like managing multiple versions of models, deploying them as service, monitoring their performance, making it easier to collaborate with multiple people, etc.&lt;/p&gt;
&lt;p&gt;This talk presents the tools, techniques and system architecture of a cloud platform built by the author to address these challenges.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Sat, 28 Oct 2017 15:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-28:pycon-uk-2017/managing-machine-learning-models-in-production.html</guid></item><item><title>Writing Beautiful Code</title><link>https://pyvideo.org/europython-2017/writing-beautiful-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing code is hard. Writing beautiful code is even more so.&lt;/p&gt;
&lt;p&gt;How to write code that is pleasant to read, easy to understand and joy to maintain?&lt;/p&gt;
&lt;p&gt;Simple things like using right variable names, avoiding to much nesting,
using white space and comments etc. makes a lot difference to readability
of the code. Even though these things look very simple,
even experienced programmers find it hard to put them in practice.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll try summarise the age old wisdom of writing beautiful
code and explain those ideas using practical examples written in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-11:europython-2017/writing-beautiful-code.html</guid></item><item><title>Writing Beautiful Code</title><link>https://pyvideo.org/pycon-pune-2017/writing-beautiful-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing code is hard. Writing beautiful code is even more so.&lt;/p&gt;
&lt;p&gt;How to write code that is pleasant to read, easy to understand and joy
to maintain?&lt;/p&gt;
&lt;p&gt;Simple things like using right variable names, avoiding to much nesting,
using white space and comments etc. makes a lot difference to
readability of the code. Even though these things look very simple, it
is very hard to put them in practice.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll try summarise the age old wisdom of writing beautiful
code using python examples.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Choose meaningful variable names&lt;/div&gt;
&lt;div class="line"&gt;Avoid generic names&lt;/div&gt;
&lt;div class="line"&gt;Give names to magic numbers&lt;/div&gt;
&lt;div class="line"&gt;Avoid too many nested levels&lt;/div&gt;
&lt;div class="line"&gt;Avoid too many branches&lt;/div&gt;
&lt;div class="line"&gt;Use “telephone test” for readability&lt;/div&gt;
&lt;div class="line"&gt;Use idioms of the language&lt;/div&gt;
&lt;div class="line"&gt;Avoid superficial comments&lt;/div&gt;
&lt;div class="line"&gt;Add comments to explain complex piece of software&lt;/div&gt;
&lt;div class="line"&gt;Avoid writing comments by writing code clearly&lt;/div&gt;
&lt;div class="line"&gt;Avoid side effects&lt;/div&gt;
&lt;div class="line"&gt;Try to make functions stateless&lt;/div&gt;
&lt;div class="line"&gt;Let one function do one thing well&lt;/div&gt;
&lt;div class="line"&gt;Write smaller functions - the 7 plus or minus 2 rule&lt;/div&gt;
&lt;div class="line"&gt;Separate “what” from “how”&lt;/div&gt;
&lt;div class="line"&gt;Don’t sacrifice clarity for efficiency&lt;/div&gt;
&lt;div class="line"&gt;The Zen of Python&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-16:pycon-pune-2017/writing-beautiful-code.html</guid></item></channel></rss>