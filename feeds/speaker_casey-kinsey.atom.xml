<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_casey-kinsey.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-09-13T00:00:00+00:00</updated><entry><title>Writing Fast and Efficient Unit Tests for Django</title><link href="https://pyvideo.org/djangocon-us-2013/writing-fast-and-efficient-unit-tests-for-django.html" rel="alternate"></link><published>2013-10-01T00:00:00+00:00</published><updated>2013-10-01T00:00:00+00:00</updated><author><name>Casey Kinsey</name></author><id>tag:pyvideo.org,2013-10-01:djangocon-us-2013/writing-fast-and-efficient-unit-tests-for-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing Fast and Efficient Unit Tests for Django&lt;/p&gt;
&lt;p&gt;Tuesday 4:45 p.m.--5:30 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Many developers have difficulty finding clear guidelines and best
practices for how to test efficiently, leading to a flimsy, slow, and
ineffective test suite. This talk will cover some basic (but oft
overlooked) principles of unit and integration testing, and dive into
more advanced topics such as testing with read only data and using Mock
ultra-focused and fast testing. Abstract&lt;/p&gt;
&lt;p&gt;Borrowing from recent real-world experiences, Casey will discuss how a
sub-par test suite began to cause delays and negatively affect a large
production project with a national audience. He'll share what his team
learned after deciding to dive head-first into faster and more effective
testing, including: The key differences between unit tests and
integration tests, and how to distribute them appropriately Dropping the
Django framework's fixture system in favor of read-only test data to
create a test suite that adapts alongside a complex and changing data
model Using the python Mock library to: Mock object instances Mock
python modules for very precise feature testing Mock very complex
testing situations (such as overridden class methods, etc)&lt;/p&gt;
&lt;p&gt;We'll look at real code samples and the tests used to vet them,
demonstrating the ways Casey's team was able to update their tests to
use these standards and quantify the benefits. And finally, we'll
discuss how the quest for faster tests lead to a full blown testing
philosophy and better code.&lt;/p&gt;
</summary></entry><entry><title>Inheriting a Sloppy Codebase: A Practical Guide to Wrangling Chaotic Code</title><link href="https://pyvideo.org/djangocon-us-2014/inheriting-a-sloppy-codebase-a-practical-guide-to.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Casey Kinsey</name></author><id>tag:pyvideo.org,2014-09-13:djangocon-us-2014/inheriting-a-sloppy-codebase-a-practical-guide-to.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In an industry where “lean” has become the mantra and rapidly iterated
products imply tight budgets and tighter deadlines, how do you
effectively take ownership of someone’s hastily written Django code? In
this talk, we’ll dive into a step-by-step process for dicing up legacy
projects, short-sighted prototypes, and plain ol’ spaghetti code to turn
them into codebases you’ll show off with pride.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FNEt/"&gt;http://amara.org/v/FNEt/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>