<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Ivana Kellyerova</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>import bacon ðŸ¥“</title><link>https://pyvideo.org/europython-2019/import-bacon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's often said that Python comes with batteries included, meaning that
the standard library can do basically anything except for maybe conjure
bacon for you (though I heard that's coming in 3.8). I don't think we
fully appreciate the sheer vastness of it, though, so I went through it
module by module looking for hidden gems (sorry, eggs). This is a by no
means exhaustive compilation of the useful, the underrated, and the
funny.&lt;/p&gt;
&lt;p&gt;When it comes to the Python standard library, chances are you use it on
a daily basis -- or more likely, a more or less stable subset of it. The
usual way we add things to the subset is by looking for a solution to a
problem and ending up getting pointed to a standard library module.
That, however, means that the odds of you finding out that there is a
whole module whose sole purpose is to tell you if a string is a Python
keyword are very slim.&lt;/p&gt;
&lt;p&gt;The aim of this talk is to showcase CPython libraries that are
interesting in some way: mostly for their usefulness, but in some cases
simply for being wonderfully weird in some way. The talk is not aimed at
any particular level of Python experience - as a beginner you'll get a
taste of just how many batteries Python ships with, and as a person
using the language often you might end up growing your own personal
subset a bit more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivana Kellyerova</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/import-bacon.html</guid><category>EuroPython 2019</category><category>CPython</category><category>Python general</category></item><item><title>How to Avoid Becoming a 10x Engineer</title><link>https://pyvideo.org/europython-2020/how-to-avoid-becoming-a-10x-engineer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why you should ignore advice by random internet people, by a random internet person&lt;/p&gt;
&lt;p&gt;The internet has never failed at being, among other things, a giant treasure of unsolicited advice by random people on all sorts of things, programming being no exception. Wanna become a better coder? Learn to maximize your WPM (c). Never look at documentation because that's just embarrassing. And for crying out loud, change your screen background to black!&lt;/p&gt;
&lt;p&gt;So there you are, a fairly okay programmer, looking for ways to become better at coding. How do you achieve that? Well I'm no 10x engineer myself (thank goodness), but I do believe that there's a handful of things we can safely rule out.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivana Kellyerova</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/how-to-avoid-becoming-a-10x-engineer.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Best Practice</category><category>Programming</category><category>The Answer to Life the Universe and Everything Else</category></item></channel></rss>