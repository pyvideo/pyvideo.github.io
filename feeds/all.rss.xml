<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 13 Jun 2024 19:25:00 +0000</lastBuildDate><item><title>BayPiggies May 2017: The Bowtie Dashboard Framework</title><link>https://pyvideo.org/bay-piggies/baypiggies-may-2017-the-bowtie-dashboard-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jacques Kvam
Video courtesy of our host, LinkedIn.&lt;/p&gt;
&lt;p&gt;Abstract
Creating useful visualizations is an important skill for data scientists. They allow us to gain new insights into our data. Dashboards are powerful tools for creating complex and interactive visualizations. You can explore data in ways static charts cannot. Bowtie is a Python library that makes it easy to create dashboards. This talk will introduce Bowtie and focus on creating dashboards and interesting features. I will also discuss deploying them, the tech stack, and future work and goals.&lt;/p&gt;
&lt;p&gt;Speaker Bio
Jacques Kvam is a Data Scientist at Verdigris Technologies, an energy analytics startup. He worked at Sandia National Labs as a staff R&amp;amp;D engineer. He studied signal processing and communications at UW-Madison.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacques Kvam</dc:creator><pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-25:/bay-piggies/baypiggies-may-2017-the-bowtie-dashboard-framework.html</guid><category>Bay Piggies</category></item><item><title>BayPIGgies April 2017 talk: Annual PyCon Preview</title><link>https://pyvideo.org/bay-piggies/baypiggies-april-2017-talk-annual-pycon-preview.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Video courtesy of our meeting host, LinkedIn.
1. Automate AWS With Python - Moshe Zadka
AWS is one of the best-known cloud vendors. Using the Web UI is fine when starting out, but automating cloud operations is important. Boto3 provides a great Pythonic API to AWS, but using it correctly can be subtle.
The talk will cover how to automate AMI builds, building Cloud Formation Templates and automating S3 bucket management.
Speaker Bio
Moshe has been involved with Python since 1998, when he helped obsolete math-related modules. Since then, he made some contributions that were not just deleting code to core Python, and has been a contributor on the Twisted project since its inception.
Abstract
2. Yes, It's Time to Learn Regular Expressions - Al Sweigart
Regular expressions have a reputation as opaque and inscrutable. However, the basic concepts behind &amp;quot;regex&amp;quot; and text pattern recognition are simple to grasp. This talk is for any programmer who isn't familiar with Python's re module and its best practices. Stop putting it off, it's time to learn regular expressions!
Speaker Bio
Al Sweigart is a software developer and the author of Automate the Boring Stuff with Python, Invent Your Own Computer Games with Python, Making Games with Python &amp;amp; Pygame, and Hacking Secret Ciphers with Python. These books are freely available under a Creative Commons license at &lt;a class="reference external" href="http://inventwithpython.com"&gt;http://inventwithpython.com&lt;/a&gt;.
Al enjoys haunting coffee shops, writing educational materials, cat whispering, and making useful software. He lives in San Francisco.
3. Type uWSGI; press enter; what happens? - Asheesh Laroia and Philip James
You're a pretty knowledgeable Python web application developer, but how does that web application get served to the world? For many of us, uWSGI is the magic that makes our application available, and in this talk we'll look at how uWSGI works with the OS and the networking stack to make the magic happen.
Speaker Bios
Asheesh Laroia
By day, Asheesh Laroia is a member of the technical staff at Sandstorm in Palo Alto. By night, he is volunteer President at OpenHatch, helping create workshops that teach students how to get involved in open source. His technical background touches machine learning, security, and linguistics. He helped start the Boston Python Workshop for women and their friends, has been teaching Python to newcomers since 2004, including at Noisebridge and the EFF, and has advised user groups on how to make their events more newcomer-friendly and gender-diverse.
Philip James
Philip James is a Software Engineer at Stripe, a Civic Technologist and a Director for the City of Alameda Democratic Club and the East Bay Young Democrats. In his free time he builds ContactOtter, a smart address book you can share.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-27:/bay-piggies/baypiggies-april-2017-talk-annual-pycon-preview.html</guid><category>Bay Piggies</category></item><item><title>Bay PIGgies March 2017: Testing in Layers</title><link>https://pyvideo.org/bay-piggies/bay-piggies-march-2017-testing-in-layers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Alex Martelli&lt;/p&gt;
&lt;p&gt;Abstract
Learn how to code tests in modular ways suitable for multiple arrangements and layers, arrange and deploy tests as unit tests, intermediate integration tests, end-to-end tests, and load-tests, and enrich code and tests with appropriate use and analysis of logging.&lt;/p&gt;
&lt;p&gt;Speaker Bio
Alex Martelli is a senior staff engineer at Google. Alex is the author of Python in a Nutshell and coeditor of the Python Cookbook. He is a PSF Fellow and won the 2002 Activators’ Choice Award and the 2006 Frank Willison Award for contributions to the Python community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-03-16:/bay-piggies/bay-piggies-march-2017-testing-in-layers.html</guid><category>Bay Piggies</category></item><item><title>Febuary 2017 Meeting at LinkedIn: Production Data Science for Healthcare in Python</title><link>https://pyvideo.org/bay-piggies/febuary-2017-meeting-at-linkedin-production-data-science-for-healthcare-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Melanie Goetz&lt;/p&gt;
&lt;p&gt;Productionizing data science often involves a team of scientists prototyping a statistical model in a language like R followed by a team of engineers translating and rebuilding that model into a “production&amp;quot; language. However, with Python, it’s easy to have your Data Science team and your Engineering teams working together collaboratively in the same language. But how does a modular production data science pipeline in Python look? This talk will cover how the data science pipeline at Clover automatically turns messy health data into insights and decisions.&lt;/p&gt;
&lt;p&gt;Speaker Bio
Melanie Goetz is a Data Science Lead at Clover Health, a health insurance startup in San Francisco. She studied Linguistics and Math/CS at MIT and dropped out of a CS PhD at UPenn. Previously, she worked at Oracle on machine learning, at Klout on natural language processing, and at Twitter on big data ad munging.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Melanie Goetz</dc:creator><pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-23:/bay-piggies/febuary-2017-meeting-at-linkedin-production-data-science-for-healthcare-in-python.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies January 2017 talk at LinkedIn: A Journey through Python</title><link>https://pyvideo.org/bay-piggies/baypiggies-january-2017-talk-at-linkedin-a-journey-through-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Charles Merriam&lt;/p&gt;
&lt;p&gt;&amp;quot;Python&amp;quot; encompasses a huge knowledge area of internals, libraries, tools, and philosophy. This talk maps the knowledge touching on the Zen of Python, decorators, dunders, Django, Jupyter and more. You will learn something new and map how Python fits together as a coherent whole.&lt;/p&gt;
&lt;p&gt;Charles Merriam has presented to BayPiggies and PyCon many times over the years, including a 2007 talk on this same subject.&lt;/p&gt;
&lt;p&gt;Editor's note: this talk is really great. If you are a beginner, you will learn a lot about how to wrap your head around the Python language and ecosystem. If you are an experienced Python developer, the talk will leave you with renewed enthusiasm for Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Charles Merriam</dc:creator><pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-01-26:/bay-piggies/baypiggies-january-2017-talk-at-linkedin-a-journey-through-python.html</guid><category>Bay Piggies</category></item><item><title>Dec 2016 BayPiggies Talk at LinkedIn: Introducing Type Annotations for Python</title><link>https://pyvideo.org/bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Guido Van Rossum, Greg Price, and David Fisher&lt;/p&gt;
&lt;p&gt;Dropbox has several million lines of production code written in Python 2.7. As a first step towards migrating to Python 3, as well as to generally make our code more navigable, we are annotating our code with type annotations using the PEP 484 standard and type-checking the annotated code with mypy. In this talk we will discuss lessons learned and show how you too can start type-checking your legacy Python 2.7 code, one file at a time. We will also describe some of the many improvements we’ve made to mypy in the process, as well as some other tools that come in handy.&lt;/p&gt;
&lt;p&gt;Mypy is an open-source type-checker for Python. It was originally created by one of the speakers, Jukka Lehtosalo, in support of his PhD thesis, before he joined Dropbox. Mypy supports the PEP 484 standard for gradual typing in Python. It supports Python 3.2 and higher, as well as Python 2.7 (using function signatures in type comments, per a recent update to PEP 484).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-12-15:/bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html</guid><category>Bay Piggies</category></item><item><title>November 2016 Baypiggies Talk at LinkedIn: Django and Security</title><link>https://pyvideo.org/bay-piggies/november-2016-baypiggies-talk-at-linkedin-django-and-security.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: James Bennett&lt;/p&gt;
&lt;p&gt;This talk will be a historical tour of the Django project's approach to security. We'll cover how Django's security policies have evolved over its eleven-year history, the ways the framework has integrated security as a major goal, and what we can learn from looking at patterns in the security issues that have occurred in Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-17:/bay-piggies/november-2016-baypiggies-talk-at-linkedin-django-and-security.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies October 2016 talk by Jeff Fischer at LinkedIn: Python and IoT</title><link>https://pyvideo.org/bay-piggies/baypiggies-october-2016-talk-by-jeff-fischer-at-linkedin-python-and-iot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From Chips and Bits to Data Science&lt;/p&gt;
&lt;p&gt;Ever want to know what is behind the &amp;quot;Internet of Things&amp;quot; hype? Back in Feburary, I wanted to as well, so I embarked on a side project to learn more. This talk is the story of my journey, using, of course, my favorite programming language, Python.&lt;/p&gt;
&lt;p&gt;In this talk, I will take you through my project, a lighting replay system. I captured light sensor data (using Micropython and the ESP8266) in three rooms of my house. I then analyzed the data using Jupyter notebooks, Numpy, Pandas, and Scikit-learn. My goal was to replay realistic light usage when my family and I are out of town. After exploring several machine learning approaches, I settled on Hidden Markov Models (using Hmmlearn). I now have a simple application that runs on my Raspberry Pi and controls Phillips Hue lights based on the learned model. Along the way, I played around with hardware for the first time since college and co-developed an open source data filtering framework, called AntEvents&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Fischer</dc:creator><pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-27:/bay-piggies/baypiggies-october-2016-talk-by-jeff-fischer-at-linkedin-python-and-iot.html</guid><category>Bay Piggies</category></item><item><title>September 2016 BayPiggies Meeting at LinkedIn: Guido van Rossum</title><link>https://pyvideo.org/bay-piggies/september-2016-baypiggies-meeting-at-linkedin-guido-van-rossum.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Guido van Rossum is the author of the Python programming language. He continues to serve as the &amp;quot;Benevolent Dictator For Life&amp;quot; (BDFL), meaning that he continues to oversee the Python development process, making decisions where necessary. He is currently employed by Dropbox.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-22:/bay-piggies/september-2016-baypiggies-meeting-at-linkedin-guido-van-rossum.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies August 2016 Talk by Wesley Chun at LinkedIn: Exploring Google APIs with Python</title><link>https://pyvideo.org/bay-piggies/baypiggies-august-2016-talk-by-wesley-chun-at-linkedin-exploring-google-apis-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to integrate Google technologies into the web+mobile apps that you build? Did you know Google has various open source libraries that help you do exactly that? Users who may have tried &amp;amp; failed, run into roadblocks, been confused about using our APIs, or had issues with authentication are welcome to come and make these non-issues moving forward. Finally, we'll demo using multiple Google APIs to give you an idea of what it's all about!&lt;/p&gt;
&lt;p&gt;WESLEY CHUN, MSCS, is the author of Prentice Hall's bestselling &amp;quot;Core Python&amp;quot; book series &amp;amp; companion videos (corepython.com), co-author of &amp;quot;Python Web Development with Django&amp;quot; (withdjango.com), and has written for Linux Journal, CNET, and InformIT. In addition to being an engineer &amp;amp; Developer Advocate at Google, he runs CyberWeb (cyberwebconsulting.com), a consultancy specializing in Python training. Wesley has over 25 years of programming, teaching, and writing experience, including helping create Yahoo!Mail using Python almost 2 decades ago. He holds degrees in CS, Math, and Music from the University of California and loves traveling worldwide to meet developers, whether at a technical conference, user group meeting, or on a university campus. Wesley is a Fellow of the Python Software Foundation and can be reached on Google+ or Twitter (&amp;#64;wescpy).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley Chun</dc:creator><pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-25:/bay-piggies/baypiggies-august-2016-talk-by-wesley-chun-at-linkedin-exploring-google-apis-with-python.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies July 2016 Talk at LinkedIn by Peter Farrell: Hacking Math Class with Python</title><link>https://pyvideo.org/bay-piggies/baypiggies-july-2016-talk-at-linkedin-by-peter-farrell-hacking-math-class-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Math instruction is stuck in the 19th Century and it's in dire need of modernization. Computer programming in Python has the potential to make math class more relevant, meaningful and engaging.&lt;/p&gt;
&lt;p&gt;Programming can not only achieve the goals we've always had for math students - to be able to think computationally and build algebraic and geometric tools to solve problems - but it can be used to explore math topics beyond the reach of traditional methods. Using Python, students can create fractals, cellular automata and 3D models to help them learn math or science topics. And it looks cool!&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://baypiggies.net"&gt;http://baypiggies.net&lt;/a&gt; for upcoming talks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Farrell</dc:creator><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-21:/bay-piggies/baypiggies-july-2016-talk-at-linkedin-by-peter-farrell-hacking-math-class-with-python.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies June 2016 talk at LinkedIn by Glen Jarvis: Explort Git Internals using Python</title><link>https://pyvideo.org/bay-piggies/baypiggies-june-2016-talk-at-linkedin-by-glen-jarvis-explort-git-internals-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Git is a powerful tool for source control. It's often misunderstood and abused. Under the surface Git is an elegant and simple data structure. When you don't understand that data structure, you don't really understand Git. It is flexible enough to give you all the rope that you need to hang yourself in Git hell. However, if you understand it, metaphorical Gordian knots seem simple and Git hell doesn't exist&lt;/p&gt;
&lt;p&gt;Python is an elegant programming language heavily influenced by ABC &amp;quot;a teaching language, a replacement for BASIC....&amp;quot; [1] It's a perfect tool that looks like pseudo-code but executes. However, even with its simplicity, it is one of the most powerful programming languages that exists. It is a perfect language to document and run the Git data structure as we explore it.&lt;/p&gt;
&lt;p&gt;In this talk, we start with a simple explanation of the Git data structure on disk. We then begin live-coding to read those data structures and reconstruct a &lt;cite&gt;git log&lt;/cite&gt; command for any arbitrary git repository without using the &lt;cite&gt;git&lt;/cite&gt; command [2]. When finished, we should have our own working command that does the same thing as &lt;cite&gt;git log&lt;/cite&gt; for any arbitrary repository, on any branch. We'll simply start at &lt;cite&gt;HEAD&lt;/cite&gt; and work our way down the data structure.&lt;/p&gt;
&lt;p&gt;Although it is not &lt;em&gt;useful&lt;/em&gt; to have a Python version of Git, it is &lt;em&gt;fun&lt;/em&gt;. Also, this exploration helps you understand the Git tool on a much deeper level. When you can program something, you can understand it. And, understanding Git helps you be a better developer and collaborator.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glen Jarvis</dc:creator><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-23:/bay-piggies/baypiggies-june-2016-talk-at-linkedin-by-glen-jarvis-explort-git-internals-using-python.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies May 2016 talk at LinkedIn by Suman Chakravartula: Rockstor</title><link>https://pyvideo.org/bay-piggies/baypiggies-may-2016-talk-at-linkedin-by-suman-chakravartula-rockstor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rockstor is an open source Personal Cloud Server. From a technology perspective, it is a web application with RESTful APIs, UI, an application hosting framework and more, packaged into a Linux distribution. Python is the core language in which the backend is written. It uses Django, DRF, ZMQ, Web sockets and a few other technologies to put together a robust and extensible file storage platform. The bird's eye view of Rockstor is that it's one of many NAS (Network Attached Storage) solutions in the market, but on closer examination, users appreciate cool features based on BTRFS, Docker and Linux in general that are implemented using Python and Javascript.&lt;/p&gt;
&lt;p&gt;In the talk, I'll go over various components and how they are put together, how our open source community came together and continues to thrive and grow. I'll also go over how we use Python in our release management to help us release frequently and continue to develop at a good clip, with a lean team. If time permits, I'll share the details of my ongoing experience of starting an open source project and being a maintainer and community developer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Suman Chakravartula</dc:creator><pubDate>Thu, 26 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-26:/bay-piggies/baypiggies-may-2016-talk-at-linkedin-by-suman-chakravartula-rockstor.html</guid><category>Bay Piggies</category></item><item><title>April 2016 BayPiggies meeting at LinkedIn: A Preview of PyCon</title><link>https://pyvideo.org/bay-piggies/april-2016-baypiggies-meeting-at-linkedin-a-preview-of-pycon.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There were 3 excellent talks:&lt;/p&gt;
&lt;p&gt;&amp;quot;Exception and error handling in Python 2 and Python 3 &amp;quot; by Alex Martelli&lt;/p&gt;
&lt;p&gt;&amp;quot;Jupyter Notebook Lightning Talk&amp;quot; by Lisa Bang&lt;/p&gt;
&lt;p&gt;&amp;quot;SQLite: Gotchas and Gimmes&amp;quot; by Dave Sawyer&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-28:/bay-piggies/april-2016-baypiggies-meeting-at-linkedin-a-preview-of-pycon.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies Feb 2016 talk by Dan Bikle: Predicting the Stock Market with Python</title><link>https://pyvideo.org/bay-piggies/baypiggies-feb-2016-talk-by-dan-bikle-predicting-the-stock-market-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation introduces Python to Students. We learn a little about the following topics: Plain Python, NumPy, Pandas, scikit-learn, matplot lib, and Heroku. We build a simple application which completes tasks related to machine learning of stock market data. The code is available here: &lt;a class="reference external" href="https://github.com/danbikle/pyspy"&gt;https://github.com/danbikle/pyspy&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Bikle</dc:creator><pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-25:/bay-piggies/baypiggies-feb-2016-talk-by-dan-bikle-predicting-the-stock-market-with-python.html</guid><category>Bay Piggies</category></item><item><title>BayPiggies talk Jan 2016 by David Clark: Using Python to Analyze Datacubes in Astronomy</title><link>https://pyvideo.org/bay-piggies/baypiggies-talk-jan-2016-by-david-clark-using-python-to-analyze-datacubes-in-astronomy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our first talk of 2016! See &lt;a class="reference external" href="http://baypiggies.net"&gt;http://baypiggies.net&lt;/a&gt; for the latest talks.&lt;/p&gt;
&lt;p&gt;Abstract
In this talk, I will discuss how I used Python to extract scientific information from a data cube. I used the astronomical instrument, NIFS (Near-Infrared Integral Field Spectrometer), on the 8-m Gemini North telescope in Hawaii to acquire observations of the stunning, hourglass planetary nebula, HB 12. This instrument spreads light out into a spectrum over a small region of the sky. The output data is in the form of a data cube, with sky coordinates along the x and y directions and wavelength along the z direction. Spectra of planetary nebulae are important for understanding their structure and composition. I will discuss the Python scripts I used to analyze these data. Additionally, this talk will also cover the plotting library APLpy, which can be used to make publication quality figures.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Clark</dc:creator><pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-01-28:/bay-piggies/baypiggies-talk-jan-2016-by-david-clark-using-python-to-analyze-datacubes-in-astronomy.html</guid><category>Bay Piggies</category></item><item><title>Ista (Liking) Julia for Pythonistas</title><link>https://pyvideo.org/bay-piggies/ista-liking-julia-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I start with some examples of the optional typing feature of Python 3.5 and compare it with that of Julia.  Illustrative examples of interoperability of Julia and Python follow.  I conclude with the differences in syntax and semantics that mattered for the machine learning application I built using both languages.&lt;/p&gt;
&lt;p&gt;Speaker:&lt;/p&gt;
&lt;p&gt;Suresh Velagapudi has been a Pythonista for just 5 short years while his involvement with Julia has been for 15 long months.  His Ista (Liking) for Julia is because of his 15 year involvement with FORTRAN during the stone age of computing.  He picked up a PhD (1996) in computer science and automation from IISc Bengaluru to compensate for his B.Tech (1971) in Aero from IIT Madras.  Though formally retired, he is not tired of explaining the intricacies of the functional programming paradigm to those programmers who find fun in functional languages like Julia.&lt;/p&gt;
&lt;p&gt;Presented at the Bay Area Python Interest Group (BayPIGgies)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Suresh Velagapudi</dc:creator><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-25:/bay-piggies/ista-liking-julia-for-pythonistas.html</guid><category>Bay Piggies</category></item><item><title>Scalable Machine Learning using Spark and Python</title><link>https://pyvideo.org/bay-piggies/scalable-machine-learning-using-spark-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ABSTRACT:
Deep architecture helps in the representation of high-level abstractions as in vision, language, speech and other AI-level tasks. A deep architecture is composed of multiple levels of non-linear operations. Learning algorithms like Deep Belief Networks  have recently been proposed to tackle these problems with a notable success.[1]   A couple of years ago, The New York Times wrote a story about Google using a network of 16,000 computers to teach itself to identify images of cats. That is a difficult task for computers, and it was an impressive achievement.   Project Adam, an initiative by Microsoft researchers and engineers, aims to demonstrate that large-scale, commodity distributed systems can train huge deep neural networks effectively. For proof, the researchers created the world’s best photograph classifier, using 14 million images from ImageNet, an image database divided into 22,000 categories.   Project Adam is 50 times faster—and more than twice as accurate, as outlined in a paper currently under academic review. In addition, it is efficient, using 30 times fewer machines, and scalable, areas in which the Google effort fell short.   The team at Google lead by Jeffrey Dean came up with the first implementation of distributed deep learning [2]. Architecturally, it was a pseudo-central realization, with a centralized parameter server being a single source of parameter values across the distributed system.   The talk demonstrates an end to end design (architecture, implementation and deployment) of Downpour-like stochastic gradient descent using Apache Spark. Spark is the next generation cluster computing framework from the UC Berkeley and Databricks teams.&lt;/p&gt;
&lt;p&gt;[1] Building High-level Features Using Large Scale Unsupervised Learning. Quoc V. Le,Marc'Aurelio Ranzato, Stanford &amp;amp; Google Inc.&lt;/p&gt;
&lt;p&gt;[2] Large Scale Distributed Deep Networks. Jeffrey Dean, Google Inc.&lt;/p&gt;
&lt;p&gt;SPEAKER:
Saket Bhushan is the founder of Sosio, a data platform primarily for non-profits. In his previous life he spent considerable time in optimizing computational mechanics algorithms.&lt;/p&gt;
&lt;p&gt;Presented at the Bay Area Python Interest Group (BayPIGgies) on September 24, 2015.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saket Bhushan</dc:creator><pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-24:/bay-piggies/scalable-machine-learning-using-spark-and-python.html</guid><category>Bay Piggies</category></item><item><title>Neural Nets for Newbies by Melanie Warrick (May 2015)</title><link>https://pyvideo.org/bay-piggies/neural-nets-for-newbies-by-melanie-warrick-may-2015.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Neural Nets for Newbies&amp;quot; is geared to provide clarity on what neural networks are, how to start using them and why they are valuable -- feature engineering. This talk is targeted to anyone who is passionate about understanding algorithms and code to define and leverage patterns in data.&lt;/p&gt;
&lt;p&gt;About the Speaker: Melanie Warrick is a Deep Learning Engineer at Skymind.io.&lt;/p&gt;
&lt;p&gt;This talk was organized by the Bay Area Python Interest Group (&amp;quot;BayPiggies&amp;quot;) and held at LinkedIn on May 28, 2015.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Melanie Warrick</dc:creator><pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-18:/bay-piggies/neural-nets-for-newbies-by-melanie-warrick-may-2015.html</guid><category>Bay Piggies</category></item><item><title>Go for Pythonistas by Francesc Campoy Flores (April 2015)</title><link>https://pyvideo.org/bay-piggies/go-for-pythonistas-by-francesc-campoy-flores-april-2015.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Go is very similar to Python and also differs in some essential points. This talk discusses inheritance, duck typing, monkey patching, decorators, etc. in a statically typed language. To learn more about Go, please visit &lt;a class="reference external" href="https://golang.org/"&gt;https://golang.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Speaker: Francesc Campoy Flores is a Developer Advocate for Go and the Cloud at Google. Follow him on Twitter as &amp;#64;francesc.&lt;/p&gt;
&lt;p&gt;This talk was organized by the Bay Area Python Interest Group (&amp;quot;BayPiggies&amp;quot;) and held at LinkedIn on April 23, 2015.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Campoy Flores</dc:creator><pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-28:/bay-piggies/go-for-pythonistas-by-francesc-campoy-flores-april-2015.html</guid><category>Bay Piggies</category></item><item><title>Type Hints by Guido van Rossum (March 2015)</title><link>https://pyvideo.org/bay-piggies/type-hints-by-guido-van-rossum-march-2015.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Guido van Rossum, creator of the Python programming language, discusses type hinting in Python 3.5.&lt;/p&gt;
&lt;p&gt;With type hinting, programmers can use type annotations to provide tools like type checkers and IDEs with more information about the expected types of values and enable better static analysis. To learn more about type hinting, check out PEP 484 (&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;https://www.python.org/dev/peps/pep-0484/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This talk was organized by the Bay Area Python Interest Group (&amp;quot;BayPiggies&amp;quot;) and held at LinkedIn on March 26, 2015. Check out our upcoming events at: &lt;a class="reference external" href="https://www.meetup.com/BayPIGgies"&gt;https://www.meetup.com/BayPIGgies&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Tue, 26 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-26:/bay-piggies/type-hints-by-guido-van-rossum-march-2015.html</guid><category>Bay Piggies</category></item><item><title>Pandas</title><link>https://pyvideo.org/bay-piggies/pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I&amp;quot;pandas is used by many people to make their lives easier when analyzing data. This talk is centered around how the overarching goal of user productivity has driven the balance of API development and performance optimization. We will cover some pandas basics. We'll talk about pandas performance. And we'll discuss data structures and algorithms. Along the way, we'll cover best practices and tools useful for developing open source projects.&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chang She</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-28:/bay-piggies/pandas.html</guid><category>Bay Piggies</category></item><item><title>Pandas</title><link>https://pyvideo.org/bay-piggies/pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I&amp;quot;pandas is used by many people to make their lives easier when analyzing data. This talk is centered around how the overarching goal of user productivity has driven the balance of API development and performance optimization. We will cover some pandas basics. We'll talk about pandas performance. And we'll discuss data structures and algorithms. Along the way, we'll cover best practices and tools useful for developing open source projects.&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chang She</dc:creator><pubDate>Thu, 28 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-28:/bay-piggies/pandas.html</guid><category>Bay Piggies</category></item><item><title>BayPIGgies: NumPy and SciPy</title><link>https://pyvideo.org/bay-piggies/baypiggies-numpy-and-scipy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We are at the Bay Area Python Interest Group (BayPIGGies). And, this is our Google Hangouts On Air for NumPy and SciPy by Eli Bressert.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eli Bressert</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:/bay-piggies/baypiggies-numpy-and-scipy.html</guid><category>Bay Piggies</category></item><item><title>Successfully automating your machines in the cloud using Ansible (June 2014)</title><link>https://pyvideo.org/bay-piggies/successfully-automating-your-machines-in-the-cloud-using-ansible-june-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract:
As we have seen with the previous talk, &amp;quot;Red Pill, Blue Pill Virtual Machines and Virtual Environments&amp;quot; (&lt;a class="reference external" href="https://www.youtube.com/watch?v=xZb3cr1JrMg"&gt;https://www.youtube.com/watch?v=xZb3cr1JrMg&lt;/a&gt;), we can use Python to create virtual machines in the cloud.
But, how do you &amp;quot;stamp&amp;quot; those machines differently? If you need to build a web server, mail server, DNS server, and load balancer, each machine may have the same base image but need to be configured differently.
If you manually configure those machines, what happens when you suddenly have a surge in traffic and need four more web servers? Or, what if one finds a vulnerability in a library like Heartbleed in OpenSSL as we recently encountered. A very safe option would be to rebuild these machines from scratch. If they were built manually, rebuilding these machines within minutes from scratch would be daunting, tedious and error prone.
There are several tools that have been built to fix this problem. Two of the most popular tools (Chef and Puppet) are written in the Ruby programming language. And, especially for the most popular, Chef, one needs somewhat of a familiarity with that language to use the tool.
There are two more tools that are written in Python and are growing in popularity: Salt and Ansible. Ansible requires the least amount of set-up (if any) and has the simplest infrastructure (it simply uses commands over ssh like Fabric does). Ansible is the easiest tool to get started with if you are new to the machine build automation frameworks.
We will start with a newly built machine and obtain it's public IP address. We will configure the ansible_host file with the IP address, and add/build plays (like recipes) to gradually configure that machine so that it is a Django web server running in the cloud. When we are finished, we should have a running machine and a recipe to easily build a seconded machine with a few keystrokes.
P.S. If you haven't previously built an Amazon Web Instance, I highly recommend watching this video in advance of the talk: &lt;a class="reference external" href="https://www.youtube.com/watch?v=xZb3cr1JrMg"&gt;https://www.youtube.com/watch?v=xZb3cr1JrMg&lt;/a&gt;
Speaker:
Bio
===
Glen has been a full-time Python programmer since 2007 and has worked for companies such as IBM, UC Berkeley, Sprint, Informix, and many small start-ups. He has also worked both in the US and in the UK and has had Bioinformatics research published in &amp;quot;Nucleic Acids Research (Oxford Journals)&amp;quot;. He is a certified DBA and has also been certified in Linux/Unix Administration.
He currently works for a start-up, RepairPal (for accurate car repair prices) using Ruby on Rails and Ansible. Additionally, he runs a small start up, Glen Jarvis, LLC, that does online technical training and assists employees obtaining telepresence in their current work place.
Glen is the organizer for the Silicon Valley Python MeetUp Group (&lt;a class="reference external" href="http://www.meetup.com/silicon-valley-python/"&gt;http://www.meetup.com/silicon-valley-python/&lt;/a&gt;) and an active member in the Bay Area Python Interest Group (&lt;a class="reference external" href="http://baypiggies.net/"&gt;http://baypiggies.net/&lt;/a&gt;) organization.
&lt;a class="reference external" href="https://github.com/glenjarvis/"&gt;https://github.com/glenjarvis/&lt;/a&gt;
&lt;a class="reference external" href="https://plus.google.com/u/0/+GlenJarvis/posts"&gt;https://plus.google.com/u/0/+GlenJarvis/posts&lt;/a&gt;
&lt;a class="reference external" href="http://www.linkedin.com/in/glenjarvis"&gt;http://www.linkedin.com/in/glenjarvis&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glen Jarvis</dc:creator><pubDate>Thu, 26 Jun 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-06-26:/bay-piggies/successfully-automating-your-machines-in-the-cloud-using-ansible-june-2014.html</guid><category>Bay Piggies</category></item><item><title>Computing Document Similarity with NLTK (March 2014)</title><link>https://pyvideo.org/bay-piggies/computing-document-similarity-with-nltk-march-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harshvardhan Kelkar
Topic: Computing Document similarity using nltk
Broadcast Time: Thursday, 3/22/2014 at 7:30pm
Location: LinkedIn, Mountain View&lt;/p&gt;
&lt;p&gt;Abstract:
We will explore techniques to determine the amount of similarity between documents. Specifically we will look at the intuition behind tf-idf and cosine similarity. With that as a foundation we will see how to compute these metrics with the natural language tool kit.&lt;/p&gt;
&lt;p&gt;Speaker:
Harshvardhan Kelkar is a Software Engineer at Martini Media Inc. where he builds software for the Display Advertising Industry. Prior to that he worked at BMC Software on building the next generation Remedy Platform. He also likes the zen of python (import this).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harshvardhan Kelkar</dc:creator><pubDate>Sun, 22 Jun 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-06-22:/bay-piggies/computing-document-similarity-with-nltk-march-2014.html</guid><category>Bay Piggies</category></item><item><title>Best Practices for Software Engineers (May 2014)</title><link>https://pyvideo.org/bay-piggies/best-practices-for-software-engineers-may-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Shannon -jj Behrens
Topic: Best Practices for Software Engineers
Broadcast Time: Thursday 5/22 at 7:30pm
Location: LinkedIn, Mountain View&lt;/p&gt;
&lt;p&gt;Summary:
Being a software engineer requires a lot more than knowing how to write good code.&lt;/p&gt;
&lt;p&gt;This class covers a wide variety of topics such as making code reviews useful and effective, how to deal with team conflicts, networking in real life, and planning for your career. The goal is to help you not only be a solid asset for your team, but also to be the type of software engineer that others really enjoy working with.&lt;/p&gt;
&lt;p&gt;Duration:
&amp;nbsp;1:00 hour&lt;/p&gt;
&lt;p&gt;Objectives:
- Learn how to gather requirements and design your code while still favoring agility
- Write the right code for today without shooting yourself in the foot for tomorrow
- Write code that optimizes for readability
- Refactor your code so that it stays fresh and healthy
- Write useful tests without devolving into religious arguments on the best approaches to testing
- Write the documentation that need to be written and skip the documentation that's just busy work
- Be an effective code reviewer
- Communicate effectively and deal with conflict gracefully
- Plan for your career and grow a strong network
- Be the kind of software engineer that others really enjoy working with&lt;/p&gt;
&lt;p&gt;Audience:
All software engineers&lt;/p&gt;
&lt;p&gt;Speaker:
Shannon -jj Behrens is a Staff Software Engineer at Twitter working in
Infrastructure and Operations. He lives in Concord, California with his
lovely wife and 7 lovely children. He's well known for his impeccable
sense of modesty, world-renowned taste in T-shirts, and poor sense of
humor. He blogs at jjinux.blogspot.com on a wide variety of topics such as Python, Ruby, Dart, Linux, open source software, the Web, and lesser-known programming languages&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shannon -jj Behrens</dc:creator><pubDate>Thu, 22 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-22:/bay-piggies/best-practices-for-software-engineers-may-2014.html</guid><category>Bay Piggies</category></item><item><title>Using IPython for Parallel Computing (April 2014)</title><link>https://pyvideo.org/bay-piggies/using-ipython-for-parallel-computing-april-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract:
IPython provides tools for interactive computing -- code introspection, completion, and environments such as an interactive shell and web-based notebook. In addition to these environments, IPython provides a suite of tools for interactive parallel computing on multicore machines or clusters. We will cover some of the API and architecture for IPython.parallel, using some example use cases. It will all be presented in IPython notebooks, so you can follow along if you like.&lt;/p&gt;
&lt;p&gt;Speaker:&lt;/p&gt;
&lt;p&gt;Min finished his PhD at UC Berkeley in computational plasma physics in May, 2013. He has been a contributor to IPython since 2006, when the first implementation of IPython's parallel computing capabilities was his undergraduate thesis at Santa Clara University. He now works full time on IPython at UC Berkeley, funded by the Alfred P. Sloan Foundation. He is also the maintainer of pyzmq, the Python bindings of the ZeroMQ messaging library&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Min Ragan-Kelley</dc:creator><pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-04:/bay-piggies/using-ipython-for-parallel-computing-april-2014.html</guid><category>Bay Piggies</category></item><item><title>Python Tools for Visual Studio (February 2014)</title><link>https://pyvideo.org/bay-piggies/python-tools-for-visual-studio-february-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Paul Orland
Topic: Python Tools for Visual Studio (PTVS)
Date: Feb-27-2014
Location: LinkedIn, Mtn. View&lt;/p&gt;
&lt;p&gt;Python Tools for Visual Studio (PTVS) is a free, open source plugin that turns Visual Studio into a Python IDE.  PTVS supports CPython as well as IronPython, and provides IDE features like Intellisense, debugging, and code-browsing for Python applications.  Python can be used to create apps for Windows 8.1 and RT, and it is a first-class language for Windows Azure, the Microsoft cloud.  In this talk, I will walk through several sample applications and show off some powerful PTVS features.&lt;/p&gt;
&lt;p&gt;Bio:&lt;/p&gt;
&lt;p&gt;Paul Orland is co-founder and CTO at Tachyus, building software for the oil and gas industry to optimize energy production.  Formerly, he worked on the cloud tools team within Visual Studio at Microsoft, specifically building the IDE extension for browsing data stored in Windows Azure.  He worked on the same team as the Python Tools developers, and learned a thing or two from looking over their shoulders.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Orland</dc:creator><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-02-27:/bay-piggies/python-tools-for-visual-studio-february-2014.html</guid><category>Bay Piggies</category></item><item><title>Guido van Rossum on Tulip (January 2014)</title><link>https://pyvideo.org/bay-piggies/guido-van-rossum-on-tulip-january-2014.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Guido van Rossum (creator and BDFL of Python)
Topic: Tulip and Asynchronous I/O for Python 3
Broadcast Time: Thursday 1/23 at 7:30pm
Location: LinkedIn, Mountain View&lt;/p&gt;
&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;In October 2012 I decided that it was time to add modern asynchronous I/O to the Python standard library, to replace the ancient and ever-problematic asyncore module. A year later this project is my main focus within the Python world. There is PEP 3156, which specifies an interface that I am hoping to add to the standard library (probably with provisional status), and Tulip, which is an implementation of the PEP and also contains a bunch of client libraries that use it (not all of this will make it into the standard library). Tulip requires Python 3.3 or later, and the code makes extensive use of coroutines, which are specially-marked generators that must be waited for using the new &amp;quot;yield from&amp;quot; syntax introduced by PEP 380. There is a lower-level API based on callbacks, and Future and Task classes that bridge the impedance mismatch between coroutines and callbacks. The PEP 3156 interface has also been heavily influenced by existing third party libraries for asynchronous I/O, in particular Twisted and Tornado, and interoperability with those systems (as well as others, like gevent and Microsoft's Windows 8 API formerly known as Metro) is an explicit goal, to be accomplished through adapters.&lt;/p&gt;
&lt;p&gt;Speaker:&lt;/p&gt;
&lt;p&gt;Guido van Rossum is Python's creator, and still active as its BDFL. After years at Google he now works at Dropbox. For more information see his personal website at &lt;a class="reference external" href="http://python.org/~guido/"&gt;http://python.org/~guido/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Thu, 23 Jan 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-01-23:/bay-piggies/guido-van-rossum-on-tulip-january-2014.html</guid><category>Bay Piggies</category></item><item><title>Learning Math and Science Using Python (December 2013)</title><link>https://pyvideo.org/bay-piggies/learning-math-and-science-using-python-december-2013.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Peter Farrell
Topic: Learning Math and Science Using Python
Date: Dec-19-2013
Location: LinkedIn, Mtn. View&lt;/p&gt;
&lt;p&gt;Abstract:
In 1980 Seymour Papert's Mindstorms suggested that everything meaningful in math education could be done using a computer. Mathematics teaching has yet to take full advantage of modern technology.&lt;/p&gt;
&lt;p&gt;Python should be in the toolbox of every student right from the beginning of algebra, not only because it makes arithmetic trivial but because it can facilitate deeper exploration of topics ranging from algebra to calculus.&lt;/p&gt;
&lt;p&gt;In this presentation we'll see how Python can be used to clarify difficult topics high school students are faced with in math and science.&lt;/p&gt;
&lt;p&gt;Unlike outdated skills like factoring polynomials, working with functions is more valuable than ever thanks to computers and Python in particular because (forgive my oversimplification) in Python &amp;quot;everything is a function.&amp;quot;&lt;/p&gt;
&lt;p&gt;High school math and physics courses also demand a knowledge of vectors, so more teachers should take advantage of the 3-D possibilities of Visual Python to model situations using vectors. It will be shown how physical situations otherwise involving disheartening differential equations can be modeled and easily solved in VPython. Furthermore, conjectures which were previously difficult to prove in physics can be easily created and visually proven by high school students with a little Python.&lt;/p&gt;
&lt;p&gt;Speaker:
Peter Farrell has been a high school math teacher and tutor on the East Coast and the West Coast and even on the Equator. He's currently a STEM Instructor at four Summit Charter High Schools in the Bay Area through Learningtech.org&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Farrell</dc:creator><pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-19:/bay-piggies/learning-math-and-science-using-python-december-2013.html</guid><category>Bay Piggies</category></item><item><title>The Big-O (November 2013)</title><link>https://pyvideo.org/bay-piggies/the-big-o-november-2013.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jeremy Holman
Topic: Talk about the Big-O
Date: Nov-21-2013
Location: LinkedIn, Mtn. View
Abstract:
What is Big Oh notation, what problem does it attempt to solve, and how does it work?
There are many kinds of performance problems.  Some are very implementation-specific, like slow runtimes, needlessly synchronous operations, or sub-optimal register allocation.  There are also differences between algorithms which are (largely) independent of implementation details.  When we wish to focus on implementation-independent performance differences of two algorithms, we use a family of notations including &amp;quot;Big Oh&amp;quot; to describe the &amp;quot;asymptotic&amp;quot; behaviour of the function -- that is, the behaviour &amp;quot;in the limit&amp;quot;.
This talk will review the conceptual motivation for asymptotic analysis, walk through the definition of Big Oh notation, and look at applying it to some simple algorithms as implemented in Python.  Hopefully the difficulty level will be suitable for an undergraduate course on algorithm design.
Bio:
Jeremy Holman thinks that algorithm puzzles make a fun pastime, but are overrated as an interview technique.  He finds it easier to think about tricky problems without the distractions of undue ceremony, which is one of the reasons he prefers Python.
This is a Bay Area Python Interest Group (BayPIGgies) organized event. Please also see their web page: &lt;a class="reference external" href="http://baypiggies.net/"&gt;http://baypiggies.net/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Holman</dc:creator><pubDate>Thu, 21 Nov 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-11-21:/bay-piggies/the-big-o-november-2013.html</guid><category>Bay Piggies</category></item><item><title>Good Enough is good enough! (October 2013)</title><link>https://pyvideo.org/bay-piggies/good-enough-is-good-enough-october-2013.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Alex Martelli
Topic: Good Enough is good enough!
Date: Oct-24-2013
Location: LinkedIn, Mtn. View&lt;/p&gt;
&lt;p&gt;Our culture's default assumption is that everybody should always be striving for perfection -- settling for anything less is seen as a regrettable compromise. This is wrong in most software development situations: focus instead on keeping the software simple, just &amp;quot;good enough&amp;quot;, launch it early, and iteratively improve, enhance, and re-factor it. This is how software success is achieved!&lt;/p&gt;
&lt;p&gt;In a 1989 keynote speech at a Lisp conference, Richard Gabriel had a &amp;quot;light relief&amp;quot; section where he caricatured a SW development approach he called &amp;quot;worse is better&amp;quot; (AKA &amp;quot;New Jersey approach&amp;quot;) and contrasted it with what he called &amp;quot;the right thing&amp;quot; (AKA &amp;quot;MIT/Stanford approach&amp;quot;)... and despite the caricatural aspects reluctantly concluded that NJ was the most viable approach, identifying several of the actual reasons (speed of development, less monolithic designs, systems more easily adaptable to a variety of uses [including changes in the underlying requirements], ease of gradual incremental improvement over time, ...).
The debate hasn't died down since (Gabriel himself contributing richly to both sides (!), sometimes under the pseudonym &amp;quot;Nickieben Bourbaki&amp;quot;). My favorite Gabriel quote is &amp;quot;The right-thing philosophy is based on letting the experts do their expert thing all the way to the end before users get their hands on it [snip] Worse-is-better takes advantage of the natural advantages of incremental development. Incremental improvement satisﬁes some human needs&amp;quot;.&lt;/p&gt;
&lt;p&gt;However, while the debate is still raging, reality has steadily been shifting away from &amp;quot;the right thing&amp;quot; (inherently &amp;quot;Cathedral&amp;quot;-centralized, with &amp;quot;Big Design Up Front&amp;quot; a must, conceived with academia and large firms in mind, and quite unsuited to always-shifting real-world requirements) and towards &amp;quot;the NJ approach&amp;quot; (suited to &amp;quot;Bazaar&amp;quot;-like structures, agile and iterative enhancement, dynamic start-ups and independent developers, in a world of always-shifting specs).&lt;/p&gt;
&lt;p&gt;In this talk, I come down strongly on the side of &amp;quot;the NJ approach&amp;quot;, illustrating it and defending it on both philosophical and pragmatical grounds.&lt;/p&gt;
&lt;p&gt;I draw technical examples from several areas where the systems that won the &amp;quot;mind-share battles&amp;quot; did so by focusing on pragmatic simplicity (&amp;quot;good enough&amp;quot;) to the expense of theoretical refinement and completeness (the quest for elusive perfection), leading to large ecosystems of developers bent on incremental improvement -- the TCP/IP approach to networking contrasted with ISO/OSI, the HTTP/HTML approach to hypertext contrasted with Xanadu, early Unix's simplistic (but OK) approach to interrupted system calls versus Multic's and ITS's perfectionism.&lt;/p&gt;
&lt;p&gt;Within Python, I show how metaclasses' quest for completeness yielded excessive complexity (and 80% of their intended uses can now be obtained via class decorators for 20% of the complexity), and how well incremental improvement worked instead in areas such as sorting, generators, and &amp;quot;guaranteed&amp;quot;-finalization semantics.&lt;/p&gt;
&lt;p&gt;The talk is not about lowering expectations: our dreams must stay big, bigger than we can achieve. It's about the best practical track towards making such dreams reality -- think grandiose, act humble. &amp;quot;Rightly traced and well ordered: what of that? // Speak as they please, what does the mountain care? // Ah, but a man's reach should exceed his grasp // Or what's a heaven for? All's silver-grey // Placid and perfect with my art: and worse&amp;quot;!&lt;/p&gt;
&lt;p&gt;This talk is probably not perfect, but I do think it's good enough.&lt;/p&gt;
&lt;p&gt;Speaker:
Author of &amp;quot;Python in a Nutshell&amp;quot;, co-author of &amp;quot;Python Cookbook&amp;quot;, frequent speaker at Python conferences, once-prolific contributor to StackOverflow, and recipient of the 2006 Frank Willison Memorial Award for contributions to Python, Alex currently works as Senior Staff Engineer at Google.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-24:/bay-piggies/good-enough-is-good-enough-october-2013.html</guid><category>Bay Piggies</category></item><item><title>How to test the hard stuff</title><link>https://pyvideo.org/boston-python-meetup/boston-python-meetup--how-to-test-the-hard-stuff.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephan will cover testing network-driven components, RDB stubbing, test
setup layering and stuff like that. Recently he used manuel to do this
sort of testing by simulating CLIs and Shell access in a doctest-style
test, so he may cover that as well.&lt;/p&gt;
&lt;p&gt;Bring your testing challenges and the impossible to automate projects
that haunt you at night, we'll see what Stephan can do with them.&lt;/p&gt;
&lt;p&gt;Boston Python Meetup: May 2010&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Richter</dc:creator><pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-05-19:/boston-python-meetup/boston-python-meetup--how-to-test-the-hard-stuff.html</guid><category>Boston Python Meetup</category><category>bostonpy</category><category>session</category><category>testing</category><category>unittest</category></item><item><title>Testing: Where do I start?</title><link>https://pyvideo.org/boston-python-meetup/boston-python-meetup--testing--where-do-i-start.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Marshall will cover basic unit test concepts and quickly move to making
your tests motivating, easy to run and adding testing to an existing
project. He's aiming squarely at developers who have projects they want
to use testing for, but don't know where to get started.&lt;/p&gt;
&lt;p&gt;Have you wanted to become test-infected but couldn't find the start of
the thread to pull? Marshall will help.&lt;/p&gt;
&lt;p&gt;Boston Python Meetup, May 2010&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marshall Weir</dc:creator><pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-05-19:/boston-python-meetup/boston-python-meetup--testing--where-do-i-start.html</guid><category>Boston Python Meetup</category><category>bostonpy</category><category>session</category><category>testing</category><category>unittest</category></item><item><title>De professor do ensino fundamental a desenvolvedor python</title><link>https://pyvideo.org/caipyra-2016/de-professor-do-ensino-fundamental-a-desenvolvedor-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Matheus Godoy no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;De professor do ensino fundamental a desenvolvedor python&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matheus Godoy</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/de-professor-do-ensino-fundamental-a-desenvolvedor-python.html</guid><category>Caipyra 2016</category></item><item><title>Desenvolvendo APIs REST com Python 3 e Asyncio</title><link>https://pyvideo.org/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Renato Garcia no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Desenvolvendo APIs REST com Python 3 e Asyncio&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Renato Garcia</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</guid><category>Caipyra 2016</category><category>api</category><category>apis</category><category>rest</category><category>rest api</category><category>asyncio</category><category>async</category></item><item><title>Devops com Python</title><link>https://pyvideo.org/caipyra-2016/devops-com-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Humberto Diógenes no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Devops com Python&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Humberto Diógenes</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/devops-com-python.html</guid><category>Caipyra 2016</category><category>devops</category></item><item><title>Site Reliability Engineering</title><link>https://pyvideo.org/caipyra-2016/site-reliability-engineering.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Rodolpho Eckhardt no Caipyra 2016&lt;/p&gt;
&lt;p&gt;Site Reliability Engineering: de 1 a 10 a 1000000 de servidores com o jeitinho Google&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodolpho Eckhardt</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/site-reliability-engineering.html</guid><category>Caipyra 2016</category></item><item><title>Testes unitários como ferramentas de design de código</title><link>https://pyvideo.org/caipyra-2016/testes-unitarios-como-ferramentas-de-design-de-codigo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra da Paula Grangeiro no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Testes unitários como ferramentas de design de código&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paula Grangeiro</dc:creator><pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-26:/caipyra-2016/testes-unitarios-como-ferramentas-de-design-de-codigo.html</guid><category>Caipyra 2016</category><category>unittest</category><category>unittests</category></item><item><title>Containerize all the things</title><link>https://pyvideo.org/caipyra-2016/containerize-all-the-things.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Andrews Medina no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Containerize all the things&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://talks.godoc.org/github.com/andrewsmedina/containerize-all-the-things/sample.slide#1"&gt;http://talks.godoc.org/github.com/andrewsmedina/containerize-all-the-things/sample.slide#1&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrews Medina</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/containerize-all-the-things.html</guid><category>Caipyra 2016</category><category>docker</category><category>devops</category></item><item><title>FlapPyLadies: Crie seu primeiro jogo em Python</title><link>https://pyvideo.org/caipyra-2016/flappyladies-crie-seu-primeiro-jogo-em-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra da Jessica Dias no Caipyra 2016&lt;/p&gt;
&lt;p&gt;FlapPyLadies: Crie seu primeiro jogo em Python&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/jessicadias/pygame-caipyra-2016"&gt;https://speakerdeck.com/jessicadias/pygame-caipyra-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica Dias</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/flappyladies-crie-seu-primeiro-jogo-em-python.html</guid><category>Caipyra 2016</category><category>pygame</category></item><item><title>GraphQL, Dizendo Adeus ao REST</title><link>https://pyvideo.org/caipyra-2016/graphql-dizendo-adeus-ao-rest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Cassio Antonio no Caipyra 2016&lt;/p&gt;
&lt;p&gt;Dizendo Adeus ao REST&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cassio Antonio</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/graphql-dizendo-adeus-ao-rest.html</guid><category>Caipyra 2016</category><category>graphql</category></item><item><title>Introdução sobre Apache Spark e computação distribuída</title><link>https://pyvideo.org/caipyra-2016/introducao-sobre-apache-spark-e-computacao-distribuida.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Robson Luis no Caipyra 2016&lt;/p&gt;
&lt;p&gt;Introdução sobre Apache Spark e computação distribuída&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robson Luis</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/introducao-sobre-apache-spark-e-computacao-distribuida.html</guid><category>Caipyra 2016</category><category>apache spark</category><category>distibuted</category></item><item><title>Programação além de código</title><link>https://pyvideo.org/caipyra-2016/programacao-alem-de-codigo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra da Letícia Portella no Caipyra 2016&lt;/p&gt;
&lt;p&gt;Programação além de código&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/leportella/programacao-alem-do-codigo-comunidade-e-mulheres-na-tecnologia"&gt;https://speakerdeck.com/leportella/programacao-alem-do-codigo-comunidade-e-mulheres-na-tecnologia&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leticia Portella</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/programacao-alem-de-codigo.html</guid><category>Caipyra 2016</category><category>diversity</category><category>women</category></item><item><title>Shu Conhecendo os fundamentos da linguagem</title><link>https://pyvideo.org/caipyra-2016/shu-conhecendo-os-fundamentos-da-linguagem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://caipyra.python.org.br"&gt;http://caipyra.python.org.br&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armando Neto</dc:creator><pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-25:/caipyra-2016/shu-conhecendo-os-fundamentos-da-linguagem.html</guid><category>Caipyra 2016</category><category>beginners</category></item><item><title>Caipyra 2018: Como funciona um time remoto de desenvolvimento - Osvaldo Santana</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-como-funciona-um-time-remoto-de-desenvolvimento-osvaldo-santana.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Osvaldo Santana</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-como-funciona-um-time-remoto-de-desenvolvimento-osvaldo-santana.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Computação Neuromórfica - Caroline Dantas</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-computacao-neuromorfica-caroline-dantas.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caroline Dantas</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-computacao-neuromorfica-caroline-dantas.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Data Visualization in Tableau with TabPy - Nilton Kazuyuki Ueda</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-data-visualization-in-tableau-with-tabpy-nilton-kazuyuki-ueda.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nilton Kazuyuki Ueda</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-data-visualization-in-tableau-with-tabpy-nilton-kazuyuki-ueda.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Exceptions: e porque não são só para erros - Danilo Roberto Shiga</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-exceptions-e-porque-nao-sao-so-para-erros-danilo-roberto-shiga.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Danilo Roberto Shiga</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-exceptions-e-porque-nao-sao-so-para-erros-danilo-roberto-shiga.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Extraindo dados da internet usando Scrapy - Renne Rocha</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-extraindo-dados-da-internet-usando-scrapy-renne-rocha.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Renne Rocha</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-extraindo-dados-da-internet-usando-scrapy-renne-rocha.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Hackeando a urna eletrônica brasileira com o Python - Paulo Matias</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-hackeando-a-urna-eletronica-brasileira-com-o-python-paulo-matias.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paulo Matias</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-hackeando-a-urna-eletronica-brasileira-com-o-python-paulo-matias.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Hey físicas e físicos! - Krissia Zawadzki</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-hey-fisicas-e-fisicos-krissia-zawadzki.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Krissia Zawadzki</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-hey-fisicas-e-fisicos-krissia-zawadzki.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Indicadores Inteligentes para Detecção de Epidemias de Dengue - Jadson Oliveira</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-indicadores-inteligentes-para-deteccao-de-epidemias-de-dengue-jadson-oliveira.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jadson Oliveira</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-indicadores-inteligentes-para-deteccao-de-epidemias-de-dengue-jadson-oliveira.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Internet Health Report - Geraldo Barros</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-internet-health-report-geraldo-barros.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geraldo Barros</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-internet-health-report-geraldo-barros.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Introdução ao Machine Learning e NLP - João Rafael Martins</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-introducao-ao-machine-learning-e-nlp-joao-rafael-martins.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">João Rafael Martins</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-introducao-ao-machine-learning-e-nlp-joao-rafael-martins.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Microservices em Python: desafios e soluções - Guilherme Vierno</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-microservices-em-python-desafios-e-solucoes-guilherme-vierno.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guilherme Vierno</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-microservices-em-python-desafios-e-solucoes-guilherme-vierno.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Processamento Paralelo para Pythonistas - Juliana Oliveira</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-processamento-paralelo-para-pythonistas-juliana-oliveira.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juliana Oliveira</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-processamento-paralelo-para-pythonistas-juliana-oliveira.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Python na Astronomia - Vitoria Ongaratto Baldan</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-python-na-astronomia-vitoria-ongaratto-baldan.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vitoria Ongaratto Baldan</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-python-na-astronomia-vitoria-ongaratto-baldan.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Tecnologia cívica: o que importa são as perguntas! - Eduardo Cuducos</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-tecnologia-civica-o-que-importa-sao-as-perguntas-eduardo-cuducos.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eduardo Cuducos</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-tecnologia-civica-o-que-importa-sao-as-perguntas-eduardo-cuducos.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Teoria do Aprendizado Estatístico - Rodrigo Mello</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-teoria-do-aprendizado-estatistico-rodrigo-mello.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Mello</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-teoria-do-aprendizado-estatistico-rodrigo-mello.html</guid><category>Caipyra 2018</category></item><item><title>Caipyra 2018: Visualizando query SQL a partir do ORM Django - Beatriz Uezu</title><link>https://pyvideo.org/caipyra-2018/caipyra-2018-visualizando-query-sql-a-partir-do-orm-django-beatriz-uezu.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Beatriz Uezu</dc:creator><pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-11:/caipyra-2018/caipyra-2018-visualizando-query-sql-a-partir-do-orm-django-beatriz-uezu.html</guid><category>Caipyra 2018</category></item><item><title>Django Based Autocompl…</title><link>https://pyvideo.org/chicago-djangonauts/django-based-autocompl.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django does not do autocomplete out of the box because it is easy to do
it yourelf. Here is how, and some othther stuff.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Bisson</dc:creator><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-03:/chicago-djangonauts/django-based-autocompl.html</guid><category>Chicago Djangonauts</category><category>autocomplete</category><category>Django</category></item><item><title>Mongoengine Basics</title><link>https://pyvideo.org/chicago-djangonauts/mongoengine-basics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walk through of MondoDB pymongo and mongoengine and how they can be
used in a production environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Jasinski</dc:creator><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-03:/chicago-djangonauts/mongoengine-basics.html</guid><category>Chicago Djangonauts</category></item><item><title>Why Most New Projects Should Implement a Custom User Model</title><link>https://pyvideo.org/chicago-djangonauts/why-most-new-projects-should-implement-a-custom-u.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All the Gain with Little of the Pain: Why Most New Projects Should
Implement a Custom User Model -&lt;/p&gt;
&lt;p&gt;Substituting a custom User model for Django's default User model can
seem intimidating. I'll show you a simple 3 step method of implementing
a custom User model for a new project that's actually quite easy to do
and can provide tremendous benefits in flexibility and customization.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marlon Castillo</dc:creator><pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-03:/chicago-djangonauts/why-most-new-projects-should-implement-a-custom-u.html</guid><category>Chicago Djangonauts</category></item><item><title>Formsets, Concurrent Edits and Uncaught Exceptions</title><link>https://pyvideo.org/chicago-djangonauts/formsets-concurrent-edits-and-uncaught-exception.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lightning talk about fixing three separate bugs in the Django codebase with the same root cause.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brad Martsberger</dc:creator><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-03-26:/chicago-djangonauts/formsets-concurrent-edits-and-uncaught-exception.html</guid><category>Chicago Djangonauts</category><category>lightning talks</category><category>django</category></item><item><title>How my Dog Sends Selfies</title><link>https://pyvideo.org/chicago-djangonauts/how-my-dog-sends-selfies.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A presentation about writing Python on the Arduina Yun&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Baugues</dc:creator><pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-03-26:/chicago-djangonauts/how-my-dog-sends-selfies.html</guid><category>Chicago Djangonauts</category></item><item><title>django-rest-framework and angularjs</title><link>https://pyvideo.org/chicago-djangonauts/django-rest-framework-and-angularjs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;django-rest-framework and angularjs lightning talk&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George Kappel</dc:creator><pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-05-02:/chicago-djangonauts/django-rest-framework-and-angularjs.html</guid><category>Chicago Djangonauts</category><category>lightning talks</category></item><item><title>upgrading Django</title><link>https://pyvideo.org/chicago-djangonauts/upgrading-django.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Joe Jasinski: upgrading Django&lt;/p&gt;
&lt;p&gt;(Please expand - 1 or 2 lines is fine. see
&lt;a class="reference external" href="http://pyvideo.org/category/17/pycon-us-2012"&gt;http://pyvideo.org/category/17/pycon-us-2012&lt;/a&gt; for how it will be used)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Jasinski</dc:creator><pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-05-02:/chicago-djangonauts/upgrading-django.html</guid><category>Chicago Djangonauts</category></item><item><title>Consuming Tasks with Celery</title><link>https://pyvideo.org/chicago-djangonauts/consuming-tasks-with-celery.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduction to RabbitMQ, Celery, Django-celery, basic task types, and
monitoring. This will provide a walk-through of how to get started and
be productive with these tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Jasinski</dc:creator><pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-02-02:/chicago-djangonauts/consuming-tasks-with-celery.html</guid><category>Chicago Djangonauts</category><category>RabbitMQ Celery</category></item><item><title>Django-nonrel - intro and state</title><link>https://pyvideo.org/chicago-djangonauts/django-nonrel-intro-and-state.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introductory talk about Django-nonrel and then take questions, show
some code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Jenkins</dc:creator><pubDate>Thu, 02 Feb 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-02-02:/chicago-djangonauts/django-nonrel-intro-and-state.html</guid><category>Chicago Djangonauts</category></item><item><title>What happens if I delete this "setup.py" file?</title><link>https://pyvideo.org/chipy/What_happens_if_I_delete_this_setuppy_file.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What does it mean when people talk about &amp;quot;old-style&amp;quot; vs. &amp;quot;new-style&amp;quot; packaging?&amp;nbsp; Why do some projects have setup.py, when some have setup.cfg, and others have pyproject.toml?&lt;/p&gt;
&lt;p&gt;Let's discuss new vs. old-style packaging, the files involved, and walk through upgrading a sample project from setuptools to hatchling.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heather White</dc:creator><pubDate>Thu, 13 Jun 2024 19:25:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-06-13:/chipy/What_happens_if_I_delete_this_setuppy_file.html</guid><category>ChiPy</category></item><item><title>Python: The Language for Understanding and Building the Future of AI</title><link>https://pyvideo.org/chipy/Python_The_Language_for_Understanding_and_Building_the_Future_of_AI.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores a new framework for building Artificial Intelligence (AI) inspired by the human brain and leveraging the power of Python. We'll delve into the concept of consciousness as a combination of memory, prediction, and experience. By using hierarchical probabilities, similar to Google's PageRank algorithm, we can build AI systems that are not only powerful but also understandable and aligned with human values. Python will be our toolset as we explore the exciting future of AI development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ebreo</dc:creator><pubDate>Thu, 13 Jun 2024 18:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-06-13:/chipy/Python_The_Language_for_Understanding_and_Building_the_Future_of_AI.html</guid><category>ChiPy</category></item><item><title>Exploring Cellular Automata in Python using Golly</title><link>https://pyvideo.org/chipy/Exploring_Cellular_Automata_in_Python_using_Golly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Golly is an open source, multiplatform tool&amp;nbsp;for exploring various cellular automata (such as the game of life) that allows Python scripts to study and interact with the cellular automata.&amp;nbsp;First we will look at very basic operation of the rule by studying the game of life&amp;nbsp;and also inputting a new initial conditions such as gliders, still lifes and spaceships.&amp;nbsp;Then we will switch over to study my&amp;nbsp;cellular automata I created which I call &amp;nbsp;&lt;a class="reference external" href="https://conwaylife.com/wiki/OCA:SnowLife"&gt;https://conwaylife.com/wiki/OCA:SnowLife&lt;/a&gt; and use Python scripts to analyze my cellular automata.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joshua Herman</dc:creator><pubDate>Thu, 11 Apr 2024 19:10:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-04-11:/chipy/Exploring_Cellular_Automata_in_Python_using_Golly.html</guid><category>ChiPy</category></item><item><title>Intro to Property-Based Testing with Hypothesis</title><link>https://pyvideo.org/chipy/Intro_to_PropertyBased_Testing_with_Hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One shortfall of example-based unit tests is that they only test known examples. Property-based testing lets you test against randomized inputs if you can specify properties that must be true of the code's behavior (&amp;quot;invariants&amp;quot;). You also test your function against extreme-values (aka, fuzzing).&lt;/p&gt;
&lt;p&gt;In this talk, will review some examples of property-based tests using the Hypothesis library. We will demo automated test generation (&amp;quot;ghostwriting&amp;quot; tests) to make writing tests easier. We will demo stateful testing to confirm that all possible states are valid in a program.&amp;nbsp; Lastly, we will end with parting thoughts on how to specify properties. Often, the tricky part with PBT is knowing what to test! Since we are using randomized input, we need to specify properties that should hold true across all outputs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Zuradzki</dc:creator><pubDate>Thu, 11 Apr 2024 18:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-04-11:/chipy/Intro_to_PropertyBased_Testing_with_Hypothesis.html</guid><category>ChiPy</category></item><item><title>BluPants: open-source educational Python bots</title><link>https://pyvideo.org/chipy/BluPants_opensource_educational_Python_bots.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about an open-source educational project based on Python:&amp;nbsp; blupants.com. My goal is to present it to the audience and hopefully find more people passionate about the topic like me who would be willing to help as open-source contributors. Attendees will learn how to use the REST API to control robots and how to extend it to new platforms and robots.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marcelo Sacchetin</dc:creator><pubDate>Thu, 11 Jan 2024 19:35:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-01-11:/chipy/BluPants_opensource_educational_Python_bots.html</guid><category>ChiPy</category></item><item><title>must use correc snek: python for Debian and derivatives</title><link>https://pyvideo.org/chipy/must_use_correc_snek_python_for_Debian_and_derivatives.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between &amp;quot;sudo apt install python3.12&amp;quot; and &amp;quot;wget ... &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make test &amp;amp;&amp;amp; sudo make install&amp;quot;?&lt;/p&gt;
&lt;p&gt;Do I need to use a virtual environment in my docker container?&lt;/p&gt;
&lt;p&gt;I installed python, but it didn't come with pip.&lt;/p&gt;
&lt;p&gt;Let's take a look at python on Debian.&amp;nbsp; It runs both your OS and your web app, and it's weirder than you think.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heather White</dc:creator><pubDate>Thu, 11 Jan 2024 19:05:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-01-11:/chipy/must_use_correc_snek_python_for_Debian_and_derivatives.html</guid><category>ChiPy</category></item><item><title>What's in your AI code? Learn why every SCA tool is wrong, and how to deal with it</title><link>https://pyvideo.org/chipy/Whats_in_your_AI_code_Learn_why_every_SCA_tool_is_wrong_and_how_to_deal_with_it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the rise in AI, there is more focus on Python dependency management and SCA scanning. Python's dependency management system makes it easy for developers to leave dependencies out of the manifest. This means that almost every SCA tool that relies on a manifest will be wrong. We show how leveraging program analysis techniques one can avoid the pitfalls of these so-called phantom dependencies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Sawant</dc:creator><pubDate>Thu, 11 Jan 2024 18:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-01-11:/chipy/Whats_in_your_AI_code_Learn_why_every_SCA_tool_is_wrong_and_how_to_deal_with_it.html</guid><category>ChiPy</category></item><item><title>Exploring the Python Run Time Environment</title><link>https://pyvideo.org/chipy/Exploring_the_Python_Run_Time_Environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is for those who want to pierce the veil of abstraction and learn how their Python code is actually executed on a computer. First we will start with a guided overview of the Python Run Time envioronment in the CPython interpreter. Next will be an overview of the builtin inspect package and how it allows for direct access to the python runtime in your own Python code. After which I will show how you leverage this knowledge in PDB.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Leopold Shon</dc:creator><pubDate>Thu, 08 Jun 2023 19:30:59 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-06-08:/chipy/Exploring_the_Python_Run_Time_Environment.html</guid><category>ChiPy</category></item><item><title>JSON Web Tokens for Fun and Profit</title><link>https://pyvideo.org/chipy/JSON_Web_Tokens_for_Fun_and_Profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is a JWT and why would I want to&amp;nbsp;use one?&lt;/p&gt;
&lt;p&gt;This talk will cover common use cases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heather White</dc:creator><pubDate>Thu, 08 Jun 2023 18:52:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-06-08:/chipy/JSON_Web_Tokens_for_Fun_and_Profit.html</guid><category>ChiPy</category></item><item><title>Ellipses and Arcane Syntax</title><link>https://pyvideo.org/chipy/Ellipses_and_Arcane_Syntax.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;lt;p&amp;gt;How does the elipses work? Let&amp;amp;#39;s find out.&amp;lt;/p&amp;gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Phil Robare</dc:creator><pubDate>Thu, 11 May 2023 20:10:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-05-11:/chipy/Ellipses_and_Arcane_Syntax.html</guid><category>ChiPy</category></item><item><title>MicroPython GPIO Electronics Edition</title><link>https://pyvideo.org/chipy/Micropython_gpio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A deep dive into what actually happens when you're interfacing with GPIO pins at the hardware and register level in MicroPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Wingate</dc:creator><pubDate>Thu, 11 May 2023 19:40:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-05-11:/chipy/Micropython_gpio.html</guid><category>ChiPy</category><category>#MicroPython</category><category>#Electronics</category></item><item><title>Learning Sprint - An Experiment</title><link>https://pyvideo.org/chipy/Learning_Sprint_An_Experiment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eve and Ray embarked on a two week experiment they're calling a Learning Sprint.&lt;/p&gt;
&lt;p&gt;4 hours a day, 5 days a week over two weeks they set goals and executed on them.&lt;/p&gt;
&lt;p&gt;What did they learn? Did it work? What fun facts did they pick up along the way?&lt;/p&gt;
&lt;p&gt;They'll explain in their thrilling talk for all skill levels.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eve Qiao</dc:creator><pubDate>Thu, 11 May 2023 19:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-05-11:/chipy/Learning_Sprint_An_Experiment.html</guid><category>ChiPy</category></item><item><title>ChiPy Python Mentorship</title><link>https://pyvideo.org/chipy/chipy-python-mentorship.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This April we will the start the fourth round of ChiPy's mentorship program. We have worked with more than 70 developers till now, and some of them have landed exciting jobs by showcasing their mentorship projects. I'll give a quick view of the program and what are we looking for in a mentor and a mentee.
FAQ: &lt;a class="reference external" href="http://www.chipy.org/pages/sigs/mentorship/"&gt;http://www.chipy.org/pages/sigs/mentorship/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tathagata</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-10:/chipy/chipy-python-mentorship.html</guid><category>ChiPy</category></item><item><title>Python-based data science to understand knowledge discovery and expertise: A science perspective</title><link>https://pyvideo.org/chipy/python-based-data-science-to-understand-knowledge-discovery-and-expertise-a-science-perspective.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All kinds of businesses are using data science and machine learning to understand themselves, lowering costs, engineering better products, and improving customer experiences. Similarly, we use data science to improve science itself, understanding how scientific topics are discovered and modeling institutional expertise. In our work, we use a combination of Python-powered big data analytics and web-based tools to achieve this goal, including pyspark (&lt;a class="reference external" href="http://spark.apache.org"&gt;http://spark.apache.org&lt;/a&gt;), scikit-learn (&lt;a class="reference external" href="http://http://scikit-learn.org"&gt;http://http://scikit-learn.org&lt;/a&gt;), Django (&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;https://www.djangoproject.com/&lt;/a&gt;), Celery (&lt;a class="reference external" href="http://www.celeryproject.org/"&gt;http://www.celeryproject.org/&lt;/a&gt;), and or-tools (&lt;a class="reference external" href="https://developers.google.com/optimization"&gt;https://developers.google.com/optimization&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First, we will present the infrastructure behind Scholarfy, a recommender system for massive scientific conferences (&lt;a class="reference external" href="http://www.scholarfy.net"&gt;http://www.scholarfy.net&lt;/a&gt;). We will also present a machine learning approach to automatically match expert scientific reviewers to research proposals (&lt;a class="reference external" href="http://pr.scienceofscience.org"&gt;http://pr.scienceofscience.org&lt;/a&gt;). Finally, we will present the work behind our award-winning visualization, World’s Science Map (&lt;a class="reference external" href="http://map.scienceofscience.org"&gt;http://map.scienceofscience.org&lt;/a&gt;), where we modeled the institutional expertise, collaboration network, and funding of all institutions in the world. At the end of our talk, we will argue that Python-powered data science can improve not only businesses but also science, making it more agile and accurate.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel E. Acuna</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-10:/chipy/python-based-data-science-to-understand-knowledge-discovery-and-expertise-a-science-perspective.html</guid><category>ChiPy</category></item><item><title>The wonder and the horror of the mock module</title><link>https://pyvideo.org/chipy/the-wonder-and-the-horror-of-the-mock-module.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;mock&amp;quot; module is a powerful (and fun!) tool for unit testing, and it comes built in to the the Python standard library. I'll give an overview of some of the more useful features of the module, and finish with a warning about the dangers of too much mockery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Hoover</dc:creator><pubDate>Thu, 10 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-10:/chipy/the-wonder-and-the-horror-of-the-mock-module.html</guid><category>ChiPy</category></item><item><title>A Talk on Giving a Pythonic Talk</title><link>https://pyvideo.org/chipy/a-talk-on-giving-a-pythonic-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Xan Vongsathorn and Catherine Vongsathorn will be giving a talk about
talks. It turns out that many of python's core principles apply very
well to presentations -- or for that matter, communication more
generally -- which may be why we like python so much. Xan and Catherine
want to get people excited not only about giving talks but also about
using them to &lt;em&gt;actually communicate&lt;/em&gt;. You don’t have to be an expert,
nor do you need natural talent, to give a good talk; this metatalk will
discuss guiding principles that set effective presentations apart and
can be applied to any technical talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Vongsathorn</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-03-12:/chipy/a-talk-on-giving-a-pythonic-talk.html</guid><category>ChiPy</category></item><item><title>From Code to Coffee Table with Blender and Sly</title><link>https://pyvideo.org/chipy/from-code-to-coffee-table-with-blender-and-sly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been developing a Python library for turning 3D models into
CNC-machinable parts. I will demonstrate the basics of the library and
how I used it to build a wood coffee table.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Meshulam</dc:creator><pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-03-12:/chipy/from-code-to-coffee-table-with-blender-and-sly.html</guid><category>ChiPy</category></item><item><title>Django+Elasticsearch+Haystack to Search PDFs and Such</title><link>https://pyvideo.org/chipy/djangoelasticsearchhaystack-to-search-pdfs-and.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to search the contents of uploaded PDFs, Docs, and
other document formats on your website? Django Haystack (with the
Elasticsearch search backend) is a great way to add search to your site,
but it does not support full document indexing out of the box. I'd like
to share a solution that I cobbled together to allow this combination of
tools the ability to search document contents.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Jasinski</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-02-12:/chipy/djangoelasticsearchhaystack-to-search-pdfs-and.html</guid><category>ChiPy</category></item><item><title>REST on Django</title><link>https://pyvideo.org/chipy/rest-on-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A quick overview through the components that make up Django REST
Framework with a dive into a sample project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Bain</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-02-12:/chipy/rest-on-django.html</guid><category>ChiPy</category></item><item><title>A lightning look at O'Reilly's Python books</title><link>https://pyvideo.org/chipy/a-lightning-look-at-oreillys-python-books.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wouldn't it be awesome if ChiPy wrote its own book? We'd be able to get
BEvERages for weeks, maybe months on the royalty! If so, we'd need to
see what's already out there.&lt;/p&gt;
&lt;p&gt;This lightning talk takes a look at O'Reilly's Python books using
requests and BeautifulSoup, with a little of scipy's hierarchical
clustering on the book descriptions. It is presented in an iPython
notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tanya Schlusser</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-12-11:/chipy/a-lightning-look-at-oreillys-python-books.html</guid><category>ChiPy</category><category>lightning talks</category></item><item><title>Python For Humans</title><link>https://pyvideo.org/chipy/python-for-humans-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python’s ecosystem is held up to a high standard, but it falls short in
a few key areas. A handful of crucial APIs are an absolute pain to work
with. We’ll go over where these APIs went wrong and learn about strong
and elegant API design. The high barriers to entry in Python will be
discussed. Potential solutions will be proposed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Reitz</dc:creator><pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-12-11:/chipy/python-for-humans-3.html</guid><category>ChiPy</category></item><item><title>November 2014 Chipy Talks</title><link>https://pyvideo.org/chipy/november-2014-chipy-talks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Talks from the November 2014 meeting. Hidden Markov Models to improve
activity recognition in patients with spinal cord injury and Innate
learning: training the brain before the eyes open.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="hidden-markov-models-to-improve-activity-recognition-in-patients-with-spinal-cord-injury"&gt;
&lt;h4&gt;Hidden Markov Models to improve activity recognition in patients with spinal cord injury&lt;/h4&gt;
&lt;p&gt;By: Asma Mehjabeen&lt;/p&gt;
&lt;p&gt;Fitness tracking is great for calories and steps, but similar sensors
are capable of reporting much more about how we move throughout the day.
This is especially important in assessing the quality of movement for
those with limited mobility. Doctors often want to know more detail
about patient behavior after therapy to select and adjust the
appropriate intervention. Using machine learning on wearable
accelerometer signals, we estimate the activities patients with
incomplete spinal cord injury are performing. By combining windowed
classifier estimates over time using a hidden markov model, we show how
error rates can be significantly decreased, which brings more detailed
assessments of patient activity closer to a clinical reality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="innate-learning-training-the-brain-before-the-eyes-open"&gt;
&lt;h4&gt;Innate learning: training the brain before the eyes open&lt;/h4&gt;
&lt;p&gt;By: Isaac Adorno&lt;/p&gt;
&lt;p&gt;Amorphous, blob-like patterns of neural activity form and move over the
eye during visual development in animals. Why do such patterns exist? We
show that these patterns are this way to better prepare the visual
system for natural vision. Essentially, these are movies played in the
eyes to refine the visual system before the eyes even open. We use
python to model the developing visual system, produce an efficient code
based on those patterns, and show how that code matches what is seen
biologically. In this way, we show that during your early development
you are learning from innately generated patterns - a unique twist in
the debates of nature and nurture.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Asma Mehjabeen</dc:creator><pubDate>Thu, 13 Nov 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-11-13:/chipy/november-2014-chipy-talks.html</guid><category>ChiPy</category></item><item><title>Pingo means "pin, go!"</title><link>https://pyvideo.org/chipy/pingo-means-pin-go.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:/chipy/pingo-means-pin-go.html</guid><category>ChiPy</category></item><item><title>Garbage Collection w/ Ref. Cycles</title><link>https://pyvideo.org/chipy/garbage-collection-w-ref-cycles.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Reference counting is very useful but it has an odd problem. We employ a
technique from graphs to approach it. The solution works but it's a bit
slow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Brady</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-01-09:/chipy/garbage-collection-w-ref-cycles.html</guid><category>ChiPy</category></item><item><title>Lexical Graphs with Natural Language Processing using NLTK</title><link>https://pyvideo.org/chipy/lexical-graphs-with-natural-language-processing-u.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Brian will talk about his experiences using Python and NLTK
&lt;a class="reference external" href="http://nltk.org/"&gt;http://nltk.org/&lt;/a&gt; to run language comparisons to generate lexical
difference graphs like the one mentioned in the &amp;quot;Lexical Distance Among
the Languages of Europe&amp;quot; article. &lt;a class="reference external" href="http://bit.ly/1cS46Ba"&gt;http://bit.ly/1cS46Ba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The focus will be on the NLTK and how its internals work to process a
language. This talk will be his best one ever.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Ray</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-01-09:/chipy/lexical-graphs-with-natural-language-processing-u.html</guid><category>ChiPy</category></item><item><title>There were 986 roadway fatalities in Illinois in 2013. Where's the data?</title><link>https://pyvideo.org/chipy/there-were-986-roadway-fatalities-in-illinois-in.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Seen on garish LED roadway signs all around Chicago on New Year's Eve,
2013: 986 TRAFFIC DEATHS IN 2013. It leads to many questions: On what
roads? When did the accidents happen? What do we do now? I'm scared to
drive. I will talk about purging my fears by finding the data to answer
some of those questions. &lt;a class="reference external" href="http://tothebeat.github.io/fatal-car-crashes/"&gt;http://tothebeat.github.io/fatal-car-crashes/&lt;/a&gt;
This talk will involve PythonAnywhere, IPython, a module that's not even
on PyPi (dbfpy), searching for and finding open government data,
CartoDB, Google Fusion Tables, csv, and maybe Pandas. Rest assured,
there will be no graphic photos.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Bennett</dc:creator><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-01-09:/chipy/there-were-986-roadway-fatalities-in-illinois-in.html</guid><category>ChiPy</category></item><item><title>A Visual Guide To Pandas</title><link>https://pyvideo.org/chipy/a-visual-guide-to-pandas.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pandas is the data-munging Swiss Army knife of the Python world. Often
you know how your data should look but it's not so obvious how to get
there, so I'll present a visual approach to learning the library and
data manipulation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Wirth</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-12:/chipy/a-visual-guide-to-pandas.html</guid><category>ChiPy</category></item><item><title>Storm (with python (and a side of clojure))</title><link>https://pyvideo.org/chipy/storm-with-python-and-a-side-of-clojure.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A walking tour of Storm, what it is, what you can do, and how you can
use it with python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Doctor</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-12:/chipy/storm-with-python-and-a-side-of-clojure.html</guid><category>ChiPy</category></item><item><title>The Chicago Process: How Braintree Develops Software</title><link>https://pyvideo.org/chipy/the-chicago-process-how-braintree-develops-softw.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Braintree needs to be highly available and secure, while still
maintaining a rapid development pace and strict backwards compatibility.
In order to achieve that, we use what has become known as the &amp;quot;Chicago
Process&amp;quot;. This involves pairing, strict TDD, a team structure, and
weekly iterations, all to empower the devs to make decisions and get
work of a high quality done while avoiding siloing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-12:/chipy/the-chicago-process-how-braintree-develops-softw.html</guid><category>ChiPy</category></item></channel></rss>