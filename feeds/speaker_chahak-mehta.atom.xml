<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Chahak Mehta</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_chahak-mehta.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>LSP Demystified - How to write an LSP server in Python</title><link href="https://pyvideo.org/pycon-us-2024/lsp-demystified-how-to-write-an-lsp-server-in-python.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Chahak Mehta</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/lsp-demystified-how-to-write-an-lsp-server-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today's IDE-land, we've often overheard conversations between
developers about new features being added to their editor-of-choice and
how editor XYZ is better than ABC (vim vs emacs vs VSCode vs IntelliJ,
we know the drill). This talk doesn't stoke fire to that debate in any
direction (since different â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In today's IDE-land, we've often overheard conversations between
developers about new features being added to their editor-of-choice and
how editor XYZ is better than ABC (vim vs emacs vs VSCode vs IntelliJ,
we know the drill). This talk doesn't stoke fire to that debate in any
direction (since different things work for different people). But, a
very important tool that often powers most of the magical features that
come with modern software development is the LSP server. The LSP server
often keeps chugging in the background, tirelessly providing the user
with diagnosis regarding the codes, autocompleting variables, and
formatting the codebase to maintain prettiness. While various elements
such as parsing, linting, and formatting have long existed, it is the
LSP server that seamlessly unifies these features in an editor-agnostic
manner.&lt;/p&gt;
&lt;p&gt;LSP servers are used everywhere, often installed individually by the
user even, but there aren't many resources regarding how to actually
build a functional server that can do more than send /&amp;quot;Hello Editor
World!&amp;quot;/ messages to the editor. This talk aims to fill in that gap to
provide a blueprint of steps that anyone who wants to implement an LSP
server in Python can follow. Following this talk will provide a better
understanding of the JSON-RPC protocol used by LSP servers to
communicate with the client, diagnosis that a server can share with the
user and pitfalls that one can fall into while implementing their own
server. It will end with a live demonstration of a toy-LSP server that
provides the basic functionalities to an editor client.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry></feed>