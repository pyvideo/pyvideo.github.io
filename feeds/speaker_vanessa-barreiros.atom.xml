<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_vanessa-barreiros.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-04T00:00:00+00:00</updated><entry><title>Building effective Django queries with expressions</title><link href="https://pyvideo.org/djangocon-us-2019/building-effective-django-queries-with-expressions.html" rel="alternate"></link><published>2019-09-23T00:00:00+00:00</published><updated>2019-09-23T00:00:00+00:00</updated><author><name>Vanessa Barreiros</name></author><id>tag:pyvideo.org,2019-09-23:djangocon-us-2019/building-effective-django-queries-with-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Building effective Django queries with expressions by Vanessa Barreiros&lt;/p&gt;
&lt;p&gt;In Django, we have a powerful tool called ORM to manipulate databases. For small queries, it can be quite simple but what happens when you need to do tricks like nested queries or computed values? One of the answers is query expressions. In this talk, we'll learn how to power-up queries effectively.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/building-effective-django-queries-with/"&gt;https://2019.djangocon.us/talks/building-effective-django-queries-with/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Vanessa Barreiros ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/vcfbarreiros"&gt;https://twitter.com/vcfbarreiros&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://vinta.software/"&gt;https://vinta.software/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</summary></entry><entry><title>Building effective Django queries with expressions</title><link href="https://pyvideo.org/pybay-2019/building-effective-django-queries-with-expressions.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Vanessa Barreiros</name></author><id>tag:pyvideo.org,2019-08-16:pybay-2019/building-effective-django-queries-with-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In Django, we have a powerful tool called ORM to manipulate databases easily. For small queries, it can be quite simple, but what happens when you need to do tricks like nested queries or computed values? One of the answers is query expressions. In this talk, we'll learn how to power-up queries with them by walking through comparisons and examples with a dataset.&lt;/p&gt;
&lt;p&gt;Abstract
It's known that ORMs are a powerful tool to manipulate databases with ease. In Django, there are a set of out-of-the-box abstractions to help perform queries and shape them through annotations, aggregations, order by, and so on, hence saving one's time. A common solution to filtering when models grow larger over time is creating redundant fields; a better solution is using Django built-in resources called query expressions.&lt;/p&gt;
&lt;p&gt;Query expressions are smart yet straightforward functions that one can use to compute values on query execution and do string manipulation, calculations, among others, thus removing the burden of having unnecessary extra columns in our database. Using query expressions effectively can help to generate performant queries, avoiding potential inconsistencies and separating concerns.&lt;/p&gt;
&lt;p&gt;This talk focuses on further optimizing Django queries by walking through code comparisons and examples with a dataset, diving into subjects such as custom database functions, conditional expressions, and filtering so to answer questions about the data.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/7P2mb"&gt;https://t.ly/7P2mb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
I'm a full stack developer at Vinta Software (www.vinta.com.br) and Django Girls organizer at my hometown, Recife. When not coding and working on personal projects, I'm usually cooking and watching Grey's Anatomy.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</summary></entry><entry><title>Building effective Django queries with expressions</title><link href="https://pyvideo.org/pygotham-2019/building-effective-django-queries-with-expressions.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Vanessa Barreiros</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/building-effective-django-queries-with-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's known that ORMs are a powerful tool to manipulate databases with ease.
In Django, there are a set of out-of-the-box abstractions to help perform
queries and shape them through annotations, aggregations, order by, and so
on, hence saving one's time. A common solution to filtering when models grow
larger over time is creating redundant fields; a better solution is using
Django built-in resources called query expressions.&lt;/p&gt;
&lt;p&gt;Query expressions are smart yet straightforward functions that one can use
to compute values on query execution and do string manipulation,
calculations, among others, thus removing the burden of having unnecessary
extra columns in our database. Using query expressions effectively can help
to generate performant queries, avoiding potential inconsistencies and
separating concerns.&lt;/p&gt;
&lt;p&gt;This talk focuses on further optimizing Django queries by walking through
code comparisons and examples with a dataset, diving into subjects such as
custom database functions, conditional expressions, and filtering so to
answer questions about the data.&lt;/p&gt;
</summary></entry></feed>