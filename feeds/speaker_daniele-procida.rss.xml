<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Lightning talk 08 - The World's Cheapest, Simplest Pen Plotter</title><link>https://pyvideo.org/pycon-se-2019/lightning-talk-08-the-worlds-cheapest-simplest-pen-plotter.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/lightning-talk-08-the-worlds-cheapest-simplest-pen-plotter.html</guid><category>lightning talk</category></item><item><title>Lightning Talks Day 3</title><link>https://pyvideo.org/djangocon-us-2019/lightning-talks-day-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks Day 3 by Kojo Idrissa&lt;/p&gt;
&lt;p&gt;Adam Fast 00:00
Marshall Sutton 4:24
Daniele Procida 9:29
Rodrigo Suarez 14:17
Nicolle Cysneiros 19:07
Griffith Rees 23:57
David Vaz 28:39
Elizabeth Uselton 32:52
Ed Rivas 36:46&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Kojo Idrissa 👇
On Twitter: &lt;a class="reference external" href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://kojoidrissa.com/"&gt;http://kojoidrissa.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US 👇
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA 👇
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Fast</dc:creator><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-25:djangocon-us-2019/lightning-talks-day-3.html</guid></item><item><title>Nothingness and identity in Python and Django</title><link>https://pyvideo.org/djangocon-us-2019/nothingness-and-identity-in-python-and-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Nothingness and identity in Python and Django by Daniele Procida&lt;/p&gt;
&lt;p&gt;There’s something rich, beautiful and mysterious in the several kinds of nothingness and identity that we encounter as Django programmers. Understanding the connections they make with ontology, epistemology and metaphysics adds another dimension to the joy of programming.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/nothingness-and-identity-in-python-and/"&gt;https://2019.djangocon.us/talks/nothingness-and-identity-in-python-and/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Daniele Procida 👇
On Twitter: &lt;a class="reference external" href="https://twitter.com/EvilDMP"&gt;https://twitter.com/EvilDMP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US 👇
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA 👇
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-23:djangocon-us-2019/nothingness-and-identity-in-python-and-django.html</guid></item><item><title>The world's cheapest, simplest plotter</title><link>https://pyvideo.org/pycon-uk-2019/the-worlds-cheapest-simplest-plotter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I present an ultra-cheap (€12.50 for all parts, including a Raspberry Pi) Python-powered drawing machine, constructed from cardboard, assembled using basic tools and glue.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-16:pycon-uk-2019/the-worlds-cheapest-simplest-plotter.html</guid></item><item><title>Nothingness and identity in Python</title><link>https://pyvideo.org/pylondinium-2019/nothingness-and-identity-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Python programmers, we're blessed - we have several kinds of nothingness and identity at our fingertips. There's something rich, beautiful and mysterious in them, and in their variety and relation. For the programmer, the discovery of them is an opening into Python's power and expressiveness.&lt;/p&gt;
&lt;p&gt;It's the same richness and mystery that logicians and philosophers have discovered in them: entire schools of thought are founded on various approaches to nothingness. Programmers are in fact working with key ideas that are also crucially important to ontology, epistemology and metaphysics.&lt;/p&gt;
&lt;p&gt;From the pioneers of boolean electronics who adopted the NAND gate as the basic building block of logical circuits to thinkers like Sartre and Kant, nothing repeatedly turns out to be at the heart of everything. And the Python programmer who gets a surprise when checking for the identity of a variable is in fact running into the same problems that Heraclitus was aware of, 25 centuries before Guido van Rossum was even born. We're in good company, in other words.&lt;/p&gt;
&lt;p&gt;Nothingness and identity and the way we use them in Python and Django are related to phenomenology, utopia, politics, theories of agency and much, much more.&lt;/p&gt;
&lt;p&gt;Knowing about these connections might not make anyone a better programmer, but it can add another dimension to their understanding of the discipline, and add to the richness and beauty of their world, making the joy of programming even deeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/nothingness-and-identity-in-python.html</guid></item><item><title>The world's cheapest, simplest plotter</title><link>https://pyvideo.org/europython-2019/the-worlds-cheapest-simplest-plotter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I present an ultra-cheap (total cost of materials :€12.50) plotter that
can be built with minimal skills.&lt;/p&gt;
&lt;p&gt;At its heart is a Raspberry Pi Zero and some relatively custom software,
driving three servo motors.&lt;/p&gt;
&lt;p&gt;The mechanical hardware can be built from nothing but stiff card, a
ball-point pen and some glue. The only tools required are a ruler, a
sharp knife, a screwdriver and something to make holes in the card.&lt;/p&gt;
&lt;p&gt;Almost everything required can be found in a desk or kitchen drawer. The
entire device can be built with no special skills in about an hour (and
much of that time will be spent getting the glue off the kitchen table
before you get in trouble).&lt;/p&gt;
&lt;p&gt;As you can see from the following images, the plotter produces images
with a distinct charm:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/s7x3cnxzp1zwnp0/europython.jpg?dl=0"&gt;https://www.dropbox.com/s/s7x3cnxzp1zwnp0/europython.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/lzykb02rxh2d9ef/IMG_0065.jpg?dl=0"&gt;https://www.dropbox.com/s/lzykb02rxh2d9ef/IMG_0065.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/8ibihhbfz9gmql0/IMG_0067.jpg?dl=0"&gt;https://www.dropbox.com/s/8ibihhbfz9gmql0/IMG_0067.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/50lemnzw5ismcrq/IMG_0075.jpg?dl=0"&gt;https://www.dropbox.com/s/50lemnzw5ismcrq/IMG_0075.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can also function as the world's most inconvenient camera: take a
photo using the Raspberry Pi's camera, convert it into lines, and draw
it.&lt;/p&gt;
&lt;p&gt;This is fun, but it's much more than that. There are barriers of skill,
expense and materials around robotics. This project comes with me to
African PyCons, and makes it possible for programmers to explore
Python-based robotics, however limited their resources.&lt;/p&gt;
&lt;p&gt;The tools and complete kit of materials to build several plotters can be
carried in a small box. The plotter code is published on GitHub:
&lt;a class="reference external" href="https://github.com/evildmp/PantoGraph"&gt;https://github.com/evildmp/PantoGraph&lt;/a&gt;. The code for converting bitmaps
to cartesian vectors is at &lt;a class="reference external" href="https://github.com/evildmp/linedraw/"&gt;https://github.com/evildmp/linedraw/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I expect this to appeal to anyone who is interested in the idea of
Python- driven robotics but is put off by the cost and complexity of
hardware required actually to achieve something.&lt;/p&gt;
&lt;p&gt;It will be particularly of interest to people involved in education, or
who'd like to explore Python with young people. The code, mathematics
and especially the hardware in this project are all simple.&lt;/p&gt;
&lt;p&gt;The code resists the temptation to abstraction, and makes a point of
breaking operations down into steps that are as easy as possible to
follow. The project shows that doing things with robotics isn't just for
people with well-equipped workshops and the engineering skills to use
them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/the-worlds-cheapest-simplest-plotter.html</guid><category>Education</category></item><item><title>Lightning talks on Wednesday, July 10</title><link>https://pyvideo.org/europython-2019/lightning-talks-on-wednesday-july-10.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radomir Dopieralski</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/lightning-talks-on-wednesday-july-10.html</guid></item><item><title>Nothingness and identity in Python and Django</title><link>https://pyvideo.org/djangocon-europe-2019/nothingness-and-identity-in-python-and-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There’s something rich, beautiful and mysterious in the several kinds of nothingness and identity that we encounter as Python/Django programmers. Understanding the connections they make with ontology, epistemology and metaphysics adds another dimension to the joy of programming.
As Django programmers, we’re blessed - we have several kinds of nothingness and identity at our fingertips. There’s something rich, beautiful and mysterious in them, and in their variety and relation. For the programmer, the discovery of them is an opening into Python’s power and expressiveness.
It’s the same richness and mystery that logicians and philosophers have discovered in them: entire schools of thought are founded on various approaches to nothingness. Programmers are in fact working with key ideas that are also crucially important to ontology, epistemology and metaphysics.
From the pioneers of boolean electronics who adopted the NAND gate as the basic building block of logical circuits to thinkers like Sartre and Kant, nothing repeatedly turns out to be at the heart of everything. And the Python programmer who gets a surprise when checking for the identity of a variable is in fact running into the same problems that Heraclitus was aware of, 25 centuries before Guido van Rossum was even born. We’re in good company, in other words.
Nothingness and identity and the way we use them in Python and Django are related to phenomenology, utopia, politics, theories of agency and much, much more.
Knowing about these connections might not make anyone a better programmer, but it can add another dimension to their understanding of the discipline, and add to the richness and beauty of their world, making the joy of programming even deeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-21:djangocon-europe-2019/nothingness-and-identity-in-python-and-django.html</guid></item><item><title>Keynote: The naïve programmer</title><link>https://pyvideo.org/pylondinium-2018/keynote-the-naive-programmer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 09 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-09:pylondinium-2018/keynote-the-naive-programmer.html</guid></item><item><title>PyCon UK 2018 Monday Introduction</title><link>https://pyvideo.org/pycon-uk-2018/pycon-uk-2018-monday-introduction.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Tue, 18 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-18:pycon-uk-2018/pycon-uk-2018-monday-introduction.html</guid></item><item><title>PyCon UK 2018 - John Pinner Awards</title><link>https://pyvideo.org/pycon-uk-2018/pycon-uk-2018-john-pinner-awards.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The John Pinner Award celebrates voluntary service to the Python community in the UK.&lt;/p&gt;
&lt;p&gt;It is awarded annually at PyCon UK to those who freely contribute their time and effort for the good of the community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-17:pycon-uk-2018/pycon-uk-2018-john-pinner-awards.html</guid></item><item><title>PyCon UK 2018 - Sunday Introduction</title><link>https://pyvideo.org/pycon-uk-2018/pycon-uk-2018-sunday-introduction.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-17:pycon-uk-2018/pycon-uk-2018-sunday-introduction.html</guid></item><item><title>Tuesday Introduction</title><link>https://pyvideo.org/pycon-uk-2018/tuesday-introduction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction
.. PyCon UK 2018&lt;/p&gt;
&lt;p&gt;Assembly Room 2018-09-16 09:00-09:30&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 16 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-16:pycon-uk-2018/tuesday-introduction.html</guid></item><item><title>PyconUK 2018 Saturday Introduction</title><link>https://pyvideo.org/pycon-uk-2018/pyconuk-2018-saturday-introduction.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 15 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-15:pycon-uk-2018/pyconuk-2018-saturday-introduction.html</guid></item><item><title>Intro to Sprints</title><link>https://pyvideo.org/djangocon-europe-2018/intro-to-sprints.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intro to Sprints DjangoCon Europe Crew&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-25:djangocon-europe-2018/intro-to-sprints.html</guid></item><item><title>Keynote: The naïve programmer</title><link>https://pyvideo.org/djangocon-europe-2018/keynote-the-naive-programmer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: The naïve programmer&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-25:djangocon-europe-2018/keynote-the-naive-programmer.html</guid></item><item><title>The naïve programmer</title><link>https://pyvideo.org/europython-2018/the-naive-programmer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since Picasso encountered Henri Rousseau over a century ago, modern art
has been acutely aware of the value of the contributions that the naïve
artist can make. Art negotiates the relationship between sophistication
and naïvety with care and intelligence.&lt;/p&gt;
&lt;p&gt;What does our programming culture make of the naïve programmer? What can
programming gain or learn from this encounter?&lt;/p&gt;
&lt;p&gt;The naïve programmer is simply an unsophisticated programmer. Nobody is
born sophisticated. Even the most sophisticated programmers were once
naïve programmers. What’s more, the adoption of programming simply as a
tool to solve immediate problems, by ever more people without any formal
training, means that the number of naïve programmers will become
greater, not less. Are we ready for this?&lt;/p&gt;
&lt;p&gt;This talk will explore the relationship, illuminating it with examples
from the world of painting, art and music, and will offer some lessons
that our own industry and culture should be ready to learn from.&lt;/p&gt;
&lt;p&gt;(This talk will already have been presented as a keynote at DjangoCon
Europe 2018)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-25:europython-2018/the-naive-programmer.html</guid></item><item><title>The four kinds of documentation, and why you need to understand what they are</title><link>https://pyvideo.org/write-the-docs-prague-2017/the-four-kinds-of-documentation-and-why-you-need-to-understand-what-they-are.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:write-the-docs-prague-2017/the-four-kinds-of-documentation-and-why-you-need-to-understand-what-they-are.html</guid></item><item><title>Panel Discussion The Ethics and Politics of Programming</title><link>https://pyvideo.org/pycon-uk-2017/panel-discussion-the-ethics-and-politics-of-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a panel of four experts answering pre-submitted questions from the assembled audience under the guidance of a chairperson. Audience participation will be encouraged.&lt;/p&gt;
&lt;p&gt;Fake news on social media, dragnet collection of personal data, being asked to write code for the benefit of your employers but that's not necessarily helpful for your users, using big data to analyse the behaviour of users, government control of the internet, violations of FLOSS licenced code. These subjects and more like them are ripe for discussion in this panel.&lt;/p&gt;
&lt;p&gt;Think &amp;quot;Question Time&amp;quot; on BBC1 at 10:30pm on a Thursday and you have a pretty good idea of what it will be like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Carol Willing&lt;/strong&gt; (CHAIR)&lt;/p&gt;
&lt;p&gt;Carol Willing is a Python Software Foundation Fellow and former Director, a core developer for CPython and Project Jupyter, and a Research Software Engineer at Cal Poly San Luis Obispo.&lt;/p&gt;
&lt;p&gt;She's also Geek-In-Residence at Fab Lab San Diego and co-organizes PyLadies San Diego and San Diego Python. Combining a love of nature, the arts, and math with a BSE in Electrical Engineering from Duke and an MS in Management from MIT, she's enjoyed creating and teaching others for over 20 years.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anwesha Das&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Anwesha Das, is an Advocate practicing law for 7 years. She is an active user of FOSS technologies. She is the Organizer of PyLadies Pune. She maintains her blog at &lt;a class="reference external" href="https://anweshadas.in/"&gt;https://anweshadas.in/&lt;/a&gt;. One of her major goals is to help FOSS developers with the legal aspects of the software industry. She currently also blogs for the Python Software Foundation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Irina Bolychevsky&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Irina is passionate about products and using technology to make things better. She spent many years working on open data at Open Knowledge (as one of the directors and ckan product owner), at web startups, and recently as a data consultant for W3C, Open Data Institute and the UK and Dubai governments. She co-founded redecentralize.org — a project to promote and bring together people working on and interested in decentralised digital technologies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;David Miller&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;According to the only known biography of David Miller he is, &amp;quot;Human, frequently fascinated. Digital, Health with &amp;#64;ohcuk &amp;amp; friends.&amp;quot; He also happens to have a background in philosophy and an interest in ethical and political matters arising in the digital world. He's a founder of the NHS Hackday and runs Open Healthcare.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daniele Procida&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Daniele works for Divio where he helps make Python/Django easier to deploy on the web. He is a member of the Django core team and the Django Software Foundation board, trying to contribute back to open source software and its communities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carol Willing</dc:creator><pubDate>Sat, 28 Oct 2017 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-28:pycon-uk-2017/panel-discussion-the-ethics-and-politics-of-programming.html</guid></item><item><title>PyCon UK 2017 Friday Opening Session</title><link>https://pyvideo.org/pycon-uk-2017/pycon-uk-2017-friday-opening-session.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Inglesby</dc:creator><pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-27:pycon-uk-2017/pycon-uk-2017-friday-opening-session.html</guid></item><item><title>PyCon UK 2017 - John Pinner Awards</title><link>https://pyvideo.org/pycon-uk-2017/pycon-uk-2017-john-pinner-awards.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-27:pycon-uk-2017/pycon-uk-2017-john-pinner-awards.html</guid></item><item><title>Why can't Python be as easy to deploy as PHP?</title><link>https://pyvideo.org/pyconweb-2017/why-cant-python-be-as-easy-to-deploy-as-php.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;10 years, 5 deployments and a lesson: why can't Python be as easy to deploy as PHP?&lt;/p&gt;
&lt;p&gt;They are experiences that have been replayed hundreds of thousands of times by other novice programmers, and there are some valuable lessons to be learned for us in the Python community: 'our' language may be more elegant, secure and powerful, but there's a reason why, all the same, there are more PHP programmers and more PHP on the web.&lt;/p&gt;
&lt;p&gt;It's a mistake to make PHP the butt of jokes, or worse still, to think scornfully of the legions of not-very-expert PHP programmers who have found themselves empowered by things like WordPress. They don’t deserve it, for a start, but it's harmful for us too, because it hides from us the things that have rightfully brought success to PHP and its users.&lt;/p&gt;
&lt;p&gt;I'll highlight some of the ways in which the Python community has taken note of these lessons, and recent developments that might help Python catch up with PHP's legendary successes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-28:pyconweb-2017/why-cant-python-be-as-easy-to-deploy-as-php.html</guid><category>php</category></item><item><title>What nobody tells you about documentation</title><link>https://pyvideo.org/pycon-au-2017/what-nobody-tells-you-about-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nearly everyone agrees that good documentation is important to the success of software projects, and yet very few projects actually have good documentation. Even successful projects often have barely adequate documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Often, it's not for want of effort&lt;/em&gt; - the project's developers have worked hard on it - &lt;em&gt;nor for lack of documentation&lt;/em&gt; - the authors have produced a lot of it.&lt;/p&gt;
&lt;p&gt;It simply turns out to be not very good - not helpful enough for the users who should be able to rely on it, and a depressing chore for the authors who have to maintain it.&lt;/p&gt;
&lt;p&gt;The good news is that both these problems can be solved by understanding how documentation works, and what its four different functions are. Structuring documentation according to its four distinct functions helps ensure that each of them is adequately served. It also makes it far easier to write and maintain.&lt;/p&gt;
&lt;p&gt;Using real-life examples I'll draw out the key functions of documentation, and how they map onto different ways of writing it. Putting this into practice is simple when armed with some basic guidelines. The benefits are huge, and available with a minimum of effort.&lt;/p&gt;
&lt;p&gt;I won't be discussing documentation tools or software or other topics that have been covered amply elsewhere, but some neglected and poorly-understood aspects of documentation that &lt;strong&gt;will&lt;/strong&gt; make your software projects and teams more successful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 06 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-06:pycon-au-2017/what-nobody-tells-you-about-documentation.html</guid></item><item><title>Fighting the controls: madness and tragedy for programmers</title><link>https://pyvideo.org/pycon-au-2017/fighting-the-controls-madness-and-tragedy-for-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Damn it, this can’t be happening!&lt;/em&gt; As programmers, we find ourselves time and again spiralling down into tighter loops of desperate troubleshooting, fighting the controls of our machinery and descending into what feels like a kind of madness. Later, when it's all over, we realise that the clues we needed to recover the situation were staring us in the face all along, but we somehow couldn't even see them.&lt;/p&gt;
&lt;p&gt;There's a reason for this: &lt;em&gt;the nature of debugging means that it quickly tips us into these states, and then very effectively keeps us there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In programming we have worked hard to improve some aspects of programmers' work, creating methodologies, development frameworks, paradigms, practices and thinking deeply about how to solve the problems of producing good code. We have done very little work to improve the way we &lt;strong&gt;debug&lt;/strong&gt; our code,&lt;/p&gt;
&lt;p&gt;The good news is that although programmers have not developed very adequate strategies or techniques for mitigating the risks that debugging draws us into, other industries, and in particular aviation, have. We can learn from their lessons without paying their price.&lt;/p&gt;
&lt;p&gt;This is a technical talk about processes and methodologies in software development, based on an analysis of programming as a creative craft. It uses analogies and parallels from other disciplines to illuminate aspects of programming that often remain obscure to programmers themselves, and draws upon the lessons of aviation to provide concrete, practical ways to improve the way programmers debug code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:pycon-au-2017/fighting-the-controls-madness-and-tragedy-for-programmers.html</guid></item><item><title>Fighting the controls - madness for programmers</title><link>https://pyvideo.org/djangocon-europe-2017/fighting-the-controls-madness-for-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damn it, this can't be happening! Our program crashes, and we run it again - and it crashes again. It's a madness that afflicts programmers. In fact, the activity of debugging has an inherent tendency to cognitive breakdown. How can we resist its merciless pull, and turn debugging into a methodical, safe, successful discipline?
The good news for programmers is that another discipline, aviation, has found some solutions to this problem - and we can learn from its lessons.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-05:djangocon-europe-2017/fighting-the-controls-madness-for-programmers.html</guid></item><item><title>The Encounter: Python’s adventures in Africa</title><link>https://pyvideo.org/europython-2017/the-encounter-pythons-adventures-in-africa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A genuine encounter changes both parties. In this talk Daniele and
Aisha will report on the dialogue opened up by recent PyCons and
other Python events in Africa. They’ll discuss Python’s impact in
countries including Namibia, Nigeria and Zimbabwe, and what
open-source software means for Africa at large - and what the
encounter means for Python too.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-14:europython-2017/the-encounter-pythons-adventures-in-africa.html</guid></item><item><title>Fighting the controls: tragedy and madness for programmers and pilots</title><link>https://pyvideo.org/europython-2017/fighting-the-controls-tragedy-and-madness-for-programmers-and-pilots.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Damn it, this can’t be happening! As programmers, we find ourselves
time and again spiralling down into tighter loops of desperate
troubleshooting, fighting the controls of our machinery and
descending into what feels like a kind of madness. Later, when it’s
all over, we realise that the clues we needed to recover the
situation were staring us in the face all along, but we somehow
couldn’t even see them.&lt;/p&gt;
&lt;p&gt;There’s a reason for this: the nature of debugging for programmers
means that it quickly tips us into these states, and then very
effectively keeps us there.&lt;/p&gt;
&lt;p&gt;In programming we have worked hard to improve some aspects of
programmers’ work, creating methodologies, development frameworks,
paradigms, practices and thinking deeply about how to solve the
problems of producing good code. We have done very little work to
improve the way we debug our code,&lt;/p&gt;
&lt;p&gt;The good news is that although programmers have not developed very
adequate strategies or techniques for mitigating the risks that
debugging draws us into, other industries, and in particular
aviation, have. We can learn from their lessons without paying their
price.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:europython-2017/fighting-the-controls-tragedy-and-madness-for-programmers-and-pilots.html</guid></item><item><title>How documentation works, and how to make it work for your project</title><link>https://pyvideo.org/pycon-us-2017/how-documentation-works-and-how-to-make-it-work-for-your-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nearly everyone (especially in the Python community) agrees that good
documentation is important to the success of software projects, and yet
very few projects actually have good documentation.&lt;/p&gt;
&lt;p&gt;Often, it's &lt;em&gt;not for want of effort&lt;/em&gt; - the project's developers have
worked hard on it - &lt;em&gt;nor for lack of documentation&lt;/em&gt; - the authors have
produced a lot of it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It simply turns out to be not very good&lt;/em&gt; - not helpful enough for the
users who should be able to rely on it, and a depressing chore for the
authors who have to maintain it.&lt;/p&gt;
&lt;p&gt;The good news is that both these problems can be solved by understanding
&lt;em&gt;how documentation works&lt;/em&gt;, and what its different functions are.
Structuring documentation according to those distinct functions helps
ensure that each of them is adequately served. It also makes it far
easier to write and maintain.&lt;/p&gt;
&lt;p&gt;Using real-life examples I'll draw out the key functions of
documentation, and how they map onto different ways of writing it.
Putting this into practice is simple when armed with some basic
guidelines. The benefits are huge, and available with a minimum of
effort.&lt;/p&gt;
&lt;p&gt;I won't be discussing documentation tools or software or other topics
that have been covered amply elsewhere, but some neglected aspects of
software documentation that &lt;strong&gt;will make your software projects more
successful&lt;/strong&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/how-documentation-works-and-how-to-make-it-work-for-your-project.html</guid></item><item><title>Poets, programmers and Python</title><link>https://pyvideo.org/pycon-sk-2016/poets-programmers-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Programming has a very unfair reputation for being an unimaginative, mechanical discipline - but if you're a programmer you know that's not true, and also that a programmer's work can bear the imprint of the programmer's creative personality as strongly as that of any other writer.&lt;/p&gt;
&lt;p&gt;What's more, programmers enjoy playing with and exploring language in much the same way that poets do - turning it upon itself, referring it to itself, and taking pleasure in what's revealed.&lt;/p&gt;
&lt;p&gt;There are some notable writers, artists and musicians whose work programmers always seem to find fascinating when they encounter it. The way programmers think makes them especially ready to understand and appreciate the intersection of rules, processes and play that characterises this work.&lt;/p&gt;
&lt;p&gt;I'll discuss writers including Ulises Carrión and the Oulipo group, and show how what they do overlaps with what programmers do. I'll also demonstrate some Python programs I've developed that explore texts and language in the same playful way that the writers do, and invite the audience to develop this further.&lt;/p&gt;
&lt;p&gt;An especially important construct I'm interested in is the loop, which is found in very similar ways at the heart of much programmer's play and in the work of the writers and artists I'm discussing.&lt;/p&gt;
&lt;p&gt;In programming the loop - a tightly-repeated, often self-referential structure - is a concrete example of a concept that finds employment in the work of thinkers like Douglas Hofstadter. For Hofstadter, loops - in language, logic, processes, music, computation, art and elsewhere - are key to understanding the nature of thought and meaning.&lt;/p&gt;
&lt;p&gt;I'll show how we can explore some of these ideas, again with the help of simple Python programs and poetry (including Ulises Carrión's almost maddening First Spanish Lesson).&lt;/p&gt;
&lt;p&gt;Finally, I want to consider writing programs and poetry as a discipline. The discipline of the aspiring programmer in fact is not so far from that of the creative writer. Even more striking is how the hardest-to-learn lessons of successful writing are the ones that programmers learn right from the start - and why the aspiring creative writer can learn a lot from how programmers work.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-12:pycon-sk-2016/poets-programmers-and-python.html</guid></item><item><title>Keynote: The programmer's body</title><link>https://pyvideo.org/djangocon-europe-2014/keynote-the-programmers-body.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is the only thing that really matters?&lt;/p&gt;
&lt;p&gt;We are programmers, and everything in the ideology of our industry is
disembodied and virtualised. At the same time we are building the world
that the rest of the world, increasingly, will live in.&lt;/p&gt;
&lt;p&gt;We are, it seems, sexless selves and disembodied minds in a world that
doesn't need our bodies and isn't very interested in them.&lt;/p&gt;
&lt;p&gt;And yet: the body remains at the centre of the world, even this
supposedly bodiless world. Its disputes and politics, its hurts and
controversies, its pains and insults all belong to the body.&lt;/p&gt;
&lt;p&gt;Even the fiction and film of this new world of the unbodied are (and
always have been) bodily-fixated.&lt;/p&gt;
&lt;p&gt;In short, there's no escaping the body.&lt;/p&gt;
&lt;p&gt;In this talk, I take examples from history, literature, film, poetry and
other fields to show how our present state can be woven into a very
ancient pattern, and ask: what should we, as programmers, do about it?&lt;/p&gt;
&lt;p&gt;And finally, I make a modest attempt to answer that question.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-15:djangocon-europe-2014/keynote-the-programmers-body.html</guid></item><item><title>What if those words don't mean what we think they mean?</title><link>https://pyvideo.org/pycon-ireland-2015/what-if-those-words-dont-mean-what-we-think-they-mean.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I used to teach what was called &amp;quot;Information and communication technology&amp;quot; in high school - but I realised that none of my colleagues in the department seemed very curious about information, communication or technology.&lt;/p&gt;
&lt;p&gt;Later, I also realised that even the people who are deeply interested in those subjects mostly don't think very much about the meaning of those words - which is a shame, because those words are hiding some intriguing things, and help shine some light on some hot topics.&lt;/p&gt;
&lt;p&gt;In its approach to the industry’s moral and political controversies, the Python community has earned a reputation for moral earnestness. It’s not undeserved, and it may even be inescapable, but be that as it may, if we’re going to agonise, let’s agonise with insight and awareness.&lt;/p&gt;
&lt;p&gt;In recent years (and particularly importantly for our industry) there are some words whose meaning, without our noticing, has slipped out almost from beneath our feet.&lt;/p&gt;
&lt;p&gt;Several of these words lie at the crux of the industry’s most significant ills; some are controversial words, like “meritocracy”, and some seem quite innocent, like “information”, &amp;quot;communication&amp;quot; and &amp;quot;technology&amp;quot;, but on closer inspection they can all be found loitering around scenes of trouble.&lt;/p&gt;
&lt;p&gt;I won’t claim that we can solve any important disputes by dwelling upon words, but I will show how paying attention to the shifting or contested meanings of certain words will shed light on some of the ways in which we think about some disputes, and can suggest different ways of approaching them.&lt;/p&gt;
&lt;p&gt;I’ll discuss what they mean for our debates about (for example) inclusivity and diversity, and even what they have to show about the way in which we conduct those debates.&lt;/p&gt;
&lt;p&gt;Introspection, in other words, can be just as powerful in natural language as it can be in Python, and once learned the techniques will find numerous useful applications.&lt;/p&gt;
&lt;p&gt;I will discuss topics including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ancient Athens&lt;/li&gt;
&lt;li&gt;GitHub’s troublesome office rug&lt;/li&gt;
&lt;li&gt;desert&lt;/li&gt;
&lt;li&gt;“information” as content rather than an act&lt;/li&gt;
&lt;li&gt;“communication” as a conduit rather than act&lt;/li&gt;
&lt;li&gt;what technology “really” means&lt;/li&gt;
&lt;li&gt;Aristotle on classes, functions and objects&lt;/li&gt;
&lt;li&gt;Wittgenstein on function as meaning&lt;/li&gt;
&lt;li&gt;elitism, aristocracy, meritocracy, diversity, inclusion, fairness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;… and numerous other interwoven matters&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-25:pycon-ireland-2015/what-if-those-words-dont-mean-what-we-think-they-mean.html</guid></item><item><title>Python adventures in Namibia</title><link>https://pyvideo.org/pycon-uk-2015/python-adventures-in-namibia.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In February this year, with the help of the University of Namibia and
Cardiff University's Phoenix Project, and with support from numerous
organisations in the Django/Python community, we held Python Namibia, a
four-day international software conference in the capital, Windhoek.&lt;/p&gt;
&lt;p&gt;This is the story of why we did it, how we did it, how it went - and
what's going to happen next.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 19 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-19:pycon-uk-2015/python-adventures-in-namibia.html</guid></item><item><title>Keynote: All I really want is power</title><link>https://pyvideo.org/pycon-uk-2015/keynote-all-i-really-want-is-power.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computing power is a kind of power, but I’m interested in a more
powerful power: power over other people.&lt;/p&gt;
&lt;p&gt;I want to understand power and where it comes from. I’m curious about
the balances and imbalances of power in our worlds of software
development, how it moves around and where it goes. I want to know how
it affects the people who have it, how they use it, and whether they
even realise that they hold it.&lt;/p&gt;
&lt;p&gt;I believe that it really matters to open-source communities, that it’s
poorly understood, and that not understanding it has harmful
consequences for us.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-18:pycon-uk-2015/keynote-all-i-really-want-is-power.html</guid></item><item><title>When We Were Young and In Love</title><link>https://pyvideo.org/pycon-de-2016/when-we-were-young-and-in-love.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An open-source software project is like a personal relationship: it can never endure on excitement and enthusiasm alone. Like a relationship, it has to be able to develop and mature - and that means it must also keep changing. And, less romantically but crucially, it must also learn to talk about money.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-29:pycon-de-2016/when-we-were-young-and-in-love.html</guid></item><item><title>Quando eravamo giovani e innamorati</title><link>https://pyvideo.org/pycon-italia-2016/quando-eravamo-giovani-e-innamorati.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:pycon-italia-2016/quando-eravamo-giovani-e-innamorati.html</guid></item><item><title>Documentation-driven development</title><link>https://pyvideo.org/europython-2016/documentation-driven-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniele Procida - Documentation-driven development
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/documentation-driven-development"&gt;https://ep2016.europython.eu//conference/talks/documentation-driven-development&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;One secret of Django's success is the quality of its documentation. As
well as being key to the quality of the code itself, it has helped
drive the development of Django as a community project, and even the
professional development of programmers who adopt Django.&lt;/p&gt;
&lt;p&gt;I'll discuss how Django has achieved it, and how any project can
easily win the same benefits.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Part of my job title is &lt;em&gt;Documentation Manager&lt;/em&gt;. When I explain this
to a programmer outside the Python/Django community, the reaction can
be anything from bewilderment to a kind of mild horror. When I mention
it to a Python/Django programmer, the response is usually: &lt;em&gt;Oh, cool&lt;/em&gt;.
In fact, one secret of Django's success is the quality of its
documentation, and everyone who uses Django is quick to note this.&lt;/p&gt;
&lt;p&gt;The returns on Django's investment have been substantial, but some of
them are also surprising.
The documentation has clearly been key to the &lt;em&gt;quality of the code
itself&lt;/em&gt;, but also (less obviously) to the &lt;em&gt;development of Django as a
community project&lt;/em&gt;, and even the &lt;em&gt;professional development of
programmers&lt;/em&gt; who adopt Django.&lt;/p&gt;
&lt;p&gt;I'll discuss how Django has achieved it, and how any project can
easily win the same benefits.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 04 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-04:europython-2016/documentation-driven-development.html</guid></item><item><title>Minds, machines and Python</title><link>https://pyvideo.org/europython-2016/minds-machines-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniele Procida - Minds, machines and Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/minds-machines-and-python"&gt;https://ep2016.europython.eu//conference/talks/minds-machines-and-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Are we looking in the wrong direction for artificial intelligence and
machine learning?&lt;/p&gt;
&lt;p&gt;I'll discuss an older but perhaps more satisfying approach, that has
been neglected in recent years.&lt;/p&gt;
&lt;p&gt;It begins with questions in logic and language, and can be explored
using easy techniques. I'll use simple Python programs to explore
three key notions in this AI research: &lt;strong&gt;loops&lt;/strong&gt;, &lt;strong&gt;self-reference&lt;/strong&gt;
and &lt;strong&gt;tangled hierarchies&lt;/strong&gt;, themselves directly reflected in
important programming concepts.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;In recent years, we've seen interesting and spectacular successes in
artificial intelligence and machine learning, made possible by leaps
in computing power and techniques able to harvest vast quantities of
data.&lt;/p&gt;
&lt;p&gt;The results are uncanny. We see them everywhere, from the personal
assistants built into smartphones to the neural networks that do an
astounding job of recognising images. However, they're also
susceptible to the criticism that they represent not intelligence but
a mere simulation of it, and that producing a convincing simulacrum
has become more important than a genuine search for  intelligence or
learning.&lt;/p&gt;
&lt;p&gt;At the same time, another, perhaps deeper, approach has become
neglected in recent decades, along with the questions it asks about
the nature of mind, intelligence and learning. This approach begins
with fundamental questions in logic and language, and can be explored
using some of the simplest programming techniques.&lt;/p&gt;
&lt;p&gt;In this talk, I'll use simple Python programs to explore three key
notions in this strand of artificial intelligence research: &lt;em&gt;loops&lt;/em&gt;,
&lt;em&gt;self-reference&lt;/em&gt; and &lt;em&gt;tangled hierarchies&lt;/em&gt;. The way these concepts
directly reflect important concepts in programming suggests that for
the programmer, this approach could be more interesting and
satisfying, and simply more &lt;strong&gt;fun,&lt;/strong&gt; than using huge ontologies and
big data to create mere simulacra of intelligence.&lt;/p&gt;
&lt;p&gt;The examples I use will be concrete and easy to understand, even for
novice programmers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sun, 31 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-31:europython-2016/minds-machines-and-python.html</guid></item><item><title>Documentation-driven development - lessons from the Django Project</title><link>https://pyvideo.org/pycon-us-2016/daniele-procida-documentation-driven-development-lessons-from-the-django-project-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Daniele Procida&lt;/p&gt;
&lt;p&gt;One secret of Django's success is the quality of its documentation. As well as being key to the quality of the code itself, it has helped drive the development of Django as a community project, and even the professional development of programmers who adopt Django.&lt;/p&gt;
&lt;p&gt;I'll discuss how Django has achieved it, and how any project can easily win the same benefits.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Fri, 17 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-17:pycon-us-2016/daniele-procida-documentation-driven-development-lessons-from-the-django-project-pycon-2016.html</guid></item><item><title>CMS Panel</title><link>https://pyvideo.org/djangocon-europe-2015/iacopo-spalletti-tom-dyson-daniele-procida-cms-at.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iacopo Spalletti</dc:creator><pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-31:djangocon-europe-2015/iacopo-spalletti-tom-dyson-daniele-procida-cms-at.html</guid></item><item><title>All You Need Is L***</title><link>https://pyvideo.org/djangocon-us-2014/all-you-need-is-l.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FNEd/"&gt;http://amara.org/v/FNEd/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-11:djangocon-us-2014/all-you-need-is-l.html</guid></item></channel></rss>