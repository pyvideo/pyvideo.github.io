<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joe-gordon.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T16:30:00+00:00</updated><entry><title>Syntax Trees and Python - Automated Code Transformations</title><link href="https://pyvideo.org/pycon-us-2019/syntax-trees-and-python-automated-code-transformations.html" rel="alternate"></link><published>2019-05-04T16:30:00+00:00</published><updated>2019-05-04T16:30:00+00:00</updated><author><name>Joe Gordon</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/syntax-trees-and-python-automated-code-transformations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Manually updating a million line code base is tedious. Thankfully syntax
trees provide a safe and quick way to automatically apply repetitive
transformations. Leveraging syntax tree based tooling (based on
lib2to3), has been a critical component of Pinterest's Python 3 upgrade
strategy, and saved us countless hours of work. Learn how syntax trees
work, how they are used to transform code, and how you can quickly write
your own transformations.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Migrating Pinterest from Python2 to Python3</title><link href="https://pyvideo.org/pycon-us-2019/migrating-pinterest-from-python2-to-python3.html" rel="alternate"></link><published>2019-05-03T12:10:00+00:00</published><updated>2019-05-03T12:10:00+00:00</updated><author><name>Jordan Adler</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/migrating-pinterest-from-python2-to-python3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the course of nearly a year, we migrated Pinterest's primary
systems from Python2 to Python3. A large, tightly coupled codebase with
over 2 million lines of code, the Pinterest codebase contained nearly
every edge case that might exist in a Py2 to Py3 migration.&lt;/p&gt;
&lt;p&gt;We'll cover our approach, gotchas, and tools, and the incredible impact
our migration has made on infra spend and code quality.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Very Large Development: How to run code review for 800+ Open Source Python Developers</title><link href="https://pyvideo.org/europython-2013/very-large-development-how-to-run-code-review-for-800-open-source-python-developers.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Joe Gordon</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/very-large-development-how-to-run-code-review-for-800-open-source-python-developers.html</id><summary type="html"></summary></entry><entry><title>Python profiling and performance tuning in production</title><link href="https://pyvideo.org/pycon-ca-2017/python-profiling-and-performance-tuning-in-production.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Joe Gordon</name></author><id>tag:pyvideo.org,2017-11-18:pycon-ca-2017/python-profiling-and-performance-tuning-in-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pinterest decreased latency and shrunk their front-end fleet by over 40% with less than 100 lines of python. This was done by understanding how a significant amount of latency and consumed resources were the result of geventâ€™s cooperative multitasking. 4 different open source python profilers, were then used together to identify and fix bottlenecks and inefficiencies in the code base. Most profilers are too slow to use in production, so profiling of web servers often occurs in synthetic environments. But to get an accurate picture of what is happening you need production profiling data, so a production ready Linux signal (SIGVTALRM) based python profiler was used. This talk will cover how Pinterest shrunk their front-end fleet, the techniques and tooling used to improve performance and how they can be applied elsewhere.&lt;/p&gt;
</summary></entry></feed>