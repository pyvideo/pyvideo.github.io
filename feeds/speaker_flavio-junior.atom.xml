<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_flavio-junior.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-14T00:00:00+00:00</updated><entry><title>Como fazer boas libs? O que torna uma biblioteca fácil de usar</title><link href="https://pyvideo.org/python-brasil-2016/como-fazer-boas-libs-o-que-torna-uma-biblioteca-facil-de-usar.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Flávio Junior</name></author><id>tag:pyvideo.org,2016-10-15:python-brasil-2016/como-fazer-boas-libs-o-que-torna-uma-biblioteca-facil-de-usar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Não é fácil escrever uma biblioteca confortável de usar. É difícil
agradar a todos. Mas também é difícil agradar até quem acha que a nossa
biblioteca faz algo útil. Não é fácil nem mesmo quando fazemos algo
reusável só para nós mesmos.&lt;/p&gt;
&lt;p&gt;Ainda bem que muitos outros programadores já erraram antes de nós. E
existem em Python e fora dele diversos exemplos de boas libs nas quais
podemos nos inspirar.&lt;/p&gt;
&lt;p&gt;Essa palestra resumirá o que torna uma biblioteca boa, de acordo com
nossa experiência e com a experiência de outros programadores que já
escreveram sobre isso. Algumas características de boas bibliotecas são:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alta Consistência&lt;/li&gt;
&lt;li&gt;Muitos dados puros&lt;/li&gt;
&lt;li&gt;Baixa Verbosidade&lt;/li&gt;
&lt;li&gt;Respeito ao Principle of Least Astonishment&lt;/li&gt;
&lt;li&gt;Alta Extensibilidade&lt;/li&gt;
&lt;li&gt;Baixa Retenção&lt;/li&gt;
&lt;li&gt;Vários níveis de abstrações&lt;/li&gt;
&lt;li&gt;Alta granularidade&lt;/li&gt;
&lt;li&gt;Interesses claros e separados&lt;/li&gt;
&lt;li&gt;Pythonica&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como você pode ver, alguns aspectos acima são similares ao Zen of
Python. Por isso também mostraremos funcionalidades do Python que ajudam
a programar boas interfaces. Além disso, para resumir tudo definiremos
um checklist que você poderá usar sempre que for escrever um módulo
reusável. Esperamos que isso ajude você a programar melhor, o que
certamente agradará seus parceiros de trabalho e a comunidade.&lt;/p&gt;
&lt;p&gt;UPDATE: Slides em:
&lt;a class="reference external" href="http://www.vinta.com.br/blog/2016/python-brasil12-talks/"&gt;http://www.vinta.com.br/blog/2016/python-brasil12-talks/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Preventing headaches with linters and automated checks</title><link href="https://pyvideo.org/djangocon-us-2017/preventing-headaches-with-linters-and-automated-checks.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Flavio Junior</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/preventing-headaches-with-linters-and-automated-checks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Preventing headaches with linters and automated checks by Flávio Junior&lt;/p&gt;
&lt;p&gt;While it’s very common to enforce PEP8 code style with tools like flake8, it’s rare for Django projects to use any other types of tools for automated checks. However, linters and automated checks are a good way to enforce code quality beyond code style. Human-based code reviews are great, but if an experienced programmer leaves the organization, all quality-related knowledge they have will be gone. One way to prevent this is to make developers consolidate their knowledge as custom check tools. Instead of repeating to every junior programmer how they should code, experienced developers should write tools to do that for them. Having this kind of “executable knowledge” is great to ensure long-lasting good practices in organizations.&lt;/p&gt;
&lt;p&gt;Thankfully, Python already has a number of extensible linters and check tools that can be used to consolidate knowledge. Also, Django has the System check framework, which can be used to write custom static validations to Django projects. In this talk, we’ll discuss existing linters and tools, what benefit they bring to Django projects, how to extend them and how to build custom ones. Combined with IDEs, pre-commit hooks, and CI tools, linters can validate code at programming time, commit time, or CI time, thereby ensuring good practices in all development workflow.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2017.djangocon.us/talks/preventing-headaches-with-linters-and-automated-checks/"&gt;https://2017.djangocon.us/talks/preventing-headaches-with-linters-and-automated-checks/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>