<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_przemyslaw-kukulski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-20T00:00:00+00:00</updated><entry><title>Continous Integration - Jenkins kontratakuje</title><link href="https://pyvideo.org/pycon-pl-2013/continous-integration-jenkins-kontratakuje.html" rel="alternate"></link><published>2013-10-20T00:00:00+00:00</published><updated>2013-10-20T00:00:00+00:00</updated><author><name>Przemysław Kukulski</name></author><id>tag:pyvideo.org,2013-10-20:pycon-pl-2013/continous-integration-jenkins-kontratakuje.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: Continous Integration - Jenkins kontratakuje
Prelegent/Speaker: Przemysław Kukulski&lt;/p&gt;
&lt;blockquote&gt;
Ile razy zdarzyło Wam się zapomnieć wykonać testy (zwłaszcza regresyjne)? Ile razy przez to wydłużył się proces wydawania nowej wersji? A ile razy nie chciało Wam się pisać testów bo były zbyt nudne? Jenkins jest serwerem służącym do automatyzacji procesu testowania oprogramowania. Dzięki odpowiedniej konfiguracji możemy (częściowo) zapomnieć o testach regresyjnych - wykonają się same, i gdy wystąpi błąd Jenkins upewni się że się o tym dowiemy ;) Dodatki takie jak violations, open tasks, pozwolą nam na lepszą organizację kodu, cobertura powie nam które partie kodu nie są przetestowane... a CI Game pozwoli na zastosowanie grywalizacji co może 'zwiększyć' chęci by kod był przetestowany i poprawny (PEP-8/pylint) Celem prelekcji będzie pokazanie praktycznych zastosowań dla serwera Jenkins (z w/w pluginami i nie tylko). Jako aplikacja 'testowa' zostanie użyta aplikacja napisana w Django.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2013/pl/agenda"&gt;http://pl.pycon.org/2013/pl/agenda&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>