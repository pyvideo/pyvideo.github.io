<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_abraham-martin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-08T00:00:00+00:00</updated><entry><title>Architecture of a cloud hosting service using python technologies: django, ansible and celery</title><link href="https://pyvideo.org/europython-2015/architecture-of-a-cloud-hosting-service-using-python-technologies-django-ansible-and-celery.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Abraham Martin</name></author><id>tag:pyvideo.org,2015-08-08:europython-2015/architecture-of-a-cloud-hosting-service-using-python-technologies-django-ansible-and-celery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abraham Martin - Architecture of a cloud hosting service using python technologies: django, ansible and celery
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;The talk will show the architecture and inners of a cloud hosting
service we are developing in the University of Cambridge based on
python technologies, mainly django, ansible, and celery.&lt;/p&gt;
&lt;p&gt;The users manage their hosts using a web panel, developed in django,
with common options: ability to create a vhost, associate domain names
to vhosts, install packages, recover from backups, make snapshots,
etc. Interaction between the panel and the hosts are made using
ansible playbooks launched asynchronously by celery tasks. The VM
architecture has been designed to be VM platform agnostic and to
provide disk replication and high availability.&lt;/p&gt;
&lt;p&gt;The University of Cambridge central IT services
(&lt;a class="reference external" href="http://www.ucs.cam.ac.uk/"&gt;http://www.ucs.cam.ac.uk/&lt;/a&gt;) also provides other services to the rest
of the university like domain name registration, authentication,
authorisation, TLS certificates, etc. We link all these other services
with the hosting service by using APIs while keeping a microservices
architecture approach. Thus, enabling the use/link of other services
within the same hosting service web application.&lt;/p&gt;
</summary></entry></feed>