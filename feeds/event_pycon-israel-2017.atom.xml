<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-israel-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-13T00:00:00+00:00</updated><entry><title>A physicist's approach to Data Science</title><link href="https://pyvideo.org/pycon-israel-2017/a-physicists-approach-to-data-science.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Elad Berkman</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/a-physicists-approach-to-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the main challenges of developing algorithms for a dynamic, data intensive, and &amp;quot;noisy&amp;quot; environment is being able to monitor system performance and understand the impact of each element or change. Using basic principles, we developed a model that estimates key performance metrics. Used in an unconventional way, the model allows us to gain significant insight on global system behavior and performance, and impact of updates to the core algorithm's logic. This model has proven extremely powerful at Via. We have developed and deployed the world's first operating system for on-demand dynamic public transit. Our solution is operating at scale in New-York, Chicago, DC, Paris and is growing rapidly to additional locations.&lt;/p&gt;
</summary></entry><entry><title>A primer to write a conversational chatbot</title><link href="https://pyvideo.org/pycon-israel-2017/a-primer-to-write-a-conversational-chatbot.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Francesco Vollero</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/a-primer-to-write-a-conversational-chatbot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wonder of complicated could be to write a 'working' conversational chatbot engine using an opensource project? Maybe integrated with Facebook Messenger ? Well, this presentation, will guide you to develop a simple bot, with a sprinkle of AI and all in your hands, ready to be consumed and to learn how your bot could solve problems and make more awesome your life&lt;/p&gt;
</summary></entry><entry><title>Adding interactivity by extending Jupyter Notebook</title><link href="https://pyvideo.org/pycon-israel-2017/adding-interactivity-by-extending-jupyter-notebook.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Beni Cherniavsky-Paskin</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/adding-interactivity-by-extending-jupyter-notebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter (formerly IPython) Notebook is a &amp;quot;better REPL&amp;quot; that can be easily extended. I'll demonstrate how writing new backends is a productive way to expose existing tools (e.g. Ansible) in a more interactive way.&lt;/p&gt;
</summary><category term="jupyter notebook"></category></entry><entry><title>Ansible modules for oVirt</title><link href="https://pyvideo.org/pycon-israel-2017/ansible-modules-for-ovirt.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Ondřej Macháček</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/ansible-modules-for-ovirt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The oVirt project contains Python, Java and Ruby SDKs, which are auto-generated from the API specification and they are using imperative concept. On the other hand Ansible modules have to be declarative and idempotent. In this talk we will present issues we've had during the development, the lessons we've learned, and how we've made Ansible modules declarative using imperative SDK. The development of Ansible modules is done in Python, so the Python developers will gain knowledge on how Ansible modules can be developed, and what things should be considered when writing Ansible modules.&lt;/p&gt;
</summary><category term="ansible"></category><category term="ovirt"></category></entry><entry><title>“bluegiraffeplaysball” or Make Passwords Great Again Using zxcvbn</title><link href="https://pyvideo.org/pycon-israel-2017/bluegiraffeplaysball-or-make-passwords-great-again-using-zxcvbn.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Alon Kiriati</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/bluegiraffeplaysball-or-make-passwords-great-again-using-zxcvbn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facebook, Google and Apple mislead you to create crappy passwords, that can be cracked easily. I invite you to see a more realistic way to estimate your own passwords using python “zxcvbn” lib. This is a useful tool that can also help you making your customers’ passwords stronger, and your site more secured.&lt;/p&gt;
</summary><category term="passwords"></category></entry><entry><title>Bringing people together with Python and Open Source</title><link href="https://pyvideo.org/pycon-israel-2017/bringing-people-together-with-python-and-open-source.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Freddy Rolland</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/bringing-people-together-with-python-and-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ROSE (short for Red Hat Open Source for Education) is a cross-community effort lead by Red Hat Israel that brings students from Tira and Ra'anana to the Red Hat offices to learn about the Linux operating system and Python programming. As part of the ROSE project, the students learn about Open Source, basic Linux shell skills, and Python programming. As a final project, they write an algorithm in Python for a self driving car in a race game. The project gives an excellent opportunity to 8th grade students to experience both the world of coding and communication with other communities that they are not regularly in contact with. How does this work? Why use Python of all the languages? How can coding bring people from different cultures closer? Can we make it fun? In this session, we will present the project structure, the team activities, the code competition and our experience leading this project last year.&lt;/p&gt;
</summary></entry><entry><title>Custom Source Code Checks</title><link href="https://pyvideo.org/pycon-israel-2017/custom-source-code-checks.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Anton Marchukov</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/custom-source-code-checks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A great set of tools exists to check the source code for compliance with Python coding standards such as PEP 8. Those tools are useful to control code quality during code review and on continuous integration stage. However, the standards do not cover everything and each team may have additional coding guidelines in place. Conveniently the Python ecosystem allows easy creation of custom source code checks, so your local code style conventions that are outside of existing tools coverage should not be left for a manual review process only. This talk will focus on how automation of code checks outside of PEP 8 standard can be done.&lt;/p&gt;
</summary></entry><entry><title>Data Science at Scale Using dask and Numba</title><link href="https://pyvideo.org/pycon-israel-2017/data-science-at-scale-using-dask-and-numba.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Yigal Weinberger</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/data-science-at-scale-using-dask-and-numba.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today there is a great need for improved performance and scalability even in the early stages of the data science process, in my talk I will discuss the limitations of pandas in terms of performance and show a few hands on examples for common data processing procedure using two frameworks: Dask and Numba&lt;/p&gt;
</summary><category term="dask"></category><category term="numba"></category></entry><entry><title>Designing Pythonic APIs</title><link href="https://pyvideo.org/pycon-israel-2017/designing-pythonic-apis.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Noam Elfanbaum</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/designing-pythonic-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing a package (library) or even a simple module, providing it with a good API, is almost as important as its functionality itself (well, at least if you want some adoption), but what makes a good API? In this talk, I’ll provide some insights on that question by surveying the APIs that helped make projects such as Requests, Flask and Celery popular, while also reviewing technical implementations.&lt;/p&gt;
</summary></entry><entry><title>DevOps with Python</title><link href="https://pyvideo.org/pycon-israel-2017/devops-with-python.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Arik Gelman</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/devops-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the conference I would like to talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On-box and off-Box automation&lt;/li&gt;
&lt;li&gt;Networking and system automation with Python for DevOps&lt;/li&gt;
&lt;li&gt;Using REST-API with controllers&lt;/li&gt;
&lt;li&gt;Creating automation tools as web applications with Django&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Packages I want to talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;netmiko&lt;/li&gt;
&lt;li&gt;paramiko&lt;/li&gt;
&lt;li&gt;pyvmomi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The conference audience will gain knowledge in managing the IT environment through automation to develop DevOps tools with Python.&lt;/p&gt;
</summary><category term="netmiko"></category><category term="paramiko"></category><category term="pyvmomi"></category></entry><entry><title>Dynamic Neural Networks with DyNet</title><link href="https://pyvideo.org/pycon-israel-2017/dynamic-neural-networks-with-dynet.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Yoav Goldberg</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/dynamic-neural-networks-with-dynet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks work very well for many learning-based applications, and I assume you are already familiar with them. Programming neural network models is rather easy, thanks to software libraries such as Theano, TensorFlow and Keras that let you define and train complex network structures. However, these libraries assume a fixed (static) graph structure, and are tailored for the GPU. I will introduce a radically different approach, in which the graphs are dynamic, and constructed from scratch for every training example. This makes programming of complex networks with structure that depend on the input very easy. I will introduce the DyNet neural networks package, that supports this dynamic graph creation, and which also works very well on the CPU. The talk assumes familiarity with neural network models, and will focus on how to implement them with DyNet.&lt;/p&gt;
</summary></entry><entry><title>Extend Docker using Python</title><link href="https://pyvideo.org/pycon-israel-2017/extend-docker-using-python.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Boaz Shuster</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/extend-docker-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker is the most popular platform to run Python applications within containers. Many companies are using this platform to either deploy micro-services or test the code changes before merging it to production. Docker has 3 extension points: Drivers, Plugins and user-facing API. I am going to focus on the latter (user-facing API) and by the end of the talk, you will learn Docker's REST API and know how to extend Docker capabilities using Python.&lt;/p&gt;
</summary><category term="docker"></category></entry><entry><title>Handling geo located data in real time using Python</title><link href="https://pyvideo.org/pycon-israel-2017/handling-geo-located-data-in-real-time-using-python.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Jonathan Schemoul</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/handling-geo-located-data-in-real-time-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we get geographic data from sensors, be it indoor positioning, GPS, or anything else, we need to handle it correctly. We (of course) have a lot of tools in Python to do so. What if you get a ton of this data coming continuously and have to display it, make real-time calculations, controls, reports and other operations ? Let's see one of the possible approaches to this problem using AsyncIO, MongoDB, a web app and Pandas reports, including how I implemented it for some clients (a live demo, if internet access permits it).&lt;/p&gt;
</summary></entry><entry><title>Hypothesis: Simpler Powerful Test Cases</title><link href="https://pyvideo.org/pycon-israel-2017/hypothesis-simpler-powerful-test-cases.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Eli Gur</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/hypothesis-simpler-powerful-test-cases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hypothesis is an advanced testing library for Python. It lets you write tests which are parametrized by a source of examples, and then generates simple and comprehensible examples that make your tests fail. This lets you find more bugs in your code with less work.&lt;/p&gt;
</summary></entry><entry><title>Jenkins as a Python execution platform</title><link href="https://pyvideo.org/pycon-israel-2017/jenkins-as-a-python-execution-platform.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Barak Korren</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/jenkins-as-a-python-execution-platform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jenkins is a very useful tool for building automation systems. Jenkins jobs typically get written as a mix of shell scripts and plug-in invocations, but as Python developers we prefer to do things with Python. In this presentation we will look into various tricks for implementing Jenkins job logic in Python starting with running simple scripts and going up to passing objects around and running stateful applications.&lt;/p&gt;
</summary></entry><entry><title>Let me sleep on it improving concurrency in unexpected ways</title><link href="https://pyvideo.org/pycon-israel-2017/let-me-sleep-on-it-improving-concurrency-in-unexpected-ways.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Nir Soffer</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/let-me-sleep-on-it-improving-concurrency-in-unexpected-ways.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contrary to the common belief, Python has real threads and even with the famous GIL, they can be used in useful ways. Vdsm is a heavily multi-threaded Python program, constantly juggling tens of threads waiting for blocking system calls. In this talk we will explore a real world thread synchronization problem taken from Vdsm's LVM cache module. We will demonstrate the problem using simple tests and show the unexpected solution.&lt;/p&gt;
</summary></entry><entry><title>Low Level Python a Deep dive into the python sources 2017</title><link href="https://pyvideo.org/pycon-israel-2017/low-level-python-a-deep-dive-into-the-python-sources-2017.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Yam Peleg</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/low-level-python-a-deep-dive-into-the-python-sources-2017.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've been told to stop writing objects. We've been told to write more objects. But what exactly do we really write when we write something? In this talk, we cover the Python datamodels sources and how do they interact?, when to begin writing objects, what methods to start with that leverage the Python data models, and how to use the &amp;quot;magic&amp;quot; methods of Python. This talk assumes you know all of the basic builtin data structures of Python and have familiarity with operators. Which should we be doing? When? How?&lt;/p&gt;
</summary></entry><entry><title>Luigi - Big data plumbing library</title><link href="https://pyvideo.org/pycon-israel-2017/luigi-big-data-plumbing-library.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Boaz Menuhin</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/luigi-big-data-plumbing-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Luigi is workflow orchestration framework library developed by Spotify and being used extensively at Oracle. In this talk I will cover key design aspects of Luigi, the way we use it and what makes it so special&lt;/p&gt;
</summary><category term="luigi"></category></entry><entry><title>Meet Lago isolated testing environment</title><link href="https://pyvideo.org/pycon-israel-2017/meet-lago-isolated-testing-environment.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Gal Ben Haim</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/meet-lago-isolated-testing-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will introduce a powerful Python open source project called Lago, which allows you to create fully isolated virtualized environment and interact with it using a Python API. Based on a real-life example of testing a complex project, we will go over the cons of using legacy methods for running system tests, and we will show how Lago can be used to overcome them while introducing additional cool features, such as running the whole testing suite on your laptop!&lt;/p&gt;
</summary><category term="lago"></category></entry><entry><title>mypy Python's gradual typing implementation</title><link href="https://pyvideo.org/pycon-israel-2017/mypy-pythons-gradual-typing-implementation.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Itzhak Kasovitch</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/mypy-pythons-gradual-typing-implementation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a dynamic language. On small code bases this property is helpful and might increase productivity. On medium to large code bases this might be an impediment. In this session I will introduce mypy, which introduces type hints into Python in attempt to solve that impediment.&lt;/p&gt;
</summary><category term="mypy"></category></entry><entry><title>Process Monitoring on Sequences of System Call Vectors</title><link href="https://pyvideo.org/pycon-israel-2017/process-monitoring-on-sequences-of-system-call-vectors.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Michael Dymshtis</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/process-monitoring-on-sequences-of-system-call-vectors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We introduce a methodology for efficient monitoring of processes running on hosts in a corporate network. The methodology is based on collecting streams of system calls produced by all or selected processes on the hosts, and sending them over the network to an analytics server, where machine learning algorithms based on LSTM (Long-Short Term Memory) are used to identify changes in process behavior, due to malicious activity, hardware failures, or software errors. System call streams are enormous, and an efficient representation with performance guarantees independent of the level of activity on the host must be used. Some earlier work was based on processing of sequential streams of system calls, which does not scale well. Other approaches rely on computing frequencies of short sequences (n-grams) of system calls over a fixed time window. However, in this case information about temporal dynamics of the process is lost. In our methodology, vectors of counts of system calls are collected and sent for every monitored process at fixed short time intervals, e.g., 1 second. However, the analytics server processes sequences of system call vectors over longer time spans. This way, the performance guarantee is maintained through sending fixed amount of data per time unit independently of the activity on the host, but the temporal behavior is at least partially preserved. By varying the vector and sequence time durations, a balance between network and CPU load, on one hand, and monitoring accuracy, on the other hand, can be adjusted depending on performance and accuracy requirements.&lt;/p&gt;
</summary></entry><entry><title>Recognizing Traffic Lights With Deep Learning</title><link href="https://pyvideo.org/pycon-israel-2017/recognizing-traffic-lights-with-deep-learning.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>David Brailovsky</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/recognizing-traffic-lights-with-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will present the solution used to win 1st place in Nexar’s traffic light recognition challenge. We will go over the process of how to start with a basic deep learning model and improve it over time. The talk will focus on the ideas and process more than the technical implementation. No need for strong background in deep learning to understand all the concepts in this talk.&lt;/p&gt;
</summary></entry><entry><title>Structured Predictions an historical overview</title><link href="https://pyvideo.org/pycon-israel-2017/structured-predictions-an-historical-overview.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Shai Harel</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/structured-predictions-an-historical-overview.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session we will cover the history of semantic image segmentation, from old color based method, to edge based/ super pixel method, and finally go trough the recent revolutions in this area such as CRF and GAN. No prior knowledge is required, and this is more fun and light talk that passes the intuition behind the equations.&lt;/p&gt;
</summary></entry><entry><title>The magic of SQLAlchemy</title><link href="https://pyvideo.org/pycon-israel-2017/the-magic-of-sqlalchemy.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Moran Cohen</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/the-magic-of-sqlalchemy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many languages have a way to abstract the database nicely in code - ORMs are everywhere. But SQLAlchemy is special, it's not only an ORM ( like the one Django has ), It's also &amp;quot;The Python SQL Toolkit&amp;quot; where you can replace complicated SQL queries with simple, clean and safe Python.&lt;/p&gt;
</summary><category term="sqlalchemy"></category></entry><entry><title>Unit testing in the real world with mock</title><link href="https://pyvideo.org/pycon-israel-2017/unit-testing-in-the-real-world-with-mock.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Chen Rotem Levy</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/unit-testing-in-the-real-world-with-mock.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody agree that unit-tests are important, however learning how to write unit-tests is hard. Most of the instructional material you might try to read will use as its' examples some well behaved functions with known input and deterministic outputs. Code that is trivial to write tests around. However the real world isn't so well behaved. It has legacy code, it inspects the world, has side effects, calls external services and might have random components. Writing unit-tests for such a code is anything but trivial. One technique to allow writing unit-tests around such real world code is to replace all that ugliness with mocks, and the standard unittest.mock library is a grate tool for that. The abilities of this library surprised and delighted me in more then one occasion as I straggled to raise my code coverage. However, in my experience both the concept of mocking and the unittest.mock library are not widely known. I hope to help change that in a small way.&lt;/p&gt;
</summary><category term="unittest.mock"></category></entry><entry><title>Why Python's the best language for AI (and how to make it even better) -</title><link href="https://pyvideo.org/pycon-israel-2017/why-pythons-the-best-language-for-ai-and-how-to-make-it-even-better-.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Matthew Honniba</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/why-pythons-the-best-language-for-ai-and-how-to-make-it-even-better-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last few years, Python has cemented its lead as the primary development language for machine learning and AI, among both researchers and engineers. Python is dominating this development niche because manual memory management is very important for numeric computing, and CPython exposes an efficient and practical API for low-level extensions. The rest of the Python ecosystem also relies on low-level extensions --- Python would be of little use for web programming without fast libraries for JSON and XML parsing, image manipulation and database connectivity. However, most Python users have little love for these native extensions that they rely on. Native extensions impose some inconveniences. More things can go wrong, and they're necessarily exceptional and less dynamic.In this talk, I'll argue that the Python community ought to accept native extensions as a necessary good, instead of a necessary evil. The language would get stronger at its strengths by ending its ambivalence about native extensions, and investing in better tooling. Individual developers would benefit from getting comfortable dropping down into Cython, and understanding how to read and build native libraries. This applies especially in the growing field of machine learning and artificial intelligence --- the biggest growth area in software development today.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>5 Simple Steps to Create Meaningful Features from Clickstream Data</title><link href="https://pyvideo.org/pycon-israel-2017/5-simple-steps-to-create-meaningful-features-from-clickstream-data.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Shir Meir Lador</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/5-simple-steps-to-create-meaningful-features-from-clickstream-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Predicting client financial behaviour is usually done by financial data sources - such as client financial history, bank and credit statements, etc. In this talk we will review a different type of data source for risk assessment - features engineered from clickstream data gathered by Mixpanel. We will discuss what kind of features can be generated from clickstream data and how to generate these features using Pandas, what is the benefit of these unconventional features, what are the different correlations of the features with user financial behaviour and how can you apply clickstream data analysis to your problems in general.&lt;/p&gt;
</summary></entry><entry><title>All package managers suck, conda sucks less</title><link href="https://pyvideo.org/pycon-israel-2017/all-package-managers-suck-conda-sucks-less.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Miki Tebeka</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/all-package-managers-suck-conda-sucks-less.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll discuss how to create stable environment using &lt;a class="reference external" href="https://conda.io"&gt;https://conda.io&lt;/a&gt; both for development and production.&lt;/p&gt;
</summary></entry><entry><title>Apache beam and google cloud dataflow</title><link href="https://pyvideo.org/pycon-israel-2017/apache-beam-and-google-cloud-dataflow.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Moshe Shamy</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/apache-beam-and-google-cloud-dataflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apache beam is an open source framework that try to create uniform API for all data processing frameworks like spark, flume and storm. so you can write your code and run it on different platform without changing it. Google cloud data flow is a service that allows you to process your data with apache beam without deploying any server. Recently google has contribute python support for apache beam.​In this lecture we will explore apache beam model and run en example on Google cloud dataflow with python API&lt;/p&gt;
</summary></entry><entry><title>Building Serverless applications with Python</title><link href="https://pyvideo.org/pycon-israel-2017/building-serverless-applications-with-python.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/building-serverless-applications-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless applications in Python sounds, strange isn’t? In this talk I’ll explain how to build not only crop images or select data from DynamoDB, but build real application, what kind of troubles are we should expect, how to make decision is your task fit into serverless architecture in Python or may be you should use, general approach. How fast serverless applications written in Python, and more important how to scale it.&lt;/p&gt;
</summary><category term="serverless"></category></entry><entry><title>CFFI, Ctypes, Cython The Good, The Bad and The Ugly</title><link href="https://pyvideo.org/pycon-israel-2017/cffi-ctypes-cython-the-good-the-bad-and-the-ugly.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Matti Picus</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/cffi-ctypes-cython-the-good-the-bad-and-the-ugly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will demonstrate use of ctypes, cffi, and cython to wrap c code, including a performance benchmark&lt;/p&gt;
</summary></entry><entry><title>CPython, Grumpy, PyPy - When, How, Why</title><link href="https://pyvideo.org/pycon-israel-2017/cpython-grumpy-pypy-when-how-why.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Itay Weiss</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/cpython-grumpy-pypy-when-how-why.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will talk about the differences between the three implementations. Focusing on use cases in which each of them should be used and how each environment tackles performance issues (GIL, just-in-time and Goroutines). I will also evaluate performance impact in real life scenario.&lt;/p&gt;
</summary><category term="cpython"></category><category term="grumpy"></category><category term="pypy"></category></entry><entry><title>Decorators for Data Science</title><link href="https://pyvideo.org/pycon-israel-2017/decorators-for-data-science.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Uri Goren</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/decorators-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aspect oriented programming is a programming paradigm for dealing with cross-cutting concerns. Python enables AOP by using the built-in decorator feature. We will demonstrate how to use these concepts within a data science settings. We will cover: timing, caching, ssh tunneling, and interactive jupyter plotting&lt;/p&gt;
</summary></entry><entry><title>Django Channels Teaching a mature framework new tricks</title><link href="https://pyvideo.org/pycon-israel-2017/django-channels-teaching-a-mature-framework-new-tricks.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Ronnie Sheer</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/django-channels-teaching-a-mature-framework-new-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This example-heavy talk, might give you everything you need to start having fun with Django Channels. Channels allow us to add features such as real time communication to our apps; without giving up the framework we love. Now we can use websockets and stay pythonic. Perhaps more importantly they provide opportunities for fun. We may answer client’s demands for features such as messaging while maintaining a consistent stack. Further, no longer do we have to consider expensive SASS style solutions, which lack flexibility. From realtime-chat to collaborative drawing canvases, Ronnie demonstrates how simple and playful you may find channels. Finally, we will talk about the nut’s and bolts that make up this powerful tool.&lt;/p&gt;
</summary><category term="django channels"></category></entry><entry><title>Dream in Code</title><link href="https://pyvideo.org/pycon-israel-2017/dream-in-code.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Dan Gittik</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/dream-in-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Sapir-Whorf hypothesis states that language limits cognition; that the words we use influence the thoughts we have. This happens in code, too: programmers using different programming languages solve problems differently. Can we use this to our advantage? Let's unit test C code with pytest. Let's do autocompletion with a single script that's both Python and Bash. Let's write a Django server and extend its working API in its admin interface. Let's talk about Whorfian Refactoring.&lt;/p&gt;
</summary></entry><entry><title>Exploring and Analyzing Open Satellite Imagery data</title><link href="https://pyvideo.org/pycon-israel-2017/exploring-and-analyzing-open-satellite-imagery-data.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Yaron Michl</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/exploring-and-analyzing-open-satellite-imagery-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In recent years Earth imaging satellites have shrink drastically in cost and size, it is now possible to obtain open satellite data on a weekly basis in high Spatial resolution. This talk will cover working with satellite data in python in serval tool rasterio that is based on the Geospatial Data Abstraction Library (GDAL) and NumPy and combine it with xarray a python model to working with Multidimensional Arrays. we will show example that make use of the Unique information in Earth imaging satellites like the Ability to get information about vegetation health by using data in wavelengths the human eye can't see. This talk is intended for novice and intermediate python developers who interested in using satellite imagery&lt;/p&gt;
</summary></entry><entry><title>From plotting to chart porn - Creating slick charts with Matplotlib</title><link href="https://pyvideo.org/pycon-israel-2017/from-plotting-to-chart-porn-creating-slick-charts-with-matplotlib.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Tamir Lousky</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/from-plotting-to-chart-porn-creating-slick-charts-with-matplotlib.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is gaining speed as a leading data science programming language, alongside R. An essential part of data science is data visualization, something easily achieved with popular plotting library Matplotlib. While matplotlib is powerful and versatile, R has one advantage with respect to plotting: ggplot2, which easily generates beautiful charts out of the box. In this talk we will demonstrate how to painlessly generate eye candy charts with Matplotlib, using styles, color maps, full chart customization and clever subplotting with figures and axis objects. We'll also briefly discuss basic and advanced interactivity for Jupyter notebooks and beyond.&lt;/p&gt;
</summary></entry><entry><title>Gotchas of Pandas</title><link href="https://pyvideo.org/pycon-israel-2017/gotchas-of-pandas.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Prabhant Singh</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/gotchas-of-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is one of the first libraries someone deals with while learning data science with python. While being one of the best libraries for data analysis and data cleaning, pandas is full of bugs and gotchas. This talk will look inside those gotchas with detailed explanations and will provide the solutions for some of them. this talk will cover the common and rare pandas gotchas like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NaN problems Errors due to Numpy and core python libraries&lt;/li&gt;
&lt;li&gt;Reindexing gotchas&lt;/li&gt;
&lt;li&gt;Boolean Gotchas&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="pandas"></category></entry><entry><title>Lessons Learned Maintaining the oVirt Python SDK</title><link href="https://pyvideo.org/pycon-israel-2017/lessons-learned-maintaining-the-ovirt-python-sdk.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Juan Hernández</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/lessons-learned-maintaining-the-ovirt-python-sdk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will explain the lessons that we learned while creating and maintaining the oVirt Python SDK, and specially how we were able to multiply the performance by 20, doing some rather radical changes to its architecture.&lt;/p&gt;
&lt;p&gt;oVirt is an open source virtualzation management platform. The oVirt Python SDK is a library that simplifies the usage of its API for Python developers. It is intended to remove from the Python developer the burden of handling XML and HTTP, while granting access to all the functionality of the oVirt API. A key aspect of the Python SDK is that it is automatically generated from the specification of the API. It has always been like that, since its very inception.&lt;/p&gt;
&lt;p&gt;In version 4 of oVirt a new version of the API was introduced, together with a much more strong specification. That gave us the opportunity to re-architect the Python SDK, with the following goals in mind:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Make sure that all the API functionality can be used, now and in the future, automatically generating Python code that can be kept backwards compatible.&lt;/li&gt;
&lt;li&gt;Drastically improve the performance of the Python XML parsing and rendering code, specially for large data sets.&lt;/li&gt;
&lt;li&gt;Enable asynchronous HTTP, and pipe-lining of HTTP requests. This is of utmost importance for environments with high latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the talk we will explain why these are important goals for us, what were the challenges with the architecture of version 3 of the SDK, and we will show you the techniques, tools and, yes, the code, that we used to make version 4 of the SDK 20 times faster.&lt;/p&gt;
</summary><category term="ovirt"></category></entry><entry><title>Population Anomaly Detection with PyTorch</title><link href="https://pyvideo.org/pycon-israel-2017/population-anomaly-detection-with-pytorch.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>David Tolpin</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/population-anomaly-detection-with-pytorch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We introduce a scheme for population anomaly detection based on gaussianization through an adversarial autoencoder. This scheme is applicable to detection of 'soft' anomalies in arbitrarily distributed highly-dimensional data. A soft, or population, anomaly is characterized by a shift in the distribution of the data set, where certain elements appear with higher or lower probability than anticipated. Such anomalies must be detected by considering a large sample set rather than a single sample. Applications include, but not limited to, payment fraud trends, data exfiltration, and system security and health monitoring. We evaluate the scheme on credit card payment and DNS data exfiltration data and obtain both quantitative results and qualitative insights. We discuss our PyTorch implementation of deep gaussianization, and review implementation details, pitfalls, and performance.&lt;/p&gt;
</summary><category term="pytorch"></category></entry><entry><title>Practical usage of asyncio</title><link href="https://pyvideo.org/pycon-israel-2017/practical-usage-of-asyncio.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Sim Zacks</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/practical-usage-of-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python 3.4, asyncio was introduced to the standard library. This module gives us the ability to build concurrency into our applications without threading or multiprocessing. During this talk, I will show examples of asyncio and discuss the how, when and why of its usage.&lt;/p&gt;
</summary><category term="asincio"></category></entry><entry><title>Programming 'brainfuck' and virtual machines</title><link href="https://pyvideo.org/pycon-israel-2017/programming-brainfuck-and-virtual-machines.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Aur Saraf</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/programming-brainfuck-and-virtual-machines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to the Brainfuck esoteric programming language, an &lt;cite&gt;ASCII2bf&lt;/cite&gt; program, a &lt;cite&gt;bf&lt;/cite&gt; interpreter in &lt;cite&gt;bf&lt;/cite&gt;, and finally - we will live code a &lt;cite&gt;bf&lt;/cite&gt; interpreter in Python (which is probably the simplest interesting example of a virtual machine)&lt;/p&gt;
</summary><category term="brainfuck"></category></entry><entry><title>Putting Things on the Internet</title><link href="https://pyvideo.org/pycon-israel-2017/putting-things-on-the-internet.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Yuval Adam</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/putting-things-on-the-internet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a world where simply connecting random household appliances to the Internet is considered 'innovation', a counter-proposal must be presented. In this talk we explore the free-as-in-freedom technologies that enable developers to build real-life applications based on physical devices. Buzzwords will be harmed during this talk.&lt;/p&gt;
</summary><category term="internet of things"></category></entry><entry><title>Python Peculiarities</title><link href="https://pyvideo.org/pycon-israel-2017/python-peculiarities.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Noam Tenne</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/python-peculiarities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's have fun! In this session we'll look at cases of strange core and library behavior, explore weirdness of Python, discuss the dos and don'ts of cool hacks and learn some neat new tricks!&lt;/p&gt;
</summary></entry><entry><title>Real Time Sensor Anomaly Detection with Sci Kit Learn and the Azure Stack</title><link href="https://pyvideo.org/pycon-israel-2017/real-time-sensor-anomaly-detection-with-sci-kit-learn-and-the-azure-stack.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Ari Bornstein</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/real-time-sensor-anomaly-detection-with-sci-kit-learn-and-the-azure-stack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The introduction of IoT and Big Data has disrupted the multi-billion dollar municipal water management industry. However, sensors sometimes malfunction and differentiating between sensor error and expected anomalous readings from events such as storms and floods can be extremely difficult. Traditionally to account for irregularities, municipalities hire analysts to manually sift through sensor data and modify values believed to be caused by sensor error, an extremely costly and error prone process. Recently the Microsoft Partner Catalyst team partnered with the industry to build an anomaly detection model to differentiate between irregular sensor readings and sensor error, and put the model into production using Sci-Kit Learn as well as Azure Event Hubs, Stream Analytics and PowerBI. In this session participants will receive a high level overview of the the sensor error detection problem, and learn how to build a production visualization pipeline for classification models in near real time for their own use.&lt;/p&gt;
</summary></entry><entry><title>Representation</title><link href="https://pyvideo.org/pycon-israel-2017/representation.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Jessica McKellar</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/representation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jessica McKellar is an entrepreneur, software engineer, and open source developer from San Francisco. She is a former Director for the Python Software Foundation, PyCon North America's Diversity Outreach Chair. For her outreach efforts in the Python community, she was awarded the O'Reilly Open Source Award in 2013.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Testing with PyTest</title><link href="https://pyvideo.org/pycon-israel-2017/testing-with-pytest.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Gabor Szabo</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/testing-with-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write automated tests is one of the best ways to ensure high quality code and a peace of mind for both developer and her managers. In this session we'll learn how to write tests using pytest. We will start by introducing pytest and we will see how to use it to write unittest for brand new code. TDD style. Then we'll take a look at the case where you already have a lot of code without tests and consider how can we approach that problem. We'll see how to write integration tests and how to mock the rest of the world.&lt;/p&gt;
</summary></entry><entry><title>Text Parsing the Case for Monads</title><link href="https://pyvideo.org/pycon-israel-2017/text-parsing-the-case-for-monads.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Yoav Luft</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/text-parsing-the-case-for-monads.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyparsing is a mature, small and useful text parsing library that let's you define a grammar easily and succinctly. Amazingly, pyparsing is using a unique design pattern called &amp;quot;Combinators&amp;quot; which is leveraged even further by monadic syntax from functional programming, while feeling Pythonic and clean. We will study this unique approach and uncover its secrets.&lt;/p&gt;
</summary><category term="pyparsing"></category></entry><entry><title>The Fun of Reinvention</title><link href="https://pyvideo.org/pycon-israel-2017/the-fun-of-reinvention.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/the-fun-of-reinvention.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the early days of Python, the &amp;quot;F&amp;quot; may have been a key to its early success.  It was just the sort of magic power that made hard problems easier and impossible problems possible.  It was what made you want to program in your spare time.  It made management ask probing questions such as &amp;quot;who gave you permission to do this?&amp;quot;  No, the &amp;quot;F&amp;quot; was an unstoppable force for good.  As Python has matured, discussions of the &amp;quot;F&amp;quot; have often given way to more serious topics such as Unicode, packaging, and backwards compatibility.   However, it never really went away.  In fact, it's been sitting their in plain sight all along--growing in power.  In this talk,  I'll give a forward-looking discussion of Python's future and exploiting the power of the &amp;quot;F&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>The State Of Python In The Serverless World</title><link href="https://pyvideo.org/pycon-israel-2017/the-state-of-python-in-the-serverless-world.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Benny Bauer</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/the-state-of-python-in-the-serverless-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A year after my &amp;quot;Python in the Serverless Era&amp;quot; talk at PyCon IL 2016, it's time to revisit Python's role in the Serverless ecosystem. We’ll review new frameworks and use cases involving Python in this vibrant and emerging technology.&lt;/p&gt;
</summary></entry><entry><title>Time Series Analysis - When Good Enough is Good Enough</title><link href="https://pyvideo.org/pycon-israel-2017/time-series-analysis-when-good-enough-is-good-enough.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Boris Gorelik</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/time-series-analysis-when-good-enough-is-good-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anomaly detection and time series forecasting are valuable in monitoring the financial and technical health of an organization. Proper modeling of time series requires accounting for periodic fluctuation; malicious users; data irregularity, saturation or scarcity; sudden peaks and drops. To account for these parameters, the modeler needs to select the proper model family, optimize the model parameters, validate the assumptions, and refine the process as needed. The task is even more complicated when one needs to build a self-service application that supports &amp;quot;slicing and dicing&amp;quot; any metric to its underlying components. In such a case, where the number of possible models can be counted by thousands, manual tuning is impossible. In this lecture, I show how a series of assumptions and simplifications allowed completing the modeling task in one week, using open source Python packages. I will review all the assumptions, their implications, and limitations. I will also show which modeling approach worked, and which didn't work in case of Automattic, the company behind WordPress.com, Jetpack and other projects, that serves more than 180,000,000 unique visitors a month in the US alone. I hope that this information will be useful in many data-driven organizations.&lt;/p&gt;
</summary></entry><entry><title>Unit tests and TDD does NOT have to be boring</title><link href="https://pyvideo.org/pycon-israel-2017/unit-tests-and-tdd-does-not-have-to-be-boring.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Daniel (Yona) Simons</name></author><id>tag:pyvideo.org,2017-06-12:pycon-israel-2017/unit-tests-and-tdd-does-not-have-to-be-boring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When reviewing your Python applications for quality, we are constantly pushed to improve our ‘code coverage’ and improve our unit test quality, since so often we are caught out during upgrades and re factoring, by a lack of broad regression tests. As an experienced programmer who was a Python newby, the whole unit test backlog for existing code in my new job was terrifying, so I needed to do something different... Here are practical examples of using Python for web programming where writing unit tests as part of the initial development processes, using Test Driven Design (TDD) methodologies, not only creates reliable regression tests for future code quality and maintenance, but also speeds up the development time, and gives a clearer path to deployment. The focus and examples are on web development, but the lessons and ideas are good for other development areas.&lt;/p&gt;
</summary><category term="test driven design"></category></entry></feed>