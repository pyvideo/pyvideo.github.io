<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_michael-bayer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-03-10T00:00:00+00:00</updated><entry><title>PyCon 2010:Advanced SQL Alchemy</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010-advanced-sql-alchemy.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Michael Bayer</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010-advanced-sql-alchemy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced SQLAlchemy&lt;/p&gt;
&lt;p&gt;Presented by Michael Bayer&lt;/p&gt;
&lt;p&gt;SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the
full power of SQL while remaining easy to use for the basics, and is
flexible enough to work with existing database schemas as well as fresh
designs. SQLAlchemy is used in production by leading Python web
frameworks Pylons and TurboGears as well as many other web and non-web
developers.&lt;/p&gt;
&lt;p&gt;This tutorial discusses current data mapping techniques, advanced Query
techniques, Session/transaction usage, and maximizing schema usage with
SQLAlchemy's event model.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Python experience: intermediate. You should already have some hands-on
experience with Python and be comfortable reading modern Python code.&lt;/p&gt;
&lt;p&gt;SQL experience: intermediate. We will use subselects and outer joins as
part of the SQL layer.&lt;/p&gt;
&lt;p&gt;ORM experience: prior experience with SQLAlchemy is recommended.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Declarative Mapping&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initial configuration&lt;/li&gt;
&lt;li&gt;Basic mapping&lt;/li&gt;
&lt;li&gt;Building a many-to-many relation&lt;/li&gt;
&lt;li&gt;Using late-evaluated configuration arguments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced queries&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Selecting objects, selecting columns&lt;/li&gt;
&lt;li&gt;Thinking generatively&lt;/li&gt;
&lt;li&gt;Joining like a Pro&lt;/li&gt;
&lt;li&gt;Power Eager Loading&lt;/li&gt;
&lt;li&gt;Selecting from Anything&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Session Techniques&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Transaction lifecycle&lt;/li&gt;
&lt;li&gt;Scoping objects in and out of caches using merge()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inheritance Mapping&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Single Table Inheritance&lt;/li&gt;
&lt;li&gt;Joined Table Inheritance&lt;/li&gt;
&lt;li&gt;High Level/Low Level Joined Queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extending SQL&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creating new SQL constructs&lt;/li&gt;
&lt;li&gt;Creating new DDL constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extending the ORM&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using SessionExtension to populate denormalized views&lt;/li&gt;
&lt;li&gt;Subclassing Query to Suit Your Needs&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="advanced"></category><category term="pycon"></category><category term="pycon2010"></category><category term="sqlalchemy"></category><category term="tutorial"></category></entry><entry><title>Hand Coded Applications with SQLAlchemy</title><link href="https://pyvideo.org/pycon-us-2012/hand-coded-applications-with-sqlalchemy.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Michael Bayer</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/hand-coded-applications-with-sqlalchemy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SQLAlchemy is the object relational mapper and database toolkit for
Python, first introduced in 2005. In this talk I'll describe why
SQLAlchemy has always been called a &amp;quot;toolkit&amp;quot;, detailing the software
construction mindset for which SQLAlchemy was designed to be used with -
what I am currently referring to as the &amp;quot;Hand Coded&amp;quot; approach.&lt;/p&gt;
</summary></entry></feed>