<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_craig-de-stigter.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-03T00:00:00+00:00</updated><entry><title>How I migrated a huge OSS project to use pytest</title><link href="https://pyvideo.org/pycon-au-2019/how-i-migrated-a-huge-oss-project-to-use-pytest.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Craig de Stigter</name></author><id>tag:pyvideo.org,2019-08-03:pycon-au-2019/how-i-migrated-a-huge-oss-project-to-use-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over a couple of months in 2018 I developed a script for refactoring GDAL's ancient and arcane test suite to use Pytest. The final pull request was over 118,000 lines. This talk covers how I did it and what I learned.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/how-i-migrated-a-huge-oss-project-to-use-pytest"&gt;https://2019.pycon-au.org/talks/how-i-migrated-a-huge-oss-project-to-use-pytest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 14:50:00 2019 at C3.3&lt;/p&gt;
</summary></entry><entry><title>Intro to Metaclasses</title><link href="https://pyvideo.org/kiwi-pycon-2013/intro-to-metaclasses.html" rel="alternate"></link><published>2013-09-16T00:00:00+00:00</published><updated>2013-09-16T00:00:00+00:00</updated><author><name>Craig de Stigter</name></author><id>tag:pyvideo.org,2013-09-16:kiwi-pycon-2013/intro-to-metaclasses.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Metaprogramming is a valuable technique for putting complexity where it
belongs: behind a clean, friendly API. This talk goes over the basics of
metaclasses and introspection in Python, and covers how and when you
should use them to make your code more approachable.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python's Metaclasses are an &amp;quot;advanced&amp;quot; technique, but once you get
started they're surprisingly approachable.&lt;/p&gt;
&lt;p&gt;Starting with the basics, we'll:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;figure out what a metaclass does&lt;/li&gt;
&lt;li&gt;point out some existing metaclasses you might already have used&lt;/li&gt;
&lt;li&gt;see where you might use one in your own code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll compare use of a metaclass with some alternatives that don't use
metaclasses, to better understand why you'd want to use them.&lt;/p&gt;
&lt;p&gt;Then we'll take a look at a couple of use-cases where using a metaclass
helps us achieve a much more friendly and intuitive API than we
otherwise could.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/craig-de-stigter-intro-to-metaclasses"&gt;https://speakerdeck.com/nzpug/craig-de-stigter-intro-to-metaclasses&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>