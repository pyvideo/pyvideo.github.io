<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_daniel-lindsley.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-03-16T00:00:00+00:00</updated><entry><title>API Design Tips</title><link href="https://pyvideo.org/djangocon-us-2012/api-design-tips.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-us-2012/api-design-tips.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The focus of this talk will be on some pragmatic tips on how to design
programmatic (non-web-based) APIs for use by other developers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're a developer of any sort (Django, Python, Javascript, etc),
chances are that someone, at some point, will have to take the code
you've written &amp;amp; use it in a different context. This is even more
amplified if you work on OSS, where people &lt;em&gt;will&lt;/em&gt; use it in ways you've
never dreamed about.&lt;/p&gt;
&lt;p&gt;This talk is a reflection on my experience building libraries for other
people's consumption &amp;amp; thoughts on how to design/make (non-HTTP) APIs in
a way that will make others love you (or at least not hunt you down &amp;amp;
strangle you).&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category></entry><entry><title>Avoiding The Search Hall Of Shame</title><link href="https://pyvideo.org/pycon-ca-2012/avoiding-the-search-hall-of-shame.html" rel="alternate"></link><published>2012-11-10T00:00:00+00:00</published><updated>2012-11-10T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2012-11-10:pycon-ca-2012/avoiding-the-search-hall-of-shame.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Most pieces of modern software (web, desktop or otherwise) include that
innocuous little text box with inviting word &amp;quot;Search&amp;quot; nearby. But behind
it lies a torrid world of bad ideas, worse ideas &amp;amp; ideas no computer
should be made to suffer. If you want to keep your good name &amp;amp; stay out
of the hall of shame, this talk will give you a grounding on how to make
the search in your software better.&lt;/p&gt;
</summary></entry><entry><title>Building A Python-Based Search Engine</title><link href="https://pyvideo.org/pycon-us-2012/building-a-python-based-search-engine.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2012-03-11:pycon-us-2012/building-a-python-based-search-engine.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Search is an increasingly common request in all types of applications as
the amount of data all of us deal with continues to grow. The
technology/architecture behind search engines is wildly different from
what many developers expect. This talk will give a solid grounding in
the fundamentals of providing search using Python to flesh out these
concepts in a simple library.&lt;/p&gt;
</summary></entry><entry><title>RESTful APIs With Tastypie</title><link href="https://pyvideo.org/pycon-us-2012/restful-apis-with-tastypie.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/restful-apis-with-tastypie.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Providing full-featured REST APIs is an increasingly popular request.
Tastypie allows you to easily implement a customizable REST API for your
Python or Django applications.&lt;/p&gt;
</summary></entry><entry><title>How (Not) To Build An OSS Community</title><link href="https://pyvideo.org/pycon-us-2013/how-not-to-build-an-oss-community.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/how-not-to-build-an-oss-community.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A rough &amp;amp; tumble guide, based on the pains of experience, of what to
do/not do when trying to build an OSS community.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>