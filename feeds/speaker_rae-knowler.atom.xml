<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_rae-knowler.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-03T00:00:00+00:00</updated><entry><title>Unsafe at Any Speed</title><link href="https://pyvideo.org/pycon-sk-2018/unsafe-at-any-speed.html" rel="alternate"></link><published>2018-03-09T00:00:00+00:00</published><updated>2018-03-09T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2018-03-09:pycon-sk-2018/unsafe-at-any-speed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The default settings of some libraries and tools are so useless, or even
dangerous, that they should never be used. While they give the
impression of being easy to use or performant, they actually represent
traps for the unwary user. I will show the concrete problems caused by
such defaults, and explore how to create tools with &lt;em&gt;good&lt;/em&gt; defaults.&lt;/p&gt;
</summary><category term="PyCon SK"></category><category term="Python"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/pycon-us-2018/python-locales-and-writing-systems.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here’s some of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary><category term="python3"></category><category term="unicode"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/swiss-python-summit-2017/python-locales-and-writing-systems.html" rel="alternate"></link><published>2017-02-17T00:00:00+00:00</published><updated>2017-02-17T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2017-02-17:swiss-python-summit-2017/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here's some of the worst ones and how to handle them correctly.&lt;/p&gt;
&lt;p&gt;Talk recorded at the Swiss Python Summit on February 17th, 2017.&lt;/p&gt;
&lt;p&gt;Licensed as Creative Commons Attribution 4.0 International&lt;/p&gt;
</summary></entry><entry><title>Keynote : Unsafe at Any Speed</title><link href="https://pyvideo.org/pycon-uk-2017/keynote-unsafe-at-any-speed.html" rel="alternate"></link><published>2017-10-26T09:30:00+01:00</published><updated>2017-10-26T09:30:00+01:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2017-10-26:pycon-uk-2017/keynote-unsafe-at-any-speed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Apologies for the occasional mumbled speech over this video, a mic was accidentally left live next to the mixer for part of Thursday, it's mostly not too intrusive&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The default settings of some libraries and tools are so useless, or even dangerous, that they should never be used. While they give the impression of being easy to use or performant, they actually represent traps for the unwary user. I will show the concrete problems caused by these defaults, and the correct way to proceed with Python in each case.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Diversity Panel: experience and discussion from all over the world</title><link href="https://pyvideo.org/pycon-italia-2017/diversity-panel-experience-and-discussion-from-all-over-the-world.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Alicia Carr</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/diversity-panel-experience-and-discussion-from-all-over-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A discussion table about Diversity in all its hues with organizers and
experts from all over the world.&lt;/p&gt;
</summary><category term="diversity"></category><category term="panel"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/pycon-italia-2017/python-locales-and-writing-systems.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in
Python, but that by no means fixes everything. Different locales and
writing systems have unique behaviours that can trip you up. Here’s some
of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary></entry><entry><title>Hypothesis: Property­-based testing for Python</title><link href="https://pyvideo.org/pycon-cz-2018/hypothesis-property-based-testing-for-python.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/hypothesis-property-based-testing-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all know we should be writing tests, but coming up with tests for every edge case is hard work and you will inevitably miss some. Tell Hypothesis what kind of data your tests need and let it explore that space. When it finds a bug, it finds the simplest case where your code fails.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you how to use Hypothesis in your projects to find more bugs than you would imagine.&lt;/p&gt;
</summary><category term="hypothesis"></category><category term="test"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/pycon-uk-2016/python-locales-and-writing-systems.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rae Knowler&lt;/p&gt;
&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here's some of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary></entry><entry><title>randomised testing for Django</title><link href="https://pyvideo.org/djangocon-europe-2015/rae-knowler-hypothesis-randomised-testing-for-at.html" rel="alternate"></link><published>2015-07-22T00:00:00+00:00</published><updated>2015-07-22T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2015-07-22:djangocon-europe-2015/rae-knowler-hypothesis-randomised-testing-for-at.html</id><summary type="html"></summary></entry></feed>