<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_robert-collins.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-11T00:00:00+00:00</updated><entry><title>Rust for Pythonistas</title><link href="https://pyvideo.org/kiwi-pycon-2016/rust-for-pythonistas.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/rust-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Robert Collins
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/136/"&gt;https://kiwi.pycon.org/schedule/presentation/136/&lt;/a&gt;
Rust is a new systems programming language iniated and sponsored by Mozilla thats making some waves - its the core for servo, Firefox's new parallel render engine, amongst other things. Find out how it is relevant to Pythonistas even in these modern mypy days, as well as interop between Rust and Python, and differences in programming style.&lt;/p&gt;
</summary></entry><entry><title>Testing and OpenStack</title><link href="https://pyvideo.org/kiwi-pycon-2013/testing-and-openstack.html" rel="alternate"></link><published>2013-09-12T00:00:00+00:00</published><updated>2013-09-12T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/testing-and-openstack.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;OpenStack's infra team coordinates running ~500 test runs a day, across
over 20 projects, most of which involve bringing up a test cloud... find
out how to reuse this infrastructure yourself, in your own cloud or
public clouds.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Something about OpenStack - sorry it's brief, I will flesh it out more
tomorrow, wanted to meet your deadline... and I'm happy to change the
talk to meet your interests - I'm still relatively new in the OpenStack
community, but driving a fascinating operations project (which isn't
really PyCon material, sadly) - but which gets me in contact with most
of the 'stackers projects. : More tomorrow ;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-collins-testing-and-openstack"&gt;https://speakerdeck.com/nzpug/robert-collins-testing-and-openstack&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Semver and Python with PBR</title><link href="https://pyvideo.org/kiwi-pycon-2014/semver-and-python-with-pbr.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/semver-and-python-with-pbr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Semantic versioning provides simple and robust rules for deciding on
version numbers, and PBR will soon be able to manage the entire process
of version number assignment in a project... and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Now used by all the OpenStack projects, PBR provides integration glue
for core features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;testing&lt;/li&gt;
&lt;li&gt;binary package creation for Linux distributors&lt;/li&gt;
&lt;li&gt;inclusion of files in tarballs&lt;/li&gt;
&lt;li&gt;changelog and authors file creation&lt;/li&gt;
&lt;li&gt;pypi summary creation&lt;/li&gt;
&lt;li&gt;version number creation&lt;/li&gt;
&lt;li&gt;sphinx doc stub creation and manpage enablement&lt;/li&gt;
&lt;li&gt;unified requirements management&lt;/li&gt;
&lt;li&gt;for both easy-install and pip with single-file control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most interesting part is the version number creation, since coming
up with the right version number can be a contentious discussion in some
projects. Semver provides simple and robust rules for deciding on
version numbers, and I'm in the middle of implementing automation for
these in PBR itself, with integration glue to export them in PEP-440,
dpkg and rpm format. The only dependencies PBR has are git + a recent
pip, so this should be useful for many attendees - and while PBR is an
OpenStack invention we're very interested in making sure its useful and
reliable for anyone that wants to use it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr"&gt;https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Functionalish programming in Python with effect</title><link href="https://pyvideo.org/kiwi-pycon-2015/functionalish-programming-in-python-with-effect.html" rel="alternate"></link><published>2015-09-05T00:00:00+00:00</published><updated>2015-09-05T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2015-09-05:kiwi-pycon-2015/functionalish-programming-in-python-with-effect.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;'everyone' knows that separating out IO and other side effects makes
code easier to unit test. What if there were a Python library that helps
do that systematically which you could use to make all your things
better? There is. Come and find out more.&lt;/p&gt;
&lt;p&gt;Chris Armstrong's Effect library is the library in question. I found
this while digging into all the varied implementations of monads for
Python (a generic concept that encapsulates the principle of IO and side
effects) - and I'd like to share its beauty with other folk. Effect
(&lt;a class="reference external" href="https://pypi.python.org/pypi/effect"&gt;https://pypi.python.org/pypi/effect&lt;/a&gt;) allows consistent separation of
side effect (e.g. IO or even just global state changes) from the code
that depends on those effects. Testing and reasoning about code becomes
easier. But it can often be hard to get into such a system. Allow me to
take you on a tour through how to change regular code into super
testable code using Effect.&lt;/p&gt;
</summary></entry><entry><title>Getting Started with OpenStack Development</title><link href="https://pyvideo.org/openstack-pycon-au-2013/getting-started-with-openstack-development.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2013-07-05:openstack-pycon-au-2013/getting-started-with-openstack-development.html</id><summary type="html"></summary></entry><entry><title>Testtools and Test Repository - the Python test frameworks OpenStack uses</title><link href="https://pyvideo.org/openstack-pycon-au-2013/testtools-and-test-repository-the-python-test-f.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2013-07-05:openstack-pycon-au-2013/testtools-and-test-repository-the-python-test-f.html</id><summary type="html"></summary></entry><entry><title>OpenStack MiniConf: Python Build Reasonableness and Semantic Versioning by Robert Collins (HP)</title><link href="https://pyvideo.org/pycon-au-2014/openstack-miniconf-python-build-reasonableness-a.html" rel="alternate"></link><published>2014-08-11T00:00:00+00:00</published><updated>2014-08-11T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2014-08-11:pycon-au-2014/openstack-miniconf-python-build-reasonableness-a.html</id><summary type="html"></summary></entry><entry><title>Adventures in pip land</title><link href="https://pyvideo.org/pycon-au-2015/adventures-in-pip-land.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/adventures-in-pip-land.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip has become an immensely popular tool for installing packages in
Python, so much so that a bootstrap mechanism for it is now included in
the standard library. But it has a dark side. Come and learn about some
of the horrors that lurk within pip. Examples will include the
distribute -] setuptools fork and convergence, dealing packages which
attempt to use not-yet-installed dependencies, and the oh-man issue of
resolving dependencies which pip still entirely punts on.&lt;/p&gt;
</summary></entry><entry><title>OpenStack Miniconf Opening</title><link href="https://pyvideo.org/pycon-au-2015/openstack-miniconf-opening.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Joshua Hesketh</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/openstack-miniconf-opening.html</id><summary type="html"></summary></entry><entry><title>reliable testing with pip constraints</title><link href="https://pyvideo.org/pycon-au-2015/reliable-testing-with-pip-constraints.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/reliable-testing-with-pip-constraints.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip freeze files and similar techniques like buildout have been used for
reliable testing and reliable deployments for some time. But they are
not flexible enough to deal with situations like OpenStack where there
are dozens of separate codebases, evolving independently, which still
need the same rigour and reliability.&lt;/p&gt;
&lt;p&gt;Enter pip constraints, new in 7.1.0. I will cover their use, design, and
how we're using them in devstack (and thus OpenStack CI) - and how you
can (and should) use them in your local projects.&lt;/p&gt;
</summary></entry></feed>