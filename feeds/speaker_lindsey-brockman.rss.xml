<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 29 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Multimethods? In MY Python?</title><link>https://pyvideo.org/pyohio-2017/multimethods-in-my-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A benefit of using a dynamically typed language like Python is the ability to create a function that can operate on arguments of unknown types. Unfortunately, this freedom can lead to a common antipattern where the function is responsible for type-cheaking each argument before operating accordingly. This talk will explore avoiding this antipattern with multimethods.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lindsey Brockman</dc:creator><pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-29:pyohio-2017/multimethods-in-my-python.html</guid></item><item><title>Make API Calls Wicked Fast with Redis</title><link>https://pyvideo.org/pyohio-2014/make-api-calls-wicked-fast-with-redis.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sure, your API calls may be fast. But could they be faster? Redis is a
wonderful tool that can be used as a cache API responses. By
implementing API caching, you can avoid hitting rate limits and/or
reduce the load on your database, resulting in better performance for
your web app.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lindsey Brockman</dc:creator><pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-26:pyohio-2014/make-api-calls-wicked-fast-with-redis.html</guid><category>talk</category></item></channel></rss>