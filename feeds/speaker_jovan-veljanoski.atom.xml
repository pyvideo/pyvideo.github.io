<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jovan-veljanoski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-04T00:00:00+00:00</updated><entry><title>Modern Data Science: A new approach to DataFrames and pipelines</title><link href="https://pyvideo.org/euroscipy-2019/modern-data-science-a-new-approach-to-dataframes-and-pipelines.html" rel="alternate"></link><published>2019-09-04T00:00:00+00:00</published><updated>2019-09-04T00:00:00+00:00</updated><author><name>Jovan Veljanoski</name></author><id>tag:pyvideo.org,2019-09-04:euroscipy-2019/modern-data-science-a-new-approach-to-dataframes-and-pipelines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with datasets comprising millions or billions of samples is an
increasingly common task, one that is typically tackled with distributed
computing. Nodes in high-performance computing clusters have enough RAM
to run intensive and well-tested data analysis workflows. More often
than not, however, this is preceded by the scientific process of
cleaning, filtering, grouping, and other transformations of the data,
through continuous visualizations and correlation analysis. In today’s
work environments, many data scientists prefer to do this on their
laptops or workstations, as to more effectively use their time and not
to rely on spotty internet connection to access their remote data and
computation resources. Modern laptops have sufficiently fast I/O SSD
storage, but upgrading RAM is expensive or impossible.&lt;/p&gt;
&lt;p&gt;Applying the combined benefits of computational graphs, which are common
in neural network libraries, with delayed (a.k.a lazy) evaluations to a
DataFrame library enables efficient memory and CPU usage. Together with
memory-mapped storage (Apache Arrow, hdf5) and out-of-core algorithms,
we can process considerably larger data sets with fewer resources. As an
added bonus, the computational graphs ‘remember’ all operations applied
to a DataFrame, meaning that data processing pipelines can be generated
automatically.&lt;/p&gt;
&lt;p&gt;In this talk, we will demonstrate Vaex, an open-source DataFrame library
that embodies these concepts. Using data from the New York City
YellowCab taxi service comprising 1.1 billion samples and taking up over
170 GB on disk, we will showcase how one can conduct an exploratory data
analysis, complete with filtering, grouping, calculations of statistics
and interactive visualisations on a single laptop in real time. Finally
we will show an example of how one can automatically build a machine
learning pipeline as a by-product of the exploratory data analysis using
the computational graphs in Vaex.&lt;/p&gt;
&lt;p&gt;We will demonstrate how to explore and analyse massive datasets (&amp;gt;150GB)
on a laptop with the Vaex library in Python. Using computational graphs,
efficient algorithms and storage (Apache Arrow / hdf5) Vaex can easily
handle up to a billion rows.&lt;/p&gt;
</summary></entry><entry><title>A new approach to DataFrames and pipelines</title><link href="https://pyvideo.org/pydata-london-2019/a-new-approach-to-dataframes-and-pipelines.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>Maarten Breddels</name></author><id>tag:pyvideo.org,2019-07-13:pydata-london-2019/a-new-approach-to-dataframes-and-pipelines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern Data Science: A new approach to DataFrames and pipelines
Maarten Breddels, Jovan Veljanoski
Audience level:&lt;/p&gt;
&lt;p&gt;We show how to deal with massive datasets using small resources using the Python Vaex DataFrame library. Using computational graphs, efficient algorithms and storage (Apache Arrow / hdf5) Vaex can easily handle up to a billion rows, even on your laptop. As a bonus, Vaex can automatically generate a Machine Learning pipeline using the graph structure build-up internally in the DataFrame.&lt;/p&gt;
</summary></entry><entry><title>Vaex: Out of Core Dataframes for Python</title><link href="https://pyvideo.org/pyparis-2018/vaex-out-of-core-dataframes-for-python.html" rel="alternate"></link><published>2018-11-14T00:00:00+00:00</published><updated>2018-11-14T00:00:00+00:00</updated><author><name>Maarten Breddels</name></author><id>tag:pyvideo.org,2018-11-14:pyparis-2018/vaex-out-of-core-dataframes-for-python.html</id><summary type="html"></summary></entry></feed>