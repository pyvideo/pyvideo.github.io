<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - talk</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_talk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-09-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>An introduction to Python and graph databases with Neo4j</title><link href="https://pyvideo.org/kiwi-pycon-2014/an-introduction-to-python-and-graph-databases-wit.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Holger Spill</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/an-introduction-to-python-and-graph-databases-wit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use it
and some questions you can answer with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will introduce you to Neo4j (a graph database engine) with
Python. How to set it up, how to use it and some questions you can
answer with it.&lt;/p&gt;
&lt;p&gt;You don’t need any previous experience with Neo4j or NoSQL databases and
very little experience with Python.&lt;/p&gt;
&lt;p&gt;We'll cover: Introduction to Graphs Setting up your toolbox Neo4j and
Cypher A simple real-world example use case with Neo4j&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/holger-spill-an-introduction-to-python-and-graph-databases-with-neo4j"&gt;https://speakerdeck.com/nzpug/holger-spill-an-introduction-to-python-and-graph-databases-with-neo4j&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>basil - making it easy to spin up best practice python web frameworks</title><link href="https://pyvideo.org/kiwi-pycon-2014/basil-making-it-easy-to-spin-up-best-practice-p.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Ben Denham</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/basil-making-it-easy-to-spin-up-best-practice-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a great language for web development but spinning up Python
web frameworks for development is still not as easy as it could be -
especially if following a particular form of best practice e.g. altering
the standard folder structure. Basil addresses this pain …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a great language for web development but spinning up Python
web frameworks for development is still not as easy as it could be -
especially if following a particular form of best practice e.g. altering
the standard folder structure. Basil addresses this pain point. Use
cases include students building basic web apps and experienced devs
trying out less familiar web frameworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a great language for web development but spinning up Python
web frameworks for development is still not as easy as it could be -
especially if you're trying to follow a particular form of best practice
e.g. altering the standard folder structure, or separating secrets
(unversioned) from settings (versioned). And even if you are familiar
with one framework, it may not be as easy to spin up another one. The
basil project is an attempt to address this pain point. Use cases may
include a teaching session where students are learning Python by
building a basic web application. Or an experienced developer wanting to
try out an alternative web framework. The presentation will look at some
of the challenges involved in designing basil.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;standard user experience of setting up a web framework for Python
(contrasted with other languages)&lt;/li&gt;
&lt;li&gt;the user experience of basil&lt;/li&gt;
&lt;li&gt;use cases for basil (new developers, experienced developers,
teaching)&lt;/li&gt;
&lt;li&gt;existing alternative solutions&lt;/li&gt;
&lt;li&gt;benefits of using vagrant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ben-denham-basil-making-it-easy-to-spin-up-best-practice-python-web-frameworks"&gt;https://speakerdeck.com/nzpug/ben-denham-basil-making-it-easy-to-spin-up-best-practice-python-web-frameworks&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Bottle + uWSGI: simple web app configuration and fun hidden features</title><link href="https://pyvideo.org/kiwi-pycon-2014/bottle-uwsgi-simple-web-app-configuration-and.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Reed Wade</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/bottle-uwsgi-simple-web-app-configuration-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will introduce the Bottle Python Web Framework and show how simple it
is to configure a python web application to run under Nginx using uWSGI.
I'll also demonstrate some lesser known features of uWSGI that let your
web app work a little smarter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will introduce the Bottle Python Web Framework and show how simple it
is to configure a python web application to run under Nginx using uWSGI.
I'll also demonstrate some lesser known features of uWSGI that let your
web app work a little smarter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Bottle Python Web Framework makes it easy to create a little web
application. Nginx and uWSGI make it easy for your web app to scale and
perform well. In this talk I'll describe how to create and configure an
API focused web application.&lt;/p&gt;
&lt;p&gt;I'll demonstrate some features of uWSGI which allow your web app to
share data amongst separate processes and delegate work to non-client
facing processes.&lt;/p&gt;
&lt;p&gt;I'll show how all this can fit together with a full stack of:
bottle+uWSGI+Nginx+Bootstrap+AngularJS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/reed-wade-bottle-plus-uwsgi-simple-web-app-configuration-and-fun-hidden-features"&gt;https://speakerdeck.com/nzpug/reed-wade-bottle-plus-uwsgi-simple-web-app-configuration-and-fun-hidden-features&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Cloud Craft for Spatial Cadets</title><link href="https://pyvideo.org/kiwi-pycon-2014/cloud-craft-for-spatial-cadets.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Katie Miller</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/cloud-craft-for-spatial-cadets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This session will give you the necessary know-how to get started with
your own cloud-based mapping app project. The talk will cover the basics
of Platform as a Service and introduce the open source OpenShift PaaS.
Katie will demonstrate how to fire up an auto-scaling …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This session will give you the necessary know-how to get started with
your own cloud-based mapping app project. The talk will cover the basics
of Platform as a Service and introduce the open source OpenShift PaaS.
Katie will demonstrate how to fire up an auto-scaling spatial app on
OpenShift using Python and MongoDB, before hitting the app with some
load to test the scaling spatial goodness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All over the web people are doing amazing things with spatial; this
session will give you the necessary know-how to get started with your
own cloud-based mapping app project. The talk will cover the basics of
Platform as a Service and introduce Red Hat's open source OpenShift
PaaS. There will be a demonstration of how to fire up an auto-scaling
spatial app with Python and MongoDB on OpenShift. We will then hit the
app with some load to experiment with the scaling spatial goodness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/katie-miller-cloud-craft-for-spatial-cadets"&gt;https://speakerdeck.com/nzpug/katie-miller-cloud-craft-for-spatial-cadets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cloudcraft.codemiller.com/"&gt;http://cloudcraft.codemiller.com/&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Deploying test and production systems with Ansible</title><link href="https://pyvideo.org/kiwi-pycon-2014/deploying-test-and-production-systems-with-ansibl.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Juergen Brendel</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/deploying-test-and-production-systems-with-ansibl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk presents Ansible as a light-weight, simple and effective
configuration management tool. We will see why configuration management
is important and how we can use Ansible to automatically deploy and test
full production clusters - showcased with a sample Django application -
with just a single …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk presents Ansible as a light-weight, simple and effective
configuration management tool. We will see why configuration management
is important and how we can use Ansible to automatically deploy and test
full production clusters - showcased with a sample Django application -
with just a single command and in a number of different environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With modern configuration, deployment and orchestration systems,
software developers can easily maintain, bring up and tear down local
test systems, staging, demonstration and production systems, which are
100% identical to each other.&lt;/p&gt;
&lt;p&gt;This presentation will give an introduction to Ansible, a modern, simple
and efficient configuration management system. We will see how we can
deploy complete clusters (with load balancers, database and some Django
application servers), reliably and fully automated, either on dedicated
servers, on local virtual machines or in the cloud.&lt;/p&gt;
&lt;p&gt;If all goes well, there will even be a live demo in which we will bring
up a complete cluster or two in different environments, to illustrate
the power of this approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/juergen-brendel-deploying-test-and-production-systems-with-ansible"&gt;https://speakerdeck.com/nzpug/juergen-brendel-deploying-test-and-production-systems-with-ansible&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>goto in python. Yes. Really.</title><link href="https://pyvideo.org/kiwi-pycon-2014/goto-in-python-yes-really.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Carl Cerecke</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/goto-in-python-yes-really.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, python is missing the goto keyword. This talk rights this
historical wrong by presenting a module that allows the use of goto
within a function. An overview of the implementation is provided, along
with rationale and performance results. Knowing what a decorator is will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, python is missing the goto keyword. This talk rights this
historical wrong by presenting a module that allows the use of goto
within a function. An overview of the implementation is provided, along
with rationale and performance results. Knowing what a decorator is will
be helpful for understanding the technical part of this talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goto in Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief history of the goto statement.&lt;/li&gt;
&lt;li&gt;Why have a goto in Python?&lt;/li&gt;
&lt;li&gt;Previous attempts at goto in Python&lt;/li&gt;
&lt;li&gt;Dynamically rewriting byte codes&lt;/li&gt;
&lt;li&gt;Problematic constructs&lt;/li&gt;
&lt;li&gt;Performance results&lt;/li&gt;
&lt;li&gt;Future work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really"&gt;https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Making a scalable course search engine with python</title><link href="https://pyvideo.org/kiwi-pycon-2014/making-a-scalable-course-search-engine-with-pytho.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Robert King</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/making-a-scalable-course-search-engine-with-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating a custom search engine with python on google app engine. Serve
large spikes in search request traffic. Allow students to find course
reviews across multiple universities and countries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;introduction to the real world problem - Students need to be able to
find university courses …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating a custom search engine with python on google app engine. Serve
large spikes in search request traffic. Allow students to find course
reviews across multiple universities and countries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;introduction to the real world problem - Students need to be able to
find university courses across multiple countries and universities.&lt;/li&gt;
&lt;li&gt;first - explore how to solve the problem - collect course data &amp;amp;
decide on a rough solution&lt;/li&gt;
&lt;li&gt;second - create minimum viable product &amp;amp; see how people use it.
Iteratively make it better.&lt;/li&gt;
&lt;li&gt;second continued: Organise a big website launch event before you've
created the website - then proceed to write 10K lines of code in the
week before launch.&lt;/li&gt;
&lt;li&gt;third - analyse the 50K most recent search terms &amp;amp; make a simple tree
data structure to help improve search performance.&lt;/li&gt;
&lt;li&gt;four - caching &amp;amp; cache invalidation&lt;/li&gt;
&lt;li&gt;five - Maybe I'll do an online marketing campaign halfway through the
talk and show graphs of the app responding in real time.&lt;/li&gt;
&lt;li&gt;Covers Data analysis with python (csv, matplotlib, networkx,
collections.Counter, logfile parsing)&lt;/li&gt;
&lt;li&gt;Covers &amp;quot;Futures&amp;quot; - doing RPC calls in parallel.&lt;/li&gt;
&lt;li&gt;Unit testing &amp;amp; simulating all things. - Being able to see how
adjusting search functionality effects query times &amp;amp; quality of
results.&lt;/li&gt;
&lt;li&gt;Some tasteful jokes to keep things entertaining ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-king-making-a-scalable-course-search-engine-with-python"&gt;https://speakerdeck.com/nzpug/robert-king-making-a-scalable-course-search-engine-with-python&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Multimedia programming using Gstreamer (and, of course, Python)</title><link href="https://pyvideo.org/kiwi-pycon-2014/multimedia-programming-using-gstreamer-and-of-c.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Douglas Bagnall</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/multimedia-programming-using-gstreamer-and-of-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gstreamer is a multimedia framework consisting of hundreds of
interchangeable elements that can be plugged together like toy train
tracks to create efficient processing pipelines. This talk will show how
easy it is to put together reasonably complex Gstreamer pipelines with
Python, and indicate why …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gstreamer is a multimedia framework consisting of hundreds of
interchangeable elements that can be plugged together like toy train
tracks to create efficient processing pipelines. This talk will show how
easy it is to put together reasonably complex Gstreamer pipelines with
Python, and indicate why you might want to. It covers Gstreamer 1.x and
both versions of CPython.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gstreamer [1] is a mature framework for developing applications that
decode, encode, play, analyse, broadcast, or otherwise manipulate audio
and video streams. It is used on phones and embedded devices, all over
the linux desktop [2], and in giant multimedia displays.&lt;/p&gt;
&lt;p&gt;It is easy to create simple Gstreamer pipelines using shell one-liners,
but with Python it is possible to go beyond that, dealing with multiple
parallel streams and reconfiguring pipelines on the fly. Examples drawn
from real life problems include interleaving several hundred audio
streams into one multi-channel stream and splitting a video stream into
4 parts and sending each to a different projector for perfect
syncronisation.&lt;/p&gt;
&lt;p&gt;It is also possible to write a Gstreamer plugin in Python, which will be
briefly touched on.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="http://gstreamer.freedesktop.org/"&gt;http://gstreamer.freedesktop.org/&lt;/a&gt; [2]
&lt;a class="reference external" href="http://gstreamer.freedesktop.org/apps/"&gt;http://gstreamer.freedesktop.org/apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/douglas-bagnall-multimedia-programming-using-gstreamer-and-of-course-python"&gt;https://speakerdeck.com/nzpug/douglas-bagnall-multimedia-programming-using-gstreamer-and-of-course-python&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>PyPy.js: What? How? Why?</title><link href="https://pyvideo.org/kiwi-pycon-2014/pypyjs-what-how-why.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Ryan Kelly</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/pypyjs-what-how-why.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyPy.js is an experiment in building a fast and compliant in-browser
python interpreter, by compiling PyPy into javascript and retargeting
its JIT to emit asmjs code at runtime. This talk will demonstrate the
combination of technologies that make such a thing possible, the results …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyPy.js is an experiment in building a fast and compliant in-browser
python interpreter, by compiling PyPy into javascript and retargeting
its JIT to emit asmjs code at runtime. This talk will demonstrate the
combination of technologies that make such a thing possible, the results
achieved so far, and the challenges that still remain when taking python
onto javascript's home turf.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyPy.js is an experiment in building a fast, compliant, in-browser
python interpreter. By compiling the PyPy interpreter into javascript,
and retargeting its JIT compiler to emit asmjs code at runtime, it is
possible to run python code in the browser at speeds competitive with a
native python environment. This talk will demonstrate the combination of
technologies that make such a thing possible, the results that have been
achieved so far, and the challenges that still remain when trying to
take python onto javascript's home turf.&lt;/p&gt;
&lt;p&gt;We'll cover: an overview of PyPy and why it's a good fit for this type
of project; an introduction to asmjs and the rise of javascript as a
compile target; what it looks like when you smoosh these two
technologies together; a comparison with other approaches such as
brython; and some concrete suggestions for how the result might be
useful in practice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why"&gt;https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Surprise features you didn't ask for</title><link href="https://pyvideo.org/kiwi-pycon-2014/surprise-features-you-didnt-ask-for.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Mike Haworth</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/surprise-features-you-didnt-ask-for.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some pitfalls of popular frameworks&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Frameworks enable developers to be enormously productive, but
occasionally they include surprisingly unhelpful features. This talk
will examine some recent bugs affecting Django as well as other popular
frameworks and libraries. We will look at functionality, such as parsing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some pitfalls of popular frameworks&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Frameworks enable developers to be enormously productive, but
occasionally they include surprisingly unhelpful features. This talk
will examine some recent bugs affecting Django as well as other popular
frameworks and libraries. We will look at functionality, such as parsing
of XML, that just doesn't behave as any reasonable person might expect,
how this can be misused and what can be done to avoid the pitfalls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/mike-haworth-surprise-features-you-didnt-ask-for"&gt;https://speakerdeck.com/nzpug/mike-haworth-surprise-features-you-didnt-ask-for&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Understanding human language with Python</title><link href="https://pyvideo.org/kiwi-pycon-2014/understanding-human-language-with-python.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Alyona Medelyan</name></author><id>tag:pyvideo.org,2014-09-14:/kiwi-pycon-2014/understanding-human-language-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that
studies how computers can understand human language. This talk will
explain the main principles behind NLP and introduce some key Python
libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that
studies how computers can understand human language. This talk will
explain the main principles behind NLP and introduce some key Python
libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that
studies how computers can understand human language. Thanks to NLP, one
day you might have your own intelligent assistant who can understand any
dialect, who can answer your questions by finding the right answers on
the web, and who can help you communicate in any language through
instant and accurate translation.&lt;/p&gt;
&lt;p&gt;There are many challenges that still need to be overcome for this to
happen, but in the meantime researchers have been finessing the building
blocks required for NLP analysis. Some of the algorithms out there are
quite powerful already. Many exist in Python and are readily available
for any Pythonista to use.&lt;/p&gt;
&lt;p&gt;This talk will explain the main principles behind NLP and introduce some
key Python libraries. If you are interested in finding out more, please
also attend the in-depth tutorial on Friday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/alyona-medelyan-understanding-human-language-with-python"&gt;https://speakerdeck.com/nzpug/alyona-medelyan-understanding-human-language-with-python&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>A Testing Talk</title><link href="https://pyvideo.org/kiwi-pycon-2014/a-testing-talk.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/a-testing-talk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will contain my opinionated views on several topics,
including, but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which areas of testing are well catered for, and which are not?&lt;/li&gt;
&lt;li&gt;What sources of bugs are frequent, and very hard to test?&lt;/li&gt;
&lt;li&gt;Should we perhaps start talking about unit …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will contain my opinionated views on several topics,
including, but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which areas of testing are well catered for, and which are not?&lt;/li&gt;
&lt;li&gt;What sources of bugs are frequent, and very hard to test?&lt;/li&gt;
&lt;li&gt;Should we perhaps start talking about unit tests less, and start
talking about other forms of testing more?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my day job I spend a lot of time looking at projects that are part of
Ubuntu, and trying to find out why they’re being released with bugs.
This in turn leads to a lot of dissection of test suites, and a lot of
discussion with my colleagues around tests, names of tests, why some
tests are better than others, where the common gaps in test coverage
are, how applications should be tested, where, when, and why certain
test suites should be run, and other subjects too boring to mention.&lt;/p&gt;
&lt;p&gt;Having done this for several years, I've started to form a few troubling
thoughts about the state of automated testing in software development,
and in python specifically. When taken together, these can start to form
a rough and ready 'testing philosophy' - a way of looking at code and,
by analysing it's structure and visibility, start to find gaps in it's
test coverage.&lt;/p&gt;
&lt;p&gt;This talk contains no silver bullets - no magical solutions, but does
(hopefully) contain some interesting questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk"&gt;https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Control All Your Programs with MIDI Controllers</title><link href="https://pyvideo.org/kiwi-pycon-2014/control-all-your-programs-with-midi-controllers.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Tobi Wulff</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/control-all-your-programs-with-midi-controllers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MIDI devices are commonly used to provide input to audio applications,
e.g. to play a synthesizer via a keyboard or to control a mixer in an
audio workstation. This talk will show you tools for receiving input and
processing messages, and how to control …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MIDI devices are commonly used to provide input to audio applications,
e.g. to play a synthesizer via a keyboard or to control a mixer in an
audio workstation. This talk will show you tools for receiving input and
processing messages, and how to control all of your programs with
minimal configuration effort, the advantage being that not every single
program has to be made natively MIDI aware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will give a quick overview of the MIDI protocol and
controllers which are commonly used to provide input to audio
applications. These controllers can have the form of a musical keyboard,
a mixer with knobs, sliders and buttons, or a combination of those. Some
other variants use touch-sensitive trackpads or look like a drum kit.
Then, the talk will go over the following tools: Python (duh), mididings
(to receive and manipulate MIDI messages), xte (send keystrokes and
mouse events to the Linux Xorg server) and some other necessary programs
such as jackd to virtually connected MIDI inputs and outputs. I'll
describe the steps needed to bring all those tools together and make it
extensible to (hopefully, eventually) work on other OS as well.&lt;/p&gt;
&lt;p&gt;mididings provides a Domain Specific Language (DSL) for MIDI processing
which will be introduced as part of this talk. If you are doing anything
with MIDI devices (and other external devices apart from keyboards) and
feel like they pose some limitations on you (for example not supporting
different customisable button assignments on the device), this will be
of interest to you. xte will be used in a very basic way but if you
haven't heard of it and want to send events to your X server, this is a
great program. The possibilities are endless and we haven't even
combined all the tools yet. This is about to change in the next step of
the talk. A live demo/video will demonstrate how it all comes together
into one beautiful piece of ingenuity and software engineering.&lt;/p&gt;
&lt;p&gt;Finally, I'll discuss pros and cons of this solution versus other
possible methods including native MIDI device support for various
programs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/tobi-wulff-control-all-your-programs-with-midi-controllers"&gt;https://speakerdeck.com/nzpug/tobi-wulff-control-all-your-programs-with-midi-controllers&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Exploring The Philosophy of Programming</title><link href="https://pyvideo.org/kiwi-pycon-2014/exploring-the-philosophy-of-programming.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Xuanyi Chew</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/exploring-the-philosophy-of-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One man's journey to internalizing the phrase &amp;quot;computer programs are
just bits&amp;quot;. It's merely a phrase, but one that can be deeply appreciated
if time is taken to appreciate it. Talk will roughly be about bytes,
types, computation theory, language design, and some life stories …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One man's journey to internalizing the phrase &amp;quot;computer programs are
just bits&amp;quot;. It's merely a phrase, but one that can be deeply appreciated
if time is taken to appreciate it. Talk will roughly be about bytes,
types, computation theory, language design, and some life stories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It all started with a bunch of Python 3 code written in another
language. What followed were explorations as to what it really means to
be programming. Why are some languages easier to learn (Python)? Why is
it easier to make mistakes in some languages (JavaScript)? And why are
some languages totally alien (APL and its family)?&lt;/p&gt;
&lt;p&gt;What role does familiarity play in being productive in a language? Why
are there different paradigms in programming? What about the correctness
of programs? Is one paradigm more correct than others? This talk
explores the history of computer science, programming and the potential
for the human race.&lt;/p&gt;
&lt;p&gt;Ultimately, this talk tries to answer the question: is programming for
humans or for machines? And what role Python plays in it. The question
on the future is left to the audience to decide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/xuanyi-chew-exploring-the-philosophy-of-programming"&gt;https://speakerdeck.com/nzpug/xuanyi-chew-exploring-the-philosophy-of-programming&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>External dependencies in web apps: system libs are not that scary</title><link href="https://pyvideo.org/kiwi-pycon-2014/external-dependencies-in-web-apps-system-libs-ar.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Francois Marier</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/external-dependencies-in-web-apps-system-libs-ar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Going to production is very different from setting up a development
environment. We have great tools like pip and virtualenv for the latter
but they lead to maintenance anti-patterns when they are used for
production deployments. We don't &amp;quot;pip install apache&amp;quot; and instead
leverage the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Going to production is very different from setting up a development
environment. We have great tools like pip and virtualenv for the latter
but they lead to maintenance anti-patterns when they are used for
production deployments. We don't &amp;quot;pip install apache&amp;quot; and instead
leverage the QA and integration work of distro developers, so why not
rely on distros for more than just the base system?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today's web applications often have a lot of external dependencies.
Start off with a basic framework, sprinkle a couple of handy plugins or
python modules and finish with a generous serving of JavaScript
front-end libraries.&lt;/p&gt;
&lt;p&gt;What you end up is a gigantic mess of code from different sources which
follow very different release schedules and policies. Language-specific
package managers can automate much of the dependency resolution and
package installation, but you're on your own in terms of integration and
quality assurance. Also, the minute you start distributing someone
else's code with your project, you become responsible for the security
of that external code.&lt;/p&gt;
&lt;p&gt;You could of course decide to avoid the problem by writing it all
yourself from scratch. Realistically though, you're not likely to go
past the stage of a toy WSGI app using that approach because it's a lot
of work.&lt;/p&gt;
&lt;p&gt;This talk will examine the decision that the Libravatar [1] project made
to outsource much of its maintenance burden to the distro by using
system packages for almost everything.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://www.libravatar.org/"&gt;https://www.libravatar.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/francois-marier-external-dependencies-in-web-apps-system-libs-are-not-that-scary"&gt;https://speakerdeck.com/nzpug/francois-marier-external-dependencies-in-web-apps-system-libs-are-not-that-scary&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Find All the Books</title><link href="https://pyvideo.org/kiwi-pycon-2014/find-all-the-books.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Greig Roulston</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/find-all-the-books.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the story of how I stumbled into using Python, took on a project
that is harder then I first thought and learned more then I ever wanted
to know about bibliographic records, py(MARC), and how MongoDB blew my
mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Digitisation …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the story of how I stumbled into using Python, took on a project
that is harder then I first thought and learned more then I ever wanted
to know about bibliographic records, py(MARC), and how MongoDB blew my
mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Digitisation team at National Library of New Zealan are looking at
NZ books, lots of books. What needs to be digitised, what is already
digitised and how do we get access to these books. This has been a
journey of learning the archaic arts of MARC, learning and loving Python
and working out how to handle large amounts of Library Data. This is
still a work in progress, 2 years later and what started as checking
data sets against each other in excel, has grown into me falling in love
with Dictionary’s (JSON), making Flask web interfaces to explore data,
Map Reducing data sets, making sweet graphs with MatPlotLib, using
Python when ever I get a chance and even teaching some of what I have
learned to other colleagues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/greig-roulston-find-all-the-books"&gt;https://speakerdeck.com/nzpug/greig-roulston-find-all-the-books&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Fixing Python</title><link href="https://pyvideo.org/kiwi-pycon-2014/fixing-python.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Teijo Holzer</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/fixing-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Discover a bug in a standard Python library, provide a reproducible test
case, log a bug report with the Python maintainers, prepare &amp;amp; submit a
patch. Get patch accepted into 2.x &amp;amp; 3.x master.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will provide a real-world walk-through of how to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Discover a bug in a standard Python library, provide a reproducible test
case, log a bug report with the Python maintainers, prepare &amp;amp; submit a
patch. Get patch accepted into 2.x &amp;amp; 3.x master.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will provide a real-world walk-through of how to discover a
bug in Python, prepare a reproducible test case and log a bug report. It
will then continue to show on how to provide a patch and get it accepted
and deployed into Python 2.7.7 and 3.4.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/teijo-holzer-fixing-python"&gt;https://speakerdeck.com/nzpug/teijo-holzer-fixing-python&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Intro to flask-security</title><link href="https://pyvideo.org/kiwi-pycon-2014/intro-to-flask-security.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Beau Butler</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/intro-to-flask-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turning your web app into a webapp-with-users looks like an onerous
yak-shaving mission, full of DNS and email configuration, password
databases, and so on. We will use the great flask-security metamodule,
and a little bit of glue, to show just how easy this formerly-annoying
process …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turning your web app into a webapp-with-users looks like an onerous
yak-shaving mission, full of DNS and email configuration, password
databases, and so on. We will use the great flask-security metamodule,
and a little bit of glue, to show just how easy this formerly-annoying
process can be, from go to whoa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Say you’re using Flask, and your happy little app now suddenly needs an
endpoint user-secured, Because Reasons… what do you do?&lt;/p&gt;
&lt;p&gt;Either you hardcode a password in, hook up basic-auth, and go home,&lt;/p&gt;
&lt;p&gt;OR, you face the fun of users, roles, the users need to sign up, now
they’ve forgotten their passwords again, and so on. There’s really no
middle ground.&lt;/p&gt;
&lt;p&gt;Going from &amp;quot;open season&amp;quot; to &amp;quot;i want this function protected with a role
permission&amp;quot; is a big old yak-shaving mission, full of DNS configuration,
the dismaying realisation that now your app has to send email, and so
on.&lt;/p&gt;
&lt;p&gt;In the spirit of self-sufficiency and ‘DevOps’, this talk takes you from
a bare 'hello world' flask app, through to a bare 'hello world' app with
role protection for endpoints. We’ll start with a domain name and a VPS,
and end with an app that people can sign up to.&lt;/p&gt;
&lt;p&gt;We'll be using the great flask-security metamodule, and a little bit of
glue, to show just how easy this formerly-annoying process can be, from
go to whoa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/beau-butler-intro-to-flask-security"&gt;https://speakerdeck.com/nzpug/beau-butler-intro-to-flask-security&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Java for Python Developers</title><link href="https://pyvideo.org/kiwi-pycon-2014/java-for-python-developers.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/java-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious.&lt;/p&gt;
&lt;p&gt;Calling Java APIs from CPython is one of the more interesting challenges
facing developers who want to get Python working as a first-class
language for developing apps for Android.&lt;/p&gt;
&lt;p&gt;This talk looks at …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious.&lt;/p&gt;
&lt;p&gt;Calling Java APIs from CPython is one of the more interesting challenges
facing developers who want to get Python working as a first-class
language for developing apps for Android.&lt;/p&gt;
&lt;p&gt;This talk looks at solutions, past and present, for making the world of
Java accessible from Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious. Why are you looking so confused?&lt;/p&gt;
&lt;p&gt;Yes. I'm talking about Java at a Python conference. What of it?&lt;/p&gt;
&lt;p&gt;OK, well, I'm actually talking about avoiding having to code in Java,
when circumstances almost certainly require you to code in Java… or at
least require your applications to run in a Java environment.&lt;/p&gt;
&lt;p&gt;One of the more interesting challenges for Python developers targetting
Android is being able to call Java APIs from CPython. Environments like
Android require developers to use Java to get access to Android's user
interface libraries. Perhaps more importantly, Android has APIs for
accessing hardware features like accelerometers and geolocation, and
software features like notifications, but all of these have a Java
interface.&lt;/p&gt;
&lt;p&gt;This talk looks at how these problems have been solved, and where they
haven't, approaches to solutions that might exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers"&gt;https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Packaging a Python desktop application using PyInstaller</title><link href="https://pyvideo.org/kiwi-pycon-2014/packaging-a-python-desktop-application-using-pyin.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Glenn Ramsey</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/packaging-a-python-desktop-application-using-pyin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What PyInstaller does. How it works. How to use it. What to do when it
doesn't work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will be an introduction to using PyInstaller for packaging a
desktop application on Windows and OSX. It will briefly outline how
PyInstaller works and describe …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What PyInstaller does. How it works. How to use it. What to do when it
doesn't work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will be an introduction to using PyInstaller for packaging a
desktop application on Windows and OSX. It will briefly outline how
PyInstaller works and describe how to use it, with some simple examples.
Finally some techniques to use for debugging a built package will be
discussed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/glenn-ramsey-packaging-a-python-desktop-application-using-pyinstaller"&gt;https://speakerdeck.com/nzpug/glenn-ramsey-packaging-a-python-desktop-application-using-pyinstaller&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Python is slow, make it faster with C</title><link href="https://pyvideo.org/kiwi-pycon-2014/python-is-slow-make-it-faster-with-c.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Ben Shaw</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/python-is-slow-make-it-faster-with-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most people have heard that it's possible to integrate Python with C to
give performance boosts to computationally heavy code, but because it
seems daunting they've never given it a try. It's actually not as hard
as you think. This talk covers some of the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most people have heard that it's possible to integrate Python with C to
give performance boosts to computationally heavy code, but because it
seems daunting they've never given it a try. It's actually not as hard
as you think. This talk covers some of the different methods of speeding
up your code with C, and compares the results to those you can get from
other methods, like using PyPy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;As developers, we like to work with Python because it's forgiving, quick
to develop for and allows our code to be very dynamic. Unfortunately the
trade-off for this magic is lower performance than compiled languages.
Python can be sped up by offloading heavy algorithms to compiled C,
using specially built C modules utilising the C Python API, or by
integrating existing C libraries with using the python ctypes module. It
is also possible to speed up Python using alternative interpreters, like
PyPy, which uses a JIT compiler.&lt;/p&gt;
&lt;p&gt;Pure Python Implementation&lt;/p&gt;
&lt;p&gt;First we will take a look at a CPU bound algorithm written purely in
Python, and see how it performs. The program reads data and prints
results. The time it takes to run this will be considered the worst case
scenario.&lt;/p&gt;
&lt;p&gt;Pure C Implementation&lt;/p&gt;
&lt;p&gt;The same program will be re-written in C, including the input and output
logic, and we will compare the time it takes to run against the Python
implementation. The results of the C implementation will be considered
the best case scenario.&lt;/p&gt;
&lt;p&gt;Custom Python Module with C Implementation&lt;/p&gt;
&lt;p&gt;Python provides an API, C development headers and special C types, to
allow the creation of a specially built bridges between Python and C
code. In this example, the algorithm will be written in C, and bridged
to Python with a custom Python/C module. Input and output takes place
within Python, with C only performing the computation. With this method
we can achieve near best-case speeds, at the cost of some additional
(and sometimes complicated) C coding.&lt;/p&gt;
&lt;p&gt;Bridging To C with ctypes&lt;/p&gt;
&lt;p&gt;Introduced in Python 2.5, ctypes allows Python to integrate with
pre-built C libraries without custom C code. This approach has the
advantage over the custom Python/C Module of not needing to write a lot
of boilerplate and bridging code in C. As with the Py/C implementation,
C is used only to execute the algorithm, and Python takes care of input
and output. Again, performance is close to best-case speeds, but the
work to integrate with C is much less.&lt;/p&gt;
&lt;p&gt;Alternative Python Implementations&lt;/p&gt;
&lt;p&gt;PyPy uses a JIT compiler to offer impressive performance gains. The
original Python code will be run through PyPy, and although the results
might not be as quite as good as using compiled C, they come close, and
the effort-to-gain ratio certainly makes it attractive option.&lt;/p&gt;
&lt;p&gt;Conclusion&lt;/p&gt;
&lt;p&gt;Each performance boosting option has its pros and cons, and when it's so
easy to just use PyPy and get good results, why would you still use C?
We'll look at some example use cases for each of the methods presented
and why you would choose one over the others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c"&gt;https://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Seize control of your network with Ryu</title><link href="https://pyvideo.org/kiwi-pycon-2014/seize-control-of-your-network-with-ryu.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Ewen McNeill</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/seize-control-of-your-network-with-ryu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ryu is an OpenFlow Network Controller written in Python, which provides
a framework to build your own Software Defined Network (SDN) that can
run at full wire speed, using modern network switches. Come learn how to
leverage Python to instruct your network to filter, switch …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ryu is an OpenFlow Network Controller written in Python, which provides
a framework to build your own Software Defined Network (SDN) that can
run at full wire speed, using modern network switches. Come learn how to
leverage Python to instruct your network to filter, switch, and route
traffic precisely the way you desire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenFlow [1] is an industry standard protocol for controlling modern
network hardware (and software switches -- such as Open vSwitch [2] in
Linux), down to installing specific forwarding or filtering rules
(&amp;quot;flows&amp;quot;) into the hardware forwarding plane. Together with a well
written OpenFlow Network Controller it allows you to create an
intelligent Software Defined Network (SDN).&lt;/p&gt;
&lt;p&gt;Ryu [3] is a OpenFlow Network Controller framework, written in Python,
that is already extremely capable and still being rapidly developed (new
releases every month). It has been adopted by the OpenStack [4] project
amongst many others. Ryu implements the OpenFlow wire protocols and
allows you to write event driven &amp;quot;apps&amp;quot; as Python modules, each running
in their own eventlet. It comes with lots of examples. Your own apps can
dictate switch forwarding and filtering policy in advance, or respond to
new types of packets as they arrive. This gives you fine grained
programmatic control over your network.&lt;/p&gt;
&lt;p&gt;The talk will provide a brief outline of a how a Software Defined
Network using Openflow works, and an introduction to writing your own
Ryu &amp;quot;app&amp;quot; in Python. Plus plenty of pointers so you can get started
experimenting yourself. Become the mad genius taking total control of
your network!&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://www.opennetworking.org/"&gt;https://www.opennetworking.org/&lt;/a&gt; [2] &lt;a class="reference external" href="http://openvswitch.org/"&gt;http://openvswitch.org/&lt;/a&gt; [3]
&lt;a class="reference external" href="http://osrg.github.io/ryu/"&gt;http://osrg.github.io/ryu/&lt;/a&gt; [4] &lt;a class="reference external" href="http://www.openstack.org/"&gt;http://www.openstack.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ewen-mcneill-seize-control-of-your-network-with-ryu"&gt;https://speakerdeck.com/nzpug/ewen-mcneill-seize-control-of-your-network-with-ryu&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Semver and Python with PBR</title><link href="https://pyvideo.org/kiwi-pycon-2014/semver-and-python-with-pbr.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/semver-and-python-with-pbr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Semantic versioning provides simple and robust rules for deciding on
version numbers, and PBR will soon be able to manage the entire process
of version number …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Semantic versioning provides simple and robust rules for deciding on
version numbers, and PBR will soon be able to manage the entire process
of version number assignment in a project... and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Now used by all the OpenStack projects, PBR provides integration glue
for core features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;testing&lt;/li&gt;
&lt;li&gt;binary package creation for Linux distributors&lt;/li&gt;
&lt;li&gt;inclusion of files in tarballs&lt;/li&gt;
&lt;li&gt;changelog and authors file creation&lt;/li&gt;
&lt;li&gt;pypi summary creation&lt;/li&gt;
&lt;li&gt;version number creation&lt;/li&gt;
&lt;li&gt;sphinx doc stub creation and manpage enablement&lt;/li&gt;
&lt;li&gt;unified requirements management&lt;/li&gt;
&lt;li&gt;for both easy-install and pip with single-file control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most interesting part is the version number creation, since coming
up with the right version number can be a contentious discussion in some
projects. Semver provides simple and robust rules for deciding on
version numbers, and I'm in the middle of implementing automation for
these in PBR itself, with integration glue to export them in PEP-440,
dpkg and rpm format. The only dependencies PBR has are git + a recent
pip, so this should be useful for many attendees - and while PBR is an
OpenStack invention we're very interested in making sure its useful and
reliable for anyone that wants to use it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr"&gt;https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>tardis - an interpreter for command-line parallel execution</title><link href="https://pyvideo.org/kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Alan McCulloch</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about simplifying the command line interface to local or
cluster based parallel computing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally the user of a command shell would be unaware whether their
commands were executed as a single process on the local machine, or as
many concurrent processes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about simplifying the command line interface to local or
cluster based parallel computing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally the user of a command shell would be unaware whether their
commands were executed as a single process on the local machine, or as
many concurrent processes on either their local machine or a remote
cluster, apart from the reduced time taken to complete the command if
executed as concurrent processes. We have developed an approach which we
call “command conditioning” in which the user marks up a command with
hints to the interpreter which are used to transform the marked-up
command into “(re)conditioned” native shell commands which the
interpreter then launches concurrently and monitors, collects and
collates output and termination status. We have implemented an initial
python based command-conditioning interpreter called tardis. We describe
tardis, give examples of the class of compute tasks for which it is
suited, and briefly outline key compute-cluster design characteristics
which support this approach. We also touch on future work such as
potential integration with Galaxy, a popular python based workflow
system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution"&gt;https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>The Full Monty - CI on OpenStack</title><link href="https://pyvideo.org/kiwi-pycon-2014/the-full-monty-ci-on-openstack.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Danny Adair</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/the-full-monty-ci-on-openstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Are you continuously &amp;quot;integrating&amp;quot;, or just running some unit tests
inside a virtualenv?&lt;/p&gt;
&lt;p&gt;Let's go the Full Monty with OpenStack!&lt;/p&gt;
&lt;p&gt;Protagonists, in order of appearance: Gerrit, Jenkins, OpenStack,
Puppet, Odoo (formerly OpenERP). Enjoy the ride!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'll show how we configured our CI tools to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Are you continuously &amp;quot;integrating&amp;quot;, or just running some unit tests
inside a virtualenv?&lt;/p&gt;
&lt;p&gt;Let's go the Full Monty with OpenStack!&lt;/p&gt;
&lt;p&gt;Protagonists, in order of appearance: Gerrit, Jenkins, OpenStack,
Puppet, Odoo (formerly OpenERP). Enjoy the ride!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'll show how we configured our CI tools to automatically build and
destroy entire servers on OpenStack. We'll have Gerrit for code review,
Jenkins for coordinating and monitoring the build process, OpenStack and
its tools to build servers on their own subnet, Puppet for configuring
said servers. The example project is an installation of Odoo (formely
OpenERP) with a web server and PostgreSQL database.&lt;/p&gt;
&lt;p&gt;At Catalyst, my team works with Odoo (formerly known as OpenERP), a
modular Open Source suite of business applications. It has a very large
and complex codebase and &amp;quot;Regression&amp;quot; is its middle name. It is under
very active development on github, and customisations are generally
brought in via plugins that override or extend default functionality.
Basically, reasonable work on this requires continuous integration, it's
not a luxury.&lt;/p&gt;
&lt;p&gt;We could have a fat build server with multiple virtualenvs and multiple
databases on the same PostgreSQL server, and just run some Python tests
and be done with it. We could improve that with something like LXC,
Vagrant etc. all happening on said build server. But why stop there -
why not go all the way and create a more realistic setup? After all,
another team is able to provide us with OpenStack. Let's go the Full
Monty!&lt;/p&gt;
&lt;p&gt;Let's go hog wild and create and destroy entire servers just for the
purpose of testing. Let's have separate application and database
servers, just like in production.&lt;/p&gt;
&lt;p&gt;Let's also keep some servers alive for other purposes, e.g., user
acceptance testing. Just sit in an IRC channel and after changes are
committed for review, wait for a bot to post the URL of the newly built
web server to click on. A nicely readable URL on a separate subdomain
that is, of course!&lt;/p&gt;
&lt;p&gt;As a bonus, I'll show how active upstream development on github fits
into all this, and how your Ubuntu &amp;quot;Precise Pangolin&amp;quot; server can easily
rehearse an upgrade to &amp;quot;Trusty Tahr&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/danny-adair-the-full-monty-ci-on-openstack"&gt;https://speakerdeck.com/nzpug/danny-adair-the-full-monty-ci-on-openstack&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>Why Python rocks Solaris</title><link href="https://pyvideo.org/kiwi-pycon-2014/why-python-rocks-solaris.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>James McPherson</name></author><id>tag:pyvideo.org,2014-09-13:/kiwi-pycon-2014/why-python-rocks-solaris.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use it
and some questions you can answer with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will introduce you to Neo4j (a graph database engine) with
Python. How to set it up, how to use it and some questions you can
answer with it.&lt;/p&gt;
&lt;p&gt;You don’t need any previous experience with Neo4j or NoSQL databases and
very little experience with Python.&lt;/p&gt;
&lt;p&gt;We'll cover: Introduction to Graphs Setting up your toolbox Neo4j and
Cypher A simple real-world example use case with Neo4j&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/james-mcpherson-why-python-rocks-solaris"&gt;https://speakerdeck.com/nzpug/james-mcpherson-why-python-rocks-solaris&lt;/a&gt;&lt;/p&gt;
</content><category term="Kiwi PyCon 2014"></category><category term="talk"></category></entry><entry><title>An Overview of the Facebook cache</title><link href="https://pyvideo.org/pycon-ca-2013/an-overview-of-the-facebook-cache.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Yannick Gingras</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/an-overview-of-the-facebook-cache.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Facebook leverages in-memory data stores extensively. Even though
caching is a conceptually simple service, several problems inherent to
our scales make the deployment of our in-memory data store particularly
interesting and challenging.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Build Your Infrastructure - with Python!</title><link href="https://pyvideo.org/pycon-ca-2013/build-your-infrastructure-with-python-0.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Ed Leafe</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/build-your-infrastructure-with-python-0.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their
infrastructure. Rather than ordering and managing hardware, they can now
provision what they need with a few clicks or API calls. This talk will
demonstrate building infrastructure using our favorite language: Python!&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>EduPsych Theory for Python Hackers v.2.0</title><link href="https://pyvideo.org/pycon-ca-2013/edupsych-theory-for-python-hackers-v20.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Mel Chua</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/edupsych-theory-for-python-hackers-v20.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I've taken two years of graduate courses in pedagogical design,
educational psychology, and community development. I save you $50k in
tuition and hundreds of hours of reading and give you the short version
for Pythonistas who care about education and outreach. You'll learn how
to critically analyze and describe …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I've taken two years of graduate courses in pedagogical design,
educational psychology, and community development. I save you $50k in
tuition and hundreds of hours of reading and give you the short version
for Pythonistas who care about education and outreach. You'll learn how
to critically analyze and describe your Python learning/teaching methods
and progress to other hackers and/or educators. This is a revised and
expanded version of a talk given at the last PyCon in Santa Clara, with
insights from the current batch at Hacker School.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Exploring the Google Analytics API</title><link href="https://pyvideo.org/pycon-ca-2013/exploring-the-google-analytics-api.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Vanessa Sabino</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/exploring-the-google-analytics-api.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Google Analytics is an excellent tool to track what happens in your
website or your mobile app. In this talk, you'll learn how to query your
data using the Python library for the Core Reporting API and why you
should be doing it.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Go for Python Hackers</title><link href="https://pyvideo.org/pycon-ca-2013/go-for-python-hackers-0.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/go-for-python-hackers-0.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There is a resurgence of native-compiled programming languages going on.
Some of this work is in response to Python; we're now part of The
Establishment against which newcomers are measured. I'll give an
overview of Go, a recent native-compiled language, and how it relates to
Python.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Hy: A Lisp That Compiles to Python</title><link href="https://pyvideo.org/pycon-ca-2013/hy-a-lisp-that-compiles-to-python.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>James King</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/hy-a-lisp-that-compiles-to-python.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hy is a Lisp that compiles to Python AST. It has full interoperability
with Python and macros! This talk introduces Hy and will dig into the
compiler and demonstrate how dynamically generating Python ASTs can be
fun and useful.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Lessons from Classic Industrial Design for a Digital World</title><link href="https://pyvideo.org/pycon-ca-2013/lessons-from-classic-industrial-design-for-a-digi.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Linn Vizard</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/lessons-from-classic-industrial-design-for-a-digi.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What can classic Industrial Design teach us about designing for digital?
This talk looks at design icons from typewriters to chairs and asks how
we can apply learning from the breadth of industrial design to creating
compelling digital products.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Planting Open Source Seeds</title><link href="https://pyvideo.org/pycon-ca-2013/planting-open-source-seeds.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Kenneth Reitz</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/planting-open-source-seeds.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An in-depth review of the stages that most open source projects go
though, and the decisions their maintainers face. Requests will be used
as an example — lessons learned and best practices will be covered.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Python and Hadoop: Big Data Application Development with PyCascading</title><link href="https://pyvideo.org/pycon-ca-2013/python-and-hadoop-big-data-application-developme.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Craig Hawco</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/python-and-hadoop-big-data-application-developme.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Big Data is not typically an area talked about when working with Python.
We'll discuss some of the options out there, considerations about
interfacing with the rest of your data solution, and the advantages and
shortcomings of working with Python in the Hadoop ecosystem.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Quick Wins for Better Website Security</title><link href="https://pyvideo.org/pycon-ca-2013/quick-wins-for-better-website-security.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Dan Callahan</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/quick-wins-for-better-website-security.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn quick and easy techniques to improve your website's security,
protect against session hijacking, and defend against XSS and data
injection attacks.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Single Artifact Deployments for Python Applications</title><link href="https://pyvideo.org/pycon-ca-2013/single-artifact-deployments-for-python-applicatio-.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Jason Filipe</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/single-artifact-deployments-for-python-applicatio-.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying python applications should be fast, safe and repeatable. In
this talk I will outline a new deployment process developed at Wave
Accounting and show you the tips and tricks you'll need to build your
own system.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>The Red Balloon: Lessons on community building from the Public Lab</title><link href="https://pyvideo.org/pycon-ca-2013/tbd.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Dana Bauer</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/tbd.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;TBD&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Testing Django Projects at Scale</title><link href="https://pyvideo.org/pycon-ca-2013/testing-django-projects-at-scale.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Ash Christopher</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/testing-django-projects-at-scale.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Tests are extremely useful to developers, but as projects get larger,
tests can begin to get in the way of a smooth delivery pipeline. In this
talk I present some issues I have experienced, and offer 10 pragmatic
guidelines that may help developers maximize their test usefulness.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Why Open Source Works</title><link href="https://pyvideo.org/pycon-ca-2013/why-open-source-works.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-08-11:/pycon-ca-2013/why-open-source-works.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Open source software powers the world. But it defies a lot of
conventional expectations about how people organize and innovate. This
talk will explore the psychology, sociology, and economics of open
source, and how we come together to effectively build things.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>A Flask of full-text search with PostgreSQL</title><link href="https://pyvideo.org/pycon-ca-2013/a-flask-of-full-text-search-with-postgresql.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Dan Scott</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/a-flask-of-full-text-search-with-postgresql.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building a web application does not have to be hard! This talk walks
through a real web application, in under 200 lines of code, that uses
Flask for the web and PostgreSQL for its fast, built in text search
support.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Android: The Land that Python Forgot?</title><link href="https://pyvideo.org/pycon-ca-2013/android-the-land-that-python-forgot.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/android-the-land-that-python-forgot.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A fast-paced overview of mobile development for Python programmers. Is
Android the land that Python forgot, and if so, what can we do about it?&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Communicating Sequential Processes: Multicore Programs in Standard CPython</title><link href="https://pyvideo.org/pycon-ca-2013/communicating-sequential-processes-multicore-pro.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Simon Law</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/communicating-sequential-processes-multicore-pro.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We live in a multicore world now: your cellphone has more CPUs now than
your desktop did a decade ago.&lt;/p&gt;
&lt;p&gt;Traditionally, Python programs have been sequential. With Communicating
Sequential Processes (CSP), you can transform your CPython programs into
concurrent programs.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Diving into Open Data with IPython Notebook &amp; pandas</title><link href="https://pyvideo.org/pycon-ca-2013/diving-into-open-data-with-ipython-notebook-pan.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Julia Evans</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/diving-into-open-data-with-ipython-notebook-pan.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'll walk you through Python's best tools for getting a grip on some new
open data: IPython Notebook and pandas. I'll show you how to read in
data, clean it up, graph it, and draw some conclusions, using some open
data about the number of cyclists on Montréal's bike …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'll walk you through Python's best tools for getting a grip on some new
open data: IPython Notebook and pandas. I'll show you how to read in
data, clean it up, graph it, and draw some conclusions, using some open
data about the number of cyclists on Montréal's bike paths as an
example.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>From Source to Code: How CPython's Compiler Works</title><link href="https://pyvideo.org/pycon-ca-2013/from-source-to-code-how-cpythons-compiler-works.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/from-source-to-code-how-cpythons-compiler-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How the heck does CPython take a blob of bytes you call source code and
create another blob of bytes called bytecode which it is able to execute
to make the magic of Python programs work? This talk's aim is to provide
a conceptual answer to that question. The …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How the heck does CPython take a blob of bytes you call source code and
create another blob of bytes called bytecode which it is able to execute
to make the magic of Python programs work? This talk's aim is to provide
a conceptual answer to that question. The overall process of tokenizing,
parsing, creating an AST, and then finally emitting bytecode will be
covered.&lt;/p&gt;
&lt;p&gt;If you have no clue what any of those previous words meant, don't worry!
This talk will be accessible to people who are not compiler experts.
We'll also cover how various parts of the compiler are exposed through
Python's standard library so you can play with what you learn
afterwards.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Git Happens</title><link href="https://pyvideo.org/pycon-ca-2013/git-happens.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Jessica Kerr</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/git-happens.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Git: it's all the rage in source control. You may use it, but do you
understand it? A million tutorials on the internet tell you what to
type, but not why. Let me show you in pictures what's going on behind
the scenes in git.&lt;/p&gt;
&lt;p&gt;Learn how to navigate …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Git: it's all the rage in source control. You may use it, but do you
understand it? A million tutorials on the internet tell you what to
type, but not why. Let me show you in pictures what's going on behind
the scenes in git.&lt;/p&gt;
&lt;p&gt;Learn how to navigate, write, and untangle your commit history. Do more
than control your source: make it tell a story. After this talk, git
will make sense, and so will your project history.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>How to Make Friends and Influence Developers</title><link href="https://pyvideo.org/pycon-ca-2013/how-to-make-friends-and-influence-developers.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Mahdi Yusuf</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/how-to-make-friends-and-influence-developers.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will teach you how to grow a community around your project. I
will be sharing interesting data points from the PyCoder's Weekly
newsletter on what resonates well with developers, specifically in the
Python community.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>NLTK vs Twitter: A Voyage into Linguistic Frontiers</title><link href="https://pyvideo.org/pycon-ca-2013/nltk-vs-twitter-a-voyage-into-linguistic-frontie.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Max Thayer</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/nltk-vs-twitter-a-voyage-into-linguistic-frontie.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Language is complicated. We'll show you how to use statistics and
geography to do linguistic research without the hassle of semantics
using Flask for data collection, the NLTK for data parsing, and d3 for
pretty graphs.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>PRISM-AS-A-SERVICE: Not Subject to American Law</title><link href="https://pyvideo.org/pycon-ca-2013/prism-as-a-service-not-subject-to-american-law.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/prism-as-a-service-not-subject-to-american-law.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;X-as-a-Service products are integral in the U.S. tech industry with
their ability to take the pain out of server configuration, maintenance,
provisioning, data storage and other aspects of running a server. With
the recent outing of PRISM, a clandestine national security electronic
surveillance program, the next desirable IT …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;X-as-a-Service products are integral in the U.S. tech industry with
their ability to take the pain out of server configuration, maintenance,
provisioning, data storage and other aspects of running a server. With
the recent outing of PRISM, a clandestine national security electronic
surveillance program, the next desirable IT feature is &amp;quot;not subject to
American law.&amp;quot; How can we leverage cloud-based software while
maintaining privacy?&lt;/p&gt;
&lt;p&gt;This talk is a look at what exactly PRISM is, how PRISM affects cloud
services, and how best to approach securing data and preserving privacy
within the cloud.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Saturday Morning BreakfastSerial: Hacking Arduinos in Python</title><link href="https://pyvideo.org/pycon-ca-2013/saturday-morning-breakfastserial-hacking-arduino-0.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Swift</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/saturday-morning-breakfastserial-hacking-arduino-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Normally when you want to hack on arduino, you have to code in C. We as
Python devs know that sucks! Introducing BreakfastSerial, a framework
that makes it simple to interact with Arduinos using just Python. You'll
learn the basics, see some fun demos, and become a hardware-hacking pro …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Normally when you want to hack on arduino, you have to code in C. We as
Python devs know that sucks! Introducing BreakfastSerial, a framework
that makes it simple to interact with Arduinos using just Python. You'll
learn the basics, see some fun demos, and become a hardware-hacking pro
in no time.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Skyfield and 15 Years of Bad APIs</title><link href="https://pyvideo.org/pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I released the first version of PyEphem in 1998. Built with SWIG, it
made astronomical calculations in Python only slightly more convenient
than writing C code to make raw calls to the libastro library. A massive
rewrite five years later improved the interface, but a decade of
fielding questions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I released the first version of PyEphem in 1998. Built with SWIG, it
made astronomical calculations in Python only slightly more convenient
than writing C code to make raw calls to the libastro library. A massive
rewrite five years later improved the interface, but a decade of
fielding questions from users has convinced me to re-think how an API
can better help programmers cope with an unfamiliar and complex domain
like astronomy. This talk will explore how API design, NumPy
integration, and modern high-performance Python computation combine in
Skyfield, the new pure-Python astronomy library that I will release
during the PyCon Canada sprints!&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Supporting Everything - Python2/3, Mac/Linux/Windows</title><link href="https://pyvideo.org/pycon-ca-2013/supporting-everything-python23-maclinuxwind.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>James Saryerwinnie</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/supporting-everything-python23-maclinuxwind.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There comes a time in the life of a library where it must leave your
machine and find a home in a far away computer. That computer might even
run windows. This talk will show how you can write a library that
supports Linux/Mac/Windows and runs on …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There comes a time in the life of a library where it must leave your
machine and find a home in a far away computer. That computer might even
run windows. This talk will show how you can write a library that
supports Linux/Mac/Windows and runs on python 2 and 3.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>The Importance of Experimentation</title><link href="https://pyvideo.org/pycon-ca-2013/the-importance-of-experimentation.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Juan Lavista Ferres</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/the-importance-of-experimentation.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Controlled experiments, also called randomized experiments and A/B
tests, have had a profound influence on multiple fields, including
medicine, agriculture, manufacturing, and advertising. In software
development, multiple techniques are used to define product
requirements; controlled experiments provide a valuable way to assess
the impact of new features on …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Controlled experiments, also called randomized experiments and A/B
tests, have had a profound influence on multiple fields, including
medicine, agriculture, manufacturing, and advertising. In software
development, multiple techniques are used to define product
requirements; controlled experiments provide a valuable way to assess
the impact of new features on customer behavior.&lt;/p&gt;
&lt;p&gt;Having run hundreds of experiments on more than 20 websites, including
some of the world’s largest, like msn.com and bing.com, we have learned
some important practical lessons. These lessons, even for seemingly
simple univariate experiments, aren’t taught in Statistics 101.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>The Joys and Pains of Using Pyramid</title><link href="https://pyvideo.org/pycon-ca-2013/the-joys-and-pains-of-using-pyramid.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Éric Araujo</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/the-joys-and-pains-of-using-pyramid.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A tour of Pyramid’s best and worst features, from the perspective of
developers who love elegance and pragmatism.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>UnRESTful APIs with Tastypie</title><link href="https://pyvideo.org/pycon-ca-2013/unrestful-apis-with-tastypie.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Ari Lacenski</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/unrestful-apis-with-tastypie.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Web APIs built with REST patterns may sometimes need to offer services
that don't fit the REST model. This talk will discuss when an
application might need to use both REST and RPC patterns, and delve into
working examples for a Django site whose API runs on Tastypie.&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>ApplePy: An Apple ][ emulator in Python</title><link href="https://pyvideo.org/pycon-us-2013/applepy-an-apple-emulator-in-python.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>James Tauber</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/applepy-an-apple-emulator-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ApplePy is an Apple ][ emulator written in Python. It combines emulation
of the 6502 microprocessor with emulation of the keyboard, display
(including graphics mode), speaker, cassette and disk drive. This talk
will provide a background to Apple ][ internals then dive into the
Python code and the challenges of emulating …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ApplePy is an Apple ][ emulator written in Python. It combines emulation
of the 6502 microprocessor with emulation of the keyboard, display
(including graphics mode), speaker, cassette and disk drive. This talk
will provide a background to Apple ][ internals then dive into the
Python code and the challenges of emulating hardware.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Become a logging expert in 30 minutes</title><link href="https://pyvideo.org/pycon-us-2013/become-a-logging-expert-in-30-minutes.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Gavin M. Roy</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/become-a-logging-expert-in-30-minutes.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The logging module is one of the more complex areas of the Python
standard library. In this talk you will learn how to leverage loggers,
formatters, handlers and filters. In addition you will learn how to use
dictConfig and other formats to manage logging settings for your
applications.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Distributed Coordination with Python</title><link href="https://pyvideo.org/pycon-us-2013/distributed-coordination-with-python.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Ben Bangert</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/distributed-coordination-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Processes in a cluster can require controlled access to shared
resources, tracking available processes, and sharing state.
Unfortunately most tools in this category are oriented around Java. In
this talk I cover how to use Python to interact with Apache Zookeeper --
a fault-tolerant consistent data-store -- to write coordinated
distributed …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Processes in a cluster can require controlled access to shared
resources, tracking available processes, and sharing state.
Unfortunately most tools in this category are oriented around Java. In
this talk I cover how to use Python to interact with Apache Zookeeper --
a fault-tolerant consistent data-store -- to write coordinated
distributed fault-tolerant applications in Python.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>"Good enough" is good enough!</title><link href="https://pyvideo.org/pycon-us-2013/good-enough-is-good-enough.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/good-enough-is-good-enough.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Our culture's default assumption is that everybody should always be
striving for perfection -- settling for anything less is seen as a
regrettable compromise. This is wrong in most software development
situations: focus instead on keeping the software simple, just &amp;quot;good
enough&amp;quot;, launch it early, and iteratively improve, enhance, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Our culture's default assumption is that everybody should always be
striving for perfection -- settling for anything less is seen as a
regrettable compromise. This is wrong in most software development
situations: focus instead on keeping the software simple, just &amp;quot;good
enough&amp;quot;, launch it early, and iteratively improve, enhance, and
re-factor it. This is how software success is achieved!&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>How Import Works</title><link href="https://pyvideo.org/pycon-us-2013/how-import-works.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/how-import-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will go over how the simple &lt;tt class="docutils literal"&gt;from sys import version&lt;/tt&gt; turns
out to be slightly complicated. The details of imports -- from how the
import statement is interpreted to deciding what object to return --
will be discussed. While the talk will discuss things from the
perspective of Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will go over how the simple &lt;tt class="docutils literal"&gt;from sys import version&lt;/tt&gt; turns
out to be slightly complicated. The details of imports -- from how the
import statement is interpreted to deciding what object to return --
will be discussed. While the talk will discuss things from the
perspective of Python 3.3 (and thus importlib), the overall semantics
will (mostly) apply to older versions of Python.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Internationalization and Localization Done Right</title><link href="https://pyvideo.org/pycon-us-2013/internationalization-and-localization-done-right.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Ruchi Varshney</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/internationalization-and-localization-done-right.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A short intro to all aspects of making your Python web app ready for an
international audience, right from marking Python source, templates and
Javascript for translation to working with translation services,
maintaining and testing translation files. The talk will cover details
on Python gettext and open-source packages such …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A short intro to all aspects of making your Python web app ready for an
international audience, right from marking Python source, templates and
Javascript for translation to working with translation services,
maintaining and testing translation files. The talk will cover details
on Python gettext and open-source packages such as Babel and Potpie.
Examples are based on the Django i18n framework.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Iteration &amp; Generators: the Python Way</title><link href="https://pyvideo.org/pycon-us-2013/iteration-generators-the-python-way.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Luciano Ramalho</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/iteration-generators-the-python-way.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Did you know that &amp;quot;for a, (b, c) in s:&amp;quot; is a valid Python line? From the
elegant for statement through list/set/dict comprehensions and generator
functions, this talk shows how the Iterator pattern is so deeply
embedded in the syntax of Python, and so widely supported by …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Did you know that &amp;quot;for a, (b, c) in s:&amp;quot; is a valid Python line? From the
elegant for statement through list/set/dict comprehensions and generator
functions, this talk shows how the Iterator pattern is so deeply
embedded in the syntax of Python, and so widely supported by its
libraries, that some of its most powerful applications can be overlooked
by programmers coming from other languages.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Namespaces in Python</title><link href="https://pyvideo.org/pycon-us-2013/namespaces-in-python.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Eric Snow</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/namespaces-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In the infamous words of Tim Peters, &amp;quot;Namespaces are one honking great
idea -- let's do more of those!&amp;quot; (PEP 20) Python's type system is built
on the basis of well-bounded namespaces. Come look behind the curtain
and you'll see Python in a whole new light. We'll also talk about …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In the infamous words of Tim Peters, &amp;quot;Namespaces are one honking great
idea -- let's do more of those!&amp;quot; (PEP 20) Python's type system is built
on the basis of well-bounded namespaces. Come look behind the curtain
and you'll see Python in a whole new light. We'll also talk about how to
put this knowledge to use whenever you write modules, classes, and
functions.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Plover: Thought to Text at 240 WPM</title><link href="https://pyvideo.org/pycon-us-2013/plover-thought-to-text-at-240-wpm.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Mirabai Knight</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/plover-thought-to-text-at-240-wpm.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stenographic technology has been locked down to expensive, proprietary
hardware and software for decades, depriving the world of the most
efficient text entry system devised to date. Plover, a free,
cross-platform steno engine that works with $45 hardware, offers hackers
and hobbyists the ability to type at up to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stenographic technology has been locked down to expensive, proprietary
hardware and software for decades, depriving the world of the most
efficient text entry system devised to date. Plover, a free,
cross-platform steno engine that works with $45 hardware, offers hackers
and hobbyists the ability to type at up to 240 WPM in applications
ranging from wearable computing to captioning to coding.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Purely Python Imaging with Pymaging</title><link href="https://pyvideo.org/pycon-us-2013/purely-python-imaging-with-pymaging.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/purely-python-imaging-with-pymaging.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A little over a year ago, frustration with the state of image processing
in Python led me to start a project called pymaging. Pymaging is a pure
Python image processing library that works on Python 2.x and 3.x. This
talk will dive into why I started this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A little over a year ago, frustration with the state of image processing
in Python led me to start a project called pymaging. Pymaging is a pure
Python image processing library that works on Python 2.x and 3.x. This
talk will dive into why I started this project, how I dug into the
problems, what I learned about image formats and my goals for the future
of this project.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>PyNES: Python programming for Nintendo 8 bits.</title><link href="https://pyvideo.org/pycon-us-2013/pynes-python-programming-for-nintendo-8-bits.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Guto Maia</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/pynes-python-programming-for-nintendo-8-bits.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This lecture describes a journey guided by hardcore gaming experiences
from the past and how that lead to development of PyNES. What started as
a &amp;quot;Python ASM compiler for Nintendo 8 bits&amp;quot; and is now evolving as a
&amp;quot;Python programming for Nintendo 8 bits&amp;quot;. All the hacks and drawbacks …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This lecture describes a journey guided by hardcore gaming experiences
from the past and how that lead to development of PyNES. What started as
a &amp;quot;Python ASM compiler for Nintendo 8 bits&amp;quot; and is now evolving as a
&amp;quot;Python programming for Nintendo 8 bits&amp;quot;. All the hacks and drawbacks
faced will be shown. Told as an epic tale, that should encourage others
to fulfil the same path.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Server Log Analysis with Pandas</title><link href="https://pyvideo.org/pycon-us-2013/server-log-analysis-with-pandas-0.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Taavi Burns</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/server-log-analysis-with-pandas-0.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Use iPython, matplotlib, and Pandas to slice, dice, and visualize your
application's behaviour through its logs.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Use curses, don't swear</title><link href="https://pyvideo.org/pycon-us-2013/use-curses-dont-swear.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Sean Zicari</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/use-curses-dont-swear.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I find it very handy to be able to fire up the command line and make
changes through a well-designed CLI tool. I'd like to show how the 3rd
party urwid library or the built-in curses library can be used to build
such tools easily.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Using Python to Code by Voice</title><link href="https://pyvideo.org/pycon-us-2013/using-python-to-code-by-voice.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Tavis Rudd</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/using-python-to-code-by-voice.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I dictate my code using a voice recognition system with Python embedded
in it. In a fast paced live demo, I will code a small system and deploy
it without touching the keyboard. I hope to convince you that voice
recognition is no longer a crutch for the disabled …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I dictate my code using a voice recognition system with Python embedded
in it. In a fast paced live demo, I will code a small system and deploy
it without touching the keyboard. I hope to convince you that voice
recognition is no longer a crutch for the disabled or limited to plain
prose.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago I developed a case of Emacs Pinkie (RSI) so severe my
hands went numb and I could no longer type or work. Desperate, I tried
voice recognition. At first programming with it was painfully slow but,
as I couldn’t type, I persevered. After several months of vocab tweaking
and duct-tape coding in Python and Emacs Lisp, I had a system that
enabled me to code faster and more efficiently by voice than I ever had
by hand.&lt;/p&gt;
&lt;p&gt;In a fast-paced live demo, I will create a small system using Python,
plus a few other languages for good measure, and deploy it without
touching the keyboard. The demo gods will make a scheduled appearance. I
hope to convince you that voice recognition is no longer a crutch for
the disabled or limited to plain prose. It’s now a highly effective tool
that could benefit all programmers.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Worry-Free Parsers with Parsley</title><link href="https://pyvideo.org/pycon-us-2013/worry-free-parsers-with-parsley.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Allen Short</name></author><id>tag:pyvideo.org,2013-03-17:/pycon-us-2013/worry-free-parsers-with-parsley.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing parsers has often been a task difficult for programmers to take
on. Many of the tools available for parsing require writing grammar
rules and code that work very different from everything else in Python.
Parsley is a library that mixes the benefits of concise rule-based
grammars with a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing parsers has often been a task difficult for programmers to take
on. Many of the tools available for parsing require writing grammar
rules and code that work very different from everything else in Python.
Parsley is a library that mixes the benefits of concise rule-based
grammars with a parsing model that works the way you expect Python code
to work.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>5 powerful pyramid features</title><link href="https://pyvideo.org/pycon-us-2013/5-powerful-pyramid-features.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Carlos de la Guardia</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/5-powerful-pyramid-features.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pyramid is a web framework designed to do very well the fundamentals of
web applications. Even though it's minimalist in its goals, it provides
strong features to let developers deal with these fundamentals. In this
talk, we'll look at 5 specific Pyramid features that offer web
developers unique flexibility …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pyramid is a web framework designed to do very well the fundamentals of
web applications. Even though it's minimalist in its goals, it provides
strong features to let developers deal with these fundamentals. In this
talk, we'll look at 5 specific Pyramid features that offer web
developers unique flexibility and power.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>All-Singing All-Dancing Python Bytecode</title><link href="https://pyvideo.org/pycon-us-2013/all-singing-all-dancing-python-bytecode.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/all-singing-all-dancing-python-bytecode.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We all know Python is a bytecode interpreter, but what does that mean?
Come find out! You'll learn what Python bytecodes are, what they do, and
even how you can tinker with them. By the end of the talk you'll be an
expert. All code will be 100% Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We all know Python is a bytecode interpreter, but what does that mean?
Come find out! You'll learn what Python bytecodes are, what they do, and
even how you can tinker with them. By the end of the talk you'll be an
expert. All code will be 100% Python 3--knowledge of C not required!&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Asset Management in Python</title><link href="https://pyvideo.org/pycon-us-2013/asset-management-in-python.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Beau Lyddon</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/asset-management-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With the growth of Coffeescript, Less, SASS, etc..., compiling the
assets for your project is becoming more useful. This talk covers using
a Python library called Webassets to automate your build process. We
specifically focus on getting your Javascript and CSS compiling
automatically as you work. We show examples …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With the growth of Coffeescript, Less, SASS, etc..., compiling the
assets for your project is becoming more useful. This talk covers using
a Python library called Webassets to automate your build process. We
specifically focus on getting your Javascript and CSS compiling
automatically as you work. We show examples of integrating with common
web frameworks like Django and Flask.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Beyond Passwords: Secure Authentication with Mozilla Persona</title><link href="https://pyvideo.org/pycon-us-2013/beyond-passwords-secure-authentication-with-mozi-0.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Dan Callahan</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/beyond-passwords-secure-authentication-with-mozi-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mozilla Persona is a decentralized, cross-browser authentication system
that completely eliminates website passwords. It's simple, secure, and
privacy-protecting. This talk explores the design of Persona with a
focus on adding it as a login option to Python-based webapps, drawing
from Mozilla's own experience switching many Django (and non-Django)
sites …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mozilla Persona is a decentralized, cross-browser authentication system
that completely eliminates website passwords. It's simple, secure, and
privacy-protecting. This talk explores the design of Persona with a
focus on adding it as a login option to Python-based webapps, drawing
from Mozilla's own experience switching many Django (and non-Django)
sites away from passwords and to Persona.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Boundaries</title><link href="https://pyvideo.org/pycon-us-2013/boundaries.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Gary Bernhardt</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/boundaries.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An exploration of the boundaries between pieces of code, including:
isolated testing, behavior vs. data, mutation vs. immutability, how data
shape affords parallelism, transforming interface dependencies into data
dependencies, and what it might look like to build systems using all of
these to guide the boundaries between objects and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An exploration of the boundaries between pieces of code, including:
isolated testing, behavior vs. data, mutation vs. immutability, how data
shape affords parallelism, transforming interface dependencies into data
dependencies, and what it might look like to build systems using all of
these to guide the boundaries between objects and components.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Building an image processing pipeline with Python</title><link href="https://pyvideo.org/pycon-us-2013/building-an-image-processing-pipeline-with-python.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Franck Chastagnol</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/building-an-image-processing-pipeline-with-python.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk covers the details of how to build a highly scalable image
processing pipeline using Python and third-party open source libraries
and tools such as OpenCV, NumPy, Tesseract, ImageMagick, Tornado, Nginx
and MySQL.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Building full-stack scientific applications in Python</title><link href="https://pyvideo.org/pycon-us-2013/building-full-stack-scientific-applications-in-py.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Luke Lee</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/building-full-stack-scientific-applications-in-py.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a large collection of tools for scientific computing.
However, finding the right pieces and assembling them into a fast and
scale-able app can be a daunting task. This talk will explore common
requirements of scientific apps and how to fulfill those from the Python
ecosystem. It will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a large collection of tools for scientific computing.
However, finding the right pieces and assembling them into a fast and
scale-able app can be a daunting task. This talk will explore common
requirements of scientific apps and how to fulfill those from the Python
ecosystem. It will also provide a blueprint for building apps using
tools like PyQt, PyQwt, numpy, and HDF5.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Chef: Automating web application infrastructure</title><link href="https://pyvideo.org/pycon-us-2013/chef-automating-web-application-infrastructure.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Kate Heddleston</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/chef-automating-web-application-infrastructure.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk is going to focus on using Chef to create web application
projects, specifically a python project with a Django framework. Chef is
a configuration tool for managing infrastructure by allowing users to
automatically and reproducibly configure installations on servers. This
talk will cover what is Chef, why …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk is going to focus on using Chef to create web application
projects, specifically a python project with a Django framework. Chef is
a configuration tool for managing infrastructure by allowing users to
automatically and reproducibly configure installations on servers. This
talk will cover what is Chef, why automated server configuration is
important, and how Chef can be used personally.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Community Event Planning</title><link href="https://pyvideo.org/pycon-us-2013/community-event-planning.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Christie Koehler</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/community-event-planning.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hosting in-person events is a great way to develop and grow your local
Python community. If you’ve ever thought about hosting a code sprint,
hackathon, (un)conference or workshop, this talk is for you. I’ll
present quick overview of what you need to know to get started …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hosting in-person events is a great way to develop and grow your local
Python community. If you’ve ever thought about hosting a code sprint,
hackathon, (un)conference or workshop, this talk is for you. I’ll
present quick overview of what you need to know to get started planning
a successful event. Event planning workbook included.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Copyright and You</title><link href="https://pyvideo.org/pycon-us-2013/copyright-and-you.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Frank Siler</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/copyright-and-you.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The basics of copyright law mainly as applies to the United States but
also covering the fundamental tenets that govern international law. I
include quite a bit of overview material as well as talk about specific
licensing schemes, including open source schemes, and some recent trends
including open hardware …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The basics of copyright law mainly as applies to the United States but
also covering the fundamental tenets that govern international law. I
include quite a bit of overview material as well as talk about specific
licensing schemes, including open source schemes, and some recent trends
including open hardware.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Crypto 101</title><link href="https://pyvideo.org/pycon-us-2013/crypto-101.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/crypto-101.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to applied cryptography and information security
suitable for programmers of all ages and skill levels.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Customizing the Django Admin: The How and the Why</title><link href="https://pyvideo.org/pycon-us-2013/customizing-the-django-admin-the-how-and-the-why.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Lakshman Prasad</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/customizing-the-django-admin-the-how-and-the-why.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The abstraction and the flexibility the Django admin offers is matched
by few software, even today after half a decade of it's introduction.
The speaker has customized it in many ways over the years. This talk
reminisces over how supposedly large real world problems could be solved
with relatively …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The abstraction and the flexibility the Django admin offers is matched
by few software, even today after half a decade of it's introduction.
The speaker has customized it in many ways over the years. This talk
reminisces over how supposedly large real world problems could be solved
with relatively less development by leveraging the power of django admin
and using a few techniques.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Cython vs SWIG, Fight!</title><link href="https://pyvideo.org/pycon-us-2013/cython-vs-swig-fight.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Mark Kohler</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/cython-vs-swig-fight.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cython and SWIG are excellent, and yet very different tools for using C
libraries from Python. The goal of this talk is to introduce both tools,
discuss their strengths, their weaknesses, and the situations that
clearly favor one tool over the other.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Death by a thousand leaks: what statically-analysing 370 Python extensions looks like</title><link href="https://pyvideo.org/pycon-us-2013/death-by-a-thousand-leaks-what-statically-analys.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>David Malcolm</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/death-by-a-thousand-leaks-what-statically-analys.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What happens when you run a custom C static analysis tool (&amp;quot;cpychecker&amp;quot;)
on hundreds of Python extensions? I'll talk about the kinds of errors
that my tool found, how to run it on your own code, and how to prevent
memory leaks and crasher bugs in the C code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What happens when you run a custom C static analysis tool (&amp;quot;cpychecker&amp;quot;)
on hundreds of Python extensions? I'll talk about the kinds of errors
that my tool found, how to run it on your own code, and how to prevent
memory leaks and crasher bugs in the C code of your Python extension
modules.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Designers + Developers: Collaborating on your Python project</title><link href="https://pyvideo.org/pycon-us-2013/designers-developers-collaborating-on-your-pyt.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Julia Elman</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/designers-developers-collaborating-on-your-pyt.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Working in teams is an important part of what we do as developers &amp;amp;
designers. Whether it's desktop applications or mobile sites, we work
together to create successful end products. But how do we work together
in different environments? What is the best work-flow for a mix of skill
sets …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Working in teams is an important part of what we do as developers &amp;amp;
designers. Whether it's desktop applications or mobile sites, we work
together to create successful end products. But how do we work together
in different environments? What is the best work-flow for a mix of skill
sets?&lt;/p&gt;
&lt;p&gt;We'll be talking about our various methods &amp;amp; work-flows that we found
successful in working collaboratively.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Dispatch Magic</title><link href="https://pyvideo.org/pycon-us-2013/dispatch-magic.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Ben Bangert</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/dispatch-magic.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the most common tasks in modern web frameworks is to ease the
task of writing bits of code that are then called by the framework.
Handling this task is the first major undertaking of any web framework,
and the part that most web frameworks have in common …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the most common tasks in modern web frameworks is to ease the
task of writing bits of code that are then called by the framework.
Handling this task is the first major undertaking of any web framework,
and the part that most web frameworks have in common.&lt;/p&gt;
&lt;p&gt;How do frameworks locate this code? What basic patterns apply to all
frameworks? How does this make me be a better web programmer?&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Dynamic Code Patterns: Extending Your Applications with Plugins</title><link href="https://pyvideo.org/pycon-us-2013/dynamic-code-patterns-extending-your-application.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/dynamic-code-patterns-extending-your-application.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python makes loading code dynamically easy, allowing you to configure
and extend your application by discovering and loading extensions at
runtime. This presentation will discuss the techniques for dynamic code
loading used in several well-known applications and weigh the pros and
cons of each approach.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Getting started with automated testing</title><link href="https://pyvideo.org/pycon-us-2013/getting-started-with-automated-testing.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/getting-started-with-automated-testing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The hardest part of testing is getting the ball rolling. Once you've
picked your tools and started writing tests, the added confidence you
have in making changes to your code, and the time you save in repetitive
manual testing, can quickly become addictive! If you never got over that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The hardest part of testing is getting the ball rolling. Once you've
picked your tools and started writing tests, the added confidence you
have in making changes to your code, and the time you save in repetitive
manual testing, can quickly become addictive! If you never got over that
initial speedbump, or you've tried testing but it hasn't yet clicked,
this talk is for you.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>How (Not) To Build An OSS Community</title><link href="https://pyvideo.org/pycon-us-2013/how-not-to-build-an-oss-community.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Daniel Lindsley</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/how-not-to-build-an-oss-community.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A rough &amp;amp; tumble guide, based on the pains of experience, of what to
do/not do when trying to build an OSS community.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Integrating Jython with Java</title><link href="https://pyvideo.org/pycon-us-2013/integrating-jython-with-java.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Jim Baker</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/integrating-jython-with-java.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Jython provides a nearly seamless integration when using Java code.
Using Jython from Java is not nearly as seamless, at least not yet.
There are also several choices, depending on what you're doing, from
object factories to using Java Scripting (JSR-223) support. This talk
will discuss techniques, gotchas, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Jython provides a nearly seamless integration when using Java code.
Using Jython from Java is not nearly as seamless, at least not yet.
There are also several choices, depending on what you're doing, from
object factories to using Java Scripting (JSR-223) support. This talk
will discuss techniques, gotchas, and ongoing work to improve
integration.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Lessons Learned in Teaching Python</title><link href="https://pyvideo.org/pycon-us-2013/lessons-learned-in-teaching-python.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Alexandra Strong</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/lessons-learned-in-teaching-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sharing what you know with others is an extremely rewarding experience,
and may challenge and develop your knowledge of Python.&lt;/p&gt;
&lt;p&gt;I will share my teaching experiences; covering venues, materials, lesson
plans, technical difficulties, engagement, and more.&lt;/p&gt;
&lt;p&gt;If you've considered teaching Python, this talk will give you insight
into what …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sharing what you know with others is an extremely rewarding experience,
and may challenge and develop your knowledge of Python.&lt;/p&gt;
&lt;p&gt;I will share my teaching experiences; covering venues, materials, lesson
plans, technical difficulties, engagement, and more.&lt;/p&gt;
&lt;p&gt;If you've considered teaching Python, this talk will give you insight
into what it takes to keep your students engaged, and have some fun.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Let Them Configure!</title><link href="https://pyvideo.org/pycon-us-2013/let-them-configure.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/let-them-configure.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A look at possible approaches to introducing configurability to your
Python application, and a quick analysis of the most common problems.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Location, Location, Location</title><link href="https://pyvideo.org/pycon-us-2013/location-location-location.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Julia Grace</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/location-location-location.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Are you building a Django application that needs to handle geographic
location data? Are you unsure how to tackle using spatial databases, how
to jump into using GeoDjango or how to allow users to query for data by,
for example, zip code? I'll go over how to use GeoDjango …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Are you building a Django application that needs to handle geographic
location data? Are you unsure how to tackle using spatial databases, how
to jump into using GeoDjango or how to allow users to query for data by,
for example, zip code? I'll go over how to use GeoDjango, lessons
learned in using spatial databases, and how I built an API exposing
distance query functionality.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Logical Failures</title><link href="https://pyvideo.org/pycon-us-2013/logical-failures.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Luke Sneeringer</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/logical-failures.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Programmers are, by the nature of their work, logicians. However, logic
can be more challenging than we sometimes think, and it's easy for us to
make logical mistakes, especially when they're to justify a proposition
we already believe. This is, at its core, what makes us not very good …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Programmers are, by the nature of their work, logicians. However, logic
can be more challenging than we sometimes think, and it's easy for us to
make logical mistakes, especially when they're to justify a proposition
we already believe. This is, at its core, what makes us not very good at
testing our own stuff, and what makes architecting a technical system so
challenging.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Making Apache suck less for hosting Python web applications.</title><link href="https://pyvideo.org/pycon-us-2013/making-apache-suck-less-for-hosting-python-web-ap.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Graham Dumpleton</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/making-apache-suck-less-for-hosting-python-web-ap.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It is not hard to find developers who will tell you that Apache sucks
for running Python web applications. Is there a valid basis to such
claims or have they simply been misguided by the views of others? This
talk will endeavor to shine a light on the realities …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It is not hard to find developers who will tell you that Apache sucks
for running Python web applications. Is there a valid basis to such
claims or have they simply been misguided by the views of others? This
talk will endeavor to shine a light on the realities of and limitations
in working with Apache, as well as the challenges in implementing the
mod_wsgi module for Apache.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Mobile Application Testing with Python and Selenium</title><link href="https://pyvideo.org/pycon-us-2013/mobile-application-testing-with-python-and-seleni.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Jason Carr</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/mobile-application-testing-with-python-and-seleni.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Selenium has grown to be a mature platform on the desktop, but with
'mobile now' being the mantra for so many companies, can we use Selenium
to effectively test mobile apps? What about Native apps? This talk will
cover using Python to test mobile web applications with Selenium, as …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Selenium has grown to be a mature platform on the desktop, but with
'mobile now' being the mantra for so many companies, can we use Selenium
to effectively test mobile apps? What about Native apps? This talk will
cover using Python to test mobile web applications with Selenium, as
well as an in depth overview of the future of Selenium to test Native
iOS and Android applications.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>MTO On Blast: Using Python's Natural Language Toolkit to Model Gossip Blogs</title><link href="https://pyvideo.org/pycon-us-2013/mto-on-blast-using-pythons-natural-language-too.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Robert Elwell</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/mto-on-blast-using-pythons-natural-language-too.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk describes a project that uses the Natural Language Toolkit to
build a language model from a gossip blog. The tone is light-hearted,
but manages to introduce some core concepts in Python's most popular NLP
library as well as some basics on computational linguistics and
programming in Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk describes a project that uses the Natural Language Toolkit to
build a language model from a gossip blog. The tone is light-hearted,
but manages to introduce some core concepts in Python's most popular NLP
library as well as some basics on computational linguistics and
programming in Python.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Numba: A Dynamic Python compiler for Science</title><link href="https://pyvideo.org/pycon-us-2013/numba-a-dynamic-python-compiler-for-science.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Mark Florisson</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/numba-a-dynamic-python-compiler-for-science.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Numba is a compiler for Python syntax that uses the LLVM library and
llvmpy to convert specifically decorated Python functions to machine
code at run-time. It allows Python syntax to be used to do scientific
and numerical computing that is blazing fast yet tightly integrated with
the CPython run-time …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Numba is a compiler for Python syntax that uses the LLVM library and
llvmpy to convert specifically decorated Python functions to machine
code at run-time. It allows Python syntax to be used to do scientific
and numerical computing that is blazing fast yet tightly integrated with
the CPython run-time.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Panel: Directions for Packaging</title><link href="https://pyvideo.org/pycon-us-2013/panel-directions-for-packaging.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Daniel Holth</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/panel-directions-for-packaging.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What needs to happen to finally offer a first-class packaging experience
to Python users? Several of the people working directly on that problem
will be here to answer your questions.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Porting Django apps to Python 3</title><link href="https://pyvideo.org/pycon-us-2013/porting-django-apps-to-python-3.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2013-03-16:/pycon-us-2013/porting-django-apps-to-python-3.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django 1.5 now supports Python 3, so now's the time to start thinking
about porting your apps and sites. Come see how! I'll talk about the
porting techniques that work, and present two case studies: porting a
site, and porting a reusable app.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry></feed>