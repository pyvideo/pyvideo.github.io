<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nick-sweeting.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-04T00:00:00+00:00</updated><entry><title>Archiving the Internet Before it All Rots Away</title><link href="https://pyvideo.org/pygotham-2019/archiving-the-internet-before-it-all-rots-away.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Nick Sweeting</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/archiving-the-internet-before-it-all-rots-away.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Could you imagine an internet where all links stopped working after 4 years?
All the old blogs from the 90's... gone, all your hot takes on Twitter...
gone, all the news and reporting... gone.&lt;/p&gt;
&lt;p&gt;Some of that decay is good, no one wants the &lt;em&gt;entire&lt;/em&gt; internet to be
preserved for eterninty, but most of that decay leads to great content
disappearing forever, and future generations being deprived of access to the
most important medium for knowledge in the last half century.  If no one
worked on preserving that information, the human race would be facing a loss
of knowledge many times greater than the burning of the Library of
Alexandria.&lt;/p&gt;
&lt;p&gt;Luckily organizations like Archive.org and the Internet Preservation
Consortium work tirelessly every day to save what they can.  But archiving
doesn't have to be exclusive to big organizations, we can all play a part by
archiving the stuff that matters to us locally.  Learn about the internet
archiving community, the tools of the trade, and how to save content you
care about in this talk!&lt;/p&gt;
</summary></entry><entry><title>How I Learned to Stop Worrying and Love atomic(): Banking Blunders and Concurrency Challenges</title><link href="https://pyvideo.org/pygotham-2018/how-i-learned-to-stop-worrying-and-love-atomic-banking-blunders-and-concurrency-challenges.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Nick Sweeting</name></author><id>tag:pyvideo.org,2018-10-06:pygotham-2018/how-i-learned-to-stop-worrying-and-love-atomic-banking-blunders-and-concurrency-challenges.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know every Django app already behaves like a distributed system, even when it's running only on one server?
In this talk I'll go over some of the distributed systems &amp;amp; database fundamentals that you'll neeed to understand when
building a Python project that handles sensitive data.  We'll focus on intermediate and advanced usage of the
Django ORM, but many of the concepts apply equally well to SQLAlchemy and other Python ORMs.&lt;/p&gt;
&lt;p&gt;We'll go over:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to use append-only logs to order events across your system&lt;/li&gt;
&lt;li&gt;the meaning of transaction isolation levels&lt;/li&gt;
&lt;li&gt;how and when to use atomic compare-and-swap operations&lt;/li&gt;
&lt;li&gt;type safety for currencies&lt;/li&gt;
&lt;li&gt;new distributed-SQL databases like spanner, TiDB, and Cockroachdb&lt;/li&gt;
&lt;li&gt;transaction lifecycles when doing async processing with django-channels&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We spent the last two years building an online poker engine based on Django + channels, and we have plenty of stories about our failures and discoveries to share along the way.
Come learn about all the ways it's possible to screw up when handling sensitive data, and how to avoid them!&lt;/p&gt;
</summary></entry></feed>