<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 01 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Metaclasses for fun and profit: Making a declarative GUI implementation</title><link>https://pyvideo.org/europython-2016/metaclasses-for-fun-and-profit-making-a-declarative-gui-implementation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anders Hammarquist - Metaclasses for fun and profit: Making a declarative GUI implementation
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/metaclasses-for-fun-and-profit-making-a-declarative-gui-implementation"&gt;https://ep2016.europython.eu//conference/talks/metaclasses-for-fun-and-profit-making-a-declarative-gui-implementation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;When standard Python syntax doesn't cut it, apply metaclasses to make
it do what you want. Here I present our metaclass-based implementation
of a declarative GUI layout syntax to inspire ideas for what to do
when your goals don't fit the Python syntax.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;When overhauling the user interface of Autolabel's labeling printers,
we wanted a clean way to describe the layout of the settings widgets.
The structure we came up with was a declarative class layout that
leverages Python's metaclass concept to build the underlying GTK
widget structure.&lt;/p&gt;
&lt;p&gt;I will present the implementation to hopefully inspire you to apply
metaclass techniques to problems that standard Python syntax can't
quite solve. If that fails, you will at least have a way to
declaratively construct GTK GUIs.&lt;/p&gt;
&lt;p&gt;A short, non-exaustive, summary of concepts I will mention includes
metaclasses (obviously), class hierarchies, method resolution
order, super(), and anecdotes of dealing with GTK.&lt;/p&gt;
&lt;p&gt;You may find some similarities with my talk on Python as a domain
specific language at Europython 2006
&lt;a class="reference external" href="http://indico.cern.ch/event/44/session/41/contribution/35"&gt;http://indico.cern.ch/event/44/session/41/contribution/35&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides are available at &lt;a class="reference external" href="https://www2.openend.se/~iko/ep2016"&gt;https://www2.openend.se/~iko/ep2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Example code on Bitbucket &lt;a class="reference external" href="https://bitbucket.org/iko/ep2016-declarative-gui/"&gt;https://bitbucket.org/iko/ep2016-declarative-gui/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Hammarquist</dc:creator><pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-01:europython-2016/metaclasses-for-fun-and-profit-making-a-declarative-gui-implementation.html</guid></item><item><title>Multi-document consistency with MongoDB</title><link>https://pyvideo.org/europython-2012/multi-document-consistency-with-mongodb.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Anders Hammarquist - 4 JULY 2012 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working with MongoDB, especially if you are coming from (or
converting an application) the SQL world, you will probably miss the SQL
transaction, which gives you, among other things, atomic writes. MongoDB
only provides atomic writes to one document. We will show you how you
can implement multi-document writes that are, if all writers cooperate,
consistent across multiple documents and either writes all changes
completely or fail without writing any changes. Audience: People who are
looking at SQL alternatives, but still need some sort of
transaction-like consistency. Understanding of parallellism issues, race
conditions and deadlocks, may be helpful. MongoDB knowledge is not
needed. Slides online at: &lt;a class="reference external" href="http://www2.openend.se/~iko/ep2012/"&gt;http://www2.openend.se/~iko/ep2012/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Hammarquist</dc:creator><pubDate>Thu, 05 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-05:europython-2012/multi-document-consistency-with-mongodb.html</guid></item></channel></rss>