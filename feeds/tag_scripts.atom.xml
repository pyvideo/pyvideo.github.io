<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_scripts.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-21T00:00:00+00:00</updated><entry><title>Python 103: Mmmm... Understanding Python's Memory Model, Mutability, and Methods</title><link href="https://pyvideo.org/europython-2011/python-103-mmmm-understanding-pythons-memory.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/python-103-mmmm-understanding-pythons-memory.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python 101, you learned basic Python syntax, what its flow control
mechanisms and basic data types are and how they work. You learned how
to write functions and developed executable Python scripts that actually
work! You probably also learned how to create files, how to open, read
from or write to them, and close them. Perhaps you've even learned a
little bit of object- oriented programming, developed a couple of Python
classes, most with user- defined methods, and have no problems creating
instances to use in your applications.&lt;/p&gt;
&lt;p&gt;In Python 102 (or equivalent in experience), you explored further, using
default values and variable arguments for functions, discovered how to
catch exceptions and write handlers for them… perhaps you've even
created your own exceptions. You have found some useful Python standard
library modules and using them actively in your own applications. You've
quite comfortable with OOP, creating classes and using instances
regularly in your programs. In fact, you've been coding Python for 6
months to a couple of years now. You're much more serious about Python
now because you're no longer a &amp;quot;beginner.&amp;quot; You've even taken notice at
the growing number of jobs requesting or requiring Python skills.&lt;/p&gt;
&lt;p&gt;As an aspiring Python developer, you are starting to be more aware of
the entire ecosystem around you, and think you may be ready for
&amp;quot;prime-time&amp;quot; and feel able to take on a full-time position as a Python
programmer. However, if you have experienced one or more of the below
questions or problems, this talk may be for you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Throughout this time, you've experienced strange bugs in your code.
In particular, you notice that things don't always behave the way you
expect and have spent a good amount of time debugging various parts
of your software that you thought were actually correct - you work
around them but are disturbed and don't have the time nor committment
to fully investigate.&lt;/li&gt;
&lt;li&gt;You've created classes and objects just fine but wish that you could
use some of Python's operators (like +, in, len(), etc.) with your
objects, which feel like they're &amp;quot;2nd-class&amp;quot; citizens compared to the
standard data types.&lt;/li&gt;
&lt;li&gt;Do you know what functional evaluation strategy means? Have you been
asked or considered whether Python is &amp;quot;call-by-value&amp;quot; or
&amp;quot;call-by-reference&amp;quot;? It is important to you, and can you clearly
explain your answer?&lt;/li&gt;
&lt;li&gt;What does &amp;quot;mutability&amp;quot; mean? What is the difference between mutable
and immutable objects? Which Python objects are mutable and which
aren't?&lt;/li&gt;
&lt;li&gt;Can you clearly explain both the output in the two code snippets
below, and even more importantly, &lt;em&gt;why&lt;/em&gt; the output is the way it is?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SNIPPET A x = 42 y = x x += 1 print x print y&lt;/p&gt;
&lt;p&gt;SNIPPET B x = [1, 2, 3] y = x x[0] = 4 print x print y&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have you seen odd behavior in container or collection objects like
lists or dictionaries? For example, you may have copied those types
of objects and discovered weird things happening to both the original
and the copy, or that you seen something not quite right if you loop
through it and remove items from it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is what Python 103 is for… to fill in all the missing gaps, to
answer all the questions (including those above) that do not seem to
have easy-to-find answers on Google, but only if you have the desire to
learn more about the interpreter to take your Python skills to the next
level.&lt;/p&gt;
</summary><category term="debugging"></category><category term="exceptions"></category><category term="memory"></category><category term="scripts"></category></entry><entry><title>Remote execution of Python scripts using Viri</title><link href="https://pyvideo.org/europython-2011/remote-execution-of-python-scripts-using-viri.html" rel="alternate"></link><published>2011-07-18T00:00:00+00:00</published><updated>2011-07-18T00:00:00+00:00</updated><author><name>Marc Garcia</name></author><id>tag:pyvideo.org,2011-07-18:europython-2011/remote-execution-of-python-scripts-using-viri.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Marc Garcia - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Viri is a system for automatic distribution and execution of Python code
on remote machines. This is especially useful when dealing with a large
group of hosts.&lt;/p&gt;
&lt;p&gt;With Viri, Sysadmins can write their own scripts, and easily distribute
and execute them on any number of remote machines. Depending on the
number of computers to administrate, Viri can save thousands of hours,
that Sysadmins would spend transferring files, logging into remote
hosts, and waiting for the scripts to finish. Viri automates the whole
process.&lt;/p&gt;
&lt;p&gt;Viri can also be useful for remotely managing host settings. It should
work together with an application where the information about hosts
would be maintained. This information can include cron tasks, firewall
rules, backup settings,etc. After a simple Integration of this
application with your Viri infrastructure, you can change any settings
in the application, and see how it gets applied on the target host
automatically.&lt;/p&gt;
&lt;p&gt;The talk will cover next topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Viri&lt;/li&gt;
&lt;li&gt;Live demo on how to install Viri, write a Viri task, and execute it
in a remote host&lt;/li&gt;
&lt;li&gt;Security concerns using Viri&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check &lt;a class="reference external" href="http://www.viriproject.com"&gt;Viri project page&lt;/a&gt;&lt;/p&gt;
</summary><category term="backup"></category><category term="logging"></category><category term="scripts"></category></entry><entry><title>PyConAU 2010: Lightning talks - Saturday</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--lightning-talks---saturday.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Amy Maree</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--lightning-talks---saturday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks - Saturday&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Amy Maree: Talking about OLPC XO, Python and Pippy.&lt;/li&gt;
&lt;li&gt;05:55 - Jurgen Brendel: Jython and writing performance critical parts
in Java.&lt;/li&gt;
&lt;li&gt;09:50 - Dave Claridge: Embedding Python and robots that play soccer.&lt;/li&gt;
&lt;li&gt;15:10 - Paul Dyson: inflect.py&lt;/li&gt;
&lt;li&gt;20:20 - Richard Jones: cocos2d, a python game library&lt;/li&gt;
&lt;li&gt;25:40 - Brian Quinlan: Why you probably don't want to work for Google&lt;/li&gt;
&lt;li&gt;30:50 - Nick Coghlan: Running Python scripts.&lt;/li&gt;
&lt;li&gt;34:55 - Philip: How to introduce Python to a large organization&lt;/li&gt;
&lt;li&gt;38:55 - Ryan Kelly: with hacks: re-usable tools for with-statement
hackery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PMC curator notes: Paul Dyson's demo at 18:28 is great.&lt;/p&gt;
&lt;p&gt;If anyone know's Philip's last name (and/or if we spelled his first name
wrong, too), let us know in the comments.&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="cocos2d"></category><category term="google"></category><category term="hacks"></category><category term="inflect.py"></category><category term="jython"></category><category term="olpc"></category><category term="pippy"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="robots"></category><category term="scripts"></category><category term="with"></category></entry></feed>