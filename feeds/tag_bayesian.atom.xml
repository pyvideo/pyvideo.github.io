<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_bayesian.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-27T00:00:00+00:00</updated><entry><title>A Hitchhiker's Guide to designing a Bayesian library in Python</title><link href="https://pyvideo.org/pydata-cordoba-2019/a-hitchhikers-guide-to-designing-a-bayesian-library-in-python.html" rel="alternate"></link><published>2019-09-27T00:00:00+00:00</published><updated>2019-09-27T00:00:00+00:00</updated><author><name>Junpeng Lao</name></author><id>tag:pyvideo.org,2019-09-27:pydata-cordoba-2019/a-hitchhikers-guide-to-designing-a-bayesian-library-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From the perspective of a PyMC and TFP developer, I will give a developer introduction of PyMC3, and talk about some of our current design pitfall and future direction(s). I hope that with these insights and consideration of how a modern (i.e., depending on some autograd system) probabilistic libraries is designed, it could help user and practitioner to write better probabilistic programs.&lt;/p&gt;
</summary><category term="PyMC3"></category><category term="bayesian"></category></entry><entry><title>Writing effective bayesian programs using TensorFlow and TFP</title><link href="https://pyvideo.org/pydata-cordoba-2019/writing-effective-bayesian-programs-using-tensorflow-and-tfp.html" rel="alternate"></link><published>2019-09-27T00:00:00+00:00</published><updated>2019-09-27T00:00:00+00:00</updated><author><name>Junpeng Lao</name></author><id>tag:pyvideo.org,2019-09-27:pydata-cordoba-2019/writing-effective-bayesian-programs-using-tensorflow-and-tfp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial aims to provide some examples of how to write effective Bayesian programs using TensorFlow and Tensorflow Probability. In TFP land, effectiveness usually comes from writing model that could generate batch-able functions, and utilizing modern hardware (GPU, TPU) with compiler accelerator (i.e., XLA). I will give a walkthrough on how to do so and highlight some gotchas.&lt;/p&gt;
</summary><category term="bayesian"></category><category term="tensorflow"></category><category term="probability"></category></entry><entry><title>Bayesian Network Modeling using R and Python</title><link href="https://pyvideo.org/pydata-dc-2016/bayesian-network-modeling-using-r-and-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Pragyansmita Nayak</name></author><id>tag:pyvideo.org,2016-10-08:pydata-dc-2016/bayesian-network-modeling-using-r-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Bayesian Networks (BN) are increasingly being applied for real-world data problems. They provide the much desired complexity in representing the uncertainty of the predicted results of a model. The networks are easy to follow and better understand the relationships of the attributes of the dataset. As part of this talk, we will look into the existing R and Python packages that enables BN usage.&lt;/p&gt;
&lt;p&gt;Bayesian Networks are increasingly being applied for real-world data problems. They provide the much desired complexity in representing the uncertainty of the predicted results of a model. The networks are easy to follow and better understand the inter-relationships of the different attributes of the dataset. As part of this talk, we will look into the existing R and Python packages that enable BN learning and prediction. The pros and cons of the available packages will be discussed as well as new capabilities that will broaden the application of BN networks.&lt;/p&gt;
</summary><category term="bayesian"></category><category term="network"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 3</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 2</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-0.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 1</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry></feed>