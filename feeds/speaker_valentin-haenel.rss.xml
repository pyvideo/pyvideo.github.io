<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 05 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Understanding Numba</title><link>https://pyvideo.org/euroscipy-2019/understanding-numba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In this talk I will take you on a whirlwind tour of Numba, the
just-in-time,&lt;/div&gt;
&lt;div class="line"&gt;type-specializing, function compiler for accelerating
numerically-focused&lt;/div&gt;
&lt;div class="line"&gt;Python. Numba can compile the computationally intensive functions of
your&lt;/div&gt;
&lt;div class="line"&gt;numerical programs and libraries from Python/NumPy to highly optimized
binary&lt;/div&gt;
&lt;div class="line"&gt;code. It does this by inferring the data types used inside these
functions and&lt;/div&gt;
&lt;div class="line"&gt;uses that information to generate code that is specific to those data
types&lt;/div&gt;
&lt;div class="line"&gt;and specialised for your target hardware. On top of that, it does all
of this&lt;/div&gt;
&lt;div class="line"&gt;on-the-fly---or just-in-time---as your program runs. This
significantly reduces&lt;/div&gt;
&lt;div class="line"&gt;the potential complexity that traditionally comes with pre-compiling
and&lt;/div&gt;
&lt;div class="line"&gt;shipping numerical code for a variety of operating systems, Python
versions and&lt;/div&gt;
&lt;div class="line"&gt;hardware architectures. All you need in principle, is to
&lt;tt class="docutils literal"&gt;conda install numba&lt;/tt&gt;&lt;/div&gt;
&lt;div class="line"&gt;and decorate your compute intensive functions with &lt;tt class="docutils literal"&gt;&amp;#64;nuba.jit&lt;/tt&gt;!&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This talk will equip you with a mental model of how Numba is
implemented and&lt;/div&gt;
&lt;div class="line"&gt;how it works at the algorithmic level. You will gain a deeper
understanding of&lt;/div&gt;
&lt;div class="line"&gt;the types of use-cases where Numba excels and why. Also, you will
understand&lt;/div&gt;
&lt;div class="line"&gt;the limitations and caveats that exist within Numba, including any
potential&lt;/div&gt;
&lt;div class="line"&gt;ideas and strategies that might alleviate these. At the end of the
talk you&lt;/div&gt;
&lt;div class="line"&gt;will be in a good position to decide if Numba is for you and you will
have&lt;/div&gt;
&lt;div class="line"&gt;learnt about the concrete steps you need to take to include it as a
dependency&lt;/div&gt;
&lt;div class="line"&gt;in your program or library.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this talk I will take you on a whirlwind tour of Numba and you will
be quipped with a mental model of how Numba works and what it is good
at. At the end, you will be able to decide if Numba could be useful for
you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenel</dc:creator><pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-05:euroscipy-2019/understanding-numba.html</guid></item><item><title>Create CUDA kernels from Python using Numba and CuPy</title><link>https://pyvideo.org/pydata-amsterdam-2019/create-cuda-kernels-from-python-using-numba-and-cupy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll explain how to do GPU-Accelerated numerical computing from Python using the Numba Python compiler in combination with the CuPy GPU array library. Numba is an open-source compiler that can translate Python functions for execution on the GPU without requiring users to write any C or C++ code. Numba's just-in-time compilation ability makes it easy to interactively experiment with GPU computing in the Jupyter notebook. Combining Numba with CuPy, a nearly complete implementation of the NumPy API for CUDA, creates a high productivity GPU development environment. Learn the basics of using Numba with CuPy, techniques for automatically parallelizing custom Python functions on arrays, and how to create and launch CUDA kernels entirely from Python. Access to appropriate hardware will be provided in the form of access to GPU based cloud resources.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenel</dc:creator><pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-10:pydata-amsterdam-2019/create-cuda-kernels-from-python-using-numba-and-cupy.html</guid></item><item><title>Battle-hardened advice on efficient data loading for deep learning on videos.</title><link>https://pyvideo.org/pydata-berlin-2018/battle-hardened-advice-on-efficient-data-loading-for-deep-learning-on-videos.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting GPUs fully utilized can be tricky when dealing with video data.
In this talk I will explore this topic in depth and present some
insights gained during a year of Deep Learning on videos at TwentyBN.
The talk will feature set of best practices and some open source
recommendations that can help accelerate your deep learning process on
video problems in practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenel</dc:creator><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-08:pydata-berlin-2018/battle-hardened-advice-on-efficient-data-loading-for-deep-learning-on-videos.html</guid></item><item><title>Fast Serialization of Numpy Arrays with Bloscpack</title><link>https://pyvideo.org/pydata-berlin-2014/fast-serialization-of-numpy-arrays-with-bloscpack.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bloscpack [1] is a reference implementation and file-format for fast
serialization of numerical data. It features lightweight, chunked and
compressed storage, based on the extremely fast Blosc [2] metacodec and
supports serialization of Numpy arrays out-of-the-box. Recently, Blosc
-- being the metacodec that it is -- has received support for using the
popular and widely used Snappy [3], LZ4 [4], and ZLib [5] codecs, and
so, now Bloscpack supports serializing Numpy arrays easily with those
codecs! In this talk I will present recent benchmarks of Bloscpack
performance on a variety of artificial and real-world datasets with a
special focus on the newly available codecs. In these benchmarks I will
compare Bloscpack, both performance and usability wise, to alternatives
such as Numpy's native offerings (NPZ and NPY), HDF5/PyTables [6], and
if time permits, to novel bleeding edge solutions. Lastly I will argue
that compressed and chunked storage format such as Bloscpack can be and
somewhat already is a useful substrate on which to build more powerful
applications such as online analytical processing engines and
distributed computing frameworks. [1]:
&lt;a class="reference external" href="https://github.com/Blosc/bloscpack"&gt;https://github.com/Blosc/bloscpack&lt;/a&gt; [2]:
&lt;a class="reference external" href="https://github.com/Blosc/c-blosc/"&gt;https://github.com/Blosc/c-blosc/&lt;/a&gt; [3]: &lt;a class="reference external" href="http://code.google.com/p/snappy/"&gt;http://code.google.com/p/snappy/&lt;/a&gt;
[4]: &lt;a class="reference external" href="http://code.google.com/p/lz4/"&gt;http://code.google.com/p/lz4/&lt;/a&gt; [5]: &lt;a class="reference external" href="http://www.zlib.net/"&gt;http://www.zlib.net/&lt;/a&gt; [6]:
&lt;a class="reference external" href="http://www.pytables.org/moin"&gt;http://www.pytables.org/moin&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenel</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-27:pydata-berlin-2014/fast-serialization-of-numpy-arrays-with-bloscpack.html</guid></item><item><title>Panel: The challenges and frontiers of data science in Europe</title><link>https://pyvideo.org/pydata-berlin-2014/panel-the-challenges-and-frontiers-of-data-scien.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Drake</dc:creator><pubDate>Sun, 27 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-27:pydata-berlin-2014/panel-the-challenges-and-frontiers-of-data-scien.html</guid></item></channel></rss>