<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Loren Arthur</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 16 May 2024 00:00:00 +0000</lastBuildDate><item><title>Rethinking How We're Linking: What to do when speeding things up slows them down (Sponsor: Meta)</title><link>https://pyvideo.org/pycon-us-2024/rethinking-how-were-linking-what-to-do-when-speeding-things-up-slows-them-down-sponsor-meta.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The common belief that re-writing Modules as CExtensions will improve
performance only works to a point. At Meta, we operate at a massive
scale with applications that can include over 20,000 shared libraries.
When loading that many files, import performance slows down
significantly. In this session, I will share how we greatly improved
performance by statically linking native extensions into the runtime.
Get ready for a quick overview of linkers and loaders, a brief foray
into binary layout, and a deep dive into how Native extensions work in
Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Loren Arthur</dc:creator><pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-16:/pycon-us-2024/rethinking-how-were-linking-what-to-do-when-speeding-things-up-slows-them-down-sponsor-meta.html</guid><category>PyCon US 2024</category></item></channel></rss>