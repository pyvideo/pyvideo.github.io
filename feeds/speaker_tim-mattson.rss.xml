<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Tim Mattson</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 12 Jul 2021 00:00:00 +0000</lastBuildDate><item><title>Multithreaded parallel Python through OpenMP support in Numba</title><link>https://pyvideo.org/scipy-2021/multithreaded-parallel-python-through-openmp-support-in-numba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A modern CPU delivers performance through parallelism. A program that exploits the performance available from a CPU must run in parallel on multiple cores. This is usually best done through multithreading. Threads belong to a process and share the memory associated with that process. The most popular approach for writing multithreaded code is to use directives to tell the compiler how to convert code into multithreaded code. The most commonly used directive-based API for writing multithreaded code is OpenMP. Python is not designed for parallel programming with threads. The GlobalInterpreterLock (GIL) prevents multiple threads from simultaneously accessing Python objects. This effectively prevents data races and makes Python naturally thread safe. Consequently, the GIL prevents parallel programming with multiple threads and therefore keeps Python from accessing the full performance from a CPU. In this paper, we describe a solution to this problem. We implement OpenMP in Python so programmers can easily annotate their code and then let the Numba just-in-time (JIT) compiler generate multithreaded, OpenMP code in LLVM, thereby bypassing the GIL. We describe this new multithreading system for Python and and show that the performance in our early tests is on par with the analogous C code. The purpose of this talk is to highlight the trends that emerged across the following functional domains: data, visualization, scale, and collaboration.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Anderson</dc:creator><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-07-12:/scipy-2021/multithreaded-parallel-python-through-openmp-support-in-numba.html</guid><category>SciPy 2021</category></item></channel></rss>