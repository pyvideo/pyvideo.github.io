<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-mikolas.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-24T00:00:00+00:00</updated><entry><title>R2 DAY2-05 for physics in blender: (or, what light looks like) - David Mikolas (PyCon APAC 2015)</title><link href="https://pyvideo.org/pycon-apac-2015/r2-day2-05-for-physics-in-blender-or-what-light.html" rel="alternate"></link><published>2015-08-24T00:00:00+00:00</published><updated>2015-08-24T00:00:00+00:00</updated><author><name>David Mikolas</name></author><id>tag:pyvideo.org,2015-08-24:pycon-apac-2015/r2-day2-05-for-physics-in-blender-or-what-light.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: David Mikolas&lt;/p&gt;
&lt;p&gt;When I first told my friends and family that I was taking some time off to learn about blender and python for scientific visualization, some of them became confused and worried, thinking I had snakes in my kitchen. In fact, I'm a scientist/engineer and I need an environment to calculate things and show the results, and these two open source packages offered everything I need!&lt;/p&gt;
&lt;p&gt;Python has become a popular platform in physics for both professional research and teaching settings. Scipy and numpy have most of the goodies we need, and there are plenty of other libraries out there. However, depending on one's previous experience with other tools, learning to really use python &amp;quot;pythonically&amp;quot; can sometimes be a little bumpy.&lt;/p&gt;
&lt;p&gt;In this talk I'll first give a quick tutorial on how to get started doing physics in python the right way - the tutorial that I &lt;em&gt;wish&lt;/em&gt; I could have read in the beginning. I'll give some examples of interactive programs using the matplotlib widgets as a user interface, for a variety of engineering and physics applications. This is the International Year of Light [1] celebrating a number of optical &amp;quot;birthdays&amp;quot;, so we'll look at some of those with Python.&lt;/p&gt;
&lt;p&gt;Then I'll show some results where I cast a complicated math/optics problem as a collection of python objects (in python, everything is an object!) to make the solution more tangible. Since blender - a rendering and animation environment with python scripting built-in - eats python objects for breakfast, one can just transfer the code into blender and make animated 3D visualization of the problem setup, calculation, and final results.&lt;/p&gt;
&lt;p&gt;[1]  www.nature.com/news/light2015-1.16846&lt;/p&gt;
&lt;p&gt;About the speaker&lt;/p&gt;
&lt;p&gt;David enjoys physics, math, optics, engineering... and now, python! He's worked in the semiconductor industry, both in process development and metrology. Currently he's looking at &amp;quot;what's next&amp;quot; in optical communications.  Note: check the personal link close to PyCon for additional information about talk.&lt;/p&gt;
&lt;p&gt;NEW LINK (July 2015)!! Works better. I'll be adding posts regularly now.&lt;/p&gt;
&lt;p&gt;個人網頁連結 &lt;a class="reference external" href="http://davidmikolas.blogspot.tw/"&gt;http://davidmikolas.blogspot.tw/&lt;/a&gt;
頭銜 Engineer/Scientist&lt;/p&gt;
</summary></entry></feed>