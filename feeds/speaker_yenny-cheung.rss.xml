<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 11 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Lightning talks on Thursday, July 11</title><link>https://pyvideo.org/europython-2019/lightning-talks-on-thursday-july-11.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Petr Viktorin</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/lightning-talks-on-thursday-july-11.html</guid></item><item><title>Why You Should Pursue Public Speaking and How to Get There</title><link>https://pyvideo.org/europython-2019/why-you-should-pursue-public-speaking-and-how-to-get-there.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fear of public speaking is the most common of all phobias. Want to speak
confidently in front of the crowd? This talk shares tips on how to
overcome the fear, and ways to get started. You will be prepared to
brace presenting from a team meeting to a conference.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yenny Cheung</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/why-you-should-pursue-public-speaking-and-how-to-get-there.html</guid><category>Community</category></item><item><title>Why you should pursue public speaking and how to get there</title><link>https://pyvideo.org/pycon-italia-2019/why-you-should-pursue-public-speaking-and-how-to-get-there.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fear of public speaking is the most common of all phobias. Want to speak
confidently in front of the crowd? This talk shares tips on how to
overcome the fear, and ways to get started. You will be prepared to
brace presenting from a team meeting to a conference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1803"&gt;https://python.it/feedback-1803&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 15:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yenny Cheung</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/why-you-should-pursue-public-speaking-and-how-to-get-there.html</guid></item><item><title>Creating an inclusive corporate culture</title><link>https://pyvideo.org/pycon-de-2018/creating-an-inclusive-corporate-culture.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Having a tech career as a minority is challenging. It could mean being
the only one to speak against the popular opinion, or becoming more
visible to get the same level of recognition. What can we do on the
corporate level to make sure everyone feels welcome and retain these
talents? Creating an inclusive corporate culture helps us achieve just
that. This talk shares concrete steps that employees and employers can
take to improve minorities in techâ€™s sense of belonging and engagement:&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yenny Cheung</dc:creator><pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-25:pycon-de-2018/creating-an-inclusive-corporate-culture.html</guid><category>Business &amp; Start-Ups</category><category>Community</category></item><item><title>Washing away code smells</title><link>https://pyvideo.org/europython-2018/washing-away-code-smells.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does your code smell? Have a weird fragrance? It turns out code smells
are a real thing and an amazing conceptualization of suboptimal design.
This talk helps you identify code smells in Python. It also shows you
how to wash them away by the technique of refactoring. You will learn
the art of writing Pythonic, clean and maintainable code.&lt;/p&gt;
&lt;p&gt;Code smells refer to the symptoms of problematic code design.
Identifying different types of code smells is the first step to
successful refactoring. I will talk through some classic examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unnecessary long and complex code&lt;/li&gt;
&lt;li&gt;Using mutable data structures&lt;/li&gt;
&lt;li&gt;Uncommunicative naming&lt;/li&gt;
&lt;li&gt;Coupled code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing what to refactor, I will share a few learnings that lead to good
quality code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The boy scout rule: always leave the code cleaner than you found it&lt;/li&gt;
&lt;li&gt;Pythonic data structures: Enum, Namedtuple&lt;/li&gt;
&lt;li&gt;The art of naming&lt;/li&gt;
&lt;li&gt;DRY and the separation of concerns principle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will also share tips on using refactoring at your company, which
includes convincing your product manager, looking out for code smells
during code reviews, and employing automatic tools.&lt;/p&gt;
&lt;p&gt;The speaker has previously presented on Talk Python To Me Podcast:
&lt;a class="reference external" href="https://talkpython.fm/episodes/show/150/technical-lessons-learned-from"&gt;https://talkpython.fm/episodes/show/150/technical-lessons-learned-from&lt;/a&gt;-
pythonic-refactoring, and at PyCon.DE:
&lt;a class="reference external" href="https://www.youtube.com/watch?v=Yq9-b2JKUyU"&gt;https://www.youtube.com/watch?v=Yq9-b2JKUyU&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yenny Cheung</dc:creator><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-25:europython-2018/washing-away-code-smells.html</guid></item><item><title>Technical Lessons Learned from Pythonic Refactoring</title><link>https://pyvideo.org/pycon-de-2017/technical-lessons-learned-from-pythonic-refactoring.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Yenny Cheung&lt;/strong&gt; (&amp;#64;yennycheung)&lt;/p&gt;
&lt;p&gt;Yenny Cheung, Software Engineer, Biz National, Yelp&lt;/p&gt;
&lt;p&gt;Originally from Hong Kong, Yenny moved to Pennsylvania in the US to study Computer Science at Swarthmore College. She attended the Grace Hopper Conference three times during her college years. After graduation, Yenny moved to Hamburg and joined Yelp as a full-stack software engineer. Yenny works on the Biz National team, where she is scaling advertising tools and reporting for multi-location businesses and franchises. She is a pioneer of the Awesome Women in Engineering Group at Yelp in Germany and she is active in Women in Engineering Meetups in Hamburg. Outside of work, Yenny enjoys yelping for good food and painting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ever stumbled upon poorly-maintained codebases that suck away your productivity? Fear no more! This talk addresses how to identify code smell (from Brie to Bleu cheese) and go through examples to refactor code and APIs. You will learn the art of writing clean, maintainable and idiomatic Python code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk targets beginner software engineers yet also aims to provide interesting content for more advanced developers. You will leave knowing more about code smells and understanding the whys and hows of refactoring.&lt;/p&gt;
&lt;p&gt;Code smells refer to the symptoms of problematic code design. Identifying different types of code smells is the first step to successful refactoring. I will talk through some classic examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unnecessarily complex code&lt;/li&gt;
&lt;li&gt;Inappropriate naming&lt;/li&gt;
&lt;li&gt;Duplicated code&lt;/li&gt;
&lt;li&gt;Non-modularized code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing what to refactor, I will share a few learnings that lead to good quality code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Good python practices (The Zen of Python &amp;amp; PEP8)&lt;/li&gt;
&lt;li&gt;Good use of data structures (named tuples &amp;amp; sets)&lt;/li&gt;
&lt;li&gt;The art of pythonic naming&lt;/li&gt;
&lt;li&gt;DRY principle&lt;/li&gt;
&lt;li&gt;Separation of concerns principle (modularity &amp;amp; encapsulation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refactoring also makes testing easier. I will discuss how to write unit tests that cover all use cases. Finally I will talk about integration testing strategies that ensure that you and people who want to modify your API in the future are not breaking upstream code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yenny Cheung</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/technical-lessons-learned-from-pythonic-refactoring.html</guid><category>code smell</category><category>api refactoring</category><category>python web</category></item></channel></rss>