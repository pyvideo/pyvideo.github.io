<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_djangocon-au-2013.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-07-05T00:00:00+00:00</updated><entry><title>A state of REST.</title><link href="https://pyvideo.org/djangocon-au-2013/a-state-of-rest.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Curtis Maloney</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/a-state-of-rest.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In the Django world there are currently two major REST API libraries,
with a new one starting to take hold.&lt;/p&gt;
&lt;p&gt;But how do you choose?&lt;/p&gt;
&lt;p&gt;In this talk I plan to give details on how these three apps (TastyPie,
Django REST Framework, and django-nap) differ, as well as overlap.&lt;/p&gt;
</summary></entry><entry><title>Core Developer Panel</title><link href="https://pyvideo.org/djangocon-au-2013/core-developer-panel.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/core-developer-panel.html</id><summary type="html"></summary></entry><entry><title>Django Unstrained</title><link href="https://pyvideo.org/djangocon-au-2013/django-unstrained.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Simon Meers</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/django-unstrained.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A compilation of outstanding tips, tricks and tools for meeting
perfectionist's deadlines with even greater elegance and efficiency.
Topics include project structure tips, time-saving template tags, handy
model mixin classes, admin ninja skills, testing tools, robust handling
of dynamic hyperlinks within rich text content, replacing raw ID widgets
with client-friendly ones, convenient view and model method decorators,
novel ways of keeping DRY, harnessing inheritance in CBVs, and as much
more as I can fit into my time allocation.&lt;/p&gt;
</summary></entry><entry><title>DjangoCon AU Lightning Talks</title><link href="https://pyvideo.org/djangocon-au-2013/djangocon-au-lightning-talks.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/djangocon-au-lightning-talks.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Keynote: A divided web, a review of the role of frameworks</title><link href="https://pyvideo.org/djangocon-au-2013/keynote-a-divided-web-a-review-of-the-role-of-f.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/keynote-a-divided-web-a-review-of-the-role-of-f.html</id><summary type="html"></summary></entry><entry><title>Keynote: The myth of goldilocks and the three frameworks, Pyramid, Django and Plone</title><link href="https://pyvideo.org/djangocon-au-2013/keynote-the-myth-of-goldilocks-and-the-three-fra.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/keynote-the-myth-of-goldilocks-and-the-three-fra.html</id><summary type="html"></summary></entry><entry><title>Porting Django apps to Python 3</title><link href="https://pyvideo.org/djangocon-au-2013/porting-django-apps-to-python-3-0.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/porting-django-apps-to-python-3-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django 1.5 now supports Python 3, so now's the time to start thinking
about porting your apps and sites. Come see how! I'll talk about the
porting techniques that work, and present two case studies: porting a
site, and porting a reusable app.&lt;/p&gt;
</summary></entry><entry><title>Secrets of the testing masters</title><link href="https://pyvideo.org/djangocon-au-2013/secrets-of-the-testing-masters.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/secrets-of-the-testing-masters.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django ship with a wide range of tools to help you test your web
application, but some of the best tools for testing Django don't come in
the box.&lt;/p&gt;
&lt;p&gt;In this talk, you'll get a brief introduction to two of those tools -
Mock and Factory Boy - showing when they should be used, and some
practical examples of their usage in a Django test suite.&lt;/p&gt;
</summary></entry><entry><title>The Server Side: The coolest parts of backend development with Django</title><link href="https://pyvideo.org/djangocon-au-2013/the-server-side-the-coolest-parts-of-backend-dev.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Tom Eastman</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/the-server-side-the-coolest-parts-of-backend-dev.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There are few feelings more sweet than being a web-app backend
developer, and knowing that the vaguaries and frustrations of front-end
design, Javascript inconsistencies, and web-browser quirks are &amp;quot;Someone
Else's Problem&amp;quot;.&lt;/p&gt;
&lt;p&gt;The backend developer, instead, has just three goals: Make the system
lightning fast and infinitely scalable; ensure its absolute security and
impregnability; and guarantee its absolute correctness, stability, and
general perfection in the face of all input at all times.&lt;/p&gt;
&lt;p&gt;I'll take that over having to debug CSS rendering quirks any day of the
week.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover these three goals and how Django helps make each
one achievable, including a tour of some of the lesser known features of
the framework, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Magic tricks you can do with Django's caching framework beyond the
naive &amp;quot;cache this page&amp;quot;, and its ability to take advantage of the
browser's own cache in marvellous ways.&lt;/li&gt;
&lt;li&gt;Taking Django's testing framework to its logical (and illogical)
extremes. Including clever uses of selenium and webdriver to run unit
tests, integration tests and even Javascript tests.&lt;/li&gt;
&lt;li&gt;Considerations of Django use and web security. Including the sorts of
things Django does a great job of protecting you from, and the things
where your own due dilligence will always be required.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Unleash the ponies! Using FeinCMS to add content tools that users love to any Django model</title><link href="https://pyvideo.org/djangocon-au-2013/unleash-the-ponies-using-feincms-to-add-content.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Dr. Greg Turner</name></author><id>tag:pyvideo.org,2013-07-05:djangocon-au-2013/unleash-the-ponies-using-feincms-to-add-content.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Site editors often struggle with editing rich content and managing
variations in layout in Django admin. By rich content we mean text,
images, video, tables, and so on. Trying to squeeze all this content
into a single rich-text editor is like trying to jam a magical pony into
a dog kennel. A better approach is to use a rich content framework like
FeinCMS. FeinCMS is a sensible, flexible framework which allows rich
content of any shape to be manipulated within any Django model in your
project.&lt;/p&gt;
&lt;p&gt;This talk describes what FeinCMS does and how it works, and most
importantly whether it should be pronounced to rhyme with &amp;quot;Vein&amp;quot; or
&amp;quot;Vine&amp;quot;. The talk is supported with working example code that shows the
progression of a FeinCMS project through several levels of
functionality, plus some real-world demonstrations of fully-developed
functionality.&lt;/p&gt;
&lt;p&gt;A FeinCMS Document model is just like any Django model, except it has
one or more 'templates'. Each 'template' has one or more regions, and
each region is a place where an unlimited amount of rich content types
can be added, removed or rearranged to form the content in that region.
This is all wrapped up in a nifty lightweight Javascript interface for
Django's admin, and a surprisingly simple implementation at the database
level.&lt;/p&gt;
&lt;p&gt;The types of content available in a given region is defined by a
collection of abstract Django models (e.g. one model to represent a
passage of text, another model to represent an image, and so on).
Developers are free to define their own FeinCMS content types, using all
the usual features of Django models.&lt;/p&gt;
&lt;p&gt;At the HTML template level, each FeinCMS content item renders a standard
template, and can optionally render different templates in different
circumstances.&lt;/p&gt;
&lt;p&gt;This flexibility allows Django developers to quickly design and build
CMSes that match the content and layout perfectly, meaning happier
content editors, fewer maintenance headaches and greater magical pony
freedom.&lt;/p&gt;
</summary></entry></feed>