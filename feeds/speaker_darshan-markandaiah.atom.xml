<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_darshan-markandaiah.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>The magic of Python</title><link href="https://pyvideo.org/pygotham-2019/the-magic-of-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Darshan Markandaiah</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/the-magic-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come to this talk to learn more about magic methods in Python. You might already be aware of some magic methods such as &lt;cite&gt;__repr__&lt;/cite&gt; and &lt;cite&gt;__len__&lt;/cite&gt;, but Python has a number of other methods that aid in writing cleaner, idiomatic code. In this talk, I will enumerate over a range of these magic methods along with example code snippets. I'll then be touching upon Abstract Base Classes that offer free functionality if you implement certain methods on your class. I'll end by introducing Context Managers and describing how you can write your own Context Managers using a few magic methods.&lt;/p&gt;
</summary></entry><entry><title>The Magic of Python</title><link href="https://pyvideo.org/pyohio-2019/the-magic-of-python.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Darshan Markandaiah</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/the-magic-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has many built in magic functions that are used internally by
classes for certain actions. For example, adding two numbers calls the
&lt;tt class="docutils literal"&gt;__add__&lt;/tt&gt; method and iterating over a list calls the &lt;tt class="docutils literal"&gt;__iter__&lt;/tt&gt;
method. I will expand on this Duck Typing principle and enumerate over a
range of magic methods that you can add to your classes to have a
cleaner codebase.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce and enumerate over magic methods
available in Python. This is an introductory talk for anyone with basic
familiarity of Python. For each class of magic methods that I introduce,
I'll provide example code samples.&lt;/p&gt;
&lt;p&gt;I will start off by introducing basic magic methods that allow you to do
things like initializing objects and printing readable versions of
objects. I will then go over select magic methods that allow for
emulating numeric types. I will then cover methods that enable you to
emulate sequences and write objects that can be indexed and iterated
over. I will conclude by talking about context managers (that allow for
managing pre-step and post-step actions) and Abstract Base Classes in
the abc module that will allow for you to get free functionality if you
provide the implementation for certain magic methods on your classes.&lt;/p&gt;
</summary></entry></feed>