<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 24 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Lazy Looping: The Next Iteration</title><link>https://pyvideo.org/djangocon-us-2019/lazy-looping-the-next-iteration.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lazy Looping: The Next Iteration by Trey Hunner&lt;/p&gt;
&lt;p&gt;In this talk we'll learn about the properties of iterators, learn how to create our own iterators with generators, and take a look at how iterators and generators allow us to write our looping code in a fundamentally different way.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/lazy-looping-the-next-iteration/"&gt;https://2019.djangocon.us/talks/lazy-looping-the-next-iteration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Trey Hunner ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/treyhunner"&gt;https://twitter.com/treyhunner&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://treyhunner.com"&gt;http://treyhunner.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-24:djangocon-us-2019/lazy-looping-the-next-iteration.html</guid></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pycon-au-2019/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes youâ€™ll find what might seem like a bug in Python but occasionally these bugs reveal themselves to be misunderstood features. During this talk weâ€™ll look at a number of Pythonâ€™s unique features and quirks and attempt to re-shape our mental models of how Python works.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/python-oddities-explained"&gt;https://2019.pycon-au.org/talks/python-oddities-explained&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Aug  4 13:30:00 2019 at C3.3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-04:pycon-au-2019/python-oddities-explained.html</guid></item><item><title>Lazy Looping in Python: Making and Using Generators and Iterators</title><link>https://pyvideo.org/pycon-us-2019/lazy-looping-in-python-making-and-using-generators-and-iterators.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When processing large amounts of data in Python, we often reach for
lists. Unfortunately, processing data using large lists make for ugly
code that can be memory inefficient and slow. Python's solution to this
problem is lazy looping using generators and iterators.&lt;/p&gt;
&lt;p&gt;During this tutorial we'll learn a number of lazy looping techniques
which will help you write more efficient and more readable Python code.
We'll get practice creating generators, playing with iterators, and
using generators and iterators to drastically restructure our code in a
more descriptive data-centric way.&lt;/p&gt;
&lt;p&gt;You'll walk out of this tutorial with hands-on experience with Python's
various lazy looping constructs and a greater appreciation for how
looping works under the hood in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 01 May 2019 13:20:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-01:pycon-us-2019/lazy-looping-in-python-making-and-using-generators-and-iterators.html</guid><category>tutorial</category></item><item><title>Meaningful Mentoring Moments</title><link>https://pyvideo.org/pycascades-2019/meaningful-mentoring-moments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're mentoring at a programming workshop and your learner is having trouble with their code: what do you do?&lt;/p&gt;
&lt;p&gt;Let's learn how to be a good in-person code mentor!&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/meaningful-mentoring-moments/"&gt;https://2019.pycascades.com/talks/meaningful-mentoring-moments/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-24:pycascades-2019/meaningful-mentoring-moments.html</guid></item><item><title>Easier Classes: Python Classes Without All The Cruft</title><link>https://pyvideo.org/north-bay-python-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll take a look at how to cut down on the boilerplate
required in making a well-behaved Python class. We'll first see how to
make classes with proper string representations, comparability,
iterability, and immutability. Then we'll dive into helper tools
built-in to the standard library and available in third-party libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-03:north-bay-python-2018/easier-classes-python-classes-without-all-the-cruft.html</guid></item><item><title>Easier Classes: Python Classes Without All The Cruft</title><link>https://pyvideo.org/djangocon-us-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When bundling up data, sometimes tuples and dictionaries donâ€™t quite cut
it. Pythonâ€™s classes are powerful tools for data storage and
manipulation, but it can take quite a bit of boilerplate code to make a
well-behaved Python class. In this talk weâ€™re going to discuss how a
well-behaved class should work and take a look at a number of helper
libraries for creating well-behaved classes.&lt;/p&gt;
&lt;p&gt;Weâ€™ll first see how to make classes with proper string representations,
comparability, iterability, and immutability. Then weâ€™ll dive into
helper tools built-in to the standard library and available in
third-party libraries and briefly discuss which of these tools makes
sense to use with Djangoâ€™s classes.&lt;/p&gt;
&lt;p&gt;Weâ€™ll look at namedtuple, NamedTuple (not a typo), attrs, and the new
Python 3.7 dataclasses.&lt;/p&gt;
&lt;p&gt;Most of the libraries discussed in this talk are only available in
Python 3, so if youâ€™re not using Python 3, hopefully this talk will
encourage you to upgrade.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-17:djangocon-us-2018/easier-classes-python-classes-without-all-the-cruft.html</guid></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pygotham-2018/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.&lt;/p&gt;
&lt;p&gt;Warning: this talk will include many Python head scratchers so show up prepared to think on your feet!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/python-oddities-explained.html</guid></item><item><title>Easier Classes: Python Classes Without All the Cruft</title><link>https://pyvideo.org/pyohio-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll take a look at how to cut down on the boilerplate
required in making a well-behaved Python class. We'll first see how to
make classes with proper string representations, comparability,
iterability, and immutability. Then we'll dive into helper tools
built-in to the standard library and available in third-party libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-28:pyohio-2018/easier-classes-python-classes-without-all-the-cruft.html</guid></item><item><title>Python 2 to 3: How to Upgrade and What Features to Start Using</title><link>https://pyvideo.org/pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.&lt;/p&gt;
&lt;p&gt;During this talk we'll briefly discuss how to start &lt;strong&gt;the process of upgrading your code to Python 3&lt;/strong&gt;. We'll then dive into some of &lt;strong&gt;the most useful Python 3 features&lt;/strong&gt; that you'll be able to start embracing once you drop Python 2 support.&lt;/p&gt;
&lt;p&gt;A number of the most powerful Python 3 features are syntactic features that are &lt;strong&gt;Python 3 only&lt;/strong&gt;. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.&lt;/p&gt;
&lt;p&gt;After this talk I hope you'll be inspired to fully upgrade your code to Python 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html</guid><category>python3</category><category>python3 migration</category></item><item><title>Using List Comprehensions and Generator Expressions For Data Processing</title><link>https://pyvideo.org/pycon-us-2018/using-list-comprehensions-and-generator-expressions-for-data-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating one list out of another list is a very common thing to do in Python, so common that Python includes a special construct just for this purpose: list comprehensions. We'll get hands-on experience using list comprehensions, set comprehensions, and dictionary comprehensions during this tutorial. We'll also learn how and when we can slightly tweak our comprehensions to turn them into more performant generator expressions.&lt;/p&gt;
&lt;p&gt;We will learn some tricks for figuring out which of our &amp;quot;for&amp;quot; loops can be rewritten as comprehensions and which cannot. We will focus heavily on code readability and code clarity and we'll discuss when comprehensions help readability and when they hurt.&lt;/p&gt;
&lt;p&gt;All new skills will be acquired through practice. We'll work through many exercises both individually and as a group. All students will also receive a cheat sheet which can be used for guidance during future comprehension-writing journeys.&lt;/p&gt;
&lt;p&gt;A laptop with Python installed is required for this workshop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-09:pycon-us-2018/using-list-comprehensions-and-generator-expressions-for-data-processing.html</guid></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/north-bay-python-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?&lt;/p&gt;
&lt;p&gt;Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers &lt;cite&gt;for&lt;/cite&gt; loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-12-02:north-bay-python-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?&lt;/dt&gt;
&lt;dd&gt;Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers &lt;cite&gt;for&lt;/cite&gt; loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid></item><item><title>Comprehensible Comprehensions</title><link>https://pyvideo.org/pycon-au-2017/comprehensible-comprehensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Finding list comprehensions incomprehensible? Having trouble figuring out when to use list comprehensions or just plain for loops?  Come to this talk and learn the how, when, and why of list comprehensions.&lt;/p&gt;
&lt;p&gt;Finding list comprehensions incomprehensible?  Having trouble figuring out when to use list comprehensions or just plain &lt;cite&gt;for&lt;/cite&gt; loops?&lt;/p&gt;
&lt;p&gt;If you find comprehensions tricky to write or perplexing to read, this talk is for you.&lt;/p&gt;
&lt;p&gt;We're going to learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when and how to turn a &lt;cite&gt;for&lt;/cite&gt; loop into a comprehension&lt;/li&gt;
&lt;li&gt;why list comprehensions are often hard to read&lt;/li&gt;
&lt;li&gt;how to use list, set, an dictionary comprehensions as well as generator expressions&lt;/li&gt;
&lt;li&gt;how to make your comprehensions even more readable than your loops&lt;/li&gt;
&lt;li&gt;when and how not to use comprehensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll come away from this talk with a cheat sheet for helping you remember when and how to use comprehensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:pycon-au-2017/comprehensible-comprehensions.html</guid></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/pycon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?
Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers for loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:pycon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid></item><item><title>Readability Counts</title><link>https://pyvideo.org/pycon-us-2017/readability-counts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you found unreadable PEP8-compliant code and wondered how to fix
it? Have you ever seen code that was simply a pleasure to read?&lt;/p&gt;
&lt;p&gt;If you've ever wondered what makes code easy to read, this talk is for
you.&lt;/p&gt;
&lt;p&gt;During this talk we'll learn a number of techniques for refactoring code
to improve readability and maintainability.&lt;/p&gt;
&lt;p&gt;We'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;whitespace&lt;/li&gt;
&lt;li&gt;self-documenting code&lt;/li&gt;
&lt;li&gt;modularity&lt;/li&gt;
&lt;li&gt;expectation management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll end with a checklist for improving the readability of your own
code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/readability-counts.html</guid></item><item><title>Hands-On Intro to Python for New Programmers</title><link>https://pyvideo.org/pycon-us-2017/hands-on-intro-to-python-for-new-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brand new to programming and want to get some hands-on Python
experience? Let's learn some Python together!&lt;/p&gt;
&lt;p&gt;During this tutorial we will work through a number of programming
exercises together. We'll be doing a lot of asking questions, taking
guesses, trying things out, and seeking out help from others.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Types of things in Python: strings, numbers, lists&lt;/li&gt;
&lt;li&gt;Conditionally executing code&lt;/li&gt;
&lt;li&gt;Repeating code with loops&lt;/li&gt;
&lt;li&gt;Getting user input&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/hands-on-intro-to-python-for-new-programmers.html</guid></item><item><title>Readable Regular Expressions</title><link>https://pyvideo.org/pycon-us-2017/readable-regular-expressions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are regular expressions, what are they useful for, and why are they
so hard to read? We'll learn what regular expressions are good for, how
to make our own regular expressions, and how to make our regular
expressions friendly and readable (yes it's possible, sort of).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/readable-regular-expressions.html</guid></item><item><title>Readability Counts</title><link>https://pyvideo.org/djangocon-us-2016/readability-counts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2016 - Readability Counts by Trey Hunner&lt;/p&gt;
&lt;p&gt;Most code is read many more times than it is written. Constructing readable code is important, but that doesn't mean it's easy.&lt;/p&gt;
&lt;p&gt;If you've ever found unreadable PEP8-compliant code and wondered how to fix it, this talk is for you.&lt;/p&gt;
&lt;p&gt;Long-lived code must be maintainable and readability is a prerequisite of maintainability. It's easier to identify unreadable code than it is to create readable code.&lt;/p&gt;
&lt;p&gt;Let's talk about how to shape tricky code into something more readable and more maintainable.&lt;/p&gt;
&lt;p&gt;During this talk we'll discuss:&lt;/p&gt;
&lt;p&gt;whitespace
self-documenting code
modularity
expectation management
We'll conclude this talk with a checklist of questions you can use to make your own code more readable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-10:djangocon-us-2016/readability-counts.html</guid></item><item><title>Day 1 Lightning Talks by Many People</title><link>https://pyvideo.org/djangocon-us-2016/day-1-lightning-talks-by-many-people.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks by Many People&lt;/p&gt;
&lt;p&gt;00:04 - Adrienne Lowe&lt;/p&gt;
&lt;p&gt;06:33 - Russell Keith-Magee&lt;/p&gt;
&lt;p&gt;09:42 - Tom Christie&lt;/p&gt;
&lt;p&gt;15:14 - Trey Hunner&lt;/p&gt;
&lt;p&gt;18:39 - Paul Logston&lt;/p&gt;
&lt;p&gt;20:28 - Timothy Allen&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrienne Lowe</dc:creator><pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-18:djangocon-us-2016/day-1-lightning-talks-by-many-people.html</guid></item><item><title>Regular Expressions</title><link>https://pyvideo.org/pycon-us-2016/trey-hunner-regular-expressions-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Trey Hunner&lt;/p&gt;
&lt;p&gt;What are regular expressions, what are they useful for, and why are they so hard to read?  We'll learn what regular expressions are good for, how to make our own regular expressions, and how to make our regular expressions friendly and readable (yes it's possible, sort of).&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:pycon-us-2016/trey-hunner-regular-expressions-pycon-2016.html</guid></item><item><title>Lightning Talks - 2016-05-30</title><link>https://pyvideo.org/pycon-us-2016/lightning-talks-2016-05-30.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ka-Ping Yee</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/lightning-talks-2016-05-30.html</guid><category>lightning talks</category></item><item><title>Lightning Talks - Part 2</title><link>https://pyvideo.org/djangocon-us-2015/lightning-talks-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Dmitry Filippov &amp;quot;Django assistance in PyCharm&amp;quot;&lt;/p&gt;
&lt;p&gt;Paul Bailey &amp;quot;End the Holy Wars of Formatting&amp;quot;&lt;/p&gt;
&lt;p&gt;Trey Hunner &amp;quot;JavaScript is Becoming Pythonic&amp;quot;&lt;/p&gt;
&lt;p&gt;Eduardo Rivas &amp;quot; Sublime Text Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Jeff Sumner &amp;quot;Texas Swim Center&amp;quot;&lt;/p&gt;
&lt;p&gt;Francisco Saldana &amp;quot;Keeping Fast Fast: Rapid Iteration with
TransactionTestCase&amp;quot;&lt;/p&gt;
&lt;p&gt;Raphael Merx &amp;quot;Mocking Outbound Requests with HTTPretty&amp;quot;&lt;/p&gt;
&lt;p&gt;James Tauber &amp;quot;Building a Learning Management System with Pinax&amp;quot;&lt;/p&gt;
&lt;p&gt;Miroslav Shubernetskiy &amp;quot;Filtering in Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Armin Ronacher &amp;quot;rb - Scaling Redis in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;Brendan Sterne &amp;quot;Code Wiki&amp;quot;&lt;/p&gt;
&lt;p&gt;Russell Keith-Magee &amp;quot;Professional Yak Coiffure&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dmitry Filippov</dc:creator><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-18:djangocon-us-2015/lightning-talks-part-2.html</guid><category>lightning talks</category></item></channel></rss>