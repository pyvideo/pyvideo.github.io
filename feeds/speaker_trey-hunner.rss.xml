<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Trey Hunner</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 Sep 2025 00:00:00 +0000</lastBuildDate><item><title>Lightning Talks - Part 2</title><link>https://pyvideo.org/djangocon-us-2015/lightning-talks-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Dmitry Filippov &amp;quot;Django assistance in PyCharm&amp;quot;&lt;/p&gt;
&lt;p&gt;Paul Bailey &amp;quot;End the Holy Wars of Formatting&amp;quot;&lt;/p&gt;
&lt;p&gt;Trey Hunner &amp;quot;JavaScript is Becoming Pythonic&amp;quot;&lt;/p&gt;
&lt;p&gt;Eduardo Rivas &amp;quot; Sublime Text Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Jeff Sumner &amp;quot;Texas Swim Center&amp;quot;&lt;/p&gt;
&lt;p&gt;Francisco Saldana &amp;quot;Keeping Fast Fast: Rapid Iteration with
TransactionTestCase&amp;quot;&lt;/p&gt;
&lt;p&gt;Raphael Merx &amp;quot;Mocking Outbound Requests with HTTPretty&amp;quot;&lt;/p&gt;
&lt;p&gt;James Tauber &amp;quot;Building a Learning Management System with Pinax&amp;quot;&lt;/p&gt;
&lt;p&gt;Miroslav Shubernetskiy &amp;quot;Filtering in Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Armin Ronacher &amp;quot;rb - Scaling Redis in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;Brendan Sterne &amp;quot;Code Wiki&amp;quot;&lt;/p&gt;
&lt;p&gt;Russell Keith-Magee &amp;quot;Professional Yak Coiffure&amp;quot;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dmitry Filippov</dc:creator><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-18:/djangocon-us-2015/lightning-talks-part-2.html</guid><category>DjangoCon US 2015</category><category>lightning talks</category></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/djangocon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?
Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers for loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid><category>DjangoCon AU 2017</category></item><item><title>Readability Counts</title><link>https://pyvideo.org/djangocon-us-2016/readability-counts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2016 - Readability Counts by Trey Hunner&lt;/p&gt;
&lt;p&gt;Most code is read many more times than it is written. Constructing readable code is important, but that doesn't mean it's easy.&lt;/p&gt;
&lt;p&gt;If you've ever found unreadable PEP8-compliant code and wondered how to fix it, this talk is for you.&lt;/p&gt;
&lt;p&gt;Long-lived code must be maintainable and readability is a prerequisite of maintainability. It's easier to identify unreadable code than it is to create readable code.&lt;/p&gt;
&lt;p&gt;Let's talk about how to shape tricky code into something more readable and more maintainable.&lt;/p&gt;
&lt;p&gt;During this talk we'll discuss:&lt;/p&gt;
&lt;p&gt;whitespace
self-documenting code
modularity
expectation management
We'll conclude this talk with a checklist of questions you can use to make your own code more readable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 10 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-10:/djangocon-us-2016/readability-counts.html</guid><category>DjangoCon US 2016</category></item><item><title>Day 1 Lightning Talks by Many People</title><link>https://pyvideo.org/djangocon-us-2016/day-1-lightning-talks-by-many-people.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks by Many People&lt;/p&gt;
&lt;p&gt;00:04 - Adrienne Lowe&lt;/p&gt;
&lt;p&gt;06:33 - Russell Keith-Magee&lt;/p&gt;
&lt;p&gt;09:42 - Tom Christie&lt;/p&gt;
&lt;p&gt;15:14 - Trey Hunner&lt;/p&gt;
&lt;p&gt;18:39 - Paul Logston&lt;/p&gt;
&lt;p&gt;20:28 - Timothy Allen&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrienne Lowe</dc:creator><pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-18:/djangocon-us-2016/day-1-lightning-talks-by-many-people.html</guid><category>DjangoCon US 2016</category></item><item><title>Easier Classes: Python Classes Without All The Cruft</title><link>https://pyvideo.org/djangocon-us-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When bundling up data, sometimes tuples and dictionaries donâ€™t quite cut
it. Pythonâ€™s classes are powerful tools for data storage and
manipulation, but it can take quite a bit of boilerplate code to make a
well-behaved Python class. In this talk weâ€™re going to discuss how a
well-behaved class should work and take a look at a number of helper
libraries for creating well-behaved classes.&lt;/p&gt;
&lt;p&gt;Weâ€™ll first see how to make classes with proper string representations,
comparability, iterability, and immutability. Then weâ€™ll dive into
helper tools built-in to the standard library and available in
third-party libraries and briefly discuss which of these tools makes
sense to use with Djangoâ€™s classes.&lt;/p&gt;
&lt;p&gt;Weâ€™ll look at namedtuple, NamedTuple (not a typo), attrs, and the new
Python 3.7 dataclasses.&lt;/p&gt;
&lt;p&gt;Most of the libraries discussed in this talk are only available in
Python 3, so if youâ€™re not using Python 3, hopefully this talk will
encourage you to upgrade.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-17:/djangocon-us-2018/easier-classes-python-classes-without-all-the-cruft.html</guid><category>DjangoCon US 2018</category></item><item><title>Lazy Looping: The Next Iteration</title><link>https://pyvideo.org/djangocon-us-2019/lazy-looping-the-next-iteration.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lazy Looping: The Next Iteration by Trey Hunner&lt;/p&gt;
&lt;p&gt;In this talk we'll learn about the properties of iterators, learn how to create our own iterators with generators, and take a look at how iterators and generators allow us to write our looping code in a fundamentally different way.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/lazy-looping-the-next-iteration/"&gt;https://2019.djangocon.us/talks/lazy-looping-the-next-iteration/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Trey Hunner ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/treyhunner"&gt;https://twitter.com/treyhunner&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://treyhunner.com"&gt;http://treyhunner.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-24:/djangocon-us-2019/lazy-looping-the-next-iteration.html</guid><category>DjangoCon US 2019</category></item><item><title>Easier Classes: Python Classes Without All The Cruft</title><link>https://pyvideo.org/north-bay-python-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll take a look at how to cut down on the boilerplate
required in making a well-behaved Python class. We'll first see how to
make classes with proper string representations, comparability,
iterability, and immutability. Then we'll dive into helper tools
built-in to the standard library and available in third-party libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-03:/north-bay-python-2018/easier-classes-python-classes-without-all-the-cruft.html</guid><category>North Bay Python 2018</category></item><item><title>Variables and objects: it's pointers all the way down</title><link>https://pyvideo.org/north-bay-python-2025/variables-and-objects-its-pointers-all-the-way-down.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trey Hunner&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2025/talk/XVXLJ3"&gt;https://pretalx.northbaypython.org/nbpy-2025/talk/XVXLJ3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Python, assignment statements don't copy objects, and data structures don't actually contain objects. These two surprising facts have a &lt;em&gt;lot&lt;/em&gt; of interesting consequences and are the reason behind many of Python's design decisions.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore the reference-like nature of Python's variables and objects, noting both the benefits and gotchas involved.&lt;/p&gt;
&lt;p&gt;Among other ideas, we'll see that in Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The word &amp;quot;change&amp;quot; is ambiguous&lt;/li&gt;
&lt;li&gt;Copying is usually explicit&lt;/li&gt;
&lt;li&gt;Infinitely recursive data structures aren't a concern&lt;/li&gt;
&lt;li&gt;And tuples aren't always immutable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the process, we'll poke at our own mental model of Python and we'll get a bit pedantic at times.&lt;/p&gt;
&lt;p&gt;Join us to learn how in Python, it's pointers (or references, names, bindings, or aliases) all the way down.&lt;/p&gt;
&lt;p&gt;Sun Apr 27 15:15:00 2025 at Reis River Ranch&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 27 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-27:/north-bay-python-2025/variables-and-objects-its-pointers-all-the-way-down.html</guid><category>North Bay Python 2025</category></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/north-bay-python-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?&lt;/p&gt;
&lt;p&gt;Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers &lt;cite&gt;for&lt;/cite&gt; loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 02 Dec 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-12-02:/north-bay-python-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid><category>North Bay Python 2017</category></item><item><title>pathlib: why and how to use it</title><link>https://pyvideo.org/pybeach-2025/pathlib-why-and-how-to-use-it.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If your Python code works with file paths, you should be using &lt;cite&gt;pathlib&lt;/cite&gt;. This standard library module may seem a bit cumbersome at first, but &lt;cite&gt;pathlib&lt;/cite&gt;-using code is often more readable the alternative.&lt;/p&gt;
&lt;p&gt;Python's many path-oriented utilities used to expect a string representation for all file paths. That's not the case anymore. Now, every important path-consuming library will accept &lt;cite&gt;pathlib.Path&lt;/cite&gt; objects.&lt;/p&gt;
&lt;p&gt;During this talk, we'll see why &lt;cite&gt;pathlib.Path&lt;/cite&gt; objects make for more maintainable code. We'll visit a number of useful &lt;cite&gt;pathlib&lt;/cite&gt; examples and recipes along the way.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll be tempted to convert all your path-handling code to use &lt;cite&gt;pathlib&lt;/cite&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-09-27:/pybeach-2025/pathlib-why-and-how-to-use-it.html</guid><category>PyBeach 2025</category></item><item><title>Readability Counts - Trey Hunner</title><link>https://pyvideo.org/pycaribbean-2017/readability-counts-trey-hunner.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 18 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-18:/pycaribbean-2017/readability-counts-trey-hunner.html</guid><category>PyCaribbean 2017</category></item><item><title>Meaningful Mentoring Moments</title><link>https://pyvideo.org/pycascades-2019/meaningful-mentoring-moments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're mentoring at a programming workshop and your learner is having trouble with their code: what do you do?&lt;/p&gt;
&lt;p&gt;Let's learn how to be a good in-person code mentor!&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/meaningful-mentoring-moments/"&gt;https://2019.pycascades.com/talks/meaningful-mentoring-moments/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-24:/pycascades-2019/meaningful-mentoring-moments.html</guid><category>PyCascades 2019</category></item><item><title>Comprehensible Comprehensions</title><link>https://pyvideo.org/pycon-au-2017/comprehensible-comprehensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Finding list comprehensions incomprehensible? Having trouble figuring out when to use list comprehensions or just plain for loops?  Come to this talk and learn the how, when, and why of list comprehensions.&lt;/p&gt;
&lt;p&gt;Finding list comprehensions incomprehensible?  Having trouble figuring out when to use list comprehensions or just plain &lt;cite&gt;for&lt;/cite&gt; loops?&lt;/p&gt;
&lt;p&gt;If you find comprehensions tricky to write or perplexing to read, this talk is for you.&lt;/p&gt;
&lt;p&gt;We're going to learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when and how to turn a &lt;cite&gt;for&lt;/cite&gt; loop into a comprehension&lt;/li&gt;
&lt;li&gt;why list comprehensions are often hard to read&lt;/li&gt;
&lt;li&gt;how to use list, set, an dictionary comprehensions as well as generator expressions&lt;/li&gt;
&lt;li&gt;how to make your comprehensions even more readable than your loops&lt;/li&gt;
&lt;li&gt;when and how not to use comprehensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll come away from this talk with a cheat sheet for helping you remember when and how to use comprehensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:/pycon-au-2017/comprehensible-comprehensions.html</guid><category>PyCon AU 2017</category></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pycon-au-2019/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes youâ€™ll find what might seem like a bug in Python but occasionally these bugs reveal themselves to be misunderstood features. During this talk weâ€™ll look at a number of Pythonâ€™s unique features and quirks and attempt to re-shape our mental models of how Python works.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/python-oddities-explained"&gt;https://2019.pycon-au.org/talks/python-oddities-explained&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Aug  4 13:30:00 2019 at C3.3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-04:/pycon-au-2019/python-oddities-explained.html</guid><category>PyCon AU 2019</category></item><item><title>Regular Expressions</title><link>https://pyvideo.org/pycon-us-2016/trey-hunner-regular-expressions-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Trey Hunner&lt;/p&gt;
&lt;p&gt;What are regular expressions, what are they useful for, and why are they so hard to read?  We'll learn what regular expressions are good for, how to make our own regular expressions, and how to make our regular expressions friendly and readable (yes it's possible, sort of).&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:/pycon-us-2016/trey-hunner-regular-expressions-pycon-2016.html</guid><category>PyCon US 2016</category></item><item><title>Lightning Talks - 2016-05-30</title><link>https://pyvideo.org/pycon-us-2016/lightning-talks-2016-05-30.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ka-Ping Yee</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:/pycon-us-2016/lightning-talks-2016-05-30.html</guid><category>PyCon US 2016</category><category>lightning talks</category></item><item><title>Readability Counts</title><link>https://pyvideo.org/pycon-us-2017/readability-counts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you found unreadable PEP8-compliant code and wondered how to fix
it? Have you ever seen code that was simply a pleasure to read?&lt;/p&gt;
&lt;p&gt;If you've ever wondered what makes code easy to read, this talk is for
you.&lt;/p&gt;
&lt;p&gt;During this talk we'll learn a number of techniques for refactoring code
to improve readability and maintainability.&lt;/p&gt;
&lt;p&gt;We'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;whitespace&lt;/li&gt;
&lt;li&gt;self-documenting code&lt;/li&gt;
&lt;li&gt;modularity&lt;/li&gt;
&lt;li&gt;expectation management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll end with a checklist for improving the readability of your own
code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:/pycon-us-2017/readability-counts.html</guid><category>PyCon US 2017</category></item><item><title>Hands-On Intro to Python for New Programmers</title><link>https://pyvideo.org/pycon-us-2017/hands-on-intro-to-python-for-new-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brand new to programming and want to get some hands-on Python
experience? Let's learn some Python together!&lt;/p&gt;
&lt;p&gt;During this tutorial we will work through a number of programming
exercises together. We'll be doing a lot of asking questions, taking
guesses, trying things out, and seeking out help from others.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Types of things in Python: strings, numbers, lists&lt;/li&gt;
&lt;li&gt;Conditionally executing code&lt;/li&gt;
&lt;li&gt;Repeating code with loops&lt;/li&gt;
&lt;li&gt;Getting user input&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:/pycon-us-2017/hands-on-intro-to-python-for-new-programmers.html</guid><category>PyCon US 2017</category></item><item><title>Readable Regular Expressions</title><link>https://pyvideo.org/pycon-us-2017/readable-regular-expressions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are regular expressions, what are they useful for, and why are they
so hard to read? We'll learn what regular expressions are good for, how
to make our own regular expressions, and how to make our regular
expressions friendly and readable (yes it's possible, sort of).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:/pycon-us-2017/readable-regular-expressions.html</guid><category>PyCon US 2017</category></item><item><title>Python 2 to 3: How to Upgrade and What Features to Start Using</title><link>https://pyvideo.org/pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The end of life for Python 2 is 2020. Python 3 is the future and you'll need to consider both your upgrade plan and what steps you'll take after upgrading to start leveraging Python 3 features.&lt;/p&gt;
&lt;p&gt;During this talk we'll briefly discuss how to start &lt;strong&gt;the process of upgrading your code to Python 3&lt;/strong&gt;. We'll then dive into some of &lt;strong&gt;the most useful Python 3 features&lt;/strong&gt; that you'll be able to start embracing once you drop Python 2 support.&lt;/p&gt;
&lt;p&gt;A number of the most powerful Python 3 features are syntactic features that are &lt;strong&gt;Python 3 only&lt;/strong&gt;. You won't get any experience using these features until you fully upgrade. These features are an incentive to drop Python 2 support in existing 2 and 3 compatible code. You can consider this talk as a teaser of Python 3 features that you may have never used.&lt;/p&gt;
&lt;p&gt;After this talk I hope you'll be inspired to fully upgrade your code to Python 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:/pycon-us-2018/python-2-to-3-how-to-upgrade-and-what-features-to-start-using.html</guid><category>PyCon US 2018</category><category>python3</category><category>python3 migration</category></item><item><title>Using List Comprehensions and Generator Expressions For Data Processing</title><link>https://pyvideo.org/pycon-us-2018/using-list-comprehensions-and-generator-expressions-for-data-processing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating one list out of another list is a very common thing to do in Python, so common that Python includes a special construct just for this purpose: list comprehensions. We'll get hands-on experience using list comprehensions, set comprehensions, and dictionary comprehensions during this tutorial. We'll also learn how and when we can slightly tweak our comprehensions to turn them into more performant generator expressions.&lt;/p&gt;
&lt;p&gt;We will learn some tricks for figuring out which of our &amp;quot;for&amp;quot; loops can be rewritten as comprehensions and which cannot. We will focus heavily on code readability and code clarity and we'll discuss when comprehensions help readability and when they hurt.&lt;/p&gt;
&lt;p&gt;All new skills will be acquired through practice. We'll work through many exercises both individually and as a group. All students will also receive a cheat sheet which can be used for guidance during future comprehension-writing journeys.&lt;/p&gt;
&lt;p&gt;A laptop with Python installed is required for this workshop.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 09 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-09:/pycon-us-2018/using-list-comprehensions-and-generator-expressions-for-data-processing.html</guid><category>PyCon US 2018</category></item><item><title>Lazy Looping in Python: Making and Using Generators and Iterators</title><link>https://pyvideo.org/pycon-us-2019/lazy-looping-in-python-making-and-using-generators-and-iterators.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When processing large amounts of data in Python, we often reach for
lists. Unfortunately, processing data using large lists make for ugly
code that can be memory inefficient and slow. Python's solution to this
problem is lazy looping using generators and iterators.&lt;/p&gt;
&lt;p&gt;During this tutorial we'll learn a number of lazy looping techniques
which will help you write more efficient and more readable Python code.
We'll get practice creating generators, playing with iterators, and
using generators and iterators to drastically restructure our code in a
more descriptive data-centric way.&lt;/p&gt;
&lt;p&gt;You'll walk out of this tutorial with hands-on experience with Python's
various lazy looping constructs and a greater appreciation for how
looping works under the hood in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 01 May 2019 13:20:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-01:/pycon-us-2019/lazy-looping-in-python-making-and-using-generators-and-iterators.html</guid><category>PyCon US 2019</category><category>tutorial</category></item><item><title>Comprehensible Comprehensions</title><link>https://pyvideo.org/pycon-us-2020/comprehensible-comprehensions.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-04-17:/pycon-us-2020/comprehensible-comprehensions.html</guid><category>PyCon US 2020</category></item><item><title>Hands-On Regular Expressions in Python</title><link>https://pyvideo.org/pycon-us-2021/hands-on-regular-expressions-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are regular expressions, what are they useful for, and why are they so hard to read?&lt;/p&gt;
&lt;p&gt;In this tutorial we will break down the regular expression syntax to better understand how they work. We will learn how to dissect regular expressions, how to use regular expressions in Python, and how to make your regular expressions more readable (yes it's possible... sort of).&lt;/p&gt;
&lt;p&gt;We will learn how to use regular expressions for data validation, data parsing, and data normalization. We'll also discuss when not to use regular expressions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-14:/pycon-us-2021/hands-on-regular-expressions-in-python.html</guid><category>PyCon US 2021</category></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pycon-us-2022/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.&lt;/p&gt;
&lt;p&gt;Warning: this talk will include many Python head-scratchers so show up prepared to think on your feet!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/python-oddities-explained.html</guid><category>PyCon US 2022</category><category>talk</category></item><item><title>Intro to Python for Brand New Programmers</title><link>https://pyvideo.org/pycon-us-2023/intro-to-python-for-brand-new-programmers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brand new to programming and want to get some hands-on Python
experience? Let's learn some Python together!&lt;/p&gt;
&lt;p&gt;During this tutorial we will work through a number of programming
exercises together. We'll be doing a lot of asking questions, taking
guesses, trying things out, and seeking out help from others.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Types of things in Python: strings, numbers, lists&lt;/li&gt;
&lt;li&gt;Conditionally executing code&lt;/li&gt;
&lt;li&gt;Repeating code with loops&lt;/li&gt;
&lt;li&gt;Getting user input&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is intended to ease you into Python. Each exercise section
is careful not to assume prior programming knowledge.&lt;/p&gt;
&lt;p&gt;I expect you to have experience typing on computers and to have
rudimentary math skills (just arithmetic). I am not expecting you to
have experience with programming. We will define new terms as we use
them&lt;/p&gt;
&lt;p&gt;You'll leave this tutorial, having written a couple small programs
Python yourself. Hopefully you'll also leave with a bit of excitement
about what Python can do and curiosity to keep diving deeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-19:/pycon-us-2023/intro-to-python-for-brand-new-programmers.html</guid><category>PyCon US 2023</category></item><item><title>Lightning Talks - Friday</title><link>https://pyvideo.org/pycon-us-2025/lightning-talks-friday.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;2:05 - Rodrigo GirÃ£o SerrÃ£o - Meta lightning talk
7:15 - LaÃ­s Carvalho - Join Humble Data!
10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff
14:40 - Quang Vu - Enhancing My Archery Practice with Computer Vision
18:55 - Meagen Voss - Maaah! How I Killed My Site with a Goat Gif
24:25 - Will Lachance - How much energy will my solar panels produce?
29:10 - Amanda Lundberg - Captioner is Human
33:55 - Thomas Weiss - Predicting Fire Weather Using Historical RAWS Data
38:25 - Tom Rutherford - The power and danger of os.fork
42:45 - Cody Maloney - Remember to .close() file-like objects
47:25 - Anthony Shaw - CSnakes: Python in .NET
52:55 - Trey Hunner - Systems, gates, and rage&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo GirÃ£o SerrÃ£o</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/lightning-talks-friday.html</guid><category>PyCon US 2025</category></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?&lt;/dt&gt;
&lt;dd&gt;Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers &lt;cite&gt;for&lt;/cite&gt; loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:/pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid><category>PyGotham 2017</category></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pygotham-2018/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.&lt;/p&gt;
&lt;p&gt;Warning: this talk will include many Python head scratchers so show up prepared to think on your feet!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:/pygotham-2018/python-oddities-explained.html</guid><category>PyGotham 2018</category></item><item><title>Easier Classes: Python Classes Without All the Cruft</title><link>https://pyvideo.org/pyohio-2018/easier-classes-python-classes-without-all-the-cruft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll take a look at how to cut down on the boilerplate
required in making a well-behaved Python class. We'll first see how to
make classes with proper string representations, comparability,
iterability, and immutability. Then we'll dive into helper tools
built-in to the standard library and available in third-party libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-28:/pyohio-2018/easier-classes-python-classes-without-all-the-cruft.html</guid><category>PyOhio 2018</category></item><item><title>Keynote - Trey Hunner</title><link>https://pyvideo.org/pyohio-2024/keynote-trey-hunner.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trey Hunner presents our Sunday afternoon keynote.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-07-27:/pyohio-2024/keynote-trey-hunner.html</guid><category>PyOhio 2024</category></item><item><title>Unindenting multi-line strings in Python</title><link>https://pyvideo.org/python-morsels/dedent.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Need a multi-line string but don't want to include a big block of manually dedented text in your Python code? Use textwrap.dedent!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-10:/python-morsels/dedent.html</guid><category>Python Morsels</category><category>Strings</category></item><item><title>Reading binary files in Python</title><link>https://pyvideo.org/python-morsels/reading-binary-files-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can you read binary files in Python? And how can you read very large binary files in small chunks?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-05-16:/python-morsels/reading-binary-files-in-python.html</guid><category>Python Morsels</category><category>Files</category></item><item><title>Unicode character encodings</title><link>https://pyvideo.org/python-morsels/unicode-character-encodings-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working with text files in Python, it's considered a best practice to specify the character encoding that you're working with.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-05-02:/python-morsels/unicode-character-encodings-in-python.html</guid><category>Python Morsels</category><category>Files</category></item><item><title>What is an iterator?</title><link>https://pyvideo.org/python-morsels/what-is-an-iterator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Iterators are lazy iterables which power all iteration in Python. Iterators are the generic form of a generator-like object.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-03-14:/python-morsels/what-is-an-iterator.html</guid><category>Python Morsels</category><category>Generator Function</category></item><item><title>How to create a generator function</title><link>https://pyvideo.org/python-morsels/how-to-create-a-generator-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have a function that returns a list? You may be able to turn it into a generator function by replacing the &lt;cite&gt;append&lt;/cite&gt; calls with &lt;cite&gt;yield&lt;/cite&gt; statements.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-03-07:/python-morsels/how-to-create-a-generator-function.html</guid><category>Python Morsels</category><category>Generator Function</category></item><item><title>What is a generator function?</title><link>https://pyvideo.org/python-morsels/what-is-a-generator-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you call a generator function it doesn't actually run the function; instead it returns a generator object.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-28:/python-morsels/what-is-a-generator-function.html</guid><category>Python Morsels</category><category>Generator Function</category></item><item><title>How to read a traceback in Python</title><link>https://pyvideo.org/python-morsels/reading-tracebacks-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When exceptions go unhandled, Python prints a traceback. Tracebacks are &lt;strong&gt;read from the bottom upward&lt;/strong&gt;. The last line describes &lt;em&gt;what&lt;/em&gt; happened and lines above describe &lt;em&gt;where&lt;/em&gt; it happened.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-01-03:/python-morsels/reading-tracebacks-in-python.html</guid><category>Python Morsels</category><category>Exception</category></item><item><title>Modules are cached</title><link>https://pyvideo.org/python-morsels/modules-are-cached.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When re-importing a module Python will use the cached version of your module (instead of reevaluating your code). To refresh a module while in the Python REPL, it's best to exit and start a new REPL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-11-01:/python-morsels/modules-are-cached.html</guid><category>Python Morsels</category><category>Modules</category></item><item><title>How to write to a file in Python</title><link>https://pyvideo.org/python-morsels/creating-and-writing-file-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To write to a file in Python, you can use the built-in &lt;cite&gt;open&lt;/cite&gt; function, specifying a mode of &lt;cite&gt;w&lt;/cite&gt; or &lt;cite&gt;wt&lt;/cite&gt; and then use the &lt;cite&gt;write&lt;/cite&gt; method on the file object.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-18:/python-morsels/creating-and-writing-file-python.html</guid><category>Python Morsels</category><category>Files</category></item><item><title>Read a file line-by-line in Python</title><link>https://pyvideo.org/python-morsels/reading-files-line-line.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When Python reads a file line-by-line, it doesn't store the whole file in memory all at once. Files are lazy iterables, and as we loop over a file object, we'll get lines from that file.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-11:/python-morsels/reading-files-line-line.html</guid><category>Python Morsels</category><category>Files</category></item><item><title>How to read from a text file</title><link>https://pyvideo.org/python-morsels/how-read-text-file.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To work with a text file in Python, you can use the built-in open function, which gives you back a file object. Reading from and writing to text files is an important skill.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-04:/python-morsels/how-read-text-file.html</guid><category>Python Morsels</category><category>Files</category></item><item><title>Defining a main function in Python</title><link>https://pyvideo.org/python-morsels/making-main-function-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can you setup a main function in Python? And should you? Python doesn't know about main functions, but there's nothing stopping us from defining a function called main that we only call when running from the command-line.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-09-27:/python-morsels/making-main-function-python.html</guid><category>Python Morsels</category><category>Command Line Interfaces</category></item><item><title>Importing a module runs code</title><link>https://pyvideo.org/python-morsels/importing-module-runs-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When Python imports a module, it runs all the code in that module.
So if your Python file is meant to be imported as a module, be careful not to put side effects at the top-level of your &lt;cite&gt;.py&lt;/cite&gt; file.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-09-13:/python-morsels/importing-module-runs-code.html</guid><category>Python Morsels</category><category>Modules</category></item><item><title>Parsing command-line arguments in Python</title><link>https://pyvideo.org/python-morsels/parsing-command-line-arguments-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're trying to make a friendly command-line interface in Python, instead of manually parsing sys.argv you should probably use Python's argparse module.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-09-06:/python-morsels/parsing-command-line-arguments-python.html</guid><category>Python Morsels</category><category>Command Line Interfaces</category></item><item><title>Accessing command-line arguments in Python</title><link>https://pyvideo.org/python-morsels/accessing-command-line-arguments-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to make a very simple command-line interface and it doesn't need to be friendly, you can read sys.argv to manually process the arguments coming into your program.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-30:/python-morsels/accessing-command-line-arguments-python.html</guid><category>Python Morsels</category><category>Command Line Interfaces</category></item><item><title>Python's walrus operator</title><link>https://pyvideo.org/python-morsels/using-walrus-operator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's &amp;quot;walrus operator&amp;quot; is used for assignment expressions. Assignment expressions are a way of embedding an assignment statement inside another line of code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-16:/python-morsels/using-walrus-operator.html</guid><category>Python Morsels</category></item><item><title>Customizing what happens when you assign an attribute</title><link>https://pyvideo.org/python-morsels/customizing-what-happens-when-you-assign-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to customize what happens when you assign to a specific attribute on your class instances? You can use a property with a setter.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-08:/python-morsels/customizing-what-happens-when-you-assign-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item><item><title>Making a read-only attribute</title><link>https://pyvideo.org/python-morsels/making-read-only-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you need to make a read-only attribute in Python, you can turn your attribute into a property that delegates to an attribute with almost the same name (but with an underscore prefix).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-08-03:/python-morsels/making-read-only-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item><item><title>Python's map and filter functions</title><link>https://pyvideo.org/python-morsels/map-and-filter-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do Python's built-in map and filter functions work? And should you use them or should you use list comprehensions or generator expressions instead?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-07-26:/python-morsels/map-and-filter-python.html</guid><category>Python Morsels</category><category>Generator Expression</category></item><item><title>How to write a generator expression</title><link>https://pyvideo.org/python-morsels/how-write-generator-expression.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;List comprehensions make lists; generator expressions make generators. Generators are lazy single-use iterables which generate values as you loop over them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-07-13:/python-morsels/how-write-generator-expression.html</guid><category>Python Morsels</category><category>Generator Expression</category></item><item><title>How to make a decorator</title><link>https://pyvideo.org/python-morsels/make-decorator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A decorator is a function that accepts a function and returns a function. That's true for function decorators at least.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-06-14:/python-morsels/make-decorator.html</guid><category>Python Morsels</category><category>Decorators</category></item><item><title>What is a decorator?</title><link>https://pyvideo.org/python-morsels/what-is-a-decorator.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A decorator is a callable (usually a function though sometimes a class) that accepts either a function or a class and returns a new function or class that wraps around the original one.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-06-09:/python-morsels/what-is-a-decorator.html</guid><category>Python Morsels</category><category>Decorators</category></item><item><title>Passing functions as arguments to other functions</title><link>https://pyvideo.org/python-morsels/passing-functions-arguments-other-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, you can pass functions (as an argument) to another function. Some of Python's built-in functions actually expect functions to be given as one or more of their arguments to call them later.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-06-03:/python-morsels/passing-functions-arguments-other-functions.html</guid><category>Python Morsels</category><category>Decorators</category></item><item><title>The meaning of "callable" in Python</title><link>https://pyvideo.org/python-morsels/callables.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A callable is a function-like object, meaning it's something that behaves like a function. The primary types of callables in Python are functions and classes, though other callable objects do exist.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-28:/python-morsels/callables.html</guid><category>Python Morsels</category><category>Decorators</category></item><item><title>Turning a for loop into a list comprehension</title><link>https://pyvideo.org/python-morsels/turning-loop-list-comprehension.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're new to comprehensions, I recommend copy-pasting your way from a loop to comprehension to anchor your existing understanding of &lt;cite&gt;for&lt;/cite&gt; loops with your new knowledge of comprehensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-18:/python-morsels/turning-loop-list-comprehension.html</guid><category>Python Morsels</category><category>Comprehensions</category></item><item><title>Breaking up long lines of code in Python</title><link>https://pyvideo.org/python-morsels/breaking-long-lines-code-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have a long line of code? If you don't have brackets or braces on your line yet, you can add parentheses wherever you'd like and put line breaks within them. We call this &amp;quot;implicit line continuation&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-06:/python-morsels/breaking-long-lines-code-python.html</guid><category>Python Morsels</category><category>Fundamentals</category></item><item><title>List comprehensions in Python</title><link>https://pyvideo.org/python-morsels/what-are-list-comprehensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's list comprehensions are special-purpose tools for taking an old iterable, looping over it, and making a new list out of it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-04-28:/python-morsels/what-are-list-comprehensions.html</guid><category>Python Morsels</category><category>Comprehensions</category></item><item><title>4 ways to import a module in Python</title><link>https://pyvideo.org/python-morsels/4-ways-import-module-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python you can import specific variables from a module, you can import the whole module, and you can also rename variables while importing. When should you use each of these import styles?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-04-21:/python-morsels/4-ways-import-module-python.html</guid><category>Python Morsels</category><category>Modules</category></item><item><title>Making an auto-updating attribute</title><link>https://pyvideo.org/python-morsels/making-auto-updating-attribute.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We don't use getter methods in Python, instead we use the property decorator to make make automatically updating attributes. Properties allow us to customize what happens when you access an attribute.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-04-20:/python-morsels/making-auto-updating-attribute.html</guid><category>Python Morsels</category><category>Properties</category></item><item><title>Tuple unpacking</title><link>https://pyvideo.org/python-morsels/tuple-unpacking.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Instead of using hard-coded indices to get tuple elements, use tuple unpacking to give descriptive names to each item. Important items should have a name instead of a number.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-25:/python-morsels/tuple-unpacking.html</guid><category>Python Morsels</category><category>Tuple Unpacking</category></item><item><title>Importing a module in Python</title><link>https://pyvideo.org/python-morsels/importing-module.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you import a module in Python, you'll get access to a module object with attributes representing each of the variables in that module. Python comes bundled with a bunch of modules.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-18:/python-morsels/importing-module.html</guid><category>Python Morsels</category><category>Modules</category></item><item><title>Inheriting one class from another</title><link>https://pyvideo.org/python-morsels/inheriting-one-class-another.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To inherit your class from another class, put parentheses after the class name and list parent classes. We allow multiple inheritance in Python, but we usually prefer single class inheritance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-04:/python-morsels/inheriting-one-class-another.html</guid><category>Python Morsels</category><category>Classes</category><category>Inheritance</category></item><item><title>__init__ in Python</title><link>https://pyvideo.org/python-morsels/what-is-init.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &lt;cite&gt;__init__&lt;/cite&gt; method is used to initialize a class. The initializer method accepts self (the class instance) along with any arguments the class accepts and then performs initialization steps.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-02-11:/python-morsels/what-is-init.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>Customizing the string representation of your objects</title><link>https://pyvideo.org/python-morsels/customizing-string-representation-your-objects.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You'll almost always just want to customize one of Python's two string representations (&lt;cite&gt;repr&lt;/cite&gt;, the programmer readable-one). The human-readable representation (&lt;cite&gt;str&lt;/cite&gt;) delegates to &lt;cite&gt;repr&lt;/cite&gt; by default.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-01-22:/python-morsels/customizing-string-representation-your-objects.html</guid><category>Python Morsels</category><category>Dunder Methods</category></item><item><title>Dunder methods in Python</title><link>https://pyvideo.org/python-morsels/what-are-dunder-methods.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dunder methods power most operators in Python as well as some of the built-in functions. Dunder methods are a contract between the person who made a class and Python itself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-01-05:/python-morsels/what-are-dunder-methods.html</guid><category>Python Morsels</category><category>Dunder Methods</category></item><item><title>Python's 2 different string representations</title><link>https://pyvideo.org/python-morsels/pythons-two-different-string-representations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, we have two different string representations: the human-readable string representation and the programmer-readable string representation (called repr and str respectively).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-30:/python-morsels/pythons-two-different-string-representations.html</guid><category>Python Morsels</category><category>Strings</category></item><item><title>Python's self</title><link>https://pyvideo.org/python-morsels/what-is-self.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's &lt;cite&gt;self&lt;/cite&gt; is really just a variable that points to the current instance of our class. Every method you define must accept &lt;cite&gt;self&lt;/cite&gt; as its first argument.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-28:/python-morsels/what-is-self.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>Classes are everywhere</title><link>https://pyvideo.org/python-morsels/classes-are-everywhere.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even if you never make your class, you will certainly use classes. A lot of the built-in functions in Python are classes too. Anything that has a type has a class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-22:/python-morsels/classes-are-everywhere.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>What is a class?</title><link>https://pyvideo.org/python-morsels/what-is-a-class.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Classes are for coupling state (attributes) and functionality (methods). Calling a class returns an instance of that class. Class and &amp;quot;type&amp;quot; are synonyms in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-09:/python-morsels/what-is-a-class.html</guid><category>Python Morsels</category><category>Classes</category></item><item><title>Accepting arbitrary keyword arguments in Python</title><link>https://pyvideo.org/python-morsels/accepting-arbitrary-keyword-arguments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever seen &lt;cite&gt;**kwargs&lt;/cite&gt; in a function definition? There's nothing special about the name &amp;quot;kwargs&amp;quot;: it's the &lt;cite&gt;**&lt;/cite&gt; that's special. You can use Python's &lt;cite&gt;**&lt;/cite&gt; operator to define a function that accepts arbitrary keyword arguments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-12-04:/python-morsels/accepting-arbitrary-keyword-arguments.html</guid><category>Python Morsels</category><category>Functions</category><category>Asterisks</category></item><item><title>Keyword-only function arguments</title><link>https://pyvideo.org/python-morsels/keyword-only-function-arguments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you see a function that has an asterisk (&lt;cite&gt;*&lt;/cite&gt;) on its own with a comma after it, every argument after that point is a keyword-only argument (an argument which can only be specified by its name).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-11-30:/python-morsels/keyword-only-function-arguments.html</guid><category>Python Morsels</category><category>Functions</category><category>Asterisks</category></item><item><title>Accepting any number of arguments to a function</title><link>https://pyvideo.org/python-morsels/accepting-any-number-arguments-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To make a function that accepts any number of arguments, you can use the &lt;cite&gt;*&lt;/cite&gt; operator and then some variable name when defining your function. Some of Python's built-in functions work this way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-11-18:/python-morsels/accepting-any-number-arguments-function.html</guid><category>Python Morsels</category><category>Functions</category><category>Asterisks</category></item><item><title>How to make a function</title><link>https://pyvideo.org/python-morsels/making-a-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To define a function in Python, use the def keyword with the function name and any accepted arguments (in parentheses). Functions have inputs (arguments) and an optional output (the return value).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-11-16:/python-morsels/making-a-function.html</guid><category>Python Morsels</category><category>Functions</category></item><item><title>Positional vs keyword arguments</title><link>https://pyvideo.org/python-morsels/positional-vs-keyword-arguments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you're working with named arguments (a.k.a. keyword arguments) it's the argument name that matters. When you're working with positional arguments, it's the position matters (but not the name).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-11-12:/python-morsels/positional-vs-keyword-arguments.html</guid><category>Python Morsels</category><category>Functions</category></item><item><title>How to call a function in Python</title><link>https://pyvideo.org/python-morsels/calling-a-function.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To use a function in Python, write the function name followed by parentheses. If the function accepts arguments, pass the arguments inside the parentheses.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-11-11:/python-morsels/calling-a-function.html</guid><category>Python Morsels</category><category>Functions</category></item><item><title>Looping over multiple iterables at once</title><link>https://pyvideo.org/python-morsels/looping-over-multiple-iterables.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Need to loop over two (or more) iterables at the same time? Don't use range. Don't use enumerate. Use the built-in zip function. As you loop over zip you'll get the n-th item from each iterable.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-13:/python-morsels/looping-over-multiple-iterables.html</guid><category>Python Morsels</category><category>Looping</category></item><item><title>Looping with indexes</title><link>https://pyvideo.org/python-morsels/looping-with-indexes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's built-in enumerate function is the preferred way to loop while counting upward at the same time. You'll almost always see tuple unpacking used whenever enumerate is used.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-08:/python-morsels/looping-with-indexes.html</guid><category>Python Morsels</category><category>Looping</category></item><item><title>What is an iterable?</title><link>https://pyvideo.org/python-morsels/iterable.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An iterable is anything you're able to iterate over (iter-&lt;em&gt;able&lt;/em&gt;). Iterables can be looped over and anything you can loop over is an iterable. Not every iterable is indexable or has a length.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-10-06:/python-morsels/iterable.html</guid><category>Python Morsels</category><category>Looping</category></item><item><title>Writing a for loop</title><link>https://pyvideo.org/python-morsels/writing-a-for-loop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unlike traditional C-style for loops, Python's for loops don't have indexes. It's considered a best practice to avoid reaching for indexes unless you really need them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-09-29:/python-morsels/writing-a-for-loop.html</guid><category>Python Morsels</category><category>Looping</category></item></channel></rss>