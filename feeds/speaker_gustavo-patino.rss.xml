<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 09 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Making your code faster: Cython and parallel processing in the Jupyter Notebook</title><link>https://pyvideo.org/pydata-dc-2016/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/gapatino/Making-Your-Code-Faster-Cython-and-parallel-processing-in-the-Jupyter-Notebook"&gt;https://github.com/gapatino/Making-Your-Code-Faster-Cython-and-parallel-processing-in-the-Jupyter-Notebook&lt;/a&gt;
Slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook"&gt;http://www.slideshare.net/PyData/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the complexity and scope of applications grow, it is very common to run into slow performance issues. In Python, it is possible to improve the speed of execution with the use of parallel processing and the Cython compiler. The Jupyter Notebook makes the implementation of both of them a relatively simple task, which will be the focus of this session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gustavo Patino</dc:creator><pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-09:pydata-dc-2016/making-your-code-faster-cython-and-parallel-processing-in-the-jupyter-notebook.html</guid><category>code</category><category>Cython</category><category>jupyter</category><category>jupyter notebook</category><category>notebook</category><category>parallel</category><category>processing</category></item><item><title>Doing frequentist statistics with Scipy</title><link>https://pyvideo.org/pydata-dc-2016/doing-frequentist-statistics-with-scipy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy"&gt;https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy&lt;/a&gt;
Slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy"&gt;http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Frequentist statistical tests are still very common, and in some fields they continue to represent the technical standard. In this session we will cover the execution and interpretation of the most common tests using the SciPy.stats package, and plotting the results with Matplotlib and Seaborn. The focus will be on traditional approaches to the tests, not on Bayesian and bootstrapping approaches&lt;/p&gt;
&lt;p&gt;The session will cover: - Normality testing - Student's t-test and ANOVA - Wilcoxon rank sum and Kruskal-Wallis - Correlation - Univariate linear and logistic regression - Chi-square - p-value interpretation - Effect size calculation&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gustavo Patino</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/doing-frequentist-statistics-with-scipy.html</guid><category>scipy</category><category>statistics</category></item></channel></rss>