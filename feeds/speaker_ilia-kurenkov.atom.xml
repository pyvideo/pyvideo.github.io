<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ilia-kurenkov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-31T00:00:00+00:00</updated><entry><title>re-Discovering Python's Regular Expressions</title><link href="https://pyvideo.org/europython-2016/re-discovering-pythons-regular-expressions.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Ilia Kurenkov</name></author><id>tag:pyvideo.org,2016-07-31:europython-2016/re-discovering-pythons-regular-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ilia Kurenkov - re-Discovering Python's Regular Expressions
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/rediscovering-pythons-regular-expressions"&gt;https://ep2016.europython.eu//conference/talks/rediscovering-pythons-regular-expressions&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As Armin Ronacher pointed out in a recent blog post, there is more to
Python's regular expression module than meets the eye. His post made
me wonder what other “hidden gems” are stashed away in Python’s &lt;cite&gt;re&lt;/cite&gt;.
In the talk I share what I’ve learned about the inner workings of this
extremely popular and heavily used module.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Anyone who has used Python to search text for substring patterns has
at least heard of the regular expression module. Many of us use it
extensively for parsers and lexers, extracting information .
And yet we know surprisingly little about its inner workings, as Armin
Ronacher demonstrated in his recent blog post, “Python's Hidden
Regular Expression Gems”. Inspired by this, I want to dive deeper into
Python’s &lt;cite&gt;re&lt;/cite&gt; module and share what I find with folks at EuroPython.
My goal is that at the end of the day most of us walk away from this
talk with a better understanding of this extremely useful module.&lt;/p&gt;
&lt;p&gt;Here are a few examples of the kinds of things I would like to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A clear presentation of &lt;cite&gt;re&lt;/cite&gt;’s overall structure.&lt;/li&gt;
&lt;li&gt;What actually happens behind the scenes when you “compile” a regular expression with &lt;cite&gt;re.compile&lt;/cite&gt;?&lt;/li&gt;
&lt;li&gt;What are the speed implications of using a callable as the replacement argument to &lt;cite&gt;re.sub&lt;/cite&gt;?&lt;/li&gt;
&lt;li&gt;re.MatchObject interface: &lt;cite&gt;group&lt;/cite&gt; vs. &lt;cite&gt;groups&lt;/cite&gt; vs &lt;cite&gt;groupdict&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To keep the talk entertaining as well as educational I plan to pepper
it with whatever interesting and/or funny trivia I find about the
module’s history and structure.&lt;/p&gt;
&lt;p&gt;Prerequisites:
If you've ever used the &lt;cite&gt;re&lt;/cite&gt; module, you should be fine :)&lt;/p&gt;
</summary></entry></feed>