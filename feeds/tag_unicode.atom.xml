<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_unicode.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>Capire le codifiche e Unicode</title><link href="https://pyvideo.org/europython-2013/capire-le-codifiche-e-unicode.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/capire-le-codifiche-e-unicode.html</id><summary type="html"></summary><category term="pep393"></category><category term="python3"></category><category term="unicode"></category><category term="encodings"></category></entry><entry><title>Understanding Encodings</title><link href="https://pyvideo.org/europython-2013/understanding-encodings.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/understanding-encodings.html</id><summary type="html"></summary><category term="pep393"></category><category term="python3"></category><category term="unicode"></category><category term="encodings"></category></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/pycon-us-2018/python-locales-and-writing-systems.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here’s some of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary><category term="python3"></category><category term="unicode"></category></entry><entry><title>¿DÃ³nde estÃ¡ mi Ã±?</title><link href="https://pyvideo.org/pycon-es-2017/da3nde-esta-mi-a-.html" rel="alternate"></link><published>2017-09-23T12:30:00+02:00</published><updated>2017-09-23T12:30:00+02:00</updated><author><name>Miguel González Álvarez</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/da3nde-esta-mi-a-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se hará un repaso histórico sobre como se ha ido afrontando el problema de la representación de caracteres por de medios electrónicos a lo largo de la historia desde el telégrafo hasta el estándar actual.&lt;/p&gt;
&lt;p&gt;Seguidamente describiremos como se manejaba en Python 2 y qué cambios se produjeron con la llegada de Python 3.&lt;/p&gt;
</summary><category term="unicode"></category></entry><entry><title>Technical, standards-spec style analysis of Unicode</title><link href="https://pyvideo.org/chipy/technical--standards-spec-style-analysis-of-unico.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>Jordan Bettis</name></author><id>tag:pyvideo.org,2010-01-14:chipy/technical--standards-spec-style-analysis-of-unico.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a very educational presentation of Unicode, what it is, where it
comes from, how it works, Unicode in Python, ....&lt;/p&gt;
</summary><category term="chipy"></category><category term="unicode"></category></entry><entry><title>Status of Unicode in Python 3</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--status-of-unicode-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduced in Python 2.0, unicode became the default string type in
Python 3.0. It took 8 years to switch to unicode, and since Python 3.0,
a lot of bugs has been fixed. The switch to unicode opened many
questions. Should Python support both bytes and characters for
filenames? What to do with undecodable bytes? etc.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on the recent issues fixed in Python 3.1 and 3.2:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the PEP 383 (error handler to store undecodable bytes) everywhere&lt;/li&gt;
&lt;li&gt;Encoding of the command line arguments: utf-8 on Mac OS X, locale
encoding on UNIX/BSD, unicode on Windows&lt;/li&gt;
&lt;li&gt;Environment variables: creation of os.environb&lt;/li&gt;
&lt;li&gt;Filenames: huge work to support the PEP 383 everywhere, creation of
os.fsencode() and os.fsdecode()&lt;/li&gt;
&lt;li&gt;Python source code encoding: use tokenize.detect_encoding() instead
of the locale encoding&lt;/li&gt;
&lt;li&gt;some library examples: email, ftp, ...&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will present not only the changes in Python, but also in the C
API.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="python3"></category><category term="unicode"></category></entry></feed>