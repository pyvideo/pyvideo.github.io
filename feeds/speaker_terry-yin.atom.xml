<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_terry-yin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-01T00:00:00+00:00</updated><entry><title>Test-Driven Development of a Static Code Analyzer in Python</title><link href="https://pyvideo.org/pycon-apac-2018/test-driven-development-of-a-static-code-analyzer-in-python.html" rel="alternate"></link><published>2018-06-01T00:00:00+00:00</published><updated>2018-06-01T00:00:00+00:00</updated><author><name>Terry Yin</name></author><id>tag:pyvideo.org,2018-06-01:pycon-apac-2018/test-driven-development-of-a-static-code-analyzer-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static analyzers help us find problems in our code. They are like
compilers in terms of complexity; they need to know the syntax of target
languages. Is it possible to build such tools without comprehensive
upfront design? He will share his experience in making such tool in
Python over the past 8 years.&lt;/p&gt;
</summary></entry></feed>