<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_doug-hellmann.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-25T00:00:00+00:00</updated><entry><title>reno: A New Way to Manage Release Notes</title><link href="https://pyvideo.org/europython-2018/reno-a-new-way-to-manage-release-notes.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/reno-a-new-way-to-manage-release-notes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;reno is a tool for managing release notes in projects that support
multiple branches of development, and releases, simultaneously. It
solves the problem of managing release notes within patches that fix
bugs, and makes it easier to cherry-pick changes between branches
(allowing backports or forward ports). This talk will cover the
requirements, and constraints, that led us to design and build reno. I
will also show how to use it to create notes and publish them in your
packages and via Sphinx-based documentation. Then I will talk about the
impact reno, and the release notes publishing automation, had on our
project and release processes.&lt;/p&gt;
</summary></entry><entry><title>How OpenStack makes Python better (and vice-versa)</title><link href="https://pyvideo.org/europython-2016/how-openstack-makes-python-better-and-vice-versa.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Thierry Carrez</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/how-openstack-makes-python-better-and-vice-versa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thierry Carrez/Doug Hellmann - How OpenStack makes Python better (and vice-versa)
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/how-openstack-makes-python-better-and-vice-versa"&gt;https://ep2016.europython.eu//conference/talks/how-openstack-makes-python-better-and-vice-versa&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;OpenStack is an infrastructure stack mostly developed in Python. In
this talk, Thierry Carrez and Doug Hellmann, both Python Software
Foundation fellows and OpenStack Technical Committee members, will
look at the symbiotic relationship between OpenStack and Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;OpenStack is an open source stack that can be deployed on raw
computing resources to privately or publicly present Infrastructure as
a Service. It now consists of more than 4.5 million lines of code, 85%
of which is Python. In this talk, Thierry Carrez and Doug Hellmann,
both Python Software Foundation fellows and OpenStack Technical
Committee members, will look at the symbiotic relationship between
OpenStack and Python.&lt;/p&gt;
&lt;p&gt;We'll go back in history and explain why OpenStack originally picked
Python as its main language 6 years ago, and explore what does Python
bring to OpenStack. We'll dive into examples of OpenStack pushing
Python libraries to their limits and exposing new bugs. We'll look
into the massive cloud-based continuous integration system that
OpenStack uses and explain how it exposes bugs in Python libraries in
the minutes after they are published to PyPI. We'll look into Python
libraries that were created by the OpenStack community and libraries
that the OpenStack community took over. Finally we'll expose a few
best practices that Python developers can follow to get the most of
this symbiotic relationship.&lt;/p&gt;
</summary></entry><entry><title>How I built a power debugger out of the standard library and things I found on the internet</title><link href="https://pyvideo.org/pycon-us-2016/how-i-built-a-power-debugger-out-of-the-standard-library-and-things-i-found-on-the-internet.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/how-i-built-a-power-debugger-out-of-the-standard-library-and-things-i-found-on-the-internet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Doug Hellmann&lt;/p&gt;
&lt;p&gt;Smiley spys on your application, recording everything it does, using Python's built-in tracing facility and a database to create a complete record of your program's runtime so you can study it. Most of the tools I used to create Smiley are in Python's standard library, and the history of Smiley's development serves as a framework to discuss those tools and how you can tap their power yourself.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How I built a power debugger out of the standard library and things I found on the internet</title><link href="https://pyvideo.org/pyohio-2015/how-i-built-a-power-debugger-out-of-the-standard.html" rel="alternate"></link><published>2015-08-01T00:00:00+00:00</published><updated>2015-08-01T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2015-08-01:pyohio-2015/how-i-built-a-power-debugger-out-of-the-standard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Smiley spys on your application, recording everything it does, using
Python's built-in tracing facility and a database to create a complete
record of your program's runtime so you can study it. Most of the tools
I used to create Smiley are in Python's standard library, and the
history of Smiley's development serves as a framework to discuss those
tools and how you can tap their power yourself.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Hidden Treasures in the Standard Library</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--hidden-treasures-in-the-standard-libr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hidden Treasures in the Standard Library&lt;/p&gt;
&lt;p&gt;Presented by Doug Hellmann&lt;/p&gt;
&lt;p&gt;This presentation covers features of the standard library not widely
known or used. Each feature is presented with a short demonstration
program and explanation.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The standard library contains many hidden gems that are not widely used,
either because they are not publicized enough or because they are deep
in a module that programmers haven't had cause to study or use. This
presentation covers 8-10 selected topics of this nature in about 25
minutes (leaving time for a couple of questions). Demonstration code is
included for every item.&lt;/p&gt;
&lt;p&gt;Possible tips include, in no particular order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using hmac to verify pickled data before unpacking it.&lt;/li&gt;
&lt;li&gt;Using uuid4 to generate session tokens.&lt;/li&gt;
&lt;li&gt;Regular expression look-ahead/behind matches.&lt;/li&gt;
&lt;li&gt;pdb startup files&lt;/li&gt;
&lt;li&gt;Reading files with mmap&lt;/li&gt;
&lt;li&gt;Using csv dialects&lt;/li&gt;
&lt;li&gt;The robotparser module&lt;/li&gt;
&lt;li&gt;The rlcompleter module&lt;/li&gt;
&lt;li&gt;Using locale to format numbers and currency&lt;/li&gt;
&lt;li&gt;The cgitb module&lt;/li&gt;
&lt;li&gt;pkgutil.getdata&lt;/li&gt;
&lt;li&gt;contextlib.contextmanager&lt;/li&gt;
&lt;li&gt;The cmd module&lt;/li&gt;
&lt;li&gt;The fileinput module&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cgitb"></category><category term="cmd"></category><category term="contextlib.contextmanager"></category><category term="csv"></category><category term="fileinput"></category><category term="hmac"></category><category term="locale"></category><category term="pdb"></category><category term="pkgutil.getdata"></category><category term="pycon"></category><category term="pycon2011"></category><category term="rlcompleter"></category><category term="robotparser"></category><category term="uuid4"></category></entry><entry><title>Dynamic Code Patterns: Extending Your Applications with Plugins</title><link href="https://pyvideo.org/pycon-us-2013/dynamic-code-patterns-extending-your-application.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/dynamic-code-patterns-extending-your-application.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python makes loading code dynamically easy, allowing you to configure
and extend your application by discovering and loading extensions at
runtime. This presentation will discuss the techniques for dynamic code
loading used in several well-known applications and weigh the pros and
cons of each approach.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Better Documentation Through Automation: Creating Sphinx Extensions</title><link href="https://pyvideo.org/pycon-us-2013/better-documentation-through-automation-creating.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Doug Hellmann</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/better-documentation-through-automation-creating.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sphinx is an incredibly useful tool for creating attractive
documentation for your project, but if all you ever use it for is
converting reStructuredText files to HTML you are barely scratching the
surface of its power. This presentation shows how easy it is to extend
Sphinx by defining new markup processors, allowing you to take your
documentation to the next level.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>