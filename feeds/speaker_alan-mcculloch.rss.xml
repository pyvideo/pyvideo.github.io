<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 11 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>Some 10,000ft views of DNA Sequence Data using Python and R</title><link>https://pyvideo.org/kiwi-pycon-2016/some-10000ft-views-of-dna-sequence-data-using-python-and-r.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alan McCulloch
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/132/"&gt;https://kiwi.pycon.org/schedule/presentation/132/&lt;/a&gt;
To observe interesting structure in data we often need to throw away quite alot of information !
This talk is centered around a small python library I have developed, and some
applications that use it to help find structure in large DNA datasets,  mainly as part of
quality control  strategies used in a sequencing lab.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan McCulloch</dc:creator><pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/some-10000ft-views-of-dna-sequence-data-using-python-and-r.html</guid></item><item><title>tardis - an interpreter for command-line parallel execution</title><link>https://pyvideo.org/kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about simplifying the command line interface to local or
cluster based parallel computing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally the user of a command shell would be unaware whether their
commands were executed as a single process on the local machine, or as
many concurrent processes on either their local machine or a remote
cluster, apart from the reduced time taken to complete the command if
executed as concurrent processes. We have developed an approach which we
call “command conditioning” in which the user marks up a command with
hints to the interpreter which are used to transform the marked-up
command into “(re)conditioned” native shell commands which the
interpreter then launches concurrently and monitors, collects and
collates output and termination status. We have implemented an initial
python based command-conditioning interpreter called tardis. We describe
tardis, give examples of the class of compute tasks for which it is
suited, and briefly outline key compute-cluster design characteristics
which support this approach. We also touch on future work such as
potential integration with Galaxy, a popular python based workflow
system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution"&gt;https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan McCulloch</dc:creator><pubDate>Sat, 13 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html</guid><category>talk</category></item></channel></rss>