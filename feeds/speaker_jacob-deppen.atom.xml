<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jacob Deppen</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jacob-deppen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Documenting your code from docstrings to automated builds</title><link href="https://pyvideo.org/pycon-us-2022/documenting-your-code-from-docstrings-to-automated-builds.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jacob Deppen</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/documenting-your-code-from-docstrings-to-automated-builds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IF IT ISN'T DOCUMENTED, IT DOESN'T EXIST.&lt;/p&gt;
&lt;p&gt;Documentation can make or break a project. Getting it right takes effort, but that effort doesn't have to be painful. In this tutorial, we will take a multi-stage approach to documentation, starting with the fundamentals, adding complexity and style, then finishing with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IF IT ISN'T DOCUMENTED, IT DOESN'T EXIST.&lt;/p&gt;
&lt;p&gt;Documentation can make or break a project. Getting it right takes effort, but that effort doesn't have to be painful. In this tutorial, we will take a multi-stage approach to documentation, starting with the fundamentals, adding complexity and style, then finishing with automated publishing to the web. We will practice a maintainer-friendly workflow that smooths out some of the rough edges of creating documentation.&lt;/p&gt;
&lt;p&gt;It is never too early or too late to pick up good documentation techniques and tools. As such, this tutorial will have elements that are relevant to brand new Pythonistas (What does a good docstring look like? What is a type hint?) as well as long-time practitioners (How can I make my docs easier to maintain? Where can I host docs? How can I test examples in my docstrings?).&lt;/p&gt;
&lt;p&gt;We will cover code comments, docstrings, and type annotations as ways to add documentation within your code. Next, we will add a user interface and documentation prose layer with JupyterBook, Jupyter Notebooks, and Markdown. After that, we will use Sphinx to build API documentation. Finally, we will automate the build and publish steps with GitHub Actions and GitHub Pages.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Sprints - Let’s do more of those!</title><link href="https://pyvideo.org/pygotham-2019/sprints-lets-do-more-of-those.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Jacob Deppen</name></author><id>tag:pyvideo.org,2019-10-05:/pygotham-2019/sprints-lets-do-more-of-those.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few people attend conferences just to attend the associated sprints.
However, I want to tell you a story about how sprints offer a unique space
for certain kinds of ideas and collaboration that are otherwise difficult or
impossible to cultivate.&lt;/p&gt;
&lt;p&gt;I will begin at the end, by describing the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few people attend conferences just to attend the associated sprints.
However, I want to tell you a story about how sprints offer a unique space
for certain kinds of ideas and collaboration that are otherwise difficult or
impossible to cultivate.&lt;/p&gt;
&lt;p&gt;I will begin at the end, by describing the &lt;cite&gt;pandas-vet&lt;/cite&gt; plugin for the
&lt;cite&gt;flake8&lt;/cite&gt; linter. I will briefly summarize some elements underlying the
&lt;cite&gt;flake8&lt;/cite&gt; plugin (&lt;cite&gt;pandas&lt;/cite&gt; best practices, traversing the AST, and
entrypoints) as well as elements of a good open-source project (tests, CI,
pip-installable, contributor guidelines, and a code of conduct).&lt;/p&gt;
&lt;p&gt;Next, through Slack messages and GitHub commits, I will tell the story of
how the sprinting environment helped the project go from vague idea to
implementing all of those elements in just one day.&lt;/p&gt;
&lt;p&gt;Throughout the talk, I'll offer some of the lessons we should all learn
about what makes sprints unique, what makes them successful, and how this
project could only have been built in a sprint environment.&lt;/p&gt;
</content><category term="PyGotham 2019"></category></entry></feed>