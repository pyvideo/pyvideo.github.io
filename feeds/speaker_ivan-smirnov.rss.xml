<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 14 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>pybind11 - seamless operability between C++11 and Python</title><link>https://pyvideo.org/europython-2017/pybind11-seamless-operability-between-c11-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/pybind/pybind11"&gt;pybind11&lt;/a&gt; is a lightweight
header-only C++11 library that exposes C++ types to Python and vice
versa and allows creating Python extension modules with minimum
boilerplate by leveraging compile-time introspection and type
inference. While this library's goals and some of the  syntax may be
considered similar to Boost. Python, it has a much smaller footprint,
is entirely self-contained, and offers additional features like
direct support for NumPy arrays.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at how to write Python extension modules
in C++ from scratch with pybind11, starting from simple bindings and
building up to more complex examples that deal with iterators, STL
data structures, NumPy types and Python callbacks. We will also touch
upon some of the internal machinery of the library like the virtual
call mechanism and reference counting.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Smirnov</dc:creator><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-14:europython-2017/pybind11-seamless-operability-between-c11-and-python.html</guid></item><item><title>Type Hints for Static and Runtime Type Checking</title><link>https://pyvideo.org/pycon-ireland-2016/type-hints-for-static-and-runtime-type-checking.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The main objective of this talk is introducing type hints and the new
&amp;quot;typing&amp;quot; module that appeared in Python 3.5, along with the static
analysis tools that support them. As a part of this talk, we will also
discuss how to build a runtime type checker on top of the type hints
mechanics.&lt;/p&gt;
&lt;p&gt;Syllabus:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Function annotations&lt;/li&gt;
&lt;li&gt;Brief introduction to mypy&lt;/li&gt;
&lt;li&gt;Type hints, typing module&lt;/li&gt;
&lt;li&gt;Runtime type checking&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Smirnov</dc:creator><pubDate>Sun, 06 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-06:pycon-ireland-2016/type-hints-for-static-and-runtime-type-checking.html</guid></item></channel></rss>