<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 28 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>Geofront 개발 후기: Python 2와 작별하고 Python 3로 개발하기</title><link>https://pyvideo.org/pycon-korea-2014/geofront-gaebal-hugi-python-2wa-jagbyeolhago-python-3ro-gaebalhagi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geofront는 소규모 팀에서 운영하는 서버에 인증하는 SSH 키를 관리하기 위한
오픈 소스 소프트웨어입니다. (Geofront 자체에 대한 설명은 스포카 개발팀
블로그에 올라온 &lt;a class="reference external" href="http://spoqa.github.io/2014/07/09/geofront.html"&gt;Geofront: 소규모 팀을 위한 SSH 키 관리
서비스&lt;/a&gt;를
읽어주세요.)&lt;/p&gt;
&lt;p&gt;Geofront는 Python 3 전용으로 작성되었는데, Python 3만 사용하여 개발하며
경험한 바를 공유합니다.&lt;/p&gt;
&lt;p&gt;주로 Python 2를 쓸 때에 비교해서 Python 3를 쓰면 어떤 점이 좋은지, 과연
이제 정말 Python 3를 써도 괜찮은 것인지, Python 3를 쓸 때 유의해야할
것이 무엇이 있는지를 다루려고 합니다.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">홍민희</dc:creator><pubDate>Sat, 30 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-30:pycon-korea-2014/geofront-gaebal-hugi-python-2wa-jagbyeolhago-python-3ro-gaebalhagi.html</guid></item><item><title>RPC 프레임워크 제작 삽질기</title><link>https://pyvideo.org/pycon-apac-2016/rpc-peureimweokeu-jejag-sabjilgi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;발표자: 홍민희
슬라이드: &lt;a class="reference external" href="https://speakerdeck.com/minhee/rpc-peureimweokeu-jejag-sabjilgi"&gt;https://speakerdeck.com/minhee/rpc-peureimweokeu-jejag-sabjilgi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;스포카에서 일하면서 부쩍 마이크로서비스 단위로 배포하여 제품을 구현하는 일이 많아졌습니다. 그러다보니 같은 파이썬 프로세스 안에서는 간단하게 파이썬 함수 호출로 해결할 수 있던 것들도 항상 RPC를 위한 외부 인터페이스를 구현해야 하고, 또 호출하는 쪽에서도 그것을 사용하기 위한 코드가 많이 필요했습니다. 그 뿐만 아니라 장애 내성을 항상 고려하여, 상대 서비스가 죽어도 어떻게든 failover하도록 구현하는 것도 필요합니다. 그러다보니 하나의 모놀리틱 서비스로 구현할 때에 비해서 필요한 코드가 훨씬 많아질 뿐더러, 서비스 사이에서 비슷한 코드가 공유되지 않은 채 복제되는 현상도 나타났습니다.&lt;/p&gt;
&lt;p&gt;이를 극복하기 위해 기존의 Thrift나 Cap’n Proto와 같은 RPC 프레임워크 도입도 했으나, 결과적으로 스포카의 비즈니스 패턴과는 잘 부합하지 않는다는 교훈을 얻었습니다. 이를 바탕으로 스포카 내에서 쓰기에 알맞은 RPC 프레임워크를 만들게 되었습니다.&lt;/p&gt;
&lt;p&gt;본 발표에서는 크게 3가지 경험을 공유하고 싶습니다.&lt;/p&gt;
&lt;p&gt;기존 범용 RPC 프레임워크가 제공하는 기능들과, 제공하지 않는 기능들에 대해서, 그리고 실제 적용했을 때의 어려웠던 점을 공유합니다.
스포카가 다루는 비즈니스 특성이 어떻게 범용 RPC 프레임워크와 잘 맞지 않게 되었는지, 그 결과 새로 만들게 된 RPC 프레임워크가 특징적으로 고려해야 했던 설계가 무엇이었는지 공유합니다.
실제로 RPC 프레임워크를 구현하다보면 마주하게 됐던 미처 생각하지 못했던 어려움에 대해서도 공유합니다.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">홍민희</dc:creator><pubDate>Sun, 28 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-28:pycon-apac-2016/rpc-peureimweokeu-jejag-sabjilgi.html</guid></item></channel></rss>