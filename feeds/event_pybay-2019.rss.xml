<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 17 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>Accelerating Driver Development with CircuitPython</title><link>https://pyvideo.org/pybay-2019/accelerating-driver-development-with-circuitpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
An introduction to Python on hardware from the perspective of writing device drivers for embedded systems.&lt;/p&gt;
&lt;p&gt;Abstract
My talk will start with an overview of embedded development and working with sensors, highlighting differences compared to normal computing. Once the broad strokes are covered I will explain the high level goals and techniques of writing drivers specifically before diving into the details I will first discuss using datasheets to determine how a device works and what it's capabilities are. Following that I will discuss using the device’s capabilities by writing to and reading from registers and will include a review of basic bitwise operations. Next will discuss the common communication protocols used in embedded development before talking about the CircuitPython libraries that support them. Finally I will discuss some newer libraries that I use that make developing drivers very simple and compare it with traditional embedded development practices.&lt;/p&gt;
&lt;p&gt;Original slides:&lt;/p&gt;
&lt;p&gt;About the speaker
After braving the first 15 years of my professional life as a web developer, I was recently given a once in a lifetime opportunity to turn my passion into my profession. I turned in my software spurs to work full time as an embedded engineer for an amazing open source hardware and software company and have been living the dream ever since. Hardware provides a hands on relationship with the fruits of your labor that is hard to find in pure software and I find makes the work especially rewarding.&lt;/p&gt;
&lt;p&gt;Outside of work I am a kayak fisherman, music aficionado, endless tinkerer, accomplished jerry-rigger, father to 3 cats, two dogs, 6 fish, and a chinchilla, and husband to an amazing artist and teacher.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bryan Siepert</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/accelerating-driver-development-with-circuitpython.html</guid></item><item><title>Amazing things your ORM can or can't do</title><link>https://pyvideo.org/pybay-2019/amazing-things-your-orm-can-or-cant-do.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
SQL can seem like an obscure but somehow useful language. In this talk we will look into things that SQL can do, sometimes more easily than using python, and how to get it in your ORM, running in your application. During this talk we will use an application analysing the lyrics of my favorite teenage band and show fun examples of these SQL statements, and how to integrate them in your code&lt;/p&gt;
&lt;p&gt;Abstract
This talk has as a goal to go into the SQL language and see what ORMs (django, sql alchemy) support them. At the end of the talk what I would like is: for developers to understand SQL, and how ORM executes SQL better to discover fun SQL things that they might not know, and what can or can't be used with simple ORMs call and if it's not (yet) in the ORM, how can I execute it beautifully&lt;/p&gt;
&lt;p&gt;The talk will take an example of analysing song lyrics of an artist, with fun queries on frequency of words over the years, most common patterns etc. There will be a simple django app and I will show how the following can be done, and how it is useful: joins group by aggregations window functions lateral joins ctes grouping sets&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/B0jV7"&gt;https://t.ly/B0jV7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
I'm a software developer at citus data (Microsoft). I have been using django for over 5 years and enjoy working on performance using my two favorite things: python and SQL. I have also been involved in the postgres and postgresWomen community. I have talked to django con europe and pycarribean, and love the python community !&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Louise Grandjonc</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/amazing-things-your-orm-can-or-cant-do.html</guid></item><item><title>An Intro to Load Testing with Locust and Python</title><link>https://pyvideo.org/pybay-2019/an-intro-to-load-testing-with-locust-and-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Puzzling over performance problems in production? Baffling backend bugs bending your brain? Unleash a plague of Locusts on your web app to devour performance problems, permanently! In this talk, you will learn how to leverage Locust for load testing RESTful services and more.&lt;/p&gt;
&lt;p&gt;Abstract
Overview:&lt;/p&gt;
&lt;p&gt;Locust is an open source Python library that you can use to identify bottlenecks in your code by pummeling your programs with tens, hundreds, or even thousands of separate workers. Using Locust, we can simulate the kinds of continuous traffic that web applications experience out in the wild. This kind of load testing, like any other contraption in the tester's toolbox, plays a critical role in the process of delivering robust, stable, and battle-tested software.&lt;/p&gt;
&lt;p&gt;Come to this talk for a practical, ground-level intro to load testing, writing a locustfile.py, and debugging the kinds of problems that arise while hammering an application with hundreds or even thousands of requests per minute for the very first time. Additionally, we will dig into ways that you can get the most out of Locust's built-in reporting mechanisms and randomize incoming traffic for more realistic testing scenarios. Finally, I will demonstrate a distributed load test using multiple agent servers and a controller.&lt;/p&gt;
&lt;p&gt;So what are you waiting for? Create a calamity of Biblical scale and arrange your application's apocalypse... for science!&lt;/p&gt;
&lt;p&gt;Warning: bad puns and ample alliteration are fair game during this talk.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;p&gt;What is load testing, and why do I need to use it?
Simulating users
Discovering operational capacity and breaking points
Knowing the consequences of your code!
What are the differences between functional and load testing?
Perfect results are secondary
The secret to successful load testing: You don't want these tests to pass!
Why is load testing so important when developing software today?
Running applications at scale and knowing when to allocate resources
Graceful failures and fault tolerance
BREAK ALL THE THINGS.
Writing your first locustfile.py
Defining a set of tasks
Randomizing tasks and setting weights
Executing tasks in sequence
Understanding the results of a load test and debugging common problems
Distributed load testing
Using an agent/controller architecture to coordinate requests
Options for monitoring applications at scale
A brief intro to testing applications that aren't RESTful services&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://drive.google.com/file/d/1AJmop4PXVGjTkWTLptDluEMChjTFgAnG/view?usp=sharing"&gt;https://drive.google.com/file/d/1AJmop4PXVGjTkWTLptDluEMChjTFgAnG/view?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Gabriel works remotely for a San Francisco startup as a Senior Software Engineer and primarily uses JVM languages to get the job done. He has been, however, a longtime supporter of the Python community and enjoys writing Python wherever possible. Ask him about the pros and cons of Java versus Python and why he thinks that light themes are truly the better choice!&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Boorse</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/an-intro-to-load-testing-with-locust-and-python.html</guid></item><item><title>As We May Program</title><link>https://pyvideo.org/pybay-2019/as-we-may-program.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Innovations in machine learning are changing our perception of what is possible to do with a computer. But how will machine learning change the way we program, the tools we use, and the mix of tasks done by expert programmers, novice programmers, and non-programmers? This talk examines some possible futures.&lt;/p&gt;
&lt;p&gt;About the speaker
Peter Norvig is a Director of Research at Google Inc. Previously he was head of Google's core search algorithms group, and of NASA Ames's Computational Sciences Division, making him NASA's senior computer scientist. He received the NASA Exceptional Achievement Award in 2001. He has taught at the University of Southern California and the University of California at Berkeley, from which he received a Ph.D. in 1986 and the distinguished alumni award in 2006. He was co-teacher of an Artifical Intelligence class that signed up 160,000 students, helping to kick off the current round of massive open online classes. His publications include the books Artificial Intelligence: A Modern Approach (the leading textbook in the field), Paradigms of AI Programming: Case Studies in Common Lisp, Verbmobil: A Translation System for Face-to-Face Dialog, and Intelligent Help Systems for UNIX. He is also the author of the Gettysburg Powerpoint Presentation and the world's longest palindromic sentence. He is a fellow of the AAAI, ACM, California Academy of Science and American Academy of Arts &amp;amp; Sciences.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Norvig</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/as-we-may-program.html</guid></item><item><title>Audio Processing and ML using Python</title><link>https://pyvideo.org/pybay-2019/audio-processing-and-ml-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Challenges with Audio Classification problems focussing on cleaning and building features from audio which can then be used to build a classification model, features that work well with audio and speech data and the open source libraries useful for the same.&lt;/p&gt;
&lt;p&gt;Abstract
Audio data, unlike other data, needs a bit of a different approach while trying to extract information and building classification models. I will talk about cleaning audio signal approaches, how to form features from an audio and what features help extract the unseen information that can help with classification models.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://drive.google.com/file/d/1evkUgkxPTNFBUE7obMnACa__5tUp01sX/view?usp=sharing"&gt;https://drive.google.com/file/d/1evkUgkxPTNFBUE7obMnACa__5tUp01sX/view?usp=sharing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
I am a Data Scientist living in San Diego and a UCLA Master's graduate. I'm passionate about solving problems using the power of Data and Machine Learning.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jyotika Singh</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/audio-processing-and-ml-using-python.html</guid></item><item><title>Be Ye Therefore Wise As Serpents</title><link>https://pyvideo.org/pybay-2019/be-ye-therefore-wise-as-serpents.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Too often, the people giving talks have already arrived at big fancy titles: Directors of Engineering, Chief Scientists, and Founders. But at some point, all of us will interview for that dream job, and most of us will suffer a coding interview or two or twenty. Fortunately, Python is an ideal language for many coding interviews. Come discover tools and tips for technical interviews with Python.&lt;/p&gt;
&lt;p&gt;Abstract
The dreaded technical interview: 45 minutes, an algorithmic puzzle, your career, and hundred(s) of thousands of dollars all hanging in the balance. An odd niche of programming, the technical interview will often require tradeoffs which you would not make in daily work. We'll look at three kinds of technical interviews: algorithmic, object-oriented, and coding; and many kinds of solutions: brute-force, greedy, divide-and-conquer, recursive, back-tracking, dynamic-programming, recurrence relations, and finite state machines.&lt;/p&gt;
&lt;p&gt;We'll review the big-O of Python's core data type abstractions (sequences, mappings, sets) along with helpful standard library modules like collections, heapq, bisect, and itertools. There's a number of core language features like iteration, lexicographic ordering, and the numeric hierarchy that are helpful. And dozens of tips around placeholders, managing two-dimensional data structures, and gotcha-differences between Python and other languages.&lt;/p&gt;
&lt;p&gt;I recently decided to return to the corporate world and had the (mis)fortune to endure dozens of coding interviews across Facebook, Apple, Amazon, LinkedIn, Google, and startups. Learn from my mistakes! Like, pitfalls with an interviewer that doesn't know Python? Or how and where to practice? Come learn the assets and liabilities of Python as applied to the technical interview.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/Yrg2E"&gt;https://t.ly/Yrg2E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Grant Jenks is a technical leader with a proven track record of turning research and product ideas into high performance software. He has eleven years of experience in software engineering. After five years at Microsoft as a compiler engineer on the Midori OS incubation project, Grant founded an adtech company and applied his expertise in distributed systems and machine learning to predicting search engine rankings. Grant loves Python and looks for opportunities to give back to the open-source community.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grant Jenks</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/be-ye-therefore-wise-as-serpents.html</guid></item><item><title>Boring Object Orientation</title><link>https://pyvideo.org/pybay-2019/boring-object-orientation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
The strengths and weaknesses of Python lend themselves to a different style of object oriented programming. By accepting several constraints on how we design and implement classes, we make our code more robust, more testable, and easier to adapt to changing circumstances.&lt;/p&gt;
&lt;p&gt;Abstract
Detailed outline
Introduction (2m)
Python and object oriented programming (1m)
Why OO design principles? (1m)
Interfaces (4m)
Delve into the best practices of explicit (sometimes called &amp;quot;goosely typed&amp;quot;) interfaces in Python, and showing how to use those with the zope.interface system.&lt;/p&gt;
&lt;p&gt;Why declare interfaces?
Declaring interfaces with zope.interface.
Implementing and providing interfaces with zope.interface.
Testing for interface provision.
Boring constructors (4m)
Newcomers to Python often put non-trivial code in the constructors. This is often a bad idea. This section will cover why, and show where is the right place to put non-trivial initialization logic.&lt;/p&gt;
&lt;p&gt;Boring vs. interesting constructors.
Why boring constructors.
Moving interesting stuff to class methods.
Using attrs.
Boring objects (4m)
&amp;quot;Objects are data and behavior&amp;quot; -- following this principle in a naive way leads to putting a lot of code inside objects, creating unwieldy objects and unwieldy interfaces. This section will discuss why that is problematic, and show-case some alternatives.&lt;/p&gt;
&lt;p&gt;Why make objects boring? (1m)
What's singledispatch (1m)
Example using functools.singledispatch (2m)
Immutability (4m)
Shared mutable state is the root of all evil -- and in Python, a lot of things are shared! One way to avoid evil is to reduce mutability. This section will discuss how to avoid mutability while keeping reasonable performance and ergonomic APIs.&lt;/p&gt;
&lt;p&gt;Immutability as bug-avoidance (1m)
Immutability as simpler interfaces (1m)
Frozen attrs
Efficiently immutable data structures
Avoiding Private Methods (4m)
Private methods are often under-documented crutches. This section will discuss the kind of problems they can cause, and describe good alternatives as well as an almost-mechanical refactoring to avoid private methods.&lt;/p&gt;
&lt;p&gt;What's wrong with private methods? (1m)
Using private attributes (1m)
Refactoring private methods away (2m)
Composition (4m)
Traditional object-orientation stressed inheritance. However, for a long time, it has been known that inheritance is problematic -- even the GoF &amp;quot;Design Patterns&amp;quot; covers how to avoid it. This section will cover the problems it causes, and good alternatives.&lt;/p&gt;
&lt;p&gt;Inheritance-as-API (1m)
Problems with inheritance-as-API (1m)
What is composition? (1m)
Composition-as-API (1m)
Summary (3m)
Bringing this all to a close, the summary will show the common thread in all of these -- that keepings objects simple and predictable (&amp;quot;boring&amp;quot;) leads to code that is easier to maintain.&lt;/p&gt;
&lt;p&gt;Python affords near-infinite freedom (1m)
Choices have consequences (1m)
Know the rules to break the rules (1m)&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/6g1rZ"&gt;https://t.ly/6g1rZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Moshe has been in the open source community since 1995 and in the Python community since 1999. He has been a core contributor to Python, and is a core contributor, and an early member, of the Twisted project.&lt;/p&gt;
&lt;p&gt;Moshe has given talks at the International Python Conference, PyCon, PyBay, PyTexas and several Python and Docker meetups.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/boring-object-orientation.html</guid></item><item><title>Building a Sustainable Python Package Index</title><link>https://pyvideo.org/pybay-2019/building-a-sustainable-python-package-index.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Abstract
Most of us have installed a Python package, but do we know what it takes to make that work in a consistent, reliable way?&lt;/p&gt;
&lt;p&gt;Unlike some other languages, Python has a centralized repository for third-party Python packages. Also unlike some other languages, this repository, the Python Package Index, is entirely supported by the community and operated by the non-profit Python Software Foundation.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss why we have the PyPI we all know and love, and why the current status quo is preferred. We'll go a bit into how PyPI works, both from a technical perspective, and from the perspective as an open-source and non-profit project.&lt;/p&gt;
&lt;p&gt;Finally, we'll have a call to action to help improve, and more importantly sustain, this critical piece of Python infrastructure.&lt;/p&gt;
&lt;p&gt;About the speaker
Dustin is a Developer Advocate at Google, focused on supporting the Python community on Google Cloud. He's also a member of the Python Packaging Authority, maintainer of the Python Package Index, and organizer for the PyTexas conference.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/building-a-sustainable-python-package-index.html</guid></item><item><title>CUDA in your Python: Parallel Programming on the GPU</title><link>https://pyvideo.org/pybay-2019/cuda-in-your-python-parallel-programming-on-the-gpu.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
It’s 2019, and Moore’s Law is dead. CPU performance is plateauing, but GPUs provide a chance for continued hardware performance gains, if you can structure your programs to make good use of them. In this talk you will learn how to speed up your Python programs using Nvidia’s CUDA platform.&lt;/p&gt;
&lt;p&gt;Abstract
CUDA is a platform developed by Nvidia for GPGPU--general purpose computing with GPUs. It backs some of the most popular deep learning libraries, like Tensorflow and Pytorch, but it has broader uses in data analysis, data science, and machine learning.&lt;/p&gt;
&lt;p&gt;There are several ways that you can start taking advantage of CUDA in your Python programs.&lt;/p&gt;
&lt;p&gt;For some common Python libraries, there are drop-in replacements that let you start running computations on the GPU, while still using APIs that you might be familiar with. For example, CuPy provides a Numpy-like API for interacting with multi-dimensional arrays. Another recent project is cuDF by RAPIDS AI, which mimics the pandas interface for dataframes.&lt;/p&gt;
&lt;p&gt;If you want more control over your use of CUDA APIs, you can use the PyCUDA library, which provides bindings for the CUDA API that you can call from your Python code. Compared with drop-in libraries, it gives you the ability to manually allocate memory on the GPU, as well as to write custom CUDA code. However, it comes with some drawbacks, such as having to write your CUDA code as large strings in your Python program, and compiling your CUDA code while running your program, rather than beforehand.&lt;/p&gt;
&lt;p&gt;Finally, for the best performance you can use the Python C/C++ extension interface, the approach taken by deep learning libraries like Pytorch. One of the strengths of Python is the ability to drop down into C/C++, and libraries like Numpy take advantage of this for increased speed. If you use Nvidia’s nvcc compiler for CUDA, you can use the same extension interface to write custom programs in CUDA and then call them from your Python code.&lt;/p&gt;
&lt;p&gt;This talk will explore each of these methods, provide examples to get started, and discuss in more detail the pros and cons of each approach.&lt;/p&gt;
&lt;p&gt;About the speaker
William Horton is a Senior Backend Engineer at Compass, where he works on systems for ingesting, processing, and serving millions of real estate listings. In his spare time, he blogs and speaks about deep learning, contributes to open-source libraries like fastai and pytorch, and competes in computer vision competitions on Kaggle. When he’s not doing tech things, he enjoys powerlifting and singing a cappella.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Horton</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/cuda-in-your-python-parallel-programming-on-the-gpu.html</guid></item><item><title>CuPy: A NumPy compatible Library for the GPU</title><link>https://pyvideo.org/pybay-2019/cupy-a-numpy-compatible-library-for-the-gpu.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
This workshop will have four or so Lego Mindstorms that we'll use to learn how to program a Mindstorm to use its camera to follow a racetrack made out of tape.&lt;/p&gt;
&lt;p&gt;Abstract
Using a real-time OS, we will learn about computer vision using the tools made by Lego. Time permitting, we will then remove parts of the racetrack and use machine learning to improve our race car.&lt;/p&gt;
&lt;p&gt;About the speaker
Sean is a tech advocate for Preferred Networks, a Berkeley-based robotics company. He teaches python and machine learning, writes tutorials, and connects with the greater developer community in the Bay Area. In his spare time, he enjoys volunteering at PyLadies, hacking on open source, and traveling.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Farley</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/cupy-a-numpy-compatible-library-for-the-gpu.html</guid></item><item><title>Deep Learning By Doing</title><link>https://pyvideo.org/pybay-2019/deep-learning-by-doing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bill Chen</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/deep-learning-by-doing.html</guid></item><item><title>Dependency Injection, Quickly</title><link>https://pyvideo.org/pybay-2019/dependency-injection-quickly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Dependency Injection is a basic technique in other languages or frameworks, but less commonly seen in Python. For many developers, and especially those who have come to rely on patching, it is also un-intuitive. Superficially, it may be considered as simply &amp;quot;passing things in&amp;quot; via parameters, but this understanding is mistaken, and often falls apart when applied to realistic examples.&lt;/p&gt;
&lt;p&gt;Understanding DI as a technique is a gateway to improving both your software design and testing, as well as clean architecture principles. This session will introduce fundamental DI concepts with basic examples, clear up some common misunderstandings, and draw a connection to clean design and testing. The content is aimed at a beginning to intermediate level.&lt;/p&gt;
&lt;p&gt;Abstract
Dependency Injection is a basic technique in many statically compiled and/or object oriented languages, but is less common in Python, most likely due to its dynamic nature, and the diversity in background of the Python community.&lt;/p&gt;
&lt;p&gt;In lieu of DI techniques, Python developers often resort to more traditional &amp;quot;top-down&amp;quot; design, relying on global variables and singletons; and patching to test.&lt;/p&gt;
&lt;p&gt;Though this style of development has the advantage of being straightforward at a small scale, it scales poorly for larger, more complex enterprise applications.&lt;/p&gt;
&lt;p&gt;DI as a technique is often unintuitive and misunderstood by many developers when they first encounter it. This talk will demonstrate dependency injection by simple examples, describe some common misconceptions, and show its connection to other concepts like clean architecture.&lt;/p&gt;
&lt;p&gt;The intended audience is beginner to intermediate. (For a 40 minute version, some content for advanced developers could be included).&lt;/p&gt;
&lt;p&gt;About the speaker
Ed is a polyglot programmer with interests in software engineering, software architecture and modularizations, and socio-technical systems.&lt;/p&gt;
&lt;p&gt;Previously he's worked in complex domains ranging from industrial robotics, to medical systems, but most recently has been a platform engineer at Quid, working on a mix of data engineering and microservices for NLP and ML applications.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ed Jung</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/dependency-injection-quickly.html</guid></item><item><title>Extending GDB with Python</title><link>https://pyvideo.org/pybay-2019/extending-gdb-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
GDB is powerful, and can be extended with Python to do more than just one-off debugging. This talk will describe using Python with GDB to with GDB to write tools that interact with running processes, highlighting GDB’s ability to call C functions and how this can be coupled with Python’s C-API to inject code without needing to stop the process.&lt;/p&gt;
&lt;p&gt;Abstract
The first half of the talk will be introductory in nature. I will talk about GDB and some of the specifics of how it can be extended with Python. The second half of the talk I will use the things discussed to create a program that does simple memory analysis of all objects in a running Python process.&lt;/p&gt;
&lt;p&gt;Introduction- who I am, what this talk is about (1 min)
GDB Introduction (3 min) a. What it is typically used for- debugging segfaults, etc b. How it works- ptrace under the hood c. Can execute C code (this will be important later in the talk) d. Source files (also important later in the talk)
GDB Python API (6 min) a. Accessing Python from GDB: basic commands (python [command], source, py-list, etc) b. Accessing GDB from Python: To use GDB in Python, from a GDB process, you can import gdb and all of the API is available to you. The API has extensive options to allow for many types of analysis but I will focus on some of the more basic options: executing GDB CLI strings, setting GDB parameters, and creating custom GDB commands. Docs: &lt;a class="reference external" href="https://sourceware.org/gdb/current/onlinedocs/gdb/Python-API.html#Python-API"&gt;https://sourceware.org/gdb/current/onlinedocs/gdb/Python-API.html#Python-API&lt;/a&gt; c. Show an example using gdb and Python’s C-API: gdb.execute(‘call PyRun_SimpleString(“print(‘Hello World’)”)’)
Problem Statement: I want to know what objects are taking up the most memory in my program, but I don’t want to (or more realistically, can’t) add code to my process to do the data collection. Solution: Use GDB to inject into my running process some memory analysis code (we can use open-source projects like objgraph or pympler to do the memory work for us) and get that data back without killing the debugged process. (2 min)
Launch a GDB subprocess and attach to the running process we are interested in debugging. (2 min)
In the GDB subprocess command, connect to a Python script file that GDB can use as a ‘source file’. This file will be able to import gdb and use the GDB Python API to create custom commands. (1 mins)
Write a custom command by inheriting from gdb.Command and using gdb.execute with PyRun_SimpleString (3 mins)
Memory analysis tools can be injected the same way as print(‘Hello World’) using PyRun_SimpleString, but PyRun_SimpleString only likes one line at a time. To get around this, I place all the code I would like executed in another file, and have PyRun_SimpleString run an exec(file.read()) on the open file (3 mins)
Two gotchas: locking the GIL, and making sure the running process has access to the memory analysis modules (2 min)
Conclusion (2 min)&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/3VX2b"&gt;https://t.ly/3VX2b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Lisa is a Production Engineer at Facebook and a CPython Core Developer. She is passionate about Python, and has spent time using Python on networking and security teams, and now focuses on improving the language itself and enabling other users of it.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lisa Roach</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/extending-gdb-with-python.html</guid></item><item><title>Full Stack Web with Nothing but Python: How Anvil Works</title><link>https://pyvideo.org/pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Programming for the Web requires 5 languages and 5+ frameworks. Wouldn’t it be easier if we could do it all in Python?&lt;/p&gt;
&lt;p&gt;Meredydd will discuss how he built Anvil, a tool for building full-stack web apps with nothing but Python. Topics include compiling Python to JS, how autocompletion works, capability-based security, and why true accessibility means more than “usable by beginners”.&lt;/p&gt;
&lt;p&gt;Abstract
Modern Web programming is a usability nightmare. A typical web app translates every action, and every piece of data, into six different representations (Database, server-side model, JSON, client-side model, HTML DOM, and pixels). To navigate this complexity requires five different programming languages and five or more separate frameworks, just to get to “Hello, World”. And that’s before you fire up Webpack and friends! Is this complexity really necessary?&lt;/p&gt;
&lt;p&gt;In this talk, Meredydd will discuss how he built Anvil, a system for web programming in which one language (Python) and one representation (Python objects) can express the entirety of a web app. This allows us to bring back lost luxuries from the 1990s, like drag-and-drop component design and end-to-end autocompletion.&lt;/p&gt;
&lt;p&gt;He will discuss in detail why and how Anvil was built, including:&lt;/p&gt;
&lt;p&gt;Why the modern Web is so hard to program for
How we compile Python to Javascript for front-end code
How capability-based access control lets you avoid plumbing every action through five layers of your stack
How Anvil’s end-to-end Python autocompleter works
Why code is good, and why true accessibility means more than just “usable by beginners”&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/Yrkj5"&gt;https://t.ly/Yrkj5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Meredydd has been programming since the halcyon days of Visual Basic. He holds a PhD in the usability of programming systems from the University of Cambridge, and has a few years’ frustration with the Web platform to get off his chest. This led him to co-create Anvil.&lt;/p&gt;
&lt;p&gt;He has contributed to open source since high school, and is currently a core maintainer of the Skulpt Python-to-Javascript compiler. In his spare time, he dances (he has competed for England) and flies light aircraft.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Meredydd Luff</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/full-stack-web-with-nothing-but-python-how-anvil-works.html</guid></item><item><title>How to Write Pytest Plugins</title><link>https://pyvideo.org/pybay-2019/how-to-write-pytest-plugins.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Pytest is a widely-used, full-featured Python testing tool that helps you write better programs. Did you know that you can easily enhance and customize Pytest through the use of plugins? In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins.&lt;/p&gt;
&lt;p&gt;Abstract
Pytest is a widely-used, full-featured Python testing tool that helps you write better programs. Whether you have been using Pytest for years or are just getting started, you may find features of Pytest that you would like to modify or customize for your own environment or specific use cases. Did you know that you can easily enhance and customize Pytest through the use of plugins? In this talk, you will learn all about some of the useful Pytest plugins that are available, and learn how to create your own plugins. We will walk through the plugin creation process by creating a plugin to upload Pytest reports to a Google Cloud Storage bucket.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/RX8Yp"&gt;https://t.ly/RX8Yp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Darlene Wong is a Silicon Valley native, currently working as a Sr. Software Development Engineer in Test at Palo Alto Networks. In the past, she worked on engineering velocity tools at Tango, security tools at Juniper, data engineering at NearbyNow, and developer productivity tools at Cisco. Darlene holds an MS in Computer Engineering from Santa Clara University and a BS in Computer Science from UCLA. She enjoys dance, volunteering, and travel.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Darlene Wong</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/how-to-write-pytest-plugins.html</guid></item><item><title>Identifying influencers via Slack Messages in Python using Network Analysis and NLP</title><link>https://pyvideo.org/pybay-2019/identifying-influencers-via-slack-messages-in-python-using-network-analysis-and-nlp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Learn how to build a network web in Python to reflect conversations between people based on Slack conversations. Then, build a natural language processing model to evaluate what all those people are talking about, and which conversations determine who in the network carries “technical knowledge”.&lt;/p&gt;
&lt;p&gt;Abstract
What can you do with your Slack data? Turns out, a lot! In this presentation, we will go over the basics of how to build a network map in Python, in this instance, using your conversations in Slack regarding who is talking to who. From there, we will dive deeper into the diagram by building a rule-based natural language processing model and a basic machine learning model to understand the context of the conversations that we’ve mapped. Which conversations are social and which are work-related? Which conversations are people asking for advise or technical questions? Who are the main players in the map who answer people’s questions quickly and effectively? Through this process, we are able to find 5 “influencers” out of 200,000 Slack messages.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/2JZzd"&gt;https://t.ly/2JZzd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Eva Sasson is a technical Product Marketer at Sentry.io, an open source &amp;amp; SaaS startup that supports developers on the wild journey to debug the code they build. In addition to working at Sentry and advising impact startups, Sasson has an MSc in Business Analytics and Management Science from University College London, where she explored building data science models in Python and dove into a handful of subjects from bias in machine learning to prediction models. Sasson presented about Network Graphs at the Sunbelt Conference in Utrecht, Netherlands, Pycon Canada, PyTennessee and about Machine Learning Bias at DataDay Mexico, in addition to speaking engagements at the United Nations Human Rights Counsel in Geneva, and at the startup conferences in Silicon Valley, Mobile Beat and Demo. A college entrepreneur and technical product marketer, Sasson’s passion is to support women and underrepresented communities in tech, in addition to transitioning to a zero waste lifestyle and keeping lots of things in jars.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eva Sasson</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/identifying-influencers-via-slack-messages-in-python-using-network-analysis-and-nlp.html</guid></item><item><title>Koalas: Easy Transition from pandas to Apache Spark</title><link>https://pyvideo.org/pybay-2019/koalas-easy-transition-from-pandas-to-apache-spark.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In this talk, we present Koalas, a new open source project that was announced at the Spark + AI Summit in April. Koalas is a Python package that implements the pandas API on top of Apache Spark, to make the pandas API scalable to big data. Using Koalas, data scientists can make the transition from a single machine to a distributed environment without needing to learn a new framework.&lt;/p&gt;
&lt;p&gt;Abstract
Pandas is the standard tool for data science in python, and it is typically the first step to explore and manipulate a data set by data scientists. The problem is that pandas does not scale well to big data. It was designed for small data sets that a single machine could handle.. When data scientists work today with very large data sets, they either have to migrate to PySpark to leverage Spark or downsample their data so that they can use pandas.&lt;/p&gt;
&lt;p&gt;This presentation will give a deep dive into the conversion between Spark and pandas dataframes. Through live demonstrations and code samples, you will understand: - how to effectively leverage both pandas and Spark inside the same code base - how to leverage powerful pandas concepts such as lightweight indexing with Spark - technical considerations for unifying the different behaviors of Spark and pandas&lt;/p&gt;
&lt;p&gt;About the speaker
Xiao Li is an engineering manager, Apache Spark Committer, and PMC member at Databricks. His main interests are on Spark SQL, data replication and data integration. Previously, he was an IBM master inventor and an expert on asynchronous database replication and consistency verification. He received his Ph.D. from University of Florida in 2011.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Xiao Li</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/koalas-easy-transition-from-pandas-to-apache-spark.html</guid></item><item><title>Make the Most of it: Negotiation and Self Advocacy</title><link>https://pyvideo.org/pybay-2019/make-the-most-of-it-negotiation-and-self-advocacy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Everyone deserves to make the most of their career opportunities, but it can be difficult to ask for a raise or negotiate an offer. This talk will not only inspire you to stop holding back from advocating for yourself, but also give you a concrete mental model and specific statements you can use to build healthy employment relationships with recruiters and managers.&lt;/p&gt;
&lt;p&gt;Abstract
It is easy to overlook the offer stage of hiring because it is stressful, and it can feel like an accomplishment simply being hired. However, the terms of one’s employment are the foundation of a rich, long-term relationship that will continue to include conversations about responsibilities, performance, compensation and growth. Unfortunately, many engineers look back with regret at early employment conversations, and find themselves catching up to repair or reinvent their narrative and compensation years later.&lt;/p&gt;
&lt;p&gt;Mastering your job and feeling competent and confident about your work doesn’t automatically make you good at advocating for yourself or knowledgeable about corporate budgets and compensation decisions. This talk shares information about how companies think and talk about employment, as well as specific mental models and statements you can use to improve your own skills in advocating for yourself. You’ll walk away with fresh thoughts on how to create healthy employment relationships and make the most of your opportunities and personal goals.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/Agj87"&gt;https://t.ly/Agj87&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Lusen/they/them co-founded DangoorMendel to level the corporate playing field and work directly with engineers on their interviewing and negotiation skills. Lusen is also Director of Interviewing at Karat and deeply invested in creating healthy organizational, management and employment relationships that works for everyone.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lusen Mendel</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/make-the-most-of-it-negotiation-and-self-advocacy.html</guid></item><item><title>Migrating from REST to GraphQL in Django</title><link>https://pyvideo.org/pybay-2019/migrating-from-rest-to-graphql-in-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
GraphQL has become the de facto successor to REST. How does this impact Django developers? In this talk, we will explore the state of Django web API libraries focusing in on the Django REST Framework and Graphene.&lt;/p&gt;
&lt;p&gt;Abstract
GraphQL has become the defacto successor to REST. How does this impact Django developers? In this talk, we will explore the state of Django web API libraries focusing in on Django REST Framework and Graphene. We will start with a brief history overview where we will cover the origins of each library. Then we will move on to a comparative analysis of both along three axes: functionality, performance, and support. For functionality, we will look at how to perform CRUD operations under each. For performance, we will go over benchmarks of how each library handles a high throughput scenario and large data volume scenario. Lastly, we will look at how well supported each library both in terms of documentation, maintainer activity, and immediate online support.&lt;/p&gt;
&lt;p&gt;Original slides:&lt;/p&gt;
&lt;p&gt;About the speaker
Manish Sinha is the founder and Principal of North Star Labs we he has built software for numerous clients including Kleiner Perkins, Mobilize America, and The Last Mile. He has trained new engineers at UBS, TIAA, and Credit Suisse. He is also active in the Django community where he serves as a contributor to the graphene-django project and occasionally gives related talks.&lt;/p&gt;
&lt;p&gt;Prior to that, he worked at Morgan Stanley in a big data group. Manish started his career as one of a handful software engineers in the White House under the Obama administration.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manish Sinha</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/migrating-from-rest-to-graphql-in-django.html</guid></item><item><title>PEP 581 and PEP 588: Migrating CPython's Issue Tracker</title><link>https://pyvideo.org/pybay-2019/pep-581-and-pep-588-migrating-cpythons-issue-tracker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In 2017, CPython codebase was moved to GitHub from Mercurial, an effort that took more than three years of planning and lots of volunteer coordination. The move proved to be successful and well-appreciated. New contributors face less barriers when contributing to Python. Core developers are benefiting from personal assistants in the form of GitHub bots and automations. Can the workflow be even better? In this talk, we'll look into other problems in CPython's workflow: the issue tracker itself.&lt;/p&gt;
&lt;p&gt;The acceptance of PEP 581, by Python steering council means that another big workflow change is impending. Let's hear about some of the proposed plans on improving CPython's workflow, and learn how you can help and take part in this process.&lt;/p&gt;
&lt;p&gt;Abstract
Outline&lt;/p&gt;
&lt;p&gt;Brief introduction to core Python workflow. It's complicated. (5 minutes)
The issue tracker is called bpo (an instance of Roundup) &lt;a class="reference external" href="https://bugs.python.org"&gt;https://bugs.python.org&lt;/a&gt;
Codebase and pull requests are done in GitHub: github.com/python/cpython
Contributing guide: devguide.python.org
CPython discussions aren't normally not on GitHub, but on mailing list (python-dev, core-mentorship) and discourse discuss.python.org&lt;/p&gt;
&lt;p&gt;GitHub is a new thing for Python (3 minutes)&lt;/p&gt;
&lt;p&gt;PEP 512: Migrating source code from Mercurial to GitHub
Some pain points: core devs and Python release managers have to learn and adjust to a workflow. (it was not an overnight success)
On the good side: it opens up oppurtunities to contribute to core workflow improvements, and still making big impact: devguide improvements, bots(bedevere, and miss-islington), toolings like blurb and cherry-picker. Contributing to Python is easier on GitHub.&lt;/p&gt;
&lt;p&gt;Should I stay or should I go? (3 minutes)&lt;/p&gt;
&lt;p&gt;bpo works, but it is not up to date with recent advancements: no emoji support, unintuitive UI, not mobile-friendly.
bpo's development is hindered and stagnated.
we're losing potential contributors just because the tracker is bpo.
lack of existing API from bpo making it hard to automate things.&lt;/p&gt;
&lt;p&gt;Let's Use GitHub Issues already! (7 minutes)&lt;/p&gt;
&lt;p&gt;It is not as simple as &amp;quot;just copy over a bunch of tickets to GitHub&amp;quot;
Some of us fear the uncertainties: GitHub is not open source, corporation owned, it could one day disappear without notice?
What we're already doing: daily backup of GitHub data. starting to use CLA Assistant. We've asked GitHub to grant us early access to the &amp;quot;issue triage&amp;quot;.&lt;/p&gt;
&lt;p&gt;What we still need help with (7 minutes) -- A professional project manager, similar to how PyPI/Warehouse project was handled. Steering council has opened this discussion with The PSF. -- We will have a &amp;quot;trial&amp;quot; issue tracker repo. We need to port 100s of tickets from bpo to GitHub. We need experiments and feedback. -- You can help update Devguide on how to use GitHub issue tracker and how to triage/add labels etc. -- We need more people to help triage issues. We've been able to grant bug triage permission more easily than granting commit privilege. Hear Emily's talk on being a core developer. -- If you have other ideas of improvements: write to python-dev, Use PEP 581 or PEP 588 in subject (to get my attention) -- Donate to The PSF. You can now donate directly for CPython's development: &lt;a class="reference external" href="https://www.python.org/psf/donations/python-dev/"&gt;https://www.python.org/psf/donations/python-dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/gLZ9W"&gt;https://t.ly/gLZ9W&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/pep-581-and-pep-588-migrating-cpythons-issue-tracker.html</guid></item><item><title>Perceiving Python Programming Paradigms</title><link>https://pyvideo.org/pybay-2019/perceiving-python-programming-paradigms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Last couple of years have witnessed an immense growth of Python in multifarious domains especially AI/ML, web, etc., each one necessitating a different programming paradigm varying from object oriented, functional, procedural to imperative. This talk reviews them all and helps you choose one for an efficient design solution !&lt;/p&gt;
&lt;p&gt;Abstract
The soaring popularity of Python and its assorted applications can be attributed to its simplicity and flexibility. In this talk, I will review the modern bloom &amp;amp; dominance of Python and discuss four major coding styles often used: Imperative, Procedural, Functional, and Object-Oriented. I will go over the fundamentals of each programming paradigm and discuss their positives, limitations and use cases especially in Python setting along-with a very simple hands-on example to illustrate how one routine can be coded in a different style. The talk will conclude with some pointers on how to choose a coding style for a given situation to make the code more readable, testable and coherent.&lt;/p&gt;
&lt;p&gt;This talk aims to introduce different programming styles of Python and encourage Pythonistas to reflect on the implications of each corresponding to their domain viz. data visualisation, machine learning, deep learning, IoT, functional programming, or embedded systems, web development. By better understanding these styles attendees will be empowered to design efficient solutions.&lt;/p&gt;
&lt;p&gt;Outline of the proposed talk:&lt;/p&gt;
&lt;p&gt;Introduction The rise of Python and its many applications: Reason for its bloom &amp;amp; dominance Reflecting on the simplicity and flexibility providing comfort and independence&lt;/p&gt;
&lt;p&gt;Overview of programming styles with positives &amp;amp; limitations in each Imperative Programming: Sequential, Direct change to program state, Data structure manipulation, Harder debugging, Limited abstraction, Complex semantics Procedural Programming: Sequential, Iterative, Modularized, Tasks’ function calling, Inefficient hardware usage especially for complex problems Functional Programming: Stateless functions, Immutable data, Independent of order of execution, More modularity, Useful for - Recursion, Lambda Functions, Parallel Processing Object-oriented Programming: Object manipulation via methods only, Code reusability, Limited support by Python (currently)&lt;/p&gt;
&lt;p&gt;One example coded in different programming styles for illustration Task definition, say average of a list of numbers Code in different styles: Imperative, Procedural, Functional, Object-oriented Usage of lambda functions, class creation, method creation, etc. Discussing speed, efficiency, reusability, simplicity of each style&lt;/p&gt;
&lt;p&gt;Conclusion &amp;amp; Takeaways Pointers on how to select a programming paradigm based on the application viz. ML, Deep Learning, Data Science, IoT, etc. Discussing pros and cons of combining, interleaving multiple styles Some personal anecdotes, recommendations for different use cases&lt;/p&gt;
&lt;p&gt;About the speaker
Red Hat Women in Open Source Academic Award Winner 2017, Google Summer of Code alumna, current mentor/admin and presently a Machine Learning Engineer at Twitter Inc., Jigyasa Grover is an ardent open source enthusiast and aspires to inspire a powerful bunch of girls and boys alike and help bridge gender gap in technology.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jigyasa Grover</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/perceiving-python-programming-paradigms.html</guid></item><item><title>Plugins: using importlib to build self describing apis</title><link>https://pyvideo.org/pybay-2019/plugins-using-importlib-to-build-self-describing-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Api's all have a defined structure, they sometimes almost look like a file tree of actions. Use that similarity + a plugin system to model and organize your api.&lt;/p&gt;
&lt;p&gt;Abstract
Discuss some the basics of using importlib being able to point to a file and import it even if it isn't a .py file Being able to walk a file directory tree and import files in sys.modules.&lt;/p&gt;
&lt;p&gt;Demonstrate how we are using importlib in some new api endpoints at plangrid to abstract and automate some of the more tedious stuff in Flask. Import modules using importlib and create new classes for each class that's name ends with Handler, and register them in the flask app. Import a whole directory and register all functions that begin with task as a celery task for the api to call.&lt;/p&gt;
&lt;p&gt;Show a more robust system for building plugins using a hub demonstrate a way to just load everything in your codebase into one plugin system make everything that was loaded available in a singleton that can be passed and used anywhere.&lt;/p&gt;
&lt;p&gt;About the speaker
I began using learning python by solving problems on projecteuler.net, then automating the busy work I had while being a Linux Administrator for Rackspace.&lt;/p&gt;
&lt;p&gt;I have also worked on SaltStack, as an open source contributor and employee.&lt;/p&gt;
&lt;p&gt;Now I work for AutoDesk on the Plangrid Product.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wallace</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/plugins-using-importlib-to-build-self-describing-apis.html</guid></item><item><title>Pushing the limits of Python ML infra at Netflix</title><link>https://pyvideo.org/pybay-2019/pushing-the-limits-of-python-ml-infra-at-netflix.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
We will share our experiences on building Metaflow, a Python library that is used at Netflix to build and operate hundreds of machine learning applications. This talk is for you if you want to learn how to develop systems for big data and ML in Python.&lt;/p&gt;
&lt;p&gt;Abstract
Metaflow is a Python library that empowers data scientists to prototype, build, deploy, and operate end-to-end machine learning solutions. We started building Metaflow at Netflix to provide a solid foundation for hundreds of internal ML use cases, from classical statistical analysis to large-scale applications of deep learning. Metaflow is designed with a human-centric mindset: instead of reinventing the wheel for large-scale computing or machine learning, we integrate existing solutions into a delightfully consistent and easy-to-use package.&lt;/p&gt;
&lt;p&gt;This talk focuses on the internals of Metaflow; it will highlight lessons that we have learned in building a Python library that needs to be robust, performant, and flexible enough to solve a large set of complex real-world business problems related to machine learning. We will share our learnings around optimizing the performance of Python, in particular, related to concurrency. We will also talk about the complexities of dependency management, the overall architecture of the library and the cloud-based compute and storage systems it relies on.&lt;/p&gt;
&lt;p&gt;About the speaker
Ravi is an engineer on the ML Infrastructure team at Netflix. He has been building large scale systems focusing on performance, simplified user journeys and intuitive APIs in MLI and previously in Search Indexing at Google (6 years).&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ville Tuulos</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/pushing-the-limits-of-python-ml-infra-at-netflix.html</guid></item><item><title>Python and R for Advanced Analytics</title><link>https://pyvideo.org/pybay-2019/python-and-r-for-advanced-analytics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
As the complexity and volume of data grows, data teams are optimizing their analytics workflows to support more complex logic, advanced transformations and customized visualizations that will be crucial in supporting machine learning and AI. Britton Stamper of Periscope Data by Sisense will share the impact data analysts are seeing from leveraging the strengths of SQL, Python and R together into their workflows.&lt;/p&gt;
&lt;p&gt;Abstract
As the complexity and volume of data grows, data teams are working quietly behind the scenes to improve their methods of analysis.&lt;/p&gt;
&lt;p&gt;There isn’t an abundance of external conversation about the languages used to analyze these massive quantities of data, but customers are getting more sophisticated as their field matures, evolving to work with bigger data sets and integrating new techniques into their workflow. This means more than just finding new ways to innovate with SQL — advanced languages like R and Python have become a more critical part of their everyday analysis.&lt;/p&gt;
&lt;p&gt;This talk will share the impact that data scientists can see from bringing the workflows of SQL, Python and R together on one platform. Python has been one of the most popular languages for development, but for those in data environments the current workflows with Python are entirely disjointed. Python development environments don’t typically run SQL on databases, which means you’d have to query the data elsewhere, bring that data into the environment where Python runs, then take the output and migrate it back to a place where others can consume the results.&lt;/p&gt;
&lt;p&gt;There are some who may have become accustomed to conducting R or Python analysis by connecting SQL to a Jupyter Notebook, or via an API, but those solutions aren’t outcome focused. Using a notebook can make it really difficult to connect analysis back to your original data set, to keep data consistently fresh, or to get reviews from your colleagues and share results across the organization.&lt;/p&gt;
&lt;p&gt;Data scientists and developers need functionality that enables them to add a finishing touch, be it clustering, regressions or predictions, that delivers exactly what their stakeholders need to make important business decisions. These tasks are much simpler to pull off in R or Python, and come with a whole new set of customization options for visualization.&lt;/p&gt;
&lt;p&gt;About the speaker
Britton Stamper is a Senior Sales Engineer at Periscope Data by Sisense. He's a data visualization evangelist who empowers data teams to build easy to understand and actionable data tools. Prior to Periscope Data he served as a BI analyst in the financial services industry.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Britton Stamper</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/python-and-r-for-advanced-analytics.html</guid></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pybay-2019/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Everitt</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/python-steering-council-panel.html</guid></item><item><title>Python + Terraform = ♥</title><link>https://pyvideo.org/pybay-2019/python-terraform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/GY2b9"&gt;https://t.ly/GY2b9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wyatt Peterson</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/python-terraform.html</guid></item><item><title>Real Time Bidding Models in Computational Advertising</title><link>https://pyvideo.org/pybay-2019/real-time-bidding-models-in-computational-advertising.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
The talk provides an overview of the ad tech ecosystem, in particular how ad slots are dynamically populated by way of user behavioral targeting each time a webpage loads. It should be interesting for developers as well as data scientists who are looking to learn about the applications of machine learning in computational advertising.&lt;/p&gt;
&lt;p&gt;Abstract
In particular, we will explore how DSPs (demand side platforms) optimize ad campaigns for advertisers.&lt;/p&gt;
&lt;p&gt;The focus will be on how CTR (click-through-rates) are optimized via real-time-bidding (RTB) models. We will discuss modeling challenges such as how best to handle categorical or imbalanced training data. You will come away with a deeper understanding of the system design trade-offs and be able to deploy models at scale in your own work.&lt;/p&gt;
&lt;p&gt;About the speaker
Allie is a data scientist at Even.com, a fintech company based in Oakland whose mission is to end the paycheck-to-paycheck cycle.&lt;/p&gt;
&lt;p&gt;Prior to Even, Allie worked as an engineer and first data scientist at early-stage startups in the consulting, sales tech, and ad tech space in the Bay area.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allie</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/real-time-bidding-models-in-computational-advertising.html</guid></item><item><title>Supercharging a VFX Production Pipeline with Analytics</title><link>https://pyvideo.org/pybay-2019/supercharging-a-vfx-production-pipeline-with-analytics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Without a unified analytics solution, it has been difficult to understand tool efficiency within our pipeline. Developers and artists need a way to proactively identify areas for improvement in their pipeline tools and production rigs. Visualizing statistical data allows users to quickly identify, correlate, and fix issues. It provides insight into complex systems which are otherwise black boxes.&lt;/p&gt;
&lt;p&gt;Abstract
Analytics is a framework developed at Industrial Light &amp;amp; Magic that offers real-time reporting of the efficiency of pipeline tools, scripts, applications, and production data. The system allows developers to instrument their pipeline tools and applications with tracking code, in order to better understand metrics of interest such as: application and function activity, execution time, memory usage, failures, etc. We show how highly customized Grafana components can provide a more targeted and intuitive dashboard for visual analysis. Thus, we can reveal tool usage patterns and identify poorly-performing and underutilized applications and functions. We also use Analytics to measure production efficiency. For example, artists can follow the performance speed of CG creature animation rigs over time and easily correlate a slowdown to a particular check-in, to begin the investigation into why the slowdown occurred.&lt;/p&gt;
&lt;p&gt;The goal of the Analytics project is to provide a system to Engineers, CG Supervisors, Pipeline TDs, and Artists that supports: 1. Identifying and alerting of inefficiencies in our pipeline 2. Gathering usage metrics to focus development on high-use tools, and identify seldom-used tools that can be retired or need additional training/ publicizing 3. Monitoring statistics on real-time production data&lt;/p&gt;
&lt;p&gt;We designed a scalable backend to collect Analytics. We built a python API that is fast, lightweight and asynchronous. Any tool can use the Analytics API to send data to be tracked over time for analysis. The API generates JSON data that is sent to Elasticsearch and ultimately can be visualized on custom Grafana dashboards (our frontend). Grafana is an open source software tool for visualizing and monitoring time series data. On the front-end side, the Grafana dashboards present the Analytics data in a way that it can be interpreted per use case. We have our own custom branch of Grafana where we have iterated on the code to build custom plugins of our own. For example, we developed a custom plugin to visualize “sessions,” which are processes grouped within a single block of execution. This plugin uses a Gantt chart to show when each process starts and finishes on the same timeline, allowing users to visualize the relationships between the processes and see how they’re scheduled. We build Grafana from source into a Docker image and monitor the build using Jenkins. We deploy the service using an Ansible playbook, which starts a Docker container with our custom Grafana image. The workflows to create and modify dashboards are also supported by the deployment system via integration with our version management system.&lt;/p&gt;
&lt;p&gt;About the speaker
Bridgette Powell is a software engineer at Industrial Light &amp;amp; Magic, currently developing pipeline data tools and workflows for artists. Prior to working at ILM, Bridgette began her career in R&amp;amp;D for the feature animation industry. The creative collaboration between artists and engineers is what inspires her to work in film. Bridgette’s curiosity motivates her to reach out to production departments, learn their workflows, and develop tools to improve artist efficiency. Bridgette holds a B.S. in Computer Science from Georgia Tech and an M.S. in Computer Science from U.C. San Diego.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bridgette Powell</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/supercharging-a-vfx-production-pipeline-with-analytics.html</guid></item><item><title>Understanding Python's Debugging Internals</title><link>https://pyvideo.org/pybay-2019/understanding-pythons-debugging-internals.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Have you ever wondered how Python debugging looks on the inside? During this session, we’ll share how debugging actually works in Python. We’ll discuss the differences between CPython and PyPy interpreters, explain the underlying debugging mechanism and show you how to utilize this knowledge at work and up your watercooler talk game.&lt;/p&gt;
&lt;p&gt;Abstract
The mainstream and off-the-beaten-track Python debuggers out there: pdb/bdb, PyDev Debugger - Eclipse/IntelliJ, IDLE, Atom, and others.&lt;/p&gt;
&lt;p&gt;What is the underlying tech of Python debuggers? 1. Introduce the (hard to decipher) sys.settrace function and review its public documentation 2. Provide the missing documentation for sys.settrace and explain what it actually does.
3. Show a snippet of example code and explain how to handle multithreading when debugging&lt;/p&gt;
&lt;p&gt;CPython Performance Benchmarks. 1. Review the performance optimizations we've done to maximize sys.settrace 2. Introduce the CPython Performance Benchmarks 3. Deep-dive into these benchmarks - why they matter 4. Discuss the alternatives of sys.set_trace&lt;/p&gt;
&lt;p&gt;Quick intro to PyPy interpreter . 1. Share the performance benchmarks for PyPy 2. Discuss our insights (&lt;/p&gt;
&lt;p&gt;What do you do once your debugger stopped? 1. Introduce the Python frame object and inspect module 2. Share example code 3. Discuss possible use cases&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/LdK68"&gt;https://t.ly/LdK68&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Liran is the Co-Founder and CTO of Rookout, the data collection and delivery company. He’s an advocate of modern software methodologies like agile, lean and devops. Liran’s passion is to understand how software actually works. When he's not thinking of code, he's usually diving or hiking&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liran Haimovitch</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/understanding-pythons-debugging-internals.html</guid></item><item><title>What's Coming in 3.8: Assignment Expressions &amp; More!</title><link>https://pyvideo.org/pybay-2019/whats-coming-in-38-assignment-expressions-more.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Curious what's coming next for Python? Well, Python 3.8 is being released just a few short months. It already includes a number of new features such as assignment expressions, improved debugging, more string formatting features, and many smaller changes. Come learn about the big ones and some of the more interesting small ones too!&lt;/p&gt;
&lt;p&gt;Abstract
I'll start out with the major new features and their PEPs (listed below, but also including any more added before the talk):&lt;/p&gt;
&lt;p&gt;Assignment expressions&lt;/p&gt;
&lt;p&gt;There is new syntax (the “walrus operator”, :=) to assign values to variables as part of an expression.&lt;/p&gt;
&lt;p&gt;Positional-only parameters&lt;/p&gt;
&lt;p&gt;There is new syntax (/) to indicate that some function parameters must be specified positionally (i.e., cannot be used as keyword arguments).&lt;/p&gt;
&lt;p&gt;Parallel filesystem cache for compiled bytecode files&lt;/p&gt;
&lt;p&gt;The new PYTHONPYCACHEPREFIX setting (also available as -X pycache_prefix) configures the implicit bytecode cache to use a separate parallel filesystem tree, rather than the default pycache subdirectories within each source directory.&lt;/p&gt;
&lt;p&gt;Debug build uses the same ABI as release build&lt;/p&gt;
&lt;p&gt;Python now uses the same ABI whether it built in release or debug mode. On Unix, when Python is built in debug mode, it is now possible to load C extensions built in release mode and C extensions built using the stable ABI.&lt;/p&gt;
&lt;p&gt;f-strings now support = for quick and easy debugging&lt;/p&gt;
&lt;p&gt;Add = specifier to f-strings. f'{expr=}' expands to the text of the expression, an equal sign, then the repr of the evaluated expression. So:
Then I'll talk about a few of the smaller features such as continue inside finally, iterable unpacking in yield and return, new SyntaxWarnings, etc.&lt;/p&gt;
&lt;p&gt;About the speaker
I'm an Engineering and Community Lead &amp;#64; Braintree. At work I do a variety of things from technical architecture and planning to facilitating conference and event sponsorships. Outside of work, I'm coding enthusiast and frequent traveler, splitting my time between the city and the Great North Woods. Find me online or at local Python events in either Chicago or Burlington, VT.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/whats-coming-in-38-assignment-expressions-more.html</guid></item><item><title>AB Testing in Python</title><link>https://pyvideo.org/pybay-2019/ab-testing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Python development has had a great emergence in development of statistical packages, algorithms, and implementations. However, with the development and ease of practicing statistics &amp;amp; algorithms, there are still some rules and constraints one must follow to obtain quality solutions. And that is especially true with AB Testing, a statistical procedure to provide data-driven insights in uncertainty.&lt;/p&gt;
&lt;p&gt;About the speaker
Data Analyst residing in San Francisco, CA. Specialize in SQL Python, BI, and other related responsibilities. Additionally, Raul spends his time creating technical side-projects and volunteering in the intersection of Data and Technology/Coding.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raul Maldonado</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/ab-testing-in-python.html</guid></item><item><title>Airflow in Practice: Stop Worrying Start Loving DAGs</title><link>https://pyvideo.org/pybay-2019/airflow-in-practice-stop-worrying-start-loving-dags.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Heard of Apache Airflow? Do you work with Airflow or want to work with Airflow? Ever wonder how to better test Airflow? Have you considered all data workflow use cases for Airflow? Come be reminded of key concepts and then we will dive into Airflow’s value add, common use cases, and best practices. Some use cases: Extract Transform Load (ETL) jobs, snapshot databases, and ML feature extraction.&lt;/p&gt;
&lt;p&gt;Abstract
Background - What is Airflow? Explain Cron and how it compares to Airflow High level explain the key concepts of Airflow * Direct Acyclic Graph (DAG) - nodes are tasks and edges are dependency structure * Third Party Integrations (Slack, Google Cloud Platform, AWS, etc) * Airflow Hooks &amp;amp; Operators * What is Airflow? * Programmatically author workflows * Stateful scheduling * Rich CLI and UI that make development easy * Logging, monitoring, and alerting * Modularity lends itself well to testability * Solves common problems with batch processing * Open sourced by AirBnB in 2015&lt;/p&gt;
&lt;p&gt;Evaluating Airflow * What value does Airflow add? * Retries task elegantly, which handles transient network errors * Alerts on failure (email or slack) * Can re-run specific tasks in a large DAG * Support distributed execution * Great OSS community and momentum * Can be hosted on AWS, Azure, or GCP * Managed options for Airflow - AWS Glue, GCP Cloud Composer, or Azure Data Factory&lt;/p&gt;
&lt;p&gt;Does Airflow Have an Ugly Side? How to Overcome Challenges?
Upgrades can be more challenging when you have custom hooks and operators
env vars vs variables vs xcoms
Common Use Cases Extract Transform Load (ETL) Jobs * Airflow enables moving data and transforming data very easily * Can create custom Hooks for Third Party APIs Efficiently Snapshot Databases Create Test Environments for QA ML Feature Extraction&lt;/p&gt;
&lt;p&gt;Best Practices Testing * Unit tests from lib functions * Acceptance tests to run list_dags Doc MD for the DAG * Contain Points of Contact * What remediation/escalation steps should the on-call person take when this DAG fails?&lt;/p&gt;
&lt;p&gt;Exciting New/New(ish) Features * Lineage * Role Based Access Control * Airflow 2.0 Improvements&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/xYJk9"&gt;https://t.ly/xYJk9&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Software Engineer at Blue Apron on the Data Engineering team. Work daily using Python on our data pipeline. Excited by how Python is transforming Data Engineering.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Schattschneider</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/airflow-in-practice-stop-worrying-start-loving-dags.html</guid></item><item><title>allofplos</title><link>https://pyvideo.org/pybay-2019/allofplos.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Bassi</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/allofplos.html</guid></item><item><title>Ask the Ecosystem: Lessons from 200+ FOSS Applications</title><link>https://pyvideo.org/pybay-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
If you had to build a software application right now, how would you do it? First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python applications to provide advice on building effective software to reach the masses. Architecture, testing, licensing, packaging and distribution, these projects hold lifetimes of work and wisdom, waiting to be learned!&lt;/p&gt;
&lt;p&gt;Abstract
If you had to build a software application right now, how would you do it? First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python applications to provide empirical advice for building effective software to reach the masses. We'll look at architecture, testing, licensing, and even packaging and distribution. Each of these applications contains answers to every question raised during application development.&lt;/p&gt;
&lt;p&gt;Why spend days and weeks piecing together the basics from first principles (blog posts and Stack Overflow), when Python's rich ecosystem readily provides? Go farther by following in the footsteps of such giants as Deluge, Reddit, Pi-Hole, FreeCAD, Unknown Horizons, Calibre, Magic Wormhole, Synapse, Zulip, Anki, Sage Math, Sentry, and more.&lt;/p&gt;
&lt;p&gt;In this presentation, we'll explore many questions, just a few of which include:&lt;/p&gt;
&lt;p&gt;What userbases do Python-based applications reach?
Where in software is Python leading, and what domains represent its biggest gaps?
What library dependencies appear in the application zeitgeist?
What copyright licenses are used by applications, and how do these practices differ from libraries?
How many projects rely only on donations, as opposed to having foundation or corporation support?
What can Python developers do to support and get involved in Python's rich application space?
A production application is worth a hundred blog posts and a thousand Stack Overflow answers. You've already heard all the talk about best practices, now come hear about the practical practices from real Python applications.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;p&gt;3m - Defining the &amp;quot;application&amp;quot;
3m - Distinguishing between open-source application and library development
The top 200 open-source Python applications (methodology and taxonomy)
3m - Exemplars (e.g., Deluge, Anki, Synapse, yum/dnf, etc.)
3m - Methodology and prior art
2m - Taxonomy and organization
Common patterns and antipatterns in Python application design
3m - Architecture
4m - Dependencies
5m - Packaging and distribution
2m - Documentation
3m - Licensing
3m - The role of open-source in future Python usage
3m - Getting involved in open-source
Total: 37 minutes&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/dwXG8"&gt;https://t.ly/dwXG8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Mahmoud Hashemi is a backend engineer and architect, open-source library maintainer, and Wikipedian, with ten years of experience building enterprise software. He authored O'Reilly's Enterprise Software with Python, host of the Pyninsula Python meetup group in the San Francisco Bay Area, and presenter of talks on Python and architecture, delivered all around the world.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</guid></item><item><title>Avoiding if name == main</title><link>https://pyvideo.org/pybay-2019/avoiding-if-name-main.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Abel</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/avoiding-if-name-main.html</guid></item><item><title>Beyond Paradigms</title><link>https://pyvideo.org/pybay-2019/beyond-paradigms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Java is object oriented and Haskell is functional. How about Python? Is it really OO with free-standing functions and porous encapsulation? Python has lambdas and closures, but is it functional? Are these useful questions?&lt;/p&gt;
&lt;p&gt;A better approach to learning of programming languages is to focus on features, not paradigms. This delivers practical advice for choosing patterns and understanding idioms.&lt;/p&gt;
&lt;p&gt;Abstract
In the last 10 years a new approach to the study of programming languages has emerged: focus on features, not paradigms. This approach offers more direct, practical advice for programmers learning a new language, taking up coding idioms, and choosing suitable design patterns.&lt;/p&gt;
&lt;p&gt;This talk will name some key language features, show how they affect the use of design patterns, and conclude with a refactoring guided by this new approach, producing simpler, more efficient code. Theory in practice.&lt;/p&gt;
&lt;p&gt;About the speaker
Luciano Ramalho is the author of Fluent Python, an international bestseller published in 9 languages. He started using Python in 1998, creating publishing systems for &amp;quot;Web 1.0&amp;quot;. Python is Luciano's favorite language, but he also enjoys coding in Elixir and Go.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luciano Ramalho</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/beyond-paradigms.html</guid></item><item><title>Browser security with HTTP headers</title><link>https://pyvideo.org/pybay-2019/browser-security-with-http-headers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Browsers provide many ways to help keep your users and their data secure. In this talk, learn about what security features are available and how to enable them in Flask, Django, or other web applications. This talk is targeted at intermediate web developers, but should be useful for beginners as well.&lt;/p&gt;
&lt;p&gt;Abstract
Each section will discuss a type of vulnerability and how the browser can be configured to protect users. Examples will be shown using Flask, but are applicable to other applications.&lt;/p&gt;
&lt;p&gt;Overview of how browsers behave by default and what configuration is available.
Cross-site Scripting and the X-XSS-Protection header
Content sniffing and the X-Content-Type-Options header
Clickjacking, using frames to trick users into clicking hidden content, and the X-Frame-Options header
Cookie header options and content security
History information and the Referrer-Policy header
HTTPS headers: TLS certificates, HTTP redirection, and Strict Transport Security
Content-Security-Policy controls where different types of content can be loaded from. Explain how to determine a good policy for an application.
Validating security configuration
&lt;a class="reference external" href="https://www.ssllabs.com/ssltest/"&gt;https://www.ssllabs.com/ssltest/&lt;/a&gt;
&lt;a class="reference external" href="https://securityheaders.com/"&gt;https://securityheaders.com/&lt;/a&gt;
Using these tools and interpreting results. What do good and bad configurations look like?&lt;/p&gt;
&lt;p&gt;About the speaker
David Lord is a core maintainer of Flask and manages the Pallets open source organization. He is a member of San Diego Python, where he helps organize a weekly Python study group.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Lord</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/browser-security-with-http-headers.html</guid></item><item><title>Building contextual AI assistants with OSS tools</title><link>https://pyvideo.org/pybay-2019/building-contextual-ai-assistants-with-oss-tools.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
AI assistants are getting a great deal of attention from the industry as well as the research. However, the majority of assistants built to this day are still developed using a state machine and a set of rules. That doesn’t scale in production. In this talk, you will learn how to build AI assistants that go beyond FAQ interactions using machine learning and open source tools.&lt;/p&gt;
&lt;p&gt;Abstract
When built well, AI assistants provide great strategic business value and are fun to interact with. However, the majority of assistants built to this day are developed using just a set of rules and don’t go beyond simple FAQ interactions. This doesn’t scale in production and provides a rather disappointing user experience.&lt;/p&gt;
&lt;p&gt;In this interactive talk, we will challenge the usual approach of chatbot development by introducing machine learning-based methods for dialogue management. You will learn the fundamentals of conversational AI, as well as machine learning techniques behind natural language and dialogue management. Finally, you will learn the basics of using Rasa Stack – an open source ML-based framework which empowers developers to build contextual assistants in-house.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/j93LV"&gt;https://t.ly/j93LV&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Justina has a background in Econometrics and Data Analytics. Her curiosity for Data Science and human behaviour analytics has taken her to many places and industries – over the past three years she has been doing Data Science work across video gaming, fintech, insurance industries. Her interest in chatbots, natural language processing and open source has led her to Rasa, a Berlin-based conversational AI startup where she works as a Head of Developer Relations focusing on improving developer experience in using open source software for conversational AI.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justina Petraityte</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/building-contextual-ai-assistants-with-oss-tools.html</guid></item><item><title>Building effective Django queries with expressions</title><link>https://pyvideo.org/pybay-2019/building-effective-django-queries-with-expressions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In Django, we have a powerful tool called ORM to manipulate databases easily. For small queries, it can be quite simple, but what happens when you need to do tricks like nested queries or computed values? One of the answers is query expressions. In this talk, we'll learn how to power-up queries with them by walking through comparisons and examples with a dataset.&lt;/p&gt;
&lt;p&gt;Abstract
It's known that ORMs are a powerful tool to manipulate databases with ease. In Django, there are a set of out-of-the-box abstractions to help perform queries and shape them through annotations, aggregations, order by, and so on, hence saving one's time. A common solution to filtering when models grow larger over time is creating redundant fields; a better solution is using Django built-in resources called query expressions.&lt;/p&gt;
&lt;p&gt;Query expressions are smart yet straightforward functions that one can use to compute values on query execution and do string manipulation, calculations, among others, thus removing the burden of having unnecessary extra columns in our database. Using query expressions effectively can help to generate performant queries, avoiding potential inconsistencies and separating concerns.&lt;/p&gt;
&lt;p&gt;This talk focuses on further optimizing Django queries by walking through code comparisons and examples with a dataset, diving into subjects such as custom database functions, conditional expressions, and filtering so to answer questions about the data.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/7P2mb"&gt;https://t.ly/7P2mb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
I'm a full stack developer at Vinta Software (www.vinta.com.br) and Django Girls organizer at my hometown, Recife. When not coding and working on personal projects, I'm usually cooking and watching Grey's Anatomy.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vanessa Barreiros</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/building-effective-django-queries-with-expressions.html</guid></item><item><title>Busy Beaver The Chicago Python Community Engagement Slack Bot</title><link>https://pyvideo.org/pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aly Sivji</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/busy-beaver-the-chicago-python-community-engagement-slack-bot.html</guid></item><item><title>Child Care Check</title><link>https://pyvideo.org/pybay-2019/child-care-check.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannah</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/child-care-check.html</guid></item><item><title>City College of San Francisco</title><link>https://pyvideo.org/pybay-2019/city-college-of-san-francisco.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Cox</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/city-college-of-san-francisco.html</guid></item><item><title>Customizing Sphinx</title><link>https://pyvideo.org/pybay-2019/customizing-sphinx.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;About the speaker
Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Paul will be moderating this year's Python Steering Council Panel Discussion.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Everitt</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/customizing-sphinx.html</guid></item><item><title>Data Access at Kiva org</title><link>https://pyvideo.org/pybay-2019/data-access-at-kiva-org.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Kiva has provided an enormous amount of data transparency for over a decade. The data has powered economics studies and machine learning research. Attendees will be introduced to the one of the largest publicly available data sets for micro finance.&lt;/p&gt;
&lt;p&gt;Abstract
Kiva has supported a thoroughly documented REST api that resulted in many academic research papers that can be found at &lt;a class="reference external" href="https://www.kiva.org/build/research"&gt;https://www.kiva.org/build/research&lt;/a&gt; as well as applications such as KivaLens (&lt;a class="reference external" href="http://www.kivalens.org/#/search"&gt;http://www.kivalens.org/#/search&lt;/a&gt;) , &lt;a class="reference external" href="http://www.kivajapan.org/"&gt;http://www.kivajapan.org/&lt;/a&gt;, &lt;a class="reference external" href="https://www.wakibi.nl/"&gt;https://www.wakibi.nl/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This talk introduces the work completed around use of Kiva's open data, as well as an introduction to Kiva's GraphQL api and an announcement of the deprecation of the REST api.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/JJlA2"&gt;https://t.ly/JJlA2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Melissa Fabros is a Software Engineer at Kiva. She comes to programming from the world of nonprofits and higher education. Melissa’s interest in programming started in middle school where she was a founding member of the computer club. However, she majored in English and American Literature in college. Even in academia, Melissa still maintained her coding interests by making small web page projects. Melissa transitioned from lecturing at the University of California (Merced) to working at Kiva by taking part-time coding classes, completing Google Summer of Code, a full-stack bootcamp, Rails Girls Summer of Code and Fast.ai.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Melissa Fabros</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/data-access-at-kiva-org.html</guid></item><item><title>Data Preparation</title><link>https://pyvideo.org/pybay-2019/data-preparation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Casa</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/data-preparation.html</guid></item><item><title>DebiasML</title><link>https://pyvideo.org/pybay-2019/debiasml.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Leena Murgai</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/debiasml.html</guid></item><item><title>Deploy Deep Learning models as Microservices in minutes</title><link>https://pyvideo.org/pybay-2019/deploy-deep-learning-models-as-microservices-in-minutes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Seamlessly serve state-of-the-art deep learning models as web microservices in minutes and create an application around it without having prior deep learning experience.&lt;/p&gt;
&lt;p&gt;Abstract
Powering your application with deep learning is no walk in the park, but is certainly attainable with some tricks and good practice. Serving a deep learning model on a production system demands the model to be stable, reproducible, capable of isolation and to behave as a stand-alone package. One possible solution to this is a containerized microservice.&lt;/p&gt;
&lt;p&gt;Ideally, serving deep learning microservices should be quick and efficient, without having to dive deep into the underlying algorithms and their implementation. Too good to be true? Not anymore! Together, we will demystify the process of developing, training, and deploying deep learning models as a web microservice using Model Asset Exchange, an open source framework developed in Python at the IBM Center for Open Source Data and AI Technologies (CODAIT).&lt;/p&gt;
&lt;p&gt;We will kick off with an overview of how deep learning models are best published as Docker Images on DockerHub, and are best prepared for deployment in local or cloud environments using Kubernetes or Docker. We highlight the following benefits of such an approach: Standardized REST API implementation and application-friendly output format (JSON) Abstracting out the complex pre and post-processing portions of the model inputs and outputs.&lt;/p&gt;
&lt;p&gt;We will walk you through some super cool applications such as automatic image cropping, age estimation from videos/webcam and Veremin - a video theremin. All these applications and the framework itself are open source and we conclude by inviting contributions and opening the gates for you to be a part of this amazing initiative!&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/3vKN7"&gt;https://t.ly/3vKN7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Saishruthi Swaminathan is a developer advocate and data scientist in the IBM CODAIT team whose main focus is to democratize data and AI through open source technologies. She has a Masters in Electrical Engineering specializing in Data Science and a Bachelor degree in Electronics and Instrumentation. Her passion is to dive deep into the ocean of data, extract insights and use AI for social good. Previously, she was working as a Software Developer. On a mission to spread the knowledge and experience, she acquired in her learning process. She also leads education for rural children initiative and organizing meetups focussing women empowerment.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Saishruthi Swaminathan</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/deploy-deep-learning-models-as-microservices-in-minutes.html</guid></item><item><title>EdgeDB &amp; Python</title><link>https://pyvideo.org/pybay-2019/edgedb-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yury Selivanov</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/edgedb-python.html</guid></item><item><title>Effective Visual Representations using Python</title><link>https://pyvideo.org/pybay-2019/effective-visual-representations-using-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
I will present strategies to create effective data representations using a variety of python libraries. This talk will contain effective data visualization principles contextualized through Python examples. We will focus on commonly used techniques such as bar charts, pie charts, and will also discuss new strategies such as small multiples &amp;amp; use of animation and interaction for data exploration.&lt;/p&gt;
&lt;p&gt;Abstract
The world produces 2.5 quintillion bytes of data every day, and 90% of all data has been created in the last two years. Data visualization provides an avenue to gain a better understanding into this complex and vast deluge of multiattribute, time-varying data.&lt;/p&gt;
&lt;p&gt;In this talk, I will present strategies to present data effectively using a variety of Python libraries such as seaborn, plotly, networkx, and geoplotlib. Specifically, I will present strategies that discuss how to effectively choose between using bar charts, pie charts, parallel coordinates, slope charts, and so on when representing data. I will discuss scenarios when it is appropriate to use the &amp;quot;small multiples&amp;quot; technique to visualize multivariate data using seaborn and plotly.&lt;/p&gt;
&lt;p&gt;When visualizing geographical data, choropleth maps or graduated/scaled symbols are widely used, but it is crucial to understand the limitations of these techniques. I will present alternatives to visualize geographical data effectively using geoplotlib.&lt;/p&gt;
&lt;p&gt;For examining relationships between entities graphs/networks are frequently used. Edge crossings are highly undesirable when tracing paths and exploring incoming/outgoing edges. I will present &amp;quot;edge bundling&amp;quot; and discuss their use with chord diagrams to alleviate problems associated with edge crossings. We will examine networkx for visualizing networks.&lt;/p&gt;
&lt;p&gt;Lastly, I plan to provide critical tips related to labeling, animation, interaction, and possibly strategies to convey uncertainty in data visualization.&lt;/p&gt;
&lt;p&gt;About the speaker
Alark Joshi is a Data Visualization Researcher and an Associate Professor of Computer Science at the University of San Francisco. He has published many research papers in the field of data visualization and has been on award-winning panels at the top Data Visualization conferences. He has taught Data Visualization courses to Computer Science as well as Data Science majors. He was awarded the Distinguished Teaching Award at the University of San Francisco in 2016. He received his Ph.D in Computer Science from the University of Maryland Baltimore County.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alark Joshi</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/effective-visual-representations-using-python.html</guid></item><item><title>Generate Extrude Build</title><link>https://pyvideo.org/pybay-2019/generate-extrude-build.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
3D printers are becoming more and more accessible, but to create your own objects, you need to know how to generate 3D models. Get started by using OpenPyScad, a Python library that generates 3D-modeling source code.&lt;/p&gt;
&lt;p&gt;This talk will go over the challenges I encountered while learning 3D modeling, including deciding on which tools to use and how to think about 3D objects in code.&lt;/p&gt;
&lt;p&gt;Abstract
I am a software engineer who likes making physical things, which is my motivation for learning 3D modeling using Python. I'll start with an intro on how to think about 3D objects (ie creating a polygon, extruding, adding/subtracting volume using Boolean operations, etc). Then I’ll go into the 3D modeling tools I tried and why I ended up not using them (Solidworks, Blender), which led me to OpenSCAD and discovering the OpenPyScad library, which lets me programmatically generate 3D models using Python. I’ll also show some quirks with OpenPyScad/OpenScad that I encountered.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/GYzp0"&gt;https://t.ly/GYzp0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Julia enjoys making things from technology, art, or a combination of both. She likes to call her projects “physical puns” as they are often built upon some word play. She currently works as a software engineer on the Google Surveys team.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julia Ma</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/generate-extrude-build.html</guid></item><item><title>Getting Specific About Algorithmic Bias</title><link>https://pyvideo.org/pybay-2019/getting-specific-about-algorithmic-bias.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Through a series of case studies, I will illustrate different types of algorithmic bias, debunk common misconceptions, and share steps towards addressing the problem.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/9gO5k"&gt;https://t.ly/9gO5k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Rachel Thomas is a professor at the University of San Francisco Data Institute and co-founder of fast.ai, which created the “Practical Deep Learning for Coders” course that over 200,000 students have taken and which has been featured in The Economist, MIT Tech Review, and Forbes. She was selected by Forbes as one of 20 Incredible Women in AI, earned her math PhD at Duke, and was an early engineer at Uber. Rachel is a popular writer and keynote speaker. In her TEDx talk, she shares what scares her about AI and why we need people from all backgrounds involved with AI.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rachel Thomas</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/getting-specific-about-algorithmic-bias.html</guid></item><item><title>How growing vegetables makes me a better programmer</title><link>https://pyvideo.org/pybay-2019/how-growing-vegetables-makes-me-a-better-programmer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shaun Taylor Morgan</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/how-growing-vegetables-makes-me-a-better-programmer.html</guid></item><item><title>How to Deal With Messy Sensor Data</title><link>https://pyvideo.org/pybay-2019/how-to-deal-with-messy-sensor-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Will Robers</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/how-to-deal-with-messy-sensor-data.html</guid></item><item><title>Is Your ML Model Explainable</title><link>https://pyvideo.org/pybay-2019/is-your-ml-model-explainable.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric White</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/is-your-ml-model-explainable.html</guid></item><item><title>Learning from Human Failures &amp; Successes of PySpark</title><link>https://pyvideo.org/pybay-2019/learning-from-human-failures-successes-of-pyspark.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
This talk is less about technical success and failures; it instead focuses on where the tech meets squishy humans: API design, communication, empowering (or not) end users, sometimes even protecting open source from ourselves.&lt;/p&gt;
&lt;p&gt;Specifically, we'll look at some well-oiled parts and some rusty frictiony bits that come between PySpark (as a computing ecosystem) and its main user community.&lt;/p&gt;
&lt;p&gt;Abstract
Ever wonder how Apache Spark has proven to be one of the most popular (if not the most popular) large-scale data processing systems of all time, while also managing to frustrate so many users? Ever wonder how many partitions and tasks you should have -- and hey, why can't Spark just figure it out? Ever wonder why Spark has DataFrames and Pandas has DataFrames and it's like they're from two different galaxies? Ever wonder why some bits just don't make sense, and why after 10 years (!) neither the docs nor the vendors just explain how it all works?&lt;/p&gt;
&lt;p&gt;There will be no villains in this talk -- the world has enough of those -- instead we're all going to try and be the heroes by discussing some ideas about making things even better for our end users throughout our many roles: coding, documenting, sharing, teaching, as well as managing OSS projects and related businesses.&lt;/p&gt;
&lt;p&gt;Outline About me - Adam Breindel is one of the top Spark consultants and instructors worldwide; having spent over 5 years immersed deeply in the Spark world, I'm the guy that explains Spark to Databricks' and Cloudera's own instructors The Bold Adventure of PySpark and Big Data -- Making &amp;quot;Real&amp;quot; Python Work in a JVM World * Lesson: Paying Attention to User Needs and Desires Technical Success: Making Scale-Out Python ML Modeling Real * Responding to Perf Challenges: Making Python a First-Class Citizen with DataFrames * Lesson: Expanding the Community By Going To Where You Are Needed Wait, These Are Not the DataFrames Your Are Looking For * How Does this Spark Data-Parallel Thing Work Exactly? If you're not sure, you're not alone * Lesson: Be Thoughtful with Naming and Metaphors. Explain the Hard Stuff Clearly (Don't Hide It). SparkML is Inspired By Scikit-Learn! Surely You Know Scikit-Learn... * &amp;quot;Inspired By&amp;quot; Means Different Things to Different People * Lesson: It's OK to Make Tradeoffs and Compromises, But Please Communicate Them Audience Participation: What Do You Think is the Number One Question/Problem Users Have with Spark? * Figuring Out Partitioning (and Tasks): The Tragic Tale of SPARK-9850 or Will History Repeat with Spark-23128? * Can We Fix the Biggest Problem First? Ever? Why Not? * Lesson: Apache Independent Governance Rules Are Good But Maybe We Need Something Stronger Does Spark Need Protecting? Or Just Spark Businesses? Flag-Planting, FUD, and Private Expeditionary [Code] Forces * Lesson: Sometimes We Could Use a &amp;quot;Nudge&amp;quot; to Help Us Protect Our Altruism From Our Own Inexperience Or Selfish Instincts Finishing the Tech Story on a Positive Note: Arrow Integration, Pandas, GOAI * Summary: Recap of Lessons&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/k638q"&gt;https://t.ly/k638q&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Adam Breindel consults and teaches on Apache Spark, data engineering, and machine learning. He supports instructional initiatives and teaches at Databricks, has taught classes on Apache Spark and on deep learning for O'Reilly, and runs a business helping large firms and startups implement data and ML architectures.&lt;/p&gt;
&lt;p&gt;Adam's first full-time job in tech was on neural-net-based fraud detection deployed at North America's largest banks back in 1998. Since then, he's worked with startups where he's enjoyed getting to build the future (e.g., mobile check-in for 2 of America's 5 biggest airlines, 3 years prior to the iPhone). He has also worked in entertainment, insurance, and retail banking, on web, embedded, and server apps, as well as on clustering architectures, APIs, and streaming analytics&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Breindel</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/learning-from-human-failures-successes-of-pyspark.html</guid></item><item><title>Ministry of Silly Runtimes: Vintage Python on Cloud Run</title><link>https://pyvideo.org/pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/ministry-of-silly-runtimes-vintage-python-on-cloud-run.html</guid></item><item><title>My Path to Becoming a Python Core Developer</title><link>https://pyvideo.org/pybay-2019/my-path-to-becoming-a-python-core-developer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Python Core Developers help shape and build the language we love. But what do core developers actually do, and how do you become one? Hear the story of how I went from an aspiring Core Developer to implementing one of the most controversial changes to the language.&lt;/p&gt;
&lt;p&gt;Abstract
Introduction
Forgotten Knowledge
What is a Python Core Developer?
Realities of the process
Timeline of my path and PEP 572
Challenges of Contributing and OSS
If this is so hard and often thankless, then WHY do we do it??
Fostering welcoming communities
Why diversity matters
What does Python really need?&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/O28Ke"&gt;https://t.ly/O28Ke&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emily Morehouse Valcarcel</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/my-path-to-becoming-a-python-core-developer.html</guid></item><item><title>mypy: Getting to Four Million Lines of Typed Python</title><link>https://pyvideo.org/pybay-2019/mypy-getting-to-four-million-lines-of-typed-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Dropbox is a heavy user of the mypy type checker, recently passing four million lines of type-annotated Python code, with over half of that added in the last eighteen months. Type checking is helping find bugs, making code easier to under stand, enabling refactors, and is an important aid to our ongoing Python 3 migration.&lt;/p&gt;
&lt;p&gt;In this talk, we discuss how we got there. We’ll talk about what we tried in order to get our engineers to type annotate their code—what worked, what didn’t, and what our engineers had to say about it.&lt;/p&gt;
&lt;p&gt;Additionally, we’ll discuss the performance problems we faced as the size of our checked codebase grew, and the techniques we employed to allow mypy—which is implemented in Python—to efficiently check (faster than a second, for most incremental checks) millions of lines of code, which culminated in mypyc, a new ahead-of-time compiler for type-annotated Python!&lt;/p&gt;
&lt;p&gt;About the speaker
Michael is a recovering academic with an unfortunate fondness for indefensible hacks. He works at Dropbox on the mypy and mypyc projects.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Sullivan</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/mypy-getting-to-four-million-lines-of-typed-python.html</guid></item><item><title>Patterns for Clean API Design</title><link>https://pyvideo.org/pybay-2019/patterns-for-clean-api-design.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
This talk will arm you with some tools to design a library that &amp;quot;just works&amp;quot;, but also has obvious escape hatches to handle corner cases. It covers several patterns for cleanly organizing related and overlapping functionality in a way that satisfies both humans and static analysis tools.&lt;/p&gt;
&lt;p&gt;Abstract
What do you do when you have to choose between designing your function for one of two common use cases?&lt;/p&gt;
&lt;p&gt;How about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?&lt;/p&gt;
&lt;p&gt;These kinds of questions can be vexing when trying to design a clean, well-scoped API.&lt;/p&gt;
&lt;p&gt;This talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;p&gt;Alternate constructors with &amp;#64;classmethod
Inheritance with &amp;#64;staticmethod and &amp;#64;classmethod
Dispatch by type
A new convention for namespacing functions: variants&lt;/p&gt;
&lt;p&gt;About the speaker
Paul Ganssle is a software developer at Google, maintainer of python-dateutil and setuptools, Python core developer and contributor to many other open source projects. He lives in New York City and is interested in programming, languages, wearable electronics and sensors.&lt;/p&gt;
&lt;p&gt;Expressions of opinion do not necessarily reflect the views of his employer.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/patterns-for-clean-api-design.html</guid></item><item><title>Profiling Python C++ ML applications using VSCode</title><link>https://pyvideo.org/pybay-2019/profiling-python-c-ml-applications-using-vscode.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
The Python Machine Learning stack is notable for its depth, breadth and flexibility, often with components of equivalent functionality with different performance characteristics. This talk presents tools and techniques that can help informing the decisions of which components to use so as to create deployments that meet the performance requirements of an application.&lt;/p&gt;
&lt;p&gt;Abstract
Python is notorious for its popularity in Machine Learning (ML) development. It is also notorious for not being the fastest runtime around. This is resolved by taking advantage of the many high-quality native libraries available for a great variety of ML tasks. Yet, improving the performance of a Python/C++ workload is a sadly under-documented activity, and one that, typically, often has to be undertaken in anger, with limited time to learn specialized tools and techniques. Our team has tried to remedy this situation by connecting the features and functionalities available in Intel hardware and software tools with the very popular Visual Studio Code tooling from Microsoft. We believe that this combination empowers Python ML application and library developers to create efficient workloads for a variety of Cloud and Edge deployments.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/0vk83"&gt;https://t.ly/0vk83&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
I am a Software Engineer with Intel, working on improving the visibility of features on Intel hardware through tools and runtimes, mostly those offered by the Microsoft stack. I graduated from the University of Waterloo with a PhD, where my research centered around the development of adaptive systems using Machine Learning, metaprogramming and GPGPU.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">R Gabriel Esteves</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/profiling-python-c-ml-applications-using-vscode.html</guid></item><item><title>Project Jupyter: Tools for Interactive, Reproducible Data Science</title><link>https://pyvideo.org/pybay-2019/project-jupyter-tools-for-interactive-reproducible-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
As the demand grows for data science in industry and research, so does the need for tools to conduct, document, and share analysis. Project Jupyter has stepped up to meet this need with &amp;quot;open-source software, open-standards, and services for interactive computing across dozens of programming languages.&amp;quot; Jupyter is now used by everyone from individuals doing personal projects on GitHub to major universities and corporations, including Microsoft and Google.&lt;/p&gt;
&lt;p&gt;This talk will give an introduction to two key products of Project Jupyter: the Jupyter Notebook document and the multi-user JupyterHub. We will then share examples of how Jupyter is being leveraged to do data science accessibly, collaboratively, and at scale at UC Berkeley.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/5q1DP"&gt;https://t.ly/5q1DP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Keeley is the Modules Program Coordinator for the UC Berkeley Division of Data Sciences. She assists faculty across all academic fields with incorporating targeted data science lessons into their existing courses and trains undergraduate students to support data science instruction and create open-source curriculum materials in Jupyter notebooks. She also facilitates the Pathways seminar for the Data Scholars program, which provides underrepresented minority and nontraditional students with data science career exploration and professional development.&lt;/p&gt;
&lt;p&gt;Keeley graduated from UC Berkeley in May 2018 with a B.A. in Cognitive Science.  Prior to her time at Berkeley, she worked for three years designing and facilitating internal training workshops for the Northern California affiliate of Planned Parenthood. Whether working with Python or pap smears, she seeks to make technical subjects accessible to everyone impacted by them.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #JupyterNotebook&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keeley Takimoto</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/project-jupyter-tools-for-interactive-reproducible-data-science.html</guid></item><item><title>Python for Industry: Pharmaceuticals and Healthcare</title><link>https://pyvideo.org/pybay-2019/python-for-industry-pharmaceuticals-and-healthcare.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Parag Shrivastava</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/python-for-industry-pharmaceuticals-and-healthcare.html</guid></item><item><title>Python RTMIDI + Various Syntheszisers = Fun</title><link>https://pyvideo.org/pybay-2019/python-rtmidi-various-syntheszisers-fun.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/python-rtmidi-various-syntheszisers-fun.html</guid></item><item><title>Robotic Motion with Django II</title><link>https://pyvideo.org/pybay-2019/robotic-motion-with-django-ii.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/robotic-motion-with-django-ii.html</guid></item><item><title>Spack The Supercomputing Package Manager</title><link>https://pyvideo.org/pybay-2019/spack-the-supercomputing-package-manager.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Gamblin</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/spack-the-supercomputing-package-manager.html</guid></item><item><title>Talking to data as you would with built in types</title><link>https://pyvideo.org/pybay-2019/talking-to-data-as-you-would-with-built-in-types.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In this talk I will present a project (coined py2store) whose goal is to develop tools that allow developers to interact with a variety of data sources and sinks, local or remote, through a consistent and simple interface.&lt;/p&gt;
&lt;p&gt;How simple? The simplest. Objects that feel like built-ins (dicts, lists, sets).&lt;/p&gt;
&lt;p&gt;Abstract
Py2Store might make you think about ORMs. If so, think again. The intent of py2store is not to map objects to db entries, but rather to offer a consistent interface for basic storage operations. In that sense, py2store is more akin to an implementation of the data access object (DAO) pattern. Of course, the difference between ORM and DAO can be blurry, so all this should be taken with a grain of salt.&lt;/p&gt;
&lt;p&gt;How many times did someone share some data with you in the form of a zip of some nested folders whose structure and naming choices are fascinatingly obscure? And how much time do you then spend to write code to interface with the freakish structure?&lt;/p&gt;
&lt;p&gt;One of the intents of py2store is to make that easier to do. You still need to understand the structure of the data store and how to deserialize these datas into python objects you can manipulate. But with the proper tool, you shouldn't have to do much more than that.&lt;/p&gt;
&lt;p&gt;You have a new project or need to write a new app. You'll need to store stuff and read stuff back. Stuff: Different kinds of resources that your app will need to function. Some people enjoy thinking of how to optimize that aspect. I don't. I'll leave it to the experts to do so when the time comes. Often though, the time is later, if ever. Few proof of concepts and MVPs ever make it to prod.&lt;/p&gt;
&lt;p&gt;So instead, I'd like to just get on with the business logic and write my program. So what I need is an easy way to get some minimal storage functionality. But when the time comes to optimize, I shouldn't have to change my code, but instead just change the way my DAO does things.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/y8dVb"&gt;https://t.ly/y8dVb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Ex-Mathematician, Ex-CTO of OtoSense, sound recognition start-up in the silicon valley, sold to Analog Devices. Now works as a director of AI research at Analog Devices.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thor Whalen</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/talking-to-data-as-you-would-with-built-in-types.html</guid></item><item><title>The latest with BLACK, so you can stop worrying about Formatting</title><link>https://pyvideo.org/pybay-2019/the-latest-with-black-so-you-can-stop-worrying-about-formatting.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
What good is a code style if it's not internally consistent? What good is a linter when it slows you down? What if you could out-source your worries about code formatting, adopt a consistent style, and make your team faster all at the same time?&lt;/p&gt;
&lt;p&gt;Come hear about Black: a new code style and a tool that allows you to format your Python code automatically. In the talk you'll learn not only how the style looks like but why it is the way it is. I will do my best to convince you not only that it's good but that it's good enough. You'll see how you can integrate it with your current workflow and how it speeds up your life while making your code prettier on average.&lt;/p&gt;
&lt;p&gt;Lose your attachments, delegate the boring job of moving tokens around to satisfy the linter, and save time for more important matters. Guaranteed to increase the life expectancy of space bars and Enter keys on your new MacBook's keyboard.&lt;/p&gt;
&lt;p&gt;About the speaker
ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/the-latest-with-black-so-you-can-stop-worrying-about-formatting.html</guid></item><item><title>Understanding Concurrency in Python!</title><link>https://pyvideo.org/pybay-2019/understanding-concurrency-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Asyncio is the latest and greatest way to write concurrent code, but are the principles behind it really novel? At its core, asyncio just an implementation of single-threaded, cooperative concurrency. Thats a lot of buzzwords! Let's zoom in on single-threaded, cooperative concurrency more broadly, explore what that means, how it works, and why it's valuable.&lt;/p&gt;
&lt;p&gt;Abstract
There are a few ways to do things at the same time (or almost at the same time) in Python: using multiple threads, multiple processes, and now with asyncio. But there are really only a few ways to do so where the multitasking is cooperative (I'm looking at you asyncio). We will zoom into this third option, which can more broadly be described as single-threaded, cooperative concurrency.&lt;/p&gt;
&lt;p&gt;This talk will explore what each of these terms mean, and why this approach is becoming increasingly popular. Along the way, we will pay homage to some of the precursors of asyncio to understand and appreciate whats going on under the hood. Get ready to roll your sleeves up, dive into the code for simple concurrent programs, and walk away with a better understand of what single-threaded, cooperative concurrency means.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/j9gd3"&gt;https://t.ly/j9gd3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Annie is a Senior Software Engineer at Nylas, where she works almost exclusively in Python. Outside of work, Annie volunteers with Code Nation and teaches computer science at an all-girls high school. She is passionate about making complicated topics accessible and helping others grow as engineers. Annie loves to hike, knit and bake bread.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Annie Cook</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/understanding-concurrency-in-python.html</guid></item><item><title>Unit testing using monkey patching in pytest</title><link>https://pyvideo.org/pybay-2019/unit-testing-using-monkey-patching-in-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Unit testing is loved by so many that it is already a very popular concept. But I will try to make unit testing even simpler with pytest using monkey patching. Come to learn about unit testing with pytest using monkey patching.&lt;/p&gt;
&lt;p&gt;Abstract
Everyone loves unit testing. Developers rarely submit code for reviews without adding unit testing. But can we make this writing unit tests even simpler in Python?&lt;/p&gt;
&lt;p&gt;PyTest provides us with an amazing set of tools and libraries to write functional tests, but can PyTest be used for Unit testing also? Of course it can! Not only can you write simple unit tests with PyTest, you can write tests for complex logic as well as code which depend on external services using PyTest. Having worked on PyTest for the last 5 years, I was amazed at the power and capabilities of PyTests for writing quality tests.&lt;/p&gt;
&lt;p&gt;Monkey Patching is a common concept, but it is not used widely outside of unit-tests. Python has its own internal libraries for writing unit tests and mocking, MonkeyPatching using PyTest makes the tests a lot simpler to write..&lt;/p&gt;
&lt;p&gt;We will cover how PyTest, MonkeyPatching and Unit tests come together to not only make it easy to write tests, but also make it fun.&lt;/p&gt;
&lt;p&gt;This talk is for all levels and does not require any specific knowledge of PyTest.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/XZWn5"&gt;https://t.ly/XZWn5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Vikram is a software engineer from the Bay Area and has worked at companies like Sony PlayStation and Box. He has been working on Python for the last 5 years mainly in the areas of software automation, tools, infrastructure and software testing. He really enjoys building tools using Python and learning about best practices in coding and software testing.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vikram Bhat</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/unit-testing-using-monkey-patching-in-pytest.html</guid></item><item><title>What to do with a Flock of lambdas</title><link>https://pyvideo.org/pybay-2019/what-to-do-with-a-flock-of-lambdas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Fundinger</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/what-to-do-with-a-flock-of-lambdas.html</guid></item><item><title>Why is my tractor in the Gulf of Mexico</title><link>https://pyvideo.org/pybay-2019/why-is-my-tractor-in-the-gulf-of-mexico.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donna Okazaki</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/why-is-my-tractor-in-the-gulf-of-mexico.html</guid></item><item><title>Why you should be using structured logs</title><link>https://pyvideo.org/pybay-2019/why-you-should-be-using-structured-logs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
At Stitch Fix most application logs are output in a structured JSON format for simpler debugging and downstream consumption.&lt;/p&gt;
&lt;p&gt;In this talk we’ll cover in more detail why structured logs are useful and provide leverage, caveats to using them, and how simple it is to get one going with Python.&lt;/p&gt;
&lt;p&gt;Abstract
At Stitch Fix most application logs are output in a structured JSON format for simpler debugging and downstream consumption. For example, data scientists can add a field to their application log and it will automatically turn up as a parsed field in Elasticsearch for easy dashboarding and querying via Kibana, or be easily found and queried in Presto. In this talk we’ll cover in more detail why structured logs are useful and provide leverage, caveats to using them, and how simple it is to get one going with Python.&lt;/p&gt;
&lt;p&gt;About the speaker
Stefan loves the stimulus of working at the intersection of design, engineering, and data. He grew up in New Zealand, speaks Polish, and spent formative years at Stanford, LinkedIn, Nextdoor &amp;amp; Idibon. Outside of work Stefan likes to 🏊, 🌮, 🍺, and ✈.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Krawczyk</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/why-you-should-be-using-structured-logs.html</guid></item><item><title>Writing good python APIs with autosig</title><link>https://pyvideo.org/pybay-2019/writing-good-python-apis-with-autosig.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
APIs are important. It's how your packages relate to the rest of a program and their users and they are a fundamental defense against complexity. Discussions on how to write good APIs are long on opinion and short on concrete and unambiguous steps a developer can take. At the opposite end, I decided to focus on the very specific subject of API consistency and to provide a package that supports the writing of consistent APIs by factoring out their syntactic and semantic aspects. From argument naming and ordering, to initialization and checking, to documentation, autosig provides a way to concisely describe an API, minimizing repetition and the possibility of error, or just messiness. In this talk, we will introduce the package by way of two examples of increasing complexity, then discuss with the audience directions in which the package should go.&lt;/p&gt;
&lt;p&gt;Abstract
Good APIs are important and we know one when we use it. There are plenty of guidelines on how to write one, but nothing that is &amp;quot;set in code&amp;quot;. autosig aims to be an API for API design, implementing fairly uncontroversial API design guidelines in a package. It is focused on consistency and reuse of API elements such as arguments and signatures and on a mix of syntactic and semantic aspects, from naming and ordering of arguments to type checking and conversion, to meta-data such as documentation. This talk will explain what autosig can do for the API designer going through a basic example first, followed by a real application -- the statistical graphics package altair_recipes. The talk will end with a call for feedback from the experienced API designers in the audience and all interested developers: could you use autosig in your work? What other aspects could or should it cover? What could it do better?&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/0vzbG"&gt;https://t.ly/0vzbG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Complete, experienced data scientist with industrial and academic backgrounds. Most recent work on big data packages for R (rmr2, plyrmr, tidyr.big), R developer tools (quickcheck), information filtering (rightload), A/B testing, web ranking. Cited 7000+ times in the scientific literature for work in bioinformatics and computational learning.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Piccolboni</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/writing-good-python-apis-with-autosig.html</guid></item></channel></rss>