<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Paul Everitt</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_paul-everitt.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python 1994</title><link href="https://pyvideo.org/europython-2019/python-1994.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/python-1994.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Come for the language, stay for the community.” The Python community
started in 1994 at a NIST workshop in Maryland. What was the world of
Python like in its first years? Did we have any clue whatsoever? A
joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Community"></category></entry><entry><title>Let’s PyScript: Flask frontends in Python!</title><link href="https://pyvideo.org/flaskcon-2025/lets-pyscript-flask-frontends-in-python.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2025-05-16:/flaskcon-2025/lets-pyscript-flask-frontends-in-python.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nicholas Tollervey live codes a chat system with a Flask API and PyScript UI. He and Paul Everitt talk about how PyScript works, and then take Q&amp;amp;A from the audience through the newly created app. Presented at FlaskCon 2025.&lt;/p&gt;
</content><category term="FlaskCon 2025"></category><category term="FlaskCon"></category><category term="Flask"></category><category term="API"></category><category term="PyScript"></category><category term="Python"></category></entry><entry><title>Python’s New Template Strings and Flask</title><link href="https://pyvideo.org/flaskcon-2025/pythons-new-template-strings-and-flask.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Dave Peck</name></author><id>tag:pyvideo.org,2025-05-16:/flaskcon-2025/pythons-new-template-strings-and-flask.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Peck and Paul Everitt describe how their new PEP 750 t-strings template strings work. They demonstrate problems that t-strings solve, and show how they might be used to write a new template system or enhance an existing one. Presented at FlaskCon 2025.&lt;/p&gt;
</content><category term="FlaskCon 2025"></category><category term="FlaskCon"></category><category term="PEP 750"></category><category term="t-strings"></category><category term="template strings"></category><category term="templating"></category><category term="Python"></category><category term="Flask"></category></entry><entry><title>Python 1994</title><link href="https://pyvideo.org/pybay-2017/python-1994.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2017-08-12:/pybay-2017/python-1994.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Come for the language, stay for the community.&amp;quot; The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Building open …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Come for the language, stay for the community.&amp;quot; The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Building open source communities is hard, and while there are best practices and lessons learned to study, sometimes it all seems random. Python became renowned for its community. What was it like in the beginning, and how did it succeed?&lt;/p&gt;
&lt;p&gt;This talk covers the 1994 Python workshop at NIST. I was fortunate to be there, along with twenty-ish others, and was involved in the next number of years of stumbling around purposefully. The stories are funny to pass along, some of the lessons are accidentally valuable, and with a generous question-and-answer period, the session becomes a community chit-chat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Paul Everitt is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Agendaless Consulting and a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the PSF and the Plone Foundation. Prior to that, Paul was an officer in the US Navy, starting in Python and launching www.navy.mil in 1993.&lt;/p&gt;
</content><category term="PyBay 2017"></category></entry><entry><title>Python Steering Council Panel</title><link href="https://pyvideo.org/pybay-2019/python-steering-council-panel.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-08-17:/pybay-2019/python-steering-council-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Customizing Sphinx</title><link href="https://pyvideo.org/pybay-2019/customizing-sphinx.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-08-16:/pybay-2019/customizing-sphinx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8016, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;About the speaker
Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Paul will be moderating this year's Python Steering Council Panel Discussion.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</content><category term="PyBay 2019"></category></entry><entry><title>Python 1994</title><link href="https://pyvideo.org/pycolorado-2019/python-1994.html" rel="alternate"></link><published>2019-09-08T00:00:00+00:00</published><updated>2019-09-08T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2019-09-08:/pycolorado-2019/python-1994.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Come for the language, stay for the community.” The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
</content><category term="PyColorado 2019"></category></entry><entry><title>Keynote - How It Happened: Stories and Lessons from Inside Zope and Other Projects</title><link href="https://pyvideo.org/pycon-de-2011/keynote-how-it-happened-stories-and-lessons-fr.html" rel="alternate"></link><published>2011-10-06T00:00:00+00:00</published><updated>2011-10-06T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2011-10-06:/pycon-de-2011/keynote-how-it-happened-stories-and-lessons-fr.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ever heard of Zope? Ever heard of it recently? Being a leader, then not,
in a large open source project over a long period of time generates a
lot of funny stories. And mistakes. And even, moments of wonder, not
always intentionally. In this talk I'll cover a number …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ever heard of Zope? Ever heard of it recently? Being a leader, then not,
in a large open source project over a long period of time generates a
lot of funny stories. And mistakes. And even, moments of wonder, not
always intentionally. In this talk I'll cover a number of insider
stories from the life of Zope and Plone, then analyze them from the
safety of perspective. The long view can help show what makes a big
project vary in success over time measured in decades. I will also
include stories and lessons from long-running, successful leaders in
other Python projects.&lt;/p&gt;
</content><category term="PyCon DE 2011"></category></entry><entry><title>Pyramid for Humans</title><link href="https://pyvideo.org/pycon-us-2013/pyramid-for-humans.html" rel="alternate"></link><published>2013-03-13T00:00:00+00:00</published><updated>2013-03-13T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2013-03-13:/pycon-us-2013/pyramid-for-humans.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pyramid has emerged as a fast, modern, lightweight web framework. This
lively, hands-on tutorial covers a little about a lot: practical
introductions to the most common facilities. Fun, fast-paced, and most
certainly not aimed at experts.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="tutorial"></category></entry><entry><title>Python 3/2 Web Development with Pyramid</title><link href="https://pyvideo.org/pycon-us-2014/python-32-web-development-with-pyramid.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2014-04-12:/pycon-us-2014/python-32-web-development-with-pyramid.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python 3 is upon us! This lively, hands-on tutorial covers a little
about a lot, showing Python 3 (and 2) web development using Pyramid, a
fast, modern, lightweight web framework. Fun, fast-paced, and most
certainly not aimed at experts.&lt;/p&gt;
</content><category term="PyCon US 2014"></category></entry><entry><title>Panel Discussion: Paul Everitt with Guido van Rossum and others</title><link href="https://pyvideo.org/pycon-us-2017/panel-discussion-paul-everitt-with-guido-van-rossum-and-others.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2017-05-21:/pycon-us-2017/panel-discussion-paul-everitt-with-guido-van-rossum-and-others.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paul Everitt, Guido van Rossum&lt;/p&gt;
&lt;p&gt;Panel Discussion&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Visual Testing with PyCharm and pytest</title><link href="https://pyvideo.org/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Brian Okken</name></author><id>tag:pyvideo.org,2018-05-11:/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual testing”: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We’ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we’ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less &amp;quot;in the way&amp;quot; of other development activities&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="pytest"></category><category term="pycharm"></category><category term="tdd"></category></entry><entry><title>Static Sites with Sphinx and Markdown</title><link href="https://pyvideo.org/pycon-us-2021/static-sites-with-sphinx-and-markdown.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/static-sites-with-sphinx-and-markdown.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody knows Sphinx for documenting projects, Python and otherwise. But few think of Sphinx for the rest of a website.&lt;/p&gt;
&lt;p&gt;Why? Because Sphinx traditionally means authoring with reStructuredText instead of Markdown. While RST is very powerful, it's a bit quirky, and nowhere near the popularity of Markdown.&lt;/p&gt;
&lt;p&gt;But with …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody knows Sphinx for documenting projects, Python and otherwise. But few think of Sphinx for the rest of a website.&lt;/p&gt;
&lt;p&gt;Why? Because Sphinx traditionally means authoring with reStructuredText instead of Markdown. While RST is very powerful, it's a bit quirky, and nowhere near the popularity of Markdown.&lt;/p&gt;
&lt;p&gt;But with the arrival of full Markdown support MyST, and with static site generators having a renaissance, it's time to give Sphinx a second look. Sphinx is an &amp;quot;information-rich&amp;quot; static site generator, with rich linking and many other features for authoring a knowledge base.&lt;/p&gt;
&lt;p&gt;This talk introduces Sphinx for websites, shows enabling MyST for Markdown, and compares what it has to offer versus other approaches. We’ll do a light treatment of customization. All the material in this talk comes from a published tutorial.&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Build Yourself a PyScript</title><link href="https://pyvideo.org/pycon-us-2023/build-yourself-a-pyscript.html" rel="alternate"></link><published>2023-04-21T00:00:00+00:00</published><updated>2023-04-21T00:00:00+00:00</updated><author><name>Nicholas H.Tollervey</name></author><id>tag:pyvideo.org,2023-04-21:/pycon-us-2023/build-yourself-a-pyscript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyScript and Pyodide have gained a lot of attention, as Python in the
browser presents interesting opportunities. And architectural questions
as well. What does it mean to write an extensible, friendly web platform
targeting Python?&lt;/p&gt;
&lt;p&gt;In this talk, learn how PyScript works and watch a treatment of key
technical …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyScript and Pyodide have gained a lot of attention, as Python in the
browser presents interesting opportunities. And architectural questions
as well. What does it mean to write an extensible, friendly web platform
targeting Python?&lt;/p&gt;
&lt;p&gt;In this talk, learn how PyScript works and watch a treatment of key
technical issues for writing web apps with the WebAssembly version of
Python. What does “file” mean? How do you install something? What are
web workers and how do they impact your architecture?&lt;/p&gt;
&lt;p&gt;PyScript itself is constantly evolving on these topics. Come for a
spirited discussion with a fast-paced format.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Joyful Django DX with PyCharm (Sponsor: JetBrains)</title><link href="https://pyvideo.org/pycon-us-2023/joyful-django-dx-with-pycharm-sponsor-jetbrains.html" rel="alternate"></link><published>2023-04-20T00:00:00+00:00</published><updated>2023-04-20T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2023-04-20:/pycon-us-2023/joyful-django-dx-with-pycharm-sponsor-jetbrains.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and Python make fullstack and API web projects a breeze. But as
Python has matured, significant tooling has risen to improve the
development experience (DX). Can you use this tooling, in a modern
editor and IDE, to stay in the flow and make your development…joyful?&lt;/p&gt;
&lt;p&gt;In this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and Python make fullstack and API web projects a breeze. But as
Python has matured, significant tooling has risen to improve the
development experience (DX). Can you use this tooling, in a modern
editor and IDE, to stay in the flow and make your development…joyful?&lt;/p&gt;
&lt;p&gt;In this session we’ll put PyCharm to work, at helping us work.
Navigation, refactoring, autocomplete – the usual suspects. We’ll also
see “test-first” development to stay in the IDE, plus how this can apply
to frontends. Finally, we’ll follow along with topic’s from Adam
Johnson’s book “Boost Your Django DX”, with a surprise at the end.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Customizing Sphinx: Simple, Normal, and Hard</title><link href="https://pyvideo.org/pygotham-2018/customizing-sphinx-simple-normal-and-hard.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2018-10-06:/pygotham-2018/customizing-sphinx-simple-normal-and-hard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python’s secret weapon. It’s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.&lt;/p&gt;
&lt;p&gt;Sphinx can also be customized and extended in various ways, and here the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python’s secret weapon. It’s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.&lt;/p&gt;
&lt;p&gt;Sphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. With such a venerable software stack, Sphinx can be inscrutable when you paint outside the lines.&lt;/p&gt;
&lt;p&gt;This talk gives Sphinx civilians confidence to go beyond simply using Sphinx, towards adapting Sphinx to their needs: configuration values, local CSS and templates, installing extensions and themes, writing a small extension with a directive, and testing that extension. We’ll conclude with a roundup of challenges and benefits that come with diving into Sphinx.&lt;/p&gt;
&lt;p&gt;As the talk provides shallow treatment of a wide topic list, follow-up and hands-on instruction will be given at an open space.&lt;/p&gt;
</content><category term="PyGotham 2018"></category></entry><entry><title>Customizing Sphinx: Simple, Normal, and Hard</title><link href="https://pyvideo.org/pyohio-2018/customizing-sphinx-simple-normal-and-hard.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2018-07-28:/pyohio-2018/customizing-sphinx-simple-normal-and-hard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python projects use Sphinx for documentation, so much so that
Sphinx is like Python’s secret weapon. It’s a powerful, mature system
for generating static content -- not just docs, but blogs and regular
websites. Sphinx can also be customized and extended in various ways,
and here the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python projects use Sphinx for documentation, so much so that
Sphinx is like Python’s secret weapon. It’s a powerful, mature system
for generating static content -- not just docs, but blogs and regular
websites. Sphinx can also be customized and extended in various ways,
and here the trip gets wild and wooly. This talk takes a look at themes
and extensions.&lt;/p&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/saturday-lightning-talks.html" rel="alternate"></link><published>2018-07-28T00:00:00+00:00</published><updated>2018-07-28T00:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2018-07-28:/pyohio-2018/saturday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/63/"&gt;https://pyohio.org/2018/schedule/presentation/63/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lock Your Mock - Aly Sivji&lt;/li&gt;
&lt;li&gt;Abusing Type Annotations - Zach Mitchell&lt;/li&gt;
&lt;li&gt;How does U2F / Yubikeys work? - LVH&lt;/li&gt;
&lt;li&gt;Blast Asteroids with Arcade - Paul Everitt&lt;/li&gt;
&lt;li&gt;Chocolate in PB - Dan Lindeman&lt;/li&gt;
&lt;li&gt;Good Hacker / Bad Hacker - Dustin Ingram&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>PyCharm Power Tips (Tutorial)</title><link href="https://pyvideo.org/python-web-conf-2020/pycharm-power-tips-tutorial.html" rel="alternate"></link><published>2020-06-17T00:00:00+00:00</published><updated>2020-06-17T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2020-06-17:/python-web-conf-2020/pycharm-power-tips-tutorial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;PyCharm Power Tips (Tutorial)&amp;quot; by: Paul Everitt
Already using PyCharm and want to learn productivity tips? In this hands-on tutorial, we will show bite-sized ways to speed up your work and stay in the coding flow: general IDE tips, Django-specific tips, then a sample TDD session in pytest that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;PyCharm Power Tips (Tutorial)&amp;quot; by: Paul Everitt
Already using PyCharm and want to learn productivity tips? In this hands-on tutorial, we will show bite-sized ways to speed up your work and stay in the coding flow: general IDE tips, Django-specific tips, then a sample TDD session in pytest that puts those to work in a real coding session.&lt;/p&gt;
&lt;p&gt;RESOURCES: &lt;a class="reference external" href="https://2020.pythonwebconf.com/tutorials/how-to-become-a-pycharm-power-user"&gt;https://2020.pythonwebconf.com/tutorials/how-to-become-a-pycharm-power-user&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry><entry><title>Python 1994</title><link href="https://pyvideo.org/python-web-conf-2021/python-1994.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/python-1994.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Python 1994&amp;quot; by: Paul Everitt&lt;/p&gt;
&lt;p&gt;“Come for the language, stay for the community.” The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Python 1994&amp;quot; by: Paul Everitt&lt;/p&gt;
&lt;p&gt;“Come for the language, stay for the community.” The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry><entry><title>Static Sites With Sphinx and Markdown</title><link href="https://pyvideo.org/python-web-conf-2021/static-sites-with-sphinx-and-markdown.html" rel="alternate"></link><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2021-03-22:/python-web-conf-2021/static-sites-with-sphinx-and-markdown.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Static Sites With Sphinx and Markdown&amp;quot; by: Paul Everitt
Everybody knows Sphinx for documenting projects, Python and otherwise. But few think of Sphinx for the rest of a website.&lt;/p&gt;
&lt;p&gt;Why? Because Sphinx traditionally means authoring with reStructuredText instead of Markdown. While RST is very powerful, it's a bit quirky …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Static Sites With Sphinx and Markdown&amp;quot; by: Paul Everitt
Everybody knows Sphinx for documenting projects, Python and otherwise. But few think of Sphinx for the rest of a website.&lt;/p&gt;
&lt;p&gt;Why? Because Sphinx traditionally means authoring with reStructuredText instead of Markdown. While RST is very powerful, it's a bit quirky, and nowhere near the popularity of Markdown.&lt;/p&gt;
&lt;p&gt;But with the arrival of full Markdown support MyST, and with static site generators having a renaissance, it's time to give Sphinx a second look. Sphinx is an &amp;quot;information-rich&amp;quot; static site generator, with rich linking and many other features for authoring a knowledge base.&lt;/p&gt;
&lt;p&gt;This talk introduces Sphinx for websites, shows enabling MyST for Markdown, and compares what it has to offer versus other approaches. We’ll do a light treatment of customization. All the material in this talk comes from a published tutorial.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2021"></category><category term="PythonWebConf"></category><category term="PythonWebConf2021"></category></entry><entry><title>Python's Web Story: Now and Next</title><link href="https://pyvideo.org/python-web-conf-2022/pythons-web-story-now-and-next.html" rel="alternate"></link><published>2022-03-24T00:00:00+00:00</published><updated>2022-03-24T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2022-03-24:/python-web-conf-2022/pythons-web-story-now-and-next.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2019 we lamented Python’s web story. The web hasn’t stood still and neither has Python. In this keynote we reframe the issue in updated terms. We then explain how the JavaScript world has innovated like crazy, and hear from important voices in Python about the near …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2019 we lamented Python’s web story. The web hasn’t stood still and neither has Python. In this keynote we reframe the issue in updated terms. We then explain how the JavaScript world has innovated like crazy, and hear from important voices in Python about the near future of Python and the web.&lt;/p&gt;
&lt;p&gt;#PWC2022 attracted nearly 375 attendees from 36 countries and 21 time zones making it the biggest and best year yet. The highly engaging format featured 90 speakers, 6 tracks (including 80 talks and 4 tutorials) and took place virtually on March 21-25, 2022 on LoudSwarm by Six Feet Up.&lt;/p&gt;
&lt;p&gt;More information about the conference can be found at: &lt;a class="reference external" href="https://2022.pythonwebconf.com"&gt;https://2022.pythonwebconf.com&lt;/a&gt;&lt;/p&gt;
</content><category term="Python Web Conf 2022"></category><category term="PythonWebConf"></category><category term="PythonWebConf2022"></category><category term="Keynote"></category></entry></feed>