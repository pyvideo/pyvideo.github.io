<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joshua-ginsberg.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-06T00:00:00+00:00</updated><entry><title>Accelerating and Enhancing Django with Redis</title><link href="https://pyvideo.org/djangocon-us-2012/accelerating-and-enhancing-django-with-redis.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Joshua Ginsberg</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/accelerating-and-enhancing-django-with-redis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial introduces Redis, an in-memory key-object NoSQL datastore.
We discuss out-of-the-box ways Redis can help improve the performance of
your Django deployments, ways that using Redis instead of SQL for some
data management can accelerate your apps, and more advanced and
unconventional uses for Redis to solve real-time and big-data problems.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting your Django app to a v1.0 release means focusing on function and
user experience before prematurely focusing on optimization. But once
it's off the ground, the Redis key-object store provides a versatile and
functional way to take your app to the next level of performance and
function with minimal engineering.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://redis.io"&gt;Redis&lt;/a&gt; is an in-memory key-object database that can
perform standard operations on simple values, lists, sets, hash maps,
and scored sets with incredible efficiency. While it cannot and should
not replace SQL for schema-defined, persistent data storage, it can
provide dramatically faster operational efficiency for volatile,
temporary, or rapidly changing data with minimal coding required.&lt;/p&gt;
&lt;p&gt;This talk begins by introducing Redis, its basic featureset, and the
data types and operations it supports. We'll cover some high-level
guidelines and strategies for identifying where Redis may be an
appropriate performance- enhancing solution. We then cover the
out-of-the-box ways that Redis can improve a Django application as a
cache, session store, Celery broker, and more. We'll then proceed to
more advanced usage possibilities, implementing a real-time websocket
based messaging solution, scripting within Redis using its embedded Lua
interpreter, and connecting Redis to PostgreSQL using Foreign Data
Wrappers to efficiently blend SQL tables with Redis data.&lt;/p&gt;
&lt;p&gt;By the end of the presentation, you should be able to use all of the
data- structures offered by Redis, to identify opportunities within you
codebase that Redis may offer simple but dramatic efficiency
improvements, and to envision how advanced Redis usage may bring new and
cutting-edge functionality to your project.&lt;/p&gt;
&lt;p&gt;Redis was developed by &lt;a class="reference external" href="http://twitter.com/antirez"&gt;Salvatore
Sanfilippo&lt;/a&gt; and &lt;a class="reference external" href="http://twitter.com/pnoordhuis"&gt;Pieter
Noordhuis&lt;/a&gt;, who are both supported by
VMWare to develop the database full-time. Redis has excellent &lt;a class="reference external" href="https://github.com/andymccurdy/redis-py/"&gt;Python
bindings&lt;/a&gt; developed by Andy
McCurdy.&lt;/p&gt;
</summary><category term="django"></category><category term="redis"></category></entry></feed>