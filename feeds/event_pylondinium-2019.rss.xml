<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 16 Jun 2019 00:00:00 +0000</lastBuildDate><item><title>Breaking pandas</title><link>https://pyvideo.org/pylondinium-2019/breaking-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pandas is more than 10 years old now. In this time, it became almost a standard for building data pipelines and perform data analysis in Python. As the popularity of the project grows, it also grows the number of projects that depend or interact with pandas.&lt;/p&gt;
&lt;p&gt;This talk will cover this ecosystem of projects around pandas, mainly in the prespective of scalability and performance. Discussing for example how projects like Arrow are key for the future of pandas, or how Dask is overcoming pandas limitations.&lt;/p&gt;
&lt;p&gt;In a first part, the talk will focus on pandas itself, its components, and its architecture. This will give the required context for a second part, that will explain related projects, how they interact with pandas, and what the whole ecosystem can offer to users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc Garcia</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/breaking-pandas.html</guid></item><item><title>Build your Python Extensions with Rust!</title><link>https://pyvideo.org/pylondinium-2019/build-your-python-extensions-with-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When your Python needs to be fast, one powerful tool is the ability to write compiled extension modules. Normally this is done using the C API, but that requires managing reference counts and memory allocation and is nearly impossible to do correctly for non-trivial programs. In this talk, we'll look at how you can write extension modules in Rust - a memory-safe systems programming language that is increasingly popular as a replacement for C and C++, and the most loved language in the Stack Overflow developer survey 4 years running.&lt;/p&gt;
&lt;p&gt;This talk will focus on pyo3 and milksnake, two popular libraries that provide very different approaches for writing Rust extensions; it will cover a basic introduction to the libraries, and compare their relative strengths and weaknesses. These will also be compared to C and Cython extension modules from a performance, safety and maintainability perspective.&lt;/p&gt;
&lt;p&gt;This talk assumes some basic familiarity with extension modules. It is aimed at Pythonistas who are interested in Rust and at people who currently write extension modules and are looking for a safer alternative to the C API. Familiarity with the syntax and basic concepts of Rust is helpful, but the talk should be understandable even for Rust beginners.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/build-your-python-extensions-with-rust.html</guid></item><item><title>Clean Architectures in Python</title><link>https://pyvideo.org/pylondinium-2019/clean-architectures-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software that cannot easily be maintained or changed.&lt;/p&gt;
&lt;p&gt;The “clean architecture” model predates Robert Martin, who recently brought it back to the attention of the community, and is a way of structuring applications that leverages layers separation and internal APIs to achieve a very tidy, fully-tested, and loosely coupled system. The talk introduces the main ideas of the architecture, showing how the layers can be implemented in Python, following the content of the book “Clean Architectures in Python” edited by Leanpub. The book recently reached 8,000 downloads and many readers found it useful to start learning how to test software and how to structure an application without relying entirely on the framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Leonardo Giordani</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/clean-architectures-in-python.html</guid></item><item><title>Dictionaries, behind the scenes</title><link>https://pyvideo.org/pylondinium-2019/dictionaries-behind-the-scenes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have been working with Python dictionaries for a while and you feel comfortable using them, now you're interested in taking the next step. With this talk you'll get a look at how dictionaries work on the inside, things ranging from performance to security, and some surprises. You'll also learn how to personalise your dicts, for example modifying the hash function (and the risks of doing it). You will leave knowing your tools better and loving python dicts even more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisela Rossi</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/dictionaries-behind-the-scenes.html</guid></item><item><title>If Errol Street Could Talk</title><link>https://pyvideo.org/pylondinium-2019/if-errol-street-could-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The diversity statement quoted as follows: &amp;quot;The Python Software Foundation and the global Python community welcome and encourage participation by everyone. Our community is based on mutual respect, tolerance, and encouragement, and we are working to help each other live up to these principles. We want our community to be more diverse: whoever you are, and whatever your background, we welcome you.&amp;quot;&lt;/p&gt;
&lt;p&gt;Diversity, big deal! As an active members and event organisers (and also on the minority side of the gender) in the Python community, we have alway been concern by the question of: Do we truly have a problem in diversity? Especially, gender diversity. We would like to find out the truth, by data science, and see if we can find a clue why and how we can fix it.&lt;/p&gt;
&lt;p&gt;First, we will show the research others did regarding the representation of women in the R and Python communities [1]. Then, we will show the research that we did based on our experience and statistic. Including static analysis of the speakers diversity (regarding gender) at major PyCon and PyData conferences. Finally, as we all care about diversity and want improvements, we would like to find out the reason and what we can do about it. We would propose what we, the minorities and allies, could do against this seemingly unbalance situation and make the community better.&lt;/p&gt;
&lt;p&gt;This talk is for all that who cares about diversity in our community.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://reshamas.github.io/why-women-are-flourishing-in-r-community-but-lagging-in-python/"&gt;https://reshamas.github.io/why-women-are-flourishing-in-r-community-but-lagging-in-python/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cheuk Ting Ho</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/if-errol-street-could-talk.html</guid></item><item><title>Inside the Kitchen</title><link>https://pyvideo.org/pylondinium-2019/inside-the-kitchen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a huge open source software project, and ensuring it evolves and get better and at the same time not too complex is a massive undertaking from contributors around the world. This talk will try to tell you about how that process works. You may find it interesting if you want to get involved, have ideas to propose, or are just curious about how this system that you use actually gets built. The talks will not focus much on the formal process to submit code or a language change proposal (which are thoroughly documented elsewhere), but more on the team dynamics, answering questions like &amp;quot;is there people getting paid to work on Python?&amp;quot;, &amp;quot;how are decisions made and who takes them?&amp;quot;, &amp;quot;what kinds of changes are there?&amp;quot;, &amp;quot;when should I write a proposal vs file a bug vs write an email at python-ideas vs talk to Guido at a conference?&amp;quot;, &amp;quot;what kinds of ideas are more or less likely to be accepted?&amp;quot; &amp;quot;what are common causes of rejected ideas?&amp;quot;. I'm hoping that by the end of the talk the audience should have demystified a lot of what happens behind the scenes and help them get curious about getting involved and contribute.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Moisset</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/inside-the-kitchen.html</guid></item><item><title>Integrating Systems Using Python with pandas</title><link>https://pyvideo.org/pylondinium-2019/integrating-systems-using-python-with-pandas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The problem we aimed to solve broadly was to (1) replace the data inputs of a newly acquired product and software and to (2) replace this system with a more modern one in phases. We had already accomplished being able to run this acquired system on our hardware, and it was backing a critical product in production. Hence, an additional requirement was to (3) ensure the production system continued to run by limiting any large-scale changes to its interfaces or data model.&lt;/p&gt;
&lt;p&gt;The destination interface required a file input. We created a Python service to translate acquired data from our modern system into files in the form required by the destination systems. The Python code read file configurations that were easy to create. Python was useful and new configurations did not require re-linking code to deploy them.&lt;/p&gt;
&lt;p&gt;We also needed to deliver different variants of the same data, joined or concatenated data, or pivoted data to different end points. End-point applications had different expectations. We were able to use pandas to solve all of these data transformation problems. We did not need to change the system where we acquired the data. And we could use either a database or an existing file as a data input. We then used pandas to suck the data into an in-memory data structure to which it was easy to apply merges, concatenations and pivots. The result was that neither the producer of the data or the consumer of the data needed to make any concessions for the other’s data model or interface.&lt;/p&gt;
&lt;p&gt;In conclusion, the pandas feature set enabled us to build an integration facility to connect and transfer data between diverse systems with different requirements related to the form and content of the payload – without the producers and consumers of the data needing to change or be aware of the other’s data model or interface.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michelle Nabavian</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/integrating-systems-using-python-with-pandas.html</guid></item><item><title>Lies, Damned Lies, and Statistics</title><link>https://pyvideo.org/pylondinium-2019/lies-damned-lies-and-statistics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Statistics show that eating ice cream causes death by drowning. If this sounds baffling, this talk will help you to understand correlation, bias, statistical significance and other statistical techniques that are commonly (mis)used to support an argument that leads, by accident or on purpose, to drawing the wrong conclusions.&lt;/p&gt;
&lt;p&gt;The casual observer is exposed to the use of statistics and probability in everyday life, but it is extremely easy to fall victim of a statistical fallacy, even for professional users. The purpose of this talk is to help the audience understand how to recognise and avoid these fallacies, by combining an introduction to statistics with examples of lies and damned lies, in a way that is approachable for beginners.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlation and causation&lt;/li&gt;
&lt;li&gt;Simpson’s Paradox&lt;/li&gt;
&lt;li&gt;Sampling bias and polluted surveys&lt;/li&gt;
&lt;li&gt;Data visualisation gone wild&lt;/li&gt;
&lt;li&gt;Statistical significance (and Data dredging a.k.a. p-hacking).&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Bonzanini</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/lies-damned-lies-and-statistics.html</guid></item><item><title>Making Multiple Inheritance not work in Python</title><link>https://pyvideo.org/pylondinium-2019/making-multiple-inheritance-not-work-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is a destructive examination of the workings of Python's inheritance model. We'll learn how it works by breaking it. After starting with a discussion of how we got to where we are, we'll then move on to the hooks that Python gives us to interact with it. These include using the metaclass to alter the class during construction, as well as using the &lt;em&gt;__init_subclass__&lt;/em&gt; and &lt;em&gt;__subclasscheck__&lt;/em&gt; hooks.&lt;/p&gt;
&lt;p&gt;Particular examples will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implementing interfaces in Python&lt;/li&gt;
&lt;li&gt;Turning inheritance off in favor of explicit reuse&lt;/li&gt;
&lt;li&gt;Simplifying classes by disabling a selection of features you don't wish to use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While none of these are meant to be particularly useful implementations, they make good use cases to show the machinery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Fundinger</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/making-multiple-inheritance-not-work-in-python.html</guid></item><item><title>Pandas for Fun and Profit</title><link>https://pyvideo.org/pylondinium-2019/pandas-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During this talk, I tell the story of how, as a new Python developer, I quickly learned enough Pandas to be able test some hypotheses about financial markets. I will demonstrate how I formulated the hypothesis, developed a test plan, gathered data, and tested the hypothesis. Along the way, attendees will see common Pandas techniques for cleaning, converting and reshaping the data, generating new derived data, finding patterns / correlations, and visualizing data. After attending this talk, you may choose to use Pandas to test your own hypotheses for fun (and maybe profit).&lt;/p&gt;
&lt;p&gt;The audience for this talk is any level Python developer with little to no experience with Pandas. Through this talk, attendees will learn what Pandas can do, and how it simplifies data analysis. Attendees will also learn how to apply a number of basic Pandas techniques for cleaning data, slicing data, setting and using indices, calculating new columns, merging data sets, generating statistics, and visualizing results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Goldfarb</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/pandas-for-fun-and-profit.html</guid></item><item><title>Python 2020</title><link>https://pyvideo.org/pylondinium-2019/python-2020.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You should contribute to Python. By inventing a new kind of Python!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/python-2020.html</guid><category>keynote</category></item><item><title>Strongly typed python</title><link>https://pyvideo.org/pylondinium-2019/strongly-typed-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Creating a core banking platform with python as one of the main backend languages is as much fun and rewarding task as challenging one. I would like to talk about very interesting topic - which I called Strongly typed python. I will be partially basing the story on my experience working in fintech startup as well as my personal projects. This topic is important for anyone who is building more strict and solid python library or python based templating language.&lt;/p&gt;
&lt;p&gt;Content&lt;/p&gt;
&lt;p&gt;In the talk, I will go through tips and ideas on how one can use:&lt;/p&gt;
&lt;p&gt;meta-classes,
sub-classing,
decorators
and other python provided patterns
in their python libraries to make the lib-client API more strict and robust. I will share main benefits and lessons learned from hardening the user exposed python library, such as auto-generated documentation, validation, limitation and security.&lt;/p&gt;
&lt;p&gt;Target audience&lt;/p&gt;
&lt;p&gt;This topic is very important for anyone building customer-facing python library or python based templating language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gintare Urbone</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/strongly-typed-python.html</guid></item><item><title>TFW your country funds Open Source development</title><link>https://pyvideo.org/pylondinium-2019/tfw-your-country-funds-open-source-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During 2018 I’ve been a contractor for the Italian Digital Transformation Team working on docs.italia.it (Docs Italia), an Open Source platform to collect and share the Public Administration documentation. We didn't write Docs Italia from scratch though but built it on top of Read The Docs, the leading documentation platform for Python packages. We saved a lot of work by leveraging another open source project. Cool! Still Open Source software does not write itself and we managed to contribute back some value to the upstream project. In this talk I'll share what we did and what we learned.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Riccardo Magliocchetti</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/tfw-your-country-funds-open-source-development.html</guid></item><item><title>Typesetting with Python</title><link>https://pyvideo.org/pylondinium-2019/typesetting-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brandon Rhodes - Typesetting with Python&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/typesetting-with-python.html</guid><category>keynote</category></item><item><title>A starter data science process for software engineers</title><link>https://pyvideo.org/pylondinium-2019/a-starter-data-science-process-for-software-engineers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is aimed at software engineers who'd like to start a data science journey but don't know where to start. We'll use an efficient strategy to find and visualize relationships which will let you quickly derisk your own ideas and then justify more ambitious research projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Ozsvald</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/a-starter-data-science-process-for-software-engineers.html</guid></item><item><title>An introduction to ASGI, Asynchronous Server Gateway Interface</title><link>https://pyvideo.org/pylondinium-2019/an-introduction-to-asgi-asynchronous-server-gateway-interface.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you develop web appliations in Python you will almost certainly be
doing so using WSGI, with the most popular frameworks, Django and Flask,
as well as the majority of others being based upon it. WSGI specifies
the interface between servers and applications, simplified this
interface is,&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;with the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; called on each request. The request description
and environment is specified in the &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; dict and the
&lt;tt class="docutils literal"&gt;start_response&lt;/tt&gt; is called to send the response status code and
headers before the body, which is returned by the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;ASGI also aims to specify the interface between servers and
applications, only using the async/await syntax, the interface can be
simplified to&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http.response.start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]})&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http.response.body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;with the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; awaited on each request and &lt;tt class="docutils literal"&gt;scope&lt;/tt&gt;
fulfilling a similar role to &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In this talk I'll explain the above and how it limits WSGI and why ASGI
is the solution. I'll also introduce the current ASGI ecosystem and
features.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to WSGI (basic code)&lt;/li&gt;
&lt;li&gt;WSGI ecosystem servers (Gunicorn, uWSGI, mod_wsgi) and frameworks (Flask, Django)&lt;/li&gt;
&lt;li&gt;WSGI limitations e.g. Websockets&lt;/li&gt;
&lt;li&gt;ASGI Introduction (basic code)&lt;/li&gt;
&lt;li&gt;ASGI development and history&lt;/li&gt;
&lt;li&gt;ASGI features, websockets, HTTP/2&lt;/li&gt;
&lt;li&gt;ASGI ecosystem servers (Hypercorn, Daphne, Uvicorn) and frameworks (Starlette, Django, Quart).&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Jones</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/an-introduction-to-asgi-asynchronous-server-gateway-interface.html</guid></item><item><title>An Introduction to Hardware Drivers in MicroPython</title><link>https://pyvideo.org/pylondinium-2019/an-introduction-to-hardware-drivers-in-micropython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython is a lean an efficient implementation of the Python 3 programming language for microcontrollers and constrained environments. Thanks to MicroPython we can use Python to control embedded devices, allowing us to prototype faster, release to market sooner, provide more engaging computing education, or simply have more fun!&lt;/p&gt;
&lt;p&gt;It’s never been easier to adventure in the embedded space, and using a familiar language is a great advantage. It’s incredible that we can simply “upip install” a module to control our brand new sensor, display, controller, etc; but how does it work? Or what do we do if there isn’t an existing library available? This talk will focus on the general concepts needed to understand how these hardware devices operate and how to interface with them. It will provide simple examples showing how easy it is to do in Python, and illustrate how the same concepts are used to drive complex systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos Pereira Atencio</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/an-introduction-to-hardware-drivers-in-micropython.html</guid></item><item><title>Data science with Python</title><link>https://pyvideo.org/pylondinium-2019/data-science-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is a scenario that is quite common when doing data science at scale.
The Data Science team have developed a good algorithm that suits our purpose and the prototype works well on a test dataset. But how to transform it into a reliable, responsive service ready for production payload? We will got through the steps involved in the evolution of a Jupyter notebook into an auto-scaling service. These steps involve changes in data ingestion, asynchronous processing, dockerisation, kubernetes and cloud technologies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giuseppe Broccolo</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/data-science-with-python.html</guid></item><item><title>Dunder methods are special</title><link>https://pyvideo.org/pylondinium-2019/dunder-methods-are-special.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Special methods are those methods on a type which are called implicitly by Python to execute a certain operation (e.g., addition). These methods have distinctive names which start and end with double underscores (aka dunder).&lt;/p&gt;
&lt;p&gt;Dunder methods are a language feature which allows developers to implement custom types which have the same features and expressiveness as the Python standard types.&lt;/p&gt;
&lt;p&gt;It is impossible to discuss all of the various dunder methods in a single 25-minute talk, so we will focus on a selected subset of dunder methods. We will discuss how and why you would implement them and in which situations Python will implicitly call them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Irwin</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/dunder-methods-are-special.html</guid></item><item><title>Gentle introduction to TLS, PKI, and Python's ssl module</title><link>https://pyvideo.org/pylondinium-2019/gentle-introduction-to-tls-pki-and-pythons-ssl-module.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TLS is an ubiquitous protocol for secure communication. It's used in HTTPS, email (IMAP, POP3, SMTP), LDAP, FTP, and more. Some recent protocols like HTTP/2 are not defined for unencrypted channels. TLS offers more than just encryption with symmetric cryptography. It also ensures data integrity and strong authentication with the help of X.509 certificates and public key infrastructure (PKI).&lt;/p&gt;
&lt;p&gt;Did you ever wonder what's the difference between SSL, TLS, and StartTLS? Or what is the meaning of cryptic terms and names like Server Name Indication, Subject Alternative Name, or TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384? What is perfect forward secrecy and why is it so important for privacy? Does HTTPS make my website slow? What is the difference between a root CA, intermediate CA and end-entity certificate? My talk explains how a client and a server establish a secure connection, why a certificate is required, and how TLS 1.3 has improved the handshake.&lt;/p&gt;
&lt;p&gt;Some prior knowledge of cryptography and networking basics are helpful but not required to follow this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Heimes</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/gentle-introduction-to-tls-pki-and-pythons-ssl-module.html</guid></item><item><title>Is it a bird? Is it a plane? Accelerating Python with Numba</title><link>https://pyvideo.org/pylondinium-2019/is-it-a-bird-is-it-a-plane-accelerating-python-with-numba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We are lucky there are very diverse solutions to make Python faster that have been in use for a while: from wrapping compiled languages (NumPy), to altering the Python syntax to make it more suitable to compilers (Cython), to using a subset of it which can in turn be accelerated (numba), and many many more. However, each of these options has a tradeoff, and there is no silver bullet.&lt;/p&gt;
&lt;p&gt;Some years ago I chose numba for poliastro, my personal project, because of its simplicity, effectiveness, and not having to learn a hybrid dialect of Python. numba compiles numerical Python code on the fly using the LLVM machinery, producing extremely performant code... when it works!&lt;/p&gt;
&lt;p&gt;On the other hand, even though it is quite mature as a library and most of the Python syntax and NumPy functions are supported, there are still some limitations that affect its usage. In particular, I strive to offer a high-level API with support for physical units (extensions of NumPy) and reusable functions which can be passed as arguments, which sometimes require using complex objects or introspective Python behavior which is not available.&lt;/p&gt;
&lt;p&gt;In this talk we will introduce numba, describe its basic usage, and then discuss the strategies and workarounds we have developed to overcome its limitations, as well as some advanced numba features we can leverage. We will focus mostly on CPUs, and mention very briefly its GPU capabilities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juan Luis Cano</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/is-it-a-bird-is-it-a-plane-accelerating-python-with-numba.html</guid></item><item><title>Jupyter Notebooks</title><link>https://pyvideo.org/pylondinium-2019/jupyter-notebooks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sylvain Corlay - Jupyter Notebooks - keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sylvain Corlay</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/jupyter-notebooks.html</guid><category>keynote</category></item><item><title>Nothingness and identity in Python</title><link>https://pyvideo.org/pylondinium-2019/nothingness-and-identity-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Python programmers, we're blessed - we have several kinds of nothingness and identity at our fingertips. There's something rich, beautiful and mysterious in them, and in their variety and relation. For the programmer, the discovery of them is an opening into Python's power and expressiveness.&lt;/p&gt;
&lt;p&gt;It's the same richness and mystery that logicians and philosophers have discovered in them: entire schools of thought are founded on various approaches to nothingness. Programmers are in fact working with key ideas that are also crucially important to ontology, epistemology and metaphysics.&lt;/p&gt;
&lt;p&gt;From the pioneers of boolean electronics who adopted the NAND gate as the basic building block of logical circuits to thinkers like Sartre and Kant, nothing repeatedly turns out to be at the heart of everything. And the Python programmer who gets a surprise when checking for the identity of a variable is in fact running into the same problems that Heraclitus was aware of, 25 centuries before Guido van Rossum was even born. We're in good company, in other words.&lt;/p&gt;
&lt;p&gt;Nothingness and identity and the way we use them in Python and Django are related to phenomenology, utopia, politics, theories of agency and much, much more.&lt;/p&gt;
&lt;p&gt;Knowing about these connections might not make anyone a better programmer, but it can add another dimension to their understanding of the discipline, and add to the richness and beauty of their world, making the joy of programming even deeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/nothingness-and-identity-in-python.html</guid></item><item><title>Solving Python cold start issues in cloud infrastructure</title><link>https://pyvideo.org/pylondinium-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all do cloud applications, no matter if they were built with the cloud (an app that consumes cloud services) or for cloud (an app that was designed to run within cloud/container). The only thing that we, as Python community, haven’t talked out loud is imports performance that is so critical for business especially when you run your own business and cloud provider charges your own credit card. Until Python 3.7 it was quite challenging to profile application code dependencies and imports specifically. With a new imports profiler, Python developers can measure how much time each import takes at the startup. The interesting thing, a new profiler opened the whole new Python problem - cold start issue. In this talk, we will go through one very challenging case: Python in serverless and why most of the Python libraries were never been designed to start fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Denys Makogon</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/solving-python-cold-start-issues-in-cloud-infrastructure.html</guid></item><item><title>The Python object model</title><link>https://pyvideo.org/pylondinium-2019/the-python-object-model.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michael Foord - The Python object model&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-15:pylondinium-2019/the-python-object-model.html</guid></item></channel></rss>