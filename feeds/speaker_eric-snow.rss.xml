<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Eric Snow</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 21 Apr 2023 00:00:00 +0000</lastBuildDate><item><title>Getting the Most Out of Python Imports</title><link>https://pyvideo.org/pycon-us-2012/getting-the-most-out-of-python-imports.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;To really take advantage of Python you must understand how imports work
and how to use them effectively. In this talk we'll discuss both of
these. After a short introduction to imports, we'll dive right in and
look at how customizing import behavior can make all your wildest dreams
come true.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:/pycon-us-2012/getting-the-most-out-of-python-imports.html</guid><category>PyCon US 2012</category></item><item><title>Interfaces and Python</title><link>https://pyvideo.org/pycon-us-2012/interfaces-and-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In 2.6, Python introduced the Abstract Base Classes. Before that we had
&amp;quot;protocols&amp;quot; (and we still do). In this talk we'll look at how the
general concept of interfaces fits into today's Python. We'll also look
at some of the alternate proposals of the past, some of the
controversies around ABCs, and the direction interfaces might go in the
future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:/pycon-us-2012/interfaces-and-python.html</guid><category>PyCon US 2012</category></item><item><title>Namespaces in Python</title><link>https://pyvideo.org/pycon-us-2013/namespaces-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In the infamous words of Tim Peters, &amp;quot;Namespaces are one honking great
idea -- let's do more of those!&amp;quot; (PEP 20) Python's type system is built
on the basis of well-bounded namespaces. Come look behind the curtain
and you'll see Python in a whole new light. We'll also talk about how to
put this knowledge to use whenever you write modules, classes, and
functions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Sun, 17 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-17:/pycon-us-2013/namespaces-in-python.html</guid><category>PyCon US 2013</category><category>talk</category></item><item><title>to GIL or not to GIL: the Future of Multi-Core (C)Python</title><link>https://pyvideo.org/pycon-us-2019/to-gil-or-not-to-gil-the-future-of-multi-core-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why come to yet another talk about CPython's GIL? [1] Sure, we'll spend
a little time on what it is, who it affects (and doesn't), and how to
work around it. However, what you want to come hear is what the future
holds for the GIL.&lt;/p&gt;
&lt;p&gt;We'll take most of the time talking about life &lt;em&gt;after&lt;/em&gt; the GIL! Come see
what recent developments and ongoing work will allow us to either
circumvent the GIL and get rid of it, unlocking true multi-core
capability in Python code.&lt;/p&gt;
&lt;p&gt;[1] In case you don't know, the GIL is a global lock that prevents
multi-core parallelism in pure Python code. It has a controversial place
in the community. Look it up (or come to this talk)!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Fri, 03 May 2019 14:35:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:/pycon-us-2019/to-gil-or-not-to-gil-the-future-of-multi-core-cpython.html</guid><category>PyCon US 2019</category><category>talk</category></item><item><title>A Per-Interpreter GIL: Concurrency and Parallelism with Subinterpreters</title><link>https://pyvideo.org/pycon-us-2023/a-per-interpreter-gil-concurrency-and-parallelism-with-subinterpreters.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We live in a world of &lt;em&gt;concurrent&lt;/em&gt; code and &lt;em&gt;multi-core&lt;/em&gt; computing, so
come learn about a &lt;em&gt;new&lt;/em&gt; solution for both in Python 3.12. We'll quickly
explain the new feature (and an old one), and then show you how to take
advantage of it, for &lt;em&gt;simpler&lt;/em&gt; concurrency and &lt;em&gt;faster&lt;/em&gt; code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Snow</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/a-per-interpreter-gil-concurrency-and-parallelism-with-subinterpreters.html</guid><category>PyCon US 2023</category></item></channel></rss>