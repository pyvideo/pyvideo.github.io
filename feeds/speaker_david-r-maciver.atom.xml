<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-r-maciver.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-13T00:00:00+00:00</updated><entry><title>You are in a maze of twisty little passages</title><link href="https://pyvideo.org/pycon-uk-2019/you-are-in-a-maze-of-twisty-little-passages.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2019-09-13:pycon-uk-2019/you-are-in-a-maze-of-twisty-little-passages.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You are a robot tasked with mapping a maze, but a lot of these rooms look weirdly similar. What do you do? A light hearted introduction to some neat algorithms.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Shaping the World</title><link href="https://pyvideo.org/pycon-uk-2017/keynote-shaping-the-world.html" rel="alternate"></link><published>2017-10-27T09:30:00+01:00</published><updated>2017-10-27T09:30:00+01:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2017-10-27:pycon-uk-2017/keynote-shaping-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How is a software project like the USSR?&lt;/p&gt;
&lt;p&gt;Unfortunately, this is not a joke and the answer isn't funny. Software follows in a grand tradition of totalitarian regimes by creating a simplifying vision of how the world works, then forcing the world to fit that vision.&lt;/p&gt;
&lt;p&gt;The vision is different, as is the power we use to enforce it, but the failure modes share a lot in common.&lt;/p&gt;
&lt;p&gt;This is a talk about power. We all have it, and we cannot abdicate it, so instead we must use it carefully and responsibly.&lt;/p&gt;
&lt;p&gt;I will try to set you on the path to doing so, by giving you the introduction to cultural anthropology and anarchist theory that I wish someone had given me before I ever started developing software.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Finding more bugs with less work</title><link href="https://pyvideo.org/pycon-uk-2015/finding-more-bugs-with-less-work.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/finding-more-bugs-with-less-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mainstream software testing is terrible, because the tools to make it
good are missing.
&lt;a class="reference external" href="http://hypothesis.readthedocs.org/en/latest/"&gt;Hypothesis&lt;/a&gt; is a
testing library that aims to fix this.&lt;/p&gt;
&lt;p&gt;Where classically unit testing requires you to think of all the edge
cases yourself, Hypothesis actively seeks them out for you. Instead of
laboriously setting up examples where your code should work, you tell it
how your code should always work and it finds the examples that prove
you wrong.&lt;/p&gt;
&lt;p&gt;This is a talk from the author of Hypothesis on the how, why and where
of using it.&lt;/p&gt;
&lt;p&gt;This talk presupposes you have at least a little bit of experience with
testing in Python, but familiarity with advanced topics is not required.&lt;/p&gt;
</summary></entry><entry><title>Easy solutions to hard problems</title><link href="https://pyvideo.org/pycon-uk-2016/easy-solutions-to-hard-problems.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/easy-solutions-to-hard-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;David R. MacIver&lt;/p&gt;
&lt;p&gt;A lot of interesting problems are computationally hard: Travelling salesmen, colouring graphs, packing knapsack. These are all what's called &amp;quot;NP-hard&amp;quot;, which most people usually hear as meaning &amp;quot;intractable&amp;quot;.&lt;/p&gt;
&lt;p&gt;But actually we have good tools for solving specific NP hard problems, and most NP hard problems can be reduced to them. When you do this it turns out that although there are pathological cases, most individual instances of NP hard problems you're likely to encounter are quite tractable in practice.&lt;/p&gt;
&lt;p&gt;Amongst these tools are Mixed Integer Linear Programming solvers. There are high quality open source implementations (and amazing proprietary ones), and they're actually much easier to use than you might expect.&lt;/p&gt;
&lt;p&gt;We'll start with a quick overview of the idea of NP-hardness and introduce some common NP-hard problems. We'll then see how to transform these problems into forms we can feed to a solver. We'll finish with some practical examples of how this sort of thing can be useful in day to day problems.&lt;/p&gt;
</summary></entry></feed>