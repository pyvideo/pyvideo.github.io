<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-au-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-29T00:00:00+00:00</updated><entry><title>Are they ready? A quick review of graph databases and Python</title><link href="https://pyvideo.org/pycon-au-2015/are-they-ready-a-quick-review-of-graph-databases.html" rel="alternate"></link><published>2015-08-29T00:00:00+00:00</published><updated>2015-08-29T00:00:00+00:00</updated><author><name>Nic Crouch</name></author><id>tag:pyvideo.org,2015-08-29:pycon-au-2015/are-they-ready-a-quick-review-of-graph-databases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graph databases store, retrieve and process data that takes the form of
a graph: a network of nodes and the relationships between them. As one
of the fastest growing database models over the past two years, they
promise a number of fantastic outcomes including increased performance,
faster development, and cleaner code. Vendors also boast of large
corporate deployments throughout the US and Europe.&lt;/p&gt;
&lt;p&gt;So, are graph databases as good as they sound? How can we use them with
Python?&lt;/p&gt;
&lt;p&gt;This talk will review a couple of the most popular graph databases
including Neo4J, Titan and OrientDB. The focus will be on interacting
with each database as Pythonically as possible – using Python APIs as
much as possible. Along the way it will give an idea of ease of use,
speed, documentation quality and stability, as well as any other
challenges or tricks that found along the way. It isn’t a tutorial –
there’s not enough time, and those exist elsewhere – but instead more of
an introduction to what is out there and what you can do with it.&lt;/p&gt;
&lt;p&gt;At the end of the talk, you will have an idea of what it takes to get
started with Graph Databases in Python, and also an idea of which
toolset you want to use. You’ll also have an idea of the sorts of
problems which map well to graph databases, and which ones may be better
suited to other storage and processing methods.&lt;/p&gt;
&lt;p&gt;You won’t need to have a background in graphs or even a lot of Python
experience to get through this talk. However, it’s always good to have a
potential application in mind.&lt;/p&gt;
</summary></entry><entry><title>Cooking with Cryptography</title><link href="https://pyvideo.org/pycon-au-2015/cooking-with-cryptography.html" rel="alternate"></link><published>2015-08-17T00:00:00+00:00</published><updated>2015-08-17T00:00:00+00:00</updated><author><name>Fraser Tweedale</name></author><id>tag:pyvideo.org,2015-08-17:pycon-au-2015/cooking-with-cryptography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &lt;tt class="docutils literal"&gt;cryptography&lt;/tt&gt; library emerged in 2014 with the goal of becoming
Python's &amp;quot;cryptographic standard library&amp;quot;. It is designed to be easy to
use but flexible, exposing a &lt;em&gt;recipes&lt;/em&gt; layer for common use cases, and a
&lt;em&gt;hazmat&lt;/em&gt; layer that provides crypto primitives but demands users know
what they're doing in order to use them properly.&lt;/p&gt;
&lt;p&gt;This talk will explain the motivations and goals of the &lt;tt class="docutils literal"&gt;cryptography&lt;/tt&gt;
library, take a tour of its features and discuss its implementation.
&lt;tt class="docutils literal"&gt;cryptography&lt;/tt&gt; will be compared to some other popular and emerging
crypto libraries. Finally, we will examine some real-world use of the
library.&lt;/p&gt;
&lt;p&gt;Audience members should have a passing familiarity with cryptography
(e.g. know the differences between hashing and encryption, or public key
and private key crypto) to get the most out of this talk.&lt;/p&gt;
</summary></entry><entry><title>Education Miniconf Closing Keynote</title><link href="https://pyvideo.org/pycon-au-2015/education-miniconf-closing-keynote.html" rel="alternate"></link><published>2015-08-17T00:00:00+00:00</published><updated>2015-08-17T00:00:00+00:00</updated><author><name>Anne Philbin</name></author><id>tag:pyvideo.org,2015-08-17:pycon-au-2015/education-miniconf-closing-keynote.html</id><summary type="html"></summary></entry><entry><title>¡Mangle You A Python Interpreter for New Behaviour!</title><link href="https://pyvideo.org/pycon-au-2015/mangle-you-a-python-interpreter-for-new-behaviou.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Javier Candeira</name></author><id>tag:pyvideo.org,2015-08-16:pycon-au-2015/mangle-you-a-python-interpreter-for-new-behaviou.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What happens when you feel some syntax or behaviour is missing from
Python? You could fork the interpreter, but then nobody else could run
your programs. Instead, you could implement the new behaviour as a
Python module to be imported, and distribute it with your programs.&lt;/p&gt;
&lt;p&gt;Following hot on the tracks of previous Pycon-AU talks like &amp;quot;Don't Do
This&amp;quot; (2013) and the &amp;quot;ugly hacks&amp;quot; bit of &amp;quot;Here be dragons: some elegant
and ugly hacks in CPython&amp;quot; (2014), this presentation will grant some of
the requests you never dared to make:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You'd like for PEP 336, Make None Callable to have succeeded? You can
make your own None()! Easy in CPython with CTypes!&lt;/li&gt;
&lt;li&gt;You'd like to have the &amp;quot;?.&amp;quot; operator available for safe attribute
access? Just add the syntax to pypy, then use a source codec hack to
rewrite it into a legal Python 2.7 function. Too easy!&lt;/li&gt;
&lt;li&gt;Your reaction to all of this is “please make it stop”? The talk will
finish by discussing why having extensible syntax as a standard
Python feature might even be a good idea! It is in other languages!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is for intermediate to advanced Python users, and for
beginning Python implementors.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://hiperactivo.com/talks/pyconau15/mangling_python/"&gt;http://hiperactivo.com/talks/pyconau15/mangling_python/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;quiet_None: &lt;a class="reference external" href="https://bitbucket.org/candeira/quiet_none/"&gt;https://bitbucket.org/candeira/quiet_none/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;question_dot: &lt;a class="reference external" href="https://bitbucket.org/candeira/question_dot/"&gt;https://bitbucket.org/candeira/question_dot/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Privsep: A New Security Isolation Mechanism for OpenStack</title><link href="https://pyvideo.org/pycon-au-2015/privsep-a-new-security-isolation-mechanism-for-o.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Angus Lees</name></author><id>tag:pyvideo.org,2015-08-16:pycon-au-2015/privsep-a-new-security-isolation-mechanism-for-o.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack listens to requests over the network, and (when appropriate)
performs operations on the host that require root superpowers. Following
best-practice design, most of the code runs as an unprivileged user and
only the code that needs additional powers runs as root using a tool
called &amp;quot;rootwrap&amp;quot;.&lt;/p&gt;
&lt;p&gt;This talk discusses the evolution that led to the current rootwrap
design, why it has proven to be completely inadequate in practice, and
presents a new &amp;quot;privsep&amp;quot; alternative currently being worked on within
Oslo.&lt;/p&gt;
</summary></entry><entry><title>Wax On, Wax Off: The Tough Love Guide to Mentoring</title><link href="https://pyvideo.org/pycon-au-2015/wax-on-wax-off-the-tough-love-guide-to-mentorin.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Anita Kuno</name></author><id>tag:pyvideo.org,2015-08-16:pycon-au-2015/wax-on-wax-off-the-tough-love-guide-to-mentorin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone has more bugs than they can fix, more features they would like
than time to write them. Wouldn't it be great to have some help? The
problem is who knows enough about what you know to actually provide help
the way you need?&lt;/p&gt;
&lt;p&gt;Open Source has lots of fans and supporters, but many newcomers need the
warmth of a person caring about their existence to actually turn them
into a contributor.&lt;/p&gt;
&lt;p&gt;Someone sees you working, is enamoured of what you do and wants to
learn. You could break down the steps of what you are doing and get them
to follow those steps, that is teaching.&lt;/p&gt;
&lt;p&gt;You could recognize the deep inner understanding the is the foundation
of your behaviour. You could decide to help someone build such a
foundation for themselves. That is mentoring.&lt;/p&gt;
&lt;p&gt;Mentoring is helping someone to fail and learn from it. Mentoring is
about witnessing someone else's journey, whereever they go, whereever it
takes them and saying I'm here, I'm with you, I'm watching. Mentoring is
99% listening.&lt;/p&gt;
&lt;p&gt;Mentoring is much more time consuming than teaching. Teaching helps
someone learn a skill, mentoring helps someone learn themselves.&lt;/p&gt;
&lt;p&gt;Now don't get me wrong, teaching is great and we need teachers and to be
taught plus many great teachers can also be mentors. Teaching and
mentoring are different.&lt;/p&gt;
&lt;p&gt;This talk will discuss mentoring.&lt;/p&gt;
&lt;p&gt;With examples drawn from learning acupuncture, yoga, astrology, pottery,
working on film sets, heavy equipment operating as well as code, Anita
will endeavour to share what she has learned about mentoring. She hopes
you will take away the ability to recognize the difference between
teaching and mentoring. She also hopes that should you decide to mentor
you have some resources to help you strengthen your mentoring skills.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks &amp; Closing</title><link href="https://pyvideo.org/pycon-au-2015/lightning-talks-closing.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-08-08:pycon-au-2015/lightning-talks-closing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;00:00 Intro 00:25 Nic Couglan - Asyncio and native co-routines in python
3.5 05:35 Tyson Clugg - Selenium Page Adaptor 10:25 Tom Eastman -
Serialisation formats are not toys 16:00 Ben Davies - My Eyes, the
goggles do nothing 20:43 Paula Andrea Martinez - Software Carpentry
24:17 Alex Hill - Django Many to Many Minus the Middle Men 29:34 Adam
Breniki - Who remembers VisiCalc 33:34 Fraser Tweedale - Fast and Loose
Reasoning and Parametricity 38:47 Amber 'Hawkie' Brown - Pythonic Naming
42:20 Sam Bishop - Distraction 47:36 Tim Bell - Time Travel Debugger
52:29 Brian Thron - Roll your own crypto 57:18 Thuran Sunti - UQ
Robotics Club 1:02:35 Robert Collins - Data driven testing&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>A Scientific Game Engine in the Cloud</title><link href="https://pyvideo.org/pycon-au-2015/a-scientific-game-engine-in-the-cloud.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Oliver Nagy</name></author><id>tag:pyvideo.org,2015-08-07:pycon-au-2015/a-scientific-game-engine-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Azrael is a game engine for engineers. Unlike traditional engines it
emphasises accurate physics, runs in the Cloud, offers a language
agnostic API, and is written in (mostly) Python.&lt;/p&gt;
&lt;p&gt;Its main purpose is to make it easy for engineers to build, study, and
control complex physical systems, for instance how to auto pilot a space
ship; or a fleet thereof; in formation; through an Asteroid belt...&lt;/p&gt;
&lt;p&gt;I will show a live demo to illustrate the concept. It uses a simple
control algorithm to manoeuvre an object to a pre defined position in
space. Once there it will maintain that position despite random
collisions with other objects.&lt;/p&gt;
&lt;p&gt;For more information and demo videos please visit
&lt;a class="reference external" href="https://olitheolix.com/azrael"&gt;https://olitheolix.com/azrael&lt;/a&gt;. The code is available at
&lt;a class="reference external" href="https://github.com/olitheolix/azrael"&gt;https://github.com/olitheolix/azrael&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Make your logs work for you</title><link href="https://pyvideo.org/pycon-au-2015/make-your-logs-work-for-you.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2015-08-06:pycon-au-2015/make-your-logs-work-for-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any modern business generates a lot of logs - from customer transactions
all the way to the technical logs of your servers. Many times these logs
are thrown away or just sit uselessly somewhere on disk.&lt;/p&gt;
&lt;p&gt;I would like to show you how you can make sense of all that data, how to
collect and clean them, store them in a scalable fashion and, finally,
explore and search across various systems.&lt;/p&gt;
&lt;p&gt;Once we have all the data in one place I will go over some examples of
more advanced analysis (beyond simple, though very useful, counting of
things) like finding patterns and trends in your data.&lt;/p&gt;
&lt;p&gt;We will use Elasticsearch, Logstash and Kibana (aka the ELK stack) to
achieve that. All tools presented are open source and examples will be
using real life use cases.&lt;/p&gt;
</summary></entry><entry><title>Adventures in pip land</title><link href="https://pyvideo.org/pycon-au-2015/adventures-in-pip-land.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/adventures-in-pip-land.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip has become an immensely popular tool for installing packages in
Python, so much so that a bootstrap mechanism for it is now included in
the standard library. But it has a dark side. Come and learn about some
of the horrors that lurk within pip. Examples will include the
distribute -] setuptools fork and convergence, dealing packages which
attempt to use not-yet-installed dependencies, and the oh-man issue of
resolving dependencies which pip still entirely punts on.&lt;/p&gt;
</summary></entry><entry><title>Adventures in scikit-learn's Random Forest</title><link href="https://pyvideo.org/pycon-au-2015/adventures-in-scikit-learns-random-forest.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Gregory Saunders</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/adventures-in-scikit-learns-random-forest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scikit-learn's Random Forests are a great first choice for tackling a
machine-learning problem. They are easy to use with only a handful of
tuning parameters but nevertheless produce good results. Additionally, a
separate cross-validation step can be avoided using the out-of-bag
sample predictions generated during the construction of the forest, and
finally they make it relatively easy to identify and extract the most
important features of the sample data.&lt;/p&gt;
&lt;p&gt;In this talk we’ll go through the process of using scikit-learn’s random
forests using a financial data-set (of ASX equities) as an example.
We’ll begin with a basic overview of the random forest algorithm and of
the tuning parameters available and their impact on the effectiveness of
the forest. Secondly we’ll go over the basic usage of scikit-learn’s
random forests and in the process trouble-shoot some common problems
such as dealing with missing sample data. Next we’ll discuss the use of
out-of-bag sample predictions as a method for quickly performing
cross-validation and optimising the tuning parameters. Finally we’ll
look at how to extract information from the model that scikit-learn has
generated, most notably the relative importances of the features in the
sample data.&lt;/p&gt;
</summary></entry><entry><title>An End-to-End Machine Learning Ecosystem in a Quarter</title><link href="https://pyvideo.org/pycon-au-2015/an-end-to-end-machine-learning-ecosystem-in-a-qua.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Chris Hausler</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/an-end-to-end-machine-learning-ecosystem-in-a-qua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a machine learning model is hard. Building and serving
individual machine learning models for thousands of customers every
single day is harder. Model training time must be kept to a minimum,
memory constraints are exacerbated and the love and insight that one
would usually apply to refining a single model must be automated and
scaled. At Zendesk we successfully use pandas, scikit-learn, flask and
hadoop to run a machine learning ecosystem that builds, tunes and serves
account specific models via an API for many of our customers. This talk
is about what we learnt building it and how Python's data stack let us
get it to production really really fast.&lt;/p&gt;
</summary></entry><entry><title>Ansible, Simplicity, and the Zen of Python</title><link href="https://pyvideo.org/pycon-au-2015/ansible-simplicity-and-the-zen-of-python.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Todd Owen</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/ansible-simplicity-and-the-zen-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a configuration management tool, written in Python, that has
taken the world of IT automation by storm. Its most remarkable quality
is simplicity.&lt;/p&gt;
&lt;p&gt;The Zen of Python is a set of aphorisms which capture the design
philosophy of the Python language, one being &amp;quot;Simple is better than
complex&amp;quot;.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at some of the concrete ways that Ansible
embodies the Zen of Python, in an attempt to unravel the true meaning of
the sometimes cryptic aphorisms. Along the way we will consider why
simplicity is a such good thing, yet tantalisingly out of reach in most
software projects.&lt;/p&gt;
</summary></entry><entry><title>Applied Data Science</title><link href="https://pyvideo.org/pycon-au-2015/applied-data-science.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/applied-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever tried to get into data science or machine learning, but struggled
with getting your tech stack working, or found the maths off-putting?
Curious about the limits of what your laptop or desktop really are when
it comes to Big Data and predictive analytics? Ever wondered if these
tools were really accessible to a general developer?&lt;/p&gt;
&lt;p&gt;Note: Attendees should consider visiting the project URL for instruction
to get set up ahead of time. The will allow more time for coding,
although setup assistance will also be available on the day.&lt;/p&gt;
&lt;p&gt;This tutorial will provide attendees with a walkthrough on getting set
up for this work, and an overview of a good tech stack / software
ecosystem for beginning work. We'll cover some of the standard data sets
in machine learning, and how to apply interesting algorithms. Random
Forests and neural networks will be included, but with a minimum of fuss
and jargon. There will be a focus on the application of technology, with
only the most relevant theoretical aspects included. This is about
actually getting things done.&lt;/p&gt;
&lt;p&gt;This tutorial would be suitable for intermediate developers of any
background, or experienced developers who would like an introduction to
data science that gets to the point fast. Prerequisites: the ability to
install Python modules on your laptop, the ability to set up a new
virtual environment, and an interest in applying new techniques.&lt;/p&gt;
&lt;p&gt;The tutorial will include clear walkthroughs, as well as allowing
adequate time for discussion and individual learning. Please contact
Tennessee via email ahead of time if you would like to get a head start
on setting up your environment -- this may help you get more out of the
tutorial.&lt;/p&gt;
</summary></entry><entry><title>Arrested Development</title><link href="https://pyvideo.org/pycon-au-2015/arrested-development.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Scott Triglia</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/arrested-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The potential upside of microservices is significant and exciting. So
much so that Yelp's Transaction Platform committed from the start to an
architecture of small, cooperative microservices. This talk explores the
inevitable complications that arise in successful projects based on
microservices as they grow larger and stretch both their own
architecture and the developers responsible for them. Come hear tales of
terror (tight coupling! low test coverage!), stories which will warm
your heart (agility! strong interfaces!), and everything in between as
we follow the adventures of our plucky team.&lt;/p&gt;
&lt;p&gt;The talk will be focused on the functional, cultural, and reliability
challenges which occur as a microservices-based project evolves and
expands over time. Particular attention will be paid to where these
diverge from the utopian way microservices are often described, and to
the practical approaches your project can take to mitigate issues and
avoid the traps inherent in scaling up this type of approach. My goal is
to share with attendees some mistakes we've made, some successful
methods for growing gracefully, and above all with useful (and maybe
unexpected!) lessons from the trenches they can apply to their own work.&lt;/p&gt;
</summary></entry><entry><title>Blaze: crunching data in different formats through a single API</title><link href="https://pyvideo.org/pycon-au-2015/blaze-crunching-data-in-different-formats-throug.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Lex Hider</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/blaze-crunching-data-in-different-formats-throug.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blaze allows you to use a pandas/numpy like interface to query your
data, whether it be in CSV format, SQL database, noSQL database.&lt;/p&gt;
&lt;p&gt;Odo allows you to easily migrate your data between most formats, be it
JSON, SQL database, CSV, python data structures with just a few lines of
code.&lt;/p&gt;
&lt;p&gt;Come learn about these exciting new parts of the python data ecosystem.
Learn how to crunch your data, and not necessarily have to learn SQL or
mongodb to do so.&lt;/p&gt;
</summary></entry><entry><title>Breaking backwards compatibility: The easy way!</title><link href="https://pyvideo.org/pycon-au-2015/breaking-backwards-compatibility-the-easy-way-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Flavio Percoco</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/breaking-backwards-compatibility-the-easy-way-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Say you have this piece of software that many people use. One day, you
wake up and you have the urge to make them suffer. Well, there’s no
better way to do so than breaking the software they’re using.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll walk you through very good ways to do so by showing
examples taken from experience - because experience is the only thing
that matters (TM) - so that you’ll be able, by the time this talk ends,
to do the same to your users.&lt;/p&gt;
&lt;p&gt;(P.S: If you’ve a kinder hearth, you can also do the exact opposite of
what I’ll say and keep your users happy.)&lt;/p&gt;
</summary></entry><entry><title>Build a Better Hat Rack: All Contributions Welcome</title><link href="https://pyvideo.org/pycon-au-2015/build-a-better-hat-rack-all-contributions-welcom-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Katie McLaughlin</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/build-a-better-hat-rack-all-contributions-welcom-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We have many ways of reporting and recognising our code contributions in
open source projects, but often it is the work we do outside of code
commits themselves that get forgotten and unattributed. Hours of code
review, documentation, testing; organising of meetups and volunteering
at conferences; even just brainstorming and talking about things - how
much of these have you done without accreditation?&lt;/p&gt;
&lt;p&gt;During this session, we will discuss what it means to contribute to open
source projects, what constitutes a non-code contribution, steps we can
take to recognise the work of our peers, and how projects can better
encourage non-code participation through recognition and
acknowledgement.&lt;/p&gt;
&lt;div class="section" id="labhr-is-an-original-concept-by-leslie-hawthorn-http-hawthornlandings-org-2015-02-13-a-place-to-hang-your-hat"&gt;
&lt;h4&gt;LABHR is an original concept by Leslie Hawthorn, &lt;a class="reference external" href="http://hawthornlandings.org/2015/02/13/a-place-to-hang-your-hat/"&gt;http://hawthornlandings.org/2015/02/13/a-place-to-hang-your-hat/&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
</summary></entry><entry><title>Conda: a cross-platform, python-agnostic binary package manager.</title><link href="https://pyvideo.org/pycon-au-2015/conda-a-cross-platform-python-agnostic-binary-p.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Lex Hider</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/conda-a-cross-platform-python-agnostic-binary-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You may be aware of pip &amp;amp; virtualenv for installing and maintaining your
software libraries.&lt;/p&gt;
&lt;p&gt;You may not be aware of the fantastic conda project.&lt;/p&gt;
&lt;p&gt;It is not limited only to installing python software, also handles
installing python itself, and has environments that isolate your code
similar to virtualenv.&lt;/p&gt;
&lt;p&gt;Come find out this project which has been gaining enthusiastic support
in the Scientific Python community.&lt;/p&gt;
</summary></entry><entry><title>Core Team Panel, featuring: Chris Beaven, Markus Holterman, Russell Keith-Magee, Curtis Maloney</title><link href="https://pyvideo.org/pycon-au-2015/core-team-panel-featuring-chris-beaven-markus.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Chris Beaven</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/core-team-panel-featuring-chris-beaven-markus.html</id><summary type="html"></summary></entry><entry><title>Custom Python Applications in Neuroscience</title><link href="https://pyvideo.org/pycon-au-2015/custom-python-applications-in-neuroscience-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Gagan Sharma</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/custom-python-applications-in-neuroscience-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are several (open source and proprietary) packages available for
image processing in neuroscience. However, each package has its own
strengths and limitations depending on the purpose of the analysis.
After testing many of them at work, we have found a need to develop our
own packages (at the Brain Imaging Laboratory, MBC). We will expose a
couple of python tools that could be handy for anyone dealing with
neuroscience (or medical images in general) in their projects. The tools
presented are for (i.) quick image viewing, (ii.) dicom image sorting
and de-identifying and (iii.) automatic email notifications to alert
about server warnings (e.g., if machine is down, close to full capacity,
failing to connect to local image archiving network (PACS), etc..).
While many of these tools could have been written in other programming
languages, we will explain the reasons for choosing python, share a bit
about our python learning journey and perform a brief demonstration on
the command line.&lt;/p&gt;
</summary></entry><entry><title>Docker + Python</title><link href="https://pyvideo.org/pycon-au-2015/docker-python.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tim Butler</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/docker-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker is an open platform for developers and sysadmins to build, ship,
and run distributed applications. This allows for rapidly deployable
apps, which will run on any docker environment with the ability to
rapidly scale.&lt;/p&gt;
&lt;p&gt;As Docker is based on Linux containers, these are very lightweight and
allow resource isolation. With added tools to provide workflow
automation and image management, Docker can provide a complete toolset
to manage your application environment.&lt;/p&gt;
&lt;p&gt;Aimed at newcomers to the technology, this talk will cover the basics of
what Docker is, how it compares to other technologies and with why it's
useful for Python applications. There will be practical demos and
examples of real world Python deployments included.&lt;/p&gt;
</summary></entry><entry><title>Don't be afraid to search</title><link href="https://pyvideo.org/pycon-au-2015/dont-be-afraid-to-search.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/dont-be-afraid-to-search.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating a good search experience for your website is perceived as hard
when it doesn't have to be so.&lt;/p&gt;
&lt;p&gt;Starting with what is a search engine and how it works we will introduce
the tools and techniques to help you design a search functionality that
will make your users happy.&lt;/p&gt;
&lt;p&gt;From tips on how to structure your data and tune your settings and
queries to improve relevancy to features like faceted navigation and
search-as-you-type autocomplete.&lt;/p&gt;
&lt;p&gt;All examples will be shown using Elasticsearch and Django, though it
should be applicable to other technologies as well.&lt;/p&gt;
</summary></entry><entry><title>Easy wins with Cython: fast and multi-core</title><link href="https://pyvideo.org/pycon-au-2015/easy-wins-with-cython-fast-and-multi-core.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Caleb Hattingh</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/easy-wins-with-cython-fast-and-multi-core.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has often been criticised for slow runtime performance, and for
the GIL which prevents multi-core concurrency. Cython provides tools for
addressing both issues, and in a way that is simple enough for the
average programmer to use.&lt;/p&gt;
&lt;p&gt;This talk will show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to get started with Cython&lt;/li&gt;
&lt;li&gt;Tools to make day-to-day Cython work easier&lt;/li&gt;
&lt;li&gt;How to dramatically speed up a slow function&lt;/li&gt;
&lt;li&gt;How to distribute work over multiple CPU cores&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Fang: Pythonic dependency injection</title><link href="https://pyvideo.org/pycon-au-2015/fang-pythonic-dependency-injection.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Nathan Craike</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/fang-pythonic-dependency-injection.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dependency injection (DI) is a technique most often used in &amp;quot;big OO&amp;quot;
languages like Java and C#. It's usually dismissed by Python developers
as only needed because of these other languages' deficiencies: static
typing, restrictive object systems, lack of reflection, etc.&lt;/p&gt;
&lt;p&gt;However, there are other dynamically-typed languages which do use forms
of dependency injection. From looking at these systems, we can see there
are some advantages to dependency injection &lt;em&gt;even if&lt;/em&gt; you're not using a
traditional &amp;quot;big OO&amp;quot; language with static types and interfaces.
Dependency-injected code can be more modular, much easier to test,
easier to analyse, and easier to modify or extend to meet new
requirements.&lt;/p&gt;
&lt;p&gt;Despite this, there aren't many dependency-injection systems for Python.
The few that do exist aren't &amp;quot;Pythonic&amp;quot;, or implement DI in ways that
compromise a lot of its benefits.&lt;/p&gt;
&lt;p&gt;Fang is a library which adds dependency injection to Python in a way
which provides real benefits for code clarity, ease of testing, and
maintainability, while still fitting naturally into Python's idioms.
Fang describes dependencies concisely but explicitly, and doesn't
restrict the developer to a particular paradigm on how dependencies are
validated or met.&lt;/p&gt;
&lt;p&gt;This talk will give a brief overview of how DI is used across a few
languages (both traditional OO and dynamic languages) and highlight what
elements of DI can be beneficial in Python. The talk will then demo how
Fang can be used to add DI to Python code, and show some of the benefits
to code clarity, unit testing and code analysis.&lt;/p&gt;
</summary></entry><entry><title>Fast, beautiful and easy Bayesian modelling: Can you have it all?</title><link href="https://pyvideo.org/pycon-au-2015/fast-beautiful-and-easy-bayesian-modelling-can.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Rhydwyn McGuire</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/fast-beautiful-and-easy-bayesian-modelling-can.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bayesian models are often more useful than classical statistical models
when dealing with data concerning rare events in small populations. For
example, if you are looking at the number of cancer diagnoses in a local
government area, Bayesian models allow you to combine the individual and
population level data to produce more reliable estimates.&lt;/p&gt;
&lt;p&gt;Fitting these models can be both complex and computationally expensive,
so we need it to be fast. Some of the datasets we deal with are
extremely big, and the need for both tweaking and regular update cycles
means we need to re-run the models frequently.&lt;/p&gt;
&lt;p&gt;But beauty is also crucial. We need the package to be easy to code and
describe, so that the statisticians and scientists we work with can
build, maintain and understand their own models without needing to refer
to programmers. We don’t want a statistical black box.&lt;/p&gt;
&lt;p&gt;Finally, we need it to be easy. Easy to fit into our systems;
technology-agnostic so we can change systems; and automatable so that
the regular work of updating models with new data can happen ‘hands
off’.&lt;/p&gt;
&lt;p&gt;There are a number of Bayesian modelling packages available, but how do
you know which one to use? This talk will take you through the positives
and negatives of the major packages, focusing on the specifics of my
work in health statistics, as well as providing a general overview of
what these packages can do.&lt;/p&gt;
</summary></entry><entry><title>Fast-forward to today's Zaqar</title><link href="https://pyvideo.org/pycon-au-2015/fast-forward-to-todays-zaqar.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Flavio Percoco</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/fast-forward-to-todays-zaqar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zaqar is probably one of the projects that had been debated the most in
OpenStack. Nonetheless, this service capable of providing multi-tenant
messaging is now becoming a more relevant part of the OpenStack
infrastructure.&lt;/p&gt;
&lt;p&gt;One feature at a time, it's achieving its goals and improving itself.
From multi-tenantcy, to subscriptions and persistent transports. In this
talk, I'll present the project and its goals, the current state of art,
its capabilities and architecture, the tools available and the related
maintenance cost.&lt;/p&gt;
</summary></entry><entry><title>Four* non-cryptographic hash functions enter. One leaves.</title><link href="https://pyvideo.org/pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Adam Harvey</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you say “hash function” in a room full of Python developers, people
tend to think of the classics you get in hashlib: MD5, SHA-1, SHA-224,
SHA-256, SHA-384, SHA-512, SHA-OHGODPLEASESTOP, and the like —
cryptographic hash functions intended for cryptographic uses.&lt;/p&gt;
&lt;p&gt;There’s another world out there, though: non-cryptographic hashes.
Sometimes you just need to figure out if you’ve already seen a string or
structure. Sometimes you need a basic checksum. Sometimes you need a
hash that’s just fast and can fit into a 32 bit integer.&lt;/p&gt;
&lt;p&gt;I’ll run through the state of the art in the world of non-cryptographic
hashing — what your best options are, how they compare in terms of CPU
and memory usage, and how they work. Who takes it? Whose mixing function
reigns supreme?&lt;/p&gt;
&lt;p&gt;Let’s find out.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I’m saying “four”, but realistically I’m going to cover as many
modern options as I can fit into the time available. Let’s say “four
plus two or minus one” in reality.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Government dashboards and open data.</title><link href="https://pyvideo.org/pycon-au-2015/government-dashboards-and-open-data.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Paul Haesler</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/government-dashboards-and-open-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;More and more governments around Australia and the world are starting to
talk the talk on Open Data as an essential component of open government.
But to what extent do they walk the walk? CKAN based data repositories
like data.gov.au (at the Australian federal level) provide powerful APIs
for searching and discovering published data-sets, but at the end of all
that search and discovery, the data-sets themselves sometimes make it
clear that somebody somewhere has missed the point.&lt;/p&gt;
&lt;p&gt;In developing dashboard applications for state and federal government
agencies over the past 6 months, I have seen the good, the bad and the
ugly not only in terms of API design and data set presentation, but also
in terms of commitment to Open Data.&lt;/p&gt;
</summary></entry><entry><title>Guarding the gate with Zuul</title><link href="https://pyvideo.org/pycon-au-2015/guarding-the-gate-with-zuul.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Joshua Hesketh</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/guarding-the-gate-with-zuul.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zuul is a program that is used to gate the source code repositories of a
project so that changes are only merged if they pass tests.&lt;/p&gt;
&lt;p&gt;By gating we mean a more proactive continuous integration suite whereby
tests must pass in order to merge (rather than a traditional CI that
just gives a nightly status of the master branch). This means every
commit is tested both during review time and before it merges - in case
the repositories have changed in the mean time.&lt;/p&gt;
&lt;p&gt;The result of using a gating system like zuul is that it's much harder
to break trunk and your nightly builds should nearly always work.&lt;/p&gt;
&lt;p&gt;Zuul can be configured to react to events and run various jobs with
success or failure results depending on the scenario. Currently Zuul is
only integrated with the gerrit code review platform but there are
discussions about extending it to github.&lt;/p&gt;
&lt;p&gt;One unique and powerful feature in Zuul is its ability to run tests in a
predictive manner across multiple programs. Zuul predicts what multiple
repositories will look like by the time the present job is finished and
arranges the tests to be performed in that order. This stops race
conditions when merging code in one repository that depends on code in
another repository.&lt;/p&gt;
&lt;p&gt;Zuul can manage thousands of jobs across hundreds of projects as evident
by being the gate keeper for OpenStack.&lt;/p&gt;
&lt;p&gt;In this talk we will look at what Zuul is, how to configure it and the
internals of how it works.&lt;/p&gt;
</summary></entry><entry><title>How your Python program behaves: a story on how to build a program slicer</title><link href="https://pyvideo.org/pycon-au-2015/how-your-python-program-behaves-a-story-on-how-t.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Róman Joost</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/how-your-python-program-behaves-a-story-on-how-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Understanding the control flows in programs can be simple but
increasingly difficult once the program becomes more complex. Debugging
these programs can become problematic even worse with a meager amount of
test coverage. So what to do? Increasing test coverage can cost you
quite a lot of time and may not necessarily yield better results.&lt;/p&gt;
&lt;p&gt;Using slicing as a technique for debugging programs aids to understand
control flow better. A slice is a subset of the program which affects
the values of the point of interest, also known as a slicing criterion.
Using program slicing, reasoning about your code will become much
quicker and easier as you can safely ignore any not relevant parts of
the program.&lt;/p&gt;
&lt;p&gt;This talk is about building a slicing tool for Python and the journey to
this solution.&lt;/p&gt;
</summary></entry><entry><title>Integrating Django with Identity Management Systems</title><link href="https://pyvideo.org/pycon-au-2015/integrating-django-with-identity-management-syste.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Fraser Tweedale</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/integrating-django-with-identity-management-syste.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most Django developers are familiar with authentication and
authorisation on the open web, but the requirements and technologies
used inside companies and large organisations are different:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Identities and groups are probably stored in an external identity
management system's directory rather than in an application's
database tables.&lt;/li&gt;
&lt;li&gt;Authorisation decisions will be based on group membership and
policies that are defined outside the application.&lt;/li&gt;
&lt;li&gt;Users may be expected or required to use a &lt;em&gt;single sign-on&lt;/em&gt;
technology such as Kerberos or SAML to authenticate to applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will familiarise the audience with these technologies and
demonstrate how Django applications can be integrated with an identity
management system to meet business requirements while providing a
positive user experience. Particular technologies covered will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;FreeIPA: an open-source identity management solution, for defining
users, groups and authorisation policies&lt;/li&gt;
&lt;li&gt;mod_auth_gssapi / mod_auth_kerb: Apache modules for Kerberos
authentication&lt;/li&gt;
&lt;li&gt;mod_lookup_identity: Apache module to retrieve user information
from a directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will conclude with discussion about upcoming Kerberos features,
techniques for dealing with multiple authentication methods, and
progress in making identity management integration easier for Django
developers.&lt;/p&gt;
&lt;p&gt;People developing or deploying Django applications in business
environments or for large open source projects with centralised identity
management will get the most out of this talk.&lt;/p&gt;
</summary></entry><entry><title>Interactive visualization for the curious</title><link href="https://pyvideo.org/pycon-au-2015/interactive-visualization-for-the-curious.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Edward Schofield</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/interactive-visualization-for-the-curious.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The workhorse plotting tool in Python for most of this century has been
Matplotlib. It is stable, powerful, and comprehensive. But the plots it
produces are (mostly) lifeless.&lt;/p&gt;
&lt;p&gt;The web is now emerging as a superior visualization platform to
traditional GUI backends, thanks to SVG, HTML5 Canvas, and WebGL, the
speed and quality of modern browsers, and an explosion of high-quality
visualization libraries in JavaScript. But what is the Python developer
to do? Can we drive these browser-based capabilities from Python?&lt;/p&gt;
&lt;p&gt;Thankfully, several recent Python projects are making progress toward
this goal -- including MPLd3, Bokeh, and VisPy. These each have
different goals and make different design decisions, but all three offer
obvious advantages: being able to publish visualizations that users can
interact with to extract more meaning from data.&lt;/p&gt;
&lt;p&gt;This talk will give shiny demos and review these newer projects
thoroughly vis-a-vis other libraries to help you decide whether, or
when, to adopt one of them as your go-to visualization library. We will
answer these questions: How does the performance compare? Would you need
to rewrite all your plotting code? What would it take to integrate Bokeh
or VisPy well with the current ecosystem of Python plotting libraries
and data analysis tools? What is on the horizon for the different
projects? Where do the Jupyter project's interactive widgets fit into
this picture?&lt;/p&gt;
&lt;p&gt;Come to hear a critical review about the past, present, and future of
interactive visualization in Python.&lt;/p&gt;
</summary></entry><entry><title>Inviting Code</title><link href="https://pyvideo.org/pycon-au-2015/inviting-code.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Capel Brunker</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/inviting-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Projects tend to grow, expand and reshape as they progress, this can
lead to; high code maintenance, legacy code and feature addition
fatigue. Implementing a well-documented and malleable software
architecture is a major step in addressing these associated time sinks.
This talk will discuss viable software architecture approaches – while
demonstrating core python modules, concepts and design patterns from a
big data perspective.&lt;/p&gt;
&lt;p&gt;Many projects welcome code addition from third party developers, however
a well thought out software architecture should not be modified without;
review, testing, possible cascading code and documentation changes. To
remove the additional complexity of reviewing and handling third party
code, designing and offering secure plugin infrastructure can allow for
outside additions without the overhead.&lt;/p&gt;
&lt;p&gt;A big data visualisation python project utilised by Oxford and Cambridge
universities will be used in code demonstrations to show the direct use
of a project built with architecture design in mind, and a multi-level
dynamic plugin infrastructure. Attendees will be provided with a clear
understanding of how function documentation techniques (PEP-3107 &amp;amp;
PEP-0484) can be utilised for class clarity and how to (re)design a code
base to allow for integration of third party code, while providing a
concise framework for code inclusion.&lt;/p&gt;
&lt;p&gt;Areas covered in this talk include&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;• Python 3.4 focused • Project architecture design • Abstract classes • Plugin frameworks • Documentation frameworks • Type hinting &amp;amp; Function annotations • Class method decorators • Code validation • Image manipulation&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Is Python ready for the Enterprise?</title><link href="https://pyvideo.org/pycon-au-2015/is-python-ready-for-the-enterprise.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Ryan Stuart</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/is-python-ready-for-the-enterprise.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There seems to be an opinion among some developers that Python isn't
suitable for Enterprise. To put it another way, Python is great for
small tasks where a scripting language works well, but not so suitable
for more complicated software stacks. This talk tries to address some of
these concerns. Specifically, we will look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python Typing System for large code bases.&lt;/li&gt;
&lt;li&gt;Is the GIL a problem?&lt;/li&gt;
&lt;li&gt;The speed of Python execution.&lt;/li&gt;
&lt;li&gt;The speed of Python development.&lt;/li&gt;
&lt;li&gt;A case study: Caterpillar.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Journey to becoming a Developer: an Administrators story</title><link href="https://pyvideo.org/pycon-au-2015/journey-to-becoming-a-developer-an-administrator.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Victor Palma</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/journey-to-becoming-a-developer-an-administrator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a system operator we sometimes have to create scripts to maintain our
infrastructure. However because of DevOps some of us have taken a path
to move more towards a developer role. That journey can be a bit tough
specially if you don’t have the proper support in place. Fortunately for
me I had some help along the way and they gave me some direction that
has improved my development. Here is a list of small things to help you
on that journey: • Changing the way we think (mindset of a developer) •
Idiomatic python • Zen of Python by example • Testing&lt;/p&gt;
</summary></entry><entry><title>JSON Standards for the Web</title><link href="https://pyvideo.org/pycon-au-2015/json-standards-for-the-web.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Jamie Lennox</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/json-standards-for-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;RESTful APIs reign supreme! No longer do developers have to put up with
SOAP and XML-RPC and those bulky, schema laden exchanges. JSON maps
almost directly to python and we're flying again!&lt;/p&gt;
&lt;p&gt;Over time the chaos of free form JSON representations has subsided and a
number of best practices have appeared such that we now expect certain
patterns when encountering a new JSON REST API. The next step is to
standardize these practices and start offering the predictability and
code reuse we lost years ago.&lt;/p&gt;
&lt;p&gt;The talk will provide an overview of current attempts at standardizing
JSON exchanges such as jsonapi, jsonhome and jsonschema.&lt;/p&gt;
</summary></entry><entry><title>Just Use Postgres.</title><link href="https://pyvideo.org/pycon-au-2015/just-use-postgres.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Rhys Elsmore</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/just-use-postgres.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making use of the latest database for your data is considered trendy and
edgy, with vendors promising unrealistic expectations when it comes to
capabilities of these systems. Furthermore, communities such as Hacker
News enforce the idea that you must use the latest and coolest
technology in order to be a ‘rockstar’ engineer.&lt;/p&gt;
&lt;p&gt;Marketing buzzwords like ‘real-time’, ‘distributed’,
‘high-availability’, and ‘schemaless’ impact our design decisions, and
the expectation for applications to be ‘scalable’ often forces
developers to prematurely introduce complexity and anti-patterns into
their applications by making use of these untested and immature data
stores.&lt;/p&gt;
&lt;p&gt;Forget about adding the latest trendy data store into your stack; just
use Postgres.&lt;/p&gt;
&lt;p&gt;This talk will explore the capabilities of Postgres 9.4, and various
use-cases where you can involve it as your primary datastore. I will
cover some of the projects at Heroku where we have used Postgres, such
as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Quickly querying over 300M records to get a list of all users on a
particular server at a particular point in time.&lt;/li&gt;
&lt;li&gt;Providing almost real-time aggregations of all Heroku customer’s
usage.&lt;/li&gt;
&lt;li&gt;Joining 3 different tables on 3 different database servers without
any external code.&lt;/li&gt;
&lt;li&gt;Creating a ‘social graph’ of all of Heroku’s users based on commonly
used IP addresses.&lt;/li&gt;
&lt;li&gt;Ensuring that coupon codes are used only once, preventing attackers
from exploiting ‘race condition’ bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In particular, I will focus on topics such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Storing, indexing, and querying schemaless data.&lt;/li&gt;
&lt;li&gt;Materialized Views.&lt;/li&gt;
&lt;li&gt;NOTIFY/LISTEN.&lt;/li&gt;
&lt;li&gt;Storing and querying time-series data.&lt;/li&gt;
&lt;li&gt;Updatable views.&lt;/li&gt;
&lt;li&gt;Foreign tables.&lt;/li&gt;
&lt;li&gt;Recursive views.&lt;/li&gt;
&lt;li&gt;Stored functions.&lt;/li&gt;
&lt;li&gt;Range Types&lt;/li&gt;
&lt;li&gt;Partitioning and Sharding data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each topic will include links to sample schemas and iPython notebooks so
you can take these examples home with you.&lt;/p&gt;
</summary></entry><entry><title>Karaage Gardening</title><link href="https://pyvideo.org/pycon-au-2015/karaage-gardening.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Brian May</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/karaage-gardening.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Karaage is an open source Python/Django application for managing users
and projects on HPC clusters. It is being used in production in a number
of sites across Australia. This talk will discuss turning a messy legacy
software base into a modern software platform that is much a cleaner
mess (&amp;quot;gardening&amp;quot;). I will also talk about some of the lessons learnt
along the way, including things that went well, and things that could
have been handled better.&lt;/p&gt;
</summary></entry><entry><title>Learn You a Flask</title><link href="https://pyvideo.org/pycon-au-2015/learn-you-a-flask.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Lachlan Blackhall</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/learn-you-a-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a Python web framework that is both lightweight and powerful.
With an active community, and a diverse and versatile choice of plugins,
Flask allows you to scale from simple single-URL websites through to
highly complex website architectures.&lt;/p&gt;
&lt;p&gt;In this talk we will begin by setting up a simple Flask powered website
and get it running on the Heroku PaaS. We will then demonstrate how to
integrate Flask and SQLAlchemy (a powerful ORM) to allow database access
and get this uploaded and working on Heroku as well.&lt;/p&gt;
&lt;p&gt;Finally we will discuss some more advanced concepts and review a number
of the Flask plugins to get you started on the path to building great
web-based projects.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks</title><link href="https://pyvideo.org/pycon-au-2015/lightning-talks-19.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Marcus Holterman</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/lightning-talks-19.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;00:00 Introduction 01:10 Marcus Holterman - Django Logging Canary 02:54
Tim Ansell - Tim (still) has too many projects 08:24 Russell
Keith-Magee - I am a doctor 12:51 Steven Joeseph - Async IO TLDR
edition 20:20 Chris Beevan - Bit ID Authentication 25:21 Xuanyi Chew -
More stuff you probably didn't know about 27:18 Aimee Marie Forsstrom -
Cyber Terrorism or Terrible Code 31:42 Rhys Elsmore - What Postgres can
teach us about JavaScript 34:38 Roman Juce - zc.buildout for repeatible
builds 38:10 Quentin Lovett - Building Robots 41:06 Amber 'Hawkie' Brown
- Just use PyPy&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Lrparsing, when regular expressions aren't enough</title><link href="https://pyvideo.org/pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/lrparsing-when-regular-expressions-arent-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lrparsing is a fast, well documented and tested parsing infrastructure
for Python. Parsing infrastructures are used when the input to be parsed
is too complex to be done by regular expressions alone. Parsing
infrastructures are ideally suited to parsing programming languages and
configuration files. Lrparsing is roughly equivalent to the combination
of Flex and Bison, except completely implemented in Python, and is thus
very Pythonic.&lt;/p&gt;
&lt;p&gt;The rest of the abstract uses the following Python snippet as an
example:&lt;/p&gt;
&lt;p&gt;1 if option else 2&lt;/p&gt;
&lt;p&gt;lrparsing provides both a lexer (which breaks the input down into
tokens, e.g.:&lt;/p&gt;
&lt;p&gt;['1', 'if' , 'option', 'else', '2']&lt;/p&gt;
&lt;p&gt;and a parser generator, which produces a concrete parse tree:&lt;/p&gt;
&lt;p&gt;(«ternary», («bool», 'option'), («expr», '1')), («expr», '2')))&lt;/p&gt;
&lt;p&gt;Lrparsing provides Pythonic syntax support to easily construct parsers
for programming languages, Domain Specific Languages and configuration
file formats.&lt;/p&gt;
&lt;p&gt;Lrparsing is very well suited to constructing Concrete Parse Trees but
has little support for creating Abstract Syntax Trees (AST), which are
much easier to use: My work has added Abstract Syntax Tree support to
lrparsing, yielding exactly the same AST nodes that the Python AST
module supports:&lt;/p&gt;
&lt;p&gt;IfExp(condition, 1, 2)&lt;/p&gt;
&lt;p&gt;This talk will give an overview of the major features of Lrparsing, then
look at my work to add AST support.&lt;/p&gt;
</summary></entry><entry><title>Many-to-many, minus the middleman</title><link href="https://pyvideo.org/pycon-au-2015/many-to-many-minus-the-middleman.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Alex Hill</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/many-to-many-minus-the-middleman.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about an alternative Django ManyToManyField implementation
that uses (abuses?) PostgreSQL's full-text search engine instead of an
intermediary table to store its relationships. As well as showing off
some handy things you can do with this field, we'll talk along the way
about full-text search in Postgres, inverted indexes, and how Django's
ManyToManyField is implemented.&lt;/p&gt;
&lt;p&gt;Behind the scenes, ManyToManyField uses an intermediary table to record
its relationships –&amp;nbsp;a classic relational database technique you most
likely mastered in Databases 101. But to believe some present-day
commentators, classic relational databases with their fixed schemas and
their ACID habit belong back in the 70s where they came from.&lt;/p&gt;
&lt;p&gt;Enter Postgres, the hip, switched-on parent who works as a public
defender and gets on uncomfortably well with your friends. Postgres
builds on a wealth of relational history while embracing modern
non-relational ideas in a thoughtful, sane way.&lt;/p&gt;
&lt;p&gt;In this talk, we'll press full-text search, one of Postgres' repertoire
of many useful features, into a service it performs remarkably well
despite being designed for quite a different purpose. Code and
benchmarks provided!&lt;/p&gt;
</summary></entry><entry><title>MidoNet: networking made easy</title><link href="https://pyvideo.org/pycon-au-2015/midonet-networking-made-easy.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Pino de Candia</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/midonet-networking-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MidoNet is a Software Defined Networking solution that's currently
integrated with OpenStack, Eucalyptus and Docker. We open sourced in
November last year and we’re working hard to build a strong community
around it.&lt;/p&gt;
&lt;p&gt;This presentation will cover MidoNet's core concepts, what distinguishes
it from other SDN solutions, its core design and why you would choose it
for your project/business. Or not. I'll also discuss some of the cool
features that we're currently working on, especially around Multi-site
Federation.&lt;/p&gt;
&lt;p&gt;You’ll be introduced to concepts like Topology Aware Switches and JIT
Datapath flow computation as well as our distributed agent model. You’ll
learn why we strongly believe in having intelligent switches and how
this impacts the overlay topology definition as well as the Network
Function Virtualization implementation.&lt;/p&gt;
&lt;p&gt;Most importantly, we hope you'll head over to midonet.org and take it
for a spin.&lt;/p&gt;
</summary></entry><entry><title>Moby and the Beanstalk</title><link href="https://pyvideo.org/pycon-au-2015/moby-and-the-beanstalk.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/moby-and-the-beanstalk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The popularity of Docker these days is incredible and a lot of people
are already using it for their production systems. Although it makes a
lot of things much simpler, it's not a silver bullet and comes with some
caveats of it's own. This talk will describe the journey of my team at
Mobify from a self-hosted VM to a AWS-backed web app deployed using
Docker.&lt;/p&gt;
</summary></entry><entry><title>Monads, in my Python?</title><link href="https://pyvideo.org/pycon-au-2015/monads-in-my-python.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Xuanyi Chew</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/monads-in-my-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Monads shouldn't be difficult to understand. This talk aims to show what
monads are, and why you shouldn't be afraid of them. You most likely use
them already (yes, really).&lt;/p&gt;
&lt;p&gt;In this talk, I'll touch briefly on category theory (don't worry, it's
not scary), and a couple of practical implementation of monads. You
don't have to be a functional programmer or a Haskeller to use monads.&lt;/p&gt;
&lt;p&gt;Lastly I shall attempt to lay out a good rationale to use more monads
when programming in Python&lt;/p&gt;
</summary></entry><entry><title>Money, Money, Money - Writing software, in a rich (wo)man's world</title><link href="https://pyvideo.org/pycon-au-2015/money-money-money-writing-software-in-a-rich.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/money-money-money-writing-software-in-a-rich.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Free software advocates talk about two types of &amp;quot;Free&amp;quot;: Free as in
freedom, and Free as in beer. While Free (as in freedom) software is
unquestionably better for users and developers alike, Free (as in beer)
software doesn't pay the bills.&lt;/p&gt;
&lt;p&gt;Talk to any prominent open source developer, and amongst the success
stories, you'll also hear some consistent troubles - that they've got
great ideas and grand plans, but no time to execute; that they're about
to burn out due to the pressues of maintaining their project; or that
they've had yet another mailing list discussion with someone who doesn't
understand they're a volunteer. All of these problems stem from a
fundamental disconnect: the discrepancy between the clear demand for a
software product, and the ability to convert that demand into time
needed to service that demand - and that means money.&lt;/p&gt;
&lt;p&gt;So is there a way to pay the piper? Or is open source doomed to eek out
an existence at the edges of &amp;quot;a real job&amp;quot;?&lt;/p&gt;
</summary></entry><entry><title>Not Invented Here: Porting Scientific Software to Python</title><link href="https://pyvideo.org/pycon-au-2015/not-invented-here-porting-scientific-software-to.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Andrew Walker</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/not-invented-here-porting-scientific-software-to.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a scientist who's can't get work done because you the tools you
need aren't available? Do your collaborators use a different computing
platform to you? Are you struggling to find anyone who can help you
solve your software integration problems?&lt;/p&gt;
&lt;p&gt;These challenges occur because scientists face some of the most
difficult challenges in computing - dealing new and diverse problems;
working with prototypes and legacy systems; collaborating with domain
experts, rather than software experts; all while delivering on time with
minimal resources.&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a language that excels at &amp;quot;glueing&amp;quot;
different systems together in a style that is both easy to understand,
test and maintain. More importantly using Python is one way to make sure
that you spend your time working on research, rather than coding and
debugging.&lt;/p&gt;
&lt;p&gt;This presentation will demonstrate some of the skills needed to
integrate software from other languages into the Python Scientific
computing ecosystem using subprocesses, ctypes, cython the Jupyter
project - and what do do when none of these approaches are the right.&lt;/p&gt;
</summary></entry><entry><title>On Being Pythonic</title><link href="https://pyvideo.org/pycon-au-2015/on-being-pythonic.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Peter Lovett</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/on-being-pythonic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Design Patterns, standard designs and idioms in Python&lt;/p&gt;
&lt;p&gt;Pythonic (Noun): Uses Python idioms well, that it is natural or shows
fluency in the language.&lt;/p&gt;
&lt;p&gt;Even though you’re using Python syntax and keywords, your code still
smells like C, Java or Perl. Or just feels like it's not the best way.
This tour of Python is about changing the way you think, and to write
Python that makes the best use of the language. As a result, your Python
will be cleaner, simpler, nicer, and be more readable.&lt;/p&gt;
&lt;p&gt;Even though you know the syntax to make a class and inherit, you don't
know when you should. Composition? IsA, HasA, IsLikeA? What about
factories, singletons, iterators and adapters?&lt;/p&gt;
&lt;p&gt;Mashing together a long and painful background of C, C++, Perl and Java
coding, a mind-expanding trip down the Elements of Reusable
Object-Oriented Software rabbit hole, and over 30 years programming
experience, Peter brings some clarity, reason and ideas on Pythonic
idioms and OO design as implemented in Python.&lt;/p&gt;
</summary></entry><entry><title>OpenStack: A vision for the future</title><link href="https://pyvideo.org/pycon-au-2015/openstack-a-vision-for-the-future.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Monty Taylor</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/openstack-a-vision-for-the-future.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack as a phenomenon has been explosive and rather unprecedented.
The highly decentralized decision making coupled with an aggressive
release cadence have allowed us to be both an inclusive body and also
ship software. However, crisp vision is not necessarily an emergent
property of collective thought process. It's time for some vision to be
presented and championed if we're going to take the next step in our
evolution.&lt;/p&gt;
&lt;p&gt;Let's talk about a vision of what OpenStack needs to be, how it needs to
be shaped, and what it will take to get us there.&lt;/p&gt;
</summary></entry><entry><title>OpenStack Lightning Talks</title><link href="https://pyvideo.org/pycon-au-2015/openstack-lightning-talks.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/openstack-lightning-talks.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>OpenStack Miniconf Opening</title><link href="https://pyvideo.org/pycon-au-2015/openstack-miniconf-opening.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Joshua Hesketh</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/openstack-miniconf-opening.html</id><summary type="html"></summary></entry><entry><title>OpenStack Works, so now what?</title><link href="https://pyvideo.org/pycon-au-2015/openstack-works-so-now-what.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Monty Taylor</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/openstack-works-so-now-what.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While we've made a great big hoopla over the last few years about
deploying OpenStack and what our development process is and other
fascinating topics, it turns out that a cloud is not particularly
interesting in and of itself. A cloud is a thing that you use to, well,
DO something.&lt;/p&gt;
&lt;p&gt;The OpenStack Infra team DO something with OpenStack clouds every day.
It turns out it is related to both developing and deploying OpenStack,
but let's forget about that for now. What we really are is a giant
machine for manipulating OpenStacks, and we've gotten rather good at it.
As a result of that ... we've been good little hackers and have produced
a library, called shade, which is the embodiment of the knowledge we've
gathered in trying to do useful things. shade is at the heart of our
nodepool project, as well as the basis of the latest set of Ansible
modules for OpenStack.&lt;/p&gt;
&lt;p&gt;So - Let's talk about shade. And let's talk about Ansible. And let's
talk about using clouds to actually perform work.&lt;/p&gt;
</summary></entry><entry><title>Playing to lose: making sensible security decisions by assuming the worst</title><link href="https://pyvideo.org/pycon-au-2015/playing-to-lose-making-sensible-security-decisio-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tom Eastman</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/playing-to-lose-making-sensible-security-decisio-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The unfortunate truth about networked applications is that an attacker
only needs to know one thing you didn't know to get past your defenses.
You need to know everything, they don't.&lt;/p&gt;
&lt;p&gt;The odds aren't in your favour. You're eventually going to get hacked.&lt;/p&gt;
&lt;p&gt;That's the bad news. But if you stop thinking about a security
compromise as that thing you close your eyes and hope never happens&amp;quot;,
and instead start thinking about it as an inevitability, then you can
start making better security decisions.&lt;/p&gt;
&lt;p&gt;&amp;quot;If they compromise my web servers, how do I protect my application
servers?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they break my application server code, how can I prevent them from
gaining a foothold on my infrastructure?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they poison my web-site with cross-site scripting, how do I find out
before my users get hurt?&amp;quot;&lt;/p&gt;
&lt;p&gt;In short: &amp;quot;If I’m going to get hacked, how do I make it hurt less?&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a talk about defense in depth.&lt;/p&gt;
&lt;p&gt;Building a secure system isn’t about luck, it’s about planning.&lt;/p&gt;
</summary></entry><entry><title>PostgreSQL in Django 1.8</title><link href="https://pyvideo.org/pycon-au-2015/postgresql-in-django-18.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Christophe Pettus</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/postgresql-in-django-18.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django 1.8 adds a whole bunch of cool new features that are specifically
designed for PostgreSQL. We'll take a quick tour through them, and show
when and how you can use them in real-world applications. We'll also
talk about how to get the best performance out of PostgreSQL when using
the Django ORM.&lt;/p&gt;
</summary></entry><entry><title>Practical Federated Identity</title><link href="https://pyvideo.org/pycon-au-2015/practical-federated-identity.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Jamie Lennox</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/practical-federated-identity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Federated Identity was once again a highlight of the OpenStack summit in
Vancouver this time with the announcement of keystone to keystone
federation that will pave the way for inter-cloud workloads.&lt;/p&gt;
&lt;p&gt;In the past I have done presentations on what Federated Identity is,
however in this talk we delve into the more practical requirements of
connecting to an IdP, discuss the changes in workflow required to
authenticate your applications, how to configure web single sign on with
horizon, what is possible today and the pain points you may encounter
using federation.&lt;/p&gt;
</summary></entry><entry><title>Predicting sports winners using data analytics with pandas and scikit-learn</title><link href="https://pyvideo.org/pycon-au-2015/predicting-sports-winners-using-data-analytics-wi.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Robert Layton</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/predicting-sports-winners-using-data-analytics-wi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The pandas and scikit-learn packages combine together to produce a
powerful toolkit for data analytics. In this talk, we will be using them
together to analyse the outcome of NBA games, trying to predict the
winner of a match. There is plenty of data out there to allow us to
create good predictions – the key is getting it in the right format and
building the right model.&lt;/p&gt;
&lt;p&gt;In this talk we will go through importing data from the net, cleaning it
up, creating new features, and building a predictive model. We then
evaluate how well we did, using recent NBA data. The model we use will
be a decision tree ensemble called a random forest.&lt;/p&gt;
</summary></entry><entry><title>Python for less than $7</title><link href="https://pyvideo.org/pycon-au-2015/python-for-less-than-7.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Dr. Graeme Cross</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/python-for-less-than-7.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can now run Python 3.4 on microcontrollers that cost less than a cup
of coffee (in a up-market Parisian restaurant :)&lt;/p&gt;
&lt;p&gt;MicroPython (&lt;a class="reference external" href="http://www.micropython.org/"&gt;http://www.micropython.org/&lt;/a&gt;) is a very active port of
Python 3 to low-end microcontrollers with minimal RAM (eg. 192k RAM,
yes: &amp;quot;k&amp;quot;, as in kilobytes) but lots of useful I/O.&lt;/p&gt;
&lt;p&gt;Learn how to set up a very cheap microcontroller with wifi and a range
of I/O and then program it with MicroPython.&lt;/p&gt;
&lt;p&gt;The live demos are guaranteed to fail in spectacular ways as all live
demos do, but will hopefully show enough blinking lights to tempt you to
leave your i7 hyperthreaded clusters and join the cute but very
practical world of cheap, embedded Python.&lt;/p&gt;
</summary></entry><entry><title>Python on the move: The state of mobile Python</title><link href="https://pyvideo.org/pycon-au-2015/python-on-the-move-the-state-of-mobile-python.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/python-on-the-move-the-state-of-mobile-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last 5-10 years, the &amp;quot;desktop/server&amp;quot; split that dominated
computing in the 80s, 90s and early 2000s has been joined by a third
player - mobile devices such as phones and tablets.&lt;/p&gt;
&lt;p&gt;So, what is the story for running Python on these devices? Although
there hasn't been much to say in the past, the good news is that over
the last year, there's been some signficant changes in the landscape,
and Python on Mobile is now teetering on the brink of being a genuine
reality.&lt;/p&gt;
&lt;p&gt;In this talk, Russell Keith-Magee will survey the current state of using
Python on mobile devices, the work that is currently being done, areas
where more work is requried, and the prospects for the future.&lt;/p&gt;
</summary></entry><entry><title>Python's New Type Hints in Action… In JavaScript</title><link href="https://pyvideo.org/pycon-au-2015/pythons-new-type-hints-in-action-in-javascript-0.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/pythons-new-type-hints-in-action-in-javascript-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big
thing in Python, or the harbinger of doom upon our entire community.
Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some
benefits that other languages have had for years: IDEs will be able to
do code completion better; a whole class of boring tests will fall out
automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you
have to substantially change your code style? Will Python's simple
expressiveness suddenly become unattainable thanks to clumsy Java-style
type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look
at TypeScript, a minimal implementation of Gradual Typing over
JavaScript. We'll see how the type system works, and how it fits into
the already thriving JavaScript developer community, where most people
aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work,
and see what Python can learn from a language that has successfully made
the jump to a type-hinted world.&lt;/p&gt;
</summary></entry><entry><title>Python's Transition to Multilingual Programming</title><link href="https://pyvideo.org/pycon-au-2015/pythons-transition-to-multilingual-programming.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/pythons-transition-to-multilingual-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Ugh, why does Unicode have to be so complicated? It's just text, why
can't it be as simple as writing a note for myself?&amp;quot;&lt;/p&gt;
&lt;p&gt;One of the more controversial changes in Python 3 is the decision to
handle text data entirely as Unicode code points. In this presentation,
CPython core developer Nick Coghlan will explore some of the background
of that design decision, the capabilities it grants Python 3 over Python
2, and some of the related features of the upcoming Python 3.5 release.&lt;/p&gt;
</summary></entry><entry><title>Rapid prototyping with teenagers</title><link href="https://pyvideo.org/pycon-au-2015/rapid-prototyping-with-teenagers.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Katie Bell</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/rapid-prototyping-with-teenagers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is teamwork and rapid prototyping challenges on steroids. Imagine
15 high school kids, most of whom have only just learned to program,
working together to design and build a fully functional social
networking site in 3 days.&lt;/p&gt;
&lt;p&gt;This project is done as part of the NCSS (National Computer Science
School) summer program. NCSS has been running for 20 years, and I've
been involved in the last 7, so that's 6 different social networking
sites (we used to build search engines, but apparently they're not cool
anymore).&lt;/p&gt;
&lt;p&gt;I'll go through the technical details, the tools we use, how the site
functions, and how we structure the different pieces to come together.
I'll also show off some extra fun projects we throw at the advanced
kids, like building their own Django-like template engine, and secure
hashing of passwords.&lt;/p&gt;
&lt;p&gt;A lot of the challenge of this undertaking is inevitably also project
management and coordination of the team. These students have never
written tests before, don't know what version control is and don't
understand what it means to agree on an API. Hilarity and frustration
can (and does) ensue, especially during the last night, which is an
all-nighter.&lt;/p&gt;
&lt;p&gt;Come along to learn how to do project management with the least
experienced team possible and how to hack together a functional
prototype webapp with minimum effort.&lt;/p&gt;
</summary></entry><entry><title>Realtime websites with Django and Meteor</title><link href="https://pyvideo.org/pycon-au-2015/realtime-websites-with-django-and-meteor.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tyson Clugg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/realtime-websites-with-django-and-meteor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Create real-time websites and mobile apps that scale using Django and
the Meteor JavaScript framework. Push data changes in real-time from
your servers to browsers and app users simultaneously without adding
overly complex infrastructure to support the real-time updates.&lt;/p&gt;
</summary></entry><entry><title>Recreating the Pycon 2015 site in under 30 minutes</title><link href="https://pyvideo.org/pycon-au-2015/recreating-the-pycon-2015-site-in-under-30-minute.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tim Heap</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/recreating-the-pycon-2015-site-in-under-30-minute.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wagtail is a new CMS built for Django. Making sites in it is easy once
you know Django. To prove it, I will recreate the Pycon 2015 site as you
watch. Live coding - nothing can go wrong!&lt;/p&gt;
</summary></entry><entry><title>reliable testing with pip constraints</title><link href="https://pyvideo.org/pycon-au-2015/reliable-testing-with-pip-constraints.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/reliable-testing-with-pip-constraints.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip freeze files and similar techniques like buildout have been used for
reliable testing and reliable deployments for some time. But they are
not flexible enough to deal with situations like OpenStack where there
are dozens of separate codebases, evolving independently, which still
need the same rigour and reliability.&lt;/p&gt;
&lt;p&gt;Enter pip constraints, new in 7.1.0. I will cover their use, design, and
how we're using them in devstack (and thus OpenStack CI) - and how you
can (and should) use them in your local projects.&lt;/p&gt;
</summary></entry><entry><title>Slow Down, Compose Yourself</title><link href="https://pyvideo.org/pycon-au-2015/slow-down-compose-yourself.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/slow-down-compose-yourself.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As your codebase grows, you will have instances where you have code that
needs to be reused. Then you think, I can do this with subclassing! Now
you have a diamond-tree of problems.&lt;/p&gt;
&lt;p&gt;Here, we’ll talk about a better way of code reuse and introducing
alternate behaviour into existing classes — composition. It’ll improve
how you test your code — making your test runs faster, making it easier
to test exceptional cases, and making everything easier to understand.&lt;/p&gt;
</summary></entry><entry><title>Software Carpentry - Expansion and Partnerships in 2015</title><link href="https://pyvideo.org/pycon-au-2015/software-carpentry-expansion-and-partnerships-i.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Nic Crouch</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/software-carpentry-expansion-and-partnerships-i.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Software Carpentry Foundation is an international volunteer
organisation that teaches basic programming skills to researchers in
science, engineering, medicine and other disciplines. Further, the
foundation maintains a wealth of open-source, open-access teaching
materials for a several programming related topics, including Python,
the Unix shell, Git, SQL, R and Matlab.&lt;/p&gt;
&lt;p&gt;Lessons from Software Carpentry are usually delivered in the form of two
day workshops. Taught by trained instructors, these workshops cover
automation of repetitive tasks using the shell, building modular and
testable programs using Python or R and using version control to build
software in a collaborative and efficient manner. Furthermore, workshops
may be expanded, covering topics such as SQL and the use of databases to
reliably store and maintain data. Though of course it is impossible to
train expert programmers in two days, Software Carpentry has had great
success in teaching ‘just enough’ to researchers that they can then
return to the lab with a strong foundation of skills to build from.&lt;/p&gt;
&lt;p&gt;This presentation will focus on the major progress that has been made by
Software Carpentry in Australia and worldwide since PyCon-Au 2014. In
particular, the pool of Australian instructors has dramatically
increased through the live training session held as part of the Research
Bazaar conference held at Melbourne University in February. As such, the
presentation will be somewhat meta – answering the question ‘What are
the educational principles and techniques you should know before
attempting to teach novice programmers?’ The Software Carpentry lesson
content has also evolved in the last 12 months, with the lesson content
expanding to such topics as the use of Pandas and the more effective use
of the iPython Notebook to work with data and visualisation. These
changes allow Software Carpentry to cater to a broader audience of
researchers. There will also be some discussion of the Research Bazaar
conference, which partnered with Software Carpentry this year to not
only train instructors, but also run a series of other ‘basic skills’
workshops for researchers. Finally, there is an interesting sister
organisation of Software Carpentry, known as Data Carpentry, which
focuses on improving the way researchers work with and store their data.&lt;/p&gt;
</summary></entry><entry><title>Spreadsheet-Driven Meta-Programming for Python</title><link href="https://pyvideo.org/pycon-au-2015/spreadsheet-driven-meta-programming-for-python.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Javier Candeira</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/spreadsheet-driven-meta-programming-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've all had those very detail-oriented clients who are able to specify
their needs very neatly, often by means of exhaustive spreadsheets.
Wouldn't it be nice if we could turn these spreadsheets straight into
Python code?&lt;/p&gt;
&lt;p&gt;In this tutorial we'll use two sets of meta-programming techniques to
derive Python code out of semi-formal descriptions: first, to build
Django models requiring very detailed validation supplied by the client
in a spreadsheet; second, to build a Python API for a hardware device,
the description of which is maintained by the engineers in a
spreadsheet.&lt;/p&gt;
&lt;p&gt;For the Pycon attendance, this tutorial has both business value and
technical value:&lt;/p&gt;
&lt;p&gt;Business value because spreadsheet-driven metaprogramming allows
developers to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;respond to changes very fast by re-rendering their Python code from
the modified spreadsheet descriptions.&lt;/li&gt;
&lt;li&gt;avoid a certain class of human errors unavoidable when transcribing
the requirements by hand.&lt;/li&gt;
&lt;li&gt;save time which can be employed in other areas of the project, or
with other clients.&lt;/li&gt;
&lt;li&gt;clarify ambiguous specifications by making explicit all programmer's
assumptions into the code generator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technical value because we'll be talking about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;api design,&lt;/li&gt;
&lt;li&gt;Django modeling and validation,&lt;/li&gt;
&lt;li&gt;consuming spreadsheets via csv dictreaders and elbow grease,&lt;/li&gt;
&lt;li&gt;writing partially-applied functions via custom classes with a
&lt;strong&gt;call&lt;/strong&gt; method,&lt;/li&gt;
&lt;li&gt;implementing fluent apis with table-driven &lt;strong&gt;getattr&lt;/strong&gt; methods,&lt;/li&gt;
&lt;li&gt;implementing iterators with &lt;strong&gt;iter&lt;/strong&gt; and &lt;strong&gt;next&lt;/strong&gt;,&lt;/li&gt;
&lt;li&gt;papering over some differences between Python 2 and Python 3 syntax,&lt;/li&gt;
&lt;li&gt;and much, much more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll be doing all of it in a hands-on manner, without getting
distracted by abstract discussions of Python syntax. There will be some
discussions of Python syntax, but they won't be abstract. We'll always
have a goal in sight.&lt;/p&gt;
&lt;p&gt;Level:&lt;/p&gt;
&lt;p&gt;Intermediate. You'll learn some advanced techniques, but all you need to
really know in order to follow this tutorial is how lists, dictionaries,
iteration and reading files work in Python.&lt;/p&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Attendees are expected to know basic Python (see above, under
&amp;quot;Level&amp;quot;).&lt;/li&gt;
&lt;li&gt;A laptop and some knowledge of git will be useful for those wanting
to follow along, but is not required. You can get a lot out of this
tutorial just by watching and paying attention.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Sprinting For Beginners</title><link href="https://pyvideo.org/pycon-au-2015/sprinting-for-beginners.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tennessee J Leeuwenburg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/sprinting-for-beginners.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do sprinters eat before a race? Nothing, they fast.&lt;/p&gt;
&lt;p&gt;Sprinting at PyCon AU is not like that at all. Instead, it's a great
chance to do something good for the community and get to know some
fellow devs along the way. The sprints are an semi-formal two-day event
following the close of the main track of the conference where people get
together and code on whatever takes their fancy. Most of the time, it's
a a chance to work on an open source package you're already involved
with in some way, or to meet face-to-face with people you otherwise know
only by email.&lt;/p&gt;
&lt;p&gt;However, there are also those brave souls who are joining in for the
first time. It can be particularly intimidating if you don't know the
others there or how to really get started. This presentation will talk
about the sprint format, how to get in with a sprint group, and how to
be productive in such a short time (especially if you're new to the
concept).&lt;/p&gt;
&lt;p&gt;We'll cover off basics like getting your environment set up, checking
out the code, and identifying appropriate projects and tasks to work on.
Standard workflows and tips on how and when to approach people for
assistance can also help to make things flow more smoothly.&lt;/p&gt;
&lt;p&gt;It will also include some tips for sprint leaders about how to make your
project easy and enjoyable for others to hack on. There is a lot than
can be done without a lot of effort, such as pre-classifying bugs or
identifying appropriate tasks for newcomers, identifying &amp;quot;go-to&amp;quot; people
in your project, and spending time on the day talking to people and
getting them comfortable working on your code. Clearly documenting
simple workflows (like how to submit a patch, what code standards are
used, and how to validate results) can help tremendously.&lt;/p&gt;
&lt;p&gt;With any luck, this presentation can help both sprint leaders and
attendees with a smoother experience which gets the difficulties out the
way and leaves maximum opportunity for coding and enjoyment.&lt;/p&gt;
&lt;p&gt;Tennessee has gone through the meatgrinder of sprinting, from sitting
down with a group of strangers trying to help them fix trivial bugs, to
developing significant extensions, to leading sprints. With the scars to
show and lessons learned, he is in a reasonable position to help suggest
some simple things that can make sprinting easier and more enjoyable for
the newcomer.&lt;/p&gt;
</summary></entry><entry><title>Stop and smell the Djangos</title><link href="https://pyvideo.org/pycon-au-2015/stop-and-smell-the-djangos.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Richard Shea</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/stop-and-smell-the-djangos.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A great strength of Django is how much functionality there is baked in
without the developer doing anything to obtain it.&lt;/p&gt;
&lt;p&gt;A corollary of this is that there’s a great deal of functionality in
Django which the average developer is hardly aware exists. The happy dev
is pleased to ignore the problems that have been solved for them as
their requests rush in and their responses rush out.&lt;/p&gt;
&lt;p&gt;There's Middleware, Signals, Authentication, Caching,
Internationalization, Serialization and ... a lot more and that's just
the core framework.&lt;/p&gt;
&lt;p&gt;In this talk we’re going to stop and admire the view .&lt;/p&gt;
&lt;p&gt;We’ll demonstrate the effects that these core aspects of Django have on
a request - response cycle by reviewing how they work and feeling the
pain of what life would be like without them.&lt;/p&gt;
&lt;p&gt;My talk is aimed at the average Django dev who has been happy to ignore
what goes on under the hood. By better understanding the machinery that
Django relies on it gives us all the opportunity to exploit it in our
work and, of course, to impress our colleagues!&lt;/p&gt;
</summary></entry><entry><title>Swagger driven REST API development with the Falcon web server</title><link href="https://pyvideo.org/pycon-au-2015/swagger-driven-rest-api-development-with-the-falc.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Andrew Stuart</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/swagger-driven-rest-api-development-with-the-falc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Swagger is a JSON format for defining and documenting REST API's. Falcon
is a lightweight Python web server designed specifically for building
REST web services.&lt;/p&gt;
&lt;p&gt;This presentation shows you how to combine Swagger API specifications
with the Falcon web server to make REST API development incredibly fast
and easy.&lt;/p&gt;
</summary></entry><entry><title>Talking to Browsers with CORS</title><link href="https://pyvideo.org/pycon-au-2015/talking-to-browsers-with-cors.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Michael Krotscheck</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/talking-to-browsers-with-cors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session will demonstrate how to break the browser's single origin
policy, and permit true separability between a Python API and a
browser-based client.&lt;/p&gt;
</summary></entry><entry><title>Test-Driven Repair</title><link href="https://pyvideo.org/pycon-au-2015/test-driven-repair.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/test-driven-repair.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“it is impossible BY DEFINITION to do Test-Driven Development after the
code is written.” — Tim Ottinger, author of ‘Clean Code’, on Twitter
[1].&lt;/p&gt;
&lt;p&gt;Automated testing is one of the most important tools in the modern
programming toolbox: good tests help you find regressions early, and
help you make sure your code is right before it ships. Test-driven
development is a great way to make sure your software is up to
specification before you start work. Even better, it makes sure your
software’s architecture is amenable to writing tests from day 1.&lt;/p&gt;
&lt;p&gt;So what happens when you find yourself working on code where automated
testing took a back seat to being shipped? Chances are you’ll have a sea
of bugs, strung together in a structure where writing simple unit tests
just isn’t going to happen.&lt;/p&gt;
&lt;p&gt;Broken code is a support burden, and if it’s in production, you’ve got
no choice but to make things work. Luckily, automated testing isn’t a
lost cause here!&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at how to approach automated testing on
late-stage, or even production code… or in any situation when you don’t
have the luxury of starting with a test-driven structure. We’ll look at
techniques that I’ve used to analyse faults in existing code, and how to
translate those into tests, and how to use that to fix bugs.&lt;/p&gt;
&lt;p&gt;In particular, we’ll look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tooling and metrics to help you decide what code to test, and how to
measure progress when you’re writing tests&lt;/li&gt;
&lt;li&gt;Approaches to constructing test cases for old code, including using
data-driven approaches, and approaches based on requirements
specifications&lt;/li&gt;
&lt;li&gt;Granularity — making tests on old code granular enough is difficult,
so we’ll look at the trade-offs between unit and integration tests on
old code, and ways to make integration-level tests granular enough to
make results reliable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll see that testing old code is both achievable, and actually a
worthwhile exercise. You’ll find bugs. You’ll increase quality. You’ll
make your code more maintainable! Do try it!&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://twitter.com/tottinge/status/544632253205475329"&gt;https://twitter.com/tottinge/status/544632253205475329&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Testing ain't hard, even for SysAdmins</title><link href="https://pyvideo.org/pycon-au-2015/testing-aint-hard-even-for-sysadmins.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Geoff Crompton</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/testing-aint-hard-even-for-sysadmins.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While fabric is a great tool for systems automation, saltstack is
better. When Geoff decided to re-work the procedure at Trinity College
for doing their regular package installs using salt, he ended up writing
his own script that interacted with salt. He learned to love how testing
improved his ability to debug this script without breaking his
production environment, and wants to share what he learned with you.&lt;/p&gt;
</summary></entry><entry><title>The Future of Identity (Keystone) in OpenStack</title><link href="https://pyvideo.org/pycon-au-2015/the-future-of-identity-keystone-in-openstack.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Morgan Fainberg</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/the-future-of-identity-keystone-in-openstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the Essex release, the OpenStack Identity Project (Keystone) has
seen significant numbers of improvements. Some of these improvement
include the addition of the V3 API, PKI Tokens, Trusts, Federated
Identity, Non-Persistent Tokens, etc.&lt;/p&gt;
&lt;p&gt;This talk will discuss the most recent developments for Keystone and
what is being planned for Identity during Liberty and beyond.&lt;/p&gt;
</summary></entry><entry><title>The one true way of doing Django deployments...</title><link href="https://pyvideo.org/pycon-au-2015/the-one-true-way-of-doing-django-deployments.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Tom Eastman</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/the-one-true-way-of-doing-django-deployments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;...doesn't exist. (Sorry)&lt;/p&gt;
&lt;p&gt;The power and flexibility of Django comes with drawbacks. One of the
toughest for project management is working out how to deploy your Django
application. If you ask five different authorities on how you should do
it, you'll get six different answers.&lt;/p&gt;
&lt;p&gt;And if someone says &amp;quot;Just use fabric!&amp;quot;: they're not helping.&lt;/p&gt;
&lt;p&gt;Release management, dependency wrangling, virtualenv care and feeding;
to .whl or .deb? To containerize or Heroku-ize? Do you really have to
allow your servers unconstrained Internet access just to build your
virtualenv?&lt;/p&gt;
&lt;p&gt;As a Django user, you might end up writing more deployment solutions
than Django projects. I know I have.&lt;/p&gt;
&lt;p&gt;There's no one true way of doing Django deployments, but some work
better than others. Maybe I can show you.&lt;/p&gt;
</summary></entry><entry><title>Trials &amp; tribulations teaching Python at CoderDojo</title><link href="https://pyvideo.org/pycon-au-2015/trials-tribulations-teaching-python-at-coderdoj.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Caleb Hattingh</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/trials-tribulations-teaching-python-at-coderdoj.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will relate the experience of teaching coding, including
Python, to a (nominally) 6-18 age group at a local Brisbane CoderDojo
for 2015 Term 1 and 2.&lt;/p&gt;
&lt;p&gt;Scratch and Alice have become very popular for teaching beginner coding
at CoderDojo events. Languages such as Python, and even HTML/CSS, are
more difficult to introduce, partly because more skills are required
before something &amp;quot;useful&amp;quot; can be created, and partly because the
&amp;quot;building blocks&amp;quot; are usually not presented with the same visual
immediacy as Scratch, and similar environments. This talk presents some
of the difficulties found in transitioning from graphical environments
to Python, and observations in using existing tools for learning Python
with younger students.&lt;/p&gt;
</summary></entry><entry><title>Using Flask and Python Anywhere in the Classroom</title><link href="https://pyvideo.org/pycon-au-2015/using-flask-and-python-anywhere-in-the-classroom.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Brad Nielsen</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/using-flask-and-python-anywhere-in-the-classroom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a python web server and web framework that makes server-side
programming using Python easy. Flask has less 'magic' than Django and
therefore makes server requests and responses easier to understand for
students. Python Anywhere is a cloud server that allows you to easily
set up a live Flask or Django application. Students can develop and
debug code online without the hassle of installing and configuring their
development environments. This session will look at how Flask and Python
Anywhere was used in the classroom with a year 12 student cohort.&lt;/p&gt;
</summary></entry><entry><title>What Django can learn from Twisted</title><link href="https://pyvideo.org/pycon-au-2015/what-django-can-learn-from-twisted.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/what-django-can-learn-from-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web frameworks like Django are designed around the traditional
request-response cycle — a request comes in, a response is generated,
and that is delivered to the client. In the day of “single page”
applications, where only sections of the page are updated through
requests, doing real-time can be clunky. Twisted, and things that build
off it, like Django Channels, might be worth thinking about, and this is
what this talk will be about.&lt;/p&gt;
</summary></entry><entry><title>Writing Python For Kids</title><link href="https://pyvideo.org/pycon-au-2015/writing-python-for-kids.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Brendan Scott</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/writing-python-for-kids.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thinking of writing a book? We are in the midst of a boom in interest in
amateur programming, particularly among children. Brendan spent the most
recent summer past using his blog python4kids.brendanscott.com as
inspiration for a new project based instructional book, Python for Kids
for Dummies (US release by Wiley this northern summer). This talk will
provide an overview of the development cycle for the book both in
respect of the book's content and the process involved in creating that
content and shepherding it through the publisher's internal processes.
Topics to be covered include engaging and negotiating with the
publisher, the different functions provided by a publisher, project
management of the writing, interacting with editorial and technical
reviewers, integrating with an existing &amp;quot;house style&amp;quot;, art requirements
and cross platform issues. In relation to content, Brendan will discuss
the thought that went into targeting the material to a kids audience and
the challenges involved in structuring a narrative which wends its way
through each of the concepts that need to be introduced and providing a
motivation for each of them. This includes how the content was
structured, what concepts were included and what were passed over,
trying to balance material to maintain interest without overwhelming the
readers, the tension between explanation and demonstration and how to
remain mindful of the audience's limitations. The highs, the lows, the
triumphs (getting it done!) and tragedies (whole chapters consigned to
the pyre), it's all here.&lt;/p&gt;
&lt;p&gt;The book on Amazon:
&lt;a class="reference external" href="http://www.amazon.com/Python-For-Kids-Dummies/dp/1119093104"&gt;http://www.amazon.com/Python-For-Kids-Dummies/dp/1119093104&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Automated Scientific Pipelines With Doit</title><link href="https://pyvideo.org/pycon-au-2015/automated-scientific-pipelines-with-doit.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Sam Hames</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/automated-scientific-pipelines-with-doit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Doit is a Python library for task management and automation. It provides
a straightforward Python approach to manage and execute any series of
interrelated tasks, such as in scientific data analysis. Doit can be
used as a command line substitute for Make to drive existing
tools/applications, or can be integrated directly with your application
at the Python level. Task automation can be as simple as manually
specifying a dictionary of dependencies, target files and actions, or as
complex as automatically determining dependencies and whether a task is
up to date using arbitrary Python expressions. This talk will give an
overview of why and how to use doit for your project.&lt;/p&gt;
&lt;p&gt;This talk assumes no particular background except some familiarity with
Python, but is geared towards a scientific computing audience and will
touch on automated data analysis as a motivating example.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Consequences of an Insightful Algorithm</title><link href="https://pyvideo.org/pycon-au-2015/keynote-consequences-of-an-insightful-algorithm.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Carina C. Zona</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/keynote-consequences-of-an-insightful-algorithm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We have ethical responsibilities when coding. We’re able to extract
remarkably precise intuitions about an individual. But do we have a
right to know what they didn’t consent to share, even when they
willingly shared the data that leads us there? A major retailer’s
data-driven marketing accidentally revealed to a teen’s family that she
was pregnant. Eek.&lt;/p&gt;
&lt;p&gt;What are our obligations to people who did not expect themselves to be
so intimately known without sharing directly? How do we mitigate against
unintended outcomes? For instance, an activity tracker carelessly
revealed users’ sexual activity data to search engines. A social
network’s algorithm accidentally triggered painful memories for grieving
families who’d recently experienced death of their child and other loved
ones.&lt;/p&gt;
&lt;p&gt;We design software for humans. Balancing human needs and business specs
can be tough. It’s crucial that we learn how to build in systematic
empathy.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll delve into specific examples of uncritical
programming, and painful results from using insightful data in ways that
were benignly intended. You’ll learn ways we can integrate practices for
examining how our code might harm individuals. We’ll look at how to flip
the paradigm, netting consequences that can be better for everyone.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Designed for education: a Python solution</title><link href="https://pyvideo.org/pycon-au-2015/keynote-designed-for-education-a-python-solutio.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Carrie Anne Philbin</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/keynote-designed-for-education-a-python-solutio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The problem of introducing children to programming and computer science
has seen growing attention in the past few years. Initiatives like
Raspberry Pi, Code Club, code.org, (and many more) have been created to
help solve this problem. With the introduction of a national computing
curriculum in the UK, teachers have been searching for a text based
programming language to help teach computational thinking as a follow on
from visual languages like Scratch.&lt;/p&gt;
&lt;p&gt;The educational community has been served well by Python, benefiting
from its straight-forward syntax, large selection of libraries, and
supportive community. Education-focused summits are now a major part of
most major Python Conferences. Assistance in terms of documentation and
training is invaluable, but perhaps there are technical means of
improving the experience of those using Python in education. Clearly the
needs of teachers and their students are different to those of the
seasoned programmer. Children are unlikely to come to their teachers
with frustrations about the Global Interpreter Lock! But issues such as
usability of IDEs or comprehensibility of error messages are of utmost
importance.&lt;/p&gt;
&lt;p&gt;In this keynote, Carrie Anne will discuss existing barriers to Python
becoming the premier language of choice for teaching computer science,
and how learning Python could be helped immensely through tooling and
further support from the Python developer community.&lt;/p&gt;
</summary></entry><entry><title>Open edX: An edX partner perspective</title><link href="https://pyvideo.org/pycon-au-2015/open-edx-an-edx-partner-perspective.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>John Zornig</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/open-edx-an-edx-partner-perspective.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open edX is an open source MOOC platform. It powers courses on edx.org
and those of the many adopters of the Open edX platform. Open edX is a
complex platform with many interconnected parts, but the largest
components are Python Django apps. This presentation will describe the
experiences of developers at The University of Queensland's UQx project
from 2013 when UQ joined the edX consortium through to the present and
the future. Your presenters are John Zornig, Director UQx (former Senior
Architect) and Andrew Dekker Senior Developer.&lt;/p&gt;
</summary></entry><entry><title>Orchestration and CI/CD with Ansible and OpenStack</title><link href="https://pyvideo.org/pycon-au-2015/orchestration-and-cicd-with-ansible-and-openstac.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Simone Soldateschi</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/orchestration-and-cicd-with-ansible-and-openstac.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This project will demonstrate how to leverage CI/CD pipelines, to deploy
and rollback applications in the Openstack Cloud. Best-practices allow
to automate tasks and achieve high-degree of repeatability and
robustness.&lt;/p&gt;
&lt;p&gt;Jenkins will be used to implement continuous integration and continuous
delivery jobs and pipelines. Packer will create images of disposable
systems, being containers and Cloud servers. Ansible will be used to
both create images with Packer, and eventually orchestrate provisioning
of systems in staging and production environments in a blue-green
fashion.&lt;/p&gt;
&lt;p&gt;Deep knowledge of deployment and workflow allows to continuously refine
the process, adapt it to custom requirements, and make it smoother.&lt;/p&gt;
&lt;p&gt;The following technologies will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ansible&lt;/li&gt;
&lt;li&gt;Docker on CoreOS cluster&lt;/li&gt;
&lt;li&gt;Git repository&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;Openstack&lt;/li&gt;
&lt;li&gt;Packer&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Tales from Managing an Open Source Python Game</title><link href="https://pyvideo.org/pycon-au-2015/tales-from-managing-an-open-source-python-game.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Josh Bartlett</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/tales-from-managing-an-open-source-python-game.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten years ago, a rag-tag bunch of computer camp leaders decided to
create a game that would teach kids teamwork and strategy, and which the
kids could feel a part of. In those days, the presenter was a young
dreamer with time on his hands, and he chose to spearhead the project.
Was this folly? You be the judge. The game was Trosnoth. It is developed
in Python, using Pygame and Twisted. In this presentation, Josh will
tell the story of Trosnoth, and share some of the many lessons, both
social and technical, which he learnt while managing the project. Maybe
you’ve considered writing a game in Python. Maybe you’re not sure how
Open Source projects really work. Maybe you’re an experienced project
manager who wants to laugh at some of the mistakes Josh made. Or maybe
you just enjoy hearing Josh tell stories. Whoever you are, there’s bound
to be something in this presentation for you.&lt;/p&gt;
</summary></entry><entry><title>Teaching Programming for the fun of IT</title><link href="https://pyvideo.org/pycon-au-2015/teaching-programming-for-the-fun-of-it.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Peter Whitehouse</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/teaching-programming-for-the-fun-of-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The teaching of programming concepts has come a long way in terms of
tools and pedagogies but the underlying concepts appear timeless. In
this session we will look at the place of programming in schools in the
junior school through National Curriculum imperatives like Digital
Technologies and the Information Processing and Technology perspectives
and how Python can have a place here.&lt;/p&gt;
</summary></entry><entry><title>The Necessity of Configuration and System Management Tools</title><link href="https://pyvideo.org/pycon-au-2015/the-necessity-of-configuration-and-system-managem.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/the-necessity-of-configuration-and-system-managem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In practically every moment of our life we rely on the possibly largest
communication medium humanity ever had. The Internet. Being able to at
least partially understand how this &lt;em&gt;thing&lt;/em&gt; works, we know that it takes
a lot of work to keep it running smoothly.&lt;/p&gt;
&lt;p&gt;To do that IT administrators use configuration and system management
tools to deploy changes to thousands of servers and keep them in sync.
But how can one roll back a change done in the past that turned out to
introduce a bug?&lt;/p&gt;
&lt;p&gt;This talk I will introduce you to configuration management and explain
the problems that arise over time and make changing something back
complicated or even impossible.&lt;/p&gt;
</summary></entry><entry><title>To AST and Beyond</title><link href="https://pyvideo.org/pycon-au-2015/to-ast-and-beyond.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Curtis Maloney</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/to-ast-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Follow my journey of building a super fast templating engine which turns
your markup into Python code through AST.&lt;/p&gt;
&lt;p&gt;Uncover the power available in Python's Abstract Syntax Tree module for
building and manipulating code ... in your code!&lt;/p&gt;
</summary></entry><entry><title>Using benchmarks to understand how WSGI servers work</title><link href="https://pyvideo.org/pycon-au-2015/using-benchmarks-to-understand-how-wsgi-servers-w.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Graham Dumpleton</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/using-benchmarks-to-understand-how-wsgi-servers-w.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During the development of a Python web application the inbuilt
development web server provided by the web framework is often what is
used. When moving to a production environment, one has to choose a more
capable production grade WSGI deployment mechanism. Which of the various
WSGI servers available is going to be the most suitable is going to
depend on a range of criteria related to your specific web applications
requirements.&lt;/p&gt;
&lt;p&gt;Unfortunately, rather than look at the bigger picture and what would be
the most suitable across such criteria, many people will simply rush to
trying to run an overly simplistic benchmark on the various WSGI servers
and make the decision based purely on perceptions of whether one WSGI
server is faster than the alternatives. Worse, they don't even attempt
to do the benchmarks themselves and instead rely on benchmarks published
on some public blog site.&lt;/p&gt;
&lt;p&gt;Such public benchmarks as are available are often flawed, or cover such
a narrow use case as to in no way be relevant to that users own specific
situation.&lt;/p&gt;
&lt;p&gt;A further problem with such benchmarks is that they try and evaluate the
performance of a WSGI server as if they are a black box. As such, there
is no attempt to try and work out what is actually going on within the
WSGI server and why it is exhibiting the behaviour it is.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to explore a number of different micro
benchmarks, using them to work out what is actually going on within a
WSGI server when they are run. The analysis will delve down into, and
look at the different ways that WSGI servers are implemented and
deployed. The behaviour under the different benchmarks will be
determined using fine grained metrics captured from hooking
instrumentation into the WSGI servers themselves.&lt;/p&gt;
&lt;p&gt;As there are many factors which could be investigated, the talk cannot
be entirely comprehensive, but selected benchmarks drawing from a sub
set of the following areas will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;multithreading&lt;/li&gt;
&lt;li&gt;CPU intensive tasks&lt;/li&gt;
&lt;li&gt;long running requests&lt;/li&gt;
&lt;li&gt;combination of short and long running requests&lt;/li&gt;
&lt;li&gt;large request content uploads&lt;/li&gt;
&lt;li&gt;large amounts of response content&lt;/li&gt;
&lt;li&gt;blocking on back end services&lt;/li&gt;
&lt;li&gt;slow HTTP clients&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tests will look not just at response times, but also server capacity
utilisation, CPU and memory utilisation.&lt;/p&gt;
&lt;p&gt;Although the discussion will primarily revolve around WSGI servers, a
comparison will also be made for some tests were one instead to use an
ASYNC web application framework alone, or in conjunction with a WSGI
adapter.&lt;/p&gt;
&lt;p&gt;To conclude, an attempt will be made to summarise what you should be
looking at in a WSGI server to determine if it is the right choice for
your use case.&lt;/p&gt;
</summary></entry><entry><title>Using PyCharm Educational Edition</title><link href="https://pyvideo.org/pycon-au-2015/using-pycharm-educational-edition.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Thea Koutsoukis</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/using-pycharm-educational-edition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Late last year, JetBrains released a new version of their PyCharm IDE -
the Educational Edition. This version has an integrated Python console,
Debugger and Version Control System, along with educational features
like the ability to create and deliver &amp;quot;fill in the missing code&amp;quot;
exercises. This talk highlights my experiences using PyCharm Lessons to
teach beginners Python. As a fairly new piece of software, there are a
number of bugs that can cause a lot of pain when first starting out.
This talk will demonstrate the steps to creating lessons and tests,
publishing them and sharing them with students, while avoiding problems
with the system. I will also share thoughts on using an IDE with
beginners, how students have reacted and what kind of lessons have been
successful.&lt;/p&gt;
</summary></entry><entry><title>Why Salt?</title><link href="https://pyvideo.org/pycon-au-2015/why-salt.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>aurynn shaw</name></author><id>tag:pyvideo.org,2015-08-03:pycon-au-2015/why-salt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DevOps is a growing movement in the tech community, and configuration
management is a huge necessity for doing DevOps well. In this talk,
we'll be talking about why you should use the SaltStack configuration
management platform in your environment, versus the other major
platforms of Puppet and Chef.&lt;/p&gt;
</summary></entry></feed>