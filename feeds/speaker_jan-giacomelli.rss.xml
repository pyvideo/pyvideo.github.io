<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Jan Giacomelli</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 22 Mar 2021 00:00:00 +0000</lastBuildDate><item><title>Complete Python Toolbox For Modern Developers</title><link>https://pyvideo.org/python-web-conf-2021/complete-python-toolbox-for-modern-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Complete Python Toolbox For Modern Developers&amp;quot; by: Jan Giacomelli
This talk looks at the various tools that simplify the development process for any developer, independent of their skill level. It starts with project creation with dependency management. It then continues on to look at tools used for testing, checking code quality, and type checking. In the end, we’ll look at documenting code.&lt;/p&gt;
&lt;p&gt;Introduction - 5min
I’ll start with the issues most Python developers face:
- creating and re-creating virtual environments
- installing, uninstalling, and updating dependencies
- writing and running tests
- following consistent code style
- avoiding security vulnerabilities
- documenting code&lt;/p&gt;
&lt;p&gt;Modern Python Environments (dependency and workspace management)
First, we’ll take a look at how to manage Python versions with pyenv. Specifically, how to:
- list available Python versions
- install a specific version
- select a specific version for your current project&lt;/p&gt;
&lt;p&gt;Next, we’ll take a look at managing dependencies. We’ll look at how to manage dependencies with several different tools:
- venv + pip
- Poetry
- pipenv
For each, we’ll look at how to manage dependencies along with the virtual environment.
We’ll finish this section by comparing the tools (their pros and cons, things they support, etc.) to make it easier to choose the right one based on your specific situation.&lt;/p&gt;
&lt;p&gt;Python testing
This section looks at some tools and techniques that help make testing in Python easier.
- Testing with pytest: How to install pytest, structure a project, run assertions, and run tests. We’ll also look at the most used plugins.
- Mocking: How to mock internal methods within your tests.
- Code coverage: We’ll discuss how to measure code coverage, which tool to use, and how to interpret the coverage percentage.&lt;/p&gt;
&lt;p&gt;Python Code Quality
This section answers the following questions:
1. What exactly is code quality?
How do we measure it?
How do we improve code quality and clean up our Python code?
We’ll look at how to improve the quality of your Python code with linters, code formatters, and security vulnerability scanners.&lt;/p&gt;
&lt;p&gt;Python Type Checking
This section answers the following questions:
1. What is type checking?
2. Why do we need it?
3. What’s the difference between static and runtime type checking?
This section looks at what type hints are and how they can benefit you. We’ll also dive into how you can use Python’s type system for type checking.&lt;/p&gt;
&lt;p&gt;Documenting Python Code
This section answers the following questions:
1. Why do you need to document your Python code?
2. What should your project documentation include?
3. How do you write and generate documentation?
This section looks at why you should document your Python code and how to generate project documentation with Sphinx and OpenAPI.&lt;/p&gt;
&lt;p&gt;Recorded at the 2021 Python Web Conference (&lt;a class="reference external" href="https://2021.pythonwebconf.com"&gt;https://2021.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Giacomelli</dc:creator><pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-03-22:/python-web-conf-2021/complete-python-toolbox-for-modern-developers.html</guid><category>Python Web Conf 2021</category><category>PythonWebConf</category><category>PythonWebConf2021</category></item></channel></rss>