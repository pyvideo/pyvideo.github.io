<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 11 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Discovering descriptors</title><link>https://pyvideo.org/pycon-cz-2017/discovering-descriptors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Descriptors are often not that common to be found, compared to other
idioms (decorators, context managers, etc.). However, they provide a
powerful tool for improving our code, by enabling us to encapsulate
logic into different objects transparently.&lt;/p&gt;
&lt;p&gt;The talk will cover the descriptor protocol, different types of
descriptors, and some examples where descriptors shine, yielding a
very elegant and efficient solution.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariano Anaya</dc:creator><pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-09:pycon-cz-2017/discovering-descriptors.html</guid></item><item><title>Clean code in Python</title><link>https://pyvideo.org/pycon-cz-2017/clean-code-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to the clean code principles tailored for Python
projects. The goal is to achieve better code quality and a more
maintainable code base. Python has a nature of being clear, and easy
to follow, so let's take advantage of it in our own code, in order to
enforce the principle &amp;quot;readability counts&amp;quot; by writing pythonic code.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality for Python
developers, analyzing technical debt, with examples on how to achieve
a more legible, maintainable and clean code base, by refactoring,
writing unit tests and having good coding guidelines for the project.
If you are giving your first steps with Python, you will gain insight
on best practices for writing good software from the start. If you
are a experienced developer, the ideas should work as food for
thought, helping with recommendations for code reviews, best
practices, etc.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mariano is a software engineer and technical leader, keen on open
source, state-of-the-art technology, focused on Python development,
DevOps and experienced in back-end projects.&lt;/p&gt;
&lt;p&gt;Mariano's main areas of interests besides Python are Linux, software
architecture, distributed systems and speaking at conferences.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariano Anaya</dc:creator><pubDate>Thu, 08 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-08:pycon-cz-2017/clean-code-in-python.html</guid></item><item><title>Discovering Descriptors</title><link>https://pyvideo.org/europython-2017/discovering-descriptors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is full of amazing (yet often overlooked) features, that can
help us write better, cleaner, and more maintainable code. One of
them is the descriptors interface.&lt;/p&gt;
&lt;p&gt;By means of descriptors, we can run code when accessing or setting
properties of another object. This can have a lot of applications,
and keeping descriptors in mind might come in handy when facing a
hard problem.&lt;/p&gt;
&lt;p&gt;The goal of the talk is to explore descriptors, and how they can be
written, as well as analysing some interesting examples in well-known
libraries or projects in order to identify scenarios where
descriptors are the Pythonic way to go.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariano Anaya</dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-11:europython-2017/discovering-descriptors.html</guid></item><item><title>Clean code in Python</title><link>https://pyvideo.org/europython-2016/clean-code-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mariano Anaya - Clean code in Python
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/clean-code-in-python"&gt;https://ep2016.europython.eu//conference/talks/clean-code-in-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Introduction to the clean code principles applied to Python code.
Let's honor the readable nature of the Python syntax so anyone can
maintain our code: &amp;quot;readability counts&amp;quot;.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality and how they
apply for Python. We analyse technical debt, refactoring, and unit
testing in the context of a project striving for a better code base.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Introduction to the clean code principles tailored for Python
projects. The goal is to achieve better code quality and a more
maintainable code base. Python has a nature of being clear, and easy
to follow, so let's take advantage of it in our own code, in order to
enforce the principle &amp;quot;readability counts&amp;quot; by writing pythonic code.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality for Python
developers, analyzing technical debt, with examples on how to achieve
a more legible, maintainable and clean code base, by refactoring,
writing unit tests and having good coding guidelines for the project.
If you are giving your first steps with Python, you will gain insight
on best practices for writing good software from the start. If you are
a experienced developer, the ideas should work as food for thought,
helping with recommendations for code reviews, best practices, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariano Anaya</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/clean-code-in-python.html</guid></item></channel></rss>