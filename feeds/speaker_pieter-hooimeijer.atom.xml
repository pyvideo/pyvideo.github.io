<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_pieter-hooimeijer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>Types, Deeper Static Analysis, and you</title><link href="https://pyvideo.org/pycon-us-2018/types-deeper-static-analysis-and-you.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Pieter Hooimeijer</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/types-deeper-static-analysis-and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many projects already take advantage of static analysis tools like flake8, PyLint, and MyPy. Can we do better? In this talk, I'll discuss how to take a type checker, bolt on an interprocedural static analyzer, and delight your security team with high quality results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is incredibly challenging to build a halfway decent static analysis tool for a dynamic language like Python. Fortunately, it gets quite a bit easier with Python type annotations. To explain why, I'll present a tool that finds security vulnerabilities by tracking dangerous flows of information interprocedurally across an entire codebase. &lt;strong&gt;Then,&lt;/strong&gt; I'll demonstrate how that tool is really just a slightly slower, more sophisticated, type checker.&lt;/p&gt;
</summary></entry></feed>