<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 09 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>SociaLite: Python intergrated query Language for Data Analysis</title><link>https://pyvideo.org/scipy-2014/socialite-python-intergrated-query-language-for.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SociaLite is a Python-integrated query language for data analysis. It
makes scientific data analysis simple, yet achieves fast performance
with its compiler optimizations. We support relational tables and
operations in SociaLite as well as Python integration, which makes it
easy to implement various analysis algorithms, including Blast algorithm
and genome assembly algorithm in bioinformatics.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SociaLite is a Python-integrated query language for distributed data
analysis.
It makes scientific data analysis simple, yet achieves fast
performance with its compiler optimizations. The performance of
SociaLite is often more than three orders of magnitude faster than
Hadoop programs, and close to optimized C programs. For example,
PageRank algorithm can be implemented in just 2 lines of SociaLite
query, which runs nearly as fast as an optimal parallelized C code.&lt;/p&gt;
&lt;p&gt;SociaLite supports well-known high-level concepts to make data analysis
easy for non-expert programmers. We support relational tables for
storing data, and relational operations, such as join, selection, and
projection, for processing the data. Moreover, SociaLite queries are
fully integrated with Python, so both SociaLite and Python code can be
used to implement data analysis logic. For the integration with Python,
we support embedding and extending SociaLite, where embedding supports
using SociaLite queries directly in Python code, and extending supports
using Python functions in SociaLite queries.&lt;/p&gt;
&lt;p&gt;The Python integration makes it easy to implement various analysis
algorithms in SociaLite and Python. For example, the BLAST algorithm in
bioinformatics can be implemented in just a few lines of SociaLite
queries and Python code. Also genome assembly algorithm -- generating a
De Bruijn graph and applying Eulerian cycle algorithm -- can be simply
implemented. In the talk, I will demonstrate these algorithms in
SociaLite as well as more general algorithms such as K-means clustering
and logistic regression.&lt;/p&gt;
&lt;p&gt;The SociaLite queries are compiled to highly optimized
parallel/distributed code; we apply optimizations such as pipelined
evaluation and prioritization. The runtime system also speeds up the
performance; for example, the customized memory allocator reduces memory
allocation time and footprint. In short, SociaLite makes
high-performance data analysis easy with its high-level abstractions and
compiler/runtime optimizations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jiwon Seo</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/socialite-python-intergrated-query-language-for.html</guid><category>bioinformatics</category><category>blast</category><category>data analysis</category></item></channel></rss>