<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_yury-selivanov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-16T00:00:00+00:00</updated><entry><title>EdgeDB &amp; Python</title><link href="https://pyvideo.org/pybay-2019/edgedb-python.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2019-08-16:pybay-2019/edgedb-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</summary></entry><entry><title>asyncio: what's next</title><link href="https://pyvideo.org/pybay-2018/asyncio-whats-next.html" rel="alternate"></link><published>2018-08-18T00:00:00+00:00</published><updated>2018-08-18T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2018-08-18:pybay-2018/asyncio-whats-next.html</id><summary type="html"></summary></entry><entry><title>Asyncio in Python 3.7 and 3.8.</title><link href="https://pyvideo.org/europython-2018/asyncio-in-python-37-and-38.html" rel="alternate"></link><published>2018-07-25T00:00:00+00:00</published><updated>2018-07-25T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2018-07-25:europython-2018/asyncio-in-python-37-and-38.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk is aimed to give attendees a clear picture of new asyncio
features in Python 3.7 and give an idea of what to expect in Python 3.8.
As a CPython core developer and the lead asyncio maintainer I believe I
have a unique perspective to share with EuroPython guests.&lt;/p&gt;
&lt;p&gt;Python 3.7 boasts a number of new amazing features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sendfile&lt;/li&gt;
&lt;li&gt;start TLS&lt;/li&gt;
&lt;li&gt;new high performance buffered protocols&lt;/li&gt;
&lt;li&gt;context-local state via PEP 567&lt;/li&gt;
&lt;li&gt;asyncio.run &amp;amp; create_task &amp;amp; other usability improvements&lt;/li&gt;
&lt;li&gt;many performance improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first part of the talk will be focusing on new APIs to explain them
and give ideas how they can be used in production.&lt;/p&gt;
&lt;p&gt;The second part of the talk will be focused on what to expect to see in
asyncio in Python 3.8:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;new performance tracking &amp;amp; profiling API&lt;/li&gt;
&lt;li&gt;supervisors &amp;amp; cancel scopes&lt;/li&gt;
&lt;li&gt;new timeouts API&lt;/li&gt;
&lt;li&gt;a completely new way of writing asyncio applications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these ideas are borrowed from Trio and Curio (two other popular
async/await Python frameworks), many are borrowed from languages like
Erlang and Scala. One thing I can say for certain is that 3.8 will be
the biggest and most interesting asyncio release ever!&lt;/p&gt;
</summary></entry><entry><title>async/await and asyncio in Python 3.6 and beyond</title><link href="https://pyvideo.org/pycon-us-2017/asyncawait-and-asyncio-in-python-36-and-beyond.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2017-05-21:pycon-us-2017/asyncawait-and-asyncio-in-python-36-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk overviews async/await, asynchronous generators and
comprehensions in Python 3.6 and the asyncio module. We'll discuss when
and how asyncio should be used in a modern applications and services,
what is uvloop, and what asyncio frameworks and libraries one should
use. I'll share our ideas about where asyncio is headed and what to
expect in Python 3.7.&lt;/p&gt;
</summary></entry><entry><title>High performance networking in Python</title><link href="https://pyvideo.org/pycon-ca-2016/high-performance-networking-in-python.html" rel="alternate"></link><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2016-11-12:pycon-ca-2016/high-performance-networking-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Overview of async/await.&lt;/li&gt;
&lt;li&gt;asyncio and uvloop.&lt;/li&gt;
&lt;li&gt;Sockets, Protocols or Streams?&lt;/li&gt;
&lt;li&gt;Learn by example: high-performance PostgreSQL driver.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="yury-selivanov-bio"&gt;
&lt;h4&gt;Yury Selivanov Bio&lt;/h4&gt;
&lt;p&gt;Yury Selivanov is an avid Python user for the last 10 years. He's a
CPython core developer since January 2013. He's one of the main
developers behind asyncio, and he authored and implemented PEP 492
(async/await) in 2015.&lt;/p&gt;
&lt;p&gt;Yury is an entrepreneur and technical leader with many years of
experience in software architecture and design. He's a partner at
MagicStack, a Toronto- based IT consultancy firm, which he co-founded in
2008.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>async/await in Python 3.5 and why it is awesome</title><link href="https://pyvideo.org/europython-2016/asyncawait-in-python-35-and-why-it-is-awesome.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/asyncawait-in-python-35-and-why-it-is-awesome.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Yury Selivanov - async/await in Python 3.5 and why it is awesome
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/asyncawait-in-python-35-an-why-it-is-awesome"&gt;https://ep2016.europython.eu//conference/talks/asyncawait-in-python-35-an-why-it-is-awesome&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;async/await is here, everybody can use it in Python 3.5.  It's great
and awesome, yet only a few understand it.  As a PEP 492 author, I'd
really like to have a chance to better explain the topic, show why
async/await is important and how it will affect Python. I'll also tell
a story on how I worked on the PEP -- starting from an idea that I
discussed with Guido on PyCon US 2015, and landing to CPython source
code one and a half moths later!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The talk will start with a brief coverage of the story of asynchronous
programming in Python -- Twisted, Tornado, Stackless Python &amp;amp;
greenlets, eventlet, Tornado, asyncio &amp;amp; curio.  We've come a really
long road, and it's important to understand how we ended up with
async/await.&lt;/p&gt;
&lt;p&gt;Then I'll go over asyncio and curio, showing async/await by example,
explaining that in reality it's a very easy to use language feature.
You don't need to know all the details to be able to successfully use
the new syntax, and even build new frameworks on top of it.&lt;/p&gt;
&lt;p&gt;I'll then explain the async/await machinery in CPython, starting with
generators and 'yield' expression, showing what is 'yield from' and
finally, demonstrating how async/await is implemented in CPython.
This will ensure that those who want to invent some new crazy ways of
using async/await will have a starting point!&lt;/p&gt;
&lt;p&gt;I'll end the talk with a story of how I came up with the idea.  How I
shared it with Guido van Rossum, Victor Stinner, and Andrew Svetlow.
How the first version of the PEP was born, and how we managed to push
it to Python 3.5 in under two months period.  The goal is to make
people understand that it's possible to change your programming
language -- in fact, Python, as any other programming language, wants
new features and capabilities to be relevant.&lt;/p&gt;
</summary></entry><entry><title>Core Developers' Panel</title><link href="https://pyvideo.org/europython-2016/core-developers-panel.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Victor Stinner</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/core-developers-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Victor Stinner/Larry Hastings/Christian Heimes/Yury Selivanov - Core Developers' Panel
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Q&amp;amp;A session with Python core developers&lt;/p&gt;
</summary></entry><entry><title>High Performance Networking in Python</title><link href="https://pyvideo.org/europython-2016/high-performance-networking-in-python.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2016-07-31:europython-2016/high-performance-networking-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Yury Selivanov - High Performance Networking in Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/high-performance-networking-in-python"&gt;https://ep2016.europython.eu//conference/talks/high-performance-networking-in-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The talk will cover new async/await syntax in Python, asyncio library
and ecosystem around it, and ways to use them for creating high
performance servers. It will explain how to build custom event loops
for asyncio, with an example of using the libuv library with Cython to
achieve 2-3x performance boost over vanilla asyncio.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The talk will start with an overview of async/await syntax introduced
with PEP 492 in Python 3.5. We'll go through asynchronous context
managers and iteration protocols it introduces. I'll briefly explain
how the feature is implemented in CPython core.&lt;/p&gt;
&lt;p&gt;Then we'll explore asyncio design. I'll briefly cover event loop,
policies, transports, protocols and streams abstractions. I'll explain
that event loops are pluggable, which really makes asyncio a universal
framework.&lt;/p&gt;
&lt;p&gt;We'll cover libuv - a high performance networking library that drives
NodeJS. I'll highlight where it's similar to asyncio and how it's
different.&lt;/p&gt;
&lt;p&gt;In the final part of the talk I'll explain how to make an asyncio
compatible event loop on top of libuv. I'll showcase Cython, which is
an amazing tool for tasks like this.&lt;/p&gt;
&lt;p&gt;Finally, I'll share some ideas on how we can further improve the
performance of asyncio and networking in Python, and what are the
challenges that we will face.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objectives:&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Deeper understanding of async/await in Python and why it's important.&lt;/li&gt;
&lt;li&gt;Deeper understanding of asyncio architecture and protocols.&lt;/li&gt;
&lt;li&gt;How to improve asyncio performance by implementing custom event loops.&lt;/li&gt;
&lt;li&gt;Show that it's easy to integrate existing complex &amp;amp; low level libraries with Cython.&lt;/li&gt;
&lt;li&gt;Some perspective on how Python may evolve wrt networking.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry></feed>