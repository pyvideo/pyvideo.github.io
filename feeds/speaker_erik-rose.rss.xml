<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 20 May 2017 00:00:00 +0000</lastBuildDate><item><title>Lightning talks May 20th, 2017 Evening session session</title><link>https://pyvideo.org/pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks 2017-05-20 Evening&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;0:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Meredydd Luff&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Compiling blocking Python to non-blocking JS&lt;/strong&gt;
- Wrote client side JS in Python before yield or await
statements, using Skulpt transpiler.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;5:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Efron Licht&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Elements of Style&lt;/strong&gt;
- Write understandable code; write a story. Shorter
functions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;11:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Maria Mckinley&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Refactoring Lengthy Bits of Code&lt;/strong&gt;
- Towards understanding the steps to refactoring: a
test, prose, outline, make functions and tests.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;15:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Erik Rose&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Getting Things Unguilty&lt;/strong&gt;
- Using &amp;quot;getting things done&amp;quot; as a one slide
flowchart.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;21:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Meggie Mahnken&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Using _slots_ for More Opinionated Objects&lt;/strong&gt;
- __slots__ when you don't want to allow attributes;
sometimes efficient.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;26:00&lt;/td&gt;
&lt;td rowspan="3"&gt;Travis&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;Crowd Computing&lt;/strong&gt;
- fun controlling crowds with Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;29:15&lt;/td&gt;
&lt;td rowspan="5"&gt;Allen Downey&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Physical Modeling in Python&lt;/strong&gt;
- Making an interactive book to improve the undergrad
engineering student retention by putting in real world
early.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;33:00&lt;/td&gt;
&lt;td rowspan="4"&gt;Luceneo&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Time is Money&lt;/strong&gt;
- Communicating Professor Antonio Candido's
alternative view to this aphorism.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;35:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Cynthia Lynn&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;PyCon, a High Schooler's Perspective&lt;/strong&gt;
- A 15 year-old programmer.  Didn't come for a job;
felt accepted and welcome.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;41:45&lt;/td&gt;
&lt;td rowspan="4"&gt;David Bieber&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Python Fire, comand line interfaces&lt;/strong&gt;
- A single line or decorators added to functions or
classes to make CLIs; great workflow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;47:15&lt;/td&gt;
&lt;td rowspan="4"&gt;&amp;nbsp;&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Pitches for different conferences&lt;/strong&gt;
- One minute each for Python conferences around the
world.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Merdydd Luff</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/lightning-talks-may-20th-2017-evening-session-session.html</guid><category>lightning talks</category></item><item><title>Constructive Code Review</title><link>https://pyvideo.org/pycon-us-2017/constructive-code-review.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Your code is bad and you are bad. Have a bad day.” Too many code
reviews feel like this, and it saps the enthusiasm that drives open
source. Instead, let’s explore how to give reviews that are truthful but
encouraging, boosting the skill level of contributors and the quality of
the project. We’ll look at “tact hacks” that nudge communication in a
friendly direction, antipatterns to avoid, the pesky human emotions that
can tempt us into reviewing poorly, and techniques for leveling up
newcomers without losing all your coding time.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-19:pycon-us-2017/constructive-code-review.html</guid></item><item><title>Django's Nasal Passage</title><link>https://pyvideo.org/djangocon-us-2012/djangos-nasal-passage.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django's testrunner gets you started quickly, but you soon hit your head
on its limitations as your project grows. By trading it for nose, a
testing framework popular in the wider Python community, we can reduce
boilerplate, boost performance, and improve testing UI, with only a few
lines of setting changes. Re-use your test DBs, integrate with Jenkins,
split your suite into pieces, and more.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Why nose?&lt;ul&gt;
&lt;li&gt;Pain points with standard Django testing&lt;/li&gt;
&lt;li&gt;Extensibility without writing custom, uncombineable testrunner
subclasses&lt;/li&gt;
&lt;li&gt;Rich ecosystem of helpful plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;django-nose&lt;ul&gt;
&lt;li&gt;Testing just your apps, not all the random installed stuff&lt;/li&gt;
&lt;li&gt;Test-selection tricks: running just failed tests, running a
module, etc.&lt;/li&gt;
&lt;li&gt;Killing the boilerplate:&lt;/li&gt;
&lt;li&gt;No more imports into &lt;strong&gt;init&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No more class name collisions and accidental shadowing&lt;/li&gt;
&lt;li&gt;With all this freedom, how best should you organize your tests?&lt;/li&gt;
&lt;li&gt;Going 4 times faster with fixture bundling&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Fixtures are evil&lt;/li&gt;
&lt;li&gt;Where do I put the factories?&lt;/li&gt;
&lt;li&gt;Speeding startup with test DB reuse&lt;/li&gt;
&lt;li&gt;Writing faster TransactionTestCases with hygienic base classes&lt;/li&gt;
&lt;li&gt;Background on Django's handling of TransactionTestCases&lt;/li&gt;
&lt;li&gt;How to improve matters&lt;/li&gt;
&lt;li&gt;Test-only models: what's the best practice?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nose-progressive&lt;ul&gt;
&lt;li&gt;Dots considered harmful. When will my tests be done?&lt;/li&gt;
&lt;li&gt;Patience is for the dead. Show me my tracebacks as they happen!&lt;/li&gt;
&lt;li&gt;My terminal is only this big. Don't waste my space.&lt;/li&gt;
&lt;li&gt;Hiding pointless stack frames&lt;/li&gt;
&lt;li&gt;Editor round-tripping for quick debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Splitting into sub-suites&lt;ul&gt;
&lt;li&gt;An introduction to the attr plugin&lt;/li&gt;
&lt;li&gt;Have some run only on CI machines, some constantly, others before
checkin&lt;/li&gt;
&lt;li&gt;Choosing tests with regexes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other fun plugins&lt;ul&gt;
&lt;li&gt;f7u12, for when your tests get angry&lt;/li&gt;
&lt;li&gt;Coverage&lt;/li&gt;
&lt;li&gt;xunit, for your continual integration pleasure&lt;/li&gt;
&lt;li&gt;Profiling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-06:djangocon-us-2012/djangos-nasal-passage.html</guid><category>django</category><category>nose</category><category>testing</category></item><item><title>Parsing Horrible Things with Python</title><link>https://pyvideo.org/pycon-us-2012/parsing-horrible-things-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you've ever wanted to get started with parsers, here's your chance
for a ground-floor introduction. A harebrained spare-time project gives
birth to a whirlwind journey from basic algorithms to Python libraries
and, at last, to a parser for one of the craziest syntaxes out there:
the MediaWiki grammar that drives Wikipedia.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-11:pycon-us-2012/parsing-horrible-things-with-python.html</guid></item><item><title>Speedily Practical Large-Scale Tests</title><link>https://pyvideo.org/pycon-us-2012/speedily-practical-large-scale-tests.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mozilla's projects have thousands of tests, so we've had to venture
beyond vanilla test runners to keep things manageable. Our secret sauce
can be used with your project as well. Reach beyond the test facilities
that came with your project, harnessing pluggable test frameworks,
dynamically reordering tests for speed, exploring various mocking
libraries, and profiling your way to testing nirvana.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/speedily-practical-large-scale-tests.html</guid></item><item><title>Elasticsearch (Part 1): Indexing and Querying</title><link>https://pyvideo.org/pycon-us-2013/elasticsearch-part-1-indexing-and-querying.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Elasticsearch provides an easy path to clusterable full-text search,
with synonyms, faceting, and geographic math, but there's a paucity of
written wisdom beyond its API docs. This talk, part 1 of a 2-part
series, surveys its capabilities and shows how its internal data
structures and algorithms work. With the groundwork laid, we explore how
to choose efficient indexing and the right queries to make your apps go
fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/elasticsearch-part-1-indexing-and-querying.html</guid><category>talk</category></item><item><title>Designing Poetic APIs</title><link>https://pyvideo.org/pycon-us-2014/designing-poetic-apis.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The language you speak determines the thoughts you can think. Thus, API
designers (and that includes you, if you've ever coined a function) have
a great duty, as language inventors, to expand the mental canvases of
those who come after. We'll concretize that into 7 hallmarks of good
APIs, pulling examples (and bloopers) from popular Python libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/designing-poetic-apis.html</guid></item></channel></rss>