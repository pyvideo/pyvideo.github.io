<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_europython-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-09T00:00:00+00:00</updated><entry><title>Developing a real-time automated trading platform with Python</title><link href="https://pyvideo.org/europython-2016/developing-a-real-time-automated-trading-platform-with-python.html" rel="alternate"></link><published>2016-08-09T00:00:00+00:00</published><updated>2016-08-09T00:00:00+00:00</updated><author><name>Miguel Sánchez de León Peque</name></author><id>tag:pyvideo.org,2016-08-09:europython-2016/developing-a-real-time-automated-trading-platform-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Miguel Sánchez de León Peque - Developing a real-time automated trading platform with Python
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/developing-a-real-time-automated-trading-platform-with-python"&gt;https://ep2016.europython.eu//conference/talks/developing-a-real-time-automated-trading-platform-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Nowadays Python is the perfect environment for developing a real-time
automated trading tool. In this talk we will discuss the development
of: a general-purpose multiagent-system module using Pyro and ZeroMQ;
a platform, based on it, for developing automated trading strategies
using Numpy, Numba, Theano, etc.; and a GUI for visualizing real-time
market data using PyQtGraph and Qt.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;In OpenSistemas we have developed a general-purpose multi-agent system
which is written in pure Python: &lt;em&gt;osBrain&lt;/em&gt;. Agents communicate with
each other using ZeroMQ, allowing the user to define different
communication patterns based on their needs.&lt;/p&gt;
&lt;p&gt;Based on this multi-agent system, we have also developed a broker-
independent platform for real-time automated trading: &lt;em&gt;osMarkets&lt;/em&gt;.
This platform implements specialized agents:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Feeder&lt;/strong&gt; is an agent which receives real-time data from the broker.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Router&lt;/strong&gt; is an agent which receives data from feeders. It manages the historical data and distributes updates to all the subscribed agents in the network.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Brain&lt;/strong&gt; is the most common agent. It receives data from router or from other brains and processes them, sending the results to other brains or sending orders to be executed. Brains can make use of many useful packages avilable in the Python ecosystem: NumPy, SciPy, Numba, Theano...&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trader&lt;/strong&gt; is an agent which is designed to interact with the broker, just as the feeder, but to execute market orders.&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="alternate text" class="align-center" src="http://i.imgur.com/A9vsWee.png" style="width: 100%;" /&gt;
&lt;p&gt;While it is still in its earliest stages, we are developing a tool for
real-time visualization of trading strategies using PyQtGraph. This
tool acts as an agent in the multi-agent system.&lt;/p&gt;
&lt;img alt="alternate text" class="align-center" src="http://i.imgur.com/5XS7oBQ.png" style="width: 100%;" /&gt;
</summary></entry><entry><title>CFFI: calling C from Python</title><link href="https://pyvideo.org/europython-2016/cffi-calling-c-from-python.html" rel="alternate"></link><published>2016-08-08T00:00:00+00:00</published><updated>2016-08-08T00:00:00+00:00</updated><author><name>Armin Rigo</name></author><id>tag:pyvideo.org,2016-08-08:europython-2016/cffi-calling-c-from-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Armin Rigo - CFFI: calling C from Python
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/cffi-calling-c-from-python"&gt;https://ep2016.europython.eu//conference/talks/cffi-calling-c-from-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this talk, we will see an intro to CFFI, an alternative to using the standard C API to extend Python. CFFI works on CPython and on PyPy. It is a possible solution to a problem that hits notably PyPy --- the CPython C API.&lt;/p&gt;
&lt;p&gt;The CPython C API was great and contributed to the present-day success of Python, together with tools built on top of it like Cython and SWIG. I will argue that it may be time to look beyond it, and present CFFI as such an example.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I will introduce CFFI, a way to call C libraries from Python.     &lt;a class="reference external" href="http://cffi.readthedocs.org/"&gt;http://cffi.readthedocs.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CFFI was designed in 2012 to get away from Python's C extension modules, which require hand-written CPython-specific C code.  CFFI is arguably simpler to use: you call C from Python directly, instead of going through an intermediate layer.  It is not tied to CPython's internals, and works natively on two different Python implementations: CPython and PyPy.  It could be ported to more implementations.&lt;/p&gt;
&lt;p&gt;It is also a big success, according to the download statistics.  Some high-visibility projects like Cryptography have switched to it.&lt;/p&gt;
&lt;p&gt;Part of the motivation for developing CFFI is that it is a minimal layer that allows direct access to C from Python, with no fixed intermediate C API.  It shares ideas from Cython, ctypes, and LuaJIT's ffi, but the non-dependence on any fixed C API is a central point.&lt;/p&gt;
&lt;p&gt;It is a possible solution to a problem that hits notably PyPy --- the CPython C API.  The CPython C API was great and, we can argue, it contributed a lot to the present-day success of Python, together with tools built on top of it like Cython and SWIG.  However, it may be time to look beyond it.  This talk will thus present CFFI as such an example. This independence is what lets CFFI work equally well on CPython and on PyPy (and be very fast on the latter thanks to the JIT compiler).&lt;/p&gt;
</summary></entry><entry><title>Scientist meets web dev: how Python became the language of data</title><link href="https://pyvideo.org/europython-2016/scientist-meets-web-dev-how-python-became-the-language-of-data.html" rel="alternate"></link><published>2016-08-07T00:00:00+00:00</published><updated>2016-08-07T00:00:00+00:00</updated><author><name>Gaël Varoquaux</name></author><id>tag:pyvideo.org,2016-08-07:europython-2016/scientist-meets-web-dev-how-python-became-the-language-of-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gaël Varoquaux - Scientist meets web dev: how Python became the language of data
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/keynote-science-web-dev"&gt;https://ep2016.europython.eu//conference/talks/keynote-science-web-dev&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Data science is a hot topic and  Python has emerged as an ideal language for it.
Its strength for data analysis come from the cultural mix between the scientific Python community, and more conventional software usage, such as web development or system administration. I'll show how and why Python is a easy and powerful tool for data science.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python started as a scripting language, but now it is the new trend everywhere and in particular for data science, the latest rage of computing. It didn't get there by chance: tools and concepts built by nerdy scientists and geek sysadmins provide foundations for what is said to be the sexiest job: data scientist.&lt;/p&gt;
&lt;p&gt;In my talk I'll give a personal perspective, historical and technical, on the progress of the scientific Python ecosystem, from numerical physics to data mining. What made Python suitable for science; How could scipy grow to challenge commercial giants such as Matlab; Why the cultural gap between scientific Python and the broader Python community turned out to be a gold mine; How scikit-learn was born, what technical decisions enabled it to grow; And last but not least, how we are addressing a wider and wider public, lowering the bar and empowering people.&lt;/p&gt;
&lt;p&gt;The talk will discuss low-level technical aspects, such as how the Python world makes it easy to move large chunks of number across code. It will touch upon current exciting developments in scikit-learn and joblib. But it will also talk about softer topics, such as project dynamics or documentation, as software's success is determined by people.&lt;/p&gt;
</summary></entry><entry><title>3D Modeling and Printing by Python</title><link href="https://pyvideo.org/europython-2016/3d-modeling-and-printing-by-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Takuro Wada</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/3d-modeling-and-printing-by-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Takuro Wada - 3D Modeling and Printing by Python
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/3d-modeling-and-printing-by-python"&gt;https://ep2016.europython.eu//conference/talks/3d-modeling-and-printing-by-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Creating 3D model for 3D printing is pretty hard for non 3D CG
designer or non 3D CAD engineer. But recently, so many 3D software
(like Maya,  Blender, Fusion360 and so on) provides Python API to
manipulate 3D data in those software. So in this session,  I will
introduce Python API of Blender  and Autodesk Fusion 360 and share
some basic knowledge and tips when you use these API. I will also
introduce my past projects with those APIs.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creating 3D model for 3D printing is pretty hard for &lt;strong&gt;non 3D CG designer or non 3D CAD engineer&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Recently, so many 3D software (like Maya,  Blender, Fusion360 and so on) provides Python API to manipulate 3D data in those software. Once you learn these Python API, you can generate 3D model by Python  and 3D print those generated model.&lt;/li&gt;
&lt;li&gt;In this session,  I will introduce Python API of some softwares and share some basic knowledges and tips when you use these API. I will also introduce my past projects with those APIs and my products.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="goal"&gt;
&lt;h4&gt;Goal&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduce 3D model generation and 3D printing with Python to audience&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="after-this-session-you-will"&gt;
&lt;h4&gt;After this session, you will&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Acquire the basic knowledge of 3D data structure&lt;/li&gt;
&lt;li&gt;Understand basic concepts of Python API provided by 3D softwares&lt;/li&gt;
&lt;li&gt;Acquire knowledge to start your 3D model generation project by Python&lt;/li&gt;
&lt;li&gt;Know past 3D model generation projects by Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisite"&gt;
&lt;h4&gt;Prerequisite&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basic knowledge of Python&lt;/li&gt;
&lt;li&gt;Interests for 3D modeling and 3D printing by Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://takuro.ws/img/euro_python.jpg"&gt;http://takuro.ws/img/euro_python.jpg&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>A Gentle Introduction to Neural Networks (with Python)</title><link href="https://pyvideo.org/europython-2016/a-gentle-introduction-to-neural-networks-with-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Tariq Rashid</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/a-gentle-introduction-to-neural-networks-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tariq Rashid - A Gentle Introduction to Neural Networks (with Python)
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/a-gentle-introduction-to-neural-networks-with-python"&gt;https://ep2016.europython.eu//conference/talks/a-gentle-introduction-to-neural-networks-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A gentle introduction to neural networks, and making your own with Python.&lt;/p&gt;
&lt;p&gt;This session is deliberately designed to be accessible to everyone, including anyone with no expertise in mathematics, computer science or Python.&lt;/p&gt;
&lt;p&gt;From this session you will have an intuitive understanding of what neural networks are and how they work. If you are more technically capable, you will see how you could make your own with Python and numpy.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Part 1 - Ideas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The search for AI, hard problems for computers easy for humans&lt;/li&gt;
&lt;li&gt;Learning from examples (simple classifier)&lt;/li&gt;
&lt;li&gt;Biologically inspired neurons and networks&lt;/li&gt;
&lt;li&gt;Training a neural network - the back propagation breakthrough&lt;/li&gt;
&lt;li&gt;Matrix ways of working (good for computers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2 - Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python is easy, and everywhere&lt;/li&gt;
&lt;li&gt;Python notebooks&lt;/li&gt;
&lt;li&gt;The MNIST data set&lt;/li&gt;
&lt;li&gt;A very simple neural network class&lt;/li&gt;
&lt;li&gt;Focus on concise and efficient matrix calculations with bumpy&lt;/li&gt;
&lt;li&gt;97.5% accuracy recognising handwritten numbers - with just a few lines of code!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>An Introduction to Deep Learning</title><link href="https://pyvideo.org/europython-2016/an-introduction-to-deep-learning.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Geoff French</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/an-introduction-to-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geoff French - An Introduction to Deep Learning
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/an-introduction-to-deep-learning"&gt;https://ep2016.europython.eu//conference/talks/an-introduction-to-deep-learning&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Deep learning: how it works, how to train a deep neural network, the
theory behind deep learning, recent developments and applications.
(length: 60 mins)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;(length: 60 mins)    In the last few years, deep neural networks have
been used to generate state of the art results in image
classification, segmentation and object detection. They have also
successfully been used for speech recognition and textual analysis. In
this talk, I will give an introduction to deep neural networks. I will
cover how they work, how they are trained, and a little bit on how to
get going. I will briefly discuss some of the recent exciting and
amusing applications of deep learning. The talk will primarily focus
on image processing.&lt;/p&gt;
&lt;p&gt;If you completely new to deep learning, please attend T. Rashid's talk
'A Gentle Introduction to Neural Networks (with Python)'. His talk is
in the same room immediately before mine and his material is really
good and will give you a good grounding in what I will present to you.
:)
You may also want to attend I' Lewis' talk 'Deep Learning with Python
&amp;amp; TensorFlow' after Lunch in the PyCharm room to round it all off! :)&lt;/p&gt;
</summary><category term="deep learning"></category></entry><entry><title>Beyond scraping</title><link href="https://pyvideo.org/europython-2016/beyond-scraping.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Anthon van der Neut</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/beyond-scraping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anthon van der Neut - Beyond scraping
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/beyond-scraping-getting-data-from-dynamic-heavily-javascript-driven-websites"&gt;https://ep2016.europython.eu//conference/talks/beyond-scraping-getting-data-from-dynamic-heavily-javascript-driven-websites&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk show how a to create a simple, evolving, client server
architecture combining  zeromq, selenium and beautifulsoup, which
allows you to scrape data even from variable dynamic sites like
Sporcle and KhanAcademy. Once the page analysis has been implemented
regular &amp;quot;downloads&amp;quot; can easily be deployed without cluttering your
desktop,  your headless server and/or anonymously.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Scraping  static websites can be done with &lt;cite&gt;urllib2&lt;/cite&gt; from the standard
library, or with some slightly more sophisticated packages like
&lt;cite&gt;requests&lt;/cite&gt;.
However as soon as JavaScript comes into play on the website you want
to download information from, for things like logging in via openid or
constructing the pages content, you almost always have to fall back to
driving a real browser.
For web sites with variable content this is can be  time consuming and
cumbersome process.&lt;/p&gt;
&lt;p&gt;This talk show how a to create a simple, evolving, client server
architecture combining  zeromq, selenium and beautifulsoup, which
allows you to scrape data from sites like Sporcle, StackOverflow and
KhanAcademy. Once the page analysis has been implemented regular
&amp;quot;downloads&amp;quot; can easily be deployed without cluttering your desktop,
your headless server and/or anonymously.&lt;/p&gt;
&lt;p&gt;The described client server setup allows you to restart your changed
analysis program without having to redo all the previous steps of
logging in and stepping through instructions to get back to the page
where you got &amp;quot;stuck&amp;quot; earlier on. This often decreases the time
between entering a possible fix in your HTML analysis code en testing
it, down to less than a second from a few tens of seconds in case you
have to restart a browser.&lt;/p&gt;
&lt;p&gt;Using such a setup you have time to focus on writing robust code
instead of code that breaks  with every little change the sites
designers make.&lt;/p&gt;
</summary></entry><entry><title>Brainwaves for Hackers 3.0</title><link href="https://pyvideo.org/europython-2016/brainwaves-for-hackers-30.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Andreas Klostermann</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/brainwaves-for-hackers-30.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Klostermann - Brainwaves for Hackers 3.0
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/brainwaves-for-hackers-3"&gt;https://ep2016.europython.eu//conference/talks/brainwaves-for-hackers-3&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk is about using our &lt;strong&gt;Python&lt;/strong&gt; skills to explore the
&lt;strong&gt;secrets of our brains&lt;/strong&gt;.   Using the Neurosky Mindwave as a
bluetooth connected EEG device, I'll talk about new experiments I have
performed inside the Jupyter notebook, for example &amp;quot;Evoked Response
Potentials&amp;quot; and more about &amp;quot;Neuro Feedback&amp;quot; training.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Electroencephalography &lt;strong&gt;(EEG)&lt;/strong&gt; measures potential waves originating
within the brain. Billions of brain cells fire  inside your brain,
each sending out a minuscule wave. The summed potential waves can be
measured, even with quite cheap and &lt;strong&gt;portable devices&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Being the third major version of this talk, I'll talk briefly about
the Neurosky Mindwave and the Muse headset. I have also developed more
interactive Jupyter experiments, which I'll demonstrate in the talk.
For example &lt;strong&gt;Evoked Response Potentials (ERP)&lt;/strong&gt; can be demonstrated
with relatively simple means. Also I'll talk some more about
experiments with &lt;strong&gt;Neuro Feedback&lt;/strong&gt;.&lt;/p&gt;
</summary></entry><entry><title>Build your first OpenStack application with OpenStack PythonSDK</title><link href="https://pyvideo.org/europython-2016/build-your-first-openstack-application-with-openstack-pythonsdk.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Victoria Martinez de la Cruz</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/build-your-first-openstack-application-with-openstack-pythonsdk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Victoria Martinez de la Cruz - Build your first OpenStack application with OpenStack PythonSDK
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/build-your-first-openstack-application-with-openstack-pythonsdk"&gt;https://ep2016.europython.eu//conference/talks/build-your-first-openstack-application-with-openstack-pythonsdk&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Join this talk to learn about the OpenStack Python SDK and how to
deploy your web app  step by step using different components in
OpenStack.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;How many times you heard about OpenStack and all the cool things it is
being used for? Most of the use cases are big players that need to
handle huge amounts of data and automate complex infrastructures. But
what about actually using it, for you as a developer, to deploy a
simple app? In my case, at least, that has not be an usual topic of
discussion when talking about OpenStack. In this talk I'll introduce
the OpenStack Python SDK, a project relatively new in the OpenStack
ecosystem, and show you step by step how to deploy your own web app
using different components in OpenStack.&lt;/p&gt;
</summary></entry><entry><title>Building beautiful RESTful APIs using Flask</title><link href="https://pyvideo.org/europython-2016/building-beautiful-restful-apis-using-flask.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Michał Karzyński</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/building-beautiful-restful-apis-using-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michał Karzyński - Building beautiful RESTful APIs using Flask
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1"&gt;https://ep2016.europython.eu//conference/talks/building-beautiful-restful-apis-using-flask-1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk demonstrates a technique for developing RESTful APIs using
Flask and Flask-Restplus. These tools automate common API tasks such
as: validating input, serializing output, routing requests to methods,
and turning Python exceptions into HTTP responses.&lt;/p&gt;
&lt;p&gt;The final API comes with a Swagger interactive UI, which documents all
endpoints and makes testing easy. The described tools tools provide
just enough syntactic sugar to make your code readable, scalable and
easy to maintain.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Modern software is powered by APIs. User facing apps may run in the
browser or on mobile platforms, but they almost universally rely on
data stored in the cloud. More often then not apps use a RESTful API
to exchange data with the server.&lt;/p&gt;
&lt;p&gt;In my talk I will demonstrate a technique for developing RESTful APIs
using the [Flask][1] micro-framework and [Flask-Restplus][2]. These
powerful tools automate most common tasks associated with API
development: validating input, serializing output, routing requests to
methods, and turning Python exceptions into machine-readable HTTP
responses.&lt;/p&gt;
&lt;p&gt;A Flask-Restplus API is fully documented by [Swagger][3] which lists
all defined endpoints, their query parameters and the format of input
and output JSON objects. Swagger generates an [interactive UI][4] for
selecting options and easily testing queries. Flask and Flask-Restplus
provide just enough syntactic sugar to make your code readable,
scalable and easy to maintain.&lt;/p&gt;
&lt;p&gt;My presentation will give an overview of the features of Flask and
Flask-Restplus; I will describe how easy it is to get started and
discuss some best practices for building complex APIs using this
approach. I will wrap up by briefly mentioning other components of the
Flask ecosystem, which give this micro-framework power to match fully-
loaded systems such as Django.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;http://flask.pocoo.org/&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://flask-restplus.readthedocs.org/en/latest/"&gt;http://flask-restplus.readthedocs.org/en/latest/&lt;/a&gt;
[3]: &lt;a class="reference external" href="http://swagger.io/"&gt;http://swagger.io/&lt;/a&gt;
[4]: &lt;a class="reference external" href="http://petstore.swagger.io/#/pet"&gt;http://petstore.swagger.io/#/pet&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Building Service interfaces with OpenAPI / Swagger</title><link href="https://pyvideo.org/europython-2016/building-service-interfaces-with-openapi-swagger.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Stephan Jaensch</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/building-service-interfaces-with-openapi-swagger.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephan Jaensch - Building Service interfaces with OpenAPI / Swagger
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/building-service-interfaces-using-OpenAPI"&gt;https://ep2016.europython.eu//conference/talks/building-service-interfaces-using-OpenAPI&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Ever wondered how to keep track of all of your services and their
APIs? I'm going to explore how to build your Python services with
OpenAPI/Swagger and how it helps you solve problems like communication
between services, request and response validation, and documentation
of your API. I'll also discuss some challenges you might face when
running Swagger in production, gathered from over a year of heavy
usage at Yelp.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Implementing a service-oriented architecture (SOA) is a proven way to
split up large monolithic codebases and to scale development when your
organization grows to hundreds or thousands of engineers. I'm going to
explore how to build and document your services with OpenAPI (formerly
known as Swagger). I’ll discuss the benefits, how to generate a
beautiful HTML documentation for your API, and how you can
effortlessly make calls to your services. In the second part of the
talk I'll discuss and tell you how to overcome challenges you might
face when running OpenAPI in production, gathered from over a year of
heavy usage at Yelp for hundreds of services.&lt;/p&gt;
&lt;p&gt;The OpenAPI initiative is a cross-vendor consortium focused on
creating, evolving and promoting a vendor neutral description format.
As an open governance structure under the Linux Foundation, its
members include Google, IBM, Atlassian and PayPal.&lt;/p&gt;
</summary></entry><entry><title>Buildout Django eta Fabric. Kasu praktikoa euskarazko tokiko hedabideetan</title><link href="https://pyvideo.org/europython-2016/buildout-django-eta-fabric-kasu-praktikoa-euskarazko-tokiko-hedabideetan.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Jatsu Argarate</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/buildout-django-eta-fabric-kasu-praktikoa-euskarazko-tokiko-hedabideetan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jatsu Argarate - Buildout Django eta Fabric. Kasu praktikoa euskarazko tokiko hedabideetan
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/buildout-django-eta-fabric-kasu-praktikoa-euskarazko-tokiko-hedabideetan"&gt;https://ep2016.europython.eu//conference/talks/buildout-django-eta-fabric-kasu-praktikoa-euskarazko-tokiko-hedabideetan&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Hainbat zerbitzaritan  dauden eta plataforma  bakar batean oinarrituta
dagoen plataforma baten mantentzea  Buildout Django Fabric eta
erabiliz. Kasu praktikoa euskarazko tokiko hedabideak.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Hainbat bezerorentzako neurrira egindako edukiak kudeatzeko
plataforma bat garatu dugu Django Frameworka erabiliz. Guztia
kudeatzeko eta erabilitako bertsioak kontrolatzeko zc.buildout
erabiltzen dugu, baina plataforma hazten doa eta iada dozena bat
instalazio ditugu hainbat zerbitzaritan zehar banatuta. Plataformaren
oinarria berbera denez, instalazio guztietan eguneraketak
argitaratzeko  buildout eta  fabric-en oinarritutako sistema
erabiltzen dugu.
Hitzaldi honetan azalduko duguna.&lt;/p&gt;
</summary></entry><entry><title>Clean code in Python</title><link href="https://pyvideo.org/europython-2016/clean-code-in-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mariano Anaya</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/clean-code-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mariano Anaya - Clean code in Python
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/clean-code-in-python"&gt;https://ep2016.europython.eu//conference/talks/clean-code-in-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Introduction to the clean code principles applied to Python code.
Let's honor the readable nature of the Python syntax so anyone can
maintain our code: &amp;quot;readability counts&amp;quot;.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality and how they
apply for Python. We analyse technical debt, refactoring, and unit
testing in the context of a project striving for a better code base.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Introduction to the clean code principles tailored for Python
projects. The goal is to achieve better code quality and a more
maintainable code base. Python has a nature of being clear, and easy
to follow, so let's take advantage of it in our own code, in order to
enforce the principle &amp;quot;readability counts&amp;quot; by writing pythonic code.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality for Python
developers, analyzing technical debt, with examples on how to achieve
a more legible, maintainable and clean code base, by refactoring,
writing unit tests and having good coding guidelines for the project.
If you are giving your first steps with Python, you will gain insight
on best practices for writing good software from the start. If you are
a experienced developer, the ideas should work as food for thought,
helping with recommendations for code reviews, best practices, etc.&lt;/p&gt;
</summary></entry><entry><title>Create secure production environment using Docker</title><link href="https://pyvideo.org/europython-2016/create-secure-production-environment-using-docker.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Andrés Cidel</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/create-secure-production-environment-using-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrés Cidel - Create secure production environment using Docker
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/create-secure-production-environment-using-docker"&gt;https://ep2016.europython.eu//conference/talks/create-secure-production-environment-using-docker&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The purpose of this talk if pointing out that using Docker in
production is perfectly valid, not just for develop and CI
environments.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Docker is a relatively new technology platform that helps teams
develop, deploy and scale applications with greater ease and speed.
However, there are doubts about using Docker in production
environments. One important reason is that containers don't provide
the same security layer as hypervisors do.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is pointing out that using Docker in
production is perfectly valid, not just for develop and CI
environments.&lt;/p&gt;
&lt;p&gt;We'll learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How Docker works.&lt;/li&gt;
&lt;li&gt;Main risks.&lt;/li&gt;
&lt;li&gt;How create and maintain secure images.&lt;/li&gt;
&lt;li&gt;How defend containers.&lt;/li&gt;
&lt;li&gt;How delimit security risks in containers.&lt;/li&gt;
&lt;li&gt;Best practices for running containers.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Datu bistaratze soluzioen garapena Smartcity proiektuetan</title><link href="https://pyvideo.org/europython-2016/datu-bistaratze-soluzioen-garapena-smartcity-proiektuetan.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Iker Martinez de Agirre Mendia</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/datu-bistaratze-soluzioen-garapena-smartcity-proiektuetan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Iker Martinez de Agirre Mendia - Datu bistaratze soluzioen garapena Smartcity proiektuetan
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/datu-bistaratze-soluzioen-garapena-smartcity-proiektuetan-1"&gt;https://ep2016.europython.eu//conference/talks/datu-bistaratze-soluzioen-garapena-smartcity-proiektuetan-1&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Laburbilduz, kontsumo energetikoaren datuak modu sinple eta argi
batean bistaratzen dituen web orrialde bat sortu da Django erabiliz.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mondragon Unibertsitateko inbestigazio taldea Smartcity-en aplikazio
eta monitorizazioen inguruko proiektuetan lanean ari da, non herrialde
ezberdinetako gune konkretuetan bizi diren pertsonen kontsumo
energetikoa jaso eta aztertzen den. Proiektu hauetako bi CITyFiED eta
ARROWHEAD dira.&lt;/p&gt;
&lt;p&gt;Kontsumo hori eta horren harira ondorioztatutako aholku energetikoak
erabiltzailearengana heltzeko, bistaratze soluzio bat garatu da, web
orrialde bat alegia.&lt;/p&gt;
&lt;p&gt;Erabiltzailean oinarritutako diseinua (User Centered Design)
aplikatuz, gailu ezberdinetara moldatzen den (Responsive Web Design,
Mobile-First) web bat sortu da, Django Web Framework tresnaren
bitartez. REST API (Django Rest Framework) baten bidez, informazioa
gordetzen den datu basea atzitzen da, kontsumoak eta beraien bilakaera
bistaratze libreriak (D3.js) erabiliz irudikatuz. Horrez gain, Djangok
eskaintzen dituen aukerak baliatuz, web orrialdea hizkuntza
ezberdinetan bistaratu daiteke.&lt;/p&gt;
&lt;p&gt;Laburbilduz, kontsumo energetikoaren datuak modu sinple eta argi
batean bistaratzen dituen web orrialde bat sortu da Django erabiliz.&amp;quot;&lt;/p&gt;
</summary></entry><entry><title>Deep Learning with Python &amp; TensorFlow</title><link href="https://pyvideo.org/europython-2016/deep-learning-with-python-tensorflow.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Ian Lewis</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/deep-learning-with-python-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ian Lewis - Deep Learning with Python &amp;amp; TensorFlow
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow"&gt;https://ep2016.europython.eu//conference/talks/deep-learning-with-python-tensorflow&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production app? In this talk I will discuss how you can use TensorFlow
to create Deep Learning applications. I will discuss how it compares
to other Python machine learning libraries, and how to deploy into
production.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning
libraries. But there are many problems when starting out on a machine
learning project. Which library do you use? How do they compare to
each other? How can you use a model that has been trained in your
production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open-Source framework created at Google for
building Deep Learning applications. Tensorflow allows you to
construct easy to understand data flow graphs in Python which form a
mathematical and logical pipeline. Creating data flow graphs allow
easier visualization of complicated algorithms as well as running the
training operations over multiple hardware GPUs in parallel.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how you can use TensorFlow to create Deep
Learning applications. I will discuss how it compares to other Python
machine learning libraries like Theano or Chainer. Finally, I will
discuss how trained TensorFlow models could be deployed into a
production system using TensorFlow Serve.&lt;/p&gt;
</summary><category term="tensorflow"></category><category term="deep learning"></category></entry><entry><title>Do I need to switch to Go(lang) ?</title><link href="https://pyvideo.org/europython-2016/do-i-need-to-switch-to-golang.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Max Tepkeev</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/do-i-need-to-switch-to-golang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Max Tepkeev - Do I need to switch to Go(lang) ?
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/do-i-need-to-switch-to-golang"&gt;https://ep2016.europython.eu//conference/talks/do-i-need-to-switch-to-golang&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Nowadays, there is a lot of buzz about Go. In this talk we'll learn
the basics and most important concepts of the language, we'll further
discuss differences and similarities in Go and Python and dive into
the cool features of Go. Finally we'll talk about why popularity of Go
is raising so fast and try to answer the most important question: Do I
need to switch to Go ?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Nowadays, there is a lot of buzz about Go. It happened so that for the
last 6 months I've been mostly programming Go, and frankly speaking I
fell in love with this language.&lt;/p&gt;
&lt;p&gt;We'll first do a quick review of the language. Go doesn't have some
language constructs, for example classes and exceptions and at first
it may seem hard to write proper Go code, but in practice the language
is so easy that I will try to teach you the basics and most important
concepts of the language. We'll further discuss differences and
similarities in Go and Python and dive into the cool features of Go.&lt;/p&gt;
&lt;p&gt;Finally we'll talk about why popularity of Go is raising so fast and
try to answer the most important question: Do I need to switch to Go ?&lt;/p&gt;
</summary></entry><entry><title>Effectively test your webapp with Python and Selenium</title><link href="https://pyvideo.org/europython-2016/effectively-test-your-webapp-with-python-and-selenium.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Andrei Coman</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/effectively-test-your-webapp-with-python-and-selenium.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrei Coman - Effectively test your webapp with Python and Selenium
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/effectively-test-your-webapp-with-python-and-selenium"&gt;https://ep2016.europython.eu//conference/talks/effectively-test-your-webapp-with-python-and-selenium&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We will explore the lessons learned on maintaining a Selenium test
suite against a webapplication and how to leverage python tools to
make this process easy and transparent.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;How often do you run your Selenium test suite? How fast do you get a
result from it?
Would you like to answer with: &amp;quot;Whenever I feel like it&amp;quot; and &amp;quot;Well,
about the time it takes me to finish a coffee&amp;quot; ? This talk will try to
get you closer to these answers.&lt;/p&gt;
&lt;p&gt;We will have a look at the lessons learned and the challenges my team
faced  maintaining a Selenium test suite against a long-lived Django
web application.&lt;/p&gt;
&lt;p&gt;We will go over the pros and cons of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;test design approaches&lt;/li&gt;
&lt;li&gt;technologies we used (nose, py.test, LiveServerTestCase)&lt;/li&gt;
&lt;li&gt;reporting tools&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>EITB Nahieran: askatu bideoak API honen bidez</title><link href="https://pyvideo.org/europython-2016/eitb-nahieran-askatu-bideoak-api-honen-bidez.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mikel Larreategi</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/eitb-nahieran-askatu-bideoak-api-honen-bidez.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mikel Larreategi - EITB Nahieran: askatu bideoak API honen bidez
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/eitb-nahieran-askatu-bideoak-api-honen-bidez"&gt;https://ep2016.europython.eu//conference/talks/eitb-nahieran-askatu-bideoak-api-honen-bidez&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;EITB Nahieran zerbitzuaren informazioa era erabilgarrian erakusteko
APIaren nondik norakoak erakutsiko ditut hitzaldian.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Iaz Raspberry PI bat erosi nuen eta ez nekien zer egin berarekin...
Aurten Kodi softwarea erabiliz media-center bihurtu dut Raspberrya.&lt;/p&gt;
&lt;p&gt;Kodirako 'tvalacarta' izeneko plugin bat zegoen berarekin EITB
Nahieran ikusteko, baina ez zebilen. Saiatu nintzen EITB Nahieranen
kodea funtzionarazten, eta asko kostata informazioa hiru era
ezberdinetan ateratzea lortu nuen. Azkenean, funtzionamendua errazteko
API bat prestatu dut EITB Nahieranen dagoen informazioa atzitzeko eta
edozeinek erabili ahal dezan.&lt;/p&gt;
&lt;p&gt;[Aurkezpena][1] eta [aurkeztutako kodea][2]&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://erral.github.io/eitbapi"&gt;https://erral.github.io/eitbapi&lt;/a&gt;
[2]: &lt;a class="reference external" href="https://github.com/erral/eitbapi"&gt;https://github.com/erral/eitbapi&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Endor, ipuinak kontatzen zituen Nao robota.</title><link href="https://pyvideo.org/europython-2016/endor-ipuinak-kontatzen-zituen-nao-robota.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>L. Ozaeta</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/endor-ipuinak-kontatzen-zituen-nao-robota.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L. Ozaeta - Endor, ipuinak kontatzen zituen Nao robota.
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/endor-ipuinak-kontatzen-zituen-nao-robota"&gt;https://ep2016.europython.eu//conference/talks/endor-ipuinak-kontatzen-zituen-nao-robota&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Aurkezpen honetan Nao robotaren Choreographe programazio ingurumenaren
sarrera bat egiten da, pythonek errobotikan duen erabilpena erakutsiz.
Aurkezpen guztia aurkezleak orain arte egindako lanean oinarritzen da.
Lehenik eta behin, programa baten estruktura erakutsiko da. Ondoren,
liburutegi bat nola gehitu erakutsiko da, liburutegiaren instalazioak
ekar ditzakeen arazoak aztertuz. Azkenik, Naoaren gorputz jarreran
zein diskurtsoaren naturaltasunean egindako aurrerapenak azalduko
dira.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Honekin lortu nahi diren helburuak honako hauek dira:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Choreographeko proiektu baten estruktura ezagutzea.&lt;/li&gt;
&lt;li&gt;Nao robot baten oinarrizko programa bat ikustea.&lt;/li&gt;
&lt;li&gt;Chorepgraphek ematen dituen programazio blokeak eraldatzen jakitea, python erabiliz.&lt;/li&gt;
&lt;li&gt;Choreographen eskaintzen diren tresnen bitartez, programan python liburutegi bat gehitzen ikastea.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aurkezpen hau ulertzeko ez dago eskakizunik. Python pixka bat dakien
edonork (“hello world” bat egiten jakitearekin balio du) ulertzeko
mailan emango da eta ez da konplexutasun tekniko handiko azalpenik
emango. Printzipioz python ezagutzen ez duen edonor ere aurkezpen ia
osoa ulertzeko gai izango da, programazio ingurumen bezala ez baita
kodean gehiegi sartzen, pythonekin hasteko aukera ona izanez.&lt;/p&gt;
</summary></entry><entry><title>Entendiendo Unicode</title><link href="https://pyvideo.org/europython-2016/entendiendo-unicode.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Facundo Batista</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/entendiendo-unicode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facundo Batista - Entendiendo Unicode
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/entendiendo-unicode"&gt;https://ep2016.europython.eu//conference/talks/entendiendo-unicode&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Charla que explica qué es Unicode y otros conceptos relacionados para
poder usar esta tecnología&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;La charla muestra de forma teórica/práctica qué son Unicode, las
planillas de códigos, los caracteres, y las codificaciones, entra en
detalle en las distintas codificaciones, para saber cómo usarlas,
ejemplifica las reglas de oro para utilizar Unicode en nuestros
programa, y termina mostrando algunas funciones útiles para el manejo
de esa tecnología.&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2016 Closing Session</title><link href="https://pyvideo.org/europython-2016/europython-2016-closing-session.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Fabio Pliger</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/europython-2016-closing-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fabio Pliger/Marc-André Lemburg - Closing Session
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/closing-session"&gt;https://ep2016.europython.eu//conference/talks/closing-session&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Closing Session&lt;/p&gt;
</summary></entry><entry><title>Exploring Python Bytecode</title><link href="https://pyvideo.org/europython-2016/exploring-python-bytecode.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Anjana Vakil</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/exploring-python-bytecode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anjana Vakil - Exploring Python Bytecode
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/exploring-python-bytecode"&gt;https://ep2016.europython.eu//conference/talks/exploring-python-bytecode&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Do you ever wonder how your Python code looks to the interpreter? What
those &lt;cite&gt;.pyc&lt;/cite&gt; files are? Why one program outperforms another, even if
the code is similar? Then let’s dive into Python bytecode! Bytecode is
the &amp;quot;intermediate language&amp;quot; that expresses your source code as machine
instructions the interpreter can understand. In this talk we’ll see
what role it plays in executing Python programs, learn to read it with
the &lt;cite&gt;dis&lt;/cite&gt; module, and analyze it to better understand a program’s
performance.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Do you ever wonder what your simple, beautiful Python code looks like
to the interpreter? Are you starting to get curious about those &lt;cite&gt;.pyc&lt;/cite&gt;
files that always pop up in your project, and you always ignore? Would
you like to start investigating your Python code's performance, and
learn why some programs you write run faster than others, even if the
code looks more or less the same? Have you simply fallen so completely
in love with Python that you're ready to peer deep inside its soul?&lt;/p&gt;
&lt;p&gt;If you, like me, answered &amp;quot;yes&amp;quot; to any of these questions, join me in
an illuminating adventure into the world of Python bytecode! Bytecode
is the &amp;quot;intermediate language&amp;quot; that expresses your Python source code
as machine instructions the interpreter (specifically CPython, the
&amp;quot;standard&amp;quot; interpreter) can understand. Together we'll investigate
what that means, and what role bytecode plays in the execution of a
Python program. We'll discover how we simple humans can read this
machine language using the &lt;cite&gt;dis&lt;/cite&gt; module, and inspect the bytecode for
some simple programs. We'll learn the meaning of a few instructions
that often appear in our bytecode, and we'll find out how to learn the
rest. Finally, we'll use bytecode to understand why a piece of Python
code runs faster if we put it inside of a function.&lt;/p&gt;
&lt;p&gt;When you go home, you'll be able to use bytecode to get a deeper
understanding of your Python code and its performance. The adventure
simply starts here; where it ends is up to you!&lt;/p&gt;
</summary></entry><entry><title>FBTFTP: Facebook's open source python3 framework for dynamic TFTP servers.</title><link href="https://pyvideo.org/europython-2016/fbtftp-facebooks-open-source-python3-framework-for-dynamic-tftp-servers.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Angelo Failla</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/fbtftp-facebooks-open-source-python3-framework-for-dynamic-tftp-servers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Angelo Failla - FBTFTP: Facebook's open source python3 framework for dynamic TFTP servers.
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/fbtftp-facebooks-python3-framework-for-tftp-servers"&gt;https://ep2016.europython.eu//conference/talks/fbtftp-facebooks-python3-framework-for-tftp-servers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;FBTFTP: facebook's opensource framework for creating dynamic TFTP
servers in Python3.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;TFTP was first standardized in '81 (same year I was born!) and one of
its primary uses is in the early stage of network booting. TFTP is
very simple to implement, and one of the reasons it is still in use is
that its small footprint allows engineers to fit the code into very
low resource, single board computers, system-on-a-chip implementations
and mainboard chipsets, in the case of modern hardware.&lt;/p&gt;
&lt;p&gt;It is therefore a crucial protocol deployed in almost every data
center environment. It is used, together with DHCP, to chain load
Network Boot Programs (NBPs),  like Grub2 and iPXE. They allow
machines to bootstrap themselves and install operating systems off of
the network, downloading kernels and initrds via HTTP and starting
them up.&lt;/p&gt;
&lt;p&gt;At Facebook, we have been using the standard in.tftpd daemon for
years, however, we started to reach its limitations.
Limitations that were partially due to our scale and the way TFTP was
deployed in our infrastructure, but also to the protocol
specifications based on requirements from the 80's.&lt;/p&gt;
&lt;p&gt;To address those limitations we ended up writing our own framework for
creating dynamic TFTP servers in Python3, and we decided to open
source it.&lt;/p&gt;
&lt;p&gt;I will take you thru the framework and the features it offers. I'll
discuss the specific problems that motivated us to create it. We will
look at practical examples of how touse it, along with a little code,
to build your own server that are tailored to your own infra needs.&lt;/p&gt;
</summary></entry><entry><title>Free your papers, researchers!</title><link href="https://pyvideo.org/europython-2016/free-your-papers-researchers.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Ryan Lahfa</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/free-your-papers-researchers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ryan Lahfa - Free your papers, researchers!
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/free-your-papers-researchers"&gt;https://ep2016.europython.eu//conference/talks/free-your-papers-researchers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Research is financed from public money and researchers publish papers.
But, papers are often unavailable to everyone except if you pay money
for it, which seems wrong! What can we do as developers? Well, we can
help researchers to open their papers!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;And of course, how do we do it?&lt;/p&gt;
&lt;p&gt;Python, of course! Dissemin is a website using the Django framework
which aims to promote a global Open Access policy, it offers to
researchers a way to deposit legally their papers inside of a
repository (Zenodo for example).&lt;/p&gt;
&lt;p&gt;We will see how the researcher world works quickly, and what are the
challenges of assisting researcher to make papers available to
everyone!&lt;/p&gt;
</summary></entry><entry><title>Get Instrumented!</title><link href="https://pyvideo.org/europython-2016/get-instrumented.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/get-instrumented.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hynek Schlawack - Get Instrumented!
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/get-instrumented"&gt;https://ep2016.europython.eu//conference/talks/get-instrumented&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To get real time insight into your running applications you need to
instrument them and collect metrics: count events, measure times,
expose numbers. Sadly this important aspect of development was a
patchwork of half-integrated solutions for years. Prometheus changed
that and this talk will walk you through instrumenting your apps and
servers, building dashboards, and monitoring using metrics.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Metrics are highly superior to logging in regards of understanding the
past, presence, and future of your applications and systems.  They are
cheap to gather (just increment a number!) but setting up a metrics
system to collect and store them is a major task.&lt;/p&gt;
&lt;p&gt;You may have heard of statsd, Riemann, Graphite, InfluxDB, or OpenTSB.
They all look promising but on a closer look it’s apparent that some
of those solutions are straight-out flawed and others are hard to
integrate with each other or even to get up and running.&lt;/p&gt;
&lt;p&gt;Then came Prometheus and gave us independence of UDP, no complex math
in your application, multi-dimensional data by adding labels to values
(no more server names in your metric names!), baked in monitoring
capabilities, integration with many common systems, and official
clients for all major programming languages.  In short: a &lt;em&gt;unified&lt;/em&gt;
way to gather, process, and present metrics.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;explain why you want to collect metrics,&lt;/li&gt;
&lt;li&gt;give an overview of the problems with existing solutions,&lt;/li&gt;
&lt;li&gt;try to convince you that Prometheus may be what you’ve been waiting for,&lt;/li&gt;
&lt;li&gt;teach how to impress your co-workers with beautiful graphs and intelligent monitoring by putting a fully instrumented Python application into production,&lt;/li&gt;
&lt;li&gt;and finally give you pointers on how to migrate an existing metrics infrastructure to Prometheus &lt;em&gt;or&lt;/em&gt; how to integrate Prometheus therein.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Hacking ético con herramientas Python</title><link href="https://pyvideo.org/europython-2016/hacking-etico-con-herramientas-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/hacking-etico-con-herramientas-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jose Manuel Ortega - Hacking ético con herramientas Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/hacking-etico-con-herramientas-python"&gt;https://ep2016.europython.eu//conference/talks/hacking-etico-con-herramientas-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El objetivo de la charla sería mostrar las herramientas que disponemos
dentro de la propia API de Python y librerías de terceros para
desarrollar nuestras propias herramientas que permitan realizar
pruebas de seguridad y de pentesting de las aplicaciones.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python se ha convertido en el lenguaje más usado para desarrollar
herramientas dentro del ámbito de la seguridad.
Muchas de las herramientas que podemos encontrar hoy en día como
escáner de puertos, análisis de vulnerabilidades, ataques por fuerza
bruta y hacking de passwords, se han escrito en este lenguaje, además
de ofrecer un ecosistema de herramientas para realizar pruebas de
seguridad y de pentesting de aplicaciones.&lt;/p&gt;
&lt;p&gt;Entre los puntos a tratar podríamos destacar:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Introducir Python como lenguaje de desarrollo de herramientas de seguridad&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introducir librerías para obtener información de nuestro objetivo como Shodan, pygeocoder, pygeoip&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Análisis y extracción de metadatos en Python en imágenes y documentos&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Análisis de puertos con herramientas como python-nmap&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Handling GPS Data with Python</title><link href="https://pyvideo.org/europython-2016/handling-gps-data-with-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Florian Wilhelm</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/handling-gps-data-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Florian Wilhelm - Handling GPS Data with Python
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/handling-gps-data-with-python"&gt;https://ep2016.europython.eu//conference/talks/handling-gps-data-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;If you have ever happened to need to deal with GPS data in Python you
may have felt a bit lost.  This talk presents libraries starting from
basic reading and writing GPS tracks in the GPS Exchange Format to
adding missing elevation information. Also visualisation of tracks on
OpenStreetmap data with interactive plots in Jupyter notebooks is
covered. Additionally common algorithms for GPS like Douglas-Peucker
and Kalman filter are explained.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;If you have ever happened to need to deal with GPS data in Python you
may have felt a bit lost. There are many libraries at various states
of maturity and scope. Finding a place to start and to actually work
with the GPS data might not be as easy and obvious as you might expect
from other Python domains.
Inspired from my own experiences of dealing with GPS data in Python, I
want to give an overview of some useful libraries. From basic reading
and writing GPS tracks in the GPS Exchange Format with the help of
gpxpy to adding missing elevation information with srtm.py.
Additionally, I will cover mapping and visualising tracks on
OpenStreetmap with mplleaflet that even supports interactive plots in
a Jupyter notebook.
Besides the tooling, I will also demonstrate and explain common
algorithms like Douglas-Peucker to simplify a track and the famous
Kalman filters for smoothing. For both algorithms I will give an
intuition about how they work as well as their basic mathematical
concepts. Especially the Kalman filter that is used for all kinds of
sensor, not only GPS, has the reputation of being hard to understand.
Still, its concept is really easy and quite comprehensible as I will
also demonstrate by presenting an implementation in Python with the
help of Numpy and Scipy. My presentation will make heavy use of the
Jupyter notebook which is a wonderful tool perfectly suited for
experimenting and learning.&lt;/p&gt;
</summary></entry><entry><title>How can machine learning help to predict changes in size of Atlantic herring ?</title><link href="https://pyvideo.org/europython-2016/how-can-machine-learning-help-to-predict-changes-in-size-of-atlantic-herring.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Olga Lyashevska</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/how-can-machine-learning-help-to-predict-changes-in-size-of-atlantic-herring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Olga Lyashevska - How can machine learning help to predict changes in size of Atlantic herring ?
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/how-can-machine-learning-help-to-predict-changes-in-size-of-atlantic-herring"&gt;https://ep2016.europython.eu//conference/talks/how-can-machine-learning-help-to-predict-changes-in-size-of-atlantic-herring&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk is a case-study of how Python (Pandas, NumPy, SciKit-learn)
can be implemented to identify the influence of the potential drivers
of a decline in size of Atlantic herring populations using Gradient
Boosting Regression Trees.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;A decline in size and weight of Atlantic herring  in the Celtic Sea
has been observed since the mid-1980’s.  The cause of the decline
remains largely unexplained but is likely to be driven by the
interactive effect of various endogenous and exogenous factors. The
goal of this study is to interrogate a long time-series of biological
data obtained from commercial fisheries from 1959 to 2012.  We use
gradient boosting regression trees to identify important variables
underlying changes in growth from various potential drivers, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Atlantic multidecadal oscillation.&lt;/li&gt;
&lt;li&gt;Sea surface temperature.&lt;/li&gt;
&lt;li&gt;Salinity.&lt;/li&gt;
&lt;li&gt;Wind.&lt;/li&gt;
&lt;li&gt;Zooplankton abundance.&lt;/li&gt;
&lt;li&gt;Fishing pressure.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This learning algorithm allows to quantify the influence of the
potential drivers of change with the test error lower when compared to
other supervised learning techniques. The predictor variables
importance spectrum (feature importance) helps to identify the
underlying patterns and potential tipping points while resolving the
external mechanisms underlying observed changes in size and weight of
herring.  This analysis is a useful case-study of how Python can be
implemented in academia.  The outputs of the analysis are of relevance
to conservation efforts and sustainable fisheries management which
promotes species resistance and resilience.&lt;/p&gt;
</summary></entry><entry><title>How OpenStack makes Python better (and vice-versa)</title><link href="https://pyvideo.org/europython-2016/how-openstack-makes-python-better-and-vice-versa.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Thierry Carrez</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/how-openstack-makes-python-better-and-vice-versa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thierry Carrez/Doug Hellmann - How OpenStack makes Python better (and vice-versa)
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/how-openstack-makes-python-better-and-vice-versa"&gt;https://ep2016.europython.eu//conference/talks/how-openstack-makes-python-better-and-vice-versa&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;OpenStack is an infrastructure stack mostly developed in Python. In
this talk, Thierry Carrez and Doug Hellmann, both Python Software
Foundation fellows and OpenStack Technical Committee members, will
look at the symbiotic relationship between OpenStack and Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;OpenStack is an open source stack that can be deployed on raw
computing resources to privately or publicly present Infrastructure as
a Service. It now consists of more than 4.5 million lines of code, 85%
of which is Python. In this talk, Thierry Carrez and Doug Hellmann,
both Python Software Foundation fellows and OpenStack Technical
Committee members, will look at the symbiotic relationship between
OpenStack and Python.&lt;/p&gt;
&lt;p&gt;We'll go back in history and explain why OpenStack originally picked
Python as its main language 6 years ago, and explore what does Python
bring to OpenStack. We'll dive into examples of OpenStack pushing
Python libraries to their limits and exposing new bugs. We'll look
into the massive cloud-based continuous integration system that
OpenStack uses and explain how it exposes bugs in Python libraries in
the minutes after they are published to PyPI. We'll look into Python
libraries that were created by the OpenStack community and libraries
that the OpenStack community took over. Finally we'll expose a few
best practices that Python developers can follow to get the most of
this symbiotic relationship.&lt;/p&gt;
</summary></entry><entry><title>How to make IT-recruiting suck less.</title><link href="https://pyvideo.org/europython-2016/how-to-make-it-recruiting-suck-less.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Iwan Gulenko</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/how-to-make-it-recruiting-suck-less.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Iwan Gulenko - How to make IT-recruiting suck less.
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/coding-interviews-what-to-expect-and-how-to-prepare"&gt;https://ep2016.europython.eu//conference/talks/coding-interviews-what-to-expect-and-how-to-prepare&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I am a programmer and I am on a mission to make IT-recruiting suck less.&lt;/p&gt;
&lt;p&gt;This talk should be useful for both hiring managers and job-seekers.
We will assess the status-quo of hiring engineers and talk about
resumes, coding questions and tasks that firms make up to assess
engineers. Also, we'll discuss salary negotiation best-practises from
a candidate perspective.&lt;/p&gt;
&lt;p&gt;We end with a discussion on different &amp;quot;types&amp;quot; of programmers
(&lt;a class="reference external" href="http://blog.triplebyte.com/who-y-combinator-companies-want"&gt;http://blog.triplebyte.com/who-y-combinator-companies-want&lt;/a&gt;).&lt;/p&gt;
</summary></entry><entry><title>How to migrate from PostgreSQL to HDF5 and live happily ever after</title><link href="https://pyvideo.org/europython-2016/how-to-migrate-from-postgresql-to-hdf5-and-live-happily-ever-after.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Michele Simionato</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/how-to-migrate-from-postgresql-to-hdf5-and-live-happily-ever-after.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michele Simionato - How to migrate from PostgreSQL to HDF5 and live happily ever after
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/how-to-migrate-from-postgresql-to-hdf5-and-live-happily-ever-after"&gt;https://ep2016.europython.eu//conference/talks/how-to-migrate-from-postgresql-to-hdf5-and-live-happily-ever-after&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk is for people who have a lot of floating numbers inside
PostgreSQL tables. I will bring as an example my personal experience
with a scientific project that used PostgreSQL as storage for a rather
complex set of composite multidimensional arrays and ran into all
sorts of performances issues, both in reading and writing the data. I
will explain how I solved all that by dropping the database in favor
of an HDF5 file, while keeping the application running and the users
happy.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This talk is for people who have a lot of floating numbers inside
PostgreSQL tables and have problems with that. I will narrate my
experience with a scientific project that used PostgreSQL as storage
for a rather complex set of composite multidimensional arrays and ran
into all sorts of performances issues, both in reading and writing the
data.  I will discuss the issues and the approach that was taken first
to mitigate them (unsuccessfully) and then to remove them
(successfully) by a complete rethinking of the underlying architecture
and eventually the removal of the database. I will talk about the
migration strategies that were employed in the transition period and
how to live with a mixed environment of metadata in PostgreSQL and
data in an HDF5 file. I will also talk about concurrency, since the
underlying application is distributed and massively parallel, and
still it uses the purely sequential version of HDF5. Questions from
the audience are expected and welcome.
The talk is of interest to a large public, since it is mostly about
measuring things, monitoring and testing a legacy system,
making sure that the changes do not break the previous behavior
and keeping the users happy, while internally rewriting
all of the original code. And doing that in a small enough number of years!&lt;/p&gt;
</summary></entry><entry><title>Implementación de un Identificador de Sonido en Python</title><link href="https://pyvideo.org/europython-2016/implementacion-de-un-identificador-de-sonido-en-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Cameron Macleod</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/implementacion-de-un-identificador-de-sonido-en-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cameron Macleod - Implementación de un Identificador de Sonido en Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/implementacion-de-un-identificador-de-sonido-en-python"&gt;https://ep2016.europython.eu//conference/talks/implementacion-de-un-identificador-de-sonido-en-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El tema que nos ocupa es como implementar un identificador de sonido
tipo Shazam usando técnicas DSP. Los puntos a seguir serán,
implementación, retos y pasos adicionales. El proyecto que nos ocupa
se encuentra todavía en proceso de desarrollo (el código [subido en
GitHub][1]) y fue inspirado después la conferencia, [Over-the-Air
Audio Identification][2] en FOSDEM 2016.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://github.com/notexactlyawe/abracadabra"&gt;https://github.com/notexactlyawe/abracadabra&lt;/a&gt;
[2]: &lt;a class="reference external" href="https://fosdem.org/2016/schedule/event/audio_identification/"&gt;https://fosdem.org/2016/schedule/event/audio_identification/&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;El tema que nos ocupa es como implementar un identificador de sonido
tipo Shazam usando técnicas DSP con ayuda de unas fantásticas
bibliotecas. Los puntos a seguir serán, implementación, retos y pasos
adicionales. El proyecto que nos ocupa se encuentra todavía en proceso
de desarrollo (el código [subido en GitHub][1]) y fue inspirado
después la conferencia, [Over-the-Air Audio Identification][2] en
FOSDEM 2016.&lt;/p&gt;
&lt;p&gt;La estructura básica del proyecto consiste en un clasificador y un
reconocedor. El clasificador toma huellas del sonido y las procesa en
una forma investigable para el reconocedor que usa estas huellas para
la identificación y búsqueda de archivos almacenados con el fin de
encontrar la semejanza mas probable. El reconocedor estará expuesto en
un entorno API.&lt;/p&gt;
&lt;p&gt;La conferencia intentará introducir el área de DSP a la audiencia y
los conceptos que están detrás aplicaciones como Shazam. Explicaré
todos las nociones incluidas en una manera sencilla.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://github.com/notexactlyawe/abracadabra"&gt;https://github.com/notexactlyawe/abracadabra&lt;/a&gt;
[2]: &lt;a class="reference external" href="https://fosdem.org/2016/schedule/event/audio_identification/"&gt;https://fosdem.org/2016/schedule/event/audio_identification/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Implementing Parallel Programming Design Patterns using EFL for Python</title><link href="https://pyvideo.org/europython-2016/implementing-parallel-programming-design-patterns-using-efl-for-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Moshe Goldstein</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/implementing-parallel-programming-design-patterns-using-efl-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moshe Goldstein/david dayan - Implementing Parallel Programming Design Patterns using EFL for Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/implementing-parallel-programming-design-patterns-using-efl-for-python"&gt;https://ep2016.europython.eu//conference/talks/implementing-parallel-programming-design-patterns-using-efl-for-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;EFL (Embedded Flexible Language), a deterministic parallel programming
tool, may be embedded in any host language. Two versions of the EFL
pre-compiler for Python were implemented. One  translates EFL blocks
into Python's Multiprocessing code, and the other one into DTM/MPI4PY
code. EFL implementations of Parallel Programming Design Patterns will
be shown, generated parallel code compared, and differences discussed.
Visit flexcomp.jct.ac.il for further information.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Multi-core CPUs are abundant and utilizing them effectively requires
programmers to parallelize CPU-intensive code. To facilitate this, we
have developed EFL (Embedded Flexible Language), a deterministic
parallel programming tool.
The parallel parts of a program are written as EFL-blocks, which are
embedded into a sequential host language program. The sequential parts
of the program are written in the host language, outside the EFL
blocks.
EFL may be embedded in any host language by writing an appropriate EFL
pre-compiler. At the moment, we implemented two versions of the EFL
pre-compiler. Both pre-compilers translate EFL blocks into parallel
Python code - one of them generates parallel code based on Python's
Multiprocessing module, and the other one generates parallel code
based on the DTM/MPI4PY Python module.
We will present the principles upon which EFL is built. We will show
the implementation of Parallel Programming Design Patterns using EFL's
parallel programming constructs (such as parallel assignments,
parallel for-loops, etc.).  Using our two EFL pre-compilers we will
show their translation to Python parallel code according to the
Multiprocessing module as well as the DTM/MPI4PY module. The
differences between code versions produced by the EFL pre-compilers
will be discussed.
For further information about the EFL project and our Flexible
Computation Research Laboratory, visit &lt;a class="reference external" href="http://flexcomp.jct.ac.il"&gt;http://flexcomp.jct.ac.il&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>import community</title><link href="https://pyvideo.org/europython-2016/import-community.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Fernando Masanori</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/import-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the biggest differences, in the Python community, is its effort
to improve diversity. The authors will share experiences on diversity
obtained from ten different countries: Namibia, UK, Japan, Brazil,
Italy, Argentina, Uruguay, Germany, Canada and Spain. There are other
reports, that also we would like to share, which are only beautiful
stories of how Python reaches the most distant people and places you
may never have imagined.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;One of the biggest differences, in the Python community, in relation
to other communities, is its effort to improve diversity. There is
even a Diversity Statement at PSF: &amp;quot;We have created this diversity
statement because we believe that a diverse Python community is
stronger and more vibrant. A diverse community where people treat each
other with respect has more potential contributors and more sources
for ideas.&amp;quot; The authors will share experiences on diversity obtained
from ten different countries: Namibia, UK, Japan, Brazil, Italy,
Argentina, Uruguay, Germany, Canada and Spain. There are other reports
that we also would like to share, which are only beautiful stories of
how Python reaches the most distant people and places you may never
have imagined.&lt;/p&gt;
</summary></entry><entry><title>Ingesting 35 million hotel images with python in the cloud.</title><link href="https://pyvideo.org/europython-2016/ingesting-35-million-hotel-images-with-python-in-the-cloud.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Alex Vinyals</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/ingesting-35-million-hotel-images-with-python-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alex Vinyals - Ingesting 35 million hotel images with python in the cloud.
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/ingesting-35-million-hotel-images-with-python-in-the-cloud"&gt;https://ep2016.europython.eu//conference/talks/ingesting-35-million-hotel-images-with-python-in-the-cloud&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk covers the distributed architecture that Skyscanner built to
solve the data challenges involved in the generation of images of all
hotels in the world.  Putting together a distributed system in Python,
based on queues, surfing on the AWS Cloud.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Our goal? To build an incremental image processing pipeline that
discards poor quality and duplicated images,  scaling the final images
to several sizes to optimise for mobile devices.&lt;/p&gt;
&lt;p&gt;Among the challenges:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ingest all the input images that partners provide us.&lt;/li&gt;
&lt;li&gt;Detect and remove bad quality + duplicated images from reaching production.&lt;/li&gt;
&lt;li&gt;Resize all the generated images to optimise for mobile devices.&lt;/li&gt;
&lt;li&gt;Ensure the process scales and behaves in an incremental way.&lt;/li&gt;
&lt;li&gt;Ensure the whole process fits in a time constrained window.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Among the tools we used? Pillow, ImageHash, Kombu and Boto.&lt;/p&gt;
</summary></entry><entry><title>Interactive data Kung Fu with Shaolin</title><link href="https://pyvideo.org/europython-2016/interactive-data-kung-fu-with-shaolin.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Guillem Duran</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/interactive-data-kung-fu-with-shaolin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Guillem Duran - Interactive data Kung Fu with Shaolin
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/interactive-data-kung-fu-with-shaolin"&gt;https://ep2016.europython.eu//conference/talks/interactive-data-kung-fu-with-shaolin&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;“Notebooks come alive when interactive widgets are used”, but
programming complex applications that rely entirely on widgets may end
up being a painful and frustrating process. Shaolin is a new python
project that aims to provide a framework for building interactive
complex dashboards.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;You can read in The Project Jupyter web page that “Notebooks come
alive when interactive widgets are used”, but programming complex
applications that rely entirely on widgets may end up being a painful
and frustrating process. Shaolin is a new python project that aims to
provide a framework for building interactive complex dashboards.&lt;/p&gt;
&lt;p&gt;Shaolin provides all the basic tools for building complex interactive
data analysis applications using the pydata ecosystem. Arbitrary code
can be embedded into a Dashboard -a class that works as a “black box”
that allows to easily define a GUI based on the ipywidgets package- to
process any data in any form and then let you interactively define how
to plot it using automatically generated widgets. Hierarchical
combinations of Dashboards can be arranged then to build more complex
applications.&lt;/p&gt;
&lt;p&gt;The talk is divided in two sections. First one introduce the framework
and its main features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Custom syntax for defining widgets in a simplified way.&lt;/li&gt;
&lt;li&gt;Dashboards: Syntax rules and capabilities.&lt;/li&gt;
&lt;li&gt;Combining Dashboards to build complex applications.&lt;/li&gt;
&lt;li&gt;Interactive plot creation.&lt;/li&gt;
&lt;li&gt;Integration with pydata.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Second section will show how this framework can be used to analyse
real data using Dashboards without writing any code. I will show how
to transform market data time series into graphs using pandas and
networkx, then plot it interactively using bokeh and Vpython.&lt;/p&gt;
</summary></entry><entry><title>Iteration, iteration, iteration</title><link href="https://pyvideo.org/europython-2016/iteration-iteration-iteration.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>John Sutherland</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/iteration-iteration-iteration.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;John Sutherland - Iteration, iteration, iteration
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/iteration-iteration-iteration"&gt;https://ep2016.europython.eu//conference/talks/iteration-iteration-iteration&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There should be something for everyone in this whistle–stop tour of
iteration in Python setting off from &lt;cite&gt;for&lt;/cite&gt;–loops, and riding
cross–country to multiplexing coroutines!&lt;/p&gt;
&lt;p&gt;See and hear the amazing sights and sounds of list comprehensions, and
generators. Take in the amazing vistas from &lt;cite&gt;itertools&lt;/cite&gt;, and be amazed
at the magnificent &lt;cite&gt;yield&lt;/cite&gt;!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We’ll take detours to higher–order functions, closures, and
decorators. And cover the FP inspired builtins &lt;cite&gt;map&lt;/cite&gt;, &lt;cite&gt;filter&lt;/cite&gt;, and
&lt;cite&gt;reduce&lt;/cite&gt;, as well as the epitome of Pythonic programming, &lt;cite&gt;enumerate&lt;/cite&gt;.&lt;/p&gt;
</summary></entry><entry><title>Jupyter for everything else</title><link href="https://pyvideo.org/europython-2016/jupyter-for-everything-else.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mike BRIGHT</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/jupyter-for-everything-else.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mike BRIGHT - Jupyter for everything else
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/jupyter-for-everything-else"&gt;https://ep2016.europython.eu//conference/talks/jupyter-for-everything-else&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Sure you can do a chunk of scientific exploration and stuff in Jupyter
in your choice of language supplemented with visuals and that's
already awesome !&lt;/p&gt;
&lt;p&gt;But let's head off the beaten track a little to look at other uses,
especially command-line.&lt;/p&gt;
&lt;p&gt;We'll look at some alternate uses of Jupyter ...&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Write command-line tutorials, cheat sheets in an easy to maintain format.&lt;/li&gt;
&lt;li&gt;Perform visualization tasks for command-line tools&lt;/li&gt;
&lt;li&gt;Write blog posts&lt;/li&gt;
&lt;li&gt;Create interactive presentations (thanks Damian !)&lt;/li&gt;
&lt;li&gt;Publish interactive books, articles and blog posts&lt;/li&gt;
&lt;li&gt;HTML/js/css experimentation&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Keeping the Lights on with Python</title><link href="https://pyvideo.org/europython-2016/keeping-the-lights-on-with-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Scott Reeve</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/keeping-the-lights-on-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scott Reeve - Keeping the Lights on with Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/keeping-the-lights-on-with-python"&gt;https://ep2016.europython.eu//conference/talks/keeping-the-lights-on-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We are using Python to help the National Grid in the UK to balance
electricity production and usage. We do this by installing Python
powered devices at customers sites that allow us to monitor and set
control criteria to automatically turn on and off power consuming and
producing devices when there is a mismatch between electricity supply
and demand.
In this talk we will be talking about how and why we have used Python,
as well as where in our system we would like to use Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We are using Python to help the National Grid in the UK to balance
electricity production and usage. We do this by installing Python
powered devices at customers sites that allow us to monitor and set
control criteria to automatically turn on and off power consuming and
producing devices when there is a mismatch between electricity supply
and demand. These devices talk to our Python powered cloud based
system using the 3g network, giving us near real-time monitoring of
our customers assets.
Our entire infrastructure is written in Python, from our billing
systems, data analytics systems and customer portal all the way
through to our on site industrial system interfaces. In this talk we
will be talking about how and why we have used Python, where we have
had problems, as well as where in our system we would like to use
Python and why we cannot.  We will also be talking about what we are
going to do next, moving our system from near real time monitoring to
near real-time control, using Python for both system modelling and
control. We will discuss how we are using Python to creating a system
that monitors the balance between electricity supply and demand many
times per second and is able to provide a corrective control based on
the sum of the output of a dynamic set of our customer sites and the
challenges that presents.&lt;/p&gt;
</summary></entry><entry><title>Kung Fu al amanecer con itertools</title><link href="https://pyvideo.org/europython-2016/kung-fu-al-amanecer-con-itertools.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Víctor Terrón</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/kung-fu-al-amanecer-con-itertools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Víctor Terrón - Kung Fu al amanecer con itertools
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/kung-fu-al-amanecer-con-itertools"&gt;https://ep2016.europython.eu//conference/talks/kung-fu-al-amanecer-con-itertools&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El módulo itertools es una de las piedras angulares de la programación
avanzada en Python. Esta charla proporciona consejos prácticos del
álgebra de iteradores que pueden aplicarse de forma inmediata.
Descubrir el módulo itertools supone arrancar el velo de nuestros
ojos, y una vez usadas funciones como &lt;cite&gt;repeat()&lt;/cite&gt;, &lt;cite&gt;takewhile()&lt;/cite&gt;,
&lt;cite&gt;dropwhile()&lt;/cite&gt; o &lt;cite&gt;product()&lt;/cite&gt; no hay marcha atrás — es imposible volver
al mundo de los meros mortales donde las soluciones son más complejas
y necesitan más memoria.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;El módulo itertools es una de las piedras angulares de la programación
avanzada en Python. Parte de la biblioteca estándar, nos ofrece un
álgebra de iteradores que permite encadenar abstracciones de forma
elegante, haciendo posibles soluciones sencillas a la par que más
eficientes en su consumo de memoria.&lt;/p&gt;
&lt;p&gt;El objetivo de esta charla es el de, ante todo, proporcionar consejos
y lecciones claras que puedan aplicarse de forma inmediata.
Ilustrándolo con numerosos ejemplos, los asistentes abandonarán la
charla habiendo asimilado como mínimo varios conceptos que mejorarán
indiscutible e irremediablemente su código. El énfasis se hará en
mostrar casos específicos en los que una solución tradicional puede
ser mejorada una y otra vez con funciones del módulo itertools.&lt;/p&gt;
&lt;p&gt;Supongamos, por ejemplo, que queremos alternar indefinidamente entre
dos valores: -1 y 1. El recién iniciado utilizaría una variable cuyo
valor iría modificando a cada paso y el usuario medio quizás optaría
por un generador infinito. Ambas soluciones dignas y honorables, pero
que palidecen ante la maestría del artista marcial que que tan sólo
necesita &lt;cite&gt;itertools.cycle()&lt;/cite&gt;. Porque el módulo itertools es así: una
vez caído el velo de nuestros ojos y descubiertas funciones como
&lt;cite&gt;repeat()&lt;/cite&gt;, &lt;cite&gt;takewhile()&lt;/cite&gt;, &lt;cite&gt;dropwhile()&lt;/cite&gt; o &lt;cite&gt;product()&lt;/cite&gt;, no hay marcha
atrás. En esta charla vamos a aprender a reconocer cuándo pueden ser
usadas, proporcionándonos en una única línea lo que para los meros
mortales supone mucho más trabajo.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2016-07-22</title><link href="https://pyvideo.org/europython-2016/lightning-talks-2016-07-22.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Vitalii Vokhmin</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/lightning-talks-2016-07-22.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers - Lightning Talks
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Lightning talks, presented by Harald Massa&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Vitalii Vokhmin - Deploying a Hobby App in Seconds&lt;/li&gt;
&lt;li&gt;Jernej Makovsek - Selenium Components&lt;/li&gt;
&lt;li&gt;David Terry - Model-Based Testing&lt;/li&gt;
&lt;li&gt;Rafael - Considerations at Scale&lt;/li&gt;
&lt;li&gt;Team Coala - Marketing by Programmers&lt;/li&gt;
&lt;li&gt;Facundo Batista - Python Argentina&lt;/li&gt;
&lt;li&gt;Ania Wszeborowska - PyCon PL&lt;/li&gt;
&lt;li&gt;Anton Coceres - PyCon DE 2016&lt;/li&gt;
&lt;li&gt;Shai Efrati - The Krihelinator&lt;/li&gt;
&lt;li&gt;Lars Claussen - Live Hydrological Modelling with 3Di&lt;/li&gt;
&lt;li&gt;Leonardo Santagada - The XONSH Shell&lt;/li&gt;
&lt;li&gt;Fabio Pliger - How to Scale Python for Excel Users&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Log all the things!</title><link href="https://pyvideo.org/europython-2016/log-all-the-things.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/log-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Honza Král - Log all the things!
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/log-all-the-things"&gt;https://ep2016.europython.eu//conference/talks/log-all-the-things&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Many times these logs are thrown away or just sit uselessly somewhere
on disk. I would like to show you how you can make sense of all that
data, how to collect and clean them, store them in a scalable fashion
and, finally, explore and search across various systems.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Centralized logging (and the ELK stack) is proving itself to be a very
useful tool in managing a production infrastructure. When combined
with other data sources (application logging, business data, ...) it
can provide even more insight.&lt;/p&gt;
&lt;p&gt;This talk is an introduction into the area with some overview of the
motivation, tools and techniques that can prove useful. We will show
how the open source ELK (Elasticsearch Logstash and Kibana) stack can
be used to implement this.&lt;/p&gt;
&lt;p&gt;It is geared towards people familiar with the DevOps concept that are
looking to improve their lives by introducing smarter tools.&lt;/p&gt;
</summary></entry><entry><title>Machine Learning: Power of Ensembles</title><link href="https://pyvideo.org/europython-2016/machine-learning-power-of-ensembles.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Bargava Subramanian</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/machine-learning-power-of-ensembles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bargava Subramanian - Machine Learning: Power of Ensembles
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/machine-learning-power-of-ensembles"&gt;https://ep2016.europython.eu//conference/talks/machine-learning-power-of-ensembles&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In Machine Learning, the power of combining many models have proven to
successfully provide better results than single models.&lt;/p&gt;
&lt;p&gt;The primary goal of the talk is to answer the following questions:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Why and How ensembles produce better output?&lt;/li&gt;
&lt;li&gt;When data scales, what's the impact? What are the trade-offs to consider?&lt;/li&gt;
&lt;li&gt;Can ensemble models eliminate expert domain knowledge?&lt;/li&gt;
&lt;/ol&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;It is relatively easy to build a first-cut machine learning model. But
what does it take to build a reasonably good model, or even a state-
of-art model ?&lt;/p&gt;
&lt;p&gt;Ensemble models. They are our best friends. They help us exploit the
power of computing. Ensemble methods aren't new. They form the basis
for some extremely powerful machine learning algorithms like random
forests and gradient boosting machines. The key point about ensemble
is that consensus from diverse models are more reliable than a single
source. This talk will cover how we can combine model outputs from
various base models(logistic regression, support vector machines,
decision trees, neural networks, etc) to create a stronger/better
model output.&lt;/p&gt;
&lt;p&gt;This talk will cover various strategies to create ensemble models.&lt;/p&gt;
&lt;p&gt;Using third-party Python libraries along with scikit-learn, this talk
will demonstrate the following ensemble methodologies:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Bagging&lt;/li&gt;
&lt;li&gt;Boosting&lt;/li&gt;
&lt;li&gt;Stacking&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Real-life examples from the enterprise world will be show-cased where
ensemble models produced better results consistently when compared
against single best-performing models.&lt;/p&gt;
&lt;p&gt;There will also be emphasis on the following: Feature engineering,
model selection, importance of bias-variance and generalization.&lt;/p&gt;
&lt;p&gt;Creating better models is the critical component of building a good
data science product.&lt;/p&gt;
&lt;p&gt;A preliminary version of the slides is available
&lt;a class="reference external" href="https://speakerdeck.com/bargava/power-of-ensembles"&gt;here&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Managing technical debt</title><link href="https://pyvideo.org/europython-2016/managing-technical-debt.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mircea Zetea</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/managing-technical-debt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mircea Zetea - Managing technical debt
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/managing-technical-debt"&gt;https://ep2016.europython.eu//conference/talks/managing-technical-debt&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Technical debt lives among us regardless if we are in the services
business or building products.
We discuss about it, we try to fix it or live with it, but can we
actually prevent it?
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay.
What qualifies as debt? What qualifies as interest? How do we manage
it? Is it really unavoidable?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Technical debt lives among us regardless if we are in the services
business or building products.
We discuss about it, we try to fix it or live with it, but can we
actually prevent it?
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay.
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay. Comparing the two, probably the highest cost
that we see is with the interest.
As our code base grows and our deadlines get tougher we tend to
forget about the cost our project will have to pay for every
functionality that we implement in a hurry, for which we “forget”
about tests or for which we write in a comment “this needs to be
refactored” or “this is a temporary solution. refactor later”.
What qualifies as debt? What qualifies as interest? How do we manage
it? At what levels in our projects can we see the debt and the
interest? Is it really unavoidable?&lt;/p&gt;
</summary></entry><entry><title>MiniBrew: Brewing beer with Python</title><link href="https://pyvideo.org/europython-2016/minibrew-brewing-beer-with-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Francisco Igual</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/minibrew-brewing-beer-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Francisco Igual - MiniBrew: Brewing beer with Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/minibrew-brewing-beer-with-python"&gt;https://ep2016.europython.eu//conference/talks/minibrew-brewing-beer-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Dutch startup MiniBrew intends to disrupt the beer market by
introducing an easy-to-use beer brewing machine controlled by a mobile
app and communicating with a Python backend. Users want real-time
insights in their brewing process, which presented some challenges in
terms of architectural design. In this talk Elements Interactive's
Chesco discusses best practices and pitfalls of the IoT architecture
of MiniBrew by diving into message queues, protocol buffers and full-
session logging.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The number one alcoholic drink in the world is undoubtedly beer. With
the rise of craft beers, also homebrewing has become very popular in
recent years, although it is still a complex and expensive hobby.
Dutch startup MiniBrew intends to change that with their revolutionary
beer brewing machine, which is controlled by a mobile app and
communicates with a Python API backend.&lt;/p&gt;
&lt;p&gt;In this talk Chesco will share his ideas and experiences in utilizing
Python in the backend architecture for the MiniBrew project he and his
team are working on at MiniBrew's development partner Elements
Interactive.&lt;/p&gt;
&lt;p&gt;As many IoT projects, the ingredients for MiniBrew are a device with a
limited chipset and internet connection, a backend to store the data
acting as the mastermind and a mobile app to allow end users to
control the brewing process.&lt;/p&gt;
&lt;p&gt;The fact that we want users to know in real-time how their beer
brewing process is doing presented some challenges which required us
to come up with a competitive architecture that would both give real-
time status updates and not saturate the server with continuous calls.&lt;/p&gt;
&lt;p&gt;Chesco discusses best practices and pitfalls in designing and
developing IoT architecture by diving into the RabbitMQ message
broker, the MQTT protocol and protocol buffers. He will focus on the
REST API and CMS site written in Python, elaborating on high frequency
data in the apps, scalability, full-session logging and overcoming
common architectural challenges.&lt;/p&gt;
</summary></entry><entry><title>Monkey-patching: a magic trick or a powerful tool?</title><link href="https://pyvideo.org/europython-2016/monkey-patching-a-magic-trick-or-a-powerful-tool.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Elizaveta Shashkova</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/monkey-patching-a-magic-trick-or-a-powerful-tool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Elizaveta Shashkova - Monkey-patching: a magic trick or a powerful tool?
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/monkey-patching-a-magic-trick-or-a-powerful-tool"&gt;https://ep2016.europython.eu//conference/talks/monkey-patching-a-magic-trick-or-a-powerful-tool&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Monkey-patching is a dynamic modification of a class or a module at runtime.&lt;/p&gt;
&lt;p&gt;The Python gives developers a great opportunity to use monkey-patching
almost everywhere. But should developers do it? Is it a magic trick or
a powerful tool? In this talk we will try to give the answers to these
questions and try to figure out pros and cons of using monkey-
patching.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;First of all we will learn what is monkey-patching in Python and
consider some basic examples of using it.&lt;/p&gt;
&lt;p&gt;Of course, monkey-patching may cause some problems in the code. We
will consider bad ways to use it and try to learn different types of
problems monkey-patching may lead to.&lt;/p&gt;
&lt;p&gt;Despite of some bugs that may appear in a patched program, monkey-
patching is used in a real life rather often. There are some reasons
and motives to do it. We will consider the examples of using monkey-
patching in real projects like &lt;cite&gt;gevent&lt;/cite&gt;, in some other libraries and
in testing. Also we will learn some monkey-patch tricks that helps to
solve real-life problems in the Python debugger which is a part of the
PyCharm and the PyDev.&lt;/p&gt;
&lt;p&gt;After that we will compare using of monkey-patching in Python to using
it in an another dynamic language Ruby. Are there any differences
between them? Is our reasoning correct for Ruby?&lt;/p&gt;
&lt;p&gt;Finally we will conclude all our thoughts and examples and try to give
the answer to the question from title.&lt;/p&gt;
</summary></entry><entry><title>NetworkX Visualization Powered by Bokeh</title><link href="https://pyvideo.org/europython-2016/networkx-visualization-powered-by-bokeh.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Björn Meier</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/networkx-visualization-powered-by-bokeh.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Björn Meier - NetworkX Visualization Powered by Bokeh
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/networkx-visualization-powered-by-bokeh"&gt;https://ep2016.europython.eu//conference/talks/networkx-visualization-powered-by-bokeh&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Visual data exploration, e.g. of social networks, can be ugly manual
work. The talk will be an introduction for the combined usage of
NetworkX and Bokeh in a Jupyter Notebook to show how easy interactive
network visualization can be.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;During some work with social network analysis my favoured tool to
study the networks was NetworkX. It provides a wide set of features
and algorithms for network analysis, all in Python. But the
functionality to visualize networks is not very strong and not to
mention the missing interactive manipulation. However during the
exploration of data: exporting, feeding an extra tool for
visualization and then manipulating data manually was a tedious
workflow.&lt;/p&gt;
&lt;p&gt;As I also had the optional target of presenting networks in a browser,
I improved this workflow by creating a Flask web application providing
interfaces to my networks. On the browser side I created a javascript
client based on D3.js. In retrospective the required programming
effort in Python and also in Javascript was too much for such a task.
And exactly this target, interactive visualization in a browser (and
as bonus in a Jupyter Notebook), can be achieved quiet easy now with
Bokeh.&lt;/p&gt;
&lt;p&gt;The talk will be a step by step introduction, starting with the basic
visualization of a network using Bokeh, NetworkX and a Jupyter
Notebook. Next, how to create interactions with your network which
will be used to change a network structure, e.g. a leaving person. As
we want to see directly the impact of these changes in a network I
will finally show how to update networks and visualize directly how
the importance of the remaining people changes. And all this can be
achieved with Python and maybe a bit of Javascript.&lt;/p&gt;
&lt;p&gt;(There was no video for the first few minutes of this talk).&lt;/p&gt;
</summary></entry><entry><title>Nipy on functional brain MRI</title><link href="https://pyvideo.org/europython-2016/nipy-on-functional-brain-mri.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Alexandre Savio</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/nipy-on-functional-brain-mri.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexandre Savio - Nipy on functional brain MRI
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/nipy-on-functional-brain-mri"&gt;https://ep2016.europython.eu//conference/talks/nipy-on-functional-brain-mri&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This is an introductory talk to modern brain image analysis tools.
I will show how to use nipy tools to process one resting-state fMRI
subject, perform intra-subject registration, ICA analysis to extract
and visualize resting-state networks.
If the time allows me I will introduce an anatomical brain atlas and
how to perform non-linear registration to do atlas-based segmentation.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This is an introductory talk to modern brain image analysis tools.
I will show how to use nipy tools to process one resting-state fMRI
subject, perform intra-subject registration, ICA analysis to extract
and visualize resting-state networks.
If the time allows me I will introduce how to perform non-linear
registration to to atlas-based segmentation.&lt;/p&gt;
&lt;p&gt;The outline of the talk:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Present the COBRE dataset and show its characteristics.&lt;/li&gt;
&lt;li&gt;Use nibabel to open a NifTI file and see the matrix/volume parameters.&lt;/li&gt;
&lt;li&gt;Use nilearn.plotting to show the anatomical image.&lt;/li&gt;
&lt;li&gt;Use nipy to co-register the anatomical image to the fMRI image.&lt;/li&gt;
&lt;li&gt;Use nilearn to perform CanICA and plot ICA spatial segmentations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If time allows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Present a brain anatomical atlas and its template.&lt;/li&gt;
&lt;li&gt;Present the tools needed for non-linear registration.&lt;/li&gt;
&lt;li&gt;Show the result of an atlas-based segmentation result.&lt;/li&gt;
&lt;li&gt;Use nilearn to calculate the resting-state functional connectivity matrix of the subject.&lt;/li&gt;
&lt;li&gt;Plot it with Bokeh.&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Peeking into Python’s C API</title><link href="https://pyvideo.org/europython-2016/peeking-into-pythons-c-api.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Sophia Davis</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/peeking-into-pythons-c-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sophia Davis - Peeking into Python’s C API
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/peeking-into-pythons-c-api"&gt;https://ep2016.europython.eu//conference/talks/peeking-into-pythons-c-api&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Ever wondered how Python works under the hood? One way to learn about
Python-the-C-program is by exploring the C API for writing Python
bindings to native C libraries. In this talk, we will walk through a
simple example of making a C library callable from Python code and
vice versa. Along the way, we will encounter some essential features
of Python: reference counting, memory management, and the inner-
workings of objects and modules.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We all love Python. It’s so elegant and easy to use as a programming
language that we forget about the giant, complicated C program
executing our strings of white-space sensitive code. For many Python
programmers, this side of Python is just a big black box. It works
well, so thankfully we don’t &lt;em&gt;need&lt;/em&gt; to go messing around inside... but
what if you &lt;em&gt;want&lt;/em&gt; to look into the inner workings of this powerful
tool? One way to dive into the C-program-side of Python is by
exploring the C API for writing Python bindings to native C libraries.
In this talk I will explore the basics of this API as I recount my
journey to make a simple C library callable from Python code, and
allow C code to invoke objects defined in pure Python. Along the way,
we will encounter some essential features of Python: reference
counting, memory management, and the inner-workings of objects and
modules.&lt;/p&gt;
</summary></entry><entry><title>Profiling the unprofilable</title><link href="https://pyvideo.org/europython-2016/profiling-the-unprofilable.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Dmitry Trofimov</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/profiling-the-unprofilable.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dmitry Trofimov - Profiling the unprofilable
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/profiling-the-unprofilable"&gt;https://ep2016.europython.eu//conference/talks/profiling-the-unprofilable&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;When a program is not fast enough, we call on the profiler to save us.
But what happens when the program is hard to profile, like for
instance the Python Debugger? In this talk we're going dive deep into
Vmprof, a Python profiler, and see how it helps us find out why a
debugger can be slow. Once we find the culprit, we'll use Cython to
optimise things.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Profile is the main way to find slow parts of your application, and
it's often the first approach to performance optimisation. While there
are quite a few profilers, many of them have limitations. In this talk
we're going to learn about the new statistical profiler for Python
called Vmprof that is actively being developed by the PyPy team. We'll
see how it is implemented and how to use it effectively. We will apply
it to an open source project, the Pydev.Debugger, a popular debugger
used in IDE's such as Pydev and PyCharm, and with the help of Cython
which we'll also dig into, we'll work on optimising the issues we
find.&lt;/p&gt;
&lt;p&gt;Whether it's a Python debugger, a Web Application or any other kind of
Python development you're doing, you'll learn how to effectively
profile and resolve many performance issues.&lt;/p&gt;
</summary></entry><entry><title>Pytest desde las trincheras</title><link href="https://pyvideo.org/europython-2016/pytest-desde-las-trincheras.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Pau Ruŀlan Ferragut</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/pytest-desde-las-trincheras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pau Ruŀlan Ferragut - Pytest desde las trincheras
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/pytest-desde-las-trincheras"&gt;https://ep2016.europython.eu//conference/talks/pytest-desde-las-trincheras&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Todo programador tiene interés para que su software sea fiable y
estable. Haremos una sencilla introducción a pytest con el caso de uso
de un site internacional para el que generamos cientos de tests y
redujimos drásticamente los errores en producción. Con este simple
ejemplo demostraremos que no siempre necesitamos hacer TDD para
disfrutar de las ventajas de un framework de testing.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Las metodologías de desarrollo que incorporan la escritura de pruebas
desde el momento cero tienden a generar código más estable y fiable
pero la realidad es que muchas veces no gozamos del privilegio ni del
presupuesto para escribir tests para todas las características de
nuestro producto. Pero si tenemos a nuestra disposición herramientas
de testing que nos permitan eliminar los errores evitables como romper
enlaces en la página de inicio nos quitaremos el miedo a hacer pases a
producción y generaremos más valor al negocio.&lt;/p&gt;
&lt;p&gt;La charla no tiene pretensión de ser ni una introducción al test
driven development ni de las complejidades de qué es un buen o mal
test. El objetivo es animar a todo aquel que todavía pruebe sus
proyectos manualmente a intentar algún grado de automatización. Para
ello la estructura será una presentación de pytest, exponer algunos
plugins altamente recomendados y centrarse en el caso de uso de una
página con presencia en ocho países donde automatizamos un montón de
comprobaciones simples que nos permitieron reducir los errores
evitables.&lt;/p&gt;
</summary></entry><entry><title>Python, Data &amp; Rock'n'Roll</title><link href="https://pyvideo.org/europython-2016/python-data-rocknroll.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Claudia Guirao Fernández</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/python-data-rocknroll.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Claudia Guirao Fernández - Python, Data &amp;amp; Rock'n'Roll
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/python-data-rocknroll"&gt;https://ep2016.europython.eu//conference/talks/python-data-rocknroll&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Approach to topics, evolution, correlations through the lyrics of some
of the greatests rock bands of all times. We will talk about the
different phases of this personal project, in which I approach to a
passion through a scientific method.&lt;/p&gt;
&lt;p&gt;This is a project that combine different techniques:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;web crawling&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Data visualization&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Have you ever wonder how David Bowie has evolved into the theme of his
songs throughout their studio albums? Want to find out in what looks
like Nirvana and Pink Floyd?&lt;/p&gt;
&lt;p&gt;Approach to topics, evolution, correlations through the lyrics of some
of the greatests rock bands of all times. We will talk about the
different phases of this personal project, in which I approach to a
passion through a scientific method.&lt;/p&gt;
&lt;p&gt;This is a project that combine different techniques:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web crawling&lt;/li&gt;
&lt;li&gt;NoSQL&lt;/li&gt;
&lt;li&gt;Natural Language Processing&lt;/li&gt;
&lt;li&gt;Data visualization&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python Descriptors for Better Data Structures</title><link href="https://pyvideo.org/europython-2016/python-descriptors-for-better-data-structures.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Adrian Dziubek</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/python-descriptors-for-better-data-structures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adrian Dziubek - Python Descriptors for Better Data Structures
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/python-descriptors-for-better-data-structures"&gt;https://ep2016.europython.eu//conference/talks/python-descriptors-for-better-data-structures&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Have you ever wondered how Django models work? I'll present a story of
data structure transformation. I will talk about ideas from Django
models that I used and how I rediscovered descriptor API. I will talk
about printing, serializing, comparing data structures and some  other
examples, where descriptors excel at making declarative code easier to
write.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;I worked as a developer of a testing framework for a C++ server. The
framework tested binary protocol implemented by the server.&lt;/p&gt;
&lt;p&gt;Most of the work  involved testers preparing test cases. The data
format was primitive structures -- hard to read and easy to break.
Field order and all the data had to be entered manually.&lt;/p&gt;
&lt;p&gt;At the time, I have already seen the better world --  the models from
Django. Have you ever wondered how those work? Step by step, I used
the ideas from there to make the structures more friendly and on my
way I rediscovered descriptors.&lt;/p&gt;
&lt;p&gt;I'll show in incremental steps, how:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;used keyword arguments to lower signal to noise ratio,&lt;/li&gt;
&lt;li&gt;order of definition for sorting the fields,&lt;/li&gt;
&lt;li&gt;realized that &lt;cite&gt;__call__&lt;/cite&gt; is used instead of assignment,&lt;/li&gt;
&lt;li&gt;used &lt;cite&gt;__setattribute__&lt;/cite&gt; as first step to extend primitive fields,&lt;/li&gt;
&lt;li&gt;discovered that I'm actually reimplementing descriptors,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and how it lead me to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;implement printing in a way that is friendly to regression testing,&lt;/li&gt;
&lt;li&gt;use diff library for less code and better results,&lt;/li&gt;
&lt;li&gt;implement more readable validation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to show how descriptors work in Python and how they enable
declarative style of programming. By the end of the talk I want you to
understand what is at the core of the magic behind field types used by
object relational mappers like Django.&lt;/p&gt;
</summary></entry><entry><title>Python in Gravitational Waves Research Communities</title><link href="https://pyvideo.org/europython-2016/python-in-gravitational-waves-research-communities.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Elena Cuoco</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/python-in-gravitational-waves-research-communities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Elena Cuoco - Python in Gravitational Waves Research Communities
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/pyhton-in-gravitational-waves-research-communities"&gt;https://ep2016.europython.eu//conference/talks/pyhton-in-gravitational-waves-research-communities&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;On February 11th 2016 Ligo-Virgo collaboration gave the announce of
the discovery of Gravitational Waves, just  100 years after the
Einstein’s paper on their prediction.
A brief introdutcion to data analysis methods used in Gravitational
Waves (GW) communities
Python notebook describing  how to analyze the GW event detected on 14
September 2015.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;On February 11th 2016 Ligo-Virgo collaboration gave the announce of
the discovery of Gravitational Waves, just  100 years after the
Einstein’s paper on their prediction.
After an introduction on Gravitational Waves, on Virgo Interferometric
detector, I will go through the data analysis methods used in
Gravitational Waves (GW) communities either for the detector
characterization and data condition or for the signal detection
pipelines,  showing the use of python we make.
As practical example I will introduce a python notebook describing
the GW event detected on 14 September 2015 and I will show a few of
signal processing techniques.&lt;/p&gt;
</summary></entry><entry><title>RESTful API - Best Practices.</title><link href="https://pyvideo.org/europython-2016/restful-api-best-practices.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Malwina Nowakowska</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/restful-api-best-practices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Malwina Nowakowska - RESTful API - Best Practices.
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/restful-api-best-practises"&gt;https://ep2016.europython.eu//conference/talks/restful-api-best-practises&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;It is important to understand from the beginning how model API should look like.
Do not repeat your friends’ mistakes and make developers upset!
There are some simple rules that can make your API cooler - clean,
safe and efficient.&lt;/p&gt;
&lt;p&gt;Based on both bad and good examples of REST APIs (I had to deal with)
we will learn about best practices.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Nowadays building and integrating with Representational State Transfer
web services is a very common thing. It seems that creating RESTful
API is trivial - nothing could be more wrong.
In my previous projects I had to integrate with lots of APIs.
Unfortunately only some of them were easy to work with. Most of the
APIs did not follow the main rules of model API.&lt;/p&gt;
&lt;p&gt;It is really important to understand how model REST API should look like.
To make developers happy we will learn best practices of creating REST
API from the beginning.&lt;/p&gt;
&lt;p&gt;We will start with quick introduction what REST is, why principle of
REST is so amazing, talk about identifires and explain some key terms.
We will discuss about architectall constraints and properties.&lt;/p&gt;
&lt;p&gt;Mistakes and best practices are based on my experience of developing
and maintaining the projects. After this talk you will be able to
create model RESTful API developers will be happy to work with.&lt;/p&gt;
</summary></entry><entry><title>Scaling Microservices with Crossbar.io</title><link href="https://pyvideo.org/europython-2016/scaling-microservices-with-crossbario.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Tobias Oberstein</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/scaling-microservices-with-crossbario.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tobias Oberstein - Scaling Microservices with Crossbar.io
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/scaling-microservices-with-crossbario"&gt;https://ep2016.europython.eu//conference/talks/scaling-microservices-with-crossbario&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Microservices offer an efficient way to only scale those parts of your
application which are performance bottlenecks.&lt;/p&gt;
&lt;p&gt;We will demo and explain open source tech which allows the easy
scaling out across distributed devices. The audience will be able to
donate processor cycles from their devices to our demo application
(and win a hardware prize).&lt;/p&gt;
&lt;p&gt;The demo uses &lt;a class="reference external" href="http://crossbar.io"&gt;Crossbar.io&lt;/a&gt;, an open souce application router
(written in Python), and all demo code is open source.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Microservices offer an efficient way to only scale parts of your
applications which are hotspots. Instead of running multiple instances
of a monolithic application, with all the complexity and operational
run-time overhead that entails, you can scale only the functionality
which is a bottleneck. Today that increasingly means scaling out, not
up.&lt;/p&gt;
&lt;p&gt;We will go over open source technologies which allow the easy scaling
out across distributed devices.&lt;/p&gt;
&lt;p&gt;A live demo will allow the audience to participate with its devices
(including mobile phones) in an application. (There will be prizes for
the donors.)&lt;/p&gt;
&lt;p&gt;The demo uses &lt;a class="reference external" href="http://crossbar.io"&gt;Crossbar.io&lt;/a&gt;, an open source router for the open
&lt;a class="reference external" href="http://wamp-proto.org"&gt;Web Application Messaging Protocol (WAMP)&lt;/a&gt;
written in Python.
WAMP supports routed Remote Procedure Calls, and Crossbar.io uses
these to implement various load-balancing strategies across endpoints
which register a particular procedure.&lt;/p&gt;
&lt;p&gt;WAMP has a first-class library for Python
(&lt;a class="reference external" href="http://autobahn.ws/python"&gt;Autobahn|Python&lt;/a&gt;),
but is cross-language, with support for a total of 11 languages. This
allows you to implement polyglot and heterogenos microservices
applications, from Python to Node.js to C# right into the browser.
Microservices can run anywhere, since the outgoing connections to the
router which WAMP uses avoid NAT problems.&lt;/p&gt;
&lt;p&gt;All software used is open source, and all demo code is provided on
GitHub under the MIT license.&lt;/p&gt;
</summary></entry><entry><title>Server for IoT devices and Mobile devices using Wifi Network,</title><link href="https://pyvideo.org/europython-2016/server-for-iot-devices-and-mobile-devices-using-wifi-network.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Joaquin Berenguer</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/server-for-iot-devices-and-mobile-devices-using-wifi-network.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joaquin Berenguer - Server for IoT devices and Mobile devices using Wifi Network,
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/server-for-iot-devices-and-mobile-devices-using-wifi-network"&gt;https://ep2016.europython.eu//conference/talks/server-for-iot-devices-and-mobile-devices-using-wifi-network&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The server is developed in Python 3.4, using MySQL5.6
The mobile device application is developed using Kivy.
The application in the IoT device is developed in C.
The IoT device is a hardware device using ATSAMD21 from Atmel, and
wifi is made using ESP8266. The security used is sha256, standard in
Python. And the IoT device using the crypto device ATECC508A, that
generate also sha256.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The server is developed in Python 3.4,  the information is stored in a
MySQL 5.6 database.
All IoT devices, Mobile Devices and Windows or Linux Desktop are
registered in the database.
All type of messages that are understood by every type of device, is
also registered.
A map between which device  could access which device is also stored
in the database.
With this info, any mobile registered could send a message to a
device. The message arrives to the server that resend the message to
the IoT device, receive the answer and resend to the Mobile device.
The Mobile device and the IoT device, could be anywhere, as the server
is public, have the registration of every device connected.
The mobile device application is developed using Kivy.
The application in the IoT device is developed in C.
The IoT device is a hardware device using ATSAMD21 from Atmel, and
wifi is made using ESP8266. The security used is sha256, standard in
Python. And the IoT device using the crypto device ATECC508A, that
generate also sha256.
The server start a thread for every device connected, the
communication between thread is made using queues.
During the presentation, the server is going to be presented, and IoT
device is shown, no demo is going to be made.
A library to manage the database, is used for easy access to the
database, and have database independence, also will be shown.
Prerequites: Python 3.4, sha256, threading, queue, mysql.connector,
relational database.&lt;/p&gt;
</summary><category term="kivy"></category></entry><entry><title>Split Up! Fighting the Monolith</title><link href="https://pyvideo.org/europython-2016/split-up-fighting-the-monolith.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Patrick Mühlbauer</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/split-up-fighting-the-monolith.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Patrick Mühlbauer - Split Up! Fighting the Monolith
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/split-up-fighting-the-monolith"&gt;https://ep2016.europython.eu//conference/talks/split-up-fighting-the-monolith&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Having to deal with a monolith, an application which became far to big
over the time, can be quite bothersome. On the other hand if you split
it up and have to deal with lots of smaller components, you might end
up in dependency hell. But not only the splitting of the monolith and
the management of the dependencies afterwards can be a problem, but
also the packaging of you python components itself.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Do you know this situation, where you and your team are facing this
big monolith? An application which has grown far too
big over the years. Every time when you make a change, you have to
fear the code might break at a totally different place, because lots
of things
are closely intertwined. But what to do if you are at such a point?
Maybe you start thinking about microservices but then questions like
&amp;quot;Are they really the right thing for us?&amp;quot; and &amp;quot;How do we get there?&amp;quot; arise.&lt;/p&gt;
&lt;p&gt;In my talk I will show you how we are dealing with our monolith. A
collection of multiple python packages without clear boundaries,
forming the
actual application - all living in a single monorepo.&lt;/p&gt;
&lt;p&gt;I will talk about how we split up the whole thing, making it more
flexible for us and also easier to use individual components by other
teams.
All this, of course, comes with a price: You have to think more about
the dependencies between you components. You have to think about how
you can efficiently test everything, making sure your final
application is still working correctly.
Don't loosing yourself in dependency hell and packaging all components
correctly becomes quite a challenge.&lt;/p&gt;
&lt;p&gt;This talk will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;show you bad patterns to avoid, so that you don't end up in the above situation in the first place&lt;/li&gt;
&lt;li&gt;give you ideas what to consider when tackling your monolith&lt;/li&gt;
&lt;li&gt;explain how to package your python components and how to mange your dependencies&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>SQLAlchemy as the backbone of a Data Science company</title><link href="https://pyvideo.org/europython-2016/sqlalchemy-as-the-backbone-of-a-data-science-company.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Peter Hoffmann</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/sqlalchemy-as-the-backbone-of-a-data-science-company.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peter Hoffmann - SQLAlchemy as the backbone of a Data Science company
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/sqlalchemy-as-the-backbone-of-a-data-science-company"&gt;https://ep2016.europython.eu//conference/talks/sqlalchemy-as-the-backbone-of-a-data-science-company&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In times of NoSQL databases and Map Reduce Algorithms it's surprising how far
you can scale the relational data model. At &lt;a class="reference external" href="http://blue-yonder.com"&gt;Blue Yonder&lt;/a&gt;
we use SQLAlchemy in all stages of our data science workflows and handle tenth
of billions of records to feed our predictive algorithms. This talk will dive
into SQLAlchemy beyond the Object Relational Mapping (ORM) parts and conentrate
on the SQLAlchemy Core API, the Expression Language and Database Migrations
with Alembic.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;In times of NoSQL databases and Map Reduce Algorithms it's surprising how far
you can scale the relational data model. At &lt;a class="reference external" href="http://blue-yonder.com"&gt;Blue Yonder&lt;/a&gt;
we use SQLAlchemy in all stages of our data science workflows and handle tenth
of billions of records to feed our predictive algorithms. This talk will dive
into SQLAlchemy beyond the Object Relational Mapping (ORM) parts and conentrate
on the SQLAlchemy Core API and the Expression Language:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Database Abstraction&lt;/strong&gt;: Statements are generated properly for different database vendor and type without you having to think about it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Database input is escaped and sanitized prior to beeing commited to the database. This prevents against common SQL injection attacks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composability and Reuse&lt;/strong&gt;: Common building blocks of queries are expressed as SQLAlchemy selectables and can be reuesd in other queries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt;: SQLAlchemy allows you to perform functional tests against a database or mock out queries and connections.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt;: Reflection is a technique that allows you to generate a SQLAlchemy repesentation from an existing database. You can reflect tables, views, indexes, and foreign keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result of the usage of SQLAlchemy in Blue Yonder, we have implemented and
open sourced a SQLAlchemy dialect for the in memory, column-oriented database
system &lt;a class="reference external" href="https://github.com/blue-yonder/sqlalchemy_exasol"&gt;EXASolution&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>System Testing with pytest and docker-py</title><link href="https://pyvideo.org/europython-2016/system-testing-with-pytest-and-docker-py.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Christie Wilson</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/system-testing-with-pytest-and-docker-py.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christie Wilson/Michael Tom-Wing - System Testing with pytest and docker-py
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/system-testing-with-pytest-and-docker-py"&gt;https://ep2016.europython.eu//conference/talks/system-testing-with-pytest-and-docker-py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;System tests are an invaluable tool for verifying correctness of large
scale online services. This talk will discuss best practices and
tooling (pytest and docker-py) for writing maintainable system tests.&lt;/p&gt;
&lt;p&gt;Demonware has used System tests to verify online services for some of
the biggest AAA video game launches as well as internal operational
tools.&lt;/p&gt;
&lt;p&gt;Many folks who write software are familiar with unit testing, but far
fewer with system testing.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;System testing a microservice architecture is challenging. As we move
away from monolithic architectures, system testing becomes more
important but also more complicated.&lt;/p&gt;
&lt;p&gt;In the video game industry, if a game doesn’t work properly
immediately after launch, it will heavily impact game success. We have
found system testing to be an important tool for pre launch testing of
game services and operational tools, to guarantee quality of these
services at launch.&lt;/p&gt;
&lt;p&gt;We want to share with you best practices for system testing: when to
write system tests, what to test and what not to, and common pitfalls
to avoid. Using python’s pytest tool and docker-py for setting up
services and their dependencies has made it easier than ever to write
complex but maintainable system tests and we’ll share with you how
we’ve made use of them.&lt;/p&gt;
&lt;p&gt;Developers (senior and junior) and ops folks can walk away from this
talk with practical tips they can use to apply system testing to their
software.&lt;/p&gt;
</summary></entry><entry><title>TDD of Python microservices</title><link href="https://pyvideo.org/europython-2016/tdd-of-python-microservices.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Michał Bultrowicz</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/tdd-of-python-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Michał Bultrowicz - TDD of Python microservices
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/tdd-of-python-microservices"&gt;https://ep2016.europython.eu//conference/talks/tdd-of-python-microservices&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A framework-agnostic approach to creating Python microservices with a
tests-first approach.
I'll show how to utilize Docker and Swagger to create service and
contract tests that run your service as an independent process, as if
it was running in production, giving you and your team a higher degree
of confidence when introducing changes.&lt;/p&gt;
&lt;p&gt;A little bit of a broader microservice, TDD and work management
context will also be given.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;These will be my ideas on how to help a microservice-based (HTTP)
project by integrating testing into the development process (TDD).
I'll approach the testing pyramid presented in Martin Fowler's
&amp;quot;Microservice Testing&amp;quot; as well as the test variants in &amp;quot;Building
Microservices&amp;quot; (O'Reilly) and I'll show a way of how they can be
translated to real-life Python.&lt;/p&gt;
&lt;p&gt;The main focus will be on &amp;quot;service tests&amp;quot; (aka. out-of-process
component tests) and contract tests. They both can be run relatively
fast on a development machine and can give fast feedback to the
developer, preventing many kinds of problems.&lt;/p&gt;
&lt;p&gt;Service tests run the whole application process without any internal
modifications, but have to present the service with a fake &amp;quot;outside
world&amp;quot;. I'll show how to fake external HTTP services with Mountebank
(similar to WireMock). Instead of faking other systems (like
databases) we can quickly spin up the real deal as a Docker container
from within the tests.&lt;/p&gt;
&lt;p&gt;Contract tests check if the contract (interface) of your service with
the outside world is kept, so no external services should be broken by
the changes you are introducing. It can also work the other way
around, proving that your collaborators are keeping their part of the
deal. In both cases, Swagger (a RESTful API description scheme) and a
few clever tricks can be used for significant advantage.&lt;/p&gt;
</summary></entry><entry><title>Test-driven code search and reuse coming to Python with pytest-nodev</title><link href="https://pyvideo.org/europython-2016/test-driven-code-search-and-reuse-coming-to-python-with-pytest-nodev.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Alessandro Amici</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/test-driven-code-search-and-reuse-coming-to-python-with-pytest-nodev.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alessandro Amici - Test-driven code search and reuse coming to Python with pytest-nodev
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/test-driven-source-code-search-for-python-with-pytest-nodev"&gt;https://ep2016.europython.eu//conference/talks/test-driven-source-code-search-for-python-with-pytest-nodev&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We will present the test-driven reuse (TDR) development strategy, a
natural extension of test-driven development (TDD), and how to execute
it with &lt;a class="reference external" href="http://pytest-nodev.readthedocs.io/en/stable/quickstart.html"&gt;pytest-nodev&lt;/a&gt; a test-driven search engine for Python code.&lt;/p&gt;
&lt;p&gt;Pytest-nodev and the other nodev tools that helps implement TDR for
Python are rather new, in spite of that we will present several
successful applications of the technique to more and more complex
examples.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We will present the test-driven reuse (TDR) development strategy, a
natural extension of test-driven development (TDD), and how to execute
it with &lt;a class="reference external" href="http://pytest-nodev.readthedocs.io/en/stable/quickstart.html"&gt;pytest-nodev&lt;/a&gt; an Open Source test-driven search engine for Python code.&lt;/p&gt;
&lt;p&gt;When developing new functionalities developers spend significant
efforts searching for code to reuse, mainly via keyword-based
searches, e.g. on StackOverflow and Google. Keyword-based search is
effective in finding code that is explicitly designed and documented
to be reused, e.g. libraries and frameworks, but typically fails to
identify reusable functions and classes in the large corpus of
auxiliary code of software projects.&lt;/p&gt;
&lt;p&gt;TDR aims to address the limits of keyword-based search with test-
driven code search that focuses instead on code behaviour and
semantics. Developing a new feature in TDR starts with the developer
writing the tests that will validate candidate implementations of the
desired functionality. Before writing any functional code the tests
are run against all functions and classes of available projects. Any
code passing the tests is presented to the developer as a candidate
implementation for the target feature.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nodev-io/pytest-nodev"&gt;Pytest-nodev (github)&lt;/a&gt; and other nodev tools that help implement TDR for Python are newer than the JAVA counterparts, in spite of that we will present several applications of the technique to more and more complex examples.&lt;/p&gt;
</summary></entry><entry><title>Testing the untestable: a beginner’s guide to mock objects</title><link href="https://pyvideo.org/europython-2016/testing-the-untestable-a-beginners-guide-to-mock-objects.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Andrew Burrows</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/testing-the-untestable-a-beginners-guide-to-mock-objects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Burrows - Testing the untestable: a beginner’s guide to mock objects
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/testing-the-untestable-a-beginners-guide-to-mock-objects"&gt;https://ep2016.europython.eu//conference/talks/testing-the-untestable-a-beginners-guide-to-mock-objects&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In this session you will learn your way around Python 3’s
unittest.mock package through examples. You’ll learn about the Mock
class, sentinels and patching. You will see the benefits that mocks
can bring and learn to avoid the pitfalls. Along the way I’ll fill you
in on some of the bewildering terminology surrounding mocks such as
“SUT”, “Stub”, “Double”, “Dummy” , “mockist” and more and I’ll give a
brief plug for my own mockextras package that can enhance your mock
experience.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mock objects can be a powerful tool to write easy, reliable tests for
the most difficult to test code. In this session you will learn your
way around Python 3’s unittest.mock package starting at the simplest
examples and working through progressively more problematic code.
You’ll learn about the Mock class, sentinels and patching and how and
when to use each of them. You will see the benefits that mocks can
bring and learn to avoid the pitfalls. Along the way I’ll fill you in
on some of the bewildering terminology surrounding mocks such as
“SUT”, “Stub”, “Double”, “Dummy” , “mockist” and more and I’ll give a
brief plug for my own mockextras package that can enhance your mock
experience.&lt;/p&gt;
</summary></entry><entry><title>The Report Of Twisted’s Death</title><link href="https://pyvideo.org/europython-2016/the-report-of-twisteds-death.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/the-report-of-twisteds-death.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown - The Report Of Twisted’s Death
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death"&gt;https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk will teach you how Twisted or Tornado supplement asyncio,
how asyncio can/is integrated with these frameworks, and makes a case
for the continued development of new and existing selector-loop based
frameworks. It will also paint a picture of the future direction of
Twisted, why the original plan of asyncio as a standard API has not
come to complete fruition, and what can be done about it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Historically, there has been no “standard way” of doing asynchronous
I/O in Python. A variety of solutions, from using threads (WSGI),
processes (multiprocessing), green threads (gevent), or selector loops
(Tornado, Twisted) have all been used to similar degrees, but apart
from the (now deprecated) standard library asyncore/asynchat, Python
itself did not have a blessed option.&lt;/p&gt;
&lt;p&gt;PEP 3156, or “the asyncio PEP”, introduced in Python 3.4, provides
this blessed option, choosing a standard selector loop approach (or
“reactor”, in Twisted parlance). The role of asyncio may seem muddled
in the eyes of developers new to asynchronous programming, or those
that may not understand the technical details of asyncio nor the
political environment in which it was created. This talk will teach
you how Twisted or Tornado supplement asyncio, how asyncio can/is
integrated with these frameworks, and makes a case for the continued
development of new and existing selector-loop based frameworks. It
will also paint a picture of the future direction of Twisted, why the
original plan of asyncio as a standard API has not come to complete
fruition, and what can be done about it.&lt;/p&gt;
</summary></entry><entry><title>The Router Game</title><link href="https://pyvideo.org/europython-2016/the-router-game.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/the-router-game.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Roberto Polli - The Router Game
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-router-game"&gt;https://ep2016.europython.eu//conference/talks/the-router-game&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This interactive game teaches the basic of ip and ethernet protocol
using just paper and pens, and become very popular with our interns
and in our LUG meetings.&lt;/p&gt;
&lt;p&gt;Participants are divided in teams, simulating simple network
infrastructures (eg. computers connected by an hub and a switch).&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This interactive game teaches the basic of ip and ethernet protocol
using just paper and pens, and become very popular with our interns
and LUG meetings.&lt;/p&gt;
&lt;p&gt;Participants are divided in teams, simulating simple network
infrastructures (eg. computers connected by an hub and a switch).&lt;/p&gt;
&lt;p&gt;Every player has a role:  a PC or mobile phone, an HUB, a Switch, a
Router, and must communicate with the others following the associate
specification (eg. an hub should broadcast message to every neighbour,
a switch should populate the mac address table, ...)&lt;/p&gt;
&lt;p&gt;The team which is faster in exchanging messages  wins.&lt;/p&gt;
</summary></entry><entry><title>The value of mindfulness and how it has arrived at Google</title><link href="https://pyvideo.org/europython-2016/the-value-of-mindfulness-and-how-it-has-arrived-at-google.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Ralph Heinkel</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/the-value-of-mindfulness-and-how-it-has-arrived-at-google.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ralph Heinkel - The value of mindfulness and how it has arrived at Google
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-value-of-mindfulness-and-how-it-has-arrived-at-google"&gt;https://ep2016.europython.eu//conference/talks/the-value-of-mindfulness-and-how-it-has-arrived-at-google&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Mindfulness has proven to be a foundational skill that started as a
pure buddhist practice. Nowadays mindfulness serves as the core
technique of several western programs ranging from  curing stress-
induced medical problems to curricula for teaching successful business
leadership, such as the Search Inside Yourself program developed at
Google.&lt;/p&gt;
&lt;p&gt;The aim of this seminar is to provide a practical experience of
mindfulness with a short introduction to how it can be applied by
digital workers.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mindfulness has proven to be a foundational skill that started as a
pure buddhist practice. Nowadays mindfulness serves as the core
technique of several western programs ranging from  curing stress-
induced medical problems to curricula for teaching successful business
leadership, such as the Search Inside Yourself  (SIY) program
developed at Google in 2002.&lt;/p&gt;
&lt;p&gt;Mind is the root of all things. Neuroscience shows that attention is a
fundamental function of the mind. Being able to direct attention to
the present moment - and keep it there while performing daily tasks -
is a great tool to navigate through life and its  challenges with more
engagement, more happiness, and more resilience. Focusing attention in
a relaxed way enables us to disconnect from the overall noise found in
a high-speed environment and get things done without feeling too
overwhelmed by them. But being effective is not only about checking
off more tasks - it is about how we are in resonance with our
environment, how we interact with others, and how we face the
increasing complexity in our professional life.&lt;/p&gt;
&lt;p&gt;The aim of this seminar is to provide a practical experience of
mindfulness with a short introduction to how it can be applied in a
technology driven world as experience by digital workers.&lt;/p&gt;
</summary></entry><entry><title>Un vector por tu palabra</title><link href="https://pyvideo.org/europython-2016/un-vector-por-tu-palabra.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mai Giménez</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/un-vector-por-tu-palabra.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mai Giménez - Un vector por tu palabra
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/un-vector-por-tu-palabra"&gt;https://ep2016.europython.eu//conference/talks/un-vector-por-tu-palabra&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;El ecosistema científico de python es extraordinario y saca músculo
con las últimas aportaciones de la comunidad científica. Revisaremos
nuevas aproximaciones a la representación de texto. ¡Tus cadenas de
texto merecen algo más que una mísera bolsa de palabras! Veremos cómo
se aplica la representación distribuida (word embeddings) en un caso
práctico de aprendizaje automático, y daremos consejos para hacer
experimentos replicables y obtener datos significativos.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;“Dime con quien andas y te diré cómo eres” Este dicho es una de las
ideas más revolucionarias en  PLN. Podemos saber muchas cosas de una
palabra por su contexto. No es lo mismo un adorable gato que un gato
mecánico, pero por el contexto diferenciamos esta palabra polisémica.
Hasta ahora la mayor parte de los modelos representan una frase como
una bolsa de palabras. Por ejemplo, si queremos representar este
conjunto de frases: [“I love Python”, “I love NLP”, “Pyladies are
cool”] tenemos un vocabulario de siete palabras: [“I”, “love”,
“Python”, “NLP”, “Pyladies”, “are”, “cool”] esta representación crea
un vector de tamaño del vocabulario para cada frase, y pone a 1 si la
palabra aparece y a 0 en el caso contrario : [[1,1,1,0,0,0,0],
[1,1,0,1,0,0,],[0,0,0,0,1,1,1]] ¡Pero,se pierde el contexto y los
vectores pueden ser gigantes y con muchísimos 0s!
Recientemente, hemos encontrado una forma mucho mejor de representar
las palabras: La representación distribuida -word2vec, por ejemplo-
En esta charla exploramos esta representación y cómo aplicarla en
problemas de clasificación utilizando textos de redes sociales.
Navegaremos por el rico ecosistema científico en python, veremos cómo
crear gráficas significativas y hablaremos de la importancia de
escribir experimentos bien diseñados, replicables y con código
elegante y por supuesto de la importancia de difundir el conocimiento.
Debemos inspirar a la siguiente generación de científicos y
científicas ¡Seamos extraordinarios!&lt;/p&gt;
</summary></entry><entry><title>What Python can learn from Haskell packaging</title><link href="https://pyvideo.org/europython-2016/what-python-can-learn-from-haskell-packaging.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Domen Kožar</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/what-python-can-learn-from-haskell-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Domen Kožar - What Python can learn from Haskell packaging
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/what-python-can-learn-from-haskell-packaging"&gt;https://ep2016.europython.eu//conference/talks/what-python-can-learn-from-haskell-packaging&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Haskell community has made lots of small important improvements to
packaging in 2015. What can Python community learn from it and how are
we different?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Haskell community has been living in &amp;quot;Cabal hell&amp;quot; for decades, but
Stack tool and Nix language have been a great game changer for Haskell
in 2015.&lt;/p&gt;
&lt;p&gt;Python packaging has evolved since they very beginning of distutils in
1999. We'll take a look what Haskell community has been doing in their
playground and what they've done better or worse.&lt;/p&gt;
&lt;p&gt;The talk is inspired by Peter Simons talk given at Nix conference:
[Peter Simons: Inside of the Nixpkgs Haskell Infrastructure][1]&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://www.youtube.com/watch?v=TDnZsBxqeBM&amp;amp;list=PL_IxoDz1Nq2Y7mIxMZ28mVtjRbbnlVdmy&amp;amp;index=4"&gt;https://www.youtube.com/watch?v=TDnZsBxqeBM&amp;amp;list=PL_IxoDz1Nq2Y7mIxMZ28mVtjRbbnlVdmy&amp;amp;index=4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cabal (packaging) interesting features overview&lt;/li&gt;
&lt;li&gt;Cabal file specification overview&lt;/li&gt;
&lt;li&gt;Interesting Cabal features not seen in Python packaging&lt;/li&gt;
&lt;li&gt;Lack of features (introduction into next section)&lt;/li&gt;
&lt;li&gt;Cabal hell&lt;/li&gt;
&lt;li&gt;Quick overview of Haskell community frustration over Cabal tooling&lt;/li&gt;
&lt;li&gt;Stack tool overview&lt;/li&gt;
&lt;li&gt;What problem Stack solves&lt;/li&gt;
&lt;li&gt;How Stack works&lt;/li&gt;
&lt;li&gt;Comparing Stack to pip requirements&lt;/li&gt;
&lt;li&gt;Using Nix language to automate packaging&lt;/li&gt;
&lt;li&gt;how packaging is automated for Haskell&lt;/li&gt;
&lt;li&gt;how it could be done for Python&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Wrestling Python into LLVM Intermediate Representation</title><link href="https://pyvideo.org/europython-2016/wrestling-python-into-llvm-intermediate-representation.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Anna Herlihy</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/wrestling-python-into-llvm-intermediate-representation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anna Herlihy - Wrestling Python into LLVM Intermediate Representation
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/wrestling-python-into-llvm-intermediate-representation"&gt;https://ep2016.europython.eu//conference/talks/wrestling-python-into-llvm-intermediate-representation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The LLVM Project provides an intermediate representation (LLVM-IR)
that can be compiled on many platforms. LLVM-IR is used by analytical
frameworks to achieve language and platform independence. What if we
could add Python to the long list of languages that can be translated
to LLVM-IR? This talk will go through the steps of wrestling Python
into LLVM-IR with a simple, static one-pass compiler.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;What is LLVM-IR?&lt;/p&gt;
&lt;p&gt;The LLVM Compiler Infrastructure Project provides a transportable
intermediate representation (LLVM-IR) that can be compiled and linked
into multiple types of assembly code. What is great about LLVM-IR is
that you can take any language and distill it into a form that can be
run on many different machines. Once the code gets into IR it doesn’t
matter what platform it was originally written on, and it doesn’t
matter that Python can be slow. It doesn’t matter if you have weird
CPUs - if they’re supported by LLVM it will run.&lt;/p&gt;
&lt;p&gt;What is Tupleware?&lt;/p&gt;
&lt;p&gt;TupleWare is an analytical framework built at Brown University that
allows users to compile functions into distributed programs that are
automatically deployed. TupleWare is unique because it uses LLVM-IR to
be language and platform independent.&lt;/p&gt;
&lt;p&gt;What is PyLLVM?&lt;/p&gt;
&lt;p&gt;This is the heart of the talk. PyLLVM is a simple, easy to extend,
one-pass static compiler that takes in the subset of Python most
likely to be used by Tupleware. PyLLVM is based on an existing project
called py2llvm that was abandoned around 2011.&lt;/p&gt;
&lt;p&gt;This talk will go through some basic compiler design and talk about
how some LLVM-IR features make our lives easier, and some much harder.
It will cover types, scoping, memory management, and other
implementation details. To conclude, it will compare PyLLVM to Numba,
a Python-to-LLVM compiler from Continuum Analytics and touch on what
the future has in store for PyLLVM.&lt;/p&gt;
</summary></entry><entry><title>A deep dive into the Pymongo MongoDB driver</title><link href="https://pyvideo.org/europython-2016/a-deep-dive-into-the-pymongo-mongodb-driver.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Joe Drumgoole</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/a-deep-dive-into-the-pymongo-mongodb-driver.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joe Drumgoole - A deep dive into the Pymongo MongoDB driver
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/a-deep-dive-into-the-pymongo-mongodb-driver"&gt;https://ep2016.europython.eu//conference/talks/a-deep-dive-into-the-pymongo-mongodb-driver&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The Pymongo driver is one of MongoDB’s most popular driver interfaces for
connecting to MongoDB. But developers rarely look under the cover to see
what’s happening inside the driver.&lt;/p&gt;
&lt;p&gt;By having a deeper insight into how the driver constructs server requests
and responds, developers will be able to write more effective MongoDB
applications in Python.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The Pymongo driver is one of MongoDB’s most popular driver interfaces for
connecting to MongoDB. But developers rarely look under the cover to see
what’s happening inside the driver.&lt;/p&gt;
&lt;p&gt;By having a deeper insight into how the driver constructs server requests
and responds, developers will be able to write more effective MongoDB
applications in Python.&lt;/p&gt;
&lt;p&gt;We will look at :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initial connection&lt;/li&gt;
&lt;li&gt;A query&lt;/li&gt;
&lt;li&gt;A simple write operation&lt;/li&gt;
&lt;li&gt;A bulk write operation&lt;/li&gt;
&lt;li&gt;How the driver responds when we have a node failure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also give insight into the driver’s approach to server selection
when connecting to a replicas set (a multi-node instance of MongoDB).&lt;/p&gt;
</summary></entry><entry><title>Algorithmic Trading with Python</title><link href="https://pyvideo.org/europython-2016/algorithmic-trading-with-python.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>iztok kucan</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/algorithmic-trading-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;iztok kucan/Joris Peeters - Algorithmic Trading with Python
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/algorithmic-trading-with-python"&gt;https://ep2016.europython.eu//conference/talks/algorithmic-trading-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This is a look behind the scenes at Winton Capital Management- one of
Europe’s most successful systematic investment managers. The talk will
mainly focus on how Python gives researchers fine-grained control over
the data and trading systems, without requiring them to interact
directly with the underlying, highly-optimised technology.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Have you ever wondered what technologies are used in a systematic
trading system that utilises computer models and accounts for the
majority of trading on the stock market? This is a look behind the
scenes at Winton Capital Management- one of Europe’s most successful
systematic investment managers. In this talk, we’ll run through an
overview of Winton’s trading infrastructure, including data
management, signal generation and execution of orders on global
exchanges. The talk will mainly focus on how Python gives researchers
fine-grained control over the data and trading systems, without
requiring them to interact directly with the underlying, highly-
optimised technology.&lt;/p&gt;
</summary></entry><entry><title>Analyzing Data with Python &amp; Docker</title><link href="https://pyvideo.org/europython-2016/analyzing-data-with-python-docker.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Andreas Dewes</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/analyzing-data-with-python-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Dewes - Analyzing Data with Python &amp;amp; Docker
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/analyzing-data-with-python-docker"&gt;https://ep2016.europython.eu//conference/talks/analyzing-data-with-python-docker&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Docker is a powerful tool for packaging software and services in
containers and running them on a virtual infrastructure. Python is a
very powerful language for data analysis. What happens if we combine
the two? We get a very versatile and robust system for analyzing data
at small and large scale!&lt;/p&gt;
&lt;p&gt;I will show how we can make use of Python and Docker to build
repeatable, robust data analysis workflows which can be used in many
different contexts (possibly with a live demo).&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Docker is a powerful tool for packaging software and services in
containers and running them on a virtual infrastructure. Python is a
very powerful language for data analysis. What happens if we combine
the two? We get a very versatile and robust system for analyzing data
at small and large scale!&lt;/p&gt;
&lt;p&gt;I will show how we can make use of Python and Docker to build
repeatable, robust data analysis workflows that can be used in many
different contexts. I will explain the core ideas behind Docker and
show how they can be useful in data analysis. I will then discuss an
open-source Python library (Rouster) which uses the Python Docker-API
to analyze data in containers and show several interesting use cases
(possibly even a live-demo).&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Why data analysis can be frustrating: Managing software, dependencies, data versions, workflows&lt;/li&gt;
&lt;li&gt;How Docker can help us to make data analysis easier &amp;amp; more reproducible&lt;/li&gt;
&lt;li&gt;Introducing Rouster: Building data analysis workflows with Python and Docker&lt;/li&gt;
&lt;li&gt;Examples of data analysis workflows: Business Intelligence, Scientific Data Analysis, Interactive Exploration of Data&lt;/li&gt;
&lt;li&gt;Future Directions &amp;amp; Outlook&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Another pair of eyes: Reviewing code well</title><link href="https://pyvideo.org/europython-2016/another-pair-of-eyes-reviewing-code-well.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Adam Dangoor</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/another-pair-of-eyes-reviewing-code-well.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adam Dangoor - Another pair of eyes: Reviewing code well
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/another-pair-of-eyes-reviewing-code-well"&gt;https://ep2016.europython.eu//conference/talks/another-pair-of-eyes-reviewing-code-well&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Many of us have been taught to code, but we know that software
engineering jobs are so much more than that.
Programmers can spend 5-6 hours per week on code review, but doing
that is almost ignored as a skill.
How many of us have seen poor reviews, which don't catch bugs, make
people feel bad or block important features being merged?
An introduction to what code review is alongside guidelines, tips,
tricks and anecdotes to help make your code reviews be as productive
as possible.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Many of us have been taught to code, but we know that software
engineering is so much more than that. Programmers can spend 5-6 hours
per week on code review, but doing that is almost ignored as a skill,
and instead it is often treated as a rote chore.&lt;/p&gt;
&lt;p&gt;How many of us have seen poor reviews - those which upset people,
don't catch bugs or block important features being merged? This talk
explores the social and technical impacts of various code review
practices as well as helpful tooling. The goal is to provide a
structure to help improve how teams review code, and to introduce the
costs and benefits of code review to anyone unfamiliar with the
practice.&lt;/p&gt;
&lt;p&gt;There are always trade-offs to be made - e.g. think how costly a
security flaw in this code could be to your organisation - perhaps
intense scrutiny is not necessary for prototypes soon to be thrown
away. It is useful to consider the  trade-offs in order to optimise
for a particular problem domain. Perhaps right now it is more
important to look for issues with maintainability, functionality or
performance.&lt;/p&gt;
&lt;p&gt;I talk about how some fantastic code reviews from mentors, colleagues
and strangers have helped me become a better programmer and team
member, as well as occasions where code review has been detrimental by
slowing things down and causing arguments.&lt;/p&gt;
&lt;p&gt;This is aimed at everyone from beginner to advanced programmers.&lt;/p&gt;
</summary></entry><entry><title>async/await in Python 3.5 and why it is awesome</title><link href="https://pyvideo.org/europython-2016/asyncawait-in-python-35-and-why-it-is-awesome.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Yury Selivanov</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/asyncawait-in-python-35-and-why-it-is-awesome.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Yury Selivanov - async/await in Python 3.5 and why it is awesome
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/asyncawait-in-python-35-an-why-it-is-awesome"&gt;https://ep2016.europython.eu//conference/talks/asyncawait-in-python-35-an-why-it-is-awesome&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;async/await is here, everybody can use it in Python 3.5.  It's great
and awesome, yet only a few understand it.  As a PEP 492 author, I'd
really like to have a chance to better explain the topic, show why
async/await is important and how it will affect Python. I'll also tell
a story on how I worked on the PEP -- starting from an idea that I
discussed with Guido on PyCon US 2015, and landing to CPython source
code one and a half moths later!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The talk will start with a brief coverage of the story of asynchronous
programming in Python -- Twisted, Tornado, Stackless Python &amp;amp;
greenlets, eventlet, Tornado, asyncio &amp;amp; curio.  We've come a really
long road, and it's important to understand how we ended up with
async/await.&lt;/p&gt;
&lt;p&gt;Then I'll go over asyncio and curio, showing async/await by example,
explaining that in reality it's a very easy to use language feature.
You don't need to know all the details to be able to successfully use
the new syntax, and even build new frameworks on top of it.&lt;/p&gt;
&lt;p&gt;I'll then explain the async/await machinery in CPython, starting with
generators and 'yield' expression, showing what is 'yield from' and
finally, demonstrating how async/await is implemented in CPython.
This will ensure that those who want to invent some new crazy ways of
using async/await will have a starting point!&lt;/p&gt;
&lt;p&gt;I'll end the talk with a story of how I came up with the idea.  How I
shared it with Guido van Rossum, Victor Stinner, and Andrew Svetlow.
How the first version of the PEP was born, and how we managed to push
it to Python 3.5 in under two months period.  The goal is to make
people understand that it's possible to change your programming
language -- in fact, Python, as any other programming language, wants
new features and capabilities to be relevant.&lt;/p&gt;
</summary></entry><entry><title>Asynchronous network requests in a web application</title><link href="https://pyvideo.org/europython-2016/asynchronous-network-requests-in-a-web-application.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Lauris Jullien</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/asynchronous-network-requests-in-a-web-application.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lauris Jullien - Asynchronous network requests in a web application
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/asynchronous-network-requests-in-a-web-application"&gt;https://ep2016.europython.eu//conference/talks/asynchronous-network-requests-in-a-web-application&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Introducing  asynchronous calls from within an endpoint in a web app
can be desirable but hard to achieve.
This talk will explore different solutions for this (running Twisted
event loop, Co-Routines, Asyncio, …) and how well they play with the
different parallelization models of common WSGI web servers.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;In the more and more popular SOA paradigm, it’s common for services to
have to compose responses with resources from many different services.
Everyone’s first idea will probably be to call each service
synchronously with your favorite python HTTP library. This
unfortunately doesn’t scale well and tens of successive network calls
will make your endpoints painfully slow.&lt;/p&gt;
&lt;p&gt;One solution is to parallelize these network calls. If you are already
using an asynchronous web app (such as Tornado or Twisted), more
asynchronous in your asynchronous shouldn’t be much of a challenge.
But if you chose not to dive into the madness of chained Deferred
calls, and used a standard prefork/threaded WSGI web server (such as
Gunicorn or uWSGI) to run your Django/Flask/Pyramid application, you
might find yourself wondering how to manage these asynchronous calls.&lt;/p&gt;
&lt;p&gt;This talk will explore different solutions (running Twisted event
loop, Co-Routines, Asyncio, …) and how well they play with the
different parallelization models of WSGI web servers.&lt;/p&gt;
</summary></entry><entry><title>Build your Microservices with ZeroMQ</title><link href="https://pyvideo.org/europython-2016/build-your-microservices-with-zeromq.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Floris Bruynooghe</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/build-your-microservices-with-zeromq.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Floris Bruynooghe - Build your Microservices with ZeroMQ
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/build-your-microservices-with-zeromq"&gt;https://ep2016.europython.eu//conference/talks/build-your-microservices-with-zeromq&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;While microservices are rather commonly implemented using JSON over
HTTP this is merely an implementation choice.  This talk will cover
the reasons why you might want to choose ZeroMQ as communication
transport between your microservices instead.  It will show how ZeroMQ
is used from within Python and the common patterns which can simplify
the overal architecture while at the same time providing reliable and
low-latency communications between your services.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Microservices is the popular term for the trend to build backend
architectures as a number of smaller independent processes.  As an
evolution from the Service Oriented Architecture the core aims are to
create independent services which are easy to operate and even replace
while all of them together compose into providing the business logic
required for your application.&lt;/p&gt;
&lt;p&gt;While it is rather common for microservices to choose JSON over HTTP
to communicate with each other, this is purely an implementation
choice.  HTTP is a protocol using a strict request-response format,
this can become a little burdensome when needing to deal with
asynchronous requests and forces some architectural descisions to be
not as ideal as they could be.  ZeroMQ has more flexible communication
patterns allowing for easier mapping of real-life interactions between
services.  Coupled with an easy to use asynchronous user-level API and
very fast underlying communication on persistent TCP connections
ZeroMQ is a rather attractive transport to build your microservices
based applications in.&lt;/p&gt;
&lt;p&gt;This talk will show how to use ZeroMQ within Python to build your
microservices.  It will show the benefits of ZeroMQ's asynchronous
API, common usage patterns and how to handle backpressure.
Furthermore different communication patterns will be explored and the
impact this has on how to simplify the overall architecture using
these patterns.&lt;/p&gt;
</summary></entry><entry><title>Come for the Language, Stay for the Community</title><link href="https://pyvideo.org/europython-2016/come-for-the-language-stay-for-the-community.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/come-for-the-language-stay-for-the-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Naomi Ceder - Come for the Language, Stay for the Community
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/keynote-stay-for-the-community"&gt;https://ep2016.europython.eu//conference/talks/keynote-stay-for-the-community&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;While Python the language is wonderful, the Python community and the
personal, social, and professional benefits that flow from involvement
in a community like ours are often more compelling.&lt;/p&gt;
&lt;p&gt;Learn about the goals of the Python Software Foundation and how
everyone can take part to help build even better Python communities
locally, regionally, and globally.  I will also discuss some of our
strengths as a community, and also look at some of the challenges we
face going forward.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python is a powerful and flexible tool that many of us love and use in
many ways. And yet, as wonderful as  the language is, many would say
that the community is even more attractive. This talk will focus on
involvement in the Python community and what that means - in
particular the many personal, social, and professional benefits that
flow from involvement in a community like ours.&lt;/p&gt;
&lt;p&gt;I will also discuss what the Python Software Foundation does, what its
goals and purpose are, and how everyone in the community can take part
in the PSF to help build even better Python communities. This will
include specific explanations of the membership model and how active
contributors (both in terms of code and community organisation) can
and should become full voting members of the PSF.&lt;/p&gt;
&lt;p&gt;I will also touch on our strengths, like our commitment to safe and
inclusive spaces and our devotion to education, and also look at some
of the challenges we face as a community going forward.&lt;/p&gt;
</summary></entry><entry><title>Cybersecurity in the financial sector with Python</title><link href="https://pyvideo.org/europython-2016/cybersecurity-in-the-financial-sector-with-python.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Miguel Reguero</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/cybersecurity-in-the-financial-sector-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Miguel Reguero/Rodrigo Núñez - Cybersecurity in the financial sector with Python
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/ciberseguridad-en-el-sector-financiero-con-python"&gt;https://ep2016.europython.eu//conference/talks/ciberseguridad-en-el-sector-financiero-con-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;When people talk about cybersecurity they often think about ethical
hacking and exploits, that is but a fraction of what cybersecurity is
about, today we are going to talk about another aspect, which is often
deemed as not too important.&lt;/p&gt;
</summary></entry><entry><title>Data Formats for Data Science</title><link href="https://pyvideo.org/europython-2016/data-formats-for-data-science.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Valerio Maggio</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/data-formats-for-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Valerio Maggio - Data Formats for Data Science
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/data-science-formats-beyond-csv-and-hdfs"&gt;https://ep2016.europython.eu//conference/talks/data-science-formats-beyond-csv-and-hdfs&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The CSV is the most widely adopted data format. It used to
store and share &lt;em&gt;not-so-big&lt;/em&gt; scientific data. However, this format is
not particularly
suited in case data require any sort of internal
hierarchical structure, or if data are too big. To this end, other
data formats must be considered.
In this talk, the different data formats will be presented and
compared w.r.t. their
usage for scientific computations along with corresponding Python libraries.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The &lt;em&gt;plain text&lt;/em&gt; is one of the simplest yet most intuitive format in
which data could be stored.
It is easy to create, human and machine readable,
&lt;em&gt;storage-friendly&lt;/em&gt; (i.e. highly compressible), and quite fast to process.
Textual data can also be easily &lt;em&gt;structured&lt;/em&gt;; in fact to date the
CSV (&lt;em&gt;Comma Separated Values&lt;/em&gt;) is the most common data format among
data scientists.&lt;/p&gt;
&lt;p&gt;However, this format is not properly suited in case data require any
sort of internal
hierarchical structure, or if data are too big to fit in a single disk.&lt;/p&gt;
&lt;p&gt;In these cases other formats must be considered, according to the
shape of data, and the
specific constraints imposed by the context.
These formats may leverage &lt;em&gt;general purpose&lt;/em&gt; solutions, e.g. [No]SQL
databases, HDFS (Hadoop File System);
or may be specifically designed for scientific data, e.g. hdf5, ROOT, NetCDF.&lt;/p&gt;
&lt;p&gt;In this talk, the strength and flaws of each solution will be
discussed, focusing on their usage for scientific computations. The
goal is to provide some practical guidelines for data scientists,
derived from the the comparison of the different Pythonic solutions
presented for the case study analysed. These will include
&lt;cite&gt;xarray&lt;/cite&gt;,
&lt;cite&gt;pyROOT&lt;/cite&gt; &lt;em&gt;vs&lt;/em&gt; &lt;cite&gt;rootpy&lt;/cite&gt;, &lt;cite&gt;h5py&lt;/cite&gt; &lt;em&gt;vs&lt;/em&gt; &lt;cite&gt;PyTables&lt;/cite&gt;, &lt;cite&gt;bcolz&lt;/cite&gt;, and &lt;cite&gt;blaze&lt;/cite&gt;.
Finally, few notes about the new trends for &lt;strong&gt;columnar databases&lt;/strong&gt;
(e.g. &lt;em&gt;MonetDB&lt;/em&gt;) will be also presented, for very fast
in-memory analytics.&lt;/p&gt;
</summary></entry><entry><title>Documentation-driven development</title><link href="https://pyvideo.org/europython-2016/documentation-driven-development.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/documentation-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniele Procida - Documentation-driven development
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/documentation-driven-development"&gt;https://ep2016.europython.eu//conference/talks/documentation-driven-development&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;One secret of Django's success is the quality of its documentation. As
well as being key to the quality of the code itself, it has helped
drive the development of Django as a community project, and even the
professional development of programmers who adopt Django.&lt;/p&gt;
&lt;p&gt;I'll discuss how Django has achieved it, and how any project can
easily win the same benefits.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Part of my job title is &lt;em&gt;Documentation Manager&lt;/em&gt;. When I explain this
to a programmer outside the Python/Django community, the reaction can
be anything from bewilderment to a kind of mild horror. When I mention
it to a Python/Django programmer, the response is usually: &lt;em&gt;Oh, cool&lt;/em&gt;.
In fact, one secret of Django's success is the quality of its
documentation, and everyone who uses Django is quick to note this.&lt;/p&gt;
&lt;p&gt;The returns on Django's investment have been substantial, but some of
them are also surprising.
The documentation has clearly been key to the &lt;em&gt;quality of the code
itself&lt;/em&gt;, but also (less obviously) to the &lt;em&gt;development of Django as a
community project&lt;/em&gt;, and even the &lt;em&gt;professional development of
programmers&lt;/em&gt; who adopt Django.&lt;/p&gt;
&lt;p&gt;I'll discuss how Django has achieved it, and how any project can
easily win the same benefits.&lt;/p&gt;
</summary></entry><entry><title>EPS General Assembly</title><link href="https://pyvideo.org/europython-2016/eps-general-assembly.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Fabio Pliger</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/eps-general-assembly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fabio Pliger/Marc-André Lemburg - EPS General Assembly
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/eps-general-assembly"&gt;https://ep2016.europython.eu//conference/talks/eps-general-assembly&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This is where the EuroPython Society (EPS) board gives its reports,
resolutions are passed and the EPS members can vote in a new EPS
board.&lt;/p&gt;
</summary></entry><entry><title>Ethical hacking with Python tools</title><link href="https://pyvideo.org/europython-2016/ethical-hacking-with-python-tools.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Jose Manuel Ortega</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/ethical-hacking-with-python-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jose Manuel Ortega - Ethical hacking with Python tools
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/ethical-hacking-with-python-tools"&gt;https://ep2016.europython.eu//conference/talks/ethical-hacking-with-python-tools&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python, as well as offering an ecosystem of tools for testing security
and application pentesting.Python offers a tool ecosystem for
developing our own tools security for testing applications and the
servers security,identifying information about servers and potential
vulnerabilities.&lt;/p&gt;
&lt;p&gt;The ultimate objective is show a pentesting tool integrating some of
the modules commented and try a demo showing info about our domain
target and find vulnerabilities in it,&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Nowdays, Python is the language more used for developing tools within
the field of security. Many of the tools can be found today as port
scanner, vulnerability analysis, brute force attacks and hacking of
passwords are written in python. The goal of the talk would show the
tools available within the Python API and third-party modules  for
developing our own pentesting and security tools and finally show a
pentesting tool integrating some of the modules.&lt;/p&gt;
&lt;p&gt;The main topics of the talk could include:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.Enter Python language as platform for developing security tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduction about the main libraries we can use for introducing in
development of security    tools such as socket and requests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.Libraries for obtain servers information such as Shodan,
pygeocoder,pythonwhois&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shodan is a search engine that lets you find specific computers
(routers, servers, etc.) and get information about ports and services
that are opened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.Analysis and metadata extraction in Python for images and documents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Show tools for scraping web data and obtain metadata information  in
documents and images&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.Port scanning with tools like python-nmap&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With python-nmap module we can check ports open for a target ip or domain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.Check vulnerabilities in FTP and SSH servers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With libraries like ftplib and paramiko we can check if the server is
vulnerable to ftp and ssh anonymous connections.&lt;/p&gt;
</summary></entry><entry><title>EuroPython 2017: Help us build the next edition!</title><link href="https://pyvideo.org/europython-2016/europython-2017-help-us-build-the-next-edition.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Fabio Pliger</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/europython-2017-help-us-build-the-next-edition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fabio Pliger/Marc-André Lemburg - EuroPython 2017: Help us build the next edition!
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/europython-2017-help-us-build-the-next-edition"&gt;https://ep2016.europython.eu//conference/talks/europython-2017-help-us-build-the-next-edition&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;We need help with organizing and running EuroPython 2017.&lt;/p&gt;
&lt;p&gt;In this session, we will explain how the EuroPython workgroup model
works and where you could help.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We need help with organizing and running EuroPython 2017&lt;/p&gt;
&lt;p&gt;In this session, we will explain how the EuroPython workgroup model
works and where you could help.&lt;/p&gt;
</summary></entry><entry><title>Grocker, a Python build chain for Docker</title><link href="https://pyvideo.org/europython-2016/grocker-a-python-build-chain-for-docker.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Fabien Bochu</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/grocker-a-python-build-chain-for-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fabien Bochu - Grocker, a Python build chain for Docker
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/grocker-a-python-build-chain-for-docker"&gt;https://ep2016.europython.eu//conference/talks/grocker-a-python-build-chain-for-docker&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Grocker is a Docker build chain for Python. It transforms your Python
package into a self-contained Docker image which can be easily
deployed in a Docker infrastructure. Grocker also adds a Docker entry
point to easily start your application.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;At Polyconseil, we build Paris electric car sharing service: Autolib'.
This system is based on many services developed using web
technologies, Django and our own libraries to handle business logic.&lt;/p&gt;
&lt;p&gt;Packaging is already a difficult problem, deploying large Python
projects is even more difficult. When deploying on a live and user-
centric system like Autolib', you cannot rely on Pip and external PyPI
servers which might become unavailable and are beyond your control. In
the beginning we used classic Debian packaging: it was a maintenance
hell. It took hours to build our packages and update their metadata to
match our Python packages. So we switched to Docker.&lt;/p&gt;
&lt;p&gt;Docker allows us to have a unique item that is deployed in production
systems: code updates are now atomic and deterministic! But before
deploying the Docker image, you need to build it. That's where Grocker
comes in.&lt;/p&gt;
&lt;p&gt;Grocker is a Docker build chain for Python. It will transform your
Python package into a self-contained Docker image which can be easily
deployed in a Docker Infrastructure. Grocker also adds a Docker entry
point to easily start your application.&lt;/p&gt;
</summary></entry><entry><title>High Availability Scaling with Share Nothing Architecture</title><link href="https://pyvideo.org/europython-2016/high-availability-scaling-with-share-nothing-architecture.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>John Kraal</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/high-availability-scaling-with-share-nothing-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;John Kraal - High Availability Scaling with Share Nothing Architecture
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/high-availability-scaling-with-share-nothing-architecture"&gt;https://ep2016.europython.eu//conference/talks/high-availability-scaling-with-share-nothing-architecture&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Scaling a project to a worldwide scale with the same performance and
availability in every region using Python isn’t easy, but with the
right mindset and tools it’s a very viable target.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;We will discuss methods of delivering software, with automated scaling
systems, building units out of your project to manage separately and
how to reliably and securely distribute data to separate clusters, and
how we have achieved this with the use of Celery, Redis, Databases,
Protobuf and other modern tools, whilst making sure to highlight our
pitfalls and successes&lt;/p&gt;
</summary></entry><entry><title>High Performance Python on Intel Many-Core Architecture</title><link href="https://pyvideo.org/europython-2016/high-performance-python-on-intel-many-core-architecture.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Ralph de Wargny</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/high-performance-python-on-intel-many-core-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ralph de Wargny - High Performance Python on Intel Many-Core Architecture
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/high-performance-python-on-intel-architecture"&gt;https://ep2016.europython.eu//conference/talks/high-performance-python-on-intel-architecture&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk will give an overview about the Intel® Distribution for
Python which delivers high performance acceleration of Python code on
Intel processors for scientific computing, data analytics, and machine
learning.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;In the first part of the talk, we'll look at the architecture of the
latest Intel processors, including the brand new Intel Xeon Phi, also
known as Knights Landing, a many-core processor, which was just
released end of June 2016.
In the second part, we will see which tools and libraries are
available from Intel Software to enable high performance Python code
on multi-core and many-core processors.&lt;/p&gt;
</summary></entry><entry><title>How to conquer the world</title><link href="https://pyvideo.org/europython-2016/how-to-conquer-the-world.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Rogier van der Geer</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/how-to-conquer-the-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rogier van der Geer - How to conquer the world
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/a-genetic-algorithm-to-play-the-game-of-risk"&gt;https://ep2016.europython.eu//conference/talks/a-genetic-algorithm-to-play-the-game-of-risk&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The popular board game of Risk has many fans around the world.
Using a Python-based simulation of the game, we use a genetic
algorithm to train a risk-playing algorithm.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;During this talk we'll explain what genetic algorithms are and we'll
explain an entertaining use-case: how to win at popular board games.
During the talk we'll  demo how object oriented patterns help with the
design and implementation of these algorithms. We'll also demonstrate
a library that allows users to push their own risk bots into a game
and battle it out on.&lt;/p&gt;
</summary></entry><entry><title>I Hate You, NLP... ;)</title><link href="https://pyvideo.org/europython-2016/i-hate-you-nlp.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Katharine Jarmul</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/i-hate-you-nlp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In an era of almost-unlimited textual data, accurate sentiment
analysis can be the key for determining if our products, services and
communities are delighting or aggravating others. We'll take a look at
the sentiment analysis landscape in Python: touching on simple
libraries and approaches to try as well as more complex systems based
on machine learning.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;This talk aims to introduce the audience to the wide array of tools
available in Python focused on sentiment analysis. It will cover basic
semantic mapping, emoticon mapping as well as some of the more recent
developments in applying neural networks, machine learning and deep
learning to natural language processing. Participants will also learn
some of the pitfalls of the different approaches and see some hands-on
code for sentiment analysis.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NLP: then and now&lt;/li&gt;
&lt;li&gt;Why Emotions Are Hard&lt;/li&gt;
&lt;li&gt;Simple Analysis&lt;/li&gt;
&lt;li&gt;TextBlob (&amp;amp; other available libraries)&lt;/li&gt;
&lt;li&gt;Bag of Words&lt;/li&gt;
&lt;li&gt;Naive Bayes&lt;/li&gt;
&lt;li&gt;Complex Analysis&lt;/li&gt;
&lt;li&gt;Preprocessing with word2vec&lt;/li&gt;
&lt;li&gt;Metamind &amp;amp; RNLN&lt;/li&gt;
&lt;li&gt;Optimus &amp;amp; CNN&lt;/li&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;li&gt;Watson&lt;/li&gt;
&lt;li&gt;Live Demo&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Leveraging documentation power for better web APIs</title><link href="https://pyvideo.org/europython-2016/leveraging-documentation-power-for-better-web-apis.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Rudy Sicard</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/leveraging-documentation-power-for-better-web-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rudy Sicard - Leveraging documentation power for better web APIs
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/leveraging-documentation-power-for-better-web-apis"&gt;https://ep2016.europython.eu//conference/talks/leveraging-documentation-power-for-better-web-apis&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Web APIs that are easier to understand, develop, test and use, is a
popular subject. &amp;quot;An API is only as good as its documentation&amp;quot;. We
decided to play with this proverb and leverage the power of
documentation. We propose to use the code documentation and the type
system to provide lots of free features: explorable APIs, better error
messages, automatic testing.&lt;/p&gt;
&lt;p&gt;Python is perfect to explore code and documentation dynamically. We'll
demonstrate what we came up to and the lessons we've learned.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;'Rich' web APIs that are easier to understand, develop, test and use,
is a popular subject. There are a lot of new specification languages
(e.g. swagger, apiblueprint ...) and libraries (django-rest-framework,
drf ...) that provide features in this direction. Following the old
proverb &amp;quot;An API is only as good as its documentation&amp;quot;, we decided to
play with these ideas and focus on leveraging the power of
documentation. We propose to use the code documentation and the type
system to provide:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Browsable APIs, that are easy to interact with and visualize, reducing the need to provide custom UIs&lt;/li&gt;
&lt;li&gt;Verification of inputs/outputs along with precise error message if needed&lt;/li&gt;
&lt;li&gt;Automatic [de]-serialization of inputs/ouputs outside of the domain code&lt;/li&gt;
&lt;li&gt;Smart exception handling, e.g. exceptions that are not documented are automatically converted into internal errors&lt;/li&gt;
&lt;li&gt;automatic testing, e.g. input, output and result including exceptions are tested ensuring the code works and the documentation is up-to-date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This use case is one of the rare situation where introspection is
desirable and unavoidable. And Python is a good language to
explore/exploit code and documentation dynamically. The perfect excuse
to spend some time on meta coding a first implementation while being
at work. We'll demonstrate what we came up to, the advantages and
limitations compared to other approaches. And we'll share the lessons
we learned from this experiment.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks 2016-07-21</title><link href="https://pyvideo.org/europython-2016/lightning-talks-2016-07-21.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/lightning-talks-2016-07-21.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers - Lightning Talks
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Lightning talks, presented by Harry Percival&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Managing Mocks</title><link href="https://pyvideo.org/europython-2016/managing-mocks.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/managing-mocks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helen Sherwood-Taylor - Managing Mocks
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/managing-mocks"&gt;https://ep2016.europython.eu//conference/talks/managing-mocks&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Mocking is a valuable technique for writing tests but mocking
effectively is often a stumbling block for many developers and can
raise questions about its overall value as a technique.&lt;/p&gt;
&lt;p&gt;There will be a brief introduction to mocking, then a look at features
and techniques of Python’s unittest.mock library and cover some useful
tips and common scenarios, so this will be useful to those who have
some experience mocking but would like to do so more effectively.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mocking is a valuable technique for writing tests but mocking
effectively is often a stumbling block for many developers and can
raise questions about its overall value as a technique.&lt;/p&gt;
&lt;p&gt;The audience will have some familiarity with unit testing and may have
tried mocking before, but some introduction will be provided for those
who haven’t. We will look at some features and techniques of Python’s
unittest.mock library and cover some useful tips and common scenarios,
so this will be useful to those who have some experience mocking but
would like to do so more effectively.&lt;/p&gt;
&lt;p&gt;Summary of proposed content:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A short introduction to what mocking is and why it is useful.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tour of Python’s mock library and how to make the most of it&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Creating and manipulating Mock objects&lt;/li&gt;
&lt;li&gt;Setting up return values and side effects to control test environment&lt;/li&gt;
&lt;li&gt;Inspecting mocks - different ways to examine a mock object and find out what happened during the test&lt;/li&gt;
&lt;li&gt;How and where to patch&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Common mocking situations - scenarios where mocking is particularly useful and/or tricky to get right. For example - date/time, filesystem, read only properties&lt;/li&gt;
&lt;li&gt;Some discussion of when mocking is and isn't helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Focus will be mainly on Python's unittest.mock module but we will also
have a brief look at some other useful libraries.&lt;/p&gt;
</summary></entry><entry><title>Music transcription with Python</title><link href="https://pyvideo.org/europython-2016/music-transcription-with-python.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Anna Wszeborowska</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/music-transcription-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anna Wszeborowska - Music transcription with Python
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/music-transcription-with-python"&gt;https://ep2016.europython.eu//conference/talks/music-transcription-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Music transcription allows to convert an audio recording to musical
notation through mathematical analysis. In the talk we will focus on
transcribing a monophonic audio input and see how we can modify it on
the fly. To achieve that, we need to determine pitch and duration of
each note, and then use these parameters to create a sequence of MIDI
events.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Music transcription allows to convert an audio recording to musical
notation through mathematical analysis. It is a very complex problem,
especially for polyphonic music - currently existing solutions yield
results with approx. 70% or less accuracy.&lt;/p&gt;
&lt;p&gt;In the talk we will focus on transcribing a monophonic audio input and
see how we can modify it on the fly.
To achieve that, we need to determine pitch and duration of each note,
and then use these parameters to create a sequence of MIDI events.
MIDI stands for &lt;em&gt;Musical Instrument Digital Interface&lt;/em&gt; and it encodes
commands used to generate sounds by musical hardware or software.&lt;/p&gt;
&lt;p&gt;Let's see how to play around with sounds using Python and a handful of
its powerful libraries. And let's do it in real-time!&lt;/p&gt;
</summary></entry><entry><title>OMG, Bokeh is better than ever!</title><link href="https://pyvideo.org/europython-2016/omg-bokeh-is-better-than-ever.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Fabio Pliger</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/omg-bokeh-is-better-than-ever.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fabio Pliger - OMG, Bokeh is better than ever!
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/omg-bokeh-is-better-then-ever"&gt;https://ep2016.europython.eu//conference/talks/omg-bokeh-is-better-then-ever&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Bokeh is a unique library in its genre that lets users create
beautiful and complex visualizations from Python.&lt;/p&gt;
&lt;p&gt;The talks shows a comprehensive overview of the most powerful and
popular Bokeh features, like: the optimized websocket based server for
performant python callbacks from actions on the browser, Javascript
callbacks written in Python (YES!!), bokeh command that lets target
different outputs from the same input, JS transforms from Python,
high-level charts, Geo support, ...&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Bokeh is a unique library in its genre that lets users create
beautiful and complex visualizations from Python (and other languages)
to the browser without actually writing Javascript or HTML.&lt;/p&gt;
&lt;p&gt;In the last year the Bokeh team have added a large number of unique
features that are extremely powerful. Fully optimized websocket based
server that enables performant python callbacks from actions on the
browser, Javascript callbacks written in Python (YES!!), bokeh command
that lets target different outputs from the same input, JS transforms
from Python, high-level charts, Geo support, ...&lt;/p&gt;
&lt;p&gt;Anyone interested in powerful and easy visualizations should take a
look at it. :)&lt;/p&gt;
</summary></entry><entry><title>Planning for the worst</title><link href="https://pyvideo.org/europython-2016/planning-for-the-worst.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/planning-for-the-worst.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexys Jacob/Guillaume Gelin - Planning for the worst
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/planning-for-the-worst"&gt;https://ep2016.europython.eu//conference/talks/planning-for-the-worst&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Sharing our worst production experiences and the tricks, good
practices and code we developed to address them.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This talk is about sharing our experience about how we handled
production problems on all levels of our applications.&lt;/p&gt;
&lt;p&gt;We'll begin with common problems, errors and failures and dig on to
more obscure ones while sharing concrete tips, good practices and code
to address them !&lt;/p&gt;
&lt;p&gt;This talk will make you feel the warmth of not being alone facing a problem :)&lt;/p&gt;
</summary></entry><entry><title>Pytest 3.0</title><link href="https://pyvideo.org/europython-2016/pytest-30.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Raphael Pierzina</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/pytest-30.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raphael Pierzina - Pytest 3.0
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/pytest-30"&gt;https://ep2016.europython.eu//conference/talks/pytest-30&lt;/a&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New features of pytest's upcoming major version 3.0&lt;/li&gt;
&lt;li&gt;Breaking changes and other important information&lt;/li&gt;
&lt;li&gt;Recap of the first developer sprint in June, 2016&lt;/li&gt;
&lt;li&gt;Thank you notes to all who have contributed to the fundraiser&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Pytest is a mature testing framework for Python that is developed by a
thriving and ever-growing community of volunteers. Following the
principle of &amp;quot;no API is the best API&amp;quot; it uses plain assert statements
and regular Python comparisons. Writing tests with pytest requires
little to no boilerplate code and powerful features allow easy
parametrization and intelligent test selection.&lt;/p&gt;
&lt;p&gt;In this talk we will have an in-depth look at new features of pytest
3.0 and live demo possible use cases. We will also learn about
important bugfixes and other enhancements of the upcoming major
release. Backwards-incompatible changes will be addressed and changes
made to the documentation will be highlighted.&lt;/p&gt;
&lt;p&gt;If you are already familiar with pytest, you will be happy to hear
about significant improvements of the fixture and hook system but also
what's in store for a better integration with tox, an important tool
that allows testing across different Python versions.&lt;/p&gt;
&lt;p&gt;In June, 2016 more than 25 Pythonistas from around the globe gather in
Freiburg, Germany to work on the release and set the path for future
developments of the core framework. This is a big step forward for the
project made posssible by a fundraiser that reached 108% of it's
initial goal.&lt;/p&gt;
&lt;p&gt;I will share our experiences from the developer sprint while they are
still fresh and explain why these events are incredibly important for
a community and give advice on how to organize your own.&lt;/p&gt;
</summary></entry><entry><title>Python in Astronomy</title><link href="https://pyvideo.org/europython-2016/python-in-astronomy.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Sławomir Piasecki</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/python-in-astronomy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sławomir Piasecki - Python in Astronomy
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/python-in-astronomy"&gt;https://ep2016.europython.eu//conference/talks/python-in-astronomy&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I would like to talk about modern Astronomy where I would give a brief
history of Astronomy. I will answer some question:
What do we use computers for today in astronomy?
Where is Python’s place in today’s science?
Is Python is the best language for scientific computation?
I would like to give a short introduction into AstroPy module. Finally
I would like presents some result of my research where Python was used
to create data.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;For ages people have been watching the sky, and tried to learn
something about all those mysterious lights. In ancient times,
scientist used mostly their naked eyes to watch what happened in the
night sky. Astronomy is one of the oldest fields in science.
Everything changed when Galileo invented his lunette. Thanks to thi,
we were able to proof Copernicus’ new model of the solar system with
the sun in the center.&lt;/p&gt;
&lt;p&gt;The next big step in Astronomy was using computers. Where there are
computers and Astronomy, there is a place for programming. For many
years astronomers were mostly using Fortran and C/C++. Both are suited
to numeric computation and scientific computing. Since they are
structured programming language, that makes them very valuable for
science.&lt;/p&gt;
&lt;p&gt;Over the past decade, Python has started to be used by more and more
people in astronomy. But is there a place in Astronomy for Python, as
it is not as fast as Fortran or C/C++? In Python there is a module
called AstroPy which helps astronomers in their work.&lt;/p&gt;
&lt;p&gt;MatPlotLib is one of the most popular library use in astronomy. This
tool helps created very sophisticated plots and graphs.&lt;/p&gt;
&lt;p&gt;Finally I would like talk about some research I did using Python. For
research, we decided to use AUTO. It is a hybrid of Fortran and
Python, to compute bifurcation points in mathematical models. In
Python we introduce mathematical model, ODE and initial parameters.
Fortran does all the computation.&lt;/p&gt;
</summary></entry><entry><title>Real virtual environments without virtualenv</title><link href="https://pyvideo.org/europython-2016/real-virtual-environments-without-virtualenv.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Mihai Iachimovschi</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/real-virtual-environments-without-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mihai Iachimovschi - Real virtual environments without virtualenv
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/real-virtual-environments-without-virtualenv"&gt;https://ep2016.europython.eu//conference/talks/real-virtual-environments-without-virtualenv&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Virtualenv is a great tool for the development environment but it's
definitely not suitable for every use case. Also, Docker is great for
running the application in production, but not everyone that use it in
production tried to use it in the development environment. Why not use
the same tool from the beginning of the project and until it hits the
production in a uniform stack of tooling? This talk will show use
cases of using Docker in the process of development as well.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The process of developing using Python is very straightforward and
easy. Still, each and every developer has his own style of developing
and building his entire dev environment. Most of us use virtualenvs
which are reliable and comfortable to use. But there are some issues.
For instance, the repeatability and immutability of the built
environment are not guaranteed.&lt;/p&gt;
&lt;p&gt;Virtualenv does a lot of work that targets the direction of somehow
isolated and independent environments. They are &lt;em&gt;almost&lt;/em&gt; &lt;em&gt;fully&lt;/em&gt;
repeatable. In any team, we can hear the notorious expression &amp;quot;It
works for me!&amp;quot;.&lt;/p&gt;
&lt;p&gt;For some time now, I am using Docker instead of virtualenv for
building custom and really-virtual environments that are entirely
isolated. The containers are immutable and consistent, so this
workflow guarantees repeatability.  Using such technique, not only
enables the user to have unique and immutable environments, it also
allows de developer to create full app architecture that can then be
tested and deployed as is. So the production version will be in
identical conditions as the one from the development environment.
These features are not provided by virtualenv at all.&lt;/p&gt;
&lt;p&gt;The goal of this exercise is to try to use totally different tooling
for building the application from its first line of code until the
production.&lt;/p&gt;
</summary></entry><entry><title>Simplifying Computer Art in Python</title><link href="https://pyvideo.org/europython-2016/simplifying-computer-art-in-python.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Catherine Holloway</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/simplifying-computer-art-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Catherine Holloway - Simplifying Computer Art in Python
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/simplifying-computer-art-in-python"&gt;https://ep2016.europython.eu//conference/talks/simplifying-computer-art-in-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The Processing project demonstrated that computer art can attract a
wider audience to programming. Python has a robust catalog of
libraries, including two interfaces to OpenGL. However, none of these
libraries replicate Processing’s simplicity when drawing to the
screen. I will present my solution to this problem: a re-
implementation of VPython’s visual module purely in python called
PygletHelper.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Processing is a programming language originally developed by the MIT
media lab with the goal of allowing artists, educators, and many
others develop striking computer generated or assisted projects
without requiring deep knowledge of software engineering or computer
graphics. Like Processing, Python has become a favourite language of
users from diverse backgrounds, such as web development, education,
and science. Unlike Processing, python lacks a simple and easy to use
library for drawing shapes. Python’s existing libraries for scientific
computing and data analysis could be made even more awesome when
combined with a simple drawing library.&lt;/p&gt;
&lt;p&gt;VPython contains a module called visual that established a simple API
and convention for drawing shapes, however it was written in C++,
prior to the development of pyglet, and thus is not entirely cross-
platform. In this talk, I will demonstrate my solution to this
problem: a re-implementation of visual purely in Python called
PygletHelper. Pyglet, an existing python library, provides a python
interface to OpenGL. PygletHelper is built on pyglet but obscures all
of the OpenGL calls, such that the user can draw simple geometric
shapes to the screen and animate them without needing to know about
computer graphics terminology, memory usage, or C data types.&lt;/p&gt;
&lt;p&gt;I will also show some need visualizations of science and music in my
talk, as well as the graphical glitches encountered implementing the
library.&lt;/p&gt;
</summary></entry><entry><title>Unveiling the Universe with python</title><link href="https://pyvideo.org/europython-2016/unveiling-the-universe-with-python.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Valeria Pettorino</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/unveiling-the-universe-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Valeria Pettorino - Unveiling the Universe with python
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/unveiling-the-universe-with-python"&gt;https://ep2016.europython.eu//conference/talks/unveiling-the-universe-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I will describe a scientific application of python in the field of
Astrophysics and Cosmology. How the publicly available package Monte
Python is used to compare data from space satellite missions with
theoretical models that attempt to describe the evolution and content
of the Universe. The result is surprising, as it points towards a
Universe which is mainly dark.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Python is widely used in Cosmology, which is the study of the Universe
and all forms of energy in it. A large amount of data has been
recently obtained through space satellite missions, such as Planck,
financed by ESA/NASA. Planck has observed the radiation emitted about
13 billion years ago (the Cosmic Microwave Background, CMB), which
gives us information on the content and space-time geometry of the
Universe. Many competitive theoretical models have been proposed that
aim at describing the evolution of the species contained in the
Universe: therefore, cosmologists need a method to identify which
theoretical model better fits the data. In order to compare data with
theoretical predictions, cosmologists use Bayesian statistics and
Monte Carlo simulations. Among the tools developed for the analysis,
the package ‘Monte Python’ is publicly available and uses python to
perform Monte Carlo simulations: this allows to determine the
theoretical model that maximizes the likelihood to obtain the observed
data. Such model is now the standard cosmological model and reveals a
Universe that is very different from what scientists had ever
expected. A Universe in which the atoms we are made of, constitute
only 5% of the total energy budget. The rest is the so-called ‘Dark
Universe’.&lt;/p&gt;
&lt;p&gt;I will illustrate the story of how cosmologists used python to analyse
the data of the CMB and unveil the Dark Universe.&lt;/p&gt;
</summary></entry></feed>