<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 11 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Testing your Python Code with PyTest</title><link>https://pyvideo.org/scipy-2019/testing-your-python-code-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every developer has heard the saying that “untested software is broken software.” In this tutorial we will show you the best practices for software testing in Python using the pytest framework. Learners will write tests for several existing functions in a provided library, including testing strings, integers, floats, lists, and arrays. We will also use the pytest-mpl library to test matplotlib plotting functions with image comparison. Topics such as test fixtures, parameterization, and test coverage will also be demonstrated. Finally, students will implement new functionality in the example library and employ test-driven-development practices. This course is targeted at anyone writing code for their own scientific use or for a scientific library and wants to learn effective ways to test that code. Learners are expected to have a grasp on the Python language features, be able to write functions, be able to create and run python scripts, and be comfortable with the command line. Learners are also encouraged to have a GitHub account and be comfortable with git, though it is not necessary for the core testing materials that will be taught. By the end of this tutorial, learners will be able to write tests for numerical and string returning functions, write image tests for plotting functions, and check the coverage of their existing codebase. This knowledge will equip them to be able to implement a test suite on their new or legacy code bases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Leeman</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:scipy-2019/testing-your-python-code-with-pytest.html</guid><category>tutorial</category></item><item><title>Development of MetPy’s Declarative Plotting Interface</title><link>https://pyvideo.org/scipy-2018/development-of-metpys-declarative-plotting-interface.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores the use of matplotlib together with traitlets to help
develop MetPy’s declarative plotting interface. This interface helps to
mimic the functionality available in the legacy GEMPAK package; we also
hope that this declarative interface will simplify the process of
creating plots for new users.Presenter(s): Speaker: Ryan May,
UCAR/Unidata Speaker: John Leeman, UCAR/Unidata&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan May</dc:creator><pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-13:scipy-2018/development-of-metpys-declarative-plotting-interface.html</guid></item><item><title>Setting Up Your Own Open Source Project</title><link>https://pyvideo.org/scipy-2018/setting-up-your-own-open-source-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Setting up an open source project with an advanced set of tools is
easier than ever. However, the breadth and complexity of the tools
available can be intimidating to the new user. In this half-day,
intermediate level tutorial, we will interactively walk through the
steps needed to set up an open source project on GitHub in the most
sustainable fashion possible. Topics discussed and covered in a hands-on
fashion include: creating a new repository on GitHub; testing with
PyTest; continuous integration with TravisCI; and online documentation
with Sphinx and ReadTheDocs. The goal of the tutorial is to get
attendees over the initial hump of learning these tools and communicate
some best practices from the world of open source.Presenter(s): Speaker:
Ryan May, UCAR/Unidata Speaker: John Leeman, UCAR/Unidata&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan May</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-10:scipy-2018/setting-up-your-own-open-source-project.html</guid></item><item><title>MetPy’s Choice of Unit Support - A Descent into Madness</title><link>https://pyvideo.org/scipy-2017/metpys-choice-of-unit-support-a-descent-into-madness.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Proper handling of physical quantities (aka. “units”) is important for scientific programming, and is something computers should be able to facilitate for programmers. This talk explores a few of the currently maintained libraries for unit support in Python and discusses the challenges and pitfalls of using them within the rest of the scientific Python stack.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan May</dc:creator><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-14:scipy-2017/metpys-choice-of-unit-support-a-descent-into-madness.html</guid></item><item><title>Modeling Rate and State Friction with Python</title><link>https://pyvideo.org/scipy-2016/modeling-rate-and-state-friction-with-python-scipy-2016-modeling-rate-and-state-friction-with-py.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Friction plays a crucial role in a broad spectrum of natural and technological applications ranging from earthquakes to materials handling. Researchers working to understand frictional dynamics often develop their own software to solve specific problems with constitutive laws that include history and strain rate dependence, which has limited interdisciplinary comparison and community standards. We address these shortcomings with a Python implementation of the rate-and-state friction constitutive laws, including tools to handle multiple state variables, dynamic instability, and variations in friction rate dependence with slip velocity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Leeman</dc:creator><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-15:scipy-2016/modeling-rate-and-state-friction-with-python-scipy-2016-modeling-rate-and-state-friction-with-py.html</guid><category>SciPy 2016</category></item></channel></rss>