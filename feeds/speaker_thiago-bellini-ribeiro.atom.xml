<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Thiago Bellini Ribeiro</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_thiago-bellini-ribeiro.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-10-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Building high-performance, type-safe GraphQL APIs with Strawberry and Django</title><link href="https://pyvideo.org/djangocon-us-2023/building-high-performance-type-safe-graphql-apis-with-strawberry-and-django.html" rel="alternate"></link><published>2023-10-17T00:00:00+00:00</published><updated>2023-10-17T00:00:00+00:00</updated><author><name>Thiago Bellini Ribeiro</name></author><id>tag:pyvideo.org,2023-10-17:/djangocon-us-2023/building-high-performance-type-safe-graphql-apis-with-strawberry-and-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will explore the world of GraphQL APIs with Strawberry, a new Python library that makes it easy to create GraphQL APIs with Django. We will dive into what GraphQL is, how it compares to traditional RESTful APIs, and what makes Strawberry stand out from other …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will explore the world of GraphQL APIs with Strawberry, a new Python library that makes it easy to create GraphQL APIs with Django. We will dive into what GraphQL is, how it compares to traditional RESTful APIs, and what makes Strawberry stand out from other Python GraphQL libraries.&lt;/p&gt;
&lt;p&gt;One of the biggest challenges in GraphQL API development is the N+1 problem, where queries can become exponentially slow as more data is requested. We will discuss how data loaders can help solve this problem, and go in-depth on how to use them in Strawberry. In this topic we will also cover how the Strawberry Django integration leverages query introspection and user defined hints to automatically call .only(…)/.select_related(…)/.prefetch_related(…) on querysets, making your queries more efficient and avoiding common pitfalls. This is especially important in high-traffic, production environments where performance is critical.&lt;/p&gt;
&lt;p&gt;Finally, we will showcase some of the benefits of using Strawberry and Django together, including a type-safe approach to API development and streamlined code maintenance. By the end of this talk, you'll have the knowledge and tools you need to create high-performance GraphQL APIs with Strawberry and Django.&lt;/p&gt;
&lt;p&gt;It will be presented in the following order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;Quick overview of what a GraphQL API looks like and its advantages&lt;/li&gt;
&lt;li&gt;Writing general GraphQL APIs using Strawberry&lt;/li&gt;
&lt;li&gt;Integrating the Django ORM with Strawberry&lt;/li&gt;
&lt;li&gt;Some common pitfalls, with emphasis on the N+1 problem&lt;/li&gt;
&lt;li&gt;GraphQL tools to avoid those pitfalls and how to use them with Strawberry&lt;/li&gt;
&lt;li&gt;How the Strawberry Django integration uses introspection to automatically overcome those pitfalls and also improve performance when executing Django querysets&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2023"></category></entry></feed>