<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_grigori-fursin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-06-20T00:00:00+00:00</updated><entry><title>Python and scikit-learn based open research SDK for collaborative data management and exchange</title><link href="https://pyvideo.org/pydata-london-2015/python-and-scikit-learn-based-open-research-sdk-for-collaborative-data-management-and-exchange.html" rel="alternate"></link><published>2015-06-20T00:00:00+00:00</published><updated>2015-06-20T00:00:00+00:00</updated><author><name>Grigori Fursin</name></author><id>tag:pyvideo.org,2015-06-20:pydata-london-2015/python-and-scikit-learn-based-open-research-sdk-for-collaborative-data-management-and-exchange.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We would like to share our experience with a python-based Collective
Knowledge SDK for collaborative and reproducible experimentation. It
helps organize and share experimental setups (code, data and meta) as
unified and reusable components with JSON API via GITHUB. It also
helps unify, automate and crowdsource analysis and exploration of
multi-dimensional optimization spaces using scikit-learn.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://github.com/ctuning/ck"&gt;http://github.com/ctuning/ck&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Faster and more power efficient computer systems are vital to continue
innovation in science and technology. However, designing such systems
has become intolerably complex, ad-hoc, costly and error prone due to an
enormous number of available design and optimization choices, and
complex interactions between all software and hardware components.&lt;/p&gt;
&lt;p&gt;Originally, our automatic and machine-learning based exploration and
autotuning techniques showed high potential to address above problems
[1]. On the other hand, very quickly we faced many other problems such
as dealing with ever changing tools and their interfaces, lack of a
common experimental methodology, lack of computational power for machine
learning and feature selection, problems with reproducibility of
empirical experiments, and lack of unified mechanisms for knowledge
management and exchange.&lt;/p&gt;
&lt;p&gt;Eventually, to be able to proceed with our research, we did not have a
choice but to develop an open-source framework and repository
(Collective Knowledge) for collaborative and reproducible
experimentation [2]. This python-based framework and repository helped
our community start organizing, describing, cross-linking and sharing
code, data, experimental setups and meta information as unified and
reusable components with JSON API via standard Git services (such as
GITHUB or BitBucket) [3]. Such unification, in turn, helped researchers
assemble various experimental setups (workflows) from shared python
components to quickly prototype ideas while crowdsourcing experiments
across spare computer resources such as Android mobile phones and
tablets [4].&lt;/p&gt;
&lt;p&gt;Furthermore, public and unified repository allowed the community to
expose experiments to predictive analytics from scikit-learn
(statistical analysis, data mining, machine learning) to automate and
speed up exploration of multi- dimensional experimental choices,
analysis of results and decision making (i.e. predicting program
optimizations or hardware configuration based on program and data set
features) [1,3].&lt;/p&gt;
&lt;p&gt;During past 5 years, our free and open-source technology has been
extensively used and validated by several major industrial partners. It
also helped initiate new publication model in computer engineering where
experiments and artifacts are validated and improved by the community
[5]. We therefore believe that our practical experience with this
python-based framework and scikit-learn tools may be useful to
researchers from other fields.&lt;/p&gt;
&lt;p&gt;In this talk, we would like to present our framework, JSON-based APIs,
real usage experience to solve program optimization problems, and future
work for python-based data management and exchange. In a longer term, we
are interested to collaborate with a python community to speed up python
itself and related data analytics modules using our machine-learning
based autotuning and run- time adaptation techniques.&lt;/p&gt;
&lt;p&gt;More details about our techniques and public initiatives:&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://hal.inria.fr/hal-01054763"&gt;https://hal.inria.fr/hal-01054763&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a class="reference external" href="http://github.com/ctuning/ck"&gt;http://github.com/ctuning/ck&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a class="reference external" href="http://c-mind.org/repo"&gt;http://c-mind.org/repo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]
&lt;a class="reference external" href="https://play.google.com/store/apps/details?id=com.collective_mind.node"&gt;https://play.google.com/store/apps/details?id=com.collective_mind.node&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a class="reference external" href="http://c-mind.org/reproducibility"&gt;http://c-mind.org/reproducibility&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>