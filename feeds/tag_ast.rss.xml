<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 11 May 2018 00:00:00 +0000</lastBuildDate><item><title>The AST and Me</title><link>https://pyvideo.org/pycon-us-2018/the-ast-and-me.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get under the hood and learn about Python's beloved Abstract Syntax Tree. Ever wonder how Python code is run? Overheard people arguing about whether Python is interpreted or compiled? In this talk, we will delve into the lifecycle of a piece of Python code in order to understand the role that Python's Abstract Syntax Tree plays in shaping the runtime of your code. Utilizing your newfound knowledge of Python's AST, you'll get a taste of how you probably already rely on ASTs and how they can be used to build awesome tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emily Morehouse-Valcarcel</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/the-ast-and-me.html</guid><category>ast</category><category>abstract syntax tree</category></item><item><title>The AST and Me</title><link>https://pyvideo.org/pycascades-2018/the-ast-and-me.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get under the hood and learn about Python's beloved Abstract Syntax Tree. We'll discuss the AST's role in Python's compilation process, how it affects Bytecode, and how you can use it's optimizations to improve your code's speed at runtime. Write better code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emily Morehouse-Valcarcel</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/the-ast-and-me.html</guid><category>ast</category></item><item><title>Hacking the Python AST</title><link>https://pyvideo.org/pycon-de-2017/hacking-the-python-ast.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Suhas SG&lt;/strong&gt; (&amp;#64;jargnar)&lt;/p&gt;
&lt;p&gt;Suhas is a data scientist, full stack engineer, and a design hacker originally from Bangalore, India. He is currently a data engineer at Zalando SE, Berlin. Earlier, he has designed and built big data solutions for some of the Fortune 500 companies.&lt;/p&gt;
&lt;p&gt;He is also the founder and curator of a data visualization and art museum called LifeWithData.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Computer languages are a remarkable feat of human scientific engineering. In this talk, we'll look at the innards of CPython, and specifically learn how to modify and hack Abstract Syntax Trees (for world peace, of course).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Summary&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Computer languages are a remarkable feat of human scientific engineering. In this talk, we'll look at the innards of CPython, and specifically learn how to modify Abstract Syntax Trees (for world peace, of course).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Rough agenda&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;[ 05 mins ] --- A brief intro to languages and compilers&lt;/li&gt;
&lt;li&gt;[ 05 mins ] --- CPython and parsing grammars&lt;/li&gt;
&lt;li&gt;[ 10 mins ] --- Everything about Python ASTs&lt;/li&gt;
&lt;li&gt;[ 15 mins ] --- Let's write a flake8 plugin (to understand ASTs better)&lt;/li&gt;
&lt;li&gt;[ 05 mins ] --- Metaprogramming, code as data, possibilities and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What we'll learn&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We'll learn the life of a python code, and how the CPython process works.&lt;/li&gt;
&lt;li&gt;We'll understand and be able to participate in conversations that include words like LL(1) parser&lt;/li&gt;
&lt;li&gt;We'll make our devious minds work towards hacking into source code and modifying it with the help of ast.NodeTransformer&lt;/li&gt;
&lt;li&gt;We'll learn to write a Flake8 plugin&lt;/li&gt;
&lt;li&gt;A treasure map to dive into deeper waters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Basics of Python, must be comfortable with lists, functions, classes&lt;/li&gt;
&lt;li&gt;Basic idea / understanding of data structures&lt;/li&gt;
&lt;li&gt;A mischievous mind to get hands dirty for intercepting source code and parsing ASTs&lt;/li&gt;
&lt;li&gt;A bottle of water to keep yourself hydrated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Suhas SG</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/hacking-the-python-ast.html</guid><category>ast</category></item><item><title>What would you do with an ast?</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--what-would-you-do-with-an-ast.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What would you do with an ast?&lt;/p&gt;
&lt;p&gt;Presented by Matthew J Desmarais&lt;/p&gt;
&lt;p&gt;The ast module in the Python (&amp;gt;= 2.6) standard library provides a
representation of python code in a python data structure. We'll begin
with a discussion about what an abstract syntax tree is and why it's
useful. We can then talk about what's available in the ast module, how
it works, and how you can use it. This will be a practical session built
around examples examining and modifying live ASTs.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;I would prefer to make this a 45 minute talk with examination of code
samples.&lt;/p&gt;
&lt;p&gt;Python 2.6 introduced a new module in the standard library, ast. The
first line of the ast documentation is, &amp;quot;The ast module helps Python
applications to process trees of the Python abstract syntax grammar.&amp;quot;
What this means is not obvious and many, if not most, python programmers
won't know what this means. I will begin by talking about the idea of
syntax tree and how it fits into the python execution lifecycle. I will
also talk about the contents of the ast module. I will cover the
available ast.Node subclasses and the provided helper functions,
including the NodeVisitor and NodeTransformer. I will finish by talking
about how the ast module can be used to analyze Python code and how it
can be used to generate new code.&lt;/p&gt;
&lt;p&gt;I expect the time to break down roughly like this:&lt;/p&gt;
&lt;p&gt;Introduction ( 5m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Capacitor joke&lt;/li&gt;
&lt;li&gt;What is an abstract syntax tree?&lt;/li&gt;
&lt;li&gt;How they are used by the Python interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The contents of the ast module (20 m)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The node subclasses and the ast ( 10m )&lt;ul&gt;
&lt;li&gt;How you get an ast.&lt;/li&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;ast.stmt vs. ast.expr&lt;/li&gt;
&lt;li&gt;peculiarities&lt;/li&gt;
&lt;li&gt;code examples&lt;ul&gt;
&lt;li&gt;elif as syntactic sugar for &amp;quot;if: else: if:&amp;quot;&lt;/li&gt;
&lt;li&gt;comparison operators&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Why this is useful.&lt;/li&gt;
&lt;li&gt;the ast is the &amp;quot;truth&amp;quot; of the program&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;tricky code&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The ast module helpers ( 10m )&lt;ul&gt;
&lt;li&gt;visitor pattern&lt;/li&gt;
&lt;li&gt;NodeVisitor&lt;/li&gt;
&lt;li&gt;NodeTransformer&lt;/li&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What you do with an ast ( 15m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Walking an ast&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;a simple visitor to gather variables by scope&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating/Modifying an ast&lt;ul&gt;
&lt;li&gt;code examples&lt;/li&gt;
&lt;li&gt;rearrange imports transformer&lt;/li&gt;
&lt;li&gt;naive &amp;quot;rename all instances&amp;quot; transformer&lt;/li&gt;
&lt;li&gt;naive macro expansion transformer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Conclusion ( 5m )&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Practical Applications&lt;ul&gt;
&lt;li&gt;existing projects&lt;/li&gt;
&lt;li&gt;visitors&lt;ul&gt;
&lt;li&gt;checkers (pylint, pyflakes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transformers&lt;ul&gt;
&lt;li&gt;refactoring tools (rope)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When is it a good idea to use ast?&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthew J Desmarais</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--what-would-you-do-with-an-ast.html</guid><category>ast</category><category>pycon</category><category>pycon2011</category></item></channel></rss>