<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 04 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Ask the Ecosystem: Lessons from 200+ FOSS Applications</title><link>https://pyvideo.org/pybay-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
If you had to build a software application right now, how would you do it? First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python applications to provide advice on building effective software to reach the masses. Architecture, testing, licensing, packaging and distribution, these projects hold lifetimes of work and wisdom, waiting to be learned!&lt;/p&gt;
&lt;p&gt;Abstract
If you had to build a software application right now, how would you do it? First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python applications to provide empirical advice for building effective software to reach the masses. We'll look at architecture, testing, licensing, and even packaging and distribution. Each of these applications contains answers to every question raised during application development.&lt;/p&gt;
&lt;p&gt;Why spend days and weeks piecing together the basics from first principles (blog posts and Stack Overflow), when Python's rich ecosystem readily provides? Go farther by following in the footsteps of such giants as Deluge, Reddit, Pi-Hole, FreeCAD, Unknown Horizons, Calibre, Magic Wormhole, Synapse, Zulip, Anki, Sage Math, Sentry, and more.&lt;/p&gt;
&lt;p&gt;In this presentation, we'll explore many questions, just a few of which include:&lt;/p&gt;
&lt;p&gt;What userbases do Python-based applications reach?
Where in software is Python leading, and what domains represent its biggest gaps?
What library dependencies appear in the application zeitgeist?
What copyright licenses are used by applications, and how do these practices differ from libraries?
How many projects rely only on donations, as opposed to having foundation or corporation support?
What can Python developers do to support and get involved in Python's rich application space?
A production application is worth a hundred blog posts and a thousand Stack Overflow answers. You've already heard all the talk about best practices, now come hear about the practical practices from real Python applications.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;p&gt;3m - Defining the &amp;quot;application&amp;quot;
3m - Distinguishing between open-source application and library development
The top 200 open-source Python applications (methodology and taxonomy)
3m - Exemplars (e.g., Deluge, Anki, Synapse, yum/dnf, etc.)
3m - Methodology and prior art
2m - Taxonomy and organization
Common patterns and antipatterns in Python application design
3m - Architecture
4m - Dependencies
5m - Packaging and distribution
2m - Documentation
3m - Licensing
3m - The role of open-source in future Python usage
3m - Getting involved in open-source
Total: 37 minutes&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/dwXG8"&gt;https://t.ly/dwXG8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Mahmoud Hashemi is a backend engineer and architect, open-source library maintainer, and Wikipedian, with ten years of experience building enterprise software. He authored O'Reilly's Enterprise Software with Python, host of the Pyninsula Python meetup group in the San Francisco Bay Area, and presenter of talks on Python and architecture, delivered all around the world.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</guid></item><item><title>Ask the Ecosystem: Lessons from 200+ FOSS Applications</title><link>https://pyvideo.org/pygotham-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you had to build a software application right now, how would you do it?&lt;/p&gt;
&lt;p&gt;First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python
applications to distill real-world advice on building effective software to
reach the masses. Architecture, testing, licensing, packaging and
distribution, these projects hold lifetimes of work and wisdom, waiting to
be learned!&lt;/p&gt;
&lt;p&gt;In this presentation, we'll explore many questions, just a few of which
include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What userbases do Python-based applications reach?&lt;/li&gt;
&lt;li&gt;Where in software is Python leading, and what domains represent its
biggest gaps?&lt;/li&gt;
&lt;li&gt;What library dependencies appear in the application zeitgeist?&lt;/li&gt;
&lt;li&gt;What copyright licenses are used by applications, and how do these
practices differ from libraries?&lt;/li&gt;
&lt;li&gt;How many projects rely only on donations, as opposed to having foundation
or corporation support?&lt;/li&gt;
&lt;li&gt;What can Python developers do to support and get involved in Python's rich
application space?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A production application is worth a hundred blog posts and a thousand Stack
Overflow answers. You've already heard all the talk about best practices,
now come hear about the practical practices from real Python applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</guid></item><item><title>The Ministry of Silly Talks</title><link>https://pyvideo.org/pygotham-2019/the-ministry-of-silly-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2019's Lightning Talks&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aditya Sirish</dc:creator><pubDate>Fri, 04 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-04:pygotham-2019/the-ministry-of-silly-talks.html</guid></item><item><title>Monumental (Lightning Talk)</title><link>https://pyvideo.org/pyninsula-2017/monumental-lightning-talk.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:pyninsula-2017/monumental-lightning-talk.html</guid></item><item><title>URLs: The Unsung Universal</title><link>https://pyvideo.org/pyninsula-2017/urls-the-unsung-universal.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-02-22:pyninsula-2017/urls-the-unsung-universal.html</guid></item><item><title>The Packaging Gradient</title><link>https://pyvideo.org/pybay-2017/the-packaging-gradient.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping any software can be hard if you don't know what you're getting into. An ergonomic, general-purpose language like Python can get you into complex packaging waters without you noticing. This talk presents a straightforward, example-driven guide to choosing among virtually every method in common use for packaging Python, scaling from wheels to PEX to Docker and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deployment is not the last step of development. Experienced engineers know to work backwards from deployment requirements, planning and designing for the reality of production environments.&lt;/p&gt;
&lt;p&gt;Python packaging sometimes gets a bad reputation, but a lot of this comes from less experienced engineers learning the hard way that implementation language does not dictate their packaging solutions.&lt;/p&gt;
&lt;p&gt;Packaging is all about target environment and deployment experience. Python was designed to be cross-platform and runs in countless environments. Python's built-in tools can't carry you anywhere you want to go. These days, I can write a mobile app in Python, but obviously people don't use pip to install it. More advanced codebases have to scale their packaging accordingly.&lt;/p&gt;
&lt;p&gt;This talk moves example by example, presenting shippable code, and the simplest packaging solution appropriate for it. All the examples are in Python, but the lessons are absolutely language agnostic. Learn the packaging gradient and put those deployment doubts to rest once and for all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mahmoud Hashemi is a backend engineer and architect, open-source library maintainer, and Wikipedian. Newly building services and teams at shopkick, for many years, he built scalable enterprise Python services at PayPal, where he wrote technical essays and presented O'Reilly's Enterprise Software with Python. On the Wikipedia side of things, he's known for Listen to Wikipedia, Wikipedia Social Search, the Weeklypedia newsletter, the Wikipedia IFTTT channel, and much much more. He believes education is more than something you receive, and that every coder should be able to see one, do one, then teach one.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Sat, 12 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-12:pybay-2017/the-packaging-gradient.html</guid></item><item><title>URLs: In Plain View</title><link>https://pyvideo.org/pyconweb-2017/urls-in-plain-view.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The web wouldn’t be the web without URLs. Unlike most web technology, URLs are not designed primarily to connect computers to each other. URLs connect us, people, to our software. This is an approachable engineering introduction to the often-overlooked URL, its evolution, and its many moving parts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-27:pyconweb-2017/urls-in-plain-view.html</guid></item><item><title>A Plug for Plugins</title><link>https://pyvideo.org/pygotham-2017/a-plug-for-plugins.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The philosophy of small, focused software has its merits, but for most of us, software is big. From your browser to your kernel, the size of these applications is lost on most of us. How do these programs even grow to this size?&lt;/p&gt;
&lt;p&gt;In all of these cases, the answer involves an often-overlooked pattern: the plugin. Call them modules or extensions, if you'd prefer, but they are wildly successful. In fact, the only thing wider than the success of plugin-based architecture is the variety of implementations, especially in Python's dynamic environment.&lt;/p&gt;
&lt;p&gt;This talk covers the basis for plugins, reviews Python's current offerings using examples, and provides guidance as to the bright future of plugin architecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:pygotham-2017/a-plug-for-plugins.html</guid></item><item><title>Python Profiling &amp; Performance: elementary to enterprise</title><link>https://pyvideo.org/pybay-2016/python-profiling-performance-elementary-to-enterprise.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides an end-to-end introduction and overview of Python performance practices, from fundamentals to functional industry practices to the future of performant Python. If you've ever felt lost in or out of touch with the constant whirl of Python performance advancements, this practical talk will put it back into perspective.
​
Abstract
Performance is a complex topic. It means a lot of things to a lot of people. Python gives us a great starting point: strong primitives and the &amp;quot;good enough&amp;quot; philosophy. But is Python actually good enough for performance-critical applications?&lt;/p&gt;
&lt;p&gt;This talk defines different kinds of performance, covers basic principles, and dives right into measurement. With those foundations laid, it outlines eight approaches to scaling Python, four of which are stack-agnostic and four of which are Python-specific. It outlines many examples from industry to promote a holistic view of performance as a practical process, not a large-scale benchmarking competition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Mahmoud Hashemi is Lead Developer of Python Infrastructure at PayPal, where he focuses on distributed systems, API design, and application security. He presented O'Reilly's Enterprise Software with Python, as well as several guides to topics from DNS to software versioning to statistics. An avid Wikipedian, Mahmoud is half of Hatnote, creators of Listen to Wikipedia and other fine wiki-based software.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise"&gt;https://speakerdeck.com/pybay2016/mahmoud-hashemi-python-profiling-and-performance-elementary-to-enterprise&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahmoud Hashemi</dc:creator><pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-21:pybay-2016/python-profiling-performance-elementary-to-enterprise.html</guid></item></channel></rss>