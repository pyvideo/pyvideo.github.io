<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_gae.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-30T00:00:00+00:00</updated><entry><title>PyOhio 2011: Django and Google App Engine: Why I'm using Flask and Amazon EC2</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Ben Rousch</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and Google App Engine: Why I'm Using Flask and Amazon EC2&lt;/p&gt;
&lt;p&gt;Presented by Ben Rousch&lt;/p&gt;
&lt;p&gt;I'm a lazy coder, but not the good kind of lazy. I dove into Django so I
could have one web framework that would work on many kind of hosting
setups and for any kind of web project. With some modifications, I could
even use the laziest application host, Google App Engine. Some of these
decisions didn't work out, so I'll share some of the lessons I've
learned the past year or so.&lt;/p&gt;
</summary><category term="ec2"></category><category term="flask"></category><category term="gae"></category><category term="googleappengine"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyConAU 2010: App Engine 101</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--app-engine-101.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Brian K Quinlan</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--app-engine-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;App Engine 101&lt;/p&gt;
&lt;p&gt;Presented by Brian K Quinlan (Google)&lt;/p&gt;
&lt;p&gt;App Engine lets you run your Python web applications on Google's
infrastructure.&lt;/p&gt;
&lt;p&gt;This tutorial will provide an overview on how to create, configure and
deploy applications on App Engine using a simple (but useful!) example
application.&lt;/p&gt;
</summary><category term="appengine"></category><category term="gae"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="tutorial"></category><category term="web"></category></entry><entry><title>PyCon 2009: An Introduction to Google App Engine (Part 1 of 2)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--an-introduction-to-google-app-engine-.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--an-introduction-to-google-app-engine-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] Google App Engine allows you to build scalable web
applications and host them on Google hardware. This hands on tutorial
will walk you through the steps of building a basic web application,
from setting up the SDK through to using the major APIs that App Engine
provides.&lt;/p&gt;
</summary><category term="gae"></category><category term="googleappengine"></category><category term="pycon"></category><category term="pycon2009"></category></entry><entry><title>PyCon 2009: An Introduction to Google App Engine (Part 2 of 2)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--an-introduction-to-google-app-engine0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--an-introduction-to-google-app-engine0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: ] Google App Engine allows you to build scalable web
applications and host them on Google hardware. This hands on tutorial
will walk you through the steps of building a basic web application,
from setting up the SDK through to using the major APIs that App Engine
provides.&lt;/p&gt;
</summary><category term="gae"></category><category term="googleappengine"></category><category term="pycon"></category><category term="pycon2009"></category></entry><entry><title>Running Django Apps on Google App Engine</title><link href="https://pyvideo.org/pycon-us-2011/running-django-apps-on-google-app-engine.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/running-django-apps-on-google-app-engine.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Running Django Apps on Google App Engine&lt;/p&gt;
&lt;p&gt;Presented by wesley chun&lt;/p&gt;
&lt;p&gt;In the past, Django users couldn't run apps unmodified on Google App
Engine. Some tools helped with integration but required you to change
your data models. Django-nonrel removes this requirement letting you run
native Django apps on App Engine with only config changes if you bear in
mind its restrictions like no JOINs. In this talk, we'll discuss
Django-nonrel &amp;amp; porting App Engine apps to Django.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Previously, Django users could not get their apps to run unmodified on
Google App Engine, the cloud application-hosting platform. Older tools
like &amp;quot;the Helper&amp;quot; and &amp;quot;the Patch&amp;quot; required a change to the data models
as well as perhaps integrating additional tools into the application
source tree. The creators of the Patch realized how cumbersome this is
and created a replacement for all of these older tools.&lt;/p&gt;
&lt;p&gt;Django-nonrel allows users to run pure Django apps on App Engine with
only minor configuration changes. It basically enables Django's ORM to
operate on top of non-relational databases (in addition to preserving
its ability to support standard relational DBs), one of which is Google
App Engine's Datastore. (MongoDB is another.)&lt;/p&gt;
&lt;p&gt;What this means that current Django users can now use their existing
knowledge to write apps for App Engine as long as they keep App Engine
restrictions in mind, e.g., no JOINs. Projects written in this manner
will work without any modifications other than changing the
configuration settings. On the other side, App Engine developers now
have an alternative to the '&amp;quot;webapp&amp;quot; framework that comes with its SDK.
You can now leverage the power of a full web framework like Django and
still enjoy the flexibility and scalability of App Engine. In this talk,
we'll discuss Django-nonrel, and how to port App Engine apps from webapp
to pure Django to run on App Engine using Django-nonrel.&lt;/p&gt;
</summary><category term="django-nonrel"></category><category term="gae"></category><category term="googleappengine"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>