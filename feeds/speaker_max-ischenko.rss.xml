<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 02 Nov 2014 00:00:00 +0000</lastBuildDate><item><title>Product buidling 101</title><link>https://pyvideo.org/pycon-ukraine-2014/product-buidling-101.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Ischenko</dc:creator><pubDate>Sun, 02 Nov 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-11-02:pycon-ukraine-2014/product-buidling-101.html</guid></item><item><title>Simple WSGI composition: story of one refactoring (#51)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simple WSGI composition: story of one refactoring&lt;/p&gt;
&lt;p&gt;Presented by Max Ischenko&lt;/p&gt;
&lt;p&gt;Story of a refactoring I did to split one big, monolithic Pylons app
into a bunch of smaller ones, using power of WSGI and nginx. The devil
is in the details: how to handle common auth, site-wide look and feel,
common utilities, database management. Pros and cons of the approach,
possible alternatives.&lt;/p&gt;
&lt;p&gt;The talk assumes listeners know what WSGI is and preferably have used
some WSGI-centered framework like Pylons, Werkzeug, Paste or other.&lt;/p&gt;
&lt;p&gt;The application this talk describes powers developers.org.ua.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Ischenko</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</guid><category>nginx</category><category>pycon</category><category>pycon2010</category><category>pylons</category><category>wsgi</category></item></channel></rss>