<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Akshay Agrawal</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 16 May 2025 00:00:00 +0000</lastBuildDate><item><title>marimo: an open-source reactive notebook for Python</title><link>https://pyvideo.org/north-bay-python-2024/marimo-an-open-source-reactive-notebook-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We introduce [marimo](&lt;a class="reference external" href="https://github.com/marimo-team/marimo"&gt;https://github.com/marimo-team/marimo&lt;/a&gt;), an open-source reactive notebook for Python that addresses several [common complaints](&lt;a class="reference external" href="https://docs.marimo.io/faq.html#faq-problems"&gt;https://docs.marimo.io/faq.html#faq-problems&lt;/a&gt;) about first-generation notebooks.&lt;/p&gt;
&lt;p&gt;marimo notebooks are reproducible, with a [reactive runtime](&lt;a class="reference external" href="https://docs.marimo.io/guides/reactivity.html"&gt;https://docs.marimo.io/guides/reactivity.html&lt;/a&gt;) that eliminates hidden state; interactive, [with UI elements](&lt;a class="reference external" href="https://docs.marimo.io/guides/interactivity.html"&gt;https://docs.marimo.io/guides/interactivity.html&lt;/a&gt;) that are automatically synchronized with Python (no callbacks); expressive, supporting markdown that can be parametrized by arbitrary Python values; stored as pure Python files, so they are Git-friendly; executable as scripts; and shareable as web apps or WASM-powered static HTML.&lt;/p&gt;
&lt;p&gt;marimo is used today by scientists and developers at several companies and research institutions, including SLAC and Stanford.&lt;/p&gt;
&lt;p&gt;## A reactive programming environment&lt;/p&gt;
&lt;p&gt;marimo keeps code, outputs, and program state consistent. Run a cell and marimo reacts by automatically running the cells that reference its declared variables. Delete a cell and marimo scrubs its variables from program memory, eliminating hidden state.&lt;/p&gt;
&lt;p&gt;Our reactive runtime is based on static analysis, forming a dataflow graph based on variable declarations and references. To ensure the dataflow graph is well-formed, marimo imposes two constraints on user code: variables can be defined in at most one cell, and cyclic references across cells are disallowed.&lt;/p&gt;
&lt;p&gt;## The marimo library&lt;/p&gt;
&lt;p&gt;marimo is both a notebook and a library — importing the marimo library provides the user with utilities for authoring dynamic markdown; creating interactive UI elements; rendering progress bars; and more.&lt;/p&gt;
&lt;p&gt;marimo's interactive elements feed into reactivity: interacting with elements such as sliders or selectable plots automatically sends their values to Python and triggers execution of cells referencing variables bound to the interacted-with elements. We extend this rule to support higher-order elements such as submittable forms, dictionaries, and arrays of constituent elements.&lt;/p&gt;
&lt;p&gt;## A pure Python file format
marimo notebooks are stored as pure Python files, designed so that small changes in notebook code yield small diffs. These files are also executable, with cells run in a topologically sorted order. We discuss the design of this file format, as well as trade-offs made.&lt;/p&gt;
&lt;p&gt;## Shareability
marimo is easily shared: notebooks can be run as read-only apps from the command line, and exported as interactive WASM-powered static HTML.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Akshay Agrawal</dc:creator><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-29:/north-bay-python-2024/marimo-an-open-source-reactive-notebook-for-python.html</guid><category>North Bay Python 2024</category></item><item><title>Marimo: A Notebook that "Compiles" Python for Reproducibility and Reusability</title><link>https://pyvideo.org/pycon-us-2025/marimo-a-notebook-that-compiles-python-for-reproducibility-and-reusability.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores the following question: What would it take to create a new kind of Python notebook that, unlike a REPL, knew the order in which to run cells? What if the notebook could also update automatically or lazily when a variable was updated? And what if we could add UI elements, like sliders and dropdowns, to all this? Would this change how you worked with notebooks?&lt;/p&gt;
&lt;p&gt;But most of all: how would you build such a thing? In this talk, we propose that you would need a kind of &amp;quot;compiler&amp;quot; on top of Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on how to create such a notebook by using marimo — an open-source reactive notebook for Python that's executable as scripts and shareable as apps — as a case study. Marimo's key technology is static analysis: marimo &amp;quot;compiles&amp;quot; blocks of Python code, or &amp;quot;cells&amp;quot;, to a directed acyclic graph. This graph models how data flows across cells, and is used as an intermediate representation consumed by a runtime that eliminates hidden state while also powering interactive computing, scripts, and web apps.&lt;/p&gt;
&lt;p&gt;By using notebooks and marimo's internals as a case study, we'll examine a question that is broadly applicable to developer tools in many domains: What does it take to compile Python code to a flexible intermediate representation that preserves the original program's semantics? We'll discuss design decisions and tradeoffs along the way, such as the pros and cons of static analysis versus runtime tracing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Akshay Agrawal</dc:creator><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-16:/pycon-us-2025/marimo-a-notebook-that-compiles-python-for-reproducibility-and-reusability.html</guid><category>PyCon US 2025</category></item></channel></rss>