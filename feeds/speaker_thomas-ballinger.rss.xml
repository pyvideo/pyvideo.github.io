<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 22 Jan 2018 00:00:00 +0000</lastBuildDate><item><title>Python is not Java or C++</title><link>https://pyvideo.org/pycascades-2018/python-is-not-java-or-c.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python was the first programming language I learned deeply, but I work with a lot of people who learned Java or C++ first instead. By knowing how these languages do things differently we can better support our colleagues who are learning Python as a secondary programming language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/python-is-not-java-or-c.html</guid></item><item><title>Know thy self: Methods and method binding</title><link>https://pyvideo.org/pycon-us-2017/know-thy-self-methods-and-method-binding.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Methods are like functions, but different. How? Why? And what's will
having to type &amp;quot;self&amp;quot; all the time?&lt;/p&gt;
&lt;p&gt;We'll explore partial application of functions and review why it might
be nice to start using classes. Then to clarify how method objects work
we'll examine the result of accessing the method attributes of an object
without calling them. Understanding the behavior we uncover here will
require more attribute lookup experiments, which will lead us discover
the power of descriptors.&lt;/p&gt;
&lt;p&gt;Along the way we'll peek in at other languages' approaches to method
binding, hopefully coming to appreciate the way Python does things
enough to type &amp;quot;self&amp;quot; a few thousand more times.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/know-thy-self-methods-and-method-binding.html</guid></item><item><title>Web programming from the beginning</title><link>https://pyvideo.org/pycon-us-2017/web-programming-from-the-beginning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;em&gt;What’s the web all about anyway? How can you make your computer talk to
other computers with Python?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Modern web frameworks such as Django and Flask are immensely powerful.
However, these useful tools obscure the foundations of network
programming upon which they are based, which can be very helpful to
understand. So instead of building useful applications with these
libraries, let's experiment with sockets!&lt;/p&gt;
&lt;p&gt;At this tutorial, a Python-flavored history of the web will be presented
and attendees will write or modify a TCP chat client, a static site web
server, an HTTP client, a CGI script, and a WSGI-compliant server and
web application. We will learn what all those things are and how they
fit together, bringing the architecture of modern web apps into better
focus.&lt;/p&gt;
&lt;p&gt;The material will be accessible to participants with no web development
experience, however, they must be able to write and run Python scripts
at the command-line. This tutorial might appeal to someone also
attending an introductory web development tutorial, but it covers
separate, complementary material. Web development experience is not
required but a little exposure would be helpful; for instance,
installing flask and running the minimal application on the &lt;a class="reference external" href="http://flask.pocoo.org/docs/0.11/quickstart/"&gt;quickstart
page&lt;/a&gt;. Similarly, prior
exposure to HTML would be useful but is not necessary.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-17:pycon-us-2017/web-programming-from-the-beginning.html</guid></item><item><title>Terminal Whispering</title><link>https://pyvideo.org/europython-2015/europython-2015-terminal-whispering.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thomas Ballinger - Terminal Whispering
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;The terminal emulators we run so many of our programming tools in are
more powerful than we remember to give them credit for, and the key to
that power is understanding the interface. This talk will cover
terminal colors and styles, writing to arbitrary portions of the
screen, handling signals from the terminal, determining the terminal's
dimensions and scrollback buffer behavior.&lt;/p&gt;
&lt;p&gt;Terminal programming can get hairy; along the way we'll deal with
encoding issues, consider cross platform concerns, acknowledge 4
decades' worth of standards for terminal communication, and consider
that humans at interactive terminals may not be the only users of our
interfaces. By gaining an understanding of these issues, we'll be able
choose from the abstractions over them offered by Python libraries
Urwid, Blessings, and Python Prompt Toolkit.&lt;/p&gt;
&lt;p&gt;This talk requires minimal Python knowledge, but does assume
familiarity with command line tools in a unix environment.&lt;/p&gt;
&lt;p&gt;An abbreviated version of this talk was presented at PyCon 2015 in
Montréal: &lt;a class="reference external" href="https://www.youtube.com/watch?v=WAitSilLDUA"&gt;https://www.youtube.com/watch?v=WAitSilLDUA&lt;/a&gt; With the
additional time I'd hope to present more code examples, a more in-
depth tour of existing libraries and more practical advice about
writing programs that use the terminal, and an additional example of a
difficult terminal details: dealing with reflowing of text in modern
terminal emulators like GNOME Terminal and iTerm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-05:europython-2015/europython-2015-terminal-whispering.html</guid></item><item><title>REPL-driven development</title><link>https://pyvideo.org/pycaribbean-2016/repl-dev.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCaribbean 2016 -- REPL-driven development&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-21:pycaribbean-2016/repl-dev.html</guid></item><item><title>Finding closure with closures</title><link>https://pyvideo.org/pycon-us-2016/thomas-ballinger-finding-closure-with-closures-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Thomas Ballinger&lt;/p&gt;
&lt;p&gt;What are closures all about anyway, and why is there a new keyword in Python
3?
We'll look at what a closure is, their history in the Python language, what
the Python 3 nonlocal keyword is about, and examine how closures are
idiomatically used (and avoided) in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/thomas-ballinger-finding-closure-with-closures-pycon-2016.html</guid></item><item><title>Terminal Whispering</title><link>https://pyvideo.org/pygotham-2015/terminal-whispering-0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The terminal emulators we run so many of our programming tools in are
more powerful than we remember to give them credit for, and the key to
that power is understanding the interface. This talk will cover terminal
colors and styles, writing to arbitrary portions of the screen, handling
signals from the terminal, determining the terminal's dimensions and
scrollback buffer behavior.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-15:pygotham-2015/terminal-whispering-0.html</guid></item><item><title>REPL-driven development</title><link>https://pyvideo.org/pyohio-2015/repl-driven-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the Read-Evaluate-Print-Loop you get when you type python,
ipython or bpython? You should spend more time in it! This talk
describes development workflows using a REPL and their associated
pitfalls. IPython and bpython features useful for writing, testing,
debugging and using code will be sprinkled throughout.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:pyohio-2015/repl-driven-development.html</guid><category>talk</category></item><item><title>Terminal whispering</title><link>https://pyvideo.org/pycon-us-2015/terminal-whispering.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to add a status bar to your command line program?
Or maybe color the output a bit? Or do you want to write a fullscreen
terminal application like ls, top, vim, or emacs? Then you need to speak
a bit of terminal! This talk describes how to talk to your terminal from
scratch and goes on to show why Python libraries Blessings and Urwid are
so awesome.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/terminal-whispering.html</guid></item></channel></rss>