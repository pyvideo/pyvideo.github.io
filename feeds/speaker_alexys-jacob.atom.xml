<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alexys-jacob.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>How we run GraphQL APIs in production on our Kubernetes cluster</title><link href="https://pyvideo.org/europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/how-we-run-graphql-apis-in-production-on-our-kubernetes-cluster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I would like to share the workflow and tools we use to
build, deploy and operate GraphQL APIs on our on-premise Kubernetes
cluster.&lt;/p&gt;
&lt;p&gt;I will share code and command examples explaining how we are operating
our applications since our recent transition from REST APIs on Web
servers to GraphQL APIs containers on Kubernetes.&lt;/p&gt;
&lt;p&gt;This talk will not be about the difference between REST and GraphQL but
focus on the workflow, tools and experience we gained in switching our
run time environments and API models.&lt;/p&gt;
&lt;p&gt;At Numberly, we have built and are operating our own on-premise
Kubernetes cluster so we will also be talking about its capabilities and
share some of the experience we gained in doing so.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Proposed agenda:&lt;/div&gt;
&lt;div class="line"&gt;- Our previous workflow and its limitations&lt;/div&gt;
&lt;div class="line"&gt;- How we designed our Kubernetes cluster, its capabilities and the
choices we made&lt;/div&gt;
&lt;div class="line"&gt;- Developer workflow, environments management and deployment&lt;/div&gt;
&lt;div class="line"&gt;- Our GraphQL stack, featuring a sample application&lt;/div&gt;
&lt;div class="line"&gt;- What we're still working on to improve&lt;/div&gt;
&lt;/div&gt;
</summary><category term="APIs"></category><category term="Best Practice"></category><category term="Case Study"></category><category term="Docker"></category><category term="Infrastructure"></category></entry><entry><title>Write a Fault Tolerant web service using gevent + uwsgi</title><link href="https://pyvideo.org/europython-2013/write-a-fault-tolerant-web-service-using-gevent-uwsgi.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/write-a-fault-tolerant-web-service-using-gevent-uwsgi.html</id><summary type="html"></summary></entry><entry><title>Leveraging consistent hashing in your python applications</title><link href="https://pyvideo.org/pycon-fr-2018/leveraging-consistent-hashing-in-your-python-applications.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/leveraging-consistent-hashing-in-your-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While consistent hashing is largely known and adopted in the NoSQL
database clusters to solve data distribution and data access
reliability, it is less known and used by the typical developers.&lt;/p&gt;
&lt;p&gt;This talk will introduce you to consistent hashing and the problems it
solves while going through a practical use case in a python application.&lt;/p&gt;
&lt;p&gt;We will start from its standalone design and scale it out to an
optimized clustered version thanks to consistent hashing.&lt;/p&gt;
</summary></entry><entry><title>My journey into joining billions of rows in seconds with ScyllaDB</title><link href="https://pyvideo.org/pycon-fr-2018/my-journey-into-joining-billions-of-rows-in-seconds-with-scylladb.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/my-journey-into-joining-billions-of-rows-in-seconds-with-scylladb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk on a technological iteration journey: replacing MongoDB + Hive by
ScyllaDB in production to meet the requirements of business critical
work loads.&lt;/p&gt;
&lt;p&gt;I will share my recent experience in migrating our most intensive and
JOIN hungry production work load from MongoDB + Hive to ScyllaDB.&lt;/p&gt;
&lt;p&gt;This work and iteration allowed us to JOIN billions of rows in seconds
while drastically reducing operation and development complexity by using
one database (ScyllaDB) instead of two (MongoDB + Hive).&lt;/p&gt;
&lt;p&gt;ScyllaDB is a C++ drop-in replacement of Cassandra that proved that its
design was up to the challenge by squeezing every bit of performance
from hardware. We will cover the approach and key aspects of this NoSQL
database.&lt;/p&gt;
&lt;p&gt;I will finally present the results of the benchmarks between Dask and
Spark and highlight their differences and what we learned along the way.&lt;/p&gt;
&lt;p&gt;Draft of the agenda&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Business context and work load details&lt;/li&gt;
&lt;li&gt;Problems and limitations in handling this work load using MongoDB +
Hive&lt;/li&gt;
&lt;li&gt;How we conducted a thorough evaluation of ScyllaDB to replace MongoDB
+ Hive&lt;/li&gt;
&lt;li&gt;How we ended up challenging Spark with Dask&lt;/li&gt;
&lt;li&gt;Lessons learned and production feedback&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>The rise of Python in the data communities</title><link href="https://pyvideo.org/pycon-fr-2018/the-rise-of-python-in-the-data-communities.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/the-rise-of-python-in-the-data-communities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A retrospective and prospective of Python’s adoption in the data-driven
industries and how it has and should influence its ecosystem and
communities.&lt;/p&gt;
&lt;p&gt;Thanks to its versatility, Python’s usage and adoption has changed a lot
over the last decade to go beyond the very act of software programming.&lt;/p&gt;
&lt;p&gt;From Developers to SysOps, closely followed by Scientists and Data
analysts, Python has spread to become a common tongue for a wide range
of people.&lt;/p&gt;
&lt;p&gt;We will start by looking at how this increased adoption impacted Python
ecosystem and is still shaping it today. While this talk is not walk
through all the Python technologies around data, some of them will be
outlined so you will hear words like Numpy, Pandas or Jupyter.&lt;/p&gt;
&lt;p&gt;Then we will try to project ourselves in the future and by highlighting
the pitfalls Python has to overcome to keep up with its pace and mature
in its ability to scale!&lt;/p&gt;
</summary></entry><entry><title>The rise of Python in the data communities</title><link href="https://pyvideo.org/europython-2018/the-rise-of-python-in-the-data-communities.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/the-rise-of-python-in-the-data-communities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A retrospective and prospective of Python’s adoption in the
&lt;strong&gt;data-driven industries&lt;/strong&gt; and how it has and should influence its
ecosystem and communities.&lt;/p&gt;
&lt;p&gt;Thanks to its versatility, Python’s usage and adoption has changed a lot
over the last decade to go beyond the very act of software programming.&lt;/p&gt;
&lt;p&gt;From Developers to SysOps, closely followed by Scientists and Data
analysts, Python has spread to become a common tongue for a wide range
of people.&lt;/p&gt;
&lt;p&gt;We will start by looking at how this increased adoption impacted Python
ecosystem and is still shaping it today. While &lt;strong&gt;this talk is not walk
through all the Python technologies around data&lt;/strong&gt; , some of them will be
outlined so you will hear words like Numpy, Pandas or Jupyter.&lt;/p&gt;
&lt;p&gt;Then we will try to project ourselves in the future and by
&lt;strong&gt;highlighting the pitfalls Python has to overcome&lt;/strong&gt; to keep up with its
pace and mature in its ability to &lt;strong&gt;scale&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Draft of the agenda&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The rise and collusion of science and engineering and their influence
on Python&lt;/li&gt;
&lt;li&gt;From DevOps to DataOps, the shape and breakthroughs of Python’s
ecosystem&lt;/li&gt;
&lt;li&gt;Prospect of challenges and pitfalls in the massive data era&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Leveraging consistent hashing in your python applications</title><link href="https://pyvideo.org/europython-2017/leveraging-consistent-hashing-in-your-python-applications.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/leveraging-consistent-hashing-in-your-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While consistent hashing is largely known and adopted in the NoSQL
database clusters to solve data distribution and data access
reliability, it is less known and used by the typical developers.&lt;/p&gt;
&lt;p&gt;This talk will introduce you to consistent hashing and the problems
it solves while going through a practical use case in a python application.&lt;/p&gt;
&lt;p&gt;We will start from its standalone design and scale it out to an
optimized clustered version thanks to consistent hashing.&lt;/p&gt;
</summary></entry><entry><title>Designing a scalable and distributed application</title><link href="https://pyvideo.org/europython-2015/designing-a-scalable-and-distributed-application.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2015-08-08:europython-2015/designing-a-scalable-and-distributed-application.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexys Jacob - Designing a scalable and distributed application
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;One of the key aspect to keep in mind when developing a scalable
application is its faculty to grow easily. But while we're used to
take advantage of scalable backend technologies such as mongodb or
couchbase, &lt;strong&gt;scaling automatically our own application&lt;/strong&gt; core is
usually another story.&lt;/p&gt;
&lt;p&gt;In this talk I will &lt;strong&gt;explain and showcase&lt;/strong&gt; a distributed web
application design based on &lt;strong&gt;consul&lt;/strong&gt; and &lt;strong&gt;uWSGI&lt;/strong&gt; and its consul
plugin. This design will cover the key components of a distributed and
scalable application:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Automatic service registration and discovery&lt;/strong&gt; will allow your application to grow itself automatically.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Health checking and service unregistration&lt;/strong&gt; will allow your application to be fault tolerant, highly available and to shrink itself automatically.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;distributed Key/Value storage&lt;/strong&gt; will allow you to (re)configure your distributed application nodes at once.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-Datacenter awareness&lt;/strong&gt; will allow your application to scale around the world easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.google.com/presentation/d/1bZ30UculKOM4IQ4ic5X2fLpz1Fe1QQPVqJLtshIO0pg/edit?usp=sharing"&gt;Slides of this talk are available here&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Planning for the worst</title><link href="https://pyvideo.org/europython-2016/planning-for-the-worst.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/planning-for-the-worst.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexys Jacob/Guillaume Gelin - Planning for the worst
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/planning-for-the-worst"&gt;https://ep2016.europython.eu//conference/talks/planning-for-the-worst&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Sharing our worst production experiences and the tricks, good
practices and code we developed to address them.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This talk is about sharing our experience about how we handled
production problems on all levels of our applications.&lt;/p&gt;
&lt;p&gt;We'll begin with common problems, errors and failures and dig on to
more obscure ones while sharing concrete tips, good practices and code
to address them !&lt;/p&gt;
&lt;p&gt;This talk will make you feel the warmth of not being alone facing a problem :)&lt;/p&gt;
</summary></entry><entry><title>Using Service Discovery to build dynamic python applications</title><link href="https://pyvideo.org/europython-2016/using-service-discovery-to-build-dynamic-python-applications.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Alexys Jacob</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/using-service-discovery-to-build-dynamic-python-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alexys Jacob - Using Service Discovery to build dynamic python applications
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/service-discovery-for-dynamic-python-applications"&gt;https://ep2016.europython.eu//conference/talks/service-discovery-for-dynamic-python-applications&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Let's compare the usage of three major &lt;strong&gt;service discovery&lt;/strong&gt;
technologies to build a dynamic and distributed python application !&lt;/p&gt;
&lt;p&gt;This talk will be about &lt;strong&gt;consul&lt;/strong&gt;, &lt;strong&gt;etcd&lt;/strong&gt; and &lt;strong&gt;zookeeper&lt;/strong&gt; and
their python bindings and will feature code along with a live demo.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This talk will &lt;strong&gt;showcase and compare&lt;/strong&gt; three Service Discovery
technologies and their usage to &lt;strong&gt;build a dynamic and distributed
python application&lt;/strong&gt; :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;consul&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;zookeeper&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After a short introduction to service discovery, we will &lt;strong&gt;iterate and
compare&lt;/strong&gt; how we can address the concrete and somewhat complex design
of our python application using each technology.&lt;/p&gt;
&lt;p&gt;We'll then be able to discuss their strengths, weaknesses and python
bindings and  finally showcase the application in a demo.&lt;/p&gt;
&lt;p&gt;All the source code will of course be made available for the audience
to benefit and start from for their own use !&lt;/p&gt;
</summary></entry></feed>