<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_gitlab.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-20T00:00:00+00:00</updated><entry><title>PaaS per tutti i gusti: CI/CD sotto controllo con Kubernetes e Dokku</title><link href="https://pyvideo.org/pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Claudio Mignanti</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk saranno illustrati processi e workflow tipici dei
paradigmi del DevOp e delle metodologie Agile. Vedremo quali
&lt;strong&gt;accorgimenti&lt;/strong&gt; devono essere presi con le applicazioni pacchettizzate
con &lt;strong&gt;Docker&lt;/strong&gt; , in particolare le applicazioni Django e come &lt;strong&gt;evitare
le problematiche principali che portano frustrazione e impediscono
un’adozione reale della CI/CD&lt;/strong&gt;. Saranno presentati degli esempi pratici
&lt;strong&gt;workflow&lt;/strong&gt; implementati con successo, in modo snello, versionato e
ripetibile, in ambienti che vanno dal test fino alla produzione. In
ultimo faremo una carrellata dei sistemi di &lt;strong&gt;PaaS&lt;/strong&gt; più in voga del
momento concentrandoci quindi su &lt;strong&gt;Dokku&lt;/strong&gt; e &lt;strong&gt;Kubernetes&lt;/strong&gt; , che
coprono tutto il ventaglio delle necessità di deploy, dal piccolo sito
fino al sistema ultra scalabile e ridondato.&lt;/p&gt;
&lt;p&gt;Prerequisito per il talk è conoscere i concetti base di Docker e
dell’uso di git. Durante il talk con 3 distinti esempi e demo di
complessità crescente esploreremo il mondo della CI/CD.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="paas"></category><category term="continuous-integration"></category><category term="gitlab"></category><category term="kubernetes"></category><category term="testing"></category><category term="git"></category><category term="docker"></category></entry><entry><title>7 Steps to a Clean Issue Tracker</title><link href="https://pyvideo.org/pycon-sk-2018/7-steps-to-a-clean-issue-tracker.html" rel="alternate"></link><published>2018-03-10T00:00:00+00:00</published><updated>2018-03-10T00:00:00+00:00</updated><author><name>Lasse Schuirmann</name></author><id>tag:pyvideo.org,2018-03-10:pycon-sk-2018/7-steps-to-a-clean-issue-tracker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lot of open source maintainers suffer from having to maintain the
flood of incoming issues/tikets on their project. We've scraped more
than 10000 GitHub projects and interviewed more than 100 software
developers and project managers of companies like GitLab. As a result,
we have identified a few simple steps that can help managing the load of
issues.&lt;/p&gt;
&lt;p&gt;This talk sums up the steps and approaches needed to deal with this as
well as automate it.&lt;/p&gt;
&lt;p&gt;For a full summary, check out &lt;a class="reference external" href="https://about.gitlab.com/2017/10/26/triage-issues-gitmate/"&gt;our blog post with
GitLab&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="who-and-why"&gt;
&lt;h4&gt;Who and Why&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The talk is for project managers and open source maintainers or
software developers that deal with issues every day. This includes
specifically people working in teams with more than 30 issues a
month opened.&lt;/li&gt;
&lt;li&gt;There's no background knowledge needed. The talk will be best for
people who have triaged issues before at least in a small scale and
recognize the problem, they will be able to pick up the approaches
better and faster.&lt;/li&gt;
&lt;li&gt;On an emotional level, I expect the audience to get to know the
&amp;quot;attitude&amp;quot; needed to get rid of noise when triaging issues. After
the talk, they should have a few concrete steps in mind that they
can try using in the first days and eventually deduct their own
process from it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="GitHub"></category><category term="GitLab"></category><category term="PyCon SK"></category><category term="Python"></category></entry><entry><title>From 0 to Continuous Delivery in 30 minutes.</title><link href="https://pyvideo.org/pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>David Wölfe</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/from-0-to-continuous-delivery-in-30-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An introduction and hands on example how to start Continuous Delivery for python (or whatever) projects with conda and gitlab, which are open source, free to use, and if you wish even available as a cloud service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, you wrote this neat software, which uses one or two cool 3rd party packages and now you have to get it running on your test or prod servers. Now you could check out your code and install the dependencies manually but that seems like a lot of wasted time, right? Shouldn't there be a more convenient way of doing this?&lt;/p&gt;
&lt;p&gt;Yes! And it's easier than you think! In this talk you'll learn how to build a Continuous Delivery pipeline for your python (or whatever) projects in 30 Minutes.&lt;/p&gt;
&lt;p&gt;In the beginning you'll get a quick introduction into the topic and the used tools, which are open source and free to use. For those who know a little about the subject: We will use conda (&lt;a class="reference external" href="https://conda.io"&gt;https://conda.io&lt;/a&gt;) to build the software package and for the dependency handling. GitLab.com will process the actual pipeline for us and Anaconda.com serves us with a package distribution channel.&lt;/p&gt;
&lt;p&gt;After that it's &amp;quot;hands on&amp;quot; time. We will go step by step trough the process. Starting with the creation of a little dummy program. Then extending the dummy in such manner that it can be build into a package. Afterwards we will create the pipeline and finally do a demo deploy. And if the gods of conference internet are merciful, you see all this as a live demonstration.&lt;/p&gt;
</summary><category term="hands on"></category><category term="continuous delivery"></category><category term="devops"></category><category term="python"></category><category term="gitlab"></category><category term="conda"></category></entry><entry><title>Ansible roles, private git repos and the Ansible Galaxy tool</title><link href="https://pyvideo.org/pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>serena lorenzini</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/ansible-roles-private-git-repos-and-the-ansible-galaxy-tool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a python tool that automates the management of an IT
infrastructure. It is easy to learn but rushing to use it with a limited
knowledge of its best practices leads to not reusable code.&lt;/p&gt;
&lt;p&gt;Creating reusable Ansible roles is a strongly encouraged practice, in
fact there is a tool designed just for this purpose: Ansible Galaxy. It
comes bundled with Ansible and its purpose is to download roles from the
Galaxy hub and other sources.&lt;/p&gt;
&lt;p&gt;This talk wants to show how we manage our Ansible roles and their
dependencies in a consistent way by means of Ansible Galaxy. It will
also offer an overview of how Ansible roles can be tested.&lt;/p&gt;
</summary><category term="config-ninja"></category><category term="continuous-integration"></category><category term="command-line"></category><category term="gitlab"></category><category term="ansible"></category><category term="best-practices"></category></entry></feed>