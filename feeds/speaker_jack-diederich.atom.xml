<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jack-diederich.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-12T00:00:00+00:00</updated><entry><title>HOWTO Write a Function</title><link href="https://pyvideo.org/pycon-us-2018/howto-write-a-function.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/howto-write-a-function.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A function is a small chunk of code that does useful work. Your job when writing a function is to do it in a way that it easy to read. Based on over 15 years of code reviews here are some tips and guidelines I give again and again.&lt;/p&gt;
</summary></entry><entry><title>Name Things Once</title><link href="https://pyvideo.org/pygotham-2015/name-things-once-0.html" rel="alternate"></link><published>2015-08-15T00:00:00+00:00</published><updated>2015-08-15T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2015-08-15:pygotham-2015/name-things-once-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Naming things is hard so you should do as little of it as possible. Your
coworkers will thank you for it.&lt;/p&gt;
</summary></entry><entry><title>Deleting Code Is Hard And You Should Do It</title><link href="https://pyvideo.org/pyohio-2012/deleting-code-is-hard-and-you-should-do-it.html" rel="alternate"></link><published>2012-07-29T00:00:00+00:00</published><updated>2012-07-29T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2012-07-29:pyohio-2012/deleting-code-is-hard-and-you-should-do-it.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Adding code is easy. Everyone gets their start by cut-n-pasting some
else's code. But every line of code you don't need is a burden. Delete
that s++t.&lt;/p&gt;
</summary></entry><entry><title>Name Things Once</title><link href="https://pyvideo.org/pyohio-2015/name-things-once.html" rel="alternate"></link><published>2015-08-01T00:00:00+00:00</published><updated>2015-08-01T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2015-08-01:pyohio-2015/name-things-once.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Naming things is hard so you should do as little of it as possible. Your
coworkers will thank you for it.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Python's Dusty Corners (#182)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's Dusty Corners&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;The talk will be a brief overview of all the features in python that you
don't need to know about right up until the moment you do. The list
includes how comparisons work, descriptors, iterators, context managers,
namespaces, else clauses on for/while loops (suggested by Hettinger).
The narrative of the talk is that these are features that you don't need
and/or shouldn't use in your day-to-day code but that you need to keep
in the back of your mind because other people's code and the stdlib do
use them. As Alex Martelli pointed out in his wonderful talk
&amp;quot;Abstractions as Leverage&amp;quot; you can't successfully function at one level
of abstraction if you don't know what is going on at the next level
down. This talk is a whirlwind tour of the next level down.&lt;/p&gt;
</summary><category term="contextmanagers"></category><category term="descripters"></category><category term="else"></category><category term="iterators"></category><category term="namespaces"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Useful Namespaces: Context Managers and Decorators</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Useful Namespaces: Context Managers and Decorators&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;Python has two useful conventions for &amp;quot;I mean it, but only here&amp;quot; and you
can say it with Context Managers and Decorators. Both give you the power
to define a push/pop of a resource for a set period inside a namespace,
be it a function or a level of indentation. This talk is a list of
patterns that are implemented by one or the other (including some clever
functions that are both).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decorators, formal definition.&lt;/li&gt;
&lt;li&gt;Context Managers, formal definition.&lt;/li&gt;
&lt;li&gt;Informal definition: both have the opportunity to do and then undo. -
very similar to C++ RIIA &amp;quot;Resource Acquisition Is Initialization.&amp;quot; -
Context Managers were designed to do that but decorators are
frequently just as good.&lt;/li&gt;
&lt;li&gt;Which one to use use when is all about namespaces. - Context Managers
manipulate at the block level. - Function Decorators manipulate the
function level. - Class Decorators manipulate at the class level.&lt;/li&gt;
&lt;li&gt;Recipes on writing decorators and context managers - Familiar
examples from Django and Mock.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="contextmanagers"></category><category term="decorators"></category><category term="namespaces"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Stop Writing Classes</title><link href="https://pyvideo.org/pycon-us-2012/stop-writing-classes.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Jack Diederich</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/stop-writing-classes.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Classes are great but they are also overused. This talk will describe
examples of class overuse taken from real world code and refactor the
unnecessary classes, exceptions, and modules out of them.&lt;/p&gt;
</summary></entry></feed>