<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anton-marchukov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-13T00:00:00+00:00</updated><entry><title>Do You Want to Retry? Handling Network Failures</title><link href="https://pyvideo.org/pycon-cz-2016/do-you-want-to-retry-handling-network-failures.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Anton Marchukov</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/do-you-want-to-retry-handling-network-failures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is not perfect and network failures do happen. Complaining
about instability might not always be enough. Especially when your
system depends on multiple networked services and each of them is on
a critical path to the final result.&lt;/p&gt;
&lt;p&gt;In this talk we will recall why network failures happen. Reason what
we can and cannot handle in the code. And see what Python standard
libraries and a few popular ones such as urllib3 and requests can
offer.&lt;/p&gt;
&lt;p&gt;And that's not all. Network Emulation (netem) module of Linux Traffic
Control (tc) can even help with poor network simulation.&lt;/p&gt;
&lt;p&gt;Now there is no excuse.&lt;/p&gt;
</summary></entry><entry><title>Custom Source Code Checks</title><link href="https://pyvideo.org/pycon-israel-2017/custom-source-code-checks.html" rel="alternate"></link><published>2017-06-13T00:00:00+00:00</published><updated>2017-06-13T00:00:00+00:00</updated><author><name>Anton Marchukov</name></author><id>tag:pyvideo.org,2017-06-13:pycon-israel-2017/custom-source-code-checks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A great set of tools exists to check the source code for compliance with Python coding standards such as PEP 8. Those tools are useful to control code quality during code review and on continuous integration stage. However, the standards do not cover everything and each team may have additional coding guidelines in place. Conveniently the Python ecosystem allows easy creation of custom source code checks, so your local code style conventions that are outside of existing tools coverage should not be left for a manual review process only. This talk will focus on how automation of code checks outside of PEP 8 standard can be done.&lt;/p&gt;
</summary></entry></feed>