<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 13 May 2018 00:00:00 +0000</lastBuildDate><item><title>Testing, then once you got there?</title><link>https://pyvideo.org/pycon-italia-2018/testing-then-once-you-got-there.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I benefici di una testsuite completa e coerente sono un dato di fatto,
ma una volta completata la nostra test suite è lì che cominciano i veri
problemi ed è lì che diventa meno chiaro come muoversi.&lt;/p&gt;
&lt;p&gt;Che rapporto tenere tra le tipologie di test? Le Unit Test sono
efficienti per identificare problemi e garantire comportamenti
consistenti sul lungo termine, ma sono come verificare che le gambe
camminano e le braccia fanno le flessioni senza verificare che un uomo
intero riesca a camminare e fare le flessioni. I test e2e invece sono
efficacissimi nel garantire il comportamento del sistema nel suo
insieme, ma possono rapidamente diventare lenti ed insostenibili.&lt;/p&gt;
&lt;p&gt;Sappiamo bene che ci sono i mock e fake objects, ma quando veramente mi
conviene usare uno, l’altro o l’implementazione reale? Un test che
riceve dei MagicMock e ritorna un MagicMock quanto è affidabile
realmente?&lt;/p&gt;
&lt;p&gt;Se ho decine di sviluppatori quanto serve testare i feature branches
isolatamente dagli altri feature branches?&lt;/p&gt;
&lt;p&gt;Questo talk cerca di evidenziare le problematiche che si devono
affrontare quando si parla di testing di un progetto di grande
complessità, che integra decine di servizi e cerca di fornire alcune
best practices pur conscio che non c’è mai una sola risposta.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/testing-then-once-you-got-there.html</guid><category>best-practices</category><category>testing</category><category>software-engineering</category><category>coverage</category><category>application-development</category></item><item><title>Automating Code Quality</title><link>https://pyvideo.org/pycon-us-2018/automating-code-quality.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing quality Python code can be both tough and tedious. On top of the general design, there are many code quality aspects that you need to watch out for when writing and reviewing code such as adherence to PEP8, docstring quality, test quality, etc. Furthermore, everyone is human. If you are catching these code quality issues by hand, there is a good chance that at some point you will miss an easy opportunity to improve code quality. If the quality check can be done by a machine, then why would you even try to catch the code quality issue by hand? In the end, the machine will be able to perform the quality check with much more speed, accuracy, and consistency than a person.&lt;/p&gt;
&lt;p&gt;This talk will dive into how existing open source projects offload and automate many of these code quality checks resulting in:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A higher quality and a more consistent codebase&lt;/li&gt;
&lt;li&gt;Maintainers being able to focus more on the higher level design and interfaces of a project.&lt;/li&gt;
&lt;li&gt;An improved contribution process and higher quality pull requests from external contributors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By diving into how these open source projects automate code quality checks, you will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The available tooling related to checking code quality such as &lt;cite&gt;flake8&lt;/cite&gt;, &lt;cite&gt;pylint&lt;/cite&gt;, &lt;cite&gt;coverage&lt;/cite&gt;, etc.&lt;/li&gt;
&lt;li&gt;How to automate code quality checks for both a development and team setting.&lt;/li&gt;
&lt;li&gt;First-hand accounts of the benefits and lessons learned from automating code quality checks in real-life open source projects.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Knapp</dc:creator><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-13:pycon-us-2018/automating-code-quality.html</guid><category>code quality</category><category>flake8</category><category>pylint</category><category>coverage</category></item></channel></rss>