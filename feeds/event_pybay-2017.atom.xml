<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pybay-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-13T00:00:00+00:00</updated><entry><title>Anatomy of Open edX - a modern online learning platform</title><link href="https://pyvideo.org/pybay-2017/anatomy-of-open-edx-a-modern-online-learning-platform.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Nate Aune</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/anatomy-of-open-edx-a-modern-online-learning-platform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You may have heard of edX.org, the MOOC site created by Harvard and MIT, but did you know that the software powering this site is open source and written in Python? We’ll do a technical deep dive and explore how this software is built in a scalable way to serve millions of concurrent learners, and also show you how you can create your own Open edX site to deliver online courses at scale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What does it take to build a web application that can serve millions of concurrent users? This talk will dissect Open edX, the open source online learning platform that powers edX.org and hundreds of other sites around the world.&lt;/p&gt;
&lt;p&gt;Open edX is written in Django but relies on a slew of other software to work at scale. We’ll break down the components of the entire software architecture, and explain how each component is used. This will give attendees some insights into how they might architect their web application if they’re building software to serve a large audience.&lt;/p&gt;
&lt;p&gt;We’ll discuss how Open edX utilizes both MySQL and MongoDB as data stores and why it uses MySQL for student data and MongoDB for course data. We’ll describe the queing architecture of Celery and RabbitMQ to process background jobs, and Hadoop for processing terabytes of learner analytics data.&lt;/p&gt;
&lt;p&gt;DevOps enthusiasts will not be disappointed as we’ll go into the use of Ansible and Terraform for deploying the entire suite of software in a consistent and repeatable way up to popular cloud providers such as AWS, Google Cloud and Azure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My first exposure to Python was in 2003 when I began using the Plone CMS, which is based on Zope. This ignited a lifelong love affair with Python. In 2004, I founded Jazkarta, a Boston-based web consultancy to build websites for organizations like Harvard, Oxfam and Smithsonian. Back when PaaS’es were sexy, I founded DjangoZoom to make it easy to get your Django apps running in the cloud. Now I’m leading the 20 person distributed team at Appsembler, whose mission is to empower trainers and educators to create delightful online learning experiences.&lt;/p&gt;
</summary></entry><entry><title>Before deep learning</title><link href="https://pyvideo.org/pybay-2017/before-deep-learning.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Ravi Chityala</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/before-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A significant work in deep learning technique such as Convolution Neural Network (CNN) is in preparation and augmentation of image data. The data is then fed to the network for classification. In this talk, we will discuss an example where we will solve a CNN after preparing the data using appropriate computer vision and image processing algorithms using modules such as numpy, scipy, OpenCV etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deep learning solves some of the most complex problems in computer vision. Deep learning is primarily a data problem (i.e.,) the more data we can provide to the learning algorithm, the better would be the outcome. In that regards, data preparation is a pre-requisite for solving deep learning problems.&lt;/p&gt;
&lt;p&gt;Python is one of the most popular language for solving these deep learning problems. Python libraries such as Tensorflow, Theanos, Keras have made programming deep learning relatively easy. However, we still need to perform image augmentation and image preparation before feeding the data to deep learning. In this talk, we will learn about preparing large dataset of images for solving Convolution Neural Network (CNN) based classification.&lt;/p&gt;
&lt;p&gt;We will read images using OpenCV and store them as numpy arrays. We will then filter and pre-process the images using scipy and OpenCV, so that the resulting tensor can be fed to the CNN. Along the way, we will discuss the philosophy behind each of these modules.&lt;/p&gt;
&lt;p&gt;We will use Anaconda Python distribution along with the latest version of Tensorflow for this talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dr. Ravi Chityala is a Senior Engineer at Elekta Inc. He has more than 12 years of experience in image processing and scientific computing. He is also a part-time instructor at University of California Santa Cruz, Silicon Valley Extension, Santa Clara, CA, where he teaches advanced Python to programmers. He uses Python for web development, scientific prototyping and computing and as a glue to automate process.&lt;/p&gt;
</summary></entry><entry><title>Big data processing with Apache Beam</title><link href="https://pyvideo.org/pybay-2017/big-data-processing-with-apache-beam.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Sourabh Bajaj</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/big-data-processing-with-apache-beam.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we present the new Python SDK for Apache Beam - a parallel programming model that allows one to implement batch and streaming data processing jobs that can run on a variety of execution engines like Apache Spark and Google Cloud Dataflow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Currently, some popular data processing frameworks such as Apache Spark consider batch and stream processing jobs independently. The APIs across different processing systems such as Apache Spark or Apache Flink are also different. This forces the end user to learn a potentially new system every time. Apache Beam [1] addresses this problem by providing a unified programming model that can be used for both batch and streaming pipelines. The Beam SDK allows the user to execute these pipelines against different execution engines. Currently, Apache Beam provides a Java and Python SDK.&lt;/p&gt;
&lt;p&gt;In the talk, we start off by providing an overview of Apache Beam using the Python SDK and the problems it tries to address from an end user’s perspective. We cover the core programming constructs in the Beam model such as PCollections, ParDo, GroupByKey, windowing, and triggers. We describe how these constructs make it possible for pipelines to be executed in a unified fashion in both batch and streaming. Then we use examples to demonstrate these capabilities. The examples showcase using Beam for stream processing and real-time data analysis, and how Beam can be used for feature engineering in some Machine Learning applications using Tensorflow. Finally, we end with Beam's vision of creating runner and execution independent graphs using the Beam FnApi [2].&lt;/p&gt;
&lt;p&gt;Apache Beam [1] is a top-level Apache project and is completely open source. The code for Beam can be found on Github [3].&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://beam.apache.org/"&gt;https://beam.apache.org/&lt;/a&gt; [2] &lt;a class="reference external" href="http://s.apache.org/beam-fn-api"&gt;http://s.apache.org/beam-fn-api&lt;/a&gt; [3] &lt;a class="reference external" href="https://github.com/apache/beam"&gt;https://github.com/apache/beam&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sourabh is a software engineer at Google interested in Data Infrastructure and Machine Learning. He currently works on Apache Beam. Prior to Google he was part of the Data Science team at Coursera working on everything from Recommendation System to Data warehousing.&lt;/p&gt;
</summary></entry><entry><title>Billions of Emails Synced with Python</title><link href="https://pyvideo.org/pybay-2017/billions-of-emails-synced-with-python.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Christine Spang</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/billions-of-emails-synced-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The open source Nylas Sync Engine provides a RESTful API on top of a powerful email sync platform, making it easy to build messaging into apps. It’s built using Python and gevent and has scaled to sync billions of messages over its lifetime deployment. In this talk, we’ll show you how it’s built and what technical challenges we’ve solved along the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why a sync engine?&lt;/p&gt;
&lt;p&gt;If you’ve ever tried to build anything that works with email, you’ll find that it’s a problem full of twisty corners: the protocols themselves are obtuse and require entire RFCs just to describe how to implement sync with them, if you want your integration to work with everyone’s email you face implementing several different protocols or flavours of protocols (IMAP with CONDSTORE, IMAP with no CONDSTORE, Gmail IMAP, Exchange Web Services, Exchange ActiveSync, Office365 REST) plus OAuth authentication for different providers, and once you’ve gotten data flowing you still need to handle parsing email, which involves a complex format known as MIME as well as pretty much every way of encoding non-ASCII text as ASCII that has ever been invented.&lt;/p&gt;
&lt;p&gt;We’ve built a platform that layers a sync engine over 30 years of email history and allows developers to read and write to mailboxes and calendars using a modern REST API. It’s not just a simple proxy that makes calls to IMAP or Exchange behind the scenes: in order to meet the speed and reliability demands our customers require, when a user connects their email account to a developer’s app, our infrastructure syncs a copy of that mailbox and keeps it up-to-date as changes are made from that app or traditional web, mobile, and desktop email clients. This is a demanding technical challenge and wasn’t easy to build.&lt;/p&gt;
&lt;p&gt;How a sync engine?&lt;/p&gt;
&lt;p&gt;A semi-monolithic application composed of several services that all share a common database and a fair amount of code, but run on separate server fleets (email sync, api frontend, webhooks, etc.)&lt;/p&gt;
&lt;p&gt;~90k lines of Python, including tests and migrations&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Christine went to MIT, dropped out of an operating systems graduate program to be an early engineer at Ksplice, and most recently cofounded Nylas, a startup building an email platform. When she's not building rock-solid infrastructure for the Internet or speaking around the world at conferences like DebConf and PyCon, rumour has it she can be found on cliff walls, remote trails, and dance floors. She lives in Oakland, California.&lt;/p&gt;
</summary></entry><entry><title>Bringing Python 3 to LinkedIn</title><link href="https://pyvideo.org/pybay-2017/bringing-python-3-to-linkedin.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Zvezdan Petkovic</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/bringing-python-3-to-linkedin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Organizations keep finding excuses to stay on Python 2, especially large companies with a lot of legacy code. Developers in such organizations either require or could benefit from Python 3 features, such as asyncio or type checking, but are constrained by their environment. It does not have to be that way and you can move to Python 3 with careful planning and agile, incremental execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We present the comprehensive case study of enabling Python 3 development in a large company. The talk covers all the stages of the process. We start with the initial motivation, goals, and possible solutions. Then, we go into the specifics of the design for infrastructure changes necessary to make the migration possible. After, we discuss the execution and the decision making process for resolving challenges or trade-offs. We talk about multi-version testing, conditional dependencies, build, continuous integration, and automation. We describe possible ways to resolve platform, dependency, and code base issues. In the end, we'll look into the porting of the specific code patterns and future development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zvezdan currently works at LinkedIn on the Python Foundation Team. He taught Python at University of Mary Washington and then worked for Zope Corporation where he led a team that developed one of its most important products. He also worked on and maintained dozens of packages for the open-source Zope web framework. These days, he contributes to PyGradle -- the open-source Python build tool developed by his team at LinkedIn. Zvezdan had presented at international conferences and internal company tech talks on various topics from microprocessor design to distributed file systems to troubleshooting Python applications.&lt;/p&gt;
</summary></entry><entry><title>Build your own IoT doorbell: Raspberry Pi, Twilio, and Fire(base)</title><link href="https://pyvideo.org/pybay-2017/build-your-own-iot-doorbell-raspberry-pi-twilio-and-firebase.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Heston Liebowitz</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/build-your-own-iot-doorbell-raspberry-pi-twilio-and-firebase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internet connected doorbells are all the rage, but buying something off the shelf is no fun. In this talk, you'll follow the speaker's (mis)adventures as he connects a Rasperry Pi to his old school doorbell chime, builds a voice-powered UI with Twilio, and hooks it all together with the Google Firebase Realtime Database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Internet connected doorbells are all the rage, but buying something off the shelf is no fun. At least so thought a Pythonista with a semester's worth of electrical engineering under his belt. In this talk, you'll follow Heston’s (mis)adventures as he connects a Rasperry Pi to his old school doorbell chime, builds a voice-powered UI with Twilio, and hooks it all together with the Google Firebase Realtime Database.&lt;/p&gt;
&lt;p&gt;There were sparks. There was smoke. There was great success!&lt;/p&gt;
&lt;p&gt;Come learn about Raspberry Pi's GPIO abilities. Come learn about subscribing to server-sent events from Python. Come learn about the perils of forgetting to calculate the maximum power dissipation of a resistor network (spoiler alert: it's fire).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heston Liebowitz is a full-stack developer, entrepreneur, and tinkerer at heart. He's currently an engineering manager at Lyft where he runs the Lyft.com and Amp teams (you know, that cool glowy thing on the dashboard). He was previously a frontend developer at Google, as well as several small startups you've probably never heard of. He thinks Python is the greatest language ever, but occasionally dabbles in JavaScript.&lt;/p&gt;
</summary></entry><entry><title>Building Bridges: Stopping Python 2 without damages</title><link href="https://pyvideo.org/pybay-2017/building-bridges-stopping-python-2-without-damages.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Matthias Bussonnier</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/building-bridges-stopping-python-2-without-damages.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deciding to stop support for Python 2 is a hard choice. As library authors we try to minimize the breakage for users. IPython recently moved from single-source to Python 3 only, and worked with Core Python to make such a transition possible and easy. We'll show you the new features available in pip/setuptools to make that easy for you, and tell you how the transition went for IPython.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Up until December 2016 it was hard if not impossible to mark a release of a Python package or library only compatible with some version of Python. Pip would happily download a Python 3 only version on Python 2 system, install it and break users systems.&lt;/p&gt;
&lt;p&gt;After much work and patching many upstream project Python packagers can finally make user of the Requires-Python greater than or equal to 3.3 metadata, which will indicate to pip not to upgrade and thus shield most users from getting indecipherable error message from installing (or running) incompatible package versions.&lt;/p&gt;
&lt;p&gt;While these changes should now be widely available, not all systems are fully up-to-date, and knowing how things can fails is necessary to packaging your libraries accordingly. We'll show you how to prepare for such a transition.&lt;/p&gt;
&lt;p&gt;Finally we've release IPython 6.0 – using the above techniques – and have some numbers and our experience to share, for other to be ready if/when one of the library they know (or develop) is going to stop Python 2 support. Hopefully to do a tiny bit better than us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Matthias Bussonnier is a Post Doctoral Scholar at the University of California Berkeley institute for data science and has been a core developer of IPython and Jupyter since 2012.&lt;/p&gt;
</summary></entry><entry><title>Concurrent Testing wiht py.test</title><link href="https://pyvideo.org/pybay-2017/concurrent-testing-wiht-pytest.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Reverb Chu</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/concurrent-testing-wiht-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing a different way to perform concurrent testing with the py.test framework.&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="pytest"></category><category term="testing"></category></entry><entry><title>Continuous Deployment with Python</title><link href="https://pyvideo.org/pybay-2017/continuous-deployment-with-python.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Natalie Sere Bryakova</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/continuous-deployment-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The presentation will be helpful for engineers, who developed an application in Python, or library or microservice. The presentation will cover the practices automating continuous integration, continuous delivery, and continuous deployment with Python ( examples: Jenkins and Gocd).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Continuous Deployment is a process to ensure that code can be rapidly and safely deployed to production by delivering every change to a production-like environment and ensuring business applications and services(microservices) function as expected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My name is Natalie; I have a Networking and Security background but recently decided to challenge myself in different space. That's why currently I work at Vevo as Tools Engineer in coolest DevOps team in San Francisco. Where part of my job includes building and automating various tools that help our development team be more productive and happy. I have an MS in Compute Since degree. For my first job, I had to do a lot of scripting for configuring and managing thousands of switches, routers and other networking devices in our company testing lab. After using sed, awk, Tcl I discovered and learned Python. It was straightforward to pick up and worked well since then Python became my language of preference. I also like Python for its big community.&lt;/p&gt;
&lt;p&gt;In my spare time, I like to spend time with my pup Chai, bake and blog about baking.&lt;/p&gt;
&lt;p&gt;Thank you, organizers, for giving me and people the opportunity to speak and this conference and share our knowledge with community .&lt;/p&gt;
</summary></entry><entry><title>Get with it</title><link href="https://pyvideo.org/pybay-2017/get-with-it.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Wesley Chun</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/get-with-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The with statement is relatively recent, having been introduced in Python 2.5. You have most likely used it or have seen it used with files. What's a &amp;quot;context manager&amp;quot; anyway, and why can't I use any Python object with with unless it has one? In this talk, we'll cover some background, objects you can use with the with statement, and show you how to add context management to your own objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The with statement is relatively recent, having been introduced into Python by PEP 343 and making its debut in Python 2.5. You have likely now used it or seen it used with files. Those who are long-time members of the Python community are getting with it now (pun indented). What's a &amp;quot;context manager&amp;quot; anyway, and why can't I use any Python object with with unless it has one?&lt;/p&gt;
&lt;p&gt;In this talk, we'll go over the background on it, covering the motivation behind context management, and how the with statement uses it and follows the RAII concept where &amp;quot;resource allocation is initialization.&amp;quot; We'll describe what Python objects you can use with the with statement, and show you how to add context management to your own objects so you can use them with with. This includes writing your own context manager class as well as short-form alternatives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WESLEY CHUN is the author of Prentice Hall's bestselling &amp;quot;Core Python&amp;quot; (corepython.com) series, co-author of Python Web Development with Django (withdjango.com), and has written for Linux Journal, CNET, and InformIT. In addition to being an engineer &amp;amp; Developer Advocate at Google, he runs CyberWeb (cyberwebconsulting.com), a consultancy specializing in Python training. He has over 25 years of programming, teaching, and writing experience, including over two decades of Python! Wesley was one of the original Yahoo! Mail engineers and holds degrees in CS, Math, and Music from the University of California. He is a Fellow of the Python Software Foundation and can be reached on Google+ (+WesleyChun) or Twitter (&amp;#64;wescpy).&lt;/p&gt;
</summary></entry><entry><title>Getting Started with Django's Class-Based Views</title><link href="https://pyvideo.org/pybay-2017/getting-started-with-djangos-class-based-views.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Meggie Mahnken</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/getting-started-with-djangos-class-based-views.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Object orientation affords elegance and readability for back-end view logic for Python web applications. Come learn about how to not only start using Django’s Class-Based Views, but also how they work and how to break them down for your use case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When first learning the beloved web framework Django, it’s not uncommon to utilize function-based views for the back-end view logic of an application. This pattern rhymes with other popular web frameworks such as Flask and Pyramid. However, class-based views unlock an important set of capabilities: they help DRY up view logic, encourage consistency in form validation, and “plug&amp;quot; right into database model classes. While it’s easy to appreciate this from an objective standpoint (who wouldn’t want all of those things?), after an initial attempt at incorporating a class-based view, it can be hard to know if you’re making full use of them.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll start by replacing a basic function-based view for a homepage with a CBV using of Django’s base generic classes: TemplateView. Next, we’ll continue by looking at the purpose, descendants, and exciting possibilities of one of Django’s more generic views— the ListView class. Lastly, I’ll attempt to debunk the myth that CBVs are only appropriate for straightforward, model-oriented pages, but aren’t as customizable or elegant as function-based views for pages with multiple database components.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meggie is currently the Director of the Software Engineering Fellowship at Hackbright Academy, where women learn to code in Python, build dynamic web applications, and study computer science in order to start careers in tech. She started coding in Python as a hobby after graduating from UC Berkeley in 2012 with a degree in Gender and Women's Studies. In 2013, Meggie completed Hackbright's Fellowship, and began working at Hackbright as a Software Engineer on internal tools. When not coding or hanging out in the Hackbright classroom, Meggie enjoys taking dance classes at various Bay Area dance schools.&lt;/p&gt;
</summary></entry><entry><title>Insight About Async/Await</title><link href="https://pyvideo.org/pybay-2017/insight-about-asyncawait.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Luciano Ramalho</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/insight-about-asyncawait.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slide deck referenced: &lt;a class="reference external" href="https://speakerdeck.com/pybay/2017-luciano-ramalho-modern-concurrency"&gt;https://speakerdeck.com/pybay/2017-luciano-ramalho-modern-concurrency&lt;/a&gt;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Logging and Testing and Debugging, Oh My!</title><link href="https://pyvideo.org/pybay-2017/logging-and-testing-and-debugging-oh-my.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Al Sweigart</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/logging-and-testing-and-debugging-oh-my.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Logging messages, unit tests, and using the debugger are best practices, but often left out of introductory programming tutorials. As a result, beginners come away with the idea that these time-saving features are somehow &amp;quot;advanced&amp;quot; or things to be learned later on. In this presentation, Al Sweigart dispels these notions by providing quickstart guides to Python's logging, doctest, and pdb modules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Logging messages, unit tests, and using the debugger are best practices, but often left out of introductory programming tutorials. As a result, beginners come away with the idea that these time-saving features are somehow &amp;quot;advanced&amp;quot; or things to be learned later on. In this presentation, Al Sweigart dispels these notions by providing quickstart guides to Python's logging, doctest, and pdb modules, including:&lt;/p&gt;
&lt;p&gt;Why beginners (incorrectly) avoid these programming best practices.
The &amp;quot;if you're doing this&amp;quot; signs that you aren't using these best practices.
The 4 lines of code you need from the logging module.
The 4 lines of code you need from the doctest module.
The 2 lines of code you need from the pdf module.
How much time you'll save, not spend, by using these not-so-advanced modules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Al Sweigart is the author of several programming books, including Automate the Boring Stuff with Python. He releases all of his books online for free under a Creative Commons license. He lives in San Francisco, and his cat weighs 12 pounds.&lt;/p&gt;
</summary></entry><entry><title>Modern Frontend Web Development</title><link href="https://pyvideo.org/pybay-2017/modern-frontend-web-development.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>John Lockwood</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/modern-frontend-web-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how develop a single page web application written with modular components on the frontend and python on the backend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Learn how develop a single page web application written in ES6 using react-redux on the frontend and a python Flask app as a web service on the backend. Organize and develop your frontend code as modules. Add functionality to your application by choosing from thousands of JavaScript packages on &lt;a class="reference external" href="https://www.npmjs.com/"&gt;https://www.npmjs.com/&lt;/a&gt;. Add dynamic functionality with your python code as a service that the frontend can talk to. Get fast feedback with hot module reloading to quickly see your changes take effect without reloading the whole app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;John Lockwood is an Software Engineer at Workiva who loves the web.&lt;/p&gt;
</summary></entry><entry><title>Opening Up to Open Source</title><link href="https://pyvideo.org/pybay-2017/opening-up-to-open-source.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Cynthia Lin</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/opening-up-to-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source communities have led to the development of a majority of useful tools and technologies. Open source software is understated because becoming involved can be daunting when a project has hundreds of active developers. In reality, open source communities are warm, welcoming, and diverse. Learn more about open source, its significance, opportunities to contribute, and how to get started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everyday, thousands of developers gather in teams and collaborate in open source communities to collaborate together to celebrate the principles of community-oriented development, such as open exchange, collaborative participation, rapid prototyping, transparency, and meritocracy.&lt;/p&gt;
&lt;p&gt;By publicizing their source code on websites like GitHub, open source projects allow others to easily develop, modify, and distribute their source code, dispelling the stigma of software as a private, commercial product. Various examples of open source software include the Atom text editor, Rust programming language, Django Python-based web application framework, and Zulip group chat application.&lt;/p&gt;
&lt;p&gt;However, individuals often hesitate to join open source communities due to several concerns; some fear ridicule for their lack of experience or invaluable contributions, and others believe that they cannot gain valuable rewards from committing their time to a non-profit project.&lt;/p&gt;
&lt;p&gt;Instead, new contributors to open source projects discover opportunities to develop their technical, communication, and collaboration skills under the guidance of experienced mentors by collaborating with a network of like-minded individuals with various backgrounds, experience, and fields of expertise. By contributing to open source projects, individuals gain a chance to make a difference by developing software that revolutionizes the technology industry.&lt;/p&gt;
&lt;p&gt;Learn more about open source, its significance, opportunities to contribute, and how to get started.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cynthia Lin is a 15-year-old high school student from Torrance, California. A full-stack developer at heart, she has extensive experience developing software, web applications, automated bots, and games through various projects. As an avid supporter of open source software, Cynthia actively contributes to the Zulip open source group chat application as a core developer and the lead developer of zulipbot. She placed as a Finalist in Google Code-in 2016 for her accomplishments in open source software and has presented her experiences as a high school student in the open source community at several technology conferences.
Speaker home page&lt;/p&gt;
</summary></entry><entry><title>Preventing headaches with linters and automated checks</title><link href="https://pyvideo.org/pybay-2017/preventing-headaches-with-linters-and-automated-checks.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Flavio Juvenal</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/preventing-headaches-with-linters-and-automated-checks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will teach you how to use and extend tools for automated checks on Python projects. Are your imports a mess? No reasonable order, stdlib modules mixed with third-party ones? There's a tool to fix that. Tired of checking for security patches of the libs in your requirements.txt? Let a tool do this for you. We'll learn about many other tools and we'll also discuss how to build new ones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While it's very common to enforce PEP8 code style with tools like pycodestyle or flake8, it's rare for Python projects to use other types of tools for automated checks. However, there are many common problems in readability, security, configuration, etc that could be avoided by using other linters and tools, for example:&lt;/p&gt;
&lt;p&gt;Are your imports a complete mess, with third-party modules mixed with stdlib ones? You can use &amp;quot;isort&amp;quot; to organize and separate them.
Tired of checking if your project requirements received security patches? Let &amp;quot;safety&amp;quot; do that for you.
Hated when that fellow developer pushed a huge file that slowed your repository pulls forever? A &amp;quot;pre-commit&amp;quot; hook with a simple check could've prevented that.
Is your code cluttered with unused legacy functions and classes? Check and prevent that with &amp;quot;vulture&amp;quot;.
As we can see from the list above, many issues can be prevented at commit or CI time with automated tools. In this talk, we'll discuss how to configure and use those tools. Also, we'll learn the role of static analysis in those tools, which will enable us to extend them and build new ones.&lt;/p&gt;
&lt;p&gt;Here is a non-exhaustive list of tools that will be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;prospector: &lt;a class="reference external" href="https://github.com/landscapeio/prospector"&gt;https://github.com/landscapeio/prospector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pylint: &lt;a class="reference external" href="https://github.com/PyCQA/pylint"&gt;https://github.com/PyCQA/pylint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;safety: &lt;a class="reference external" href="https://github.com/pyupio/safety"&gt;https://github.com/pyupio/safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bandit: &lt;a class="reference external" href="https://github.com/openstack/bandit"&gt;https://github.com/openstack/bandit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pre-commit: &lt;a class="reference external" href="http://pre-commit.com/"&gt;http://pre-commit.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;isort: &lt;a class="reference external" href="https://github.com/timothycrosley/isort"&gt;https://github.com/timothycrosley/isort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vulture: &lt;a class="reference external" href="https://github.com/jendrikseipp/vulture"&gt;https://github.com/jendrikseipp/vulture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pycycle: &lt;a class="reference external" href="https://github.com/bndr/pycycle"&gt;https://github.com/bndr/pycycle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pyt: &lt;a class="reference external" href="https://github.com/python-security/pyt"&gt;https://github.com/python-security/pyt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Django System check framework: &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.10/ref/checks/"&gt;https://docs.djangoproject.com/en/1.10/ref/checks/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web developer from Brazil. Loves beautiful high-quality products, from UX to code, and will defend them against unreasonable deadlines and crazy features. Partner at Vinta (&lt;a class="reference external" href="https://www.vinta.com.br/"&gt;https://www.vinta.com.br/&lt;/a&gt;), a web consultancy specialized in building products with React and Django.&lt;/p&gt;
</summary></entry><entry><title>Python Debugging with PUDB</title><link href="https://pyvideo.org/pybay-2017/python-debugging-with-pudb.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Christopher Beacham</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/python-debugging-with-pudb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When tracking down a tricky bug, tools are everything. I'll demonstrate three useful debugging tools and we'll see how we can use them to find bugs, whether they are in networking, logic, or performance.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop using print statements forever! You'll learn how to use these tools: PUDB - an interactive, ncurses debugger Charles - a web debugging proxy cProfile - python's built-in profiling library RunSnakeRun and SnakeViz - Tool for visualizing profile output I'll also talk about the process of debugging and profiling, common error patterns and how to use your time most efficiently.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chris Beacham (aka Lady Red) is a python developer and Senior Software Engineer at Hipmunk. She also does performance, sewing, sculpture and painting in her free time, and is a frequent sight at the Noisebridge Hackerspace, where this talk was first delivered.&lt;/p&gt;
</summary></entry><entry><title>Solving NP-Hard Bus-Scheduling the Easy Way</title><link href="https://pyvideo.org/pybay-2017/solving-np-hard-bus-scheduling-the-easy-way.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Sandy Ryza</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/solving-np-hard-bus-scheduling-the-easy-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Which driver should drive which public bus, and when? At Remix, we use Python to build algorithms for NP-hard problems in transit-scheduling. In this talk, we’ll discuss practical techniques for dealing with discrete optimization problems, including local search in raw Python and the PuLP library for integer programming.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Which driver should drive which public bus, and when? A bad answer means poor allocation of taxpayer dollars and miserable workdays for bus drivers. A good answer requires solving an NP-hard optimization problem. At Remix, we use Python to build optimization algorithms, because the ability to rapidly prototype new approaches matters more than the fewer cycles we’d be able to squeeze out of languages like C++. Seemingly similar problems in public transit scheduling demand very different solutions. For example, packaging bus trips into daily shifts for drivers is amenable to integer programming, an optimization technique facilitated by Python's PuLP library. For packaging daily shifts into work-weeks, we found the most success using heuristic techniques that iteratively improve on an existing solution. This will be a practical talk about solving tough optimization problems as part of a product. It will describe the bus scheduling problems, why they’re hard, and the techniques we encountered on our journey to solve them. The audience will come away with a few tricks to employ when encountering combinatorial optimization problems in their work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sandy Ryza develops algorithms for public transit at Remix. Prior, he was a senior data scientist at Cloudera and Clover Health. He is an Apache Spark committer, Apache Hadoop PMC member, and author of O'Reilly's Advanced Analytics with Spark.&lt;/p&gt;
</summary></entry><entry><title>Think Like a Pythonista</title><link href="https://pyvideo.org/pybay-2017/think-like-a-pythonista.html" rel="alternate"></link><published>2017-08-13T00:00:00+00:00</published><updated>2017-08-13T00:00:00+00:00</updated><author><name>Luciano Ramalho</name></author><id>tag:pyvideo.org,2017-08-13:pybay-2017/think-like-a-pythonista.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Luciano Ramalho is a Technical Principal at ThoughtWorks and the author of the bestselling book Fluent Python (O'Reilly, 2015). Since 1998 he has deployed Python on some of the largest Web sites in Brazil. His speaking record includes PyCon US, OSCON, OSCON-EU, PythonBrasil, RuPy and an ACM Webinar that was attended by more than 900 people. Ramalho is a fellow of the PSF and co-founder of the Brazilian Python Association and of Garoa Hacker Clube, the first hackerspace in Brazil.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about some key insights that made Luciano Ramalho a better Python programmer and resulted in the success of Fluent Python.&lt;/p&gt;
&lt;p&gt;Fluent Python was the #1 seller out of all O'Reilly books and videos in September, 2015, the first full month of sales after it was released -- and O'Reilly is the #1 seller of Python books.&lt;/p&gt;
</summary></entry><entry><title>A Gentle Introduction to Text Classification with Deep Learning</title><link href="https://pyvideo.org/pybay-2017/a-gentle-introduction-to-text-classification-with-deep-learning.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Brian Spiering</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/a-gentle-introduction-to-text-classification-with-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deep learning has proven very effective for machine learning tasks in the past couple of years, but it is sometimes shrouded in jargon and unnecessary technical detail. This talk will provide a practical introduction to the topic focusing on building an end-to-end text classification system. No machine learning or deep learning experience required. Intermediate knowledge of Python required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you wondered what all the hype about deep learning is about but haven't taken the leap to trying it yourself, this talk is for you. First, we'll cover the basics of Deep Learning, focusing on the general intuition of the process. Then get hands-on experience by analyzing common examples of text and training models to predict the category the text belongs to, for example whether a movie review is positive or negative. Along the way, you will learn the necessary machine learning and text processing concepts. We will be using the Kera package which provides a Pythonic way to build deep learning models.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dr. Brian Spiering is a Data Science Faculty member at GalvanizeU which, in cooperation with the University of New Haven, offers a Master of Science in Data Science. He teaches humans the languages of computers (primarily Python) and teaches computers the languages of humans (through Deep Learning and Natural Language Processing). He is active in the San Francisco tech community through volunteering and mentoring.&lt;/p&gt;
</summary></entry><entry><title>Everything You Ever Wanted to Know About Web Authentication in Python</title><link href="https://pyvideo.org/pybay-2017/everything-you-ever-wanted-to-know-about-web-authentication-in-python.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Randall Degges</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/everything-you-ever-wanted-to-know-about-web-authentication-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to learn how web authentication works? How your login information is transmitted from a web browser to a web server, and what happens from that point onwards? How authentication protocols work behind the scenes?&lt;/p&gt;
&lt;p&gt;By the end of this talk, you’ll be intimately familiar with web authentication in Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Want to learn how web authentication works? How your login information is transmitted from a web browser to a web server, and what happens from that point onwards? How authentication protocols work behind the scenes?&lt;/p&gt;
&lt;p&gt;In this talk, Randall Degges, Developer Advocate at Okta, will walk you through the entire web authentication flow, covering:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Credential transmission&lt;/li&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, you’ll be intimately familiar with web authentication in Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Randall Degges leads Developer Advocacy at Okta, previously Stormpath, where he builds open source security libraries and helps make the internet a little safer. In a prior life, Randall was the CTO of OpenCNAM, the largest Caller ID API service.&lt;/p&gt;
&lt;p&gt;In his free time, Randall geeks out on web best practices, explores new technologies, and spends an inordinate amount of time writing Python, Node, and Go projects. As a fun fact, Randall runs ipify.org, one of the largest IP lookup APIs which serves over 25 billion requests per month.&lt;/p&gt;
</summary></entry><entry><title>How Optimizely Scaled its REST API with Asyncio</title><link href="https://pyvideo.org/pybay-2017/how-optimizely-scaled-its-rest-api-with-asyncio.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Nick DiRienzo</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/how-optimizely-scaled-its-rest-api-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With developers, an awesome product isn’t everything, or at least we found that out. More than a product you need a platform. But what is a platform? Learn tips and tricks about building a public API using the latest and greatest tools: OpenAPI, Python 3 and asyncio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With developers, an awesome product isn’t everything, or at least we found that out. More than a product, you need a platform. But what is a platform? And how do you build one alongside all the other weird old code you might have inherited?&lt;/p&gt;
&lt;p&gt;In a perfect world, Jeff Dean would ride in on a Unicorn with stone tablets inscribed with UML diagrams of an application architecture so perfect you’d weep with joy. In the real world however that tends not to happen, so the process is a bit more iterative. Sometimes you try things that don’t work or seem silly in retrospect.&lt;/p&gt;
&lt;p&gt;Part of our platform journey has been building a public API with our favorite hand picked technologies: OpenAPI and Python 3, especially asyncio. Building a rock solid, fast, and scalable Python application was not all rainbows and unicorns along the way. Through this process, we learned quite a bit about describing REST APIs and how modern Python concurrency mechanisms behave in the real world.&lt;/p&gt;
&lt;p&gt;We’ll share how we used OpenAPI to power our public API and improve the developer experience for both internal engineers and external consumers.&lt;/p&gt;
&lt;p&gt;We started off with a mix of multiprocessing and asyncio, and have since migrated completely to asyncio. Also, we’ll share a few of the things we've learned in the process, which we hope will help you if you choose to use asyncio.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nick DiRienzo is a software engineer at Optimizely. He enjoys writing code in Python, making developers’ lives better, and eating Mission burritos.&lt;/p&gt;
&lt;p&gt;Vinay Tota is currently a member of the Application Platform team at Optimizely. A long time ago wanted to be a theoretical physicist but now has way more fun hacking code. More recently he's worked on building high throughput low latency systems for ad serving using Python.&lt;/p&gt;
</summary></entry><entry><title>Intellectual Property for Engineers</title><link href="https://pyvideo.org/pybay-2017/intellectual-property-for-engineers.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Noah Kantrowitz</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/intellectual-property-for-engineers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intellectual property is everywhere in software, especially in open source. From licenses to copyrights, a working knowledge of IP law can help you navigate the FOSS world more effectively as either a developer or user.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intellectual property is everywhere in software, especially in open source. From licenses to copyrights, our world is one drenched in IP. This talk will cover the essentials of IP law in the US, giving both open source developers and users a working knowledge of the systems behind those big blocks of legal text. Starting from the four main branches of IP, we'll cover topics like copyrights, licenses, trademarks, CLAs, and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Noah Kantrowitz is a web developer turned infrastructure automation enthusiast, and all around engineering rabble-rouser. By day he builds tools and teaches, and by night he works with the Python Software Foundation infrastructure team. He is an active member of the Chef community, and enjoys merge commits, cat pictures, and beards.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Celery</title><link href="https://pyvideo.org/pybay-2017/introduction-to-celery.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Jessica Earl Cha</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/introduction-to-celery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview of what is Celery (an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well) and how they are helpful. Then a walkthrough of how to set up celery task, connecting it to a messaging server (RabbitMQ) and running it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Want to be able to have a task queue, where your user's experience isn't interrupted because you need to do run a process every day, every hour or when a action is triggered? Best part of all, Celery code is testable! We are going do an overview of what Celery is and how its works. Then we'll do a walk through of Celery app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Jessica Dene Earley-Cha is from Calexico, CA and received her bachelor’s in Sociology, Education: Applied Psychology from UCSB. After receiving her diploma she started working in the nonprofit sector. She spent almost a decade working with at-risk youth and people with mental health challenges in disadvantaged areas. After years of supporting and encouraging other to pursue their dream, Jessica decided to pivot her career into tech. She is full stack developer who still enjoys sharing knowledge and support others. She is currently the Director of Part Time Education at Hackbright Academy, providing avenues for women to get quality software engineering education. Jessica is active in Google Developers Group, Women Techmakers, Girl Develop It, Latin&amp;#64;s in Tech and DevelopHerDevelopHim. You’ll find her either listening to other’s life stories or coding one of her many personal projects.&lt;/p&gt;
&lt;p&gt;James Cha is a software developer who takes his development practices into all aspects of his life. Do life, fix bugs, refactor life, branch for exploration, merge some branches, archive others. He enjoys building up communities and loves to share the knowledge he has.&lt;/p&gt;
</summary></entry><entry><title>Keynote on Concurrency</title><link href="https://pyvideo.org/pybay-2017/keynote-on-concurrency.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/keynote-on-concurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote for PyBay 2017, the 2nd annual Regional Python Conference in SF&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>latus - a Personal Cloud Storage App written in Python</title><link href="https://pyvideo.org/pybay-2017/latus-a-personal-cloud-storage-app-written-in-python.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>James Abel</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/latus-a-personal-cloud-storage-app-written-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people use personal cloud storage applications to keep all of their files accessible, backed up and secure. However, they generally are closed source, so they can't easily be viewed or modified. latus is a personal cloud storage application that is open source and written in Python. It provides flexible file sync across computers (nodes) and the cloud, as well as 'zero knowledge' encryption.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Personal cloud storage solutions are common and popular. Many companies provide this capability such as DropBox, Google Drive, Microsoft One Drive, Amazon Drive, etc. However, these applications are closed source, making it difficult for the community to innovate on top of them. latus is a client application written in Python for personal cloud storage. It is open source, and utilizes open source libraries/packages. latus uses 'zero knowledge' encryption so that files can be encrypted prior to being stored in the cloud, providing an additional level of security. It also provides the ability to control where files are stored long term - in the cloud, cold storage, or only on personal systems. latus performs file sync, so that all computers (or &amp;quot;nodes&amp;quot;) contain the most current file versions, as well as a file version history. For the cloud storage itself, latus can use existing cloud storage vendors or AWS directly. In this talk I will discuss the major subsystems of latus, the Python packages used, testing, freezing/installing and lessons learned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;James Abel is a HW and SW engineering consultant in the Bay Area. In 2016 he retired from Intel Corporation, most recently as a Principal Engineer working on microprocessor performance architecture, simulation and design automation. He holds MSCS and BSEE degrees. His other interests are music recording, production and performance (bass/guitar).&lt;/p&gt;
</summary></entry><entry><title>Moving Towards Best Practices in Legacy Code Bases</title><link href="https://pyvideo.org/pybay-2017/moving-towards-best-practices-in-legacy-code-bases.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/moving-towards-best-practices-in-legacy-code-bases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a company is young, getting the product out the door is the most important thing. Time to market and lopsided hiring of inexperienced developers often ends up delivering a product that works, but is riddled with Python anti-patterns. How to move towards best practices while maintaining development velocity and product stability?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Real life is messy. Real companies doubly so. While, of course, the decision to use Python is a good one, often developers are hired who are either inexperienced or are new to Python. Following best practices, or even learning what they are, or even avoiding replicating Java/C++ in Python, are treated as luxuries reserved for bigger companies.&lt;/p&gt;
&lt;p&gt;After enough pain-- in the form of production outages-- is experienced, it is often possible to convince companies that efforts need to be made to bring their code up to date. What is the best way to achieve that?&lt;/p&gt;
&lt;p&gt;We will talk about practices to update to the newest version of Python, and the newest versions of libraries, while avoiding (most) risk. We will cover techniques to introduce static analysis, and better unit testing, to reduce the chance of customer-facing problems. We will also cover how to refactor large mono-repos into manageable pieces using pip, pants and pex. Finally, we will cover how to introduce a microservice architecture gradually, in order to isolate faults.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moshe is a core Twisted contributor, and has contributed to core Python. He has building and deploying web applications since 2001.&lt;/p&gt;
&lt;p&gt;Kurt B. Rose has been developing in Python since 2008 in the areas of web, networking, and security at Samsung, PayPal, and several startups.&lt;/p&gt;
</summary></entry><entry><title>Performant Asynchronous Programming at Quora</title><link href="https://pyvideo.org/pybay-2017/performant-asynchronous-programming-at-quora.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Riley Patterson</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/performant-asynchronous-programming-at-quora.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will discuss the design of Quora's asynq framework, which provides an asynchronous API to a global scheduler for data requests. We will explore in depth the common problem that motivated it, the design of the framework, and how it has been used in practice to make both the product and development faster at Quora.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to provide a fast distributed web application to millions of Quora users, we need to be smart about batching data requests to minimize the time spent blocked on network I/O. Moreover, it's important to accomplish this batching in a general way that doesn't require repetitive work every time we make a change or require new data. In this talk, we will discuss the design of Quora's asynq framework, which provides an asynchronous API to a global scheduler for data requests. We will explore in depth the common problem that motivated it, the design of the framework, and how it has been used in practice to make both the product and development faster at Quora.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Riley Patterson is a software engineering manager on the Platform Frameworks Team at Quora. Our core web application platform is built in Python on top of a web framework that we built on the core of Pylons. As such, the Platform Team uses and builds a wide variety of Python tools and abstractions to enable faster, more effective, and more enjoyable development across the entire team at Quora.&lt;/p&gt;
</summary></entry><entry><title>Predicting Oscar winners &amp; box office hits</title><link href="https://pyvideo.org/pybay-2017/predicting-oscar-winners-box-office-hits.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Deborah Hanus</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/predicting-oscar-winners-box-office-hits.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Jupyter notebooks and scikit-learn, you’ll predict whether a movie is likely to win an Oscar or be a box office hit. Together, we’ll step through the creation of an effective dataset: asking a question your data can answer, writing a web scraper, and answering those questions using nothing but Python libraries and data from the Internet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using Jupyter notebooks and scikit-learn, you’ll predict whether a movie is likely to win an Oscar or be a box office hit. Together, we’ll step through the creation of an effective dataset: asking a question your data can answer, writing a web scraper, and answering those questions using nothing but Python libraries and data from the Internet.&lt;/p&gt;
&lt;p&gt;This talk is for engineers, data scientists, and movie lovers who want to learn how to scrape information from the Internet, and then use python libraries (and some domain knowledge) to answer interesting questions using that data. This presentation could be informative for people with a wide range of skill-levels, but I expect it to be especially useful for anyone getting started with data science, http requests, pandas, and sklearn.&lt;/p&gt;
&lt;p&gt;By the end of this talk, the you should expect to (a) understand how to scrape and manage small to medium data sets, (b) know how to overcome the most common roadblocks (i.e. dealing with timeouts or API keys), (c) understand the tools you need to use and steps you need to take to answer interesting questions in data science, and (d) have access to a great example project in a Jupyter notebook that you can use as a template or extend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deborah is a PhD student, studying machine learning at Harvard University, and she graduated from MIT with a M.Eng. in Electrical Engineering &amp;amp; Computer Science. Her work in machine learning has spanned developing models of human perception to exploring medical data. She has also been awarded the NSF, Fulbright, and ACM/Intel Computational &amp;amp; Data Science Fellowship. She has spoken at PyTennessee, SciPy Conf, AI With the Best, QConNY, and PyCon US.&lt;/p&gt;
</summary></entry><entry><title>Python 1994</title><link href="https://pyvideo.org/pybay-2017/python-1994.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Paul Everitt</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/python-1994.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Come for the language, stay for the community.&amp;quot; The Python community started in 1994 at a NIST workshop in Maryland. What was the world of Python like in its first years? Did we have any clue whatsoever? A joke-focused tour of early Python, heavy on question-and-answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Building open source communities is hard, and while there are best practices and lessons learned to study, sometimes it all seems random. Python became renowned for its community. What was it like in the beginning, and how did it succeed?&lt;/p&gt;
&lt;p&gt;This talk covers the 1994 Python workshop at NIST. I was fortunate to be there, along with twenty-ish others, and was involved in the next number of years of stumbling around purposefully. The stories are funny to pass along, some of the lessons are accidentally valuable, and with a generous question-and-answer period, the session becomes a community chit-chat.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Paul Everitt is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Agendaless Consulting and a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the PSF and the Plone Foundation. Prior to that, Paul was an officer in the US Navy, starting in Python and launching www.navy.mil in 1993.&lt;/p&gt;
</summary></entry><entry><title>Python from Space</title><link href="https://pyvideo.org/pybay-2017/python-from-space.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Katherine Scott</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/python-from-space.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is designed to give you all the tools you will need to go home and start using satellite imagery to make an impact on the world. The talk will cover finding, processing, evaluating and visualizing open satellite data using open source tools written in python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Earth imaging satellites, just like our computers, are shrinking and becoming more ubiquitous than ever before. It is now possible to obtain open satellite data on a daily if not weekly basis and for this data to be put to work; helping us better understand our planet and quickly respond to disaster situations.&lt;/p&gt;
&lt;p&gt;In this talk we will work through a jupyter notebook that covers the satellite data ecosystem and the python tools that can be used to sift through and analyze that data. Topics include python tools for using Open Street Maps data, the Geospatial Data Abstraction Library (GDAL), and OpenCV and NumPy for image processing. This talk is intended for novice and intermediate python developers who are interested in using data science and satellite imagery for social good and fundamental scientific research.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Katherine Scott is the image analytics team lead at Planet Labs. Katherine holds a masters degree in computer science from Columbia University and dual engineering degrees from the University of Michigan. Prior to working at Planet Katherine was a co-founder at Tempo Automation and Sight Machine.&lt;/p&gt;
</summary></entry><entry><title>Rebuilding the Yelp API</title><link href="https://pyvideo.org/pybay-2017/rebuilding-the-yelp-api.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Virginia Tam</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/rebuilding-the-yelp-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to burn down your old code and start all over again? With the Yelp public API (known as the Yelp Fusion API), that’s exactly what we did. In this talk, Virginia Tam, a software engineer at Yelp, will talk about the challenges the team faced building the newest version of the Fusion API and what we learned in the process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will be broken into four parts: the history of Yelp’s public API, how we built the newest version, the challenges we faced, and the current state of the Fusion API.&lt;/p&gt;
&lt;p&gt;The Yelp Fusion API provides non-Yelp developers the ability to query for business information as well as perform business searching. The previous version of this API (known as the v2 API) was first built in 2010. As of the time of this writing, the v2 API has well over 100,000 registered API keys from independent developers as well as partner companies.&lt;/p&gt;
&lt;p&gt;In 2016, the API was in serious need of improvement. Authentication was done using OAuth 1.0, which does not use a secure SSL tunnel and thus employed a tedious handshake of tokens and client secrets between the client and the server. We wanted to move to OAuth 2.0, which uses SSL by default, but introducing these changes would have made authentication backwards incompatible for all existing users.&lt;/p&gt;
&lt;p&gt;There was a strong desire to expose richer Yelp data by creating new endpoints, but because the code lived in a large monolithic codebase shared with several unrelated features, development would be time consuming as existing API code was tangled in legacy code. The existing API had a bulky design that made it difficult to add new data but was also impossible without breaking backwards compatibility.&lt;/p&gt;
&lt;p&gt;We decided to use these shortcomings as an opportunity to re-build the API from the ground up using up-to-date tools and infrastructure available at Yelp. A lot had changed since 2010 -- we have a sophisticated microservices framework that allows us to develop independently of the monolithic codebase. We have new tools that would make building the API easier, provide easy endpoint creation, flexibility in choosing a datastore, and configurability in ecosystem factors such as memory allotment and library versioning. Starting from scratch also allowed us to design things the right way and consolidate a lot of common logic that had been previously duplicated and scattered throughout the codebase.&lt;/p&gt;
&lt;p&gt;Today, we have thousands of registered API keys for our new Fusion API that includes 12 partner companies who have incorporated Yelp data into their applications. We still face ongoing challenges such as the timeline for shutting down the old API and working with partners to help them migrate to the new API. In the future, we plan on expanding the Fusion API to provide even more data and enhance the developer experience with new endpoints to give insight on their API usage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Virginia Tam is a software engineer who spent the beginning of her career in networking and device-level software development and eventually made the lateral move to backend web development. She is currently on the Partnerships team at Yelp where she works with external companies and organizations and builds the infrastructure to support syndicating out Yelp data, ingesting partner data, and building APIs for partners. Virginia also enjoys engaging with the developer community and is a former member of the Santa Clara Valley Society of Women Engineers where she organized several workshops to introduce middle and high school aged girls to STEM careers.&lt;/p&gt;
</summary></entry><entry><title>The Packaging Gradient</title><link href="https://pyvideo.org/pybay-2017/the-packaging-gradient.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/the-packaging-gradient.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping any software can be hard if you don't know what you're getting into. An ergonomic, general-purpose language like Python can get you into complex packaging waters without you noticing. This talk presents a straightforward, example-driven guide to choosing among virtually every method in common use for packaging Python, scaling from wheels to PEX to Docker and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Deployment is not the last step of development. Experienced engineers know to work backwards from deployment requirements, planning and designing for the reality of production environments.&lt;/p&gt;
&lt;p&gt;Python packaging sometimes gets a bad reputation, but a lot of this comes from less experienced engineers learning the hard way that implementation language does not dictate their packaging solutions.&lt;/p&gt;
&lt;p&gt;Packaging is all about target environment and deployment experience. Python was designed to be cross-platform and runs in countless environments. Python's built-in tools can't carry you anywhere you want to go. These days, I can write a mobile app in Python, but obviously people don't use pip to install it. More advanced codebases have to scale their packaging accordingly.&lt;/p&gt;
&lt;p&gt;This talk moves example by example, presenting shippable code, and the simplest packaging solution appropriate for it. All the examples are in Python, but the lessons are absolutely language agnostic. Learn the packaging gradient and put those deployment doubts to rest once and for all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Mahmoud Hashemi is a backend engineer and architect, open-source library maintainer, and Wikipedian. Newly building services and teams at shopkick, for many years, he built scalable enterprise Python services at PayPal, where he wrote technical essays and presented O'Reilly's Enterprise Software with Python. On the Wikipedia side of things, he's known for Listen to Wikipedia, Wikipedia Social Search, the Weeklypedia newsletter, the Wikipedia IFTTT channel, and much much more. He believes education is more than something you receive, and that every coder should be able to see one, do one, then teach one.&lt;/p&gt;
</summary></entry><entry><title>Time Zone Troubles</title><link href="https://pyvideo.org/pybay-2017/time-zone-troubles.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/time-zone-troubles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover how to deal with time zone-related edge cases like daylight savings time, and will provide an understanding of the way python handles time zones. It will go over how to use the time zone classes provided by dateutil.tz and pytz, and the advantages and disadvantages of each.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ambiguous datetimes occur when a time zone's UTC offset moves backwards (such as during a daylight saving time transition), leading to two datetimes with identical &amp;quot;wall time&amp;quot;; their complement, imaginary datetimes are &amp;quot;wall times&amp;quot; that do not exist in a given time zone, because they were skipped over when a time zone's UTC offset moved forward. Python 3.6 introduces a &amp;quot;fold&amp;quot; attribute to allow for disambiguation of local times (PEP495).&lt;/p&gt;
&lt;p&gt;This talk will cover dealing with edge cases related to ambiguous and imaginary datetimes, the different approaches taken by pytz and dateutil, what changes with PEP 495, and some lessons learned from implementing backwards-compatible PEP495-compliant tzinfo classes in the dateutil library.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Paul Ganssle is a software developer at Bloomberg and the maintainer of python-dateutil. He previously was a physical chemist working on low-field NMR.&lt;/p&gt;
</summary></entry><entry><title>Using randomness to make code much faster</title><link href="https://pyvideo.org/pybay-2017/using-randomness-to-make-code-much-faster.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Rachel Thomas</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/using-randomness-to-make-code-much-faster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to randomized linear algebra (a recently developed field with huge implications for scientific computing) in Python with a detailed case study of randomized Singular Value Decomposition (SVD). We will look at the applications of using randomized SVD to find the topics of documents and to identify the background in a surveillance video.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linear algebra lies at the heart of much of data science, including deep learning, regression, and recommendation systems, and is also widely used in engineering, finance, and much more. The basic linear algebra techniques of matrix products and decompositions have super-linear runtimes, and therefore speeding them up is of vital importance. Counter-intuitively, recent advances have shown that the key to doing this is to take advantage of random matrices. We will see how to use random matrices to dramatically speed up the widely used singular value decomposition, a method that is used in least squares regression, PCA, general matrix inverses, and more.&lt;/p&gt;
&lt;p&gt;Attendees will learn how language and video data can be represented as matrices with numpy. I will explain what Singular Value Decomposition (SVD) is conceptually and how randomized SVD gives us a huge improvement in speed. We will see applications in Python of using randomized SVD to find the topics of a group of documents and identify the background in a surveillance video. I will introduce all math concepts needed so there are no prerequisites, although familiarity with data processing will be helpful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rachel Thomas is co-founder of fast.ai, which is making deep learning more accessible, and a researcher-in-residence at University of San Francisco Data Institute. Rachel has a mathematics PhD from Duke and has previously worked as a quant, a data scientist + backend engineer at Uber, and a full-stack software instructor at Hackbright.&lt;/p&gt;
&lt;p&gt;Rachel was selected by Forbes as one of 20 &amp;quot;Incredible Women Advancing A.I. Research.&amp;quot; She co-created the course &amp;quot;Practical Deep Learning for Coders,&amp;quot; which is available for free at course.fast.ai and  more than 50,000 students have started it. Her writing has made the front page of Hacker News 4x, the top 5 list on Medium, and been translated into Chinese, Spanish, &amp;amp; Portuguese. She is on twitter &amp;#64;math_rachel&lt;/p&gt;
</summary></entry><entry><title>Your Django app is a User Interface</title><link href="https://pyvideo.org/pybay-2017/your-django-app-is-a-user-interface.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Flavio Juvenal</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/your-django-app-is-a-user-interface.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Usability heuristics are a useful way to evaluate an interface. An often overlooked aspect of Django apps is they’re interfaces too, one that connects the developer with a reusable solution. In this talk, we’ll learn how to apply usability concepts to Django apps to make them better to (re)use.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Django docs say &amp;quot;Reusability is the way of life in Python. You only need to write the parts that make your project unique&amp;quot;. The Django way to write reusable code is Django apps, which are straightforward to write. The vast quantity of apps available in PyPI and Django Packages proves that.&lt;/p&gt;
&lt;p&gt;However, there is one overlooked aspect of apps: they are an interface between the developer and a reusable solution for a problem. Therefore, as any interface, Usability Heuristics should be used to evaluate Django apps efficacy. In this talk, we'll learn how to apply Usability Heuristics to Django apps to make them better to (re)use.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;p&gt;Unix Philosophy and Django apps concept
Aesthetic and minimalist design
How to design for the 90% use case
Progressive disclosure and Affordance
Docs first
How to write beautiful app code with declarative programming
How to write simple app code by minimizing state
Consistency and Recognition rather than recall
How common Django idioms increase recognition
How existing Django abstractions help increase recognition
How separating concerns with Django abstractions increase recognition
Flexibility and efficiency of use
How making the other 10% use case possible with an extensible granular API
The concept of Integration Discontinuity
How to break Django abstractions to increase extensibility
How a granular API allows composition of apps
Error prevention and recovery
How to use Django system check framework to prevent errors and give tips
How to fail-fast if an error occurs, preventing some unexpected state
djangoappschecklist.com
How the community can help define a good practices checklist&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Web developer from Brazil. Loves beautiful high-quality products, from UX to code, and will defend them against unreasonable deadlines and crazy features. Partner at Vinta (&lt;a class="reference external" href="https://www.vinta.com.br/"&gt;https://www.vinta.com.br/&lt;/a&gt;), a web consultancy specialized in building products with React and Django.&lt;/p&gt;
</summary></entry><entry><title>Best practices on debugging open source library</title><link href="https://pyvideo.org/pybay-2017/best-practices-on-debugging-open-source-library.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Jouella Fabe</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/best-practices-on-debugging-open-source-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How not to fall into a rabbit hole when debugging mysterious bugs in a large open source library.&lt;/p&gt;
&lt;p&gt;Almost everyone uses some open source library, but when that library fails to do what you want - i.e. decoding only 2 pages out of a 4 page pdf file or it just straight up raises an exception.&lt;/p&gt;
&lt;p&gt;Many would dive deep into the code. In this talk, I will try to convince you &lt;em&gt;not to do that&lt;/em&gt; by sharing my anecdotal experiences such as finding an elusive unicode character encoding difference between two popular OS's from a large open source project.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Calculating the Epicenter of an Earthquake with Python</title><link href="https://pyvideo.org/pybay-2017/calculating-the-epicenter-of-an-earthquake-with-python.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Gabrielle Simard-Moore</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/calculating-the-epicenter-of-an-earthquake-with-python.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Dangers of Django</title><link href="https://pyvideo.org/pybay-2017/dangers-of-django.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Alex Becker</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/dangers-of-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's data integrity pitfalls and how to avoid them&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Deep Learning for Conservation</title><link href="https://pyvideo.org/pybay-2017/deep-learning-for-conservation.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Alex Shepard</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/deep-learning-for-conservation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;iNaturalist recently integrated computer vision into their apps, providing automatic species suggestions based on visual and spatio-temporal data (i.e. where things have been found before). This is a presentation on how the app works, how it was built (TensorFlow + inception + our dataset), and challenges encountered when integrating deep learning into the expert community of scientists and trained naturalists.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Effective retry techniques for working with 3rd party APIs</title><link href="https://pyvideo.org/pybay-2017/effective-retry-techniques-for-working-with-3rd-party-apis.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Fabio Fleitas</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/effective-retry-techniques-for-working-with-3rd-party-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Best practices for using the popular retrying package (&lt;a class="reference external" href="https://github.com/jd/tenacity"&gt;https://github.com/jd/tenacity&lt;/a&gt;) to handle retry logic with 3rd party APIs.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Emulating Lazy Evaluation</title><link href="https://pyvideo.org/pybay-2017/emulating-lazy-evaluation.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Henry Chen</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/emulating-lazy-evaluation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python does not support lazy evaluation, so lets make Python do lazy evaluation. It's fun and gives us an excuse to do some metaprogramming.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Fun IoT with MicroPython</title><link href="https://pyvideo.org/pybay-2017/fun-iot-with-micropython.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Daniel Mizyrycki</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/fun-iot-with-micropython.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Growing an Open Source Community from 1 to 300</title><link href="https://pyvideo.org/pybay-2017/growing-an-open-source-community-from-1-to-300.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Rishi Gupta</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/growing-an-open-source-community-from-1-to-300.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zulip is an open source alternative to Slack, optimized for productivity. The Zulip project has grown from 1 to 300 contributors in about 18 months, with more commits merged per week than Docker and Django combined. Rich Gupta presents specific, reusable techniques used to build an open source project and make the community successful.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Introduction to PDB</title><link href="https://pyvideo.org/pybay-2017/introduction-to-pdb.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Peter Hadlaw</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/introduction-to-pdb.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Lost Federal Technical Reports</title><link href="https://pyvideo.org/pybay-2017/lost-federal-technical-reports.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Robert Bolin</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/lost-federal-technical-reports.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Robert L. Bolin has discovered 100K Federal Technical reports that are not digitized and not indexed online. He proposes using Python to deconstruct and parse the PDF version of the index and create a modern library index giving people intellectual access to those reports.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Magic Wormhole</title><link href="https://pyvideo.org/pybay-2017/magic-wormhole.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Brian Warner</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/magic-wormhole.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Magic Wormhole is the easiest way to send files and directories securely from one computer to another. The talk (briefly) covers the cryptographic algorithms it uses and how it improves on other tools.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Panel Discussion: What is Static Typing in Python?</title><link href="https://pyvideo.org/pybay-2017/panel-discussion-what-is-static-typing-in-python.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/panel-discussion-what-is-static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This panel discussion was MC by Daniel Pyrathon and held as part of the opening night at PyBay, SF Bay Area's regional Python Conference, on Friday, August 11, 2017.  For more information on PyBay, visit &lt;a class="reference external" href="https://pybay.com"&gt;https://pybay.com&lt;/a&gt;, subscribe to be notified of upcoming conferences.&lt;/p&gt;
&lt;p&gt;What is static typing in Python?&lt;/p&gt;
&lt;p&gt;Python added support for annotation as part of function definitions with PEP 3107. PEP 484 later provided a standard syntax for type annotations, bringing static analysis, runtime type checking, and faster refactoring to Python. Since Python is a dynamic programming language, type hints don’t have any influence at runtime, but they allow certain tools to save time with fewer bugs. For example, IDEs such as PyCharm are able to perform safer refactoring, and static analysis tools such as Mypy can perform further type checks during build phases.&lt;/p&gt;
&lt;p&gt;So far, static typing has been adopted by some renowned open source projects such as Zulip and is used at companies such as Google, Instagram, Lyft, and Quora.&lt;/p&gt;
&lt;p&gt;What will we be speaking about during this panel?&lt;/p&gt;
&lt;p&gt;We’ll be making this panel discussion accessible to everyone, so expect the panel to start with an introduction to static typing and then go deeper into best practices, support, and experience from open source project maintainers and companies. Since this feature has been a topic of substantial debate in the community, we’ll be discussing not only the pros but also the cons of this feature. Indeed, there are situations where type hinting may do more harm than good, and our panelists will be sharing with us their words of advice on this topic.&lt;/p&gt;
&lt;p&gt;Why might this panel discussion be interesting to you?&lt;/p&gt;
&lt;p&gt;Type hints are one of the new additions to the Python syntax may drastically increase the speed at which you program. Beginners will learn more about where the language development is heading.
Open source project maintainers and contributors will learn the tooling, support, and best “getting started” advice from our expert panelists.&lt;/p&gt;
&lt;p&gt;Project managers, CTOs, and engineers will learn how type hints can make their team more productive. We know companies spend a huge amount of money recruiting and sourcing engineers, and I’m sure they would do everything possible to make their onboarding experience more enjoyable, easier and faster since employees can expect to be more productive with an annotated codebase.
This panel will not only help developers learn more about static typing, but also help identify areas where static type checking isn’t doing a good job, and learn how we can all improve it together.&lt;/p&gt;
&lt;p&gt;Our panelists
And now for the part that I’m most proud of, our list of panelists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Łukasz Langa&lt;/p&gt;
&lt;p&gt;Łukasz is one of the PEP484 authors, a Python core developer, and currently a Production Engineer at Facebook. Łukasz has also been using mypy at work and I imagine has also been part of the latest push to port Instagram’s code base to Python 3! Łukasz is a long-time Python contributor, was a mentor for the Python Software Foundation for Google Summer of Code, and has spoken about Python around the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;Jelle is a Staff Engineer at Quora, where he works on infrastructure, internationalization, development tools, and ML infrastructure. He’s a contributor to mypy and has also used mypy at Quora. Jelle will offer his perspective on advocating for static type checking at a great engineering organization like Quora and will also be talking about typeshed, a project that hosts type stubs for the standard library and major third-party libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ethan Smith&lt;/p&gt;
&lt;p&gt;Ethan has been involved with mypy for a while and has been working on typical, a project that uses the frame evaluation API (PEP 523) to dynamically generate stubs. While Ethan is still in college, he has been doing some amazing work to improve the support of type hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Andrey Vlasovskikh&lt;/p&gt;
&lt;p&gt;Andrey is the PyCharm community lead and maintainer of IdeaVim. PyCharm is used by many Python developers and its support for type checking “out of the box” makes it easy for developers to adopt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Matthias Kramm&lt;/p&gt;
&lt;p&gt;Matthias is the author of pytype, one of the maintainers of typeshed, and has been working on Python static analysis tools for Google. Pytype is used in a few hundred projects at Google, including YouTube! Matthias will give us great insight into adopting type checking “at scale”!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="panel"></category><category term="static-typing"></category></entry><entry><title>Predict timeline - Generating Agile SW metrics w/ Python</title><link href="https://pyvideo.org/pybay-2017/predict-timeline-generating-agile-sw-metrics-w-python.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Meenal Pant</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/predict-timeline-generating-agile-sw-metrics-w-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agile methodology is mostly used by project management and software teams for creating a predictable software release timeline. Agile output is measured in form of sprint metrics such as burndown chart, cumulative velocity etc . Usually commercial project management tools provide user stories management and metrics out of the box. Many organizations do not have these expensive tools due to costs and budget or historical choices. This talk describes how daily agile metrics can be generated using Python for any reasonable project management tool that has an Agile template and a webservices API.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Python Package Management with pip-tools</title><link href="https://pyvideo.org/pybay-2017/python-package-management-with-pip-tools.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Fabio Fleitas</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/python-package-management-with-pip-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to use pip-tools (&lt;a class="reference external" href="https://github.com/jazzband/pip-tools"&gt;https://github.com/jazzband/pip-tools&lt;/a&gt;) to better manage Python requirement files&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>STDIO Game Jam</title><link href="https://pyvideo.org/pybay-2017/stdio-game-jam.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Al Sweigart</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/stdio-game-jam.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Oakland's video game museum will host a hackathon to create small, complete game programs that beginners can read. These text-based games only use stdio, so they're easy for beginners to read.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Taking the __magic__ out of Python classes</title><link href="https://pyvideo.org/pybay-2017/taking-the-__magic__-out-of-python-classes.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Henry Chen</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/taking-the-__magic__-out-of-python-classes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A peek into the internals of Python classes. Including the world's quickest introduction to metaclasses.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry></feed>