<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-marshall.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-19T00:00:00+00:00</updated><entry><title>A Brief History of Coroutines in Python</title><link href="https://pyvideo.org/pytexas-2017/a-brief-history-of-coroutines-in-python.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Josh Marshall</name></author><id>tag:pyvideo.org,2017-11-19:pytexas-2017/a-brief-history-of-coroutines-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With Python 3.6, coroutines became an core part of the Python language with async and await keywords, but cooperative multitasking had a rich history long before then. This talk walks through iterators, generators, generator delegation, “true” coroutines via async / await, and lots of sample code!&lt;/p&gt;
</summary></entry><entry><title>Asynchronous Web Development with Tornado</title><link href="https://pyvideo.org/pytexas-2011/asynchronous-web-development-with-tornado.html" rel="alternate"></link><published>2011-09-10T00:00:00+00:00</published><updated>2011-09-10T00:00:00+00:00</updated><author><name>Josh Marshall</name></author><id>tag:pyvideo.org,2011-09-10:pytexas-2011/asynchronous-web-development-with-tornado.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An introduction to non-blocking web development with Tornado, an
open-source server and simple framework from Facebook/FriendFeed.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web frameworks like Django, Flask, etc. are great for most traditional
web sites. However, there is a growing need to produce web applications
that are responsive to external &amp;quot;events&amp;quot;, whether a response from
Twitter's API or a new message in an online chat room. Newer,
non-blocking frameworks like Tornado seek to address this in a scalable
manner.&lt;/p&gt;
&lt;p&gt;This talk will briefly introduce non-blocking principles and patterns,
and move quickly into an overview of the library, as well as use cases
and anti- use cases. A portion of the time will also be spent pointing
out community libraries that are building on Tornado's foundation.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction&lt;ol class="arabic"&gt;
&lt;li&gt;Why another framework?&lt;/li&gt;
&lt;li&gt;Intro to Asynchronous Design&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Overview of a Tornado project&lt;ol class="arabic"&gt;
&lt;li&gt;Application&lt;/li&gt;
&lt;li&gt;Basic (blocking) Request Handlers&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Asynchronous Handlers&lt;/li&gt;
&lt;li&gt;To block or not to block&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Batteries included&lt;ol class="arabic"&gt;
&lt;li&gt;Auth module&lt;/li&gt;
&lt;li&gt;Options module&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;UIModules&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Community&lt;ol class="arabic"&gt;
&lt;li&gt;Tornad.io&lt;/li&gt;
&lt;li&gt;No-SQL libraries&lt;/li&gt;
&lt;li&gt;Twisted integration&lt;/li&gt;
&lt;li&gt;Torn Admin&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ol&gt;
</summary></entry></feed>