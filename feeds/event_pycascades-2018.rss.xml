<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 23 Jan 2018 00:00:00 +0000</lastBuildDate><item><title>Can you please pass the data? IoT communication with MicroPython</title><link>https://pyvideo.org/pycascades-2018/can-you-please-pass-the-data-iot-communication-with-micropython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come learn a bit about Micropython, a specialized version of Python for micro controllers, and how you can use it to pass messages among IoT devices. Using the concepts and code presented this talk will include a live demo of a connected temperature sensor (somewhat like the NEST). Beginner friendly!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sev Leonard</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/can-you-please-pass-the-data-iot-communication-with-micropython.html</guid><category>iot</category><category>micropython</category></item><item><title>Character Encoding and You�</title><link>https://pyvideo.org/pycascades-2018/character-encoding-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why does your text output have all those black boxes in it? Why can't it handle Portuguese? The answer is most likely &amp;quot;character encoding&amp;quot;. This talk will cover some of the common character encoding gotchas and cover some defensive programming practices to help your code handle multiple encodings.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rachael Tatman</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/character-encoding-and-you.html</guid><category>encoding</category><category>utf-8</category></item><item><title>Python for Feature Film</title><link>https://pyvideo.org/pycascades-2018/python-for-feature-film.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will go over how Python has become an integral part of making movies around the world. I'll also go over what the steps of creating an animated movie are, and how Python is used by a few of those.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dhruv Govil</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/python-for-feature-film.html</guid></item><item><title>Python &amp; Spreadsheets: Canadian Edition</title><link>https://pyvideo.org/pycascades-2018/python-spreadsheets-canadian-edition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Spreadsheets are often used to share interesting and important data. I'll show you how to use OpenPyXL to work with that data in a way that's better than using .csv files. I'll also discuss common problems in working with spreadsheets via code. I first spoke on this in 2013, thus the title.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/python-spreadsheets-canadian-edition.html</guid><category>openpyxl</category></item><item><title>Shipping secret messages through barcodes</title><link>https://pyvideo.org/pycascades-2018/shipping-secret-messages-through-barcodes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered what those seemingly arbitrary black and white lines on your package mean? Encoding information in plain sight is an art form and barcodes lend themselves to go about it completely unnoticed. Let's take a deep dive into printing barcodes and shipping labels using Python!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Karina Ruzinov</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/shipping-secret-messages-through-barcodes.html</guid></item><item><title>Taming the Hydra: How we Learned to Love Testing a Giant Python Codebase</title><link>https://pyvideo.org/pycascades-2018/taming-the-hydra-how-we-learned-to-love-testing-a-giant-python-codebase.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, the largest python project at Zillow was a multi-headed hydra of testing complexity, with hundreds of test cases that took longer to maintain than the code itself. Now, we've done a complete 180. Come learn about the patterns we used on 1000 tests to make them a joy to maintain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yusuke Tsutsumi</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/taming-the-hydra-how-we-learned-to-love-testing-a-giant-python-codebase.html</guid></item><item><title>Those Who Care, Teach!</title><link>https://pyvideo.org/pycascades-2018/those-who-care-teach.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nothing's better than helping someone learn a concept: regex, build tools, or running their first script ever! Unfortunately, teaching is hard! For many, going beyond show-and-tell is just too intimidating. I'll teach you tips, tricks, &amp;amp; tools I've learned teaching Python to thousands of people.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Love</dc:creator><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-23:pycascades-2018/those-who-care-teach.html</guid><category>teaching python</category></item><item><title>A Web App in Four Frameworks</title><link>https://pyvideo.org/pycascades-2018/a-web-app-in-four-frameworks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we take a tour of some Python web frameworks through the lens of an API for the same web application: a simple To Do list. We'll see how the same problems are handled across Django, Flask, Pyramid, and Tornado, and why you might choose one over the rest.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Hunt-Walker</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/a-web-app-in-four-frameworks.html</guid><category>framework</category><category>Django</category><category>Flask</category><category>Pyramid</category><category>Tornado</category></item><item><title>Bad Accessibility Happens – That Doesn’t Have to Be The End</title><link>https://pyvideo.org/pycascades-2018/bad-accessibility-happens-that-doesnt-have-to-be-the-end.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avoidance is not the answer—bad accessibility will still be there, losing you users and creating bad will. We’ll go through examples of what not to do and how to fix problems. We’ll also talk about compromises that can be made to appease stakeholders and others.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lindsey Dragun</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/bad-accessibility-happens-that-doesnt-have-to-be-the-end.html</guid><category>accessibility</category></item><item><title>BDFL Python 3 retrospective</title><link>https://pyvideo.org/pycascades-2018/bdfl-python-3-retrospective.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various topics of retrospective on Python 3. What is working, what failed, what is still a work in progress as the language evolves?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/bdfl-python-3-retrospective.html</guid><category>bdfl</category></item><item><title>Can I Use that Code? Software Licences as a User</title><link>https://pyvideo.org/pycascades-2018/can-i-use-that-code-software-licences-as-a-user.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You found some code on the internet that solves the exact problem you’re having! Great! But can you use it? What licence does it have? I’ll discuss categories of software licences, a few representative software licences, and how they interact with each other and with proprietary code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holly Becker</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/can-i-use-that-code-software-licences-as-a-user.html</guid></item><item><title>Gradual Typing of Production Applications</title><link>https://pyvideo.org/pycascades-2018/gradual-typing-of-production-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thanks to Python's dynamism and brevity, it's easy to start a project. But how do you keep it maintainable and easy to understand as it grows? Come learn how annotating it with types makes your program better for human readers and more robust during execution. No Haskell experience required!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/gradual-typing-of-production-applications.html</guid></item><item><title>It's a Kind of Magic</title><link>https://pyvideo.org/pycascades-2018/its-a-kind-of-magic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever since I started using Python, I've used tools such as SQLalchemy, Django's ORM, and Google App Engine's NDB . They all seem to use (or perhaps abuse) a strange bit of syntactical sugar that Python provides... it's a kind of magic (methods)!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Denny</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/its-a-kind-of-magic.html</guid></item><item><title>Navigating unconscious bias</title><link>https://pyvideo.org/pycascades-2018/navigating-unconscious-bias.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most people don’t want to be racist, sexist, or prejudiced in general. Yet many of us are unconsciously biased against fellow Pythonistas whom we consciously respect. I'll share evidence-based, positive tools for dealing with biased situations, whether you're the target, the speaker, or a bystander.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Schneider</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/navigating-unconscious-bias.html</guid></item><item><title>Python is not Java or C++</title><link>https://pyvideo.org/pycascades-2018/python-is-not-java-or-c.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python was the first programming language I learned deeply, but I work with a lot of people who learned Java or C++ first instead. By knowing how these languages do things differently we can better support our colleagues who are learning Python as a secondary programming language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Ballinger</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/python-is-not-java-or-c.html</guid></item><item><title>Racial Bias in Facial Recognition Software</title><link>https://pyvideo.org/pycascades-2018/racial-bias-in-facial-recognition-software.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover the basics of facial recognition and the importance of having diverse datasets when building out a model. We’ll explore racial bias in datasets using real world examples and cover a use case for developing an OpenFace model for a celebrity look-a-like app.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephanie Kim</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/racial-bias-in-facial-recognition-software.html</guid></item><item><title>Setting Expectations for Open Source Participation</title><link>https://pyvideo.org/pycascades-2018/setting-expectations-for-open-source-participation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Burn-out is common in open source due to a misunderstanding of what users, contributors, and maintainers should expect from each other. This talk will set out to help everyone set reasonable expectations of each other in order to make open source pleasant for everyone involved.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/setting-expectations-for-open-source-participation.html</guid><category>community</category></item><item><title>The AST and Me</title><link>https://pyvideo.org/pycascades-2018/the-ast-and-me.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Get under the hood and learn about Python's beloved Abstract Syntax Tree. We'll discuss the AST's role in Python's compilation process, how it affects Bytecode, and how you can use it's optimizations to improve your code's speed at runtime. Write better code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Emily Morehouse-Valcarcel</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/the-ast-and-me.html</guid><category>ast</category></item></channel></rss>