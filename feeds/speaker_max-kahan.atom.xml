<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Max Kahan</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_max-kahan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-09-24T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Fear the Mutants. Love the Mutants</title><link href="https://pyvideo.org/pycascades-2023/fear-the-mutants-love-the-mutants.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Max Kahan</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/fear-the-mutants-love-the-mutants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage is a great metric - how much of your code is actually tested by your unit tests. However, this doesn’t tell you how good your tests actually are at picking up changes to your codebase - if your tests aren’t well thought-out, it’s possible for changes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage is a great metric - how much of your code is actually tested by your unit tests. However, this doesn’t tell you how good your tests actually are at picking up changes to your codebase - if your tests aren’t well thought-out, it’s possible for changes to get past your unit tests but break production.&lt;/p&gt;
&lt;p&gt;Mutation testing is a great (and massively underrated) way to understand how valuable your tests are. Mutation score quantifies how much trust you should put in your tests to stop mutant versions of your code escaping from your lab and wreaking havoc in production. In this talk, I’ll show you examples of how to get started with mutation testing and how to integrate it into your CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;After the session, you’ll be ready to use mutation testing with wild abandon and you'll be ready to integrate it into your release engineering process, testing your mutant code without needing to set foot in the lab at all!&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Fear the mutants. Love the mutants.</title><link href="https://pyvideo.org/pycon-fr-2023/fear-the-mutants-love-the-mutants.html" rel="alternate"></link><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><author><name>Max Kahan</name></author><id>tag:pyvideo.org,2023-02-18:/pycon-fr-2023/fear-the-mutants-love-the-mutants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage (the percentage of your code tested by your tests) is a great metric. However, coverage doesn’t tell you how good your tests are at picking up changes to your codebase - if your tests aren’t well-designed, changes can pass your unit tests but break production. And …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code coverage (the percentage of your code tested by your tests) is a great metric. However, coverage doesn’t tell you how good your tests are at picking up changes to your codebase - if your tests aren’t well-designed, changes can pass your unit tests but break production. And what better way to explain this than with penguins?&lt;/p&gt;
&lt;p&gt;Mutation testing is a great (and massively underrated) way to quantify how much you can trust your tests. Mutation tests work by changing your code in subtle ways, then applying your unit tests to these new, &amp;quot;mutant&amp;quot; versions of your code. If your tests fail, great! If they pass… that’s a change that might cause a bug in production.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll show you how to get started with mutation testing and how to integrate it into your CI/CD pipeline. After the session, you’ll be ready to use mutation testing with wild abandon. Soon, catching mutant code will be a routine part of your release engineering process, and you'll never look at penguins the same way again!&lt;/p&gt;
</content><category term="PyCon FR 2023"></category></entry><entry><title>pip install malware</title><link href="https://pyvideo.org/pycon-fr-2023/pip-install-malware.html" rel="alternate"></link><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><author><name>Max Kahan</name></author><id>tag:pyvideo.org,2023-02-18:/pycon-fr-2023/pip-install-malware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip install malware: it’s that easy. Almost all projects depend on external packages, but did you know how easy it can be to install something nasty instead of the dependency you want? I'll be showing this live, as I make malware and infect my own computer with it …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pip install malware: it’s that easy. Almost all projects depend on external packages, but did you know how easy it can be to install something nasty instead of the dependency you want? I'll be showing this live, as I make malware and infect my own computer with it during the talk!&lt;/p&gt;
&lt;p&gt;You might remember classic typosquatting examples like goggle.com, but it’s now common to see malicious code hidden in spoofed or otherwise fraudulent PyPI packages or nested dependencies. Malware developers can also use techniques like starjacking to appear legitimate, so these unpleasant packages become even more difficult to spot. It’s estimated that over 3% of packages on PyPI could be using this technique.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you’ll know how to protect yourself when installing and updating dependencies and you’ll leave with a checklist to follow to help you stay safe in future.&lt;/p&gt;
</content><category term="PyCon FR 2023"></category></entry><entry><title>Fear the mutants. Love the mutants.</title><link href="https://pyvideo.org/pycon-uk-2023/fear-the-mutants-love-the-mutants.html" rel="alternate"></link><published>2023-09-24T00:00:00+00:00</published><updated>2023-09-24T00:00:00+00:00</updated><author><name>Max Kahan</name></author><id>tag:pyvideo.org,2023-09-24:/pycon-uk-2023/fear-the-mutants-love-the-mutants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developers often use code coverage as a target, which makes it a bad measure of test quality. Mutation testing changes the game and fixes the problem.&lt;/p&gt;
&lt;p&gt;Come and learn to use it in your CI/CD process. I promise, you'll never look at penguins the same way again!&lt;/p&gt;
&lt;p&gt;Code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developers often use code coverage as a target, which makes it a bad measure of test quality. Mutation testing changes the game and fixes the problem.&lt;/p&gt;
&lt;p&gt;Come and learn to use it in your CI/CD process. I promise, you'll never look at penguins the same way again!&lt;/p&gt;
&lt;p&gt;Code coverage (the percentage of your code tested by your tests) is a great metric. However, coverage doesn’t tell you how good your tests are at picking up changes to your codebase - if your tests aren’t well-designed, changes can pass your unit tests but break production.&lt;/p&gt;
&lt;p&gt;Mutation testing is a great (and massively underrated) way to quantify how much you can trust your tests. Mutation tests work by changing your code in subtle ways, then applying your unit tests to these new, &amp;quot;mutant&amp;quot; versions of your code. If your tests fail, great! If they pass… that’s a change that might cause a bug in production.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll show you how to get started with mutation testing and how to integrate it into your CI/CD pipeline. After the session, you’ll be ready to use mutation testing with wild abandon. Soon, catching mutant code will be a routine part of your release engineering process, and you’ll never look at penguins the same way again!&lt;/p&gt;
</content><category term="PyCon UK 2023"></category></entry></feed>