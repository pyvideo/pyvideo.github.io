<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_daniel-kirsch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-05-31T00:00:00+00:00</updated><entry><title>Functional Programming in Python</title><link href="https://pyvideo.org/pydata-berlin-2016/functional-programming-in-python.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Daniel Kirsch</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/functional-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it. And that is functional - at least in my opinion. I'm working with Python for a living since two years after coming from a background in Ruby, Haskell, Clojure, and some more languages. Since then I have tried to marry ideomatic Python to the functional style I learned to love. It's time to share my experience.&lt;/p&gt;
&lt;p&gt;I will talk about&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;higher order functions&lt;/li&gt;
&lt;li&gt;partial function application and currying&lt;/li&gt;
&lt;li&gt;function composition&lt;/li&gt;
&lt;li&gt;functional collection transformations (and why they are relevant for PySpark)&lt;/li&gt;
&lt;li&gt;(fake) lazy evaluation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and how it all relates to Python (and what's missing).&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://github.com/kirel/functional-python"&gt;https://github.com/kirel/functional-python&lt;/a&gt;&lt;/p&gt;
</summary><category term="functional"></category></entry></feed>