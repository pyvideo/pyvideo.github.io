<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Parallel Programming with (Py)OpenCL for Fun and Profit</title><link>https://pyvideo.org/pycon-za-2018/parallel-programming-with-pyopencl-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;It's never been easier to use all manner of interesting computing
devices such as multicore CPUs, GPUs and FPGAs using
&lt;a class="reference external" href="https://www.khronos.org/opencl/"&gt;OpenCL&lt;/a&gt;, an open heterogeneous
computing standard, supported by major hardware vendors:
&lt;a class="reference external" href="https://software.intel.com/en-us/articles/opencl-drivers"&gt;Intel&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.nvidia.com/opencl"&gt;NVIDIA&lt;/a&gt;,
&lt;a class="reference external" href="https://www.amd.com/en-%20us/solutions/professional/hpc/opencl"&gt;AMD&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.arm.com/graphics/resources/tutorials/opencl-%20tutorials"&gt;ARM&lt;/a&gt;,
etc. And it's never been easier to use OpenCL via the excellent Python
bindings, &lt;a class="reference external" href="https://documen.tician.de/pyopencl/"&gt;PyOpenCL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce the basics of the OpenCL programming and
runtime APIs, using examples run in Jupyter notebooks on a variety of
devices. I will also help identify the situations where it makes sense
to accelerate portions of a codebase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience"&gt;
&lt;h4&gt;Audience&lt;/h4&gt;
&lt;p&gt;This talk is aimed at anyone who loves the expressiveness of Python, but
has bumped into its performance limitations. I assume no background in
HPC and/or heterogeneous computing, and will be using simple, yet
hopefully relevant examples such as fundamental linear algebra and
analysis applications.&lt;/p&gt;
&lt;p&gt;By the end of the talk, provided it isn't a post-lunch slot, the
audience should be ready to identify the hotspots in their code, and
start accelerating using the CPUs, GPUs and FPGAs in their laptops and
favourite public clouds such as AWS, Azure and GCE.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gordon Inggs</dc:creator><pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-12:pycon-za-2018/parallel-programming-with-pyopencl-for-fun-and-profit.html</guid></item></channel></rss>