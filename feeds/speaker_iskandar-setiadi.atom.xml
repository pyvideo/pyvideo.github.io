<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_iskandar-setiadi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-17T00:00:00+00:00</updated><entry><title>Python Website is Slow? Think Again!</title><link href="https://pyvideo.org/pycon-jp-2019/python-website-is-slow-think-again.html" rel="alternate"></link><published>2019-09-17T00:00:00+00:00</published><updated>2019-09-17T00:00:00+00:00</updated><author><name>Iskandar Setiadi</name></author><id>tag:pyvideo.org,2019-09-17:pycon-jp-2019/python-website-is-slow-think-again.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;02-202_Python Website is Slow? Think Again!(Iskandar Setiadi)&lt;/p&gt;
</summary></entry><entry><title>Python Website is Slow? Think Again!</title><link href="https://pyvideo.org/pycon-italia-2019/python-website-is-slow-think-again.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Iskandar Setiadi</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/python-website-is-slow-think-again.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a Python avid user, we read a lot of articles that describe Python as
a slow, interpreted language. At a certain point, some people start to
blame the language itself for performance problems and consider to
migrate their codebase to other languages. However, the success story of
Instagram in handling four hundred million users has shown us that
Python is not the bottleneck, but our codebase is.&lt;/p&gt;
&lt;p&gt;In this talk, the speaker will share a tale of improving Python website
performances in medium-sized enterprise (serving million users) that Iâ€™m
currently working at. In a year, we finally achieved speed improvement
from the average response time of 400 ms to 150 ms per request and we
could save around $100k per year in AWS EC2 instance provisioning, which
is around 60% of total cost.&lt;/p&gt;
&lt;p&gt;Several key points that we have learned from our development process
includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tracking database queries with Python decorator will reduce number of
unnecessary queries&lt;/li&gt;
&lt;li&gt;Using an async framework does not guarantee your codebase is
implementing it correctly&lt;/li&gt;
&lt;li&gt;Default configured third-party library is not always suitable for all
use cases&lt;/li&gt;
&lt;li&gt;Utilizing memory profiler and pdb properly will help you in
pinpointing application bottleneck&lt;/li&gt;
&lt;li&gt;Python for-loops vs generators&lt;/li&gt;
&lt;li&gt;And several other common pitfalls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expected level of audience: This talk is mainly targeted for beginner to
intermediate web developer who are interested in improving the cost-
performance of their web applications. After listening to this talk, the
audiences are expected to understand that good coding practices (e.g.:
implement asyncio correctly, track number of DB queries with decorators,
etc) will make their web application a lot faster and cut down
operational costs by a large margin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1592"&gt;https://python.it/feedback-1592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="tornado"></category><category term="best-practices"></category><category term="aws"></category><category term="web-development"></category><category term="web"></category></entry><entry><title>Deep Learning in Python: Image Recognition for Anime Characters</title><link href="https://pyvideo.org/pycon-hk-2018/deep-learning-in-python-image-recognition-for-anime-characters.html" rel="alternate"></link><published>2018-11-23T00:00:00+00:00</published><updated>2018-11-23T00:00:00+00:00</updated><author><name>Iskandar Setiadi</name></author><id>tag:pyvideo.org,2018-11-23:pycon-hk-2018/deep-learning-in-python-image-recognition-for-anime-characters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deep learning is a booming machine-learning technique which we often
read in a lot of articles nowadays. Deep learning sounds like an
intimidating concept for a lot of people, but everyone believes that
deep learning is a cutting- edge tool to solve a lot of problems. In
this talk, we will see how Python and various open-source tools are very
easy to use and very powerful for solving deep learning problems. For
the study case, we will have a 30-minute journey in revisiting image
recognition problem with anime characters.&lt;/p&gt;
&lt;p&gt;I will briefly explain how traditional machine learning works with
TensorFlow and introduces some alternatives tools out there. After that,
we will see how deep learning enhances our knowledge in the traditional
machine learning and how we can get more benefits from it. All of these
examples will be presented in the context of image recognition problem,
and while on it, we will also see the use cases of other tools, such as
OpenCV, OpenFace, etc.&lt;/p&gt;
&lt;p&gt;In the main part of the talk, we will see that images of anime
characters are limited by nature, since it totally depends on number of
existing fan arts. In addition, 3D model (human face) cannot be applied
directly in solving this problem since 2D model (anime character face)
totally depends on the illustrator. Therefore, we will explore how we
can utilize transfer learning for model training with small amount of
dataset. Finally, we will build our own simple app with Sanic to serve
our ready-built model for other users.&lt;/p&gt;
&lt;p&gt;This talk will introduce the concept of deep learning, transfer
learning, and how we can apply it to our own existing problems. In
addition, we will present some alternative PaaS as a comparison to build
a model from scratch.&lt;/p&gt;
</summary></entry></feed>