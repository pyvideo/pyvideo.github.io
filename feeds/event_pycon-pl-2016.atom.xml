<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-pl-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-15T00:00:00+00:00</updated><entry><title>An introduction to reporting databases</title><link href="https://pyvideo.org/pycon-pl-2016/an-introduction-to-reporting-databases.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Lennart Regebro</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/an-introduction-to-reporting-databases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explains what a reporting database is, and why, when and how
you should use it.&lt;/p&gt;
</summary></entry><entry><title>Async pod maską</title><link href="https://pyvideo.org/pycon-pl-2016/async-pod-maska.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Michał 'Khorne' Lowas-Rzechonek</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/async-pod-maska.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jak naprawdę działa programowanie asynchroniczne? Prezentacja dla
Pythonistów którzy nie boją się C.&lt;/p&gt;
</summary></entry><entry><title>Building a solid foundation for Ukrainian NLP with Python</title><link href="https://pyvideo.org/pycon-pl-2016/building-a-solid-foundation-for-ukrainian-nlp-with-python.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Dmitry Chaplinsky</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/building-a-solid-foundation-for-ukrainian-nlp-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Propozycja tego, jak można tworzyć mikroserwisy w Pythonie zakładając
pisanie testów najpierw, a dopiero potem właściwego kodu. Na każdym
etapie pracy. Żadne pseudo-TDD.Skupię się na testach funkcjonalnych
badających całych proces aplikacji z zewnątrz (pomogą w tym Docker i
Pytest) oraz testach kontraktowych pilnujących, że nikt w trakcie
developmentu nie zmienił zewnętrznych interfejsów naszej aplikacji. W
drugim przypadku wykorzystany będzie Swagger.Przykłady nie będą polegać
na silnej integracji z żadnym webowym frameworkiem. Poruszę też kwestię
mierzenia pokrycia testowego w nieco bardziej skomplikowanych
przypadkach (jak testy funkcjonalne).&lt;/p&gt;
</summary></entry><entry><title>Chaos Monkey … czyli “małpy robią małpie figle”</title><link href="https://pyvideo.org/pycon-pl-2016/chaos-monkey-czyli-malpy-robia-malpie-figle.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Tomasz Prus</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/chaos-monkey-czyli-malpy-robia-malpie-figle.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Co się stanie jeśli w Twojej serwerowni zamieszka małpa ? Pewnie
wiszące kable, kolorowe guziki i migające lampki sprawią jej wiele
radości … ale jeśli Twoje systemy będą wstanie pracować niezawodnie w
takiej sytuacji to możesz z całą pewnością stwierdzić, że jesteś
odporny na awarie. Do takiego wniosku doszedł Netflix proponując
koncepcje “Chaos Monkey”. Specjalny mechanizm ma za zadanie generować
awarie i tym sposobem testować niezawodność i odporność systemów.&lt;/div&gt;
&lt;div class="line"&gt;Ja opowiem o naszych doświadczeniach i lekcjach z implementacji tego
mechanizmu w prywatnej chmurze w DreamLab.&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Clean application architecture</title><link href="https://pyvideo.org/pycon-pl-2016/clean-application-architecture.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Ignacy Sokołowski</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/clean-application-architecture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, we don't talk much about design and architecture. Instead, we
focus on frameworks and libraries. We let them define the architecture
of our applications and leak into the business logic and tests. Rather
than putting them aside, we couple to them so much that when we decide
to change them, we need to rewrite almost all of the code base from
scratch. We do the same with database, putting it in the center of the
architecture, which makes the tests hard to write, fragile and either
very slow or littered with monkey- patching.In this talk, I will show
you how to design architecture which will make your code much easier to
test and maintain. You will learn how to decouple the infrastructure
from business logic and be prepared for future changes.&lt;/p&gt;
</summary></entry><entry><title>Debugging of CPython processes with gdb</title><link href="https://pyvideo.org/pycon-pl-2016/debugging-of-cpython-processes-with-gdb.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Roman Podoliaka</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/debugging-of-cpython-processes-with-gdb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging is a crucial part of day-to-day activities of Python
developers. Everybody's familiar with pdb, which is our bread and
butter, but sometimes it can't help you, e.g. when you are trying to
debug a CPython extension or need to connect to a hanged process without
restarting it. This is where general purpose debuggers like gdb shine.
Being familiar with such tools allows one to troubleshoot complex issues
efficiently and solve problems which otherwise would be very hard to
fix.&lt;/p&gt;
</summary></entry><entry><title>GIL: What's the hassle and why should I care?</title><link href="https://pyvideo.org/pycon-pl-2016/gil-whats-the-hassle-and-why-should-i-care.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/gil-whats-the-hassle-and-why-should-i-care.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demistifying GIL - what's that, how it really affects performance, what
changed in the last few years and what can we do about GIL in everyday
programming.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Breaking the rules</title><link href="https://pyvideo.org/pycon-pl-2016/keynote-breaking-the-rules.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Jessica McKellar</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/keynote-breaking-the-rules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores how programming changes your brain, and the power of
translating the free software mindset to domains outside of open source.&lt;/p&gt;
</summary></entry><entry><title>Krótkie wprowadzenie do GeoPythona</title><link href="https://pyvideo.org/pycon-pl-2016/krotkie-wprowadzenie-do-geopythona.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Małgorzata Papież</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/krotkie-wprowadzenie-do-geopythona.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Od kilku lat, w Polsce coraz większą popularność zdobywają aplikacje
oparte na wykorzystaniu danych przestrzennych. To dzięki nim
przestaliśmy być zależni od papierowych map i bez wychodzenia z domu
możemy zobaczyć każdy zakątek Ziemi. Co jeśli dostępne aplikacje takie
jak Google Earth, Google Maps nam nie wystarczają i chcemy czegoś
więcej? Przyjdź i zobacz jak przy użyciu Pythona stworzyć własne Google
Maps. Będzie trochę teorii czym są dane przestrzenne i jak je
pozyskiwać, ale przede wszystkim będą przykłady jak wykorzystując
biblioteki Pythona stworzyć swoje własne mapy, trasy wycieczki czy
podglądnąć najnowsze zdjęcia satelitarne.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks session 3</title><link href="https://pyvideo.org/pycon-pl-2016/lightning-talks-session-3.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/lightning-talks-session-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon PL 2016:  Lightning talks session 3&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Maintaining a high load Python project: typical mistakes</title><link href="https://pyvideo.org/pycon-pl-2016/maintaining-a-high-load-python-project-typical-mistakes.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Viacheslav Kakovskyi</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/maintaining-a-high-load-python-project-typical-mistakes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk is about typical mistakes which a Python developer without much
experience in high load systems can make. Possible issues and preventive
actions will be discussed. Expected audience: developers who are new to
an existing highly loaded service or folks who develop a system from
scratch. All the stuff based on own production experience.&lt;/p&gt;
</summary></entry><entry><title>Python for Networking Devices</title><link href="https://pyvideo.org/pycon-pl-2016/python-for-networking-devices.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Elisa Jasinska</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/python-for-networking-devices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Internet is a series of tubes and at the end of those tubes are:
networking devices! To form the Internet as we know it, each provider
network has to be managed, maintained and interconnected. Traditional
Network Engineering is moving more and more towards automated device and
service management, a task often performed in Python due to the
availability of many useful libraries. This talk will walk you though
common tasks in Network Engineering and introduce a number of Python
libraries that are helpful in accessing and managing networking
equipment.&lt;/p&gt;
</summary></entry><entry><title>Releases without problems - automatic system for testing Linux distributions</title><link href="https://pyvideo.org/pycon-pl-2016/releases-without-problems-automatic-system-for-testing-linux-distributions.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Paweł Wieczorek</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/releases-without-problems-automatic-system-for-testing-linux-distributions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk will be given in English.&lt;/p&gt;
&lt;p&gt;Wydawanie dystrybucji Linuksa wymaga jej ciągłego i szczegółowego
testowania. By zminimalizować czas poświęcony powtarzalnym czynnościom,
zadania tego typu powinny być wykonywane całkowicie automatycznie.&lt;/p&gt;
&lt;p&gt;Podczas prezentacji poruszone zostaną kluczowe problemy, z jakimi można
spotkać się przy tworzeniu automatycznego laboratorium testowego oraz
sposoby radzenia sobie z nimi z użyciem Pythona. Zarówno sprzęt, jak i
oprogramowanie pokazane w trakcie prezentacji są otwartoźródłowe
(&lt;a class="reference external" href="https://git.tizen.org/cgit/tools/testlab/sd-mux"&gt;https://git.tizen.org/cgit/tools/testlab/sd-mux&lt;/a&gt; i
&lt;a class="reference external" href="https://git.tizen.org/cgit/tools/testlab/major"&gt;https://git.tizen.org/cgit/tools/testlab/major&lt;/a&gt;), mogą być wykorzystane
przy tworzeniu własnego systemu testowego.&lt;/p&gt;
</summary></entry><entry><title>So you "want" to maintain a Python legacy code base?</title><link href="https://pyvideo.org/pycon-pl-2016/so-you-want-to-maintain-a-python-legacy-code-base.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>César Cardenas Desales</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/so-you-want-to-maintain-a-python-legacy-code-base.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;While many programmers will agree that implementing new Software is
the most entertaining part of our jobs, the truth is that the vast
majority of developers spend a great amount of time performing
maintenance, which in an world that praises innovation 'is a dirty job
that somebody's gotta do'. In this talk I will describe a series of
techniques and Python tools that have proven useful for taking over a
legacy code base and getting it move forward, all within a well
defined process:&lt;/div&gt;
&lt;div class="line"&gt;1. Understand. Hold your horses! Don't touch that code yet, even it
you really want to. Understand the spirit of your project, its
architecture. Ask around, create personas, poll users, document the
product.&lt;/div&gt;
&lt;div class="line"&gt;2. Get yourself a safety net. Create lots of unit tests, pytest or
nose are your friends.&lt;/div&gt;
&lt;div class="line"&gt;3. Enhance. Start with small improvements, check and beautify your
code with tools such as flake8, pep8 and pylint, perform code reviews.&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>TDD mikroserwisów</title><link href="https://pyvideo.org/pycon-pl-2016/tdd-mikroserwisow.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Michał Bultrowicz</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/tdd-mikroserwisow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Propozycja tego, jak można tworzyć mikroserwisy w Pythonie zakładając
pisanie testów najpierw, a dopiero potem właściwego kodu. Na każdym
etapie pracy. Żadne pseudo-TDD.Skupię się na testach funkcjonalnych
badających całych proces aplikacji z zewnątrz (pomogą w tym Docker i
Pytest) oraz testach kontraktowych pilnujących, że nikt w trakcie
developmentu nie zmienił zewnętrznych interfejsów naszej aplikacji. W
drugim przypadku wykorzystany będzie Swagger.Przykłady nie będą polegać
na silnej integracji z żadnym webowym frameworkiem. Poruszę też kwestię
mierzenia pokrycia testowego w nieco bardziej skomplikowanych
przypadkach (jak testy funkcjonalne).&lt;/p&gt;
</summary></entry><entry><title>Uczenie maszynowe - czyli jak rozwiązywać nietrywialne problemy</title><link href="https://pyvideo.org/pycon-pl-2016/uczenie-maszynowe-czyli-jak-rozwiazywac-nietrywialne-problemy.html" rel="alternate"></link><published>2016-10-15T00:00:00+00:00</published><updated>2016-10-15T00:00:00+00:00</updated><author><name>Jacek Śmietański</name></author><id>tag:pyvideo.org,2016-10-15:pycon-pl-2016/uczenie-maszynowe-czyli-jak-rozwiazywac-nietrywialne-problemy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Przedstawię metody uczenia maszynowego wykorzystywane w problemach
eksploracji wiedzy oraz biblioteki implementujące omawiane algorytmy
(m.in. scikit-learn, PyLearn2, PyBrain). Na konkretnych przykładach
porównam skuteczność, szybkość oraz łatwość wykorzystania poszczególnych
narzędzi.&lt;/p&gt;
</summary></entry><entry><title>API first and forgotten</title><link href="https://pyvideo.org/pycon-pl-2016/api-first-and-forgotten.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Szymon Matejczyk</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/api-first-and-forgotten.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;API first principle seems convincing. Anyone, who tried implementing it,
realises that often the problem is not to design or formally specify the
API with Swagger. The problem is to keep the specification, servers and
clients consistent and easy to maintain for longer. I will talk about
what practices you need to remember and which tools it is worth to
check.&lt;/p&gt;
</summary></entry><entry><title>Co mają wspólnego trzęsienia ziemia, cyklon tropikalny, lawiny błotne i nasze repozytoria?</title><link href="https://pyvideo.org/pycon-pl-2016/co-maja-wspolnego-trzesienia-ziemia-cyklon-tropikalny-lawiny-blotne-i-nasze-repozytoria.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Paweł Kopka</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/co-maja-wspolnego-trzesienia-ziemia-cyklon-tropikalny-lawiny-blotne-i-nasze-repozytoria.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mam zamiar przedstawić rozkłady odwrotnie potęgowe które opisują
katastrofy naturalne jak i repozytoria większości projektów. Pokrótce
powiem czym się charakteryzacją takie rozkłady, oraz gdzie i jak możemy
je znaleźć w naszym repo. Postaram się też sprawdzić czy istnienie
idealne wykładnik rozkładu dla klas, funkcji jak i zmiennych. Sprawdzimy
też czy dzięki temu da się wyznaczyć słabe punktu naszego projektu. Na
zakończenie poszukamy rozwiązań jak unikać występowania słabych stron
wyznaczonych przez taką analizę.&lt;/p&gt;
</summary></entry><entry><title>Colorful deployments</title><link href="https://pyvideo.org/pycon-pl-2016/colorful-deployments.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Maciej Szulik</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/colorful-deployments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have created your awesome application, deployed it for the very
first time, now what? How you handle application updates, what are the
possible approaches? Do you pick your deployment strategy by your
favorite color, blue- green, canary, other? Yet, the decision is very
simple, or I should rather say switching from one strategy to other is
as simple as never before. During this presentation I will show you
three different deployment strategies and how to apply those to sample
python application.&lt;/p&gt;
</summary></entry><entry><title>Evolution of 'Best Practices' in Django</title><link href="https://pyvideo.org/pycon-pl-2016/evolution-of-best-practices-in-django.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Artur Czepiel</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/evolution-of-best-practices-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some 'best practices' are no longer 'best'. There are newer and better
tools available to solve problems that even a couple of months/years ago
required a lot of hacking and/or ugly code. In this talk I'll show you
some examples of patterns and solutions that no longer apply and
current/latest best practices. Also why they are better, why you should
upgrade your code as soon as possible, and how to deal with 'obsoledge'.
Includes Request/Resposne, Databases, Templates, APIs, 3rd parties, and
more.&lt;/p&gt;
</summary></entry><entry><title>Inteligentny dom z (Micro)Python</title><link href="https://pyvideo.org/pycon-pl-2016/inteligentny-dom-z-micropython.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Krzysztof Czarnota</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/inteligentny-dom-z-micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;W ciągu ostanich lat coraz częściej słyszy się o inteligentnych domach.
Rozwiązania które oszczędzają czas i pieniądze muszą cieszyć się dużą
popularnością. Dzięki zastosowaniu odpowiednich komponentów sprzętowych,
takich jak ESP8266 czy Raspberry Pi oraz języka (Micro)Python wdrożenie
takiego sytemu wcale nie musi być drogie ani skomplikowane. Podczas
prelekcji zostaną przedstawione możliwości układu ESP8266 oraz
MicroPython, a także Raspbery Pi z Python, w aspekcie stworzenia systemu
sterowania inteligentym domem. Wystąpienie porusza tematy związane z
rozpoczęciem tworzenia własnych rozwiązań sprzętowych oraz systemów
wbudowanych, a także integrację stworzonego sytemu z urządzeniami często
spotykanymi w domach.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks session 2</title><link href="https://pyvideo.org/pycon-pl-2016/lightning-talks-session-2.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/lightning-talks-session-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon PL 2016:  Lightning talks sesion 2&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Parallel Python</title><link href="https://pyvideo.org/pycon-pl-2016/parallel-python.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Michał Wysokiński</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/parallel-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people believe that GIL completely rules out executing Python code
in parallel. It's true that GIL limits it to some extent, however the
rich ecosystem of Python modules not only allows that, but even offers
several ways of how it can be achieved. During the talk I will describe
these approaches together with their corresponding modules. I will also
briefly discuss when using parallelism in Python might be beneficial,
when to avoid it and what possible traps might be encountered during
parallel execution of Python code.&lt;/p&gt;
</summary></entry><entry><title>Python i Data Science w Medycynie</title><link href="https://pyvideo.org/pycon-pl-2016/python-i-data-science-w-medycynie.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Mateusz Rogowski</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/python-i-data-science-w-medycynie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Każda diagnoza, każdy zabieg, każda kolejna podana kroplówka to cenne
informacje. Analizując je, możemy wywnioskować jaki jest aktualny stan
pacjenta, ale czy tylko? Czy posiadając wystarczająco dużo danych
jesteśmy w stanie stwierdzić, jakie są szanse na pełny powrót do
zdrowia? Może nawet potrafilibyśmy podpowiedzieć lekarzowi jakie
powinien podjąć kolejne kroki, aby pacjent szybko wyzdrowiał i koszty
jego leczenia były optymalne? Posiadając wystarczająco dużo danych
medycznych, rzeczywiście jesteśmy w stanie wyciągać ciekawe wnioski na
temat leczenia, ale żeby to robić efektywnie, potrzeba dobrych narzędzi.
W tej prezentacji pokażę jak wygląda analiza dużych zestawów danych oraz
budowanie modeli klasyfikatorów z wykorzystaniem bibliotek naukowych
Pythona.&lt;/p&gt;
</summary></entry><entry><title>Python in Education (People, Politics and Programming)</title><link href="https://pyvideo.org/pycon-pl-2016/python-in-education-people-politics-and-programming.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/python-in-education-people-politics-and-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The UK's Python community play an active role in computing education in
the UK. Why? Because it is through education and learning that we engage
with our future colleagues, friends and supporters. It's how we develop
and progress as a community. A community involves both formal and
informal organisations, expectations of behaviour and processes for
making collective decisions. In other words, it's a political exercise.
Organising education to promote and sustain our community is also a
political exercise: it reflects a certain point of view about how our
community should be. In the UK there are several Python community based
projects that reflect our shared outlook that our community should be a
diverse, collaborative and friendly place. With all this in mind, I will
tell the story of one of these educational projects: the BBC micro:bit ~
a device for beginner programmers that runs MicroPython (a million of
which have been given to the UK's 11-12 year olds).&lt;/p&gt;
</summary></entry><entry><title>Python w testach embedded</title><link href="https://pyvideo.org/pycon-pl-2016/python-w-testach-embedded.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Maciej Kusz</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/python-w-testach-embedded.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Podczas prezentacji spróbuję przedstawić możliwości wykorzystania
Pythona w testach oprogramowania wbudowanego, na przykładzie urządzeń
automatyki przemysłowej. Pokażę również dotychczas napotkane problemy
oraz sposoby ich rozwiązania.&lt;/p&gt;
</summary></entry><entry><title>GNU Radio - introduction to elements of DSP</title><link href="https://pyvideo.org/pycon-pl-2016/gnu-radio-introduction-to-elements-of-dsp.html" rel="alternate"></link><published>2016-10-13T00:00:00+00:00</published><updated>2016-10-13T00:00:00+00:00</updated><author><name>Leszek Jakubowski</name></author><id>tag:pyvideo.org,2016-10-13:pycon-pl-2016/gnu-radio-introduction-to-elements-of-dsp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the age of IoT we have more and more invisible radio chatter around
us. This talk will help you start listening to those and other signals
around us. How to read different representations of signals, where did
they come from and how Python plays into all that. Also some basic
theory I wish I knew when I started playing with Digital Signal
Processing.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks session 1</title><link href="https://pyvideo.org/pycon-pl-2016/lightning-talks-session-1.html" rel="alternate"></link><published>2016-10-13T00:00:00+00:00</published><updated>2016-10-13T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-10-13:pycon-pl-2016/lightning-talks-session-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon PL 2016:  Lightning talks session 1&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>PostgreSQL i SQLAlchemy Duet (nie)doskonały</title><link href="https://pyvideo.org/pycon-pl-2016/postgresql-i-sqlalchemy-duet-niedoskonaly.html" rel="alternate"></link><published>2016-10-13T00:00:00+00:00</published><updated>2016-10-13T00:00:00+00:00</updated><author><name>Marcin Bardź</name></author><id>tag:pyvideo.org,2016-10-13:pycon-pl-2016/postgresql-i-sqlalchemy-duet-niedoskonaly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pod tym jakże chwytliwym tytułem kryje się opowieść o niebanalnym
romansie dwóch potężnych narzędzi programistycznych. On - na imię mu
Postgres, nie jest już najmłodszy, ale jakże dojrzały i mający tak wiele
do zaoferowania. Ona - Alchemia, choć młoda jeszcze i płocha (niedawno
stuknęła jej ledwie wersja 1.0), ale o wyszukanej obiektowości i
cudownych możliwościach, choć jak to z kobietami bywa - niewielu ją
rozumie. Czy ten związek ma szanse?&lt;/p&gt;
</summary></entry><entry><title>Tales from Python Security</title><link href="https://pyvideo.org/pycon-pl-2016/tales-from-python-security.html" rel="alternate"></link><published>2016-10-13T00:00:00+00:00</published><updated>2016-10-13T00:00:00+00:00</updated><author><name>Christian Heimes</name></author><id>tag:pyvideo.org,2016-10-13:pycon-pl-2016/tales-from-python-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explores how programming changes your brain, and the power of
translating the free software mindset to domains outside of open source.&lt;/p&gt;
</summary></entry></feed>