<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 11 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>How To Build a Python Microservice Without Losing a Job</title><link>https://pyvideo.org/europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarcastic talk, sharing real-life experience on both technical and
social aspects of doing an architecture migration to microservices
without losing a job.&lt;/p&gt;
&lt;p&gt;Any change in software architecture is a significant time investment.
Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;I would like to share typical pitfalls of choosing a framework stack,
communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html</guid><category>Architecture</category><category>Best Practice</category><category>Communication</category><category>Distributed Systems</category><category>Microservices</category></item><item><title>Lightning talks on Wednesday, July 10</title><link>https://pyvideo.org/europython-2019/lightning-talks-on-wednesday-july-10.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radomir Dopieralski</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/lightning-talks-on-wednesday-july-10.html</guid></item><item><title>Communicating Between Microservices</title><link>https://pyvideo.org/pycon-italia-2019/communicating-between-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are not just a bunch of little apps, it’s a connected
ecosystem.&lt;/p&gt;
&lt;p&gt;Within a monolith, code modules invoke each other simply by using
language- level function calls, but in a microservice architecture,
communication between components does not come for free anymore.
Choosing not just a protocol, but a paradigm for communication between
endpoints is considered the most tricky issue of microservice approach.&lt;/p&gt;
&lt;p&gt;Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1638"&gt;https://python.it/feedback-1638&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/communicating-between-microservices.html</guid><category>MessageQueues</category><category>microservices</category><category>HTTP</category><category>communication</category><category>architecture</category><category>websockets</category></item><item><title>Avoiding Macro Trouble of Micro Services</title><link>https://pyvideo.org/pycon-sk-2019/avoiding-macro-trouble-of-micro-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any change in software architecture is a significant time investment.
Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-03-22:pycon-sk-2019/avoiding-macro-trouble-of-micro-services.html</guid></item><item><title>PyCon Balkan Belgrade 2018 - Day 1 - LIVE STREAM</title><link>https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-1-live-stream.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luka Kladarić</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-1-live-stream.html</guid></item><item><title>PyCon Balkan Belgrade 2018 - LIVE STREAM</title><link>https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luka Kladarić</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html</guid></item><item><title>Async Python and Web Sockets</title><link>https://pyvideo.org/odessapy-2018/async-python-and-web-sockets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern webapps react not just to user actions, but also to server events. Such bi-directional communication can be easily achieved using Web Sockets, a protocol standardized by W3C to be a default tool for full-duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Sockets out of the box, Python has multiple options available making it a piece of cake. In combination with native async tools introduced since Python 3.4, the code can be very easy and elegant, leaving no excuses for long polling and other hacks. This talk showcases integrating Web Sockets in Python web-apps, focusing on situations that can make good use of it and presenting implementations with most popular frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sun, 30 Sep 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-09-30:odessapy-2018/async-python-and-web-sockets.html</guid><category>websockets</category></item><item><title>How to use Web-Sockets in Python</title><link>https://pyvideo.org/pycon-italia-2018/how-to-use-web-sockets-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Socket integration
out of the box, Python has multiple options available making it a piece
of cake. This talk showcases running Web Sockets with Python web-apps,
starting from situations that can make a good use of it, and followed by
an implementation with most practical frameworks: Tornado and Django
Channels. We will explore a similar style but different underlying
technologies of both, and finish with a live demo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/how-to-use-web-sockets-in-python.html</guid><category>tornado</category><category>javascript</category><category>websockets</category><category>web-applications</category><category>web development</category><category>asyncio</category></item><item><title>The Truth about Mastering Big Data</title><link>https://pyvideo.org/pycon-sk-2018/the-truth-about-mastering-big-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you think is the most essential skill a data scientist should
master? Knowledge of deep learning tools? Hadoop? SciPy?&lt;/p&gt;
&lt;p&gt;This talk reveals the cornerstone of data science: nothing is as
important as asking data the right questions. To make it work, we need
some tools and curiosity.&lt;/p&gt;
&lt;p&gt;While focusing on tools, we will first go over the data science subject
as a whole, define our goals, continue with an overview of the essential
Python packages like Pandas and Jupyter Notebook, and conclude with a
live demo. The purpose of this talk is to understand our data: read it,
visualize, and formulate right questions, as well as to endorse your
imagination as a data scientist.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-10:pycon-sk-2018/the-truth-about-mastering-big-data.html</guid><category>Big Data</category><category>PyCon SK</category><category>Python</category></item><item><title>Python and Web Sockets</title><link>https://pyvideo.org/europython-2018/python-and-web-sockets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most web-frameworks do not support Web Socket integration out
of the box, Python has multiple options available making it a piece of
cake. This talk showcases integrating Web Sockets in Python web-apps,
focusing on situations that can make good use of it and presenting
implementations with most popular frameworks: Tornado and Django. We
will explore a similar style but different underlying technologies of
both, and finish with a live demo.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-26:europython-2018/python-and-web-sockets.html</guid></item><item><title>Growing a Python community</title><link>https://pyvideo.org/pycon-italia-2017/growing-a-python-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about people, not tools.&lt;/p&gt;
&lt;p&gt;I would like to share one recipe of building a community from scratch.&lt;/p&gt;
&lt;p&gt;It reveals hands-on experience about the organisational journey,
including insider details and financial questions.&lt;/p&gt;
&lt;p&gt;The information is packed into the story, how one year ago a tempting
idea of making a little Python conference in Munich was born. Six month
later, with poor German skills, no business network and mostly foreign
crew a little idea was converted into PyCon.DE. This conference had a
noticeable Italian flavour, and it’s time to tell why.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/growing-a-python-community.html</guid><category>humor</category><category>conferences</category><category>business</category><category>community</category><category>beer</category><category>teamwork</category><category>social</category><category>education</category></item><item><title>Conference opening</title><link>https://pyvideo.org/pyconweb-2017/conference-opening.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-27:pyconweb-2017/conference-opening.html</guid><category>opening</category></item><item><title>Using the right Async tool, present day</title><link>https://pyvideo.org/europython-2017/using-the-right-async-tool-present-day.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recent releases like AsyncIO and Django Channels gave a new push
towards building real-time web-apps fast and easy. However, as
similar tools exist in Python since 2000th, how should we balance
between modern and time-proven?&lt;/p&gt;
&lt;p&gt;This talk includes but is not focused just on AsyncIO. It gives an
overview of Async libraries in Python, and helps with choosing a
right tool for various web tasks.&lt;/p&gt;
&lt;p&gt;It describes caveats of using Twisted, Tornado and AsyncIO including
theory and live code, and concludes with a basic overview of Django Channels.&lt;/p&gt;
&lt;p&gt;Talk plan&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why do we need Async Web (5 min)&lt;/li&gt;
&lt;li&gt;Existing libraries and frameworks:  Twisted, Tornado, AsyncIO (15 min)&lt;/li&gt;
&lt;li&gt;Sample task, sample code, conclusions (10 min)&lt;/li&gt;
&lt;li&gt;(optional) what's about Django Channels?&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A (5 min)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-11:europython-2017/using-the-right-async-tool-present-day.html</guid></item><item><title>Lightning talks: PyCon web 2017</title><link>https://pyvideo.org/pycon-sk-2017/lightning-talks-pycon-web-2017.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks: Anton Caceres - PyCon web 2017&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sun, 12 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-03-12:pycon-sk-2017/lightning-talks-pycon-web-2017.html</guid><category>lightning talks</category></item><item><title>From Code to Community</title><link>https://pyvideo.org/pycon-sk-2017/from-code-to-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about people, not tools. It takes you on a journey from building software to building a community.&lt;/p&gt;
&lt;p&gt;Python communities are special in many ways, from non-commercial nature to viral enthusiasm and friendliness. This talk shares one recipe of growing such community, covering hands-on experience, insider details and financial challenges.&lt;/p&gt;
&lt;p&gt;The recipe is based on the story how one year ago a tempting idea of making Python meetups in Munich was converted into PyCon.DE. No companies, no funds, no business network. Just Python community, and some enthusiasm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 11 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-03-11:pycon-sk-2017/from-code-to-community.html</guid></item><item><title>Better async code with Python 3</title><link>https://pyvideo.org/pycon-es-2015/better-async-code-with-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn async web development hands-on by using asyncio event loop in combination with subgenerator delegation syntax (yield from), creating beautiful concurrent code without writing a single callback.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/better-async-code-with-python-3.html</guid><category>workshop</category><category>asyncio</category></item><item><title>Better asynchronous code with Tornado and Python 3</title><link>https://pyvideo.org/europython-2015/better-asynchronous-code-with-tornado-and-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anton Caceres - Better asynchronous code with Tornado and Python 3
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;The asyncio module introduced in Python 3.4 is a game-changer for I/O
management and event-driven network programming in Python. Aiming to
be a lower-level implementation of an asynchronous event loop, it
intends that higher level frameworks like Tornado, Twisted or Gevent
will build on top of it, taking advantage of the shared interface for
writing concurrent event-driven code across different Python
frameworks.&lt;/p&gt;
&lt;p&gt;This talk connects theory with practice, presenting how Tornado can
run in the asyncio event loop and take advantage of the subgenerator
delegation syntax (yield from) to provide a high degree of concurrency
while keeping the simplicity of sequential code. It explains the
concept of coroutines, futures and ioloop, exposing Python 3 code for
sample web tasks. The talk completes with a basic demo of running this
code on Tornado, comparing its syntax and performance with popular
asynchronous frameworks from other languages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-05:europython-2015/better-asynchronous-code-with-tornado-and-python-3.html</guid></item><item><title>Asynchronous Web Development with Python 3</title><link>https://pyvideo.org/pycon-italia-2015/asynchronous-web-development-with-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The asyncio module with updated chainable coroutines introduced with
Python 3.4 was a game-changer for I/O management and asynchronous web
development in Python. Even web frameworks like Tornado that already had
an own asynchronous IO-loop implementation, can now take advantage of
the subgenerator delegation syntax to provide a high degree of
concurrency and responsiveness while keeping the simplicity of
sequential code. This talk will focus on the new way of writing
asynchronous code with Python 3, explaining the concept of futures,
coroutines and ioloop. It will complete with a basic demo of running
this code on Tornado, comparing its syntax and performance with other
popular web frameworks.&lt;/p&gt;
&lt;p&gt;It is also possible to present this topic in a workshop format. Contact
me for details.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-05-29:pycon-italia-2015/asynchronous-web-development-with-python-3.html</guid></item></channel></rss>