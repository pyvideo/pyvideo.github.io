<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 04 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>Semantic modeling of data science code</title><link>https://pyvideo.org/pydata-new-york-city-2019/semantic-modeling-of-data-science-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Programming languages and libraries are proliferating in the data science community. In an effort to reduce communication barriers and enable automation and intelligent tooling, we are developing software to automatically construct language-agnostic semantic models of data science code written in Python or R. In this talk, we introduce our methods and illustrate them by example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Patterson</dc:creator><pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-04:pydata-new-york-city-2019/semantic-modeling-of-data-science-code.html</guid></item><item><title>IPython: tools for the entire lifecycle of research computing</title><link>https://pyvideo.org/scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython started as a better interactive Python interpreter in 2001, but
over the last decade it has grown into a rich and powerful set of
interlocking tools aimed at enabling an efficient, fluid and productive
workflow in the typical use cases encountered by scientists in everyday
research.&lt;/p&gt;
&lt;p&gt;Today, IPython consists of a kernel executing user code and capable of
communicating with a variety of clients, using ZeroMQ for networking via
a well-documented protocol. This enables IPython to support, from a
single codebase, a rich variety of usage scenarios through user-facing
applications and an API for embedding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An interactive, terminal-based shell with many capabilities far
beyond the default Python interactive interpreter (this is the
default application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that most users
are familiar with).&lt;/li&gt;
&lt;li&gt;A Qt console that provides the look and feel of a terminal, but adds
support for inline figures, graphical calltips, a persistent session
that can survive crashes of the kernel process, and more.&lt;/li&gt;
&lt;li&gt;A web-based notebook that can execute code and also contain rich text
and figures, mathematical equations and arbitrary HTML. This notebook
presents a document-like view with cells where code is executed but
that can be edited in-place, reordered, mixed with explanatory text
and figures, etc.&lt;/li&gt;
&lt;li&gt;A high-performance, low-latency system for parallel computing that
supports the control of a cluster of IPython engines communicating
over ZeroMQ, with optimizations that minimize unnecessary copying of
large objects (especially numpy arrays).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk we will show how IPython supports all stages in the
lifecycle of a scientific idea: individual exploration, collaborative
development, large- scale production using parallel resources,
publication and education. In particular, the IPython Notebook supports
multiuser collaboration and allows scientists to share their work in an
open document format that is a true &amp;quot;executable paper&amp;quot;: notebooks can be
version controlled, exported to HTML or PDF for publication, and used
for teaching. We will demonstrate the key features of the system,&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</guid><category>General</category></item></channel></rss>