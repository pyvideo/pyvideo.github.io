<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mark-burgess.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-15T00:00:00+00:00</updated><entry><title>Linear Genetic Programming in Python Bytecode</title><link href="https://pyvideo.org/pycon-au-2016/linear-genetic-programming-in-python-bytecode.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Mark Burgess</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/linear-genetic-programming-in-python-bytecode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mark Burgess
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/99/view_talk"&gt;https://2016.pycon-au.org/schedule/99/view_talk&lt;/a&gt;
A quick tutorial on genetic programming and its implementation in Python.
Including the general process of evolution, the various representations of programs and particularly linear genetic programming.
Some really basic python libraries are introduced, including the DEAP and pyevolve frameworks.
It has been presented and prototyped by github user mgard (and documented &lt;a class="reference external" href="http://multigrad.blogspot.com.au/2014/06/fun-with-python-bytecode.html"&gt;http://multigrad.blogspot.com.au/2014/06/fun-with-python-bytecode.html&lt;/a&gt;) that python bytecode itself could be directly evolved in linear genetic programming to alleviate the overhead of compiling the permutations of trees generated by the evolutionary process.
Python bytecode itself is redly accessed and created by Cpython, though not compatible between versions and a subset of python bytecode instructions will be selected for the implementation of a basic example of symbolic regression.
A futher and more useful example will be provided.&lt;/p&gt;
</summary></entry></feed>