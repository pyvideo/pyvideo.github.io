<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 17 Aug 2013 00:00:00 +0000</lastBuildDate><item><title>Docker (Lightning Talk)</title><link>https://pyvideo.org/pytexas-2013/docker-lightning-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mark Allen introduces Docker.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Allen</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-17:pytexas-2013/docker-lightning-talk.html</guid><category>lightning talks</category></item><item><title>Docker (Second Lightning Talk on Docker)</title><link>https://pyvideo.org/pytexas-2013/docker-second-lightning-talk-on-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker (Second Lightning Talk on Docker)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John-Michael Oswalt</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-17:pytexas-2013/docker-second-lightning-talk-on-docker.html</guid><category>lightning talks</category></item><item><title>gevent (Lightning Talk)</title><link>https://pyvideo.org/pytexas-2013/gevent-lightning-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;gevent (Lightning Talk)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glen Zangirolami</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-17:pytexas-2013/gevent-lightning-talk.html</guid><category>lightning talks</category></item><item><title>Paranormal Debugging (Lightning Talk)</title><link>https://pyvideo.org/pytexas-2013/paranormal-debugging-lightning-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paranormal Debugging (Lightning Talk)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sheila Allen</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-17:pytexas-2013/paranormal-debugging-lightning-talk.html</guid><category>lightning talks</category></item><item><title>XML, Django-style (Lightning Talk)</title><link>https://pyvideo.org/pytexas-2013/xml-django-style-lightning-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;XML, Django-style (Lightning Talk)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katy LaVallee</dc:creator><pubDate>Sat, 17 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-17:pytexas-2013/xml-django-style-lightning-talk.html</guid><category>lightning talks</category></item><item><title>__instancecheck__ and user-defined type systems</title><link>https://pyvideo.org/pytexas-2013/__instancecheck__-and-user-defined-type-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;instancecheck and subclasscheck are part of the fundamental protocols supported by objects in Python, and they are used in the standard library to support type checking via interfaces (e.g., isinstance(x, collections.Iterable) instead of type(x) is list)
This talk discusses how they work, from an end-user perspective and from the perspective of a CPython developer, and what these can be used for (e.g., modelling problems with user-defined, custom type systems.) This talk will also discuss real-world problems in a giant, multi-million line Python system that the presenter has seen and resolved using knowledge of these constructs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/__instancecheck__-and-user-defined-type-systems.html</guid></item><item><title>Asynchronous, Evented Messaging with AMQP, Kombu, and gevent</title><link>https://pyvideo.org/pytexas-2013/asynchronous-evented-messaging-with-amqp-kombu-and-gevent.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern enterprise applications, particularly those utilizing cloud services, need to be reliable, scalable, flexible, and performant. We explore how to use AMQP to build applications with all four of those attributes, how to use Kombu to integrate AMQP with Python, and introduce gevent to build additional flexibility and performance into Python applications. We'll give a brief overview of each of the components, provide some code samples for interesting use cases, then discuss possible applications of the powers of all three combined.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Tygart</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/asynchronous-evented-messaging-with-amqp-kombu-and-gevent.html</guid></item><item><title>Bugs: Can't code without them, so code against them!</title><link>https://pyvideo.org/pytexas-2013/bugs-cant-code-without-them-so-code-against-them.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last 10 years, Luke Lee has professionally written software for applications ranging from Python desktop and web applications to embedded C drivers for Solid State Disks. Currently, he writes scientific Python applications for Blueback Reservoir in Houston, TX. His enthusiasm for Python is emphasized throughout his presentations at several Python related conferences including Pycon, PyTexas, and PyArkansas. He is also an active member of the Houston Django and Python user groups.&lt;/p&gt;
&lt;p&gt;There are a lot of approaches and philosophies to prevent bugs in software, but
the truth is they are unavoidable in complex, modern systems. So, what's a
developer to do? Code in a style that tries to alert and test for the bugs
when they happen instead of feeling like a failure when you can't prevent the
unavoidable.&lt;/p&gt;
&lt;p&gt;Wikipedia defines this style of programming as 'defensive programming,' and the
idea is code in a way that expects software to be misused and have bugs. This
talk will explore this general concept and how to add bits of this style of
development to you Python code with the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Asserts&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Lee</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/bugs-cant-code-without-them-so-code-against-them.html</guid></item><item><title>Build Your Infrastructure - with Python!</title><link>https://pyvideo.org/pytexas-2013/build-your-infrastructure-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their computing requirements. Instead of ordering hardware, waiting for delivery, allocating space in a data center, installing and wiring it up, and then configuring each piece of the system, you can now do the equivalent with a few clicks on a control panel, but that gets tedious. What's much more interesting is to do all of this programmatically, using our favorite language: Python!&lt;/p&gt;
&lt;p&gt;This session will deep-dive into this topic by using pyrax, the Python SDK for the OpenStack and Rackspace Clouds. It will cover the as much of the following as time permits:&lt;/p&gt;
&lt;p&gt;Getting your cloud account and credentials
Installing pyrax
Creating servers
Saving a customized server as a template image
Creating more servers on demand from your template images.
Creating, attaching, and imaging Block Storage volumes
Using private networks to create a bastion host setup
Managing these servers with a Load Balancer
Creating and managing Cloud Databases
Using pyrax to manage your DNS
Object storage and management using pyrax&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ed Leafe</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/build-your-infrastructure-with-python.html</guid></item><item><title>Building full-stack scientific applications in Python</title><link>https://pyvideo.org/pytexas-2013/building-full-stack-scientific-applications-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last 10 years, Luke Lee has professionally written software for applications ranging from Python desktop and web applications to embedded C drivers for Solid State Disks. Currently, he writes scientific Python applications for Blueback Reservoir in Houston, TX. His enthusiasm for Python is emphasized throughout his presentations at several Python related conferences including Pycon, PyTexas, and PyArkansas. He is also an active member of the Houston Django and Python user groups.&lt;/p&gt;
&lt;p&gt;Python has a large collection of tools for scientific computing. However, finding the right pieces and assembling them into a fast and scale-able app can be a daunting task. This talk will explore common requirements of scientific apps and how to fulfill those from the Python ecosystem. It will also provide a blueprint for building apps using tools like PyQt, PyQwt, numpy, and HDF5.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Lee</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/building-full-stack-scientific-applications-in-python.html</guid></item><item><title>Classes and Metaclasses</title><link>https://pyvideo.org/pytexas-2013/classes-and-metaclasses.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;This talk discusses the fundamentals of how classes and metaclasses work in Python 2 and 3 from the perspective of the CPython interpreter. It covers the way these constructs can be used to model problems. e.g., metaclasses and build_class are the only mechanisms in Python that can be used to enforce constraints from a base class to a derived class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/classes-and-metaclasses.html</guid></item><item><title>dtrace, python and you</title><link>https://pyvideo.org/pytexas-2013/dtrace-python-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know that Python is a dtrace provider? Wait, backup. Did you know that dtrace is a dynamic and safe tool to probing all kinds of complex behaviors in running computer systems? Using dtrace on python applications can give you a &lt;em&gt;lot&lt;/em&gt; of great information about bottlenecks, performance issues and details that you would never otherwise get.&lt;/p&gt;
&lt;p&gt;Learn how python and dtrace interface together.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Allen</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/dtrace-python-and-you.html</guid></item><item><title>Embeddings of Python</title><link>https://pyvideo.org/pytexas-2013/embeddings-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;James Powell is a Python programmer residing in New York City. He is the co-organiser of the NYC Python meetup (nycpython.com) and has spoken at PyData SV, PyData NYC, PyTexas, PyArkansas, PyGotham, and at the NYC Python meetup. He also authors a blog on Python topics at dontusethiscode.com&lt;/p&gt;
&lt;p&gt;This talk discusses embeddings of Python: the known &amp;quot;high-level embedding&amp;quot;: whole interpreter running within a C/C++ application using PyRun_SimpleString; a novel &amp;quot;medium-level embedding&amp;quot;: (potentially) zero-interpreter embedding within a C/C++ application using Cython for translation; a novel &amp;quot;Python with Python embedding&amp;quot;: running a Python interpreter from within a Python module, within the same process (with split/hybrid GC &amp;amp; PyObject shims)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/embeddings-of-python.html</guid></item><item><title>Filtering and Deduplicating Data in IPython Notebook</title><link>https://pyvideo.org/pytexas-2013/filtering-and-deduplicating-data-in-ipython-notebook.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides a practical demonstration of how I used IPython Notebook to filter and then de-duplicate a set of 2877 records from a tab separated value (text) file. Using a file of 117 cases and a fairy complex set of business criteria that combined separate concepts of &amp;quot;most recent&amp;quot; and &amp;quot;most modern&amp;quot;, I reduced the set of records down from 20 columns x 2877 records to 13 columns x 615 records. The end result was the output of this computation and a script that could be used for other data sets. (There were 9 more data sets.)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Walker Hale</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/filtering-and-deduplicating-data-in-ipython-notebook.html</guid></item><item><title>Growing Python with Spreadsheets</title><link>https://pyvideo.org/pytexas-2013/growing-python-with-spreadsheets.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk given at PyTexas 2013 by Kojo Idrissa (&amp;#64;Transition).&lt;/p&gt;
&lt;p&gt;Spreadsheets are the &amp;quot;lingua franca&amp;quot; of data sharing, espeicially within organizations. Outside of technical circles (IT departments, developers, etc), a spreadsheet is still the way most data is analyzed, visualized or reported. While programmers prefer to work with data in another format, many non-programmers either don't have that option or lack the technical accumen to be aware the option exists. As a result, many non-technical people in organizations are forced to use kludgy, limited data analysis tools in spreadsheets. While spreadsheets are good for &lt;em&gt;basic&lt;/em&gt; data visualization (i.e., &amp;quot;What do I have here?&amp;quot;), they lack flexibility and force their users to jump through hoops. &lt;strong&gt;This&lt;/strong&gt; is an opportunity for Python to grow.&lt;/p&gt;
&lt;p&gt;My underlying thesis is that one of Python's best vectors for growth is not converting &lt;em&gt;current&lt;/em&gt; programmers from other languages to Python (a 'Red Ocean' strategy), but converting current non-programmers &lt;em&gt;into&lt;/em&gt; programmers by demonstrating Python's utility (a 'Blue Ocean' strategy). In this case, the spreadsheet user (who's already one of the closest things to a programmer in most organizations) is our audience.&lt;/p&gt;
&lt;p&gt;This session focuses on working with data that's in spreadsheets by 'talking' directly to the spreadsheets with Python. There are two main focuses to the session.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Help grow the Python community by showing spreadsheet users how Python can help them&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;speed up or eliminate repetitive tasks&lt;/li&gt;
&lt;li&gt;provide better and data analysis than a spreadsheet&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Expose Python developers to methods they can use to directly interact with spreadsheets, avoiding the 'delimited text file' intermediary step&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/growing-python-with-spreadsheets.html</guid></item><item><title>Managing web applications with DevOps and Chef</title><link>https://pyvideo.org/pytexas-2013/managing-web-applications-with-devops-and-chef.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web development often forces a separation between the developers who write the code, and the sysadmins who become responsible to maintain the application they create. DevOps is a philosophy of managing the entire lifecycle of an application, from development to operations, so that reliability and consistency of the system is the goal. This talk will discuss how the College of Architecture has implemented the DevOps methodology for our Django-based web applications using Chef. I'll talk about how Chef helps us quickly deploy and manage highly-available web apps, and about the shifting line between the developers and operations team, and where Chef has caused us to re-think those boundaries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Rosser</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/managing-web-applications-with-devops-and-chef.html</guid></item><item><title>Python Applications with Google Drive SDK</title><link>https://pyvideo.org/pytexas-2013/python-applications-with-google-drive-sdk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview of the Google Drive SDK and how to write Python applications that integrate the SDK.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Bailey</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/python-applications-with-google-drive-sdk.html</guid></item><item><title>PyYAML, ElementTree, and Liquibase</title><link>https://pyvideo.org/pytexas-2013/pyyaml-elementtree-and-liquibase.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover two libraries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;xml.etree.ElementTree - part of the standard library for parsing, manipulating, or generating XML&lt;/li&gt;
&lt;li&gt;PyYAML - for parsing or generating YAML (and JSON)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will demonstrate the benefits of both libraries, and then demonstrate how the combination of the two allows writing YAML for situations where hand-generated XML is required but tedious. The practical example is Liquibase, a product that uses user-generated XML to make gradual changes to database schema.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Walker Hale</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/pyyaml-elementtree-and-liquibase.html</guid></item><item><title>Scraping the Web with Scrapy</title><link>https://pyvideo.org/pytexas-2013/scraping-the-web-with-scrapy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave has been developing in Django for 3 years in sunny Austin, TX, where he is an organizer for the Austin Web Python User Group. He worked for the Texas Tribune building data apps and contributing to the open source Armstrong CMS framework built on top of Django. He is now freelancing after his latest attempt at the startup game crashed. He enjoys shooting sports and barbecueing beef when he's not scraping ecommerce sites. The worst bet he's ever lost was when he was forced to retake the SAT at the age of 27 because he came in dead last in a fantasy football league.&lt;/p&gt;
&lt;p&gt;Python has great tools like Django and Flask for taking your database and turning it into html pages, but what if you want to take somebody else's html pages and build a database from them? Scrapy is a library for building web spiders that will simplify your web scraping tasks immensely. Friends don't let friends use raw urllib2.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave McLain</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/scraping-the-web-with-scrapy.html</guid></item><item><title>Trends in Deep Learning</title><link>https://pyvideo.org/pytexas-2013/trends-in-deep-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk gives a brief history of deep learning architectures, moving into modern trends and research in the field. Key points of discussion are neural activation functions, weight optimization strategies, techniques for hyper-parameter selection, and example architectures for different problem sets. We finish with a few notable examples of &amp;quot;web scale&amp;quot; deep learning at work.&lt;/p&gt;
&lt;p&gt;This talk will focus on (briefly) sklearn, Theano, pylearn2, theanets, and hyperopt.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Kastner</dc:creator><pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-16:pytexas-2013/trends-in-deep-learning.html</guid></item></channel></rss>