<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_statistics.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Machine Learning for Inventory Management</title><link href="https://pyvideo.org/pycon-italia-2019/machine-learning-for-inventory-management.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Laura De Stefanis</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/machine-learning-for-inventory-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Material forecast is the process of deciding which items to stock in the
inventory, how much, and when. Aim of the forecast is to increase parts
availability with the less possible impact on inventory, having enough
stock in the warehouse to ensure the business keeps moving but not
enough stock to drain its limited cash reserves. This decision process
is being profoundly revised in its foundational concepts, thanks to new
classification methodologies enabled by Machine Learning. We integrated
domain knowledge and ML to create a new classification and level setting
process, leveraging on 6 years of data and new statistical indicators
for demand patter. These new features are used to run the machine
learning algorithm that classify Make To Stock / Make To Order items in
a single flow approach. The validation phase is reduced at each
iteration as ML model can be re-trained to incorporate past validations,
increasing efficiency and performances. Level setting problem is
addressed benchmarking ML methods (Reinforcement Learning), Montecarlo
simulations and traditional statistical methodologies. Regarding RL and
Montecarlo we established punishments for letting an particular
inventory item run out of stock and we also punish the model for stock
too higher value for too long. For rewards, we primarily focus on
ordering items within a safe window before the demand. First application
of this new methodology brings a 20% reduction of inventory, without
impact on sales, and a workload reduction of about 70%.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1554"&gt;https://python.it/feedback-1554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="logistics"></category><category term="clustering"></category><category term="statistics"></category><category term="Python"></category><category term="Big-Data"></category><category term="gestionali"></category><category term="django"></category><category term="supplychain"></category><category term="sql"></category><category term="Artificial Intelligence"></category></entry><entry><title>Introduction to machine learning using Python tools</title><link href="https://pyvideo.org/europython-2013/introduction-to-machine-learning-using-python-tools.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Satish Shankar</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/introduction-to-machine-learning-using-python-tools.html</id><summary type="html"></summary><category term="statistics"></category><category term="machine-learning"></category><category term="datamining"></category><category term="Algorithms"></category><category term="data-analysis"></category><category term="scientific-computing"></category><category term="sklearn"></category></entry><entry><title>CPython loves your Pull Requests</title><link href="https://pyvideo.org/pycon-italia-2018/cpython-loves-your-pull-requests.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Stéphane Wirtel</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/cpython-loves-your-pull-requests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;CPython, what’s CPython. CPython is the official implementation of
Python, written in C. And it’s not just a implementation, it is a group
of volunteers and where they daily work on the project but there is no
many active contributors.&lt;/p&gt;
&lt;p&gt;In this talk, I would like to prove to you than you can become an active
contributor of CPython.&lt;/p&gt;
&lt;p&gt;The core developers of CPython need your help, for example, with the
review of some patches, you can comment a patch or try to reproduce a
bug.&lt;/p&gt;
&lt;p&gt;In the past, when you wanted to contribute to CPython, you had to use
the bug tracker interface and send a patch, this patch was reviewed if
you were lucky and after commented etc…. but this process was really
long and time consuming.&lt;/p&gt;
&lt;p&gt;Now with the new process based on GitHub and Git, you can create a new
branch on your local repository and just send a Pull Request. The Pull
Request is just awesome, it will be reviewed really quickly, we will
comment your Pull Request and if the code is correct and the tests pass,
then you PR will be merged in CPython.&lt;/p&gt;
&lt;p&gt;We love and need your Pull Requests for CPython.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience"&gt;
&lt;h4&gt;Audience&lt;/h4&gt;
&lt;p&gt;For new comers to CPython and the future contributors and of course for
the regular contributors and core-dev of CPython.&lt;/p&gt;
&lt;p&gt;With this migration to GitHub, I will show the work done by the
migration team, the benefits of this migration and the new
tools/workflow. Few tools have been developed to help the core-dev. For
example, Miss Islington has been developed for an automatic back-port of
a branch from Python ‘master’ to Python 3.6 or 3.5, just with a “label”
on the Pull Request&lt;/p&gt;
&lt;p&gt;I will show some stats about the contributors and the contributions on
the CPython project. For example, in November 2017, 4207 pull requests
from the community since the migration in Feb 2017.&lt;/p&gt;
&lt;p&gt;The talk is explained with a story “Once upon a time” and with humour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction&lt;ul&gt;
&lt;li&gt;small history about the beginning of Python, the status and the
challenges.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Former workflows, former tools:&lt;ul&gt;
&lt;li&gt;the CLA (PSF Contributor Agreement)&lt;/li&gt;
&lt;li&gt;the bug tracker&lt;/li&gt;
&lt;li&gt;patch review with the Rietveld tool&lt;/li&gt;
&lt;li&gt;typical workflow&lt;/li&gt;
&lt;li&gt;conclusion: We have an issue for the new comers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New workflow, new tools&lt;ul&gt;
&lt;li&gt;Git, why?&lt;/li&gt;
&lt;li&gt;Github, why?&lt;/li&gt;
&lt;li&gt;Web interface, Pull Requests, Dashboards&lt;/li&gt;
&lt;li&gt;REST API, GraphQL API for the statistics&lt;/li&gt;
&lt;li&gt;Automation with Travis, AppVeyor&lt;/li&gt;
&lt;li&gt;New Bots: Bedevere, Miss Islington, “The Knights who say ni!”&lt;/li&gt;
&lt;li&gt;New tool: Blurb&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Comparison between the former and new workflow&lt;/li&gt;
&lt;li&gt;Statistics (between Feb 2017, and Nov 2017)&lt;ul&gt;
&lt;li&gt;Number of Pull Requests (4204)&lt;/li&gt;
&lt;li&gt;Number of Contributors (586) vs Core Dev&lt;/li&gt;
&lt;li&gt;Merge time, Top, Average, etc….&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A ?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-notes"&gt;
&lt;h4&gt;Additional notes&lt;/h4&gt;
&lt;p&gt;This talk has been presented at PyCon Canada in November 2017 at
Montreal in front of two core-devs of Python, Brett Cannon and Mariatta
Wijaya. Also reviewed by Victor Stinner core-dev python&lt;/p&gt;
&lt;p&gt;My talk has been shared on the python-dev mailing list by Victor
Stinner:
&lt;a class="reference external" href="https://mail.python.org/pipermail/python-dev/2017-December/151051.html"&gt;https://mail.python.org/pipermail/python-dev/2017-December/151051.html&lt;/a&gt;
because the statistics were interesting for the core-dev.&lt;/p&gt;
&lt;p&gt;Presentation at PyCon Canada 2017: &lt;a class="reference external" href="https://2017.pycon.ca/schedule/4/"&gt;https://2017.pycon.ca/schedule/4/&lt;/a&gt;
Slides:
&lt;a class="reference external" href="https://speakerdeck.com/matrixise/cpython-loves-your-pull-requests"&gt;https://speakerdeck.com/matrixise/cpython-loves-your-pull-requests&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My experience, speaker at PyCon Canada 2015, 2016 and 2017 Python FOSDEM
2013, 2014, 2015 and 2017 PyCon Ireland 2015, 2016, and 2017 PyCon
France 2012, 2014, 2016, 2017 PyCon UK 2015 EuroPython 2015, 2016 and
2017. Montreal Python September 2015 and November 2017.&lt;/p&gt;
&lt;p&gt;Organizer of Python FOSDEM (+- 600 people) in Belgium Co-Organizer of
EuroPython 2015, 2016 and 2017 (as member of the Web workgroup).&lt;/p&gt;
&lt;p&gt;Fellow Member of the Python Software Foundation since 2013 Member of the
Fellow Workgroup for the PSF Member of the Marketing Workgroup for the
PSF&lt;/p&gt;
&lt;p&gt;Of course, contributor of CPython, mainly on Devguide and sometimes on
the main repository with some fixes, new features.&lt;/p&gt;
&lt;p&gt;For my contribution to the migration of Python.
&lt;a class="reference external" href="https://mail.python.org/pipermail/python-committers/2017-February/004220.html"&gt;https://mail.python.org/pipermail/python-committers/2017-February/004220.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Others presentations where I explain the interpreter and the bytecode of
Python &lt;a class="reference external" href="https://speakerdeck.com/matrixise/architecture-of-cpython-part-1"&gt;https://speakerdeck.com/matrixise/architecture-of-cpython-part-1&lt;/a&gt;
&lt;a class="reference external" href="https://speakerdeck.com/matrixise/exploring-our-python-interpreter"&gt;https://speakerdeck.com/matrixise/exploring-our-python-interpreter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="statistics"></category><category term="core-programming"></category><category term="CPython"></category><category term="community"></category><category term="github"></category><category term="git"></category></entry><entry><title>Lies, damned lies, and statistics</title><link href="https://pyvideo.org/pycon-italia-2018/lies-damned-lies-and-statistics.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Marco Bonzanini</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/lies-damned-lies-and-statistics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Statistics show that eating ice cream causes death by drowning.&lt;/p&gt;
&lt;p&gt;If this sounds baffling, this talk will help you to understand
correlation, bias, statistical significance and other statistical
techniques that are commonly (mis)used to support an argument that
leads, by accident or on purpose, to drawing the wrong conclusions.&lt;/p&gt;
&lt;p&gt;The casual observer is exposed to the use of statistics and probability
in everyday life, but it is extremely easy to fall victim of a
statistical fallacy, even for professional users.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to help the audience understand how to
recognise and avoid these fallacies, by combining an introduction to
statistics with examples of lies and damned lies, in a way that is
approachable for beginners.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Correlation and causation&lt;/li&gt;
&lt;li&gt;Simpson’s Paradox&lt;/li&gt;
&lt;li&gt;Sampling bias and polluted surveys&lt;/li&gt;
&lt;li&gt;Data visualisation gone wild&lt;/li&gt;
&lt;li&gt;Statistical significance (and Data dredging a.k.a. p-hacking)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/marcobonzanini/lies-damned-lies-and-statistics-at-pycon-italia-2018"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="data-visualization"></category><category term="statistics"></category><category term="data-analysis"></category><category term="pydata"></category></entry><entry><title>Voting-based Ranking Combination using Python</title><link href="https://pyvideo.org/pycon-italia-2018/voting-based-ranking-combination-using-python.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Ferran Muiños</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/voting-based-ranking-combination-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Slides:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://slides.com/ferranmuinos/deck#/"&gt;Using votes to combine
rankings&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How to best combine the outcome of several ranked data into a single,
meaningful consensus ranking is a recurrent problem in scientific data
analysis. Particularly, in genome data analysis we are often bound to
merge ranked data arising from separate statistical analyses.&lt;/p&gt;
&lt;p&gt;Traditional blending strategies applied in the field rely on techniques
to combine statistical significance, but this approach on its own has
been associated with a number of caveats.&lt;/p&gt;
&lt;p&gt;We hereto present a voting-based heuristics implemented in Python which
leverages both Schulze’s voting algorithm and optimization techniques to
combine rankings upon credibility scores inferred from prior knowledge.
This rationale can be used alongside state-of-the-art methods to
systematically incorporate prior knowledge, thereby leading to more
interpretable outcomes. The scope of the method is quite general and may
be of use in other data analysis contexts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contributors:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Presenter: &lt;a class="reference external" href="https://goo.gl/QDCMf3"&gt;Ferran Muiños&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Authors of the work: &lt;a class="reference external" href="https://goo.gl/QDCMf3"&gt;Ferran Muiños&lt;/a&gt;,
&lt;a class="reference external" href="https://goo.gl/weg7Nh"&gt;Francisco Martínez-Jiménez&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To showcase a scientific data analysis problem arising from the study of
cancer biology and how we approached it by implementing our own tool in
Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The talk aims to a broad Python audience. Minimum Python fluency is
required. Acquaintance with basic notions of data analysis may be
helpful to best follow the talk.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category><category term="statistics"></category><category term="genetics"></category><category term="bio-informatics"></category><category term="data-analysis"></category></entry><entry><title>Statistics and probability: your first steps on the road to data science</title><link href="https://pyvideo.org/pycon-us-2018/statistics-and-probability-your-first-steps-on-the-road-to-data-science.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Chalmer Lowe</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/statistics-and-probability-your-first-steps-on-the-road-to-data-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to statistics and probability geared toward enabling attendees to understand the capabilities and limitations of statistics and probability and to help them implement calculations in their projects. Where possible/feasible, attendees will build their own tools to help them grasp the underlying concepts. In addition, attendees will be introduced to the pre-built tools in world-class Python and data science libraries to help them capitalize on the efficiencies and utility that those libraries offer.&lt;/p&gt;
</summary><category term="statistics"></category><category term="probability"></category></entry><entry><title>Introduction to Data-Analysis with Pandas / Time Series Analysis with Pandas</title><link href="https://pyvideo.org/pycon-italia-2017/introduction-to-data-analysis-with-pandas-time-series-analysis-with-pandas.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/introduction-to-data-analysis-with-pandas-time-series-analysis-with-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is the &lt;em&gt;Swiss-Multipurpose Knife&lt;/em&gt; for Data Analysis in Python.
With Pandas dealing with data-analysis is easy and simple but there are
some things you need to get your head around first as Data-Frames and
Data-Series.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first part&lt;/strong&gt; of talk with provide an &lt;strong&gt;introduction to Pandas&lt;/strong&gt;
for beginners, while the &lt;strong&gt;second part&lt;/strong&gt; will focus on &lt;strong&gt;Time Series
Analysis&lt;/strong&gt; with Pandas.&lt;/p&gt;
&lt;p&gt;part &lt;strong&gt;one&lt;/strong&gt; (~40&amp;quot;) &lt;em&gt;Introduction to Pandas&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reading and writing data across multiple formats (CSV, Excel, JSON,
SQL, HTML,…)&lt;/li&gt;
&lt;li&gt;statistical data analysis and aggregation.&lt;/li&gt;
&lt;li&gt;work with built-in data visualisation&lt;/li&gt;
&lt;li&gt;inner-mechanics of Pandas: Data-Frames, Data-Series &amp;amp; Numpy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;part &lt;strong&gt;two&lt;/strong&gt; (~20&amp;quot;) &lt;em&gt;Time Series Analysis&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to analyse periodical data with pandas&lt;/li&gt;
&lt;li&gt;how to mangle, reshape and pivot&lt;/li&gt;
&lt;li&gt;caveats when working with timed data&lt;/li&gt;
&lt;li&gt;visualize your data on the fly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;bonus (if we have time left)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gain insights with statsmodels (e.g. seasonality)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="data-visualization"></category><category term="computer-science"></category><category term="statistics"></category><category term="data-analysis"></category></entry><entry><title>Doing frequentist statistics with Scipy</title><link href="https://pyvideo.org/pydata-dc-2016/doing-frequentist-statistics-with-scipy.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Gustavo Patino</name></author><id>tag:pyvideo.org,2016-10-07:pydata-dc-2016/doing-frequentist-statistics-with-scipy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy"&gt;https://github.com/gapatino/Doing-frequentist-statistics-with-Scipy&lt;/a&gt;
Slides: &lt;a class="reference external" href="http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy"&gt;http://www.slideshare.net/PyData/doing-frequentist-statistics-with-scipy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Frequentist statistical tests are still very common, and in some fields they continue to represent the technical standard. In this session we will cover the execution and interpretation of the most common tests using the SciPy.stats package, and plotting the results with Matplotlib and Seaborn. The focus will be on traditional approaches to the tests, not on Bayesian and bootstrapping approaches&lt;/p&gt;
&lt;p&gt;The session will cover: - Normality testing - Student's t-test and ANOVA - Wilcoxon rank sum and Kruskal-Wallis - Correlation - Univariate linear and logistic regression - Chi-square - p-value interpretation - Effect size calculation&lt;/p&gt;
</summary><category term="scipy"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 3</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 2</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-0.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Bayesian Statistical Analysis using Python - Part 1</title><link href="https://pyvideo.org/scipy-2014/bayesian-statistical-analysis-using-python-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Chris Fonnesbeck</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/bayesian-statistical-analysis-using-python-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This hands-on tutorial will introduce statistical analysis in Python
using Bayesian methods. Bayesian statistics offer a flexible &amp;amp; powerful
way of analyzing data, but are computationally-intensive, for which
Python is ideal. As a gentle introduction, we will solve simple problems
using NumPy and SciPy, before moving on to Markov chain Monte Carlo
methods to build more complex models using PyMC.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The aim of this course is to introduce new users to the Bayesian
approach of statistical modeling and analysis, so that they can use
Python packages such as NumPy, SciPy and
&lt;a class="reference external" href="https://github.com/pymc-devs/pymc"&gt;PyMC&lt;/a&gt; effectively to analyze
their own data. It is designed to get users quickly up and running with
Bayesian methods, incorporating just enough statistical background to
allow users to understand, in general terms, what they are implementing.
The tutorial will be example-driven, with illustrative case studies
using real data. Selected methods will include approximation methods,
importance sampling, Markov chain Monte Carlo (MCMC) methods such as
Metropolis-Hastings and Slice sampling. In addition to model fitting,
the tutorial will address important techniques for model checking, model
comparison, and steps for preparing data and processing model output.
Tutorial content will be derived from the instructor's book &lt;em&gt;Bayesian
Statistical Computing using Python&lt;/em&gt;, to be published by Springer in late
2014.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="PyMC forest plot" src="http://d.pr/i/pqWT+" /&gt;
&lt;p class="caption"&gt;PyMC forest plot&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="DAG" src="http://d.pr/i/AHZV+" /&gt;
&lt;p class="caption"&gt;DAG&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;All course content will be available as a GitHub repository, including
IPython notebooks and example data.&lt;/p&gt;
&lt;div class="section" id="tutorial-outline"&gt;
&lt;h4&gt;Tutorial Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Overview of Bayesian statistics.&lt;/li&gt;
&lt;li&gt;Bayesian Inference with NumPy and SciPy&lt;/li&gt;
&lt;li&gt;Markov chain Monte Carlo (MCMC)&lt;/li&gt;
&lt;li&gt;The Essentials of PyMC&lt;/li&gt;
&lt;li&gt;Fitting Linear Regression Models&lt;/li&gt;
&lt;li&gt;Hierarchical Modeling&lt;/li&gt;
&lt;li&gt;Model Checking and Validation&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-instructions"&gt;
&lt;h4&gt;Installation Instructions&lt;/h4&gt;
&lt;p&gt;The easiest way to install the Python packages required for this
tutorial is via
&lt;a class="reference external" href="https://store.continuum.io/cshop/anaconda/"&gt;Anaconda&lt;/a&gt;, a scientific
Python distribution offered by Continuum analytics. Several other
tutorials will be recommending a similar setup.&lt;/p&gt;
&lt;p&gt;One of the key features of Anaconda is a command line utility called
&lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be used to manage third party packages. We have built
a PyMC package for &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; that can be installed from your terminal
via the following command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
conda install -c https://conda.binstar.org/pymc pymc
&lt;/pre&gt;
&lt;p&gt;This should install any prerequisite packages that are required to run
PyMC.&lt;/p&gt;
&lt;p&gt;One caveat is that conda does not yet have a build of PyMC for &lt;strong&gt;Python
3&lt;/strong&gt;. Therefore, you would have to build it yourself via pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install git+git://github.com/pymc-devs/pymc.git&amp;#64;2.3
&lt;/pre&gt;
&lt;p&gt;For those of you on Mac OS X that are already using the
&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; package manager, I have prepared a script
that will install the entire Python scientific stack, including PyMC
2.3. You can download the script
&lt;a class="reference external" href="https://gist.github.com/fonnesbeck/7de008b05e670d919b71"&gt;here&lt;/a&gt; and
run it via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sh install_superpack_brew.sh
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="bayesian"></category><category term="statistics"></category></entry><entry><title>Frequentism and Bayesianism: What's the Big Deal?</title><link href="https://pyvideo.org/scipy-2014/frequentism-and-bayesianism-whats-the-big-deal.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jake VanderPlas</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/frequentism-and-bayesianism-whats-the-big-deal.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Statistical analysis comes in two main flavors: frequentist and
Bayesian. The subtle differences between the two can lead to widely
divergent approaches to common data analysis tasks. After a brief
discussion of the philosophical distinctions between the views, I’ll
utilize well-known Python libraries to demonstrate how this philosophy
affects practical approaches to several common analysis tasks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In scientific data mining and machine learning, a fundamental division
is that of the frequentist and Bayesian approaches to statistics. Often
the fodder for impassioned debate among statisticians and other
practitioners, the subtle philosophical differences between the two
camps can lead to surprisingly different practical approaches to the
analysis of scientific data.&lt;/p&gt;
&lt;p&gt;In this talk I will delve into both the philosophical and practical
aspects of Bayesian and frequentist approaches, drawing from a &lt;a class="reference external" href="http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/"&gt;series
of
posts&lt;/a&gt;
from my blog.&lt;/p&gt;
&lt;p&gt;I'll start by addressing the philosophical differences between
frequentism and Bayesianism, which boil down to different definitions of
probability. I'll next move briefly into the mathematical details behind
the two approaches, at a level which will be informative to a general
scientific audience. I'll then show some examples of the two approaches
applied to some increasingly more complicated problems using standard
Python packages, namely: &lt;a class="reference external" href="http://numpy.org"&gt;NumPy&lt;/a&gt;,
&lt;a class="reference external" href="http://scipy.org"&gt;SciPy&lt;/a&gt;, &lt;a class="reference external" href="http://matplotlib.org"&gt;Matplotlib&lt;/a&gt;,
and &lt;a class="reference external" href="http://dan.iel.fm/emcee/"&gt;emcee&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this combination of philosophy and practical examples, the audience
should walk away with a much better understanding of the differences
between frequentist and Bayesian approaches to statistical analysis, and
especially how the philosophy of each approach affects the practical
aspects of computation in data-intensive scientific research.&lt;/p&gt;
</summary><category term="statistics"></category></entry></feed>