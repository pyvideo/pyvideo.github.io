<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_katie-silverio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>Decorators, unwrapped: How do they work?</title><link href="https://pyvideo.org/pycon-us-2017/decorators-unwrapped-how-do-they-work.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Katie Silverio</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/decorators-unwrapped-how-do-they-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are a syntactically-pleasing way of modifying the behavior of
functions in Python. However, they can be highly opaque to Python
beginners. It took me a while to learn how to write one, and even after
I was confident writing my own decorators, felt like they were magical.
The goal of this talk is to demystify decorators by methodically
stepping through how and why they work. Along the way we'll touch on
closures, scopes, and how Python is compiled.&lt;/p&gt;
</summary></entry><entry><title>Modeling State in Text Adventure Games</title><link href="https://pyvideo.org/pygotham-2016/modeling-state-in-text-adventure-games.html" rel="alternate"></link><published>2016-06-17T00:00:00+00:00</published><updated>2016-06-17T00:00:00+00:00</updated><author><name>Katie Silverio</name></author><id>tag:pyvideo.org,2016-06-17:pygotham-2016/modeling-state-in-text-adventure-games.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Although text adventure games, like Colossal Cave Adventure or Zork, don't have graphics, they still have in-game objects to model. I've been working on a framework for writing text adventure games in Python, which means setting on a system for modeling stateful things. In this talk, I'll discuss choosing a design pattern, modifying the pattern to work better in Python, and then use it to make a mini text adventure game!&lt;/p&gt;
</summary></entry></feed>