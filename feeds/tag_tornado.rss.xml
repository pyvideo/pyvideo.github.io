<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate><item><title>Python Website is Slow? Think Again!</title><link>https://pyvideo.org/pycon-italia-2019/python-website-is-slow-think-again.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a Python avid user, we read a lot of articles that describe Python as
a slow, interpreted language. At a certain point, some people start to
blame the language itself for performance problems and consider to
migrate their codebase to other languages. However, the success story of
Instagram in handling four hundred million users has shown us that
Python is not the bottleneck, but our codebase is.&lt;/p&gt;
&lt;p&gt;In this talk, the speaker will share a tale of improving Python website
performances in medium-sized enterprise (serving million users) that I’m
currently working at. In a year, we finally achieved speed improvement
from the average response time of 400 ms to 150 ms per request and we
could save around $100k per year in AWS EC2 instance provisioning, which
is around 60% of total cost.&lt;/p&gt;
&lt;p&gt;Several key points that we have learned from our development process
includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tracking database queries with Python decorator will reduce number of
unnecessary queries&lt;/li&gt;
&lt;li&gt;Using an async framework does not guarantee your codebase is
implementing it correctly&lt;/li&gt;
&lt;li&gt;Default configured third-party library is not always suitable for all
use cases&lt;/li&gt;
&lt;li&gt;Utilizing memory profiler and pdb properly will help you in
pinpointing application bottleneck&lt;/li&gt;
&lt;li&gt;Python for-loops vs generators&lt;/li&gt;
&lt;li&gt;And several other common pitfalls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expected level of audience: This talk is mainly targeted for beginner to
intermediate web developer who are interested in improving the cost-
performance of their web applications. After listening to this talk, the
audiences are expected to understand that good coding practices (e.g.:
implement asyncio correctly, track number of DB queries with decorators,
etc) will make their web application a lot faster and cut down
operational costs by a large margin.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1592"&gt;https://python.it/feedback-1592&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iskandar Setiadi</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/python-website-is-slow-think-again.html</guid><category>tornado</category><category>best-practices</category><category>aws</category><category>web-development</category><category>web</category></item><item><title>How to use Web-Sockets in Python</title><link>https://pyvideo.org/pycon-italia-2018/how-to-use-web-sockets-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Socket integration
out of the box, Python has multiple options available making it a piece
of cake. This talk showcases running Web Sockets with Python web-apps,
starting from situations that can make a good use of it, and followed by
an implementation with most practical frameworks: Tornado and Django
Channels. We will explore a similar style but different underlying
technologies of both, and finish with a live demo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/how-to-use-web-sockets-in-python.html</guid><category>tornado</category><category>javascript</category><category>websockets</category><category>web-applications</category><category>web development</category><category>asyncio</category></item><item><title>Tornadoで分散KVSフレームワーク</title><link>https://pyvideo.org/pycon-japan-2012/tornadodefen-san-kvshuremuwaku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;クラウド環境上でCassandraを使って業務をこなしている時に思ったことを解消するべく、Pythonの代表的WEBサーバTornadoを使って実験的に分散KVSのフレームワークを構築してみました。最初からクラウド環境を想定した分散KVSとはどのようなものか、案件をベースにしたノウハウと共にご説明致します。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">岸本 康二</dc:creator><pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-16:pycon-japan-2012/tornadodefen-san-kvshuremuwaku.html</guid><category>kvs</category><category>tornado</category></item><item><title>Tornado web framework for multiplexed remote access</title><link>https://pyvideo.org/pytexas-2012/tornado-web-framework-for-multiplexed-remote-access.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using the Tornado web framework to build a graphical terminal interface for multiplexed remote access&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. R. Saravanan</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/tornado-web-framework-for-multiplexed-remote-access.html</guid><category>tornado</category></item><item><title>A Web App in Four Frameworks</title><link>https://pyvideo.org/pycascades-2018/a-web-app-in-four-frameworks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we take a tour of some Python web frameworks through the lens of an API for the same web application: a simple To Do list. We'll see how the same problems are handled across Django, Flask, Pyramid, and Tornado, and why you might choose one over the rest.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Hunt-Walker</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/a-web-app-in-four-frameworks.html</guid><category>framework</category><category>Django</category><category>Flask</category><category>Pyramid</category><category>Tornado</category></item><item><title>Build Data Apps by Deploying ML Models as API Services</title><link>https://pyvideo.org/pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016
Ramesh Sampath | Build Data Apps by Deploying ML Models as API Services&lt;/p&gt;
&lt;p&gt;As data scientists, we love building models using IPython Notebooks / Scikit-Learn / Pandas eco-system. But integrating these models with an web app can be a challenge. In this tutorial, we will take our machine learning models and make them available as APIs for use by Web and Mobile Apps. We will also build a simple webapp that uses our prediction service.&lt;/p&gt;
&lt;p&gt;Deploy your ML Models as a Service&lt;/p&gt;
&lt;p&gt;In this talk, we will learn one way to take our Machine Learning models and make them available as a Prediction Service. We will work through the following steps.&lt;/p&gt;
&lt;p&gt;Create a Simple Machine learning Model using Scikit-Learn / Pandas
Pickle the model
Using Tornado Web App, Make this model available as an API Service
Build an Web App that uses this deployed Model
Add Authentication to our Prediction API
Optionally, add Redis to Cache Prediction Results
Deploy the model in the Cloud (AWS)
Please have Anaconda or Miniconda installed on your local machine. I will mostly be using Python 3.5, but Python 2.7 should be fine as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ramesh Sampath</dc:creator><pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/build-data-apps-by-deploying-ml-models-as-api-services.html</guid><category>tutorial</category><category>machine learning</category><category>scikit-learn</category><category>pandas</category><category>tornado</category></item><item><title>Asynchronous Programming with Tornado Web Server</title><link>https://pyvideo.org/pytexas-2014/asynchronous-programming-with-tornado-web-server.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will define what asynchronous means and why it is useful for todays
web applications. I will also give and introduction to using Tornado web
server and go over syntax. Then I'll will do a code walk through of
small project I wrote using Tornado Web Server and virtualenv that
utilizes calls Google maps API and demonstrates asynchronous calls.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kacie Houser</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-05:pytexas-2014/asynchronous-programming-with-tornado-web-server.html</guid><category>asynchronous</category><category>tornado</category></item><item><title>Networking Libraries in Python</title><link>https://pyvideo.org/pycon-au-2011/networking-libraries-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explore the core networking libraries available in
Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python Standard Library. http and urllib package (Python3 and
Python2).&lt;/li&gt;
&lt;li&gt;Capabilities of other 3rd party networking libraries - pycurl and
httplib2. When to use them and why they exist.&lt;/li&gt;
&lt;li&gt;Asychronous Network IO using Twisted Matrix Framework.&lt;/li&gt;
&lt;li&gt;Tornado framework capablities - Generic overview.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumuran</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/networking-libraries-in-python.html</guid><category>framework</category><category>network</category><category>networking</category><category>pycurl</category><category>tornado</category><category>twisted</category><category>urllib</category></item><item><title>Asynchrone Programmierung mit Tornado</title><link>https://pyvideo.org/pycon-de-2013/asynchrone-programmierung-mit-tornado.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Tornado ist eine asynchrone Netzwerkbibliothek mit der Fähigkeit
zehntausende Verbindungen zu verwalten. Dieser Vortrag legt dar, wie
dies erreicht wird und für welche Probleme Tornado die Lösung ist - und
für welche nicht. Mit Praxisbeispielen wird vorgestellt, wie TCP-Server
und Webanwendungen realisiert werden können und wie man asynchron auch
ohne Callback-Jungle programmieren kann.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Ludwig</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/asynchrone-programmierung-mit-tornado.html</guid><category>asynchron</category><category>non-blocking</category><category>tornado</category><category>websockets</category></item><item><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python webapps from zero to 50 million users - A top-down
approach&lt;/p&gt;
&lt;p&gt;Presented by Jinal Jhaveri&lt;/p&gt;
&lt;p&gt;LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and
Bebo. This session will focus on the top-down approach we took to scale
our webapps for millions of users. Here are the 6 topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is performance a big issue for Social Media&lt;/li&gt;
&lt;li&gt;How we profiled our apps and found bottlenecks using custom developed
and existing middleware&lt;/li&gt;
&lt;li&gt;The web application best practices we applied and results obtained&lt;/li&gt;
&lt;li&gt;How we traced database connection leaks&lt;/li&gt;
&lt;li&gt;Our caching strategies and the changes we made to speed up the
memcache client&lt;/li&gt;
&lt;li&gt;Results of our experiment using Paster and Tornado as our web
servers.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jinal Jhaveri</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</guid><category>casestudy</category><category>database</category><category>memcache</category><category>paster</category><category>profiling</category><category>pycon</category><category>pycon2010</category><category>tornado</category></item><item><title>An Introduction to Tornado</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--an-introduction-to-tornado.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Introduction to Tornado&lt;/p&gt;
&lt;p&gt;Presented by Gavin M. Roy&lt;/p&gt;
&lt;p&gt;Tornado is an open source version of the scalable, non-blocking web
server and tools that power FriendFeed. It is not only a web server but
it is a light- weight, use only what you need, web development
framework. In this talk we will review the current state of the Tornado
project, review the features Tornado provides and give examples of how
to implement asynchronous web applications in Tornado.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Tornado is an open source version of the scalable, non-blocking web
server and tools that power FriendFeed. It is not only a web server but
it is a light- weight, use only what you need, web development
framework. In this talk we will review the current state of the Tornado
project, review the features Tornado provides and give examples of how
to implement asynchronous web applications in Tornado.&lt;/p&gt;
&lt;p&gt;Topics covered will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Core Tornado concepts&lt;/li&gt;
&lt;li&gt;Building an asynchronous web application&lt;/li&gt;
&lt;li&gt;Using the Tornado template engine&lt;/li&gt;
&lt;li&gt;Database Interaction&lt;/li&gt;
&lt;li&gt;Secure cookies and Sessions&lt;/li&gt;
&lt;li&gt;Utilizing built-in OAuth Clients for Authentication&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;State of asynchronous drivers available to Tornado&lt;/li&gt;
&lt;li&gt;A light introduction to Tornado internals&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gavin M. Roy</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--an-introduction-to-tornado.html</guid><category>pycon</category><category>pycon2011</category><category>tornado</category></item></channel></rss>