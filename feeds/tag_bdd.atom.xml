<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_bdd.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-11T00:00:00+00:00</updated><entry><title>The ‘Agile Movement’</title><link href="https://pyvideo.org/europython-2013/the-agile-movement.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Russell Sherwood</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/the-agile-movement.html</id><summary type="html"></summary><category term="bdd"></category><category term="continuous-integration"></category><category term="project-management"></category><category term="agile"></category><category term="testing"></category><category term="principles"></category><category term="tdd"></category><category term="pair-programming"></category><category term="XP"></category></entry><entry><title>TDM: Test-Driven Madness</title><link href="https://pyvideo.org/europython-2013/tdm-test-driven-madness.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/tdm-test-driven-madness.html</id><summary type="html"></summary><category term="bdd"></category><category term="XP"></category><category term="testing"></category><category term="tdm"></category><category term="tdd"></category></entry><entry><title>Dalla User Story al test automatico in Django: un percorso step by step per dormire sonni tranquilli</title><link href="https://pyvideo.org/pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Filippo Morelli</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le specifiche poco chiare o approssimative sono una delle piaghe degli
sviluppatori, e portano all’odioso fenomeno dei task non accettati o
rimandati indietro etichettati come BUG.&lt;/p&gt;
&lt;p&gt;Spesso, tuttavia, non c’è proprio nulla di rotto ma solo una serie di
incomprensioni dovute alla scarsa qualità dell’analisi, che provocano,
generalmente, molta frustrazione in chi ha scritto il codice.&lt;/p&gt;
&lt;p&gt;Nel corso del talk vedremo come tutto questo sia evitabile grazie
all’approccio &lt;strong&gt;BDD&lt;/strong&gt; , all’utilizzo di &lt;strong&gt;User Stories&lt;/strong&gt; con
&lt;strong&gt;Acceptance Tests&lt;/strong&gt; scritti usando il linguaggio &lt;em&gt;Gherkin&lt;/em&gt; e
all’esecuzione di test automatici.&lt;/p&gt;
&lt;p&gt;In più, mostreremo una applicazione pratica su un progetto &lt;em&gt;Django&lt;/em&gt;
usando &lt;em&gt;Behave&lt;/em&gt; con &lt;em&gt;behave_django&lt;/em&gt; e &lt;em&gt;Selenium&lt;/em&gt; con &lt;em&gt;splinter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="bdd"></category><category term="continuous-integration"></category><category term="agile"></category><category term="selenium"></category><category term="django"></category><category term="behave"></category></entry><entry><title>Behavior-Driven Python</title><link href="https://pyvideo.org/pycon-us-2018/behavior-driven-python.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Andrew Knight</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/behavior-driven-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Behavior-Driven Development (BDD) is gaining popularity as an improved way to collaborate over product features and tests. In Python, &lt;strong&gt;behave&lt;/strong&gt; is one of the leading BDD test frameworks. Using &lt;strong&gt;behave&lt;/strong&gt;, teams write Gherkin behavior scenarios (e.g., tests) in plain language, and then programmers write Python code to automate the steps. BDD testing is great because tests are self-documenting and steps abide by the DRY principle. An example test could be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Given the DuckDuckGo home page is displayed&lt;/li&gt;
&lt;li&gt;When the user searches the phrase &amp;quot;Python&amp;quot;&lt;/li&gt;
&lt;li&gt;Then search results for &amp;quot;Python&amp;quot; are shown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will teach how to use &lt;strong&gt;behave&lt;/strong&gt; to develop well-designed test scenarios and a robust automation framework. It will focus on the layers of the behave framework: feature files, step definitions, support classes, and config files. A full example project will be hosted on GitHub for audience members to reference after the talk.&lt;/p&gt;
</summary><category term="behavior driven development"></category><category term="bdd"></category><category term="behave"></category></entry><entry><title>BDD To The Bone - Using Behave and Selenium to Test-Drive Web Applications</title><link href="https://pyvideo.org/pytennessee-2017/bdd-to-the-bone-using-behave-and-selenium-to-test-drive-web-applications.html" rel="alternate"></link><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><author><name>Pat Viafore</name></author><id>tag:pyvideo.org,2017-02-05:pytennessee-2017/bdd-to-the-bone-using-behave-and-selenium-to-test-drive-web-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever felt that unit tests just weren't enough? It feels like something always still goes wrong when your customers start to use your application. All your unit tests pass, so what is going on? In this talk, we're going to look how to use the behave library to explore behavior driven development as well as the selenium library to control your web application through a browser.&lt;/p&gt;
</summary><category term="selenium"></category><category term="bdd"></category><category term="behave"></category><category term="test-driver"></category></entry><entry><title>Outside-In TDD</title><link href="https://pyvideo.org/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="testing"></category><category term="tdd"></category><category term="Django"></category><category term="bdd"></category></entry><entry><title>Making Your Application Behave</title><link href="https://pyvideo.org/pycon-au-2012/making-your-application-behave.html" rel="alternate"></link><published>2012-08-22T00:00:00+00:00</published><updated>2012-08-22T00:00:00+00:00</updated><author><name>Benno Rice</name></author><id>tag:pyvideo.org,2012-08-22:pycon-au-2012/making-your-application-behave.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Behave is a tool for behaviour-driven development inspired by the
Cucumber tool for Ruby. It allows developers and stakeholders to agree
on how a particular piece of software should behave using an
English-like Given-When- Then syntax and f&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Behave is a tool for behaviour-driven development inspired by the
Cucumber tool for Ruby. It allows developers and stakeholders to agree
on how a particular piece of software should behave using an
English-like Given-When- Then syntax and for that behaviour for then to
be easily tested in whatever manner is appropriate.&lt;/p&gt;
&lt;p&gt;This presentation will provide an introduction to behaviour-driven
development, behaviour testing in general and the behave tool along with
its advantages over alternatives such as lettuce and freshen.&lt;/p&gt;
</summary><category term="bdd"></category><category term="behave"></category></entry></feed>