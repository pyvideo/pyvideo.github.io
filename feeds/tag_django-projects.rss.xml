<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Software patterns for productive teams</title><link>https://pyvideo.org/europython-2019/software-patterns-for-productive-teams.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software development is a team game.&lt;/p&gt;
&lt;p&gt;When we want to deliver more work, one of the variables that we can
change is the team size. But as we all know, increasing the team size
does not automatically translate into increased productivity &amp;amp; more
features shipped.&lt;/p&gt;
&lt;p&gt;If things are left unmanaged, people can step on each other toes, block
each other &amp;amp; generally decrease the overall productivity of a given
software project.&lt;/p&gt;
&lt;p&gt;In this talk we'll identify different problems teams can face &amp;amp; see how
we can solve them using different strategies &amp;amp; patterns.&lt;/p&gt;
&lt;p&gt;In the end, we want to enable the team to perform better &amp;amp; ship features
with high confidence. We want enable the team &amp;amp; put its potential into
building good software.&lt;/p&gt;
&lt;p&gt;Problems we are going to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Constant merge conflicts / working in the same files&lt;/li&gt;
&lt;li&gt;Blocking each other on different features / Feature deadlock&lt;/li&gt;
&lt;li&gt;Constantly switching between bugfixing &amp;amp; feature development&lt;/li&gt;
&lt;li&gt;Constant regressions and things breaking down&lt;/li&gt;
&lt;li&gt;Fighting with local setup &amp;amp; not being able to properly test things,
especially when working with 3rd parties&lt;/li&gt;
&lt;li&gt;Merge strategies &amp;amp; improving the work with git &amp;amp; GitHub&lt;/li&gt;
&lt;li&gt;Communication between team members &amp;amp; ego fights&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each problem, we are going to propose different solutions with
provided real-life examples from our experience &amp;amp; projects.&lt;/p&gt;
&lt;p&gt;The examples show are going to be in the context of large Python /
Django projects.&lt;/p&gt;
&lt;p&gt;This talk is the natural sequel of the following talks from previous
EuroPythons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;EuroPython 2017 - Practical Debugging - Tips, Tricks and Ways to
think - &lt;a class="reference external" href="https://www.youtube.com/watch?v=9Ys4gCUtTh8"&gt;https://www.youtube.com/watch?v=9Ys4gCUtTh8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2018 - Django structure for scale and longevity -
&lt;a class="reference external" href="https://www.youtube.com/watch?v=yG3ZdxBb1oo"&gt;https://www.youtube.com/watch?v=yG3ZdxBb1oo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radoslav Georgiev</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/software-patterns-for-productive-teams.html</guid><category>Abstractions</category><category>Best Practice</category><category>Communication</category><category>Django Projects</category><category>Management</category></item></channel></rss>