<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-frederic.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-07-25T00:00:00+00:00</updated><entry><title>The past, present, and future of Jupyter and IPython</title><link href="https://pyvideo.org/pydata-seattle-2015/the-past-present-and-future-of-jupyter-and-ipython.html" rel="alternate"></link><published>2015-07-25T00:00:00+00:00</published><updated>2015-07-25T00:00:00+00:00</updated><author><name>Jonathan Frederic</name></author><id>tag:pyvideo.org,2015-07-25:pydata-seattle-2015/the-past-present-and-future-of-jupyter-and-ipython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Seattle 2015
Learn about IPython, Jupyter, and the larger Jupyter universe. A brief history of the project will be covered, including the evolution of Jupyter from IPython. Some of the lesser known Jupyter projects will be described and demoed. Lastly, the future of the project will be discussed, including grant deliverables.&lt;/p&gt;
&lt;p&gt;People often confuse Jupyter and IPython, or are unaware that Jupyter exists and is related to IPython. The true relationship of the two will be described, and a brief history about why both exist will be given.&lt;/p&gt;
&lt;p&gt;The talk will describe the current state of Jupyter, including the notebook and some of the other projects, like JupyterHub, nbgrader, nbconvert, nbviewer, etc. Things that can be demoed live, like JupyterHub, will be demoed live.&lt;/p&gt;
&lt;p&gt;The Jupyter project recently received funding, some of the deliverables on that grant will be described in addition to other changes that the team has been working on.&lt;/p&gt;
</summary></entry><entry><title>Jupyter Advanced Topics Tutorial</title><link href="https://pyvideo.org/scipy-2015/jupyter-advanced-topics-tutorial.html" rel="alternate"></link><published>2015-07-09T00:00:00+00:00</published><updated>2015-07-09T00:00:00+00:00</updated><author><name>Jonathan Frederic</name></author><id>tag:pyvideo.org,2015-07-09:scipy-2015/jupyter-advanced-topics-tutorial.html</id><summary type="html"></summary><category term="tutorial"></category></entry><entry><title>Fundamentals of the IPython Display Architecture+Interactive Widgets</title><link href="https://pyvideo.org/scipy-2014/fundamentals-of-the-ipython-display-architecture.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Brian Granger</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/fundamentals-of-the-ipython-display-architecture.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to use the IPython Notebook’s
display architecture and interactive widgets. As we cover these topics,
attendees will learn about the underlying architecture, how to use
IPython’s existing APIs, and how to extend them for their own purposes.
This tutorial will not cover the basics of the IPython Notebook.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides an architecture for interactive computing. The IPython
Notebook is a web-based interactive computing environment for
exploratory and reproducible computing. With the IPython Notebook, users
create documents, called notebooks, that contain formatted text,
figures, equations, programming code, and code output.&lt;/p&gt;
&lt;p&gt;The IPython Notebook generalizes the notion of output to include images,
LaTeX, video, HTML, JavaScript, PDF, etc. These output formats are
displayed in the Notebook using IPython’s display architecture, embedded
in notebook documents and rendered on the IPython Notebook Viewer. By
taking advantage of these rich output formats users can build notebooks
that include rich representations and visualizations of data and other
content. In this tutorial, we will describe the display architecture,
existing Python APIs and libraries that already use it (mpld3, vincent,
polotly, etc.), and how users can define custom display logic for their
own Python objects.&lt;/p&gt;
&lt;p&gt;As of version 2.0, the IPython Notebook also includes interactive
JavaScript widgets. These widgets provide a way for users to interact
with UI controls in the browser that are tied to Python code in running
in the kernel. We will begin by covering the highest-level API for these
widgets, “interact,” which automatically builds a user interface for
exploring a Python function. Next we will describe the lower-level
widget objects that are included with IPython: sliders, text boxes,
buttons, etc. However, the full potential of the widget framework lies
with its extensibility. Users can create their own custom widgets using
Python, JavaScript, HTML and CSS. We will conclude with a detailed look
at custom widget creation.&lt;/p&gt;
</summary><category term="ipython"></category></entry></feed>