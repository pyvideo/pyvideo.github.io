<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>AutoWIG: Wrapping very large C++ libraries in Python automatically</title><link>https://pyvideo.org/euroscipy-2017/autowig-wrapping-very-large-c-libraries-in-python-automatically.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most of Python and R scientific packages incorporate compiled scientific
libraries to speed up the execution of the code needed for
high-performance computing and to reuse legacy libraries.&lt;/p&gt;
&lt;p&gt;Several semi-automatic solutions exist to wrap these compiled libraries:
SWIG, Cython, Boost.Python.&lt;/p&gt;
&lt;p&gt;However, the process of wrapping a large C++ library is cumbersome and
time consuming, mainly due some high-level constructs that have no
equivalent in Python (template, complex iterators, â€¦).&lt;/p&gt;
&lt;p&gt;In this talk, we introduce AutoWIG, a Python package that enables full
C++ introspection using LLVM/Clang technologies.&lt;/p&gt;
&lt;p&gt;Default strategies have been designed to transform any C++ construct
into Python, using Boost.Python for instance.&lt;/p&gt;
&lt;p&gt;Based on the introspection, a set of classes, methods, namespaces are
retrieve and Boost.Python code is generated using the Mako template
engine.&lt;/p&gt;
&lt;p&gt;Our approach is automatic, extensible, and applies to complex C++
libraries, composed of thousands of classes or incorporating modern
meta-programming constructs.&lt;/p&gt;
&lt;p&gt;For instance, we wrap with AutoWIG the full Clang library to obtain full
introspection on C++ code such as template classes.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://autowig.readthedocs.io/en/latest/examples/index.html"&gt;Jupyter notebooks&lt;/a&gt; and &lt;a class="reference external" href="http://autowig.readthedocs.io/en/latest/install/docker.html"&gt;Docker images&lt;/a&gt; render AutoWIG easy to pick up
and play with.&lt;/p&gt;
&lt;p&gt;The source code is hosted on &lt;a class="reference external" href="http://github.com/StatisKit/AutoWIG"&gt;GitHub&lt;/a&gt; and binaries can be &lt;a class="reference external" href="http://autowig.readthedocs.io/en/latest/install/anaconda.html"&gt;installed&lt;/a&gt;
with Conda.&lt;/p&gt;
&lt;p&gt;Designed as a library, this package can easily be integrated with
compiler toolchains, such as SCons, to ease the development process of
teams.&lt;/p&gt;
&lt;p&gt;A more detailed description of this package can be read on this
&lt;a class="reference external" href="https://arxiv.org/abs/1705.11000"&gt;preprint&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the talk, we will describe AutoWIG main features and cover how
you can generate Python bindings for your C++ libraries illustrating by
various Jupyter notebooks.&lt;/p&gt;
&lt;p&gt;In particular, we will explain how we have bootstrapped the wrapping of
LLVM/Clang in Python, using libclang, to provide unavailable features
such as introspection on C++ templates from Python.&lt;/p&gt;
&lt;p&gt;An example of the wrapping of C++ &lt;a class="reference external" href="http://eigen.tuxfamily.org"&gt;linear algebra&lt;/a&gt; and &lt;a class="reference external" href="http://github.com/StatisKit"&gt;statistical&lt;/a&gt;
libraries to benefit of state-of-the-art graphical model learning
algorithms will be discussed in depth.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pierre Fernique</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/autowig-wrapping-very-large-c-libraries-in-python-automatically.html</guid></item></channel></rss>