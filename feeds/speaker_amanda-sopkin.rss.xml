<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 13:50:00 +0000</lastBuildDate><item><title>The Refactoring Balance Beam: When to Make Changes and When to Leave it Alone</title><link>https://pyvideo.org/pycon-us-2019/the-refactoring-balance-beam-when-to-make-changes-and-when-to-leave-it-alone.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many developers struggle to find the balance between striving to improve
existing code and letting good enough alone by accepting certain
shortcomings. As a new developer to a team it can be difficult to
understand existing strategies and patterns that are sometimes flat out
bad (and often openly acknowledged as such). Often the result of tight
deadlines or unclear specifications, even the best developers write code
they later look back upon with shudders. So how do we decide when
refactoring is worth it? Come learn strategies for refactoring with
minimal impact, methods for working with bad code you can’t change, and
strategies for knowing the difference between what is fixable and what
is better left alone.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amanda Sopkin</dc:creator><pubDate>Sun, 05 May 2019 13:50:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-us-2019/the-refactoring-balance-beam-when-to-make-changes-and-when-to-leave-it-alone.html</guid><category>talk</category></item><item><title>Randomness in Python: Creating Chaos in an Ordered Machine/Controlled Environment</title><link>https://pyvideo.org/pycon-us-2018/randomness-in-python-creating-chaos-in-an-ordered-machinecontrolled-environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many computational needs for randomness--from creating a game to building a simulation involving naturally occurring randomness similar to the physical world. For most purposes using the python math module to create random numbers within a specific range can be done with no further questions, but sometimes we require a more nuanced implementation.&lt;/p&gt;
&lt;p&gt;We will look at both pseudo-random number generators, which use statistically repeatable processes to generate seemingly random series and true random number generators, which inject physical processes like atmospheric noise to generate sequences of numbers. We will discuss the benefits and drawbacks of both approaches and common methods of implementing these two types of generators in python.&lt;/p&gt;
&lt;p&gt;Finally, we will look at several real applications for randomness and discuss the best method for generating “randomness” in each scenario.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amanda Sopkin</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/randomness-in-python-creating-chaos-in-an-ordered-machinecontrolled-environment.html</guid></item></channel></rss>