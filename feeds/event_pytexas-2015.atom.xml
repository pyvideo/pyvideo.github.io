<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pytexas-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-15T00:00:00+00:00</updated><entry><title>Building real-world applications with `asyncio`</title><link href="https://pyvideo.org/pytexas-2015/building-real-world-applications-with-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/building-real-world-applications-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, Eloy Zu√±iga, Jr. and Joel Watts will work through the
process of building an event-driven application using
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__ and web
technologies. By the end, we hope you'll be able to answer the following
questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should I care about async programming at all?&lt;/li&gt;
&lt;li&gt;What is &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; and how is it used?&lt;/li&gt;
&lt;li&gt;How do I use this stuff to solve real-world problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll assume some familiarity with Python, but no prior experience with
async programming is required. Please come with Python 3.4+ installed.&lt;/p&gt;
&lt;p&gt;All the codez can be found in these 2 repos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/eloyz/aioui"&gt;https://github.com/eloyz/aioui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpwatts/aioserver"&gt;https://github.com/jpwatts/aioserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Mezzanine: the hidden gem of the django ecosystem</title><link href="https://pyvideo.org/pytexas-2015/mezzanine-the-hidden-gem-of-the-django-ecosystem.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Micah Yoder</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/mezzanine-the-hidden-gem-of-the-django-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mezzanine is a very capable content management system built upon a
django foundation, but it is not widely known. While built with
developers in mind, it has some great features for users. You can get a
basic site going with a few static pages and a blog in relatively short
order. When you're ready, you can extend it to do whatever you like!
There are add-on projects Cartridge, a shopping cart; and Drum, a Hacker
News/Reddit type site.&lt;/p&gt;
&lt;p&gt;We'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to get started (&amp;quot;Mezzanine is just django&amp;quot;)&lt;/li&gt;
&lt;li&gt;Why it is a django project and not an app&lt;/li&gt;
&lt;li&gt;Customizing with templates&lt;/li&gt;
&lt;li&gt;The django page model&lt;/li&gt;
&lt;li&gt;Cartridge and Drum&lt;/li&gt;
&lt;li&gt;Integrating your own apps&lt;/li&gt;
&lt;li&gt;more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[ This can be made a short talk if that would fit better ]&lt;/p&gt;
</summary></entry><entry><title>SDN: Enabling dynamic routing with python and Open vSwitch (OVS)</title><link href="https://pyvideo.org/pytexas-2015/sdn-enabling-dynamic-routing-with-python-and-ope.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Alan Quillin</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/sdn-enabling-dynamic-routing-with-python-and-ope.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will discuss the challenges with traditional network
routing and how they are being simplified with software defined
networking (SDN) and Open vSwitch (OVS). I will introduce a python
framework called ryu that allows a developer to easily customize and
extend OVS to route network traffic based on their needs. I will demo a
few different topologies and show the code that allows use to customize
routes. Finally I will discuss how we at Rackspace are using this
framework to solve some extremely complex issues.&lt;/p&gt;
</summary></entry><entry><title>The MySQL Utilities</title><link href="https://pyvideo.org/pytexas-2015/the-mysql-utilities.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>David Stokes</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/the-mysql-utilities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MySQL Utilities is both a set of command-line utilities as well as a
Python library for making the common tasks easy to accomplish. The
library is written entirely in Python, meaning that it is not necessary
to have any other tools or libraries installed to make it work. There
are twenty eight utilites that do everything from copying databases to
setting up replilcation with automatic failover in case the master
server fails.&lt;/p&gt;
</summary></entry><entry><title>The Reference Model for Disease Progression and Latest Developments in the MIST</title><link href="https://pyvideo.org/pytexas-2015/the-reference-model-for-disease-progression-and-l.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Jacob Barhak</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/the-reference-model-for-disease-progression-and-l.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Reference Model for Disease progression is a league of disease
models that determines fitness of publicly available populations and
models and assumptions. The Reference Model has grown to the point that
it was hard to maintain the code base and increase the number of
populations. Recent advances with the MIcro Simulation Tool (MIST), that
runs the model, allow object oriented population generation.
Evolutionary Computation, using the Python Inspyred library by Aaron
Garrett, is a key element in MIST population generation. Recent
developments allow easier introductions of variations in population
generation to figure out fitness of unknown base assumptions. This is
powerful in conjunction with High Performance Computing that allows
testing multiple modeling assumptions in parallel.&lt;/p&gt;
&lt;p&gt;Previous work was presented in this and other venues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=vyvxiljc5vA"&gt;https://www.youtube.com/watch?v=vyvxiljc5vA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=AD896WakR94"&gt;https://www.youtube.com/watch?v=AD896WakR94&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Topic Modeling with Python</title><link href="https://pyvideo.org/pytexas-2015/topic-modeling-with-python.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Christine Doig</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/topic-modeling-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Topic models are a suite of algorithms that uncover the hidden thematic
structure in document collections. These algorithms help us develop new
ways to search, browse and summarize large archives of texts. This talk
will introduce topic modeling and one of it's most widely used
algorithms called LDA (Latent Dirichlet Allocation). Attendees will
learn how to use Python to analyze the content of their text documents.
The talk will go through the full topic modeling pipeline: from
different ways of tokenizing your document, to using the Python library
gensim, to visualizing your results and understanding how to evaluate
them.&lt;/p&gt;
</summary></entry><entry><title>Why should I care about asyncio?</title><link href="https://pyvideo.org/pytexas-2015/why-should-i-care-about-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/why-should-i-care-about-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.3 added &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; and 3.4 added
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__. Python
3.5 adds &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; from &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP
492&lt;/a&gt;. What is all this
stuff? Why do we need new syntax? And why should I care?&lt;/p&gt;
&lt;p&gt;This talk is about why async programming is worth caring about and why
Python's approach has me so excited.&lt;/p&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Wrangling Big Data in the Energy Industry</title><link href="https://pyvideo.org/pytexas-2015/wrangling-big-data-in-the-energy-industry.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Paige Bailey</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/wrangling-big-data-in-the-energy-industry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TBA&lt;/p&gt;
</summary></entry><entry><title>Securing Django-Powered Websites</title><link href="https://pyvideo.org/pytexas-2015/securing-django-powered-websites.html" rel="alternate"></link><published>2015-10-11T00:00:00+00:00</published><updated>2015-10-11T00:00:00+00:00</updated><author><name>Nick Thompson</name></author><id>tag:pyvideo.org,2015-10-11:pytexas-2015/securing-django-powered-websites.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Becoming an expert in network security is difficult and time-consuming,
putting it beyond the reach of the average web developer. However,
addition of just a few lines of code to a django project using the
django-secure package can pre-emptively pick much of an attackers
low-hanging fruit. In this meetup, we will secure a simple website using
django-secure, use the command-line tool &amp;quot;checksecure&amp;quot; to do a security
audit, and discuss a few of the attacks django-secure protects against.
In the process, we will learn how to use nginx for more robust security
and discuss how to pass a security audit.&lt;/p&gt;
</summary></entry><entry><title>Python Whut</title><link href="https://pyvideo.org/pytexas-2015/python-whut.html" rel="alternate"></link><published>2015-10-10T00:00:00+00:00</published><updated>2015-10-10T00:00:00+00:00</updated><author><name>TJ Kells</name></author><id>tag:pyvideo.org,2015-10-10:pytexas-2015/python-whut.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Inspired by the classic 'Javascript WAT' talk by Gary Bernhardt, we
explore some gotchas, weird behaviors, and common misconceptions about
python.&lt;/p&gt;
</summary></entry><entry><title>Add a search engine to your application using Xapian</title><link href="https://pyvideo.org/pytexas-2015/add-a-search-engine-to-your-application-using-xap.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Ying Rou Zhao</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/add-a-search-engine-to-your-application-using-xap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Search is a key component of most modern web and mobile applications. If
you want to add a full text search engine to your Python application and
effectively search large volumes of unstructured text, you could use
Xapian which is an open-source, light-weight and very fast C++ library.
Targeted to Python developers, this talk aims at introducing Xapian and
its Python bindings along with basic search concepts. We will show how
to build your search engine using Xapian step by step. Topics such as
indexing, stemming, querying and faceting techniques will be discussed
with code samples. A working prototype of a search engine built with
Xapian will be demonstrated in the end.&lt;/p&gt;
&lt;p&gt;demo repo: &lt;a class="reference external" href="https://github.com/jingle3276/imdb250"&gt;https://github.com/jingle3276/imdb250&lt;/a&gt; slides:
&lt;a class="reference external" href="https://docs.google.com/presentation/d/1wQVQig5Vdj5unQAkQQI8mELmX2zqjQ6S9OqeQIDqgoc/edit#slide=id.p"&gt;https://docs.google.com/presentation/d/1wQVQig5Vdj5unQAkQQI8mELmX2zqjQ6S9OqeQIDqgoc/edit#slide=id.p&lt;/a&gt;&lt;/p&gt;
</summary><category term="search"></category></entry><entry><title>Automate your web deployments with fabric</title><link href="https://pyvideo.org/pytexas-2015/automate-your-web-deployments-with-fabric.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Wes Thomas</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/automate-your-web-deployments-with-fabric.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to use fabric to deploy your web applications and other thoughts on
web deployments in general.&lt;/p&gt;
</summary><category term="fabric"></category><category term="Automation"></category></entry><entry><title>Beginner's Guide to Machine Learning Competitions</title><link href="https://pyvideo.org/pytexas-2015/beginners-guide-to-machine-learning-competitions.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Christine Doig</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/beginners-guide-to-machine-learning-competitions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will offer a hands-on introduction to machine learning and
the process of applying these concepts in a Kaggle competition. We will
introduce attendees to machine learning concepts, examples and flows,
while building up their skills to solve an actual problem. At the end of
the tutorial attendees will be familiar with a real data science flow:
feature preparation, modeling, optimization and validation.&lt;/p&gt;
&lt;p&gt;Packages used in the tutorial will include: IPython notebook,
scikit-learn, pandas and NLTK. We‚Äôll use IPython notebook for
interactive exploration and visualization, in order to gain a basic
understanding of what‚Äôs in the data. From there, we‚Äôll extract features
and train a model using scikit-learn. This will bring us to our first
submission. We‚Äôll then learn how to structure the problem for offline
evaluation and use scikit-learn‚Äôs clean model API to train many models
simultaneously and perform feature selection and hyperparameter
optimization.&lt;/p&gt;
&lt;p&gt;At the end of session, attendees will have time to work on their own to
improve their models and make multiple submissions to get to the top of
the leaderboard, just like in a real competition. Hopefully attendees
will not only leave the tutorial having learned the core data science
concepts and flow, but also having had a great time doing it.&lt;/p&gt;
</summary><category term="tutorial"></category><category term="machine learning"></category><category term="nltk"></category><category term="pandas"></category><category term="scikit-learn"></category><category term="ipython"></category></entry><entry><title>Building a More Inclusive Python Community Culture</title><link href="https://pyvideo.org/pytexas-2015/building-a-more-inclusive-python-community-cultur.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Kojo Idrissa</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/building-a-more-inclusive-python-community-cultur.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Groups that are more diverse are &lt;a class="reference external" href="https://www.google.com/#q=diverse+%22problem+solving%22"&gt;better at solving
problems&lt;/a&gt;
than more homogenous groups. An inclusive group culture maximizes the
odds of attracting and retaining skills &amp;amp; personalities needed to
thrive. The Python community has a pretty good track record on issues
related to inclusion. So, how can you help continue that trend,
especially in your local community? I'll start with a brief &lt;em&gt;WHY&lt;/em&gt; and
&lt;em&gt;WHAT&lt;/em&gt; of Inclusion, but most of this talk focuses on &lt;strong&gt;HOW&lt;/strong&gt; to help
your local corner of the Python community be as Inclusive as possible.&lt;/p&gt;
</summary><category term="inclusion"></category><category term="diversity"></category><category term="Community"></category><category term="Culture"></category></entry><entry><title>Building a Production Quality Project in Python</title><link href="https://pyvideo.org/pytexas-2015/building-a-production-quality-project-in-python.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Clifton Houck</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/building-a-production-quality-project-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation focuses on a variety of tools which can help Python
developers rapidly create production worthy projects by drawing on my
own experience in creating and deploying a Python project called Arsenal
at Rackspace in the space of a few months.&lt;/p&gt;
&lt;p&gt;Arsenal is an open-source service designed to manage and direct a cache
of operating system images on bare-metal nodes. The goal being to
drastically reduce the time it takes to provision a node for
end-users/customers of a bare-metal cloud.&lt;/p&gt;
&lt;p&gt;Links to information about arsenal:
&lt;a class="reference external" href="https://github.com/rackerlabs/arsenal"&gt;https://github.com/rackerlabs/arsenal&lt;/a&gt;
&lt;a class="reference external" href="https://arsenal.readthedocs.org/en/latest/"&gt;https://arsenal.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;
</summary><category term="deployment"></category><category term="devops"></category></entry><entry><title>Building Python apps with Docker</title><link href="https://pyvideo.org/pytexas-2015/building-python-apps-with-docker.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Mark Adams</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/building-python-apps-with-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you haven't heard of Docker yet, its a great tool that allows you
wrap up your app and everything it needs to run: code, runtime, and even
system libraries and guarantee that it will always run the same,
regardless of the environment (local machine, server, or even the
cloud). Whether you're deploying a web app, performing data analysis, or
creating local environments for your dev team or CI builds, Docker can
help.&lt;/p&gt;
&lt;p&gt;I'll give an introduction to Docker, an overview of some of the current
tools in the Docker ecosystem (Docker Machine and Docker Compose) and
demonstrate how to create, build, and deploy Python applications using
Docker.&lt;/p&gt;
&lt;p&gt;This talk is targeted towards web developers, data scientists, or really
anyone who develops using Python that would like to learn more about
Docker and how it can help their projects.&lt;/p&gt;
</summary><category term="Docker"></category></entry><entry><title>Data mining and integration with Python</title><link href="https://pyvideo.org/pytexas-2015/data-mining-and-integration-with-python.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Isaac Vidas</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/data-mining-and-integration-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is an abundance of data in social media sites (Wikipedia,
Facebook, Instagram, etc.) which can be accessed through web APIs. But
how do we know that the data from the Wikipedia article on &amp;quot;Golden Gate
Bridge&amp;quot; goes along with the data from &amp;quot;Golden Gate Bridge&amp;quot; Facebook
page? This represents an important question about integrating data from
various sources.&lt;/p&gt;
&lt;p&gt;In this talk, I'll outline important aspects of structured data mining,
integration and entity resolution methods in a scalable system.&lt;/p&gt;
</summary><category term="Data"></category><category term="Data Analysis"></category><category term="data mining"></category></entry><entry><title>Developing interactive visualizations for the web using Bokeh</title><link href="https://pyvideo.org/pytexas-2015/developing-interactive-visualizations-for-the-web.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Luke Canavan</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/developing-interactive-visualizations-for-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a materials researcher, I was interested in developing dashboards to
interface with lab instruments and make interactive visualizations to
communicate research results. However, I always felt that my rudimentary
JavaScript skills were holding me back. A new python library, Bokeh,
provides a clean, simple way to make visualizations that are intended
for the web while writing none or minimal JavaScript.&lt;/p&gt;
&lt;p&gt;In this talk, I‚Äôll discuss building interactive visualizations using
Bokeh and embedding them within a Flask application.&lt;/p&gt;
</summary></entry><entry><title>End the Holy Wars of Formatting</title><link href="https://pyvideo.org/pytexas-2015/end-the-holy-wars-of-formatting.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Paul Bailey</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/end-the-holy-wars-of-formatting.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers came to the language because of its elegance and
styling. However, we all have a different sense of style and often waste
time in code reviews arguing over different ways to format our code.
This talk will introduce you to a new tool called YAPF which takes a
slightly different approach than other tools like autopep8 and pep8ify.
We'll talk about what is different about YAPF and why its approach is
better suited to make us more happy and efficient developers. The talk
will also showcase some examples of YAPF in everyday use.&lt;/p&gt;
</summary></entry><entry><title>Hello PyBot - Python Chat Bots for Slack</title><link href="https://pyvideo.org/pytexas-2015/hello-pybot-python-chat-bots-for-slack.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Jeff Kramer</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/hello-pybot-python-chat-bots-for-slack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Messaging based bots don't have to just be for twitter botmakers or
chatops. Anyone with some python skills can build a bot to live in their
slack rooms. In this talk we'll get you started: exploring the libraries
you'll need, walking through a sample bot's code, and sharing some tips
and tricks to make the next steps easier.&lt;/p&gt;
</summary></entry><entry><title>I haven't decided</title><link href="https://pyvideo.org/pytexas-2015/i-havent-decided.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/i-havent-decided.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;More info coming soon&lt;/p&gt;
</summary></entry><entry><title>It's Saturday Morning‚ÄîSleep in!, or, Don't Use This Keynote</title><link href="https://pyvideo.org/pytexas-2015/its-saturday-morningsleep-in-or-dont-use-th.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/its-saturday-morningsleep-in-or-dont-use-th.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2015/lightning-talks-20.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/lightning-talks-20.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks, Sign up to give yours at the registration desk.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Managing Technical Debt in (Django) Projects</title><link href="https://pyvideo.org/pytexas-2015/managing-technical-debt-in-django-projects.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Chris Chang</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/managing-technical-debt-in-django-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How did it come to this? How did we end up with an outdated Django
project that no one wants to touch? If starting new projects is fun and
maintaining them is a chore, then getting dropped into an existing
project is hell. For all our sanity, we should get better at recognizing
when we‚Äôre creating too much debt, and develop the skills for paying it
off. We talk about testing, code quality, and coverage. But why? Because
we want to spend less time dealing with technical debt and more time
creating new technical debt (aka new features). Many times, we think we
made the obvious smart decision only to regret it later; you discovered
you‚Äôre damned if you do, damned if you don‚Äôt. Should you write a
monolithic app or tangle of microservices? They‚Äôre all terrible worlds
we‚Äôve made for ourselves. Having maintained, inherited, and created
several large Django projects, I hope to share my experience so you
don‚Äôt have to go through the same pains I did.&lt;/p&gt;
&lt;p&gt;We‚Äôll start off with a few minutes covering basics like testing,
coverage and how they relate to the long term health of a project. Now,
everyone knowing the same terminology, we move on to learning to
recognize the many early warning signs and smells of excessive technical
debt. The most important thing, and most of the material is about
setting up the organizational structure for dealing with technical debt:
code review, continuous integration, rotating developers (no silos),
tradeoffs, making sure you have processes for onboarding new developers,
and strategies for documentation. It‚Äôs changes like these that end up
keeping things moving, not writing ‚Äúbetter‚Äù code.&lt;/p&gt;
&lt;p&gt;Finally, we‚Äôll wrap up with a few minutes talking about Django specific
tips: don‚Äôt customize the admin, tricks for naming things, signals,
organizing tests, and more. Much of this comes from things I wish I knew
at my time at The Texas Tribune, where we needed Django projects
launched the next day, all while maintaining a 6 year old Django
project, and my current time at TabbedOut where I was dropped into
maintaining several long lived software projects.&lt;/p&gt;
</summary></entry><entry><title>Moderation in Automation &amp; Stupid Selenium Tricks</title><link href="https://pyvideo.org/pytexas-2015/moderation-in-automation-stupid-selenium-tricks.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Dakota Smith</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/moderation-in-automation-stupid-selenium-tricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;They say when you have a hammer, everything looks like a nail. When
using Selenium, everything looks like a browser automation test.&lt;/p&gt;
&lt;p&gt;Browser automated tests are your slowest tests to run, so when you don't
need a web browser, you shouldn't be using Selenium.&lt;/p&gt;
&lt;p&gt;With real world examples, this talk will cover scenarios where Selenium
is commonly (mis)used, and then recommend the appropriate change in code
or tool.&lt;/p&gt;
&lt;p&gt;We'll also spend some time on some of the more esoteric features of
Selenium, and demonstrate a handful of &amp;quot;Stupid Selenium Tricks&amp;quot; that
nobody should ever need to know how to do.&lt;/p&gt;
</summary></entry><entry><title>Physical Computing with Python</title><link href="https://pyvideo.org/pytexas-2015/physical-computing-with-python.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Cameron Owens</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/physical-computing-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to the world of robotics using the Python programming
language. We will discuss why Python is so important to this community
and where to get started with physical computing projects based in
Python.&lt;/p&gt;
&lt;p&gt;In this talk we will be introduced to PySerial and doing some
interesting things with Python, a Raspberry Pi, and an Arduino to build
a DIY robot!!&lt;/p&gt;
</summary></entry><entry><title>Python 101.0 - Learn Programming with Python! (Part 1)</title><link href="https://pyvideo.org/pytexas-2015/python-1010-learn-programming-with-python-pa.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Paul Bailey</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/python-1010-learn-programming-with-python-pa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This hands-on coding workshop is for people completely new to
programming. Bring your laptop, running Windows, Mac OS, or Linux.&lt;/p&gt;
&lt;p&gt;We'll be using &lt;a class="reference external" href="https://koding.com/"&gt;Koding.com&lt;/a&gt; for all examples and
assignments. You can sign up for a free account before the class to get
a head start.&lt;/p&gt;
&lt;div class="section" id="class-requirments"&gt;
&lt;h4&gt;Class Requirments&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Computer with a web browser&lt;/li&gt;
&lt;li&gt;Free &lt;a class="reference external" href="https://koding.com/"&gt;Koding.com&lt;/a&gt; account&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Python 101.0 - Learn Programming with Python! (Part 2)</title><link href="https://pyvideo.org/pytexas-2015/python-1010-learn-programming-with-python-pa-0.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Paul Bailey</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/python-1010-learn-programming-with-python-pa-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;1pm - 4pm Continuation of morning Intro to Python hands on coding
workshop.&lt;/p&gt;
</summary></entry><entry><title>Python + Org-mode for fluent output generation of scientific research</title><link href="https://pyvideo.org/pytexas-2015/python-org-mode-for-fluent-output-generation-of.html" rel="alternate"></link><published>2015-10-09T00:00:00+00:00</published><updated>2015-10-09T00:00:00+00:00</updated><author><name>Joon Ro</name></author><id>tag:pyvideo.org,2015-10-09:pytexas-2015/python-org-mode-for-fluent-output-generation-of.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generating outputs (plots, tables, and texts) is an essential part of
scientific research. Usually they are generated with scripts (either
&lt;tt class="docutils literal"&gt;.py or&lt;/tt&gt;.ipynb`), and a natural way of maintaining these scripts is
using either a long script file or multiple short files.&lt;/p&gt;
&lt;p&gt;When one has to update these outputs, the usual workflow is: 1) find the
file(s) and code block(s) inside the file that contains the code for
output generation, 2) re-learn what you did so you can edit the code,
and 3) run the code to generate new outputs.&lt;/p&gt;
&lt;p&gt;Each of these steps has a cognitive overhead (non-fluency), which
hampers your productivity, especially if it has been a while since you
looked at them. Using IPython Notebook facilitates some of the
procedures but it does not solve everything.&lt;/p&gt;
&lt;p&gt;In this talk, I introduce org-mode and some of its functionalities for
all three steps. org-mode is ideal for managing these tasks because it
can minimize the non-fluency. It has a convenient and flexible markup
syntax for hierarchical documents. It uses tree-like headlines, which
make it very easy to organize code and text. It provides a convenient
way to collapse or expand headline blocks and navigate through them. In
addition, one can execute a code block or export the results (or the
source code itself) conveniently inside org-mode. Theoretically, one can
have the entire contents and code for a paper and a presentation inside
one org file. I show examples of how one can leverage these
functionalities to maintain outputs.&lt;/p&gt;
</summary></entry></feed>