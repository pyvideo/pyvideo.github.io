<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 17 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Robust Color Matching of Geospatial Data: An Alternative to Histogram Matching</title><link>https://pyvideo.org/scipy-2017/robust-color-matching-of-geospatial-data-an-alternative-to-histogram-matching.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Color balancing algorithms such as histogram matching are often applied to remote sensing data to make images of the same area taken at different times appear visually consistent with a reference image. However, if the input data differs from the reference image due to clouds, snow, or other issues, existing color balancing methods can produce severe artifacts. We introduce a new method, implemented using the Scipy stack, that fits a smooth color transfer function based on coregistered points and a-priori knowledge of the approximate white balance for the image. This approach provides color consistency with the reference image without introducing visually unrealistic artifacts when clouds and snow are present.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Kington</dc:creator><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-17:scipy-2017/robust-color-matching-of-geospatial-data-an-alternative-to-histogram-matching.html</guid></item><item><title>Anatomy of matplotlib</title><link>https://pyvideo.org/scipy-2015/anatomy-of-matplotlib.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benjamin Root</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/anatomy-of-matplotlib.html</guid><category>Tutorial</category></item><item><title>Touch Your Data! Color 3D Printing with Python</title><link>https://pyvideo.org/scipy-2015/touch-your-data-color-3d-printing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Kington</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/touch-your-data-color-3d-printing-with-python.html</guid></item><item><title>Advanced 3D Seismic Visualizations in Python</title><link>https://pyvideo.org/scipy-2014/advanced-3d-seismic-visualizations-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;3D reflection seismic data collected as a part of the NanTroSEIZE
project revealed complex interactions between active sedimentation and
tectonics in the Nankai Trough, Japan. We implemented co-rendering of
multiple attributes and stratal slicing in python to better visualize
the structural and stratigraphic relationships within the piggyback
slope basins of the accretionary prism.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;3D reflection seismic data acquired &lt;a class="reference external" href="http://www.geology.wisc.edu/~jkington/scipy2014/LocationMap.png"&gt;offshore of southeast
Japan&lt;/a&gt;
as part of the Nankai Trough Seismogenic Zone Experiment (NanTroSEIZE)
provides a unique opportunity to study active accretionary prism
processes. The 3D seismic volume revealed complex interactions between
active sedimentation and tectonics within &lt;a class="reference external" href="http://www.geology.wisc.edu/~jkington/scipy2014/inline_2695_w_interp_brown_seismic.png"&gt;multiple slope
basins&lt;/a&gt;
above the accretionary prism. However, our ability to understand these
interactions was hindered without access to expensive specialized
software packages.&lt;/p&gt;
&lt;p&gt;We implemented stratal slicing of the 3D volume and co-rendering of
multiple attributes in python to better visualize our results. Stratal
slicing allows volumetric attributes to be displayed &lt;a class="reference external" href="http://www.geology.wisc.edu/~jkington/scipy2014/stratal_slicing_animation.gif"&gt;in map view along
an arbitrary geologic
timeline&lt;/a&gt;(~30MB
animated gif) by interpolating between interpreted geologic surfaces.
This enhances the visibility of subtle changes in stratigraphic
architecture through time. Co-rendering coherence on top of seismic
amplitudes facilitates fault interpretation in both cross section and
map view. This technique allowed us to &lt;a class="reference external" href="http://www.geology.wisc.edu/~jkington/scipy2014/ContemporaneousStrikeSlipAndNormalFaults.png"&gt;confidently interpret
faults&lt;/a&gt;
near the limit of seismic resolution.&lt;/p&gt;
&lt;p&gt;The scientific python ecosystem proved to be an effective platform both
for making publication-quality cross sections and for rapidly
implementing state-of-the-art seismic visualization techniques. We
created &lt;a class="reference external" href="http://www.geology.wisc.edu/~jkington/scipy2014/Basin_uplift.png"&gt;publication quality cross
sections&lt;/a&gt;
(some annotations added in Inkscape) and interactive 2D visualizations
in &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;. For 3D display of seismic volumes we used &lt;tt class="docutils literal"&gt;mayavi&lt;/tt&gt;
to easily create interactive scenes. &lt;tt class="docutils literal"&gt;scipy.ndimage&lt;/tt&gt; provided most of
the underlying image processing capability and allowed us to preform
memory-efficient operations on &amp;gt;10GB arrays.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joe Kington</dc:creator><pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-10:scipy-2014/advanced-3d-seismic-visualizations-in-python.html</guid></item></channel></rss>