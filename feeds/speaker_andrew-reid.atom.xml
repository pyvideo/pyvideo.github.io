<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrew-reid.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-17T00:00:00+00:00</updated><entry><title>The OOF Finite Element Tool for Materials Science</title><link href="https://pyvideo.org/scipy-2017/the-oof-finite-element-tool-for-materials-science.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Andrew Reid</name></author><id>tag:pyvideo.org,2017-07-17:scipy-2017/the-oof-finite-element-tool-for-materials-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The NIST-developed Object-Oriented Finite Element code (OOF) is a is a long-standing project to develop a toolset for the segmentation, meshing, and finite-element analysis of microstructural images of materials, intended for the materials science audience, offering a materials-friendly GUI, a Python-based command-line, and Python and C++ APIs for extensibility.
The OOF development team has recently made substantial progress in expanding the scope of this tool to include history-dependent properties, motivated by crystal plasticity. In addition, we have an emerging interest in incorporating the OOF tool into new multi-scale materials analysis frameworks being built in the MGI. Among the challenges are the need to retain a high level of generality and ease of use while making these changes.
The team's development approaches to these recent modifications and emerging goals will be described.&lt;/p&gt;
</summary></entry><entry><title>Object Oriented Finite Elements at NIST</title><link href="https://pyvideo.org/scipy-2012/object-oriented-finite-elements-at-nist.html" rel="alternate"></link><published>2012-07-19T00:00:00+00:00</published><updated>2012-07-19T00:00:00+00:00</updated><author><name>Andrew Reid</name></author><id>tag:pyvideo.org,2012-07-19:scipy-2012/object-oriented-finite-elements-at-nist.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Object Oriented Finite-Element project at NIST
&amp;lt;&lt;a class="reference external" href="http://www.ctcms.nist.gov/oof"&gt;http://www.ctcms.nist.gov/oof&lt;/a&gt;&amp;gt; is a Python and C++ tool designed to
bring sophisticated numerical modeling capabilities to users in the
field of Materials Science. The software provides numerous tools for
constructing finite-element meshes from microstructural images, and for
implementing material properties from a very broad class which includes
elasticity, chemical and thermal diffusion, and electrostatics. The
current series of releases has a robust interface for defining new
nonlinear properties, and provides both first and second order
time-dependence in the equations of motion. The development team is
currently working on a fully-3D version of the code, as well as
expanding the scope of available properties to include surface
interactions, such as surface tension and chemical reactions, and
inequality constraints, such as arise in mechanical surface contact and
plasticity. The software is a hybrid of Python and C++ code, with the
high level user interface and control code in Python, and the heavy
numeric work being done in C++. The software can be operated either as
an interactive, GUI- driven application, as a scripted command-line
tool, or as a supporting library, providing useful access to users of
varying levels of expertise. At every level, the user-interface objects
are intended to be familiar to the materials-science user. This
presentation will focus on an interesting example of a nonlinear
property, called Ramberg-Osgood elasticity, and the process for
incorporating this feature into the OOF architecture.&lt;/p&gt;
</summary><category term="General"></category></entry><entry><title>Plasticity in OOF</title><link href="https://pyvideo.org/scipy-2014/plasticity-in-oof.html" rel="alternate"></link><published>2014-07-13T00:00:00+00:00</published><updated>2014-07-13T00:00:00+00:00</updated><author><name>Andrew Reid</name></author><id>tag:pyvideo.org,2014-07-13:scipy-2014/plasticity-in-oof.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We discuss recent advances in the Object Oriented Finite-Element project
at NIST, a Python and C++ tool designed to bring sophisticated numerical
modeling capabilities to users in the field of Materials Science.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We discuss recent advances in the Object Oriented Finite-Element project
at NIST (also called &lt;a class="reference external" href="http://www.ctcms.nist.gov/oof/oof2"&gt;OOF&lt;/a&gt;), a
Python and C++ tool designed to bring sophisticated numerical modeling
capabilities to users in the field of Materials Science.&lt;/p&gt;
&lt;p&gt;As part of the effort to expand the solid-mechanics capabilities of the
code, the solver has been extended to include the ability to handle
history-dependent properties, such as occur in viscoplastic systems, and
inequality constraints, which are present in conventional isotropic
plasticity, as well as surface interactions.&lt;/p&gt;
&lt;p&gt;This software provides numerous tools for constructing finite-element
meshes from microstructural images, and for implementing material
properties from a very broad class which includes elasticity, chemical
and thermal diffusion, and electrostatics.&lt;/p&gt;
&lt;p&gt;The code is a hybrid of Python and C++ code, with the high level user
interface and control code in Python, and the heavy numeric work being
done in C++. Numerous tools are provided for constructing finite-element
meshes from microstructural images, and for implementing material
properties from a very broad class which includes elasticity, chemical
and thermal diffusion, and electrostatics. The software can be operated
either as an interactive, GUI-driven application, as a scripted
command-line tool, or as a supporting library, providing useful access
to users of varying levels of expertise. At every level, the
user-interface objects are intended to be familiar to the
materials-science user.&lt;/p&gt;
&lt;p&gt;The modular object-oriented design of the code, and the strategy of
separating the finite-element infrastructure from the material
constitutive rules proved itself in implementing the new solid-mechanics
capabilities.&lt;/p&gt;
&lt;p&gt;Development on a fully-3D version of the code has also made significant
progress, overcoming several challenges associated with user-interface
issues. A nontrivial, solved 3D problem will be presented.&lt;/p&gt;
</summary></entry></feed>