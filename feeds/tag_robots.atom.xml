<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_robots.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-09T00:00:00+00:00</updated><entry><title>Multibody Dynamics and Control with Python part 1</title><link href="https://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jason K. Moore</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</summary><category term="robots"></category><category term="simulation"></category><category term="sympy"></category></entry><entry><title>Multibody Dynamics and Control with Python part 2</title><link href="https://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jason K. Moore</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</summary><category term="robots"></category><category term="simulation"></category><category term="sympy"></category></entry><entry><title>PyConAU 2010: Hard Real-time Python, or, Giant Robots of Doom</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--hard-real-time-python--or--giant-ro.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Simon Wittber</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--hard-real-time-python--or--giant-ro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hard Real-time Python, or, Giant Robots of Doom&lt;/p&gt;
&lt;p&gt;Presented by Simon Wittber (Different Methods Pty Ltd)&lt;/p&gt;
&lt;p&gt;Can you use Python to control a pair of 30 tonne robots as they spin at
72 kilometres per hour? Can you use Python to provide realtime collision
avoidance and fly-by-wire control?&lt;/p&gt;
&lt;p&gt;Yes, you can. See how Perth based engineering company Transmin Pty Ltd
(www.transmin.com.au) used Python to deliver a safety-crticial robotic
control system in record time.&lt;/p&gt;
&lt;p&gt;[NOTE: Missing first 2.5 minutes of talk, then camera audio for first
section]&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="robots"></category></entry><entry><title>PyConAU 2010: Lightning talks - Saturday</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--lightning-talks---saturday.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Amy Maree</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--lightning-talks---saturday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks - Saturday&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Amy Maree: Talking about OLPC XO, Python and Pippy.&lt;/li&gt;
&lt;li&gt;05:55 - Jurgen Brendel: Jython and writing performance critical parts
in Java.&lt;/li&gt;
&lt;li&gt;09:50 - Dave Claridge: Embedding Python and robots that play soccer.&lt;/li&gt;
&lt;li&gt;15:10 - Paul Dyson: inflect.py&lt;/li&gt;
&lt;li&gt;20:20 - Richard Jones: cocos2d, a python game library&lt;/li&gt;
&lt;li&gt;25:40 - Brian Quinlan: Why you probably don't want to work for Google&lt;/li&gt;
&lt;li&gt;30:50 - Nick Coghlan: Running Python scripts.&lt;/li&gt;
&lt;li&gt;34:55 - Philip: How to introduce Python to a large organization&lt;/li&gt;
&lt;li&gt;38:55 - Ryan Kelly: with hacks: re-usable tools for with-statement
hackery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PMC curator notes: Paul Dyson's demo at 18:28 is great.&lt;/p&gt;
&lt;p&gt;If anyone know's Philip's last name (and/or if we spelled his first name
wrong, too), let us know in the comments.&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="cocos2d"></category><category term="google"></category><category term="hacks"></category><category term="inflect.py"></category><category term="jython"></category><category term="olpc"></category><category term="pippy"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="robots"></category><category term="scripts"></category><category term="with"></category></entry><entry><title>Python and Robots: Teaching Programming in High School</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Vern Ceder</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--python-and-robots--teaching-programmi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Robots: Teaching Programming in High School&lt;/p&gt;
&lt;p&gt;Presented by Vern Ceder&lt;/p&gt;
&lt;p&gt;Combining Python with inexpensive robots is a very effective way of
teaching programming at the middle and high school levels. Since Python
is easy to understand a constructivist approach is possible - students
learn by creating and running simple programs, observing the results,
and then modifying their code to fix bugs and add functionality.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The approach suggested in this talk is partly based upon that developed
at the Institute for Personal Robots in Education
(&lt;a class="reference external" href="http://wiki.roboteducation.org/"&gt;http://wiki.roboteducation.org&lt;/a&gt;)
by staff from Georgia Tech and Bryn Mawr, combined with my own
experiences teaching programming with Python as described in my talk
&amp;quot;Goodbye, Hello World: Rethinking Teaching with Python&amp;quot;, PyCon 2007, and
my subsequent talks at NECC.&lt;/p&gt;
&lt;p&gt;Because students are able to see what their code is doing and because
Python is easy to understand, students can explore simple programming
concepts, learning features as they need them. This approach increases
both student engagement and retention. It also seems that this approach
is more appealing to girls than a more traditional programming class.&lt;/p&gt;
&lt;p&gt;I'll illustrate my talk with samples of code created by students and
video of the students/robots in action.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Introduction - school background, course structure, origin of approach&lt;/p&gt;
&lt;p&gt;Hardware and computer setup used&lt;/p&gt;
&lt;p&gt;Initial exercises and first projects&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Control of robot&lt;/li&gt;
&lt;li&gt;Program as sequence of commands&lt;/li&gt;
&lt;li&gt;Basic programming concepts - looping, branching, functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Advanced projects&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* obstacle detection
* image processing
* simple AI approaches
&lt;/pre&gt;
&lt;p&gt;Pitfalls and strategies for using robots&lt;/p&gt;
&lt;p&gt;Questions and Suggestions&lt;/p&gt;
</summary><category term="highschool"></category><category term="pycon"></category><category term="pycon2011"></category><category term="robots"></category><category term="teaching"></category></entry></feed>