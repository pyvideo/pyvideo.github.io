<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Ryan Kuhl</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ryan-kuhl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>GraphQL: The Devil’s API</title><link href="https://pyvideo.org/pycon-us-2022/graphql-the-devils-api.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Ryan Kuhl</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/graphql-the-devils-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While there are advantages to using GraphQL vs. traditional REST APIs such as descriptive queries, there are also a plethora of potential pitfalls, such as the n+1 query problem and idiosyncratic fickleness. We leverage data-loaders, async/await, dynamic query generation, and other performance optimizations in GraphQL to create …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While there are advantages to using GraphQL vs. traditional REST APIs such as descriptive queries, there are also a plethora of potential pitfalls, such as the n+1 query problem and idiosyncratic fickleness. We leverage data-loaders, async/await, dynamic query generation, and other performance optimizations in GraphQL to create a flexible, performant interface for our front-end services. Let’s do GraphQL the right way!&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry></feed>