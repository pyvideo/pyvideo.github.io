<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Zac Hatfield-Dodds</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_zac-hatfield-dodds.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Sufficiently Advanced Testing with Hypothesis</title><link href="https://pyvideo.org/euroscipy-2019/sufficiently-advanced-testing-with-hypothesis.html" rel="alternate"></link><published>2019-09-03T00:00:00+00:00</published><updated>2019-09-03T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2019-09-03:/euroscipy-2019/sufficiently-advanced-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hypothesis is a testing package that will search for counterexamples
to your&lt;/div&gt;
&lt;div class="line"&gt;assertions – so you can write tests that provide a high-level
description of your&lt;/div&gt;
&lt;div class="line"&gt;code or system, and let the computer attempt a Popperian
falsification. If it&lt;/div&gt;
&lt;div class="line"&gt;fails, your code is (probably) OK… and if it succeeds you …&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Hypothesis is a testing package that will search for counterexamples
to your&lt;/div&gt;
&lt;div class="line"&gt;assertions – so you can write tests that provide a high-level
description of your&lt;/div&gt;
&lt;div class="line"&gt;code or system, and let the computer attempt a Popperian
falsification. If it&lt;/div&gt;
&lt;div class="line"&gt;fails, your code is (probably) OK… and if it succeeds you have a
minimal input&lt;/div&gt;
&lt;div class="line"&gt;to debug.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Come along and learn the principles of property-based testing, how to
use&lt;/div&gt;
&lt;div class="line"&gt;Hypothesis, and how to use it to check scientific code – whether
highly- polished&lt;/div&gt;
&lt;div class="line"&gt;or quick-and-dirty!&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;You can even use it to test 'black boxes', such as simulations, where
we have no&lt;/div&gt;
&lt;div class="line"&gt;way of independently verifying that some input leads to the right
output!&lt;/div&gt;
&lt;div class="line"&gt;Intrigued? Come and learn about the power of embedding assertions in
your&lt;/div&gt;
&lt;div class="line"&gt;code, and metamorphic relations in your tests!&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Testing research code can be difficult, but is essential for robust
results. Using Hypothesis, a tool for property-based testing, I'll show
how testing can be both easier and dramatically more powerful - even for
complex &amp;quot;black box&amp;quot; codes.&lt;/p&gt;
</content><category term="EuroSciPy 2019"></category></entry><entry><title>Hypothesis Levels Up: codegen, observability, fault localization, and a black-magic backend</title><link href="https://pyvideo.org/north-bay-python-2024/hypothesis-levels-up-codegen-observability-fault-localization-and-a-black-magic-backend.html" rel="alternate"></link><published>2024-05-29T00:00:00+00:00</published><updated>2024-05-29T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2024-05-29:/north-bay-python-2024/hypothesis-levels-up-codegen-observability-fault-localization-and-a-black-magic-backend.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have heard of Hypothesis - a testing library which has been generating test inputs and finding bugs for eleven years now, and used by about 5% of all Python users (Pytest is about 50%).  But have you seen the more advanced tricks?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;GASP&lt;/em&gt; as &lt;cite&gt;hypothesis write&lt;/cite&gt; generates the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have heard of Hypothesis - a testing library which has been generating test inputs and finding bugs for eleven years now, and used by about 5% of all Python users (Pytest is about 50%).  But have you seen the more advanced tricks?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;GASP&lt;/em&gt; as &lt;cite&gt;hypothesis write&lt;/cite&gt; generates the tests themselves!  (without a language model)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;THRILL&lt;/em&gt; at our new observability tooling - you'll never wonder what happened again!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;BRACE YOURSELF&lt;/em&gt; for a workflow with coverage-guided evolution, the black art of SMT solving, and a distributed database!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come one, come all, and enjoy a live demo that you won't soon forget!  With a little luck, you might even find something practical to take away for your own testing....&lt;/p&gt;
</content><category term="North Bay Python 2024"></category></entry><entry><title>No More Nitpicks: effortless cleanup with fixers, formatters, and codemods</title><link href="https://pyvideo.org/pybay-2023/No_More_Nitpicks_effortless_cleanup_with_fixers_formatters_and_codemods.html" rel="alternate"></link><published>2023-10-08T16:45:00+00:00</published><updated>2023-10-08T16:45:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2023-10-08:/pybay-2023/No_More_Nitpicks_effortless_cleanup_with_fixers_formatters_and_codemods.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contemporary idioms and a consistent style can make code a pleasure to work with - but fixing a stream of comments from linters or colleagues is less fun.  Let's see how to have a computer do that instead!&lt;/p&gt;
&lt;p&gt;I'll explain my favorite tools for formatting, updating, refactoring, and generally cleaning …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Contemporary idioms and a consistent style can make code a pleasure to work with - but fixing a stream of comments from linters or colleagues is less fun.  Let's see how to have a computer do that instead!&lt;/p&gt;
&lt;p&gt;I'll explain my favorite tools for formatting, updating, refactoring, and generally cleaning up code; and workflows that make them easy to use - from editor integrations, to pre-commit and continuous integration, to regularly scheduled or one-off cleanup campaigns.&lt;/p&gt;
</content><category term="PyBay 2023"></category></entry><entry><title>Lightning Talks - Sunday</title><link href="https://pyvideo.org/pycon-au-2017/lightning-talks-sunday.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-06:/pycon-au-2017/lightning-talks-sunday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=0m19s"&gt;0:19&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sam Kitajima-Kimbrel&lt;/td&gt;
&lt;td&gt;You Aren't Facebook, and That's OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=4m55s"&gt;4:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jason King&lt;/td&gt;
&lt;td&gt;Don't do what I did&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=9m55s"&gt;9:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Evan Kohilas&lt;/td&gt;
&lt;td&gt;Rubber Snaek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=12m13s"&gt;12:13&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dr. Russell Keith-Magee&lt;/td&gt;
&lt;td&gt;Tools for Apiarists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=17m23s"&gt;17:23&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;William Brown&lt;/td&gt;
&lt;td&gt;Hard CPUs Make Multithreading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=21m54s"&gt;21:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=0m19s"&gt;0:19&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sam Kitajima-Kimbrel&lt;/td&gt;
&lt;td&gt;You Aren't Facebook, and That's OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=4m55s"&gt;4:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jason King&lt;/td&gt;
&lt;td&gt;Don't do what I did&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=9m55s"&gt;9:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Evan Kohilas&lt;/td&gt;
&lt;td&gt;Rubber Snaek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=12m13s"&gt;12:13&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dr. Russell Keith-Magee&lt;/td&gt;
&lt;td&gt;Tools for Apiarists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=17m23s"&gt;17:23&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;William Brown&lt;/td&gt;
&lt;td&gt;Hard CPUs Make Multithreading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=21m54s"&gt;21:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Rueben&lt;/td&gt;
&lt;td&gt;Joining the dots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=24m16s"&gt;24:16&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Malcolm Ramsay&lt;/td&gt;
&lt;td&gt;How I Reinvented Solarized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=26m47s"&gt;26:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zac Hatfield-Dodds&lt;/td&gt;
&lt;td&gt;From REPL to reliable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=31m55s"&gt;31:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Daniel McCarthy&lt;/td&gt;
&lt;td&gt;Hexapod and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=35m35s"&gt;35:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lilly Ryan&lt;/td&gt;
&lt;td&gt;Towns I Wish I Could Visit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=41m00s"&gt;41:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Rothstein&lt;/td&gt;
&lt;td&gt;I'm a mockoholic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=45m54s"&gt;45:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Moore&lt;/td&gt;
&lt;td&gt;ESP32 and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=48m38s"&gt;48:38&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Katie Bell&lt;/td&gt;
&lt;td&gt;Hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=53m37s"&gt;53:37&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Hall&lt;/td&gt;
&lt;td&gt;A Brief History of 'What is the Time?'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="PyCon AU 2017"></category><category term="lightning talks"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://pyvideo.org/pycon-au-2018/escape-from-auto-manual-testing-with-hypothesis.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2018-08-25:/pycon-au-2018/escape-from-auto-manual-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There’s a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from ‘an integer’ to ‘matching this regex’ to ‘Django model’; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There’s a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from ‘an integer’ to ‘matching this regex’ to ‘Django model’; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself!&lt;/p&gt;
</content><category term="PyCon AU 2018"></category></entry><entry><title>Sufficiently Advanced Testing</title><link href="https://pyvideo.org/pycon-au-2019/sufficiently-advanced-testing.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2019-08-03:/pycon-au-2019/sufficiently-advanced-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing tests is great, and generating randomized tests even better... but we can push the techniques further still! What is a metamorphic relation good for?  How could (should?) you use a SAT solver for tests?  What about symbolic execution, guided fuzzing, delta debugging?  Come and find out!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/sufficiently-advanced-testing"&gt;https://2019 …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing tests is great, and generating randomized tests even better... but we can push the techniques further still! What is a metamorphic relation good for?  How could (should?) you use a SAT solver for tests?  What about symbolic execution, guided fuzzing, delta debugging?  Come and find out!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/sufficiently-advanced-testing"&gt;https://2019.pycon-au.org/talks/sufficiently-advanced-testing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 13:30:00 2019 at C3.6&lt;/p&gt;
</content><category term="PyCon AU 2019"></category></entry><entry><title>Stop Writing Tests!</title><link href="https://pyvideo.org/pycon-au-2020/stop-writing-tests.html" rel="alternate"></link><published>2020-09-05T00:00:00+00:00</published><updated>2020-09-05T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2020-09-05:/pycon-au-2020/stop-writing-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/TCT3GH"&gt;https://2020.pycon.org.au/program/TCT3GH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We often think of manual testing as slower and less effective than automated testing,
but most test suites haven't automated that much!  Computers can execute all our
pre-defined tests very quickly - and this is definitely a good thing, especially for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/TCT3GH"&gt;https://2020.pycon.org.au/program/TCT3GH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We often think of manual testing as slower and less effective than automated testing,
but most test suites haven't automated that much!  Computers can execute all our
pre-defined tests very quickly - and this is definitely a good thing, especially for
regression tests - but the tricky parts are still done by humans.&lt;/p&gt;
&lt;p&gt;We select test cases (inputs) and check that the corresponding outputs make sense;
we write functions that &amp;quot;arrange, act, and assert&amp;quot; for our tests; and we decide -
or script via CI systems - which tests to execute and when.&lt;/p&gt;
&lt;p&gt;So lets explore some next-generation tools that we could use to automate these
remaining parts of a testing workflow!&lt;/p&gt;
&lt;p&gt;PROPERTY-BASED TESTING helps you to write more powerful tests by automating selection
of test cases: instead of listing input-output pairs, you describe the kind of data
you want and write a test that passes &lt;em&gt;for all X...&lt;/em&gt;.  We'll see a live demo, and
learn something about the Python builtins in the process!&lt;/p&gt;
&lt;p&gt;CODE INTROSPECTION, and a handy templating tool, can help write tests for you.
Do you need to know any more than which code to test, and what properties should hold?&lt;/p&gt;
&lt;p&gt;ADAPTIVE FUZZING tools take CI to its logical conclusion: instead of running a fixed
set of tests on each push, they sit on a server and run tests full-time... fine-tuning
themselves to find bugs in &lt;em&gt;your&lt;/em&gt; project and pulling each new commit as it lands!&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll know what these three kinds of tools can do -
and how to get started with automating the &lt;em&gt;rest&lt;/em&gt; of your testing tomorrow.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Sat Sep  5 11:35:00 2020 at Curlyboi&lt;/p&gt;
</content><category term="PyCon AU 2020"></category><category term="PyCon"></category><category term="PyConAU"></category><category term="PyConline"></category><category term="Python"></category><category term="ZacHatfield-Dodds"></category><category term="pyconau"></category><category term="pyconau_2020"></category></entry><entry><title>Fantastic Bugs (and how I find them)</title><link href="https://pyvideo.org/pycon-latam-2021/fantastic-bugs-and-how-i-find-them.html" rel="alternate"></link><published>2021-08-27T00:00:00+00:00</published><updated>2021-08-27T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2021-08-27:/pycon-latam-2021/fantastic-bugs-and-how-i-find-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I build open-source testing tools, like Hypothesis and Pytest and I've seen some fascinating bugs. Join me for a tour of the best, and we'll explore why bugs happen, my 'property-based' tricks for finding them, and how to prevent them. If, of course, the weird behaviour really is a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I build open-source testing tools, like Hypothesis and Pytest and I've seen some fascinating bugs. Join me for a tour of the best, and we'll explore why bugs happen, my 'property-based' tricks for finding them, and how to prevent them. If, of course, the weird behaviour really is a bug!&lt;/p&gt;
</content><category term="PyCon Latam 2021"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://pyvideo.org/pycon-us-2019/escape-from-auto-manual-testing-with-hypothesis.html" rel="alternate"></link><published>2019-05-02T13:20:00+00:00</published><updated>2019-05-02T13:20:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2019-05-02:/pycon-us-2019/escape-from-auto-manual-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve ever written some tests, or discovered that tested code can
still have bugs, this tutorial is for you. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/"&gt;Hypothesis&lt;/a&gt; lets you write
tests that should pass for every case… then finds bugs by generating
inputs you wouldn’t have looked for. Even better, you get to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve ever written some tests, or discovered that tested code can
still have bugs, this tutorial is for you. &lt;a class="reference external" href="https://hypothesis.readthedocs.io/"&gt;Hypothesis&lt;/a&gt; lets you write
tests that should pass for every case… then finds bugs by generating
inputs you wouldn’t have looked for. Even better, you get to save time
by writing fewer but more powerful tests, so this process improves your
productivity as well as your code!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn what property-based testing is, and how it relates to &lt;a class="reference external" href="https://www.hillelwayne.com/post/a-bunch-of-tests/"&gt;other
kinds of tests&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Write your first property-based test, with example code and an
overview of common tactics!&lt;/li&gt;
&lt;li&gt;Describe inputs - use and compose strategies, then define your own or
infer them from other code!&lt;/li&gt;
&lt;li&gt;Use &lt;tt class="docutils literal"&gt;hypothesis.stateful&lt;/tt&gt; to generate and test whole programs&lt;/li&gt;
&lt;li&gt;Get the low-down on Hypothesis: performance tips, debugging tools,
and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’ll be ready to find real bugs by half way through the tutorial; and
by the end you’ll be ready to use Hypothesis in ways we never imagined.&lt;/p&gt;
&lt;p&gt;There will be dedicated time for Q&amp;amp;A about applying Hypothesis (or PBT
ideas) in your domain, testing anything from web apps to big data
pipelines to other languages, before you leave to drag the world kicking
and screaming into a new and terrifying age of high quality software.&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="tutorial"></category></entry><entry><title>Introduction to Property-Based Testing</title><link href="https://pyvideo.org/pycon-us-2021/introduction-to-property-based-testing.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass?&lt;/p&gt;
&lt;p&gt;Property-based testing might be just what you need!&lt;/p&gt;
&lt;p&gt;After this introduction to property-based testing, you’ll be comfortable with Hypothesis, a friendly but powerful property-based testing library. You’ll also known how to check and enforce robust properties in your code, and will have hands-on experience finding real bugs.&lt;/p&gt;
&lt;p&gt;Where traditional example-based tests require you to write out each exact scenario to check - for example, assert divide(3, 4) == 0.75, property-based tests are generalised and assisted. You describe what kinds of inputs are allowed, write a test that should pass for any of them, and Hypothesis does the rest!&lt;/p&gt;
&lt;p&gt;from hypothesis import given, strategies as st&lt;/p&gt;
&lt;p&gt;&amp;#64;given(a=st.integers(), b=st.integers())
def test_divide(a, b):
result = a / b
assert a == b * result
There’s the obvious ZeroDivisionError, fixable with b = st.integers().filter(lambda b: b != 0), but there’s another bug lurking. Can you see it? Hypothesis can!&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Introduction to Property Based Testing</title><link href="https://pyvideo.org/pycon-us-2022/introduction-to-property-based-testing.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to discover that you missed a bug because of some edge case you didn’t know about? Does it ever feel like writing tests is just a formality - that you already know your test cases will pass?&lt;/p&gt;
&lt;p&gt;Property-based testing might be just what you need!&lt;/p&gt;
&lt;p&gt;After this introduction to property-based testing, you’ll be comfortable with Hypothesis, a friendly but powerful property-based testing library. You’ll also known how to check and enforce robust properties in your code, and will have hands-on experience finding real bugs.&lt;/p&gt;
&lt;p&gt;Where traditional example-based tests require you to write out each exact scenario to check - for example, assert divide(3, 4) == 0.75 - property-based tests are generalised and assisted. You describe what kinds of inputs are allowed, write a test that should pass for any of them, and Hypothesis does the rest!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;from hypothesis import given, strategies as st&lt;/p&gt;
&lt;p&gt;&amp;#64;given(a=st.integers(), b=st.integers())
def test_divide(a, b):
result = a / b
assert a == b * result&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There’s the obvious ZeroDivisionError, fixable with b = st.integers().filter(lambda b: b != 0), but there’s another bug lurking. Can you see it? Hypothesis can!&lt;/p&gt;
&lt;p&gt;AUDIENCE&lt;/p&gt;
&lt;p&gt;This tutorial is for anybody who regularly writes tests in Python, and would like an easier and more effective way to do so. We assume that you are comfortable with traditional unit tests - reading, running, and writing; as well as familar with ideas like assertions. Most attendees will have heard &amp;quot;given, when, then&amp;quot; and &amp;quot;arrange, act, assert&amp;quot;. You may or may not have heard of pre- and post-conditions - we will explain what &amp;quot;property-based&amp;quot; means without reference to Haskell or anything algebraic.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Async the Easy Way: scaling structured concurrency with static and dynamic analysis</title><link href="https://pyvideo.org/pycon-us-2023/async-the-easy-way-scaling-structured-concurrency-with-static-and-dynamic-analysis.html" rel="alternate"></link><published>2023-04-21T00:00:00+00:00</published><updated>2023-04-21T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2023-04-21:/pycon-us-2023/async-the-easy-way-scaling-structured-concurrency-with-static-and-dynamic-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async python is a relatively recent addition to Python’s longstanding
concurrency options of processes and threads - and offers a very
different programming experience. Where processes run independently and
threads switch at the whim of the kernel scheduler, async tasks take a
different tradeoff: managing shared state is as …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async python is a relatively recent addition to Python’s longstanding
concurrency options of processes and threads - and offers a very
different programming experience. Where processes run independently and
threads switch at the whim of the kernel scheduler, async tasks take a
different tradeoff: managing shared state is as easy as in
single-threaded synchronous Python, but it’s on you to ensure that there
are enough &lt;tt class="docutils literal"&gt;await&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;async for&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;async with&lt;/tt&gt; statements where
tasks can switch to make steady progress.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll explore the advantages of structured concurrency -
especially error handling, timeouts, cancellation, and readable code -
and both convenient and reliable ways to mitigate the problems of
cooperative concurrency (when one &lt;em&gt;uncooperative&lt;/em&gt; slow task can bring
your whole program to a halt). I’ll introduce you to static analysis
with flake8-trio and explain how to write your own AST-based tools, and
show how dynamic analysis can help us catch anything that slips past
that quick and convenient check.&lt;/p&gt;
&lt;p&gt;With a system like this in place, you don’t have to be an experienced or
paranoid software engineer to write beautiful async code - to serve or
scrape a website, control a bundle of processes, or write a game - it
just reads like normal Python, and your tools will catch you if you
fall.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Introduction to Property-Based Testing</title><link href="https://pyvideo.org/pycon-us-2023/introduction-to-property-based-testing.html" rel="alternate"></link><published>2023-04-20T00:00:00+00:00</published><updated>2023-04-20T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2023-04-20:/pycon-us-2023/introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to
discover that you missed a bug because of some edge case you didn’t know
about? Does it ever feel like writing tests is just a formality - that
you already know your test cases will pass …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to
discover that you missed a bug because of some edge case you didn’t know
about? Does it ever feel like writing tests is just a formality - that
you already know your test cases will pass?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Property-based testing might be just what you need!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After this introduction to property-based testing, you’ll be comfortable
with Hypothesis, a friendly but powerful property-based testing library.
You’ll also known how to check and enforce robust properties in your
code, and will have hands-on experience finding real bugs.&lt;/p&gt;
&lt;p&gt;Where traditional example-based tests require you to write out each
exact scenario to check - for example, &lt;tt class="docutils literal"&gt;assert divide(3, 4) == 0.75&lt;/tt&gt; -
property-based tests are &lt;em&gt;generalised&lt;/em&gt; and &lt;em&gt;assisted&lt;/em&gt;. You describe what
kinds of inputs are allowed, write a test that should pass for any of
them, and Hypothesis does the rest!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;hypothesis&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;given&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strategies&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nd"&gt;&amp;#64;given&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integers&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;test_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;   &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;   &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;There’s the obvious &lt;tt class="docutils literal"&gt;ZeroDivisionError&lt;/tt&gt;, fixable with
&lt;tt class="docutils literal"&gt;b = &lt;span class="pre"&gt;st.integers().filter(lambda&lt;/span&gt; b: b != 0)&lt;/tt&gt;, but there’s another bug
lurking. Can you see it? Hypothesis can!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience:&lt;/strong&gt; This tutorial is for anybody who regularly writes tests in
Python, and would like an easier and more effective way to do so. We
assume that you are comfortable with traditional unit tests - reading,
running, and writing; as well as familar with ideas like assertions.
Most attendees will have heard &amp;quot;given, when, then&amp;quot; and &amp;quot;arrange, act,
assert&amp;quot;. You may or may not have heard of pre- and post-conditions - we
will explain what &amp;quot;property-based&amp;quot; means without reference to Haskell or
anything algebraic.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Notes, Groups and Stars: exceptional new features of Python 3.11!</title><link href="https://pyvideo.org/pycon-us-2025/notes-groups-and-stars-exceptional-new-features-of-python-311.html" rel="alternate"></link><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2025-05-17:/pycon-us-2025/notes-groups-and-stars-exceptional-new-features-of-python-311.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notes, Groups, and Stars aren't just for concerts - they're also exception-ally useful features for error handling, new in Python 3.11!&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore a neglected corner of Python: exceptions and error handling! What would we like Python to do for us, when our programs do something …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notes, Groups, and Stars aren't just for concerts - they're also exception-ally useful features for error handling, new in Python 3.11!&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore a neglected corner of Python: exceptions and error handling! What would we like Python to do for us, when our programs do something we didn't expect? How can we help other programmers understand failures in our code?&lt;/p&gt;
&lt;p&gt;We'll take a broad view, starting from fundamentals like exceptions vs return values, before zooming through a history of tracebacks and chaining, and arriving at the glorious present with .add_note(), ExceptionGroup, and except*. You'll leave not just educated but enthused and excited - but perhaps even a ten-ex except-star developer!&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Escape from auto-manual testing with Hypothesis!</title><link href="https://pyvideo.org/pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2018-06-09:/pylondinium-2018/escape-from-auto-manual-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There's a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from 'an integer' to 'matching this regex' to 'Django model'; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted someone else to write your test cases? There's a library for that!&lt;/p&gt;
&lt;p&gt;You declare a strategy for inputs - from 'an integer' to 'matching this regex' to 'Django model'; Hypothesis finds bugs and reports minimal failing examples. Too good to be true? Come see for yourself!&lt;/p&gt;
</content><category term="PyLondinium 2018"></category></entry><entry><title>Fully Automated Testing</title><link href="https://pyvideo.org/pyohio-2021/fully-automated-testing.html" rel="alternate"></link><published>2021-07-31T00:00:00+00:00</published><updated>2021-07-31T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2021-07-31:/pyohio-2021/fully-automated-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I maintain Hypothesis, a library to automatically generate inputs to
your tests (like &amp;quot;a list of integers&amp;quot; or &amp;quot;an object matching this
database schema&amp;quot;) -- so you don't have to think of all the edge-cases
yourself. But we can go further! Hypothesis now ships with a
&amp;quot;Ghostwriter&amp;quot; which can write …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I maintain Hypothesis, a library to automatically generate inputs to
your tests (like &amp;quot;a list of integers&amp;quot; or &amp;quot;an object matching this
database schema&amp;quot;) -- so you don't have to think of all the edge-cases
yourself. But we can go further! Hypothesis now ships with a
&amp;quot;Ghostwriter&amp;quot; which can write tests for you, based on the function and
argument names you choose (and docstrings and type annotations, if you
use those).&lt;/p&gt;
&lt;p&gt;If you're tired of testing but still don't want bugs, come see how we
can take automation to a whole new level :-)&lt;/p&gt;
</content><category term="PyOhio 2021"></category></entry><entry><title>Test Research Code the Easy Way: By Generating Random Inputs with Hypothesis</title><link href="https://pyvideo.org/scipy-2019/test-research-code-the-easy-way-by-generating-random-inputs-with-hypothesis.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2019-07-11:/scipy-2019/test-research-code-the-easy-way-by-generating-random-inputs-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing correct software is difficult, and even scientists don’t always get it right. Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing correct software is difficult, and even scientists don’t always get it right. Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian falsification. If it fails, your code is (probably) OK… and if it succeeds you have a minimal input to debug. Come along and learn the principles of property-based testing, how to use Hypothesis, and how to use it to check scientific code – whether highly-polished or quick-and-dirty!&lt;/p&gt;
</content><category term="SciPy 2019"></category></entry><entry><title>Escape from Auto manual Testing with Hypothesis!</title><link href="https://pyvideo.org/scipy-2019/escape-from-auto-manual-testing-with-hypothesis.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2019-07-10:/scipy-2019/escape-from-auto-manual-testing-with-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian falsification. If it fails, your code is (probably) OK… and if it succeeds you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hypothesis is a testing package that will search for counterexamples to your assertions – so you can write tests that provide a high-level description of your code or system, and let the computer attempt a Popperian falsification. If it fails, your code is (probably) OK… and if it succeeds you have a minimal input to debug. Come along and learn the principles of property-based testing, how to use Hypothesis, and how to use it to check scientific code – whether highly-polished or quick-and-dirty!&lt;/p&gt;
</content><category term="SciPy 2019"></category><category term="tutorial"></category></entry><entry><title>A Tour of Property Based Testing how I find bugs with the scientific method</title><link href="https://pyvideo.org/scipy-2021/a-tour-of-property-based-testing-how-i-find-bugs-with-the-scientific-method.html" rel="alternate"></link><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2021-07-12:/scipy-2021/a-tour-of-property-based-testing-how-i-find-bugs-with-the-scientific-method.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests can be helpful: they can find bugs in new code, check for regressions in old code, and clarify precisely what the code is meant to do. On the other hand, writing tests is often tedious - and it's rare to think of an error when testing that you forgot …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests can be helpful: they can find bugs in new code, check for regressions in old code, and clarify precisely what the code is meant to do. On the other hand, writing tests is often tedious - and it's rare to think of an error when testing that you forgot when writing the code. Even worse, as scientists we write code &lt;em&gt;because&lt;/em&gt; we don't yet know the correct answer - so how can we possibly test it? The answer is to generate many inputs, and check whether the code does something _wrong_, like changing the data you save-then-load. Whether you're a novice Pythonista or gnarled wizard, this Talk about property-based testing with Hypothesis will educate, entertain, and help take your testing to the next level.&lt;/p&gt;
</content><category term="SciPy 2021"></category></entry><entry><title>Hands On Introduction to Property Based Testing for Science</title><link href="https://pyvideo.org/scipy-2021/hands-on-introduction-to-property-based-testing-for-science.html" rel="alternate"></link><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2021-07-12:/scipy-2021/hands-on-introduction-to-property-based-testing-for-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code is now a critical part of almost all research, whether for communication or for data collection and analysis. Unfortunately, producing reliably error-free code is an open problem, and result-altering bugs are regularly found (and usually fixed) in everything from preprints to foundational open source packages. I believe there …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code is now a critical part of almost all research, whether for communication or for data collection and analysis. Unfortunately, producing reliably error-free code is an open problem, and result-altering bugs are regularly found (and usually fixed) in everything from preprints to foundational open source packages. I believe there is a core, fixable problem: writing tests is tedious, difficult, and only covers edge cases we know to test for. The solution? Use tools that write tests for us! Crucially, this isn't a pipe-dream: it's a proven technique that the scipy ecosystem has already started to use, and just needs to scale up. Hypothesis - &lt;a class="reference external" href="https://hypothesis.readthedocs.io/"&gt;https://hypothesis.readthedocs.io/&lt;/a&gt; - is basically a superhuman experimentalist. You write a test function and describe what inputs it should pass for; and the Hypothesis engine searches for a falsifying example. This process often tries inputs that I wouldn't think of, such as Numpy arrays with a sizezero dimension or a &amp;amp;quot;signalling&amp;amp;quot; NaN represented by a non-standard bit-pattern; and as a result it regularly uncovers bugs that users &lt;em&gt;and authors&lt;/em&gt; didn't know were possible. The Tutorial is designed for researchers and software engineers who regularly write code that other scientists rely on. You might be 'the Python person' in your lab; a core developer of one of the core SciPy or PyData libraries, or an enthusiast looking for a valuable way to contribute to that ecosystem. Attendees are expected to be familiar with Numpy and Pandas, as well as with traditional unit testing (i.e. pytest or unittest), and ideally with writing traditional tests for numerical or data-centric code. You don't need to be an expert in any of these, but the Tutorial will have plenty of content to engage those who are! If this sounds too good to be true, Hypothesis has quickly found bugs in approximately everything it has even been pointed at, including Numpy, Astropy, Xarray, CPython, and of course Hypothesis itself. If you already have a large stack of bug reports, maybe ask that it only be used for new features!&lt;/p&gt;
</content><category term="SciPy 2021"></category><category term="tutorial"></category></entry><entry><title>Day 1 Lightning Talks | SciPy 2022</title><link href="https://pyvideo.org/scipy-2022/day-1-lightning-talks-scipy-2022.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Oliver Zeigermann</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/day-1-lightning-talks-scipy-2022.html</id><content type="html"></content><category term="SciPy 2022"></category></entry><entry><title>Day 2 Lightning Talks | SciPy 2022</title><link href="https://pyvideo.org/scipy-2022/day-2-lightning-talks-scipy-2022.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Oliver Zeigermann</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/day-2-lightning-talks-scipy-2022.html</id><content type="html"></content><category term="SciPy 2022"></category></entry><entry><title>Introduction to Property Based Testing</title><link href="https://pyvideo.org/scipy-2022/introduction-to-property-based-testing.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests can be helpful: they can find bugs in new code, check for regressions in old code, and clarify precisely what the code is meant to do. On the other hand, writing tests is often tedious - and it's rare to think of an error when testing that you forgot …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests can be helpful: they can find bugs in new code, check for regressions in old code, and clarify precisely what the code is meant to do. On the other hand, writing tests is often tedious - and it's rare to think of an error when testing that you forgot when writing the code. Even worse, as scientists we write code &lt;em&gt;because&lt;/em&gt; we don't yet know the correct answer - so how can we possibly test it?  My favorite answer is to think about the higher-level properties of your system: even without the correct answer on hand, we can check that energy was conserved, reading gives us back the data we just wrote or converted, and so on.&lt;/p&gt;
&lt;p&gt;Property-based testing &lt;em&gt;encourages and rewards&lt;/em&gt; this style of thinking!  Once you have a property or invariant in mind, it's easy to express that as a test - and then a library like Hypothesis will search for inputs that make your test fail.  Instead of testing specific input-output pairs like &lt;cite&gt;1 + 2 == 3&lt;/cite&gt;, you might claim that &lt;cite&gt;a + b == b + a&lt;/cite&gt;... and be informed that this is true for integers, but not for floats (not even &lt;em&gt;finite&lt;/em&gt; floats!). This tutorial is for people comfortable with decorators and with reading, running, and writing Python unit tests.&lt;/p&gt;
&lt;p&gt;It's structured as four blocks, each consisting of a short talk, live-coded demo, and extensive exercises:
1. Property-Based Testing 101: core concepts and the core of the Hypothesis library
2. Describe your Data: from numbers, to arrays, to recursive and more complicated things
3. Common Tests: from &amp;quot;&amp;quot;does not crash&amp;quot;&amp;quot; to &amp;quot;&amp;quot;write+read == noop&amp;quot;&amp;quot; to 'metamorphic relations'
4. Putting it into Practice: use what you've learned to find real bugs in a real project!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/rsokl/testing-tutorial"&gt;https://github.com/rsokl/testing-tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="SciPy 2022"></category></entry><entry><title>SciPy Tools Plenary Session - Day 1 | SciPy 2022</title><link href="https://pyvideo.org/scipy-2022/scipy-tools-plenary-session-day-1-scipy-2022.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/scipy-tools-plenary-session-day-1-scipy-2022.html</id><content type="html"></content><category term="SciPy 2022"></category></entry></feed>