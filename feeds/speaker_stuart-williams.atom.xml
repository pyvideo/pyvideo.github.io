<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stuart-williams.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-02T09:00:00+00:00</updated><entry><title>Python by Immersion</title><link href="https://pyvideo.org/pycon-us-2019/python-by-immersion.html" rel="alternate"></link><published>2019-05-02T09:00:00+00:00</published><updated>2019-05-02T09:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2019-05-02:pycon-us-2019/python-by-immersion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very fast introduction to Python for software developers with
experience in other languages. Instead of a traditional top-down
presentation of Python's features, syntax, and semantics, students are
immersed in the language bottom-up with hundreds of small examples using
the interactive interpreter to quickly gain familiarity with most of the
core language features. Special attention is given to concepts in Python
that often trip up those new to the language.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Python by Immersion</title><link href="https://pyvideo.org/pycon-us-2018/python-by-immersion.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/python-by-immersion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A fast introduction to Python for software developers with experience in other programming languages. Instead of a traditional top-down presentation of Python's features, syntax, and semantics, students are immersed in the language bottom-up with hundreds of small examples using the interactive interpreter to quickly gain familiarity with most of the core language features. Special attention is given to concepts in Python that often trip up those new to the language.&lt;/p&gt;
&lt;p&gt;Note that this tutorial is not designed to pair with the Python by Epiphanies tutorial, i.e. we recommend you sign up for one or the other, but no both.&lt;/p&gt;
</summary></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2018/python-epiphanies.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/python-epiphanies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is for those who've been using Python for a while and would consider themselves at an intermediate level but are looking to get to the next level.&lt;/p&gt;
&lt;p&gt;We'll explore core language features, look a bit under the hood, and to understand and learn how not to be too afraid of bytecode, monkey patching, decorators, and metaclasses.&lt;/p&gt;
&lt;p&gt;In many ways Python is very similar to other programming languages.  However, in a few subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and have difficulty getting past it.  Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious or confusing.  This tutorial will help deconstruct some common incorrect assumptions about Python.&lt;/p&gt;
&lt;p&gt;If in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, like you have most of the puzzle pieces but they don't quite fit together yet, or like there are parts of Python you just don't get, this may be a good tutorial for you.&lt;/p&gt;
</summary></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2017/python-epiphanies.html" rel="alternate"></link><published>2017-05-18T00:00:00+00:00</published><updated>2017-05-18T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2017-05-18:pycon-us-2017/python-epiphanies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is for developers who've been using Python for a while and
would consider themselves at an intermediate level, but are looking for
a deeper understanding of the language. It focuses on how Python differs
from other languages in subtle but important ways that are often
confusing, and it demystifies a number of language features that are
sometimes misunderstood.&lt;/p&gt;
&lt;p&gt;In many ways Python is very similar to other programming languages.
However, in a few subtle ways it is quite different, and many software
developers new to Python, after their initial successes, hit a plateau
and have difficulty getting past it. Others don't hit or perceive a
plateau, but still find some of Python's features a little mysterious or
confusing. This tutorial will help deconstruct some common incorrect
assumptions about Python.&lt;/p&gt;
&lt;p&gt;If in your use of Python you sometimes feel like an outsider, like
you're missing the inside jokes, like you have most of the puzzle pieces
but they don't quite fit together yet, or like there are parts of Python
you just don't get, this may be a good tutorial for you.&lt;/p&gt;
&lt;p&gt;After completing this tutorial you'll have a deeper understanding of
many Python features. Here are some of the topics we'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How objects are created and names are assigned to them&lt;/li&gt;
&lt;li&gt;Ways to modify a namespace: assignment, import, function definition
and call, and class definition and instantiation. Much of the
tutorial is structured around namespaces and how they get modified to
help you understand most of the differences between variables in
other languages and those in Python, including&lt;ul&gt;
&lt;li&gt;why Python has neither pass-by-value nor pass-by-reference
function call semantics,&lt;/li&gt;
&lt;li&gt;and why parameters passed to a function can sometimes be changed
by it and sometimes cannot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Iterables, iterators, and the iterator protocol, including how to
make class instances iterable&lt;/li&gt;
&lt;li&gt;How to use generators to make your code easier to read and understand&lt;/li&gt;
&lt;li&gt;Hacking classes after their definition, and creating classes without
a class statement, as an exercise to better understand how they work&lt;/li&gt;
&lt;li&gt;Bound versus unbound methods, how they're implemented, and
interesting things you can do with bound methods&lt;/li&gt;
&lt;li&gt;How and why you might want to create or use a partial function&lt;/li&gt;
&lt;li&gt;Example use-cases of functions as first-class objects&lt;/li&gt;
&lt;li&gt;Unpacking and packing arguments with * and ** on function call and
definition&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bring a laptop with Python 3 and Jupyter Notebook.&lt;/p&gt;
</summary></entry><entry><title>Python by Immersion</title><link href="https://pyvideo.org/pycon-us-2016/stuart-williams-python-by-immersion-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/stuart-williams-python-by-immersion-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Stuart Williams&lt;/p&gt;
&lt;p&gt;A very fast introduction to Python for software developers with experience in other languages.  Instead of a traditional top-down presentation of Python's features, syntax, and semantics, students are immersed in the language bottom-up with hundreds of small examples using the interactive interpreter to quickly gain familiarity with most of the core language features.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2016/stuart-williams-python-epiphanies-pycon-2016.html" rel="alternate"></link><published>2016-05-30T00:00:00+00:00</published><updated>2016-05-30T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2016-05-30:pycon-us-2016/stuart-williams-python-epiphanies-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker:&lt;/p&gt;
&lt;p&gt;This tutorial is for developers who've been using Python for a while and would consider themselves at an intermediate level, but are looking for a deeper understanding of the language.  It focuses on how Python differs from other languages in subtle but important ways that are often confusing, and it demystifies a number of language features that are sometimes misunderstood.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python 101</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--python-101.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101&lt;/p&gt;
&lt;p&gt;Presented by Stuart Williams&lt;/p&gt;
&lt;p&gt;This half-day tutorial presents the basics of Python to beginning and
intermediate programmers. It pairs well with ''Python 102'' which
follows a similar outline but goes much deeper.&lt;/p&gt;
&lt;p&gt;Rather than starting with &amp;quot;Hello, world!&amp;quot;, we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python
before covering blocks and scripts.&lt;/p&gt;
&lt;p&gt;The tutorial is divided into short sections, each with presentation and
hands- on exercises, to quickly cover lots of ground.&lt;/p&gt;
&lt;p&gt;Advanced topics are introduced throughout and covered in &amp;quot;extra credit&amp;quot;
exercises such that more advanced participants can learn at their own
pace.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Programmers with experience in other languages who want a fast hands-on
introduction to Python. Content will target both Python 3.1 and 2.6.&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as
much of an overview of Python before the tutorial as you have time to in
order to get more out of the tutorial. Two angles on this are the Python
Quick Reference and the Python website's tutorial.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numbers and operators&lt;/li&gt;
&lt;li&gt;Strings - immutability, operators, methods, functions, and formatting&lt;/li&gt;
&lt;li&gt;Introspection/Discovery&lt;/li&gt;
&lt;li&gt;Tuples and Lists&lt;/li&gt;
&lt;li&gt;List Comprehensions&lt;/li&gt;
&lt;li&gt;Objects and Names&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;li&gt;Loops and Blocks&lt;/li&gt;
&lt;li&gt;Iterables&lt;/li&gt;
&lt;li&gt;Generator Expressions&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Simple Classes&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The handouts at
&lt;a class="reference external" href="http://swilliams.ca%20/python-tutorials"&gt;http://swilliams.ca/python-tutorials&lt;/a&gt;.
If you're interested in the software I wrote to deliver the talk drop me
a line. My address is in the handouts.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>Python 102</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--python-102.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-102.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 102&lt;/p&gt;
&lt;p&gt;Presented by Stuart Williams&lt;/p&gt;
&lt;p&gt;This half-day tutorial presents intermediate and some advanced features
of Python to beginning and intermediate programmers. It pairs well with
Python 101 which follows a similar outline but at a more introductory
level.&lt;/p&gt;
&lt;p&gt;Rather than starting with &amp;quot;Hello, world!&amp;quot;, we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python
before covering blocks and scripts.&lt;/p&gt;
&lt;p&gt;The tutorial is divided into short sections, each with presentation and
hands- on exercises, to quickly cover lots of ground.&lt;/p&gt;
&lt;p&gt;Advanced topics are introduced throughout and covered in &amp;quot;extra credit&amp;quot;
exercises such that more advanced participants can learn at their own
pace.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Programmers with experience in other languages who want a fast hands-on
introduction to intermediate and some advanced features of Python.
Content will target both Python 3.1 and 2.6.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numbers and Strings - operators, functions and methods&lt;/li&gt;
&lt;li&gt;Introspection&lt;/li&gt;
&lt;li&gt;Sequences - overview, concepts, and methods&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Dynamic Classes&lt;/li&gt;
&lt;li&gt;Iterators and Generators&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Standard Library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as
much of an overview of Python before the tutorial as you have time to in
order to get more out of the tutorial. Two angles on this are the Python
Quick Reference and the Python website's tutorial.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2012/python-epiphanies.html" rel="alternate"></link><published>2012-03-08T00:00:00+00:00</published><updated>2012-03-08T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2012-03-08:pycon-us-2012/python-epiphanies.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial is for software developers who've been using Python with
success for a while but are looking for a deeper understanding of the
language. It demystifies a number of language features that are often
misunderstood.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Saturday morning</title><link href="https://pyvideo.org/pycon-us-2013/saturday-morning-lightning-talks-0.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Jesse Jiryu Davis</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/saturday-morning-lightning-talks-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning talks from Saturday morning.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=0s"&gt;00:00&lt;/a&gt; - ToRo (Tornado Coroutines) - Jesse Jiryu Davis&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=4m45s"&gt;04:45&lt;/a&gt; - Retask: Queue for Humans - Kushal Das&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=9m15s"&gt;09:15&lt;/a&gt; - Pythonic Andragogy: Python for Adults - Kirby
Urner&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=16m"&gt;16:00&lt;/a&gt; - How and why a Java expert switched to Python -
Ron Cox&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=22m10s"&gt;22:10&lt;/a&gt; - Coding across America - Andrew&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=25m9s"&gt;25:05&lt;/a&gt; - gitstreams.com - Justin Abrahms&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=26m58s"&gt;26:58&lt;/a&gt; - Jesse Noller interlude&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=30m30s"&gt;30:30&lt;/a&gt; - PyCharm - Dmitry Jemerov&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=36m10s"&gt;36:10&lt;/a&gt; - NASperry Pi - Mark Ransom&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=41m30s"&gt;41:30&lt;/a&gt; - NES, JavaScript and a Browser - Guto Maia&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=46m5s"&gt;46:05&lt;/a&gt; - EuroSciPy 2013: Come to our conference! - Mike
Müller&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=48m7s"&gt;48:07&lt;/a&gt; - PyWeek: Join our week and write a game! -
Richard Jones&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=51m13s"&gt;51:13&lt;/a&gt; - Don't make people watch what you type -
Stuart Williams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=54m"&gt;54:00&lt;/a&gt; - Job Security (in Python) - Christopher
Neugebauer&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=pYZNLOKEE5I#t=59m9s"&gt;59:09&lt;/a&gt; - Using Python to make universal education truly
universal: KA Lite - Jamie Alexandre&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2013/python-epiphanies-0.html" rel="alternate"></link><published>2013-03-14T00:00:00+00:00</published><updated>2013-03-14T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2013-03-14:pycon-us-2013/python-epiphanies-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial is for software developers who've been using Python with
success for a while but are looking for a deeper understanding of the
language. It focuses on how Python differs from other languages in
subtle but important ways that often confuse folks, and it demystifies a
number of language features that are sometimes misunderstood.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2014/python-epiphanies-1.html" rel="alternate"></link><published>2014-04-11T00:00:00+00:00</published><updated>2014-04-11T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2014-04-11:pycon-us-2014/python-epiphanies-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial is for developers who've been using Python for a while and
would consider themselves at an intermediate level, but are looking for
a deeper understanding of the language. It focuses on how Python differs
from other languages in subtle but important ways that are often
confusing, and it demystifies a number of language features that are
sometimes misunderstood.&lt;/p&gt;
</summary></entry><entry><title>Python by Immersion</title><link href="https://pyvideo.org/pycon-us-2015/python-by-immersion.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/python-by-immersion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very fast introduction to Python for software developers with
experience in other languages. Instead of a traditional top-down
presentation of Python's features, syntax, and semantics, students are
immersed in the language bottom-up with hundreds of small examples using
the interactive interpreter to quickly gain familiarity with most of the
core language features.&lt;/p&gt;
</summary></entry><entry><title>Python Epiphanies</title><link href="https://pyvideo.org/pycon-us-2015/python-epiphanies-2.html" rel="alternate"></link><published>2015-04-10T00:00:00+00:00</published><updated>2015-04-10T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2015-04-10:pycon-us-2015/python-epiphanies-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is for developers who've been using Python for a while and
would consider themselves at an intermediate level, but are looking for
a deeper understanding of the language. It focuses on how Python differs
from other languages in subtle but important ways that are often
confusing, and it demystifies a number of language features that are
sometimes misunderstood.&lt;/p&gt;
</summary></entry></feed>