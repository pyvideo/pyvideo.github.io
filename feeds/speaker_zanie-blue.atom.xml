<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Zanie Blue</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_zanie-blue.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>The past, present, and future of virtual environments</title><link href="https://pyvideo.org/pycon-us-2025/the-past-present-and-future-of-virtual-environments.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Zanie Blue</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/the-past-present-and-future-of-virtual-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Virtual environments have become an essential part of the Python developer experience, but recent tools provide workflows where virtual environments are no longer the center of user interactions.&lt;/p&gt;
&lt;p&gt;This talk explores the evolution of virtual environments, from their originating motivations and the role they serve today to a vision …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Virtual environments have become an essential part of the Python developer experience, but recent tools provide workflows where virtual environments are no longer the center of user interactions.&lt;/p&gt;
&lt;p&gt;This talk explores the evolution of virtual environments, from their originating motivations and the role they serve today to a vision for the future, with a particular focus on how virtual environments are becoming automated, hidden, and disposable.&lt;/p&gt;
&lt;p&gt;Virtual environments were introduced in 2004. We’ll briefly discuss the history of the tools built to manage virtual environments. We’ll talk about the differences between imperative and declarative environment management. Then, we’ll dive into the user experiences powered by automating management of environments, using uv as a primary example.&lt;/p&gt;
&lt;p&gt;Finally, we’ll discuss limitations of the existing tooling and how they may be overcome in the future, such as, improving the IDE experience for scripts with inline metadata, locking build requirements, and using declarative interfaces for global environments.&lt;/p&gt;
&lt;p&gt;Some prior knowledge of virtual environments and Python packaging will be necessary to reason about the broader questions posed, but the talk will attempt to give the necessary background — deep Python knowledge will not be needed. The talk will be focused on user experience and abstractions rather than implementation details.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>