<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andy-fundinger.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-16T00:00:00+00:00</updated><entry><title>What to do with a Flock of lambdas</title><link href="https://pyvideo.org/pybay-2019/what-to-do-with-a-flock-of-lambdas.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2019-08-16:pybay-2019/what-to-do-with-a-flock-of-lambdas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</summary></entry><entry><title>Making Multiple Inheritance not work in Python</title><link href="https://pyvideo.org/pylondinium-2019/making-multiple-inheritance-not-work-in-python.html" rel="alternate"></link><published>2019-06-16T00:00:00+00:00</published><updated>2019-06-16T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2019-06-16:pylondinium-2019/making-multiple-inheritance-not-work-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is a destructive examination of the workings of Python's inheritance model. We'll learn how it works by breaking it. After starting with a discussion of how we got to where we are, we'll then move on to the hooks that Python gives us to interact with it. These include using the metaclass to alter the class during construction, as well as using the &lt;em&gt;__init_subclass__&lt;/em&gt; and &lt;em&gt;__subclasscheck__&lt;/em&gt; hooks.&lt;/p&gt;
&lt;p&gt;Particular examples will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implementing interfaces in Python&lt;/li&gt;
&lt;li&gt;Turning inheritance off in favor of explicit reuse&lt;/li&gt;
&lt;li&gt;Simplifying classes by disabling a selection of features you don't wish to use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While none of these are meant to be particularly useful implementations, they make good use cases to show the machinery.&lt;/p&gt;
</summary></entry><entry><title>8 things that happen at the dot: Attribute Access &amp; Descriptors</title><link href="https://pyvideo.org/pycon-us-2019/8-things-that-happen-at-the-dot-attribute-access-descriptors.html" rel="alternate"></link><published>2019-05-04T14:35:00+00:00</published><updated>2019-05-04T14:35:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/8-things-that-happen-at-the-dot-attribute-access-descriptors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We rarely think about the dot “.” between our objects and their fields,
but there are quite a lot of things that happen every time we use one in
Python. This talk will explore the details of what happens, how the
descriptor protocol works, and how it can be used to alter the Python
object model.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>A Taxonomy of Decorators: A-E</title><link href="https://pyvideo.org/pycascades-2019/a-taxonomy-of-decorators-a-e.html" rel="alternate"></link><published>2019-02-24T00:00:00+00:00</published><updated>2019-02-24T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2019-02-24:pycascades-2019/a-taxonomy-of-decorators-a-e.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since their addition in Python 2.4, Decorators have become an established part of the Python language and many of our development projects. This talk will look at the purpose, implementation, and pitfalls of five types of decorators, from the Argument changing decorator to the Execution decorator.&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/a-taxonomy-of-decorators/"&gt;https://2019.pycascades.com/talks/a-taxonomy-of-decorators/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The 8 things that happen at the "."</title><link href="https://pyvideo.org/pylondinium-2018/the-8-things-that-happen-at-the.html" rel="alternate"></link><published>2018-06-10T00:00:00+00:00</published><updated>2018-06-10T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2018-06-10:pylondinium-2018/the-8-things-that-happen-at-the.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We rarely think about the dot &amp;quot;.&amp;quot; between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python. This talk will include the commonly known functions, (dict, getattr, etc), but especially focus on the Descriptor Protocol.&lt;/p&gt;
&lt;p&gt;Copyright belongs to the speaker.&lt;/p&gt;
</summary></entry><entry><title>A Taxonomy of Decorators: A-E</title><link href="https://pyvideo.org/europython-2018/a-taxonomy-of-decorators-a-e.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/a-taxonomy-of-decorators-a-e.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will briefly go over the various decorator syntaxes before
breaking up the common usages of decorators into 5 categories.
Effectively, these are design patterns for decorators. The usages to be
considered are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A - Argument Changing Decorators – Decorators that change a
function’s arguments, including changing its signature&lt;/li&gt;
&lt;li&gt;B - Binding Decorators – Decorators that implement the Descriptor
Protocol, such as the builtins: &amp;#64;property, &amp;#64;classmethod, and
&amp;#64;staticmethod&lt;/li&gt;
&lt;li&gt;C - Control Flow Decorators – Decorators that change when or whether
the function will be called, such as &amp;#64;retry or &amp;#64;lrucache&lt;/li&gt;
&lt;li&gt;D - Descriptive Decorators – Decorators that do not change the
function, but create a reference to it elsewhere, like pytest.mark
and flask.app.route&lt;/li&gt;
&lt;li&gt;E - Execution Decorators – Decorators that retrieve source code
and/or AST and alter it.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>The 8 things that happen at the "." between an object and the attribute</title><link href="https://pyvideo.org/pygotham-2017/the-8-things-that-happen-at-the-between-an-object-and-the-attribute.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/the-8-things-that-happen-at-the-between-an-object-and-the-attribute.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We rarely think about the dot &amp;quot;.&amp;quot; between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python. This talk will explore the details of what happens, how the descriptor protocol works, and how it can be used to alter the Python object model.&lt;/p&gt;
&lt;p&gt;Actions to be explored:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The instance __dict__ is checked.&lt;/li&gt;
&lt;li&gt;The class __dict__ is checked.&lt;/li&gt;
&lt;li&gt;The base classes __dicts__ are checked.&lt;/li&gt;
&lt;li&gt;__getattr__ runs.&lt;/li&gt;
&lt;li&gt;__getattribute__ runs.&lt;/li&gt;
&lt;li&gt;The __get__ method on the object in the class __dict__ is called.&lt;/li&gt;
&lt;li&gt;The object in the class __dict__ is checked for a __set__ method.&lt;/li&gt;
&lt;li&gt;raise AttributeError&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the talk will focus on 6 &amp;amp; 7 to explain the Descriptor protocol. Examples will include altering method binding and property behaviors, as well as supporting method implementation reuse via Descriptors.&lt;/p&gt;
</summary></entry><entry><title>Practical Approaches to Problems in the Financial Industry using Python</title><link href="https://pyvideo.org/pygotham-2014/practical-approaches-to-problems-in-the-financial.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/practical-approaches-to-problems-in-the-financial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this lecture we will show an applied case with Ipython notebook as a
quant explores a typical financial problem with the help of various
Python libraries and software engineering. The specific case is a small
scale market risk platform using historical simulation to calculate
value at risk.&lt;/p&gt;
</summary></entry></feed>