<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pygotham-2019.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>1000x faster data manipulation: vectorizing with Pandas and Numpy</title><link href="https://pyvideo.org/pygotham-2019/1000x-faster-data-manipulation-vectorizing-with-pandas-and-numpy.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Nathan Cheever</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/1000x-faster-data-manipulation-vectorizing-with-pandas-and-numpy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The data transformation code you're writing is correct, but potentially
1000x slower than it needs to be! In this talk, we will go over multiple
ways to enhance a data transformation workflow with Pandas and Numpy by
showing how to replace slower, perhaps more familiar, ways of operating on
Pandas data frames with faster-vectorized solutions to common use cases
like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;if-else logic in applied row-wise functions&lt;/li&gt;
&lt;li&gt;dictionary lookups with conditional logic&lt;/li&gt;
&lt;li&gt;Date comparisons and calculations&lt;/li&gt;
&lt;li&gt;Regex and string column manipulation&lt;/li&gt;
&lt;li&gt;and others! ...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;without needing a beefier computer, writing Cython, or other libraries
outside the Pandas ecosystem.&lt;/p&gt;
</summary></entry><entry><title>A Tale of Two Factors: A Deep Dive into Two Factor Authentication</title><link href="https://pyvideo.org/pygotham-2019/a-tale-of-two-factors-a-deep-dive-into-two-factor-authentication.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Kelley Robinson</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/a-tale-of-two-factors-a-deep-dive-into-two-factor-authentication.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join us as we explore the modern landscape of Two Factor Authentication
(2FA). This talk will discuss the history of authentication, why 2FA is a
necessary security layer, and introduce the different types of factors
available.&lt;/p&gt;
&lt;p&gt;We'll dive into a detailed comparison of methods like SMS, Soft Tokens, Push
Authentication, and YubiKeys. From cryptographic security strength to user
experience, we will break down the benefits and downsides for the different
methods and provide guidance for choosing the right methods for your
business. Finally, the session will walk through example Python code for
implementing time-based one time passcodes (Soft Tokens) like you see in
apps like Google Authenticator, Authy, or Duo.&lt;/p&gt;
</summary></entry><entry><title>A Time Traveler's Perspective on Software Developer Code of Ethics</title><link href="https://pyvideo.org/pygotham-2019/a-time-travelers-perspective-on-software-developer-code-of-ethics.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/a-time-travelers-perspective-on-software-developer-code-of-ethics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the history part in &amp;quot;Ethics for Software Developer&amp;quot;, I have heard that
there was no code of ethics for software developers in the 21st century. Now
that I have time-traveled here from the 23rd century, I realized it was
true. I will share the accepted wisdom from the 23rd century about how code
of ethics and licensing looks like.&lt;/p&gt;
&lt;p&gt;Content Warning: There will be brief mentions of pornography
and pornography-centric applications.&lt;/p&gt;
</summary></entry><entry><title>Airflow in Practice: How I Learned to Stop Worrying and Love DAGs</title><link href="https://pyvideo.org/pygotham-2019/airflow-in-practice-how-i-learned-to-stop-worrying-and-love-dags.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Sarah Schattschneider</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/airflow-in-practice-how-i-learned-to-stop-worrying-and-love-dags.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Heard of Apache Airflow? Do you work with Apache Airflow or want to work
with Apache Airflow? Ever wonder how to test Airflow better? Have you
considered all data workflow use cases for Airflow? Come be reminded of key
concepts and then we will dive into Airflow’s value add, common use cases,
and best practices. Some of the use cases that will be discussed include,
Extract Transform Load (ETL) jobs, efficiently snapshot databases, and ML
feature extraction.&lt;/p&gt;
</summary></entry><entry><title>Analyzing the Evolution of Irish Traditional Music using Python</title><link href="https://pyvideo.org/pygotham-2019/analyzing-the-evolution-of-irish-traditional-music-using-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Neehaarika Velavarthy</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/analyzing-the-evolution-of-irish-traditional-music-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celtic music, and more specifically, Irish music has been around for at
least a few hundred years now. Being folk music, most of these tunes have
been passed down the generations by ear causing many variations of the same
tune to co-exist. Even today, as the tunes travel geographically, &lt;strong&gt;they
develop slight variations&lt;/strong&gt; according to the players' individual quirks.&lt;/p&gt;
&lt;p&gt;Over recent times, websites like [thesession.org](&lt;a class="reference external" href="https://thesession.org/"&gt;https://thesession.org/&lt;/a&gt;)
are beginning to collect well-known tunes in databases made up of player
contributions. This particular website features both the &lt;em&gt;abc&lt;/em&gt; and &lt;em&gt;midi&lt;/em&gt;
formats in addition to the staff notation. Players are allowed to contribute
their own versions of popular tunes which makes this site very conducive to
observing &lt;strong&gt;patterns in the variations&lt;/strong&gt;. This analysis will explore &lt;strong&gt;how
these tunes changes across their newer versions and what makes some tunes
change more than the others&lt;/strong&gt;. It will define metrics by which tune
variations can be quantified and visualized and it will try to unearth
common patterns in these variations.&lt;/p&gt;
</summary></entry><entry><title>Because Equity: Python FTW</title><link href="https://pyvideo.org/pygotham-2019/because-equity-python-ftw.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Meg Ray</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/because-equity-python-ftw.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to teach Python, how Python fits into the broader CS for All movement in
education, and what you can do to make a difference no matter what your
experience level.&lt;/p&gt;
</summary></entry><entry><title>Beyond cProfile: performance optimization with sampling profilers and logging</title><link href="https://pyvideo.org/pygotham-2019/beyond-cprofile-performance-optimization-with-sampling-profilers-and-logging.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/beyond-cprofile-performance-optimization-with-sampling-profilers-and-logging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your software is too slow, and you need to figure out why. It's natural to
reach for the cProfile profiler that's built-in to Python, but as a
deterministic profiler it suffers from a number of limitations.&lt;/p&gt;
&lt;p&gt;In this talk you'll learn about better tools for performance optimization:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sampling profilers, which distort the results less and give you a calltree
overview of your running application.&lt;/li&gt;
&lt;li&gt;Trace-based logging, which can help you figure out not only which
functions are slow, but also which particular inputs are causing the
slowness.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Build your Python Extensions with Rust!</title><link href="https://pyvideo.org/pygotham-2019/build-your-python-extensions-with-rust.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/build-your-python-extensions-with-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When your Python needs to be fast, one powerful tool is the ability to write
compiled extension modules. Normally this is done using the C API, but that
requires managing reference counts and memory allocation and is nearly
impossible to do &lt;em&gt;correctly&lt;/em&gt; for non-trivial programs. In this talk, we'll
look at how you can write extension modules in Rust - a memory-safe systems
programming language that is increasingly popular as a replacement for C and
C++, and the [most loved language in the Stack Overflow developer survey 4
years running](&lt;a class="reference external" href="https://insights.stackoverflow.com/survey/2019#technology-_"&gt;https://insights.stackoverflow.com/survey/2019#technology-_&lt;/a&gt;-
most-loved-dreaded-and-wanted-languages).&lt;/p&gt;
&lt;p&gt;This talk will focus on &lt;cite&gt;pyo3&lt;/cite&gt; and &lt;cite&gt;milksnake&lt;/cite&gt;, two popular libraries that
provide very different approaches for writing Rust extensions; it will cover
a basic introduction to the libraries, and compare their relative strengths
and weaknesses. These will also be compared to C and Cython extension
modules from a performance, safety and maintainability perspective.&lt;/p&gt;
</summary></entry><entry><title>Distributed Machine Learning with Python</title><link href="https://pyvideo.org/pygotham-2019/distributed-machine-learning-with-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Brad Miro</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/distributed-machine-learning-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the amount of data continues to grow, the need for distributed machine
learning continues to grows with it. We'll discuss techniques and methods
for distributing machine learning training such as data parallelism and
model parallelism. We'll then discuss how to build scalable machine learning
systems and show two examples of this using Python: one with Apache Spark
MLlib, one with TensorFlow.&lt;/p&gt;
</summary></entry><entry><title>Dungeons &amp; Dragons &amp; Python: Epic Adventures with Prompt-Toolkit and Friends</title><link href="https://pyvideo.org/pygotham-2019/dungeons-dragons-python-epic-adventures-with-prompt-toolkit-and-friends.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Mike Pirnat</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/dungeons-dragons-python-epic-adventures-with-prompt-toolkit-and-friends.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Embark on an epic adventure through the twisty passageways of [a Python
application developed to help Dungeon Masters run Dungeons &amp;amp; Dragons
sessions](&lt;a class="reference external" href="https://github.com/mpirnat/dndme"&gt;https://github.com/mpirnat/dndme&lt;/a&gt;). You’ll be joined in your quest
by mighty allies such as [Prompt-Toolkit](&lt;a class="reference external" href="https://python-prompt"&gt;https://python-prompt&lt;/a&gt;-
toolkit.readthedocs.io/en/master/),
[Attrs](&lt;a class="reference external" href="https://www.attrs.org/en/stable/"&gt;https://www.attrs.org/en/stable/&lt;/a&gt;),
[Click](&lt;a class="reference external" href="https://click.palletsprojects.com/en/7.x/"&gt;https://click.palletsprojects.com/en/7.x/&lt;/a&gt;), and
[TOML](&lt;a class="reference external" href="https://pypi.org/project/toml/"&gt;https://pypi.org/project/toml/&lt;/a&gt;) as you brave the perils of
application structure, command completion, dynamic plugin discovery, data
modeling, turn tracking, and maybe even some good old-fashioned dice
rolling. Treasure and glory await!&lt;/p&gt;
</summary></entry><entry><title>Generating Nintendo Music Over the Phone with Magenta</title><link href="https://pyvideo.org/pygotham-2019/generating-nintendo-music-over-the-phone-with-magenta.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Sam Agnew</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/generating-nintendo-music-over-the-phone-with-magenta.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this live coded quest we will walk through how to generate music with
Magenta using a neural network trained on the soundtracks from classic
Nintendo games, and create a Flask application which uses the Twilio API to
provide a phone number people can call to listen to this music in real time.&lt;/p&gt;
</summary></entry><entry><title>How to size up a Python project for data freelancing</title><link href="https://pyvideo.org/pygotham-2019/how-to-size-up-a-python-project-for-data-freelancing.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Susan Sun</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/how-to-size-up-a-python-project-for-data-freelancing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most dreaded questions a freelancer hears is &amp;quot;Okay, so how long
do you think this will take you?&amp;quot;  Without tons of experience and deep self-
awareness, it's always hard to size up a data project.  Even with
experience, sometimes there are spectacular failures.  Let's have a fun
discussion about a few key ways to size up a project, including how to ask
good scoping questions, how to budget for unexpected and time-consuming
scenarios.  The discussion will also be liberally sprinkled with personal
anecdotes of scoping failures from my career as a data freelancer.&lt;/p&gt;
</summary></entry><entry><title>Improving PyPI's security with Two Factor Authentication</title><link href="https://pyvideo.org/pygotham-2019/improving-pypis-security-with-two-factor-authentication.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/improving-pypis-security-with-two-factor-authentication.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since March, [Trail of Bits](&lt;a class="reference external" href="https://www.trailofbits.com"&gt;https://www.trailofbits.com&lt;/a&gt;) has worked with
the PSF to implement and land major security improvements in
[Warehouse](&lt;a class="reference external" href="https://github.com/pypa/warehouse/"&gt;https://github.com/pypa/warehouse/&lt;/a&gt;), the codebase that drives
[PyPI](&lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt;). This talk will cover just one of those
improvements: the addition of two factor authentication to user logins.
Attendees will learn about the technical details of two factor schemes, the
security properties they can (and can not) provide, and the process for
making major changes to core Python infrastructure.&lt;/p&gt;
</summary></entry><entry><title>Interact with your code: Using interactive widgets in Jupyter Notebooks</title><link href="https://pyvideo.org/pygotham-2019/interact-with-your-code-using-interactive-widgets-in-jupyter-notebooks.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Ridhi Mahajan</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/interact-with-your-code-using-interactive-widgets-in-jupyter-notebooks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the most important parts of a data scientist’s job is to be able to
visualize and get insights from data. What if there was a simpler way to
explore data? What if we could change input variables simply by sliding a
mouse or we could control the degree of the polynomial by selecting from a
drop-down menu, and then see the output change instantaneously? This would
allow data scientists to quickly prototype their ideas. Interactive widgets
in Jupyter Notebooks allow one to do exactly that. The interact function
(ipywidgets.interact) automatically creates user interface controls to
explore code and data interactively. In this talk, I will highlight the
powerful capabilities that widgets and interactive functions provide, and
how one can efficiently leverage them to build interactive Jupyter
Notebooks.&lt;/p&gt;
</summary></entry><entry><title>Jane Doe will help you improve your project</title><link href="https://pyvideo.org/pygotham-2019/jane-doe-will-help-you-improve-your-project.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Rebeca Sarai</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/jane-doe-will-help-you-improve-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On days of privacy scandals, the concern about securing customers' data is
bigger than ever, and the solution is farther from locking everything in a
safe box. Sharing data is inevitable, in this talk we will approach the data
anonymity problem, exploring how to use anonymization techniques to secure
users personal information when analyzing, testing, processing, or sharing a
database.&lt;/p&gt;
&lt;p&gt;Customers’ data is important. The number of privacy laws in recent years has
grown from 20 to 100, to name a few: PCI compliance in the payment industry,
the European GDPR regulation, and the Brazilian LGPD. All these new
regulations attempt to bridge an old gap: data anonymity. How to handle data
and protect the individuals comprised in it? Companies often face lawsuits
to compensate for personal information breaches in their database.&lt;/p&gt;
&lt;p&gt;Code must be tested. In classic development workflow, many times production
data is copied onto test, QA or staging environments, only to be followed by
exposure to the eyes of testers, receivers, or unauthorized developers on
machines less protected than production environments. It is not seldom for
files also to be shared with external partners, who often require but a
small part of the data transferred, and granting access to user’s data might
be a breach. If in one hand sharing data is both necessary and inevitable,
on the other technologies that assure the privacy of individuals details are
no longer only desirable, but essential.&lt;/p&gt;
&lt;p&gt;A Jane Doe is a person without a name that is able to perform actions even
though without any recollection of personal information. We will use this
principle to approach two important areas in software development: how to
streamline when testing complex systems and how to manage data whilst
securing users’ personal information. We will create a boilerplate project
to expose different techniques of anonymization and pseudonymization,
showing that solving the anonymity problem is much more complex than
replacing names, last names, and social security numbers - and all of that
avoiding bottlenecking Django projects.&lt;/p&gt;
</summary></entry><entry><title>Make You An Async For Great Good!</title><link href="https://pyvideo.org/pygotham-2019/make-you-an-async-for-great-good.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/make-you-an-async-for-great-good.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AsyncIO seems like magic, but it's (mostly) not! I'm going to write the core
of asyncio from scratch. I will explain how asyncio actually works in pure
python, building up from generators and a custom event loop.&lt;/p&gt;
&lt;p&gt;This talk will demystify the &lt;cite&gt;async&lt;/cite&gt; and &lt;cite&gt;await&lt;/cite&gt; keywords, and help
developers write better asynchronous code!&lt;/p&gt;
</summary></entry><entry><title>Oh, the Humanities! Interdisciplinary Thinking in Python</title><link href="https://pyvideo.org/pygotham-2019/oh-the-humanities-interdisciplinary-thinking-in-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Lisa Tagliaferri</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/oh-the-humanities-interdisciplinary-thinking-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The humanities — fields like history, literature, and philosophy — are not
often incorporated into our thought processes in the tech industry. However,
bringing humanities contexts into our everyday work can strengthen the
software we build and ensure that it is serving our communities. Learn about
how creating software for humanities researchers has developed better Python
programmers at MIT, and how our own self-learning can benefit from tackling
projects with humanistic values at their core.&lt;/p&gt;
&lt;p&gt;This talk will provide you with an overview of how Python has been used to
help solve humanities research problems, while also demonstrating how
incorporating the humanities into Python development processes can improve
software. We will go over what things you should consider to think in more
interdisciplinary ways, and how broader contexts can ensure that the
software we build serves its users well.&lt;/p&gt;
</summary></entry><entry><title>Poetry: "dependency management and packaging made easy"</title><link href="https://pyvideo.org/pygotham-2019/poetry-dependency-management-and-packaging-made-easy.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Samuel Roeca</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/poetry-dependency-management-and-packaging-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to write a Python library, fearlessly manage its dependencies, and
distribute it to the world with
[Poetry](&lt;a class="reference external" href="https://github.com/sdispater/poetry"&gt;https://github.com/sdispater/poetry&lt;/a&gt;), a tool dedicated to making
&amp;quot;dependency management and packaging ... easy&amp;quot;.&lt;/p&gt;
&lt;p&gt;Have you struggled with setuptools, Pipenv, pip, requirements.txt, and
finally just given up on your dreams of distributing your awesome new
artificial intelligence / NLP library? Do you think there should be a better
way to initialize, evolve, and eventually share your awesome library or
application? Have you played around with Rust and wondered whether Python
would ever get something as beautiful as Cargo for itself? If any of these
questions describes you, then let me tell you about Poetry...&lt;/p&gt;
</summary></entry><entry><title>PPB: Unbearably Fun Game Development</title><link href="https://pyvideo.org/pygotham-2019/ppb-unbearably-fun-game-development.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Casey Faist</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/ppb-unbearably-fun-game-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to make your own games, but want building the game to also be fun? Or,
know a teacher looking to bring game development into the classroom?&lt;/p&gt;
&lt;p&gt;Come learn about the coolest new framework, PursuedPyBear. Driven by
dataclasses and designed to give a Pythonic development experience, it
brings the joy back into video game development!&lt;/p&gt;
</summary></entry><entry><title>Pull Requests: Merging good practices into your project</title><link href="https://pyvideo.org/pygotham-2019/pull-requests-merging-good-practices-into-your-project.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Luca Bezerra</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/pull-requests-merging-good-practices-into-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Although known by most, Pull Requests are often not dealt with in the most
effective way. Believe it or not, there are teams that don’t review code at
all! People may assume that a senior developer is experienced enough to not
make any mistakes, or that merely changing those 3 lines of code couldn’t
possibly do any harm to the system. In these cases, it’s not uncommon to
skip the code review in order to cut some time. Unreviewed (or badly
reviewed) code can be extremely dangerous, resulting in huge risks and
unpredictable behavior.&lt;/p&gt;
&lt;p&gt;A survey says that, on average, developers spend 45% of their time fixing
bugs and technical debt, when they could be developing new features instead.
Defining simple guideline files, adopting certain behaviors and setting up
repository configurations are steps that can increase manyfold the code
review performance (in both time and quality). Using review tools both on
server (e.g. Heroku Review Apps) and locally (e.g. linters) can also greatly
increase the process’ speed. Creating templates and checklists ensures no
step is overlooked or forgotten. The list goes on, but enough spoilers for
now. The attendees will learn specific tips, tools, processes and
recommended practices that were compiled from research and real-life use
cases (both from my experience and from big players like Django, Facebook,
Mozilla, etc), along with some survey data that demonstrates why reviewing
code is important.&lt;/p&gt;
</summary></entry><entry><title>Python, Governments, and Contracts</title><link href="https://pyvideo.org/pygotham-2019/python-governments-and-contracts.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Froilan Irizarry</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/python-governments-and-contracts.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After Hurricane Maria struck Puerto Rico in September 2017, the Puerto Rico
Electric Power Authority awarded Whitefish Energy, a small Montana-based
firm with only two employees at the time, a no-bid contract for up to $300
million to repair part of the island's electrical grid. This contract even
had a clause that prevented the government from auditing or reviewing its
labor cost and profit elements. National outrage led to the cancellation of
this suspicious contract, a $200 million contract was awarded to Cobra
Acquisitions, and some months later another $900 million contract was
awarded to the same company, a subsidiary of an Oklahoma-based fossil fuel
company. Why did PREPA enter into any agreements at all with private
contractors when the standard procedure for near-term disaster response is
for utilities to enter into mutual aid agreements with their counterparts in
other states?&lt;/p&gt;
&lt;p&gt;In the past few month's I've noticed an increasing amount of investigative
journalism tackling questionable contracts awarded by different government
entities and officials in Puerto Rico. Lack of transparency, costly
mismanagement, and abuse of power can be found throughout. I feel like it's
our duty to call these actions out and question and understand our
government's fiscal responsibility.&lt;/p&gt;
&lt;p&gt;The Office of the Comptroller of Puerto Rico publishes awarded contracts
online and they've built a tool that lets you search and even download
contract documents (after they've been redacted of sensitive information).
We decided to use Python and Django to build a tool that would leverage this
data, showing what the government spends every year and how it spends the
money.&lt;/p&gt;
</summary></entry><entry><title>Serverless Deep Learning with Python</title><link href="https://pyvideo.org/pygotham-2019/serverless-deep-learning-with-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Alizishaan Khatri</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/serverless-deep-learning-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you marvel at the idea of production-grade Deep Learning that can scale
infinitely in nearly constant time?&lt;/p&gt;
&lt;p&gt;Using an NLP application as an example, you will learn how to design, build
and deploy deep learning systems using a serverless computing platform
(Function As A Service).&lt;/p&gt;
&lt;p&gt;PS: Talk contains code!&lt;/p&gt;
</summary></entry><entry><title>Spatial thinking with Python</title><link href="https://pyvideo.org/pygotham-2019/spatial-thinking-with-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Sangarshanan</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/spatial-thinking-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data scientists work with all kinds of data, It could be a text an image or
maybe it is a bunch of coordinates. Though computer vision and natural
language processing have hit it off spatial data science doesn’t get the
attention it deserves. Spatial data has both social and industrial impact.
Spatial data is useful in agriculture and for observing weather patterns to
predict natural disasters. It is also very important for industries that
deal with logistics and supply chain management.&lt;/p&gt;
&lt;p&gt;In this talk I would talk about spatial data it’s importance and elaborate
on how to store, manipulate and visualize such data. I would talk about the
use of Python and several related modules (GDAL, Shapely, Fiona etc) in
processing geospatial data. I would also like to discuss QGIS, a desktop
based open source GIS platform and a variety of useful operations that can
be done with it. I would also like to talk about building geospatial
dashboards to share and serve  spatial layers and discuss the geospatial
support provided by the various open source projects like postgis, geonode,
elastic stack V7.0 and much more&lt;/p&gt;
</summary></entry><entry><title>Sprints - Let’s do more of those!</title><link href="https://pyvideo.org/pygotham-2019/sprints-lets-do-more-of-those.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Jacob Deppen</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/sprints-lets-do-more-of-those.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few people attend conferences just to attend the associated sprints.
However, I want to tell you a story about how sprints offer a unique space
for certain kinds of ideas and collaboration that are otherwise difficult or
impossible to cultivate.&lt;/p&gt;
&lt;p&gt;I will begin at the end, by describing the &lt;cite&gt;pandas-vet&lt;/cite&gt; plugin for the
&lt;cite&gt;flake8&lt;/cite&gt; linter. I will briefly summarize some elements underlying the
&lt;cite&gt;flake8&lt;/cite&gt; plugin (&lt;cite&gt;pandas&lt;/cite&gt; best practices, traversing the AST, and
entrypoints) as well as elements of a good open-source project (tests, CI,
pip-installable, contributor guidelines, and a code of conduct).&lt;/p&gt;
&lt;p&gt;Next, through Slack messages and GitHub commits, I will tell the story of
how the sprinting environment helped the project go from vague idea to
implementing all of those elements in just one day.&lt;/p&gt;
&lt;p&gt;Throughout the talk, I'll offer some of the lessons we should all learn
about what makes sprints unique, what makes them successful, and how this
project could only have been built in a sprint environment.&lt;/p&gt;
</summary></entry><entry><title>The Adventures of A Python Script</title><link href="https://pyvideo.org/pygotham-2019/the-adventures-of-a-python-script.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Dema Abu Adas</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/the-adventures-of-a-python-script.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered what happens between the time you run helloWorld.py
and the terminal prints out “Hello world”? I will be sharing the wonderful
and interesting process of how the Python interpreter works from the Python
source code to the compilation of bytecode.&lt;/p&gt;
&lt;p&gt;Steve Yegge, a programmer and blogger who has a plethora of experience in
operating systems, once noted the importance about compilers by stating, “If
you don’t know how compilers work, then you don’t know how computers work”.
This talk will share an overview of how CPython works from lexxing to
compiling as well as how the abstract syntax tree (AST) works. At the end of
the talk, you’ll be able to understand the general concept of the abstract
syntax tree (AST) and how creating a interpreter can additionally benefit
you in ways unrelated to the actual compilation such as linting and
debugging.&lt;/p&gt;
</summary></entry><entry><title>The blameless post mortem: how embracing failure makes us better</title><link href="https://pyvideo.org/pygotham-2019/the-blameless-post-mortem-how-embracing-failure-makes-us-better.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Christopher Wilcox</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/the-blameless-post-mortem-how-embracing-failure-makes-us-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While developing software, bugs and mistakes are inevitable. Come to hear
how we can improve the approaches we often take as software developers to
work better with one another in heated moments of failure and the aftermath
of incidents. Through better interactions we can build better teams and
create better services.&lt;/p&gt;
&lt;p&gt;In my career I have worked in a blameless post-mortem and a blame-full post
mortem environment, across a variety of projects ranging from individual
python libraries, to core infrastructure for a cloud. I am excited to share
how I think not assigning blame when things go wrong results in a better
team and a better product.&lt;/p&gt;
</summary></entry><entry><title>The Cat's Alive! Add Some Weirdness To Your Code With Quantum Computing</title><link href="https://pyvideo.org/pygotham-2019/the-cats-alive-add-some-weirdness-to-your-code-with-quantum-computing.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Jorn Mossel</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/the-cats-alive-add-some-weirdness-to-your-code-with-quantum-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dear 10x programmer. Aren’t you bored of writing code that always works, and
gives you the exact result you want? Don't lose hope, try a quantum
computer! Regardless of how good your code is (and we’re talking about a
brand new programming language), you will never get it fully under control,
and that's the beauty. Let us show you how mount this untamable quantum
beast.&lt;/p&gt;
&lt;p&gt;Starting with the basics of a quantum computer (which unfortunately doesn't
consist of a bunch of Schrodinger's cats doing computations, either alive or
dead), we will explain why people think there might be problems where this
new evolution of computation will reign supreme in the future, and how we
can use it to find good approximate solutions to complex problems in the
meantime. We will talk about the new wave of development in quantum hardware
and software, but the cherry on the cake will be running a computation on
actual quantum hardware - live.&lt;/p&gt;
</summary></entry><entry><title>The magic of Python</title><link href="https://pyvideo.org/pygotham-2019/the-magic-of-python.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Darshan Markandaiah</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/the-magic-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come to this talk to learn more about magic methods in Python. You might already be aware of some magic methods such as &lt;cite&gt;__repr__&lt;/cite&gt; and &lt;cite&gt;__len__&lt;/cite&gt;, but Python has a number of other methods that aid in writing cleaner, idiomatic code. In this talk, I will enumerate over a range of these magic methods along with example code snippets. I'll then be touching upon Abstract Base Classes that offer free functionality if you implement certain methods on your class. I'll end by introducing Context Managers and describing how you can write your own Context Managers using a few magic methods.&lt;/p&gt;
</summary></entry><entry><title>Using Dash to Create Interactive Web Apps for Non-Technical Audiences</title><link href="https://pyvideo.org/pygotham-2019/using-dash-to-create-interactive-web-apps-for-non-technical-audiences.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Joseph Willi</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/using-dash-to-create-interactive-web-apps-for-non-technical-audiences.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Overview&lt;/p&gt;
&lt;p&gt;Have you ever struggled with finding ways to present data visualizations
and/or results to non-technical audiences in a coherent and engaging manner?
In this talk, I'll detail how I overcame such a challenge by using Dash to
build an interactive app for firefighters to use during performance testing
of their rescue equipment.&lt;/p&gt;
&lt;p&gt;### Description&lt;/p&gt;
&lt;p&gt;Analytical web applications can serve as a powerful means for scientists and
engineers to interact with data and identify patterns and trends in a
concise and straightforward manner. Such tools can allow users to
immediately see the effects of modifying specific input parameters.
Additionally, interactive web apps can be utilized to present data
visualizations and analysis results in engaging ways.&lt;/p&gt;
&lt;p&gt;Unless you're a full-stack developer, creating these types of web
applications may seem quite challenging. Dash, a Python framework written on
top of Flask, Plotly.js, and React.js, handles many of the complexities
associated with building custom interfaces and provides users the ability to
build powerful data visualizations strictly through Python.&lt;/p&gt;
&lt;p&gt;Despite being an intermediate Python user lacking full knowledge of the
technologies and protocols required to build web-based applications, I was
able to create a UI using Dash. More specifically, I built an interactive
dashboard for firefighters to process and interact with sensor data
collected during performance testing of their rescue equipment.&lt;/p&gt;
&lt;p&gt;During this talk, I will briefly detail the motivation behind this project.
Then, I'll describe how the project progressed to its current state, while
highlighting key points that can be applied to the general case of
developing interactive web apps for audiences from non-technical
backgrounds. To conclude my presentation, I will show a demo of the
interactive web app and summarize the key takeaways.&lt;/p&gt;
</summary></entry><entry><title>What is deployment, anyway?</title><link href="https://pyvideo.org/pygotham-2019/what-is-deployment-anyway.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Katie McLaughlin</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/what-is-deployment-anyway.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you’ve finished the DjangoGirls tutorial, but now you want to share it
with the outside world, but how do you go about that?&lt;/p&gt;
&lt;p&gt;In this presentation, we will discuss the basics beyond running a django
project locally, and discuss the concepts and strategies around how to host
your project.&lt;/p&gt;
</summary></entry><entry><title>Why should I write code when I can write code that writes code?</title><link href="https://pyvideo.org/pygotham-2019/why-should-i-write-code-when-i-can-write-code-that-writes-code.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/why-should-i-write-code-when-i-can-write-code-that-writes-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The temptation to employ code-generating techniques in Python is strong.
Much of what is called &amp;quot;metaprogramming&amp;quot; in Python refers to the various
techniques through which we can write higher-order code: code that then
generates the code that solves our problem. This talk discusses various
common approaches for code-generation, their applicability to solving real
problems, and the reality of using these techniques in your work.&lt;/p&gt;
</summary></entry><entry><title>Absolutely Awesome Automated APIs</title><link href="https://pyvideo.org/pygotham-2019/absolutely-awesome-automated-apis.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Timothy Allen</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/absolutely-awesome-automated-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you have 60,000 tables and views across hundreds of schemata sitting on
top of a 3 petabyte storage footprint, automation and access privileges are
key if you want to expose these data through a RESTful API. Our University's
research service leverages Python, Django, Django REST Framework, and
PostgreSQL to accomplish this. We are continuing to open source the tools we
have built to make this possible!&lt;/p&gt;
&lt;p&gt;Databases stay relevant by continuing to reinvent themselves to serve new
technologies further up the stack. The latest buzzwords further up that
stack are APIs and microservices, so prevalent that it is hard to see a tech
advertisement that doesn’t mention them. While related to “the cloud” and
“big data”, whatever the heck those terms actually mean, APIs and
microservices have a slightly less annoying marketing schtick and more
concrete relations to relational databases.&lt;/p&gt;
&lt;p&gt;But what do these relations look like in practice? In this talk, the speaker
will show how his team at the University has evolved from providing
financial data exclusively in SAS data formats to a robust backend powered
by PostgreSQL, which allows financial research to happen in many ecosystems:
still available in SAS, but also R, Python, Perl, Matlab, Julia, and more.
The speaker will present a case study of using Django REST Framework to
build an “API through introspection.” This case study will show how Django
web site and RESTful web service were built by introspecting financial data
stored in a PostgreSQL database cluster.&lt;/p&gt;
&lt;p&gt;The models for the ORM, serializers for the RESTful API, views for
presenting the data to a user, filters for refining queries, URL routing,
web browsable interface, user token authorization, and permissions, are all
created by introspecting the PostgreSQL database information schema, all
with Python. These components have now been open-sourced, including the
endpoint spreadsheet exporter and the generic automated API builder.&lt;/p&gt;
</summary></entry><entry><title>Advanced SQL with SQLAlchemy</title><link href="https://pyvideo.org/pygotham-2019/advanced-sql-with-sqlalchemy.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Ryan Kelly</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/advanced-sql-with-sqlalchemy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQL is an incredibly powerful way to access your data, and SQLAlchemy’s
flexibility allows you to harness all this power in a Pythonic way.&lt;/p&gt;
</summary></entry><entry><title>Archiving the Internet Before it All Rots Away</title><link href="https://pyvideo.org/pygotham-2019/archiving-the-internet-before-it-all-rots-away.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Nick Sweeting</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/archiving-the-internet-before-it-all-rots-away.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Could you imagine an internet where all links stopped working after 4 years?
All the old blogs from the 90's... gone, all your hot takes on Twitter...
gone, all the news and reporting... gone.&lt;/p&gt;
&lt;p&gt;Some of that decay is good, no one wants the &lt;em&gt;entire&lt;/em&gt; internet to be
preserved for eterninty, but most of that decay leads to great content
disappearing forever, and future generations being deprived of access to the
most important medium for knowledge in the last half century.  If no one
worked on preserving that information, the human race would be facing a loss
of knowledge many times greater than the burning of the Library of
Alexandria.&lt;/p&gt;
&lt;p&gt;Luckily organizations like Archive.org and the Internet Preservation
Consortium work tirelessly every day to save what they can.  But archiving
doesn't have to be exclusive to big organizations, we can all play a part by
archiving the stuff that matters to us locally.  Learn about the internet
archiving community, the tools of the trade, and how to save content you
care about in this talk!&lt;/p&gt;
</summary></entry><entry><title>Ask the Ecosystem: Lessons from 200+ FOSS Applications</title><link href="https://pyvideo.org/pygotham-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/ask-the-ecosystem-lessons-from-200-foss-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you had to build a software application right now, how would you do it?&lt;/p&gt;
&lt;p&gt;First step, Python. But then what?&lt;/p&gt;
&lt;p&gt;This talk looks at over 200 of the most-successful open-source Python
applications to distill real-world advice on building effective software to
reach the masses. Architecture, testing, licensing, packaging and
distribution, these projects hold lifetimes of work and wisdom, waiting to
be learned!&lt;/p&gt;
&lt;p&gt;In this presentation, we'll explore many questions, just a few of which
include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What userbases do Python-based applications reach?&lt;/li&gt;
&lt;li&gt;Where in software is Python leading, and what domains represent its
biggest gaps?&lt;/li&gt;
&lt;li&gt;What library dependencies appear in the application zeitgeist?&lt;/li&gt;
&lt;li&gt;What copyright licenses are used by applications, and how do these
practices differ from libraries?&lt;/li&gt;
&lt;li&gt;How many projects rely only on donations, as opposed to having foundation
or corporation support?&lt;/li&gt;
&lt;li&gt;What can Python developers do to support and get involved in Python's rich
application space?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A production application is worth a hundred blog posts and a thousand Stack
Overflow answers. You've already heard all the talk about best practices,
now come hear about the practical practices from real Python applications.&lt;/p&gt;
</summary></entry><entry><title>Beyond Unit Tests: End-to-End Web UI Testing</title><link href="https://pyvideo.org/pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Andrew Knight</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/beyond-unit-tests-end-to-end-web-ui-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit tests are great, but they don’t catch all bugs because they don’t test
features like a user. However, Web UI tests are complicated and notoriously
unreliable. So, how can we write tests well? Never fear!&lt;/p&gt;
&lt;p&gt;Let’s learn how to write robust, scalable Web UI tests using Python, pytest,
and Selenium WebDriver that cover the full stack for any Web app. In this talk,
we will write one simple test together that covers DuckDuckGo searching.
We’ll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using Selenium WebDriver like a pro&lt;/li&gt;
&lt;li&gt;Modeling Web UI interactions in Python code&lt;/li&gt;
&lt;li&gt;Writing “good” feature tests that are efficient, robust, and readable&lt;/li&gt;
&lt;li&gt;Deciding what should and should not be tested with automation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After this talk, you’ll know how to write battle-hardened Web UI tests for
anyWeb app, including Django and Flask apps. I’ll provide the example code on
GitHub, as well as plenty of hands-on tutorials and resources to continue
learning after this talk.&lt;/p&gt;
</summary></entry><entry><title>Building Docs Like Code: Continuous Integration for Documentation</title><link href="https://pyvideo.org/pygotham-2019/building-docs-like-code-continuous-integration-for-documentation.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Mason Egger</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/building-docs-like-code-continuous-integration-for-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;# Abstract&lt;/p&gt;
&lt;p&gt;Project documentation is easy to neglect. Keep your docs inside your
source repo &amp;amp; learn how to automatically build &amp;amp; publish beautiful docs
on every commit. Viewers will leave with a new mindset on how to handle
documentation, tooling for this process, &amp;amp; an easy-to-implement method
to achieve this.&lt;/p&gt;
&lt;p&gt;# Description&lt;/p&gt;
&lt;p&gt;It is common for developers to overlook the documentation of their
works. They are either on a time crunch, lack the proper tooling, or
simply just forget to create and update the documentation. Whatever the
cause behind this, it is not a proper excuse for not keeping the
documentation up to date. However, for all our development processes
there are few as neglected as the documentation process. Documentation
should be treated as important as the code that makes up the project.
So, let’s move the documentation into the code. With modern
documentation tools such as MkDocs and Sphinx, both of which are Python
powered tools, and Continuous Integration tools we can now include docs
in the commit. They can be reviewed in code reviews, built and versioned
in a CI tool, and even tested for things such as correct code examples
and broken links. This is the process that the developer knows,
understands, and enjoys. I introduced a team to this exact workflow and
a working pipeline; all they had to do was keep the documentation up to
date. This team currently has some of the most up to date documentation
in a company of near two thousand engineers, and they never complain
about writing/updating documentation. It’s just part of the workflow.&lt;/p&gt;
</summary></entry><entry><title>Building effective Django queries with expressions</title><link href="https://pyvideo.org/pygotham-2019/building-effective-django-queries-with-expressions.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Vanessa Barreiros</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/building-effective-django-queries-with-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's known that ORMs are a powerful tool to manipulate databases with ease.
In Django, there are a set of out-of-the-box abstractions to help perform
queries and shape them through annotations, aggregations, order by, and so
on, hence saving one's time. A common solution to filtering when models grow
larger over time is creating redundant fields; a better solution is using
Django built-in resources called query expressions.&lt;/p&gt;
&lt;p&gt;Query expressions are smart yet straightforward functions that one can use
to compute values on query execution and do string manipulation,
calculations, among others, thus removing the burden of having unnecessary
extra columns in our database. Using query expressions effectively can help
to generate performant queries, avoiding potential inconsistencies and
separating concerns.&lt;/p&gt;
&lt;p&gt;This talk focuses on further optimizing Django queries by walking through
code comparisons and examples with a dataset, diving into subjects such as
custom database functions, conditional expressions, and filtering so to
answer questions about the data.&lt;/p&gt;
</summary></entry><entry><title>Can Neural Networks Help Me Become a Better Parent?</title><link href="https://pyvideo.org/pygotham-2019/can-neural-networks-help-me-become-a-better-parent.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Andrew Hao</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/can-neural-networks-help-me-become-a-better-parent.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When nighttime descends, our household becomes a battleground of sleep battles with our toddler (a total bummer!) How can building a TensorFlow-powered cry-detection baby monitor help me understand my little one?&lt;/p&gt;
&lt;p&gt;If you are a beginner or just curious about machine learning, this talk is for you. Together, we'll go on a ML discovery journey to train a TensorFlow model to recognize and quantify the cries of my little one. We'll see how it works by walking through a keyword-spotting CNN described from a Google research paper, then see how it's deployed on a Raspberry Pi. In the process, you'll see how simple it is to train and deploy an audio recognition model!&lt;/p&gt;
&lt;p&gt;Will the model deliver on its promise to deliver sleep training insights to this sleep-deprived parent? And what can training a model on human inputs teach us about building production models in the real world?&lt;/p&gt;
</summary></entry><entry><title>Can you keep a secret?</title><link href="https://pyvideo.org/pygotham-2019/can-you-keep-a-secret.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Aaron Bassett</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/can-you-keep-a-secret.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ve all been guilty of hard-coding secrets at some point. It’s just a
quick hack, and you’ll definitely go back and tidy it up later. But then you
forget, and it’s all too easy to &lt;cite&gt;git push&lt;/cite&gt; your API keys to GitHub.&lt;/p&gt;
&lt;p&gt;This easy to make mistake could end up [costing you thousands of
dollars](&lt;a class="reference external" href="https://dev.to/juanmanuelramallo/i-was-billed-for-14k-usd-on"&gt;https://dev.to/juanmanuelramallo/i-was-billed-for-14k-usd-on&lt;/a&gt;-
amazon-web-services-17fn), and with the [median time to discovery for a
secret key leaked to GitHub being 20 seconds](&lt;a class="reference external" href="https://www.ndss"&gt;https://www.ndss&lt;/a&gt;-
symposium.org/wp-content/uploads/2019/02/ndss2019_04B-3_Meli_paper.pdf) you
could end up compromised before you have a chance to correct your error.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at techniques that you can use personally and
within your development teams to properly store, share, and manage your
secrets, as easily as possible without disrupting your workflow.&lt;/p&gt;
</summary></entry><entry><title>Convincing an entire engineering org to use (and like) mypy</title><link href="https://pyvideo.org/pygotham-2019/convincing-an-entire-engineering-org-to-use-and-like-mypy.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Annie Cook</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/convincing-an-entire-engineering-org-to-use-and-like-mypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many engineers’ first encounter with a static type-checker is being told off
by it: you roll your eyes and mypy shouts ERROR. Really, why invest your
precious time in mypy at all? This is my conversion story, from disgruntled
engineer to mypy believer. I’ll share with you the good gospel of its
benefits, strategies to increase buy-in from your team and tips for how to
add mypy into your workflow.&lt;/p&gt;
&lt;p&gt;In a dynamically typed language like Python, it is worth asking, “Why use
mypy and invest precious engineering time to add and check types?” My time
as an engineer at Nylas has seen an engineering org-wide conversion to mypy,
for good reason. I'll share how we were able to gradually increase type
coverage in our entire codebase from 0% to 80%.&lt;/p&gt;
&lt;p&gt;Warming to the change took effort, but the substantial benefits to the
quality and sustainability of our codebase have made me into a mypy
believer. Even so, becoming a believer is only the first step. Next, you
have to inspire your fellow engineers to join your mypy quest. How can you
convince your team to want to put in this extra work? I'll present
strategies for expanding buy-in from your fellow engineers and processes to
ensure that your type coverage does not regress. My story may just make
believers out of you and your team.&lt;/p&gt;
</summary></entry><entry><title>Django + ElasticSearch without invalidation logic</title><link href="https://pyvideo.org/pygotham-2019/django-elasticsearch-without-invalidation-logic.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Flávio Juvenal</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/django-elasticsearch-without-invalidation-logic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will teach you to finally integrate Django and Elasticsearch &amp;quot;like
it's 2019&amp;quot;.&lt;/p&gt;
&lt;p&gt;Elasticsearch is a great addition to the Django developer's toolkit: it
supports performant complex full-text queries and filters on huge datasets,
where traditional relational database-only solutions fall short. But
integrating Django with Elasticsearch usually is a pain: you need logic to
keep database tables and Elasticsearch indexes in sync. Since data is stored
in two places, it can become out-of-sync if care is not taken. Dirty index
data will generate wrong search results, defeating the purpose of the
integration.&lt;/p&gt;
&lt;p&gt;A new alternative is [django-
zombodb](&lt;a class="reference external" href="https://github.com/vintasoftware/django-zombodb"&gt;https://github.com/vintasoftware/django-zombodb&lt;/a&gt;), a Django app that
uses a Postgres extension for syncing tables with Elasticsearch indexes at
transaction time. With django-zombodb, developers can treat an ElasticSearch
index just like an internal Postgres index. This means no code is needed to
synchronize Postgres with Elasticsearch, you just need to run a Django
migration that executes a CREATE INDEX in the database and you're done. Any
new inserts, updates or deletes on that model will reflect on an
Elasticsearch index at transaction time!&lt;/p&gt;
&lt;p&gt;django-zombodb also offers a Pythonic/Djangonic API to make Elasticsearch
queries over Django models using the ORM in a queryset-friendly way.
Developers are able to compose Elasticsearch queries with regular ORM
queries by just chaining queryset methods and composing Q-like objects. In
this talk, you'll learn django-zombodb advantages over other solutions, how
it works, how to use it, and even you can contribute to it.&lt;/p&gt;
</summary></entry><entry><title>Eita! Why Internationalization and Localization matter</title><link href="https://pyvideo.org/pygotham-2019/eita-why-internationalization-and-localization-matter.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Nicolle Cysneiros</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/eita-why-internationalization-and-localization-matter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to the always trustworthy Wikipedia, there are approximately 360
million native English speakers in the world. We, as developers, are so used
to write code and documentation in English that we may not realize that this
number only represents 4.67% of the world population. It is very useful to
have a common language for the communication between developers, but this
doesn’t mean that the user shouldn’t feel a little bit more comfortable when
using your product.&lt;/p&gt;
&lt;p&gt;Translation of terms is only one step in the whole Internationalization
(i18n) and Localization (l10n) process. It also entails number, date and
time formatting, currency conversion, sorting, legal requirements, among
other issues. This talk will go through the definition of i18n and l10n as
well as show the main tools available for developers to support multiple
languages and regional related preferences in their Python program. We will
also see how one can enable local support for their website in Django.
Finally, this presentation will discuss how we can manage
Internationalization and Localization for a bigger product running in
different platforms (front and back end) and how to incorporate i18n and
l10n into our current development and deploy processes.&lt;/p&gt;
&lt;p&gt;Oh, and by the way, “eita!” is a Brazilian interjection to show yourself
surprised with something.&lt;/p&gt;
</summary></entry><entry><title>Ethics &amp; Bias Detection in the Real World</title><link href="https://pyvideo.org/pygotham-2019/ethics-bias-detection-in-the-real-world.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Ethan Cowan</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/ethics-bias-detection-in-the-real-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As algorithmic decision makers become more pervasive in day-to-day life,
there is an increased urgency to address inherent biases and their potential
for perpetuating societal inequities.  We will outline new and existing
methods for determining implicit bias in machine learning models and rating
systems.&lt;/p&gt;
</summary></entry><entry><title>How I Solved my NYC Parking Problem with Python</title><link href="https://pyvideo.org/pygotham-2019/how-i-solved-my-nyc-parking-problem-with-python.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Jessica Garson</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/how-i-solved-my-nyc-parking-problem-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since I have a car in New York City, my car is subject to the city’s
alternate side of the street parking regulations. This means most nights I
need to move my car before the early morning street cleaning that happens in
my neighborhood. I had developed a nightly routine around moving my car
before I go to bed. I am sometimes a bit too good at this and I often move
my car on days I don’t need to. Since alternate side of the street parking
is often canceled on days where there are holidays, or bad weather, there is
a Twitter handle &amp;#64;NYCASP, which posts daily and whenever there is an
emergency situation. I used Python, Twilio and the Twitter API to solve this
problem for myself so I get a text message whenever I don't need to move my car.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Generative Adversarial Networks (GANs): hands-on to making new data (and some pretty pictures)</title><link href="https://pyvideo.org/pygotham-2019/introduction-to-generative-adversarial-networks-gans-hands-on-to-making-new-data-and-some-pretty-pictures.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Nabeel Seedat</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/introduction-to-generative-adversarial-networks-gans-hands-on-to-making-new-data-and-some-pretty-pictures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deepfakes has caused a huge stir over the past few years. &lt;strong&gt;Generative
Adversarial Networks (GANs)&lt;/strong&gt; are the cause of it all. GANs are a type of
&lt;strong&gt;deep neural network&lt;/strong&gt; that can generate new data. GANs comprise of two
competing networks and the results, especially in creating new images are
truly astounding.&lt;/p&gt;
&lt;p&gt;This talk will introduce deep learning and how GANs work, highlighting
application areas. Most importantly it will provide a &lt;strong&gt;hands-on
implementation&lt;/strong&gt; of GANs using &lt;strong&gt;Pytorch&lt;/strong&gt;. With the &lt;strong&gt;tips and tricks&lt;/strong&gt;
from this talk, you’ll be ready to start experimenting with GANs!&lt;/p&gt;
</summary></entry><entry><title>Learning with Limited Labeled Data</title><link href="https://pyvideo.org/pygotham-2019/learning-with-limited-labeled-data.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Shioulin Sam</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/learning-with-limited-labeled-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supervised machine learning requires large labeled datasets - a prohibitive
limitation in many real world applications. What if machines could learn
with fewer labeled examples? This talk explores and demonstrates an
algorithmic solution that relies on collaboration between humans and
machines to label smartly, and shows product possibilities.&lt;/p&gt;
&lt;p&gt;Being able to teach machines with examples is a powerful capability, but it
hinges on the availability of vast amounts of data. The data not only needs
to exist, but has to be in a form that allows relationships between input
features and output to be uncovered. Creating labels for each input feature
fulfills this requirement, but is an expensive undertaking.&lt;/p&gt;
&lt;p&gt;Classical approaches to this problem rely on human and machine
collaboration. In these approaches, engineered heuristics are used to
smartly select the “best” instances of data to label, in order to reduce
cost. A human steps in to provide the label. The model then learns from this
smaller labeled dataset. Recent advancements have made these approaches
amenable to deep learning, enabling models to be built with limited labeled
data.&lt;/p&gt;
&lt;p&gt;In this talk, we explore algorithmic approaches that drive this capability,
and provide practical guidance for translating this capability into
production. We provide intuition for how and why these algorithms work by
demoing and describing how we built a working prototype.&lt;/p&gt;
</summary></entry><entry><title>Less Talk, More Rock: Transfer Learning with Natural Language Processing</title><link href="https://pyvideo.org/pygotham-2019/less-talk-more-rock-transfer-learning-with-natural-language-processing.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Ryan Micallef</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/less-talk-more-rock-transfer-learning-with-natural-language-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Natural language processing models require a ton of text data and computing
time - resources that aren't available to most. But now you can use powerful
pre-trained NLP models from Google, AllenNLP, and others who have done the
heavy lifting for you, accessible through straightforward python libraries.
Transfer learning allows you to tailor these massive models to your specific
domain.&lt;/p&gt;
&lt;p&gt;2018 ushered in a new era for NLP based on a series of breakthroughs in the
use of transfer learning. Traditionally only word vectors such as word2vec,
which provide rich representations of _words_, have been reused across
different NLP tasks.  However, word vectors have no notion of the context in
which a word occurs, which is severely limiting. &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_Context-aware_&lt;/span&gt;&lt;/tt&gt; transfer
learning is a powerful new technique that has already made a great impact.&lt;/p&gt;
&lt;p&gt;Within a year, transfer learning has changed the state-of-the-art in nearly
every category. It is being used to generate extremely realistic text, and
some work has even been kept secret for fear of its potential for misuse. It
has made improvements in sentiment analysis, document topic classification,
and named entity extraction.&lt;/p&gt;
&lt;p&gt;But being so new, it’s not well understood how these techniques work, what
types of problems benefit most, what hazards exist, or what tools to use. In
this talk we’ll cover new techniques in transfer learning, their impacts,
and present a framework for how to apply them. We provide recommendations
for choosing candidate problems, how to conduct experiments, how to
understand and interpret these models, and the available python tooling.&lt;/p&gt;
</summary></entry><entry><title>Maintaining a Python Project When It’s Not Your Job</title><link href="https://pyvideo.org/pygotham-2019/maintaining-a-python-project-when-its-not-your-job.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/maintaining-a-python-project-when-its-not-your-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPI is a gold mine of great packages but those packages have to be written
first.  More often than not, projects that millions of people depend on are
written and maintained by only one person.  If you’re unlucky, that person
is you!&lt;/p&gt;
&lt;p&gt;So how do you square delivering a &lt;em&gt;high quality&lt;/em&gt; Python package you can be
proud of and having only limited time at your disposal?  The answer is not
“try harder,” the answer is to &lt;strong&gt;do less&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This talk will help you get there by talking about how you can make your
life easier, remove causes of friction with your contributors, and empower
said contributors to take over tasks that you can’t make time for anymore.&lt;/p&gt;
</summary></entry><entry><title>Memoizing recursive functions: How decorators are more elegant than I imagined</title><link href="https://pyvideo.org/pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Abid H. Mujtaba</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Calculating the Fibonacci series is a classic example of writing a recursive
function. However, calculating even &lt;cite&gt;fib(50)&lt;/cite&gt; will tie up a modern computer
for a couple of minutes. The solution to this problem is memoization, which
decorators make particularly easy.&lt;/p&gt;
&lt;p&gt;But how does a top-level decorator access the recursive call within the
function itself?&lt;/p&gt;
&lt;p&gt;The answer is both delightfully simple and extremely insightful, exposing
how seemingly simple language design choices can have profound effects on
its usage.&lt;/p&gt;
</summary></entry><entry><title>None, null, nil: lessons from caching and representing nothing with something</title><link href="https://pyvideo.org/pygotham-2019/none-null-nil-lessons-from-caching-and-representing-nothing-with-something.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Felice Ho</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/none-null-nil-lessons-from-caching-and-representing-nothing-with-something.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Phil Karlton once said, &lt;cite&gt;There are only two hard things in Computer Science:
cache invalidation and naming things&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;This talk is about the value of &lt;cite&gt;nothing&lt;/cite&gt;. I will discuss the success of
building a cache for app performance, but how at one point &lt;cite&gt;nothing&lt;/cite&gt; took
down production. You will learn factors to consider when caching for APIs
including cache storage, api design, cache invalidation, and serialization
(of null values).&lt;/p&gt;
</summary></entry><entry><title>Open source sustainability: what does this mean for Python?</title><link href="https://pyvideo.org/pygotham-2019/open-source-sustainability-what-does-this-mean-for-python.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Keenan Szulik</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/open-source-sustainability-what-does-this-mean-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Across open source communities—from Python to JavaScript to Ruby—businesses
and developers alike are wondering how we can better sustain the critical
infrastructure that open source projects have become. This talk will survey
different approaches within the Python community (including foundations,
startups, individual maintainer efforts), why they're different, and how/why
you should get involved!&lt;/p&gt;
</summary></entry><entry><title>Recreating "The Clock" with Machine Learning and Web Scraping</title><link href="https://pyvideo.org/pygotham-2019/recreating-the-clock-with-machine-learning-and-web-scraping.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Kirk Kaiser</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/recreating-the-clock-with-machine-learning-and-web-scraping.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;The Clock&amp;quot; is a 2010 art installation by Christian Marclay. It is an
experimental film that features over 12,000 individual shots of clocks from
movies and television, edited in such a way that the film itself functions
as a clock.&lt;/p&gt;
&lt;p&gt;In this talk, we'll use modern machine learning models and video web
scraping to recreate the concept behind &amp;quot;The Clock&amp;quot;. We'll use Kubernetes to
orchestrate building a modern video scraper, capable of getting around the
walls of YouTube and Instagram to grab user content.&lt;/p&gt;
&lt;p&gt;We’ll then use existing machine learning models to infer when clocks occur
in videos, to create our own montage with the found internet video.&lt;/p&gt;
&lt;p&gt;Along the way, we'll learn how to build and monitor machine learning
services meant to scale from our local computers to hundreds of machines.&lt;/p&gt;
</summary></entry><entry><title>Static Typing in Python</title><link href="https://pyvideo.org/pygotham-2019/static-typing-in-python.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/static-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well-known as a programming language without static types. This
means that you don't need to say what a given variable will hold, or whether
your function will return a string or an integer (or sometimes one, and
sometimes another!). This has historically made Python a very flexible and
beginner-friendly language.&lt;/p&gt;
&lt;p&gt;In this talk, we'll discuss the advantages and disadvantages to a static
type system, as well as recent efforts to introduce static typing to Python
via optional &amp;quot;type hints&amp;quot; and various tools to aid in adding types to Python
code. We'll see what this means for Python, for Python programmers, and what
the future has in store for Python's type system.&lt;/p&gt;
</summary></entry><entry><title>Taming Irreversibility with Feature Flags</title><link href="https://pyvideo.org/pygotham-2019/taming-irreversibility-with-feature-flags.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Hugo Bessa</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/taming-irreversibility-with-feature-flags.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's been 10 years since Flickr’s development team documented the use of
Feature Flags in their software. Tech giants like Google and Facebook have
also stated their use, yet weirdly enough there seems to be only but few
around the community benefitting from feature flipping.&lt;/p&gt;
&lt;p&gt;Flags make toggling whole features on and off without touching the code
possible. This can help the development team not only by cutting down on
response time to disasters but also by loading on peace of mind for
developers. There are also great improvements on code sync frequency and in
the launching flow of new features - especially in applications with a large
sum of users.&lt;/p&gt;
&lt;p&gt;Along with these great benefits, feature flags also raise some concerns:
there are multiple strategies to implement them and numerous new things to
worry about when developing new gated features. From the tools you can use
to store and retrieve your flags to the way you can maintain your
application’s consistency in edge cases scenarios.&lt;/p&gt;
&lt;p&gt;This talk focuses on some of the benefits and challenges faced when using
feature flags on team projects, and how to extract their best value without
losing sight of code quality.&lt;/p&gt;
</summary></entry><entry><title>The Benefits and Dangers of Face Recognition Technology</title><link href="https://pyvideo.org/pygotham-2019/the-benefits-and-dangers-of-face-recognition-technology.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Manojit Nandi</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/the-benefits-and-dangers-of-face-recognition-technology.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Biometric scanners, such as face recognition technology, have seen
widespread adoption in applications, such as identifying suspected
criminals, analyzing candidate's facial expressions during job interviews,
and [monitoring attendance at church](&lt;a class="reference external" href="https://churchix.com/"&gt;https://churchix.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As these technologies have become more pervasive, many organizations have
raised potential concerns about the way these technologies schematize faces.
Studies have shown commercial face recognition software has noticeably lower
accuracy on darker-skinned individuals, and automatic gender recognition
systems regularly misgender trans and non-binary individuals.&lt;/p&gt;
&lt;p&gt;In this talk, I will cover the known limitations of face recognition
technology and the privacy concerns raised about these systems. At the end,
I will cover how companies and government legislation aims to address these
concerns.&lt;/p&gt;
</summary></entry><entry><title>The Ministry of Silly Talks</title><link href="https://pyvideo.org/pygotham-2019/the-ministry-of-silly-talks.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Aditya Sirish</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/the-ministry-of-silly-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2019's Lightning Talks&lt;/p&gt;
</summary></entry><entry><title>The promised Django Land; the tale of one team’s epic journey from the country of Flask to Django Land</title><link href="https://pyvideo.org/pygotham-2019/the-promised-django-land-the-tale-of-one-teams-epic-journey-from-the-country-of-flask-to-django-land.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Nicole Zuckerman</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/the-promised-django-land-the-tale-of-one-teams-epic-journey-from-the-country-of-flask-to-django-land.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your product doesn't stop while you take the time to do a massive rewrite in
order to change your language or framework.  It seems everyone has an
opinion on what the 'best' tools are, and views changing tools as a red
flag.  Many organizations do change frameworks or languages mid-stream, to
greater or lesser success; in this talk, you'll get a real-life fairy tale
of one company's move from Flask to Django, why each was the best choice at
the time, how they got team buy-in, what technical decisions made things
easier or harder, and how they switched without stopping all product work.&lt;/p&gt;
</summary></entry><entry><title>The Python Use Spectrum</title><link href="https://pyvideo.org/pygotham-2019/the-python-use-spectrum.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Kojo Idrissa</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/the-python-use-spectrum.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python uses exist on a spectrum from personal problem solving to professional
software engineering. While the former has grown faster, fueling our
community's growth, many of our cultural norms are biased towards the
latter. Our ONLY potential contributors come from this spectrum, so how do
we maximize new contributors? And why should we care?&lt;/p&gt;
</summary></entry><entry><title>To comment or not? A data-driven look at attitudes toward code comments</title><link href="https://pyvideo.org/pygotham-2019/to-comment-or-not-a-data-driven-look-at-attitudes-toward-code-comments.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Veronica Hanus</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/to-comment-or-not-a-data-driven-look-at-attitudes-toward-code-comments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While most of us agree that commenting is part of writing maintainable code,
it’s very difficult for someone who has not yet worked in a community-
reviewed codebase to know what is good practice and not. The answers that
come back often conflict each other: Code should be DRY, but well-placed
comments save future devs. How can someone find the commenting style that is
best for them as they learn, grow, &amp;amp; contribute? My survey of 170 long-time
developers, Computer Science majors, bootcamp grads, &amp;amp; hobby programmers
confirms some expectations and brings others into question. Join me for a
data-based chat about the biggest pain points caused by our attitudes toward
commenting and the steps we can take to encourage a growth mindset and
empower programmers of all levels.&lt;/p&gt;
</summary></entry><entry><title>User focused API design</title><link href="https://pyvideo.org/pygotham-2019/user-focused-api-design.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Renato Oliveira</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/user-focused-api-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we talk about Web API Design, we're usually driven to think in
architecture, verbs and nouns. But we often forget our user: the developer.&lt;/p&gt;
&lt;p&gt;UX designers rely on many techniques to create great experiences. User
research, User Testing, Personas, Usage Data Analysis and others. However
when creating &lt;cite&gt;invisible products&lt;/cite&gt; we’re not used to think in usability. So
why don’t we take advantage of this background to improve our APIs
experiences?&lt;/p&gt;
&lt;p&gt;User experience refers to a person’s emotions and attitudes about using a
particular product, system or service. If your API is poorly designed,
documented or hard to start using and there is no requirement for the
developer to use it, they won’t. In fact, it’s more likely for them to build
something from scratch to replace your API rather than use it.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show some processes commonly used by UX designers and how
we can use them to create a great developer experience.&lt;/p&gt;
</summary></entry><entry><title>Using NLP To Reduce Wealth Flowing Into Local Human Trafficking Economies</title><link href="https://pyvideo.org/pygotham-2019/using-nlp-to-reduce-wealth-flowing-into-local-human-trafficking-economies.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Rob Spectre</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/using-nlp-to-reduce-wealth-flowing-into-local-human-trafficking-economies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With $150 billion generated in profit a year, human trafficking is an
illicit business model that affects children and adults in every community
in the United States. Any strategy to reduce the prevalence of the crime
must include reducing the amount of profit. Working with the New York Police
Department, I built a prototype using NLP to target the buyers contributing
the wealth to New York's human trafficking economy. That prototype went on
to serve nine jurisdictions across the United States and reach tens of
thousands of buyers.&lt;/p&gt;
&lt;p&gt;This talk explores the development of the chatbot engaging with buyers every
hour of every day across the country to reduce the economic incentives
behind human trafficking. We'll explore scoping the domain of an NLP
problem, designing the right machine learning model to address it, and
creative ways to collect sufficient data to train an effective model.&lt;/p&gt;
</summary></entry><entry><title>What physics can teach us about learning</title><link href="https://pyvideo.org/pygotham-2019/what-physics-can-teach-us-about-learning.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Marianne Hoogeveen</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/what-physics-can-teach-us-about-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why do convolutional networks work well for images? What happens in a neural
network when it 'learns’? What is machine learning, actually? These are the
type of questions that we should all be wondering about if we use machine
learning, and especially deep neural networks, on a daily basis. The field
of deep learning is developing rapidly with new architectures being invented
to try to solve ever more challenging problems, and this zoo of neural
networks needs a taxonomy.&lt;/p&gt;
&lt;p&gt;One way to bring order to the chaos is by using a physicist's intuition.
Bridges are being built, formalizing the link between well-developed fields
in physics and neural networks, which allow us to understand extracting
information relevant on the macroscopic scale as both a machine learning
problem and a problem that has been known in the physics community for a
long time, namely describing physical systems at different length scales.&lt;/p&gt;
</summary></entry><entry><title>Why Good Developers Write Bad Tests</title><link href="https://pyvideo.org/pygotham-2019/why-good-developers-write-bad-tests.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Michael Lynch</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/why-good-developers-write-bad-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most developers still approach tests with the same old techniques they use
for production code. But test code is not like other code. To write it well,
we need to reexamine the principles and goals that define our best
practices.&lt;/p&gt;
&lt;p&gt;In this talk, I'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What separates good tests from bad ones&lt;/li&gt;
&lt;li&gt;Why you should think twice before refactoring test functions&lt;/li&gt;
&lt;li&gt;How to identify anti-patterns in tests that hide bugs&lt;/li&gt;
&lt;li&gt;Why your test names are probably too short&lt;/li&gt;
&lt;li&gt;Why you should embrace magic numbers&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>You Don't Need Neural Nets - How Simpler Algorithms Can Solve Your Problems With Less Headache</title><link href="https://pyvideo.org/pygotham-2019/you-dont-need-neural-nets-how-simpler-algorithms-can-solve-your-problems-with-less-headache.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Gabe Levine</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/you-dont-need-neural-nets-how-simpler-algorithms-can-solve-your-problems-with-less-headache.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve heard a lot about Neural Networks (or “A.I.” as your company’s
marketing team likes to call it), and how they are solution to all of your
problems. Unfortunately, they’re also finicky and complex. And for most
problems that most people deal with, they’re not necessarily much better
than easier-to-use algorithms such as Gradient Boosted Trees (GBTs). We will
explain (briefly) what GBTs are, compare neural networks vs. GBTs on some
benchmark problems, demonstrate where Neural Nets are necessary
(images/sound/text), and share some tips for making GBTs working even on
those cases.&lt;/p&gt;
&lt;p&gt;This talk is meant for people with a cursory knowledge of machine learning,
but who aren’t necessarily experts.&lt;/p&gt;
</summary></entry></feed>