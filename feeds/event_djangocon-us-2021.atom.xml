<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - DjangoCon US 2021</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_djangocon-us-2021.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>An Introduction to Kubernetes ☸️</title><link href="https://pyvideo.org/djangocon-us-2021/an-introduction-to-kubernetes.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/an-introduction-to-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every other job opening for an IT position mentions Kubernetes. But unless you’ve worked with Kubernetes or seen it in action, you probably only have a vague idea of what it is, what it does and can do, or how to use it. And that’s understandable. It …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every other job opening for an IT position mentions Kubernetes. But unless you’ve worked with Kubernetes or seen it in action, you probably only have a vague idea of what it is, what it does and can do, or how to use it. And that’s understandable. It’s this big, abstract, software, that is supposed to “solve all the problems”. In this talk I’ll go through some of the concepts Kubernetes has. We’ll approach these by deploying a Django application, with the intent, that next time somebody asks you, “Do you know Kubernetes?”, you can confidently answer “Yes!”.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Bootstrapping your Local Python Environment</title><link href="https://pyvideo.org/djangocon-us-2021/bootstrapping-your-local-python-environment.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/bootstrapping-your-local-python-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and lo and behold, it has Python out-of-the-box and ready to roll… Or so you think? Maybe you want to get started doing Python development on Windows and see that you can grab Python easily from the Microsoft …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You cracked open your brand new Mac or Linux dream machine and lo and behold, it has Python out-of-the-box and ready to roll… Or so you think? Maybe you want to get started doing Python development on Windows and see that you can grab Python easily from the Microsoft Store. Should you? Let’s talk about getting started with the end in mind and making sure your development computer doesn’t become the next [superfund site](&lt;a class="reference external" href="https://xkcd.com/1987/"&gt;https://xkcd.com/1987/&lt;/a&gt;). We’ll quickly go through a tour of the various options such as pyenv, venv, virtualenv, conda and Docker as great ways to make sure you can develop in a sane environment.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Búsqueda de texto completo (FTS) en tu sitio web – mi proyecto de Google Summer of Code</title><link href="https://pyvideo.org/djangocon-us-2021/busqueda-de-texto-completo-fts-en-tu-sitio-web-mi-proyecto-de-google-summer-of-code.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Aldán Creo</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/busqueda-de-texto-completo-fts-en-tu-sitio-web-mi-proyecto-de-google-summer-of-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, descubrirás el nuevo &lt;em&gt;backend&lt;/em&gt; de búsqueda de Wagtail, que he desarrollado como proyecto del &lt;em&gt;Google Summer of Code&lt;/em&gt;, y las ventajas que ofrece. Además, ofreceré información sobre el &lt;em&gt;GSoC&lt;/em&gt;, un programa muy interesante, tanto para estudiantes como para desarrolladores veteranos.&lt;/p&gt;
&lt;p&gt;La charla usará un nivel técnico …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla, descubrirás el nuevo &lt;em&gt;backend&lt;/em&gt; de búsqueda de Wagtail, que he desarrollado como proyecto del &lt;em&gt;Google Summer of Code&lt;/em&gt;, y las ventajas que ofrece. Además, ofreceré información sobre el &lt;em&gt;GSoC&lt;/em&gt;, un programa muy interesante, tanto para estudiantes como para desarrolladores veteranos.&lt;/p&gt;
&lt;p&gt;La charla usará un nivel técnico simple. Te interesará especialmente si eres una &lt;strong&gt;persona nueva&lt;/strong&gt; en el mundo de Django, y quieres conocer cómo implementar funcionalidades de búsqueda en Wagtail. También te interesará si estás pensando en participar en el &lt;em&gt;GSoC&lt;/em&gt;. Por otro lado, si eres un &lt;strong&gt;desarrollador veterano&lt;/strong&gt;, esta charla también es para ti, ya que podrías incorporarte al &lt;em&gt;GSoC&lt;/em&gt; como mentor.&lt;/p&gt;
&lt;p&gt;La charla será &lt;strong&gt;participativa&lt;/strong&gt;, para que tengas una experiencia más entretenida y enriquecedora. Además, ¡estaré encantado de atender todas las preguntas que me plantees!&lt;/p&gt;
&lt;p&gt;Concretamente, trataré los siguientes puntos:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;¿Qué es Wagtail? ¿Qué ofrece?&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;¿Qué es el &lt;em&gt;GSoC&lt;/em&gt;?&lt;/dt&gt;
&lt;dd&gt;2.1. ¿Quién es su público objetivo?
2.2. ¿De qué forma participa Wagtail?&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Funcionalidad de búsqueda (&lt;em&gt;FTS&lt;/em&gt;) en Wagtail&lt;/dt&gt;
&lt;dd&gt;3.1. ¿Qué es &lt;em&gt;FTS&lt;/em&gt;?
3.2. ¿Cómo se instala la funcionalidad de búsqueda?
3.3. ¿Cuál era la situación previa al proyecto?
3.4. ¿Cuáles son las novedades?
3.5. ¿Qué ventajas ofrece el nuevo &lt;em&gt;backend&lt;/em&gt;?&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Mi experiencia como estudiante en el &lt;em&gt;GSoC&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;4.1. Búsqueda de proyectos
4.2. Redacción de una propuesta
4.3. Primeros pasos y comunicaciones: hablando con el mentor y el equipo de Wagtail
4.4. Desarrollo del proyecto: ¿cómo se ha implementado el nuevo &lt;em&gt;backend&lt;/em&gt; de búsqueda?
4.5. Fin del proyecto&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Consejos para el &lt;em&gt;GSoC&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;5.1. ¿Qué fue lo mejor, y qué fue lo peor?
5.2. ¿Cómo puedes evitar cometer mis errores?&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;¿Qué te puede ofrecer el &lt;em&gt;GSoC&lt;/em&gt;? ¿Qué puede ofrecer a los veteranos?&lt;/li&gt;
&lt;li&gt;¿Cómo te puedes apuntar al &lt;em&gt;GSoC&lt;/em&gt;?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;¡Anímate a conocer más sobre Wagtail, *FTS*, y *GSoC*, en un ambiente entretenido y distendido!&lt;/strong&gt;&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Demystifying Natural Language Processing across Several Industry Verticals</title><link href="https://pyvideo.org/djangocon-us-2021/demystifying-natural-language-processing-across-several-industry-verticals.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Jyotika Singh</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/demystifying-natural-language-processing-across-several-industry-verticals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Natural Language Processing (NLP) is the ability of a machine to understand human language. NLP is a popular field of data science and is widely used across different industry verticals to solve for various challenges. This talk will highlight NLP, what it is and will follow into how over …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Natural Language Processing (NLP) is the ability of a machine to understand human language. NLP is a popular field of data science and is widely used across different industry verticals to solve for various challenges. This talk will highlight NLP, what it is and will follow into how over 5 industries use NLP to solve for their use cases. The industries include e-commerce, finance, real estate, social media, and more.
This talk will then progress into some practical implementations of the common industrial solutions that are widely used across the globe today. These applications include sentiment analysis, automated customer service solutions like chatbots, and more. Furthermore, using open-source libraries to build these NLP utilizations will be discussed and presented.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Design django models such that your future self will thank you 👋</title><link href="https://pyvideo.org/djangocon-us-2021/design-django-models-such-that-your-future-self-will-thank-you.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Tarun Garg</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/design-django-models-such-that-your-future-self-will-thank-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While designing Django models, our primary objective is to develop a structure that'll enable us to build the said product feature, but while doing so ~we~ I used to neglect things like a) Ease of debugging/Auditing, b) Query patterns, c) and Scalability, and later when push came to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While designing Django models, our primary objective is to develop a structure that'll enable us to build the said product feature, but while doing so ~we~ I used to neglect things like a) Ease of debugging/Auditing, b) Query patterns, c) and Scalability, and later when push came to shove these things used to become a blocker. While we can't possibly think and preempt everything from day 1(and if you try to - it'll take long to roll that feature out), we can do something better 🤔.&lt;/p&gt;
&lt;p&gt;In this talk, we're going to be focusing on how you can avoid those mistakes early in your design phase 😌 - these are all the learnings I have had after making mistakes. We are going to cover the following -&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Auditing your models&lt;/li&gt;
&lt;li&gt;Boolean field for flags vs. timestamped field&lt;/li&gt;
&lt;li&gt;Soft delete vs. hard delete&lt;/li&gt;
&lt;li&gt;Many boolean flags in a model?&lt;/li&gt;
&lt;li&gt;How do you decide when to de-normalize?&lt;/li&gt;
&lt;li&gt;And much more ...&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;em&gt;As with every piece of advice in life, the answer of whether you should apply these or not is - *&lt;/em&gt;&amp;quot; it depends.&amp;quot;** In this task, we'll also discuss when you can use this advice and when you can choose to skip it.*&lt;/blockquote&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Get interactive! Putting a shell (or a desktop) in your Django app</title><link href="https://pyvideo.org/djangocon-us-2021/get-interactive-putting-a-shell-or-a-desktop-in-your-django-app.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Maari Tamm</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/get-interactive-putting-a-shell-or-a-desktop-in-your-django-app.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In our learning platform, we enable learners to interact with real-world hands-on lab environments, so that they can learn complex technologies like OpenStack, Kubernetes, Terraform, Ceph, Ansible, and others. To do that, we use [Apache Guacamole](&lt;a class="reference external" href="https://guacamole.apache.org/)'s"&gt;https://guacamole.apache.org/)'s&lt;/a&gt; &lt;cite&gt;guacd&lt;/cite&gt; service to provide learners with interactive shell …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In our learning platform, we enable learners to interact with real-world hands-on lab environments, so that they can learn complex technologies like OpenStack, Kubernetes, Terraform, Ceph, Ansible, and others. To do that, we use [Apache Guacamole](&lt;a class="reference external" href="https://guacamole.apache.org/)'s"&gt;https://guacamole.apache.org/)'s&lt;/a&gt; &lt;cite&gt;guacd&lt;/cite&gt; service to provide learners with interactive shell terminals — or even full desktop environments — that run right in people's browsers, no additional software required.&lt;/p&gt;
&lt;p&gt;The Guacamole platform is normally deployed in conjunction with [a Java servlet environment](&lt;a class="reference external" href="https://guacamole.apache.org/doc/gug/guacamole-architecture.html#web-application"&gt;https://guacamole.apache.org/doc/gug/guacamole-architecture.html#web-application&lt;/a&gt;) (commonly Apache Tomcat). But the Guacamole protocol is not tied to the Java language in any way, and a Python websocket proxy ([pyguacamole](&lt;a class="reference external" href="https://pypi.org/project/pyguacamole/"&gt;https://pypi.org/project/pyguacamole/&lt;/a&gt;)) is readily available under an open source (MIT) license.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss how we implemented a learning platform (based on [Open edX](&lt;a class="reference external" href="https://open.edx.org"&gt;https://open.edx.org&lt;/a&gt;)) that deploys an ASGI service under [Daphne](&lt;a class="reference external" href="https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/daphne/"&gt;https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/daphne/&lt;/a&gt;), uses pyguacamole to provide an asynchronous websocket connection to a Guacamole service, and thus creates a highly scalable, interactive, and immersive learning environment that helps people learn complex technology with no hardware or cloud investment at all.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>How we built a mobile application backend with Django in 10 weeks</title><link href="https://pyvideo.org/djangocon-us-2021/how-we-built-a-mobile-application-backend-with-django-in-10-weeks.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Çağıl Ulusahin</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/how-we-built-a-mobile-application-backend-with-django-in-10-weeks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about how we delivered APIs and backend services for a mobile app in 10 weeks using Django/Python.&lt;/p&gt;
&lt;p&gt;Building web apps with Django are a widely known and discussed subject. How about the recent trend with mobile apps?
Do we know enough about the needs and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about how we delivered APIs and backend services for a mobile app in 10 weeks using Django/Python.&lt;/p&gt;
&lt;p&gt;Building web apps with Django are a widely known and discussed subject. How about the recent trend with mobile apps?
Do we know enough about the needs and challenges of building a mobile app backend?&lt;/p&gt;
&lt;p&gt;In this talk, I will take you through day zero to day hero on our team's experience with building APIs and backend services for a mobile app in Django/Python.
What were the challenges, how web and mobile are similar and how they differ. We are also going to talk about daily challenges of backend teams and best practices,
planning and delivery of a project in a startup setup, some examples of what can go right and wrong. It is going to cover both technical and non-technical parts of the process.&lt;/p&gt;
&lt;p&gt;Some key sections:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overall hands on and hands off experience&lt;/li&gt;
&lt;li&gt;Working with an external mobile team&lt;/li&gt;
&lt;li&gt;A team that is delivering mobile backend for the first time&lt;/li&gt;
&lt;li&gt;Restful vs GraphQL&lt;/li&gt;
&lt;li&gt;Working backward compatible vs breaking the app&lt;/li&gt;
&lt;li&gt;Documentation of the api&lt;/li&gt;
&lt;li&gt;Managing your time&lt;/li&gt;
&lt;li&gt;Delivery times, keeping track with app releases&lt;/li&gt;
&lt;li&gt;Project management challenges&lt;/li&gt;
&lt;li&gt;Setting up development environments that is mobile compatible&lt;/li&gt;
&lt;li&gt;Mocking up EPs&lt;/li&gt;
&lt;li&gt;Data management&lt;/li&gt;
&lt;li&gt;Risks analysis&lt;/li&gt;
&lt;li&gt;Load testing&lt;/li&gt;
&lt;li&gt;Planning the launch&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>HTMX: Frontend Revolution</title><link href="https://pyvideo.org/djangocon-us-2021/htmx-frontend-revolution.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Thomas Güttler</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/htmx-frontend-revolution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I developed my first CGI script in 1998. Since that day I have seen a lot of hypes coming and going.&lt;/p&gt;
&lt;p&gt;The talk will consist of three parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My humorous odyssey of trying to find a great frontend framework&lt;/li&gt;
&lt;li&gt;Retrospective: What do I want from the frontend?&lt;/li&gt;
&lt;li&gt;I finally …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I developed my first CGI script in 1998. Since that day I have seen a lot of hypes coming and going.&lt;/p&gt;
&lt;p&gt;The talk will consist of three parts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My humorous odyssey of trying to find a great frontend framework&lt;/li&gt;
&lt;li&gt;Retrospective: What do I want from the frontend?&lt;/li&gt;
&lt;li&gt;I finally found: HTMX: HTML Fragments over the wire&lt;/li&gt;
&lt;li&gt;How to use HTMX with Django&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides simplicity, good Web Vitals performance (SEO) is a benefit of this method.&lt;/p&gt;
&lt;p&gt;The talk will express my personal opinion, feelings and fun. It won't dive into technical details.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Leveraging the ORM to enforce object-level permissions</title><link href="https://pyvideo.org/djangocon-us-2021/leveraging-the-orm-to-enforce-object-level-permissions.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Jeremy Stretch</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/leveraging-the-orm-to-enforce-object-level-permissions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django provides a robust permissions system out of the box, but it’s limited to operating at the model level. What if you want to assign permissions to create, modify, or delete only objects with certain attributes? In NetBox, we did exactly this by leveraging the ORM, JSON, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django provides a robust permissions system out of the box, but it’s limited to operating at the model level. What if you want to assign permissions to create, modify, or delete only objects with certain attributes? In NetBox, we did exactly this by leveraging the ORM, JSON, and database transactions. We’ll quickly demonstrate how easy Django makes it to create a custom authentication backend and permission model to accommodate even complex object-based constraints.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Lightweight Multi-Tenant Architecture for Django Applications</title><link href="https://pyvideo.org/djangocon-us-2021/lightweight-multi-tenant-architecture-for-django-applications.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Brendan Wee</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/lightweight-multi-tenant-architecture-for-django-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Software as a Service continues to grow in today’s landscape, many applications must adapt and provide services to multiple clients. Multitenancy has proven to be a mature architecture that can achieve secure data segregation while sustaining application functionality for multiple clients with lower costs. We have looked …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Software as a Service continues to grow in today’s landscape, many applications must adapt and provide services to multiple clients. Multitenancy has proven to be a mature architecture that can achieve secure data segregation while sustaining application functionality for multiple clients with lower costs. We have looked for pre-existing solutions to implement multitenancy, but were unable to find one. In this talk, we will demonstrate the benefits of multitenancy and provide a simple way to implement a lightweight, single-database, single-schema, multi-tenant architecture in virtually any Django application by using Django Guardian.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Managing the Test Data Nightmare</title><link href="https://pyvideo.org/djangocon-us-2021/managing-the-test-data-nightmare.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Andrew Knight</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/managing-the-test-data-nightmare.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good data for testing can be a &lt;strong&gt;nightmare&lt;/strong&gt; to manage. Sometimes, teams don't have much control over the data in their systems under test—it's just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Good data for testing can be a &lt;strong&gt;nightmare&lt;/strong&gt; to manage. Sometimes, teams don't have much control over the data in their systems under test—it's just dropped in, and it can change arbitrarily. Other times, teams need to build their own data sets, either before testing or during testing. Inaccurate data can leave test gaps. Incorrect or stale data can break tests. Large data can consume too much time. Ugh!&lt;/p&gt;
&lt;p&gt;In this talk, we'll cover strategies for defeating many types of test data nightmares:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;recognizing the difference between &lt;em&gt;product&lt;/em&gt; data and &lt;em&gt;test case&lt;/em&gt; data&lt;/li&gt;
&lt;li&gt;deciding when to prepare data statically beforehand or dynamically during testing&lt;/li&gt;
&lt;li&gt;using data to control how tests run or reflect product state&lt;/li&gt;
&lt;li&gt;hard-coding values versus discovering data in the system&lt;/li&gt;
&lt;li&gt;avoiding collisions on shared data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The strategies we cover can be applied to any project in any language, especially Django. After this talk, you will wake up from the nightmare and handle test data cleanly and efficiently like a pro!&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Modern Web Testing: Going Beyond Selenium</title><link href="https://pyvideo.org/djangocon-us-2021/modern-web-testing-going-beyond-selenium.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Dmitry Vinnik</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/modern-web-testing-going-beyond-selenium.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is safe to say that Selenium WebDriver is the number one testing tool for many software engineers across the globe. However, as the tech world has been growing rapidly, so has the testing industry. More and more UI testing frameworks besides Selenium are gaining popularity.&lt;/p&gt;
&lt;p&gt;These new test …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is safe to say that Selenium WebDriver is the number one testing tool for many software engineers across the globe. However, as the tech world has been growing rapidly, so has the testing industry. More and more UI testing frameworks besides Selenium are gaining popularity.&lt;/p&gt;
&lt;p&gt;These new test frameworks are especially appealing to its users because of the promise to solve speed, maintenance, development and other concerns of WebDriver implementations. These new, non-Selenium frameworks emphasize Rapid Test Development practices, and it has been resonating with the development community.&lt;/p&gt;
&lt;p&gt;In this talk, we dive into test solutions evolved from Selenium like Protractor, and talk about non-Selenium frameworks like TestCafe and Cypress.io. We discuss why these new tools are gaining popularity and continue to disrupt the traditional testing standards of Selenium WebDriver. More importantly, we address how to get started and what mistakes to avoid when first implementing TestCafe or Cypress.io in your team.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Pydon'ts – Write elegant Python code (v1.1)</title><link href="https://pyvideo.org/djangocon-us-2021/pydonts-write-elegant-python-code-v11.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/pydonts-write-elegant-python-code-v11.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show what idiomatic Python code looks like and illustrate how the subjective notion of &amp;quot;beautiful&amp;quot;, or &amp;quot;elegant&amp;quot; code, can make your code objectively better, regardless of your Python skill level.&lt;/p&gt;
&lt;p&gt;We do that by visiting several vanilla Python features that people sometimes forget to learn …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show what idiomatic Python code looks like and illustrate how the subjective notion of &amp;quot;beautiful&amp;quot;, or &amp;quot;elegant&amp;quot; code, can make your code objectively better, regardless of your Python skill level.&lt;/p&gt;
&lt;p&gt;We do that by visiting several vanilla Python features that people sometimes forget to learn, as they rush to &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; ing all the shiny modules and frameworks they really want to use.&lt;/p&gt;
&lt;p&gt;In order to achieve this, we go through the learning journey of a hypothetical Pythonista, taking a function written by them and refactoring it incrementally through the use of Pythonic idioms and patterns.&lt;/p&gt;
&lt;p&gt;The whole talk will build around a weekly series of articles I have been publishing, where I explore all the vanilla Python features that make Python one of the most interesting programming languages to learn.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Rapid Prototyping in Django</title><link href="https://pyvideo.org/djangocon-us-2021/rapid-prototyping-in-django.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/rapid-prototyping-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a usable prototype in a weekend is the dream of startups and established business alike.  This is the lean startup approach.  You have many ideas.  Not all of those ideas will work, and all of them take attention away from known ways of making money.  So, you need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a usable prototype in a weekend is the dream of startups and established business alike.  This is the lean startup approach.  You have many ideas.  Not all of those ideas will work, and all of them take attention away from known ways of making money.  So, you need to validate those ideas as cheaply as possible.  This means you need to build MVPs (minimum viable products) as fast as possible.  But there is a danger; if you cut the wrong corners and one of these new products takes off, that MVP will be the seed for a massive product and you will be stuck with your mistakes for years to come.  This talk will show you the tools and techniques to build a rapid prototype in Django, as well as how to minimize regrets later.&lt;/p&gt;
&lt;p&gt;I'm the CTO of Zagaran, Inc., a contract software company based in Boston.  We've built dozens of Django websites.  Many of our projects have started with building a prototype on a small budget, and Django is one of our favorite technologies for doing this.  In this talk, we'll cover the following technologies and more:
* [Django's model forms](&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/forms/modelforms/"&gt;https://docs.djangoproject.com/en/dev/topics/forms/modelforms/&lt;/a&gt;) (minimizes boilerplate code for HTML form rendering and validation)
* [django-crispy-forms](&lt;a class="reference external" href="https://django-crispy-forms.readthedocs.io"&gt;https://django-crispy-forms.readthedocs.io&lt;/a&gt;) (gives you out of the box styling of forms and more backend control over layout)
* [django-environ](&lt;a class="reference external" href="https://django-environ.readthedocs.io"&gt;https://django-environ.readthedocs.io&lt;/a&gt;) (improved ability to configure environment variables)
* [django-storages](&lt;a class="reference external" href="https://django-storages.readthedocs.io"&gt;https://django-storages.readthedocs.io&lt;/a&gt;) (production-grade seamless file storage)
* [social-auth-app-django](&lt;a class="reference external" href="https://python-social-auth.readthedocs.io/en/latest/configuration/django.html"&gt;https://python-social-auth.readthedocs.io/en/latest/configuration/django.html&lt;/a&gt;) (makes oAuth logins easy)
* [django-extensions](&lt;a class="reference external" href="https://django-extensions.readthedocs.io"&gt;https://django-extensions.readthedocs.io&lt;/a&gt;) (makes debugging much easier)
* [The Django Admin](&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/"&gt;https://docs.djangoproject.com/en/dev/ref/contrib/admin/&lt;/a&gt;) (easy creation of CRUD interfaces for internal users)&lt;/p&gt;
&lt;p&gt;See [Zagaran's Django project template](&lt;a class="reference external" href="https://github.com/zagaran/sample-django-app"&gt;https://github.com/zagaran/sample-django-app&lt;/a&gt;) for an example of these technologies in action.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>REST, HATEOAS &amp; Django - It's OK to not use JSON... or Javascript</title><link href="https://pyvideo.org/djangocon-us-2021/rest-hateoas-django-its-ok-to-not-use-json-or-javascript.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Carson Gross</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/rest-hateoas-django-its-ok-to-not-use-json-or-javascript.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;# REST, HATEOAS &amp;amp; Django -
&lt;em&gt;it's OK to not use JSON... or Javascript&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;## Intro&lt;/p&gt;
&lt;p&gt;In this talk we will revisit the basics of REST (REpresentational State Transfer), a term coined by Roy Fielding to describe the web network architecture, in contrast with older client-server network architectures.  In particular we will focus …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;# REST, HATEOAS &amp;amp; Django -
&lt;em&gt;it's OK to not use JSON... or Javascript&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;## Intro&lt;/p&gt;
&lt;p&gt;In this talk we will revisit the basics of REST (REpresentational State Transfer), a term coined by Roy Fielding to describe the web network architecture, in contrast with older client-server network architectures.  In particular we will focus in on the &amp;quot;Uniform Interface&amp;quot; constraint and get to the bottom of what that means, discussing each of the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Resource identification in requests&lt;/li&gt;
&lt;li&gt;Resource manipulation through representations&lt;/li&gt;
&lt;li&gt;Self-descriptive messages&lt;/li&gt;
&lt;li&gt;Hypermedia as the engine of application state (HATEOAS)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with a particular focus on the last two.&lt;/p&gt;
&lt;p&gt;## REST: Wandering in the Desert&lt;/p&gt;
&lt;p&gt;After gaining a deeper understanding of REST, we will look at the history of REST in development.  We will look at how the term was appropriated for use in XML APIs, when AJAX first emerged, and how it was then retained when APIs switched to JSON.  I will demonstrate why this is inappropriate by focusing on the ideas of the self-descriptive messages and HATEOAS constraints of REST.  We will look at recent developments in the JSON API space and how they are moving away from the concept of REST.&lt;/p&gt;
&lt;p&gt;## REST: A New Hope&lt;/p&gt;
&lt;p&gt;Finally, having established that REST does not apply well in the JSON API world, we will ask &lt;em&gt;where&lt;/em&gt; it is appropriate and answer: in hypermedia systems.  And, it will turn out, tools like Django are wonderful for producing hypermedia systems!  In reexamining the hypermedia approach, and how it trivially satisfies the REST-ful architecture, we will look at a tool, htmx, that can help you create more advanced user experience while staying within the hypermedia architecture.&lt;/p&gt;
&lt;p&gt;It's OK to not use JSON... or Javascript!&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Scaling Django to 500 apps</title><link href="https://pyvideo.org/djangocon-us-2021/scaling-django-to-500-apps.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Dan Palmer</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/scaling-django-to-500-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever...
- Felt like a Django codebase is a bit of a mess?
- Struggled to find where something happens in a codebase?
- Felt like Microservices is the only way to manage your complexity?&lt;/p&gt;
&lt;p&gt;This talk is a tour of the techniques, conventions, and tools, that Thread uses to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever...
- Felt like a Django codebase is a bit of a mess?
- Struggled to find where something happens in a codebase?
- Felt like Microservices is the only way to manage your complexity?&lt;/p&gt;
&lt;p&gt;This talk is a tour of the techniques, conventions, and tools, that Thread uses to scale our Django codebase. These have helped us over the years to add more developers, more code, more functionality, and more frequent releases, while still being productive in one large Django codebase.&lt;/p&gt;
&lt;p&gt;We have nearly 500 apps, around 450 models, around 400k lines of Python, and around 1000 URL patterns. We've also had many more over the past 8 years and 120k commits. Despite this, we release around 10-20 times a day with a small engineering team.&lt;/p&gt;
&lt;p&gt;Some of the things we'll cover include:
- What goes into an app
- Structuring apps for readability
- Tools and techniques
- Issues to be aware of
- Things we got wrong when we started!
- Our wishlist for improvements to Django to better support apps&lt;/p&gt;
&lt;p&gt;This talk is targeted at those familiar with Django concepts, but those working day to day with other engineers on a Django codebase are likely to get the most out of it.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>SE HABLA ESPAÑOL: Django y multiples idiomas.</title><link href="https://pyvideo.org/djangocon-us-2021/se-habla-espanol-django-y-multiples-idiomas.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Adolfo Fitoria</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/se-habla-espanol-django-y-multiples-idiomas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla hablaremos sobre cómo preparar tu proyecto para soportar múltiples idiomas en nuestros datos estáticos (plantillas, mensajes, nombres de campos y modelos) selección automática o manual de idioma, traducción de URLs y traducción de contenido.&lt;/p&gt;
&lt;p&gt;La traducción en un proyecto Django esta soportada con las &amp;quot;pilas incluidas …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla hablaremos sobre cómo preparar tu proyecto para soportar múltiples idiomas en nuestros datos estáticos (plantillas, mensajes, nombres de campos y modelos) selección automática o manual de idioma, traducción de URLs y traducción de contenido.&lt;/p&gt;
&lt;p&gt;La traducción en un proyecto Django esta soportada con las &amp;quot;pilas incluidas&amp;quot; del framework, se repasarán diversos casos de uso para la implementación correcta de internacionalización y localización según las necesidades del proyecto.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducción a Internacionalización y localización.&lt;/li&gt;
&lt;li&gt;Traduciendo código y mensajes.&lt;/li&gt;
&lt;li&gt;Traduciendo plantillas.&lt;/li&gt;
&lt;li&gt;Generando y compilando mensajes.&lt;/li&gt;
&lt;li&gt;Detectando idiomas según del usuario.&lt;/li&gt;
&lt;li&gt;Traduciendo contenido dinámico, diferentes enfoques basados en nuestra necesidad.&lt;/li&gt;
&lt;li&gt;Soportando varios idiomas en admin y formularios.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Securing Django Applications</title><link href="https://pyvideo.org/djangocon-us-2021/securing-django-applications.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Gajendra Deshpande</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/securing-django-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most popular Python-based web framework used for creating web applications. The web applications are vulnerable for various reasons including a) configuration settings of the web applications b) lack of implementation of security best practices and secure coding and c) lack of awareness of secure first web …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is the most popular Python-based web framework used for creating web applications. The web applications are vulnerable for various reasons including a) configuration settings of the web applications b) lack of implementation of security best practices and secure coding and c) lack of awareness of secure first web applications among developers. The vulnerable web applications put the data of the customers at greater risk and the compromised code can lead to problems beyond control. It is very important to develop secure web applications to protect customer data and code to mitigate the risk. In this talk, we will focus on two aspects. First, performing penetration testing on Django web applications to identify vulnerabilities and scanning for Open Web Application Security Project (OWASP) Top 10 risks. Second, strategies and configuration settings for making the source code and Django applications secure. We will also discuss the Djangohunter tool to identify incorrectly configured Django applications that are exposing sensitive information.
Outline
1.      Security aspects of Django web applications (03 minutes)
2.      Penetration testing of Django web applications (07 Minutes)
3.      Overview of OWASP Top 10 risks (10 Minutes)
4.      Djangohunter tool demonstration (06 Minutes)
5.      Strategies and configuration settings to make Django Application secure (10 Minutes)
6.     Conclusion and Questions (04 Minutes)&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Una serie de relatos de mentoring</title><link href="https://pyvideo.org/djangocon-us-2021/una-serie-de-relatos-de-mentoring.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Ramón Huidobro</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/una-serie-de-relatos-de-mentoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Espero poder motivar a los participantes a probar mentorear.
El esquema que propongo:
- Clarificar la diferencia entre enseñar y mentorear
- Ser mentor Voluntario (Ejemplos propios: programando con menores, Rails Girls Summer of Code, talleres)
- Buenas prácticas de mentor
- En el lugar del trabajo (Integracion, entrenaje)
- Concluciones, lectura adicional
Aportes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Espero poder motivar a los participantes a probar mentorear.
El esquema que propongo:
- Clarificar la diferencia entre enseñar y mentorear
- Ser mentor Voluntario (Ejemplos propios: programando con menores, Rails Girls Summer of Code, talleres)
- Buenas prácticas de mentor
- En el lugar del trabajo (Integracion, entrenaje)
- Concluciones, lectura adicional
Aportes:
- La responsabilidad de dejar una buena impresión
- Estimular buenos hábitos
- Apoyar al mentee
- Aprender juntos y admitir cuando uno no sabe algo
- Ser una persona buena para escuchar
- Como y donde poder empezar a mentorear
- Comunidades de práctica
- Demostrar el proceso de solución de problemas
- Compartir la alegría de compartir el conocimiento
Llevo 8 años de experiencia trabajando con menores programando, participando en talleres introduciéndole a la gente la programación.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Usando filas de tareas (task queues) en aplicaciones web</title><link href="https://pyvideo.org/djangocon-us-2021/usando-filas-de-tareas-task-queues-en-aplicaciones-web.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Josue Balandrano Coronel</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/usando-filas-de-tareas-task-queues-en-aplicaciones-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Al usar filas de tareas nuestros procesos se convierten en asincrónicos y esto hace nuestra aplicación más complicada.&lt;/p&gt;
&lt;p&gt;En esta plática expondré los conceptos básicos de las filas de trabajo, cuando usarlas, y problemas y soluciones comunes.&lt;/p&gt;
&lt;p&gt;Este será el formato:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducción: ¿Qué son las filas de trabajo?&lt;/li&gt;
&lt;li&gt;Implementaciones …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Al usar filas de tareas nuestros procesos se convierten en asincrónicos y esto hace nuestra aplicación más complicada.&lt;/p&gt;
&lt;p&gt;En esta plática expondré los conceptos básicos de las filas de trabajo, cuando usarlas, y problemas y soluciones comunes.&lt;/p&gt;
&lt;p&gt;Este será el formato:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducción: ¿Qué son las filas de trabajo?&lt;/li&gt;
&lt;li&gt;Implementaciones populares
- Redis and popular libraries.
- AMQP and popular libraries.&lt;/li&gt;
&lt;li&gt;Integraciones comunes
- Arquitecturas y patrones&lt;/li&gt;
&lt;li&gt;Cierre y conclusión&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Using simple database triggers for complex Django problems</title><link href="https://pyvideo.org/djangocon-us-2021/using-simple-database-triggers-for-complex-django-problems.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Wes Kendall</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/using-simple-database-triggers-for-complex-django-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the years I have struggled with a large class of Django problems, and I have found that these problems are much better solved using a common database feature called triggers.&lt;/p&gt;
&lt;p&gt;Let's consider some real-world problems before we get into what triggers are. Say that you want to ensure …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the years I have struggled with a large class of Django problems, and I have found that these problems are much better solved using a common database feature called triggers.&lt;/p&gt;
&lt;p&gt;Let's consider some real-world problems before we get into what triggers are. Say that you want to ensure that a &amp;quot;status&amp;quot; field on a model can only transition between valid states. There are many popular libraries like django-fsm that try to solve this problem. The major problem with these libraries is that it's also very easy to accidentally bypass what the library aims to protect. For example, just doing certain bulk updates with django-fsm will bypass transition protection. This is no fault of django-fsm - it's just nearly impossible to try to intercept every single database call in an application and do certain things. This, however, can lead to some serious errors down the road and confusion about why the library didn't &amp;quot;just work&amp;quot; in the first place.&lt;/p&gt;
&lt;p&gt;Now let's expand this a bit more - consider protecting your models from deletion, making append-only models, versioning models, doing soft deletion, or tracking changes to your models. There are a plethora of libraries just for these very common problems, and the solutions are all prone to the same faults as django-fsm - there are &lt;em&gt;always&lt;/em&gt; ways to purposefully or accidentally bypass what those libraries aim to do, and usually without knowing.&lt;/p&gt;
&lt;p&gt;Similar to how you wouldn't rely on your application code to enforce a database uniqueness constraint, this talk aims to illustrate why you may not want your application code to solve these types of problems either. When you try to solve a database problem in the application, you will normally experience pain. Instead, I want to open people's eyes to the power of database triggers and illustrate why they should always be top of mind when designing high-quality Django projects and evaluating solutions to certain problems.&lt;/p&gt;
&lt;p&gt;A database trigger is a method that runs entirely in the database and is based on events and conditions. For example, one can create a database trigger to compute derived fields on a row immediately after the row is inserted or updated. Normally a user will have to write these triggers as database functions that are a superset of the SQL dialect supported by the database, such as PL/pgSQL for Postgres. These intricacies, along with the many barriers for even installing a trigger, have really inhibited adoption of triggers in Django.&lt;/p&gt;
&lt;p&gt;This is terrible though, because triggers are so useful for so many problems people don't even realize. For example, have you ever accidentally used Django's &amp;quot;User.objects.create()&amp;quot; to create a user and not the main &amp;quot;User.objects.create_user()&amp;quot; interface? You can use a trigger to enforce that the engineers of an application always use &amp;quot;Users.objects.create_user()&amp;quot; to create users. And no, it's not through monkey patching - &lt;em&gt;Any&lt;/em&gt; creation of a user, even in raw SQL, would be blocked if you didn't go through the proper interface in your application. Examples like these, which sometimes can make people scratch their heads as to how it is even possible to do this, are what make triggers so fun and unique to talk about.&lt;/p&gt;
&lt;p&gt;I have created an open-source library that is battle-tested at various large organizations that integrates triggers into Django. Triggers are registered and automatically migrated with your models, and there are lots of pre-built triggers for you to use. Users can even write conditional triggers with Django idioms like F and Q objects. If you are feeling really adventurous, you can integrate your own native triggers with ease too. I have an interactive tutorial for this library that I use during talks, I have performed this talk at 4 different companies as a tech talk, and I have also performed this talk at a prominent Django city meetup.&lt;/p&gt;
&lt;p&gt;This talk provides the following take-aways for the participants:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Understanding how triggers work in databases and what problems they can be used to solve.&lt;/li&gt;
&lt;li&gt;How people can seamlessly integrate triggers in their Postgres Django projects with an open source library. Currently the library only works for Postgres triggers, but I will have MySQL support integrated by Djangocon.&lt;/li&gt;
&lt;li&gt;How people can solve a wide array of difficult problems very easily with triggers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some examples of problems we will solve together using an interactive tutorial:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Protecting operations - preventing deletes, making append-only models, making read-only columns, and &amp;quot;freezing&amp;quot; published models.&lt;/li&gt;
&lt;li&gt;Soft-deleting models - setting a &amp;quot;is_active&amp;quot; flag to &amp;quot;False&amp;quot; when a model is deleted instead of actually deleting it.&lt;/li&gt;
&lt;li&gt;Finite state machines - ensuring that a &amp;quot;status&amp;quot; field can only transition among valid states.&lt;/li&gt;
&lt;li&gt;Versioning a model - incrementing a version number of a model only when fields have changed.&lt;/li&gt;
&lt;li&gt;Official interfaces - requiring that an &amp;quot;official&amp;quot; interface, like Model.objects.my_create() vs. Model.objects.create(), is used to create a model.&lt;/li&gt;
&lt;li&gt;History tracking - snapshotting before/after versions of your model automatically while still capturing context like the logged-in user.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these problems are solved in a few lines of code. Because of the properties of database triggers, these problems are also enforced at the database level - e.g. a user cannot delete a protected model even if they try to do it in raw SQL. That's the power of triggers, and that's why they are an important concept for Django developers to consider when approaching various problems. This talk aims to open people's eyes to what those problems are, why triggers are useful to them, and how they are actually very easy to use in practice.&lt;/p&gt;
&lt;p&gt;Triggers are inherently an advanced subject, so this talk is not aimed at the beginning Django user. I am tailoring this more to the intermediate/advanced user that has implemented a fair amount of model design. For example, if you've overridden a model's &amp;quot;Meta&amp;quot; and added unique constraints before, you should be able to put lessons from this talk into practice.&lt;/p&gt;
&lt;p&gt;I have been using Django in practice full time for 9 years now, and I have used it exclusively as the foundation for three different startups from the ground up. I went all-in on triggers at my last full-time job when it was the only reliable way to solve our history tracking problem, and that's how the open-source library was born. I love talking to people about Django, and I really love talking about integrating triggers with Django as you might be able to tell. That's why I'm so excited to talk about it at Djangocon and hopefully give people some other great ways to improve their application design.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Wagtail Live: bringing a live blogging tool to the Django ecosystem</title><link href="https://pyvideo.org/djangocon-us-2021/wagtail-live-bringing-a-live-blogging-tool-to-the-django-ecosystem.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Tidjani Dia</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/wagtail-live-bringing-a-live-blogging-tool-to-the-django-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;People want their news as fast as possible. Increasingly, large news organisations are using 'live blogging' techniques to bring breaking stories to the public as they happen - this could be goals in a soccer match, or the unfolding events of an election night.&lt;/p&gt;
&lt;p&gt;As a student on the Google …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;People want their news as fast as possible. Increasingly, large news organisations are using 'live blogging' techniques to bring breaking stories to the public as they happen - this could be goals in a soccer match, or the unfolding events of an election night.&lt;/p&gt;
&lt;p&gt;As a student on the Google Summer of Code programme, I'm bringing a tool like this into the Django ecosystem. I've been working on Wagtail Live, a project to help reporters submit text, images and videos from lightweight tools like Slack, Telegram and WhatsApp, directly into a CMS that updates the content for its audience in real time.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you how to use Wagtail Live to build a live blog in your own app.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First, we will give a better overview of what a live blog is.&lt;/li&gt;
&lt;li&gt;We will then explain how Wagtail Live makes live blogging happen.&lt;/li&gt;
&lt;li&gt;Last, we will go through the steps of building a live blog with Wagtail Live and Slack from A to Z.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>What in the World? Determining and demonstrating meaning in geospatial data</title><link href="https://pyvideo.org/djangocon-us-2021/what-in-the-world-determining-and-demonstrating-meaning-in-geospatial-data.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Tyrel Denison</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/what-in-the-world-determining-and-demonstrating-meaning-in-geospatial-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ve reached a point with technology that almost everything used to capture data captures geo-coordinates. From smart phones and digital cameras to drones and industrial equipment, the location that data is created at is now default in metadata. Utilizing it in algorithms, calculations, filtering, etc has become table …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ve reached a point with technology that almost everything used to capture data captures geo-coordinates. From smart phones and digital cameras to drones and industrial equipment, the location that data is created at is now default in metadata. Utilizing it in algorithms, calculations, filtering, etc has become table stakes in the products we build around that data. Thankfully, the tools to use this readily available information have grown with its proliferation. Learn how to use the power of PostGIS in the context of GeoDjango to write powerful geo-spatial queries. Get to know the data formats and file formats commonly used for geo-spatial data and why you should hate Shapefiles. And see the impressive visualizations you can render client side using tools built with WebGL.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Writing tests for a Django application doesn't have to suck: the simplest way to write short, fast and maintainable tests</title><link href="https://pyvideo.org/djangocon-us-2021/writing-tests-for-a-django-application-doesnt-have-to-suck-the-simplest-way-to-write-short-fast-and-maintainable-tests.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Alan Una Larisa</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/writing-tests-for-a-django-application-doesnt-have-to-suck-the-simplest-way-to-write-short-fast-and-maintainable-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Let's face it, writing tests sucks&lt;/p&gt;
&lt;p&gt;There is a widspread belief that software engineers hate writing tests, even if they sometimes don’t like to admit it. This might just be especially true for Django as comprehensively testing Django applications is not exactly straightforward. For a complete coverage we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Let's face it, writing tests sucks&lt;/p&gt;
&lt;p&gt;There is a widspread belief that software engineers hate writing tests, even if they sometimes don’t like to admit it. This might just be especially true for Django as comprehensively testing Django applications is not exactly straightforward. For a complete coverage we need to have unit tests as well as integration tests and oftentimes at least some of those are more difficult to write than the code itself.&lt;/p&gt;
&lt;p&gt;But what should we do about it? Should we do it while hating it (bad), not do it (worse) or, as engineers, try to come up with tools that automate the boring tasks, make our job easier and less error-prone? It seems there is still room for improvement on this front, especially in the Django context.&lt;/p&gt;
&lt;p&gt;### Writing a comprehensive Django test suite sucks even more&lt;/p&gt;
&lt;p&gt;Most software engineers believe unit tests should be independent of the database. If you have ever written unit tests for Django you know that doing so can be very complicated. It requires mocking all of the database queries, usually with the help of Unittest’s [mock](&lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;https://docs.python.org/3/library/unittest.mock.html&lt;/a&gt;). While the latter can be an excellent tool for many use cases, it was not made with Django in mind. Consequently mocking queries can be counterintuitive and convoluted, often requiring extra mental gymnastics just to make a simple test pass.&lt;/p&gt;
&lt;p&gt;### Let’s do something about it!&lt;/p&gt;
&lt;p&gt;Writing tests is necessary for larger production codebases, but is good practice for any application. It makes sense that the simpler writing tests is, the more people will do it, and the overall quality of software will improve, so we should strive towards that.&lt;/p&gt;
&lt;p&gt;I attempt to do my part in solving this problem by writing a [library](&lt;a class="reference external" href="https://github.com/larsvonschaff/Django-mockingbird"&gt;https://github.com/larsvonschaff/Django-mockingbird&lt;/a&gt;) (please note the account name is a pseudonym) that helps mock Django models for testing. It automatically constructs an object which mimics your model’s exact behaviour in only one line of code. This makes your tests short, simple, fast and easy to maintain.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Zero to production-ready: a best-practices process for Docker packaging</title><link href="https://pyvideo.org/djangocon-us-2021/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/zero-to-production-ready-a-best-practices-process-for-docker-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.&lt;/p&gt;
&lt;p&gt;And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 70 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?&lt;/p&gt;
&lt;p&gt;To help you quickly package your application in a production-ready way, this talk will give you a process to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimizing build time and image size.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Desmitificando el Mantenimiento</title><link href="https://pyvideo.org/djangocon-us-2021/desmitificando-el-mantenimiento.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Katherine Michel</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/desmitificando-el-mantenimiento.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vas a aprender:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cómo configurar un proyecto para el éxito a largo plazo&lt;/li&gt;
&lt;li&gt;Cuales community health files necesitas&lt;/li&gt;
&lt;li&gt;Los tipos de general licenses, cómo elegir una y consideraciones especiales&lt;/li&gt;
&lt;li&gt;Cómo mantener tu código seguro&lt;/li&gt;
&lt;li&gt;Mejores prácticas para incorporar a los colaboradores&lt;/li&gt;
&lt;li&gt;La importancia de la documentación y las estrategias …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vas a aprender:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cómo configurar un proyecto para el éxito a largo plazo&lt;/li&gt;
&lt;li&gt;Cuales community health files necesitas&lt;/li&gt;
&lt;li&gt;Los tipos de general licenses, cómo elegir una y consideraciones especiales&lt;/li&gt;
&lt;li&gt;Cómo mantener tu código seguro&lt;/li&gt;
&lt;li&gt;Mejores prácticas para incorporar a los colaboradores&lt;/li&gt;
&lt;li&gt;La importancia de la documentación y las estrategias para mantenerla&lt;/li&gt;
&lt;li&gt;Un proceso típico de revisión de pull request&lt;/li&gt;
&lt;li&gt;Pruebas de matriz específicas de Python/Django, calidad de código y herramientas de empaquetado&lt;/li&gt;
&lt;li&gt;Cómo mantener el código actualizado usando release management&lt;/li&gt;
&lt;li&gt;Cuales funciones de GitHub podrían ser más útiles&lt;/li&gt;
&lt;li&gt;Estrategias de project management&lt;/li&gt;
&lt;li&gt;Cómo medir la salud de tu proyecto&lt;/li&gt;
&lt;li&gt;La importancia de publicitar tu proyecto&lt;/li&gt;
&lt;li&gt;Estrategias para administrar el trabajo a medida que escala&lt;/li&gt;
&lt;li&gt;Algunas reflexiones sobre people management y tutoría&lt;/li&gt;
&lt;li&gt;Consejos para comenzar como mantenedor&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>DSF Overview</title><link href="https://pyvideo.org/djangocon-us-2021/dsf-overview.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Anna Makarudze</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/dsf-overview.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anna will give an overview of the Django Software Foundation's mission and role in the larger Django Community.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>graphene-django or: How I learned to stop RESTing and Love the Graph</title><link href="https://pyvideo.org/djangocon-us-2021/graphene-django-or-how-i-learned-to-stop-resting-and-love-the-graph.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/graphene-django-or-how-i-learned-to-stop-resting-and-love-the-graph.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Though controversial, people generally agree that a major value of Python type hints is safety. Robust type safety reduces a whole category of defect to nothing, allowing developers to focus on bigger problems. What if we could do this for our API calls?&lt;/p&gt;
&lt;p&gt;GraphQL provides not just a query …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Though controversial, people generally agree that a major value of Python type hints is safety. Robust type safety reduces a whole category of defect to nothing, allowing developers to focus on bigger problems. What if we could do this for our API calls?&lt;/p&gt;
&lt;p&gt;GraphQL provides not just a query language, but a type system. The producer and consumer are both aware of the type schema, enabling a boost in productivity at an integration point where mistakes commonly occur. Django has long been a full stack engine at its core, and then a RESTful API engine with the wide adoption of django-rest framework. Where can it go next?&lt;/p&gt;
&lt;p&gt;The graphene-django package enables a Django project to provide a GraphQL endpoint built from its models. Using a declarative style most Djangonauts will find beautifully familiar, graphene-django helps developers spin up APIs quickly for consumption by client-side GraphQL consumers like [Apollo](&lt;a class="reference external" href="https://www.apollographql.com/"&gt;https://www.apollographql.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you attend this talk, you'll come away having learned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How GraphQL compares to REST&lt;/li&gt;
&lt;li&gt;Why this approach can help you maintain loose coupling between teams&lt;/li&gt;
&lt;li&gt;How to build GraphQL types on top of your Django models&lt;/li&gt;
&lt;li&gt;How to provide a schema that resolves queries to model fields&lt;/li&gt;
&lt;li&gt;How to try your new API out in the browser&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Herding Ponies: Coordinating and Automating Django Upgrades Across 100+ Repositories</title><link href="https://pyvideo.org/djangocon-us-2021/herding-ponies-coordinating-and-automating-django-upgrades-across-100-repositories.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Jeremy Bowman</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/herding-ponies-coordinating-and-automating-django-upgrades-across-100-repositories.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the course of upgrading multiple services (including one large enough to run afoul of seemingly every backwards-incompatible change) to new Django LTS releases several times, the Open edX project has developed a set of procedures and tools to help streamline the process.  Given how useful we've found these …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the course of upgrading multiple services (including one large enough to run afoul of seemingly every backwards-incompatible change) to new Django LTS releases several times, the Open edX project has developed a set of procedures and tools to help streamline the process.  Given how useful we've found these, and how late we often see other packages tackling these upgrades, we'd like to share what we've learned about keeping up with the upgrade treadmill.  Among the topics I'll cover are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Code refactoring scripts (often using [Bowler](&lt;a class="reference external" href="https://pybowler.io/"&gt;https://pybowler.io/&lt;/a&gt;)) to automatically fix some of the most common breaking changes&lt;/li&gt;
&lt;li&gt;Scripts to automatically update tox and continuous integration configurations to start testing new Django versions (and drop support for ones no longer needed)&lt;/li&gt;
&lt;li&gt;Scripts to track which dependencies claim to support the target release already, and manual processes to manage ones which don't use Trove classifiers correctly&lt;/li&gt;
&lt;li&gt;A script to analyze and summarize deprecation warnings captured by pytest&lt;/li&gt;
&lt;li&gt;Upgrading dependencies proactively to reduce the work needed at Django upgrade time&lt;/li&gt;
&lt;li&gt;How to identify difficult parts of the upgrade early enough to solve them in time&lt;/li&gt;
&lt;li&gt;How to handle package dependencies which don't support your target Django version by the time you need them to&lt;/li&gt;
&lt;li&gt;How to track and schedule all of the above across dozens of repositories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the scripts presented here are open source; links to the code will be provided, and I'll be here for the live chat if anyone wants to help refine them further.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Illuminate Data with Visualization</title><link href="https://pyvideo.org/djangocon-us-2021/illuminate-data-with-visualization.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Drishti Jain</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/illuminate-data-with-visualization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will walk through the concept of Data mining and visualization right from the basics. A free and open source tool for data visualization -Orange from a beginner to an advance level will also be covered. We will also cover the concepts of data mining and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will walk through the concept of Data mining and visualization right from the basics. A free and open source tool for data visualization -Orange from a beginner to an advance level will also be covered. We will also cover the concepts of data mining and data warehousing to gain a deeper insight into the concept and help understand the process form the core level.
Data mining refers to an autonomous process of discovery of previously unknown patterns which are valid, potentially useful or novel from large database.Orange is Open source machine learning, data visualization and data mining toolkit.
Orange features an interactive data visualization platform. The platform provides a wide variety of data analysis and visualization by statistical distributions, scatter plots, box plots, decision trees, heat maps, linear projections to name a few. By carefully selecting attributes in the dataset we can drill down multidimensional data to 2D. It helps in fast prototyping of data analysis workflow.
The talk will also cover the recent and diverse existing use cases of Orange like:
1. Analysis of hyperspectra images from the Ryugu asteroid
2. Language support for 50 languages
3. bioinformatics, and many more.
By the end of the talk attendees would have a clear knowledge of
- What Orange is
- How they can use it in work or side projects
- Be able to use it as a separate tool or embed it as a library in their existing Python projects
And use all functionalities of Orange of data mining and visualization to the fullest!&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Kontrasto: improving accessibility with Python</title><link href="https://pyvideo.org/djangocon-us-2021/kontrasto-improving-accessibility-with-python.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Thibaud Colas</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/kontrasto-improving-accessibility-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk introduces [Kontrasto](&lt;a class="reference external" href="https://kontrasto.netlify.app/"&gt;https://kontrasto.netlify.app/&lt;/a&gt;), a library for Django and Wagtail that automatically improves the contrast of text over images. We’ll look into how it works, how accessibility guidelines define color contrast, and more generally where Django developers’ expertise can be used to improve accessibility …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk introduces [Kontrasto](&lt;a class="reference external" href="https://kontrasto.netlify.app/"&gt;https://kontrasto.netlify.app/&lt;/a&gt;), a library for Django and Wagtail that automatically improves the contrast of text over images. We’ll look into how it works, how accessibility guidelines define color contrast, and more generally where Django developers’ expertise can be used to improve accessibility.&lt;/p&gt;
&lt;p&gt;Kontrasto is a dual client-side and server-side library, with both approaches bringing some benefits and drawbacks. If time allows, we’ll compare both approaches and think of the implications for performance and energy efficiency.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Maintaining Demystified</title><link href="https://pyvideo.org/djangocon-us-2021/maintaining-demystified.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Katherine Michel</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/maintaining-demystified.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ll learn&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to set a project up for long-term success&lt;/li&gt;
&lt;li&gt;Which community health files you need&lt;/li&gt;
&lt;li&gt;The general license types, how to choose one, and special considerations&lt;/li&gt;
&lt;li&gt;How to keep your code secure&lt;/li&gt;
&lt;li&gt;Best practices for onboarding contributors&lt;/li&gt;
&lt;li&gt;The importance of documentation and strategies for managing it …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ll learn&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to set a project up for long-term success&lt;/li&gt;
&lt;li&gt;Which community health files you need&lt;/li&gt;
&lt;li&gt;The general license types, how to choose one, and special considerations&lt;/li&gt;
&lt;li&gt;How to keep your code secure&lt;/li&gt;
&lt;li&gt;Best practices for onboarding contributors&lt;/li&gt;
&lt;li&gt;The importance of documentation and strategies for managing it&lt;/li&gt;
&lt;li&gt;A typical pull request review process&lt;/li&gt;
&lt;li&gt;Python/Django specific matrix testing, code quality, and packaging tools&lt;/li&gt;
&lt;li&gt;How to keep code up to date through release management&lt;/li&gt;
&lt;li&gt;Which GitHub features might be most useful&lt;/li&gt;
&lt;li&gt;Project management strategies&lt;/li&gt;
&lt;li&gt;How to measure the health of your project&lt;/li&gt;
&lt;li&gt;The importance of publicizing your project&lt;/li&gt;
&lt;li&gt;Strategies for managing the work as you scale&lt;/li&gt;
&lt;li&gt;Some thoughts on people management and mentoring&lt;/li&gt;
&lt;li&gt;Tips for getting started as a maintainer&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Modern JavaScript for Django Developers</title><link href="https://pyvideo.org/djangocon-us-2021/modern-javascript-for-django-developers.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Cory Zue</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/modern-javascript-for-django-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is the front end of your Django project a disorganized mess? Have you ever tried to add React to a Django project and gotten discouraged because it was too complicated? Or have you worked in a project with completely separate front and back ends and wondered why you couldn't …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Is the front end of your Django project a disorganized mess? Have you ever tried to add React to a Django project and gotten discouraged because it was too complicated? Or have you worked in a project with completely separate front and back ends and wondered why you couldn't use just Django templates and forms for simple things and had to build an API for every little thing?&lt;/p&gt;
&lt;p&gt;If so, this talk is for you.&lt;/p&gt;
&lt;p&gt;First I cover common Django / JavaScript architectures and their tradeoffs. Including:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The most common &amp;quot;ad-hoc&amp;quot; approach, where JS just gets incrementally added to templates until you find yourself in a mess.&lt;/li&gt;
&lt;li&gt;The completely decoupled JS front-end and Django-API back end, which is popular, but complex and unfamiliar to Django developers.&lt;/li&gt;
&lt;li&gt;A &amp;quot;hybrid architecture&amp;quot;, that combines modern JS with familiarity of working in Django.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of the talk deep dives into building out a hybrid app with Django.&lt;/p&gt;
&lt;p&gt;This process starts with the fundamentals of JS tooling, a prerequisite to working with modern JavaScript. I'll cover why it's so frustrating and confusing trying to add React to a Django project, then introduce the concept of a JavaScript toolchain, why you need them and what they do, and finally do a quick overview of the most common JS toolchain: NPM, Webpack, and Babel.&lt;/p&gt;
&lt;p&gt;Finally, we'll bring it back to Django, showing how you can add a JS toolchain to a Django project and use a React application inside Django without all the complexity of managing a separate standalone front end. I'll also cover some of the common patterns that are used to interact with data, and the benefits and tradeoffs of the hybrid architecture over other models.&lt;/p&gt;
&lt;p&gt;Along the way, I'll also touch on some of the benefits of using modern JavaScript - and hopefully convince you that it's worth it!&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Opening Remarks and Orientation</title><link href="https://pyvideo.org/djangocon-us-2021/opening-remarks-and-orientation.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Drew Winstel</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/opening-remarks-and-orientation.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Drew will give some opening remarks; Kojo will reprise his traditional orientation; and Katia, Catherine, and Josué will give some shout-outs to our sponsors.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Server-Side is Dead! Long Live Server-Side (+ HTMX)</title><link href="https://pyvideo.org/djangocon-us-2021/server-side-is-dead-long-live-server-side-htmx.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Jack Linke</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/server-side-is-dead-long-live-server-side-htmx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;## Objectives&lt;/p&gt;
&lt;p&gt;By the end of this talk, audience members will have a better understanding of what HTMX is, will understand concrete examples of how it can be applied to their django projects, and will have a list of resources for further learning and discussion.&lt;/p&gt;
&lt;p&gt;## Outline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;The current state&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Frameworks …&lt;/li&gt;&lt;/ul&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;## Objectives&lt;/p&gt;
&lt;p&gt;By the end of this talk, audience members will have a better understanding of what HTMX is, will understand concrete examples of how it can be applied to their django projects, and will have a list of resources for further learning and discussion.&lt;/p&gt;
&lt;p&gt;## Outline&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;The current state&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;Frameworks for days&lt;/li&gt;
&lt;li&gt;Front-end roadmap&lt;/li&gt;
&lt;li&gt;Django templates&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;One potential approach&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Feature and approach walk-throughs
For a variety of common web application features, we will take a look at a typical django approach and how one might approach the problem with django + htmx.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Messaging inbox functionality (read/archive)&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;A traditional Django approach&lt;/li&gt;
&lt;li&gt;Django + HTMX approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;One-click settings&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;A traditional Django approach&lt;/li&gt;
&lt;li&gt;Django + HTMX approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Multiple forms in multiple tabs&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;A traditional Django approach&lt;/li&gt;
&lt;li&gt;Django + HTMX approach&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Tips, best practices, and pitfalls&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;CSRF Tokens&lt;/li&gt;
&lt;li&gt;More Views&lt;/li&gt;
&lt;li&gt;Complimentary JS libraries&lt;/li&gt;
&lt;li&gt;Simplifying things with django-htmx&lt;/li&gt;
&lt;li&gt;Additional resources&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Code examples and slides: [&lt;a class="reference external" href="https://github.com/jacklinke/htmx-talk-2021](https://github.com/jacklinke/htmx-talk-2021"&gt;https://github.com/jacklinke/htmx-talk-2021](https://github.com/jacklinke/htmx-talk-2021&lt;/a&gt;)&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Sponsored Talk: Introduction to Kolo</title><link href="https://pyvideo.org/djangocon-us-2021/sponsored-talk-introduction-to-kolo.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Wilhelm Klopp</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/sponsored-talk-introduction-to-kolo.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Kolo shows you everything happening in your running Django app. All without leaving VSCode. Get started at &amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://kolo.app/"&gt;https://kolo.app/&lt;/a&gt;&amp;quot;&amp;gt;https://kolo.app/&amp;lt;/a&amp;gt;.&lt;/p&gt;
&lt;p&gt;&amp;lt;a href=&amp;quot;&lt;a class="reference external" href="https://2021.djangocon.us/talks/sponsored-talk-introduction-to-kolo/"&gt;https://2021.djangocon.us/talks/sponsored-talk-introduction-to-kolo/&lt;/a&gt;&amp;quot;&amp;gt;Sponsored Talk: Introduction to Kolo&amp;lt;/a&amp;gt;&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>The Pit of Success for Per-Object Permissions in Django</title><link href="https://pyvideo.org/djangocon-us-2021/the-pit-of-success-for-per-object-permissions-in-django.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Madelaine Boyd</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/the-pit-of-success-for-per-object-permissions-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Privacy is important, but permissions are hard. Even more, the Django permission framework only supports subject-verb relation guards (does &lt;em&gt;someone&lt;/em&gt; have permission to &lt;em&gt;write&lt;/em&gt;) but not subject-verb-object relations (does &lt;em&gt;someone&lt;/em&gt; have permission to &lt;em&gt;write&lt;/em&gt; in this &lt;em&gt;table&lt;/em&gt;). Other existing Django middleware extensions such as django-guardian and django-rules address this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Privacy is important, but permissions are hard. Even more, the Django permission framework only supports subject-verb relation guards (does &lt;em&gt;someone&lt;/em&gt; have permission to &lt;em&gt;write&lt;/em&gt;) but not subject-verb-object relations (does &lt;em&gt;someone&lt;/em&gt; have permission to &lt;em&gt;write&lt;/em&gt; in this &lt;em&gt;table&lt;/em&gt;). Other existing Django middleware extensions such as django-guardian and django-rules address this, but require manual and explicit permission checking for every access.&lt;/p&gt;
&lt;p&gt;Wouldn’t it be nice if &lt;cite&gt;Model.objects.all()&lt;/cite&gt; automatically only returned the set of objects which the active requesting user had permission to see? Or, if you tried to save a change to a model object you’d automatically get an error if the user doesn’t have the appropriate permissions? For this purpose, I developed a tool to do all of this as an easy-to-install and configure middleware with acceptable runtime overhead. It provides security-by-design, because it automatically takes permissions into account &lt;em&gt;system-wide&lt;/em&gt;. Through that, it drastically reduces the possibility of high impact bugs and declutters the code from privacy checks. In this talk, I’ll showcase how one can hook into Models, Managers and Descriptors to enable the ‘magic’ behind this framework. I’ll also discuss key performance considerations as well as our experience running it in production.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>The Web is Inherently Accessible</title><link href="https://pyvideo.org/djangocon-us-2021/the-web-is-inherently-accessible.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Rachele DiTullio</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/the-web-is-inherently-accessible.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every semantic mistake introduces accessibility issues into your code. In this session, you will learn&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;When to use a link or a button&lt;/li&gt;
&lt;li&gt;Why to use headings&lt;/li&gt;
&lt;li&gt;How to create form fields&lt;/li&gt;
&lt;li&gt;When to use tables&lt;/li&gt;
&lt;li&gt;How to create accessible images, font icons and emojis&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>What is deployment, anyway?</title><link href="https://pyvideo.org/djangocon-us-2021/what-is-deployment-anyway.html" rel="alternate"></link><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><author><name>Katie McLaughlin</name></author><id>tag:pyvideo.org,2021-10-22:/djangocon-us-2021/what-is-deployment-anyway.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;runserver&lt;/cite&gt;, and why it should not be run in production&lt;/li&gt;
&lt;li&gt;what options are out there for deploying your Django application, and why managed platforms are useful&lt;/li&gt;
&lt;li&gt;database options, and why PostgreSQL is the best choice&lt;/li&gt;
&lt;li&gt;introductory system administration for Django developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;among more …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;runserver&lt;/cite&gt;, and why it should not be run in production&lt;/li&gt;
&lt;li&gt;what options are out there for deploying your Django application, and why managed platforms are useful&lt;/li&gt;
&lt;li&gt;database options, and why PostgreSQL is the best choice&lt;/li&gt;
&lt;li&gt;introductory system administration for Django developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;among more base concepts on the wonderful world of deployments!&lt;/p&gt;
&lt;p&gt;Attendees will come away with a more complete understanding as to why deployments are complex, and clarity on why some time-honoured suggestions really are the best decisions to get on with the rest of your day.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry></feed>