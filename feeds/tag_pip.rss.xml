<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate><item><title>Pipenv per la gestione delle dipendenze negli ambienti di sviluppo e di produzione</title><link>https://pyvideo.org/pycon-italia-2019/pipenv-per-la-gestione-delle-dipendenze-negli-ambienti-di-sviluppo-e-di-produzione.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pipenv permette la creazione automatica di un virtual environment e
l’installazione di pacchetti Python attraveso una elegante interfaccia a
riga di comando che riunisce in un unico strumento le funzionalità di
PIP e virtualenv. Allo stesso tempo permette di tracciare in modo facile
ed affidabile le dipendenze di un’applicazione attraverso i file Pipfile
e Pipfile.lock, mettendo fine ai problemi derivanti dall’uso dei file
requirements.txt e permettendo build deterministici.&lt;/p&gt;
&lt;p&gt;Inizialmente verranno presentate le motivazioni principali che
giustificano l’uso di pipenv: 1. dipendenze astratte e concrete
(setup.py vs requirements.txt) 2. problemi nell’uso di file
requirements.txt 3. librerie vs applicazioni 4. necessità di build
deterministici&lt;/p&gt;
&lt;p&gt;In seguito verranno descritte le funzionalità principali di pipenv per
la gestione dei pacchetti e virtual environment nell’ambiente di
sviluppo: 5. Installazione di pipenv nelle principali distribuzioni
Linux e in Windows 6. I comandi “pipenv install”, “pipenv shell”,
“pipenv run” 7. I file Pipfile e Pipfile.lock&lt;/p&gt;
&lt;p&gt;Poi si introdurranno alcune funzionalità avanzate di pipenv: 8. “pipenv
graph” per la visualizzazione del grafo delle dipendenze 9. “pipenv
check” per controllare vulnerabilità di sicurezza 10. configurazione
tramite variabili d’ambiente&lt;/p&gt;
&lt;p&gt;Infine verranno prese in esame alcune utili funzionalità che permettono
a pipenv di entrare a pieno titolo nel processo di deploy di
un’applicazione Python: 11. i comandi “pipenv install –deploy” e “pipenv
sync” 12. il supporto di file dot-env&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1714"&gt;https://python.it/feedback-1714&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 11:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Santamaria</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/pipenv-per-la-gestione-delle-dipendenze-negli-ambienti-di-sviluppo-e-di-produzione.html</guid><category>dependency-management</category><category>virtualenv</category><category>pipenv</category><category>Python</category><category>pip</category><category>packages</category></item><item><title>Python Tricks You Can't Live Without</title><link>https://pyvideo.org/pycon-philippines-2012/python-tricks-you-cant-live-without.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Important things you need to know in Python but aren't part of an introductory talk like virtualenv, pip, using PyPi, and the importance documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Audrey Roy</dc:creator><pubDate>Sat, 30 Jun 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-06-30:pycon-philippines-2012/python-tricks-you-cant-live-without.html</guid><category>tips</category><category>tricks</category><category>pip</category><category>virtualenv</category><category>pypi</category><category>documentation</category></item><item><title>A Qualidade do Ecossistema Python ( e o que podemos fazer para mante-la)</title><link>https://pyvideo.org/python-brasil-2017/a-qualidade-do-ecossistema-python-e-o-que-podemos-fazer-para-mante-la.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Rocha</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:python-brasil-2017/a-qualidade-do-ecossistema-python-e-o-que-podemos-fazer-para-mante-la.html</guid><category>pip</category><category>pypi</category><category>quality</category><category>test</category></item><item><title>PyOhio 2010: Wrangling the bits, standardizing how apps get built</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wrangling the bits, standardizing how apps get built&lt;/p&gt;
&lt;p&gt;Presented by Rick Harding&lt;/p&gt;
&lt;p&gt;As we moved more work to Python we had to figure out how to start,
share, and deploy projects in a standard way. Virtualenv, pip, and Git
to the rescue.&lt;/p&gt;
&lt;p&gt;[Note: The talk starts at around 7:20 when the mic is working.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rick Harding</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html</guid><category>deploying</category><category>fabric</category><category>git</category><category>pip</category><category>pyohio</category><category>pyohio2010</category><category>virtualenv</category></item><item><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link>https://pyvideo.org/chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;1 &lt;a class="reference external" href="http://us.pycon.org/2011/schedule/sessions/198/"&gt;http://us.pycon.org/2011/schedule/sessions/198/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a class="reference external" href="http://pip.openplans.org/"&gt;http://pip.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a class="reference external" href="http://virtualenv.openplans.org/"&gt;http://virtualenv.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Thu, 10 Feb 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-02-10:chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html</guid><category>chipy</category><category>ianbicking</category><category>pip</category><category>virtualenv</category></item><item><title>Taming dependencies with pip</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taming dependencies with pip&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Dependency management sucks. Pip provides some options for making it
suck a bit less, but not all of them are immediately obvious. This talk
will cover a number of strategies for making your deployments faster and
more reliable, and demonstrate how to implement them in practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--taming-dependencies-with-pip.html</guid><category>dependencies</category><category>djangocon</category><category>djangocon2011</category><category>pip</category></item><item><title>Python Packages</title><link>https://pyvideo.org/pycon-de-2013/python-packages.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;setup.py, PyPI, easy_install, pip, distutils, setuptools, virtualenv -
wer ein Paket nutzen oder den eigenen Code als Paket verteilen will muss
sich durch einen Dschungel von Modulen und Werkzeugen kämpfen. Dieser
Vortrag bringt Licht ins Dunkel und stellt aktuelle Best Practices für
die Verwendung und Erstellung von Python-Paketen vor.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Hepper</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/python-packages.html</guid><category>packaging</category><category>pip</category><category>pypi</category><category>setuptools</category><category>virtualenv</category></item><item><title>The state of Packaging (#63)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools and Pip added great features on the top of this
: the ability to fetch PyPI to install a project and its dependencies.
So you can &amp;quot;easy_install A-Program&amp;quot; and everything is done
automatically for you.&lt;/p&gt;
&lt;p&gt;But all these features have shown the flaws and limitations of the
current Distutils design, and the urgency to make it evolve with respect
to the existing OS-specific packaging systems.&lt;/p&gt;
&lt;p&gt;This talk will detail the biggest issues that need to be solved, and the
work that is being done. It will end up with a presentation of the
Distutils roadmap, and an overview of the Distribute project, the
Setuptools replacer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</guid><category>distribute</category><category>distutils</category><category>easy_install</category><category>packaging</category><category>pip</category><category>pycon</category><category>pycon2010</category><category>pypi</category><category>setuptools</category></item><item><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reverse-engineering Ian Bicking's brain: inside pip and virtualenv&lt;/p&gt;
&lt;p&gt;Presented by Carl Meyer&lt;/p&gt;
&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Pip and virtualenv are widely used in the Python world, but for the size
of their user base don't receive many code contributions, and many users
have misconceptions about how they actually work.&lt;/p&gt;
&lt;p&gt;This talk will cover a bit of advanced use of pip and virtualenv, but
mostly we'll dive into the source code, mapping it out with a high-level
view and diving into the guts of particularly interesting bits. By the
end of the talk, you'll have a good idea exactly how pip and virtualenv
do their magic, and where to go looking in the source for particular
behaviors or bug fixes. We'll walk through the creation of a virtualenv
step-by-step, and trace a typical &amp;quot;pip install -r requirements.txt&amp;quot; and
&amp;quot;pip uninstall&amp;quot; through the code paths they follow.&lt;/p&gt;
&lt;p&gt;I'll know the talk was a success when I see the pull requests!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Meyer</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--reverse-engineering-ian-bicking--39-s.html</guid><category>pip</category><category>pycon</category><category>pycon2011</category><category>virtualenv</category></item></channel></rss>