<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 15 Aug 2015 00:00:00 +0000</lastBuildDate><item><title>Sharding Data for Fun &amp; Profit</title><link>https://pyvideo.org/pygotham-2015/sharding-data-for-fun-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The hash function is the veritable hammer for pounding a large array of
engineering problems into submission. Want to shard your database? Draw
a key from your data, hash it, and voila, instant deterministic load
balancing! That’s simple enough, until you look more carefully at
distributional effects, failure, and redundancy management. We’ll review
well known (consistent hashing), not so well known (rendezvous hashing),
and recent (shuffle sharding, copysets) work that goes a long way
towards engineering more favorable failure scenarios.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wes Chow</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-15:pygotham-2015/sharding-data-for-fun-profit.html</guid></item></channel></rss>