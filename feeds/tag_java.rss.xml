<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 20 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Scaling your Data infrastructure</title><link>https://pyvideo.org/pycon-italia-2018/scaling-your-data-infrastructure.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;This talk aims to answer a few questions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What do you do when you need to move your model from your laptop to
production?&lt;/li&gt;
&lt;li&gt;Is &lt;tt class="docutils literal"&gt;big data == I need to use JVM&lt;/tt&gt; the right assumption?&lt;/li&gt;
&lt;li&gt;How can I put my jupyter notebook in production?&lt;/li&gt;
&lt;li&gt;How do you apply the best software engineering practices (testing and
ci for example) inside your data science process?&lt;/li&gt;
&lt;li&gt;How do you “decouple” your data scientists, developers and devops
teams?&lt;/li&gt;
&lt;li&gt;How do you guarantee the reproducibility of your models?&lt;/li&gt;
&lt;li&gt;How do you scale your training process when does not fit in memory
anymore?&lt;/li&gt;
&lt;li&gt;How do you serve your models and provide an easy rollback system?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Data Science workflow&lt;/li&gt;
&lt;li&gt;Scaling is not just a matter of the size of your Data&lt;/li&gt;
&lt;li&gt;Scaling when the size of your Data matters&lt;/li&gt;
&lt;li&gt;DDS, Dockerized Data Science&lt;/li&gt;
&lt;li&gt;Cassiny&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll share my experience highlighting some of the challenges I faced and
the solutions I came up to answer these questions.&lt;/p&gt;
&lt;p&gt;During this presentation I will mention libraries like jupyter, atom,
scikit- learn, dask, ray, parquet, arrow and many others.&lt;/p&gt;
&lt;p&gt;The principles and best practices I will share are something that you
can apply, more or less easily, if you are running or in the process to
run a production system based on the Python stack.&lt;/p&gt;
&lt;p&gt;This talk will focus on (my) best practices to run the Python Data stack
together and I will also talk about Cassiny, an open source project I
started, that aims to simplify your life if you want to use a completely
Python based solution in your data science workflow.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Barra</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/scaling-your-data-infrastructure.html</guid><category>Jupyter</category><category>CloudComputing</category><category>pydata</category><category>#lessonslearned</category><category>Big-Data</category><category>S3</category><category>Data-Scientist</category><category>#amicodialessia</category><category>java</category><category>docker</category><category>cloud</category></item><item><title>Interoperability: from Python to Clojure and the other way round</title><link>https://pyvideo.org/europython-2011/interoperability-from-python-to-clojure-and-the.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Enrico Franchi - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clojure is a modern Lisp dialect symbiotic with the Java Virtual Machine
and designed for concurrency. Clojure is compiled to byte-code and yet
is fully dynamic. It is very oriented towards functional programming and
manages state change in a controlled environment with software
transactional memory (STM). Since Clojure is a Lisp dialect, it retains
the code-as-data philosophy and has a powerful macro system&lt;/p&gt;
&lt;p&gt;Using the Jython, an implementation of the Python programming language
written in Java, it is possible to call Clojure from Python and call
Python from Clojure, using the JVM as an interoperability platform.&lt;/p&gt;
&lt;p&gt;After a brief introduction of the main Clojure features, the
presentation will show how Jython and Clojure can be used together.&lt;/p&gt;
&lt;p&gt;No previous knowledge of Clojure (or Lisp) is assumed nor required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/interoperability-from-python-to-clojure-and-the.html</guid><category>java</category><category>jvm</category><category>jython</category><category>memory</category></item><item><title>OpenERP: 100% pythonic way for business management</title><link>https://pyvideo.org/europython-2011/openerp-100-pythonic-way-for-business-managemen.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Davide Corio - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Business management isn't just accounting. Let's see how Python can help
us to build a complete ERP infrastructure. From CRM to e-commerce, from
accounting to document management…we'll see how Python is mature and
able to do great things where Java and .NET are still considered as the
only option. Case studies to be presented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Corio</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/openerp-100-pythonic-way-for-business-managemen.html</guid><category>business</category><category>crm</category><category>java</category><category>.net</category></item><item><title>Programmazione MapReduce in Python con Pydoop</title><link>https://pyvideo.org/europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Leo - 23 June 2011 in &amp;quot;Track Italiana Big Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop è la principale implementazione open source di MapReduce, il
paradigma di calcolo distribuito su larga scala di Google. L'API nativa
di Hadoop è in Java e le opzioni built-in per la programmazione in
Python - Streaming e Jython - presentano diversi inconvenienti: la prima
consente di accedere solo a un piccolo sottoinsieme delle funzionalità
di Hadoop, mentre la seconda ha tutte le limitazioni di Jython rispetto
a CPython.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydoop.sourceforge.net"&gt;Pydoop&lt;/a&gt; è un'API per Hadoop che rende
disponibile buona parte delle funzionalità di Hadoop al programmatore
Python, consentendo lo sviluppo in CPython. I suoi moduli di base sono
wrapper Boost.Python per l'interfaccia C/C++ di Hadoop.&lt;/p&gt;
&lt;p&gt;Il talk consiste in un tutorial su MapReduce/Hadoop e in una
presentazione dell'API Pydoop, con l'obiettivo principale di avvicinare
le community di Hadoop e Python. Può essere utile, anche se non
strettamente necessaria, una conoscenza di base della programmazione
distribuita.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Leo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/programmazione-mapreduce-in-python-con-pydoop.html</guid><category>community</category><category>hadoop</category><category>java</category><category>jython</category><category>mapreduce</category><category>python,</category><category>tutorial</category></item><item><title>Spotify and Python: love at first sight</title><link>https://pyvideo.org/europython-2011/spotify-and-python-love-at-first-sight.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jon Åslund - 20 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a story about how Spotify started, how we evolved, where we are
today and how Python has always been a big part of our success. Where do
we use it? Where do we not use it? Learn about the Unix way and the
Debian way of maintaining a healthy love for Python, while two-timing
with other languages such as Java and C++.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jon Åslund</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/spotify-and-python-love-at-first-sight.html</guid><category>java</category><category>python,</category></item><item><title>Jython Concurrency</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--jython-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jython Concurrency&lt;/p&gt;
&lt;p&gt;Presented by Jim Baker&lt;/p&gt;
&lt;p&gt;Jython is arguably the best Python implementation to target concurrent
code. Jython has no GIL, it leverages the Java platform to provide
robust support for concurrency in its runtime, and it enables access to
a set of high-level abstractions from Java. This talk will walk through
at the extreme level pertinent Jython implementation details and a
series of examples, including Java integration.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Jython implements the Python language, but we leverage the underlying
Java platform to provide an opionated alternative to CPython in our
support of concurrency.&lt;/p&gt;
&lt;p&gt;Because of the GIL and related infrastructure, CPython cannot use a
model in which threads perform concurrent computation defined in Python
on shared objects in the same process. (Of course, there are
workarounds, such as multiprocessing or using C extensions.)&lt;/p&gt;
&lt;p&gt;In contrast, there's no GIL in Jython. Jython instead embraces threads,
provides extensive support for managing their execution and coordination
through standard Java platform functionality (java.util.concurrent), and
threaded code works well with Jython's implementation of standard
mutable collection types. Lastly, the underlying JVM provides extensive
instrumentation as well as the ability to set a variety of parameters,
including choice of GC. There are also the inevitable pitfalls that
might be seen in complex architectures, such as around the use of
ClassLoaders.&lt;/p&gt;
&lt;p&gt;This talk will go into a detailed discussion of some of the interesting
ramifications of these design points and how they can be effectively
applied to write concurrent code, as illustrated through a variety of
short examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Baker</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--jython-concurrency.html</guid><category>concurrency</category><category>java</category><category>jython</category><category>pycon</category><category>pycon2011</category></item></channel></rss>