<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - TDD</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_tdd.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python: da programmatore a domatore</title><link href="https://pyvideo.org/europython-2013/python-da-programmatore-a-domatore.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alessandro Pisa</name></author><id>tag:pyvideo.org,2013-07-05:/europython-2013/python-da-programmatore-a-domatore.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="debugging"></category><category term="testing"></category><category term="integration"></category><category term="scalability"></category><category term="tdd"></category><category term="optimization"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="architecture"></category></entry><entry><title>Testing Django applications with pytest</title><link href="https://pyvideo.org/europython-2013/testing-django-applications-with-pytest.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Andreas Pelme</name></author><id>tag:pyvideo.org,2013-07-05:/europython-2013/testing-django-applications-with-pytest.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="testing"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 1</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 2</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 3</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>Mocket: a Socket Mock Framework</title><link href="https://pyvideo.org/europython-2013/mocket-a-socket-mock-framework.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Giorgio Salluzzo</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/mocket-a-socket-mock-framework.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="testing"></category><category term="socket"></category><category term="tdd"></category></entry><entry><title>TDD from scratch</title><link href="https://pyvideo.org/europython-2013/tdd-from-scratch.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Andrea Crotti</name></author><id>tag:pyvideo.org,2013-07-04:/europython-2013/tdd-from-scratch.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="best-practices"></category><category term="testing"></category><category term="tdd"></category></entry><entry><title>Python: from programmer to tamer</title><link href="https://pyvideo.org/europython-2013/python-from-programmer-to-tamer.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Pisa</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/python-from-programmer-to-tamer.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="debugging"></category><category term="testing"></category><category term="integration"></category><category term="scalability"></category><category term="tdd"></category><category term="optimization"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="architecture"></category></entry><entry><title>The ‘Agile Movement’</title><link href="https://pyvideo.org/europython-2013/the-agile-movement.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Russell Sherwood</name></author><id>tag:pyvideo.org,2013-07-03:/europython-2013/the-agile-movement.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="bdd"></category><category term="continuous-integration"></category><category term="project-management"></category><category term="agile"></category><category term="testing"></category><category term="principles"></category><category term="tdd"></category><category term="pair-programming"></category><category term="XP"></category></entry><entry><title>Bug hunting for dummies</title><link href="https://pyvideo.org/europython-2013/bug-hunting-for-dummies.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/bug-hunting-for-dummies.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="debugging"></category><category term="testing"></category><category term="programming"></category><category term="tdd"></category><category term="gdb"></category><category term="code generation"></category><category term="pdb"></category></entry><entry><title>Marconi: Queuing and Notification service for OpenStack</title><link href="https://pyvideo.org/europython-2013/marconi-queuing-and-notification-service-for-openstack.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Flavio Percoco</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/marconi-queuing-and-notification-service-for-openstack.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="MessageQueues"></category><category term="WSGI"></category><category term="mongodb"></category><category term="REST"></category><category term="tdd"></category><category term="application-design"></category><category term="architecture"></category><category term="cloud"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 1</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 2</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obidire alla capra! TDD con Python i Selenium</title><link href="https://pyvideo.org/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>TDM: Test-Driven Madness</title><link href="https://pyvideo.org/europython-2013/tdm-test-driven-madness.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2013-07-02:/europython-2013/tdm-test-driven-madness.html</id><content type="html"></content><category term="EuroPython 2013"></category><category term="bdd"></category><category term="XP"></category><category term="testing"></category><category term="tdm"></category><category term="tdd"></category></entry><entry><title>How to write a JIT compiler in 30 minutes</title><link href="https://pyvideo.org/europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This is a live-coding exercise: we will start from a blank page and
write a working (albeit simple and limited) JIT …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This is a live-coding exercise: we will start from a blank page and
write a working (albeit simple and limited) JIT compiler from scratch.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Compiler and Interpreters"></category><category term="Development"></category><category term="TDD"></category></entry><entry><title>Opt Out of Online Sexism – Open Source Activism</title><link href="https://pyvideo.org/europython-2019/opt-out-of-online-sexism-open-source-activism.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Teresa Ingram</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/opt-out-of-online-sexism-open-source-activism.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Although people of all genders can experience violence and abuse
online, the abuse experienced by women is often sexist or misogynistic
in nature, and online threats of violence against women are often
sexualized and include specific references to women’s bodies. &amp;quot; -
Amnesty International. This abuse pushes women offline, affecting …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Although people of all genders can experience violence and abuse
online, the abuse experienced by women is often sexist or misogynistic
in nature, and online threats of violence against women are often
sexualized and include specific references to women’s bodies. &amp;quot; -
Amnesty International. This abuse pushes women offline, affecting their
social well-being, representation and economic potential.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how we plan to help resolve this with our
browser extension, Opt Out. I will discuss the online global tragedy
that is online sexual harassment, our idea and where we’re at with
current implementation. I will also talk about what it’s like to build
an open source activism project, one which aims to be lead by the
community it’s trying to protect.&lt;/p&gt;
&lt;p&gt;We will cover current research and results from our own engagement with
the community, where the idea came from and challenges we have faced and
plan to face in the future. I will also dive into the intricate world of
natural language processing (NLP) for online harassment and talk about
balancing state-of-the-art data science with web development in an open
source community, one being managed by someone relatively new to tech.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Communication"></category><category term="Data Science"></category><category term="Open-Source"></category><category term="TDD"></category><category term="Web"></category></entry><entry><title>Clean Architectures in Python</title><link href="https://pyvideo.org/europython-2020/clean-architectures-in-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/clean-architectures-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A practical approach to better software design&lt;/p&gt;
&lt;p&gt;Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A practical approach to better software design&lt;/p&gt;
&lt;p&gt;Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software that cannot easily be maintained or changed.&lt;/p&gt;
&lt;p&gt;The “clean architecture” model predates Robert Martin, who recently brought it back to the attention of the community, and is a way of structuring applications that leverages layers separation and internal APIs to achieve a very tidy, fully-tested, and loosely coupled system. The talk introduces the main ideas of the architecture, showing how the layers can be implemented in Python, following the content of the book “Clean Architectures in Python”. The book recently reached 11,000 downloads and many readers found it useful to start learning how to test software and how to structure an application without relying entirely on the framework.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Abstractions"></category><category term="Architecture"></category><category term="Clean Code"></category><category term="Development"></category><category term="TDD"></category></entry><entry><title>Django Testing on Steroid: pytest + Hypothesis</title><link href="https://pyvideo.org/europython-2020/django-testing-on-steroid-pytest-hypothesis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bojan Miletic</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/django-testing-on-steroid-pytest-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generate hundred of test with few lines of code&lt;/p&gt;
&lt;p&gt;The talk should hopefully provided value to all listeners, regardless of their knowledge level, but preferably you have some knowledge of pytest test parametrization&lt;/p&gt;
&lt;p&gt;We'll use a simple Django project, setup initial tests using pytest with some parallelization in the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generate hundred of test with few lines of code&lt;/p&gt;
&lt;p&gt;The talk should hopefully provided value to all listeners, regardless of their knowledge level, but preferably you have some knowledge of pytest test parametrization&lt;/p&gt;
&lt;p&gt;We'll use a simple Django project, setup initial tests using pytest with some parallelization in the opening part and afterwards start extending them with Hypothesis. We'll go over the details, how you can use them to detect edge cases, extend test coverage and if time allows it how you can use them to test django models.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Django"></category><category term="TDD"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry><entry><title>Social distancing from your system’s dependencies: An API’s Story</title><link href="https://pyvideo.org/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Olga Matoula</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/social-distancing-from-your-systems-dependencies-an-apis-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How isolating your dependencies can affect your architecture choices and lead to nicer tests&lt;/p&gt;
&lt;p&gt;Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot of ugly tests.&lt;/p&gt;
&lt;p&gt;We soon realized our tests required more care and they invoked some difficult questions. Is it possible that the limitations of the testing framework add or give away flaws on your design? Should your architecture be affected by your efforts to test the system? What did we learn in the process?&lt;/p&gt;
&lt;p&gt;This presentation will introduce some testing isolation concepts and discuss how the choice of each can affect your architecture design. We will go through the basics of the unittest.mock library and the pytest framework and explore their potential. By diving into scenarios, attendees will learn where these features can be applied more effectively, and more importantly, how an API design can and should be driven by the value of testability, allowing the tests to be structured around clarity, readability and a happy Continuous Integration platform.&lt;/p&gt;
&lt;p&gt;The target audience includes beginner Pythonistas, who are looking for ways to structure and test their code cleanly, while intermediate developers will enjoy a fun refreshment on dependency isolation and leave the session with practical examples on how to use it more effectively.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Clean Code"></category><category term="System Architecture"></category><category term="TDD"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category></entry><entry><title>Michael Dunstan - Testing Demo</title><link href="https://pyvideo.org/kiwi-pycon-2009/michael-dunstan---testing-demo.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Michael Dunstan</name></author><id>tag:pyvideo.org,2009-11-07:/kiwi-pycon-2009/michael-dunstan---testing-demo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing Demo&lt;/p&gt;
&lt;p&gt;Presented by Michael Dunstan&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Live demo of writing code and tests.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;This live demo is intended for people that have not seen test driven
development in action before. See what a failing test should look like.
And then I'll attempt to write some code to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing Demo&lt;/p&gt;
&lt;p&gt;Presented by Michael Dunstan&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Live demo of writing code and tests.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;This live demo is intended for people that have not seen test driven
development in action before. See what a failing test should look like.
And then I'll attempt to write some code to make that test pass so that
you can see what a successful test run looks like - I may need some help
from the audience at that point. Along the way you'll see various
features of the test framework 'nose' in action and even some doctests.
This will be a second attempt of the stunt first performed:
&lt;a class="reference external" href="http://nzpug.org/MeetingsAuckland/August2009"&gt;http://nzpug.org/MeetingsAuckland/Augus
t2009.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/michaeldunstan/testing-%20workshop-2455697"&gt;http://www.slideshare.net/michaeldunstan/testing-
workshop-2455697&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</content><category term="Kiwi PyCon 2009"></category><category term="doctests"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Behaviour Driven Development</title><link href="https://pyvideo.org/pycon-au-2011/behaviour-driven-development.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2011-08-22:/pycon-au-2011/behaviour-driven-development.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing software in an organisation or for ourselves, many people feel
that they &amp;quot;should&amp;quot; somehow be doing Test Driven Development (TDD)
because &amp;quot;everybody else&amp;quot; is and it's cool, somewhere between necessary
and useful and they heard testing was good. When informed that must of
TDD isn't about testing (despite …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing software in an organisation or for ourselves, many people feel
that they &amp;quot;should&amp;quot; somehow be doing Test Driven Development (TDD)
because &amp;quot;everybody else&amp;quot; is and it's cool, somewhere between necessary
and useful and they heard testing was good. When informed that must of
TDD isn't about testing (despite the name!), confusion reigns. Behaviour
Driven Development is a different way of approaching the &amp;quot;how to
validate your code&amp;quot; problem.&lt;/p&gt;
</content><category term="PyCon AU 2011"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Unit tests and TDD does NOT have to be boring</title><link href="https://pyvideo.org/pycon-israel-2017/unit-tests-and-tdd-does-not-have-to-be-boring.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Daniel (Yona) Simons</name></author><id>tag:pyvideo.org,2017-06-12:/pycon-israel-2017/unit-tests-and-tdd-does-not-have-to-be-boring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When reviewing your Python applications for quality, we are constantly pushed to improve our ‘code coverage’ and improve our unit test quality, since so often we are caught out during upgrades and re factoring, by a lack of broad regression tests. As an experienced programmer who was a Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When reviewing your Python applications for quality, we are constantly pushed to improve our ‘code coverage’ and improve our unit test quality, since so often we are caught out during upgrades and re factoring, by a lack of broad regression tests. As an experienced programmer who was a Python newby, the whole unit test backlog for existing code in my new job was terrifying, so I needed to do something different... Here are practical examples of using Python for web programming where writing unit tests as part of the initial development processes, using Test Driven Design (TDD) methodologies, not only creates reliable regression tests for future code quality and maintenance, but also speeds up the development time, and gives a clearer path to deployment. The focus and examples are on web development, but the lessons and ideas are good for other development areas.&lt;/p&gt;
</content><category term="PyCon Israel 2017"></category><category term="test driven design"></category><category term="tdd"></category><category term="boring"></category></entry><entry><title>The practice of TDD: tips&amp;tricks</title><link href="https://pyvideo.org/pycon-italia-2018/the-practice-of-tdd-tipstricks.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2018-04-20:/pycon-italia-2018/the-practice-of-tdd-tipstricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python. The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon Italia 2018"></category><category term="testing"></category><category term="test-driven-development"></category><category term="tdd"></category><category term="patterns"></category><category term="pytest"></category><category term="test"></category><category term="best-practices"></category></entry><entry><title>Introduction to Property-Based testing using Hypothesis</title><link href="https://pyvideo.org/pycon-italia-2022/introduction-to-property-based-testing-using-hypothesis.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/introduction-to-property-based-testing-using-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Property-Based testing using Hypothesis - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to
discover that you missed a bug because of some edge case you didn’t know
about? Does it ever feel like writing tests is just a formality …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Property-Based testing using Hypothesis - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Has testing got you down? Ever spent a day writing tests, only to
discover that you missed a bug because of some edge case you didn’t know
about? Does it ever feel like writing tests is just a formality - that
you already know your test cases will pass? Hyphothesis might be just
what you need! Property based testing relies on properties. It checks
that a function, program or whatever system under test abides by a
property. Most of the time, properties do not have to go into too much
details about the output. They just have to check for useful
characteristics that must be seen in the output. Benefits are numerous:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Cover the scope of all possible inputs: by construct, it does not
restrict the generated inputs if not asked to do so. Consequently it
can theorically generate all possible inputs and cover the whole
range of strings, integers or whatever type required by the system
under test.&lt;/li&gt;
&lt;li&gt;Shrink the input in case of failure: whenever it fails, the framework
tries to reduce the input to a smaller input. For instance: if the
condition of the failure is the existence of a given character in a
string it should return the one-character string having only this
character. This is certainly one of the most interesting features of
such approach as most of the time the failure can be summarized by a
very small case.&lt;/li&gt;
&lt;li&gt;Reproducible and replayable: each time it runs a property test, a
seed is produced in order to be able to re-run the test again on the
same datasets. Any run failure causes the framework to print both the
failing case and the seed in order to be able to fully reproduce the
run.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this talk i’ll present, the teorethical aspects behind the approach
and the benefits of using Hypothesis with schemathesis, a modern API
testing tool for web applications built with Open API and GraphQL
specifications.&lt;/p&gt;
&lt;p&gt;Speakers: Alessandro Molina, Aniello Barletta&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="TDD"></category><category term="testing"></category></entry><entry><title>Test sana in codice sano</title><link href="https://pyvideo.org/pycon-italia-2022/test-sana-in-codice-sano.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Antonio Mustich</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/test-sana-in-codice-sano.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test sana in codice sano - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Hai mai avuto voglia o necessità di scrivere test ma non conosci le best
practices? Hai difficoltà a trovare esempi pratici online? Vuoi capire
quanto i test migliorino la qualità del codice? Questo talk, partendo
dalle best practices, ti darà le …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test sana in codice sano - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Hai mai avuto voglia o necessità di scrivere test ma non conosci le best
practices? Hai difficoltà a trovare esempi pratici online? Vuoi capire
quanto i test migliorino la qualità del codice? Questo talk, partendo
dalle best practices, ti darà le risposte che cerchi tramite esempi
pratici. Le slide sono disponibili a questo link:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Ad oggi i software sono parte integrante della nostra vita, abbiamo un
software per tutto, come sviluppatori vogliamo renderli privi di bug.
“Se il tuo codice non è testabile non è stato ben progettato” e si
presenta agli occhi degli altri come un teorema senza dimostrazione,
ma scrivere test è diverso dallo scrivere codice ed è bene, quindi,
seguire delle best practices.&lt;/div&gt;
&lt;div class="line"&gt;Scrivere codice testato non è soltanto un modo per dormire sonni più
sereni, ma anche un atto etico, perché un bug, nei casi peggiori, può
anche portare ad eventi catastrofici.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hai mai avuto voglia di scrivere codice testato ma non conosci le best
practices? Scrivi già test ma ti chiedi come mai in fase di refactoring
ti ritrovi a perdere più tempo nel fixare i test piuttosto che il tuo
codice? Mentre scrivi i test ti sembra di perdere il focus rispetto ai
requisiti del cliente? Vuoi capire quanto i test migliorino la qualità
del codice? Hai difficoltà a trovare esempi pratici online?&lt;/p&gt;
&lt;p&gt;Nel caso tu abbia risposto sì almeno una volta, segui questo talk:
scoprirai, con esempi pratici, come meglio approcciarsi alla scrittura
di codice testabile e testato. Il talk, presentato da chi ne aveva
davvero bisogno, ti darà spunti di riflessione partendo dai suggerimenti
e dalle linee guida più condivise in letteratura, passando per lo
sviluppo di logiche di business tramite test unit e comportamentali,
fino ad arrivare ai tools e alle librerie disponibili in Django
mostrando esempi pratici di utilizzo.&lt;/p&gt;
&lt;p&gt;Speakers: Antonio Mustich, Davide Ria&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="django"></category><category term="TDD"></category><category term="testing"></category></entry><entry><title>Continuous deployment</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--continuous-deployment.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2011-03-11:/pycon-us-2011/pycon-2011--continuous-deployment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting the latest revision of
software into production use all the time, as opposed to working towards
larger releases. The important difference is iteration time: whereas
large software packages produce new software in timeframes of years or
months, continuous deployment teams typically put new code into
production in timeframes of hours or less.&lt;/p&gt;
&lt;p&gt;The practice is slowly attracting a small but growing group of loyal
followers, just like continuous integration over the past few years and
test- driven development did before that. They can be explained in terms
of being natural extensions of each other. Like TDD and CI, CD gets eyed
somewhat suspiciously (and rightfully so: skeptical analysis is great),
but the undersigned believes there's a legitimate advantage for many
applications.&lt;/p&gt;
&lt;p&gt;Many years ago, TTD and testing tools in general were mostly ad-hockery.
Now, with many different production-quality testing tools, this has
become unthinkable. Similarly, continuous integration was something
other people did for a long time, but now we have tools such as Buildbot
and Hudson. Continuous deployment is still somewhat in the early stage
in terms of ready-to-use tools, but it's likely that we'll see a similar
evolution.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what I plan to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a short history of people developed software&lt;/li&gt;
&lt;li&gt;from the recent models to CD (sort of a working definition of CD
here)&lt;/li&gt;
&lt;li&gt;when is it a good idea? pros/cons&lt;/li&gt;
&lt;li&gt;requirements &amp;amp; battle plan for applying CD in an existing development
environment (and possibly code base)&lt;/li&gt;
&lt;li&gt;an overview of existing tools and how they work together&lt;/li&gt;
&lt;li&gt;caveat emptors, known pitfalls (deployment and recovery strategies go
here, since most implementations figure out they need them after
stuff blows up)&lt;/li&gt;
&lt;li&gt;questions! (hopefully lots of people who've tried or are thinking
about implementing something similar -- like I said, there are a lot
of people implementing it but not too many ideas being bounced
around)&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2011"></category><category term="cd"></category><category term="ci"></category><category term="continuousdeployment"></category><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="softwaredevelopment"></category><category term="tdd"></category><category term="workflow"></category></entry><entry><title>Outside-In TDD</title><link href="https://pyvideo.org/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2016-06-09:/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2016"></category><category term="testing"></category><category term="tdd"></category><category term="Django"></category><category term="bdd"></category></entry><entry><title>Visual Testing with PyCharm and pytest</title><link href="https://pyvideo.org/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Brian Okken</name></author><id>tag:pyvideo.org,2018-05-11:/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual testing”: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We’ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we’ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less &amp;quot;in the way&amp;quot; of other development activities&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="pytest"></category><category term="pycharm"></category><category term="tdd"></category></entry><entry><title>Intermediate testing with Django: Outside-in TDD and Mocking effectively</title><link href="https://pyvideo.org/pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:/pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What order should I write my tests and code in to avoid wasting time on blind alleys?&lt;/li&gt;
&lt;li&gt;If I'm using …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What order should I write my tests and code in to avoid wasting time on blind alleys?&lt;/li&gt;
&lt;li&gt;If I'm using Mocks in my tests to avoid external dependencies, how do I avoid getting stuck with unwieldy, unreadable tests that don't actually tell me when things have gone wrong?&lt;/li&gt;
&lt;li&gt;Unit tests vs integration tests vs functional tests, which should I use when, and what are the trade-offs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial we'll work through an example of using an existing Django codebase, adding a new feature, and experimenting with different testing techniques along the way to illustrate the pros and cons of each&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bottom-up vs outside-in development&lt;/li&gt;
&lt;li&gt;double-loop TDD&lt;/li&gt;
&lt;li&gt;using Mocks to isolate application layers from each other&lt;/li&gt;
&lt;li&gt;&amp;quot;listen to your tests&amp;quot;, and learning to use ugly or convoluted tests as a signal for improving design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some familiarity with Django is desirable, although skills learned in other web frameworks are transferrable.  By the end, you'll be able to go back to your own projects with practical experience, and a new way of thinking about how to optimise your tests for your own circumstances.&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="django"></category><category term="tdd"></category><category term="mock"></category></entry><entry><title>Introduction to TDD with Django</title><link href="https://pyvideo.org/pycon-us-2018/introduction-to-tdd-with-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:/pycon-us-2018/introduction-to-tdd-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.&lt;/p&gt;
&lt;p&gt;The tutorial is suitable for people who are …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.&lt;/p&gt;
&lt;p&gt;The tutorial is suitable for people who are new to either testing, or Django, or both, although some basic working knowledge of Python syntax (or programming in another language) is assumed.&lt;/p&gt;
&lt;p&gt;Learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit testing and Functional testing&lt;/li&gt;
&lt;li&gt;the Selenium browser automation tool&lt;/li&gt;
&lt;li&gt;Python's unittest standard library module&lt;/li&gt;
&lt;li&gt;Django models, views and templates&lt;/li&gt;
&lt;li&gt;testing front-end and back-end code&lt;/li&gt;
&lt;li&gt;refactoring, using tests&lt;/li&gt;
&lt;li&gt;the unit-test/code cycle, or Red-Green-Refactor, TDD workflow&lt;/li&gt;
&lt;li&gt;and the Testing Goat, Python's unofficial mascot for testing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come prepared!  You'll need a Python 3.6 virtualenv with Django and Selenium installed.  Detailed instructions are provided &lt;a class="reference external" href="https://www.obeythetestinggoat.com/book/pre-requisite-installations.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="tdd"></category><category term="django"></category></entry></feed>