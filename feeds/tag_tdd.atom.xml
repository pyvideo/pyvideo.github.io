<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_tdd.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>How to write a JIT compiler in 30 minutes</title><link href="https://pyvideo.org/europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/how-to-write-a-jit-compiler-in-30-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world JIT compilers like PyPy and Numba are complex and advanced.
However, the basic ideas behind JIT compilers are easy to understand, as
this talk aim to show.&lt;/p&gt;
&lt;p&gt;This is a live-coding exercise: we will start from a blank page and
write a working (albeit simple and limited) JIT compiler from scratch.&lt;/p&gt;
</summary><category term="Compiler and Interpreters"></category><category term="Development"></category><category term="TDD"></category></entry><entry><title>Opt Out of Online Sexism – Open Source Activism</title><link href="https://pyvideo.org/europython-2019/opt-out-of-online-sexism-open-source-activism.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Teresa Ingram</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/opt-out-of-online-sexism-open-source-activism.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Although people of all genders can experience violence and abuse
online, the abuse experienced by women is often sexist or misogynistic
in nature, and online threats of violence against women are often
sexualized and include specific references to women’s bodies. &amp;quot; -
Amnesty International. This abuse pushes women offline, affecting their
social well-being, representation and economic potential.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss how we plan to help resolve this with our
browser extension, Opt Out. I will discuss the online global tragedy
that is online sexual harassment, our idea and where we’re at with
current implementation. I will also talk about what it’s like to build
an open source activism project, one which aims to be lead by the
community it’s trying to protect.&lt;/p&gt;
&lt;p&gt;We will cover current research and results from our own engagement with
the community, where the idea came from and challenges we have faced and
plan to face in the future. I will also dive into the intricate world of
natural language processing (NLP) for online harassment and talk about
balancing state-of-the-art data science with web development in an open
source community, one being managed by someone relatively new to tech.&lt;/p&gt;
</summary><category term="Communication"></category><category term="Data Science"></category><category term="Open-Source"></category><category term="TDD"></category><category term="Web"></category></entry><entry><title>Python: da programmatore a domatore</title><link href="https://pyvideo.org/europython-2013/python-da-programmatore-a-domatore.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Alessandro Pisa</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/python-da-programmatore-a-domatore.html</id><summary type="html"></summary><category term="debugging"></category><category term="testing"></category><category term="integration"></category><category term="scalability"></category><category term="tdd"></category><category term="optimization"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="architecture"></category></entry><entry><title>Testing Django applications with pytest</title><link href="https://pyvideo.org/europython-2013/testing-django-applications-with-pytest.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Andreas Pelme</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/testing-django-applications-with-pytest.html</id><summary type="html"></summary><category term="testing"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 1</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</id><summary type="html"></summary><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 2</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</id><summary type="html"></summary><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>A hands-on introduction to software testing (reloaded) - Part 3</title><link href="https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Federico Caboni</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</id><summary type="html"></summary><category term="quality-assurance"></category><category term="trac"></category><category term="testing"></category><category term="tdd"></category><category term="refactoring"></category><category term="teamwork"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="performance"></category></entry><entry><title>Mocket: a Socket Mock Framework</title><link href="https://pyvideo.org/europython-2013/mocket-a-socket-mock-framework.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Giorgio Salluzzo</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/mocket-a-socket-mock-framework.html</id><summary type="html"></summary><category term="testing"></category><category term="socket"></category><category term="tdd"></category></entry><entry><title>TDD from scratch</title><link href="https://pyvideo.org/europython-2013/tdd-from-scratch.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Andrea Crotti</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/tdd-from-scratch.html</id><summary type="html"></summary><category term="best-practices"></category><category term="testing"></category><category term="tdd"></category></entry><entry><title>Python: from programmer to tamer</title><link href="https://pyvideo.org/europython-2013/python-from-programmer-to-tamer.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Alessandro Pisa</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/python-from-programmer-to-tamer.html</id><summary type="html"></summary><category term="debugging"></category><category term="testing"></category><category term="integration"></category><category term="scalability"></category><category term="tdd"></category><category term="optimization"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="architecture"></category></entry><entry><title>The ‘Agile Movement’</title><link href="https://pyvideo.org/europython-2013/the-agile-movement.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Russell Sherwood</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/the-agile-movement.html</id><summary type="html"></summary><category term="bdd"></category><category term="continuous-integration"></category><category term="project-management"></category><category term="agile"></category><category term="testing"></category><category term="principles"></category><category term="tdd"></category><category term="pair-programming"></category><category term="XP"></category></entry><entry><title>Bug hunting for dummies</title><link href="https://pyvideo.org/europython-2013/bug-hunting-for-dummies.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/bug-hunting-for-dummies.html</id><summary type="html"></summary><category term="debugging"></category><category term="testing"></category><category term="programming"></category><category term="tdd"></category><category term="gdb"></category><category term="code generation"></category><category term="pdb"></category></entry><entry><title>Marconi: Queuing and Notification service for OpenStack</title><link href="https://pyvideo.org/europython-2013/marconi-queuing-and-notification-service-for-openstack.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Flavio Percoco</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/marconi-queuing-and-notification-service-for-openstack.html</id><summary type="html"></summary><category term="MessageQueues"></category><category term="WSGI"></category><category term="mongodb"></category><category term="REST"></category><category term="tdd"></category><category term="application-design"></category><category term="architecture"></category><category term="cloud"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 1</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 2</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obidire alla capra! TDD con Python i Selenium</title><link href="https://pyvideo.org/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>TDM: Test-Driven Madness</title><link href="https://pyvideo.org/europython-2013/tdm-test-driven-madness.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/tdm-test-driven-madness.html</id><summary type="html"></summary><category term="bdd"></category><category term="XP"></category><category term="testing"></category><category term="tdm"></category><category term="tdd"></category></entry><entry><title>The practice of TDD: tips&amp;tricks</title><link href="https://pyvideo.org/pycon-italia-2018/the-practice-of-tdd-tipstricks.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Antonio Cuni</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/the-practice-of-tdd-tipstricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python. The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="testing"></category><category term="test-driven-development"></category><category term="tdd"></category><category term="patterns"></category><category term="pytest"></category><category term="test"></category><category term="best-practices"></category></entry><entry><title>Visual Testing with PyCharm and pytest</title><link href="https://pyvideo.org/pycon-us-2018/visual-testing-with-pycharm-and-pytest.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Brian Okken</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/visual-testing-with-pycharm-and-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Know you should be doing testing but haven’t gotten over the hurdle to learn it? pytest is Python’s modern, friendly, and powerful testing framework. When paired with an IDE, testing gets a visual interface, making it much easier to get started.&lt;/p&gt;
&lt;p&gt;In this talk we cover “visual testing”: starting, learning, using, and mastering test-driven development (TDD) with the help of a nice UI. We’ll show PyCharm Community Edition, a free and open-source Python IDE, as a productive TDD environment for pytest. Specifically, we’ll show a workflow using pytest and PyCharm that helps make tests speed up development, or at the very least help to make testing seem less &amp;quot;in the way&amp;quot; of other development activities&lt;/p&gt;
</summary><category term="pytest"></category><category term="pycharm"></category><category term="tdd"></category></entry><entry><title>Intermediate testing with Django: Outside-in TDD and Mocking effectively</title><link href="https://pyvideo.org/pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What order should I write my tests and code in to avoid wasting time on blind alleys?&lt;/li&gt;
&lt;li&gt;If I'm using Mocks in my tests to avoid external dependencies, how do I avoid getting stuck with unwieldy, unreadable tests that don't actually tell me when things have gone wrong?&lt;/li&gt;
&lt;li&gt;Unit tests vs integration tests vs functional tests, which should I use when, and what are the trade-offs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial we'll work through an example of using an existing Django codebase, adding a new feature, and experimenting with different testing techniques along the way to illustrate the pros and cons of each&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bottom-up vs outside-in development&lt;/li&gt;
&lt;li&gt;double-loop TDD&lt;/li&gt;
&lt;li&gt;using Mocks to isolate application layers from each other&lt;/li&gt;
&lt;li&gt;&amp;quot;listen to your tests&amp;quot;, and learning to use ugly or convoluted tests as a signal for improving design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some familiarity with Django is desirable, although skills learned in other web frameworks are transferrable.  By the end, you'll be able to go back to your own projects with practical experience, and a new way of thinking about how to optimise your tests for your own circumstances.&lt;/p&gt;
</summary><category term="django"></category><category term="tdd"></category><category term="mock"></category></entry><entry><title>Introduction to TDD with Django</title><link href="https://pyvideo.org/pycon-us-2018/introduction-to-tdd-with-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/introduction-to-tdd-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.&lt;/p&gt;
&lt;p&gt;The tutorial is suitable for people who are new to either testing, or Django, or both, although some basic working knowledge of Python syntax (or programming in another language) is assumed.&lt;/p&gt;
&lt;p&gt;Learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit testing and Functional testing&lt;/li&gt;
&lt;li&gt;the Selenium browser automation tool&lt;/li&gt;
&lt;li&gt;Python's unittest standard library module&lt;/li&gt;
&lt;li&gt;Django models, views and templates&lt;/li&gt;
&lt;li&gt;testing front-end and back-end code&lt;/li&gt;
&lt;li&gt;refactoring, using tests&lt;/li&gt;
&lt;li&gt;the unit-test/code cycle, or Red-Green-Refactor, TDD workflow&lt;/li&gt;
&lt;li&gt;and the Testing Goat, Python's unofficial mascot for testing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come prepared!  You'll need a Python 3.6 virtualenv with Django and Selenium installed.  Detailed instructions are provided &lt;a class="reference external" href="https://www.obeythetestinggoat.com/book/pre-requisite-installations.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="tdd"></category><category term="django"></category></entry><entry><title>Outside-In TDD</title><link href="https://pyvideo.org/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html" rel="alternate"></link><published>2016-06-09T00:00:00+00:00</published><updated>2016-06-09T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2016-06-09:pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="testing"></category><category term="tdd"></category><category term="Django"></category><category term="bdd"></category></entry><entry><title>Michael Dunstan - Testing Demo</title><link href="https://pyvideo.org/kiwi-pycon-2009/michael-dunstan---testing-demo.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Michael Dunstan</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/michael-dunstan---testing-demo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing Demo&lt;/p&gt;
&lt;p&gt;Presented by Michael Dunstan&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Live demo of writing code and tests.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;This live demo is intended for people that have not seen test driven
development in action before. See what a failing test should look like.
And then I'll attempt to write some code to make that test pass so that
you can see what a successful test run looks like - I may need some help
from the audience at that point. Along the way you'll see various
features of the test framework 'nose' in action and even some doctests.
This will be a second attempt of the stunt first performed:
&lt;a class="reference external" href="http://nzpug.org/MeetingsAuckland/August2009"&gt;http://nzpug.org/MeetingsAuckland/Augus
t2009.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/michaeldunstan/testing-%20workshop-2455697"&gt;http://www.slideshare.net/michaeldunstan/testing-
workshop-2455697&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="doctests"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="tdd"></category><category term="testing"></category></entry><entry><title>Behaviour Driven Development</title><link href="https://pyvideo.org/pycon-au-2011/behaviour-driven-development.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/behaviour-driven-development.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing software in an organisation or for ourselves, many people feel
that they &amp;quot;should&amp;quot; somehow be doing Test Driven Development (TDD)
because &amp;quot;everybody else&amp;quot; is and it's cool, somewhere between necessary
and useful and they heard testing was good. When informed that must of
TDD isn't about testing (despite the name!), confusion reigns. Behaviour
Driven Development is a different way of approaching the &amp;quot;how to
validate your code&amp;quot; problem.&lt;/p&gt;
</summary><category term="tdd"></category><category term="testing"></category></entry><entry><title>Continuous deployment</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--continuous-deployment.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--continuous-deployment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting the latest revision of
software into production use all the time, as opposed to working towards
larger releases. The important difference is iteration time: whereas
large software packages produce new software in timeframes of years or
months, continuous deployment teams typically put new code into
production in timeframes of hours or less.&lt;/p&gt;
&lt;p&gt;The practice is slowly attracting a small but growing group of loyal
followers, just like continuous integration over the past few years and
test- driven development did before that. They can be explained in terms
of being natural extensions of each other. Like TDD and CI, CD gets eyed
somewhat suspiciously (and rightfully so: skeptical analysis is great),
but the undersigned believes there's a legitimate advantage for many
applications.&lt;/p&gt;
&lt;p&gt;Many years ago, TTD and testing tools in general were mostly ad-hockery.
Now, with many different production-quality testing tools, this has
become unthinkable. Similarly, continuous integration was something
other people did for a long time, but now we have tools such as Buildbot
and Hudson. Continuous deployment is still somewhat in the early stage
in terms of ready-to-use tools, but it's likely that we'll see a similar
evolution.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what I plan to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a short history of people developed software&lt;/li&gt;
&lt;li&gt;from the recent models to CD (sort of a working definition of CD
here)&lt;/li&gt;
&lt;li&gt;when is it a good idea? pros/cons&lt;/li&gt;
&lt;li&gt;requirements &amp;amp; battle plan for applying CD in an existing development
environment (and possibly code base)&lt;/li&gt;
&lt;li&gt;an overview of existing tools and how they work together&lt;/li&gt;
&lt;li&gt;caveat emptors, known pitfalls (deployment and recovery strategies go
here, since most implementations figure out they need them after
stuff blows up)&lt;/li&gt;
&lt;li&gt;questions! (hopefully lots of people who've tried or are thinking
about implementing something similar -- like I said, there are a lot
of people implementing it but not too many ideas being bounced
around)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cd"></category><category term="ci"></category><category term="continuousdeployment"></category><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="softwaredevelopment"></category><category term="tdd"></category><category term="workflow"></category></entry></feed>