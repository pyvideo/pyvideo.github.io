<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-uk-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-20T00:00:00+00:00</updated><entry><title>Analyse Yourselves</title><link href="https://pyvideo.org/pycon-uk-2015/analyse-yourselves.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Norberto Leite</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/analyse-yourselves.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: In today's mundane usage of digital services, from ecommerce
to day- to-day email, one might imagine that we generate a considerable
amount of data. We access the internet, our phones are constantly
generating information and sharing that with services, sometimes without
us being total aware of such, and even our household appliances are
starting to become more and more self sufficient and connected, the so
called internet of things or internet of everything. Can we start
getting in control of that data? What tools do we have available to
start getting a sense of what's the size/shape/kind of data that we
generate? Where does it come from and where do we send it to? Although
the talk title might suggestion topics around introspection and
psychoanalysis we are not going to get into that (not in psychological
ground at least) but we will look into in which ways could we build
small sets of applications that could give us a better sense of our
digital footprint and content that flows at our broadband connection. We
will be analysing samples of email, internet traffic, webapps and mobile
apps data connections and inflows.&lt;/p&gt;
&lt;p&gt;Learning objectives: Use simple python libraries we will be looking into
what we can do tap on our devices and keep track of our digital inflows
like scapy and httplib2 Tools available to analyse and store and this
data, mostly around pandas and mongodb Libraries to present and
visualize this information like seaborn and matplotlib Tools for
predictive analytics like anaconda.&lt;/p&gt;
&lt;p&gt;This is practical session where we will be discussing some of these
general aspects of the data crossing &amp;quot;our pipes&amp;quot; and what we can do with
that to learn a bit more of ourselves or which type of interactions do
we do in a quantifiable manner.&lt;/p&gt;
&lt;p&gt;We will be using quantifiable and measurable traffic from several
different feeds including your facebook timeline, twitter feeds, email
and internet traffic.&lt;/p&gt;
</summary></entry><entry><title>Data Visualisation with Python and Javascript - crafting a data-visualisation for the web</title><link href="https://pyvideo.org/pycon-uk-2015/data-visualisation-with-python-and-javascript-crafting-a-data-visualisation-for-the-web.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Kyran Dale</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/data-visualisation-with-python-and-javascript-crafting-a-data-visualisation-for-the-web.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Data Visualisation with Python and Javascript: crafting a data-visualisation toolchain for the web&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To accompany an upcoming O'Reilly book 'Data-visualisation with Python
and Javascript: crafting a dataviz toolchain for the web' (see here)
this talk aims to sketch out the toolchain by transforming some dry
Wikipedia data (Nobel prize-winners) into a far more engaging and
insightful web- visualisation. This transformative cycle uses Python
big-hitters such as Scrapy, Pandas and Flask, the latter delivering data
to Javascript's D3. These are the industrial lathes of the toolchain but
Python's fantastic standard library and all those first class
data-munging libraries are involved, the spanners, hammers and
screwdrivers of the toolchain.&lt;/p&gt;
&lt;p&gt;While Python is fast becoming the goto language for
data-processing/science, the visual fruits of that labour hit the wall
of the web, where there is only one first-class language, Javascript. To
develop a data-viz toolchain for the modern world, where
web-presentation is increasingly mandated, making Python and Javascript
play nicely is fundamental. This talk aims to show that the perceived
wall between the two languages is actually a thin, permeable membrane
and that, with a bare minimum of web-dev, one can get on with
programming seamlessly in both.&lt;/p&gt;
</summary></entry><entry><title>FIDO - The dog ate my password</title><link href="https://pyvideo.org/pycon-uk-2015/fido-the-dog-ate-my-password.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Alex Willmer</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/fido-the-dog-ate-my-password.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Passwords are a pain for us all - programmers, users and admins alike.
How can we reduce that pain, or eliminate it entirely?&lt;/p&gt;
&lt;p&gt;This talk will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduce &lt;a class="reference external" href="https://fidoalliance.org/specifications/overview/"&gt;Universal Authentication Framework (UAF) &amp;amp; Universal
Second Factor
(U2F)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Describe how they streamline authentication, even eliminate passwords
entirely&lt;/li&gt;
&lt;li&gt;Show how to integrate UAF/U2F into a Django web application&lt;/li&gt;
&lt;li&gt;Summarize the state of support for UAF &amp;amp; U2F in browsers, devices,
and the wider world&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an audience member you will&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Learn how to implement seamless authentication&lt;/li&gt;
&lt;li&gt;Gain a sense of hope, that you never have type
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;EH3EX?e)8&amp;gt;6%sZ)48B^l3o08R&lt;/span&gt;&lt;/tt&gt; again&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is a condensed version of &lt;a class="reference external" href="https://ep2015.europython.eu/conference/talks/taking-the-pain-%20out-of-passwords-and-authentication"&gt;Taking the pain out of passwords
and
authentication&lt;/a&gt;,
first presented at EuroPython 2015.&lt;/p&gt;
</summary></entry><entry><title>Getting schemas around semi-structured data using Avro</title><link href="https://pyvideo.org/pycon-uk-2015/getting-schemas-around-semi-structured-data-using-avro.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Konark Modi</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/getting-schemas-around-semi-structured-data-using-avro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this world of big-data where we are producing data of enormous
variety, velocity, volume and the nature being semi-structured we need
to put some rules around data being collected which are not rigid yet
allow efficient management of it right from collection layer.&lt;/p&gt;
&lt;p&gt;My talk is based on first-hand experience that me and my team had while
writing frameworks and data pipelines , we like anyone else started with
collecting data in JSON format. But soon started to run into problems
because of systems which were writing the data were abusing the
flexibility.&lt;/p&gt;
&lt;p&gt;More importantly how we can leverage Python with this and makes it
interoperable with various Big Data techologies.&lt;/p&gt;
&lt;p&gt;Schemas / Serialization is a layer not many people talk about , but in
my experience it is very useful and one can benefit from it in many many
ways.&lt;/p&gt;
&lt;p&gt;The agenda of the talk is as follows :&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Need of a schema / serialization.&lt;/li&gt;
&lt;li&gt;Avro and why is it so awesome.&lt;/li&gt;
&lt;li&gt;Demo of creating some schemas and showcasing the features.&lt;/li&gt;
&lt;li&gt;How Avro serialized data can be used across different layers / tools
in the BigData pipeline. Be it Realtime processing system like Kafka
with Storm or Batch processing system like Hadoop, Hive etc.&lt;/li&gt;
&lt;li&gt;Setting up your AVRO schema repository to help people create,
distrubute and manage schemas. A pure Django based implementation.&lt;/li&gt;
&lt;li&gt;Do's and Don'ts .&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Who should Attend :&lt;/p&gt;
&lt;p&gt;I plan to keep it beginner friendly, any one who has been or is doing
data collection at any level can benefit from this talk.&lt;/p&gt;
</summary></entry><entry><title>Here be Dragons - Writing Safe C Extensions</title><link href="https://pyvideo.org/pycon-uk-2015/here-be-dragons-writing-safe-c-extensions.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Paul Ross</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/here-be-dragons-writing-safe-c-extensions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Python C Extensions can be daunting; you have to embrace not
just C but Python's C API, which is huge. Not only do you have to worry
about just your standard malloc() and free() but now you also have to
contend with how CPython manages its memory.&lt;/p&gt;
&lt;p&gt;This talk describes what you need to know to write fast ,reliable Python
extensions in 'C'. It demonstrates some of the pitfalls you can
encounter and some simple and robust coding patterns that you can use to
avoid them. After this talk you will be able to write Python extensions
with confidence.&lt;/p&gt;
&lt;p&gt;This talk is largely based on &lt;a class="reference external" href="https://github.com/paulross/PythonExtensionPatterns"&gt;this
material&lt;/a&gt; and
some hard won industrial experience.&lt;/p&gt;
</summary></entry><entry><title>How (not) to argue - a recipe for more productive tech conversations</title><link href="https://pyvideo.org/pycon-uk-2015/how-not-to-argue-a-recipe-for-more-productive-tech-conversations.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/how-not-to-argue-a-recipe-for-more-productive-tech-conversations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you've spent any time in technology, you will have come across the
classic phenomenon of the unproductive technical debate -- and not just
bikeshedding. Much of our technical debate seems to end up full of
cognitive dissonance, ego, the cherry-picking of evidence, talking at
cross purposes, and argument for its own sake.&lt;/p&gt;
&lt;p&gt;This talk will attempt to diagnose the roots of this disfunction, and
provide some pointers towards how to engage in more constructive
dialogue.&lt;/p&gt;
&lt;p&gt;Keywords: Torvalds, Socrates, Jonathan Haidt, Djangogirls, Cognitive
Behavioural Therapy.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Confessions of a True Impostor (A Survival Guide)</title><link href="https://pyvideo.org/pycon-uk-2015/keynote-confessions-of-a-true-impostor-a-survival-guide.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/keynote-confessions-of-a-true-impostor-a-survival-guide.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk by: Naomi Ceder&lt;/p&gt;
</summary></entry><entry><title>Python and PostgreSQL a Wonderful Wedding</title><link href="https://pyvideo.org/pycon-uk-2015/python-and-postgresql-a-wonderful-wedding.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/python-and-postgresql-a-wonderful-wedding.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and PostgreSQL, two tools we like to use for our projects but do
you know everything about them?&lt;/p&gt;
&lt;p&gt;The talk will give an overview of psycopg2, Peewee, SQLAlchemy, Alembic
and multicorn, PL/Python, these libraries can be used with PostgreSQL.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psycopg2, the well known connector, this basic component is really
useful, well documented and battle-tested and used by the most famous
toolkits of the Python ecosystem.&lt;/li&gt;
&lt;li&gt;Peewee, a minimalist ORM for Python, clear and brief, this ORM can be
used if you want create a software with a minimalist ORM.&lt;/li&gt;
&lt;li&gt;SQLAlchemy, a Python SQL toolkit and Object Relational Mapper, you
can use this library to create your models and interact with them.&lt;/li&gt;
&lt;li&gt;Alembic, a lightweight database migration tool for usage with
SQLAlchemy, allows to create some migration scripts for your project.&lt;/li&gt;
&lt;li&gt;multicorn is a Python wrapper over the Foreign Data Wrapper of
PostgreSQL&lt;/li&gt;
&lt;li&gt;PL/Python, a procedural language for PostgreSQL, allows to write
functions in the Python language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find this talk on &lt;a class="reference external" href="https://speakerdeck.com/matrixise/python-and"&gt;https://speakerdeck.com/matrixise/python-and&lt;/a&gt;-
postgresql-a-wonderful-wedding-english&lt;/p&gt;
</summary></entry><entry><title>Python powered Nukes</title><link href="https://pyvideo.org/pycon-uk-2015/python-powered-nukes.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Babak Khataee</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/python-powered-nukes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NukeStudio is a digital compositing tool used throughout the visual
effects industry. Our talk will try to cover how our Python bindings let
users use NukeStudio as an environment for making their own tools for
video processing and compositing. This will involve going through a
couple of examples before going onto discussing the structure/design of
the bindings and how they also enable us to use NukeStudio in other
contexts.&lt;/p&gt;
</summary></entry><entry><title>Simplicity Is A Feature</title><link href="https://pyvideo.org/pycon-uk-2015/simplicity-is-a-feature.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Cory Benfield</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/simplicity-is-a-feature.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you talk to software professionals, you come away with the idea
that we have a case of feature-itis. An enormous number of people
evaluate software in terms of the length of feature lists and
functionality. People dismiss software with fewer features as
“underpowered”. And how many times have you heard software devalued
because “I could build that”?&lt;/p&gt;
&lt;p&gt;And yet, intuitively we know that’s not always true. urllib3 has more
features than requests, but people overwhelmingly prefer to use
requests. Android has more features than iOS, but Android hasn’t
demolished iOS.&lt;/p&gt;
&lt;p&gt;The reason for this is that simplicity is a powerful advantage. This
talk will explain what is meant by simplicity, how to judge software
simplicity, and how to approach building simple tools. It’ll also talk
about how to structure your code to give the optimum balance of
simplicity and flexibility, to keep yourself and your users happy down
the line.&lt;/p&gt;
</summary></entry><entry><title>Sunday Morning Plenary</title><link href="https://pyvideo.org/pycon-uk-2015/sunday-morning-plenary.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/sunday-morning-plenary.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zeth warbling about nothing in particular to fill time.&lt;/p&gt;
</summary></entry><entry><title>Testing applications for django CMS</title><link href="https://pyvideo.org/pycon-uk-2015/testing-applications-for-django-cms.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Iacopo Spalletti</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/testing-applications-for-django-cms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing applications integrated with django CMS can be complex with a
lot of boilerplate code and some dark corners This talk will try to make
it clearer and easier to write tests and will present tools to reduce
the effort and the boilerplate&lt;/p&gt;
</summary></entry><entry><title>Testing with two failure seeking missiles</title><link href="https://pyvideo.org/pycon-uk-2015/testing-with-two-failure-seeking-missiles.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Tom Viner</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/testing-with-two-failure-seeking-missiles.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Testing with two failure seeking missiles: fuzzing and property based testing&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with purely random data on it's own doesn't get you very far.
But two approaches that have been around for a while have new libraries
that help you generate random input, that homes in on failing testcases.&lt;/p&gt;
&lt;p&gt;First
&lt;strong&gt;`Hypothesis &amp;lt;https://hypothesis.readthedocs.org/en/latest/&amp;gt;`__&lt;/strong&gt;, a
Python implementation and update of the Haskell library QuickCheck.
Known as property based testing, you specify a property of your code
that must hold, and Hypothesis does its best to find a counterexample.
It then shrinks this to find the minimal input that contradicts your
property.&lt;/p&gt;
&lt;p&gt;Second, &lt;strong&gt;`American fuzzy lop &amp;lt;http://lcamtuf.coredump.cx/afl/&amp;gt;`__&lt;/strong&gt;
(AFL), is a young fuzzing library that's already achieved an impressive
trophy case of bug discoveries. Using instrumentation and genetic
algorithms, it generates test input that carefully searches out as many
code paths as it can find, seeking greater functional coverage and
ultimately locating crashes and hangs that no other method has found.
I'll be showing how with &lt;strong&gt;`Python-
AFL &amp;lt;http://jwilk.net/software/python-afl&amp;gt;`__&lt;/strong&gt; we can apply this tool
to our Python code.&lt;/p&gt;
</summary></entry><entry><title>The Ladder to Python 3</title><link href="https://pyvideo.org/pycon-uk-2015/the-ladder-to-python-3.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-ladder-to-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Python 3.0 final was released on December 3rd, 2008.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 3.0 Release notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;The End Of Life date (EOL, sunset date) for Python 2.7 has been
moved [...] to 2020.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PEP 373: Python 2.7 Release Schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Migrating to Python 3 is not a big bang, it's a sequence of steps, like
the rungs of a ladder that spans from 2008 to 2020.&lt;/p&gt;
&lt;p&gt;In 2015, many people still start new projects in Python 2. Many of us
are shackled to Python 2 for work. Some of us don't even have a
migration plan. Many people at this conference, if asked to run
&amp;quot;Python&amp;quot;, will launch Python 2.&lt;/p&gt;
&lt;p&gt;Daniel will encourage you to grasp the ladder, put your feet firmly on
it, and take the next step in climbing to Python 3.&lt;/p&gt;
</summary></entry><entry><title>The Lightning Talk Show &amp; The Non-Closing Closing</title><link href="https://pyvideo.org/pycon-uk-2015/the-lightning-talk-show-the-non-closing-closing.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-lightning-talk-show-the-non-closing-closing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sunday Lightening Talks
Introduced by The Lightening Talk Man.&lt;/p&gt;
&lt;p&gt;The Non-Closing Closing
Here we end the first-part of the conference, and move our focus into the sprints. It is the closing because the crew now let their hair down and become normal sprinters but it is non-closing because half of the delegates are still there the next day. There is no spoon!&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>The PyCon UK Panel</title><link href="https://pyvideo.org/pycon-uk-2015/the-pycon-uk-panel.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Michael Foord</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-pycon-uk-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the style of Question Time (or Gardeners' Question Time, but without the plants), PyCon UK's acting Chair Zeth chairs a panel of Python experts who each give an short overview of how they found the conference and then try to answer your questions about the future of Python, Software development and the meaning of life, the universe and everything.&lt;/p&gt;
</summary></entry><entry><title>5 impossible things before breakfast</title><link href="https://pyvideo.org/pycon-uk-2015/5-impossible-things-before-breakfast.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Michael Sparks</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/5-impossible-things-before-breakfast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes you're asked to deliver something that seems impossible, but
necessary in a given timeframe. Sometimes it's several seemingly
impossible things.&lt;/p&gt;
&lt;p&gt;Developing the prototype for the BBC Micro:bit - a pocket sized, child
programmable computer - was very much like this. It had 3 months to be
delivered in a form sufficiently robust and usable to be used by
children in schools across the country; to be sufficiently documented to
be completely understood from scratch by others; and to be a
sufficiently open and flexible design to allow any and all parts of the
system to change, while retaining its core principles.&lt;/p&gt;
&lt;p&gt;There was about 3 months to develop the entire stack from scratch. This
included a microcontroller based hardware stack, through firmware, a
python to C++ compiler (3-4 weeks), through django website, through to a
QT (PySide) client side application, through to publication of the
device as a network connected and controllable device via REST. Python
was involved in all layers - including at microcontroller level on a
device too small to run any python interpreter.&lt;/p&gt;
&lt;p&gt;The bulk of the development period had just one developer for hardware
and software. For just 1 month there were 2 extra developers brought on
board, part time to assist.&lt;/p&gt;
&lt;p&gt;This talk will be a detailed overview of the various subsystems, and the
strategies taken to deliver a complete, mass produce-able, and
sufficiently scalable product such an aggressive timescale. The talk
title is a nod to the idea that while each of the various layers is
doable alone in 3 months, doing all the layers simultaneously using one
developer is ... challenging.&lt;/p&gt;
&lt;p&gt;It should be of interest to those interested in developing hardware and
software products, and especially those developing products that have
both a hardware and software element.&lt;/p&gt;
</summary></entry><entry><title>Asking About Gender - the Whats, Whys and Hows</title><link href="https://pyvideo.org/pycon-uk-2015/asking-about-gender-the-whats-whys-and-hows.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Claire Gowler</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/asking-about-gender-the-whats-whys-and-hows.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we move towards more customised experiences for our users, why do we
still insist of using the black boxes of male and female when asking
users about their gender? And why are we asking for it in the first
place?&lt;/p&gt;
&lt;p&gt;Between 1 and 5 percent of the UK population identifies as having a
non-binary gender or are transgender. This talk aims to help developers
ask users about their gender in a useful and sensitive manner; educate
on what non-binary means and what other issues non-binary and gender
variant users may face when using the web.&lt;/p&gt;
</summary></entry><entry><title>Build The Right Thing</title><link href="https://pyvideo.org/pycon-uk-2015/build-the-right-thing.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Paul Marston</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/build-the-right-thing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk by: Paul Marston&lt;/p&gt;
</summary></entry><entry><title>Building SAAs with django and polla</title><link href="https://pyvideo.org/pycon-uk-2015/building-saas-with-django-and-polla.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Emmanuelle Delescolle</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/building-saas-with-django-and-polla.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Airavata is a tool to help run multiple websites under Django using the
same codebase and the same database. This talk will demonstrate how to
build a SAAS service with those tools.&lt;/p&gt;
&lt;p&gt;In the meantime you can already checkout &lt;a class="reference external" href="https://bitbucket.org/levit_scs/airavata"&gt;the project's
page&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Chromebooks in education - the next five years</title><link href="https://pyvideo.org/pycon-uk-2015/chromebooks-in-education-the-next-five-years.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/chromebooks-in-education-the-next-five-years.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;North American schools will, in 2015, buy 3.6 million chromebooks, out
of global sales of 7.3 million (and 8 million predicted for 2016). In
this market they are outselling iPads and will soon challenge Microsoft.
Perhaps Europe will follow.&lt;/p&gt;
&lt;p&gt;This talk will give a social, economic and technical survey of
chromebooks, looking ahead to the next five years. A major problem is
using chromebooks as a platform for learning Python. This is because,
like iPhones, they are locked down (except that they support a
'developer mode' that allows your own version of Linux to be run as a
guest operating system).&lt;/p&gt;
&lt;p&gt;This year I replaced my laptop with a chromebook.&lt;/p&gt;
</summary></entry><entry><title>Dispelling py.test magic</title><link href="https://pyvideo.org/pycon-uk-2015/dispelling-pytest-magic.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Tomek Paczkowski</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/dispelling-pytest-magic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This short talk will look under the hood of how py.test uses assertion
statement rewriting to give users a better, more pythonic testing
experience.&lt;/p&gt;
&lt;p&gt;Usually in Python, assertion statements are quite simple and tedious to
work with, where a simple snippet of code like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def double(x):
    return x * 2
expected = 5
assert double(2) == expected
&lt;/pre&gt;
&lt;p&gt;finishes with message that does not include any context:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (most recent call last):
  File &amp;quot;t.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    assert double(2) == expected
AssertionError
&lt;/pre&gt;
&lt;p&gt;With py.test, we get a lot more information with all intermittent values
nicely described:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
t.py:5: in &amp;lt;module&amp;gt;
    assert double(2) == expected
E   assert 4 == 5
E    +  where 4 = &amp;lt;function double at 0x1033add08&amp;gt;(2)
&lt;/pre&gt;
&lt;p&gt;During this talk you will learn about all the ingredients needed to
reverse- engineer py.test behaviour, using import hooks described in PEP
302, and the ast module from standard library. We will try to use these
hidden gems in a broader context, outside of testing.&lt;/p&gt;
</summary></entry><entry><title>Finding more bugs with less work</title><link href="https://pyvideo.org/pycon-uk-2015/finding-more-bugs-with-less-work.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/finding-more-bugs-with-less-work.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mainstream software testing is terrible, because the tools to make it
good are missing.
&lt;a class="reference external" href="http://hypothesis.readthedocs.org/en/latest/"&gt;Hypothesis&lt;/a&gt; is a
testing library that aims to fix this.&lt;/p&gt;
&lt;p&gt;Where classically unit testing requires you to think of all the edge
cases yourself, Hypothesis actively seeks them out for you. Instead of
laboriously setting up examples where your code should work, you tell it
how your code should always work and it finds the examples that prove
you wrong.&lt;/p&gt;
&lt;p&gt;This is a talk from the author of Hypothesis on the how, why and where
of using it.&lt;/p&gt;
&lt;p&gt;This talk presupposes you have at least a little bit of experience with
testing in Python, but familiarity with advanced topics is not required.&lt;/p&gt;
</summary></entry><entry><title>JSON and the daughters of Pelias</title><link href="https://pyvideo.org/pycon-uk-2015/json-and-the-daughters-of-pelias.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/json-and-the-daughters-of-pelias.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The JSON Data Interchange Format is Internet Engineering Task Force
(IETF) standard RFC-7159. Since its release, many new draft internet
standards have been published including JSON Schema
(draft-zyp-json-schema-04), JSOND (draft- oskarsson-jsond-00), JSON
Pointer (RFC-6901), JSON-LD (W3C Recommendation), JSON Merge Patch
(RFC-7386), JSON-RPC and JSON Reference (draft-pbryan-zyp- json-ref-03);
while new Python object to JSON serialisation techniques have been
published such as jsonpickle.&lt;/p&gt;
&lt;p&gt;In this session we will implement these JSON technologies using Python
and evaluate their individual usefulness but also discuss how these
proposals can and cannot be combined to make JSON powered Python
applications. Finally, we will look at a Python application that I made
using some of these technologies.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Landing on a comet: From planning to reality</title><link href="https://pyvideo.org/pycon-uk-2015/keynote-landing-on-a-comet-from-planning-to-reality.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Simon Sheridan</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/keynote-landing-on-a-comet-from-planning-to-reality.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk by Dr Simon Sheridan of the Open University.&lt;/p&gt;
</summary></entry><entry><title>Language Composition with RPython</title><link href="https://pyvideo.org/pycon-uk-2015/language-composition-with-rpython.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Edd Barrett</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/language-composition-with-rpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Language composition allows us to write programs in a mixture of
different languages. This sounds ideal since it should allow us to
choose the best mix of languages for the task at hand. Due to technical
hurdles however, language compositions tend to be little more than
simple foreign function interfaces (FFIs).&lt;/p&gt;
&lt;p&gt;At King's college London we are trying to build better language
compositions. We have devised a new approach which makes it much easier
to intermingle programming languages without compromising performance.
In this talk I will outline our approach and show what happens when you
put Python and PHP in a blender.&lt;/p&gt;
</summary></entry><entry><title>Lightning PyKids</title><link href="https://pyvideo.org/pycon-uk-2015/lightning-pykids.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/lightning-pykids.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the most exciting part of the conference, we see what the PyKids have been doing in their own track, not to be missed.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Managing mocks - the how why and when of mocking in Python</title><link href="https://pyvideo.org/pycon-uk-2015/managing-mocks-the-how-why-and-when-of-mocking-in-python.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/managing-mocks-the-how-why-and-when-of-mocking-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mocking is a valuable technique for writing tests, but is it always a
good idea?&lt;/p&gt;
&lt;p&gt;I want to give a brief introduction to the how and why of mocking and
the scope of its usefulness - I'll look at situations where it is
provides the most benefit and the times when it can be taken too far.&lt;/p&gt;
&lt;p&gt;Python is packaged with an excellent mocking module but we'll also look
at some other libraries which can help with mocking effectively.&lt;/p&gt;
</summary></entry><entry><title>OOD Rules</title><link href="https://pyvideo.org/pycon-uk-2015/ood-rules.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Hamish Downer</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/ood-rules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all want to keep our code comprehensible and easy to test, change,
reuse and extend - it's easy(er) if you follow the OOD Rules.&lt;/p&gt;
&lt;p&gt;This is based on my experience of trying to follow &amp;quot;The Rules&amp;quot; (of
Object Orientated Design) by the wonderful Sandi Metz of the Ruby world.
&lt;a class="reference external" href="http://poodr.com/"&gt;http://poodr.com/&lt;/a&gt; and &lt;a class="reference external" href="https://www.youtube.com/watch?v=npOGOmkxuio"&gt;https://www.youtube.com/watch?v=npOGOmkxuio&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python adventures in Namibia</title><link href="https://pyvideo.org/pycon-uk-2015/python-adventures-in-namibia.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/python-adventures-in-namibia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In February this year, with the help of the University of Namibia and
Cardiff University's Phoenix Project, and with support from numerous
organisations in the Django/Python community, we held Python Namibia, a
four-day international software conference in the capital, Windhoek.&lt;/p&gt;
&lt;p&gt;This is the story of why we did it, how we did it, how it went - and
what's going to happen next.&lt;/p&gt;
</summary></entry><entry><title>Saturday Lightening Talk Show</title><link href="https://pyvideo.org/pycon-uk-2015/saturday-lightening-talk-show.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/saturday-lightening-talk-show.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Lightening Talk Show&lt;/p&gt;
&lt;p&gt;Introduced by the Lightening Talk Man&lt;/p&gt;
</summary></entry><entry><title>Saturday Morning Plenary Session</title><link href="https://pyvideo.org/pycon-uk-2015/saturday-morning-plenary-session.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/saturday-morning-plenary-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon UK acting chairman Zeth Green welcomes the delegates to the second day of the conference.&lt;/p&gt;
</summary></entry><entry><title>Shipping your application using Conda</title><link href="https://pyvideo.org/pycon-uk-2015/shipping-your-application-using-conda.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Floris Bruynooghe</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/shipping-your-application-using-conda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping your Python application to customers has always been an
interesting challenge. Many Operating Systems ship with a Python
version, but they only ship that to support their applications and it
will probably miss dependencies you need or be the wrong version. So you
need to build and ship your own Python environment, but one which can
work on all these different platforms. This is never easy.&lt;/p&gt;
&lt;p&gt;Recently Continiuum Analytics have released their Conda package manager
as open source, which is very well suited to address this problem. It
has support for building and distributing binary packages and is capable
of creating a stand-alone environment for your application with no or
minimal dependencies on the host OS. But even starting from a good tool
there are still a lot of tricks to building a good Python distribution.
This talk will concentrate on UNIX platforms and dive into the details
of what needs to be done to create a portable distribution. It will then
discuss how to fully bootstrap such a distribution using Conda.&lt;/p&gt;
</summary></entry><entry><title>Taming a Legacy Codebase with (Micro)services</title><link href="https://pyvideo.org/pycon-uk-2015/taming-a-legacy-codebase-with-microservices.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>John Chandler</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/taming-a-legacy-codebase-with-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a story of killing-off a legacy codebase written in PHP. To the
business, it &amp;quot;just works&amp;quot; and the customers love it. To the developers,
it's an unmaintainable nightmare of bad practice that has resisted every
attempt to rewrite from scratch.&lt;/p&gt;
&lt;p&gt;From the ashes of those doomed rewrites came a more incremental
approach, finding areas in the code that could be extracted into small,
composable services.&lt;/p&gt;
&lt;p&gt;I'll discuss why microservices are nothing new, how our approach
evolved, the challenges of adoption, and the pros and cons of the
approach. Although I won't delve too deeply into the technology stack,
I'll doff my (metaphorical) hat to Django REST Framework and a few other
tools of choice that have made the work possible.&lt;/p&gt;
&lt;p&gt;I hope to cut through the microservices hype, and illustrate one way of
using them to refactor, and ultimately replace, a legacy monolith.&lt;/p&gt;
</summary></entry><entry><title>Teaching youngsters to code with pgzero on Raspberry Pi</title><link href="https://pyvideo.org/pycon-uk-2015/teaching-youngsters-to-code-with-pgzero-on-raspberry-pi.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Tim Golden</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/teaching-youngsters-to-code-with-pgzero-on-raspberry-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've set up a short series of workshops to help a small group of
13-15-year- old boys to learn how to code with a small element of
physical computing thrown in. This talk will describe the reasons for
the setup and approach I used, and will discuss the outcomes: what
worked; what didn't; and what I might do differently.&lt;/p&gt;
</summary></entry><entry><title>Template matching - howto</title><link href="https://pyvideo.org/pycon-uk-2015/template-matching-howto.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Katie Barr</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/template-matching-howto.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Image recognition via template matching&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Image recognition, also known as template matching, is a key component
of computer vision, and in this talk I will tell you how its done by
describing algorithms used by OpenCV. The purpose of the talk is to give
a practical introduction to this subject by describing both the theory
and Python implementation.&lt;/p&gt;
&lt;p&gt;Whilst the algorithms I describe are very simple, and intuitively
understood, if you do not take care when implementing them you can end
up with extremely inefficient computations. This is because you
effectively compare every pixel in your image with every pixel in your
template. These algorithms are called: correlation, correlation
coefficient, and squared difference, all with or without normalisation.
Normalisation is required to prevent false positives due to bright spots
in images. I will explain why computing the value directly can lead to
prohibitively slow computations. In order to efficiently implement the
algorithms we must use a theorem called the convolution theorem, which
uses Fourier Transforms. I give the Fourier Transform expressions for
the template-image comparison, and this is what we use in our
implementation.&lt;/p&gt;
&lt;p&gt;I will introduce the algorithms and explain how they work, and then
briefly introduce the Fourier Transform. This gives us everything we
need to get started implementing our own image recognition with help
from scipy and numpy. We will see how adjusting parameters in the
algorithm can lead to very impressive results- the demo showing a range
of letters, with different antialising, on different tiled backgrounds.
By selecting how close your candidate match must be to the template at
different stages during the algorithm, you can find matches with
apparently large differences to the template, with no false positives.&lt;/p&gt;
&lt;p&gt;Whilst I will aim to ensure that the talk is comprehensible to those who
haven't met Fourier Transforms before by introducing them in detail,
with examples, I also hope those who have met them before will find the
talk interesting, as they may not have seen this application. Whilst I
apply the techniques to images, they can be used for anything which can
be treated as a function.&lt;/p&gt;
</summary></entry><entry><title>The Fabric that holds the cloud together</title><link href="https://pyvideo.org/pycon-uk-2015/the-fabric-that-holds-the-cloud-together.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Konstantin Benz</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/the-fabric-that-holds-the-cloud-together.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's this session about? Fabric is a Python library that offers a
simple API to manage remote connections to distant servers and PCs via
SSH protocol. Although it is a simple library, fabric is an extremely
powerful tool for managing virtual machines in the cloud. Fabric can be
used to login to virtual machines, upload files to them, install
software packages on them or download files of them. Furthermore fabric
can be extended to a fully-fledged (but still lightweight) configuration
management tool. Fabric can be combined with the Python cuisine library
and Python's &amp;quot;native&amp;quot; capabilities like serializing objects, writing
data to JSON files and manipulating regular expressions. By employing
this capabilities almost every VM administration task can be automated.
VMs can be connected to each other, they can authenticate with each
other and they can communicate to each other. In short: fabric is the
&amp;quot;glue&amp;quot; that holds your VM environment together. If you're involved into
DevOps, fabric is your tool to manage the cloud. You will get to know to
do this in this session.&lt;/p&gt;
&lt;p&gt;Overview In this talk we will show you fabric's capability to manage and
configure virtual machines in the popular Python-based cloud operating
system OpenStack. Thereby we will show you how to do password-based and
public key authentication with fabric, remote software installation with
package managers, management of users and groups, management of file
permissions, file uploads and downloads, configuration file manipulation
with regular expressions (Python re module), serialization with pickle
or JSON and manage communication between VMs.&lt;/p&gt;
&lt;p&gt;After this session you will know _ How to connect to OpenStack virtual
machines via fabric API _ How to create private/public keypairs and
authenticate to virtual machines _ How to combine fabric and cuisine to
configure virtual machines _ How to use the Fabric API to employ
package managers (like apt, yum, zypper, pacman) which install software
packages on virtual machines _ How to add users and groups via Fabric
to your virtual machines and set the right permissions to files and
directories _ How to upload files to virtual machines or download files
from virtual machines to your local computer _ How to use regular
expressions and configuration file templates to create custom
configuration files _ How to serialize objects with pickle or JSON and
use serialization let VMs communicate to each other&lt;/p&gt;
</summary></entry><entry><title>Title To Be Determined; A tale of graphs and Markov chains</title><link href="https://pyvideo.org/pycon-uk-2015/title-to-be-determined-a-tale-of-graphs-and-markov-chains.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Gary Martin</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/title-to-be-determined-a-tale-of-graphs-and-markov-chains.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the runup to PyconUK 2014, I made the following ill-advised statement
in an IRC channel: &amp;quot;I feel like I should find something to talk about at
PyconUK. I wish I had something interesting to talk about.&amp;quot; Nine seconds
later someone replied &amp;quot;create a markov chain to generate a talk from the
names of the talks at pycon and europython, then talk about how you did
that, using a title it generates as the title of the talk.&amp;quot;&lt;/p&gt;
&lt;p&gt;Challenge accepted. This is that talk, admittedly one year late.&lt;/p&gt;
&lt;p&gt;In this talk I will briefly describe Markov Chains as a means to
simulate conversations and graph databases as a means to store Markov
Chains. After this, I will discuss various considerations for creating
interesting candidate responses in conversations, along with the
challenges of too little and too much data. Finally, I will demonstrate
my implementation and generate the title of this talk.&lt;/p&gt;
</summary></entry><entry><title>Why I have an unhealthy love of tests</title><link href="https://pyvideo.org/pycon-uk-2015/why-i-have-an-unhealthy-love-of-tests.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Gemma Hentsch</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/why-i-have-an-unhealthy-love-of-tests.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why I have an unhealthy love of tests, and why you shouldn't be scared about writing them&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests, I used to hate them, and actually when I start writing tests on a
new project I still do.&lt;/p&gt;
&lt;p&gt;But, you don't have to be scared about them, and I'd like to cover
developing your testing strategy, what to test, what not to test, and
how to explain how to convince higher ups that its not just a useful
spending of time, its a vital part of your job.&lt;/p&gt;
</summary></entry><entry><title>Analyzing Python with Pylint</title><link href="https://pyvideo.org/pycon-uk-2015/analyzing-python-with-pylint.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Claudiu Popa</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/analyzing-python-with-pylint.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given the dynamic nature of Python, some bugs tend to creep in our
codebases. Innocents NameErrors or hard-to-find bugs with variables used
in a closure, but defined in a loop, they all stand no chance in front
of Pylint (&lt;a class="reference external" href="http://pylint.org/"&gt;http://pylint.org/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In this talk, I’ll present one of the oldest static analysis tools for
Python, with emphasis on what it can do to understand your Python code.
Pylint is both a style checker, enforcing PEP 8 rules, as well as a code
checker in the vein of pyflakes and pychecker, but its true power isn’t
always obvious in the eye of beholder, especially when it's hidden
through its verbosity. Interpreting its results can be a daunting task,
but there are tricks which can be used to improve its user experience,
such as enabling only structural checking with the -E flag or disabling
unwanted category checks.&lt;/p&gt;
&lt;p&gt;Pylint can detect simple bugs such as unused variables and imports, but
it can also detect more complicated cases such as invalid arguments
passed to functions, it understands the method resolution order of your
classes, generators, contexts managers and what special methods aren’t
implemented correctly.&lt;/p&gt;
&lt;p&gt;Starting from abstract syntax trees, we’ll go through its inference
engine and we’ll see how Pylint understands the logical flow of your
program and what sort of type hinting techniques are used to improve its
inference, including PEP 484 type hints. Pylint's roadmap includes
better understanding of Python code, by improving its flow control
analysis, escape analysis, understanding metaclasses and descriptors and
having a better type checker, as well as improving the user experience,
by reducing the number of false positives it currently has. As a bonus,
I’ll show how it can be used to help you port your long-forgotten
library to Python 3, using its new –py3k mode, which emits warnings
regarding Python 3 compatibility.&lt;/p&gt;
&lt;p&gt;The participants should have a basic understanding of Python. No other
prerequisite is necessary, since the other concepts will be explained
during the talk.&lt;/p&gt;
&lt;p&gt;The following concepts will be explained during this talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;abstract syntax trees&lt;/li&gt;
&lt;li&gt;static analysis and why using static analysis for your code&lt;/li&gt;
&lt;li&gt;what is inference and what forms an inference engine&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Document all the things</title><link href="https://pyvideo.org/pycon-uk-2015/document-all-the-things.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Kristian Glass</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/document-all-the-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Producing good documentation is a bit like flossing. We all know we
should, but somehow we never quite do.&lt;/p&gt;
&lt;p&gt;Why do we find it so hard? What can we do about it? Why does it even
matter? How can we get better?&lt;/p&gt;
&lt;p&gt;Whatever you're doing, whatever your background, these questions matter.&lt;/p&gt;
</summary></entry><entry><title>Friday Morning Opening Plenary</title><link href="https://pyvideo.org/pycon-uk-2015/friday-morning-opening-plenary.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/friday-morning-opening-plenary.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PYCON UK acting chair Zeth Green plenerates to the delegates.&lt;/p&gt;
</summary></entry><entry><title>Keynote: All I really want is power</title><link href="https://pyvideo.org/pycon-uk-2015/keynote-all-i-really-want-is-power.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/keynote-all-i-really-want-is-power.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computing power is a kind of power, but I’m interested in a more
powerful power: power over other people.&lt;/p&gt;
&lt;p&gt;I want to understand power and where it comes from. I’m curious about
the balances and imbalances of power in our worlds of software
development, how it moves around and where it goes. I want to know how
it affects the people who have it, how they use it, and whether they
even realise that they hold it.&lt;/p&gt;
&lt;p&gt;I believe that it really matters to open-source communities, that it’s
poorly understood, and that not understanding it has harmful
consequences for us.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Van Lindberg, PSF Chair</title><link href="https://pyvideo.org/pycon-uk-2015/keynote-van-lindberg-psf-chair.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/keynote-van-lindberg-psf-chair.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote speech from PYCON UK 2015, Friday 18th September 2015.&lt;/p&gt;
</summary></entry><entry><title>Making Python Computations Fast</title><link href="https://pyvideo.org/pycon-uk-2015/making-python-computations-fast.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/making-python-computations-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is slow at computing things. Some people try to use Cython, Numba
or even NumPy to get round this. However the best way forward is to use
a specialist native code language. No not C. Some people will use C++,
but the real cogniscenti will use D or Chapel. This session will show
how to do this using a small example.&lt;/p&gt;
</summary></entry><entry><title>PyPy for mediocre programmers</title><link href="https://pyvideo.org/pycon-uk-2015/pypy-for-mediocre-programmers.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Ronan Lamy</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/pypy-for-mediocre-programmers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a talk for mediocre Python programmers by a mediocre programmer.
PyPy is an alternative implementation of Python. It is notorious for
being fast, but also for using clever algorithms pertaining to advanced
concepts such as type inference, garbage collection, just-in-time
compilation, etc. So, can we, mediocre programmers, realistically use
PyPy?&lt;/p&gt;
&lt;p&gt;Yes, absolutely. In fact, PyPy developers did all that hard work so that
we wouldn't have to. As we'll see, it runs most Python code exactly like
CPython does, save that it magically makes it faster.&lt;/p&gt;
&lt;p&gt;Porting existing applications is always more involved than running a
simple script, so we'll also examine likely difficulties such as code
relying on CPython implementation details, and dependencies on C
extensions, and explore simple principles to let PyPy run your code even
faster.&lt;/p&gt;
&lt;p&gt;Finally, we'll have a glimpse of the future by looking at what's brewing
in the PyPy lair, such as software transactional memory, new speed
optimisations, better support for Python 3 and NumPy, ...&lt;/p&gt;
</summary></entry><entry><title>Python Projects on the Raspberry Pi</title><link href="https://pyvideo.org/pycon-uk-2015/python-projects-on-the-raspberry-pi.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/python-projects-on-the-raspberry-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is the most popular language in the Raspberry Pi community. Also
with the Raspberry Pi, it's easy to do physical computing directly from
Python code - rather than usual embedded hardware engineering in C or
Assembler.&lt;/p&gt;
&lt;p&gt;In this talk I’ll show examples of computing projects that use Python on
the Raspberry Pi and demonstrate the sort of code used in such projects.&lt;/p&gt;
&lt;p&gt;This will be an informative session with learning possibilities to give
those new to Python on the Raspberry Pi a chance to get started.&lt;/p&gt;
&lt;p&gt;Ben Nuttall is the Education Developer Advocate at the Raspberry Pi
Foundation in Cambridge, UK.&lt;/p&gt;
</summary></entry><entry><title>Python's Infamous GIL</title><link href="https://pyvideo.org/pycon-uk-2015/pythons-infamous-gil.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Larry Hastings</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/pythons-infamous-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve heard about Python’s GIL. But what is it really? What does it do,
both good and bad?&lt;/p&gt;
&lt;p&gt;Come learn all about the Python GIL. You’ll learn about its history, all
the problems it solves, all the problems it causes (that we know
about!), and what it would take to remove the GIL.&lt;/p&gt;
&lt;p&gt;Attendees should be familiar with the terrors inherent in multithreaded
programming, and be comfortable with a little C code in the slides.&lt;/p&gt;
</summary></entry><entry><title>Using logical flaws to steal and modify business critical data</title><link href="https://pyvideo.org/pycon-uk-2015/using-logical-flaws-to-steal-and-modify-business-critical-data.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Frans Rosén</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/using-logical-flaws-to-steal-and-modify-business-critical-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Independently of what type of programming language you work with,
business flaws that could expose unauthorized data will always be hard
to mitigate. Depending on the business, an issue for one company could
in fact be a feature for another. Frans Rosén, a notorious white hat
hacker, will explain how to find and test for these kind of business
critical issues with examples from real life, such as Twitter, Facebook
and Yahoo.&lt;/p&gt;
</summary></entry><entry><title>Zeth and the Presentation that wasn't</title><link href="https://pyvideo.org/pycon-uk-2015/zeth-and-the-presentation-that-wasnt.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/zeth-and-the-presentation-that-wasnt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was supposed to be Understanding PyPy, by Francisco Fernández Castaño. However, Francisco could not be found, so Zeth Green filled in in his usual random style!&lt;/p&gt;
</summary></entry></feed>