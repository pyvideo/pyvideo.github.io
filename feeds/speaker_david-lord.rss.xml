<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - David Lord</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 30 May 2024 00:00:00 +0000</lastBuildDate><item><title>State of Pallets 2024</title><link>https://pyvideo.org/flaskcon-2024/state-of-pallets-2024.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;David Lord starts off FlaskCon 2024 with the State of Pallets in 2024.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Lord</dc:creator><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-17:/flaskcon-2024/state-of-pallets-2024.html</guid><category>FlaskCon 2024</category></item><item><title>Magical (or not) GraphQL</title><link>https://pyvideo.org/north-bay-python-2024/magical-or-not-graphql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing [Magql](&lt;a class="reference external" href="https://magql.autoinvent.dev"&gt;https://magql.autoinvent.dev&lt;/a&gt;) (pronounced &amp;quot;magical&amp;quot;), a framework for defining GraphQL APIs, including [generating from SQLAlchemy](&lt;a class="reference external" href="https://magql-sqlalchemy.autoinvent.dev"&gt;https://magql-sqlalchemy.autoinvent.dev&lt;/a&gt;) models and [integrating with Flask](&lt;a class="reference external" href="https://flask-magql.autoinvent.dev"&gt;https://flask-magql.autoinvent.dev&lt;/a&gt;). Magql is extensible, looks familiar to developers who are used to Flask, and provides convenience on top of the &amp;quot;official&amp;quot; Python GraphQL library. I'll discuss why I decided to write this library, and how I went about it, including some of the technical challenges presented by GraphQL's complexity. GraphQL's nested schema and query language allows for some unique and weird possiblities compared to traiditional HTTP/REST APIs, and I'll show off some clever examples that demonstrate its potential. But that complexity can also lead to difficulties. Ultimately, the decision between GraphQL and REST is not clear cut, and this talk will also discuss some of our findings after using Magql and GraphQL in production, and where we want to go next.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Lord</dc:creator><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-30:/north-bay-python-2024/magical-or-not-graphql.html</guid><category>North Bay Python 2024</category></item><item><title>Browser security with HTTP headers</title><link>https://pyvideo.org/pybay-2019/browser-security-with-http-headers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Browsers provide many ways to help keep your users and their data secure. In this talk, learn about what security features are available and how to enable them in Flask, Django, or other web applications. This talk is targeted at intermediate web developers, but should be useful for beginners as well.&lt;/p&gt;
&lt;p&gt;Abstract
Each section will discuss a type of vulnerability and how the browser can be configured to protect users. Examples will be shown using Flask, but are applicable to other applications.&lt;/p&gt;
&lt;p&gt;Overview of how browsers behave by default and what configuration is available.
Cross-site Scripting and the X-XSS-Protection header
Content sniffing and the X-Content-Type-Options header
Clickjacking, using frames to trick users into clicking hidden content, and the X-Frame-Options header
Cookie header options and content security
History information and the Referrer-Policy header
HTTPS headers: TLS certificates, HTTP redirection, and Strict Transport Security
Content-Security-Policy controls where different types of content can be loaded from. Explain how to determine a good policy for an application.
Validating security configuration
&lt;a class="reference external" href="https://www.ssllabs.com/ssltest/"&gt;https://www.ssllabs.com/ssltest/&lt;/a&gt;
&lt;a class="reference external" href="https://securityheaders.com/"&gt;https://securityheaders.com/&lt;/a&gt;
Using these tools and interpreting results. What do good and bad configurations look like?&lt;/p&gt;
&lt;p&gt;About the speaker
David Lord is a core maintainer of Flask and manages the Pallets open source organization. He is a member of San Diego Python, where he helps organize a weekly Python study group.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Lord</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:/pybay-2019/browser-security-with-http-headers.html</guid><category>PyBay 2019</category></item></channel></rss>