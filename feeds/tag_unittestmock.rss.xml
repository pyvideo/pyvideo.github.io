<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 13 Jun 2017 00:00:00 +0000</lastBuildDate><item><title>Unit testing in the real world with mock</title><link>https://pyvideo.org/pycon-israel-2017/unit-testing-in-the-real-world-with-mock.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody agree that unit-tests are important, however learning how to write unit-tests is hard. Most of the instructional material you might try to read will use as its' examples some well behaved functions with known input and deterministic outputs. Code that is trivial to write tests around. However the real world isn't so well behaved. It has legacy code, it inspects the world, has side effects, calls external services and might have random components. Writing unit-tests for such a code is anything but trivial. One technique to allow writing unit-tests around such real world code is to replace all that ugliness with mocks, and the standard unittest.mock library is a grate tool for that. The abilities of this library surprised and delighted me in more then one occasion as I straggled to raise my code coverage. However, in my experience both the concept of mocking and the unittest.mock library are not widely known. I hope to help change that in a small way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chen Rotem Levy</dc:creator><pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-13:pycon-israel-2017/unit-testing-in-the-real-world-with-mock.html</guid><category>unittest.mock</category></item></channel></rss>