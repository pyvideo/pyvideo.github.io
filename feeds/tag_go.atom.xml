<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_go.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-17T00:00:00+00:00</updated><entry><title>Wrapping Go in Python</title><link href="https://pyvideo.org/pygotham-2016/wrapping-go-in-python.html" rel="alternate"></link><published>2016-07-17T00:00:00+00:00</published><updated>2016-07-17T00:00:00+00:00</updated><author><name>Marcus Willock</name></author><id>tag:pyvideo.org,2016-07-17:pygotham-2016/wrapping-go-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I love python, and I am interested in Go. Recently, Go has gain the ability to create shared object files, which allows you to dynamically link Go code with other languages. This talk goes over the how, why, pros and cons of wrapping Go's shared object files in python.&lt;/p&gt;
</summary><category term="GO"></category></entry><entry><title>Prototyping Go's Select with stackless.py for Stackless Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--prototyping-go--39-s-select-with-stac.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Andrew Francis</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--prototyping-go--39-s-select-with-stac.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prototyping Go's Select with stackless.py for Stackless Python&lt;/p&gt;
&lt;p&gt;Presented by Andrew Francis&lt;/p&gt;
&lt;p&gt;Showing how to use Python to prototype powerful concurrency features for
Stackless Python. We do want you to try this at home.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Google’s introduction of the Go language raised eyebrows in the
Stackless Python community. Although very different languages, Go and
Stackless Python’s concurrency model share a common ancestor: the Bell
Labs family of languages (i.e., Newsqueak, Limbo). The common feature
are channels: a synchronous message passing mechanism based on Tony
Hoare’s Communicating Sequential Processes (CSP).&lt;/p&gt;
&lt;p&gt;Both Go and Python have channels. However with the select language
statement, Go has the ability to wait on multiple channels
simultaneously. Select greatly simplifies many concurrent programming
problems. Stackless Python does not have this feature. Other channel
based languages also feature powerful concurrency constructs. How hard
would these constructs be to implement for Stackless Python?&lt;/p&gt;
&lt;p&gt;This talk explores the prototyping potential of stackless.py, the PyPy's
framework's implementation of Stackless Python. The beauty of
stackless.py is that it is written in Python and implements much of
Stackless Python's API! The &amp;quot;case study&amp;quot; involves prototyping Go's
select in stackless.py before reimplementing select in C based Stackless
Python.&lt;/p&gt;
&lt;p&gt;During this talk, it will be shown how stackless.py can be used with
CPython and the greenlet package (no need to install another Python).
The audience will also get an in depth look at how channels are
implemented. Channels are at the heart of Stackless Python's message
based concurrency model. Finally the audience will gain insights into
future directions of Stackless Python.&lt;/p&gt;
</summary><category term="csp"></category><category term="go"></category><category term="greenlets"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category><category term="stackless"></category></entry></feed>