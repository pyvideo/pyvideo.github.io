<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Syed Ansab Waqar Gillani</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_syed-ansab-waqar-gillani.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-03-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Looping Mechanisms with Python Lists</title><link href="https://pyvideo.org/pycascades-2023/looping-mechanisms-with-python-lists.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Syed Ansab Waqar Gillani</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/looping-mechanisms-with-python-lists.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a variety of looping mechanisms for iterables engineered using functions and language keywords. Is it possible that two loops with same complexity have different runtimes? Which mechanism is the fastest and the slowest, Which one should you use to optimize your application?&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry></feed>