<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-cz-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-29T00:00:00+00:00</updated><entry><title>Agile used to be really cool</title><link href="https://pyvideo.org/pycon-cz-2016/agile-used-to-be-really-cool.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Wojtek Erbetowski</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/agile-used-to-be-really-cool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Agile software development used to be really cool back in the 00's.
The vision of old school waterfall projects, with months of work
before integrating and releasing software to users gives me the
creeps. But let's return to the present. I can hardly even recall
working in a non-agile project. I feel that most of the Agile
manifesto principles are in my DNA more than a thing to follow. If
you want to keep growing in this industry you might want to start
building on top of that. This presentation contains my experience
about aligning people, sharing a direction, and how servant
leadership works.&lt;/p&gt;
</summary></entry><entry><title>Algorithmic trading with asyncio</title><link href="https://pyvideo.org/pycon-cz-2016/algorithmic-trading-with-asyncio.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Vita Smid</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/algorithmic-trading-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My team and I have been building a Python 3 stock trading platform
for the past 2.5 years. We are powering a trading fund that runs a
range of manual and automated strategies. This is a story of what we
have learned about Asyncio, profiling, optimization, debugging, and
operations... in a fast-moving environment where bugs actually cost
money.&lt;/p&gt;
</summary></entry><entry><title>AsyncIO Connections: Coroutines (Streams) vs Callbacks (Protocols)</title><link href="https://pyvideo.org/pycon-cz-2016/asyncio-connections-coroutines-streams-vs-callbacks-protocols.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Jan Škrle</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/asyncio-connections-coroutines-streams-vs-callbacks-protocols.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Standard Python library Asyncio offers both, coroutines and
callbacks, APIs for setting up client or server connections. Let's
briefly present both APIs with examples and go through ups and downs
of each solution.&lt;/p&gt;
</summary></entry><entry><title>DAGs &amp; Dask: How &amp; When to Accelerate Your Data Analysis</title><link href="https://pyvideo.org/pycon-cz-2016/dags-dask-how-when-to-accelerate-your-data-analysis.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Katharine Jarmul</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/dags-dask-how-when-to-accelerate-your-data-analysis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will introduce the audience to the Dask library for data
analysis, focusing on when Dask is useful (and when you might be
better off simply using SQL or Pandas). We will cover how to build
and analyze directed acyclic graphs using Dask and how to easily set
up a cluster running Dask for your data wrangling needs.&lt;/p&gt;
</summary></entry><entry><title>Do You Want to Retry? Handling Network Failures</title><link href="https://pyvideo.org/pycon-cz-2016/do-you-want-to-retry-handling-network-failures.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Anton Marchukov</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/do-you-want-to-retry-handling-network-failures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is not perfect and network failures do happen. Complaining
about instability might not always be enough. Especially when your
system depends on multiple networked services and each of them is on
a critical path to the final result.&lt;/p&gt;
&lt;p&gt;In this talk we will recall why network failures happen. Reason what
we can and cannot handle in the code. And see what Python standard
libraries and a few popular ones such as urllib3 and requests can
offer.&lt;/p&gt;
&lt;p&gt;And that's not all. Network Emulation (netem) module of Linux Traffic
Control (tc) can even help with poor network simulation.&lt;/p&gt;
&lt;p&gt;Now there is no excuse.&lt;/p&gt;
</summary></entry><entry><title>From (Python) zero to hero: How beginner university students learn programming</title><link href="https://pyvideo.org/pycon-cz-2016/from-python-zero-to-hero-how-beginner-university-students-learn-programming.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Valdemar Švábenský</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/from-python-zero-to-hero-how-beginner-university-students-learn-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you curious about how to teach programming effectively? Are you a
Python fan interested in everything Python-related? Or would you
simply like to see a non-standard presentation? If you answered yes
at least once, then this funny and inspiring talk is right for you!
In less than 20 minutes, you'll hear from a young student-teacher
about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What coding skills are taught to beginners and how&lt;/li&gt;
&lt;li&gt;Experience with teaching&lt;/li&gt;
&lt;li&gt;A few surprises&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No technical knowledge is needed (some code samples will be shown,
but they're not essential). Discussion at the end is welcome. Looking
forward to seeing you!&lt;/p&gt;
</summary></entry><entry><title>How Fedora uses Python data analytics to understand and help the community.</title><link href="https://pyvideo.org/pycon-cz-2016/how-fedora-uses-python-data-analytics-to-understand-and-help-the-community.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Bhagyashree Padalkar</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/how-fedora-uses-python-data-analytics-to-understand-and-help-the-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I have been involved with Fedora Community Operations Team from its
conception one year ago. Amongst other things we at CommOps are
trying to build tools to understand the community and make it more
contributor-friendly. While newcomer onboarding is important for any
FOSS community, retaining them is critical. We have been working on
improving the contributor retention rates in Fedora Community for a
while now. In this direction, we have built some Python-based scripts
to understand the activity of Fedora contributors and their life
cycles. We have also tried to analyze contribution activity of some
successful contributors and find common patterns in their behavior
and have tried to measure the impact of attending FOSS events on the
activity of a contributor and on the Fedora community as a whole. All
this work has been done using Python and during this talk, I want to
share details about the tools we have built, how we built them and
the insights we have generated from them.&lt;/p&gt;
</summary></entry><entry><title>How to build up a Python community and empower women</title><link href="https://pyvideo.org/pycon-cz-2016/how-to-build-up-a-python-community-and-empower-women.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Kristi Progri</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/how-to-build-up-a-python-community-and-empower-women.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2012 not a lot of people were interested in Python in the
relatively small city of Tirana, the capital of Albania. Even fewer
girls were interested in Python. During our talk we will share the
story of how we, a small but dedicated group of people, jump started
the community in a small country like Albania and what other small
cities and countries should avoid during their first steps in
developing a Python community in similar conditions.&lt;/p&gt;
&lt;p&gt;Most important we will share tips and tricks on how to keep the
Python spirit alive for a long time after the first enthusiastic
steps, with the goal that our shared experience will help other
communities to make the first steps or grow even further. Also
nowadays we are witnessing that the number of girls involved in
technical fields, especially development, is really low and we are
going to present what as the influence on low participation of girls
and the steps we should take to fix it.&lt;/p&gt;
</summary></entry><entry><title>Instagram and text-based machine learning</title><link href="https://pyvideo.org/pycon-cz-2016/instagram-and-text-based-machine-learning.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Josef Rousek</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/instagram-and-text-based-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simple Machine Learning technique based on document-term matrix can
work pretty well even for photos when you have at least some content.
I will show you how I got from zero to a decent recommendation engine
and learned some Jupyter tricks on the way.&lt;/p&gt;
</summary></entry><entry><title>Introduction to Data Wrangling with Python</title><link href="https://pyvideo.org/pycon-cz-2016/introduction-to-data-wrangling-with-python.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Katharine Jarmul</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/introduction-to-data-wrangling-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Become a data wrangler with Python! This talk will introduce you to
the core concepts of data analysis with Python. We’ll cover libraries
that allow you to easily clean and set up your initial dataset,
importing data from all different file types and standards. We’ll
introduce some basic libraries to help with statistics and analysis
and then cover how to document and explore your findings.&lt;/p&gt;
&lt;p&gt;It’s assumed you have a working understanding of Python and its data
types and structures, and that you’ve used and understand Python for
basic scripting. It’s also assumed you haven’t done much in terms of
data analysis, and you’d like to learn more. If this is you, welcome!&lt;/p&gt;
</summary></entry><entry><title>Jak začít programovat v Pythonu tvorbou jednoduchých her</title><link href="https://pyvideo.org/pycon-cz-2016/jak-zacit-programovat-v-pythonu-tvorbou-jednoduchych-her.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Ingrid Nagyová</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/jak-zacit-programovat-v-pythonu-tvorbou-jednoduchych-her.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mnoho, zejména mladých lidí, přivádí k programování touha vytvořit
hru. Tato touha může být zmařena při nahlédnutí do učebnic
programování, které poznatky budují systematicky a pro začátečníka
mnohdy nepochopitelně.&lt;/p&gt;
&lt;p&gt;Přednáška ukazuje, jak lze začít tvořit a hrát si s jednoduchými
grafickými objekty bez znalostí programování. Společně definujeme
několik grafických objektů, které rozpohybujeme po grafickém plátně a
jednoduchým zachycením událostí z klávesnice zabezpečíme možnost
interaktivního ovládání hry.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Humanizing among coders</title><link href="https://pyvideo.org/pycon-cz-2016/keynote-humanizing-among-coders.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Ana Balica</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/keynote-humanizing-among-coders.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What makes a good developer? Certainly technical expertise,
insightfulness, creativity, thoughtfulness. What about daily social
interactions with other developers inside the company and community?
Those are never easy. Even though we all try to be nice to each
other, sometimes unintentionally we can be a bit off. I'd like to
share with you some stories that helped me rationalize some of my own
communication and human interaction mistakes and how I'm trying to
correct them.&lt;/p&gt;
</summary></entry><entry><title>Keynote: The Great Fork</title><link href="https://pyvideo.org/pycon-cz-2016/keynote-the-great-fork.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Benny Daon</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/keynote-the-great-fork.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is more than a language, it's also a knowledge base of PEPs
and meta-PEPs driving Python's growth. Join me as I dive into PEP
purpose and guidelines, explore notable proposals and try to make
sense of it all.&lt;/p&gt;
</summary></entry><entry><title>Our journey from developers to real software engineers</title><link href="https://pyvideo.org/pycon-cz-2016/our-journey-from-developers-to-real-software-engineers.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Jozef Kepesi</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/our-journey-from-developers-to-real-software-engineers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Few years ago, we were a bunch of cowboys trying to create the
fastest flight ticket search engine. We did a lot of mistakes... But
we did it with passion. I will talk about how we knew how to avoid
all the stupid issues, but why were we not able to do it at the same
time.&lt;/p&gt;
</summary></entry><entry><title>PyIoT</title><link href="https://pyvideo.org/pycon-cz-2016/pyiot.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Jan Pospíšil</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/pyiot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python + ESP8266 + Cloud = automate anything.&lt;/p&gt;
&lt;p&gt;Introduction of Python friendly IoT HW + Cloud (Azure) services&lt;/p&gt;
</summary></entry><entry><title>Python and LHC Computing</title><link href="https://pyvideo.org/pycon-cz-2016/python-and-lhc-computing.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Jarka Schovancova</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/python-and-lhc-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how Python helps the Large Hadron Collider
physicists study the composition of matter on a sub-atomic scale?
Interested in testing world-wide distributed computing
infrastructure? Take part!&lt;/p&gt;
</summary></entry><entry><title>Streamparse - introduction to real-time data processing with Python (and some Java)</title><link href="https://pyvideo.org/pycon-cz-2016/streamparse-introduction-to-real-time-data-processing-with-python-and-some-java.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Pavel Grochal</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/streamparse-introduction-to-real-time-data-processing-with-python-and-some-java.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be about getting started with Streamparse, which is
the Python &amp;quot;connection&amp;quot; to Apache Storm, a real-time processing
framework.&lt;/p&gt;
&lt;p&gt;Besides the basic introduction, the talk will also include some
practical examples and major gotchas what we've encountered while
developing in streamparse.&lt;/p&gt;
</summary></entry><entry><title>TMOU, puzzlehunts &amp; cracking (im)possible problems with Python</title><link href="https://pyvideo.org/pycon-cz-2016/tmou-puzzlehunts-cracking-impossible-problems-with-python.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Honza Klusáček</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/tmou-puzzlehunts-cracking-impossible-problems-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you like codes, riddles and ciphers? Some people have turned
cracking puzzles into a hobby and gave rise to events dedicated to
solving such problems – puzzlehunts. TMOU is the oldest and biggest
one among them. During these games, players regularly feel the
frustration from endless unsuccessful efforts, often quickly followed
by extraordinary joy after finally figuring out the peculiar problem.
This joy can only be surpassed by creating a perfect puzzle for
others to solve.&lt;/p&gt;
&lt;p&gt;I will share a few lessons learnt while organizing TMOU, namely:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What makes a problem seemingly impossible&lt;/li&gt;
&lt;li&gt;How to turn impossible into possible and hard into not-so-hard&lt;/li&gt;
&lt;li&gt;How to crack tough problems and hammer down their complexity&lt;/li&gt;
&lt;li&gt;Why Python might be a good hammer for that&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Follow the creation of a specific puzzle from an initial idea to the
final design (puzzle #4 &amp;quot;the Dice&amp;quot;, TMOU 17
&lt;a class="reference external" href="http://www.tmou.cz/2015/sifry/reseni#kostka"&gt;http://www.tmou.cz/2015/sifry/reseni#kostka&lt;/a&gt;). Where else would you
need to solve a bunch of problems just to create a new one?&lt;/p&gt;
</summary></entry><entry><title>Tom's super easy way to make basic user interfaces in Python</title><link href="https://pyvideo.org/pycon-cz-2016/toms-super-easy-way-to-make-basic-user-interfaces-in-python.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Thomas Levine</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/toms-super-easy-way-to-make-basic-user-interfaces-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Horetu (&lt;a class="reference external" href="https://pythonhosted.org/horetu"&gt;https://pythonhosted.org/horetu&lt;/a&gt;) exposes Python functions as
command-line interfaces, web interfaces, and configuration files. In
addition to being a very practical tool, horetu is interesting
because its implementation demonstrates the capabilities of function
objects. Finally, horetu can construct powerful interfaces and
detailed documentation from functions that were written with no
intent of being used with horetu; it is, consequently, a clear
demonstration of the merits of following conventions.&lt;/p&gt;
</summary></entry><entry><title>Turn off the computer</title><link href="https://pyvideo.org/pycon-cz-2016/turn-off-the-computer.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Marek Grac</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/turn-off-the-computer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fence agents are drivers written in Python that help you to remove a
misbehaving computer node from cluster or cloud. This project started
in 2006 and it was written in bash/perl/C. And after 5000+ commits we
have a Python/C project. What happened in the last ten years? And how
maintainable is such project?&lt;/p&gt;
</summary></entry><entry><title>What is the price of open source?</title><link href="https://pyvideo.org/pycon-cz-2016/what-is-the-price-of-open-source.html" rel="alternate"></link><published>2016-10-29T00:00:00+00:00</published><updated>2016-10-29T00:00:00+00:00</updated><author><name>Jachym Cepicky</name></author><id>tag:pyvideo.org,2016-10-29:pycon-cz-2016/what-is-the-price-of-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We keep hearing, that &amp;quot;open source if for free, so why don't you use
it?&amp;quot; But is that really true? What are the real costs of open source
software? Where does the money come from? How do the developers make
their living? Is it really as free as a beer? How to bring money to
open source software development? Is open source the one and only
greatest and only good and best possible development model?&lt;/p&gt;
</summary></entry><entry><title>API first and forgotten</title><link href="https://pyvideo.org/pycon-cz-2016/api-first-and-forgotten.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Szymon Matejczyk</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/api-first-and-forgotten.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;API first&amp;quot; principle seems convincing. Anyone who tried implementing
it realizes that often the problem is not to design or formally
specify the API (with Swagger or other tool). The problem is to keep
the specification, servers and clients consistent and easy to
maintain for longer. I will talk about what practices you need to
remember and which tools are worth to check.&lt;/p&gt;
&lt;p&gt;The talk will start with the basics of microservices architecture. I
will describe some mistakes we have made that turned our
microservices architecture fragile and unmanageable.&lt;/p&gt;
&lt;p&gt;I will show how we redesigned our API using Swagger and what
principles you should have in mind when doing so. I will also cover
technical problems we encountered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to test that a service implements an API;&lt;/li&gt;
&lt;li&gt;how to avoid writing validation that is already specified in the swagger file;&lt;/li&gt;
&lt;li&gt;how to create clients and stub and who should maintain them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As theory is not enough here, I will also show some tools that help,
describe in detail connexion library and show how we used it to
implement microservices integration tests &amp;#64;Growbots.&lt;/p&gt;
</summary></entry><entry><title>Automated Testing Framework</title><link href="https://pyvideo.org/pycon-cz-2016/automated-testing-framework.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Amador Pahim</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/automated-testing-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avocado is a next generation testing framework inspired by Autotest
and modern development tools such as git. One can call it a test
framework with benefits. Native tests are written in Python and they
follow the unit test pattern, but any executable can serve as a test.&lt;/p&gt;
&lt;p&gt;In this presentation we will cover the Avocado architecture, main
features, demonstrations and we will also compare Avocado with some
known test runners.&lt;/p&gt;
</summary></entry><entry><title>Because Web API Testing Should Be Easy</title><link href="https://pyvideo.org/pycon-cz-2016/because-web-api-testing-should-be-easy.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Vilibald Wanča</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/because-web-api-testing-should-be-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web APIs are often called REST APIs, which recently became a part of
the everyday life of many Python developers. Sure, it can be a blast
to build an API with frameworks like Django or Flask, but writing
tests for it can be a tedious drag: asserting every single HTTP code,
set of headers, JSON responses, error states… you know the drill.
Despite all that you do, you still need to assure your API clients
won’t be exposed to any unexpected surprises. At Apiary, we've
developed an Open Source testing framework called Dredd, which has
baked in first-class Python support. It does all the heavy lifting
and boring stuff for you while allowing you to alter the test cases
with arbitrary Python code.&lt;/p&gt;
&lt;p&gt;Let Judge Dredd do your API justice.&lt;/p&gt;
</summary></entry><entry><title>ChatOps, have you ever heard about it?</title><link href="https://pyvideo.org/pycon-cz-2016/chatops-have-you-ever-heard-about-it.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Richard Kellner</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/chatops-have-you-ever-heard-about-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ChatOps is a term for a collaborative way of running DevOps,
including operating aspects of systems and infrastructure through an
online chat. It combines a powerful way to get things done with a
more human way of working.&lt;/p&gt;
&lt;p&gt;But it doesn’t happen overnight. In this talk I would like to explain
various stages of adoption. I also want to inspire you to implement
ChatOps into your workflow and to suggest ideas how to do that. I
will show you why Python is the ideal language for building a ChatOps
stack. It is quick and fun to build new chat commands and even a
person who doesn’t know Python can easily start learning and see the
results immediately.&lt;/p&gt;
</summary></entry><entry><title>C:\keep/calm/and\use\pathlib</title><link href="https://pyvideo.org/pycon-cz-2016/ckeepcalmandusepathlib.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Tomáš Bedřich</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/ckeepcalmandusepathlib.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you handle filesystem paths? Strings and &lt;tt class="docutils literal"&gt;os.path.join()&lt;/tt&gt;?
Seriously? Come to learn something shiny for everyday use!&lt;/p&gt;
</summary></entry><entry><title>Compute and optimize!</title><link href="https://pyvideo.org/pycon-cz-2016/compute-and-optimize.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Miloň Krejča</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/compute-and-optimize.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Time, it's function in life and computing and what might be possible
to build in the near future. Lazy solutions to computation and
beyond, how to get nearly maximum from your computer without too much
work. Use of Numpy, Pandas, Cython, multiprocessing, deap, Ta-Lib
libraries and genetic programming in a quest to solve some financial
markets.&lt;/p&gt;
</summary></entry><entry><title>DOS yourself a.k.a. Load Testing</title><link href="https://pyvideo.org/pycon-cz-2016/dos-yourself-aka-load-testing.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Dariusz Aniszewski</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/dos-yourself-aka-load-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I'd like to tell you about testing performance of your
backend applications. I'll explain what load testing is in theory and
how to do it in practise. I'd like to focus on why load testing is
important step in software development and what will most likely
happen when it's forgotten. I'll walk through different tools that
can be used, starting with very basic AB, via jMeter up to the Locust
and cloud-based services.&lt;/p&gt;
</summary></entry><entry><title>Feed your code to coala</title><link href="https://pyvideo.org/pycon-cz-2016/feed-your-code-to-coala.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Robert Kuska</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/feed-your-code-to-coala.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you already use linters for your codebase but it still feels like
it's not enough. You want to check for more things, and better, use
your own checkers but you want it to be as easy as possible! Meet
coala.io, it feeds on your code and makes it better at the same time.
With (almost[*]_) no cost.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[*]&lt;/td&gt;&lt;td&gt;CPU consumption not included&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary></entry><entry><title>GIL: What's the hassle and why should I care?</title><link href="https://pyvideo.org/pycon-cz-2016/gil-whats-the-hassle-and-why-should-i-care.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Jacek Kołodziej</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/gil-whats-the-hassle-and-why-should-i-care.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demistifying GIL - what's that, how it really affects performance,
what changed in the last few years and what can we do about GIL in
everyday programming.&lt;/p&gt;
&lt;p&gt;There is still a lot of misunderstanding regarding GIL, coming from
not-so-perfect documentation - not explaining the implications
thoroughly and in a simple way; it's also often outdated.&lt;/p&gt;
&lt;p&gt;Also, GIL's implementation changed a little in CPython 3.x that may
affect programmers' choices.&lt;/p&gt;
&lt;p&gt;This misinformation may, in some cases, drive them away from CPython
where it's not really the worst choice. By providing comprehensive
guide to today's GIL in CPython, this presentation aims to help make
better design choices - be it choosing a concurrency/parallelism
model, Python implementation to use or even whether or not to drop
Python entirely.&lt;/p&gt;
&lt;p&gt;There have been (and still are), of course, attempts to get rid of
GIL and find another solution for the problem it solves - newest of
which is Larry Hasting's project called GILectomy, which I hope to
shed some light on.&lt;/p&gt;
</summary></entry><entry><title>If it Moves, Test it Anyway</title><link href="https://pyvideo.org/pycon-cz-2016/if-it-moves-test-it-anyway.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Miro Hrončok</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/if-it-moves-test-it-anyway.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If it Moves, Test it Anyway&lt;/p&gt;
&lt;p&gt;Now you write tests and you want them to be part of the project, run on your CI etc., but:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the API is secured by a secret token/password/cookie...&lt;/li&gt;
&lt;li&gt;the information on the webpage changes&lt;/li&gt;
&lt;li&gt;it's not even accessible from the wild web&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So how do you test it? You can mock the server part (that's messy),
you can spin off your own testing server (that's hard) or you can
record the HTTP communication with betamax (that's super simple).
I'll show you all the methods and their good, bad and ugly parts.&lt;/p&gt;
</summary></entry><entry><title>Keynote: User-centered software projects</title><link href="https://pyvideo.org/pycon-cz-2016/keynote-user-centered-software-projects.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Jacqueline Kazil</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/keynote-user-centered-software-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open-sourced and inner-sourced projects often struggle to get
engagement. Communities, such as Github and PyPi, are host to
redundant projects and libraries. In the development space, how do
you distinguish your project from others, get people excited to
contribute to it, and ultimately create a successful open source
project? The answer is to apply user-centered design techniques to
the development of your project. User-centered design is usually
applied to web applications and products on the front-end of a
website, but these techniques can be applied to open source
libraries. In user-centered open source projects, your users are
those who type &lt;cite&gt;pip install $your_library&lt;/cite&gt;. In this talk, Jackie will
illustrate some user-centered techniques that have been used on her
own project - Mesa (&lt;a class="reference external" href="https://github.com/projectmesa/mesa"&gt;https://github.com/projectmesa/mesa&lt;/a&gt;), along with
other successful open source projects.&lt;/p&gt;
</summary></entry><entry><title>MicroPython</title><link href="https://pyvideo.org/pycon-cz-2016/micropython.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Pavol Rusnak</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython je moderní implementace Pythonu pro mikrokontrolery a
embedded systémy. Pojďme se spolu podívat, čím se liší od &amp;quot;velkého&amp;quot;
Pythonu a co všechno se dá použitím MicroPythonu ovládat. Součastí
přednášky budou praktické ukázky na různých zařízeních.&lt;/p&gt;
</summary></entry><entry><title>Peewee: A Simple Yet Powerful ORM</title><link href="https://pyvideo.org/pycon-cz-2016/peewee-a-simple-yet-powerful-orm.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Viliam Križan</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/peewee-a-simple-yet-powerful-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Peewee is a small, expressive ORM, written as a single Python module.
In my talk, I will present usage examples including advanced queries,
transactions, and backend switching. We will look at differences
between Peewee and SQLAlchemy, see how Peewee takes advantage of
operators to build SELECT queries, learn how to integrate Peewee into
a Flask-based application, and cover the most common difficulties
when trying to extend Peewee.&lt;/p&gt;
</summary></entry><entry><title>Porting embedded projects</title><link href="https://pyvideo.org/pycon-cz-2016/porting-embedded-projects.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Petr Hodina</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/porting-embedded-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever worked on embedded project? Chances are that you had to
use some proprietary IDE for development. Wouldn't it be better to
use some open source IDE like Eclipse or QtCreator? What should I do
when I'm working a project and can't start from the scratch?&lt;/p&gt;
&lt;p&gt;In this presentation I'll show you how Python can help you with
porting projects. I'll give examples of projects developed in IAR
Embedded Workbench and Keil uVision. At the end we'll have CMake
build file which can be imported to many IDEs.&lt;/p&gt;
&lt;p&gt;Python modules like Objectify and Jinja will be a great help to us!&lt;/p&gt;
</summary></entry><entry><title>Python embedded in your daily life</title><link href="https://pyvideo.org/pycon-cz-2016/python-embedded-in-your-daily-life.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Andrej Mosat</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/python-embedded-in-your-daily-life.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you always wondered where the batteries from Python: batteries
included are? Despair no more! We come with battery-powered Python
devices for your daily life.&lt;/p&gt;
&lt;p&gt;We will focus on showcasing and live demonstration of Python running
on very small microprocessors.&lt;/p&gt;
&lt;p&gt;First, an overview of existing platforms which can run Python on
batteries. Then we will showcase in a live demo what Python can do
for you. Finally a “how to” workflow for successful Python coding on
low power ARM Cortex microprocessors will be revealed to get you
started.&lt;/p&gt;
</summary></entry><entry><title>Python GUI programming for command-line geeks (and others as well)</title><link href="https://pyvideo.org/pycon-cz-2016/python-gui-programming-for-command-line-geeks-and-others-as-well.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Stanislav Kontár</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/python-gui-programming-for-command-line-geeks-and-others-as-well.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GUI programming in Python for beginners. We will discuss basic GUI
building blocks and some traditional choices of GUI libraries along
with their advantages, disadvantages, and portability. We will look
at some code examples and discuss related topics ranging from basics,
such as handling long running tasks, to more advanced, OpenGL
integration and deploying.&lt;/p&gt;
</summary></entry><entry><title>Running Python in production</title><link href="https://pyvideo.org/pycon-cz-2016/running-python-in-production.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Petr Joachim</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/running-python-in-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring many ways of running Python in different production environments.&lt;/p&gt;
&lt;p&gt;Starting from ordinary self-hosted old-school etc. scripts, through
supervisor, ending with docker. All of this with great examples.&lt;/p&gt;
</summary></entry><entry><title>Similarities and standards between modern web frameworks</title><link href="https://pyvideo.org/pycon-cz-2016/similarities-and-standards-between-modern-web-frameworks.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Goga Patarkatsishvili</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/similarities-and-standards-between-modern-web-frameworks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the past years there have appeared a lot of new frameworks and
libraries in the modern web world, but behind the scenes there are a
lot of similarities and standards in any language and I will talk
about these standards.&lt;/p&gt;
&lt;p&gt;I also have a post about it:
&lt;a class="reference external" href="https://medium.com/&amp;#64;ent1c3d/similarities-between-django-and-laravel-eb5e2b344ecb"&gt;https://medium.com/&amp;#64;ent1c3d/similarities-between-django-and-laravel-eb5e2b344ecb&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Testing of Web Applications Using Python</title><link href="https://pyvideo.org/pycon-cz-2016/testing-of-web-applications-using-python.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Magdalena Kabatova</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/testing-of-web-applications-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the continuous integration development process, automatic testing
is critical. The application must be delivered properly to customers
and users. And with frequent releases, manual testing is exhausting.&lt;/p&gt;
&lt;p&gt;Therefore developers need integration and system tests, aside from
basic unit tests - to make sure their commits are integrated properly
and did not break anything. No more: one hotfix creates two new bugs!&lt;/p&gt;
&lt;p&gt;For beginners: I will give a brief introduction to software testing
and its types and talk about how easy is to start with writing
automatic tests in Python.&lt;/p&gt;
&lt;p&gt;For advanced: I will present integration testing of Cleerio web
mapping application (originally written in JavaScript and PHP) using
Python together with Selenium project.&lt;/p&gt;
</summary></entry></feed>