<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anirudh-todi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-09-17T00:00:00+00:00</updated><entry><title>TSAR (the TimeSeries AggregatoR)</title><link href="https://pyvideo.org/pygotham-2014/tsar-the-timeseries-aggregator.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Anirudh Todi</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/tsar-the-timeseries-aggregator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twitter depends heavily on real-time event aggregation. Classic
timeseries applications include site traffic, service health, and user
engagement monitoring; these are increasingly complemented by a range of
products and features that surface aggregated timeseries data directly
to end users. Services that power such features need to be resilient
enough to ensure a consistent user experience, flexible enough to
accommodate a rapidly changing product roadmap, and able to scale to
tens of billions of events per day.&lt;/p&gt;
&lt;p&gt;Experience has shown that truly robust real-time aggregation services
are hard to build; scaling and evolving them gracefully is even harder;
and, moreover, many timeseries applications call for essentially the
same architecture, with slight variations in the data model. Solving
this broad class of problems at Twitter has been a multiyear effort. In
previous talks we have introduced Summingbird, a high-level abstraction
library for generalized distributed computation, which provides an
elegant descriptive framework for complex aggregation problems. In this
talk, I will describe how we built a flexible, reusable, end-to-end
service architecture on top of Summingbird, called TSAR (the TimeSeries
AggregatoR).&lt;/p&gt;
&lt;p&gt;TSAR uses Python to provide an service toolkit that integrates with
essential services that provide data processing, data warehousing, query
capability, observability, and alerting, automatically configuring and
orchestrating its components.&lt;/p&gt;
</summary></entry></feed>