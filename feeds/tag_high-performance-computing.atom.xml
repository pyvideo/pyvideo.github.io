<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_high-performance-computing.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-14T00:00:00+00:00</updated><entry><title>Out with the Old and in with the New: Embedding Python in Old Fortran HPC Code</title><link href="https://pyvideo.org/scipy-2016/out-with-the-old-and-in-with-the-new-embedding-python-in-old-fortran-hpc-code-brendan-smithyman.html" rel="alternate"></link><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><author><name>Brendan Smithyman</name></author><id>tag:pyvideo.org,2016-07-14:scipy-2016/out-with-the-old-and-in-with-the-new-embedding-python-in-old-fortran-hpc-code-brendan-smithyman.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Seismic Full-Waveform Inversion (FWI) is a field with decades-old academic codes. The program Fullwv started life in 1989, written in Fortran 77 by numerous researchers. We detail how we extended Fullwv and embedded a new Python-based FWI package called Zephyr. We override or replace portions of the Fortran source code with Python, to enable rapid development of new algorithms and methods.&lt;/p&gt;
</summary><category term="high performance computing"></category><category term="zephyr"></category></entry><entry><title>PySPH: A Reproducible and High performance Framework for Smoothed Particle Hydrodynamics</title><link href="https://pyvideo.org/scipy-2016/pysph-a-reproducible-and-high-performance-framework-for-smoothed-particle-hydrodynamics-prabhu-ra.html" rel="alternate"></link><published>2016-07-14T00:00:00+00:00</published><updated>2016-07-14T00:00:00+00:00</updated><author><name>Prabhu Ramachandran</name></author><id>tag:pyvideo.org,2016-07-14:scipy-2016/pysph-a-reproducible-and-high-performance-framework-for-smoothed-particle-hydrodynamics-prabhu-ra.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SPH (Smoothed Particle Hydrodynamics) is a general purpose technique to numerically compute the solutions to partial differential equations. The method is grid-free and uses particles to discretize the various properties of interest. The method is Lagrangian and particles are moved with the local velocity. The method was originally developed for astrophysical problems (compressible gas-dynamics) but has since been extended to simulate incompressible fluids, solid mechanics, free-surface problems and a variety of other problems. The SPH method is relatively easy to implement. This has resulted in a large number of schemes and implementations proposed by various researchers. It is often difficult to reproduce published results due to the variety of implementations. While a few standard packages like (SPHysics, DualSPHysics, JOSEPHINE etc.) exist, they are usually tailor-made for particular applications and are not general purpose. Our group has been developing PySPH (&lt;a class="reference external" href="http://pysph.bitbucket.org"&gt;http://pysph.bitbucket.org&lt;/a&gt;) over 5 years. PySPH is open source, and distributed under the new BSD license. Our initial implementation was based on Cython (&lt;a class="reference external" href="http://cython.org"&gt;http://cython.org&lt;/a&gt;) and also featured some parallelization using MPI. Unfortunately, this proved difficult to use as users were forced to implement most of their code in Cython. It was felt that we might as well have implemented it all in C++ and exposed a Python interface to that. In early 2013, we redesigned PySPH so that users were able to implement an entire simulation using pure Python. This was done by auto-generating HPC code from the pure Python code that users provided. This version ended up being faster than our original Cython implementation. Since we were auto-generating code, with a bit of additional effort it was possible to support OpenMP. PySPH has thus matured into an easy to use, yet high-performance framework where users can develop their schemes in pure Python and yet obtain performance close to that of a lower-level language implementation. PySPH also supports running on a cluster of machines via MPI. This is seamless and a serial script using PySPH can be run with almost no changes using MPI. PySPH features a reasonable test-suite and we use continuous integration servers to test it on Linux and Windows. Our documentation is hosted on &lt;a class="reference external" href="http://pysph.readthedocs.org"&gt;http://pysph.readthedocs.org&lt;/a&gt;. The framework supports several of the standard SPH algorithms. A suite of about 30 examples are provided and are shipped as part of the sources and installed when a user does a pip install for example. The examples are written in a way that makes it easy to extend and also perform comparisons between schemes. These features make PySPH well suited for reproducible numerical work. In fact one of our recent papers was written such that every figure in the paper is automatically generated using PySPH. In this talk we discuss the use, design, and implementation of PySPH. We believe that this talk would be suitable for either the HPC track or the general track or even the engineering minisymposium.&lt;/p&gt;
</summary><category term="pysph"></category><category term="hydrodynamics"></category><category term="high performance computing"></category></entry><entry><title>Psi4: A Case Study on Modernizing &amp; Modularizing Quantum Chemistry w/ Python &amp; C++</title><link href="https://pyvideo.org/scipy-2016/psi4-a-case-study-on-modernizing-modularizing-quantum-chemistry-w-python-c-scipy-2016.html" rel="alternate"></link><published>2016-07-13T00:00:00+00:00</published><updated>2016-07-13T00:00:00+00:00</updated><author><name>Daniel Smith</name></author><id>tag:pyvideo.org,2016-07-13:scipy-2016/psi4-a-case-study-on-modernizing-modularizing-quantum-chemistry-w-python-c-scipy-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Psi4 open-source quantum chemistry project was written from the ground up with Python and C++ and will be used as an example on how to modernize and modularize programs that are typically decades old HPC Fortran programs. The Python interface allows novice users to quickly create complex instructions through the common Python syntax. In addition, developers gain access to tailored C++ libraries that allow entirely new methodologies to be written using only Python while simultaneously having the ability to run the process efficiently on tens to hundreds of thousands of processors.&lt;/p&gt;
</summary><category term="psi4"></category><category term="high performance computing"></category></entry></feed>