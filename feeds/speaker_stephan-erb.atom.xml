<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_stephan-erb.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-25T00:00:00+00:00</updated><entry><title>Python with and without Pants</title><link href="https://pyvideo.org/pycon-de-2018/python-with-and-without-pants.html" rel="alternate"></link><published>2018-10-25T00:00:00+00:00</published><updated>2018-10-25T00:00:00+00:00</updated><author><name>Stephan Erb</name></author><id>tag:pyvideo.org,2018-10-25:pycon-de-2018/python-with-and-without-pants.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is the best outfit for comfortable, but highly productive
programming at home? While this is definitely an important question,
this talk will focus on a topic that is slightly more controversial:
monorepos and their build tools. Specifically, the talk will have a
closer look at Pants (&lt;a class="reference external" href="https://www.pantsbuild.org"&gt;https://www.pantsbuild.org&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Pants is a build system for large or rapidly growing code bases. It
supports all stages of a typical build ( bootstrapping, dependency
resolution, compilation, linting, ...) and allows users to organize
their code via targets for binaries, libraries, and tests. For Python
programmers, pants is especially interesting, as it makes the
manipulation and distribution of hermetically sealed Python environments
painless - so called PEXes.&lt;/p&gt;
&lt;p&gt;The talk will motivate Pants and its usage in the context of a large
company- wide monorepo. It will then focus on important Python-centric
features, and shortly explain how those work under the hood. The talk
will conclude with a discussion of usecases for Pants outside of a
monorepo, i.e. for the rest of us.&lt;/p&gt;
</summary><category term="DevOps"></category><category term="Infrastructure"></category></entry><entry><title>The Snake in the Tar Pit: Complex Systems with Python</title><link href="https://pyvideo.org/pycon-de-2017/the-snake-in-the-tar-pit-complex-systems-with-python.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Stephan Erb</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/the-snake-in-the-tar-pit-complex-systems-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Stephan Erb&lt;/strong&gt; (&amp;#64;ErbStephan)&lt;/p&gt;
&lt;p&gt;Stephan Erb is a software engineer driven by the goal to make Blue Yonder's data scientists more productive. Stephan holds a master's degree in computer science from the Karlsruhe Institute of Technology (KIT). He is a PMC member of the Apache Aurora project and tweets at &amp;#64;ErbStephan.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. ...&lt;/p&gt;
&lt;p&gt;That is how the Zen of Python motivates us Python programmers to build software that is easy to maintain and extend. In reality however, after years of development, we often end up with systems that are quite the opposite: large code bases, slow turn around times, and brittle operations.&lt;/p&gt;
&lt;p&gt;In this talk we will explore software design methodologies that can help to prevent this from happening. We will have a closer look at seminal work by computer scientists that has proven to be useful in practice. This includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Out of the Tar Pit by Ben Moseley and Peter Marks&lt;/li&gt;
&lt;li&gt;End-to-End Arguments in System Design by Saltzer et al.&lt;/li&gt;
&lt;li&gt;Programming Pearls by Jon Bentley&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A conference talk is clearly not sufficient to cover the breath of the mentioned literature. Main goal of the talk is therefore to illustrate a few key messages using examples from real-world Python projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="system"></category><category term="design"></category><category term="complexity"></category><category term="python"></category></entry><entry><title>Release Management with Devpi</title><link href="https://pyvideo.org/europython-2015/release-management-with-devpi.html" rel="alternate"></link><published>2015-08-05T00:00:00+00:00</published><updated>2015-08-05T00:00:00+00:00</updated><author><name>Stephan Erb</name></author><id>tag:pyvideo.org,2015-08-05:europython-2015/release-management-with-devpi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephan Erb - Release Management with Devpi
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Devpi is an open source PyPi-compatible package server. Its versatile
features make it the Swiss Army knife of Python package and release
management, enabling anyone to shape a custom release workflow.&lt;/p&gt;
&lt;p&gt;In this talk, I will detail how we use our company-wide Devpi
installation in order to share a large set of packages across teams,
deploy binary packages to our application servers, and mix and mash
open source packages with our own. With Devpi being a critical part of
our release and deployment infrastructure, I will also cover our high-
availability setup and how we perform major version updates with
minimal downtime.&lt;/p&gt;
&lt;p&gt;While this talk is not meant to be an exhaustive introduction of all
available Devpi features, it can offer insights on how Devpi can be
used at a larger scale.&lt;/p&gt;
</summary></entry></feed>