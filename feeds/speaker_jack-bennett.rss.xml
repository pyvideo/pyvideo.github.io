<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Jack Bennett</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 Jul 2024 00:00:00 +0000</lastBuildDate><item><title>I Lost 25 Pounds Thanks to Python: Personal Data Analytics Using Pandas and Numpy</title><link>https://pyvideo.org/pyohio-2019/i-lost-25-pounds-thanks-to-python-personal-data-analytics-using-pandas-and-numpy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python provides a great set of built-in tools and third-party libraries
for data analysis. Modern personal devices like smart watches or phones
generate streams of data about body metrics, location, movement, and
more. I describe Python-based methods for extracting and analyzing data
from personal smart devices. I applied these methods to track and change
habits and behaviors to lose 25 pounds.&lt;/p&gt;
&lt;p&gt;Your smartwatch and smartphone provide reams of data about your body,
movement, behavior, health, and more. Python is an ideal language to use
for analyzing, transforming, and displaying this data. Furthermore,
numerous third-party packages such as NumPy, SciPy, pandas, and
matplotlib make this process easier, faster, more fun, and more
insightful than ever before.&lt;/p&gt;
&lt;p&gt;Furthermore, you can use these tools to get tangible results in your
life: for example, during the first few months of 2019, I used a set of
Python scripts operating on a combination of personal data sources to
modify my habits and behaviors to lose 25 pounds!&lt;/p&gt;
&lt;p&gt;In this talk we analyze several streams of data from Apple Watch and
iPhone to explore what we can learn from them, individually and in
combination. Data categories that we explore include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sleep&lt;/li&gt;
&lt;li&gt;fasting&lt;/li&gt;
&lt;li&gt;heart rate&lt;/li&gt;
&lt;li&gt;body weight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use simple but powerful techniques from signal processing, including
moving averages and filtering, to extract insight from the data.
Additionally, we investigate correlations between the different data
streams.&lt;/p&gt;
&lt;p&gt;Putting this methodology in place is fun, informative, and personally
rewarding. In particular, you can use it for habit tracking, to increase
self- knowledge and motivate useful habit change.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Bennett</dc:creator><pubDate>Sun, 28 Jul 2019 13:45:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-28:/pyohio-2019/i-lost-25-pounds-thanks-to-python-personal-data-analytics-using-pandas-and-numpy.html</guid><category>PyOhio 2019</category></item><item><title>Orchestrating Workflows Is a 'cron-ic' Systems Problem. Airflow Is the Modern Solution.</title><link>https://pyvideo.org/pyohio-2023/orchestrating-workflows-is-a-cron-ic-systems-problem-airflow-is-the-modern-solution.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a developer, devops specialist, or SRE, you almost certainly have
recurring computational jobs running on your systems. cron is the
simple, time-tested sysadmin tool for making a Unix host run a task on a
regular schedule.&lt;/p&gt;
&lt;p&gt;However, with the ongoing migration to cloud-based microservices and
APIs, many computational tasks have a large, complex, and widely
distributed graph of upstream dependencies. These dependencies come in
many different forms: for example, a file or other resource arrives; a
service or API becomes available; a database finishes a maintenance
task; the clock strikes midnight.&lt;/p&gt;
&lt;p&gt;Teams that try to manage such complex dependencies with cron inevitably
end up writing brittle, custom code and scripts to ensure that their
jobs execute in the correct order.&lt;/p&gt;
&lt;p&gt;This raises the question: how can a team more effectively define,
manage, visualize, and monitor such complex workflows? An increasingly
popular answer is Apache Airflow, the open-source system for workflow
orchestration.&lt;/p&gt;
&lt;p&gt;From this talk, you will learn about the use cases for Airflow, walk
through some introductory examples of the Python code that defines
workflows, and watch these workflows operating in real-time in the web
UI.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Bennett</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/orchestrating-workflows-is-a-cron-ic-systems-problem-airflow-is-the-modern-solution.html</guid><category>PyOhio 2023</category></item><item><title>Is Python Your TYPE of Programming Language? How to Use Static Typing in Python with Type Hints, MyPy and Pydantic</title><link>https://pyvideo.org/pyohio-2024/is-python-your-type-of-programming-language-how-to-use-static-typing-in-python-with-type-hints-mypy-and-pydantic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's dynamic typing system famously offers flexibility, but this can
sometimes lead to runtime errors that are hard to detect or predict. In
many cases, the programmer knows what type a variable &amp;quot;should&amp;quot; be, but
in earlier language versions the only option to enforce this was by
writing custom, run-time type checks. Since Python 3.5, the language has
offered type hints, which are optional annotations that suggest (but do
not require) that a variable has a particular type. Combined with static
type checkers like MyPy and run-time data validation frameworks like
Pydantic, type hints offer Python programmers a powerful system to
implement static types in a highly standardized way.&lt;/p&gt;
&lt;p&gt;This presentation explores these new standards for static typing in
Python through the lens of two powerful and versatile libraries: MyPy
and Pydantic. These tools build upon Pythonâ€™s type hints to help you
improve your code reliability and effectiveness with minimal extra
effort.&lt;/p&gt;
&lt;p&gt;At the end of this presentation you will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use type hints, MyPy, and Pydantic to define and enforce static data
types in Python.&lt;/li&gt;
&lt;li&gt;Identify important use cases where static types provide greater code
reliability and quality.&lt;/li&gt;
&lt;li&gt;Leverage these tools to increase the resilience of your code against
bad data, and deliver more useful and actionable error messages
sooner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyPy is a type checker that leverages built-in type hints to identify
possible type errors during a separate static analysis stage. By
integrating a MyPy step into your development, testing, and deployment
processes, you can catch type-related errors at the start of the
development cycle. This reduces debugging time, improves code quality,
and often heads off potential production failures long before they
occur. We will discuss MyPy's key features, how to integrate it into
existing projects, and how it works together with Python's built-in
dynamic typing.&lt;/p&gt;
&lt;p&gt;Pydantic is a data validation library that leverages Python's type hints
to check incoming data at run time. Pydantic's data models ensure that
incoming data conforms to defined schemas. This feature is especially
useful in data-intensive applications for guaranteeing data integrity
and standardizing error reporting. Key application areas include ETL,
streaming data, and RESTful APIs (in fact, the popular FastAPI framework
leans heavily on Pydantic for data validation). We will learn about
Pydantic's applications in data parsing, and in building data models
that enhance code resilience and simplify error-checking and logging.&lt;/p&gt;
&lt;p&gt;Through reference to practical examples and best practices, this talk
will demonstrate how you can use MyPy and Pydantic to leverage the
static typing capabilities in the core Python language to create more
correct, maintainable, and resilient Python applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Bennett</dc:creator><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-07-27:/pyohio-2024/is-python-your-type-of-programming-language-how-to-use-static-typing-in-python-with-type-hints-mypy-and-pydantic.html</guid><category>PyOhio 2024</category></item></channel></rss>