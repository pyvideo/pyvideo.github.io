<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nicole-carlson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-07T00:00:00+00:00</updated><entry><title>Productionalizing a Data Science Team</title><link href="https://pyvideo.org/pydata-austin-2019/productionalizing-a-data-science-team.html" rel="alternate"></link><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><author><name>Nicole Carlson</name></author><id>tag:pyvideo.org,2019-12-07:pydata-austin-2019/productionalizing-a-data-science-team.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many data scientists who are used to working independently struggle when transitioning to teams. This talk is about best practices for processes on data science teams, taken from two teams I've worked on. Some topics I’ll cover are: tracking your work, organizing your code, and deploying models. These tips are meant to be utilized by any teammate including managers and individual contributors.&lt;/p&gt;
</summary><category term="Data Science"></category><category term="teamwork"></category></entry><entry><title>Lessons learned open sourcing (and maintaining) my first library</title><link href="https://pyvideo.org/pycon-ca-2018/lessons-learned-open-sourcing-and-maintaining-my-first-library.html" rel="alternate"></link><published>2018-11-11T00:00:00+00:00</published><updated>2018-11-11T00:00:00+00:00</updated><author><name>Nicole Carlson</name></author><id>tag:pyvideo.org,2018-11-11:pycon-ca-2018/lessons-learned-open-sourcing-and-maintaining-my-first-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last year, I open-sourced my first library, PyMC3 Models. This talk has two parts: things I learned as I was writing my library and some of the issues I faced being the sole maintainer of the library. I hope you’ll be encouraged to open source and maintain your own library after this!&lt;/p&gt;
&lt;p&gt;Presentation page -- &lt;a class="reference external" href="https://2018.pycon.ca/talks/talk-PC-55199"&gt;https://2018.pycon.ca/talks/talk-PC-55199&lt;/a&gt;
Author website -- &lt;a class="reference external" href="http://parsingscience.com/"&gt;http://parsingscience.com/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How to spend ¾ of your yearly budget in 3 weeks: a PySpark cautionary tale</title><link href="https://pyvideo.org/pydata-new-york-city-2018/how-to-spend-34-of-your-yearly-budget-in-3-weeks-a-pyspark-cautionary-tale.html" rel="alternate"></link><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><author><name>Nicole Carlson</name></author><id>tag:pyvideo.org,2018-08-17:pydata-new-york-city-2018/how-to-spend-34-of-your-yearly-budget-in-3-weeks-a-pyspark-cautionary-tale.html</id><summary type="html"></summary></entry><entry><title>Turning PyMC3 into scikit learn</title><link href="https://pyvideo.org/pydata-new-york-city-2017/turning-pymc3-into-scikit-learn.html" rel="alternate"></link><published>2017-11-27T00:00:00+00:00</published><updated>2017-11-27T00:00:00+00:00</updated><author><name>Nicole Carlson</name></author><id>tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/turning-pymc3-into-scikit-learn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyMC3 is a probabilistic modeling library. Most examples of how to use the library exist inside of Jupyter notebooks. However, making your model reusable and production-ready is a bit opaque. My goal is to show a custom Bayesian Model class that implements the sklearn API. After this talk, you should be able to build your own reusable PyMC3 models.&lt;/p&gt;
</summary></entry><entry><title>When Worlds Collide: Productionalizing a Data Science Model</title><link href="https://pyvideo.org/pydata-chicago-2016/when-worlds-collide-productionalizing-a-data-science-model.html" rel="alternate"></link><published>2016-08-28T00:00:00+00:00</published><updated>2016-08-28T00:00:00+00:00</updated><author><name>Tudor Radoaca</name></author><id>tag:pyvideo.org,2016-08-28:pydata-chicago-2016/when-worlds-collide-productionalizing-a-data-science-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;On our first data science project at Shiftgig, the data science and engineering teams had to build software that was production-ready while maintaining the flexibility of a data science sandbox. Although these seem like irreconcilable goals, they forced us to improve inter-team communication and ultimately helped create a great product. We’ll walk through our process and the lessons we learned.&lt;/p&gt;
</summary><category term="Data"></category><category term="data science"></category><category term="model"></category><category term="science"></category></entry><entry><title>A Quickstart Guide to PyMC3</title><link href="https://pyvideo.org/pydata-chicago-2016/a-quickstart-guide-to-pymc3.html" rel="alternate"></link><published>2016-08-26T00:00:00+00:00</published><updated>2016-08-26T00:00:00+00:00</updated><author><name>Nicole Carlson</name></author><id>tag:pyvideo.org,2016-08-26:pydata-chicago-2016/a-quickstart-guide-to-pymc3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Github: &lt;a class="reference external" href="https://github.com/parsing-science/pymc3_quickstart_guide"&gt;https://github.com/parsing-science/pymc3_quickstart_guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyMC3 is a powerful relatively new library for probabilistic models. The developers have given multiple talks describing probabilistic models, Bayesian statistics, and the features of the library. This tutorial aims to complement these talks by providing a practical guide to using PyMC3 with step-by-step implementations of some basic models and some issues you might encounter.&lt;/p&gt;
</summary></entry></feed>