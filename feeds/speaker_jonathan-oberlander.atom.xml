<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-oberlander.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-26T00:00:00+00:00</updated><entry><title>Suggestions from Python and Solr</title><link href="https://pyvideo.org/pycon-de-2018/suggestions-from-python-and-solr.html" rel="alternate"></link><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><author><name>Jonathan Oberländer</name></author><id>tag:pyvideo.org,2018-10-26:pycon-de-2018/suggestions-from-python-and-solr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a user types a query into the search box of our price comparison
website, we try to figure out what they search, and provide suggestions
as they type along. What product, what brand, from which categories?
Solr provides a SuggestComponent that is a good start, but in a lot of
situations we need fallback strategies: what should we show to a user
searching for just a brand name? Or for a singular offer we can't
actually show them? What alternatives can we dig up? And behind all this
backfill logic lurks that dreaded question: what amount of irrelevant
garbage is worse than the horror vacui of an empty result set?&lt;/p&gt;
</summary><category term="Algorithms"></category></entry><entry><title>Python Birdies: Codegolfing for better understanding (and fun)</title><link href="https://pyvideo.org/pycon-de-2018/python-birdies-codegolfing-for-better-understanding-and-fun.html" rel="alternate"></link><published>2018-10-25T00:00:00+00:00</published><updated>2018-10-25T00:00:00+00:00</updated><author><name>Jonathan Oberländer</name></author><id>tag:pyvideo.org,2018-10-25:pycon-de-2018/python-birdies-codegolfing-for-better-understanding-and-fun.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Codegolfing means taking a programming task and trying to answer it with
a byte-minimal correct solution. Such an answer often takes shortcuts,
is horribly inefficient, and definitely violates almost 100% of PEP 8.
Like any playful interaction with a subject, it can however improve your
understanding of it, as well as teach you about weird interactions
regarding operator precedence, lexer quirks and more.&lt;/p&gt;
&lt;p&gt;After going over basic definitions, I will take a small number of
well-known or straightforward programming tasks and go through the act
of golfing an answer together step by step.&lt;/p&gt;
</summary><category term="Algorithms"></category></entry></feed>