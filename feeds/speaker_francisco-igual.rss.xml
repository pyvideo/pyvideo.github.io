<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 05 Aug 2016 00:00:00 +0000</lastBuildDate><item><title>MiniBrew: Brewing beer with Python</title><link>https://pyvideo.org/europython-2016/minibrew-brewing-beer-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Francisco Igual - MiniBrew: Brewing beer with Python
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/minibrew-brewing-beer-with-python"&gt;https://ep2016.europython.eu//conference/talks/minibrew-brewing-beer-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Dutch startup MiniBrew intends to disrupt the beer market by
introducing an easy-to-use beer brewing machine controlled by a mobile
app and communicating with a Python backend. Users want real-time
insights in their brewing process, which presented some challenges in
terms of architectural design. In this talk Elements Interactive's
Chesco discusses best practices and pitfalls of the IoT architecture
of MiniBrew by diving into message queues, protocol buffers and full-
session logging.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The number one alcoholic drink in the world is undoubtedly beer. With
the rise of craft beers, also homebrewing has become very popular in
recent years, although it is still a complex and expensive hobby.
Dutch startup MiniBrew intends to change that with their revolutionary
beer brewing machine, which is controlled by a mobile app and
communicates with a Python API backend.&lt;/p&gt;
&lt;p&gt;In this talk Chesco will share his ideas and experiences in utilizing
Python in the backend architecture for the MiniBrew project he and his
team are working on at MiniBrew's development partner Elements
Interactive.&lt;/p&gt;
&lt;p&gt;As many IoT projects, the ingredients for MiniBrew are a device with a
limited chipset and internet connection, a backend to store the data
acting as the mastermind and a mobile app to allow end users to
control the brewing process.&lt;/p&gt;
&lt;p&gt;The fact that we want users to know in real-time how their beer
brewing process is doing presented some challenges which required us
to come up with a competitive architecture that would both give real-
time status updates and not saturate the server with continuous calls.&lt;/p&gt;
&lt;p&gt;Chesco discusses best practices and pitfalls in designing and
developing IoT architecture by diving into the RabbitMQ message
broker, the MQTT protocol and protocol buffers. He will focus on the
REST API and CMS site written in Python, elaborating on high frequency
data in the apps, scalability, full-session logging and overcoming
common architectural challenges.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Igual</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/minibrew-brewing-beer-with-python.html</guid></item></channel></rss>