<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nadezhda-mirgorodskaya.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-16T00:00:00+00:00</updated><entry><title>How I Learned to Stop Worrying and Love the BFG: Load Testing with a Touch of Python</title><link href="https://pyvideo.org/pycon-russia-2017/how-i-learned-to-stop-worrying-and-love-the-bfg-load-testing-with-a-touch-of-python.html" rel="alternate"></link><published>2017-07-16T00:00:00+00:00</published><updated>2017-07-16T00:00:00+00:00</updated><author><name>Nadezhda Mirgorodskaya</name></author><id>tag:pyvideo.org,2017-07-16:pycon-russia-2017/how-i-learned-to-stop-worrying-and-love-the-bfg-load-testing-with-a-touch-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk can be useful for all the listeners who face the problem of measuring application performance and capacity and decide which is the best tool for their needs. It's great when a simple tool like ab or wrk is enough to ensure your application performance. And what if you need a sophisticated scenario to test your service? What should you choose? JMeter because of hundred of plugins? Tsung because of easy scaling? Gatling because of support for different protocols? And why not use Python for load test scenario? I'll share the experience of load testing with Yandex Tank and BFG - load generator which supports user-defined scripts in Python. We'll focus on one recovery test realized with BFG. I'll show how Python scenarios can be used for load, performance and another non-functional testing. Why it helped to make load testing a part of a development cycle. And how BFG became more popular than jMeter in our daily practice.&lt;/p&gt;
</summary></entry></feed>