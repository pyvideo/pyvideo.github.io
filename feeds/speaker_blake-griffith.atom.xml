<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_blake-griffith.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-02-20T00:00:00+00:00</updated><entry><title>Using conda for development, continuous integration, and package distribution</title><link href="https://pyvideo.org/pycaribbean-2016/conda.html" rel="alternate"></link><published>2016-02-20T00:00:00+00:00</published><updated>2016-02-20T00:00:00+00:00</updated><author><name>Blake Griffith</name></author><id>tag:pyvideo.org,2016-02-20:pycaribbean-2016/conda.html</id><summary type="html"></summary><category term="conda"></category></entry><entry><title>Going parallel and larger-than-memory with graphs</title><link href="https://pyvideo.org/pygotham-2015/going-parallel-and-out-of-core-with-task-scheduli.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Blake Griffith</name></author><id>tag:pyvideo.org,2015-08-16:pygotham-2015/going-parallel-and-out-of-core-with-task-scheduli.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is an open source, pure python library that enables parallel
larger-than-memory computation in a novel way. We represent programs as
Directed Acyclic Graphs (DAG) of function calls. These graphs are
executed by dask's schedulers with different optimizations (synchronous,
threaded, parallel, distributed-memory). Dask has modules geared towards
data analysis, which provide a friendly interface to building graps. One
module, dask.array, mimics a subset of NumPy operations. With dask.array
we can work with NumPy like arrays that are larger than RAM and
parallelization comes for free by leveraging the underlying DAG.&lt;/p&gt;
</summary></entry></feed>