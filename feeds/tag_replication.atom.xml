<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_replication.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-20T00:00:00+00:00</updated><entry><title>Replica logica in PostgreSQL: il futuro è adesso</title><link href="https://pyvideo.org/pycon-italia-2018/replica-logica-in-postgresql-il-futuro-e-adesso.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Marco Nenciarini</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/replica-logica-in-postgresql-il-futuro-e-adesso.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A partire dalla versione 10, la replica logica entra nel core di
PostgreSQL, permettendo di replicare dati in maniera efficiente fra nodi
diversi. In questo talk vedremo come funziona questo metodo alternativo
alla replica fisica, quanto sia efficiente rispetto ad altri metodi di
replica e come, con qualche accorgimento, sia possibile avere lo stream
delle modifiche accessibile da Python. Naturalmente daremo anche uno
squardo al futuro, parlando dei miglioramenti che saranno inclusi in
PostgreSQL 11.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 15:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="postgresql"></category><category term="postgres"></category><category term="psycopg2"></category><category term="data-logging"></category><category term="replication"></category><category term="replica"></category></entry><entry><title>Data Integration in the World of Microservices</title><link href="https://pyvideo.org/pydata-berlin-2016/data-integration-in-the-world-of-microservices.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Valentine Gogichashvili</name></author><id>tag:pyvideo.org,2016-05-31:pydata-berlin-2016/data-integration-in-the-world-of-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;Since its launch in 2008, Zalando has grown with tremendous speed. The road from startup to multinational corporation has been full of challenges, especially for Zalando's technology team. Distributed across Berlin, Helsinki, Dublin, Hamburg and Dortmund — with nearly 1000 professionals strong — Zalando Technology still plans to expand by adding 1,000 more developers through the end of 2016.&lt;/p&gt;
&lt;p&gt;This rapid growth has shown us that we need to remain flexible about developing processes and organizational structures, to allow us to continue scaling and experimenting. In March 2015, our team adopted Radical Agility: a tech management approach that emphasizes Autonomy, Purpose, and Mastery, with trust as the glue holding it all together.&lt;/p&gt;
&lt;p&gt;To make autonomy possible, teams can now choose their own technology stacks for the products they own. Microservices, speaking with each other using RESTful APIs, promise to minimize the costs of integration between autonomous teams. In addition, Isolated AWS accounts run on top of our own open-source Platform as a Service (called STUPS.io), give each autonomous team enough hardware to experiment and introduce new features without breaking our entire system.&lt;/p&gt;
&lt;p&gt;One small issue with having microservices isolated in their individual AWS accounts: Our teams keep local data for themselves. In this environment, building an ETL process for data analyses, or integrating data from different services becomes quite challenging.&lt;/p&gt;
&lt;p&gt;PostgreSQL's new logical replication features, however, now make it possible to stream all the data changes from the isolated databases to the data integration system so that it can collect this data, represent it in different forms, and prepare it for analysis.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss Zalando's open-source data collection prototype, which uses PostgreSQL's logical replication streaming capabilities to collect data from various PostgreSQL databases, and recreate it for different formats and systems (Data Lake, Operational Data Store, KPI calculation systems, automatic process monitoring). The audience will come away with new ideas for how to use Postgres streaming replication in a microservices environment.&lt;/p&gt;
</summary><category term="stups.io"></category><category term="postgresql"></category><category term="replication"></category><category term="etl"></category></entry><entry><title>Getting ready for PostgreSQL 9.1</title><link href="https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Gabriele Bartolini</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="business"></category><category term="community"></category><category term="database"></category><category term="distributed"></category><category term="extensions"></category><category term="partitioning"></category><category term="postgresql"></category><category term="replication"></category></entry><entry><title>PostgreSQL - the database-sister of Python</title><link href="https://pyvideo.org/europython-2011/postgresql-the-database-sister-of-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Harald Armin Massa</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/postgresql-the-database-sister-of-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Harald Armin Massa - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is the updated and especially enhanced of the &amp;quot;Python and
PostgreSQL - a match made in heaven&amp;quot; talk of EP 2006, CERN, Switzerland.
PostgreSQL and Python share more then the first letter: their
communities have great similiarities; their development processes are
really comparable; their licenses and their openness to academics AND
business (on a technical and communitie perspective) are big pluses. We
will have a look at those similiarities and learn why PostgreSQL is
really the database sister to Python. There will be an overview of
PostgreSQL, information of how to connect PostgreSQL and Python; how
PostgreSQL streaming replication works and what it can do for you, how
PL/Python helps to have Web 2.5 JSON storage and handling right inside
PostgreSQL. We will show that YESQL is also a valid answer to many data
storage qeuestions.&lt;/p&gt;
</summary><category term="business"></category><category term="database"></category><category term="json"></category><category term="postgresql"></category><category term="replication"></category><category term="web"></category></entry><entry><title>Designing to Scale: The Story of ShootQ (#5)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing to Scale: The story of ShootQ&lt;/p&gt;
&lt;p&gt;Jonathan LaCour (ShootQ)&lt;/p&gt;
&lt;p&gt;ShootQ is a web-based studio management solution for professional
photography studios, designed to automate and simplify the task of
running a small business. In this talk, Jonathan LaCour, the CTO of
ShootQ, hopes to share his experience designing a web application that
can scale up to meet the demands of a rapidly growing customer base. The
talk will cover a variety of topics including TurboGears 2.0, WSGI,
horizontal and vertical scaling, database replication, load balancing,
deployment, and more.&lt;/p&gt;
</summary><category term="deployment"></category><category term="loadbalancing"></category><category term="pycon"></category><category term="pycon2010"></category><category term="replication"></category><category term="scaling"></category><category term="turbogears"></category><category term="wsgi"></category></entry><entry><title>What every developer should know about database scalability (#21)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--what-every-developer-should-know-abou.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jonathan Ellis</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--what-every-developer-should-know-abou.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What every developer should know about database scalability&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Ellis&lt;/p&gt;
&lt;p&gt;Caching, replication, partitioning, and distributed databases: how these
can (and can't!) help you scale your data.&lt;/p&gt;
</summary><category term="caching"></category><category term="distributeddatabases"></category><category term="partitioning"></category><category term="pycon"></category><category term="pycon2010"></category><category term="replication"></category><category term="scaling"></category></entry></feed>